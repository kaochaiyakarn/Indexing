linear types change world 
philip wadler university glasgow linear logic 
girard suggests new type system functional languages supports operations change world 
values belonging linear type exactly world duplicated destroyed 
values require counting garbage collection safely admit destructive array update 
linear types extend schmidt notion single threading provide alternative hudak bloss update analysis offer practical complement lafont holmstrom elegant linear languages 
old functional languages change world naturally cope changes state altering location memory changing pixel display sensing key pressed 
prototypical example consider world array 
array type arr mapping indices type ix values type val 
instance world mapping variable names values file names contents 
time things world find value associated index update index associated new value 
course possible model functionally just operations lookup ix arr val update ix val arr arr program interacts world form main args arr arr parameter list arguments command line second parameter old world result new world 
example program main files update stdout concat lookup files author address department computing science university glasgow qq scotland 
electronic mail wadler cs glasgow ac uk 
ifip tc working conference programming concepts methods sea israel april published broy jones editors programming concepts methods north holland 
performs operation cat unix writes file stdout result concatenating contents file named list files 
example uses list comprehension notation familiar languages miranda tur haskell hw 
lie 
completely basis unsatisfactory way modelling world 
allows operations duplicate world copy discard kill correspond intuitive understanding world world may change duplicated discarded 
discusses linear type system linear logic 
girard gir glt 
values belonging linear type exactly world duplicated discarded 
duplication helps guarantee efficient implementation 
example guarantees safe update array destructively overwriting index value 
similar efficiencies achieved updating value corresponds file system 
value represented linked list knowing holds pointer list may enable efficient re list cells 
discarding equally important 
implementations functional language essential recover space discarded counting garbage collection 
values linear type avoid overhead 
shall see doesn mean release storage linear value means allocation deallocation linear values explicitly indicated program text 
linear types enforce useful design constraints 
imagine denotational semantics programming language 
expect store duplicated discarded odd semantics 
giving store linear type guarantees properties 
similarly file system represented single value lines outlined useful give file system linear type 
things trap errors novice programmers throwing away entire file system 
early proposal haskell treated file system value 
rejected part mechanism linearity available 
system described divides types families 
values linear type exactly require garbage collection 
values nonlinear type may pointers require garbage collection 
pure linearity fact stronger constraint necessary 
ok value long value read value written destructively updated necessary guarantee single exists 
miranda trademark research software limited 
example cat program previously legal stands 
written main files 
concat lookup files update stdout allows multiple read accesses file system file files may occur parallel completed write access stdout 
language lazy 
exception construct completely evaluates term commencing evaluation term 
sequencing essential guarantee reads structure completed updated 
example unfortunate effect removing opportunity lazy evaluation cause reading inputs writing output act coroutines 
name single threading coined schmidt describe situation store denotational semantics satisfies duplication property gave syntactic criteria recognising occurs sch sch 
schmidt criteria say discarding property designed strict lazy language 
schmidt allows single threaded value store linear type system allows number different destructively updated arrays 
linear type system closely inspired schmidt 
particular construct added straightforward transform single threaded semantics doesn discard store equivalent program linear store type 
great deal gone compile time analysis determine destructive updating safe notably bloss hudak blo hud older analysis techniques determining list cells reused go back darlington burstall db 
analysis techniques advantage destructive updating inferred user indicates 
linear types user decide types linear explicitly 
appropriate 
conversely linear types advantage types user intention manifest 
analysis techniques small change program fooling analysis result unintended large change execution efficiency cause difficult trace 
type system monomorphic 
straightforward extend polymorphic language explicit type applications girard reynolds calculus gir gir rey rey rey 
clear extended common hindley milner damas inference system hin mil dm languages miranda haskell 
area research 
computer scientists struck potential type system girard linear logic 
elegant linear language developed lafont laf variant holmstrom hol 
systems amazing property value exactly garbage collection required 
true pointer value results computations shared 
fact sharing allowed called course types shared values dealt ways efficient ffl way represent shared value pointer closure 
lafont system implements values functional type holmstrom system implements values 
evaluating closure cause closure overwritten 
implementation call name callby need shared value recomputed time inefficient 
ffl second way completely copy shared value time copied 
lafont system implements values base type lists 
efficient method far efficient usual conception shared pointers 
worthy study systems unsuited practical 
system described inspired part lafont holmstrom differs ways ffl lafont holmstrom single family types augmented course type constructor 
system uses completely distinct families types linear nonlinear 
elegant means typing rules appear versions family 
means advantage unique linear types retaining efficiency sharing nonlinear types 
particular efficiency problems arise 
ffl lafont holmstrom syntaxes different lambda calculus non trivial translation required transform lambda calculus terms terms languages 
contrast traditional lambda calculus subset language described 
ffl lafont holmstrom analogue construct support useful ways structuring programs 
particular obvious way translate schmidt single threaded programs linear programs style lafont holmstrom straightforward translation type system 
type system loosely inspired linear logic developed hudak guzm hg 
developed concurrently independently exact form partly influenced 
goals ambitious result type system complex 
needed understand relation systems 
clear difference system guarantees duplication property discarding property system deallocation linear values explicit 
remainder organised follows 
section describes conventional typed language 
section modifies language linear types section adds back nonlinear types 
section introduces construct 
section presents extended example involving arrays showing implement interpreter simple imperative language 
section concludes 
conventional types section presents definition conventional typed lambda calculus linear types 
definition adapted linear types sections 
novel feature calculus section unusual form data type declaration 
unusual theorists practice quite similar form declaration languages miranda haskell 
assume fixed set base type declarations 
declaration takes form delta delta delta nkn new base type name new constructor names ij types called immediate components 
example declarations booleans lists val val base type bool true false list nil cons val list immediate components list val list type base type function type ranges base types range types 
term variable abstraction application constructor term case term fixpoint case delta delta delta nkn fix ranges variables range terms 
convention parentheses may dropped 

range assumption lists 
assumption list associates variables types write indicate variables typing assertion form asserts assumptions satisfied type type type system possesses unicity type typings derived rules shown 
usual rules take form number hypotheses line line drawn hypotheses satisfied 
rules concerning base types include additional hypothesis displaying declaration type shown box rule 
rules come pairs rule introduces function lambda expression rule eliminates function applying ki rule introduces value base type constructing ke rule eliminates value base type case analysis 
rules variables fixpoints var fix 
example function append lists written painful detail fix append list list list xs list ys list case xs nil ys cons xs cons append xs ys term typed type list list list linear types conventional type system just described occurrence variable assumption list read permission variable type furthermore number times zero 
arr unit valid typing assumption arr zero times 
similarly arr arr theta arr valid assumption arr twice 
key idea linear type system assumption exactly 
typings illegal 
approximation valid typing linear type system variable appears exactly linear types written differently conventional types 
base types written function types written gammaffi 
linear logic default assumption exactly assumption discarded duplicated written symbol linear types types chosen reflect 
new grammar types gammaffi grammar terms changed similarly case delta delta delta nkn var delta delta delta delta delta delta ki delta delta delta delta delta delta nkn ke delta delta delta nkn nkn case delta delta delta nkn ij fix fix conventional typing rules var gammaffi gammaffi delta delta delta delta delta delta ki delta delta delta delta delta delta nkn ke delta delta delta nkn nkn case delta delta delta nkn ij rules linear types fixpoints linear language 
linear value accessed exactly fix equivalent delta delta delta 
typing rules modified accordingly 
new rules summarised 
consider old var rule var assumption list unused typing longer legal 
new rule var single assumption left exactly right 
consider old rule variable appears may appear prohibited 
new rule gammaffi range assumption lists stands conjunction lists 
easy see variable occurs exactly variable occurs exactly variable occurs exactly ki rule modified refer assumption lists hand ke rule modified refer assumption lists assumption list branches case sensible exactly branch executed 
incidentally claim variable appears exactly approximate case term variable may appear exactly branch 
define familiar combinators writing abbreviations gammaffi gammaffi gammaffi gammaffi 
yielding typings gammaffi gammaffi gammaffi gammaffi gammaffi gammaffi gammaffi gammaffi gammaffi gammaffi gammaffi hand define kxy gammaffi gammaffi gammaffi 
kxy typings linear system discards duplicates generally term translates combination combinators typed system term requiring translation 
linear system operation introduces allocates value paired exactly operation eliminates deallocates value 
operations abstraction construction create values single exists 
may duplicated discarded elimination operations application case act values hold sole 
application storage occupied function may reclaimed case analysis storage occupied node analysed may reclaimed 
counting garbage collection required 
efficiency achieved restricting language severely variable bound exactly 
perfect variables corresponding say file system large array reasonable impose restriction variable containing say integer 
type system needs distinguish sorts values may duplicated discarded may extension subject section 
nonlinear types linear language previous section efficient lacking expressiveness 
recover power sensible programming language reintroduce types yields language families types linear types gammaffi nonlinear types values linear types may duplicated discarded values nonlinear types may linear type assumption form permission requirement variable exactly 
restrictive assumption 
may discard 
may duplicate 
nonlinear type assumption form permission zero times 
generous assumption 
may discard 
course 
may duplicate 
course 
similarly linear logic assumption may discarded duplicated form pronounced course 
warned formula gammaffi holds linear logic appropriate better guide gammaffi 
forms base type declaration linear nonlinear delta delta delta nkn delta delta delta nkn immediate components may types case nonlinear 
words nonlinear data structure contain linear components 
list nil cons val list list nil cons val list list nil cons val list ok list nil cons val list ok restriction easy understand 
value linear type accessed exactly 
say value nonlinear type contained pointer 
nonlinear value duplicated linear value accessed duplication virtually duplicated 
nonlinear value discarded linear value accessed virtually discarded 
nonlinear value may point linear value 
example fragment typed xs type list case xs delta delta delta cons xs case xs delta delta delta cons xs illegal declaration list linear type val bound value 
operation took advantage linear type reuse storage update destructively create side effect referential transparency 
fortunately linear type system disallows 
legal declaration type list nonlinear type val problem 
hand xs linear type list fragment illegal uses xs twice 
grammar types gammaffi type deemed linear nonlinear depending topmost constructor 
gammaffi linear 
gammaffi nonlinear 
grammar terms similarly extended 
term formers section added term formers section 
term type gammaffi term type typing rules consist additional rules 
mathematically notion values nonlinear type may discarded duplicated represented rules kill nonlinear copy nonlinear kill rule allows value type discarded copy rule allows value type duplicated long nonlinear type 
formulate copy rule neatly assumptions form allowed appear possibly multiple times assumption list nonlinear type assumption lists multisets sets 
note var rule applies linear nonlinear types 
nonlinear version function rule nonlinear identical old rule addition side condition requiring assumption list nonlinear 
assumption list nonlinear assumption kill nonlinear copy nonlinear nonlinear delta delta delta delta delta delta nonlinear ki delta delta delta delta delta delta nkn nonlinear ij ke delta delta delta nkn nkn case delta delta delta nkn ij fix fix rules nonlinear types nonlinear condition placed rule may linear nonlinear 
restriction follows principle established nonlinear value contain pointers linear values 
function value closure contains pointer environment binding variable nonlinear function introduced environment contains nonlinear types 
example linear type nonlinear 
typing 
easy exercise show typed linear value duplicated 
hand gammaffi 

ok places constraint assumption list second places constraint argument result type 
returning previous example version append function fix append list gammaffi list gammaffi list xs list ys list case xs nil ys cons xs 
cons 
append xs ys typed declaration list 
arguments linear argument cons cell cell may deallocated immediately 
requires modestly compiler notice best thing cell return free storage reuse building result 
moderately better compiler notice head cell may left unchanged 
tail cell needs filled result recursive call append fact recursive call return value exception nil little loop unrolling result efficient version append require modestly compiler writer notice 
read access order destructive updating value safe essential value update occurs 
linear type system enforced guaranteeing exactly value 
restriction stronger necessary 
perfectly safe value temporarily long exists update performed 
situation similar known readers writers problem access resource controlled 
processes may simultaneously read access process may write access process access read write resource 
sorts access modelled types 
linear type corresponds write access nonlinear type corresponds read access permission write unique permission read may freely duplicated 
new form term introduced granting read access 
evaluated similarly conventional term evaluated bound result evaluated extended environment 
differences garden variety 
variable nonlinear type variable linear type 
evaluation read access allowed value second evaluation carried completely evaluation commences called evaluation 
instance returns list elements list evaluated 
required order guarantee freed evaluation commences 
third constraints type possible component equal component read access component passed outside scope condition precise 
define components type base type components immediate components 
restrict attention case components type base types 
type corresponding nonlinear type derived follows 
linear base type defined delta delta delta nkn 
nonlinear base type defined delta delta delta nkn components recursively converted 
nonlinear base type identical type type ensure component linear 
guaranteed linear component corresponding nonlinear component component function type 
functions disallowed function term may component free variable 
holds say safe required typing rule 

safe example 
appears section 
easy allow read access variables simply take 
abbreviation 

arrays conventional arrays considering add arrays linear type system review arrays conventional type system 
array associates indices values 
fix index value types write arr type arrays indices type ix values type val operations interest arrays alloc arr lookup ix arr val update ix val arr arr alloc allocates new array entries set fixed initial value lookup returns value index array update returns array identical index associated value 
practice array type may parameterised index value types new array function may take additional arguments determine index bounds initial values simpler version suffices demonstrate central ideas 
section small interpreter shown running example 
written equational notation familiar languages miranda haskell easy translate equations lambda case terms 
interpreter read denotational semantics simple imperative language 
variable names identified type ix values stored variables identified type val stores map variable names values identified type arr data types correspond syntax expressions commands programs 
ffl expression variable constant sum expressions 
semantic function corresponding expression takes array value 
ffl command assignment sequence commands conditional 
semantic function corresponding command takes array array 
ffl program consists command followed expression 
semantics corresponding program value 
interpreter satisfies schmidt single threading criteria 
safe implement update operation way re uses store allocated array 
expected array represents store imperative language 
implementation determine safe implement update way 
succeeding sections show linear types purpose 
linear arrays framework linear type system place adding primitives arrays relatively straightforward 
section show add arrays expr var ix const val plus expr expr com asgn ix expr seq com com expr com com prog com expr expr expr arr val expr var lookup expr const expr plus expr expr com com arr arr com asgn update expr com seq com com com expr com com prog prog val prog expr com alloc simple interpreter read access 
leads small problem resolved read access section 
array type maps indices values 
array type linear written arr simplest version arrays index value types nonlinear written ix val require data type pairs val arr may declared val arr readability write val omega arr case operations linear arrays alloc arr lookup ix 
arr val omega arr update ix val 
arr 
arr val omega arr val alloc update operations 
new lookup operation passed sole array return array completes 
arrays duplicated array indexed lost forever 
linear type discipline requires values linear type explicitly deallocated purpose operation 
meaning operations explained terms old operations expr var ix const val plus expr expr com asgn ix expr seq com com expr com com prog com expr expr expr 
arr val omega arr expr var lookup expr const expr plus expr expr com com 
arr 
arr com asgn expr update com seq com com com expr com com prog prog val prog expr com alloc simple interpreter version follows alloc alloc old lookup lookup old update update old write program define new operations defined primitives 
definition lookup illegal linear appears twice right hand side definition illegal linear appears times right hand side 
new version interpreter linear array operations shown 
unfortunately second version little elaborate application lookup application expr requires additional plumbing pass unchanged array 
particularly unfortunate plus case definition expr possible evaluate summands parallel necessary specify order case linear type system linear forces linear order specified operations plus expr require 
section shows read access solve problem 
expr var ix const val plus expr expr com asgn ix expr seq com com expr com com prog com expr expr expr arr val expr var lookup expr const expr plus expr expr com com 
arr 
arr com asgn 
expr update com seq com com com 
expr com com prog prog val prog expr com alloc expr expr 
arr val omega arr expr 
expr simple interpreter version read arrays read access allowed array operations follows alloc arr lookup ix arr val update ix val 
arr 
arr val omega arr val type arr corresponds write access type arr corresponds read access 
alloc update operations just previous section lookup operation just originally conventional type system 
third version interpreter read access shown 
com semantic function structure version expr semantic function structure version 
particular spurious imposition evaluation order summands version gone away 
note type expr refers arr arr making explicit expr changes array passed 
unusual feature simple semantics effect discard store command executed expression evaluated resulting store store discarded value expression kept 
note discard rule mean store discarded simply store discarded explicitly 
result definition prog final program equivalent definition original 
depending point view difference may regarded drawback benefit 
arrays arrays briefly consider handle arrays arrays 
arr arr previous section arrays indexes type ix values type val arr arr arrays indexes type ix values type arr new feature values arr linear nonlinear 
operations type arr previous section 
addition operations arr alloc arr lookup ix arr arr update ix 
arr 
arr 
arr 
arr val omega arr val compute value store location writes 
lookup lookup update update remains done 
important questions ffl linear types fit hindley milner damas approach polymorphism type inference 
ffl linear types best support interactive functional programs 
ffl girard linear logic contains construct 
nice theoretical justification construct 
ffl deforestation wad linearity constraint blazed types described subsumed course types 
linear types aid program transformation 
practical experience required evaluate likelihood linear types change world 

discussions relating comments am grateful steve blott kei davis holmstrom paul hudak simon jones yves lafont simon peyton jones david schmidt glasgow fp group members ifip wg 
blo bloss path analysis order evaluation information optimize lazy functional languages 
ph thesis yale university department computer science 
bloss hudak young optimising compiler modern functional language 
computer journal april 
db darlington burstall system automatically improves programs 
acta informatica 
dm damas milner principal type schemes functional programs 
proceedings th annual symposium principles programming languages albuquerque january 
gir 
girard interpr etation elimination des coupures dans arithm etique ordre sup erieure 
ph thesis universit paris vii 
gir 
girard system variable types fifteen years 
theoretical computer science 
gir 
girard linear logic 
theoretical computer science 
glt 
girard lafont taylor proofs types 
cambridge university press 
hin hindley principal type scheme object combinatory logic 
trans 
am 
math 
soc december 
hol holmstrom linear functional language 
draft chalmers university technology 
hud hudak semantic model counting abstraction 
proceedings acm conference lisp functional programming august 
hg hudak guzm taming side effects single threaded type system 
draft yale university december 
hw hudak wadler editors report functional programming language haskell 
technical report yaleu dcs rr yale university department computer science december technical report glasgow university department computer science december 
laf lafont linear machine 
theoretical computer science 
mil milner theory type polymorphism programming 
comput 
syst 
sci 
rey reynolds theory type structure 
robinet editor proc 
colloque sur la programmation lncs springer verlag 
rey reynolds types abstraction parametric polymorphism 
mason editor information processing north holland amsterdam 
rey reynolds approaches type structure 
mathematical foundations software development lncs springer verlag 
sch schmidt denotational semantics programming language 
internal report csr computer science department university edinburgh 
sch schmidt detecting global variables denotational specifications 
acm trans 
programming languages systems 
internal report csr computer science department university edinburgh september 
tur turner miranda non strict functional language polymorphic types 
proceedings nd international conference functional programming languages computer architecture nancy france september 
lncs springer verlag 
wad wadler deforestation transforming programs eliminate trees 
european symposium programming lncs springer verlag 

