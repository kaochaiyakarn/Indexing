trees graphs defining semantics diagram languages graph transformation gregor engels university paderborn germany heckel university paderborn germany order define semantics diagram languages new techniques may developed established approaches denotational operational algebraic semantics programming languages 
due multi dimensional nature diagrams opposed linear structure programs new approaches graphs trees terms graph transformation provide underlying technology 
try substantiate claim reviewing important approaches semantics discussing applicability diagram languages 
keywords diagram languages semantics graph transformation important means communication language 
language natural human human communication artificial human computer computer computer communication 
general case speaking writing reading symbols language encountered processed sequentially 
human communication sequential nature 
important means human human humancomputer communication visual languages diagrams maps drawings languages basic symbols encountered sequentially seen glance 
due improved hardware technology research partially supported esprit working group 
proceedings informatics due usage modeling languages intuitively understandable non computer scientists artificial visual diagram languages gaining increased importance software development process 
definition sequential textual languages exists wellestablished methodology decades experience research 
aspects considered 
concrete syntax defines representation language sentences seen user including syntactic sugar keywords brackets 
syntax defines relevant logical structure sentences language 
semantics language defines meaning sentences 
distinction concrete syntax allows efficient internal representation sentences parallel external human readable form 
semantics agreed partners involved languages useless communication 
example case programming languages computer understand program way intended programmer 
syntactical definition semantics programming language precisely defined 
software design diagram languages primarily means communication humans project documentation contract customer developer cooperating development teams 
humans understand agree definition language 
ideally order understandable potential user language definition notation level abstraction similar language 
syntax semantics diagram languages specified visual diagrammatic way 
formalisms defining syntax visual languages see survey textual visual notation 
compared programming languages technology available defining semantics diagram languages developed 
think graphbased concepts play fundamental role development techniques comparable role trees terms programming languages 
aim relate established methodologies definition programming languages concepts field graph grammars graph transformation 
way provide systematic view existing graph approaches semantics diagrams 
section survey important techniques definition programming languages stressing fundamental importance trees terms representation programs 
section identify corresponding graph concepts defi engels trees graphs nition diagram languages 
conclude suggestions research 
definition programming languages trees section give brief survey techniques defining syntax semantics programming languages 
presentation tailored discussion section far providing complete picture field 
concrete syntax 
definition syntax artificial textual languages particular programming languages started historical john backus proposed international algebraic language soon evolved language known algol 
backus developed meta notation know formalism define context free syntax programming language 
generative definition programming language context free grammar allows representation language sentences derivation trees 
derivation trees heavily depend concrete structure grammar syntax trees focus essential structure language sentences 
general stated trees important means represent sentences textual languages implementation form algebraic terms mathematical reasoning 
semantics order define semantics programming language look set mathematical objects meaning function sentence program meaning determined object semantic domain different approaches defining semantics programming languages developed see overview 
de bakker subdivides follows 

denotational semantics approach introduced scott main principles 
syntactical part clearly separated mathematical structures domain interpretation syntactical elements mapped 
second approach compositional semantics complete program composed semantics program parts 
advantage context freeness reason type systems associate types syntactic entities provide typing rules order exclude meaningless programs 
restrictions specified context sensitive grammars disallow tree representation programs efficient parsing algorithms 
proceedings informatics 
structural operational semantics sos approach goes back plotkin 
origin traced back automata theory transition system 
consists set states set actions transition relation automata theory write transition sos oriented semantics fact written plotkin idea instantiate set states set terms set statements programming language 
transition read statement performs step turns statement may turn step formalism transitions turned especially fruitful study concurrency initiated milner ccs hoare csp 
particular allows fine grained specification transitions program composed elementary transitions individual language constructs 
alternative coarse grained approach operational semantics term rewrite rules transitions 
prominent representatives chemical machine cham rewriting logic equations addition rewrite rules order specify equivalences states associativity commutativity certain operations program composition 

equations algebraic semantics approach order axiomatize equivalences programs data structures program transformation correctness proofs 
theory built foundations universal algebra notions initial final algebra equational logic 
algebraic semantics turned quite valuable particular logical underpinning data types 
notice definition syntax approaches semantics terms trees predominant structure 
definition diagram languages trees graphs section motivate graphs representing diagram languages draw connections tree term techniques definition programming languages corresponding graph approaches 
concrete syntax case programming languages context free grammars sufficient describe useful approximation diagram language 
set class diagrams example engels trees graphs generated hyper edge replacement graph grammar number edges graphs generated grammar bounded 
reason visual language definitions resort non context free grammars cf 
:10.1.1.45.3015
consequence concept derivation tree representation process constructing sentence longer applicable 
fact order record history sentence generated context sensitive grammar directed acyclic graph dag required degree sharing depends number non terminals left hand side production 
syntax trees obtained derivation trees forgetting irrelevant nodes replaced syntax graphs 
notice observation independent kind grammar applies chomsky grammars graph grammars long usual concept non terminal 
literature graph grammars non context free grammars corresponding notions concrete syntax discussed mainly context visual language definitions see survey :10.1.1.45.3015
theoretical study grammars received relatively little attention 
see volume 
idea syntax simplified history generation sentence tightly connected grammars diagram languages uml descriptive approach meta modeling taken 
meta model specifies class syntax graphs schema type graph logical constraints 
approach simpler operational 
discussion assumption syntax diagram represented graph 
independent question class graphs defined 
semantics syntactic definition language definition semantics consists parts 
choose define semantic domain second provide mapping associating program meaning 
area graph transformation seen contributing task providing semantic domain model computation particular concurrent distributed systems see papers collected 
definition mapping received little attention 
describe approaches contribute problem 
guideline classification semantics programming languages described previous section 

little fundamental done subject denotational semantics diagrams see 
concrete approaches language translation code generation diagrams classified denotational 
mention attributed grammars order translate graphs sql queries hy proceedings informatics graph string grammar notation translating uml collaboration diagrams java 
general theory translation graph languages concept graph transductions 

nature graph transformation rewriting technique quite natural graph transformation systems operational semantics specification line cham rewriting logic approach 
rewriting system syntax graphs possibly extended state information seen high level interpreter implementation graph grammar formalism implementation language see volume example approach 
approach line sos paradigm proposed 
labeled graph transition systems defined labelled transition systems states graphs 
deduction rules graph transitions called graphical sos rules introduced order specify graph transition systems 
approach motivated aim defining operational semantics behavioral diagrams uml 

term rewrite rules seen implementation equational theory representing equivalence relation set terms graph transformation rules specifying equivalence graphs 
raises classical questions theory rewriting termination confluence orthogonality far studied depth term graph rewriting systems see survey 
relevance general case demonstrated see invited presentation gogolla workshop reduction equivalence rules uml diagrams 
summarizing evidence general idea graphs trees order define diagram language semantics may lead number interesting new approaches workshop 
boundary terms graphs strict 
fact ways representing graphs graph transformations equivalence classes terms term rewrite steps see 
expect inductive definitions graphs provide glue visual specification diagram languages existing tools tree term representations 
discussed application important methods defining semantics programming languages diagram languages 
basic idea replace terms trees fundamental engels trees graphs approaches graphs find instances resulting graph concepts literature 
turned syntax diagram languages active field applied graph transformation research semantics languages gained attention 
authors hope provide inspiration new research established methods semantics programming languages 
andries engels hybrid query language extended entity relationship model 
journal visual languages computing 
special issue visual query systems 
andries engels rekers represent visual specification 
visual language theory marriott meyer eds 
springer verlag pp 

backus syntax semantics proposed international algebraic language zurich acm conference 
international conference information processing paris pp 

ehrig conceptual model graphical editor genged visual definition visual languages 
ehrig pp 

taentzer minas sch application graph transformation visual languages 
ehrig pp 

courcelle graph expressions graph rewritings 
mathematical systems theory 
berry boudol chemical machine 
theoret 
comput 
sci 

bottoni parisi presicce formulae rewriting systems 
ehrig pp 

corradini heckel montanari graphical operational semantics 
proc 
icalp workshop graph transformation visual modelling techniques geneva switzerland 
volume 
corradini montanari algebra graphs graph rewriting 
proc 
th conference category theory computer science ctcs vol 
lncs springer verlag pp 

proceedings informatics corradini montanari rossi graph processes 
fundamenta informaticae 
de bakker semantics 
images swc research 
stichting mathematisch centrum pp 

computation tree transductions 
phd thesis university bremen germany 
kreowski habel hyperedge replacement graph grammars 
handbook graph grammars computing graph transformation volume foundations rozenberg ed 
world scientific pp 

ehrig engels kreowski rozenberg eds 
handbook graph grammars computing graph transformation volume applications languages tools 
world scientific 
ehrig engels kreowski rozenberg eds 
proc 
th int 
workshop theory application graph transformation paderborn november vol 
lncs springer verlag 
ehrig kreowski montanari rozenberg eds 
handbook graph grammars computing graph transformation volume concurrency distribution 
world scientific 
ehrig mahr fundamentals algebraic specifications equations initial semantics vol 
monographs theoretical computer science 
springer verlag 
engels sauer wagner uml collaboration diagrams transformation java 
proc 
uml int 
conference fort collins usa october france rumpe eds vol 
lncs springer verlag pp 

erwig syntax semantics visual languages 
journal visual languages computing 
gadducci heckel es bi categorical axiomatisation concurrent graph rewriting 
proc 
th conference category theory computer science ctcs edinburgh uk september hofmann pavlovic rosolini eds vol 
entcs elsevier science 
www elsevier nl locate entcs 
engels trees graphs gogolla parisi presicce state diagrams uml formal semantics graph transformation 
icse workshop precise semantics modelling techniques 
tech 
rep tum tu munchen 
gogolla richters equivalence rules uml class diagrams 
proc 
uml workshop 
muller eds universite de pp 

goguen thatcher wagner initial algebra approach specification correctness implementation data types 
current trends programming methodology iv data structuring yeh ed 
prentice hall pp 

hoare communicating sequential processes 
prentice hall 
hoffmann minas generic model diagram syntax semantics 
proc 
icalp workshop graph transformation visual modelling techniques geneva switzerland 
volume 
kobayashi adachi nce context sensitive graph grammar visual modeling languages 
proc 
icalp workshop graph transformation visual modelling techniques geneva switzerland 
volume 
marriott meyer wittenburg survey visual language specification recognition 
visual language theory marriott ed 
springer verlag ch 
pp 

meseguer conditional rewriting logic unified model concurrency 
theoret 
comput 
sci 

milner communication concurrency 
prentice hall 
minas hypergraphs uniform diagram representation model 
ehrig pp 

nielson nielson semantics applications formal 
wiley 
object management group 
omg unified modeling language specification 
www omg org 
plotkin structural approach operational semantics 
tech 
rep daimi fn aarhus university computer science department 
plump term graph rewriting 
engels pp 

proceedings informatics rekers sch graph grammar approach graphical parsing 
proc 
ieee symposium visual languages vl los alamitos ca ieee computer society press pp 

scott strachey mathematical semantics computer languages 
computers automata 
wiley pp 

tennent semantics programming languages 
prentice hall 
gregor engels heckel universitat paderborn fb mathematik und informatik str 
paderborn germany mail de 
