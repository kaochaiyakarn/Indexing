java pathfinder user guide klaus havelund nasa ames research center recom technologies moffett field ca usa havelund ptolemy arc nasa gov ase arc nasa gov havelund august java pathfinder jpf translator subset java promela programming language spin model checker 
purpose jpf establish framework verification debugging java programs model checking 
main goal automate program verification programmer apply daily need specialist manually reformulate program different notation order analyze program 
system especially suited analyzing multithreaded java applications normal testing usually falls short 
system find deadlocks violations boolean assertions stated programmer special assertion language 
document explains jpf 
contents specifications assertion methods 
error method 
print methods 
atomic execution methods 
non deterministic switch statements 
verification parameters code program example bounded buffer buffer class 
setting environment 
property specification 
predicting number objects created 
guided tour compiling executing translating program 
setting spin options 
model checking 
error messages 
verification experiment specifying invariants assertion code 
invariant main method 
directly assertion 
indirectly calling invariant method 
invariant thread 
features java translated compilation units 
new names 
predefined types 
subclassing 
variable declarations 
modifiers 
array declarations 
methods constructors 
modifiers 
overloading overriding 
recursion 
names called methods 
array argument return types 
actual parameters calls 
expressions 
names 
object instantiations 
assignment expressions 
unary expressions 
binary expressions 
ternary expressions 
statements 
switch statements 
continue statements 
labeled statements 
try catch statements 
manual describes java pathfinder jpf translator java promela programming language spin model checker 
purpose establish framework verification debugging java programs model checking 
tool named rover operating mars called mars pathfinder play words finds paths java program lead errors 
spin verification system supports design verification finite state asynchronous process systems 
programs formulated promela programming language quite similar ordinary programming language certain non deterministic specification oriented constructs 
spin model checker automatically determine program satisfies property case property hold generate error trace 
spin finds deadlocks 
significant subset java version supported jpf dynamic creation objects data methods class inheritance threads synchronization primitives modeling monitors synchronized statements wait notify methods exceptions thread interrupts standard programming language constructs assignment statements conditional statements loops 
translator prototype misses features packages overloading method overriding recursion strings floating point numbers thread operations suspend resume control constructs continue statement 
addition arrays objects java modeled promela arrays obtain efficient verification 
translate predefined class library 
note features avoided small modifications input code 
addition tool currently improved cover java 
despite omissions expect current version jpf useful large class software 
front translator checks program allowed subset prints error messages 
translator developed common lisp having java parser written front 
description application jpf game server 
manual written previous knowledge spin model checker needed 
needed spin technicalities described document 
manual organized example buffer program follows 
section describes formal specifications properties stated assertions java code 
section describes guide model checker efficient job estimating objects created class 
section describes example program specification 
section describes step step interaction system needed order model check java program 
section gives examples errors seeded example program expected response jpf 
section says bit specifications particular class local invariants specified 
section describes parts java currently translated 
specifications described java program annotated assertions stating boolean properties satisfied certain places code 
jpf examine thread interleavings trying violate assertions 
addition assertion violations jpf look deadlocks 
typical deadlock situation example threads try lock resources suppose locks locks tries lock tries lock deadlock situation arisen 
jpf detect situations kind independent assertions stated 
cases assertion violation deadlock spin produces error trace showing corresponding promela program reaches error state initial state 
currently automatic mapping back java traces promela traces hard read promela traces provided set print methods print essential information program execution 
information printed spin graphical message sequence charts illustrated 
assertions print statements written java code calls methods defined verify class shown 
verify class contains methods turning java code atomic blocks executed interleaving threads contains method achieving non determinism 
methods class described 
generally methods verify class defined static means called just prefixing method class name verify assert 
instantiating class object 
furthermore bodies methods importance verification bodies empty changed programmer different 
contents importance running program java virtual machine may value normal testing 
note allowed add new methods verify class change signatures number arguments types existing methods 
verify class included java program case methods called 
distribution 
assertion methods class contains overloaded assert methods boolean argument string boolean argument 
purpose methods check argument condition evaluates true place call 
string serves documentary purpose get printed message sequence chart case condition violated 
examples calls verify assert count verify assert count count verify assert count error method cases programmer knows control reaches certain part code error occurred 
point call error method unconditionally signal error causing documentary argument text string printed message sequence chart 
statements logically equivalent verify error zero verify assert zero class verify public static void assert boolean system println assertion broken public static void assert string boolean system println assertion broken public static void error string system println error public static void print string system println public static void print string int system println public static void print string boolean system println public static void public static void public static int random int max java util random random new java util random int random return max verify class print methods mentioned earlier verify class provides collection print methods print information spin message sequence charts illustrate error traces 
methods takes string argument printed addition methods take value printed integer boolean 
examples calls verify print method halt called verify print value temp verify print temperature ok temp note boolean printed false true 
atomic execution methods situations may needed cut search space order verify program reasonable space time 
code surrounded calls methods executed atomic mode interleaving threads allowed 
example illustrates initialization array atomic public void initialize verify verify note making code execution atomic way typically cuts state space may remove possibility certain interleaving errors occur 
safe apply code effects local variables accessible threads 
unsafe case technique may useful hunt error suspicion simply doing various kinds experiments model big efficient verification 
difference methods synchronized keyword java thread execution atomic respect single object 
contrast code executed atomically respect program 
non deterministic switch statements random method allows writing non deterministic switch statements 
returns random number max numbers included 
called switch statement follows switch verify random case true break case true break case true true break executing program entries non deterministically chosen due coding random method 
translating jpf non deterministic construct generated 
translation matter argument random method absolutely effect translation executing program 
note switch statement generally supported get normal meaning branching expression verify random 
verification parameters code java program may create arbitrary number objects declared classes 
model checker allows objects class created stated parameters class user described 
suppose program contains classes 
suppose furthermore expect objects created class object created class objects class 
specify parameters class done constants size size specify estimates number objects created classes 
size default need stated stating reduce size pre declared data area class 
class parameters static final int size static final int size parameters class program example bounded buffer jpf illustrated analyzing complete small non trivial java program 
program included examples distributed described specification desired properties 
program contains error detected tool 
order generate error traces message sequence charts verify print 
statements inserted relevant places code 
buffer class java program interested verifying properties bounded buffer represented single class 
object class store objects kind objects subclasses general top level class object 
shows declared interface class 
contains put method get method halt method 
typically producer threads call put method consumer threads call get method 
halt method invoked producer inform consumers longer produce values buffer 
consumers allowed empty buffer safely halt consumer calls get method halt method called buffer empty exception object class thrown 
class exception class subclass class throwable 
particular class exception subclass throwable 
class extends exception interface public void put object public object get throws public void halt buffer interface contains buffer class annotated line numbers 
class declares array length hold objects buffer 
addition array couple pointers declared pointing free location pointing object returned get method 
variable usedslots keeps track current number elements buffer 
variable halted true halt method called 
methods class synchronized note synchronized keyword 
methods exclusive access object executed 
methods called buffer object thread buffer gets locked serve thread unlocked method call 
put method takes parameter object stored buffer return value void 
enters loop testing buffer full having elements case calls built wait method 
calling wait method synchronized method suspends current thread allows threads execute synchronized methods object 
thread call notify method wake arbitrarily chosen waiting thread continue past wait call 
notifyall method wakes waiting threads 
put method gets past loop known buffer free space insertion new object completed 
case buffer fact empty waiting consumers notified 
get method little bit complicated takes account buffer halted 
basically wait buffer return element buffer empty time halted 
case 
class buffer implements static final int size 
protected object array new object size 
protected int putptr 
protected int 
protected int usedslots 
protected boolean halted 
public synchronized void put object 
usedslots size 
try 
verify print producer wait 
wait 
catch ex 
verify print put putptr 
array putptr 
putptr putptr size 
usedslots notifyall 
usedslots 


public synchronized object get throws 
usedslots halted 
try 
verify print consumer wait 
wait 
catch ex 
halted 
verify print consumer gets halt exception 
new 
throw 

verify print get 
object array 
array null 
size 
usedslots size notifyall 
usedslots 
return 


public synchronized void halt 
verify print producer sets halt flag 
halted true 
notifyall 

buffer class thrown 
buffer element returned producers notified buffer full case may waiting 
setting environment order verify properties class looking complete application occurs create small application buffer 
say set environment consisting number threads accessing buffer prove properties small system 
regarded unit testing buffer 
concretely shall define thread classes producer consumer class start system shown main method 
class main public static void main string args buffer new buffer producer new producer consumer new consumer main program order illustrate translator capabilities translate inheritance define objects stored buffer see 
class attribute defined contains integer variable 
constructor method name class takes parameter stores variable 
class attrdata extends class field defines constructor takes parameters calls super class constructor parameter 
class attribute public int attr public attribute int attr attr attr class attrdata extends attribute public int data public attrdata int attr int data super attr data data attribute attrdata classes producer consumer threads going buffer defined figures 
producer class extends thread class means run method executed object class started start method 
seen constructor class fact calls start method addition storing locally buffer elements produced 
run method adds attrdata objects buffer attributes order squares data calls halt method buffer 
consumer class extends thread class 
run method stores received objects received array 
note receiving loop written inside try construct catches prevents going 
class producer extends thread static final int count private buffer buffer public producer buffer buffer start public void run int count attrdata ad new attrdata buffer put ad yield buffer halt producer class property specification assertions state properties want verify 
assertion states consumer receives exactly elements buffer 
second assertion loop states received elements correct ones wrt 
attr value 
addition assertions system look deadlock situations need explicit specification user 
predicting number objects created seen producer creates attrdata objects 
default number objects created need specify new limit 
done parameters class 
class consumer extends thread private buffer buffer public consumer buffer buffer start public void run int count attrdata received new attrdata try count received count attrdata buffer get count catch verify print consumer ends verify assert count count count producer count int count verify assert wrong value received received attr consumer class class parameters static final int parameters class guided tour section describes model checks java program 
reader assumed know generally writes compiles executes java programs 
addition system installed described installation guide 
means basically scripts available ffl graphical interface spin 
ffl jpf java promela translator 
compiling executing translating program java program stored file form java 
compile program check valid java program place javac java compilation applied purpose type checking program translator applied translator assumes formed java program 
try execute program typing java main result java main put get consumer wait put get consumer wait put get consumer wait put get consumer wait put get consumer wait put get consumer wait producer sets halt flag consumer gets halt exception consumer ends see verify print statements code print standard output program terminates normally 
note due non deterministic scheduling solaris threads java threads mapped java virtual machine version newer execution may fact choose different path break assertion program 
chance low measures 
chance catching error normal testing equally low 
try see break assertion executing program times 
translate program promela type jpf note give java suffix 
call translate file java promela program written file spin file loaded 
describe set load model check program spin 
setting spin options called follows result spin window pops shown body window initially empty 
interface spin interface 
load translated promela program select file reopen 
result window shown 
spin main window time spin window appears number options set model checking started 
shall go options 
click run button menu possibilities appear ffl set simulation parameters ffl set verification parameters ffl re run verification click run set simulation parameters 
brings window shown 
change field data values panel field shown 
avoid slow simulator printing error traces generated model checker 
click cancel button option set specified 
spin simulation options spin window click run set verification parameters 
brings window shown 
turn report unreachable code option shown 
spin verification options click set advanced options 
create window shown 
enter extra run time options field shown 
activate compression 
remove verification option windows hitting respectively cancel set 
set options 
shall just mention parameters may importance 
spin advanced verification options bitstate option turned 
cause states ignored model checking reduce time memory consumption 
course errors may caught 
option model big verification 
second options safety assertion violations invalid deadlocks may turned 
example may want look deadlocks ignoring assertions program 
third experiment physical memory available estimated state space size maximum search depth 
explain buttons get explanation 
model checking activate spin model checker click run re run verification spin window 
spin compile promela program program executed model checking 
compilation takes place small window pops text please wait compilation executable produced spin completes 
window disappears model checker starts executing generated program 
terminates window verification result appears shown 
case says top line assertion violated states errors 
errors errors printed 
error case extra window pops shown suggests actions taken point 
spin created error trace leading initial program state state violating assertion 
shall simulate error trace 
hit run guided simulation 
create window shown 
hitting run button window cause error trace executed simulated verify print statements cause printing graphical message sequence chart shown 
message sequence chart interpreted follows 
producer center vertical line puts values buffer positions 
calls wait method 
consumer gets value position notifies producer indicated red arrow 
consumer gets remaining values waits 
producer puts fourth value position recall buffer circular producer puts sixth value position notifies consumer 
producer sets halted flag 
consumer calls get method condition halted line halted spin error report assertion violated actions suggested spin evaluate true exception thrown 
consumer get value 
correct code line usedslots may want correct program try inserting errors ones suggested section 
note java program contain verify print statements get printed message sequence chart 
spin print promela error trace window shown promela trace hard human relate back java program recommended source information 
error messages program compilation successful jpf may yield error messages 
sources 
simulation choices program may valid java program valid java program 
error message printed case 
basic difference java java new notion inner classes 
jpf handle inner classes 
second case program valid java program translator checks subset translated 
error messages printed file promela program normally written 
just click reopen button spin window usual load result translation 
error messages appear clearly loaded file 
example suppose write java program containing class definition class operators int public void int assignment operator supported translator 
translating clicking reopen spin window contents window appear shown 
error indicated class occurs case occurs method method 
message sequence chart assertion violation error messages outside translated subset verification experiment order illustrate effectiveness jpf spin course seeded errors program shown error analyzed incorrect program jpf 
corrected program indicated section changing line usedslots yields correct program starting point 
result experiment shown table 
error give line numbers changed referring new contents lines 
example error obtained changing line protected int putptr initializing 
error seeded program start 
results applying jpf shown fourth column 
result applying spin model checker promela code generated jpf 
possible outcomes deadlock assertions violated referring occurring count referring second received attr 
point errors caught 
columns show result running modified java program versions java virtual machine jvm order see plainly executing program highlight errors seeded 
jvm version older version deterministic 
means executing multi threaded program times typically yields result time 
jvm newer version native threads java threads mapped solaris threads 
version non deterministic potentially yielding different results different runs multi threaded program 
program run times numbers indicate percentage runs highlighted error deadlock assertion violation thrown nullpointerexception 
runs model checking jvm runs executed sun ultra sparc mb main memory solaris operating system version 
running spin model checker promela code generated jpf typically half second find error explored states similar number transitions 
cases error approximately states transitions explored seconds 
errors special marked sense really errors environment described section 
environment creates consumer errors manifest needed create consumers shown class main public static void main string args buffer new buffer producer new producer consumer new consumer consumer new consumer addition consumers assertions sense deleted 
just looking deadlocks 
table rows errors show result verifying executing changed multi consumer environment 
verification error needed minutes exploring states transitions deadlock 
verified scaled version error buffer size producer producing values 
deadlock model checker minute exploring states transitions 
table verification results nr 
line modification changed jpf jvm jvm protected int putptr protected int usedslots usedslots size usedslots putptr putptr size array putptr putptr size putptr putptr usedslots size notifyall remove usedslots notifyall usedslots usedslots notifyall usedslots notify usedslots size notify usedslots usedslots halted usedslots notifyall remove usedslots size notifyall usedslots usedslots size notifyall usedslots remove halted true notify remove notifyall specifying invariants described section java program annotated assertions placed code relevant positions 
execution model checker example hits assert statement condition checked 
assertion checked gets turn execute 
suppose want state general invariant part variables program 
suppose example want verify value variable usedslots buffer class 
equal wrong 
shall see solutions specify verify 
assertion code solution follows standard strategy inserting assertion code variable usedslots incremented illustrated 
changed added line begins symbol 
public synchronized void put object usedslots size try verify print producer wait wait catch ex verify print put putptr array putptr putptr putptr size usedslots notifyall usedslots verify assert usedslots usedslots invariant assertion put method solution advantage soon assertion broken broken model checker detect 
slight advantage wrt 
verification time locate error 
generated error trace typically shorter alternative techniques described 
disadvantage technique course variable updated 
case complicated invariants involving variable may messy error prone 
remaining solutions disadvantage may require time locate error 
invariant main method alternative solution place assertion main method having started threads 
ways doing described 
directly assertion illustrates assertion inserted main method objects created threads started 
assertion refers variable usedslots refers variable object way works follows 
main method start threads continue thread running parallel threads 
particular ready execute assert statement time 
model checker execute state 
assertion function invariant hold time 
class main public static void main string args buffer new buffer producer new producer consumer new consumer verify assert usedslots usedslots invariant assertion main method disadvantage technique state contents buffer class revealed main program example works variable usedslots accessible outside class 
case protected variable visible package 
private technique 
solution solves problem just efficient 
indirectly calling invariant method order invariant local class state method defined class call method main method 
illustrated 
note name invariant method contain assertions 
define invariant methods call convenience 
class buffer implements static final int size protected object array new object size protected int putptr protected int protected int usedslots protected boolean halted public void invariant verify assert usedslots usedslots 
class main public static void main string args buffer new buffer producer new producer consumer new consumer invariant invariant method call main method advantage method invariant really local class 
vantage needs call invariant method main program means buffer object visible main program 
solution solves problem 
invariant thread final solution consists defining buffer class extension thread class define required run method contain call invariant method 
shown 
shows buffer class extended invariant method run method calls invariant constructor starts thread 
buffer object created new method thread started time may check assertion 
invariant methods defined called 
write assertions directly run method 
class buffer extends thread implements protected object array new object size protected int putptr protected int protected int usedslots protected boolean halted public void invariant verify assert usedslots usedslots public void run invariant public buffer start 
invariant thread disadvantage technique works passive classes extensions thread class 
features java translated jpf translates subset java section identifies features translated devoted subsection 
java turn subset java addition provides things inner classes 
consequently jpf example translate inner classes 
relatively short description java extension java 
translator print error messages java program translated subset 
cases error messages printed features translated method overloading method overriding method recursion 
spin syntax checker complain reject translated promela program 
spin error messages may easily related java program preferably human inspection features 
compilation units java program consist single package 
packages user defined predefined java packages java lang allowed 
consequently import declarations allowed 
consequence class names refer user defined classes predefined classes object thread exception 
new names user defined name underscore 
reason internal names generated translator 
predefined types primitive types allowed char float double 
type string furthermore allowed 
literals types allowed occur program 
subclassing class declaration form class extends superclass 
superclass user defined class pre defined java classes thread exception 
variable declarations modifiers native modifier allowed instance variable declarations 
array declarations arrays dimensional dimension declaration time terms integer literal alternatively terms array initializer examples static final int size int ia new int object oa new object size byte ba note constant static final define size array constant defined terms constants defined directly representing integer literal case note restriction constants defining array dimensions 
illegal illegal static final int size int new int array brackets occur combination type 
example declaration brackets associated array variable allowed illegal int new methods constructors modifiers method modifiers allowed native 
overloading overriding methods constructors overloaded methods overridden 
consequence constructor class 
subclass class constructor 
recursion recursive methods allowed 
names called methods user defined methods pre defined java methods called start sleep yield wait notify notifyall array argument return types type method constructor argument array type 
similarly result type value returning method array type 
actual parameters calls actual parameters method calls method calls 
expressions names names occurring expressions left hand sides assignment statements user defined 
object instantiations object instantiation new operator allowed association variable declaration assignment statement illustrated new declaration new assignment statement similarly array instantiation new operator occur array declaration discussed section 
assignment expressions assignments allowed expressions 
example allowed illegal unary expressions unary expressions allowed illegal expr expr expr expr expr allowed statements 
binary expressions binary operators allowed illegal 
instanceof ternary expressions ternary expressions form expr expr expr allowed 
statements switch statements entry statement switch statement exit break return example program switch case case case true break default false statement assign true near zero gamma false 
remove break statement value gamma assign true false resulting false 
switch statement said fall case second case 
behavior supported translator insert break statements 
continue statements continue statements allowed 
labeled statements labeled statements allowed 
try catch statements catch try statement allowed catch exceptions user defined exception classes exceptions classes exception thrown method 
arnold gosling 
java programming language 
addison wesley 
flanagan 
java nutshell 
reilly may 
second edition updated java 
gosling joy steele 
java language specification 
java series 

havelund lowry penix 
formal analysis space craft controller spin 
proceedings th spin workshop paris france november 
havelund 
model checking java programs java pathfinder 

appear international journal software tools technology transfer 
havelund 
applying model checking java verification 
describes application jpf game server 
appear proceedings th spin workshop toulouse 
holzmann 
design validation computer protocols 
prentice hall 
spin freely available downloaded netlib bell labs com netlib spin html 

