binary decision diagrams enabling technologies formal verification randal bryant carnegie mellon university pittsburgh pa randy bryant cs cmu edu www cs cmu bryant ordered binary decision diagrams obdds widespread cad applications formal verification logic synthesis test generation 
obdds represent boolean functions form canonical compact practical cases 
generated manipulated efficient graph algorithms 
researchers tasks expressed series operations boolean functions making candidates obdd methods 
success obdds inspired efforts improve efficiency expand range applicability 
techniques discovered representation compact represent classes functions 
led improved performance existing obdd applications enabled new classes problems solved 
provides overview state art graph function representations 
focus advances particular importance formal verification cad applications 

idea representing boolean functions decision graphs long heritage akers seminal widespread data structure symbolic boolean manipulation started formulation set algorithms constructing operating data structures 
key algorithmic formulation imposition ordering requirement variables path root leaf occur fixed order 
activity involving bdds widespread :10.1.1.119.326
numerous applications especially cad area 
refinements data structure manipulation algorithms yielded improved time memory performance 
basic ideas bdds extended allow efficient representation classes functions 
unfortunate byproduct dynamic diverse research community area proliferation names terminology leading alphabet soup acronyms 
partial list obdd fbdd fdd hdd tdd 
keeping track research sponsored wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number 
example obdds 
dashed solid line indicates branch decision variable 
developments relate challenging task 
advances area graphbased function representations 
impractical chronicle developments highlight particularly strong impact especially area formal verification 

background represents function graph node labeled function variable 
illustrates bdds representing functions left right symbols indicate boolean respectively 
node outgoing edges corresponding cases variable evaluates shown dashed line shown solid line 
terminal nodes shown boxes labeled possible function values 
variables function value determined tracing path root terminal node appropriate branch node 
bdds obdds 
consider variables ordered path root leaf encounters variables ascending order 
applying set reduction rules possible reduce obdd canonical form unique representation particular variable ordering 
operations boolean functions implemented simple graph algorithms operate obdd representations 
examples include determining functions equivalent generating function corresponding functions determining size set function 
algorithms time space complexities polynomial sizes operand graphs 
property bdds generated obey single variable ordering canonical form making suitable arguments subsequent operations 
problem domain data represented encoded boolean functions 
task expressed sequence steps involving operation bdds 
example consider task generating bdd representations output functions combinational circuit 
variables defined primary inputs bdds functions denoted variables having single nonterminal node generated 
circuit evaluated symbolically generating bdd gate output applying gate operation bdds representing gate inputs 
evaluation proceeds topological order network bdds primary outputs generated 

dynamic variable ordering obdds user select total ordering function variables 
applications single ordering functions represented making feasible combine compare different functions 
practitioners finding suitable variable ordering critical ordering yield compact representations reasonable memory requirements poor exceed physical memory limits largest workstations 
point performance unacceptable due severe thrashing virtual memory system 
discusses variable ordering issue presents rules thumb manually choosing obdds popular development heuristic methods automatically generating ordering information application 
example combinational circuit heuristic methods generally find ordering variables representing primary inputs primary output functions representations 
applications analyzing sequential circuits proved amenable approach 
furthermore approach yields static ordering application start finish 
practice ideal ordering may change application moves different phases computation 
new application requires new heuristic method choose appropriate variable ordering problem description 
dynamic variable ordering method overcomes limitations 
application proceeds global multi rooted bdd maintained representing functions interest single variable ordering 
periodically program attempts reorder variables graph reduce memory requirement 
reordering proceed background direct involvement application program 
dynamic reordering adapt changing functions represented works application 
key success dynamic variable reordering ease integrated existing bdd packages 
swapping adjacent variables bdd 
exchange implemented altering incoming pointers 
example package described functions denoted pointers nodes global bdd 
count maintained detect pointers eliminated node storage reclaimed 
garbage collection performed background periodically 
time possible determine number pointers node pointers located 
implementation performs variable ordering conjunction garbage collection 
program periodically attempts reduce storage requirement rearranging global bdd new variable ordering reclaiming unused node storage 
reorders variables performing series swaps adjacent variables 
swapping reclaiming require altering external pointers global bdd proceed effect application occasional reduction performance 
illustrates procedure swapping variables global bdd 
suppose original ordering left function indicated pointer node global bdd node labeled variable usual case node branches nodes labeled variable nodes branches subgraphs indicated swapping function indicated pointer node labeled variable node branches nodes labeled variable nodes turn branches subgraphs result indicated right 
note function indicated pointer node pointers existing functions shown remain 
introduced swapping take place changing external pointers global bdd 
shows increase graph size practice node reclaimed nodes may exist 
somewhat different transformations required node branches nodes labeled variables dynamic variable reordering proved especially useful verifying analyzing sequential circuits prove circuits realize equivalent state machines 
applications typically proceed series phases constructing representations state functions combinational logic possibly converting transition relation performing iterative computation reachable state set 
heuristic methods traversing gate example free bdd 
variables may occur order path 
level network find suitable ordering representing state functions ordering 
dynamic reordering allows representation adapt changing functions computation proceeds 
dynamic reordering slow application factor users difference success failure completing application 

relaxing ordering requirement selecting initial variable ordering changing dynamically application proceeds minimize amount memory obdds times total ordering requirement obdds unacceptable limitation 
example classes functions obdds size exponential number variables regardless ordering chosen 
exponential blowup severely limits problems sizes handled 
example class intractable functions representing outputs combinational multiplier 
successfully built obdds bit multiplier requiring nodes gigabytes 
increasing word size bit causes number nodes increase factor approximately powerful computers able get point 
obvious strategy eliminate relax variable ordering requirement 
example go opposite extreme removing restrictions variables occur graph 
variable may occur point path multiple times 
extreme desirable algorithmic properties obdds lost 
canonical form algorithms operations exponential worst case complexity 
prudent approach relax ordering requirement improve compactness representation eliminating desirable algorithmic properties obdds 
relaxation allow variables occur order path root terminal node 
bdds known free bdds time branching programs example shown 
wegener developed efficient algorithms representation 
cases require functions represented obey common ordering 
variable assignment resulting paths graphs contain variables order 
difference obdds simply variable ordering may differ variable assignment 
bern shown free bdds implemented simple extensions existing obdd package 
implementation reordering variables different variable assignments viewed transformation function input space 
operations performed functions independent transformation long functions transformed consistent way 
able show functions previously intractable handled easily modest performance gains obtained number benchmark circuits 
case multipliers unfortunately modest gains expected shown free bdd representation functions grows exponentially number variables 
early determine full impact relaxation ordering constraint 
allows bdds applied classes circuits previously experienced exponential blowup clear significant classes 
favor approach backward compatible obdds overhead caused generalization relatively low 

changing function decompositions approach obtaining compact representation boolean functions change interpretation nodes 
bdds decomposition boolean functions commonly called shannon expansion fact formulated boole 
function decomposed terms variable fx equation fx positive cofactor respect result replacing variable value 
similarly negative cofactor result replacing variable value 
observe terms equation evaluate 
words decomposition splits function separate cases variable evaluates 
descendants bdd represents boolean function node label outgoing edge directed subgraph representing fx path root terminal node simply successive cofactors function reduces constant value 
alternative function terms xor exclusive operation phi ffix fx phi ffix ffix denotes boolean difference function respect variable ffix fx phi equation commonly referred reed muller negative expansion equation referred positive expansion 
decompositions somewhat analogous taylor expansion continuous function describe function terms value fixed value combined function varies changes ffix 
variable takes values terms expansion required 
redundant test zero difference zero suppress reduction rules different rules apply bdds left right 
proposed reed muller expansion basis graph representation boolean functions yielding representation term ordered functional decision diagrams 
representation analogous obdds outgoing arcs node represent negative cofactor boolean difference function respect node variable 
examples graphs interpreted solid edge node indicating boolean difference 
interpretation example graphs denote functions phi left phi phi right 
properties common obdds representation canonical operations implemented polynomial complexity graph algorithms 
differences worth highlighting 
different reduction rule applied graph canonical 
rules classes graphs illustrated 
express conditions node eliminated graph incoming pointers directed child 
cases want transformation occur function independent node variable 
function independent variable cofactors satisfy fx difference satisfy ffix 
want transformation occur conditions illustrated left hand side bdds right hand side 
second evaluation function involves tracing single path 
particular case node variable value evaluate subgraphs take xor 
words compute positive cofactor function fx phi ffix evaluation performed time linear number nodes postorder traversal graph 
classes functions exponentially compact obdds reverse hold 
obtain advantages drechsler proposed hybrid form call ordered kronecker functional decision diagrams 
representation variable associated decomposition equations 
functions represented follow common variable ordering occurrence variable decomposition 
implement decomposition conjunction dynamic variable reordering 
time variables reordered program tries different decompositions variables attempting reduce global graph size 
experiments show average reduction graph size obdds set benchmark circuits 
early judge impact practical applications 
clear reduction obtained real life examples 
ideas changing interpretation nodes setting decomposition type independently variable major impact verifying arithmetic circuits discussed 

zero suppressed bdds developed variant bdds solving combinatorial problems 
zero suppressed bdds suitable applications solved representing manipulating sparse sets bit vectors 
suppose data problem encoded bit vectors length subset vectors represented boolean function variables yielding vector corresponding variable assignment set 
example consider problems involving sum products forms logic functions 
forms commonly represented sets cubes denoted string containing symbols 
example function phi represented cube set 
encode cubes bit vectors introduce pair bits cube position encodings denote symbols respectively 
represent cube set shown bit vectors 
observe example set bit vectors sparse ways 
set contains fewer possible bit vectors 
second bit vectors elements equal zero 
fact particular encoding cube symbols chosen purpose 
motivates choosing representation exploits forms sparseness 
zero suppressed bdds obdds reduction rule shown right hand side left 
node omitted setting node variable causes function yield 
representing sets bit vectors condition occurs having bit position implies vector set 
sparse sets condition arises frequently node eliminations possible 
examples graphs interpreted denoting sets left right 
observe function denoted subgraph depends context 
example right hand example edges leading terminal node labeled having different interpretation 
rightmost corresponds case middle case bottom case constraints placed variables 
sense reduction rule defines default condition variable occur path graph 
bdds default function value independent variable default variable 
shown number combinatorial problems canbe representation 
include classical problems level logic minimization techniques multi level minimization weak division 
shown reduce size representation set bit vectors obdds factor 
practice reduction large example numeric function representations 
represents function significant impact 

representing numeric valued functions building success bdds efforts extend concept represent functions boolean variables having non boolean ranges integers real numbers 
functions arise applications computing state probabilities sequential circuit spectral methods technology mapping integer linear programming verifying arithmetic circuits 
keeping variables boolean allows branching structure similar bdds 
challenge finding compact way encode numeric function values 

straightforward way represent numeric valued functions decision graph bdd allow arbitrary values terminal nodes 
call representation multi terminal bdd called arithmetic decision diagrams adds 
illustrates representation function result interpreting bits unsigned binary number 
observe evaluating variable assignment similar evaluation bdd simply trace unique path root terminal node determined variable values return terminal node value function value 
example illustrates inefficient representing functions yielding values large range 
case unsigned binary numbers length possible values representation exponential number terminal nodes 
applications number possible values small shortcoming acceptable 
applications simplicity representation similarity bdds viable candidates 

applications number possible function values high alternative representations devised try obtain compact form 
lai developed edge valued bdds incorporating numeric weights order allow greater subgraphs 
example representation function shown 
drawings edge weights shown square boxes edge box weight 
evaluating function represented involves tracing path determined variable assignment summing edge weights terminal node value 
seen example sum weighted bits represented having bit weight edge leading node labeled corresponding variable 
representation grows linearly number bits major improvement 
various schemes normalizing edge weights resulting graph provides canonical form function 
example standard formulation requires edge corresponding variable value node weight 
represent boolean functions requiring number nonterminal nodes corresponding obdd 
overhead storing manipulating edge weights somewhat efficient task 
similarly improve terms number nonterminal nodes somewhat higher overhead node 
cases important classes functions unacceptable complexity 
example important application numeric valued functions formally verifying arithmetic circuits compute functions addition multiplication division radix conversion 
application want express numeric values encoded operations words data 
example consider bit unsigned integers represented bit vectors xn gamma 
yn gamma 
view encoding numeric values gamma similarly seen represent encoding functions complexity linearly result applying addition subtraction words gamma represented linear sized 
representations multiplication delta exponentiation grow exponentially verifying arithmetic circuits limited relatively simple units adders alus comparators 

alternative approach representing numeric functions especially encountered arithmetic circuit verification involves changing function decomposition respect variables manner analogous 
resulting representation known binary moment diagram 
expressing functions having numeric range expansion equation generalized gamma delta delta fx delta gamma denote multiplication addition subtraction respectively 
note expansion relies assumption variable boolean evaluates 
pointwise decomposition 
moment decomposition function obtained rear ranging terms equation delta fx gamma delta fx gamma called linear moment respect terminology arises viewing linear function respect variables partial derivative respect interested value function values extend linear form 
negative cofactor called constant moment denotes portion function remains observe similarity moment decomposition reed muller decomposition equation 
node describes function terms moment decomposition respect variable labeling node 
example representation unsigned binary encoding function illustrated 
outgoing arcs node denote constant dashed linear moments solid function respect variable 
observe linear moment example function respect variable simply function decomposes bit weights 
property particularly suited representing arithmetic functions 
extension incorporate weights edges yielding representation called multiplicative 
edge weights combine multiplicatively additively 
word level functions gamma delta linear sized representations 
offer known representing arithmetic functions gain comes cost 
operations perform functions worst case complexity grows exponentially operand graph sizes 
practice algorithms quite efficient experience exponential cases arise various tactics 
addition represent boolean functions generally efficiently bdds 
fact cases representation boolean function exponentially larger bdd representation cases practice 
furthermore overhead representing manipulating edge weights high 
encounter large weights verifying bit multiplier code unbounded precision number representation 
adapting idea clarke developed hybrid term hybrid decision diagrams 
representation variable different decompositions including pointwise moment decompositions 

word level verification arithmetic circuits major success formal verification numeric valued functions verifying arithmetic circuits 
illustrates schematically approach circuit verification originally formulated lai 
goal prove correspondence logic circuit represented vector boolean functions specification represented word level function boolean functions enc enc enc bit level word level circuit specification formulation verification problem 
goal verification prove correspondence bit level circuit word level specification correspond outputs combinational circuit terms primary inputs outputs sequential circuit operated fixed number steps terms initial state input values step 
assume circuit inputs possibly initial state partitioned vectors binary signals 

set signals encoding function enc describing word level interpretation signals unsigned binary number 
encoding yields numeric value enc theta input word 
circuit implements set boolean functions inputs denoted vector functions 

typically circuit form network logic gates 
furthermore encoding function defining word level interpretation output 
specification word level function 
xk yielding numeric value numeric inputs 
task verification prove equivalence theta gamma 
delta gamma enc theta 
theta delta circuit output interpreted word match specification applied word interpretations circuit inputs 
provide suitable data structures form verification represent word level functions efficiently 
discussed limited relatively simple circuit functions 
contrast bdds represent bit level functions specification expanded bit level form 
done readily standard functions binary addition complex function binary bcd conversion difficult specify bit level 
straightforward approach verifying circuits construct function representations test equivalence equation 
construct representations boolean circuit functions bdds apply encoding function obtain word level representation circuit output 
derive representation word level specification applying operations specification word level input representations 
testing functions equivalence completes verification 
straightforward approach works circuits boolean circuit functions represented efficiently 
complex circuits multipliers radix converters functions intractable 
methods developed overcome limitation 
requires user partition circuit blocks having word level specification 
typical blocks include adders booth step units block verified method outlined word level circuit function derived block word level 
technique multipliers word sizes bits verified successfully far larger achieved approaches 
approach limitation applied circuits having relatively clean hierarchical structure understood user 
developed approach verifying multipliers require hierarchical partitioning 
directly construct representation word level circuit output theta gamma 
delta flat gate level representation circuit 
avoid complexity representing boolean circuit functions backwards circuit starting representation function theta represents circuit output signals 
program maintains representation circuit output terms set variables corresponding intermediate signal points circuit 
step replaces variables function representing logic gate driving signal 
process continues variables correspond primary inputs 

covered small fraction developments graph function representations material covered demonstrates types advances 
ideas dynamic variable reordering focus actual implementation algorithms 
key success ease integrated existing packages minimal rewriting application code 
ideas relaxing variable ordering changing variable decomposition attempt improve compactness representation boolean functions 
greatest successes methods integrated existing packages 
zero show utility tuning representation particular class applications 
success depends factors useful combinatorial problems expressed terms operations sparse bit vector sets sets represented efficiently form bdd nonstandard reduction rule 
application domains bdd representation adapted tuned 
interest numeric valued functions illustrates successful approach class application spill applications 
straightforward bdds may prove practical suitable tuning refinements representation lead major breakthroughs 
interesting speculate applications solved strategy 
interesting possibility combining different extensions refinements 
examples include incorporating compaction methods dynamic reordering setting decomposition type different variables independently 
area exploration find combinations 
example may prove desirable form hybrid bdds selecting different reduction rules different variables 
allowing data dependent variable orderings done free bdds done representations 
greatest area success bdds related structures formal circuit verification 
application requires exact results want show circuit operate correctly possible operating conditions 
approximate methods applications placement routing acceptable 
furthermore problems automatic test generation require finding solution solved efficiently combinatorial search formal verification establish correctness cases 
sense show solutions problem finding condition circuit fails 
providing complete representation circuit behavior compact manageable form bdds provide powerful approach formal verification known 
jain proofreading commenting manuscript 
akers binary decision diagrams computers vol 
june pp 

devadas ghosh boolean satisfiability equivalence checking general binary decision diagrams international conference computer design ieee pp 

pardo somenzi algebraic decision diagrams applications international conference computer aided design november pp 

bern efficient manipulation cad current limits nd design automation conference june pp 

brace bryant efficient implementation bdd package th design automation conference june pp 

bryant graph boolean function manipulation ieee transactions computers vol 
august pp 

bryant complexity vlsi implementations graph representations boolean functions application integer multiplication ieee transactions computers vol 
february pp 

bryant symbolic boolean manipulation ordered binary decision diagrams acm computing surveys vol :10.1.1.119.326
september pp 

bryant 
chen verification arithmetic circuits binary moment diagrams nd design automation conference june pp 

clarke mcmillan zhao fujita 
yang spectral transforms large boolean functions application technology mapping th design automation conference june pp 

clarke fujita zhao hybrid decision diagrams overcoming limitations international conference computer aided design november 
drechsler theobald becker efficient representation manipulation switching functions ordered kronecker functional decision diagrams st design automation conference june pp 

fujita fujisawa kawato evaluations improvements boolean comparison program binary decision diagrams international conference computer aided design november pp 

efficient boolean manipulation obdds extended ieee transactions computers vol 
october pp 

morita efficient construction binary moment diagrams verifying arithmetic circuits international conference computeraided design november 
schubert multilevel logic basedon functional decision diagrams automation conference pp 


lai sastry edge valued binary decision diagrams multi level hierarchical verification th design automation conference june pp 


lai pedram algorithms integer linear programming spectral transformation function decomposition ieee transactions computer aided design integrated circuits systems vol 
august pp 

malik wang brayton logic verification binary decision diagrams logic synthesis environment international conference computer aided design november pp 


zero suppressed bdds set manipulation combinatorial problems th design automation conference june pp 


binary decision diagrams applications vlsi cad kluwer 
breadth manipulation large binary international conference computer aided design november pp 

lower bound integer multiplication read branching programs symposium theory computing acm 
wegener theory zero suppressed bdds number knights tours technical report university dortmund 
wegener graph driven obdds new data structure boolean functions theoretical computer science 
dynamic variable ordering ordered binary decision diagrams international conferenceon computeraided design november pp 

