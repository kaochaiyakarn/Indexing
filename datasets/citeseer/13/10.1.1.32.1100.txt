points java general framework empirical comparison gregor snelting lehrstuhl ur universit passau fmi uni passau de points analysis java di erent points 
framework generalizes popular points algorithms generates set constraints full java bytecode 
framework exploits previously computed points sets xpoint iteration precise resolution dynamic binding 
compare implementations framework uni cation analysis 
turns contrast situation approaches running time subset algorithm precise 
uni cation method slowed inherent imprecision accumulates xpoint iteration 

points analysis static analysis computes pointer set objects may point runtime 
imperative languages points algorithms andersen algorithm steensgaard algorithm das algorithm investigated steensgaard algorithm considered fastest 
object oriented languages dynamic binding approximated fact dynamic binding analysed similar function pointers 
java situation di erent pointer arithmetics pointers pointers arrays di erent semantics type casts type safe dynamic loading classes quite common 
aim article generalize known points algorithms andersen steensgaard extensions full java exploiting java unique features 
provide empirical comparison methods 
small example illustrating careless treatment dynamic binding result points information 
program andersen algorithm compute initial points graph left 
naive treatment method calls assume call methods named static class subclasses targets call 
extend points graph possible target methods adding arcs model implicit assignments formal parameters return values pointers 
example implementations method included analysis calls resulting nal andersen graph seen middle nal steensgaard graph program seen right 
results example assumed point di erent objects obvious point object 
furthermore naive method assumes called fact point objects type typesafe language java call ignored 
fact nal steensgaard graph contains type incorrect edges new pointer access edges generate exception java safely ignored 
note consideration valid 
example demonstrates resolution method calls actual points sets target object considered 
call points set gives possible target objects call static lookup possible target objects identify possible target methods 
strategy lead smaller set target methods naive method turn increases precision fewer arcs added points graph 
example leads points graphs 
steensgaard graph contains type incorrect edges due symmetric treatment assignments 
contribution elaborate insights example 
generic framework java points analysis instantiated subset intraprocedural approaches style andersen uni cation intraprocedural approaches style steensgaard 
framework consists inference rules generate constraint system pointsto sets 
comprises full java language questions library treatment program analysis reasons readability pointers shown 
class object object class return class extends throw new class extends return 
new null new new 
try catch try catch new new new new new new new new new example java program points graphs naive treatment dynamic binding 
left initial andersen graph middle nal andersen graph right nal steensgaard graph 
new new new new new new final andersen left steensgaard right graphs improved resolution dynamic binding 
discussed 
precise approximation dynamic binding xpoint iteration exploits computed points sets call target object 
describe implementation speci instances framework 
empirical comparison show subset approach comparable performance uni cation approach course precise 
reason imprecision uni cation methods propagates xpoint iteration 
subset method legitimately called java andersen uni cation method called uses approach intraprocedural analysis uses xpoint iteration resolution dynamic binding 

points java points algorithms usually described terms points graph straightforward implementation points sets 
implementation extended versions java points graphs 
order idiosyncrasies points java clear rst formal description terms points sets provide inference system generates constraints points sets cmp 

sets tr set pointers object java obj set objects constructor call sites ass set assignments assignment written ass points set obj pointer tr 
basic rules intraprocedural points analysis follows 
assignment object pointer leads inclusion object points set ass obj pointer assignments treated di erently andersen steensgaard 
andersen requires subset relationship ass tr steensgaard merges points sets ass tr traditional algorithmic structure solve resulting constraint system seen constraints generated pass program collecting explicit implicit assignments steensgaard constraint system solved quasi linear time andersen requires iteration 
shapiro horwitz das points algorithms lie steensgaard anderson 
extensions stick general structure 
example das algorithm adapted java adding rule andersen scheme ass object nested object 
di erent runtime incarnations constructor call usual distinguished 
note ass contains implicit assignments assignments parameters pointers method calls 
assignments constraints algorithm points sets structure traditional points algorithms dynamically bound method calls assignments constraints algorithm points sets structure points algorithms java note steensgaard rule modi ed java order avoid type incorrect arcs points graph ass type type interprocedural analysis simply uses rules order handle assignments formal parameters return values pointers 
presence dynamic binding function pointers situation complex 
steensgaard algorithm extended function pointers additional xpoint iteration 
hind observed precise analysis function pointers requires extensions basic mechanism 
proposed points sets function pointers order determine possible call targets extend points graph targets 
java analysis method calls similar approach exploit computed points sets call target object 
possible target object set corresponding target method de nition determined target object static type 
call target method de nition treated usual way account implicit assignments formal parameters return values pointers 
assignments valid condition speci target object points set 
constraints resolution dynamic binding general form lookup ass called method lookup determines class contains appropriate de nition type program call leads conditional constraints lookup ass ass ass lookup ass ass lookup ass ass ass assignments generated rules generate additional set constraints andersen resp 
steensgaard rule 
note explicit generation assignments decouples interprocedural analysis choice intraprocedural algorithm 
note naive method generate assignments conditions generate assignments compared 
general conditional constraints generate assignments points relations naive method usually 
correctness constraints obvious 
order solve system conditional constraints additional feedback loop needed see points entries generate new constraints extend set assignments 
algorithm structure follows apply basic algorithm evaluate conditional constraints points graph changed 
generating constraints java bytecode java bytecode stable java source language programs available bytecode source form 
details constraint generating inference system bytecode 
due space limitations central rules full inference system including particular static calls exceptions 
general structure inference rules follows bytecode old stack constraints types new stack rules applied bytecode instructions sequential order generating constraints auxiliary information 
premises rule match speci bytecode instruction 
bytecode instructions refer stack elements abstraction jvm stack contents rules 
runtime stack values representation corresponding variable name cases extracted compiler variable table 
inference rule contains left part constraints generated bytecode instruction 
furthermore typings pointers reconstructed 
part displays modi ed stack bytecode instruction matching rule premise 
better readability conditional constraints split rules type stack information depend points information purely static factored separate rule 
inference rules constraint generation 
typical example consider rule virtual method call 
premise static part assumptions bytecode instruction signature method question 
addition premise names abstractions actual parameters stack 
static part states return value pointers names type 
bytecode matched inference rule modi ed stack parameter abstractions disappeared replaced return value 
course interesting part dynamic part generates assignments assumption object points set call object 
precisely form variable name taken stack see static part 
premise dynamic part determines corresponding method de nition static lookup 
generates formal actual parameter pair method pointer return value 
gives types callee pointer 
apply rules small program fragment bytecode 
stack generated assignments seen lower part 
application rule rst bytecode instruction results statements object created method int class bytecode address object type pointer default constructor method initialised program corresponding unconditional assignment generated 
assignment corresponding initialisation vari pathological examples reconstruction stack values lead combinatorial explosion due exponential number control ow paths program points 
practice happens 
alternative get rid phenomenon analyse source code bytecode 
able unconditional 
course interesting part invokevirtual instruction corresponding parameter entry stack 
application invokevirtual rule generates constraints consisting assignments additional type information 
note constraints mirror possibilities dynamic binding method putfield instruction generates unconditional assignment conditional assignment object pointed pointer contain eld 
note example program contains conditional expression generates stack entry version taken variable table possible control ows method entry call explored 
results top stack entries int 
int 
new resp 
new construction site 
explore rst alternative 
initial constraints points sets andersen algorithm follows int 
int int 

int 

object object 
int iteration nal results obtained int 
int int 

int 

object object 
int int 
object object 
int 
object object object object 
object object 
solution shows pointer point object call 
target method 
naive method call graph methods rapid type analysis unable exclude possible target 

program analysis native code reflection programs library functions source text available written java unanalysed functions 
popular way deal situation provide stubs functions source code fragments simulate points behaviour function 
ort stub implementation maintenance enormous 
alternative conservative approximation unknown bytecode 
unknown functions rare case non unique stack entries variants constraint system generated solved 
object creation new obj type assignment astore register ass register tr virtual call static part invokevirtual sig pr tr type virtual call conditional constraints invokevirtual sig lookup par ass ass ass tr type cls tr type data member access static part getfield tr type type data member access conditional constraints getfield ass tr type type data member store static part getfield tr type type data member store conditional constraints getfield ass tr type type array element store static part type ass tr type array element store conditional constraint type type ass tr type type cast static part checkcast null type tr type type cast conditional constraint checkcast type ass constraint generating rules bytecode instructions class object object 
class extends object object 
class class object void int new object new object new new dup invokespecial astore aload aload iload new dup invokespecial goto new dup invokespecial invokevirtual java lang object java lang object putfield return instruction stack rule application auxiliary information new int 
int 
obj typ int dup int 
int 
invokespecial int 
int 
ass astore int int 
ass aload int 
aload int int 
iload int int int int 
int int 
new int 
int 
obj typ int int int 
dup int 
int 
int int 
invokespecial int 
int 
ass int int 
invokevirtual object object object object 
typ object object object object object 
ptr typ object object 
object pt int object object object object object object 
ptr typ object object object object ass object object int 
ass object object object object 
ass pt int object object object object object object 
ptr typ object object object object ass object object int 
ass object object object object 
ass putfield int ptr typ int object int object object 
ass pt int 
object object 
ass ptr typ object return program fragment bytecode corresponding application constraint generating rules 
unanalysed sig unanalysed ass unanalysed sig unanalysed ass unanalysed method visible unanalysed code sig lookup par unanalysed ass ass unanalysed ass constraint generation unanalysed functions parameters particular object unanalysed function may reappear return value unanalysed function 
java type safety exploited deliver precision conservative precision threatening assumption 
order deal unanalysed code rst introduce global variable unanalysed 
object passed unanalyzed function assignment unanalysed added 
pointers returned unanalysed functions modelled assignments unanalysed 
return values type known utilized increased precision 
introduce special versions unanalysed global variables unanalysed type relation unanalysed various unanalysed unanalysed type unanalysed inserting assignment unanalysed return value unanalysed function assigned insert unanalysed reduces size points set 
note trick done type safe language java 
upper part gives inference rules generate corresponding assignments 
unanalysed functions call functions unanalysed analysed rule lower part describes calls 
similar invokevirtual rule stack parameters return values functions called unanalysed functions modelled unanalysed variable 
exceptions access global variables unanalysed code modelled similarly details see 
conclude section discussion re ection api 
native methods re ection api course analysed approximations cases better 
example consider calls getclass 
class program introduce special object class order analyse call getclass rst determine 
types objects set determine class added 
example 
call newinstance return new special object dyn type result call resolved 
approach precise traditional stubs incorporates points information target objects parameters 
providing speci constraints popular unanalysed functions improves precision considerably general approximation popular unanalysed functions harming precision 

empirical studies implemented framework subset uni cation variants see implementation details 
implementation points graphs 
andersen method assignment static conditionally generated results additional arc graph 
order reduce memory consumption implementation store complete points sets allows transitive edges graph complete points sets determined paths graph 
adding edges implementation uni intraprocedural analysis merges graph nodes fast union nd algorithm 
seen introduce type incorrect points relations 
additional type checks performed points set explicitely needed 
applied variants small medium sized programs loc 
results summarized 
rst columns give program name number classes number methods bytecode size number calls 
furthermore percentage calls resolved statically points information 
interesting see percentage usually java programs rely heavily standard api contains final methods 
course statically resolvable method calls need conditional constraint generation analysed directly 
methods data runtime relative precision percent percentage additionally resolved method calls information concerning speci application points analysis 
relative precision determined comparison super naive pointsto method points set contains objects correct type sn fo obj type type method worse naive method resolves method calls naive way imprecise assumptions intraprocedural analysis 
relative precision de ned rp tr jp tr jp sn algorithm relative precision better super naive method 
runtimes determined sun enterprise system gb running jdk 
looking runtimes basic observations 
absolute runtimes quite high 
reason course precise analysis dynamic binding come free 
imagine better implementation dedicated highly optimized constraint solver fact precise resolution dynamic binding requires additional level xpoint iteration 
furthermore unanalysed functions induce quite conservative assumptions reduce precision speed analysis 
second fundamental observation runtimes relatively similar 
sum runtimes bench basic andersen rule expressed solely assignments ass ass ass ass similar das steensgaard 
class void 
class extends void 
class main void main throws new class getclass object newinstance example re ection api subset uni cation program cl code calls static time rp scc res 
client client 
time rp res 
client client 
haar jlex graph hanoi jedit jas java cup ex mars sablecc benchmark results mark seconds subset uni cation version di erence roughly percent 
obviously iteration dynamic binding destroys basic speed uni cation method 
concerning relative precision subset method average precise super naive method uni cation method average precise super naive method 
disappointing result symmetric uni cation approach indicating unsuitable abundance unsymmetric subtype relations java programs 
di erence signi cant look number statically resolved method calls 
columns res give percentage calls resolved statically points set small target method unique 
subset method better 
adding values column static column res methods achieve programs 
dynamic binding hardly benchmark 
comparing relative precision reader keep mind majority pointers target objects method calls 
incorporated algorithm strongly connected components described 
rountev reports positive ects programs java results disappointing 
column scc presents number strongly connected components andersen graph xpoint iteration 
numbers low improvement practice 
believe unsymmetric subtype relations typical oo programming prevent approach ective java 
nally consider ect di erent methods speci client analysis kaba system described 
kaba starts table containing method accesses program variable order compute table points information needed program variable 
better points analysis non blank table entries 
columns labelled client display percentage table entries blank columns labelled client give table construction time 
similarly resolved calls results subset method slightly superior speci client analysis 

related rountev milanova ryder implemented points algorithm java known 
method set constraints limited andersen approach consider approximations unanalysed code re ection api 
rountev soot frontend bane system solving set constraints 
implementation roughly speed uses memory 
probably due highly optimized bane engine see 
www sable mcgill ca interesting compare precision systems right possible rountev analyse reachable methods user library code analyse user code treat libraries unanalysed code 
furthermore programs common benchmarks obviously version 
case comparison resolved calls relative precision worthwhile 
steensgaard algorithm extended java 
contrast uni cation variant xpoint iteration case variables uni ed uni es signatures methods static type 
retains quasi linear speed method precise approach 
reports reasonable precision achieved context sensitive extension 

comparison subset uni points approach java 
results summarized follows 
analysis strategies di er speci inference rule plugged generic points framework java 

java type safety exploited increase precision particular unanalysed code 

uni cation methods diculties unsymmetric subtype relations java programs 
world imperative languages steensgaard method faster andersen intraprocedural steensgaard combined xpoint iteration dynamic binding slightly slower java 
reason xpoint iteration leads propagation imprecision steensgaard method eventually slower convergence 
room improvement precision performance 
better implementations algorithms options worth exploring contextsensitive points analysis ow sensitive points analysis 
partially ow sensitive analysis easily achieved transforming bytecode static single assignment form cmp 

context sensitive points analysis java achieved way 
increase precision unclear high price terms performance performance precision ratio 
analysis basically program analysis 
known java objects leave methods created 
possible deal local pointers objects level methods decreasing size global points graph 
done java remains seen possible 
current implementation requires bytecode comes debug information 

aiken foster su 
toolkit constructing type constraint program analyses 
lecture notes computer science 
andersen 
program analysis specialization programming language 
phd thesis diku university copenhagen may 
diku report 
david bacon peter sweeney 
fast static analysis virtual function calls 
oopsla conference proceedings object oriented programming systems languages applications pages 
acm press 
bruno blanchet 
escape analysis object oriented languages 
application java 
proceedings conference object oriented programming systems languages applications pages 
chatterjee barbara ryder william landi 
relevant context inference 
proc 
th acm sigplan sigact principles programming languages acm sigplan notices pages new york ny usa 
acm press 
jong deok choi gupta mauricio serrano sreedhar sam escape analysis java 
acm sigplan notices october 
das 
uni cation pointer analysis directional assignments 
proc 
sigplan conference design implementation pldi pages vancouver canada june 
das bjarne steensgaard november 
personal communication 
emami rakesh ghiya laurie hendren 
context sensitive interprocedural points analysis presence function pointers 
pldi pages 
acm acm june 
manuel ahndrich je rey foster su alexander aiken 
partial online cycle elimination inclusion constraint graphs 
proc 
sigplan conference programming language design implementation pages montreal canada june 
acm sigplan notices 
je rey foster manuel ahndrich alexander aiken 
flow insensitive points analysis term set constraints 
technical report csd university california berkeley august 
rebecca hasti susan horwitz 
static single assignment form improve ow insensitive pointer analysis 
proceedings acm sigplan conference programming language design implementation pldi pages montreal canada june 
michael hind michael burke paul carini jong deok choi 
interprocedural pointer alias analysis 
acm transactions programming languages systems july 
michael hind anthony 
pointer analysis 
proc 
international symposium software testing analysis pages portland 
william landi barbara ryder 
safe approximation algorithm interprocedural pointer aliasing 
acm sigplan conference programming language design implementation june 
liang mary jean harrold 
ecient points analysis program analysis 
proc 
esec fse pages september 
acm press 
rountev satish chandra 
line variable substitution scaling points analysis 
proceedings acm sigplan conference design implementation pldi pages vancouver canada june 
rountev ana milanova barbara ryder 
points analysis java annotated inclusion constraints 
technical report dcs tr department computer science rutgers university july 
marc shapiro susan horwitz 
fast accurate ow insensitive points analysis 
proc 
th acm sigplan sigact symposium principles programming languages pages new york ny usa 
acm press 
gregor snelting frank tip 
understanding class hierarchies concept analysis 
acm transactions programming languages systems 
appear 
gregor snelting frank tip 
reengineering class hierarchies concept analysis 
proceedings acm sigsoft sixth international symposium foundations software engineering fse pages 
acm press 
bjarne steensgaard 
points analysis linear time 
proceedings third acm symposium principles programming languages pages st petersburg fl january 

points analyse ur java 
number mip technical report series 
fakult ur mathematik und informatik universit passau 
su manuel ahndrich alexander aiken 
projection merging reducing redundancies inclusion constraint graphs 
conference record popl th acm sigplan sigact symposium principles programming languages pages boston massachusetts january 
john whaley martin rinard 
compositional pointer escape analysis java programs 
acm sigplan notices october 
