optimal lower bound number variables graph identification jin yi cai computer science dept princeton university princeton nj princeton edu martin furer dept computer science penn state university university park pa furer cs psu edu neil immerman computer science dept university 
massachusetts amherst ma immerman cs umass edu combinatorica show omega gamma variables needed order logic counting identify graphs vertices 
variable language counting equivalent gamma dimensional lehman method 
settle long standing open problem 
previously open question variables suffice 
lower bound remains true set graphs color class size 
contrasts sharply fact variables suffice identify graphs color class size variables suffice identify graphs 
lower bound optimal multiplication constant variables obviously suffice identify graphs vertices 
show omega gamma variables needed order logic counting distinguish sequence pairs graphs graphs vertices color class size admit linear time canonical labeling algorithm 
contrasts sharply results shown variables suffice identify trees graphs variables suffice identify graphs color class size 
research supported nsf ccr 
research supported nsf ccr pennsylvania state university research initiation 
research supported nsf dcr ccr 
way interpret results stable colorings tuples vertices 
lehman combinatorial group theoretic properties colored graphs inspired idea separating orbits automorphism group graph coloring tuples vertices 
approach called dimensional lehman method dim 
late seventies early eighties method developed researchers including babai 
method gives linear time graph isomorphism algorithm works graphs 
furthermore fastest known general graph isomorphism algorithms method 
conjectured method provide polynomial time graph isomorphism test graphs bounded valence 
valence synonym degree 
result conjectures 
lower bounds area proved random graphs 
method counting included language mentioned graphs identified variables counting 
construction choose graphs vertices separator size definition 
deterministically modify producing pair non isomorphic graphs agree properties expressible variables 
lower bound linear separator size graphs linear lower bound combined straightforward upper bound proposition allows precisely determine variables needed identify classes graphs order logic counting 
organized follows section history lehman method 
section give background descriptive complexity explain significance problem logical point view 
section introduce combinatorial games prove characterize logical equivalence languages considering 
section prove equivalence gamma dimensional lehman method variable language counting 
section combinatorial game prove linear lower bound 
section describes corollaries extensions 
history lehman method old basic idea graph isomorphism testing canonical labeling naive vertex classification algorithm described read corneil 
vertices labeled colored 
iteration labels extended multiset set possibly multiple elements labels neighbors 
rounds labels replaced order numbers lexicographic order occurring labels 
keeps labels short 
algorithm stops set labels stabilizes meaning new differences vertices discovered 
labeling algorithm identifies class graphs vertex properties invariant isomorphisms discovered 
words sets vertices labels orbits automorphism group 
naive vertex classification algorithm want call dimensional method dim solve worst cases graph isomorphism problem 
usually start fact succeeds time 
babai erdos selkow shown dim algorithm produces normal forms gamma fraction vertex graphs 
improved gamman log log log fraction producing average linear time canonical labeling algorithm handling exceptions slow algorithm 
vertex classification probably basis practical implementation graph isomorphism test 
example case nauty package said fastest practical graph isomorphism package 
mentioned addition vertex refinement nauty extensive partial automorphism information backtrack process clear examples may lead graphs nauty requires excessive time 
general quite difficult construct hard cases graph isomorphism 
class graphs vertex classification algorithm obviously useless algorithm get started 
regular graphs degree vertex 
quite natural go vertex classification dim edge classification algorithm 
initially ordered pair labeled colored possible colors depending edge fu vg 
information multiset pairs colors assigned paths length repeatedly added color 
algorithm stops color class split 
modification algorithm shown produce normal forms regular graphs linear average time 
tuple coloring algorithm named dim babai classifies tuples vertices 
color vertices edges implicitly tuples repetition components 
start encoding graph labels assigned tuples 
example initial label color tuple number distinct components number 
colors encode presence absence edge vertices 
prefer get quicker start initially coloring tuple isomorphism type 
repeatedly color refined element multiset containing element vertex tuples colors previously assigned gamma need consider tuples distinct elements color vertices multiset colors incident tuples 
formal description dim method section 
possibly weaker algorithms considered 
call special dim wl algorithms 
book method mentioned called deep stabilization 
consists followed low dimensional algorithm 
distinguished initially colored unique colors gamma tuple gamma tuple dim dim respectively performed detect invariant properties vertices edges 
methods weaker standard dim method 
current authors independently reinvented dim algorithm early eighties conjectured capability identifying graphs bounded valence suitable function valence 
learned conjectures soviet union dim algorithm special dim algorithm investigated decades 
significant results obtained group contributed papers book 
russians built huge algebraic theory extensive applications notion stable colorings pairs 
key notion cellular algebra see discovered context called coherent configuration higman 
lehman asked special dim method slowly growing value sufficient solve graph isomorphism problem 
reason conjecture log sufficient 
second hope partly result cameron obtained independently gol fand cf 

call graph regular number common neighbors element subset vertices depends isomorphism type subgraph induced vertices 
regular regular graphs known regular strongly regular graphs respectively 
cameron gol fand shown apart pentagon line graph trivial examples regular graphs exist disjoint unions complete graphs equal size complements complete graphs 
graphs homogeneous isomorphisms subgraphs extend automorphisms 
immune dim refinements refinement isomorphism type tuples follow 
graph cameron gol fand result assures dim method give nontrivial partitioning tuples 
lipton proved special dim method fixed sufficient canonical labeling degree graphs arc transitive automorphism groups 
arc ordered pair adjacent vertices 
support log conjecture provided gary miller 
shown certain classes strongly regular graphs combinatorial objects latin squares log sufficient 
previously graphs considered difficult examples isomorphism testing high degree regularity symmetry 
importance symmetries graph isomorphism testing pointed babai showed graph isomorphism problem equivalent computing order automorphism groups graphs 
followed low dimensional refinement special method produced pioneer results areas bounded valence general graph isomorphism canonical labeling 
babai technical report started group theoretical algorithms obtain provable upper bounds isomorphism problems 
get known probabilistic polynomial time isomorphism test graphs bounded color class size started bounded valence graphs 
log vertices splits bounded valence graph color classes size resulting exp log isomorphism test 
subsequently luks proved group theory greater depth isomorphism graphs bounded valence polynomial time 
canonical labeling problem graphs bounded valence solved polynomial time independently 
followed naive refinement tool babai handle strongly regular graphs primitive coherent configurations 
log vertices 
strongly regular graphs generally coherent configurations stable dim 
strongly regular graphs just undirected graphs coherent configurations edge colored complete directed graphs 
coherent configuration primitive diagonal color colors define connected graphs 
transitive automorphism group primitive dim produces necessarily primitive coherent configuration 
tournaments isomorphism problems primitive arbitrary coherent configurations polynomial time equivalent 
general graph isomorphism problem attacked 
method described 
vertices canonical able reduce valence 
combining method luks obtained interesting upper bound general graph isomorphism cf 

bound exp gammac positive constant subsequently improved babai luks exp 
measuring reduction valence ask effect methods color class size 
babai investigated splitting power method combined dim 
result log vertices applying method dim method obtains color classes vertices connected component resulting graph 
logical background pursued alternate view complexity theory complexity problem characterized terms complexity simplest order sentences expressing problem 
example shown polynomial time properties exactly properties expressible order sentences iterated polynomially times fact fo notation fo denotes set properties describable uniform sequence sentences sentence length bounded number variables independent symbol included emphasize presence total ordering universe input structures 
shown uniform sequence formulas represented fixed point operator lfp applied single formula 
fo lfp fo fact gives natural language expressing exactly polynomial time properties ordered graphs 
graph property order independent property ordered graphs 
ask question precisely sentence expressing property structures size consists fixed block restricted quantifiers written times followed fixed formula 
notation var sz fo 
question natural language polynomial time graph properties 
notion natural defined readers may prefer precise question question recursively enumerable listing set turing machines accept exactly polynomial time graph properties 
questions asked respect database query languages 
see discussion role ordering database context 
case graph canonization graph return canonical form graphs isomorphic iff canonical forms equal polynomial time answer question 
negative answer imply equal np 
previous polynomial time graph properties known expressible fo lfp ordering counting problems 
example graph number edges expressible fo lfp 
language call fo lfp count proposed answer question 
language describes sorted structures consisting unordered domain vertices edge predicate plus ordered domain numbers 
domains defined counting quantifiers section 
show corollary language fails badly certain linear time properties graphs 
exact number variables needed identify various classes trees counting respectively determined 
counting number increases linearly arity trees counting variables suffice 
question variables needed identify various classes graphs interesting right applications temporal logic 
remainder section explain logical background need 
material described detail 
order logic purposes graph defined finite order structure hv vg universe vertices 
binary relation vg edges 
example undirected graph hv pictured vertex set edge relation fh ig consisting pairs corresponding undirected edges 
convention assume structures referred universe gamma natural number order language graph theory built usual way variables relations symbols logical connectives quantifiers 
quantifiers range vertices graph question 
example consider order sentence gamma gamma gamma gamma gamma gamma ffl ffl ffl ffl ffl undirected graph says undirected loop free 
consider graphs satisfy symbols 
useful consider slightly general set structures 
order language colored graphs results addition countable set unary relations fc order language graphs 
define colored graph graph interprets new unary relations finitely predicates false vertex 
unary relations may thought colorings vertices 
definition language say graphs equivalent jl iff sentences say identifies graph iff graphs jl isomorphic 
identifies set graphs identifies element note languages consider graph set sentences language true polynomial size description may computed polynomial time 
set graphs identified polynomial time canonization algorithm 
course order language colored graphs identifies colored graphs 
computational viewpoint interesting consider weaker languages admitting faster equivalence testing algorithms 
languages define set order formulas variables subset note variables order formulas similar variables programs reused 
example consider sentence coloring relations clean tool restricting automorphisms graphs 
coloring relations replaced simple gadgets graphs changing results 
sentence says vertex adjacent vertex adjacent vertex 
example graph satisfies 
note outermost quantifier refers free occurrence scope 
define color class set vertices satisfy particular set color relations 
color class size graph cardinality largest color class 
shown identifies set graphs color class size 
noted languages weak count express parity number edges 
natural strengthen languages adding counting quantifiers languages obtaining new languages positive integer include quantifier 
meaning example exist vertices 
convenient abbreviation meaning exists exactly example sentence says exist exactly vertices degree worse example sentence identifies graph 
says graph contains exactly vertices vertex adjacent vertices degree 
note sentence equivalent ordinary order sentence variables quantifiers 
section shown testing equivalence corresponds gamma dimensional lehman method 
follows language identifies trees graphs 
time log algorithms testing equivalence graphs vertices 
games describe games equivalent testing equivalence respectively 
games variants games ehrenfeucht fraiss 
results section concerning game game originally appeared respectively 
graphs natural numbers 
define move game follows 
players variable pair pebbles 
move player picks pair pebbles kg places vertex graphs 
player ii place pebble vertex graph 
play games easier follow masculine pronouns player feminine pronouns player ii 
define configuration pair graphs pair partial functions fx vg fx vh domains equal 
notation denote domain partial function configuration valid position game means pebble vg means pebbles currently placed board 
configuration game move number say player wins game move map takes ur isomorphism subgraphs induced vertices 
note graphs colored isomorphism preserve colors edges 
say player wins move game mg player wins game move player ii wins iff player win 
say player ii winning strategy game iff player ii winning strategy move game player ii winning strategy game just find matching vertices preserve isomorphism 
player trying point difference graphs player ii trying keep looking 
number moves game corresponds depth nesting quantifiers sentences needed distinguish graphs define language restriction formulas quantifier depth relationship game language theorem 
state need definition 
definition pair graphs configuration say equivalent symbols jl iff formulas free variables subset similarly say equivalent symbols jl iff jl theorem player ii winning strategy move game jl player ii winning strategy game iff jl prove theorem give examples game 
example consider game graphs shown 
suppose player move place pebble red vertex player ii may answer putting pebble red vertices suppose player puts adjacent yellow vertex player ii response definition strategy depend number moves finite strategy winning ffl ffl ffl gamma gamma gamma ffl ffl ffl gamma gamma gamma ffl ffl gamma gamma gamma ffl ffl ffl gamma gamma gamma ffl game red vertex adjacent yellow vertex 
reader convince fact player ii winning strategy game follows theorem agree sentences hand clearly player win move game simply put pebbles points triangles triangle player ii lose 
notice case player playing sentence true false interesting example game consisting hexagon colors consisting disjoint union copies hexagon player ii winning strategy move game player winning strategy move game 
strategy play sentence true saying pair vertices joined path length order prove theorem need lemma relational language finitely relation symbols finitely formulas equivalence furthermore include finite set additional quantifiers counting quantifiers expanded language finitely formulas equivalence 
proof easy see induction finitely variables finitely relation symbols finitely sets possible facts variables 
assume total different kinds quantifiers 
inductively assume inequivalent formulas quantifier depth inequivalent formulas quantifier depth 
reason removed colors colors sentence distinguishing graphs pair vertices different color joined path length 
proof theorem prove induction configurations statements equivalent 
player ii winning strategy move game starting initial configuration 

jl base induction immediate map isomorphism induced subgraphs iff agree quantifier free formulas 
assume equivalence move games initial configuration move game 
assume condition false formula disagree 
disjunction conjunction negation smaller formulas disagree smaller formulas may assume begins quantifier 
may assume symmetry 
player place pebbles vertex holds 
matter vertex player ii answers know hold 
letting configuration move induction player winning strategy remaining move game original move game 
conversely assume condition true player move place pebbles vertex result move 
note finitely color predicates vertex satisfies 
lemma applies finite set inequivalent formulas interest define set formulas satisfied oe conjunction finitely formulas oe follows oe 
player ii place pebble witness oe result move 
definition oe follows jl follows induction player ii winning strategy remaining move game original move game 
game modification game provides combinatorial tool analyzing expressive power pair graphs define game follows just game players pairs pebbles 
difference move parts 
presenting proof language constant function symbols 
proof goes function symbols additional assumption cardinality finitely generated set finite 

player picks pebble pair chooses set vertices graphs 
player ii answers set vertices graph 
cardinality 
player places pebbles vertex player ii answers placing pebble definition winning 
going part move player asserts exist jaj vertices certain property 
player ii answers number vertices player challenges vertices player ii replies equivalent vertex game captures expressibility theorem player ii winning strategy game theorem follows theorem prove section 
equivalence equals gamma dim section describe dimensional lehman method dim 
prove pair tuples vertices graph agree formulas iff equivalence class arising dim 
dim called vertex refinement 
hv colored graph vertex satisfies exactly color relation 
ng iff define refinement follows new color vertex defined tuple hw number vertices color adjacent number vertices color adjacent 
practice sort new colors lexicographically assign number new color class inhabits 
retain table decoding meaning colors 
vertices new color class precisely old color class adjacent number vertices color 
keep refining coloring level call stable refinement see theorem stable coloring provides exactly information equivalence 
define dim follows 
colored graph total map fx vg define initial color isomorphism type iff map isomorphism 
vg define operation sift hf sift tuple colors arising substituting turn positions define st color th color considering th color number vertices sift possible tuple colors explicitly form new color tuple hw ggi dimensional case sort new colors lexicographically assign ordering ensues 
retain table decoding meaning color 
pair configurations different graphs iff numbers colors assigned decoding tables graphs identical 
just tuple colors sift sift note difference case case case explicitly consider adjacent definition new color adjacency part information initial color tuples 
denote stable color note color classes graph vertices algorithm stops iterations 
theorem pair colored graphs configuration 
equivalent 


player ii winning strategy game initial configuration 
proof induction show equivalent 


player ii winning strategy move game initial configuration 
base case definition 
iff map isomorphism 
true iff satisfy quantifier free formulas definition player ii winning zero move game 
assume equivalence holds 
suppose 
cases 
gamma gamma inductive assumption formula gamma differ 
tuple colors equation fails 
cardinality larger set equation 
induction tuples vertices gamma color class iff agree formulas gamma lemma finitely inequivalent gamma formulas restrict attention graphs finite number vertices 
different numbers vertices conditions false 
conjunction finitely gamma formulas characterizing gamma color class configuration fg hg gamma follows differ formula nx delta delta delta suppose conjunction differ conjuncts may assume form nx 
may assume currently unassigned variable move game player picks pair pebbles chooses set vertices 
player ii chooses vertex 
player puts pebble number player ii respond differ gamma induction player ii loses remaining gamma move game 
suppose 
follows equation holds tuple colors clearly player strongest move involves presently unused pair pebbles 
suppose picks chooses set vertices number vertices sift gamma 
follows equation player ii put vertices sift gamma 
second part move player put player ii answer sift gamma sift gamma consider remaining game configuration 
note player ii lost 
move player choose pair pebbles pick 
know remaining configurations gamma color 
follows induction player ii wins remaining gamma move game 
observation useful proof main theorem 
case explicitly consider adjacency formula 
case player ii choose adjacent iff corresponding adjacent 
observation player winning strategy move game winning strategy game chooses monochromatic sets proof saw proof player chooses set set may partitioned tuple color classes induced 
player ii answers separately tuple colors 
player ii right number elements classes lose player need selected elements class 
classes monochromatic 
hard see standard coloring algorithms cf 
fact stable colorings tuples may computed log steps ram 
follows theorem graphs identified language canonization algorithm runs time log 
interesting note language enjoys relationship similar theorem variant dim algorithm time bound 
difference computation new color treats set multiset gamma vg sorting collection tuples eliminate duplicates 
construction construct counterexample graphs starting low degree graphs having linear size separators 
replace vertex degree graph graph defined follows fa kg fb kg fm kg jsj sg sg consists set gamma vertices middle connected vertex pairs fa furthermore middle vertices connected number 
assume middle vertices different color say magenta 
furthermore pairs able recognize mates 
necessary add vertices colored edges see diagram lemma describes relevant property graph proof immediate 
ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl delta delta delta delta delta delta delta delta delta delta gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma graph lemma suppose color vertices graph color 
automorphisms fix sets fa fa 
exactly gamma automorphisms determined interchanging subset ng cardinality 
finite connected undirected graph vertex degree 
define graph follows 
vertex replace copy call degree edge associate pairs fa call pair 
connect vertices vertices edge draw edges 
colored graph vertex inherit color define graph twist follows construction arbitrarily choose edge twist reverse connections drawing edges 
lemma show relevant properties including fact defined 
lemma finite connected graph vertex degree 

constructed exactly edges twisted 
isomorphic iff isomorphic iff odd 
proof observe fact 
vertex edges incident twist resulting graph isomorphic 
immediate lemma suppose number twists greater equal 
observation lets move twists overlap cancel 
isomorphic isomorphic 
remains show isomorphic 
assume sake contradiction isomorphism 
consider action pair fa ae edge colorings definition map pair fa fa maps fa fa define phi sum mod pairs number times maps clearly consider pairs corresponding edge number switches zero unique edge chosen construction number 
phi mod 
consider mod sum way terms copy 
lemma immediate phi zero mod 
contradiction proves lemma 
definition separator graph subset ae induced subgraph gamma connected component jv vertices 
prove main theorem theorem graph separator vertices 
cs proof theorem suffices give winning strategy player ii game 
assume original graph color class size 
graphs inherit colors color class size gamma maximum degree vertex life difficult player ii 
know lemma add twist edge resulting graph isomorphic 
th move game largest connected component gamma set vertices just th move pebble vertex 
separator know contains half vertices player ii winning strategy maintain property vertex edge adjacent twisted 
exists isomorphism ff ff maps vertex pebble vertex pebble 
difference graph twisted edge 
intuitive explanation player ii winning strategy keeps twisted edge inside pebbles player break apart expose twist 
clearly player ii maintain map points corresponding points isomorphism wins 
show induction player ii maintain 
player moves 
observation suffices player restrict choosing set monochromatic points move 
notice player chooses vertex middle vertices determined 
furthermore point determines suffices player choose single point time 
counting help distinguishing 
player ii inductive strategy stated 
assume holds suppose move player picks pebble puts vertex 
note new largest component determined 
vertex player ii response answer player move isomorphism ff maintain ff ff pebble free path vertex proof lemma shows define isomorphisms ff corollary exists sequence pairs graphs fg admitting linear time canonical labeling algorithm having additional properties 
vertices 

degree color class size 

cn 
isomorphic proof follows immediately theorem sequence degree graphs separator size vertex colored unique color 
graphs known exist see example 
corollaries long time ago showed polynomial time property graphs requires omega gammau log quantifiers expressed order logic ordering 
proof graphs certain sequence degree graphs fd theorem 
corollary improves lower bound omega gamma variables 
shows graphically exclude ordering relation inductive order logic addition counting suffice express polynomial time graph properties 
particular corollary gamma set graphs form graphs degree color class size 
isomorphism problems graphs gamma expressible order logic ordering sum mod expressible sequence order sentences ordering 
major improvement bigger log sentence quantifiers variables sentence variables quantifiers 
particular inductive logic counting ordering contain polynomial time computable graph properties 
fact contain properties computable uniform sequence bounded depth polynomial size boolean circuits include parity gates cf 

proof seen corollary graphs indistinguishable ffln constant ffl 
suppose sake contradiction sentence oe fo lfp count expresses isomorphism property graphs gamma 
graphs gamma oe number distinct variables occurring oe 
graphs size oe unwinding oe follows 
rewrite fixed points arity lfp 
replace quantified number variable respectively disjunction gamma respectively conjunction gamma 
note oe equivalent oe structures size oe distinguishes pair pair 
follows player wins game pairs 
note player ii match vertex vertex player winning strategy game 
contradiction shows isomorphism graphs gamma expressible fo lfp count 
show distinguish order logic ordering sum mod 
easy 
ordering gives way mark pairs graphs 
pair second 
note vertices inherit unique colors part input pair vertices 
assignment simple order sentence asserts straight isomorphic twisted vertex adjacent odd number 
graph isomorphic iff sum mod number twisted vertices edges isomorphic iff sum mod 
course graphs color class size distinguished sentence isomorphism graphs gamma expressible ac plus parity gates claimed 
result proves straightforward upper bound nearly matches lower bound number variables needed identify class delta graphs function separator size members delta 
proposition delta set graphs closed induced subgraphs graph delta separator size number vertices delta identified blog nc bn gammai particular log ff 
proof induction number vertices say exist vertices connected component gamma fx size bn 
expressible variables 
assert connected components isomorphism type 
requires bn variables addition leave open questions 
redirect reader attention questions 
shown corollary order logic plus counting fixed point ordering fails badly 
question counting added fo lfp get polynomial time graph problems worthy study cf 


planar graphs separators size proposition identified theorem give matching lower bound planar graph need 
know omega gamma variables necessary identify planar graphs 
sandeep bhatt improved results pointing essential property counterexample graphs separators large 
babai informing status research method soviet union 
aho hopcroft ullman design analysis computer algorithms addison wesley 
ajtai recursive construction regular expanders th ieee symp 
foundations computer science 
babai monte carlo algorithms graph isomorphism testing tech 
rep dms universit de montr eal 
babai complexity canonical labeling strongly regular graphs siam computing 
babai moderately exponential bound graph isomorphism proc 
conf 
fundamentals computation theory lecture notes computer science springer 
babai order permutation groups annals math 

babai permutation groups coherent configurations graph isomorphism sc 
thesis hungarian acad 
sci hungarian 
babai paul erdos stanley selkow random graph isomorphism siam comput 

babai kantor luks computational complexity classification finite simple groups th ieee symp 
foundations computer science 
babai kucera canonical labelling graphs linear average time th ieee symp 
foundations computer science 
babai eugene luks canonical labeling graphs th acm symposium theory computing 
david mix barrington neil immerman howard uniformity nc comput 
system sci 

babai rudi talk south east conference combinatorics graph theory 
cameron transitive graphs 
theory 
ashok chandra david harel structure complexity relational queries comput 
system sci 

ehrenfeucht application games completeness problem formalized theories fund 
math 

fraiss sur quelques classifications des syst ems de relations publ 
sci 
univ 
martin furer walter ernst specker normal forms graphs graphs bounded valence th acm symposium theory computing 
ya 
yu 
gol fand klin regular graphs algorithmic research combinatorics nauka publ moscow 
yuri gurevich logic challenge computer science current trends theoretical computer science ed 
egon borger computer science press 
higman coherent configurations ordinary representation theory 
neil immerman number quantifiers better number tape cells comput 
system sci 

neil immerman upper lower bounds order expressibility comput 
system sci 

neil immerman relational queries computable polynomial time information control 
neil immerman languages capture complexity classes siam computing 
neil immerman dexter kozen definability bounded number bound variables information computation 
neil immerman eric lander describing graphs order approach graph canonization complexity theory retrospective alan selman ed springerverlag 
immerman stemple expressiveness family finite set languages tenth acm symposium principles database systems 
kucera canonical labeling regular graphs linear average time th ieee symp 
foundations computer science 
klin cellular rings groups automorphisms graphs introductory article book published reidel publ 
ch 
klin rosenbaum angewandte algebra vieweg sohn publ braunschweig 
lipton beacon set approach graph isomorphism yale dept comp 
sci 
preprint 
eugene luks isomorphism graphs bounded valence tested polynomial time comput 
system sci 

note graph isomorphism counting problem inform 
proc 


mckay nauty user guide version tech 
rep tr cs dept computer science austral 
national univ melbourne 
miller log isomorphism technique th acm symposium theory computing 
read corneil graph isomorphism disease graph theory 
vardi complexity relational query languages th acm symposium theory computing 
boris ed construction identification graphs lecture notes mathematics springer 
lehman reduction graph canonical form algebra arising reduction russian 
graph isomorphism problem russian theory fo computation notes sci 
sem 


