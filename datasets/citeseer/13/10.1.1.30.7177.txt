preliminary design jml behavioral interface specification language java gary leavens albert baker clyde ruby tr june revised july november january april keywords behavioral interface specification java jml eiffel larch model specification precondition postcondition frame 
cr categories software engineering requirements specifications languages theory larch eiffel jml software engineering distribution maintenance documentation logics meanings programs specifying verifying reasoning programs assertions logics programs pre postconditions specification techniques 
copyright fl gary leavens albert baker clyde ruby 
department computer science hall iowa state university ames iowa usa preliminary design jml behavioral interface specification language java gary leavens albert baker clyde ruby department computer science hall iowa state university ames iowa usa leavens cs iastate edu baker cs edu ruby cs iastate edu april jml behavioral interface specification language tailored java 
allows assertions intermixed java code aid verification debugging 
jml designed working software engineers requires modest mathematical training 
achieve goal jml uses eiffel style assertion syntax combined model approach specifications typified vdm larch 
jml supports quantifiers specification variables frame conditions enhancements expressive specification eiffel 
discusses goals jml approach describes language examples 
intended readers familiarity java behavioral specification pre postconditions 
jml stands java modeling language 
jml behavioral interface specification language designed specify java modules 
java modules classes interfaces 
main goal research better understand tools practical effective production software environments 
order understand goal detailed discussion goals jml helps define precisely behavioral interface specification doing return describing goals jml give outline rest 
behavioral interface specification tailored specification java modules jml describes important aspects java module ffl interface consists names static information java declarations leavens ruby supported part rockwell international nsf ccr 
leavens baker supported part nsf ccr 
public class public static int int behavior requires ensures result result 
result result return int java lang math sqrt jml specification written annotations java code file java 
ffl behavior tells module acts 
describe interface details clients written specific programming language inherently language specific 
example tailored larch describes module program 
larch specification implemented correctly java jml specification correctly implemented functions specified native code 
jml specifications designed annotations java code files 
java compiler annotations comments ignored 
allows jml specifications specification embedded java code files 
possible specifications separate code desired done 
examples java code files expect users form 
users prefer expect module formats 
simple example behavioral interface specification jml consider specification 
specifies java class contains static method function member named 
single line comments far right start give line numbers specification ignored java jml 
comments immediately sign lines annotations treated comments java compiler text annotation marker meaningful jml 
interface information declared lines 
line declares class named line declares method named 
note java declaration syntax allowed jml including lines names declared public method static line return type int line takes int argument 
interface declarations java module correctly implements specification 
automatically case file contains implementation 
fact java annotations embedded java files interface specification actual java source code 
correct implementation specified interface specified behavior 
behavioral information specified annotations lines 
behavioral part specification opening behavior line public class public static int int behavior requires ensures result result 
result result form previous specification contained jml file jml 
form allows code concrete methods omitted 
note semicolon comes behavior keyword code omitted 
closing line ignoring annotation markers 
keyword behavior specification distinct syntax code block follows 
precondition follows keyword requires line postcondition follows keyword ensures line 
precondition says true arguments parts state precondition true method terminate state satisfies postcondition 
contract caller method implementor :10.1.1.116.2392
caller obligated precondition true gets benefit having postcondition satisfied 
implementor gets benefit able assume precondition obligated postcondition true case 
general pre postconditions jml written extended form java expressions 
case extension visible keyword result postcondition denote value returned method 
type result return type method example type result int 
postcondition says result integer approximation square root note behavioral specification give algorithm finding square root 
shown jml add annotations directly classes containing java code 
jml write documentation separate non java jml files 
files java code files jml allows user omit code concrete methods class 
shows done replacing code semicolon java method declaration 
summarize behavioral interface specification describes interface details module behavior 
interface details written syntax programming language jml uses java declaration syntax 
behavioral specification uses pre postconditions 
goals mentioned main goal research better understand develop tools practical effective 
concerned technical requirements factors training documentation rest concerned technical requirements 
practicality effectiveness jml judged document reusable class libraries frameworks application programming interfaces apis 
believe meet goal practical effective behavioral interface specification jml meet subsidiary goals 
ffl jml able document interfaces behavior existing software regardless analysis design methods create 
jml limited handling certain java features certain kinds software apis amenable documentation jml 
effort put writing documentation proportionally larger payoff software widely reused important able document existing reusable software components 
especially true software implemented debugged reused software implemented 
ffl notation jml readily understandable java programmers including standard mathematical training 
preliminary study finney indicates graphic mathematical notations may specifications hard read programmers trained notation 
accords experience teaching formal specification notations programmers 
strategy meeting goal shun special purpose mathematical notations favor java expression syntax 
ffl language capable rigorous formal semantics amenable tool support 
goal helps ensure specification language suffer logical problems useful static analysis prototyping testing tools 
mind long range goal specification compiler produce prototypes constructive specifications 
general strategy achieving goals tried blend eiffel larch approaches specification 
eiffel taken idea assertions written language java expressions 
old notation eiffel described larch style annotation names state functions 
eiffel specifications written meyer typically detailed model specifications written example larch vdm 
combined approaches syntactic ideas eiffel semantic ideas model specification languages 
jml differences eiffel cousins sather sather 
important concept specification declarations 
declarations explained allow exact specifications behavior typically done eiffel allow write specifications similar spirit vdm larch 
major difference extended syntax java expressions quantifiers constructs needed logical expressiveness executable 
ban side effects problematic features code assertions 
hand experience larch taught adapt modelbased approach ways aim making practical easy learn 
adaptation specification model ghost variables 
object general model fields purpose describing abstractly values objects 
simplifies jml compared larch specifiers readers hardly need know algebraic style specification 
designing model java class interface similar respects designing implementation data structure java 
hope similarity specification language easier understand 
kind model technical advantages described 
second adaptation hiding details mathematical modeling hidden facade java classes 
larch approach behavioral interface specification mathematical notation assertions directly specifier 
allows mathematical notation different specification languages 
means user specification language learn notation assertions different programming language notation expressions 
jml compromise approach hiding details java classes 
classes pure sense reflect underlying mathematics side effects observable way 
insulating user jml details mathematical notation compromise approach insulates design jml details mathematical logic theorem proving 
outline sections describe jml semantics 
section uses examples show java classes interfaces specified section briefly describes semantics subtyping refinement 
section describes detail expressions predicates 
section presents preliminary design effort 
appendix gives syntax jml 
class interface specifications section give examples jml class specifications illustrate features jml 
models simple example class specification popular type 
values stack objects specified model data field thestack declared fourth non blank line 
declared modifier model field implemented purposes specification treat exactly java field variable 
imagine instance class field 
type model field thestack pure type sequence objects 
provided jml package edu iastate cs jml models imported second non blank line 
note import users define pure types show 
package edu cs iastate jml samples stacks model import edu cs iastate jml models public class public model thestack public initially thestack isempty public void pop behavior requires thestack isempty modifiable thestack ensures thestack equals old thestack trailer public void push object behavior modifiable thestack ensures thestack equals old thestack public object top behavior requires thestack isempty ensures result thestack specification class file java 
declaration appear implementation modified keyword model 
general declaration form java modifier meaning declaration question specification purposes appear implementation 
declaration model field specification pop initially clause 
clauses adapted resolve 
clause declared public refers public model fields 
initially clause permits data type induction classes interfaces supplying property appear true starting states objects 
visible state outside methods reachable objects type value appear created empty stacks subsequently modified type methods 
initially clauses expected specifications pop push top methods 
modifiable clauses behavioral specifications pop push interesting difference eiffel 
give frame conditions say objects mentioned objects depend explained may values changed 
modifiable clause omitted specification top means objects state modified method execution 
interpretation strict benevolent side effects disallowed modifiable clause omitted 
method modify objects objects different values post state method 
post condition refer 
notation similar eiffel refer pre state value variable 
jml syntax old 
meaning old evaluated pre state value place old assertion 
denotes object modifiable expression may mean desired 
best disjoint objects mentioned modifiable clause 
automatically satisfied denotes primitive value int 
possible safe type pure type 
example pop postcondition expression old thestack trailer type pure type 
value thestack trailer computed pre state method just method called parameters passed execution body 
note type required equals compare equality values 
mistake compare object identity combination new yield false 
specification push requires clause 
means method imposes obligations caller 
logically meaning omitted requires clause method precondition true satisfied states imposes obligations caller 
imply implementation provide literally unbounded stack surely impossible 
avoid problem object modified method allocated pre post states method variables model concrete change values 
means allocating objects java new operator cause modification 
explicit parentheses old indicates expression evaluated pre state explicitly difference eiffel 
poetzsch heffter releasing implementations obligations fulfill postcondition java runs storage 
method implementation correct called state satisfies precondition ffl method terminates state satisfies postcondition having modified objects permitted modifiable clause ffl java signals error throwing exception inherits error 
dependencies representations exceptions subsection describe model fields related dependencies affect meaning modifiable clause 
purpose give specifications 
way demonstrate specify methods throw exceptions features jml 
interface specification simple model 
case model fields max size size 
variable max size static model field treated class variable size normal model field treated instance variable 
specifications interfaces extend classes implement interface model fields inherited 
example object type subtype interface thought abstractly having field size type int 
similarly class inherits thought having static model field max size 
pieces class level specification come model 
invariant clause 
invariant hold execution object methods hold reachable object visible state state outside public method execution execution 
invariant says visible state max size variable positive reachable object size field value equal max size 
invariant history constraint 
history constraint say values change earlier states method pre state post state 
prohibits subtypes making certain state changes implement methods specified class 
history constraint says value max size change pre state invocation method value post state written max size equal value pre state written old max size 
history constraint interfaces specifications public methods 
specification method clone somewhat interesting 
clone may throw exception logical implication written 

jml primitive returns say method returns throwing exception result size model field size 
note cast postcondition clone necessary type result object 
adheres goal java syntax semantics extent possible 
note conjunct result instanceof protects conjunct false meaning cast matter 
java allow fields declared interfaces jml allows model fields interfaces essential defining values objects specified 
package edu iastate cs jml samples stacks public interface public model static int maxsize public model int size public invariant maxsize size size maxsize public constraint maxsize old maxsize public int behavior ensures result maxsize public boolean isempty behavior ensures result size public boolean behavior ensures result size maxsize public object clone throws behavior ensures returns 
result instanceof size result size jml specification interface bounded collection objects file java 
note okay case things compared primitive values 
gives interface bounded stacks extends interface 
specification refer max size interface size inherited model field objects 
model adds inherited model declaring model field named thestack 
field typed 
depends represents clauses follow declaration thestack important feature modeling layers model fields 
play crucial role relating model fields concrete fields objects considered final layer detail design 
depends clause says size change value thestack changes represents clause says related 
represents clause gives additional facts reasoning specification essence tells extract value size value thestack 
serves purpose abstraction function various proof methods data types 
invariant follows represents clause example checkable redundancy specification 
concept signaled jml keyword redundantly 
says stated property specified hold property believed follow properties specification 
case invariant follows invariant inherited specification fact stated represents clause 
invariant redundant helpful state properties brought attention readers specification 
checking claimed redundancies really follow information way sure specified really intended 
checks done manually reviews automated tool theorem prover 
invariant specification pop initially clauses 
initially clauses specifications pop push top methods 
interesting new features 
behavioral specification written specification cases separated keyword 
semantics precondition case satisfied rest case specification obeyed 
examples case analysis separate specification normal case method specification case exception thrown 
normal case returns true exception thrown throws true 
specification cases shorthand cases combined 
show expanded specification pop 
seen example expanded specification postcondition conjunction implications case 
implication case expanded postcondition says precondition case holds case postcondition hold 
modifiable clause expanded specification union modifiable clauses cases variables named course specify separating interface case abstraction unnecessary 
separation partly demonstrate advanced features jml partly fit figures single pages 
package edu iastate cs jml samples stacks model import edu cs iastate jml models public interface extends public model thestack public depends size thestack public represents size size thestack length public invariant redundantly thestack length maxsize public initially thestack isempty public initially redundantly thestack equals new public void pop throws behavior requires thestack isempty modifiable size thestack ensures returns thestack equals old thestack trailer ensures redundantly thestack length old thestack length requires thestack isempty ensures throws public void push object throws behavior requires thestack length maxsize modifiable size thestack ensures returns thestack equals old thestack ensures redundantly thestack length old thestack length requires thestack length maxsize ensures throws public object top throws behavior requires thestack isempty ensures returns result thestack requires thestack isempty ensures throws specification bounded stacks file java 
public void pop throws behavior requires thestack isempty thestack isempty modifiable size thestack ensures thestack isempty 
returns thestack equals old thestack trailer thestack isempty 
throws unmodified size thestack ensures redundantly thestack isempty 
thestack length old thestack length expansion pop specification 
precondition reduces true precondition shown general form expansion 
combined modifiable clause allowed modified particular case asserted unmodified case 
expansion model fields size thestack asserted unmodified second case translation 
depends clause important loosening modifiable clause example permit fields object implement model changed 
loosening applies model fields dependencies declared 
example size depends thestack size sense represented thestack size mentioned modifiable clause thestack implicitly allowed modified 
rhetorical purposes mention size thestack modifiable clauses pop push 
note just mentioning thestack permit size modified thestack depend size 
redundancy specifications pop push redundant ensures clause normal case 
redundant ensures clause checks conjunction precondition meaning modifiable clause non redundant postcondition imply redundant postcondition 
interesting note specifications stacks written eiffel page expresses specify redundant postconditions pop push 
convey strictly information non redundant postconditions say little elements stack 
making new pure types jml comes suite pure types implemented java classes 
time writing helper classes exceptions meyer specification says top element stack push says rest elements 
meyer second specification implementation stacks page better respect course implementation keep track elements properly 

package edu iastate cs jml models defining models 
users create pure types desired 
types treated purely immutable values specifications pass certain conservative checks sure possibility observable sideeffects objects 
extension mechanism uses modifier pure 
pure interface specification ffl methods interface extends pure may pure interfaces methods may explicitly specified pure ffl methods specifies pure sense described 
say method constructor pure specified modifier pure appears specification pure interface class 
method constructor pure specification ffl modifies ffl terminate called state satisfies precondition ffl throw exception subtype error 
constructor pure specification ffl modifies non static fields class appears including inherited superclasses ffl terminate called state satisfies precondition ffl throw exception subtype error 
implementations pure methods constructors checked see meet conditions 
particular pure method constructor implementation prohibited calling methods constructors pure 
provably terminating 
pure method constructor declared class 
jml specify intuitively pure methods constructors standard java libraries pure 
pure class specification ffl extends pure classes ffl methods interface implements extends pure ffl methods constructors specified pure sense described ffl data fields primitive value type pure type 
recursion permitted pure methods data members pure classes 
remember pure method proved terminate preconditions met 
model classes pure way non pure operations assertion 
modifiers model pure orthogonal usually list declaring model class 
particular may specify pure class model class class implemented 
example specify pure interface money suitable models 
specification artificially broken pieces allow piece specification fits page 
organization necessarily recommend give chance illustrate features jml 
consider interface money specified 
model single field primitive java type long holds number pennies 
interface history constraint says number pennies object change 
interesting aspect operations kind redundancy example clauses 
number examples specification 
examples dollars specification cents 
specification example conjunction example precondition example postcondition precondition behavior clause modifiable clauses imply postcondition behavior clause 
note opposite direction implication redundant ensures clause 
typically examples concrete serve point various rhetorical points specification reader 
exercise check examples 
interface money specified extend interface 
interface 
says objects equals clone methods 
specification noteworthy informal predicates 
instance informal predicates escape formality 
informal predicates avoids delicate issues saying observable aliasing means equality values means 
specified type money lacks useful operations 
extensions figures provide specifications comparison operations arithmetic respectively 
specification interesting specified preconditions protects postcondition undefinedness postcondition 
example argument greaterthan method null expression pennies defined 
specification interesting model method inrange 
method invoked java programs appear java implementation 
predicate inrange equivalent correct implementation specification 
specification inrange local model variable declaration 
declarations allow abbreviate long expressions rhetorical points naming constants done epsilon 
note jml uses java semantics mixed type expressions example specification plus pennies coerced double precision floating point number java 
initially clause interface data type induction assume particular starting value 
desirable particular starting value specified history constraint objects value 
observable aliasing sharing relation objects detected program 
program example modify object read changed value shared object 
formalizing bit wish describe point 
package edu iastate cs jml docs import edu iastate cs jml models public pure interface money extends public model long pennies public constraint pennies old pennies public long dollars behavior ensures result pennies example requires pennies ensures result example requires pennies ensures result example requires pennies ensures result public long cents behavior ensures result pennies example requires pennies ensures result example requires pennies ensures result public boolean equals object behavior ensures result instanceof money pennies money pennies public object clone behavior ensures result instanceof money money result pennies pennies specification pure interface money file money java 
id java leavens exp package edu iastate cs jml models public interface extends java io serializable just requires classes implement type provide clone equals method 
provide specifications expectations behavior methods 
public pure object clone behavior ensures result instanceof result equals public pure boolean equals object op behavior ensures result op instanceof getclass op distinguishable specification interface file java 
package edu iastate cs jml docs public pure interface extends money public boolean greaterthan money behavior requires null ensures result pennies pennies public boolean money behavior requires null ensures result pennies pennies public boolean lessthan money behavior requires null ensures result pennies pennies public boolean money behavior requires null ensures result pennies pennies pure interface specification file java 
package edu iastate cs jml docs public pure interface extends model public boolean inrange double behavior model double epsilon ensures result long epsilon long epsilon public money plus money behavior requires null inrange double pennies pennies ensures result null result pennies pennies pennies example requires pennies pennies ensures result pennies public money minus money behavior requires null inrange double pennies pennies ensures result null result pennies pennies pennies example requires pennies pennies ensures result pennies public money double factor behavior requires inrange factor pennies ensures result null result pennies long factor pennies example requires pennies factor ensures result pennies specification pure interface file java 
implementation class interface specifications key proofs implementation class interface specification correct lies depends represents clauses 
consider example class 
class constructors 
class declares concrete field related model field pennies represents clause 
allows relatively trivial proofs correctness dollars cents methods key proofs methods 
straightforward implementation subclass 
note model concrete fields inherited class 
interesting feature class protected static method 
method give code embedded assertion 
note model method inrange implemented need implemented class correctly implement interface 
concrete class implementation class usmoney 
class implements interface 
note specifications code constructors 
constructor specification illustrates redundancy modifiable clause 
redundant modifiable clause follows meaning set locations named subset ones non redundant clause specification case 
example redundant modifiable clause follows modifiable clause meaning depends clause inherited superclass 
second constructor noteworthy redundant ensures clauses uses informal predicate 
instance informal predicate comment 
recall informal predicates allow escape formality wish give part specification formal detail 
pure classes usmoney pure class models classes 
example class account figures 
model field class type usmoney 
specification account examples 
describe requirements behavioral subtyping 
composition container classes example specification class digraph directed graph gives interesting example jml way complex models composed classes 
example model classes pure containers provided package edu iastate cs jml models 
contains class nodetype 
nodetype class model class require implementation appear interface model class digraph 
denote class pure nodetype specification classes 
appropriately methods class nodetype side effect free 
class specification nodetype simply provide model field id represent unique identifier nodes 
specify equals method class nodetype simply tests package edu iastate cs jml docs public pure class implements money protected long protected depends pennies protected represents pennies pennies protected constraint redundantly old public long dollars return public long cents return public boolean equals object try money money return dollars cents catch return false public object clone return pure class implements interface money file java 
package edu iastate cs jml docs public pure class extends implements protected static long money long res dollars cents assert res pennies return res public boolean greaterthan money return public boolean money return public boolean lessthan money return public boolean money return pure class implements interface extends class file java 
package edu iastate cs jml docs public pure class usmoney extends implements public usmoney long cs behavior modifiable pennies modifiable redundantly ensures pennies cs ensures redundantly cs cs public usmoney double amt behavior modifiable pennies ensures pennies long amt ensures redundantly pennies holds amt dollars long amt public money plus money assert null return new usmoney public money minus money assert null return new usmoney public money double factor return new usmoney factor pure concrete class usmoney file usmoney java 
package edu iastate cs jml docs public class account public model usmoney credit public model string owner public invariant credit new usmoney public constraint owner equals old owner public account amt string behavior requires new usmoney amt modifiable credit owner ensures credit equals amt owner equals part specification pure concrete class account file account jml 
objects type nodetype objects id 
require nodetype public clone method behaves expect methods behave 
contains specification pure model class 
model digraph require implementation appear interface digraph 
declare pure class methods assertions 
model fields type nodetype 
specify equals method objects type equal equal values model fields 
equals specified nodetype equals 
specify support public clone method required container type model fields digraph 
constructor specification digraph 
specification class digraph figures demonstrates container classes compose models jml 
model fields nodes arcs type 
invariant clause restrict nodes object nodes fact type nodetype 
similarly invariant clause restrict arcs set objects 
cases membership determined equals method type elements equality 
jml uses containers combined appropriate invariants specify models compositions classes 
classes typically pure means methods side effect free see making suitable assertions 
interesting pure model methods appears 
pure model method public balance behavior ensures result equals credit public void double rate behavior requires rate rate modifiable credit ensures credit equals old credit rate example requires rate credit equals new usmoney ensures credit equals new usmoney public void deposit amt behavior requires amt new usmoney modifiable credit ensures credit equals old credit plus amt example requires credit equals new usmoney amt equals new usmoney ensures credit equals new usmoney public void withdraw amt behavior requires new usmoney amt amt credit modifiable credit ensures credit equals old credit minus amt example requires credit equals new usmoney amt equals new usmoney ensures credit equals new usmoney part specification account 
package edu iastate cs jml samples digraph import edu iastate cs jml models public pure class nodetype implements public model int id public boolean equals object behavior requires instanceof nodetype ensures result id nodetype id requires instanceof nodetype ensures result false public object clone behavior ensures result instanceof nodetype nodetype result equals fresh result ensures redundantly result class nodetype declaration part class specification nodetype file nodetype java 
package edu iastate cs jml samples digraph import edu cs iastate jml models public pure model class implements public model nodetype public model nodetype public invariant null null public nodetype nodetype behavior requires null null modifiable ensures fresh fresh equals equals ensures redundantly public model boolean equals object behavior requires instanceof ensures result id id id id requires instanceof ensures result false public object clone behavior ensures result instanceof fresh result result equals ensures redundantly result part model class specification file jml 
package edu iastate cs jml samples digraph model import edu cs iastate jml models public class digraph public model nodes public model arcs public invariant forall nodes isin 
instanceof nodetype public invariant forall arcs isin 
instanceof public invariant forall arcs isin 
nodes isin nodes isin public digraph behavior modifiable nodes arcs ensures nodes equals new arcs equals new part class specification digraph file digraph jml 
public void nodetype behavior requires null modifiable nodes ensures nodes equals old nodes insert public void nodetype behavior requires unconnected modifiable nodes ensures nodes equals old odes remove public void nodetype nodetype behavior requires null null nodes isin nodes isin modifiable arcs ensures arcs equals old arcs insert new public pure boolean nodetype behavior ensures result nodes isin public pure boolean nodetype nodetype behavior ensures result arcs isin new public pure boolean nodetype start nodetype behavior requires nodes isin start nodes isin ensures result new insert start isin second part class specification digraph file digraph jml continued 
public pure model boolean unconnected nodetype behavior ensures result exists arcs isin equals equals public pure model nodeset behavior requires nodeset null forall object nodeset isin 
instanceof nodetype nodes isin measured nodes size nodeset size ensures nodeset equals nodeset 
result equals nodeset nodeset equals nodeset 
result equals nodeset public pure model nodeset behavior requires nodeset null forall object nodeset isin 
instanceof nodetype nodes isin ensures result equals nodeset union new nodetype exists arcs isin nodeset isin equals nodeset isin equals class digraph third part class specification digraph file digraph jml continued 
constructively defines set nodes reachable nodes argument nodeset 
note recursive ensures clause builds entire set reachable nodes recursive adding nodes reached directly single arc nodes nodeset 
recursive definitions defined provably terminating purpose measured clause specification 
clause defines integer valued measure zero furthermore measure call recursive uses specification strictly decrease 
subtyping leavens subtype inherits specifications supertype public protected members fields methods invariants history constraints 
ensures subclass specifies behavioral subtype supertypes inheritance thought textually copying specifications methods class ancestors interfaces class implements class specification specification cases cases satisfied method addition explicitly specified cases example consider subclass account 
inherits fields account initially clauses invariants history constraints account 
inherits fields superclass inherited method specifications meaningful copied subclass 
trick add new model fields subclass relate existing ones 
extensions java expressions predicates expressions predicates jml extension side effect free java expressions 
predicates required side effect free java operators allowed predicates ffl assignment various assignment operators ffl forms increment decrement operators ffl calls methods pure 
allow allocation storage operator new pure constructors predicates storage referred evaluation predicate pure constructors side effects initializing new objects created jml adds new syntax java expression syntax predicates ffl 

logical implication example raining 
true raining false true 
ffl forall exists quantifiers example forall int 
says sorted indexes 
package edu iastate cs jml docs public class extends account public model usmoney savings checking public depends credit savings checking public represents credit credit equals savings plus checking public invariant redundantly savings plus checking new usmoney public sav chk string behavior requires new usmoney sav new usmoney chk modifiable credit owner modifiable redundantly savings checking ensures savings equals sav checking equals chk owner equals ensures redundantly credit equals amt public void double rate behavior requires rate rate modifiable credit savings checking ensures checking equals old checking rate example requires rate checking equals new usmoney ensures checking equals new usmoney public void deposit amt behavior requires amt new usmoney modifiable credit savings ensures savings equals old savings plus amt ensures redundantly unmodified checking example requires savings equals new usmoney amt equals new usmoney ensures savings equals new usmoney class file jml part 
public void withdraw amt behavior requires new usmoney amt amt savings modifiable credit savings ensures savings equals old savings minus amt ensures redundantly unmodified checking requires new usmoney amt amt credit amt greaterthan savings modifiable credit savings checking ensures savings equals new usmoney checking equals old checking minus amt minus savings example requires savings equals new usmoney amt equals new usmoney ensures savings equals new usmoney requires savings equals new usmoney checking equals new usmoney amt equals new usmoney ensures savings equals new usmoney checking equals new usmoney public void amt behavior requires amt new usmoney modifiable credit checking ensures checking equals old checking plus amt unmodified savings example requires checking equals new usmoney amt equals new usmoney ensures checking equals new usmoney class continued file jml second part 
public void amt behavior requires new usmoney amt amt checking modifiable credit checking ensures checking equals old checking minus amt requires new usmoney amt amt credit amt greaterthan checking modifiable credit checking savings ensures checking equals new usmoney savings equals old savings minus amt minus checking example requires checking equals new usmoney amt equals new usmoney ensures checking equals new usmoney example requires savings equals new usmoney checking equals new usmoney amt equals new usmoney ensures checking equals new usmoney savings equals new usmoney class continued file jml part 
ffl returns true method returns normally exception thrown false 
ffl result returns true object result method 
ffl throws assert particular exception thrown example throws true exception thrown 
ffl thrown describe object exception result method throws exception example throws true thrown object thrown 
ffl fresh asserts objects freshly allocated example fresh asserts objects bound allocated pre state 
ffl old refer values pre state old value field object pre state 
ffl unmodified asserts values objects post state pre state example unmodified says value pre post states sense equals method 
ffl reach returns objects reachable object 
ffl set comprehensions succinctly define sets example integer objects values inclusive 
new integer java types types expressions yield object identities addresses opposed primitive values 
means compare pure values primitive types boolean int equality 
java get value equality primitive values equals method assertions 
example predicate true objects denoted object names aliases compare values strings write equals 
semantics interpreting predicates involve old interesting 
want semantics suited purposes ffl execution assertions purposes debugging testing eiffel ffl generation mathematical assertions static analysis possible theorem proving verify program correctness 
key semantics old treat abbreviation local definition 
old evaluated pre state value bound locally defined name name postcondition 
java expressions predicates additional problems mathematical modeling 
excluding possibility side effects limiting syntax predicates type checking sure pure methods constructors may called predicates :10.1.1.54.5309
exceptions expressions particularly important may arise type casts 
logically deal exceptions having evaluation predicates substitute arbitrary expressible value normal result type exception thrown evaluation 
expression result type type implementation return null exception thrown executing predicate 
corresponds mathematical model partial functions mathematically modeled underspecified total functions 
check errors exceptions inherit error explicitly thrown pure methods 
means ignored mathematical modeling 
executing predicates errors ignored cause run time errors 
area jml concurrency 
current plan clauses say method may proceed execute called 
permits specification caller delayed obtain lock example 
syntax exists jml parser exploration topic early stage 
rustan leino peter mueller discussions semantics specifications 
comments earlier draft peter anand gary karl jim potts joachim van den berg 
ken arnold james gosling 
java programming language 
java series 
addison wesley reading ma second edition 
back 
calculus refinements program derivations 
acta informatica august 
back von wright 
refinement calculus part sequential nondeterministic programs 
technical report ser 
abo university department computer science abo finland 
appears stepwise refinement distributed systems models formalisms correctness rex workshop netherlands may june spring verlag lncs de bakker eds pages 
alex borgida john mylopoulos reiter 
frame problem procedure specifications 
ieee transactions software engineering october 
krishna kishore gary leavens 
forcing behavioral subtyping specification inheritance 
proceedings th international conference software engineering berlin germany pages 
ieee computer society press march 
corrected version iowa state university dept computer science tr 
krishna kishore gary leavens 
forcing behavioral subtyping specification inheritance 
technical report department computer science iowa state university ames iowa december 
proceedings th international conference software engineering berlin germany pp 

available anonymous ftp ftp cs iastate edu mail cs iastate edu 
kate finney 
mathematical notation formal specification difficult masses 
ieee transactions software engineering february 
david gifford john lucassen 
integrating functional imperative programming 
acm conference lisp functional programming pages 
acm august 
james gosling bill joy guy steele 
java language specification 
java series 
addison wesley reading ma 
john guttag james horning garland jones wing 
larch languages tools formal specification 
springer verlag new york 
hayes editor 
specification case studies 
international series computer science 
prentice hall second edition 
hoare 
axiomatic basis computer programming 
communications acm october 
hoare 
proof correctness data representations 
acta informatica 
cliff jones 
systematic software development vdm 
international series computer science 
prentice hall englewood cliffs second edition 
lano editors 
object oriented specification case studies 
object oriented series 
prentice hall new york 
gary leavens 
overview larch behavioral specifications modules 
haim kilov william harvey editors specification behavioral semantics object oriented information modeling chapter pages 
kluwer academic publishers boston 
extended version tr department computer science iowa state university ames iowa 
gary leavens 
larch manual 
version 
available ftp ftp cs iastate edu pub ps gz world wide web url www cs iastate edu leavens html october 
gary leavens 
larch frequently asked questions 
version 
available www cs iastate edu leavens larch faq html january 
gary leavens albert baker 
enhancing pre postcondition technique expressive specifications 
technical report iowa state university department computer science february 
gary leavens jeannette wing 
protective interface specifications 
michel bidoit max dauchet editors tapsoft theory practice software development th international joint conference caap fase lille france volume lecture notes computer science pages 
springer verlag new york 
henry 

human engineered variant bnf 
acm sigplan notices october 
rustan leino 
myth modular specification programs 
technical report digital equipment systems research center lytton avenue palo alto ca november 
obtain author rustan pa dec com 
rustan leino 
reliable modular programs 
phd thesis california institute technology 
available technical report caltech cs tr 
richard allen lerner 
specifying objects concurrent systems 
ph thesis school computer science carnegie mellon university may 
barbara liskov jeannette wing 
behavioral notion subtyping 
acm transactions programming languages systems november 
john lucassen 
types effects integration functional imperative programming 
technical report tr massachusetts institute technology laboratory computer science august 
john lucassen david gifford 
polymorphic effect systems 
conference record fifteenth annual acm symposium principles programming languages san diego calif pages 
acm january 
david luckham friedrich von henke bernd krieg bruckner olaf owe 
anna language annotating ada programs volume lecture notes computer science 
springer verlag new york 
bertrand meyer 
applying design contract 
computer october 
bertrand meyer 
eiffel language 
object oriented series 
prentice hall new york 
bertrand meyer 
object oriented software construction 
prentice hall new york second edition 
carroll morgan 
programming specifications second edition 
prentice hall international uk 
joseph morris 
theoretical basis stepwise refinement programming calculus 
science computer programming december 
nielson nielson 
polymorphic subtyping effect analysis static semantics 
dam editor proceedings fifth workshop number lecture notes computer science 
springer verlag 
william ogden murali sitaraman bruce weide stuart zweben 
part resolve framework discipline research synopsis 
acm sigsoft software engineering notes oct 
sam owre john rushby natarajan shankar friedrich von henke 
formal verification fault tolerant architectures prolegomena design pvs 
ieee transactions software engineering february 
arnd poetzsch heffter 
specification verification object oriented programs 
habilitation thesis technical university munich january 

larch corba specifying behavior corba idl interfaces 
technical report department computer science iowa state university ames iowa december 
michael spivey 
notation manual 
international series computer science 
prentice hall new york second edition 
jean pierre talpin pierre jouvelot 
type effect discipline 
information computation june 
yang meng tan 
interface language supporting programming styles 
acm sigplan notices august 
proceedings workshop interface definition languages 
yang meng tan 
formal specification techniques engineering modular programs volume kluwer international series software engineering 
kluwer academic publishers boston 
tim gary leavens albert baker 
executing formal specifications constraint programming 
technical report department computer science iowa state university hall ames iowa august 
available anonymous ftp ftp cs iastate edu mail cs iastate edu 
david watt 
programming language syntax semantics 
prentice hall international series computer science 
prentice hall new york 
alan wills 
refinement 
lano houghton chapter pages 
jeannette wing 
writing larch interface language specifications 
acm transactions programming languages systems january 
jeannette wing 
specifier formal methods 
computer september 
jeannette marie wing 
tiered approach specifying programs 
technical report tr massachusetts institute technology laboratory computer science 
andrew wright 
typing effect inference 
bernd krieg bruckner editor esop th european symposium programming rennes france february proceedings volume lecture notes computer science pages 
springer verlag new york 
syntax extended bnf grammar describe syntax larch 
extensions follows 
ffl nonterminal symbols written follows nonterminal 
ffl terminal symbols written follows terminal 
cases necessary quote terminal symbols terminal symbol meta symbol 
ffl square brackets surround optional text 
note terminals 
ffl notation 
means preceding nonterminal group optional text repeated zero times 
example gives production nonterminal identifier list ident separated periods 
identifier ident ident 
remind reader notation 
means zero repetitions 
optional text 
start comment reader grammar 
context free syntax gives syntax compilation units jml 
gives syntax type definitions 
gives syntax behavioral specifications types 
gives syntax behavioral specifications methods 
figures give syntax predicates predicate expressions 
precedence operators jml similar java precedence levels table 
gives syntax statements standard java enhanced set loop statements 
gives syntax statements added java jml purposes better specification refinement calculus 
gives syntax expressions 
compilation unit package definition refine prefix import definition 
type definition 
package definition package identifier refine prefix refine string literal import definition import identifier star model import identifier star identifier ident ident 
identifier star ident ident 
type definition doc comment type definition syntax compilation units 
highest new old fresh throws thrown unmodified forall exists method calls unary unary 
instanceof binary binary informally lowest table table operator precedence jml 
type definition modifiers class interface def class interface def class definition interface definition type spec type dims type identifier modifiers modifier 
modifier private public protected static transient final native synchronized const volatile model pure class definition class ident extends identifier weakly implements clause class block class block field 
interface extends extends identifier list implements clause implements identifier list identifier list identifier weakly identifier weakly 
field doc comment 
modifiers member decl static compound statement modifiers initially modifiers invariant modifiers history constraint modifiers depends decl modifiers represents decl member decl variable decls method decl class definition interface definition variable decls type spec variable variable variable declarator variable declarator 
variable declarator ident dims initializer initializer expression array initializer array initializer initializer list initializer list initializer initializer 
method decl type spec method head method body method head ident param declaration list dims throws clause method body specification body 
compound statement specification body 
specification body behavior model program example callable clause accessible clause throws clause throws identifier identifier 
param declaration list param declaration param declaration 
param declaration final type spec ident dims syntax type definitions initially initially redundantly predicate invariant invariant redundantly predicate history constraint constraint redundantly predicate constrained set constrained set method name method name 
method name identifier param list param list param param 
param type spec ident dims depends decl depends redundantly store ref store ref list represents decl represents redundantly store ref predicate store ref list store ref store ref 
store ref pred expression reach pred expression syntax behavioral specifications types 
lexical grammar section grammatical productions understood lexically grammar concerns individual characters tokens 
way thinking white space may intervene characters token 
jml described production describes program looks point view lexical analyzer 
nonterminal java literal represents java literals taken change java 
white space blanks horizontal vertical tabs carriage returns newlines collectively called white space ignored serve separate tokens 
newlines special appear contexts whitespace appear style comments 
described formally 
comments kinds java comments allowed jml see old style comments new style comments 
looks comment starts sign character considered start annotation jml comment 
model program model program redundantly 
statement seq behavior behavior redundantly 
spec case seq spec case seq spec case spec case 
spec case model var decl 
requires clause 
measured clause 
spec case body spec case body spec case seq clause 
modifiable clause 
ensures clause ensures clause 
model var decl model type spec pred variable decl pred decl pred predicate predicate requires clause requires redundantly pre cond pre cond predicate measured clause measured redundantly pred expression clause redundantly predicate modifiable clause modifiable redundantly store ref list accessible clause accessible redundantly store ref list callable clause callable redundantly callable methods list callable methods list pred expression list ensures clause ensures redundantly liberally post cond post cond predicate example example spec case seq syntax behavioral specification methods 
predicate pred expression pred expression list pred expression pred expression 
pred expression pred conditional expr pred conditional expr pred equivalence expr pred conditional expr pred conditional expr pred equivalence expr pred implies expr 
pred implies expr 
pred implies expr 
pred implies expr 
pred implies expr pred logical expr 
pred implies expr pred logical expr 
pred implies expr pred logical expr pred logical expr pred logical expr 
pred logical expr pred inclusive expr pred inclusive expr 
pred inclusive expr pred exclusive expr pred exclusive expr 
pred exclusive expr pred expr pred expr 
pred expr pred equality expr pred equality expr 
pred equality expr pred relational expr pred relational expr 
pred relational expr pred relational expr 
pred relational expr pred shift expr pred shift expr pred shift expr pred shift expr pred shift expr pred shift expr pred shift expr pred shift expr informally informal description informally string literal string literal 
pred shift expr pred additive expr shift op pred additive expr 
shift op 


pred additive expr pred mult expr additive op pred mult expr 
additive op pred mult expr pred cast expr mult op pred cast expr 
mult op pred cast expr type spec pred cast expr pred cast expr pred cast expr pred cast expr pred cast expr pred postfix expr instanceof type spec pred postfix expr pred primary expr pred primary suffix 
pred primary suffix ident class pred expression pred expression list syntax predicates predicate expressions part 
pred primary expr ident class pred new expr constant super true false null pred expression returns result throws type spec thrown type spec unmodified store ref list fresh pred expression list old pred expression pred quantified expr pred new expr new type pred new suffix pred new suffix pred expression list pred init block pred array decl pred array initializer type spec quantified var declarator predicate pred array decl pred dim exprs dims pred dim exprs pred expression pred expression 
dims 
pred init block pred init field semi 
pred init field semi pred pred modifiers type spec pred variable decl pred pred variable pred variable declarator pred variable declarator 
pred variable declarator ident dims pred initializer pred array initializer pred initializer pred initializer 
pred initializer pred expression pred array initializer pred quantified expr quantifier quantified vars predicate quantifier forall exists quantified vars type spec quantified var decls type spec quantified var decls 
quantified var decls quantified var declarator quantified var declarator 
quantified var declarator ident dims syntax predicates predicate expressions part 
statement compound statement variable decls ident statement expression expression statement statement maintaining 
decreasing 
loop stmt break ident continue ident return expression switch statement try block throw expression synchronized expression statement specification statement maintaining maintaining redundantly predicate decreasing decreasing redundantly pred expression loop stmt expression statement statement expression init expression expression list statement init variable decls expression list switch statement switch expression switch body 
switch body switch label seq statement 
switch label seq switch label switch label 
switch label case expression default try block try compound statement handler 
handler catch param declaration compound statement syntax statements 
specification statement assume statement assert redundantly predicate nondeterministic choice nondeterministic measured clause modifiable clause callable clause behavior invariant assume statement assume redundantly predicate nondeterministic choice choose alternative statements alternative statements compound statement compound statement 
nondeterministic guarded statements compound statement guarded statements assume statement statement 
syntax statements added java jml 
annotation markers looks java comment starts sign character considered comment jml 
refer tokens newline pairs annotations 
annotations look comments java ignored significant jml 
achieved having jml drop character sequences 
jml recognize certain keywords annotations 
annotations sign line ignored 
definition annotation marker 
tokens character strings java keywords token keyword ident token 
annotation applies jml keywords 
details 
strings reserved keywords 
java keywords recognized contexts jml keywords recognized annotations 
see 
nonterminal java keywords represents keywords java 
nonterminal java special symbol special symbols java taken change java 
see 
informal description looks text 
predicates may optionally follow keyword informally 
see 
expression assignment expr expression list expression expression 
assignment expr conditional expr assignment opt assignment expr assignment op conditional expr logical expr conditional expr conditional expr logical expr logical expr logical expr 
logical expr inclusive expr inclusive expr 
inclusive expr exclusive expr exclusive expr 
exclusive expr expr expr 
expr equality expr equality expr 
equality expr relational expr relational expr 
relational expr relational expr 
relational expr shift expr shift expr shift expr shift expr shift expr shift expr shift expr shift expr informally informal description informally string literal string literal 
shift expr additive expr shift op additive expr 
shift op 


additive expr mult expr additive op mult expr 
additive op mult expr cast expr mult op cast expr 
mult op cast expr type spec cast expr cast expr cast expr cast expr cast expr cast expr cast expr postfix expr instanceof type spec postfix expr primary expr primary suffix 
primary suffix ident class expression expression list syntax expressions part 
primary expr ident class new expr constant super true false null expression void boolean byte char short int long float double constant new expr new type new suffix new suffix expression list class block array decl array initializer array decl dim exprs dims dim exprs expression expression 
dims 
array initializer initializer initializer 
initializer expression array initializer syntax expressions part 
lexeme lexeme 
lexeme white space comment annotation marker token token ident keyword special symbol java literal informal description jml 
white space non nl white space newline non nl white space blank tab carriage return character newline newline character white space 
comment style comment style comment style comment style body style style body non star non star slash 
stars non slash non star slash 
non star slash non star stars non slash stars non slash 
non slash non star character non star character non slash character style 
style comment newline non newline non newline 
newline non newline character newline non newline character newline comments 
annotation marker ignored annotation annotation markers 
ident letter letter digit 
letter digit letter digit letter digit tokens keyword java keyword jml keyword jml keyword accessible vert assert assume behavior callable constraint decreasing depends ensures example exists forall fresh informally initially invariant liberally maintaining measured model modifiable old pure program reach redundantly refine represents requires result returns thrown unmodified weakly keywords 
special symbol java special symbol jml special symbol jml special symbol 



special symbols 
informal description non star close non star close 
non star close non star stars non close stars non close 
non close non close character informal descriptions 

