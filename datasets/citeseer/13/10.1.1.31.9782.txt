compiling embedded languages conal elliott rn finne oege de moor microsoft research microsoft way redmond wa usa oxford university computing laboratory wolfson building parks road oxford ox qd england 
functional languages particularly suited implementation interpreters domain specific embedded languages 
describe implemented technique producing optimizing compilers kamin idea program generation 
technique uses data type syntax basic types set smart constructors perform rewriting types code motion transformations back code generator 
domain specific optimization results chains rewrites basic types 
new defined directly terms basic syntactic types plus host language functions tuples 
definition style compilers easy write fact identical simplest embedded interpreters 
illustrate technique language pan computationally intensive domain image synthesis manipulation 
embedded approach proved excellent technique specifying prototyping domain specific languages dsls 
essential idea augment host programming language domain specific library 
modern functional host languages flexible resulting combination feel new language library 
required design implement document language inherited host language 
performance relatively unimportant adequate domain primitives encapsulate large blocks 
speed essence embedded approach problematic 
tends yield inefficient interpretive implementations 
worse interpreters tend perform redundant computation 
implemented language pan image synthesis manipulation computationally demanding problem domain 
straightforward embedded implementation perform want incur appear semantics applications implementation program generation workshop part pli springer verlag 
see www springer de comp lncs index html 
conal elliott rn finne oege de moor expense introducing entirely new language 
solution embed optimizing compiler interpreter 
embedding compiler requires techniques normally needed embedded language implementations report techniques 
pleasantly able retain simple programming interface unaffected compiled nature implementation 
generated code runs fast room improvement 
compiler consists relatively small set domain definitions top larger domain independent framework 
framework may adapted compiling dsls handles optimization expressions numbers booleans code motion code generation 
new dsl specified implemented defining key domain types operations terms primitive types provided framework host language 
definitions identical write simple interpretive dsl implementation 
user embedded language writes haskell parse type check compile haskell programs 
user runs haskell program produce optimized program simple target language order call value functional 
generated target language programs simple compiler implemented haskell code motion back code generation 
way host language haskell acts powerful macro program generator language completely picture run time 
macro languages haskell statically typed higher order expressive convenient underlying target language 
embedded compiler approach integration host language haskell quite fluid general conventionally implemented 
host language features lists recursion higher order functions available final executing program 
features may source programs disappear compilation process 
application areas strict separation features full featured compilation language rich runtime language may undesirable domain appears perfectly acceptable 
fact typically write programs conscious difference 
contributions follows general technique implementing embedded optimizing compilers extending kamin approach algebraic manipulation 
identify key problem approach efficient handling sharing techniques solve bottom optimization common subexpression elimination 
illustrate application technique demanding problem domain image synthesis manipulation 
mainly discusses embedded language compilation companion goes detail pan language 
contains visual examples 
language embedding compiling embedded languages embedding approach dsl construction goes back landin famous 
essential idea single existing host programming language provides useful generic infrastructure grammar scoping typing function data abstraction augment domain specific vocabulary consisting data types functions types 
design implementation documentation required new language kept minimum result plenty room grow 
merits drawbacks discussed 
particularly elegant realization embedding idea modern functional programming language ml haskell host 
setting domain specific portions implemented simple denotational semantics suggested section 
example consider problem domain image synthesis manipulation 
simple semantics images function continuous space colors 
representation colors includes blue green red opacity alpha components type image point color type point float float type color float float float float easy implement operations image overlay partial opacity assuming corresponding function cover color values cover useful type spatial transformation may defined simply mapping space type transform point point model easy define familiar transformations translate dx dy dx dy scale sx sy sx sy rotate ang cos ang sin ang definitions directly executed haskell programs performance practical 
attempt cope problem glasgow haskell compiler facility stating transformations rewrite rules source code 
unfortunately interaction rewrite rules general optimizer hard predict particular wish inline function definitions normally conal elliott rn finne oege de moor inlined 
furthermore number transformations certain array optimizations easy state rewrite rules 
abandoned haskell compiler decided build dedicated compiler 
discuss decision section 
embedding compiler spite choice implement dedicated compiler retain benefits embedded approach 
resolve dilemma applying kamin idea program generation 
replace values representations program fragments represent values 
kamin strings represent program fragments algebraic data types greatly facilitate goal compile time optimization 
instance expression type float contain literals arithmetic operators primitive functions return float 
data float 
sin sqrt 
define expression types inte boole similarly 
tuples functions 
kamin simply adopt host language tuple functions creating new syntactic representations 
optimization requires inspection representing functions functions poses problem 
solution extend base types support variables 
inspect function apply new variable tuple variables needed look result 
data 
string named variable observations lead hybrid representation 
image type represented function syntactic points actual ones 
syntactic points represented expressions number pairs pairs expressions numbers 
similarly colors 
type type type type definitions operations types identical ones non expression representation overloading 
instance translate scale rotate precisely definitions section 
meaning definitions quite different 
compiling embedded languages arithmetic operators functions cos sin overloaded 
function defined exactly 
types boole inte expressions usual scalar value types bool int float represented expressions constructors primitive operations 
assuming base types adequate dsl just easy define extend simple non optimizing embedded interpreter 
new syntactic types primitive operators may added 
example hybrid technique works practice consider rotating angle 
definition rotate plus bit simplification number expressions compiler simplifies rotate 
admittedly picture 
instance properties high level types require clever inductive proofs 
formulating properties high level rules eliminate need generic compiler rediscover 
far problem image manipulation language expect substantial applications may necessary layer compilation number distinct levels 
higher levels domain types operators image treated opaque rewritten domain specific rules lower levels seen defined expanded terms simpler types point color 
simpler types expanded lower levels abstraction 
inlining sharing problem style embedding described effect inlining definitions reducing resulting function applications simplification 
inlining beneficial creates opportunities rewriting 
resulting problem uncontrolled inlining causes great deal code replication 
appreciate problem consider example spatial transform 
rotates point origin angle proportional point distance origin 
parameter distance entire revolution radians 
swirling swirling rotate sqrt evaluating swirling yields expression redundancy 
cos sqrt sin sqrt cos sqrt conal elliott rn finne oege de moor sin sqrt problem rotate uses argument times twice cos sin constructing results 
expressions passed rotate get replicated output 
experience pan trees resulting inlining simplification tend enormous compared underlying representation graphs 
swirling composed scale applied multiplications due scale appear twice argument sqrt times final result 
interpretive implementation take care evaluate shared expressions redundantly 
memoization reasonable way avoid 
compiler memoization adequate produce external representation captures sharing 
really want generate local definitions helpful 
produce local definitions compiler performs common subexpression elimination cse described briefly section detail 
static typing expression data type value type int float bool suggested value types 
separate expression types implementation statically typed prevent bugs implementation 
unfortunately lead variables binding polymorphically overloaded expression operators addition respectively polymorphic compiler internal operations terms substitution cse 
single encompassing expression data type dexp dynamically typed expressions data dexp int float bool var id type id type dexp dexp dexp dexp add dexp dexp mul dexp dexp 
sin dexp sqrt dexp 
dexp dexp dexp dexp dexp 
unfortunate choice single dexp type means simply add module containing new primitive type constructors rewrite rules 
willing accept limitation may suggest improvements 
dexp representation removes representation supporting code loses type safety 
combine advantages approaches augment dynamically typed representation technique phantom types 
idea define type constructor exp parameter restrict types functions applications type constructor 
convenience define abbreviations supported types data exp dexp type boole exp bool type inte exp int type exp float compiling embedded languages static typing vital exp new type just type synonym dexp 
statically typed functions conveniently defined functionals turns ary dexp function ary exp function 
typ dexp dexp exp exp typ dexp dexp dexp exp exp exp typ typ typ typ type safe friendly names come applications static typing functionals type class instances instance num inte typ add typ mul negate typ negate frominteger frominteger type constraints inherited num class ensure newly defined functions applied int expressions result int expressions 
instance inte inte inte important point rely type inference deduce general type functions exp values 
state restricted type signatures 
definitions provide convenient type safe primitive vocabulary 
unfortunately bool type wired signatures operations 
pan provides alternative names distinguished character alphanumeric names note names 
algebraic optimization smart constructors early pan implementation mag program transformation system 
generation implementation slow mainly mag redundantly rewrote shared subterms 
avoid problem conal elliott rn finne oege de moor type safe smart constructor boole boole boole typ andd non type safe smart constructor andd dexp dexp dexp constant folding andd floating andd ifd andd andd andd ifd andd andd cancellation rules andd false false andd false false andd true andd true andd note andd andd note false data type constructor andd fig 

simplification rules conjunction optimization bottom part construction expressions 
host language evaluate operational semantics prevents redundant optimization 
non optimized expressions constructed 
main drawback optimization context free 
optimization delve arbitrarily far argument term 
optimization packaged smart constructors accomplishes constant folding floating constructor specific rewrites identities cancellation rules data type constructor application optimizations apply providing statically typed interface 
example shows smart constructor conjunction expressions 
fact smart constructors perform constant folding floating real definition factored 
pan uses ife syntactic conditionals underlying dynamically typed ifd 
ifd dexp dexp dexp dexp ifd true ifd false ifd ifd ifd ifd ifd ifd ifd ifz compiling embedded languages function ifz simplifies redundant impossible conditions 
statically typed ife function overloaded 
class syntactic ife boole instance syntactic exp ife typ ifd include functions tuples 
case conditions pushed downward 
resulting tuple consumed form single scalar valued expression floating typically causes redundant conditions float form cascade redundant conditionals coalesced ifz example floating consider example familiar concrete syntax clarity sin floating simplification yield sin sin replacement followed constant sin results sin floating causes code replication great deal 
cse factors order replication multiple occurrences expressions floating clause 
second order replication going seen simplification 
context sin appears twice 
fortunately example instance context simplifies 
cases may little simplification 
return issue section 
stress point intend algebraic optimizations refinements evaluation optimized version expression yield value evaluation terminates 
possible simplified version yield defined result 
happen example boolean expression false raise division zero exception simplified version evaluate false 
adding context optimization possible usage context dsl computation visible compiler 
instance composing image conal elliott rn finne oege de moor type type anim type inte type inte inte view size width height pixels type view transform pan xy zoom display anim display anim zoom output loop loop output anim zoom div zoom div fig 

animation display function user generally wants display window 
representation images suggests iteratively sampling finite grid pixel locations converting pixel color integer display device 
faithful presentation images need topic scope addressed implementation 
pan compiler implementation took approach generated machine code function maps pixel location bit color encoding 
version faster interpretive implementation efficiency satisfactory 
thing requires function call pixel 
seriously prevent optimization pixels rows pixels 
address shortcomings compiler visible optimizer dimensional iteration samples stores pixel values 
fact get compilation decided compile display simply static images animations represented functions time image 
go generating code nearly arbitrarily parameterized images automatic generation user interfaces run time parameters 
main function display defined converts animation display function invoked just frame 
display function consumes time window size viewing transform zoom factor xy pan pointer output pixel array 
job viewer come parameters pass display function code 
critical point display function expressed embedded language display applied anim parameter type image compile time 
compile time application allows compiling embedded languages code display anim combined optimized lets computations moved outside inner outer loop 
fact compiler goes allowing focused recomputations display parameters change simple dependency analysis 
type represents action yields value haskell type io 
supported small number dexp constructors corresponding statically typed optimizing wrapper functions 
takes address represented integer integer value performs corresponding assignment 
second loop 
takes upper bound loop body function loop variable action 
loop body executed value zero including upper bound 
inte inte loop inte inte display generated display function loop set appropriate member output array bit multiplication color value 
aside calculating destination memory address inner loop body samples animation time position 
spatial sampling point computed loop indices placing image origin center window subtraction half window width height applying user specified dynamic zoom pan int float conversion 
fact optimized code efficient code motion techniques described briefly section illustrated appendix code motion code generation context added optimizations applied result expression tree type dexp 
explained section tree contains great deal sharing inlining rewriting process 
step compilation sharing structure explicit bindings performing common subexpression elimination cse 
important form code motion hoisting evaluation loops independent loop variable 
synthesize arrays values depend inner loop variable outer 
details see subtle strictness issues discussed 
having performed code motion loop hoisting shape start generating code 
output code motion pass interpreted compiled choose compile 
resulting dexp converted function 
translation reasonably straightforward requires little bit care places account fact expression level variable binding support array initialization 
generated code compiled linked viewer displays specified image effect 
conal elliott rn finne oege de moor related examples embedded dsls music threedimensional geometry animation hardware design document manipulation domains 
see overview 
cases implementations interpretive 
characteristics functional programming languages lend role host language enumerated 
kamin embedded languages program generation spirit 
approach kamin uses host language functions tuples represent embedded language functions tuples uses overloading generators look code generating 
applications functional host language ml generate imperative programs 
main difference kamin perform optimization cse 
difficult choice strings represent programs 
leijen meijer provides embedded language database queries implementation compiles search specifications optimized sql query strings processing :10.1.1.17.2599
trying unsuccessful designs imitated untyped algebraic data type phantom type wrapper type safety 
approach compiling embedded languages regarded instance partial evaluation considerable literature see 
light compiler handwritten cogen opposed generated automatically self application 
main contrasting characteristic embedding strongly typed meta language haskell 
embedding particular haskell type class overloading concrete syntax meta programs identical object programs achieves inlining free 
exploits metalanguage type inference perform object language type inference optimization rules expressed type unsafe level 
closely related methodology multi stage programming explicit annotations supported metaml polymorphic statically typed meta language ml style programs 
fftw successful portable library computing discrete fourier transforms varying dimensions sizes 
numerical procedures generated special purpose compiler written objective caml better cases previously existing libraries 
compiler features performing algebraic simplification cse 
small technical difference memoized simplification compiler bottom simplifying construction 
appears results 
application domain specialized focused compiler 
veldhuizen advanced programming techniques embed simple functional language types 
functional evaluation done compiler type checking template compiling embedded languages 
code fragments specified inlined static methods chosen combined compile time produce specialized optimized low level code 
efficient powerful rewriting 
optimizer uses simple syntactic approach rewriting 
obtain better results rewriting cse associative commutative ac matching comparison respectively exploiting representation sharing critical compile time efficiency 
cse cleans inlining sharing remains rewriting 
inlining higher order substitution case functions cse order higher order remains 
ideally inlining floating cse cooperatively efficiently rewriting 
inlining floating happen rewarded additional rewrites 
fundamentally cooperation precluded embedded nature language implementation forces full inlining step compiler gets look representation 
invisible compilation 
techniques described turn compositional specifications efficient implementations 
image editing applications allow non programmers manipulate images composing operations 
imagine application syntax trees internal editable representation invisibly invoke incremental optimizing compiler response user actions 
conventional point click user interface serve gestural concrete syntax 
display representation bitmaps augmented custom generated machine code 
embeddable compilation 
embedding language haskell able save compiler implementation lexing parsing type checking supporting generic scalar types functions tuples 
possible eliminate 
suppose host language compiler extended optimization rules described 
tried precisely approach ghc partial success 
main obstacle compiler conservative inlining rewriting 
takes care slow program worth backward steps order fast program 
recursively defined images laziness host language appears vital case 
worthwhile try exercise ml compiler 
embedding easy way design implement dsls inheriting benefits suitable host language 
implementations tend conal elliott rn finne oege de moor interpretive slow computationally intensive domains interactive image processing 
building ideas kamin leijen meijer shown replace embedded interpreters optimizing compilers set syntax manipulating base types 
result better performance small impact languages 
reusable dsl compiler framework implemented embedded dsl interpreter turned compiler small changes overloading 
pan compiler rewriting optimizations helped speed considerably course eliminating considerable overhead imposed interpretative implementation 
produced examples compiler may seen needed compiler fast producing better code 
hope compiler speed improved point invisibility non programmers image editors 
brian originally suggested idea optimizing compiler image processing collaborated project 
erik meijer helped sort representation possibilities suggested approach 

oege de moor ganesh 
generic program transformation 
proceedings third international summer school advanced functional programming springer lecture notes computer science 
users comlab ox ac uk oege papers braga ps gz 

conal elliott 
pan image gallery 
research microsoft com conal pan gallery 

conal elliott 
embedded modeling language approach interactive multimedia animation 
ieee transactions software engineering may june 
special section domain specific languages dsl 
research microsoft com conal papers tse modeled animation 

conal elliott 
functional images 
research microsoft com conal papers fip unpublished march 

conal elliott rn finne oege de moor 
compiling embedded languages extended version 
technical report microsoft research may 
research microsoft com scripts pubs view asp tr id msr tr 


fast fourier transform compiler 
proceedings acm sigplan conference programming language design implementation pages 
www acm org pubs articles proceedings pldi pdf 

john hatcliff torben mogensen peter thiemann editors 
partial evaluation practice theory volume 
springer verlag 
compiling embedded languages 
paul hudak 
modular domain specific languages tools 
devanbu editors proceedings fifth international conference software reuse pages 
ieee computer society press 

neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall international international series computer science june 
www dina dk sestoft html 

samuel kamin 
standard ml meta programming language 
technical report university illinois urbana champaign september 
www sal cs uiuc edu kamin pubs ml meta ps 

samuel kamin david 
special purpose language picture drawing 
usenix editor proceedings conference domain specific languages october santa barbara california pages 
www sal cs uiuc edu kamin doc ps 

peter landin 
programming languages 
communications acm march 
originally proceedings acm programming language pragmatics conference august 

leijen erik meijer 
domain specific embedded compilers 
nd conference domain specific languages dsl austin tx usa october 
usenix 
www cs uu nl people papers ps 

walid taha tim sheard 
metaml multi stage programming explicit annotations 
journal theoretical computer science 
appear 
www cs chalmers se taha publications journal tcs ps 

ghc team 
glasgow haskell compiler 
haskell org ghc 

todd veldhuizen 
expression templates 
report june 
extreme indiana edu papers pepm ps 
reprinted gems ed 
stanley lippman 

todd veldhuizen 
templates partial evaluation 
workshop partial evaluation semantics program manipulation pepm 
acm sigplan 
extreme indiana edu papers pepm ps 
optimization example illustrate compilation techniques described shows snapshots sample animation specification supporting definitions 
note really type constructor parameterized pixel type 
visual images type call regions type boole 
building block checker boolean image checker alternates true false pixel checkerboard 
trick convert pixel coordinates floating point integer floor function test sum odd 
checkerboard image function takes square size colors 
chooses colors depending input point scaled falls true false square checker 
finish example black white checker board swirling function defined section 
conal elliott rn finne oege de moor fig 

snapshots defined relatively simple example compilation shows result display inlining definitions performing cse optimization 
simplification involves application dozen rewrite rules constant folding floating code motion 
result example shown 
note cse scalar hoisting array promotion produced phases computation 
block calculated frame displayed animation second line third pixel 
example potential benefit ac code motion note definition compiler failed hoist expression 
reason simply products left associated hoisting candidate recognized sub expression 
compiling embedded languages tan checkerboard black white syntactic im im swirling image swirling function checker boole unit square boolean checker board checker checkerboard checkerboard cond checker const const useful pan functions cond syntactic boole exp exp exp cond lift ife pointwise conditional uniform image stretch syntactic im im scale fig 

definitions conal elliott rn finne oege de moor zoom width height output loop height loop width sin cos height div zoom width div zoom sqrt sin cos 
output width 


fig 

inlined unoptimized code zoom width height output width div width zoom height div recip sin cos loop height width zoom loop width output sqrt sin cos 
compiling embedded languages fig 

optimized version code 
