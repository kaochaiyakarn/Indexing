observable properties higher order functions dynamically create local names preliminary report andrew pitts ian stark university cambridge computer laboratory pembroke street cambridge cb qg england tel fax email pitts ian cl cam ac uk research reported concerned problem reasoning properties higher order functions involving state 
motivated desire identify difficulties created purely locality state independent properties side effects exceptional termination nontermination due recursion 
consider simple language equivalent fragment standard ml typed higher order functions dynamically create fresh names 
names created local scope tested equality passed function application 
demonstrate despite simplicity language operational semantics observable properties functions subtle 
methods introduced analyzing morris style observational equivalence expressions language 
method introduces notion applicative equivalence incorporating syntactic version hearn tennent relationally parametric functors version representation independence local names 
applicative equivalence properly contained relation observational equivalence coincides order expressions decidable 
second method develops general categorical framework computationally adequate models language moggi monadic approach denotational semantics 
give examples models fully order expressions 
fully concrete model language known 
supported uk serc gr cec esprit project ii supported uk serc studentship cec science project pl programming languages combining higher order features manipulation local state severe problems traditional techniques programming language semantics logics programs 
denotational semantics problems manifest lack abstraction existing semantic models expressions observationally equivalent interchanged program affecting behaviour executed assigned different denotations model 
operational semantics problems manifest partly fact simple techniques analyzing observational equivalence case purely functional languages milner context lemma generally notions applicative bisimulation break presence state features 
furthermore operationally approaches properties programs intensional familiar congruence properties equational logic fail hold 
see sect 
example 
problems intensively studied case local variables block structured algol languages lesser extent case languages involving dynamic creation mutable locations ml style 
see 
interest subject stems primarily desire improve deepen techniques available reasoning program behaviour impure functional language standard ml 
motivation try identify difficulties created purely locality state independent properties side effects exceptional termination non termination due recursion 
accordingly consider higher order functions dynamically create fresh names things ignore completely kind thing exceptions named 
names created local scope tested equality passed function application 
limited framework hope obtaining definitive results fully models complete proof techniques 
vehicle study formulate extension call value simply typed lambda calculus called nu calculus introduced sect 

ml terms contains higher order functions ground types bool unit ref type dynamically created unique element type unit 
acts type names thing stored characteristic name 
purposely excluded recursion nu calculus result closed expression evaluates essentially unique canonical form 
appears sight extremely simple system 
closer inspection find nu calculus expressions exhibit subtle behaviour respect appropriate notion observational equivalence 
contribution somewhat spirit meyer observe extremely simple case local state observationally equivalent expressions traditional denotational techniques fail identify example 
sect 
introduce notion logical relation nu calculus incorporating version representation independence local names 
technique syntactic version relationally parametric semantics hearn tennent 
interesting similarities plotkin abadi parametricity schema existential types theorem 
version logical relations establish termination properties nu calculus theorem provide useful notion applicative equivalence nu calculus expressions implies observational equivalence 
fact notions equivalence coincide expressions order types theorem decidable differ higher order types example 
denotational semantics nu calculus considered sect 

moggi categorical monads enforce distinction denotations values expressions canonical form denotations computations arbitrary expressions :10.1.1.41.840
helpful allows identify explicitly simply structure needed model give static meaning key dynamic aspect nu calculus action computing new name see equations 
main result theorem identify simple structure category equipped strong monad sufficient guarantee nu calculus modelled category computationally adequate way 
nu calculus expressions equal denotations category necessarily observationally equivalent 
instance categorical structure obtained adapting moggi dynamic allocation monad hearn tennent category relationally parametric functors 
model fully order types higher types 
instances categorical structure known establish subtle higher order observational equivalences 
whilst concrete model known fully nu calculus conjecture term model construction suitable extension syntax nu calculus yields instance categorical structure fully 
nu calculus syntactically nu calculus kind simply typed lambda calculus 
types oe built ground type booleans ground type names forming function types oe oe expressions take form variable name true false truth values conditional equality names local name declaration oe function abstraction mm function application var infinite set elements called variables infinite set disjoint var elements called names 
function abstraction variable binding construct occurrences bound oe local name declaration name binding construct occurrences bound 
write var finite subsets var consisting free variables free names expression implicitly identify expressions differ ff conversion bound variables bound names 
denote respectively result substituting expression free occurrences respectively expressions assigned types typing assertions form gamma oe dom gamma gamma gamma gamma true false gamma gamma gamma oe gamma oe gamma oe gamma gamma gamma phi fng gamma oe gamma oe gamma phi oe oe gamma oe oe oe gamma oe oe gamma oe gamma fm oe table rules assigning types nu calculus finite subset gamma finite function variables types oe type expression satisfying var dom gamma domain definition gamma 
rules generating valid typing assertions table 
rules phi fng indicates finite set names obtained adjoining gamma phi oe denotes finite function obtained extending gamma mapping dom gamma oe 
clearly gamma oe holds oe uniquely determined gamma write exp oe def fm oeg set closed nu calculus expression type oe free names set subset oe exp oe canonical nu calculus expressions type oe free names set consists closed expressions names booleans constants true false function abstractions 
give operational semantics nu calculus terms inductively defined evaluation relation matches computational behaviour equivalent ml expressions 
ml equivalent expression ref ml type unit ref type names 
words effect evaluating create fresh name evaluating definition ml environments bind identifiers variables addresses names chosen simplify form evaluation relation extended expressions containing names explicitly 
possible simplify syntax nu calculus identifying syntactic category names variables type choose names variables different semantic properties 
example operational semantics give commutes arbitrary substitutions variables restricted forms substitutions names viz 
essentially just permutations names 
appropriate notion state simple language just finite subset indicating names created far 
evaluation relation oe cond true phi oe oe phi cond false phi oe oe phi eq phi phi ffi nn local phi fng oe oe fng phi app oe oe oe phi oe phi phi oe fm oe phi phi table rules evaluating nu calculus expressions form oe disjoint finite sets names exp oe oe phi 
intended meaning state expression evaluates canonical form creating fresh local names process 
rules generating relation table 
rule eq notation ffi nn ffi nn def true false important note rules table refer collection judgements formed satisfy conditions mentioned 
example rule local formedness hypothesis entail element rules follow state convention standard ml order evaluation left right state accumulating sequentially 
fact dealing state created mutated sequentiality spurious 
example rule cond second hypothesis strengthened removing affecting collection valid instances evaluation similar strengthenings second hypotheses cond eq app 
easy see evaluation deterministic renaming created names sense lemma oe oe bijection ff convertible expression 
initial state evaluation structural properties affine linear logic context sense derived rules weakening exchange valid rule contraction 
example false fn valid fng 
compare affine linear logic hearn 
evaluation relation define morris style contextual equivalence nu calculus expressions expressions equivalent interchanged program affecting observable result evaluating 
take program closed expression type possible observable results evaluating program booleans true false disregarding local names created process evaluation 
change notion observational equivalence allowed programs type observable results include pre existing names 
definition usual context gamma expression subexpressions replaced place holder gamma denotes result filling place holder expression definition observational equivalence exp oe write oe mean gamma ftrue falseg case say observationally equivalent 
result shows need consider contexts immediately evaluate arguments order establish observational equivalence 
analogue theorem ciu 
lemma oe ftrue falseg oe oe oe oe instances observational equivalence easily established lemma 
corollary exp oe oe 
ii exp oe phi fng phi fn oe 
iii oe oe stands fn stands 
part ii observational equivalence matter order enumerate elements 
iv oe oe oe oe oe 
section show evaluation nu calculus expressions terminates theorem 
follows corollary observational equivalence closed expressions type true false closed expression type involving free names new def higher types things rapidly complicated 
example gives infinitely expressions type mutually observationally inequivalent 
example consider nu calculus expression type creates local names acts function cyclically permuting names mapping name def delta delta delta def property pg fn ng true 
indicates iterated times 
example simple example illustrate fact local name declaration function abstraction general commute observational equivalence 
expressions def def observationally equivalent def fnew fnew property bm fn true bn fn false 
example rule app table embodies form strict call value application 
part iv corollary shows appropriate restricted form beta conversion plotkin fi holds observational equivalence 
non termination simple language general form beta conversion fails nu calculus dynamics name creation 
example beta redex new observationally equivalent corresponding reduct new new new fn true new new fn false simple functional language pcf milner context lemma shows observational equivalence may established testing just applicative contexts form gamma surprisingly fails nu calculus 
example expressions fact indistinguishable applicative contexts distinguished complicated contexts gamma carry anonymous manipulation private names properties higher order functions create pass private names quite subtle 
contrasting examples observational equivalence subtle corollary 
illustrates fact local names distinct externally supplied names second illustrates fact local names externally supplied boolean tests 
second equivalence quite delicate certainly hold languages evaluation functions side effects mutable state 
operational denotational methods proving observational equivalences nu calculus expressions developed rest 
example false fn fn true boolean equality test fn fn abbreviation fn fn true false fn false true representation independence local names section develops notion binary logical relation nu calculus shows establish instances observational equivalence nu calculus expressions 
finite subsets names write omega indicate graph partial bijection words theta satisfies infix notation binary relations 
writing phi union disjoint sets note phi phi omega phi omega omega identity partial bijection omega definition type oe define family binary relations canonical expressions oe oe theta oe omega induction structure oe clause associated relations expressions oe exp oe theta exp oe defined 
oe omega oe phi oe phi oe oe phi oe oe oe oe oe omega oe phi oe phi phi oe phi oe implicit required disjoint clause definition syntactic version hearn tennent approach relational parametricity 
main interest definition lies clause relation oe expressions defined terms relation oe canonical expressions 
clause embodies form representation independence dynamically created local names 
cf 
plotkin abadi parametricity schema existential types theorem 
family oe oe form binary logical relation nu calculus expressions 
choose take logical relation identity ground type family determined take ground type wish related expressions mapped related expressions nu calculus function impose restriction relation ensure property holds function testing equality names 
proposition expresses fundamental property notion logical relation 
proved induction derivation typing assertions 
proposition suppose oe oe oe omega disjoint oe phi oe phi phi oe phi oe identity partial bijection defined 
theorem termination closed expressions type oe free names set say set names disjoint canonical expression oe phi oe proof case proposition implies oe exp oe 
termination follows definition oe 
show fundamental property notion logical relation embodied proposition establish observational equivalences 
definition applicative equivalence say expressions exp oe equivalent oe theorem applicative equivalence implies observational equivalence 
proof suppose oe employ lemma see observationally equivalent 
omega oe phi oe oe oe applying proposition get phi 
omega phi phi phi 
applying rules table deduce oe phi lemma deterministic nature evaluation relation lemma imply oe example theorem provides quite powerful method establishing observational equivalences oe easier deal oe example observational equivalence established method 
def def false hard see phi fng omega necessarily empty partial bijection required 
observational equivalence established theorem example shows 
applicative equivalence general strictly weaker relation observational equivalence 
example pair second order expressions observationally equivalent established denotational methods sketched sect 
related possible partial bijection fn omega fn fn true related phi canonical expressions defined example phi case fn fn phi true 
converse theorem hold oe order type form oe oe gamma delta delta delta oe oe theorem observational equivalence coincides applicative equivalence expressions order types 
proof show oe implies oe order oe 
merely indicate key idea proof 
theorem oe oe phi 
define theta consist pairs names oe phi 
assumption oe implies partial bijection 
fact oe order possible show phi oe oe observable behaviour nu calculus expressions order types complicated see example theorem non trivial 
corollary theorem obtain result 
corollary relation observational equivalence nu calculus expressions order type decidable 
proof view theorem suffices see relations oe decidable order oe 
sufficient establish decidability relations oe order oe theorem ensures calculate clause finitely decidable property checked 
decidability oe established induction structure order type oe base cases trivial induction step fact clause simplified follows oe fo oe ftrue falseg oe oe oe phi fng oe clause name denotational semantics section sketch approach denotational semantics nu calculus summarize main results 
moggi monadic approach denotational semantics :10.1.1.41.840:10.1.1.41.840
nu calculus modelled cartesian closed categories equipped things strong monad notation categorical structure associated internal language computational lambda calculus sect 

particular nu calculus function types associated expressions interpreted moggi call value translation simply typed lambda calculus computational lambda calculus see table 
model type booleans assume coproduct terminal object exists adequacy model theorem require finite limits coproduct stable disjoint strict initial object standard concepts categorical logic see chap 
sect 

model type names assume contains decidable object decidability means morphism eq theta gamma 
classifying diagonal subobject hid idi ae theta pullback eq left coproduct insertion true gamma 

morphism eq interpret equality test names definition op table 
remains explain local name declaration expressions modelled 
general categorical monads permits abstraction away detailed representation state denotational descriptions languages imperative features see wadler 
nu calculus relevant notion state hardly complicated 
find type theoretic distinction denotations values expressions canonical form denotations computations arbitrary expressions enforced monad helpful allows identify explicitly simply structure needed give static meaning key dynamic aspect nu calculus action computing new name 
requiring possess global element new gamma 
morphisms theta theta theta gamma 
theta theta gamma 
gamma 
equations internal language satisfied new eq new false new new new new new false gamma 
right coproduct insertion 
equations expressed equivalently commutative diagrams asserting equality various morphisms equation expresses statically fundamental requirement evaluating new produces new 
equations correspond respectively properties ii corollary 
automatically satisfied monad respectively commutative affine see 
structure category nu calculus type oe gets object oe defining def def oe oe def oe oe valid typing assertion gamma oe define induction structure morphism form theta gamma gamma 
oe gamma finite products def gamma def dom gamma gamma particular exp oe gives rise morphism jsj gamma 
oe jsj denotes number elements finite set 
canonical expression morphism factors unit monad oe oe gamma 
oe 
proposition soundness finite limits form subobject ae jsj corresponding conjunction jsj eq false valid evaluation oe morphisms def ae jsj gamma 
oe def ae jsj gamma 
oe equal equal applied distinct jsj tuples 
particular contains free names oe implies 
proposition termination property theorem compositional nature denotational semantics yield theorem adequacy category model nu calculus described non degenerate sense gamma 
monomorphism 
exp oe implies oe instances kind categorical structure establish validity observational equivalences denotational equalities 
examples list giving details various examples models satisfying requirements theorem 
category pullback preserving functors category finite ordinals injective functions category set sets functions 
monad moggi dynamic allocation monads value functor functor sending finite ordinal quotient set def injective functions ae id id 
object names inclusion functor 
set 
model adequate far fully example pair observationally equivalent expressions example equated model 
ii model modified incorporate hearn tennent semantic notion relational parametricity sect 
relations takes partial bijections sect 

dynamic allocation monad defined parametric functors key definition sect 

drawing theorem able show resulting model fully order expressions model implication theorem reversed oe order 
model fully nu calculus fact expressions equated 
iii category known equivalent category continuous sets topological group permutations subspace baire space see lemma example 
guise modify model considering pers sets continuous sets quotienting partial equivalence relation equivariant functions tracked partial recursive functions 
model gives means establishing observational equivalence shown morphism distinguishes denotations terms denotations fact distinct 
observational equivalence follows applying lemma 
models fully nu calculus sense implication theorem reversed holds model oe 
know concrete model fully 
conjecture term model construction suitable extension syntax nu calculus yields instance categorical structure fully 
grateful eugenio moggi peter hearn allen stoughton robert tennent making unpublished available 
benefited conversations topic 
abramsky 
lazy lambda calculus 
turner ed research topics functional programming addison wesley pp 

boehm 
side effects aliasing simple axiomatic descriptions acm trans 
prog 
lang 
syst 

felleisen friedman 
syntactic theory sequential state theoretical computer science 
honsell mason smith talcott 
variable typed logic effects 
proc 
computer science logic lecture notes computer science springerverlag berlin appear 
jacobs 
semantics weakening contraction 
preprint may 
johnstone 
quotients decidable objects math 
proc 
camb 
philos 
soc 

mason talcott 
local variables operational reasoning 
proc 
th annual symp 
logic computer science santa cruz ieee computer society press washington pp 
meyer 
fully semantics local variables preliminary report 
conf 
record th symp 
principles programming languages san diego acm new york pp 
milner 
fully models typed calculi 
theoretical computer science 
milner tofte harper 
definition standard ml mit press 
moggi 
view programming languages 
lecture notes july pp 
moggi :10.1.1.41.840
notions computation monads information computation 
makkai reyes 
order categorical logic lecture notes math 
vol 
springer verlag berlin 
hearn 
model syntactic control interference mathematical structures computer science appear 
hearn tennent 
semantics local variables 
fourman johnstone pitts eds applications categories computer science lecture note series cambridge university press pp 
hearn tennent 
relational parametricity local variables 
conf 
record th symp 
principles programming languages charleston acm new york pp 
pitts 
evaluation logic 
birtwistle ed higher order workshop banff workshops computing springer verlag berlin pp 
plotkin 
call name call value lambda calculus 
theoretical computer science 
plotkin abadi 
logic parametric polymorphism 
proceedings conference typed lambda calculus applications utrecht lecture notes computer science vol 
springer verlag berlin pp 
reynolds 
syntactic control interference 
conf 
record th symp 
principles programming languages tucson acm new york pp 
tennent 
semantic analysis specification logic information computation 
wadler 
comprehending monads 
proc 
acm conf 
lisp functional programming acm new york pp 
