hybrid systems modeling supervisory control bruce krogh department electrical computer engineering carnegie mellon university pittsburgh pa usa email cg cmu edu summary 
presents elements control oriented models hybrid systems input output signals 
models composed standard block diagram interconnections 
transition systems inputs outputs introduced define semantics open loop hybrid systems 
fixed point iterations synthesize logical supervisory controllers 
illustrated problem designing supervisor keep state hybrid system specified set forbidden states 
developed tools computeraided modeling simulation verification hybrid systems reviewed briefly 
concludes discussion open research issues prospects applications theory problems practical interest 
factors stimulated interest hybrid systems control theorists 
applications provide motivation 
physical systems exhibit distinct discrete modes behavior introducing discrete continuous state variables models 
computer control systems continuous dynamic systems introduce discrete states form switching logic selects control gains current operating conditions 
sequential control applications traditional domain programmable logic controllers continuous process dynamics influence timing synchronization concurrent activities 
bruce krogh problems hybrid dynamics hybrid control years sudden flurry activity hybrid systems theory theoretical side maturation control theoretic research discrete event systems des contributed significantly interest hybrid systems 
early control theorists typically study discrete state systems 
des formalisms theory standard graduate control curricula conferences publications 
consequently familiar tools hand model investigate discrete aspects hybrid systems 
current tools computer aided control system design provided additional impetus support studying hybrid systems 
effective tools modeling simulating dynamic systems mixed discrete continuous state variables standard software packages 
easier create study interesting examples necessary empirical component serious research complex behaviors hybrid dynamic systems 
coincident advent hybrid systems research control theorist growing interest hybrid systems computer scientists particularly areas formal methods computer aided verification 
reflects need extend tools strictly discrete state analysis incorporate important features underlying continuous dynamics digital circuits 
computer scientists interested reactive systems include real time control systems 
stimulated dialog collaboration control theorists computer scientists hybrid systems particularly exciting challenging area research 
objectives 
briefly reviewing sect 
types phenomena give rise hybrid dynamics nature hybrid phenomena block diagram approach modeling hybrid systems sect 

second concept transition system semantics verification extended sect 
describe open loop hybrid systems discrete inputs threshold event outputs 
third supervisory control problem hybrid systems formulated formal solution transition system semantics sect 

fourth problem computing solution supervisory control problem addressed sect 
theory bisimulations simulations approximations 
computer tools simulation analysis reviewed briefly sect 
directions research identified sect 

elements hybrid system models physical phenomena best modeled hybrid systems 
section briefly describe simple examples motivate formal models remainder 
hybrid systems modeling control synthesis collisions 
mechanical collisions result instantaneous changes velocities objects 
jumps value dynamic state modeled impulsive inputs dynamic equations motion 
interesting aspect modeling problem times jumps state determined state trajectory 
bouncing ball illustrates situation 
horizontal position ball determines impulse occurs 
ball hits ground velocity ball changes direction instantaneously 
systems discrete events cause continuous state jump hybrid systems particularly continuous state trajectory cause discrete events 

mechanical systems exhibit operate different regimes modeled discrete states 
dynamic equations switch depending mechanical parts touching 
contact forces direction maintain contact parts constrained move 
parts touching forces direction away contact degrees freedom increase parts move independently 
equations motion include discrete state indicating contact constrained motion contact unconstrained motion 
systems discrete states defining regimes continuous state dynamics hybrid systems 
note systems collision occurs parts come jump state variable velocity addition change equations motion 
electrical switches 
electrical circuits switches introduce jumps state circuit changes dynamic equations circuit 
jumps state occur example closing switch creates short capacitor 
discharge instantaneous physical circuit wire short resistance 
jumps state system typically represent practical idealization physical situation transients faster time scales interest 
switch discrete input signal continuous circuit dynamics 
situation arises circuits involving switching devices silicon controlled 
cases state variables circuit voltages currents determine switching corresponding jump state occur 
gain scheduling controllers 
common source hybrid dynamics cited literature application discrete control logic control continuous systems 
noted logical operations implement things exception conditions safety limits take code continuous feedback control computations computer program real time control 
certain control algorithms hybrid discrete logic switches different continuous feedback laws strategy called gain scheduling 
gains typically selected bruce krogh operating state system environment making value discrete state gain index function continuous state variables continuous input variables 
examples illustrate fundamental features hybrid systems need captured general modeling formalism 
features include discrete continuous state variables discrete continuous input output signals continuous dynamics depend discrete variables discrete transitions depend continuous variables discrete events cause jumps continuous state discrete events depend continuous state trajectory desirable able compose hybrid system models components 
simple examples illustrations hybrid phenomena occur complex systems modeled interconnected components 
section presents set input output blocks include features listed facilitate creating hybrid system models simpler subsystems 
block diagram models hybrid systems control systems engineers block diagrams long served effective representation dynamic systems 
models complex dynamic systems constructed fundamental blocks interconnected input output signals 
section presents types signals basic blocks models general hybrid systems constructed 
continuous time assumed independent time variable consequently terms continuous discrete refer sets values ranges continuous time signals 
continuous ranges assumed discrete ranges form theta delta delta delta theta dm finite set signals called binary signals 
block defined input port output port state variables initial states input state output iso relations 
input port output port defined signal type discrete continuous binary associated ranges 
iso relation block defines relationship input signals internal state trajectories output signals algebraic equations inequalities differential equations logical expressions 
switched continuous systems scs 
scs block input port discrete input signal continuous state initial state continuous output port state output state vector 
iso relations continuous state equation hybrid systems modeling control synthesis assumed lipschitz respect continuous state jump equation gamma gamma discrete input scs block selects continuous dynamics 
state discrete input denotes solution continuous state equation discrete input changes points discontinuity right continuous may jump continuous state determined jump equation 
finite state machines fsm 
fsm block input ports discrete input signal possibly vector valued binary signal discrete state initial state discrete output port discrete signal iso relations discrete state equation gamma gamma gamma output equation assumed discrete state transition function satisfies delta assumption implies transitions discrete state occur discontinuity binary input signal 
region blocks 
region block input port continuous signal output port scalar binary signal region blocks memoryless state variables 
input output relation identifies input region defined smooth function ae means component equal zero 
transition binary output signal indicates state trajectory left region fx mg set boundary states region block defined fx mg bruce krogh stacking blocks 
stacking block memoryless utility block multiple inputs single type signal continuous discrete binary 
generates single vector output subvectors equal input vectors order defined inputs block 
see examples 
illustrates hybrid system defined types blocks defined 
generated simulink interface hybrid system tool region blocks defined linear inequalities see sect 

blocks defined deterministic model simulated obtain trajectories states input output signals system 
hybrid system defined block diagram continuous state space denote xh product state spaces scs blocks set boundary states denoted union boundary states region blocks defined full state space xh set possible initial states scs blocks denoted ae xh consider class supervisory control problems hybrid systems structure shown fig 

system scs controlled supervisor selects discrete input observations transitions signals region blocks concatenated single vector stacking block 
refer open loop hybrid system discrete input signal binary vector output signal fig 
ho sequel 
transition system semantics hybrid systems transition systems effective formalism define semantics hybrid systems modeled hybrid automata 
section introduce transition systems inputs outputs define semantics open loop hybrid system ho fig 

interested sequential input output behavior ho details continuous trajectories threshold events observed affected supervisor 
definition 
transition systems transition system tuple possibly infinite set states finite sets inputs outputs respectively theta theta set transitions output map possibly infinite set initial states 
notation indicates 
note require transition relation complete transition relation necessarily defined state inputs 
note set initial states independent set states system return initial state transition 
definitions useful subsequent development 
hybrid systems modeling control synthesis mux stack mux stack mux stack scs scs scs region region region finite state machine finite state machine fig 

block diagram hybrid system 
definition 
pre postconditions transition system precondition respect input denoted re defined re fq pg postcondition respect denoted ost defined ost fq qg definition 
deterministic transition system transition system deterministic implies bruce krogh supervisor mux stack scs region region region fig 

hybrid system supervisory controller 
definition 
input output io strings reachable states transition system sets states reached io strings oe uv denoted oe ae defined recursively ffl ffl empty string ii 
rt oe fq vg oe uv set feasible io strings denoted sigma ae uv defined sigma foe uv oe henzinger described complete untimed behavior hybrid automaton time transition system 
interested behaviors hybrid system ho times discrete transitions occur 
away continuous dynamics obtain projection hybrid system behaviors instants discrete transitions define discrete trace transition system ho follows 
definition 
discrete trace transition system open loop hybrid system ho continuous state space xh initial state set ae xh region blocks region functions hm boundary states discrete trace transition system th fqh qh transition relation defined follows hybrid systems modeling control synthesis qh iff exists exists mg ii 
qh iff conditions satisfied discrete trace transition system gives possible input output behaviors open loop hybrid system ho possible values discrete input signal section consider problem synthesizing supervisor control discrete trace transition system ho guarantee set forbidden states subset states reached 
supervisory control consider supervisors observe io string transition system select set admissible inputs output 
particular input applied implementation selected randomly selected achieve specific objectives specifications synthesizing supervisor 
formal definition supervisor 
definition 
transition system supervisors supervisor transition system mapping uv supervisor restricts set inputs applied transition system output 
general set available inputs depend entire input output history point time 
initial input value selected ffl 
denote transition system control supervisor sets valid io strings reachable states defined follows 
definition 
io sequences reachable states transition system supervisor uv sets states reached io strings oe uv denoted oe ae defined recursively ffl ii 
oe fq oe vg oe uv set feasible io strings denoted sigma ae uv defined sigma foe uv oe bruce krogh words behaviors supervised transition system described follows 
initial state input applied transition system valid set inputs defined supervisor transition occurs output observed 
io pair corresponds input output transition system transition relation 
output occurs input applied transition system set specified supervisor transition occurs output observed giving input output pair 
considered problem constructing supervisors hybrid systems satisfy specifications sequential behavior closed loop system 
consider problem supervisor synthesis avoid set forbidden states 
denote set reachable states supervised transition system oe sigma oe assume set inputs applied transition system output specified supervisor input constraint function defined follows 
definition 
input constraint function transition system supervisor input constraint function mapping ffflg definition 
forbidden state problem fsp transition system input constraint function set forbidden states qf ae find supervisor ffl ffl ii 
oev sigma oev iii 
qf 
furthermore supervisor satisfying ii fsp differs standard forbidden state problems des literature supervisor observes system input outputs state ii transition system nondeterministic iii input applied supervisor restricted output 
minor extensions known results des literature shown solution fsp exists 
allowing nondeterminism supervisor guarantees existence maximally permissive supervisor required sentence fsp definition 
procedure computing solution fsp 
create deterministic transition system standard construction automata theory 
call system transition system state observer reasons clear shortly 
hybrid systems modeling control synthesis definition 
transition system state observer nondeterministic transition system transition system state observer defined obs obs delta obs obs obs obs fp oe oe sigma oe fflg ii 
obs fq iii 
oe sigma oe uv obs iv 
obs obs unique equal evident construction obs deterministic transition system state transition system uniquely determined io sequence sigma fsp transition system translated forbidden state problem obs follows 
observed io string applied obs state obs known 
state set possible states best estimate supervisor state set forbidden states qf forbidden states obs obs fp obs qf supervisor observe io sequence apply inputs state obs obs determine maximal set inputs applied state obs definitions applied fixed point computations performed 
obs obs obs define fu obs ost fp obs suppose fixed point computed starting obs applying iteration evident state inside impossible supervisor guarantee state obs eventually obs implies turn far supervisor know state reach qf hand obs supervisor guarantee state reach qf simply choosing set state obs summarize fig 
shows structure supervisor solves fsp construction operation supervisor steps 
create transition system state observer 
find set forbidden states observer obs 
perform iteration described find fixed point operator bruce krogh 
obs solution fsp 
obs select initial input set ffl 
set oe ffl 
output observed update oe increment 
compute observer state oe select input oe 
return step 
transition system state observer obs select input uu fixed point supervisor fig 

structure supervisor solves fsp 
supervisor synthesis approximations point formal solution supervisory control problem hybrid systems 
computable solution th infinite state transition system 
formal computations hybrid systems modeling control synthesis previous section impossible 
verification problem addressed concept bisimulations may provide finite state transition system equivalent infinite state transition system 
unfortunately may finite bisimulation th case approximations needed develop section 
basic theory simulations bisimulations transition systems extended include inputs outputs 
definition 
simulation transition systems simulation relation binary relation theta exists ii 
exists iii 

say simulates denoted exists simulation relation called simulation words simulates trajectory trajectory inputoutput sequence states trajectory related states simulation relation 
definition 
bisimulation transition systems bisimulation relation binary relation theta simulation relation gamma theta simulation relation say transition systems denoted exists bisimulation relation approach finding bisimulation transition system uses quotient transition systems generated partitions transition system state space satisfying property 
definition 
output consistent partition ocp transition system partition output consistent partition constant ae definition 
quotient transition system transition system ocp quotient transition system defined iff exist equivalently ost fp easy see relation theta pg simulation relation quotient system bruce krogh bisimulation relation theta pg partition satisfies re re words states system behaves uniformly starting states states state reach state transition 
condition leads general procedure computing bisimulation transition system quotient systems 
bisimulation procedure bp set check termination condition re partition refinement split re re set fpg fp note precisely termination condition bp 
guarantees quotient system bisimulation bp terminates 
iteration bp partition refinement scheme uses information obtained re split part reach part 
note re delta operation bp respect transition relation transition relation quotient system bp applied transition system th hybrid system ho terminates bisimulation th th construct supervisor solve fsp procedure described previous section 
procedure illustrated fig 
set forbidden states th initial ocp selected satisfying additional condition set forbidden states definition 
consistent partition set states ae discrete trace transition system th partition said consistent 
assume set forbidden states qf th admits qf consistent partition finite 
qf consistent partition fsp th translated quotient system tp defining forbidden states tp elements partition contained original set forbidden states 
starting initial partition bp applied supervisor synthesis algorithm applied resulting quotient system indicated fig 
problem remains bp may terminate possible finite state bisimulation exists th bp converges hybrid systems modeling control synthesis procedure fig 
reaches supervisor synthesis step 
circumvent problem propose alternative procedure illustrated fig 
approach supervisor synthesis procedure applied intermediate quotient systems obtained iteration bp waiting bp terminates 
solution exists fsp quotient system simulates th bisimulation th follows resulting supervisor guarantee hybrid system ho reach forbidden state 
solution exists fsp quotient system imply solution original fsp quotient system bisimulation 
shown fig 
solution fsp check see current quotient system bisimulation case fact solution fsp quotient system implies solution fsp th current quotient system bisimulation partition refined bp procedure repeated 
finite bisimulation th procedure fig 
may find solution fsp quickly procedure fig 
wait bp converge checking see satisfactory supervisor constructed 
may case supervisor quotient system bisimulation conservative due coarseness partition additional evaluation loop added fig 
example supervisor may avoid forbidden states choosing initial input allow subsequent output 
equivalent shutting system may want refine partition conservative supervisor 
note quotient system bisimulation solution exists fsp conservative supervisor possible 
implementation procedure fig 
requires computation precondition postcondition sets 
may possible compute sets exactly computation method may costly implement 
lack effective way compute sets naturally leads consider replacing approximations procedure fig 
consider implications approximations 
call method approximate precondition postcondition sets transition system reachability approximation method 
denote precondition postcondition sets computed reachability approximation method re ost respectively 
definition 
reachability approximation method transition system called conservative re re ost ost 
exact precondition postcondition sets approximate quotient system partition reachability approximation method 
bruce krogh construct initial partition bp iterations supervisor synthesis construct initial partition supervisor synthesis test bisimulation evaluate supervisor refine partition finite bisimulation solution supervisor solution supervisor ok bisimulation approach simulation approach finite simulation fig 

approaches solving fsp compute bisimulation apply supervisor synthesis procedure apply supervisor synthesis procedure refinement iteration 
definition 
reachability approximation method transition system quotient system partition defined sigma defined follows 
iff ost 
conservative follows directly defn 
identity relation theta conservative approximation procedure fig 
issues arise introducing conservative approximation verification procedure 
may solution fsp conservative quotient system fact solution exact quotient system 
second solve fsp may obtain supervisor conservative obtained exact quotient system 
third longer hybrid systems modeling control synthesis condition test bisimulation condition re re imply quotient system bisimulation worth noting cases test condition bisimulation exploiting certain properties reachability approximation method 
computational cost issue observe refinement method refine quotient system 
different refinement methods merely result different rates convergence bisimulation 
ideally refinement method bp refine quotient system method give strict progress bisimulation 
pn obtained refining pn method bp guaranteed pn pn bisimulations mean progress obtaining tighter simulation method may complex costly implement requires computation precondition sets implementation set subtraction complicated arbitrary sets 
may prefer simpler refinement method verification procedure 
computer tools computer tools developed augmented model simulate cases analyze certain classes hybrid systems 
simulation tools include object oriented packages shift 
stateflow toolbox simulink mathworks provides block diagram environment features similar general blocks defined sect 

verification tools reflect basic approaches verification model checking hytech theorem proving step 
cases system description objective determine model satisfies particular property 
analysis tools developed timed systems kronos hybrid dynamics pure integrators 
principal difficulty verifying properties hybrid systems computing mappings sets continuous state space 
hybrid system simulators single trajectory computed easily standard numerical integration 
mapping set initial states set boundary states generate threshold events requires computation entire flow pipe continuous dynamics 
called linear hybrid automata exact flow pipe computation carried convex polyhedra 
approximations general continuous dynamics 
various procedures proposed approximate continuous dynamic mappings 
approach approximate continuous state equations class systems exact computations 
linear hybrid automata approximate nonlinear dynamic bruce krogh equations hytech system verification 
timed automata approximate continuous dynamic systems kronos verification 
approach approximate continuous system dynamics discretize continuous system tools purely discrete finite state systems applied analysis synthesis 
straight forward approach create cells continuous state space assign discrete state cell create transitions cells reachability cells inferred state equation 
approach proposed early analyzed puri 
general shortcoming cell approach reachability approximation extremely conservative quickly distance set initial states 
proposed new approach approximating flow pipes sequences convex polytopes 
approach set direction vectors time increment selected 
smallest convex polytope faces normal direction vectors contains flows initial set computed numerical optimization 
advantage approach approximation error grow distance initial set 
method computationally intensive optimization problems convex general making difficult guarantee global optimum achieved 
flow pipe approximation incorporated verification tool supporting block diagrams type described sect 
matlab simulink stateflow custom user interface 
tool generates approximating automata simulations described sect 

user verify properties approximating automata properties hybrid system inferred 
block diagram description language integrated tools described university dortmund giving access timed analysis kronos 
directions described block diagram approach modeling hybrid systems transition system semantics formulate solve class supervisory control problems 
computer support block diagram modeling available building simulation models basic tool developed verification model checking hybrid system block diagrams autonomous transition systems simulate discrete trace transition system hybrid system 
extension tool generate input output transition systems allow supervisor synthesis tools des 
issues explored technology useful practical problems 
approximations solve verification synthesis problems proposed essential ap hybrid systems modeling control synthesis conservative 
possible floating point arithmetic measures assure numerical errors right direction models conservative 
research underway developing numerical techniques hybrid systems problems general approach developed date 
issue explored inner approximations guide refinement models solve problems existential specifications 
outer approximations possible solve problems universal specifications forbidden state problem considered 
guarantee trajectory exists particular property approximations trajectory current state lead safe shutdown state satisfaction inner approximation guarantee property true actual system 
inner approximations timed automata developed 
control synthesis involving continuous discrete supervisory aspects hybrid systems received little attention date clear synthesis practical controllers includes continuous variables 
particular values thresholds design parameters 
approach determining thresholds class hybrid control problems proposed 
case controller sets thresholds certain parameters fixed point iterations performed continuous space convex polytopes find controller satisfying specifications 
research needed direction develop comprehensive theory control synthesis hybrid systems 
summary number important open problems hybrid systems practical theoretical significance 
complexity hybrid systems difficulty solving trivial problems exactly approximation techniques important direction research real engineering problems solved 
crucial computer tools developed conjunction emerging theory experience real problems grow field 
acknowledgments author acknowledges support ford motor national science foundation authors acknowledge support defense advance research projects agency darpa 

alur henzinger 
ho 
automatic symbolic verification embedded systems 
ieee trans 
software engineering mar 

andersson 
tutorial user manual 
department automatic control lund institute technology lund sweden march 
bruce krogh 
asarin maler pnueli sifakis 
controller synthesis timed automata 
ifac symposium system structure control pages 

krogh 
computing polyhedral approximations flow pipes dynamic systems 
ieee conf 
decision control dec 

krogh 
verification polyhedral invariant hybrid automata polygonal flow pipe approximations 
van editor hybrid systems computation control lecture notes computer science 
springer march 

krogh 
supervisory control hybrid systems approximating automata 
journal society instrument control engineers march 

krogh 
synthesis supervisory controllers hybrid systems approximating automata 
ieee trans 
automatic control april 
preliminary version appeared proc 
th ieee cdc pp 


olivero tripakis yovine 
tool kronos 
hybrid systems iii verification control 
springer verlag 

deshpande 
shift manual 
university california berkeley 
path report prcs version 

dill wong toi 
verification real time systems successive approximation 
computer aided verification th international conf pages liege belgium july 

manna step standford temporal prover educational release user manual 
technical report computer science department standford university 

sastry pappas 
hybrid systems finite bisimulations 
technical report ucb erl university california berkeley april 

yovine pappas 
decidable hybrid systems 
technical report ucb erl university california berkeley june 

henzinger 
hybrid automata finite 
editors icalp automata languages programming pages 
springer verlag 

henzinger 
theory hybrid automata 
proceedings th annual symposium logic computer science pages 
ieee computer society press 
invited tutorial 

henzinger 
ho wong toi 
algorithmic analysis nonlinear hybrid systems 
ieee transactions automatic control 
appear 


finite automation approximation behavior continuous plants 
automation remote control pages 

puri varaiya borkar 
ffl approximation differential inclusions 
alur henzinger sontag editors hybrid systems iii verification control pages 
springer verlag 


generating timed discrete models continuous systems 
proc 
nd pages vienna austria feb 

feng zhao 
automatic analysis synthesis controllers dynamical systems phase space knowledge 
phd thesis mit artificial intelligence laboratory 
