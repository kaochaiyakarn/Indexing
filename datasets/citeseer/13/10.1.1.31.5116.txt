query optimization structured documents knowledge document type definition bohm department dep 
economics computing science eth zurich humboldt university berlin zurich switzerland berlin germany karl aberer tamer ozsu gmd ipsi department computing science 
university alberta darmstadt germany edmonton alberta canada declarative access mechanisms structured document collections semi structured data increasingly important 
article rule approach query optimization applying queries deploy knowledge document type definition dtd formulate transformation rules query algebra terms 
specifically look rules save navigation paths cutting paths replacing access operations indices materialized views paths 
show cases correctly apply completely exploit knowledge dtd briefly discuss performance results 
growing number documents available www increasingly larger size www query languages gaining importance 
researchers currently investigate languages :10.1.1.11.3892
kind documents examine structured documents xml sgml documents html documents 
xml sgml explicit internal logical structure documents append arbitrary meta information logical document elements 
context important sgml documents type logical structure conform definition respective document type leading high degree consistency document collection 
www query languages allow querying document collection logical structure documents hyperlinks documents 
article look queries document structure retrieval document elements 
objective article examine degree knowledge document type definition dtd useful query optimization 
authors discuss rewriting techniques new non conventional query algebra operators techniques standard operator set 
optimization technique full text index structures 
turn article combines indices combination dtd information 
motivating example structured document collections sophisticated graphical user interfaces available 
interfaces get overview document collection logical structure documents 
example web interface multimedia forum interactive online journal published gmd ipsi displays surnames authors 
clicking particular surname returns respective documents 
instance clicking surname busse query evaluated query engine find documents surname author contains value busse 
execution query may complex 
confirmed element types author surname valid types elements multimedia forum documents 
elements type surname contain string busse descendants author elements 
locating surname elements conditions engine return corresponding documents 
dtd type author type surname specified infer query result empty looking database state 
types valid dtd show elements type surname descendants author elements 
case know advance execution query document result set 
designer interface certainly kept track inconsistencies checking elements type surname exclusively contained author elements fruitful context 
dtd certifies element type surname contained author element reformulate query follows find documents surname contains value busse 
rewritten query saves navigation surname author elements 
dtd shows surname elements exclusively subelements author elements descendants editor elements gain lot accessing index path surname author 
navigating surname author elements access structure index surname author returns surname elements containing string busse descendants author elements 
scope article pat algebra structured documents 
extended original algebra described additional operators specify hyperlinks target documents characteristics web query language 
looking individual operators pat algebra examine role dtd query optimization 
turns pat operators require special attention 
operators reflect element types particular dtd contains contained relationships 
objective knowledge dtd query optimization order identify efficient evaluation strategies queries posed sgml repositories 
dtd seen set integrity constraints explicitely specify arrangement logical elements documents 
identify relevant relationships element types show relations derived dtd improve query evaluation time 
define notions exclusivity obligation entrance location start navigation elements types 
notions navigate element check existence dtd known target element 
element types obligation exclusivity holds true identifying third entrance location start navigation improve query evaluation 
structure indices element types materialized views paths combination notions avoid scanning document base improve query evaluation time 
pursuing rule approach query optimization formulate rules input query optimizer reflect notions sketched prove correctness rules 
report experiences gained implementation 
indicate investigated ideas fact advantageous query optimization 
related addition web query languages query optimization database integrity constraints relevant 
regard rule query optimization distinguish application independent transformation rules application specific ones 
classified approaches rules contain hardcoded application specific knowledge application specific knowledge extracted database schema course optimization 
pursue second alternative 
aware piece deals knowledge document type definition build application specific optimization rules 
consens milo replace query algebra operator cheaper dtd allows 
consider restricted set dtds look different grammar constructors 
optimization special cost model results directly transferable application scenario 
contrast contribution independent cost model 
issue consens milo pat index structures 
queries evaluated efficient way size pat index depends size document collection size index structure depends roughly number relevant elements 
words pat index covers document index configured contain element authors author 
element author name 
attlist author function author camera composer editor producer author 
author default value 
element editors editor 
element editor name 
element name surname firstname addition 
element surname firstname addition pcdata 
fragment sample dtd document type multimedia forum important structures 
index covers updates difficult implement 
remainder article structure section briefly describe relevant notions structured documents declarative access collections documents database application framework 
section contains description approach dtd query optimization correctness completeness proofs 
section extends considering indices combination dtd knowledge 
section contains optimization measures 
section concludes summarizes implementation experiences 
structured documents declarative access mechanisms sgml 
standard generalized markup language sgml iso standard document description 
sgml document portable logical structure described markup notation opposed layout structure 
sgml allows definition arbitrary markup languages documents different types 
document type definition dtd specifies markup language 
perspective dtd specifies valid types document elements logical order documents 
fragment document type definition 
fragment sgml document conforms dtd 
fragment surname element textual content busse directly contained element type name indirectly contained elements type author authors 
conversely say elements directly indirectly contain surname element 
definition path document list elements successor element authors author name surname busse surname firstname ralf firstname name author author name surname huck surname 
firstname gerald firstname name author authors 
fragment sample sgml document list element father hierarchical structure described dtd 
surname name author path sample document 
path implies content model element type name contains element type surname content model element type author contains element type name 
content model element type may defined follows definition content model content model term structure 
element type name 
element type name 
means content element type identified element type name 
stands arbitrary number occurrences number may zero 
means optional occurrence jc occurrence indicates occurrence followed short short 
sgml terminology comma sequence connector seq seq node term seen tree connector node optional occurrence indicator optional repeatable occurrence indicator 
elements may attributes attribute function elements type author 
line attlist author function author camera 
introduces attribute 
attributes minor importance article 
querying structured documents 
pat algebra query document collections 
particularly designed query structured documents independent underlying data model 
user friendly expressive 
variant pat algebra grammar generates query terms element type name 
union intersect content select attr select incl empty term element type name 
stands set elements respective type 
union intersect diff set operators usual semantics 
content select takes set elements returns textual content contains regular expression attr select takes set elements returns attribute contains regular expression incl take sets elements return set elements incl fe contained fe contains say internal element type external element type 
empty stands empty set 
structured document database 
store query structured documents built database application framework structured document database top object oriented dbms 
user perspective document element corresponds database object user perceives document database tree structure 
performance reasons multiple document elements may stored physical database object 
furthermore database application offers indices frequently asked document elements 
includes attribute indices store attribute values document elements 
instance index attribute function type author contains document element corresponding attribute value author camera composer 
furthermore content indices created store textual content document elements particular type 
instance content index element type surname stores textual data corresponding element 
database application offers structure index 
instance structure index element type author path surname author stores surname elements path upward direction author elements exists 
structure index useful evaluating queries incl operator review section 
query processing 
pat expressions posed structured document database mapped queries 
query language 
mapping pat expressions processed follows 
parsing statement 
semantic check query data model database schema 
transformation query statement query algebra expression 
generation alternative algebra expressions equivalent generated step set transformation rules 
algebra expressions generated step identifying cost efficient cost model 
query evaluation 
approach query processing similar ones described 
rules introduced article transformation rules step enumeration 
list transformation rules volcano optimizer generator generate query optimizer 
rules may condition part specifies conditions optimizer may apply rule 
introduce optimizations rules pat notation volcano level 
pat expressions easier read pat level better reflects optimizations aiming 
knowledge dtd query optimization article knowledge dtd identify efficient evaluation strategies queries posed sgml repositories 
section define notions exclusivity obligation entrance locations element types 
introduce concept element type graph indicate relation exclusivity entrance locations 
describe operations dtd allow identify cases obligation 
exclusivity obligation entrance location exclusivity 
examination dtd reveals types shared 
example element type name contained element type author editor 
types shared exclusively contained bear potential query optimization 
definition exclusivity element type exclusively contained element type path element type document root contains element type conversely element type exclusively contains condition holds 
exclusivity serves condition transformation rule rule incl exclusively contained condition holds element internal type contained element external type consequently replace expression incl yields result 
queries incl equivalent exclusivity appropriate optimize queries second 
obligation 
exclusivity reflects perspective internal element type external element type starting point obligation 
definition contains contained element type contains element type element type contain document element type conversely say contained transformation rule definition 
rule contains analogous previous situation obligation transform incl 
entrance locations 
element types related exclusivity obligation may worthwhile check third element type called entrance location exists start navigation document elements 
definition entrance location element type entrance location element types document paths element type element type contain element type note entrance location types identical entrance location notion entrance location stems experiments rule 
name author editor authors editors addition surname pcdata element type graph sample dtd rule incl incl incl entrance location define entrance locations reasons 
advantageous navigation instances document base contains smaller number instances compared situation occurs special cases 
second reason entrance locations may advantageous combination structure indices 
deal optimizations section 
identifying cases exclusivity entrance locations visualize relationships induced document type definition means element type graph 
contains graph fragment sample dtd 
definitions introduce semantics nodes edges 
definition element type graph element type graph dtd directed graph 
vertices names element types edge indicates occurs content model rt root element type definition directly contained contains element type directly contained exists edge conversely directly contains edge exists 
definition contained contains contained relationship contains relationship element types transitive closure directly contained relationship relationship 
element type graph depicts contained relationships dtd 
example see element types surname firstname contained element type author 
furthermore infer element type surname content model pcdata fact contain element type 
theorem element type entrance location iff element type graph contain path vertex proof 
suppose path contain vertex case construct document path contain content chosen contains element type content chosen contains element gamma type gamma opposite direction element type entrance location elements path contain element type directly contained type edge element type graph 
corollary element type exclusively contained element type iff element type graph contain path root element type vertex proof 
follows immediately theorem takes root element type identifying cases obligation identify cases obligation deeper look occurence indicators content models 
distinguish element requires just optionally contains subelement 
definition reduced version dtd dtd 
content models removing subtrees root optional occurrence indicator 
optional repeatable occurrence indicator obtain reduced dtd lemma obligation relations dtd reduced version identical 
seq seq seq 





normalization step 





normalization step proof 
proof contradiction element type contain element type document type element contain contradiction subtree root conforms lemma reduced version content model normalized transformed equivalent content model holds ffl root node ffl children root seq nodes ffl children seq nodes leaves element types 
proof 
define normalization steps 
sequence steps transform start tree result tree content model returns normalized dtd 
cases considered 
figures reflect cases start trees left target trees right 
transformation requires explanation consider arbitrary list nodes containing exactly child node 
order nodes start tree implies nodes ordering list 
exists seq node target tree content list 
note occurs start tree various times target tree 
obvious depth content tree reduced finite sequence steps 
seq 

seq seq 
normalization step normalization process terminates 
furthermore easy conceive application steps alter content represented content tree lead normal form defined 
context article normalization important 
consider definition element type particular content model element 
subtree connector obligatory seen isolation 
careful examination content model yields contained furthermore identify cases obligation sufficient look individual content models isolation 
fragment dtd 
element 
element 
element 
contain tempted conclude likewise contain case 
definition extended content model element types dtd content model extended result algorithm content model contains non terminal element types different occurrence element type element type replace content model return theorem element type contains element type iff seq node content model normalized extended contains occurrence proof 
correctness elements types respectively extending content model eliminates elements affect fact contained correctness follows observation lemmas 
completeness suppose seq node content model extended contain occurrence construct document fragment contain combining dtd knowledge structure index optimizations section rules avoid navigating paths assume object oriented representation structured documents 
query evaluation access documents database 
section show combination knowledge document type definition index structures potential query optimization 
structure index materialized view certain paths database 
accelerates evaluation queries select elements database objects contained certain elements 
section discuss techniques dtd knowledge transform queries query processor structure indices evaluation 
techniques find subpaths paths starting selected objects structure index exists 
illustrative purposes consider fragment dtd 
dtd element type surname exclusively contained name 
element type name shared element types editor author 
turn element types may exclusively contain types authors exclusively contains author 
structure index list elements certain type contained elements type 
assume structure index surname author 
allows quickly answer query surname incl author 
continue example index infer dtd surname elements exactly ones contained authors element structure index surname authors unnecessary 
interested identifying cases index structures occur 
detail want know circumstances terms incl incl incl equivalent 
continue example correspond surname authors author 
replacing incl incl incl interest structure index 
second term cheaper evaluate path elements type ones shorter ones type database may elements type type elements type identical expect performance gain orders magnitude access documents database evaluate query structure index 
rule exploits structure index follows rule incl incl incl exclusively contained exclusively contained entrance location theorem query algebra terms sides rule equivalent conditions hold 
proof 
situation depicted 
suppose right expression return element type returned left expression 
element type contains result right expression expression incl identify words contained element type conclude contained element type suppose element type contain contains contained contain alternative feasible just explained 
contain entrance location hand contained element type contained element type 
opposite direction result right expression left 
words contained element type due contained type contained element type element type transformation specified rule requires conditions 
illustration proof theorem mean query optimizer transform left term right fulfilled 
transformation advantageous structure index exists 
implementation condition part transformation rule checks 
example illustrates rule structure index surname author 
conceivable name author structure index query surname incl authors 
case structure index query evaluation 
rule sequence reflects case 
modify examples authors external element type structure index author author external element type query authors 
refrain explicitly writing rules cases due lack space 
rule incl incl contains exclusively contained entrance location theorem query algebra terms sides rule equivalent conditions hold 
proof 
assume result right term left meaning containing containing expression incl right term query contained opposite direction implies contains consequence right query contains contains contains optimizations document type definition objective optimizations described sections transformation query algebra expressions transformation yields superior query evaluation strategy 
optimizations described section eliminate subexpressions query algebra expressions solution 
cases depends document type definition subexpression non empty solution 
instance result incl empty element types respective dtd contain regard respective rule follows rule incl instances type instances type contained formulate rules eliminate non resolvable subexpressions rule pat algebra operators intersect 
regard operator intersect empty depend dtd may contain elements type 
checked information dtd 
empty operator formulate queries expression query optimizer map query algebra terms return empty set 
general algebra expressions contain empty operator empty case union operator root 
rules ones reflect rule incl empty rule empty incl rules dtd knowledge supplement rules dtd knowledge 
classification approaches impact query evaluation time subsection briefly report experiences gained system classifying different approaches impact query evaluation time 
improvements orders magnitude 
optimization structure indexing described section improvement orders magnitude query evaluated access operations index structures 
techniques described section yield improvement duration query evaluation independent database size expected 
test optimization lasts approximately second avoid evaluation times approximately half second document database 
fair improvements 
obligation exclusivity eliminate incl operator operator queries kind incl yield performance improvement approximately 
improvement fairly independent number documents 
transformations introduce structure index completely eliminate access operations database improve performance similar factor 
improvement result selectivity index may due fact navigate upwards internal elements index 
relevant optimization technique 
regard entrance locations encountered case entrance location significantly instances element types prerequisite optimization 
note notion entrance location irrelevant connection structure index 
summary issues article rules optimization queries structured documents knowledge document type definition 
rules conjunction operators incl 
line fact contains contained relationship universal structuring mechanism structured documents raw data metadata comparable object 
sections respectively optimizations follows ffl cutting redundant paths 
context structured documents path directions path external element path internal element 
case optimization operator goes notion obligation second case optimization incl operator exclusivity 
ffl identifying equivalent paths structure index exists 
structure index similarities path index structures seen materialized view paths structured documents 
respective transformation rules useful structure index exists 
context notion entrance locations originally introduced extend search space query evaluation alternatives 
ffl eliminating query subexpressions solution exist dtd 
show chosen characteristics document types completely identified information document type definition 
able conclude introduce techniques normalize simplify dtd losing relevant information 
case exclusivity entrance locations extract relevant information dtd introducing notions element type graphs 
intend build optimizer operates pat level order directly compare alternative approaches query optimization find advantages phase approach query optimization investigate integrate optimization components 
karl aberer fischer 
semantic query optimization methods object oriented database systems 
proceedings international conference data engineering pages 
abiteboul querying documents object databases 
international journal digital libraries 
bertino 
path index approach efficient execution object oriented queries 
data knowledge engineering 
bohm karl aberer erich neuhold yang 
structured document storage refined declarative navigational access mechanisms 
vldb journal 
cattell editor 
object database standard odmg 
morgan kaufmann publishers 
mariano consens tova milo 
optimizing queries files 
proceedings acm sigmod international conference management data volume pages 
acm press may 
minneapolis minnesota 
ozsu 
queries query processing object oriented database systems 
acm transactions information systems 
freytag 
rule view query optimization 
proceedings acm sigmod pages 
parke godfrey jack minker lev 
architecture cooperative database system 
witold litwin tore risch editors proceedings international conference applications databases number lecture notes computer science pages 
springer verlag june 
gonnet baeza yates snider 
information retrieval data structures algorithms chapter new indices text pat trees pat arrays 
prentice hall 
graefe mckenna 
volcano optimizer generator extensibility efficient search 
proceedings international conference data engineering pages 
ieee 
vienna austria 
information technology text office systems standardized generalized markup language sgml 
king 
system semantic query optimization relational databases 
proceedings seventh international conference large data bases pages 
mendelzon mihaila milo 
querying world wide web 
international journal digital libraries 
tompa 
pat expressions algebra text search 
acta linguistica 
klaus multimedia forum interactive online journal 
christoph mohr vincent editors proceedings conference electronic publishing pages 
john wiley sons april 
user manual 
technical report gmd ipsi april 
st augustin 
xml 
www com sgml erb 
html 
