component interaction concurrent distributed systems nat department computing imperial college np doc ic ac uk steve crane systems architecture research centre city university cs city ac uk modern distributed programming environments commonly restrict programmers single form intercomponent interaction 
forces programmers emulate interaction styles terms dominant paradigm obscuring intent resulting loss clarity 
starting clear model interaction program components attempts restore missing clarity intent 
achieves proposing language tailored description new existing interaction styles separates specification intercomponent interaction programming interface visible internally component 
language specifies interactions terms asynchronous messages communicating finite state machines compiled objects provide support distribution transparency binding 
interaction model independant transport protocol transmit messages endpoints demonstrate clean separation concerns allows significant performance improvements extending classes provide distribution transparency take advantage facilities provided specific transport protocols 
distributed programming environments traditionally restricted programmers single way expressing interaction program components 
remote procedure call bn object oriented descendents omg rog popular generalise familiar centralised inter component interaction provided programming language address spaces 
distributed programs quite centralised programs 
describing differences concentrate concurrency 
constrained single address space centralised program typically possesses single thread control 
concurrent threads communicate shared data supported monitors semaphores allow synchronisation mutual exclusion 
distributed program hand multi threaded 
thread simultaneously active depends original motivation distribution 
traditional client server model single conceptual thread control originating client steered autonomous servers gathering data required program function 
rpc perfectly suited applications useful program component functionality associated state effectively broken application available programs distributed system 
motivation distribution exploitation parallelism rpc imposes policy enforcing explicit way synchronisation communication result middleware designed development efficient parallel programs declines rpc favour asynchronous message passing 
course practice distributed programs fall cleanly categories 
middleware support interaction style programmers forced model required ones terms dominant paradigm 
emulation possible ln error prone obscures programmer intent impeding clarity 
rest structured follows 
section describes model components binding interaction 
section introduces language defining interactions introduces event notification example interaction 
section describes language translated classes interface run time infrastructure supporting concurrency distribution 
section shows implementation scheme allows programmer different transport protocols improve performance 
section shows research relates area distributed systems 
component interaction interaction components occur interfaces bound 
binding action specified architecture description language section briefly describes model research funded british telecom part management networks project 
component binding semantics 
salient features illustrated examples darwin language 
darwin lends brevity clarity architectural description core ideas applicable general implicitly configured systems 
component model component unit distributed program structure encapsulates implementation strict interface comprised services provided component components system services required component implemented 
explicit declaration component requirements increases reuse decoupling components operating environment 
program constructed composition components instantiated services required component bound provided components system 
components bound interact communication endpoints binding 
addition directionality service provision requirement specifies type defining semantics interaction increasing clarity expressing component programmer intent 
structural complexity managed hierarchical composition composite components defined terms components 
algorithmic components leaves composition tree 
composites may partially completely expose interfaces contained instances providing structural transparency component primitive composite encapsulated component 
compositions specified architecture description language darwin 
architecture definition languages enforce strict separation algorithmic structural concerns system aid programmers generating code instantiate configurations 
component announcer provide event ev component receiver require event ev component main inst announcer announcer inst receiver recv recv bind recv ev announcer ev bind recv ev announcer ev ev ev ev announcer recv recv main 
simple darwin specification textual graphical format feature darwin language correspondence graphical textual notations 
textual notation richer supporting conditionals iterations graphical form convenient representation program instance structure particular parameterisation 
graphical notation required services shown empty circles provided services solid circles intuitively filling need represented 
components shown rectangles differentiates types instances 
binding actions model establishment binding endpoints classified idioms named originator binding action party binding initiated component client role ensuing interaction 
third party binding established entity client server 
third party binding arises elaboration configuration description serves create initial binding harness components public interfaces 
party idiom exploits binding harness permit evolution dynamic binding patterns components private interfaces 
modern distributed programming environments omg rog recognise need party binding third party binding relegated support reconfiguration fried 
irrespective originator valid binding action conform rules support intuitive notion requirement placeholder service bound bound interfaces type compatible roles 
known configuration language coordination language module interconnection language 
required interface may bound peer required interfaces may peer 
semantics accessing unbound requirement determined binder 
third party binder blocks invoker binding action completed party binder terminates program error 
binders remove invocation chain initialisation reconfiguring binder persists service dynamic restructuring requests crane 
interaction model components interact communication endpoints exposed interface 
communication endpoints hide internal implementation component outside provide distribution transparency component implementation 
far binding address space machine remote machine determinable 
client side message interface service side message interface service side programming interface client side programming interface actions actions asynchronous messages synchronisation synchronisation client thread service thread 
model interaction interaction communication endpoints service client defined terms asynchronous messages 
detail interaction consists set messages accepted service server side message interface 
set messages service requires client accept client side message interface 
synchronisation threads endpoints 
programming abstractions threads view interaction messages define application layer protocol components communicate binding pair message interfaces constitutes contract meyer endpoints 
service guarantees react meaningfully messages received client long messages service accepted message set long client reacts meaningfully service sends messages service required message set 
constraints interaction specified state machines 
state machines specified separately endpoint interaction provide definition behaviour endpoints 
midas language specification interactions defined language midas programmer specifies interactions terms message interfaces actions invoked endpoint component implementation state machines 
midas specifications compiled implementation language constructs classes define message interfaces provide distribution transparency proxy objects 
midas allows interactions defined independently implementation language simplifies task programmer generating support distribution transparency 
midas syntax similar corba interface definition language idl omg 
uses idl syntax constant type module definitions replaces object interface definitions definitions message interfaces endpoints interactions 
midas allows definitions parameterised types 
annotated example defines event interaction event dissemination 
interaction event source announces event data event sinks 
event sink enable reception events event messages delivered disable enable reception events binding active 
new interaction type defined named interaction statement case event 
interactions parameterised type 
event interaction parameterised type event data broadcast event source event sinks 
interaction statement introduces new namespace contain definitions types constants message sets endpoints 
convenient place definitions body interaction statement mandatory 
interaction event messages statement defines new message interface 
messages received interface defined unique name list named parameters 
messages messages accepted event source enable disable messages messages accepted event sink event event data new endpoints defined endpoint statement specifies messages transmitted received endpoint terms previously defined message sets 
body endpoint statement contains optional actions spec clauses 
actions clause names actions component implementation perform endpoint endpoint api 
spec clause specifies behaviour required properties endpoint state machine transitions triggered reception transmission messages invocation actions component implementation 
syntax behaviour specification fsp notation magee main difference transitions triggered reception messages invocation actions indicated question mark appended name trigger transitions triggered transmission messages indicated exclamation mark appended trigger 
midas spec statements compiled pure fsp specifications analysis analyser mkg 
endpoint source actions announce spec source disabled disabled enable 
enabled enabled announce 
event 
enabled disable 
disabled endpoint sink actions turn turn spec sink disabled disabled turn 
enable 
enabled enabled event 
enabled turn 
disable 
disabled body interaction statement specifies endpoints part interaction combined behaviour required properties interaction fsp notation 
convention 
backend midas compiler expects endpoints named provide require 
special process channel indicates endpoints connected channel provides asynchronous reliable order delivery messages 
different transport properties required programmer provide specification 
source provide sink require spec event sink channel source implementation midas endpoints midas specification defines externally visible attributes interaction messages passed endpoints abstraction behaviour endpoints define interactions implemented component 
details encapsulated component depend component implementation 
midas language define synchronisation threads component programming abstractions visible component threads 
envisaged implementations common synchronisation idioms supplied library 
midas specification translated code interfaces runtime support concurrency distribution 
message interface definitions translated interfaces implementation language classes java interfaces 
midas compiler automates support distribution transparency generating client service proxy classes implement message interfaces marshal invocations operations raw data buffers transmission 
midas compiler generates stub base classes endpoint objects 
stubs conform client side server side message interface include support binding distributed garbage collection 
developers implement reusable endpoint abstractions component programmers extending endpoint base classes provide programming interface interaction thread synchronisation 
allows threading model component independent type interaction role interaction implemented different ways implementation substitutable 
optionally endpoint interaction spec statements compiled objects perform validation checks run time ensure endpoint implementations conforming interaction protocol 
subsections describe implementation endpoint classes run time support distribution transparency 
interactions concurrent components endpoints generated midas compiler impact performance interaction occurs single address space 
client endpoint bound service endpoint pointer message interface service endpoint 
implementation client side message interface bound implementation service side message interface long endpoints opposite roles interaction type 
event binding enable disable bind selectable wait arm guard selectable class implements synchronisation endpoints active objects 
thread wait multiple selectable objects woken requires processing announce messages classes generated midas message set declarations endpoint stubs generated midas compiler provide support binding distribution transparency concrete implementations endpoint stubs created developer provide thread synchronisation programming interface component developers 

static structure endpoint classes event interaction developers free implement operations message interfaces way long implementation supports message passing asynchrony 
constrains implementation endpoint block threads call operations message interface 
synchronisation threads implemented terms asynchronous messages passed binding 
message wait semaphore reply signal semaphore invoke api wait semaphore invoke api client thread scheduled client endpoint service endpoint 
synchronisation concurrent components illustrates synchronisation implemented model 
endpoint object calling thread threads binding encapsulated synchronisation objects semaphores 
caller invoke operation bound message interface wait semaphore encapsulates 
thread delivers message endpoint wake blocked thread signaling semaphore 
interactions distributed components model binding interaction single address space extends address spaces providing distribution transparency endpoint implementations components 
distribution transparency realised proxy objects ghjv 
messages sent direction time dependent current state sending endpoint proxy required binding 
corba parlance midas proxy performs role corba proxy marshalling transmitting invocations message interface corba object adaptor receiving unmarshalling messages performing invocations message interface associated endpoint 
provides illusion service endpoint address space client endpoint provides illusion client endpoint address space service endpoint 
proxies connected communication channel transmit raw data 
components different address spaces need interact created client address space connected transport channel service endpoint client endpoint bound proxy object 
implements service side message interface interaction client indistinguishable true service endpoint 
service endpoint able interact remote clients transport level service accept connections unique name identifying endpoint network 
managed interaction specific service access point sap objects 
interaction sap owns transport sap instance tcp ip server socket exposes name 
configuration elaboration framework uses transport sap name initialise remote objects create transport level connections 
service transport sap passes requests interaction sap creates object manage new connection 
definition interaction sap classes generated automatically midas compiler independent underlying protocol long protocol channel provides reliable order delivery 
multiple interaction saps created single service endpoint making service accessible simultaneously different protocols 
service address space client address space client endpoint client proxy service endpoint interaction sap channel session channel session transport sap service proxy transport connection creates creates 
proxies saps provide distribution transparency channel established proxies endpoints interact 
client side endpoint invokes message interface proxy marshals message parameters data buffer transmits channel 
address space service endpoint system thread receives data buffer carries protocol stack 
message data buffer invokes appropriate operation service endpoint message interface 
similarly marshals invocations operations data buffers transmits client address space message invokes operations client message interface 
multiple transport protocols implementation described terms channels concept channel necessitate channel protocols tcp ip 
channel abstractions implemented light weight adaptor objects layered packet protocols udp ip shared memory host 
separation concerns interaction architecture provides flexibility take advantage protocols channel oriented result significant performance improvements 
motivation services event service defined section typically provided channel protocol 
configuration event sink connected event source transport channel source owns proxy remote sink 
source announces events proxy individually causing message transmitted separately channel 
inefficient performance improved multicast protocol ip multicast deering ietf single event message need transmitted multiple event sinks 
event interaction multicast protocol deriving custom proxy acceptor classes base classes created midas compiler 
multicast initialised multicast group transmits event messages 
multicast initialised address multicast group 
client endpoint transmits enable message multicast joins group starts receiving event messages 
client endpoint transmits disable message multicast leaves group stops receiving event messages 
event source service available multicast protocol multicast interaction sap object 
channels multicast sap accept connection requests transport sap 
interaction sap acquires group name service creates multicast endpoint attached 
binding establishment framework acquires group multicast sap uses initialise remote multicast 
service endpoint multicast interaction sap multicast server side group socket cl endpoint client side group socket attach create event marshall message join group transmit message sap initialise remote enable disable join group message event message leave group 
event interaction implemented multicast protocol different approaches taken implementation communications system broadly corresponding statically dynamically configured aggregates lightweight protocol elements 
common approaches fundamental abstractions real protocols constructed device 
device instance adapts protocol graph hardware device operating system entity socket 
filter 
filter protocol performs transformation data passing 
multiplexor 
endpoints devices filters permit construction linear protocol stacks 
multiplexors permit reuse stack segments combining trees 
router 
multiplexors permit stack branching upward direction routers required order perform function downward direction 
general protocols layered order augment existing functionality protocol implements functionality terms functionality provided layer beneath 
semantic expectation hinders re general case obviate need 
static configuration basic abstractions protocol framework layers services sessions upcalls 
protocol tcp example represented layer implemented object 
layer provides number named services higher layers example tcp provides connect service connecting remote sockets listen service listening incoming connection requests 
order implement provided services layers require services lower layers example tcp requires services ip layer 
services implemented sub objects layer object conforms standard interface 
user layer services services intermediate session object data passed stack 
session object paired upcall interface layer passes data stack service user 
session objects encapsulate state behaviour required protocol implement service provided single service user 
instance sessions layer providing reliable channel service store unacknowledged data transmitted service user retransmit data received 
layers composed directed graph protocol components required services higher layers bound provided services lower layers 
interaction endpoints application components layered protocol graph communicate sessions created protocol layers 
concept protocols provide require services matches concepts darwin language darwin describe instantiate protocol graphs 
darwin graphical notation provides simple effective visualisation structure protocol configurations illustrated 

constructing static protocol configuration dynamic configuration principal drawback previous approach static typing communications system hinders reuse 
dynamic binding patterns established transfer service components constrained explicit typing protocol context rooted 
static configuration communications infrastructure increases dependence components execution environment 
dynamic protocol configuration attempt eliminate dependency 
service strongly typed type service refer protocol context valid interpreted runtime 
illustrate consider fragment create event service endpoint svc create event interaction sap uses channel protocol event interaction sap new event svc ask create protocol stack textual description return pointer top layer stack 
transport get create mux endian udp get listen service protocol create transport saps 
request new sap service attach new transport sap interaction sap 
svc transport service listen transport sap svc request interaction sap get interaction sap passed client 
event ref interaction sap ref example event service created available channel protocol object generated midas compiler 
protocol description string define protocol interaction sap available 
description string traversed locates interpreter elements 
protocol stack matching description exist generated set builders protocol 
pointer top protocol stack returned caller asks stack create transport sap linked interaction sap 
transport sap receives connection request passes interaction sap creates communicate client address space 
interaction sap unique address protocol description string binary transport sap 
acquired interaction sap passed client endpoint bound service 
actions client shown create event client endpoint client get service sap event create connected remote sap referenced 
event proxy new event client bind client endpoint service proxy client bind proxy client obtains service traverses list protocol signatures find protocol interpreters 
suitable configuration exist generated 
interpreter builder constructs client side protocol session protocol specific discrimination information added peer 
protocol returned create connection remote transport sap created communicate remote far connection 
program initialisation time protocol interpreter 
function recognise protocol name load shared object implements protocol system wide map forward requested operation 
default protocol description may overridden runtime protocol context specified generated 
demand loading allows protocol type space evolve independently applications 
example long running server may communicate client protocol exist server started 
protocol interpreter allows specification discriminators generation time exists potential conflict desired protocol context pre existing 
conflict detected runtime type identification introducing unnecessary dependencies adjacent protocol layers 
combination ability transmit system interpreted nature difficult predict state communications system time 
mind prototyped communications system monitor inserts observer chain specified node distributed program shown 
left shows protocols support services provided node right shows communication sessions supporting services required remote nodes 

protocol monitor tool related open distributed processing model odp specifies kinds interaction asynchronous signals flows streams operations remote procedure call 
flows operational interactions may defined terms signals 
model describes kinds binding action primitive links endpoints directly compound interposes binding object 
primitive binding action requires endpoints compatible interaction type opposite polarity 
compound binding action series primitive binding actions links endpoints mediating binding object example may adapt incompatible interactions allow management operations quality service control performed binding 
model enforces correspondence initiator binding action objects communicate resulting binding somewhat recognising utility third party binding 
model similar rm odp feel cleaner general 
limit number interaction styles posit need compound binding actions binding objects merely components perform adaptation value adding function 
related architectural specification omg portable object adaptor definition sv 
crucial difference earlier basic object adaptor specification notion servant separating externally visible interface object entity services invocations 
interaction model mapped directly duality object represents service side message interface servant provides service side programming interface encapsulates desired synchronisation semantics 
terms model midas compiler generates portable object adaptors clients servants interaction style 
earlier framework distributed interaction described crane 
described shares motivations versatile interactions semantics specifiable higher level language midas 
furthermore mainstream experimental building known corba interface definition language 
construction static protocol graphs previously performed kernel op 
morpheus project ap attempted provide higher level environment specification individual protocols 
feel configuration language darwin permits specification protocol graphs clean comprehensible manner 
hierarchical composition allows frequently occurring combinations protocol treated primitive protocols loss generality efficiency 
current status model interaction described implemented hand number interaction styles including queued message ports rendezvous event dissemination demonstrate expressive power 
currently implementing compiler generates classes interface underlying protocol framework perform run time checks validate implementation interaction endpoints 
intend port communication framework interaction model java midas compiler generating java interface definitions classes 
continuing earlier implementing corba compatible interaction abstractions cd intend write backend corba idl compiler generates midas specifications idl interface definitions allowing flexible concurrency implementation corba objects 
static configuration protocol graphs allows specification richer communication structures possible dynamic system 
part result limited vocabulary dynamic protocol interpreter 
additional constraint lack true runtime typing compiler implement system 
approaches fulfills requirements configurable communications system 
concerns orthogonal allow envisage system common protocol aggregations may specified static approach dynamically combined preserving best features 
natural application dynamic protocol interpreter runtime environment quality service description language higher level requirements communications system mapped dynamically configured combinations protocol elements 
ap abbott peterson 
language approach protocol implementation 
ieee transactions networking february 
bn birrell nelson 
implementing remote procedure calls 
acm transactions computer systems february 
cd crane dulay 
configurable protocol architecture corba environments 
proc 
third international symposium autonomous decentralised systems berlin germany april 
crane dulay foss kramer magee sloman 
configuration management distributed software services 
raynaud sethi faure vincent editors integrated network management iv pps 
chapman hall 
crane crane 
framework distributed interaction 
international workshop development evolution software architectures product families madrid november 
crane crane 
dynamic binding distributed systems 
phd thesis imperial college university london march 
deering deering 
multicast routing datagram internetwork 
phd thesis stanford university december 
foster kesselman tuecke 
nexus runtime support task parallel programming languages 
technical report mathematics computer science division argonne national laboratory argonne il 
august 
fried friedberg 
transparent reconfiguration requires third party connect 
technical report department computer science university rochester november 
ghjv gamma helm johnson vlissides 
design patterns elements reusable objectoriented software 
addison wesley 

ietf host extensions ip multicasting 
rfc ietf august 
ln lauer needham 
duality operating system structures 
operating systems review april 
magee magee 
fsp notation 
electronic document available world wide web url www dse doc ic ac uk fsp notation html magee dulay eisenbach kramer 
specifying distributed software architectures 
proceedings fifth european software engineering conference barcelona september 
meyer meyer 
object oriented software construction 
prentice hall international series computer science 
mkg magee kramer giannakopoulou analysing behaviour distributed software architectures case study th ieee workshop trends distributed computing systems october 
message passing interface forum university tennessee knoxville tennessee 
document standard message passing interface 
odp secretariat iso iec jtc sc wg 
model open distributed processing part architecture 
document itu iso iec 
standards association australia po box nsw australia may 
omg object management group common object request broker architecture specification version 
object management group omg headquarters old connecticut path ma usa 
july 
op malley peterson 
dynamic network architecture 
acm transactions computer systems may rog rogerson 
inside com microsoft component object model 
microsoft press 
sv schmidt 
object adapters concepts terminology 
object interconnections sigs report october 
