scientific computation functional programming jerzy dept computer science university france january mailto info fr www info fr advocate usage modern functional programming languages lazy functional techniques description implementation mathematical objects quantum mechanics needed pedagogical purposes real computationally intensive conceptually algorithmically difficult applications 
show perform simple computations state vectors discuss construction lazy algorithms facilitate enormously manipulation potentially infinite data structures iterative processes 
lazy functional techniques may replace cases usage symbolic computer algebra packages offer additionally interesting algorithmic complement manipulation mathematical data efficient blindly symbolic algebra easily integrable numerical code 
functional style elementary examples progress active usage software tools computing physicist accompanied deep polarization hand see highly tuned numerical low level codes efficient intense exploitation computer algebra packages help prepare numerical program formula preprocessing unwieldy human 
physicist researcher teacher interested methodology computations need tools bridge gap thinking coding facilitate approach programming vectors hilbert space entities differential forms geometric objects just symbolic formulae 
programming system easy learn avoid polluting code administrative details verbose loop organization dozens exception guards special cases appropriate control switches coercions mathematical objects standard intuitive data structures 
cumbersome synchronisation expansion orders coding perturbation developments 
aim known lazy functional programming techniques useful theoretician especially field quantum theory coding notoriously difficult due high level abstraction involved 
see 
general abstractions easier implement object oriented languages libraries evolution algorithms slow 
shall introduce programming language haskell de facto standard domain clean promising 
basic idea functions may processed data may stored combined transformed 
data constitute world concrete abstractions 
modern functional languages specificities strongly typed types deduced automatically system type declarations 
functions arithmetic operators overloaded datatypes may processed set functions vectors elements domain addition multiplication scalars defined declared belonging class vectorspace 
haskell strong flavour object oriented programming class system independent data representation common behaviour factorized 
syntax extremely compact keywords elegant usage layout means continuation previous construction permitting declaration user operators 
definition function computes hyperbolic sine goes follows sh exp exp redundant parentheses keywords 
compiler recognizes automatically result real operations involved real 
fact true 
arithmetical domain permits automatic conversion reals defines overloaded function exp eligible definition holds complex numbers 
functional programming assignments side effects usage local variables possible encouraged 
definition efficient sh exp attribute language absolutely essential laziness non strictness means argument passed function evaluated function uses 
argument expression forms compound data structure receiving function gets thunk parameterless function evaluation data structure 
absolutely transparent user thing remember fact function need argument evaluated 
silly expression fail doesn need shall see clever application strategy particular manipulation infinite data structures 
final section shall examples quantum mechanics don manipulate formulae symbolic indeterminates 
final realisation data numeric intermediate objects lazy functional data structures partially applied functions 
programmer writes haskell program constructs code way main program just expression forces evaluation delayed partial applications 
shall neglect syntactic simplicity type conversions class declarations haskell added manually 
programs directly runnable corrections semantically important cosmetic 
reader appreciate little better compactness codes 
complex definition repeat pure functional program side effects 
variable assigned value identifies re assigned 
loops implemented optimized recursion 
function computes sine real number recursive formula sin sin sin example considered little concentrated haskell manual 
eps msn msn local function msn abs msn variable local msn function takes arguments eps note absence parentheses defines local unary function msn avoid cluttering recursive definition presence spectator 
classical case forms exist alternative construction just synonym true 
typical user freeze precision define know haskell uses normal order evaluation form means may understood curried application applied result function applied implies naturally possibility abbreviate definitions identical arguments sides code 
rhs definition partial application function perfectly legitimate functional data abstraction 
abstractions instantiated applied function opaque compiled object 
test sin returns 
suggest physical analogy defined force bodies positions object represents field force generated body possible construct forms denoting respectively function divides argument function subtracts argument 
language permits creation dynamical functions creation dynamical data natural lists arrays exist 
colon list constructor operator lisp cons order sum elements numerical list define recursive function empty xq xq note particularities language parameters function patterns prolog just variables structural recognition arguments function defined set clauses discriminated differently structured arguments avoids usage case conditionals 
experienced user define sum recursively standard generic functional foldl foldl op ini applies binary operator op elements starting initial value ini 
definition foldl resembles summing operation passed argument applied 
generic definitions predefined standard library haskell contains dozens shorten substantially typical programs 
functionals map applies unary function elements list transforming 
zipwith functional lists applying pairwise binary operator corresponding elements zipwith op xq yq op zipwith op xq yq functional may add subtract series sequences term term 
reader acquainted lisp find quite simple 
may disturbed definitions perfectly correct ones ones represents infinite list ones second applied concrete number produces infinite list 
recursive generating definitions terminal clauses shall call recursive 
existence lazy semantics language 
application creates list head equal tail reduced computed system stores thunk evaluation returns 
program doesn need second element list get evaluated evaluation forced automatically demanding value delayed object 
get number thunk generate hides 
lazy lists replace loops 
create infinite list iterates iterate iterate separate piece program may consume list looking iteration convergence 
separating generation analysis data possible piece data contains code executed immediately program looks 
order test program demand process display initial finite segment infinite list 
user writes take program prints 
example intricate 
represent definition 
thing zipwith ones thing element thing zero 
zipwith perform summation heads arguments element 
value second value thing implies second element equal giving third element thing 
obtain 
recursive definitions may short quite elaborate important write just recursive equation effective algorithm 
possible laziness 
laziness power series suppose list uq represents infinite power series xu xu tail list uq conceptual variable physically data 
adding series trivial old acquaintance zipwith 
multiplying constant uses map 
multiply 
easily 
see uv xw xu xv uv perfectly decent recursive algorithm 
order find reciprocal formula xu xu xu correct lazy algorithm despite auto referential form reciprocal right protected recursive evaluation get immediately element 
easily code check 
uq vq uq recip uq recip map negate uq concrete take recip repeat give list length 
predefined function repeat generates infinite list replicating argument 
operator multiplication series number private shortcut map 
notation vq informs compiler parameter name structure vq 
lazy manipulations series domain integration algebraic transcendental functions series composition reversal algorithms dealing infinite data structures continuous fractions may 
example differentiation just zipwith series natural numbers sequence integration analogous division 
integration structurally lazy needs additional parameter integration constant pushes remaining elements tail result 
tail may generated recurrence possible define exponential 
suppose exp 

exp algorithm 
reader may find second volume knuth code times longer 
shown lazy development dyson equation generate feynman diagrams zero dimensional field theory quite simplistic diagrams just combinatorial factors algorithmic structure expansion sufficiently recognize usefulness lazy techniques 
reader find discussion lazy series aim show may coded play 
lazy data algorithmic differentiation compute exactly machine precision derivative simplicity scalar univariate expression coded function 
usually considered analytic problem needs symbolic computations 
known years differentiation formally algebraic operation shall show implement haskell easy efficient way 
take domain real numbers form field differential constants augment domain special object generator differential algebra may identify differentiation variable doesn possess name numerical value 
domain contains numbers arithmetic operators close algebra defining special operator df compute derivatives mapping domain arithmetic operation 
apparently completely way extensionally 
new datatype infinite sequence contains value expression value derivative second third 
constant number represented variable value 
practice optimize constants separated differently tagged data items 
differentiation operator trivial just tail sequence 
comes close algebra sequences arithmetic operations exactly done power series 
normal haskell lists introduce special data defined follows data dif double double dif means type dif record constant tagged symbol general expression tagged symbol fields 
numeric naturally sequence starting derivative expression type 
differentiation defined df value const 
irrelevant df trivial 
definitions omitting trivial cases constants mult 
constant linearity leibniz recip ip reciprocal auto referencing 
ip recip negate ip ip exp exp log log general chain rule lift lft sin lift fz fz sin sin sin sin fz sin cos negate sin negate cos fz power power repeat algebra contains differentiation operator footing arithmetic manipulations don answer question differentiate product define appropriate multiplication operator algebra 
function lift permits plug algebra black box functions formal derivatives known exemplified definition sine 
dot composition operator 
usage system transparent user 
definition hyperbolic sine modifications applying variable numerical value produces infinite sequence sh ch sh 
lazy variant technique known algorithmic computational differentiation see 
noted decent programming language allows overloading arithmetic operators domain user data structures may compute second derivatives shown computational differentiation established practical field known implemented 
limited case domain expressions closed point view differential algebra code complicated 
functional abstraction quantum mechanics notorious oscillator section develop theoretical approach classical quantum problems implemented directly haskell 
shall avoid number conceptual questions 
represent hilbert space 
don want manipulate formulae mathematical objects 
standard fock space basis integer really know definition mn need define state vectors vectors impose orthogonality condition basis 
basis solve equation real momentum space coherent states parametrized complex values 
shall define fairly universal datatype data integer double double complex useful define operations 
special tag clarified 
object represents basis vector ket wish insist differences bases duals keep mathematics sane 
function represents entire basis 
definition addition vectors anyway don know say 
define scalar product brk vacuum 
orthogonality trivial 

trivial abstraction brk considered representation 
function awaits tagged number produce scalar 
declare functions linear structure 
technical reasons difficult apply standard haskell operators functions package special operators simplify presentation 
class objects type brk may define nk nk nk adding functions nk analogously may define multiplication scalar nk nk nk nm nk nm minimalistic approach says ambitious 
annihilation creation operators cr addition multiplication annihilation vacuum sqrt cr sqrt op op nk nm op nk nm op nk nm linearity op op op op composition reader note interesting fact multiplication contravariant composition 
operator cr brk cr brk sqrt cr brk brk typical proof correctness functional program 
reader unhappy fact say brk opaque functional object normal data item 
apply combine apparently possible see contains 
special tag help 
belongs datatype possible define special scalar product just extract hidden value brk linear algebra functionals reader probably seen times seldom computer help define solve numerically recurrence relations hermite functions 
standard calculus compute dx knowing equal exp 
simplicity independently bra ket algebra easily incorporate formalism discussed replacing parameter type basis variant double dif 
better haskell possible define restricted parametrized types bundled classes example types accept standard operations belong classes number fractional real implementation differential algebra defines data dif type belonging generalized numbers 
type dif generalized number 
basis parametrized numbers object may contain real complex lazy differential tower power series discuss type classes notes 
generating program hermite function degree herm cc cc hf hf exp negate hf hf hf sqrt hf df hf sqrt aim exercise prove method works practice 
expression map herm 
produces list plotted giving fig 
expect 
solution extremely efficient plot right result program optimization obtained seconds 
teach students various recurrence relations 
mention recurrences involving differentiation symbolic manipulations numerically utterly useless 
perturbation theory oscillator shall annihilation creation operators generation full perturbation series hamiltonian define partial multiplication constant cm defined cm perturbed hamiltonian obviously cm cr construct perturbation series starting wigner formulation find corrections ground state eigenvalue repeat known textbook derivation presentation reader probably seen 
unperturbed energies considered series 
normalization implies 
gives bracketing equations need trivial transformation knowing polynomial perturbation sum finite claim equations constitute algorithm 
need import small series package constructed shown section simple arithmetics infinite lists code brk redundant parentheses result sum sum non vanishing matrix elements 
zeros zeros zeros null series ask value energy get sequence possibly shortest programs performing computation written 
course affects humble respect general recursive formalism elaborated 
note nice syntactic shortcut called list comprehension form legible variant map list 
operator sum predefined summing functional equivalent 
caveats confess little white lies trivial omissions need commented example necessity declare precedence new infix operators usage particular data structure series slightly different normal lists overloading arithmetic follow formal rules concerning haskell classes 
sin 
reader wishing test algorithm obtain terms perturbation series program memory overflow 
increasing available heap factor generates term disaster repeats 
complexity implementation exponential worse 
lazy semantics free lunch 
deferred expression waits evaluated remains stored memory dynamically created procedure code global variables 
lazy program badly written memory polluted big thunks obtain lazy functional equivalent intermediate expression swell symbolic computation 
needless say couldn correct fault written 
defined functions apply recursively 
application computation appropriate dirac bracket generates series 
plenty identical applications lazily stored exemplars solution consists defining objects functions lists th elements return appropriate values 
tabulate matrix elements truth 
meaning languages fn map fn 

loop loop loop brk uses symmetry matrix element matrix elements 

modification loop sum 
zeros recip 
works better generation terminates floating overflows series asymptotic 
course computation repeated big floats infinite precision rationals extended square roots arithmetic domain wish 
lazy formulation generating algorithm orthogonal choice 
obtained answer may convergence improving tricks may performed lazily elegant manner techniques discussed 
longer coded lines infinite expansion 
propose functional framework define implementable abstractions making possible manipulate procedures combine thunks symbolic data 
tools various forms exist computer algebra systems 
maple expression unevaluated transformed function indeterminates 
functional layer maple weak confusion programming variable symbolic indeterminate harmful despite superficial usefulness 
unfortunately computer algebra package aware mathematical properties manipulated objects help organize resulting code suggest implement abstractions prepared package creators 
path textbook describing general idea debugged program may long 
symbolic packages generate code shown students laugh noted authors 
examples show lazy semantics simplifies coding suggest non strict functional programming computational physics pedagogical purposes 
don claim lazy functional techniques replace highly optimized imperative codes contexts efficiency primordial selectively check correctness final programs lazy code short difficult introduce obscure bugs 
convinced lazy languages provide adequate computing tool theoretical physicist prefers elegance force 
results encouraging algorithms sufficiently crazy interesting 
brandt 
quantum mechanics personal computer springer 
peter peter carr quantum science disciplines university boston internet site bu edu main html john peterson haskell report yale university available software relevant haskell org rinus plasmeijer marko van eekelen concurrent clean language report university nijmegen 
software documentation available www cs kun nl clean 
donald knuth art computer programming vol 
algorithms addisonwesley reading 
jerzy generating power lazy semantics theoretical computer science pp 

jerzy functional programming mathematical objects functional programming languages education lecture notes computer science vol 
springer pp 

martin bert christian bischof george corliss andreas griewank eds computational differentiation techniques applications tools second international workshop computational differentiation proceedings applied mathematics 
george corliss automatic differentiation bibliography originally published siam proceedings automatic differentiation algorithms theory implementation application ed 
corliss griewank times updated 
available netlib archives netlib research att com ftp ftp boris mscs mu edu pub corliss jerzy functional differentiation computer programs proceedings iii acm sigplan international conference functional programming baltimore pp 

born heisenberg jordan zeitschrift physik 
jerzy lazy differential algebra applications workshop iii international summer school advanced functional programming braga portugal september 
jeffrey perturbation calculations fluid mechanics large expression management symbolic computation pp 


