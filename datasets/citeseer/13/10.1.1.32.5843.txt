extensible modular architecture simulating urban development transportation environmental impacts michael noth alan borning department computer science engineering paul waddell evans school public affairs university washington seattle washington cs washington edu washington edu technical report department computer science engineering university washington december urbansim simulates development urban areas including land transportation environmental impacts periods years 
purpose aid urban planners residents elected officials evaluating long term results alternate plans particularly relate things housing business economic development open space traffic congestion resource consumption 
software perspective large complex system heavy demands excellent space efficiency support software evolution 
consists collection models represent different urban actors processes object store holds state simulated urban environment model coordinator schedules models run notifies data interest changed translation aggregation layer performs range data conversions mediate object store models 
concludes discussion lessons learned regarding implicit invocation object storage automatic code generation yield acceptable space time efficiency support software evolution architectural framework 
urbansim system simulating development urban areas including land transportation environmental impacts periods years 
software perspective large complex application heavy demands excellent space efficiency support software evolution 
describe application area provide overview urbansim 
discuss lessons learned software architectures systems kind 
patterns land available transportation systems play critical role determining economic vitality sustainability urban areas 
transportation interacts strongly land 
example development induces demand roads parking turn induces automobile oriented development compact urban environments induce walking demand transit 
land transportation strong environmental effects particular emissions resource consumption conversion rural urban land 
location grid buildings households businesses economic model demographic model transportation model water quality model economic augmentations economic augmentations environmental augmentations spatial queries actor queries updates query results models aggregation translation layer model coordinator object store urbansim architecture technical support play important role fostering informed civic deliberation debate issues 
aid urban planners residents elected officials evaluating alternate scenarios packages policies investments want simulate effects scenarios patterns urban growth transportation usage resource consumption periods years 
transportation models routine metropolitan planning organizations decades 
land planning poorly integrated transportation planning despite strong interactions 
state common practice land modeling integrated land transportation modeling advanced transportation modeling 
see section discussion prior related 
urbansim designed implemented response lack 
system fully operational freely available gnu public license 
consists lines java code core urbansim system including visualization data preparation calibration tools total approximately lines plus lines automatically generated code 
applied eugene springfield oregon salt lake city utah honolulu hawaii working planning organizations metropolitan regions 
application regions underway 
done historical validation system results starting urbansim data eugene springfield running comparing results 
overview urbansim architecture simulate urban region urbansim employs collection interacting models representing different actors processes urban environment residents businesses land developers transportation networks 
model encodes behavior agents simulation objects operate land parcels buildings 
objects correlate directly easily identifiable objects real world making easier reason properties behaviors 
entities shared models objects operate 
urban modeling systems urbansim model disaggregate high data requirements 
requirements enable modeling processes done fine level allows leveraging spatial data manner possible aggregate systems 
time design implementation system difficult software perspective 
addition models principal components urbansim model coordinator schedules models run notifies data interest changed object store holds shared representations agents entities simulated world translation aggregation layer performs range data conversions mediate object store models 
models communicate directly communicate shared data held object store mediated translation aggregation layer 
extensible modular architecture supports system evolution particular replacing model revised creating integrating new models 
allows models define share common sets objects operate object store regardless original source data allows monitor changes data fields providing convenient method models synchronize actions 
lastly provides translation aggregation layer automatically performs range data conversions facilitate model integration 
primary goal architecture move software complexity individual models supporting infrastructure possible 
supporting infrastructure need written just attention expert programmer 
models hand numerous frequently changing 
specifying complex process involving considerable domain specific knowledge testing relieve model writers programming burdens better concentrate issues arising domain 
models models represent different actors processes urban environment 
addition encapsulating behavior actor process model responsible defining set object types operates fields objects concerned 
model specify wishes share fields declared models providing technique data level coupling integration models object store 
model declare new object types encapsulate domain specific data previously declared water quality model declare nutrient load value 
model may specify set object types fields wishes monitor updates creations deletions 
model responsible indicating frequently wishes executed external constraints frequently regularly model need run 
design models informed research urban economics sociology civil engineering disciplines 
discussion theoretical basis various models 
currently implemented models list models current version urbansim 
model runs simulation year noted 
models consist collection domain specific case rules decision rules encoded java code 
encapsulation provided system architecture models represented ways 
demographic transition model demographic transition model responsible modeling births deaths simulated population households 
externally imposed population control totals predictions region determine target population values specified detail distribution income groups age size presence absence children 
enables modeling shifting population distribution time 
iterative proportional fitting determine households type created deleted 
newly created households placed limbo placed buildings household location choice model 
households deleted meet control totals selected random drawn preferentially households limbo 
household mobility model household mobility model simulates decision processes households deciding move 
movement probabilities historical data 
household decided placed limbo indicate current location space occupied available 
displaced household subsequently placed household location choice model housing available 
household location choice model household location choice model responsible determining location household current location limbo 
household sample locations empty housing units randomly selected set possible alternatives 
alternative sample evaluated desirability household nested logit model encoding decision rules metrics 
coefficients rule calibrated observed historical data 
household placed desired location available 
economic transition model economic transition model responsible modeling job creation loss 
employment control totals determine target employment values specified distribution business sector 
demographic transition model iterative proportional fitting determine businesses type created lost 
new jobs placed limbo placed employment location choice model 
case losses jobs selected random removed drawn preferentially job location limbo 
employment mobility model employment mobility model determines jobs move current locations particular year 
choices regarding job creation loss mobility location course businesses large small 
economic transition employment models individual jobs unit analysis 
movement probabilities historical data 
job determined building job placed limbo indicate current location space occupied available 
displaced job subsequently placed employment location choice model 
employment location choice model employment location choice model responsible determining location job location limbo 
job sample locations empty square feet space housing units home jobs randomly selected set possible alternatives 
alternative sample evaluated desirability particular job multinomial logit model encoding decision rules metrics 
job placed desirable location available 
accessibility model accessibility model encapsulates interface possibly external travel model 
responsible maintaining accessibility values objects traffic analysis zone including accessibility residents employees shopping amenities employment central business district 
accessibility values encode long takes get driving transit walking link land travel model way different accessibility values travel model influence decisions developers employers residents giving rise different travel demands feed back travel model 
external travel model provides travel times utilities accessibility model 
external model typically run simulated years major change transportation system running relatively expensive outputs generally change slowly values simulation 
accessibility model run yearly allowing activity levels updated annually 
land developer model land developer model simulates action developer making decisions kind construction undertake including new development existing structures 
time run model iterates development allowed 
list possible transition alternatives created representing different development types including alternative developing 
probability alternative chosen calculated multinomial logit model alternatives selected monte carlo sampling 
logit model uses numerous indicators calculate logit probabilities including local regional rates distance highways travel time central business district neighborhood economic environmental characteristics 
choosing develop particular model constructs development event asks model coordinator add event queue 
land price model land price model simulates evolution land prices grid cell characteristics locations change time 
urban economic theory states value location absorbed price land 
model calibrated measuring effect site neighborhood accessibility policy effects land prices historical data 
measures effects short term fluctuations local regional rates land prices 
land prices influence density profitability development alternative forms real estate cost potential consumers component plays important role interaction system 
data export model data export model responsible gathering aggregating exporting data object store set external files subsequent analysis graphical display 
defined subclass model included runtime simplify system architecture particular scheduled run time query object store take snapshot state simulation environment 
models represent agent simulated world perform writes object store reads 
temporal scale issues simplifications urbansim provides disaggregate detailed simulation urban land models 
keep computation manageable model simplifying assumptions 
example demographic transition model models runs simulated year 
simulated year adjusts total population values distributions reality people born die move region day 
similarly land price model simulates operation real estate market temporally aggregate level adjusting prices year continuously 
see additional discussion theoretical basis design decisions consequences 
kind simplification regard modeling behavior 
example current household mobility household location choice model possibility households simplified way available housing stock runs households placed remaining households 
modeling processes realistic way quite different implications software architecture 
example implementing auction style continuous time simulation real estate market put dramatic stresses architecture requiring data processing 
hand modeling realistic way introduces difficult issues modeling perspective causes priced housing market accommodating system architecture particular difficulties 
defining model description model consists model definition file separately java class definition model 
model definition file includes model name set objects object fields reads writes flags indicating fields shared models sharing field created model 
shared variables specified explicitly model definition implicitly duplicated names order ensure duplicate object field deliberate 
avoids potential problem commonly names may independent models different semantics sharing variables case cause erroneous results 
example model refer population count persons count households case trying share field produce inconsistencies 
information relevant model definitions combined produce definitions objects object store section 
remainder model functionality specified java class subclass class model 
key methods defined model overridden concrete subclasses 
init perform model specific initialization including notifying model coordinator objects fields wishes monitor changes 
run perform running model current simulated time 
return float indicating simulated time model wishes run 
perform needed bookkeeping object interest created 
method invoked objects model registered interest added object store 
object type field model monitors changed react accordingly 
perform needed bookkeeping object interest removed object store 
degree interaction new model existing models expressed data level defined order model outputs inputs model additional information required 
example output demographic transition model newly created households reside limbo input household location choice model interaction wholly defined data level existence new households limbo 
models need tightly coupled operate differing temporal scales data notification interface 
example continuous time model set monitor changes data fields uses inputs compute updated set outputs inputs changed 
translation aggregation layer help models operate different spatial scales example aggregating parcel level zonal level 
key methods providing functionality methods model defined methods model coordinator section pass information translation aggregation layer object store 
addition providing mechanism coupling models implicit invocation application model notification mechanism support caching frequently accessed data model repeatedly accessing object store 
helpful model needs perform costly processing large amount data compute results recompute needed parts underlying data changed 
data modification messages serve notification model cache longer valid supply specific data element changed 
example land price model maintains regional zonal level rates 
aggregate rates change slowly time land price model computes modifies needed households employees move region recomputing aggregate rates time model runs 
vast majority employees households remain simulation step approach substantially reduces number size queries object store 
model coordinator model coordinator responsible managing collection models simulation 
responsible determining execution order models resolving data dependencies model may notifying model model changed data monitoring 
key methods defined model coordinator class run simulation event queue populated execute single event provided argument method determine total ordering collection events provided argument method event queue model coordinator maintains event queue containing timestamped events 
events include requests model execute time development events scheduled occur time database updates created exogenous events occur instantaneously policy events indicate planned changes regional local policy 
running simulation consists gathering set events occur current timestep determining total order events preserves data ordering dependencies may executing order 
event queue traditional data structure discrete event simulations additional consideration breaking ties events scheduled occur time 
number models simulation events may scheduled execute instantaneous timestep 
model coordinator may execute events arbitrary order may dependencies 
example household mobility model household location choice model scheduled execute time household mobility model run determining set households decide move household location choice model run find available housing units 
words choice move current dwelling choice look new dwelling independent dependency reflected constraints order models run 
models restricted running regular intervals general possible determine execution orders run time 
introduces enormous amount complexity urban modeling systems typically fixed ordering execution 
event occur timestep necessary determine total order events preserves order dependencies may exist 
dependencies types data level dependencies model level dependencies model execution events 
data dependency exists models model writes field model reads 
cases essential reading model reads correct version data writing model overwrites data safe model perspective 
absence ordering dependencies assume reads field occur writes writes occur order 
reflects typical access pattern models generally read objects write small number fields small number objects 
fields written generally small overlap reads models 
model level dependency ordering dependency explicitly introduced model author form set partial orderings models 
provides mechanism order models semantics syntax data reads writes 
example land developer model land price model executed order inputs outputs schedule execute adjustments land price due year demographic economic changes affect development 
simplification market dynamics adopt development decisions year looking state region prior year decide build current year 
determine valid total order collection events directed acyclic graph constructed 
events represented nodes graph directed edges created events access data fields objects model level dependencies direction edge indicating source node event occur destination 
determining possible dependencies model execution events compute transitive closure models fields may potentially read written basis notification mechanisms 
example model may write field monitored model may turn write field triggers model notification mechanisms forth 
ensure correctness full chain potential reads writes considered 
model level dependencies override dependencies case conflicts 
topological sort generate valid total ordering events executed 
development employment policy events urbansim supports development events create modify delete buildings create move delete businesses households change urban growth boundary re zone land 
events generated models 
example developer model generates building development events 
events read external file allowing modeler introduce development projects policy changes event pipeline exogenous models 
example scenario author may wish simulate effects major business leaving region shopping center constructed modification urban growth boundary occur particular point time 
calibration purposes introducing major events historical data 
capability useful instance performing historical validation system eugene springfield oregon starting model data comparing simulated results 
development events model phased closure large mill opening gateway regional shopping mall 
somewhat philosophical aside reader may wonder sorts large events exogenous produced models 
reason urbansim intended model dynamics single urban region events region influenced larger world 
example closing mill due declining timber stocks changing world markets external factors 
examples exogenous inputs population control totals predictions region economic predictions 
gives rise question 
need introduce business event plant closure system give accurate simulation historical development region confidence system predictions region year 
major event example global economic drastically influence region 
answer course urbansim provides crystal ball regarding global economy 
planners expert judgment model generally testing alternate scenarios showing results 
example evaluating effects major transportation infrastructure project prudent perform evaluation alternative scenarios general economic conditions 
related issue concerns policy events moving urban growth boundary re zoning land 
input external events output model 
contrast development events representing global influences purely local policy changes 
reason representing policy events exogenous inputs philosophical pragmatic urbansim intended tool aid civic deliberation debate tool model behavior voters governments 
want say adopt policy consequences say urbansim predicts years city adopt policy 
object store representations agents world households businesses objects operate buildings land parcels held object store 
object store serves memory database queried updated supports filtering entity attributes 
basic interface object store methods 
model constructs query object filling object type set fields query age size category fields households adds filter objects query desired return households certain number workers 
invocation returns object contains copy relevant data object store including internal object ids values returned 
results returned parallel arrays array field avoid java object level memory overhead 
updates symmetric fashion model constructing update object form similar addition update type create modify remove 
software engineering point view object store serves encapsulate representation decisions entities simulation 
outside object store act traditional instances object oriented language 
represented efficiently object store 
defining objects writing class definition information model definition files give description just portion object relevant corresponding model 
partial descriptions integrated system code generation phase produce eventual object definition 
object overhead issues modeling relatively small region eugene springfield requires objects represented object store 
represented ordinary java objects current java implementation sun java additional overhead approximately bytes object total megabytes 
larger region salt lake city requires objects 
typical access patterns fields objects section performance improved objects held main memory reducing space overhead important 
class zone shared read int read float read float read float read float read int read int definition zone object developer model 
class zone read int definition zone object default object definitions 
represent objects efficiently object store parallel arrays holding fields object type 
example household object includes integer field hold location byte field hold income category 
storing explicit household objects object store attendant object overhead hold information series arrays including integer array location elements element byte array income categories forth 
fields hold primitive java types floats ints types storing fields directly large arrays eliminates space overhead 
eliminates wasted space object due word alignment padding arise byte fields 
encapsulation provided object store means non standard representation visible outside 
data structures implemented lightweight fashion dynamic arrays hash sets hash tables allow storage primitive types ints floats fashion eliminates java object level overhead java built data structures arraylist hashmap 
construction object class definitions objects object store consist union fields defined models object type set default object definitions shared models 
queries return copies fields objects updates modify fields create remove instances objects 
object store functionality tailored needs urbansim style models including ability perform queries spatially correlated data task poorly performed traditional databases 
complete definition object type java code access query generated automatically partial object descriptions 
example zone object type represents traffic analysis zone 
partial definitions zone default object definitions developer model 
definitions combined generate final version zone object defined java file contains parallel array storage object types query update access methods automatically generated 
routines automatically generated enable objects saved loaded disk 
swapping contents object store may large available main memory 
handle provide simple swapping mechanism allows array holding contents field object type location field household type section written disk need 
mechanism reflects typical public class 
fields zone public static zone null public static zone null public static zone null public static zone null public static zone null public static zone null public static zone null 
combined definition zone object excerpt 
note lightweight dynamic data structures array store integers avoiding java object level memory overhead arraylist vector built data structures 
get value corresponding field object int public static final int int int int switch case zone switch case zone return zone default throw new get object type zone field type int 
automatically generated zone object accessor methods excerpt access patterns models generally access object type small number fields object 
typical unit swapping object access pattern swapping object basis desirable swap entire objects fields immediately needed 
preferable possible keep data main touched simulated year 
far commercial database back due desire tie gpl licensed urbansim code proprietary system 
plan offer option requirement version 
translation aggregation layer translation aggregation layer responsible converting different levels spatial temporal aggregation queries updates objects object store 
implemented set methods model coordinator separate component serves cache query results data aggregated zonal level 
key methods implement post query update object store respectively 
system evolves integrate models increasingly diverse domains expect increasingly important need share data widely different levels spatial temporal aggregation 
example model may operate scale square meters land cover model may operate land parcel level traffic model may operate travel zone level 
time implemented separate component right 
experience lessons learned previous version urbansim collection tightly integrated component models including developer economic demographic transition components land component external transportation model 
functionality model intermingled functionality creating large complex system lend specialization refinement enhancement 
creating new framework urbansim model sought meet requirements agent level choice behavior grid structure represent spatial information facilitate detailed spatial queries simulation easy replacement model new version support system evolution easy integration new models support different temporal spatial scales support visualization model output processes explanations debugging new architecture met requirements 
proven relatively robust stable supported extensive model evolution versions developer model example additional model components splitting location choice process unified market clearing process separate residential employment location choice models conversion business centric employee centric view employment integration external concurrently running visualization environment 
important software lesson learned value moving complex functionality individual models supporting infrastructure possible specific lessons discussed ways achieving goal 
implicit invocation current urbansim architecture models communicate directly registering interest objects fields held object store notified object field changed model 
architecture uses form implicit invocation components interact generating responding events explicitly invoking methods 
systems implicit invocation proven powerful technique addressing component interaction complexity urbansim 
advantages implicit invocation ability decouple models model registers interest objects fields changes object store responds changes independently models 
significantly easier experiment new models evolve existing ones 
ensuring consistent interface model interactions interactions occur object store 
implicit invocation mechanism worked current style models expect break moved finer grained simulation example households potentially moved developers began construction new buildings forth time yearly basis 
anticipated problems arise current mechanism relatively coarse grained current architecture model specify wishes monitor field particular object wishes monitor field objects type 
additional filtering selection occur callback code executed model result notification 
quite acceptable current system introduce excessive numbers unnecessary notifications fine grained approach leading unacceptably slow execution speeds 
related difficulty complexity callback code increases models monitor update related fields 
example adding new model affects existing functionality embedded notification methods requires callback code new model take account existing functionality override invalidate actions 
explicit versus implicit execution ordering originally intended handle specification model execution ordering implicit data level dependencies section 
experience showed simple data level ordering dependency rules reads field writes failed capture important semantic constraints model execution ordering 
practice bulk ordering dependencies specified explicitly model creators 
allow user supplied model level ordering dependencies override data level ones 
example export model reads object store writes 
implicit data level dependencies require run models 
explicit ordering constraint require run models exports information simulation completed current simulated instant time 
ordering dependency conflicts level model level data level absence overriding model level dependencies error signaled 
current design worked practice entirely satisfying may cause problems number models increases dramatically 
point expect need re examine issue find sophisticated ways determine implicit ordering constraints reduce need explicit orderings 
object storage representation java overhead object representation specifically class tag overhead word alignment padding overhead real objects object store prohibitive 
ended nonstandard object representation parallel arrays holding fields object type 
visible outside object store encapsulation boundary 
problem solution new urbansim akin marshalling smalltalk corba java loosely related concept objects objects objects urbansim object store extrinsic state depends context 
approach enormous benefits context urbansim 
memory requirements decreased factor compared original object implementation making simulation large areas salt lake city utah feasible modest desktop systems 
facilitated addition disk swapping object store decrease memory overhead 
automatic generation code declarative specifications considerable urbansim technique generating java code automatically declarative specifications 
example generation object class definitions objects object store query update methods section 
automatic generation java code defines objects interface object store removes programming burden experimenters introduce new model replace existing write code defines manipulates object types 
particularly true non standard representation objects object store 
ensures consistent interface exists object store object contained 
automatic generation java code define specialized lightweight data structures optimized store primitive java types ints floats minimum memory overhead 
include lightweight dynamic arrays lightweight hash tables sets additional wrapper objects 
issue addressed lightweight data structures standard java library just class definition element type object 
store ints standard hash set int wrapped integer class leading considerable overhead space time 
class eliminates overhead 
sufficiently powerful generic types incorporated versions java need specialized lightweight data structures eliminated precisely generated java system 
note useful purposes design provide heterogeneous homogeneous translation generic types homogeneous translation handle space overhead problem 
varieties translation available pizza extension java gj provide homogeneous translation :10.1.1.26.1697:10.1.1.21.2609
software engineering issues java provided solid environment implementing system kind particular strengths automatic storage management static typing rich class library portability 
execution speed comparable current compiler technology just time compilation provided reasonable performance 
biggest problem overhead object representation required unorthodox object representations object store section 
cvs concurrent versions system coordinate integrate multiple programmers 
related described section urbansim architecture uses form implicit invocation models communicate indirectly registering interest objects fields held object store notified object field changed model 
additional advantages applications implicit invocation described 
implicit invocation essentially event mechanism related concepts include active variables loops active databases ap smalltalk model view controller field integration mechanisms 
discipline defining event programming mechanisms evolving 
huge body urban transportation modeling land modeling integrated land transportation modeling 
reviews assessments existing systems 
short useful area 
early attempts comprehensive urban simulations early largely unsuccessful changed supply side including dramatically improved hardware theoretical advances urban economics disciplines emergence commercial gis market serving urban regional planners demand side including public concern regulatory requirements legal challenges transportation plans considering land implications 
result considerable progress land modeling experimental deployed systems 
urbansim operational models planning agencies rely cross sectional aggregate equilibrium approach 
models include dram lut 
cross sectional equilibrium framework implies relevant temporal dynamics processes urban change model urban development static process represents economic transportation optimization problem 
words models run year needing model dynamics evolution current time year 
clearly severe simplification problematic potential integration models models dynamic environmental processes dynamic evolution human behavior respect built environment 
substantial body related concerns integrated assessment models model interactions human ecological systems integrated way 
major motivation models kind assessment global environmental change 
generation operational emerged mid eighties roots traced back earlier modeling late sixties early seventies 
surprisingly global scale models quite aggregate predicting environmental disturbances broad measures economic growth 
addition global models spatially explicit regional integrated models emerging landscape model 
landscape model contains economic land conversion model uses statistical process determine probabilities grid cells allocated forest agricultural urban usage 
resulting conversion probabilities predict land patterns determine land cover values input plm hydrology component 
communication land conversion hydrology models implicit changed data values grid cells 
factors land conversion component similar ones urbansim access infrastructure historical tax assessor data urbansim explicitly models agents actions statistical finite element processes 
area related concerns agent modeling artificial life cellular automata 
agentbased modeling pure form individual agents actions simulated agent having local knowledge global behavior emerges agent level interactions 
agent modeling wide range applications including economic sociological biological physical simulations 
closely related urbansim simulation small artificial society aspen simulation entire economy 
number packages support agent simulation developed swarm 
number urbansim models mobility location choice development models agentbased 
adopted approach system global models appropriate principal interest realistic simulation urban development inform public policy techniques give best results investigation particular modeling technique encompass aspects simulation 
example demographic transition model uses single module compute births deaths simulated population households externally imposed population control totals demographic data regarding distribution income groups age forth 
pure agent approach individual agents decide form households children move region forth 
approach yield patterns global behavior exhibit characteristics real world application stringent requirement matching population characteristics region including reproducing historical data pure agent approach appeared practical cases 
cellular automata simulating urban development applications simulating change land cover freeway traffic spread 
classic form cellular automaton consists regular array cells finite number states 
state change local depending states neighboring cells 
urban processes urban decay emerge simple local rules 
restrictions mesh goal supporting deliberation public policy 
example viewing conversion rural areas urban ones analog biological process suburb grows occupies increasingly wider areas urbansim view process result interactions land developer model simulates developers actively seeking development opportunities region response market conditions zoning regulations taxes incentives location choice models simulate residents businesses seeking housing commercial space land price model forth 
researchers experimented extensions cellular automata formalism incorporate extensions agent behavior non local search 
urbansim vehicle research modeling urban systems practical system planning cities 
software uses modular architecture allows models written independently possible provides clean separation models data operate 
supported extensive experimentation alternate modeling techniques supported implementing system disaggregate responsive policy considerations kind 
primary software lesson learned value moving complex functionality individual models supporting infrastructure possible specific techniques achieving include implicit invocation efficient object representation encapsulated object store extensive automatic generation code declarative specifications 
acknowledgments nathan freier comments 
people contributed urbansim 
particularly michael nathan freier software brush david chang matthew leo lai miller denise 
kevin john robert willis data analysis model calibration 
research funded part national science foundation 
cms part university washington prism project 

integrated assessment modeling systematic review current approaches 
technical report university washington 
background prism 
report 
alex 
unified economic model transportation land 
alex associates ny 
barrett clarke tarr wise 
framework event software integration 
acm transactions software engineering methodology october 
michael 
urban evolution desktop simulation extended cellular automata 
environment planning 
michael 
modelling urban dynamics gis cellular automata 
computers environment urban systems 
michael bin jiang 
multi agent simulation new approaches exploring space time dynamics gis 
technical report centre advanced spatial analysis university college london april 
beckman creating synthetic baseline populations 
transportation research board annual meeting washington 
edward rob kennedy william schaefer 
inside blackbox making transportation models communities 
citizens better environment environmental defense fund 
available environmental defense fund washington www edf org 
gilad bracha martin odersky david stoutamire philip wadler :10.1.1.21.2609
making safe past adding genericity java programming language 
proceedings acm conference object oriented programming systems languages applications pages 
paul calder mark linton 
glyphs objects user interfaces 
proceedings acm symposium user interface software technology pages 
robert cartwright guy steele jr compatible genericity run time types java programming language 
proceedings acm conference object oriented programming systems languages applications pages 
carzaniga di rosenblum wolf 
issues supporting event architectural styles 
proceedings third international software architecture workshop november 
version management cvs 
free software foundation 
clarke 
self modifying cellular automaton model historical san francisco bay area 
environment planning planning design 
cohen 
compiling complex transition database triggers 
proceedings acm sigmod pages portland 
tomas de la 
integrated land transportation modeling decision chains hierarchies 
cambridge university press 

integrated assessment models climate change incomplete overview 
energy policy 
hunt mayo simmonds 
models leeds dortmund 
transport reviews 
joshua epstein robert axtell 
growing artificial societies social science bottom 
brookings institution press mit press washington 
forrester 
world dynamics 
mit press cambridge ma 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
garlan notkin 
formalizing design spaces implicit invocation mechanisms 
proceedings vdm europe pages 
garland shaw 
software architecture 
advances software knowledge engineering volume 
world scientific publishing 
garret editors 
transportation planning trial clean air act travel forecasting 
sage publications oaks ca 
brookings institution 
home page 
web page www brook edu 
isard 
notes linkages ecological economic systems 
papers regional science association 
krasner pope 
cookbook model view controller user interface paradigm smalltalk 
journal object oriented programming august september 
sandia national laboratories 
aspen smart agent economics simulation model 
web page www aspen cs sandia gov 
lee 
large scale models 
journal american institute planners 
lee 
retrospective large scale urban models 
journal american planning association 
francesco luna benedikt editors 
economic simulations swarm agent modelling object oriented programming 
kluwer academic publishers 
martinez 
bid choice land model integrated economic framework 
environment planning 
meadows richardson 
dark decade global modeling 
john wiley sons new york 
eric miller david john hunt 
integrated urban models simulation transit land policies 
final report project 
web document transit cooperative highway research project national academy sciences washington dc 
books nap edu books tcr html 
martin odersky philip wadler :10.1.1.26.1697
pizza java translating theory practice 
proceedings th acm sigplan sigact symposium principles programming languages pages 

systems ecology 
john wiley sons new york 
david sullivan paul 
cellular models urban systems 
theoretical practical issues cellular automata proceedings fourth international conference cellular automata research industry 
springer verlag 
fisher vanden 
searching integrated assessment preliminary investigation methods projects integrated assessment global climatic change 
harvard commission global environmental change information policy 
parsons douglas 
land impacts transportation guidebook 
transportation research board national research council 
denise matthew brush alan borning 
design visualizations urban modelling 
proceedings joint eurographics ieee symposium visualization amsterdam may 
pryor basu 
development aspen simulation model economy 
technical report sand sandia national laboratories february 

integrated urban models policy analysis transportation land 
london 
reiss 
field friendly integrated environment learning development 
kluwer 

integrated assessment climate change evaluation methods strategies 
institute editor human choices climate change state art report 
pacific northwest laboratory washington 

technical review urban land transportation models tools evaluating vehicle reduction strategies 
department energy 
stefik bobrow kahn 
integrating access oriented programming multiparadigm environment 
software january 
sullivan notkin 
reconciling environment integration software evolution 
acm transactions software engineering methodology 
kevin sullivan ira david notkin 
mediators radiation treatment planning environment 
ieee transactions software engineering august 
swarm development group 
web page www swarm org 
urbansim guide version august 
available www urbansim org 
villa maxwell 
landscape model integrated ecological economic modeling watershed 
environmental modelling software journal 
paul waddell 
oregon prototype metropolitan land model 
conference transportation land air quality making connection portland oregon may 
paul waddell 
simulating effects metropolitan growth management strategies 
conference association public policy analysis management 
available www urbansim org 
paul waddell 
historical validation eugene springfield 
presentation second oregon symposium integrating land transport models july 
available www urbansim org 
integrated assessment climate change overview comparison modeling approaches results 
bruce lee editors climate change economic social dimensions climate change chapter pages 
cambridge university press 

