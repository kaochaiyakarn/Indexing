adifor system automatic differentiation fortran programs christian bischof alan carle andrew argonne preprint anl mcs technical report tr 
automatic differentiation technique augmenting computer programs statements computation derivatives chain rule differential calculus 
adifor system provides automatic differentiation fortran programs order derivatives 
adifor system consists main components adifor preprocessor fortran exception handling system sparslinc library 
combination tools provides ability deal arbitrary fortran syntax handle codes containing single double precision real complex valued data fully support easily customize translation fortran intrinsics transparently exploit sparsity derivative computations 
adifor successfully applied line code believe new record automatic differentiation 
key words 
automatic differentiation adifor derivative gradient jacobian chain rule source transformation optimization sparslinc 
computer model denote output produced particular input employing taylor expansion state ho higher order terms ho satisfy jj jj xjj 
value second order derivatives interchangeably terms second order sensitivities allows derive linear order quadratic second order approximation base state derivatives provide way computing relatively simple approximation allow inexpensively explore behavior neighborhood derivatives ubiquitous numerical supported office scientific computing department energy contract eng national aerospace agency purchase order cooperative agreement 
national science foundation center research parallel computation cooperative agreement 
ccr 
mathematics computer science division argonne national laboratory cass avenue argonne il mcs anl gov center research parallel computation rice university main street houston tx carle cs rice edu 
computing 
examples methods minimization solution nonlinear systems equations numerical solution stiff ordinary differential equations partial differential equations differential algebraic equations 
past decade large computer models common consequence tremendous expansion computational capabilities 
models computation derivatives important may compute intensive part computation 
mention examples 
sensitivity analysis tries assess sensitivity computational model perturbations parameters initial conditions 
sensitivity analysis usually takes place model validation stage verify robustness respect empirically determined parameters verify model behaves suggested experimental data 
inverse problems goal calibrate initial state computer model behavior best matches series experimentally acquired data 
solution process usually employs variant newton method 
collection articles related subject example 
multidisciplinary design optimization tries find optimal setting input parameters computer model respect cost function quantifies quality design 
approach constitutes probably rapidly expanding application area numerical optimization engineers moving repeated simulation paradigm computer assisted design numerical optimization techniques employed explore design space goal oriented fashion 
collection articles related subject example 
purposes illustration assume code computation function 
wish compute derivatives respect call independent variable dependent variable 
terms dependent independent variable different contexts terminology corresponds mathematical derivatives 
approaches computing derivatives hand differentiate code hand arrive code computes derivatives 
derivatives large code tedious error prone process nonlinear functions derivatives generally complicated function 
developing derivative code hand liable considerable amount comparison development original code result efficient code 
divided differences approximate derivative respect ith component particular point sided differences fi fi fi sigma gamma sigmah central differences fi fi fi gamma gamma ith cartesian basis vector 
easily seen approach leads second order approximation desired derivatives 
computing derivatives divided differences advantage need function black box 
main drawback divided differences accuracy hard assess 
small step size needed minimize truncation error resulting omission higher order terms resulting subtraction equal floating point numbers may lead significant cancellation error see example 
best approach example results derivative approximation half significant digits issues sensible ways choosing stepsize discussed example 
symbolic differentiation symbolic manipulators maple macsyma reduce provide powerful capabilities manipulating algebraic expressions general unable deal constructs branches loops subroutines inherent computer codes 
addition binary operator string describing derivative expression essence doubles leading combinatorial explosion effect efficiency back optimization techniques 
differentiation symbolic manipulator requires considerable human effort break existing computer code pieces symbolic manipulator assemble resulting pieces usable derivative code 
automatic differentiation automatic differentiation techniques rely fact function matter complicated executed computer potentially long sequence elementary operations additions multiplications elementary functions sin cos see example 
applying chain rule fi fi fi fi fi fi fi fi fi composition elementary operations compute completely mechanical fashion derivatives correct machine precision 
techniques automatic differentiation directly applicable computer programs arbitrary length containing branches loops subroutines 
note symbolically assisted approaches automatic differentiation enables derivatives updated easily original code changes 
adifor automatic differentiation fortran system provides automatic differentiation programs written fortran 
fortran subroutine collection subroutines function adifor produces fortran subroutines computation derivatives function 
adifor approach provides benefits ease adifor requires user supply fortran source code indicate variables correspond independent dependent variables 
portability adifor produces vanilla fortran code helps greatly code verification 
efficiency adifor generated derivative code usually outperforms divided difference approximations 
extensibility adifor employs consistent subroutine naming scheme easy exploit domainspecific knowledge 
adifor project began summer 
prototype version adifor operational late described 
major revisions system subsequently completed june version called adifor 
adifor successfully employed different areas science engineering aeronautical multidisciplinary design optimization aeronautical computational fluid dynamics weather modeling groundwater transport modeling structural engineering statistics mechanical system design power networks reactor modeling large scale numerical optimization 
largest codes lines long described turbulent flow airplane wing 
experiences adifor demonstrated automatic differentiation properly implemented useful scientists wide variety fields applicable codes arbitrary length complexity 
focus adifor system constitutes major effort provides significantly functionality 
adifor system offers new features full fortran support adifor example support complex arithmetic functions versus subroutines statement functions procedure parameters 
addition features adifor preprocessor supports common extensions double complex include statements implicit 
flexible intrinsic handler system provides various reporting levels response exceptions differentiation sqrt zero easily customized template files 
transparent sparsity support code generated adifor perform derivative computations sparslinc sparse linear combination library transparently exploiting sparsity arising large sparse jacobian computations gradients functions sparse hessian 
code customization adifor provides mechanisms generate code particularly suited computation products 
structured follows 
section motivate classical forward reverse mode automatic differentiation viewing automatic differentiation source translation problem describe approach taken adifor 
section describe new adifor system 
subsection describe capabilities adifor preprocessor transforms fortran code canonical form suitable automatic differentiation determines variables augmented derivative objects generates derivative code templates call sites fortran intrinsics 
subsection describes system translates templates fortran code governed prototype files describing action taken desired level error reporting 
sparslinc library described subsection scenarios suggest give experimental results 
lastly summarize contributions discuss directions 
automatic differentiation source transformation adifor approach fact chain rule applied mechanical fashion rediscovered times see example papers part 
traditionally approaches endif enddo sample code fragment ad developed called forward reverse modes 
modes distinguished chain rule propagate derivatives computation 
forward mode accumulates derivatives intermediate variables respect independent variables reverse mode propagates derivatives final values respect intermediate variables 
adifor takes approach employs forward reverse mode 
case automatic differentiation produces code absence floating point exceptions computes values analytical derivatives accurate machine precision 
illustrate differences approaches deriving code computing code fragment shown considering cases 
take source transformation approach rewriting original code provides computation derivatives 
forward mode apply forward mode automatic differentiation break code elementary unary binary operations arrive code shown 
compute derivatives shown way chain rule differential calculus usually taught 
notation rs denote derivative object associated program variable easily convince initializing rx ith canonical unit vector length exit ry contains gradient 
case statement involving derivative object really vector instruction involving vectors 
hand interested sensitivities respect say rx scalar vector initialize rx rx 
case statement involving derivative object scalar instruction emerge ry 
general view derivative vectors row vectors linearity differentiation implies forward mode allows compute arbitrary linear combinations columns temp temp temp temp endif enddo sample code fragment modified preparation forward mode code generation ry ry rtemp rx ry temp ry rtemp ry temp rtemp rx ry temp ry rtemp ry temp endif enddo forward mode ry ry rtemp rx ry temp ry rtemp temp ry temp rtemp rx ry temp ry rtemp temp ry temp endif enddo forward mode derivative code generated code fragment forward mode approach jacobian delta delta delta delta delta delta ry ry rx 
rx particular vector initialize rx compute directional derivative lim gamma forward mode code easy generate logically preserves parallelizable vectorizable structures original code readily generalized higher order derivatives wish compute directional derivatives running forward mode code requires order times time memory original code 
reverse mode contrast called reverse mode automatic differentiation computes adjoint quantities derivative final result respect intermediate quantity 
propagate adjoints able reverse flow program remember recompute intermediate value nonlinearly impacts final result 
denote adjoint particular variable consequence chain rule shown see example statement original code implies code form generated reverse mode code 
notation shorthand linear elementary operation addition depend values operands 
hand nonlinear operation multiplication depend values operands remember derivative values values operands 
able reverse flow program remember intermediate values overwritten trace branches taken 
transformed code consist elementary unary binary operations introduce trace arrays record branch history jump array save intermediate values forward mode code preserves vectorizable structures code inserts additional vectorizable loops code vectorizing compilers may difficult time choosing proper loop level vectorize 
value value jump left value value value jump right value value value endif enddo value value code fragment modified preparation reverse mode code generation variables temp value value 
counters point value set branches statement inside loop 
resulting code shown 
position automatically generate reverse mode code computation employing recipe described 
result shown 
notation denote adjoint object associated program variable easily convince initialize adjoint objects zero running codes figures emerge similarly initializing adjoint objects zero compute general view adjoint vector associated program variable column vector linearity differentiation implies delta delta delta gamma delta defined equation 
reverse mode code allows compute arbitrary linear combinations rows jacobian 
vector initialize compute derivative note involved process generate reverse mode code 
complexity forward mode code generation changed minimally considered addition value value step jump left value gamma value value value gamma value gamma value value value gamma endif enddo reverse mode value value step jump left value gamma value value value value value gamma value gamma value value value value value gamma endif enddo reverse mode derivative code generated code reverse mode approach multiplication reverse mode code sensitive change need save intermediate values temp save expense extra memory locations 
extra storage required remember way branches taken regardless loop computed multiplication addition 
reverse mode extreme cases require memory tracing intermediate values branches floating point operations executed run program 
running time roughly times function computing linear combinations rows jacobian 
particularly advantageous gradients 
adifor approach various implementations automatic differentiation extensive survey 
mainly interested black box tools automatic differentiation tools source code indication variables correspond independent dependent variables respect differentiation generate derivative code user intervention 
black box tools sense fortran programs adic programs 
amc hand tool supports interactive fashion generation reverse mode code 
implement forward reverse mode 
save control flow information intermediate values tools generate trace computation writing particulars operation performed code 
interpretation overhead associated trace purposes automatic differentiation potentially large size serious computational bottleneck 
adifor adic take source transformation approach automatic differentiation 
applying rules automatic differentiation tools rewrite original code inserting statements computation order derivatives 
tool generates full reverse mode code successfully adjoint generation weather models 
imposes certain restrictions fortran input fortran runtime environment support automatic arrays 
potential storage explosion associated applying reverse mode highly nonlinear codes addressed approach suggested great potential 
adifor adic employ hybrid forward reverse mode scheme basic approach taken adifor unchanged previous versions adifor 
essence statement accumulate partial derivatives variable left hand side respect variables right hand side apply forward mode propagate total derivatives chain rule 
results approach code shown 
example code fragment bar temp cleaned version vanilla reverse mode code compute new new old shown 
note cost computing statement derivatives amortized derivatives computed approach efficient normal forward mode ry ry bar ry bar ry rx bar ry bar ry rx endif enddo adifor approach ry ry temp res temp bar temp ry bar ry rx res temp res temp bar temp ry bar ry rx res endif enddo adifor approach derivative code code fragment generated adifor approach divided difference approximation derivatives computed time 
reverse mode optimal gradients general jacobians approach performs compared divided difference approximations wide variety problems forward mode predictable storage runtime requirements 
see user perspective adifor generated code provides directional derivative computation possibilities associated forward mode automatic differentiation 
simply producing code compute jacobian adifor produces code compute seed matrix initialized user 
identity adifor computes full jacobian just vector adifor computes product jacobian vector 
derivative object ry say contains derivatives scalar respect directions specified seed matrix 
call vector directional gradient vector vector associated scalar variable propagate derivatives 
cost derivative computation proportional number directional derivatives equal number columns computed run 
computing jacobian vector product expensive computing jacobian 
typically see mentioned section adifor generated code runs times faster sided divided difference approximations computes derivatives time 
explanation lies hybrid approach dependence analysis tries avoid computing derivatives expressions affect dependent variables see subsection 
seed matrix mechanism allows flexible adifor generated code 
example employed compute compressed versions large sparse jacobians chain derivatives generated programs running different platforms decrease turnaround time derivative computations parallel approach 
adifor system adifor system major components adifor preprocessor adifor preprocessor parses code performs certain code normalizations determines variables augmented derivative objects generates derivative code templates call sites fortran intrinsics desired calls sparslinc routines 
system system expands calls fortran intrinsic templates fortran code guided template library defining intrinsic translated 
sparslinc library sparslinc library provides transparent support sparsity derivative computations 
relationship components shown pictorially described detail subsections 
point new adifor preprocessor system correctly handled line helicopter hover code nasa langley 
researchers langley verified derivatives believe new record automatic differentiation 
adifor preprocessor adifor takes source transformation approach automatic differentiation 
order augment code derivative computation rewrite principle outlined preceding section generating new fortran code compiled executed computes derivatives 
compared implementing automatic differentiation operator overloading see example source translation approach allows view problem generating derivative code context larger arithmetic operation conceptual key development hybrid modes employed adifor 
order position rewrite real life fortran codes advantageous base automatic differentiation tool existing compiler infrastructure 
fashion quickly gain access means constructing manipulating representation program 
able logically retarget techniques developed compiler community reason fortran programs generate efficient derivative code 
adifor employs compiler infrastructure provided programming environment developed primarily semi automatic parallelization fortran programs system collection tools programming fortran data parallel language 
primary goal parallelization fortran programs compiler infrastructure provides fortran parser data abstractions representing fortran programs tools constructing manipulating representations gathering variety data flow facts scalars arrays control flow information 
section describe adifor preprocessor indication independent dependent variables generates fortran version derivative code processed system 
preprocessor accomplishes tasks code canonicalization original code rewritten fashion allows automatic differentiation 
variable decide variables need associated derivative object 
loosely speaking variable value depend value independent variable influence value dependent variable derivative object 
derivative code generation derivative code generated adifor hybrid approach 
briefly describe tasks subsections 
code canonicalization code canonicalization phase fortran code hand essence rewritten conform certain standards 
example expressions appearing arguments function subroutine calls function calls appearing conditional tests hoisted assignments new temporary variables 
statement functions expanded line code 
phase breaks long right hand sides assignment statements smaller pieces rewrites variables appearing right hand side assignment statement type 
transformation needed code able link sparslinc see subsection library 
phase adifor occurrence features code required user rewrite code hand 
canonicalization phase supports common fortran extensions include double complex enddo implicit statements 
fact fortran features supported adifor fortran intrinsics passed procedure parameters overriding fortran intrinsics external functions statements contain function invocations 
occurrence statement flagged adifor 
variable associate derivative object denoted symbols variable value may depend value variable considered independent respect differentiation value impacts variable considered dependent respect differentiation 
variable called active 
variables require derivative information called passive 
easiest solution variable problem variables active possibly large additional space penalty storage unneeded derivative objects time penalty computation derivative objects depend independent variables impact values dependent variables 
adifor tries better employing interprocedural analysis techniques 
derives local interaction graph subroutine 
bipartite graph input parameters variables common blocks connected output parameters variables common blocks values influence 
dependency analysis crucial determining sets active passive variable binding contexts subroutine may invoked 
interprocedural analysis performed determines essence possible program paths independent variable affect dependent identifies intermediate variables involved path 
analysis involves computing transitive closure program graph composed local interaction graphs 
presence common blocks equivalences arbitrary control structures nontrivial compute intensive process 
experience transitive closure computation memory time consuming part adifor process 
adifor preprocessor dependency analysis code substantially improved compared adifor particular adifor may prune local interaction matrix ignore variables declared case common blocks defined include files 
code generation active variables nominated derivative code generated statement containing active variable derivative objects allocated 
statement generate derivative code reverse mode approach illustrated clean code folding constants eliminating variables 
fashion eliminate multiplications additions reduce number variables allocated 
assignment statements containing fortran intrinsic template generated instantiated system 
example designate independent variable diff dependent set limit number directional derivatives computed default function diff translated code shown 
experience code generated adifor usually times longer original code 
adifor preprocessor provides mechanism customizing derivative code 
example suppress leading dimensions derivative objects declare number directional derivatives constant runtime parameter omit loops interested computing directional derivative example jacobian vector product 
judicious options adifor generate code somewhat general may compiled faster code computer platform hand particular vector superscalar platforms 
example interested computing directional derivative simply setting adifor variables details described adifor preprocessor generates simpler code shown 
system automatic differentiation application chain rule 
gives correct answer absence floating point exceptions provided operators functions applied arguments interior domains operators functions smooth neighborhood point application 
assumption satisfied results computed automatic differentiation tool guaranteed constitute valid derivative value 
consider example situation course execution program compute max value happens zero 
automatic differentiation tool requires knowledge max defined 
fortran intrinsics differentiable domain abs sign aint min dim power operator 
system provides mechanism ffl define reasonable default behavior cases derivative fortran intrinsic defined ffl provide error reporting mechanism gives various levels detail exceptions occurred ffl allow user easily customize exception handler ffl easily extend handle new intrinsics 
tup compute elementary derivative fortran intrinsic adifor preprocessor inserts call intrinsic template 
example statement max declared reals translated call ad intrinsic max enddo system takes care translating ad intrinsic max call legal fortran code provides value intrinsic value partial derivative respect argument value partial derivative respect second argument note max max defined example ad intrinsic abs call inserted deal call abs jxj defined 
system main components purse preprocessor purse translates ad intrinsic calls legal fortran governed level exception handling desired 
template files fortran intrinsics purse uses template files blueprints expand ad intrinsic calls 
files easily customized user 
error handler library collection fortran routines record report runtime errors change certain default values 
illustrate workings system demonstrate expansion template call ad intrinsic max detailed description 
translation ad intrinsic call fortran governed template file 
template file provided default max shown 
template specifies function value computed max order partials fx fy second order partials fxy computed 
defines behavior performance mode identifies invoke error handler error reporting modes 
adifor generate second order derivative code expect add capability soon provided system 
purse uses file translating ad intrinsic max call governed level error reporting desired 
system currently provides terse counting verbose modes performance mode points checked 
ad intrinsic max translated max gt 
lt endif note constants instantiated right type code generated evaluating second order partial derivatives 
point partials set warning generated 
tie value constitutes subgradient 
rationale choosing default values different intrinsics provided 
terse mode point exception handler called max gt 
lt call endif terse error handler invoked sets flag exception max intrinsic occurred exception returns exceptional values occurrence 
executing adifor generated code user calls error handler reporting subroutine invoked point message exception occurred evaluating min generated 
counting mode translation terse mode error handler call call max evaluated times say arguments equal course evaluation adifor generated code call result message exception occurred evaluating min times terse counting mode counter recurrence required determining number occurrences exception inhibits vectorization 
verbose mode call error handler call main main name file containing call line 
subroutine called results message exception max 
occurred main line verbose mode provides detailed information string handling associated file name inhibited compiler optimization platforms 
error handler library provides routines keeping track reporting errors changing default error values error reporting unit 
working report mode 
printing message time exception occurs mode provide summary information exception line file main occurred 
template mechanism easy specify different way handling exceptional situations 
say example reason inserting max call ensure floating point roundoff errors result small negative value quantity physically negative example energy value 
specify argument max zero set partial max respect second argument 
easily copying max template file say extension denotes template files adding branch eq 
type fx type fy type elseif gt 
statements 
adding comment ad exception override intrinsic max call max user code purse substitute modified exception handler dealing exceptions call 
new intrinsic easily supported adding name new intrinsic purse providing template file 
fashion user adifor complete control handling reporting exceptional derivative occurrences 
note adifor system adifor preprocessor purse called fashion transparent user 
sparslinc sparse linear combination library workhorse adifor generated code mainly forward mode order automatic differentiation approach vector linear combination ry bar ry rx 
ry vector length subsection denotes number directional derivatives computed bar scalar 
operation particular instantiation ff vectors length ff scalar multipliers referred arity 
choose ad flavor dense default vector operation expressed fortran vector loop bar enddo long moderate efficient way expressing vector linear combination 
sparslinc sparse linear combination library addresses scenario large vectors involved vector linear combination sparse part contain zero entries 
situation arises example computation large sparse jacobians gradients called partially separable functions functions represented form np component functions limited support 
gradients rf sparse final gradient rf dense 
partially separable functions play key role large scale optimization example minimization examples belong class particular function sparse hessian partially separable 
sparsity pattern known coloring techniques seed matrix mechanism employed advantageously compute compressed jacobian matrix efficiently 
computation gradient partially separable function reduced problem computing sparse jacobian realizing gradient easily obtained summing rows sparse jacobian 
np compressed jacobian approach works sparse jacobians assumptions ffl sparsity pattern jacobian known 
ffl chromatic number jacobian close maximal number nonzeros row particular jacobian contain row considered dense 
ffl component functions readily accessible 
note sparsity inherent problems matter code formulated 
initial seed matrix sparse identity ignoring exact numerical cancellation left hand side vector fewer nonzeros vectors right hand side 
final derivative objects correspond row jacobian component gradient rf sparse intermediate vectors sparse 
replacing dense vector loop way expressing derivative linear combinations algorithms data structures tailored exploiting sparsity exploit sparsity transparent fashion assumptions coloring approach met 
note sparsity structure rf computed byproduct derivative computation 
sparslinc library provides support sparse vector linear combination fashion suited operation context automatic differentiation 
sparslinc written ansi includes features data structures sparse vectors sparslinc different data structures vector containing nonzero nonzeros nonzeros 
numerical linear algebra literature data structures usually referred single subscript compressed subscript representation sparse vector see example 
efficient memory allocation scheme sparslinc employs bucket memory allocation scheme effect provides buffered memory allocation mechanism supporting dynamic nature sparse vectors avoiding need system calls time 
sparslinc switches vector representations transparent fashion provides special support operation ff ff occurs frequently computing gradients partially separable functions suggested 
full precision support single double precision routines provided real computations 
fashion sparslinc adapt dynamic nature derivative vectors efficiently representing derivative vectors grow column identity matrix occurring adifor seed matrix dense vector rf 
mention memory allocated derivative objects zeros 
sparslinc effectively complements adifor dependence analysis conservative assumptions variables considered active may result activate variable computational path independent dependent variables 
situation may arise example large arrays different portions array represent logically different entities 
invoked ad flavor sparse option adifor allocates integer vector derivative object generates calls sparslinc library perform vector linear combinations example call bar fortran interface sparslinc described 
routines needed initialization extraction data examples sparslinc context adifor provided 
addition ease sparslinc result significant performance improvement 
example computed gradients problems optimization test set function partially separable specified partially separable form 
codes ffl ginzburg landau model homogeneous ffl minimal surface area problem ffl steady state combustion model ffl dept elastic plastic torsion problem 
computed derivatives dense sparslinc supported approach 
improvement run time achieved ibm rs workstation sparslinc shown 
execution time dense routines extrapolated largest problem fit machine running memory 
mention derivatives computed dense sparslinc supported adifor generated derivative code agreed values produced handcoded routines machine precision 
see problems achieved orders magnitude improvement dense loop version derivative code 
note sparslinc greatly reduces memory requirements code 
requiring times memory computing gradient size sparslinc allocate memory needed examples involves dense vectors length gradients accumulated short vectors nonzeros derivative objects 
summary sparslinc provides mechanism exploiting sparsity derivative computations easy fashion 
user need knowledge particular sparsity structure problem 
sparslinc routines efficiently adapt particular situation hand providing efficient support wide variety sparsity scenarios 
mention sparsity structure jacobian byproduct derivative computation position develop example novel kind large scale optimization environment nonlinear equations user need supply code function automatic differentiation provides derivative values location nonzeros jacobian sparse solver user intervention 
adifor various application domains demonstrated automatic ffl applicable arbitrary codes ffl provides reliable derivatives ffl result considerable speedups respect divided difference approximations 
points clear automatic differentiation believers extent borne applications limited domains lack tools provided fast automatic differentiation capabilities general fortran codes effectively prohibited automatic differentiation part mainstream scientific computing 
adifor project begun change ffl supporting fortran lowering technology accessibility threshold need code rewriting reduced ffl employing advanced source transformation infrastructure algorithms handle reason large necessarily structured codes ffl employing approach resulted lower complexity divided differences expressing code fashion computer run times bore complexity advantage ffl providing fortran output language possibilities users familiar automatic differentiation inspection generated code tune generated code needs ffl actively promoting supporting automatic differentiation applications 
adifor system goes step establishing usefulness technology 
providing ffl capability support fortran common extensions ffl runtime library transparent exploitation sparsity derivative computations ffl completely customizable exception handler adifor system affords new level ease flexibility order automatic differentiation tool 
adifor available mainly adifor accounts argonne national laboratory adifor system intended widely distributed 
remains done 
working extending capabilities adifor directly compute second order derivatives 
automatic differentiation easily extended arbitrary order derivatives see example system clear approach combination approaches results efficient code 
issues discussed 
working decreasing complexity computing order derivatives 
code usually beats finite differences usually match derivative code carefully derived hand particular respect adjoint codes 
address issue investigate advanced compiler techniques employed generate efficient adjoint code 
small example figures suggests adjoint mode generation requires radical code restructuring advanced analysis capabilities avoid tracing unneeded quantities 
investigating higherlevel hybrid mode approaches pseudo adjoints exploitation parallel derivative codes serial simulation codes exploiting chain rule associativity 
understand idea consider situation shown start computed wait completion processes may execute parallel 
case derivative computations associativity derivative chain rule 
example proceed 
time spawn process compute spawn process compute time start computation spawn process compute lastly computation initiated 
assumption computation derivatives takes significantly longer simulation derivative processes running parallel 
finished simply accumulate outputs arrive desired result willing duplicate computation fashion arrive coarse grained parallel schedule result minimal synchronization requirements ideally mapped network workstations 
investigating extension automatic differentiation parallel communication mechanisms including mpi pvm parallel languages hpf fortran languages fortran 
difficulty principle providing automatic differentiation capability languages clear extent capabilities languages impact positive negative way efficient generation derivative codes 
lastly adifor project view example power interdisciplinary research 
techniques employed adifor motivated classical differential calculus theory automatic differentiation discrete complexity theory 
various components adifor system adifor preprocessor fortran system sparslinc library draw compiler source transformation technology numerical linear algebra 
combining approaches adifor allows provide new believe superior approach problem heart numerical computing computation derivatives 
acknowledgments andreas griewank george corliss paul instrumental role getting adifor project ground continued advice 
gordon contribution rationale complex exception handler contribution report mode 
proceedings th aiaa nasa usaf issmo symposium multidisciplinary analysis optimization panama city florida american association aeronautics aerospace engineers 
vikram adve alan carle ken kennedy charles koelbel ulrich kremer john mellor crummey scott warren chau wen tseng 
requirements data parallel programming environments 
ieee transactions parallel distributed technology 
carter mor xue 
test problem collection 
technical report anl mcs tm revised mathematics computer science division argonne national laboratory 
brett jorge mor christian bischof alan carle andreas griewank 
computing large sparse jacobian matrices automatic differentiation 
siam journal scientific computing 

barthelemy hall 
automatic differentiation tool engineering design 
proceedings th aiaa usaf nasa oai symp 
multidisciplinary analysis optimization aiaa pages 
american institute aeronautics astronautics 
christian bischof alan carle george corliss andreas griewank paul 
adifor generating derivative codes fortran programs 
scientific programming 
christian bischof alan carle 
fortran interface specification sparslinc library 
technical report anl mcs tm mathematics computer science division argonne national laboratory 
christian bischof alan carle andrew paul 
adifor user guide 
technical report anl mcs tm mathematics computer science division argonne national laboratory 
christian bischof george corliss larry green andreas griewank kara perry newman 
automatic differentiation advanced cfd codes multidisciplinary design 
journal computing systems engineering 
christian bischof george corliss andreas griewank 
adifor exception handling 
technical report anl mcs tm mathematics computer science division argonne national laboratory 
christian bischof george corliss andreas griewank 
hybrid evaluation second derivatives adifor 
technical report anl mcs tm mathematics computer science division argonne national laboratory 
christian bischof george corliss andreas griewank 
structured second higher order derivatives univariate taylor series 
optimization methods software 
christian bischof larry green tim 
parallel calculation sensitivity derivatives aircraft design automatic differentiation 
proceedings th aiaa nasa usaf issmo symposium multidisciplinary analysis optimization aiaa pages 
american institute aeronautics astronautics 
christian bischof andreas griewank 
computational differentiation multidisciplinary design 
engl mclaughlin editors inverse problems optimal design industry pages stuttgart 
teubner verlag 
christian bischof paul 
adifor compute dense sparse jacobians 
technical report anl mcs tm mathematics computer science division argonne national laboratory 
christian bischof andrew 
unpublished information argonne national laboratory 
christian bischof gordon alan carle 
unpublished information argonne national laboratory 
christian bischof greg christine alan carle aaron ross 
application automatic differentiation groundwater transport models 
alexander peters editor computational methods water resources pages dordrecht 
kluwer academic publishers 
christian bischof 
automatic differentiation tangent linear models pseudo adjoints 
preprint mcs mathematics computer science division argonne national laboratory 
christian bischof moe el 
extending compile time reverse mode exploiting partial separability adifor 
technical report anl mcs tm mathematics computer science division argonne national laboratory 
ali jorge mor 
unpublished information argonne national laboratory 
kathy stephen campbell linda 
numerical solution initial value problems differential algebraic equations 
north holland new york 
barry brown martin spears lawrence levy james kathy russell 
algorithm log likelihood derivatives log models 
technical report dept university texas anderson cancer center houston 
john butcher 
numerical analysis ordinary differential equations runge kutta general linear methods 
john wiley sons new york 
byun robert dennis hwang jr coats 
computational modelling issues generation air quality models 
proceedings imacs atlanta georgia 
callahan cooper hood kennedy torczon 
parallel programming environment 
international journal supercomputer applications december 
alan carle lawrence green christian bischof perry newman 
applications automatic differentiation cfd 
proceedings th aiaa fluid dynamics conference aiaa 
american institute aeronautics astronautics 
bruce char 
computer algebra toolbox program generation manipulation 
andreas griewank george corliss editors automatic differentiation algorithms theory implementation application pages 
siam philadelphia 

application automatic differentiation problems engineering analysis 
computer methods applied mechanics engineering 
george corliss christian bischof andreas griewank steven wright thomas 
automatic differentiation pde flow case study 
robert doyle knight gerard richter editors advances computer methods partial differential equations vii pages new brunswick 
imacs 
john dennis schnabel 
numerical methods unconstrained optimization nonlinear equations 
prentice hall englewood cliffs 
duff reid 
direct methods sparse matrices 
oxford press london 
engl mclaughlin 
proceedings symposium inverse problems optimal design industry teubner verlag stuttgart 
ian foster robert olson steven tuecke 
programming fortran technical report anl rev mathematics computer science division argonne national laboratory october 
geist beguelin dongarra jiang manchek sunderam 
pvm parallel virtual machine users guide tutorial network parallel computing 
mit press cambridge 
alan george joseph liu 
computer solution large sparse positive definite systems 
prentice hall englewood cliffs 
ralf 
adjoint model compiler manual version amc version 
technical report institut fur august 
phillip gill walter murray margaret wright 
practical optimization 
academic press london 
david goldberg 
computer scientist know floating point arithmetic 
acm computing surveys 
victor goldman van 
efficient numerical program generation computer algebra environments 
andreas griewank george corliss editors automatic differentiation algorithms theory implementation application pages 
siam philadelphia 
lawrence green perry newman kara 
sensitivity derivatives advanced cfd algorithm viscous modeling parameters automatic differentiation 
proceedings th aiaa computational fluid dynamics conference aiaa 
american institute aeronautics astronautics 
andreas griewank 
chain rule revisited scientific computing 
preprint mcs mathematics computer science division argonne national laboratory 
andreas griewank 
achieving logarithmic growth temporal spatial complexity reverse automatic differentiation 
optimization methods software 
andreas griewank george corliss 
automatic differentiation algorithms 
siam philadelphia 
andreas griewank david jay srinivasan 
package automatic differentiation algorithms written 
preprint mcs mathematics computer science division argonne national laboratory 
andreas griewank shawn reese 
calculation jacobian matrices markowitz rule 
andreas griewank george corliss editors automatic differentiation algorithms theory implementation application pages 
siam philadelphia 
andreas griewank philippe toint 
unconstrained optimization partially separable objective functions 
powell editor nonlinear optimization pages london 
academic press 
william gropp ewing lusk anthony skjellum 
mpi portable parallel programming message passing interface 
mit press cambridge 

differentiation zur von 
stud institut fur universitat stuttgart 

hybrid optimization approach estimation distributed parameters dimensional confined steady state conditions 
draft manuscript 
jim 
preprocessor sensitivity studies fortran programs 
andreas griewank george corliss editors automatic differentiation algorithms theory implementation application pages 
siam philadelphia 
amin 
application automatic differentiation continuation power flow 
proc 
th north american power symposium part manhattan kansas pages 
johnson 
ja comprehensive analytical model aerodynamics dynamics johnson aeronautics version 
technical report johnson aeronautics 
david 
taxonomy automatic differentiation tools 
andreas griewank george corliss editors proceedings workshop automatic differentiation algorithms theory implementation application pages philadelphia 
siam 
koelbel schreiber steele jr 
high performance fortran handbook 
mit press cambridge 
sherman taylor hou green newman 
second order aerodynamic sensitivity derivatives automatic differentiation incremental iterative methods 
proceedings th aiaa nasa usaf issmo symposium multidisciplinary analysis optimization aiaa pages 
american institute aeronautics astronautics 
taylor newman 
aerodynamic optimization studies supersonic euler code efficient calculation sensitivity derivatives 
proceedings th aiaa nasa usaf issmo symposium multidisciplinary analysis optimization aiaa pages 
american institute aeronautics astronautics 

fortran precompiler yielding error estimates second derivatives 
andreas griewank george corliss editors automatic differentiation algorithms theory implementation application pages 
siam philadelphia 
jorge mor stephen wright 
optimization software guide 
siam philadelphia 
douglas muir 
description covariance data format 
editor proc 
nuclear data evaluation methodology 
world scientific 
ki park kelvin 
effect parameterization evolution linear perturbations cloud model 
preprints conference cloud physics january dallas texas 
american meteorological society 
ki park kelvin christian bischof tim 
sensitivity analysis storms direct adjoint methods 
preprints th conference numerical weather prediction portland oregon pages 
american society 
louis rall 
automatic differentiation techniques applications volume lecture notes computer science 
springer verlag berlin 

automatic differentiation overview application systems parametrized nonlinear equations 
technical report tr center research parallel computation rice university 
nicole stephane andre 
automatic differentiation 
october 
nicole schmidt eric 
basic functional representation programs automatic differentiation system 
francois xavier le editor high performance computing geosciences dordrecht 
kluwer academic publishers 
edgar soulie 
user experience fortran compilers squares problems 
andreas griewank george corliss editors automatic differentiation algorithms theory implementation application pages 
siam philadelphia 
unger hall 
automatic differentiation aircraft design problem 
proceedings th aiaa nasa usaf issmo symposium multidisciplinary analysis optimization aiaa pages 
american institute aeronautics astronautics 
gregory christine christian bischof aaron ross alan carle 
application automatic differentiation groundwater transport codes 
preprint mcs mathematics computer science division argonne national laboratory 
erich 
partial differential equations applied mathematics 
john wiley sons somerset 
bar bar temp bar reverse mode code derivative computing code user derivative driver fortran derivative code preprocessor adifor link compile fortran analysis code template expander library sparslinc library overview adifor system real function diff real square diff abs square sample fortran program function diff rres rres real integer pmax parameter pmax integer rres real diff rres rres real pmax save gt 
pmax print parameter greater pmax endif enddo call ad intrinsic abs rres enddo diff derivative code generated adifor preprocessor code default settings function diff rres real real rres diff real save call ad intrinsic abs rres diff derivative code generated adifor preprocessor code settings appropriate jacobian vector product performance max ifndef performance gt 
fx type fy type lt fx type fy type call exception handler fy type fx endif gt 
fx type fy type lt fx type fy type adifor exception max 
current value fx type fy type endif endif performance type performance fxy type performance type template file max intrinsic gradient size performance improvement adifor sparslinc rs dept runtime improvement computing gradients sparslinc serial simulation proc 
proc 
proc 
df dx dg dy dh dz dw dx parallel derivative computation 
