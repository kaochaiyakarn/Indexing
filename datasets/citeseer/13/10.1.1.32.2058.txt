international journal software engineering knowledge engineering vol 
december world scientific publishing multi perspective specification design implementation software components aspects john grundy department computer science university auckland private bag auckland new zealand submitted rd september revision th may accepted th august current approaches component systems engineering tend focus low level software component interface design implementation 
leads development components services hard understand combine assumptions components composed component documentation low level 
aspectoriented component engineering new methodology uses concept different system capabilities aspects categorise reason inter component provided required services 
supports identification description reasoning high level component functional non functional requirements grouped different systemic aspects refinement requirements design level software component service implementation aspects 
aspect information help implement better component interfaces encode knowledge component capabilities components developers users access 
describe illustrate aspect oriented component engineering techniques notations specify design implement software components report basic tool support experiences approach build complex component software systems 
keywords component development aspect oriented design requirements engineering software architectures software components software engineering environments 
software systems software development process complex developers require improved methods technologies 
component systems example offering potential better existing component reuse compositional systems development dynamic user re configuration applications 
component systems compose applications discrete reusable interrelated software components dynamically plugged running applications 
various software architectures implementation frameworks developed notion software components including com javabeans jviews 
various development tools methodologies developed support component software construction 
component development approaches traditional object oriented analysis design focus designing implementing components take vertical slices system functionality breaking systems services grouped data operations data 
component techniques focus identification interfaces supporting vertical slice functional decompositions encode low level information component interfaces run time 
development component design environments collaborative information systems approaches adequately help developers capture reason encode higher level component capabilities 
particular approaches poor respect addressing issues cross cutting component services horizontal slices systems 
component requirements analysis specification design implementation deployment difficult components reusable challenging deploy document 
overcome problems working new component development approach call aspect oriented component engineering 
focuses identifying various horizontal slices aspects system component contributes provides services services uses requires components 
aspects horizontal slices system typically affect components identified functional decomposition common system characteristics user interfaces persistency distribution collaborative 
component developers aspects describe different perspectives systemic component capabilities requirements engineering design 
aspects help guide component implementation particularly inter component interface development aspect information encoded component implementations run time 
aspect oriented programming approaches avoids concepts code weaving run time reflection mechanisms 
focus developing components cross cutting systemic issues carefully factored component interfaces components run time re configured dynamically composed 
motivates need gives examples aspects component requirements engineering design implementation 
overview concept component aspects component process management environment illustration 
describe aspect oriented component requirements engineering refinement component requirements codified aspects design level aspects 
implementation software components aspect information described various run time uses aspects 
tool support briefly discussed compare contrast approach component development methods architectures 
conclude overview current possible research directions 

aspects software components developed systems software components example serendipity ii software process management tool screen dump shown fig 
serendipity ii provides multiple graphical textual views software process models including stages event connections role assignments task resources 
enactment event histories shared lists facilitate tracking ordination 
fig shows software components serendipity ii 
domain specific stage icon base stage base flow quite generic editing history collaborative editing view rel reused diverse component applications 
component relationship link stage icon stage icon flow glue process view view comps editing history collaborative editing users 
view rel base stage base flow base stage repository base stages 
edit rename stage 
unique names send receive changes enactment history list persistency man view rel fig 
serendipity ii process management tool example components 
complex engineering issues arise developing systems serendipity ii developers need identify describe reason inter component relationships capabilities 
includes identifying describing services component requires provides 
developers unaware potential reuse situations component careful assumptions related components 
components need appropriately configured particular reuse situation developers may want reuse rd party commercial shelf cots components source code may access control components need provide appropriately adaptable user interfaces middleware capabilities configuration capabilities reused situations 
developers need able refine component requirements software component designs implementations ideally consistent metaphor characterising component capabilities inter component relationships 
information component capabilities configurations needs available users components run time facilitate plug play 
users require appropriate support finding reusing configuring components 
current component development methods select perspective tm catalysis tm adequately support high level description reasoning component capabilities focus decomposing systems vertical slices functionality group functions data domain specific categories 
developed concept component aspects allow better categorise component capabilities component contribution component system functions help organise non functional constraints particularly cross cutting components 
aspects horizontal slices system functionality non functional constraints include user interfaces collaborative facilities persistency distribution management security services 
key feature categorisation component characteristics idea components provide certain aspect related services components users components require certain aspect related services components 
user services services services collaborative services process stage event history process view event flow vertical slices objects components examples horizontal slices aspects perspectives software application fig 

general concepts components vs component aspects 
fig 
illustrates conceptual difference software components vertical slices system data functionality component aspects horizontal slices system functionality non functional constraints 
usually component system provides aspect related services components requires aspect related services components order function 
identifying aspect categorised services allows reason components various systemic perspectives cutting typical system vertical slicing software components 
component aspect perspective number aspect details precisely describe component characteristics relating aspect 
example requirements level typically want talk general notions data event sources event propagation receiving concurrency control relation distribution aspects component systems 
design level typically want talk particular implementation patterns observer technologies tcp ip sockets corba messaging systems 
examples aspects aspect details identified useful applications developed illustrated fig 

exhaustive list aspects appropriate different domains real time response transaction processing memory management 
aspect aspect details description user interface views affordances feedback extensible parts components supporting requiring user interfaces including extensible composable interfaces components collaboration sync 
editing versioning floor control group awareness messaging components supporting requiring collaborative users persistency store retrieve data locate data lock data components supporting requiring data persistency management facilities distribution object identification method invocation transactions event propagation concurrency control components supporting requiring distributed object management facilities security encoding model key distribution authentication access control components supporting requiring intercomponent models configure aspects property sheet wizard scripting components supporting requiring user dynamic configuration component editing history show collaborative editing process view display user interface aspects collaborative aspects persistency aspects fig 

general aspects illustration component aspects serendipity ii 
identified particular aspects aspect details carefully looking systemic cross cutting issues common components problem domains visual design tools collaborative information systems 
problem domains additional aspects necessary see 
example real time systems event response time memory management concurrency aspects safety critical systems redundancy high assurance aspects security critical systems various additional security related aspects 
developers need identify key cross cutting concerns application components develop suitable aspect details agree aspects aspect details sensibly exchange component knowledge 
reasoning provided required services components analyse terms particular aspect details component provides services relating requires services related components 
fig 
illustrates aspects map serendipity ii component services 
notion aspect capture information non functional constraints 
example developers may wish describe collaborative distribution aspects note performance constraints required network speed maximum data transfer transaction processing performance security robustness characteristics 
note aspect categorisations may overlap service considered aspect persistency related aspect collaborative editing component 
notion aspect tolerant potential overlapping concerns find useful characteristic 
concept component aspects component requirements engineering component design implementation component testing deployment 
aspects aim increase developers users knowledge components providing effective categorisation codification mechanism cross cutting component services 
begins component system requirements engineering aspects 
software component design refines component specifications choosing appropriate user interface middleware database technologies program design approaches patterns 
component implementation aspects produces deployable software components aspects guide interface implementation 
aspect information encoded components run time users developers components 
key difference conventional uses ooa component requirements designs may reasoned application perspective system requirements design individual component groups reusable components 
aspects characterise component capabilities allows relationship domain specific generic reusable components easily reasoned specified 
sections focus aspects component requirements engineering design implementation deployment compare approach component development methods technologies 

aspect oriented component requirements engineering aspect oriented component engineering begins analysing system requirements discrete components requirements 
typically candidate components ooa diagrams reverse engineering software components bottom consideration individual reusable components 
component identify desired component services non functional constraints aspects aspect details component provides services requires services components 
example consider event history component reused serendipity ii provide view editing processes stage enactment collaborative editing histories 
identified serendipity ii requirements bottom fashion commonly required design environment component 
event history functional requirements include event management add remove annotate history display manipulation multiple user sharing data persistency 
fig 
illustrates aspect oriented requirements event history component related components serendipity ii 
aspect details categorised provided prefix required prefix 
event history title string 
view extensible affordances viewer process stage event viewer replay received events generate events event data broadcasting locking protocol version control support event generation event replaying encode data event broadcasting synchronous locking version control support encode data store data retrieve data encode data extensible affordance encode data store data data pem info aspect info configuration tool aspect info visual component configuration support extensible affordance collaborative editing comp connect close 
version control component checkin checkout file storage component visual agent specification view extensible affordance replay received events event data broadcasting locking protocol store data data index data component attributes methods events provided detail required detail optionally required provides requires aggregate aspects fig 

visual representation serendipity ii components requirements level aspects 
required aspect details may optional component function satisfied services unavailable 
serendipity ii requirements indicate event history component provide user interface support collaborative viewing editing persistent allow configuration history behaviour 
indicate user interface affordances extensible components need identified serendipity ii requirements specification versioning component needs extend event history affordances 
identified collaborative infrastructure provided components enable reuse 
event history provides basic collaborative related facilities event editing annotation received events providing event listening export facilities requires support event data broadcasting environments versioning facilities data persistency components 
note aspect details kept quite general requirements level eventual implementation strategies facilities abstracted away 
requirements design level aspects reasoned groups aggregate aspects 
aggregate aspects useful identify specify reason groups interrelated components 
allow global system wide requirements captured constraining detailed aspects 
fig 
shows aggregate aspects event history collaborative file persistency components 
aspects aggregate constrained subset grouped components extensible affordance versioned history requires indexing 
developers choose show provided aspect details aggregate accessible components 
required aspect details satisfied aggregate may omitted components aggregate composed provide services ride provision aggregate 
provides requires relationships aspect details allow developers reason validity component configurations 
consider event history linked component providing event broadcasting data versioning 
configuration provide versioned event histories acceptable situations 
aspect detail additional information encoding functional nonfunctional characteristics 
aspect detail properties formally describe aspects inter aspect relationships 
textual specification language defines components aspects provided required aspect details detail properties values value constraints 
fig 
shows example codified aspect information event history collaborative editing components 
event history collaboration aspects provide event source services 
events propagated state changes event history generate include events aggregated components aggregate true events generated response events transitive true 
event history requires event exchange services provided example collaborative editing component 
history event serialisation services serialisation event source able propagate editing events second num second 
properties expressed single enumerated values value constraints values computed properties 
component event history aspect user interface provided aspect detail extensible menu bar extensible affordance properties order fixed extension aspect aspect collaboration provided aspect detail generate events event source properties generate aggregate true transitive true average event size provided aspect detail store events event sink properties store kind state change source self aggregates required aspect detail send receive events event exchange properties serialisation event source num second required aspect detail locking protocol synchronisation properties locking pessimistic exclusive required aspect detail version control versioning properties granularity event component aggregates aspect component component collaborative editing aspect collaboration requires generate events event source properties generate requires action events event sink properties synchronous true implies generate includes provides broadcast events event exchange properties serialisation event source num second event transporter 
bytes sec generate events average event size provides receive events event exchange properties provided event sink true provides synchronous locking synchronisation properties locking pessimistic exclusive requires event transporter event transporter aspect aspect user interface provides menu item affordance properties kind menu item requires extensible menu affordance properties kind menu aspect component fig 

textual codification serendipity ii aspect detail properties 

software component design aspects aspect oriented component requirements provide focused set functional nonfunctional constraints design refined 
refining object oriented analysis models object oriented designs requirements level components refined directly matching design level software components split merged revised 
similarly requirements level aspect details refined software component aspects categorise design level component services 
detailed design decisions user interfaces component persistency distribution collaboration facilities security transaction models component configuration facilities examples common design level refinements 
developers typically develop additional design level component specifications collaboration diagrams interface specifications customisation policies 
step refinement requirements level components design level software components 
developers may refine requirements level components user interface data processing parts allocate data functionality accordingly introduce various apis service objects support component implementation databases middleware user interface security 
may aggregate smaller components design implementations larger ones 
component systems design tries develop set interacting stand coarse grained components versus monolithic object oriented design objects 
level design level comps aspect details comps aspect details detail properties event history viewer affordance generate events event data broadcasting locking protocol version control system encode data 
event history viewer extensible affordance generate events event data broadcasting locking protocol version control system encode data classes methods events 
editable true kind frame extensible false kind button list functions 
generate 

transport socket protocol acquire release kind exclusive semaphore 
encode source remote true encoding text encrypted false classes 
table 
refinement component specifications software component designs 
example consider refinement serendipity ii specifications set component designs system 
want produce design group interacting components realises process management environment components may potentially reused plug play 
refine serendipity ii specifications similar way traditional ooa refinement split parts include user interface data processing division responsibility introduce service objects apis group form units functionality traditionally programs groups inter operating components model 
note component oriented design service object facilities apis provided software components see fig part serendipity ii design 
design level aspects refine implementation neutral requirements aspect details properties specify information relevant selected implementation strategies software components embody 
refining requirements level aspects design level developers specify aspect detail types aspect detail properties precisely component implementation design approaches 
developers reason implementation specific component properties design level aspects encourage implementation de coupled component interaction strategies 
example consider event history refinement implemented classes 
extra aspect detail properties introduced design level kind viewer provided viewer extensible event transport mechanism protocol speed required encoding mechanism version control storage 
aspect detail properties refer design level component services events methods properties interfaces example extensible affordance related functions events generated component sent facilitate collaborative editing locking acquire release interfaces function events required 
event history incorporates user interface data management persistency related capabilities 
requirements level process stage component hand refined distinct components stage icon repository stage 
framework architecture build serendipity ii distinction model view components connected reusable view relationship component 
stage icon refinement includes user interface aspects repository stage event processing data management data persistency aspects 
user interface dialogue view extensible buttons panel viewer event history list class 
event history viewer class collaborative editing support component version control component collaborative data events data stream listen events action events string annotation colour highlighting remote event sending receiving lock shared histories semaphore check check event list data persistency data stream data encoder stream provider provides dialogue view process view component 
event history component tcp ip socket stream communications component stage icon component repository stage component view relationship component file stream persistency component uses editing history uses stage enactment history uses collaborative editing uses uses file storage component uses component services component aspects provides requires components aspects tree viewer component fig 

design level components aspects serendipity ii 
fig 
shows event history interacts design level software components serendipity ii 
refined requirements components design uses synchronous asynchronous collaborative editing support component tcp ip socket event distribution component file version control component tree viewer 
reusable component applications 
domain specific serendipity ii process stage component refined data management repository stage view level stage icon components 
grouping management done repository view components 
example design level software components aspects way process view event histories implemented serendipity ii 
tends overlapping aspects design time requirements level terms component services aspects affect 
example event history design persistency event data encoding uses implementation collaborative event data encoding 
constraints encoding provided aspect detail changed binary format encrypted format related components provided detail corresponding implementing services may incompatible satisfy previously satisfied functional nonfunctional requirements encryption algorithm slows event transfer storage rates acceptable levels binary encoded data stored persistency component 
design level component aspects record services affect may record aspects concerns overlap allowing designers track inter perspective dependency links 

component implementation aspect oriented component designs realised implementation framework components 
example enterprise javabeans services map aspect characterisations reasonably 
encoding aspect information component implementations run time usage useful 
introspect aspect related services provide de coupled interaction facilitate enduser understanding components incorporate configuration validation 
jviews component validate aspect manager name string optional boolean provided boolean type string validate aspect detail user interface aspect detail distribution aspect detail collaboration aspect detail persistency aspect detail string string validate extensible detail aggregates boolean list class integer validate event generator detail retransmit boolean speed integer transport string unicast boolean connect disconnect validate event transport detail fig 

classes jviews framework 
extended component framework jviews incorporate aspect information 
jviews extension javabeans component framework adds powerful event model repository view components various reusable components building user interfaces middleware data management services 
added aspect codification objects aspect category managing various objects kind class having appropriate aspect detail properties 
illustrated fig 
jviews component classes inherit class includes functions access objects 
classes provide functions query retrieve modify objects 
class provides generic functionality identify name aspect detail component common property management annotation functions 
specialisations capture extra aspect detail properties provide aspect detail specific component querying manipulation functions 
developed specialisations collaborative support persistency security component configuration transaction processing characterisation 
example class userinterface aspect detail specialisation describes components extensible user interface affordances pull menu list buttons 
properties characterise kind extensible affordance extended functions carry extension 
components providing extensible affordances advertise object 
components requiring extensible affordance advertise functions discover capabilities provider component dynamically extend provider user interface controlled de coupled fashion 
various interfaces component may implement accessed functions 
example interface implemented component component discovers implements object 
second component access functions know extend component interface access providing component functions directly 
class characterises components provide require event generation capabilities 
provides properties characterise event generation functions establish remove subscribers events 
class describes distribution mechanisms events functions carry sending receiving events 
objects may include validation functions called run time check components correctly combined aspect details properties sufficient allow operate 
programmers may provide functions components implement aspect related services invoked directly possible try avoid minimise component coupling 
methods allow jviews components communicate generalised de coupled manner producing far reusable components 

run time aspects objects created needed components 
introspect component capabilities run time provide de coupled access point invoking functions component implement aspect related services re configure validate component 
fig 
shows examples object usage serendipity ii 
fig 
shows persistency management component needs add extra affordances event history user interface 
persistency management component accesses event history user interface manager obtain extensible affordance aspect detail object 
invokes function calls appropriate functions implemented event history returns new affordance objects 
serendipity ii persistency management component extends event history buttons list add export import buttons event history saving loading 
event history allowed menu bar extended add export import menu item affordances 
persistency component knows event history component interacts functions provided object 
fig 
shows collaborative editing component distribution aspect manager discover event generation subscription interface supported event history interface subscribe editing events 
collaborative editing component receives events sends user collaborative editing component event transport component illustrating transitively provided aspect detail 
received events sent event history 
persistency comp file aspect extensible history ui manager event transport history distribution aspects collab comp event gen event event event trans aspect event fig 

user interface extension event subscription service access objects 
user support accessing component aspect information provided tools query components information 
allows developers users high level categorised knowledge component capabilities 
information component capabilities usable indexing locating components repository 
fig 
shows simple example user aspect information serendipity ii 
user building simple process notification agent reusing connecting component representations visual agent specification tool 
user view component aspect information request validation functions associated aspects aspect details run check current component configuration sensible meets encoded aspect constraints 
example shown user locating reusing collaborative editing component component repository 
query requested component provided collaborative aspect event broadcasting aspect detail 
aspect categorisations aspect detail information user agent specification tool validation dialogue aspect detail properties aspects aspect details query aspect details property value constraints property value specification retrieved components fig 

user access aspect information left component retrieval aspects right 

development tool support support aspect oriented component engineering methodology extended case tool jviews called jcomposer support component aspects requirements engineering software component design component implementation 
jcomposer provides multiple views component software systems jviews adl 
supports collaborative editing views includes sophisticated inconsistency management support 
added additional constructs jcomposer allow developers describe component aspects aspect details detail properties inter component aspect relationships 
requirements level aspects design level aspects represented jcomposer linked simple refinement relationships 
checks run ensure provided required aspect details related components consistent 
jcomposer supports generation jviews component implementations extended tool support generation class creation 
currently basic support provided specifying component interfaces design patterns conjunction aspect specifications 

discussion current object oriented component oriented development methods uml tm select perspective tm como enterprise scale cbd catalysis tm tend primarily focus functional decomposition requirements objects components 
design level focus exclusively detailed component interface design service implementation 
originally developed serendipity ii component systems kind approach finding problems approaches researchers practitioners identified 
main problem tendency produce components capabilities interfaces insufficiently adaptable 
problems include lack suitable notations express component oriented requirements designs lack requirements design processes abstractions current component implementation technologies difficulties developers users understanding components 
important systems users need extend environment 
general framework capture reason component requirements standardise interfaces hard get third party components interact 
approaches take account diverse component interface requirements system wide properties focus low level component interface characteristics 
extensions uml express components include catalysis enterprise cbd como 
lack adequate structured characterisation components particularly provided required interfaces non functional properties 
contrast component aspects provide framework multi perspective specification assisting developers codify systemic characteristics assist development highly reusable dynamically reconfigurable components 
need reusable components trusted perform appropriate ways diverse situations apparent aspects detailed property specifications run time validation address 
current component technologies java beans corba idl com support tools visual javascript focus low level component capabilities 
advertising component capabilities classes idl interfaces type libraries lend capturing high level knowledge component capabilities 
adversely affects components users ability understand appropriately component facilities 
higher level aspect information greatly assists users understand reused component functionality 
enterprise javabeans containers provide similar capability jviews framework level aspects abstracting detailed systemic service provision components 
restrict components containment model order achieve component interaction dynamic reconfiguration flexible equally powerful 
major aim component systems support user configuration software 
various component systems support agent workflow adaptive user interface user computing systems 
systems need third party agents communicate knowledge focusing domain specific data functions limiting sharing systemic user interface collaboration distribution mechanisms 
component configuration tools utilise visual drag drop metaphors iconic component interconnection scripting languages 
require users aware component capabilities correct configurations tools component architectures adequately capture information 
aspects give users higher level view component capabilities inter component relationships provided required services 
various techniques capture knowledge components including ibrow cdm 
ibrow uses multiple ontologies describe problem solver components components task domain model levels 
task process solving method domain descriptions 
go somewhat aspects addressing task problem solving issues address kinds cross cutting functional non functional specifications component aspects 
cdm hierarchical categorisation vertically grouping components component purpose limited cross cutting systemic component characteristics 
aspects index support retrieval components aspects form better ontology querying components 
aspect oriented programming aop adaptive programming popular approaches handling cross cutting concerns objectbased systems 
knowledge aspects haven directly applied software component implementation aside 
aop uses notion systemic aspects system weave code managing data persistency object distribution aspects codified independently program classes 
key difference aop concept components providing services systemic aspects requiring services components 
interfaces designed avoid aop style code weaving source code may available third party commercial shelf cots components run time reconfiguration component systems necessitates components able dynamically change interactions components aspect services 
reflective techniques avoid compile time weaving cost expensive performance overheads currently lack design abstractions 
design level approaches codifying aspects developed typically adopt standardised uml style notations textually annotated 
approaches adaptive components hyperslices isolate cross cutting concerns facilitate de coupled component interaction 
implementation strategies compatible extended jviews components addressed wider range aspects aspect details aspect oriented component requirements design approaches provide higher level abstractions 
aspect oriented component engineering successfully reengineer range software components component systems including serendipity ii jcomposer develop new reusable components persistency management collaborative support component distribution 
re engineering serendipity ii jviews components aspects produced significantly better characterised component requirements easily reused reconfigured components 
main advantages aspect oriented component engineering provides include extra richness multiple perspectives components better structuring component requirements designs encouraging implementation better dynamic configuration de coupled component interaction run time access detailed component knowledge 
aspect perspectives give developers set alternative richer viewpoints component capabilities allow developers document components completely 
design implementation aspects encourage flexible coupling dynamic configuration dynamic deployment strategies 
aspect codification provides far powerful introspection generic coupling mechanism components indexed aspects aspect information users 
component aspects introduce added complexity requiring developers think components various perspectives specify provided required aspect details reason component interaction perspective 
trade extra effort benefits 
experience indicates complex systems single components systemic aspects worth extra effort enhanced reusability reconfigurability understandability extra specification reasoning effort 
problems identifying suitable aspects choosing incomplete aspects lack aspect support current tools may mean technique effective 
extending set component aspects aspect details particularly aspect detail properties property constraints allowing formal reasoning inter component relationships improved indexing retrieval 
extending jviews tools support formal specification checking include better support aggregate aspect representation 
improving jcomposer aspect generation capabilities wider range uml modelling diagrams aspect extensions 
codify aspects way generate different component implementations investigated 
user studies requirements design techniques progress simplified extensions uml 

summary key challenges building complex component systems include engineering requirements individual groups reusable components refinement requirements software component designs correct composition components compile run time run time access component capabilities 
aspect oriented component engineering addresses providing new framework describing reasoning component capabilities multiple perspectives 
requirements engineering aspects provides improved documenting reasoning component functional non functional requirements 
requirements naturally refined design level aspects categorise design decisions component services aid developers choosing generic inter component relationship implementations 
aspect information component implementations allows developers users components access high level knowledge component capabilities perform basic configuration validity checks 
decoupled component interaction enhances component reusability configurability 
tool support aspect oriented component engineering includes requirements implementation component aspects jcomposer case tool providing runtime access component aspect information aspect component repository 
experiences aspect oriented component engineering generally positive number promising research directions exist 
acknowledgments support parts research new zealand public science fund helpful comments anonymous reviewers gratefully acknowledged 

allen frost component development enterprise systems apply select perspective tm sigs books cambridge university press 

brown current state component software development ieee software sept oct pp 


szyperski component software oo programming addison wesley 

brown engineering component systems proc 
nd int 
conf 
engineering complex computer systems montreal canada oct 

neil java beans programming ground osborne mcgrawhill 

sessions com dcom microsoft vision distributed objects wiley 

grundy mugridge hosking static dynamic visualisation component software architectures proc 
th int 
conf 
software engineering knowledge engineering san francisco june ksi press 

brown barn enterprise scale cbd building complex computer systems components proc 
th int 
workshop software technology engineering practice pittsburgh august september usa ieee cs press 

dellarocas synthesis environment component software development proc 
th int 
workshop software technology engineering practice london uk july ieee cs press 

fowler uml distilled addison wesley 

netscape communications visual javascript tm www netscape com 

wagner ackerman black box reuse frameworks visual programming 
st component users conf munich july sigs books 

kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming proc 
european conf 
object oriented programming finland june springer verlag lncs 

mezini lieberherr adaptive plug play components evolutionary software development proc 
oopsla vancouver wa october acm press pp 


tarr ossher harrison sutton jr degrees separation multidimensional separation concerns proc 
int 
conf 
software engineering los angeles may ieee cs press 

grundy aspect oriented requirements engineering component software systems proc 
th ieee int 
symp 
requirements engineering ireland june ieee cs press 

rakotonirainy bond simple architecture description model proc 
tools pacific melbourne australia nov ieee cs press 

grundy mugridge hosking apperley tool integration collaborative user interaction issues component software architectures proc 
tools pacific melbourne australia november ieee cs press 

grundy hosking mugridge apperley architecture decentralised process modelling enactment ieee internet computing september october ieee cs press 

aspect oriented design xml schema groves proc 
th int 
conf 
parallel distributed processing techniques applications las june csrea press 

kiczales lopes developments aspectj proc 
ecoop workshop aspect oriented programming brussels belgium july 

pryor java meta level architecture dynamic handling aspects proc 
th int 
conf 
parallel distributed processing techniques applications las june csrea press 

grundy hosking mugridge constructing component software engineering environments issues experiences information software technology january elsevier 

souza wills objects components frameworks uml catalysis approach addison wesley 

lee yang cho kim como uml component development methodology proc 
sixth asia pacific software engineering conf japan dec ieee cs press pp 


grundy storage retrieval software components aspects proc 
australasian computer science conference canberra australia jan feb ieee cs press pp 

meling montgomery wong storing retrieving software components component description manager proc 
australian software engineering conf canberra australia april pp 


szyperski establishing system wide properties component systems case tiered component frameworks proc 
omg darpa workshop compositional software architecture monterey california jan 

meyer schmidt providing trusted components industry ieee computer may pp 


inside corba addison wesley 

enterprise javabeans reilly 

finin labrou mayfield kqml agent communication language software agents mit press 

adding process support unix nd int 
conf 
software process germany feb ieee cs press pp 


oppermann thomas adaptive adaptable systems 
ed computers assistants new generation support systems 
hillsdale lawrence erlbaum associates 

huff factors successes user computing communications acm 

motta fensel benjamins specifications knowledge components reuse proc 
th int 
conf 
software engineering knowledge engineering kaiserslautern germany june ksi press pp 


hong object oriented component description language proc 
th conf 
technology object oriented languages september ieee cs press pp 


reuse methodology kbs components library proc 
th int 
conf 
software engineering knowledge engineering kaiserslautern germany june ksi press pp 


mezini lieberherr component integration pluggable composite adapters 
software architectures component technology aksit ed kluwer 

weaving aspects proc 
ecoop workshop aspect oriented programming lisbon portugal june 

welch load time application aspects cots proc 
ecoop workshop aspect oriented programming lisbon portugal june 

ho plouzeau aspect oriented design uml proc 
icse workshop multi dimensional separation concerns software engineering limerick ireland june 
