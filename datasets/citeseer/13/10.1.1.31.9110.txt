ki ge realistic logic robot controllers golog framework years substantial progress building mobile robots navigate safely populated areas office environments museums fairly robust solutions low level tasks obstacle avoidance self localization possible seriously think high level control issues telling robot 
feel high level robot control language expressive account realistic domains natural way support automated reasoning task hand particular ability project outcome plan program 
important integral part intelligent behavior rationally choosing different courses actions pragmatic reasons 
note projecting plan thought qualitative simulation world evolves actions executing quite helpful debugging purposes 
especially true plans concurrent actions arise naturally robotics applications 
simulations general faster running tests robot 
number proposals high level control languages rpl rap go log 
rpl golog allow plan projection 
rpl projection mechanism called problematic projections rely rpl runtime system lacks formal semantics predictions implementation dependent 
hand projections golog situation calculus perspicuous declarative semantics 
contrast languages rpl golog far expressive realistic robot domains successful experiments golog control real museum tour guide robot notwithstanding 
extensions golog adding concurrency time go far 
things missing henrik gerhard lakemeyer high level robot control languages expressive realistic domains support actions particular tion robot plans useful robot choosing different courses action designer robot controllers projections allow qualitative simula tions 
golog language situation calculus specifically proposed purpose 
comes equipped powerful tion mechanism lacks 
particular deal continuous change event driven behavior probabilistic effec ts actions important domain mobile 
show issues dealt golog framework proposing appropriate extensions language 
terms pr plan inter mcdermott takes plans programs execution reasoned agent executes program 
nstliche intelligenz www intelligenz de issn verlag bremen fon fax 
golog world changes discrete fashion 
context mobile robots changes best thought continuous 
example moving robot changes position continuously 
holds battery level passage time 
may possible approximate changes discrete approximations unnatural adds considerable complexity reasoning involved 

current temporal extension golog user explicitly supply time execution action 
specifying robot task rarely appropriate infeasible especially context concurrency 
example suppose ant tell deliver today mail offices pass near henrik room say hello battery level drops dangerously low interrupt currently doing recharge batteries 
notice say explicitly action taken 
actions initiated conditioned certain events happening passing certain office reaching low battery level 
call event driven behavior 

lastly actions golog determinate effects uncertainty action achieves desired results 
practice uncertainty ubiquitous large part due shortcomings today robots 
consider example pickup action 
certain characteristic gripper object lifted may want say action succeeds time fails simplest form may amount having effect 
sketch shortcomings golog overcome shortening gap expressiveness non logic logic robot control languages 
introduce extensions golog called cc 
cc golog concerned continuous change event driven behavior tackles issue actions uncertain outcome 
ki ge rest organized follows 
section give brief situation calculus basic foundation golog extensions 
take cc golog turn briefly discuss experimental results 
tries remain largely informal focussing intuitions various extensions golog details 
inter technical details referred 
situation calculus increasingly popular language representing reasoning effects actions situation calculus 
go language briefly terms language sort ordinary objects actions situations reals 
special constant denote initial situation situation actions occurred distinguished binary function symbol denotes successor situation resulting performing action relations functions truth values ary situation situa tion called fluents denoted predicate function symbols situa tion term argument special pr poss state tha action executable situation language formulate theories describe world changes result available actions 
possibility basic action theory form axioms describing initial situation :10.1.1.51.3134
action precondition axioms primitive action characterizing poss successor state axioms fluent stating conditions holds function holds situation take place called effect axioms provide solution frame problem 
simple example successor state axiom fluent broken poss broken drop fragile broken repair words provided action possible objec en doing just case drop action fragile broken repair action 
domain closure unique names axioms primitive actions unique names axioms situations 
continuous change time order model continuous processes robot movement hallway adding continuous change time directly ontology situation calculus 
shown adding time easy 
simply add new sort time ranging reals order connec situations time special unary functional fluent start understanding start denotes time situation reals normally par situation calculus need represent time continuous change probabilities 
simplicity reals assume standard inter usual operations ordering relations 
begins 
see start obtains values particular passage time modeled 
fundamental assumption situation calculus fluents fixed value situation 
order see assumption allows model continuous change consider example mobile robot moving straight line dimensional world robot location time simply real number 
types actions robot perform startgo initiates moving robot speed endgo stops movement rob ot 
denote robot location fluent robotloc 
value robotloc executing star situa tion 
certainly fixed real value position change time long robot moves 
fact location robot time star robot changes velocity characterized somewhat idealized fashion function starting position starting time 
solution take func tion time value robotloc 
call functional fluents values continuous functions continuous fluents 
idea continuous fluents new investigated various ways 
essentially follow pinto illustrate basic principles way example 
dimensional robot introduce kinds func tions time functions denoted constant special linear functions introduced linear 
order specify values functions take particular time axioms val constant val linear 
considering functions time allow specify successor state axiom robotloc turn issue modeling passage time course actions 
motivated treatment time robot control languages rpl rap introduce new type primitive action waitfor 
intuition follows 
normally action happens immediately starting time situation doing starting time exception waitfor action occurs starting time resulting situation advanced earliest time true 
assumed formula involving functions time situation argument suppressed robotloc situation time expression evaluated replacing robotloc val robotloc note choosing ear time true effect actions happen soon possible 
may object requiring actions waitfor happen time unrealistic 
robotics applications actions involve little sending messages order initiate terminate processes actual duration actions negligible 
action happen time separated explicitly waitfor 
free variables assumed implicitly universally quantified 
note may time point true example case robotloc 
deal problem requiring waitfor action possible time oint exists leave user car appropriate nstliche intelligenz heft www intelligenz de issn ver lag bremen fon fax ki ge idea time advancing waitfor specify fluent start changes value action occurs starting time situation changes result waitfor case advances earliest time holds 
easily expressed form successor state axiom start omit 
consider successor state axiom continuous fluent robotloc poss robotloc val robotloc start startgo linear endgo constant robotloc startgo endgo words action performed robotloc assigned function linear robot starts moving velocity location robot situation assigned constant robot stops remains illustrate derived extended situation calculus assume robot initially rests position robotloc constant 
assume robot starts moving speed cm waits reaches location cm point stops 
resulting situation endgo waitfor robotloc startgo 
assuming appropriate axiomatization extended situa tion calculus possible show start robotloc constant follows axioms 
words robot moves seconds stops location expect 
cc golog cc golog derivative concurrent version golog formalism specifying complex actions mapped sequences atomic actions assuming description initial state world action precondition axioms successor state axioms fluent 
complex pr defined control struc tures familiar conventional programming language sequence recursive procedures 
addition parallel actions introduced conventional interleaving semantics 
waitfor primitive action 
test action seq sequence conditional loop prioritized execution ends concurrent exec 
si ends conditioned execution proc procedure definition space limitation formal semantics cc golog detail 
sketch intuition details 
essential difference cc golog ordinary programming languages cc golog semantics defined specifying machine instruction performed interpreter sequence atomic situation calculus actions cc golog plan mapped 
nstliche intelligenz www intelligenz de issn verlag bremen fon fax consequence primitive instruc tions cc golog consist atomic situation calculus actions golog 
note waitfor just atomic action effect time advance 
atomic actions class primitive cc golog instructions tests form 
stands situation calculus formula example iso pen door 
intuition 
block false continue execution 
note fundamental difference conventional programming languages golog golog interpreter able reason state world state door 
reasoning performed regression special form deductive inference quite efficient initial description world restricted collection literals 
means control structures complex programs composed 
semantics seq correspond intuitive meaning 
programs executed concurrently 
intuitively starts executing parallel execution stops soon 
idea low priority plan executed interrupted program called policy able execute 
execution construct ends soon ends 
possible interleavings resulting concurrent execution programs ultimately constrained actions executed earlier preferred 
waitfor executed concurrent branch actual program execute earlier action restoring original idea actions happen early possible 
primitive instruction macro defined terms instructions 
intended meaning executes long true gets blocked false continues execution true 
policies offer natural way realize event driven behavior especially example illustrates waitfor instructions 
turn back introductory example robot deliver mail offices say hello passes near henrik room interrupt actual course action battery level drops volt recharge batteries 
task specified cc golog plan loop shorthand true 
loop waitfor seq loop waitfor seq say hello waitfor wheels deliv program outermost waiting battery level drops 
atomic action effect set fluent wheels false immediately executed 
effect execution program blocked 
complete execution wheels gets released tha may resume execution driving battery docking station robot passes door say hello 
go details ail note order move robot continuously various goal locations startgo waitfor actions 
startgo dimensional variant action startgo vel discussed section continuous change additional effect continuously reduc 
ki ge example illustrates new action waitfor notion concurrent prioritized execution policies turns helpful comes specifying robust robot plans 
mentioned earlier concept instruction effect wait condition true common special non logic robot programming languages rpl rap true concepts concurrency priorities 
believe due fact real robot applications typical execute task mail delivery example time monitor react continuously changing properties domain voltage level robot batteries 
important feature policy block execution primary task instruction 
example battery monitoring policy able wait continuous condition blocking nonblocking mode block primary task waiting battery level falls volt block primary task guides robot battery loading station waits battery level climbs back reasonable level 
probabilistic projection important feature real robot environments inherent uncertainty world outcome robot actions due fact robot software imperfect error prone 
example robot tries pickup cup different outcomes possible robot may completely cup cup may drop floor robot may push adjacent objects break cup adjacent object 
reasons robot actions best thought low level processes uncertain probabilistic outcome 
want model example pick succeed perfectly time possible outcomes lower probability 
convenient describe pickup action complex process opposed primitive situation calculus action 
pickup action atomic 
may cup held additionally break adjacent object exists 
adopt point view robot actions better seen complex low level processes high level robot plan seen description task combines low level processes appropriate way 
order evaluate choose appropriate high level robot plan wish project effects execution plan 
need explicitly model behavior processes 
outcomes probabilistic nature arrive notion probabilistic projection 
attack problem model low level processes means procedures probabilistic action language call 
nutshell deterministic golog augmented new instruc tion prob allows express program executed certain probability 
intuitively execution prob results execution resp 
probability resp 
faithful characterization lowlevel processes terms procedures project effect activation processes gloss technical details discussed 
corresponding models 
soon discuss differences probabilistic non probabilistic projections illustrate example low level pickup process specified program 
proc pickup cup prob cup seq cup drop cup obj obj cup fragile obj prob nil program models probability pickup process result pickup cup 
lose cup lifting probability additionally break fragile adjacent object exists note total probability 
typical scenarios unc initial situation 
take account opt probabilistic characterization agent epistemic state 
specifically characterize epistemic state set situations considered possible likelihood assigned different possibilities 
follow binary functional fluent read situation agent thinks possible probability likelihoods nonnegative situa tions considered impossible likelihood 
keep things simple additionally require situations considered possible sum 
come back task probabilistic projection 
non probabilistic case discussed generation projection plan doesn mean longer single unique execution scenario execution trace plan generated 
execution plan result different execution traces activation low level processes may result different outcomes 
goal assess degree belief sentences goal cup broken cup execution plan 
possible execution traces considered 
determine probability sentence holds execution plan determine possible execution trace plan activated low level processes wrt initial situation considered possible 
bel belief holds af ter execution plan situation defined probability execution traces wrt low level processes fulfill replaced star ting possible initial configuration 
execution traces additionally weighted agent belief 
summarizing real execution actual low level processes get executed task projection model low level processes means probabilistic programs 
stress point view system low level processes treated atomic events activation process 
procedures serve models effects low level processes needed projections plan 
execution system execute procedures incomplete uncertain information value fluents appearing program 
example robot just may know nearby object fragile 
way execution sy stem example directly break cup 
pr property framework easily amenable monte carlo methods estimation success pr program 
nutshell monte carlo simulation achieved pursuing bran nstliche intelligenz heft www intelligenz de issn ver lag bremen fon fax ki ge ches prob instruction depending outcome random number toss 
appealing prop erty monte car lo methods number samples considered depends desired precision estimate length program affected explosion number possible traces 
experimental results formal definition cc golog requires second order logic easy implement prolog interpreter cc golog just case original congolog 
order deal constraints implied waitfor instruction ecrc common logic programming system eclipse built constrain solver library implement cc golog inter similar reiter 
interpreter generate projections cc golog plans example mail deliv ery plan 
compar ed earlier pr rpl programs system results cc golog ar appealing cc golog implementation firmly logic specification relies procedural semantics rpl interpreter 
furthermore cc golog appears faster projection example plan took seconds cc golog resp 
seconds machine 
believe cc golog owes somewhat surprising advantage fact lends simple implementation little overhead relies complex rpl interpreter involving lines lisp code 
results provided implementation similar 
compared implementation buridan classical probabilistic planner bomb toilet slippery gripper scenarios 
approach able compete buridan outperformed order magnitude machine 
shown shortcomings golog overcome aim golog realistic high level robot controllers 
cc golog demonstrated deal continuous change time 
key feature new primitive instruction allows model event en behavior 
showed incorporate actions probabilistic effects golog framework defined notion probabilistic projection 
issue left open incorporate extensions coherent language 
hope report experiments new language high level controllers mobile robot realistic domains 
related golog group involved diagnosing repairing execution failures 
underway connec golog con real time speech interface 
bacchus levesque 
rea noisy sensors effec tors situation calculus 
artificial 
beetz 
models mobile service robot 
aips 
burgard cremers fox lake meyer schulz steiner thrun 
exper inter active museum tour guide robot 
artificial intelligence 
nstliche intelligenz www intelligenz de issn verlag bremen fon fax de giacomo lesp erance levesque 
reasoning ab concurrent execution pr inter actions situation 
ijcai 

robust real time aut robot speech 
master thesis department computer science rwth aachen 
progress german 
firby 
investigation planning complex domains 
proc 
aaai 
galton 
critical examination theory ac tion time 
artificial intelligence 
lesperance levesque 
congolog concurrent program ming language situa tion calculus foundations technical report university toronto www cs toronto edu 
lakemeyer 
cc golog ds realistic logic robot controllers 
aaai 
lakemeyer 
turning high level plans robot programs uncertain domains 
ecai 

explaining went wrong dynamic domains 
rd annual german conference artificial intelligence ki post er presentation 
konolige 
language tive control 
ki volume lnai 
kortenkamp bonasso murphy 
ai mobile robots case studies successful rob ot sys tems 
mit press 
kushmerick hanks weld 
gorithm probabilistic planning 
artificial intelligence 
levesque reiter lin scherl 
logic programming language dynamic domains 
journal logic programming 
lin reiter :10.1.1.51.3134
state constraints revisited 
journal logic computation 
mccarthy 
situa tions actions causal laws 
technical rep ort stanford university 
reprinted semantic inf processing ed mit press 

robot planning 
ai magazine 
mcdermott 
algorithm prob totally ordered temporal projection 
research rep ort yaleu dcs rr yale university www cs ale edu ai planning html 
miller 
ase study reasoning actions continuous change 
ecai 
pinto 
integrating discr ete continuous change lo framework 
computational int 
reiter 
fr ame problem situation cal simple solution result goal regression 
artificial intelligence mathematic theory papers honor john mccarthy 
reiter 
natural ac tions continuous time situation 
proc 
kr 
reiter 
sequential temp oral golog 
proc 
kr 
sandewall 
logic tial equa tions describing real world systems 
kr 
shanahan 
representing continuous change event calculus 
ecai 
contact computer aachen university technology aachen germany gerhard cs rwth aachen de henrik informatik den universit und bonn 
ist er im informatik und technik der rwth aachen 
ger hard received ph university toronto currently asso professor head systems group aachen university technology 
served programme committee numerous international confer enc es member edit board journal artificial intelligence research 

