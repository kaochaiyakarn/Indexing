functional programming graphs martin erwig hagen praktische informatik iv hagen germany erwig hagen de graph algorithms expressed functional languages suffer inherited imperative state style 
particular impedes formal program manipulation 
show model persistent graphs functional languages graph constructors 
provides decompositional view graphs close data types leads functional formulation graph algorithms 
graph constructors enable definition general fold operations graphs 
promotion theorem folds allows program fusion elimination intermediate results 
fusion restricted elimination tree structures prove theorem facilitates elimination intermediate graphs 
describe ml implementation persistent graphs efficiently supports fold operators 
example depth search expressed fold functional graph complexity corresponding imperative algorithm 
traditionally graph algorithms formulated imperative manner example depth search nodes marked visited prevent repetitive traversal 
imperative style carried implementing graph algorithms functional languages example set visited nodes threaded successive function calls 
strategy keep programs free imperative updates state imperative algorithm just functional disguise 
order find program transformations unfold fold approach bird meertens formalism integration truly functional style needed 
follow richard bird concluded remain functional formalism need reformulate standard algorithms 
treatment graphs functional languages addressed quite different ways nd acm sigplan conference functional programming amsterdam pp 

accepted standard 
believe reason situation integration suffers inherited imperative style 
seen contrast tree structures directly represented data types uniformly different functional languages notions data type constructor pattern pattern matching known modern functional languages 
research generalized fold operations called catamorphisms things produced far reaching opportunities program transformations 
particular fusion multi pass algorithms profitable optimization technique :10.1.1.30.9032
challenging reach comparable status graphs graph algorithms 
point object graphs application specific structures programming language concept implemented means language features 
true important uniform comprehension graphs corresponding programming style facilitate program transformation optimization known data types 
suggests de compositional view graphs close data types 
gives new flavor defining graph algorithms clears way defining general fold operations graphs 
show define graph algorithms terms graph folds facilitates program transformations optimizations 
integration proposed concept functional language requires backbone implementation functional persistent graphs 
implemented functional graphs graph folds ml providing efficient implementations graph operations depthfirst search 
ways achieve integration language extension 
allows optimizations described section compiler provides convenient way pattern matching section user 
hand reasonable expect compiler provide different graph representation needed efficiently deal graphs specific situations 
second providing graph library 
approach easier provide extend different graph implementations 
follow approach promising convenient presentation examples assume having pattern matching capability available 
generality efficiency clearness reasoning treatment graphs functional languages 
related state graph algorithms simulated functional arrays threaded function calls 
shown directly transfer classical algorithms lazy functional language particular functional languages design algorithms 
contrast algorithms described fixed points recursive equations essentially relies lazy evaluation 
functional algorithms quite complex difficult comprehend 
approaches achieve asymptotic runtime imperative algorithms 
identified classes graph algorithms introduced corresponding predefined operators 
graph algorithm realized simply providing operator parameter functions data structures 
believe approach reflects structure graph algorithms 
previous approaches potential formal program manipulation 
operator approach lacks generality 
proposal focus generated data structure depth spanning forest underlying graph algorithm 
facilitates formal reasoning particular formal development algorithms depth search dfs possible 
launchbury shows phase fusion applied eliminate intermediate results algorithms 
dfs function realized nicely generate prune manner 
monads implement state maintained dfs vertices visited achieve linear running time 
point approach stuck imperative programming style 
encapsulated restricted single point comes process program fusion transformations quite complex functions moved state transformers 
approach applies just dfs 
fegaras sheard investigate generalization fold operations data types embedded functions 
motivating example show model graphs 
approach somewhat limited clear define example function reversing edges graph lacks efficiency direct access node requires general traversal graph 
related gibbons considers definition graph fold operations algebraic framework 
deals acyclic graphs implementation discussed approach currently usable 
summary preceding comparison shown 
section define graph constructors show building directed graphs 
section describe special kind pattern matching graphs 
section presents fold operations 
theorems section demonstrate optimization graph algorithms simple program transformations 
implementation described section follow section 
model directed graphs propose de compositional view graphs style algebraic data types languages ml haskell graph empty constructed graph new node edges successors edges predecessors leading view closely related adjacency representation graphs 
main difference data types predecessors mentioned explicitly 
ideas terms ml translation languages difficult 
graph constructors quite different kinds graphs impossible capture aspects single type 
focus directed node labeled multigraphs 
hand includes non trivial aspects multiple edges nodes hand leaves details example edge labels examples longer difficult read 
adaption graphs types straightforward 
constructive view graphs suggests constructors empty graph context graph 
graph type parameter gives type node labels 
distinguishing nodes node labels necessary different nodes may label see 
example shows need multiple edges nodes 
context node node label lists predecessors component successors component type context node list node node list requirements type node signature 
particular create node values build graph 
done gen function generates requested number different nodes 
sig node val gen int 
node list val new node list 
node subsequent examples nodes val gen 
function new creates node contained list nodes 
function useful extending graph construction history known need node value contained graph 
apply new extract nodes graph 
done function nodes val nodes graph 
node list example construct cycle nodes extend node edge node cycle 
val cyc empty val nodes cyc new hd cyc dag expression graph expression shown 
omega omega datatype int expr con int op int int 
int val op op con op op con empty dag graph expression 
semantics graph constructors graph type ff consists set nodes multiset bag edges theta total mapping ff defining node labels 
representing edges graph bag node pairs accounts multiple edges nodes 
semantics graph constructors respect graph model inference rules definition standard ml see assertion ae says expression evaluates environment ae value simplicity assume having bags semantic values denote bag writing sequence elements hx xn short disregarding order elements 
union bags written concatenation lists delta rules describe exceptional situations trying add context existing node results node exception 
likewise trying add edge non existing nodes raises edge exception 
note adding tuple edge bag graph means successor predecessor 
difficult define functions adding single node predecessors successors single edge nodes known contained graph fun fun build graph inserting nodes inserting edges 
know theorem completeness node labeled multi graph represented graph expression 
pattern matching graphs regarding free term algebra generated empty pattern matching data types 
example define function gmap mapping function node labels graph fun gmap empty empty gmap gmap semantics graphs suggests distinct graphs regarded equal 
particular function definitions convenient kind pattern matching abstracts away order node edge insertions 
consider example functions suc del selecting successors node graph respectively deleting function definitions get remarkably simple node inserted simply return respectively result 
immediate corollary theorem reorganize obtain term graph find term graph specific node incident edges removed obtained inserting incident edges 
miranda laws views mechanism proposed wadler allow pattern matching non free algebraic data types mapping data type terms canonical representations 
purposes mapping canonical representation need select specific representation equivalent pattern certain node inserted 
ae empty hi ae ae pn ae ae ae sm fp fvg fs fvg ae fvg delta pn sm ae ae ae node ae ae pn ae ae sm fp fs fvg ae edge semantics graph constructors 
graph semantics easily define pattern language primitive 
write environment mapping variables xn values vn fx 
xn 
vng assertion ae ae says pattern matched value environment ae results binding variable environment ae 
delta sn pm 
ae ae fs 
sn 
pm 

gamma fvg rule says unbound variables pattern bound corresponding values context 
special semantic object fail returned 
fail value purpose direct pattern matching case 
case returns fail match exception raised 
notation rule assumes chosen maximally edges incident selected 
writing successors preceding predecessors edge list matches self loops successor matching pattern expression empty binds node list placed predecessor list 
think binding lists contradict intuition rule 
denotes identity graphs 
see consider application graph consisting just node edge 
bound result expression add self loops example consider matching expression 
get op define suc del fun suc fun del described pattern matching process computes bindings performs implicit reorganization matched value call active pattern 
note possible laws views computation guided external values outside pattern similar feature described patterns haskell 
active patterns restricted graphs interesting language concept right subtleties reader noticed non linear patterns details see 
require language extension replace function definition fun predefined operation context computing node context fun val context translation active patterns general case function rule 
sequel keep active pattern syntactic convenience 
graph folding data types fold operation canonical form reducing graphs done quite different ways 
unordered fold approach define graph folding strong analogy data types binary function context 
unordered fold defined fun empty note active pattern 
employ implement basic functions reversing edges function gmap testing node membership val grev fn empty fun gmap fn empty fun fn orelse false scope somewhat limited 
mainly control order graph decomposition high importance graph algorithms indicated name depth breadth best 
linear graph fold folding data type value moves forward current constructor node contained values successors 
contrast graph constructor provides access node predecessors 
determine fold direction fold operator 
parameter function computing node context list nodes accessed folded 
functions sequel direct fold successors respectively predecessors fun fwd fun fold operates node steps fold recursively applied list nodes computed context yielding list results 
general length varying results accumulated way 
achieved parameter function list folded yielding value parameter function applied lab label parameter linearity nodes node value computation multiple times reached example different predecessors 
consider option matched node context proceed just graph forgetting bit dangerous tried matched coming different predecessor causing match exception 
aware fact recover exceptions giving meaningful defaults 
fact done definition gfold 
define functions performing fold just node respectively list nodes 
fun gfold lab val gfoldn lab gfoldn gfoldn val gfold val gfoldn handle match 
gfoldn addition accumulated value functions result reduced graph 
performing successive fold calls reduced graphs essentially ensures nodes visited 
sense graphs passed represent progressive consumption nodes original graph 
exception handling gfoldn captures case node passed gfoldn consumed recursive call gfold time processed causes match exception gfold 
case gfoldn simply takes node list 
programming exceptions note essential 
alternatively execute second rhs gfoldn true call gfoldn 
gfold performs gfoldn drops graph result fun gfold gfoldn essence gfold fwd performs depth search graphs 
demonstrated graph problems easily solved computing depth spanning tree graph 
show compute gfold 
represent trees variable degree data type datatype tree branch tree list dfs simply val cons op fun dfs gfold fwd branch cons definition depth search different haskell implementation 
particular way maintaining dfs state distinctive state transformers remembering visited nodes implicit graph decomposition achieved pattern matching 
note deliberately omitted case fun gfold empty definition gfold obtain general typing 
gfold type context 
node list 





node list 
graph 
adding case result unification entailing effort adjust definitions dfs 
similarity gfold dfs basis graph algorithms 
establish general laws gfold see section graph algorithms amenable program optimization 
linear fold different fold data types multiple threads value possible sharing variables 
decomposition value containing multiple threads say processed times threads leading 
case gfold processes just thread 
multiple access graph fold obvious generalization gfold allow multiple accesses nodes accomplished re inserting currently matched node incoming edges reached multiple accesses node possible successor lists nodes processed 
node sharing loops edges node require careful treatment fold operator node processed nodes forgotten remembered 
function applied label lab value resulting reducing currently remaining graph result lab just returned value inserted label graph reduced 
ensures value available stages reduction furthermore avoids recomputation 
accounts nodes reached predecessor 
folding node contains edge successors eventually fold applied 
argument graph passed recursive fold call re inserted recursive call original label lab predecessors successors guarantees termination 
result type fold general different type node labels process heterogeneous graph nodes labels tagged src processed dest node carries result value 
union type datatype hybrid src dest define function 
remove step exactly edge edge current node reached 
pass additional parameter node accessed 
node argument nodes initially passed option data type datatype option apply constructor parent nodes pass nullary initial call 
hides parameter interface 
simplicity omit parameter recall definition gfold consider forward fold move successors 
reaching node dest label simply re insert current predecessors fun lab case lab dest 
drop dest src 
val src val new new drop dest new del val val drop removes occurrence element list drop 
wraps nodes graph src reduces graph means drops graph part result fun gmap src example evaluator expression dags function 
expression filter selects elements list predicate yields true 
fun pred fun roots filter fn pred nodes fun con op fun cons roots applications need fold edges folding spanning tree done gfold order decomposition important 
advanced examples translation visual programs 
graph backtracking passing graph recursive fold calls successor list obtain backtracking operator fun backtrack lab lab backtrack lab backtrack nil backtrack backtrack backtrack backtrack compute example simple paths graph val append op fun map fn fun backtrack append nil fun fold append map fn nodes list paths returned contains jv times empty path 
program fusion popular optimization technique functional languages eliminate intermediate results multi pass algorithms 
concerning graph algorithms launchbury gives examples fuse operations dfs 
theorem shows program fusion applies algorithms specified graph folds 
proof appendix 
theorem promotion theorem functions gfold gfold application example consider definition topological sorting fun postorder branch postorder fun rev dfs nodes unfolding definition dfs apply promotion theorem obtain version build intermediate tree structure 
match variables theorem fwd branch cons rev 
invent values remaining variables cons fn append argument second rev postorder 
check premises theorem clear 
rev postorder branch rev rev rev rev rev postorder rev rev postorder rev rev postorder obtain optimized version fun gfold fwd cons fn nodes theorem facilitates elimination intermediate tree structures certainly applications 
challenging investigate unfold fold transformations save intermediate graph structures wadler call 
example optimize implementation sharir strongly connected components algorithm fun scc dfs rev dfs nodes grev algorithm works performing dfs graph edges reversed grev argument node list traversal reverse postorder list graph nodes rev 
save intermediate graph resulting edge reversal fusing definition dfs grev 
duality theorem relates gfold fwd gfold 
proof appendix 
theorem duality theorem gfold fwd grev gfold application function scc gives optimized version fun scc gfold branch cons gfold fwd cons fn nodes implementation implemented proposed graph concept extension ml 
core data structure persistent graphs graphs non destructively updated applications constructor decomposition 
knowledge data structures persistent graphs investigated previously 
method applies linked structures nodes constant bounded degree 
imperative graphs single graph representation exists optimal kinds applications initially focus representation suited sparse graphs base implementation node indexed arrays adjacency lists 
functional arrays ensure update graph invalidate older graph versions 
version tree implementation functional arrays updates take constant time index access time depends depth version tree 
extending version trees imperatively updated cache array duplicates array represented leftmost node version tree index access single threaded arrays 
assume moment represent graph arrays storing node labels successor predecessor lists 
adding node context size simply done setting node label ii adding successors iii adding predecessors follows ii iii 
adding node context takes steps plus time locate lists 
worst case cu denotes number updates 
note generally bounded number edges 
single threaded graphs adjacency list 
graph decomposition requested match general complex return label successors predecessors build reduced graph resulting deletion context 
delete remove successor predecessor lists predecessors successors 
ii drop iii drop 
costly operations steps ii iii find adjacency lists requires cu steps general steps single threaded case 
deletion takes time list 
general single threaded case 
improve implementation exploiting observation deletion node adjacency list noticed earliest list requested context match 
implementation removing adjacency lists just mark deleted 
done additional array simply bound respectively nodes returned marked deleted means building reduced graph computing takes steps single threaded case complexity 
means reduction complexity non sparse graphs case important improvement practice addition smaller constants big oh expressions save lot heap allocations 
remains problem proposed approach assume context node deleted example contains re inserted predecessors considered successor impossible mark deleted anymore 
solution equip nodes kind time stamps node inserted time gets stamp say set store stamp entry adjacency list 
removed set gammav 
accessing nodes adjacency list return nodes stamps list equal deleted nodes filtered 
set gammav old entries adjacency lists non matching stamps correctly filtered 
importance structure lies behavior single threaded graph decompositions function gfold running time jv jej linear size graph 
immediate consequence algorithms dfs complexity imperative case 
implementation functional graphs bears considerable overhead 
get impression real behavior compare functional algorithms graph reversal dfs dag evaluation corresponding imperative implementations 
give measures functional realization imperative algorithms functional arrays 
imperative algorithms imperative arrays ml represent graph simply arrays storing node labels successors 
functional implementation imperative algorithms efficient implementation balanced binary search trees represent functional arrays 
algorithms slightly changed exploit dynamic behavior search trees account state threading 
functional algorithms defined defined gfold context provided persistent graph implementation described 
source code shown appendix 
expected functional algorithms significantly slower imperative ones 
mainly due intensive heap caused updates graph representing functional arrays 
improve running time functional algorithms providing predefined graph fold operations 
consider example gfold decomposing argument graph step local imperative array mark nodes matched current run gfold initially obtained copying stamp array argument graph 
time context node matched set gamma successors predecessor selected note complexity general case improved employing advanced data structures functional arrays implementation require considerable effort 
stamp equal similarly improved locally storing traversed edges hash table 
case subtle 
observe chosen array representation graph forgets construction history 
particular know node context inserted 
implies implementation pattern matching 
implement need function matches arbitrary node context 
simple implementation search example node valid stamp 
repeatedly leads running time quadratic number nodes 
predefined version scans node array fixed order achieves linear complexity 
implementation uses local imperative array similar predefined gfold 
ran implementations grev dfs sparse graph degree nodes 
user time spent sml nj sparcstation figures 
rows show times functional realization imperative algorithms 
ratios functional predefined imperative running times grev 
predefined version improves running time grev order magnitude compete imperative implementation 
faster implementation 
ratios functional predefined gfold imperative running times dfs 
see predefined version gfold performs quite 
striking gfold run faster 
certainly imperative dfs build dfs tree heap imperative graph reverse works imperative arrays 
function applied tree shaped dags internal nodes successors predecessors 
results shown 
basic functional solution extremely slow intensive graph constructors 
ratios functional predefined imperative running times 
new programming style graphs draws attraction pattern matching value decomposition known accepted programming concepts 
significant difference previous approaches departure imperative view graph traversals giving opportunities program transformation optimization 
required functional graphs efficient graph operations experiments initial implementation encouraging showing approach reasonable practical alternative imperative graphs functional languages 
particular predefined graph operations offer potential efficiency improvements 
aasa nilsson 
efficiency comparison representations purely functional arrays 
bit 
adams 
efficient sets balancing act 
journal functional programming 
bird 
functional algorithm design 
mathematics program construction lncs pages 
burton 
yang 
manipulating data structures pure functional language 
software practice experience 
dietz 
fully persistent arrays 
workshop algorithms data structures lncs pages 
driscoll sleator tarjan 
making data structures persistent 
journal computer system sciences 
erwig 
graph algorithms iteration data structures structure graph algorithms corresponding style programming 
th int 
workshop graph theoretic concepts computer science lncs pages 
erwig 
active patterns 
th int 
workshop implementation functional languages lncs pages 
erwig meyer 
heterogeneous visual languages integrating visual textual programming 
th ieee symp 
visual languages pages 
fegaras sheard 
revisiting catamorphisms datatypes embedded functions 
acm symp 
principles programming languages pages 
gibbons 
initial algebra approach directed acyclic graphs 
mathematics program construction lncs pages 
hu iwasaki takeichi 
deriving structural hylomorphisms recursive definitions 
st acm sigplan int 
conf 
functional programming pages 
wise 
graph algorithms lazy functional programming language 
th int 
symp 
lucid intensional programing pages 
king launchbury 
structuring depth search algorithms haskell 
acm symp 
principles programming languages pages 
launchbury 
graph algorithms functional flavour 
st int 
spring school advanced functional programming lncs pages 
launchbury sheard 
warm fusion deriving build recursive definitions 
conf 
functional programming computer architecture pages 

homomorphisms 
mathematics program construction lncs pages 
meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
conf 
functional programming computer architecture pages 
milner tofte harper 
definition standard ml 
mit press cambridge ma 
okasaki 
functional data structures 
advanced functional programming lncs pages 
pe na nez 
new look pattern matching data types 
st acm sigplan int 
conf 
functional programming pages 
sheard fegaras 
fold seasons 
conf 
functional programming computer architecture pages 
wadler 
views way pattern matching cohabit data abstraction 
acm symp 
principles programming languages pages 
wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 
appendix proof theorem 
perform induction definition gfoldn see immediately gfoldn gfold likewise gfold 
theorem follows directly third premise 
empty gfoldn causes call gfold empty raising match exception handled return gfoldn empty 
element matched empty graph know induction previous case gfold empty reason gfold empty case theorem follows third premise 
gfold causes call gfold succeeds results match exception 
case handling exception yields gfoldn case corresponding expression gfold raises match yields gfoldn assume theorem induction 
gfold expression results pair lab lab label component recursive call gfoldn 
way obtain value component expression gfoldn apply induction hypothesis obtain gfold expression evaluated pair computed gfoldn 
similarly pair expression gfoldn 
note graphs identical folds graph decomposition affected identical corresponding fold expressions 
apply induction hypothesis get result gfold lab 
likewise result gfold lab 
conclude gfold lab lab nd premise lab st premise lab ind hyp 
gfold proof theorem 
proof induction empty result gfold theorem true cases 
consider case empty 
gfoldn computes pair call gfold 
written due active pattern matching lab means pair gfold expression gfoldn 
grev lab grev corresponding gfold expression caused gfold fwd written gfold fwd lab grev contain 
restriction necessary moved matching 
pair call gfold fwd expression gfoldn fwd grev 
theorem follows applying induction hypothesis gfoldn gfoldn fwd grev remaining calls gfoldn fwd grev gfoldn respectively gfold gfoldn 
hand contained gfold expression caused gfold fwd written gfold fwd lab grev equal occurrences removed occurrences appended say 
means pair call gfold fwd expression gfoldn fwd grev 
difference expression occurrences 
contained grev eventually caused gfold calls raise match exception handled just moving node 
presence impact result compared corresponding computation means gfoldn fwd grev yields result gfoldn fwd grev apply induction hypothesis theorem proved 
fun id fun fun fun select select select select utility functions 
signature sig type array val array int 
array val sub array int 
val size array 
int val update array int 
array val array 
array array val fromlist list 
array val array array 
array operations functional arrays 
case match exception identical theorem 
structure struct datatype array root array array node int array cache int array bool ref array array fun array cache root array array ref true array array fun search cache root array sub search cache tree search tree search node root array sub search node tree search tree sub tree cache ref cache cache array sub search tree sub tree search tree fun size root array length size node size size cache array length fun update cache cache cache cache false array update cache ref true node update node fun fromlist cache hd root array fromlist ref true array fromlist fun val array array array length array sub array copy src si len dst di cache array sub root ref true fun cache root unchanged arrays val array array array length array sub array copy src si len dst di implementation functional arrays cache 
signature graph sig node int type context node list node node list type graph exception node val empty int 
graph val context graph 
graph val context node graph 
context graph val graph 
context graph val graph 
int val gmap 

graph 
graph val context 


graph 
val gfold node int list node node int list 
node int list 





node list 
graph 
val 




node list 
graph 
operations functional graphs 
functor graph graph struct type node int type context node list node node list exception node exception edge additional array functions open fun apply update sub fun fun scan sub scan scan fun fun list sub list list size fun fun list array sub list list array length stamp type operations type stamp int fun abs fun abs fun na sub na fun na val sub na raise node fun na val sub na raise edge datatype graph empty int full stamp array array node stamp list array pred node stamp list array suc basic graph operations fun empty empty infixr fun pred suc empty pred suc full array array array array pred suc full na la pa sa val na val map fn na pred val map fn na suc fun apply fn full update na update la update pa suc update sa pred fun context empty raise match context full na la pred suc na select fn na sub pred sub la select fn na sub suc full apply na la pred suc raise match fun empty raise match full na la pred suc context na fn handle subscript 
raise match functional graph implementation part 
fun empty full na size na fun gmap empty empty gmap full na la pa sa val sub la val ref size la val array array val array update sub la full na pa sa predefined fold operations fun empty full na la pred suc val na val array length fun val select fn array sub sub pred sub la select fn array sub sub suc val array update val fun gfold empty gfold full na la pred suc val na fun gfold array update val sub la gfoldn sub pred sub suc gfoldn gfoldn val array sub orelse gfoldn gfold gfoldn array sub gfold functional graph implementation part 
fun empty full na la pred suc val na val array length val array array false val array array exception notfound fun word word fromint val hashtable word fn notfound fun pred case pred 
hashtable insert true 
array sub array sub array update true val sub la sub suc array update val array sub val hashtable find false orelse orelse array sub functor graph functional graph implementation part 
fun dfs suc val array array array length false fun dfs array update true array sub array sub suc array sub dfs list tabulate array length id fun dfs dfs branch op fun suc val array array array length array sub val array copy src si len dst di fun eval case array sub con 
op 
val result fn 
array sub suc array update con result result eval roots suc fun grev suc val array array array length int list fun scan scan array update array sub scan val array scan suc imperative graph algorithms 

