data mining framework building intrusion detection models wenke lee salvatore stolfo mok computer science department columbia university west th street new york ny wenke sal mok cs columbia edu need update installed intrusion detection system ids due new attack methods upgraded computing environments 
current idss constructed manual encoding expert knowledge changes idss expensive slow 
describe data mining framework adaptively building intrusion detection id models 
central idea utilize auditing programs extract extensive set features describe network connection host session apply data mining programs learn rules accurately capture behavior intrusions normal activities 
rules misuse detection anomaly detection 
new detection models incorporated existing ids meta learning operative learning process produces meta detection model combines evidence multiple models 
discuss strengths data mining programs classification meta learning association rules frequent episodes 
report results applying programs extensively gathered network audit data darpa intrusion detection evaluation program 
network computer systems play increasingly vital roles modern society target intrusions enemies criminals 
addition intrusion prevention techniques user authentication passwords biometrics avoiding programming errors information protection encryption intrusion detection wall protect research supported part darpa nsf iri cda 
computer systems 
intrusion detection techniques categorized anomaly detection misuse detection 
anomaly detection systems example ides flag observed activities deviate significantly established normal usage profiles anomalies possible intrusions 
misuse detection systems example idiot stat patterns known attacks weak spots system match identify known intrusion patterns signatures 
accuracy essential requirement ids extensibility adaptability critical today network computing environment 
multiple penetration points intrusions take place network system 
example network level carefully crafted malicious ip packets crash victim host host level vulnerabilities system software exploited yield illegal root shell 
activities different penetration points normally recorded different audit data sources ids needs extended incorporate additional modules specialize certain components hosts subnets network systems 
large traffic volume security related mailing lists web sites suggest new system security holes intrusion methods continuously discovered 
imperative idss updated frequently timely 
currently building effective ids enormous knowledge engineering task 
system builders rely intuition experience select statistical measures anomaly detection 
experts analyze categorize attack scenarios system vulnerabilities hand code corresponding rules patterns misuse detection 
manual ad hoc nature development process current idss limited extensibility adaptability 
idss handle particular audit data source updates expensive slow 
research commercial idss started provide built mechanisms customization extension 
example bro nfr filter network traffic streams series events execute scripts bro policy scripts nfr codes contain site specific event handlers intrusion detection handling rules 
system administration personnel installation site assume roles security experts ids builders responsible writing correct event handling functions 
hand experience bro nfr show systems provide great flexibility writing scripts involves lot effort addition learning scripting languages 
example means debug scripts 
systems handle fixed set network traffic event types 
occasions forced changes source code original ids handle new event types 
research aims develop systematic automated approach building idss 
developing set tools applied variety audit data sources generate intrusion detection models 
take data centric point view consider intrusion detection data analysis process 
anomaly detection finding normal usage patterns audit data misuse detection encoding matching intrusion patterns audit data 
central theme approach apply data mining programs extensively gathered audit data compute models accurately capture actual behavior patterns intrusions normal activities 
automatic approach eliminates need manually analyze encode intrusion patterns guesswork selecting statistical measures normal usage profiles 
importantly data mining tools applied multiple streams evidence detection module specializes specific type intrusion specific component host network system learn combined detection model considers available evidence 
framework facilitates construction adaptive idss 
rest organized follows 
section outlines main components framework 
section briefly describes data mining programs discusses applied discover frequent intrusion normal activity patterns basis building misuse detection models user anomaly detection models 
section describes construct temporal statistical features frequent patterns mined audit data 
section reports results experiments building intrusion detection models audit data darpa evaluation program 
section discusses related research projects 
section outlines research plans 
systematic framework basic premise intrusion detection audit mechanisms enabled record system events distinct evidence legitimate activities intrusions manifested audit data 
sheer volume audit data amount audit records number system features fields audit records efficient intelligent data analysis tools required discover behavior system activities 
data mining generally refers process extracting descriptive models large stores data 
rapid development data mining available wide variety algorithms drawn fields statistics pattern recognition machine learning databases 
types algorithms particularly useful mining audit data classification maps data item predefined categories 
algorithms normally output classifiers example form decision trees rules 
ideal application intrusion detection gather sufficient normal abnormal audit data user program apply classification algorithm learn classifier label predict new unseen audit data belonging normal class abnormal class link analysis determines relations fields database records 
correlations system features audit data example correlation command argument shell command history data user serve basis constructing normal usage profiles 
programmer example may emacs highly associated files sequence analysis models sequential patterns 
algorithms discover time sequence audit events frequently occurring 
frequent event patterns provide guidelines incorporating temporal statistical measures intrusion detection models 
example patterns audit data containing network denial service dos attacks suggest host service measures included 
developing framework proposed applying data mining techniques build intrusion detection models :10.1.1.134.4855
framework consists programs learning classifiers meta classification association rules link analysis frequent episodes sequence analysis support environment enables system builders interactively iteratively drive process constructing evaluating detection models 
product concise intuitive rules detect intrusions easily inspected edited security experts needed 
approach learned rules replace manually encoded intrusion patterns profiles system features measures selected considering statistical patterns computed audit data 
meta learning learn correlation intrusion evidence multiple detection models produce combined detection models 
important point framework eliminate need pre process analyze raw audit data tcpdump bsm output 
fact build intrusion detection models network systems data mining programs pre processed audit data record corresponds high level event network connection host session 
record normally includes extensive set features describe characteristics event example duration connection number bytes transfered analyzing summarizing raw audit data essential task ids argue generic utilities developed network operating system experts available idss lowest level building blocks 
bro nfr regarded examples robust free utilities perform ip packet filtering reassembling allow event handlers output summarized connection records 
framework assumes building blocks available constructing idss 
mining audit data section describe data mining algorithms illustrate apply algorithms generate detection models audit data 
audit data refers pre processed timestamped audit records number features fields 
classification intrusion detection thought classification problem wish classify audit record discrete set possible categories normal particular kind intrusion 
set records features class label concept classification algorithms compute model uses discriminating feature values describe concept 
example consider telnet connection records shown table 
hot count access system directories creation execution programs compromised count file path errors jump instructions ripper classification rule learning program generates rules classifying telnet connections displayed table 
see ripper selects unique feature values identifying intrusions 
rules inspected edited security experts incorporated misuse detection systems 
accuracy classification model depends directly set features provided training data 
example features hot compromised root shell removed records table ripper able produce accurate rules identify buffer overflow connections 
showed due temporal nature network events especially certain intrusions probing port scan ping sweep denial service ping death teardrop adding host service temporal statistics resulted significant improvement accuracy classification models :10.1.1.134.4855
selecting right set system features critical step formulating classification tasks 
strategy mine frequent sequential patterns network audit data patterns guidelines select construct temporal statistical features 
section discusses process greater detail 
meta classification important reasons combining multiple detection models 
order avoid performance bottleneck easy target subversion ids consist multiple cooperative lightweight subsystems monitor separate part access point entire network environment 
example ids inspects full data contents ip packet keeps track opened connections may run memory buffers dos attack syn flood cease function 
hand lightweight ids inspects header ip packet detect intrusions targeted network protocols try exploit hosts guess password buffer overflow 
solution relatively lightweight system gateway checks packet headers host systems monitor activities mission critical hosts 
global detection system combine evidence subsystems take appropriate actions 
believe best way intrusion detection models adaptive combining existing models new models trained new intrusion data new normal data audit data new network component restarting entire model building process aggregate archived audit data new data 
label service flag hot failed logins compromised root shell su duration normal telnet sf normal telnet sf guess telnet sf normal telnet sf overflow telnet sf normal telnet sf guess telnet sf overflow telnet sf normal telnet sf 
table 
telnet records ripper rule meaning guess failed logins 
number failed logins greater telnet connection guess guessing password attack 
overflow hot compromised root shell 
number hot indicators number compromised conditions root shell obtained telnet connection buffer overflow attack 
normal true 
connection normal 
table 
example ripper rules telnet records meta learning mechanism inductively learn correlation predictions number base detection models classifiers 
resulting metaclassifier combines detection power base detection models 
approach extensively studied empirically evaluated related domain fraud detection shown effective scalable approach 
association rules empirical evidence program executions user activities exhibit frequent correlations system features 
example certain privileged programs access certain system files specific directories programmers edit compile files frequently consistent behavior patterns included normal usage profiles 
goal mining association rules derive attribute correlations database table 
set records record set items support defined percentage records contain item set association rule expression 
item sets support support rule support support confidence 
table shows shell input commands telnet session secretary 
keep hostname command arg arg am pascal mkdir dir am pascal cd dir am pascal vi tex am pascal tex vi am pascal mail am pascal subject progress am pascal vi tex am pascal vi tex am pascal mail am pascal subject progress 
am pascal vi tex am pascal latex tex am pascal dvi 
am pascal logout table 
shell command records name extensions remove input contents mail bodies files am represent morning timestamps 
associations relevant analyzing program user behavior example hostname pascal arg tex 
utilized schema level information audit records direct pattern mining process 
observe certain features essential describing data provide auxiliary information 
example shell command data combination exact time command uniquely identifies record command essential feature likewise network connection data combination features timestamp source destination hosts source port service destination port uniquely identifies connection record 
essential features 
argue relevant association rules describe patterns related essential features 
call essential features axis features form item constraint 
restrict association rules output rules include axis attribute values 
practice need designate essential features axis features 
example network analysis tasks require statistics various network services may require patterns related hosts 
service axis feature compute association rules describe patterns related services connections 
case shell command records command axis feature 
table shows example association rules shell command data table 
association rules conveys information user behavior 
rules mined telnet login session user merged aggregate rule set form user normal profile 
section details experiments association rules anomaly detection 
frequent episodes need study frequent sequential patterns network events order understand nature attacks 
frequent episodes represent sequential audit record patterns 
set timestamped event records record set items interval sequence event records starts timestamp ends width interval defined set items interval minimal occurrence contains proper sub intervals contains define support ratio number minimum occurrences contain total number event records 
frequent episode rule expression 
item sets form episode 
support support rule support support confidence 
width occurrences introduced original frequent episodes algorithm 
extended algorithm computes frequent sequential patterns phases 
finds frequent associations axis features previously described 
generates frequent serial patterns associations 
approach combines associations features sequential patterns records single rule 
interesting schema level fact audit records essential features features 
features normally carry information subject features describe actions refer subject 
example want study sequential patterns connections destination host dst host subject service action 
case designate dst host feature 
forming episode program tests condition episode minimal occurrences event records covered constituent item sets feature value 
feature construction mined frequent episodes network connection records guidelines construct temporal statistical features building classification models 
raw tcpdump output summarized network connection records pre processing programs record set intrinsic features 
example duration service src host dst host source destination hosts src port source port src bytes dst bytes number data bytes lag indicating normal error status protocols intrinsic features single connection 
table shows examples connection records 
note intrinsic features general network analysis purposes specific intrusion detection 
apply frequent episodes program normal connection data intrusion data compare resulting patterns find intrusion patterns 
details pattern comparison algorithm described 
briefly number patterns may large rarely exactly matched patterns data sets heuristic algorithm considers episodes related different sets axis features different outputs user specified top percentage intrusion patterns 
example consider syn flood attack records shown table 
attacker spoofed source addresses send lot connections syn packet sent port victim host short time span timestamp 
table shows top intrusion pattern produced service axis feature dst host feature 
intrusion patterns guideline association rule meaning command vi time am hostname pascal arg tex vi edit file user time editing tex file morning host pascal command data pattern 
command subject time am hostname pascal arg progress subject user email time progress morning host pascal command data pattern 
table 
example association rules shell command data timestamp duration service src host dst host src bytes dst bytes flag 
spoofed victim 
spoofed victim 
spoofed victim 
spoofed victim 
spoofed victim 
spoofed victim 
spoofed victim 
ftp sf 
smtp sf 
telnet sf 
smtp sf 
rej 
table 
network connection records adding additional features connection records build better classification models 
automatic procedure parsing frequent episode constructing features assume dst host feature width episode seconds 
add features examine connections past seconds share value current feature count connections service src dst dst host value item sets episode add percentage connections share value current connection add percentage different values value feature lag item sets episode add percentage connections numerical feature add average values 
syn flood pattern results additional features count connections dst host past seconds connections percentage service percentage lag 
open problem decide right time window value mine sequential patterns different values example increment plot number patterns generated run 
experience show plot tends stabilize initial sharp jump 
call smallest stable region reported experiments different values calculate temporal statistical features classification models :10.1.1.134.4855
results showed plot accuracy classifier stabilizes tend taper 
intuitively requirement window size set sequential patterns stable sufficient patterns captured noise small 
adding temporal statistical features 
order construct appropriate features detect intrusion need select right axis features generate distinguishing useful intrusion patterns 
bottleneck building effective models requires empirical evaluation 
implemented feature construction system described frequent episode meaning service lag dst host victim service lag dst host victim service lag dst host victim time connections flag host victim seconds third similar connection pattern occurs data table 
example intrusion pattern support iterative procedure pattern mining comparison feature construction patterns model building evaluation 
iteration choose different data mining strategy regarding choices axis features 
choices limited essential features see section service dst host src dst src port 
intrusions generally targeted victim host network system starts service dst host 
experiments participated darpa intrusion detection evaluation program prepared managed mit lincoln labs 
objective study survey evaluate state art research intrusion detection 
standard set extensively gathered audit data includes wide variety intrusions simulated military network environment provided darpa 
participating site required build intrusion detection models tweak existing system parameters training data send results detected intrusions test data back darpa performance evaluation 
report experience 
darpa data provided gigabytes compressed tcpdump data weeks network traffic 
data processed connection records bytes 
data contains content data portion packet transmitted hosts inside outside simulated military base 
bsm audit data unix solaris host network sessions provided 
main categories attacks simulated dos denial service example ping death teardrop smurf syn flood unauthorized access remote machine example guessing password unauthorized access local superuser privileges local unprivileged user example various buffer overflow attacks probing surveillance probing example port scan ping sweep addition anomalous user behavior manager behaves system administrator 
data pre processing bro packet filtering reassembling engine 
extended bro handle icmp packets changes packet fragment inspection modules crashed processing data contains teardrop ping death attacks 
implemented bro connection finished event handler output summarized record connection 
connection record includes intrinsic features time duration service src host dst ost src port wrong fragment fragmentation error fragment size multiple bytes offsets overlapped lag connection established terminated 
bro event handlers examine telnet sessions extract shell commands users 
pre processed shell commands replacing timestamps am pm nt night eliminated input contents edit sendmail commands kept filename extensions 
table shows examples processed command data 
shell command records user anomaly detection discussed section 
misuse detection training data darpa includes list files identify timestamp source host port destination host port name attack 
information select intrusion data perform pattern mining feature construction label connection record normal attack type create training data building classification models 
amount audit data huge example days millions connection records due nasty dos attacks aggregate connection records single training data set 
extracted connection records fall surrounding time window plus minus minutes duration attack create data set attack type 
randomly extracted sequences normal connections records create normal data set 
manual automatic feature construction feature construction approach described section attack type syn flood port scan performed pattern mining comparison intrusion data set normal data set 
constructed appropriate features intrusion patterns 
summarize temporal statistical features automatically constructed system host feature examine connections past seconds destination host current connection count connections percentage connections service current percentage different services percentage flag percentage rej rejected connection flag service features examine connections past seconds service current connection count connections percentage different destination hosts percentage flag percentage rej flag 
call time traffic features connection records 
slow probing attacks scan hosts ports larger time interval seconds example minute 
result attacks produce intrusion patterns time window seconds 
sorted connection records destination hosts applied pattern mining feature construction process 
stead time window seconds connection window connections constructed mirror set host traffic features traffic features 
discovered dos probing attacks attacks don intrusion frequent patterns 
dos probing attacks involve sending lot connections host short period time frequent sequential patterns different normal traffic 
attacks embedded data portions packets normally involve single connection 
unique frequent traffic patterns 
words automatic feature construction process failed produce features attacks 
studying outcome mining process focussed attention content connections 
bro event handlers added functions inspect data exchanges interactive tcp connections telnet ftp smtp 
functions assign values set content features indicate data contents suggest suspicious behavior 
features number failed logins successfully logged logged root root shell obtained su command attempted succeeded number access access control files passwd rhosts number compromised states destination host file path errors jump instructions number hot indicators access system directories creation execution programs number outbound connections ftp session 
approach include extensive set indicators classification programs decide minimal set discriminating features identify intrusions 
detection models evident different categories intrusions require different sets constructed features order detected 
built classification models different feature sets traffic model connection record contains intrinsic traffic features 
table shows example labeled connection records 
resultant ripper classifier detects dos probing attacks 
table shows example ripper rules 
host traffic model connection record contains intrinsic host traffic features 
resultant ripper classifiers detect slow probing attacks 
content model connection record contains intrinsic content features 
table shows example labeled connection records 
resultant ripper classifier detects attacks 
table shows example ripper rules 
classification models specialize certain type intrusion 
constructed meta level classifier combine detection models 
meta level training record consists features predictions base models plus true class label normal attack type 
ripper label service flag host count srv count host rej host diff srv duration normal ecr sf smurf ecr sf satan user level rej normal sf 
table 
example traffic connection records ripper rule meaning smurf service ecr host count host srv count 
service icmp echo request past seconds number connections destination host current number connections service current smurf attack dos attack 
satan host rej host diff srv 
connections past seconds destination host current connection percentage rejected connections percentage different services satan attack probing attack 
table 
example ripper rules dos probing attacks applied learn rules combine evidence traffic host traffic content classifiers final prediction connection 
resulting meta level rules basically predictions content model detect attacks combination traffic host traffic models detect dos fast slow probing attacks 
meta classifier predicts connection attack content model attack dos probing traffic model traffic model predicts normal host model predicts probing attack 
model features rules features records rules content traffic host traffic table 
model complexities table summarizes complexity base models terms number features connection record number ripper rules produced number distinct features rules 
numbers bold example indicate number automatically constructed temporal statistical features ripper rules 
see traffic host traffic models feature construction process contribute majority features 
point features connection records selected ripper 
ripper classification algorithms built feature selection process select discriminating generalizable features statistical significance performance hold test dataset simulates unseen data 
large amount audit data human expert able manually gather test various statistics tend poor job selecting features 
result hand crafted signature rules tend specific small intrusion data set 
alternative classification algorithms compute underlying probability distributions may require features evaluated resultant models 
crucial issue tradeoff model accuracy model cost 
ripper output indicates features irrelevant need compute run time reducing cost detection 
subject matter ongoing research 
results report performance detection models evaluated mit lincoln labs 
trained intrusion detection models base models meta level classifier weeks labeled data predictions weeks unlabeled test data told connection attack 
test data contains total attack types types test data models trained instances detection rate false alarm rate columbia group group group dos false alarm rate columbia group group group probing detection rate false alarm rate columbia group group group columbia false alarm rate columbia group group 
roc curves detection rates false alarm rates attack types 
shows roc curves detection models attack categories intrusions 
roc plots axis false alarm rate calculated percentage normal connections classified intrusion axis detection rate calculated percentage intrusions detected 
data point upper left corner corresponds optimal performance high detection rate low false alarm rate 
compare models participants denoted group darpa evaluation program 
tested systems produced binary output roc continuous 
plots duplicated presentation slides report lincoln labs darpa pi meeting 
slides viewed line www cs columbia edu sal jam project mit 
html 
participating groups knowledge engineering approaches build intrusion detection models 
see detection model best performance attack category model best 
clear models performed poorly attacks 
intrusions detection rate hardly satisfactory mission critical environment 
category old new dos probing table 
comparing detection rates old new attacks models intended misuse detection hoped features constructed general models detect new variations known intrusions 
table compares detection rates old intrusions new intrusions 
new intrusions refer corresponding instances training data 
see models able detect large percentage new probing attacks effective new dos attacks 
discussion probing attacks relatively limited variance involve making connections large number hosts ports time frame 
likewise outcome attacks root shell obtained legitimate means login root su root categories attacks representative instances training data data mining system able construct features capture general behavior patterns 
result detection models detect high percentage old new probing attacks 
hand dos wide variety behavior exploit weaknesses large number different network system services 
features constructed available attack instances specialized known attack types 
detection models missed large number new dos attacks 
results entirely surprising models misuse detection models 
need anomaly detection models network traffic system programs guard new diversified attacks 
anomaly detection challenging misuse detection 
example need decide build normal profile network service group services host groups hosts 
feature construction process complex relatively small number intrusion patterns normal network traffic large number variations 
network anomaly detection important problem active area research 
user anomaly detection insiders privileges hard detect don normally need break idss security personnel tend focus guarding outside attacks 
insider problems vexing problems security personnel 
checks checkers person ids reports 
difficult classify single event user normal abnormal unpredictable nature people 
user actions login session needs studied determine behaving normally 
initial exploratory approach mine frequent patterns user command data merge add patterns aggregate set form normal usage profile user 
new pattern merged old pattern left hand sides right hand sides support values confidence values 
analyze user login session mine frequent patterns sequence commands session 
new pattern set compared profile pattern set similarity score assigned 
assume new set patterns patterns matches rules merged profile pattern set similarity score simply obviously higher similarity score means higher likelihood user behavior agrees historical profile 
user normal activities logs root cats password file runs commands top 
programmer writes public domain code vi editor compiles code reads sends mail executes unix commands 
programmer similar user profile works 
secretary edits latex files runs latex reads mail sends mail 
manager reads sends mail manager reads mail 
table 
user descriptions darpa data includes user anomaly data evaluate anomaly detection systems 
table describes consistent behavior users anomaly analysis 
note group performed anomaly detection test data lincoln labs evaluate results 
report experiments training data 
apply frequent episode algorithms command data login session user command axis feature look patterns range consecutive commands mine frequent sequential patterns associations user commands arguments time segments hosts 
treat weeks data gathering period simply merge patterns user profiles 
user profiles ac user anomaly description programmer logs beta secretary logs night logs jupiter programmer secretary secretary manager programmer logs night programmer manager manager logs table 
user anomaly description user normal anomaly programmer secretary programmer secretary programmer manager manager table 
similarity user profile time segment am pm nt 
treat th week training period compare patterns session profile time segment 
record normal range similarity scores week 
data th week user anomalies described table 
anomalous sessions compare patterns original user profile compare resulting similarity score recorded normal range time segment 
table column labeled normal range similarity user profile recorded th week 
means user login time segment th week 
column anomaly similarity measure anomalous session described table 
see anomalous sessions clearly detected similarity scores smaller normal range 
example programmer see table patterns zero matches profile th week pm similarity scores range 
unfortunately formal evaluation statistics available determine error rates approach 
initial test indicates path worthy study 
related network intrusion detection going research area 
systems bro nfr emerald extensibility primary design goals :10.1.1.114.4122
research focuses automatic methods constructing intrusion detection models 
meta learning mechanism designed automate process idss 
share views discussed ids built standard components 
believe operating system networking community responsible building robust event box 
algorithms analyzing user shell commands detecting anomalies discussed 
basic idea collapse multi column shell commands single stream strings string matching techniques consideration concept drift build update user profiles 
believe extended frequent episodes algorithm superior approach considers association commands arguments frequent sequential patterns associations 
directions outline data mining framework constructing intrusion detection models 
key idea apply data mining programs audit data compute misuse anomaly detection models observed behavior data 
facilitate adaptability extensibility propose meta learning means construct combined model incorporate evidence multiple lightweight base models 
mechanism feasible introduce new id components existing ids possibly significant re engineering 
extend basic association rules frequent episodes algorithms accommodate special requirements analyzing audit data 
experiments show frequent patterns mined audit data reliable user anomaly detection models guidelines selecting temporal statistical features build effective classification models 
results darpa intrusion detection evaluation program showed detection models performed best systems built manual knowledge engineering approaches 
includes developing network anomaly detection strategies devising mechanical procedure translate automatically learned detection rules modules real time idss 
preliminary project collaboration nfr just started 
acknowledgments wish colleagues columbia university chris park wei fan andreas prodromidis help encouragement 
agrawal imielinski swami 
mining association rules sets items large databases 
proceedings acm sigmod conference management data pages 
chan stolfo 
parallel distributed learning meta learning 
aaai workshop knowledge discovery databases pages 
cohen 
fast effective rule induction 
machine learning th international conference lake ca 
morgan kaufmann 
fayyad piatetsky shapiro smyth 
kdd process extracting useful knowledge volumes data 
communications acm november 
ilgun kemmerer porras 
state transition analysis rule intrusion detection approach 
ieee transactions software engineering march 
network flight recorder 
www nfr com 
jacobson leres mccanne 
tcpdump 
available anonymous ftp ftp ee lbl gov june 
ko fink levitt 
automated detection vulnerabilities privileged programs execution monitoring 
proceedings th annual computer security applications conference pages december 
kumar spafford 
software architecture support misuse intrusion detection 
proceedings th national information security conference pages 
lane brodley 
sequence matching learning anomaly detection computer security 
aaai workshop ai approaches fraud detection risk management pages 
aaai press july 
lee stolfo :10.1.1.134.4855
data mining approaches intrusion detection 
proceedings th usenix security symposium san antonio tx january 
lee stolfo mok 
mining data flow environment experience intrusion detection 
submitted publication march 
lunt 
detecting intruders computer systems 
proceedings conference auditing computer technology 
lunt jagannathan neumann javitz valdes garvey 
real time intrusion detection expert system ides final technical report 
technical report computer science laboratory sri international menlo park california february 
mannila toivonen 
discovering generalized episodes minimal occurrences 
proceedings nd international conference knowledge discovery databases data mining portland oregon august 
mannila toivonen verkamo 
discovering frequent episodes sequences 
proceedings st international conference knowledge discovery databases data mining montreal canada august 
mukherjee heberlein levitt 
network intrusion detection 
ieee network may june 

bro system detecting network intruders real time 
proceedings th usenix security symposium san antonio tx 
porras neumann :10.1.1.114.4122
emerald event monitoring enabling responses anomalous live disturbances 
national information systems security conference baltimore md october 
chen 
common intrusion detection framework 
cs ucdavis edu cidf 
stolfo prodromidis lee fan chan 
jam java agents meta learning distributed databases 
proceedings rd international conference knowledge discovery data mining pages newport beach ca august 
aaai press 
sunsoft mountain view ca 
basic security module guide 

