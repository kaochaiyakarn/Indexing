portable debugger parallel distributed programs cheng robert hood philips com nas nasa gov computer sciences nasa ames research center mail moffett field ca describe design implementation portable debugger parallel distributed programs 
design incorporates client server model order isolate non portable debugger code user interface 
precise definition protocol client server interaction facilitates high degree client portability 
replication server components permits implementation debugger distributed computations 
portability message passing implementations achieved protocol specifies interaction message passing library debugger 
permits debugger pvm mpi programs 
process abstractions debugging messagepassing programs adapted debug hpf programs source level 
permits meaningful display information obscured tool generated code 
need uniformity large gap exists user needs existing support debugging parallel distributed programs 
environment diversified computational facilities numerical aerodynamic simulation nas division nasa ames research center problems compounded issues 
system distinct debugger sophisticated user interface 
variation amount time invested learn new user interface contribute user reluctance invoke debugger 
computational platforms computations distributed network inadequate debugging tools 
new programming interfaces pvm mpi high performance fortran hpf hide mapping information needed debuggers 
existing debuggers provide information low level abstraction level program source 
defense vendors market demanded better debugging tools 
vendors losing sales new systems inadequacies debugger 
allocate fewer resources debuggers necessary address issues 
rapid evolution hardware software parallel systems kept debugger developers busy just porting existing code new systems 
dynamic evolution parallel distributed programming models situation worse 
situation outside influence improve debuggers parallel distributed programs 
strategy solving problems employ client server model debugger implementation 
precise specification interaction protocol client server permit client user interfaces paired variety server implementations easing task porting consistent user interface platforms 
inclusion appropriate mechanisms interaction protocol foster implementation debuggers provide information operations level meaningful user 
approach differs significantly previous parallel distributed debuggers 
prior falls main categories trace post mortem debugging systems addressed portability paragraph aims parallel distributed analogs conventional state debuggers ipd prism tried portable 
exceptions categorization find distributed debuggers layer user interface top complete vendor debuggers 
supported nasa contract nas nasa high performance computers communications program 
cheng current address philips research palo alto philips electronics north american miranda avenue suite palo alto ca 
step portability distributed debugger implementation complicated need accommodate variation user operation semantics vendor debuggers 
client server approach vendors choose focus development effort implementing servers need invest costly user interface 
user site able build client user interface tailored user community programming model uses 
demonstrate value feasibility approach provide nas users useful debugger developing prototype portable parallel distributed debugger 
properties supports debugging parallel distributed computations traditional sequential programs provides user interface platforms accommodate programming models supported vendor user interface tailored specific needs users debugging computational fluid dynamics cfd codes 
describe design implementation 
process provide overview client server interaction protocols 
related papers provide detailed descriptions protocols 
isolating implementation dependencies main goals project build debugger portable variety platforms programming models 
number factors stand way goal 
section discuss barriers strategy overcoming 
barriers portability basic level debugger job provide mapping services user conception program source level machine version object level 
typically done user request terms program source mapping request machine level symbol table information provided compiler getting operating system perform request mapping os reply back source level 
performing process debugger relies execution environment services 
services may depend target machine architecture things trap instructions breakpoint implementation operating system process control address space access symbol table format mapping information thread synchronization abstractions message passing implementation hpf implementation information data distributed 
basic approach uses provide portability dependencies isolate part code needs portable user interface 
employing strategy achieve portable user interface code great deal flexibility choice target programs interchangeable parts philosophy accessing non portable code 
step debugger process basic strategy design clientserver model partition debugger 
debugger server contain platform dependent code client portable user interface code 
intended server implemented platform vendor 
client hand implemented nas user community vendor 
diagram illustrates division important parts design definition protocol interaction client server 
discussed section 
client server model quite easy provide remote debugging debugging session workstation controlling execution job remote supercomputer 
need interpose communication layer client server way ui client sees server remote server sees client 
done providing debugger server implementation translates operations objects messages sent remote debugger client implementation takes message requests translates server requests 
note client server protocol places accommodating distributed execution isolating problems distributed computations able get information concerning execution communication library 
example user attaches root computation debugger need determine symbol table os debugger server user interface protocol remote server rs symbol table ui remote client rc debugger server processes machines participating execution 
way accomplish secure additional mapping information communication library scenario communication library reports important events process creation making procedure call debug library 
debug library turn records information table available client distribution manager responsible keeping track processes process groups distributed network 
distribution manager described detail section 
approach define protocol communication library debug library 
section discusses protocol contain 
accommodating hpf preprocessors hpf target programs need assistance responding user queries print 
problem hpf preprocessor distribute array processors way indicated symbol tables individual executables 
effect hpf preprocessor additional compilation step mapping source object needs recorded symbol table 
distribution manager ui rs rc ds user code comm library debug library rc ds user code comm library debug library general form symbol table change dynamically program redo distribution alignment execution 
hpf definition provides dynamic access distribution information desirable hpf library interact debug library manner analogous distributed execution 
employ protocol describing interaction hpf run time library provided debugging stub running target address space 
protocol discussed detail section 
resulting architecture merge design ideas preceding sections result architecture shown 
approach advantages 
options particular component implementation indicated balloon attached component 
note vendors named diagram illustrative purposes indicate commitment part provide indicated software appropriate choice components balloons debuggers share common user interface achieved variety target platforms 
second vendor choose focus efforts debugger server giving user communities third parties possibility developing application domain specific user interfaces 
user code remote server hpf manager ui distribution manager remote client debugger server hpf library existing intel code shim comm library pvm nas ui sgi ui gnu ui bbn ui existing gdb code shim existing sgi code shim client remote server target program hpf debug comm debug mpi shim apr hpf library shim ibm hpf library shim 
architecture simplify re existing debugger communication library code debugging environment 
modification code required 
modification sites indicated boxes labelled shim 
fundamental strategy client server partitioning precisely define interaction protocols identified earlier 
sections describe protocols detail 
debugger server protocol debugger server ds protocol outlines user interface client access debugging abstractions provided server 
interest flexibility ease modification client server interface object oriented 
server exports collection objects abstraction executable debugged state process running 
ds objects ds objects designed approximately match user abstractions debugging process 
convenient way represent user abstractions consideration design ds objects straightforward implement terms operating system objects mechanisms 
general objects fall categories 
program objects provide abstraction mapping information source representation program object representation 
example objects include executable object corresponds source level program executed location object encapsulates point program source 
communicating things place breakpoint execution stopped 
state objects encapsulate information maps source level dynamic abstractions implementation operating system 
example process object encapsulates unix notion process stack object represents collection function activation records represented frame object 
event trap objects provide mechanism asynchronous notification events take place execution 
general client creates event trap order indicate wants notified particular event takes place 
example traps include indicates single source instruction executed triggers instruction specific location code executed goes specified period time 
create event trap client provides callback function argument manner analogous toolkit intrinsics 
event occurs server invoke function passing argument 
instrumentation objects specify code executed event traps 
permit efficient implementation conditional breakpoints user modifications debugging session 
addition code source languages fortran instrumentation provided debugger scripting language defined protocol 
scripting language designed facilitate downloading instrumentation target process compiled patch byte codes executed interpreter resident process 
alternatively instrumentation interpreted server address space 
expression evaluation objects provide abstractions producing maintaining displays data values 
include expression objects hierarchy type value objects 
design objects influenced desire support display large data structures efficiently 
example type value information components large data structure constructed part demand 
addition mechanism permits remote implementation optimize amount message traffic take place evaluations performed 
unfortunately space limitations permit complete description ds objects 
provides details 
illustrate ds objects examples subsections 
example setting breakpoint suppose client created executable process user requested breakpoint put line file foo 
response client performs loc foo trap arg loc requesting called loc reached 
breakpoint hit server performs loc arg client update display show current location program counter 
example maintaining data value display suppose user wants data display variable struct foo client ui wants put window capable showing lines needs retrieve type information values initialize display 
requests type fn gettype expression type information th leaf flattened representation struct foo 
get values client requests expression frame value getvalue value th leaf flattened representation addition request client advise server values displayed displaying server choose ignore advice optimize amount communication client server 
allows ambitious server anticipate client requests transmit data values bulk requested individually 
user continues execution server notify client displayed values stale 
execution hits breakpoint trap server notify client mechanism described previous example 
client update data display accessing objects 
abstractions multithreaded executions additional operations required debug interactions concurrently executing parts sharedmemory parallel program 
example user may ask threads reached barrier thread holding particular lock wanted thread 
user may want know variable shared threads sharing variable 
parallel debuggers provided computer vendors support operations suitable platforms 
debugger server protocol needs extended include abstractions operations 
examples extensions 
queue object encapsulates wait queue threads provides member functions access entries barrier object represents synchronization barrier provides member functions access arrival status threads variable object additional members tell threads access type access thread process object supports re execute trace operation isolating race conditions 
details protocol extensions debugging shared memory parallel programs nas technical report 
communication library protocol purpose communication library protocol give debugger access information message passing state topology participating processes distributed computation 
example program deadlocks user needs find reason examining messages queues messages processes waiting 
locating bug user may need examine contents message 
user may want examine messagepassing patterns frequency data volume optimizing program performance 
communication library protocol designed support operations able answer questions 
processes machines participating computation 
messages particular message queue 
particular message 
source line origin particular message communication library protocol components set procedural entry points library example pvm register events set objects access internal data structures library debugging time 
section describes main points protocol details technical report 
protocol specifies collection debugger library entry points requires communication library register run time events 
example new process created computation communication library function created new process call register creation event mp debugger information attach debugger server new process allow user interact execution 
support process group debugging protocol requires communication library register events related group creation termination membership changes 
example mp group processes answer user questions show message header process waiting show header th message input queue process debugger access internal data structure communication library 
isolate semantic implementation differences communication libraries objects representing user world entities chosen abstractions 
example addition queue objects listed section message object represents structured data passed processes provides member functions access information sender receiver size tag message 
library developers choose support member function access information 
support breaking deadlocks message queue objects provide member functions send receive messages 
support debugging operations show source line responsible message send protocol suggests library provide debugging version routines message send receive global operations 
debugging versions encode sufficient information message header mapping back source line machine instruction 
allow debugging selected processes protocol defines environmental variable mp debug suggests communication libraries pass processes spawned library spawning routines 
variable tells newly spawned process executed debugger server control see section 
distribution preprocessor protocol purpose distribution preprocessor protocol give debugger access information aggregate objects get distributed hpf program preprocessor compiler 
addition useful displaying data values user interface examining data placed memory necessary performance optimization 
distribution preprocessor protocol designed support needs 
parts set procedural entry points preprocessor register events set procedural entry points access data structures generated preprocessor 
designers hpf taken major step protocol specifications requiring hpf libraries include entry points callable target yield information current alignment distribution 
example entry points hpf alignment 
hpf template hpf distribution 
give way extracting necessary distribution alignment information debugging time 
debugger needs mechanism notified distribution information changes 
handled having hpf library routines perform alignment distribution call hpf debug library immediately data redistributed 
examples registration routines hpf 
hpf 
hpf supports implicit message passing users compiler tool developers may want debug actual communication generated compiler 
reason hpf run time library performs message passing adhere communication library protocol section 
user interface design issues addition protocol definitions described sections nas effort includes implementation prototype distributed debugger lines architecture described 
section discuss issues encountered design process 
supporting traditional source level debugging operations breakpoints single stepping user interface designed suit nas users support navigation selection large number processes accommodate vendor specific user interfaces 
section describes features 
breakpoint visualization user community nas builds computational fluid dynamics cfd programs 
debugger supports visualization program state breakpoints execution familiar visualization tool set fast 
accomplished having user interface pull values program format submit fast display 
process navigation process spawning tree navigation selection 
distribution manager mentioned section informs ui events process process group creation termination status changes 
process created application new process added spawning tree 
process terminates representative node tree grayed 
spawning tree display maintains collection process groups interest programmer 
include process groups appearing computation auxiliary ones created user debugging session 
supplemental groups edited dynamically selecting processes groups spawning tree display 
currently selected process group displayed spawning tree highlighting members 
deemed current focus process group meaning default receive requests user interface 
example continue button pressed forwarded processes groups currently selected spawn tree continue execution 
vendor provided user interface components logical performance debugging require examination system data unique particular vendor 
provides mechanisms facilitate vendor provided widgets abstractly displaying data 
mechanism enables debugger server register modifications wishes user interface 
example server request change characteristics button add button menu callback functions registered 
button activated callback 
second mechanism supports creation vendor provided user interface widgets address space server 
order consistent local case remote ds client program main event loop dispatch user interface events interest server launched widget 
distributed debugger design issues course designing encountered problems stem distributed nature target computation debugged 
section describe problems solutions adopted 
distribution objects heterogeneous distributed computing environment debugger address mapping user requests operations provided set remote debugger servers aggregation responses remote servers produce result level abstraction helpful user 
tasks accomplished distribution manager working concert remote implementation ds objects discussed section 
effect distribution manager responsible scattering debugging requests gathering responses 
remote ds implementation takes care mechanics getting ds operations communicated network vendor ds implementation remote machine 
levels objects participate transforming user operations operating system requests target programs 
illustrated 
user interface objects handle widget callbacks transform requests distribution manager objects 
distribution manager objects represent collection distributed processes groups effectively take requests scatter members 
remote ds server objects address space distribution manager represent ds objects exist machine 
take requests hierarchical form flatten text put network 
remote ds client objects remote debugger address space take requests network back hierarchical form transforming normal ds requests 
vendor ds objects transform requests operating system calls 
objects section 
example follow request user interface gets propagated target interface user ds vendor ds client remote manager distribution process dsrs host server dsrs object display ds server remote host client group ds 
interaction distribution objects server host process client host process ds processes debugged 
suppose user pressed continue button user interface 
display object labelled performs cont operation current process group focus variable distribution manager process group object labelled 
object turn dispatches request member processes process groups 
case example object members remote ds process group labelled remote ds process labelled 
process group gets continue operation flattens request text form forwards host server object labelled transmission target machine 
object request sends network host client object request forwards remote ds client process labelled 
point flattened request gets hierarchical structure restored turned request ds process group object 
remote ds process performs flattening action object potentially different host server case 
continue request follows analogous path objects getting target process 
mechanism registering callbacks 
case object request path transforms callback registration recording passed callback function argument substituting functions arguments level chain 
monitored event occurs target chain callbacks back distribution manager level 
point distribution manager aggregates callbacks received callback user interface code appropriate time 
example ui wants notified target processes reached breakpoint distribution manager collect individual callbacks remote server ui callback received 
distribution mechanism works arrays distributed hpf preprocessor 
ui requests values array distribution manager map requests forward appropriate remote array objects 
values come back distribution manager assemble appropriate form user interface 
startup problem design goal able attach running computations transparent fashion 
user see difference functionality debugging collection processes launched debugger control attached debugger starting 
environment application process dynamically spawned remote machine debugger server available machine able attach new process 
accomplished communication library protocol distribution manager 
shows debugger control processes initiated result run request 
example user requested main program run locally machine 
response request propagated object technique described 
object forks creating root user computation process 
process spawns process machine spawns process machine rest example explain debugger takes control processes create directly 
process spawns process calls debugger library routine mp pid address space passing target machine name process id process machine 
debugging library records pieces information table process address space 
return function call process traps notified 
trap installed object run command issued 
trap propagated back object initiates request read spawn information recorded table 
information retrieved object creates object determines needs create new host server client pair order communicate process 
case existing host server client pair machine created 
request transmitted new communication link create object 
turn creates attached process 
procedure repeats process spawns process 
mechanism newly spawned process execution spawned order permit attachment object 
permit insert necessary event traps return mp 
new process temporarily stopped insertion special code crt init section 
event processes launched debugging session change necessary avoid temporary halting startup 
case event traps installed execution proceed normally 
note process creation information collected table address space spawning process 
order able toggle startup halting special purpose crt init section checks environment variable mp debug see supposed 
value environment variable propagated network part process creation 
implementation status implementation complete architecture shown require scores man years 
effort construction debugger servers target platforms 
efficient way complete part task rely vendors modify existing debugging systems provide services required ds 
design process ds took pains consider various vendors able modify existing code build server 
nas main role project far formulate client server interaction protocols implement prototype validation purposes 
currently prototype working ds protocol 
implementation includes breakpoints single stepping frame exit traps stack traces limited form expression evaluation 
code runs sun sparcstation sunos 
production version distributed debugger pvm programs 
include prototype user interface distribution manager remote ds package 
addition nas modifying pvm support distribution protocol outlined section 
writing modifications pvm crt implement startup scheme described section 
additionally designed host server host client 
starting problem interface user ds vendor ds client remote manager distribution dsrs process object display process ds server remote execution dm process ds host server host client dsrs process process process ds host server host client dsrs process process process ds spawn spawn process process process machine machine machine distribution manager prototype implementation 
ds server version gdb 
time conference intend able demonstrate working prototype distributed debugger pvm programs running network sgi workstations 
gdb server support remote debugging derived gdb code remote object package 
initial production version completed plan expand fronts 
extend ds server include abstractions multithreaded execution 
develop versions debugger mpi programs hpf programs 
described design implementation portable debugger parallel distributed programs 
inherent dependence debuggers machine architectures compiler generated symbol tables interaction operating systems porting debuggers costly 
design incorporates client server model order isolate non portable debugger code user interface 
precise definition protocol client server interaction permits high degree portability client user interface 
approach vendor focus developing server provides data necessary debugging user site develop interface tuned particular application domain 
debugger distributed computations realized locating servers machines target processes executing 
tion objects distribution manager perform scatter gather operations collection processes 
portability message passing implementations achieved protocol dictates interaction message passing library debugger 
permits debugger pvm mpi programs 
process abstractions debugging messagepassing programs easily adapted debug hpf programs source level 
allows debugger information hidden tool generated code meaningful manner 
acknowledgments course project received assistance people 
preliminary stages designing ds protocol studied existing debugging systems cooperation companies 
particular grateful don breazeal eric richards ray anderson callaghan intel ann mei chang sgi stuart grossman david henkel wallace tom lord jim cygnus support mike lloyd ken hansen frank maspar rich title thinking machines gary brooks convex steve charlie sun microsystems steve zimmerman charlie bryant kendall square research 
wish acknowledge supercomputing birds feather participants discussed version ds protocol 
addition people named participants included jeff brown los alamos national laboratory john may university california san diego matt halls ccc franke ibm research jim university kentucky seth tandem suresh kamal university sw louisiana dennis 
wish acknowledge help received colleagues nas 
management especially bruce blaylock tom provided encouragement support 
dave lou lopez nas parallel tools group provided insights distributed computations user interfaces 
preliminary user group rod merritt smith rob van der useful feedback prototype user interface 
globus sandy johan bill nitzberg john west provided helpful insights design review 
pam lou lopez suggestions improving presentation 
bibliography cheng robert hood 
protocols parallel distributed debugging 
forthcoming nas rnd technical report 
readers access monitor url appearance www nas nasa gov projects groups parallel tools projects html 
ming hao 
hp distributed debugger 
nas new technology seminar march 
heath 
visualizing performance parallel programs 
ieee software sept 
robert hood cheng 
accommodating heterogeneity debugger distributed computations 
submitted th hawaii international conference system sciences 
readers access access submitted version url www nas nasa gov projects groups parallel tools projects html 
intel 
ipsc ipsc interactive parallel debugger manual 
intel beaverton april 
charles koelbel david robert schreiber guy steele mary 
high performance fortran handbook 
scientific engineering computation series mit press cambridge mass 
john may berman 
designing parallel debugger portability 
proceedings ipps cancun mexico april 
john michael may extensible retargetable debugger parallel programs 
ph dissertation department computer science engineering technical report cs university california san diego 
paul 
ned network extensible debugger 
proceedings summer usenix san antonio 
mpi committee 
message passing interface draft 
jan 
adrian tim reilly 
toolkit intrinsics programming manual 
reilly associates sebastopol ca 

panel presentation debugging workshop high performance computers supercomputing portland nov 
sunderam 
pvm framework parallel distributed computing 
concurrency practice experience 
thinking machines 
prism user guide 
thinking machines cambridge ma dec 
yan 
performance tuning aims automated instrumentation monitoring system multicomputers 
proceedings th hawaii international conference systems sciences acm jan 
