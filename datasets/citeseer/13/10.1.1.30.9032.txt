deforestation transforming programs eliminate trees philip wadler university glasgow algorithm transforms programs eliminate intermediate trees 
algorithm applies term containing functions definitions syntactic form suitable incorporation optimising compiler 
intermediate lists generally intermediate trees basis bane certain style programming functional languages 
example compute sum squares numbers write program sum map square upto key feature style functions upto map sum encapsulate common patterns computation consider numbers apply function element sum collection elements 
intermediate lists basis style glue holds functions 
case list connects upto map list connects map sum 
intermediate lists bane exact cost run time 
strict evaluation program requires space proportional lazy evaluation space problem list element generated needed list consumers producers behave coroutines 
lazy evaluation list element requires time allocated examined deallocated 
transforming eliminate intermediate lists gives square author address department computing science university glasgow glasgow qq scotland 
electronic mail wadler cs glasgow ac uk 
earlier version appeared european symposium programming nancy france march springer verlag lncs 
version appears theoretical computer science 
program efficient regardless evaluation order operations list cells eliminated 
presents algorithm transforms programs eliminate intermediate lists intermediate trees called deforestation algorithm 
form function definition uses intermediate trees characterised called treeless form 
algorithm transform term composed functions treeless form function treeless form 
example sum map square upto treeless definitions applying algorithm program yields program equivalent 
algorithm appears suitable inclusion optimising compiler 
treeless form easy identify syntactically transformation applies term subterm composed treeless functions 
algorithm suitable lazy language works strict language case embarrassing effect transforming undefined program returns value 
treeless form deforestation algorithm steps 
step presents pure treeless form order lazy functional language form intermediate values whatsoever allowed 
restrictive practical uses second step extends treeless form allowing marking trees type indicate intermediate values may remain 
third step extends results higher order functions treating functions macros 
higher order macros may applications 
prototype transformer implemented kei davis added augustsson johnsson lml compiler 
prototype handles blazed treeless form demonstrates transformer practice 
thorough evaluation utility ideas await implementation handles higherorder functions macros 
outgrowth previous transformations eliminate intermediate lists 
new approach includes improvements 
definition treeless form simpler definition form 
second deforestation algorithm applies terms composed solely treeless functions corresponding algorithm applies semantic condition preorder traversal verified 
third treeless transformer source source converts functional programs functional programs transformer converts functional programs imperative programs 
class treeless functions class functions 
ways general allows functions trees flip function defined ways restricted apply terms traverse data structure twice sum xs length xs 
functions evaluate constant bounded space treeless functions may space bounded depth tree 
program transformation simple loop instantiate unfold simplify fold 
idea seminal burstall darlington turchin supercompiler previous :10.1.1.19.4684
equally central deforestation instantiate step replaced manipulation case terms simplifies bookkeeping simplifies presentation algorithm 
alex ferguson investigated variant deforestation uses instantiation place case terms 

remainder organised follows 
section describes firstorder language 
section introduces treeless form 
section outlines deforestation algorithm sketches proof correctness 
section extends treeless form include 
section describes treat higher order functions macros 
section concludes 
language order language grammar variable constructor application function application case delta delta delta case term pattern application called arguments case term called selector called branches 
function definitions form example definitions shown 
patterns case terms may nested 
methods transform case terms nested patterns ones nested patterns known 
language typed hindley milner polymorphic type system lml languages reader assumed familiar type system 
constructor function fixed arity example constructor nil arity constructor cons arity function flip arity 
language order terms types written notation higher order language facilitate extension section 
traditionally term said linear variable appears 
example append xs append ys zs linear append xs xs 
definition extended slightly linear case terms variable may appear selector branch variable may appear branch 
example definition append linear ys appears branch 
intended operational semantics language normal order leftmost outermost graph reduction 
term said efficient possible instantiation free variables requires steps reduce second 
list ff nil cons ff list ff tree ff leaf ff branch tree ff tree ff append list ff list ff list ff append xs ys case xs nil ys cons xs cons append xs ys flip tree ff tree ff flip zt case zt leaf leaf branch xt yt branch flip yt flip xt example definitions treeless form set function names 
term treeless respect linear contains functions argument function application selector case term variable 
words writing tt treeless terms respect tt tt tt case tt delta delta delta tt addition tt linear collection function definitions treeless right hand side treeless respect definitions append flip treeless 
rationale definition 
restriction argument function selector case term variable guarantees intermediate trees created 
terms flip flip zt flip zt returns intermediate tree 
hand constructor applications subject restrictions 
allows terms branch flip yt flip xt trees returned flip yt flip xt intermediate part result 
linearity restriction guarantees certain program transformations introduce repeated computations 
burstall darlington term unfolding describe operation replacing instance left hand side equation corresponding instance right hand side 
unfolding definition non linear right hand side risks duplicating term expensive compute making program efficient 
instance classic example non linear function square theta term expensive compute preferable program contain square unfolded equivalent theta hand alternative definition square exp theta log square linear harm unfolding square get exp theta log 
insisting treeless definitions linear guarantees unfolded sacrificing efficiency 
loss sharing avoided terms 
example definition square unfolding square yields theta term treeless contains intermediate tree case intermediate tree integer harmless 
section extends treeless form allow intermediate terms types int uses terms purpose 
types desired eliminate intermediate terms list ff tree ff doesn help point unfolding bring argument function body allow transformations defeats purpose 
treeless property definition function defined 
gives definitions function flatten 
definition flatten treeless definition flatten 
unfortunately function flatten tree list lists treeless definition see section 
possible main result 
deforestation theorem 
composition functions treeless definitions effectively transformed single function treeless definition loss efficiency 
algorithm carries effective transformation called deforestation algorithm 
input deforestation algorithm linear term consisting variables functions treeless definitions 
output equivalent treeless term possibly empty collection treeless definitions 
statement guarantees loss efficiency fact gain original term contains intermediate tree 
flatten list list ff list ff flatten xss case xss nil nil cons xs xss append xs flatten xss flatten list list ff list ff flatten xss case xss nil nil cons xs xss flatten xs xss flatten list ff list list ff list ff flatten xs xss case xs nil flatten xss cons xs cons flatten xs xss non treeless treeless definition flatten gives examples applying deforestation algorithm compositions append append xs ys zs flip flip zt 
length xs length ys original append term takes time compute transformed version takes time compute 
transformation introduces new treeless definitions observe equivalent append incidentally append xs append ys zs transformed exactly term modulo renaming product deforestation algorithm provides proof append associative 
characterisation treeless definitions purely syntactic easy user determine deforestation applies 
user need familiar details deforestation algorithm 
deforestation algorithm heart deforestation algorithm set rules shown 
write denote result converting term treeless form 
required compute value 
simple examination shows rules cover possible terms kinds term variable constructor application function application case term covered directly case terms possibilities selector considered 
clear rules preserves equivalence 
rules basic form matches treeless form components converted recursively 
append append xs ys zs transforms xs ys zs xs ys zs case xs nil ys zs cons xs cons xs ys zs ys zs case ys nil zs cons ys cons ys zs flip flip zt transforms zt zt case zt leaf leaf branch xt yt branch xt yt results applying deforestation algorithm rules function application unfolded yielding equivalent term converted recursively 
rules case term simplified result converted recursively 
rule valid variable pm occurs free branches possible rename bound variables condition applies 
problem algorithm terminate 
example applying rules shown 
shows transformation term flip flip zt defined case delta delta delta case delta delta delta case delta delta delta case delta delta delta case delta delta delta defined case case delta delta delta pm delta delta delta case case delta delta delta delta delta delta pm case delta delta delta transformation rules deforestation algorithm steps shown final term reached case zt leaf leaf branch xt yt branch flip flip xt flip flip yt contains renamings original expression rules may applied 
trick avoiding infinite regress introduce appropriate new function definitions 
example requires function satisfies equation zt flip flip zt expansion flip flip zt reaches form occurrences match right hand side equation 
flip flip zt case flip zt leaf leaf branch xt yt branch flip yt flip xt case case zt leaf leaf branch xt yt branch flip yt flip xt leaf leaf branch xt yt branch flip yt flip xt case zt leaf case leaf leaf leaf branch xt yt branch flip yt flip xt branch xt yt case branch flip yt flip xt leaf leaf branch xt yt branch flip yt flip xt case zt leaf case leaf leaf leaf branch xt yt branch flip yt flip xt branch xt yt case branch flip yt flip xt leaf leaf branch xt yt branch flip yt flip xt case zt leaf leaf branch xt yt branch flip flip xt flip flip yt case zt leaf leaf branch xt yt branch flip flip xt flip flip yt deforestation flip flip zt replaced corresponding left hand side giving zt case zt leaf leaf branch xt yt branch xt yt completes transformation term flip flip zt equivalent treeless term zt treeless definition just derived 
new definitions introduced 
infinite sequence steps contain applications rules unfold rules 
sufficient take potential right hand sides term form encountered just applying rules 
keep list terms 
term encountered second time create appropriate function definition replace instance term corresponding call function 
note sufficient new term renaming previous term 
example transformation flip flip xt renaming flip flip zt replaced corresponding call xt 
new term renaming general instance previous term guarantees resulting function call form treeless term 
simple inductive proof show computation terminates resulting term treeless form term equivalent define depth term zero variable greater maximum depth subterms 
sketched proof legal input deforestation algorithm bound depth terms form encountered applying rules 
terms bounded depth finite number constructor function symbols involved finite number different terms modulo renaming 
eventually renaming previous term encountered algorithm guaranteed terminate 
mentioned previously linearity guarantees unfold rules introduce repeated computation 
easy verify rules duplicate computations derived treeless term efficient original term 
remains show bound depth terms encountered deforestation algorithm 
define terms order follows term order variable term order form tt tt tt tt treeless term tt tt terms order free variables tt term order fold substitution treeless terms term treeless iff order 
lemma applying rules term order results term order proof induct structural induction form term case rules 
cases rules typical 
case arguments treeless function application variables function application order form tt tt arguments order defined tt applying rule yields term tt tt tt order required 
case selector treeless case term variable left hand side rule order form case tt tt tt delta delta delta tt form tt form tt tt free variables tt substituted bound 
applying rule yields term tt tt tt tt tt order required 
legal input deforestation algorithm term consisting functions variables 
term order equal depth 
maximum depths right hand sides function definitions referred directly indirectly input 
straightforward show term encountered deforestation algorithm depth bounded theta guarantees deforestation algorithm terminates applied legal input completes proof deforestation theorem 
may useful apply deforestation algorithm terms legal inputs 
case termination guaranteed terminate algorithm returns equivalent treeless term 
example applying algorithm non treeless definition flatten yields renaming treeless definition flatten blazed treeless form definition treeless form previous section henceforth called pure treeless form quite restrictive 
consider definition upto int int list int upto case true nil false cons upto example upto returns 
infix notation legibility may taken equivalent 

function name similarly 
definition pure treeless form contains selector function argument variables second linear appears selector twice second branch 
cases offending intermediate tree really integer 
accommodate definitions upto terms divided kinds marked phi psi 
forestry operation marking tree making cut bark mark phi psi called term 
idea deforestation eliminate fell intermediate terms trees blazed phi intermediate terms blazed psi may remain 
assigned solely basis type terms type blazed way 
terms type list tree blazed phi terms type int bool blazed psi 
type term type variable ff blazed psi sensible value variable type internal structure manipulated 
writing phi indicates type blazed phi writing psi indicates type blazed psi 
definition pure treeless form places intermediate values potentially appear function arguments case selectors restricted variables terms required linear 
blazed treeless form places intermediate values potentially appear restricted variables blazed psi terms required linear variables blazed phi 
yields new grammar treeless terms respect set function names tt vv tt tt phi vv vv phi case vv tt delta delta delta tt phi vv vv vv psi vv vv psi case vv vv delta delta delta vv psi addition tt vv linear variables blazed phi note tt psi equivalent vv psi vv phi equivalent phi collection definitions treeless right hand side treeless respect definition upto definitions treeless 
deforestation theorem carries virtually unchanged blazed deforestation theorem 
composition functions blazed treeless definitions effectively transformed single function blazed treeless definition loss efficiency 
examples applying blazed deforestation algorithm shown 
accommodate deforestation algorithm extended follows 
course transformation sub term arises blazed psi sub term may extracted transformed independently 
convenient introduce notation psi psi represent result extraction 
term introduced extraction bound variable blazed psi 
example applying extraction term sum squares upto yields term sum squares upto transformation applying extraction term sum square squares upto sum list int int sum xs sum xs sum int list int int sum xs case xs nil cons xs sum xs squares list int list int squares xs case xs nil nil cons xs cons square squares xs tree int int xt case xt leaf branch xt yt xt yt tree int tree int xt case xt leaf leaf square branch xt yt branch xt yt example definitions sum squares upto transforms case true false square xt transforms xt xt case xt leaf square branch xt yt xt yt results applying blazed deforestation algorithm yields term square sum squares upto inner term renaming inner term previous expression cause appropriate new function defined sum squares upto calls replace inner terms 
extraction forces arguments function blazed psi variables 
necessary terms linear variables blazed psi unfolding replaces variables variables duplication term expensive compute occur 
psi psi psi psi psi psi case psi psi psi delta delta delta case psi psi psi delta delta delta psi psi psi psi case psi psi delta delta delta psi psi case delta delta delta additional rules blazed deforestation algorithm definition added rules 
rules supersede rules respectively case result arguments function blazed psi 
case necessary unfold application simply left place unchanged 
particular rules cover applications primitive functions unfolded anyway 
rules manage occurrences 
rule valid occur free branches possible rename bound variables condition applies 
transformation complete terms form psi tt psi tt may removed follows 
occurs tt term may replaced tt tt 
occurs introduce new function defined tt replace term tt tt blazed psi application treeless term 
alternatively simply add terms language extend definition treeless term include terms form 
straightforward extend previous results show modified deforestation algorithm satisfies requirements blazed deforestation theorem 
higher order macros user point view attractive features programming functional style higher order functions 
implementor program transformation system deforestation algorithm order languages may easier cope 
section shows expressiveness higher order functions achieved order language treating higher order functions macros 
idea may useful variety applications easier deal order language power higher order language desirable 
goguen notion order languages suffice preferable possible 
achieves effect similar higher order macros parameterised modules order language obj 
step add terms language 
form term function definitions 
translated back equation language straightforward manner technique called lambda lifting 
particular contain free variables term just equivalent definitions added top level list definitions systematic renaming functions scope clause avoid name conflicts 
second step add higher order macro definitions 
form look ordinary definitions place 
term may contain variables place function names applications longer restricted arity 
hindley milner type system 
formal parameters may ground type int list ff function type int int higher order type int int int 
restriction higherorder macros recursive 
lack recursion combined hindley milner type discipline guarantees higher order definitions expanded compile time risk non terminating expansion 
lack recursion may overly restrictive 
doesn rule higher order functions map fold 
doesn order recursion possible facility defined 
definitions map fold recursion limited order functions definitions write terms sum map square upto map sum map map square xss map square ffi map cube xs map square ffi cube xs expands order program transformed deforestation algorithm preceding sections 
mechanism defined covers uses higher order functions 
particular data structures order possible instance list functions 
map ff fi list ff list fi map xs xs xs case xs nil nil cons xs cons xs fold ff fi ff ff list fi ff fold xs xs xs case xs nil cons xs xs sum list int int sum fold ffi fi fl 
ff fi ff fl ffi example higher order definitions higher order macros provide way extend deforestation algorithm order language may valuable applications 
worth proven 
alternative formulate version deforestation theorem applies higher order functions directly need treat macros 
oft repeated justification study functional programming functional programs eminently suited program transformation 
program transformation star member repertoire writers functional compilers 
example steps lml compiler involve transformation techniques 
deforestation appears attractive candidate application program transformation compiler technology 
important feature deforestation algorithm centred easily recognised class definitions treeless form 
eases task compiler writer 
importantly eases task compiler user easy characterise sort expressions optimised sort optimisations performed 
desirable directions 
treeless form may generalised 
possible generalisation rests observation function arguments second argument append appear directly function result 
arguments treated way arguments constructors definition treeless form 
previously noted function flatten tree treeless definition generalisation 
related ideas discussed 
second practical experience acquired order assess better utility ideas 

am grateful kei davis acting sounding board undertaking implement ideas reported cordelia hall catherine lyons comments 
part performed oxford university research fellowship icl 
augustsson compiling pattern matching 
proceedings conference functional programming languages computer architecture nancy france september 
lncs springer verlag 
augustsson johnsson chalmers lazy ml compiler 
computer journal april 
burstall darlington transformation system developing recursive programs 
journal acm january 
davis deforestation transformation functional programs eliminate intermediate trees 
sc 
dissertation programming research group oxford university september 
damas milner principal type schemes functional programs 
proceedings acm symposium principles programming languages january 
ferguson wadler deforestation 
proceedings glasgow workshop functional programming isle august 
research report department computing science university glasgow february 
goguen higher order functions considered unnecessary higher order programming 
technical report sri csl sri international january 
hindley principal type scheme object combinatory logic 
trans 
am 
math 
soc 
pp 
december 
milner theory type polymorphism programming 
journal computer system sciences 
peyton jones implementation functional programming languages prentice hall 
turchin turchin experiments supercompiler 
proceedings acm symposium lisp functional programming pittsburgh pennsylvania august 
wadler better laziness lazy evaluation garbage collection compile time 
proceedings acm symposium lisp functional programming austin texas august 
wadler better laziness ii composing functions 
proceedings workshop programs data objects copenhagen october 
lncs springer verlag 
wadler efficient compilation pattern matching 

wadler concatenate vanishes 
note distributed fp electronic mailing list december 

