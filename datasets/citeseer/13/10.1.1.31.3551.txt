nested datatypes richard bird lambert meertens programming research group oxford university wolfson building parks road oxford ox qd uk bird comlab ox ac uk cwi department computer science utrecht university box gb amsterdam netherlands lambert cwi nl 
nested datatype known non regular datatype parametrised datatype declaration involves different instances accompanying type parameters 
nested datatypes ignored functional programming turning theoretically important useful practice 
aim suggest functorial semantics datatypes associated calculational theory mirrors extends standard theory regular datatypes 
elegant generic proposed approach appears limited limitations discussed 
bird song ye may learn nest 
marriage geraint consider datatype definitions legal haskell declarations data list nill list data nest consn nest data bush bush bush type list describes familiar type cons lists 
elements second type nest cons lists lists homogeneous step list entries squared 
example brackets commas constructors consn value type nest int nest entries taken contain fifteen integers 
third type bush step list entries 
example value type bush int bush contains entries element int second element bush int third element bush bush int 
general th entry counting list type bush type bush datatype list example called regular datatype nest bush examples non regular datatypes 
mycroft calls schemes polymorphic recursions 
prefer term nested datatypes 
regular datatype declaration occurrences declared type right hand side defining equation restricted copies left hand side recursion tail recursive 
nested datatype declaration occurrences datatype right hand side appear different instances accompanying type parameter recursion nested 
language haskell ml hindley milner type discipline simply possible define useful functions nested datatype datatype declarations perfectly legal 
applies extensions languages particular haskell allowed declare types problematic functions type system checking inferring types 
sure larger class functions defined define important generic functions fold nested types 
hand versions hugs ghc glasgow haskell compiler support called rank type signatures universally quantify type constructors types see 
signatures construct functions nested datatypes wants 
return point 
rank type signatures part standard haskell 
upshot current situation nested datatypes neglected functional programming 
conceptually important evidence emerging usefulness functional data structure design 
brief illustration offer section 
regular datatypes hand bread butter functional programming 
polytypic programming mathematics program construction regular datatypes focusing small number generic operators fold defined types 
basic idea reviewed define regular datatype initial object category algebras appropriate functor idea appeared earlier categorical literature instance 
consequence polytypic programs parametrised regular functors 
different instances functors yield concrete programs know love 
main aim investigate form appropriate functorial semantics nested datatypes take putting poly polytypic 
appealing idea replace order functors higher order functors functor categories 
part calculational theory remains 
limitations approach expressive power lost care needed order standard functorial semantics regular datatypes may recovered special case 
important note consider datatype declarations containing function spaces see ways dealing function spaces datatype declarations 
example small example show potential nested datatypes 
example suggested oege de moor 
de bruijn notation lambda expressions bound variables introduced lambda abstractions represented natural numbers 
occurrence number expression represents bound variable introduced th nested lambda abstraction 
example represents lambda term hand represents lambda term free variable 
way capture scheme nested datatype data term var app term term abs term bind data bind zero succ elements term free variables type var applications abstractions 
abstraction outermost bound variable represented var zero var succ zero 
free variables abstraction containing nested bindings type var succ 
type term nested bind appears parameter term right hand side declaration 
example may represented term type term char abs abs app var zero app var succ succ var succ zero closed lambda terms containing free variables elements term empty empty empty type containing members 
function takes term variable abstracts variable defined way term term abs lift function lift defined lift term term bind lift var var zero var succ lift app app lift lift lift abs abs lift succ fi reduction term implemented reduce term term term reduce abs subst subst term bind term term subst var zero subst var succ var subst app app subst subst subst abs abs subst term succ function term maps term term 
term term term var var term app app term term term abs abs term bind subsidiary function bind maps elements bind bind 
bind bind bind zero zero bind succ succ routine induction show reduce var terms type term type modulo requirement bind declared equality types elements compared equality definition lift programs acceptable haskell provided type signatures included part definitions 
datatypes initial algebras standard semantics see inductive datatypes parametrised type parameters employs functors type theta delta delta delta theta product occurrences simplicity consider case 
category arbitrary essentially contain finite sums products colimits ascending chains 
category fun known set objects sets arrows typed total functions needed theory 
illustrate declaration list datatype associated binary functor action objects theta defined theta introducing unary functor declaration list rewritten form data list ff gamma list ff list list particular functor associated list arrow ff takes form nill nill list theta list list declaration interpreted assertion arrow ff object list values typing 
precisely arrow assertion unique arrow list satisfying equation delta ff delta id unique arrow denoted fold arrow called catamorphism notation fold algebraic terms list carrier initial algebra ff functor fold unique homomorphism initial algebra surprising number consequences flow characterisation 
particular fold ff identity arrow list show ff isomorphism inverse fold id ff 
result interpret declaration list assertion isomorphism list fixed point equation 
type constructor list functor defining action arrow list fold ff delta id functional programming list written map expanding definition fold list delta ff ff delta list equation states ff natural transformation type ff list list 
important consequence characterisation allows introduce new functions structural recursion datatype 
simple example fold zero plus sums elements list numbers 
functors built constant functors type functors list identity projection functors coproduct product composition operations called regular functors 
details approach consult 
nest bush theory breaks 
example introducing theta squaring functor corresponding functorial declaration nest data nest ff gamma nest ff applies left components consn right components 
clear class algebras ff asserted initial 
higher order semantics appealing semantics dealing datatypes nest bush certain limitations 
give scheme point limitations give alternative scheme overcomes 
idea higher order functors type nat nat nat category objects functors type arrows natural transformations 
calligraphic letters higher order functors small greek letters natural transformations 
category arbitrary fun gives needs 
examples 
example 
declaration list associated higher order functor defined objects functors theta id theta equations define functor functor functor expressed briefly form id theta constant functor delivers object objects arrow id arrows id denotes identity functor 
coproduct product theta operations applied pointwise 
action arrows natural transformations defined similar style id id theta id delivers identity arrow id object 
id id delta delta functor 
previous declaration list written form data list ff gamma list interpreted assertion ff initial algebra 
example 
declaration nest associated functor defined objects functors theta qa id theta qf squaring functor 
briefly id theta delta delta denotes functor composition convenient write composition fq brevity 
action arrows natural transformations defined id id theta jq jq fq gq example 
declaration bush associated functor defined functors id theta delta natural transformations id id theta operator denotes horizontal composition natural transformations 
fh gn defined delta 
particular ff gg consider declaration nest rewrite form data nest ff gamma nest assertion ff initial algebra means arrow unique arrow nest satisfying equation delta ff delta unique arrow denoted fold 
express equation haskell 
note particular functor associated nest arrow takes form id theta fq type component arrow delivering constant type arrow type 
write fold fold consn xps fold xps principal type inferred fold hindley milner type discipline fold programs denied 
possible express type fold form acceptable standard haskell type checker 
hand ghc glasgow haskell compiler declare type fold rank type signature fold nest declaration uses local universal quantification abstraction type constructor 
signature called rank type signature 
asserted type function fold passes ghc type checker 
observe proposed functorial scheme previous regular datatypes operator fold takes natural transformations natural transformations 
particular fact nest functor part assertion nest fixed point arrow nest defined instance fold natural transformation right type 
typing ff nest nest means equation holds nest delta ff ff delta nest express equation point level nest nest consn xps consn nest square xps square action arrows functor fact nest uniquely defined equations consequence assertion ff natural transformation 
exactly characterisation works bush 
particular arrow bush satisfies bush bush bush bush examples illustrate folds nest bush define list natural transformation concat list delta list list concat delta list list delta list ff list delta concat delta list list list id theta fq higher order functor associated nest function listify defined listify fold ff list delta concat delta list type listify nest list example listify takes converse function list nest defined fold ff nest delta nest ffi id theta higher order functor associated list ffi type ffi id example takes example define oe bush oe bush oe bush delta bush delta bush ff bush delta bush oe bush bush id theta fq functor associated nest fold ff bush delta bush oe type nest bush 
example sends problem basic problem higher order approach described concerns expressive power 
part problem generalise standard semantics regular datatypes particular enable standard instances fold datatypes 
see compare semantics datatype list standard semantics fold list theta example fold zero plus list int int sums list integers zero int constant delivering plus int theta int int binary addition 
example fold nil cat list list list concatenates list lists function called concat 
binary operator cat type cat list theta list list concatenates lists 
new semantics fold list id theta longer sum list integers fold plus natural transformation right type 
fold zero plus typed require plus type plus id theta kint kint plus theta int int plus ignore argument 
worse define concat list delta list list instance fold natural transformation 
binary concatenation operator cat type cat id theta list list ignore argument 
fold nil cat typed 
hand ff nest delta nest ffi type id theta nest nest definition previous section legitimate 
putting problem way standard semantics fold defined providing arrow fixed general elevate natural transformation parametric alternative fortunately lists regular datatypes way particular difficulty 
isomorphism defining list functor list delta satisfies isomorphism list delta id theta list delta theta list delta list delta isomorphic higher order datatype declared data ff gamma theta write functor right higherorder binary functor type nat theta nat nat higher order datatype natural transformation fold takes arrow theta type fold change list delta signature useful fold operator lists 
particular fold zero plus list delta kint kint zero plus kint theta kint kint arrow fold zero plus nat natural transformation list delta kint list int component standard fold fold zero plus list int int similar device folds standard semantics definable folds new semantics simply lifting associated algebra natural transformation constant functors 
precisely define type fixed point regular functor 
furthermore define fixed point fg fg gx hx objects take algebra construct natural transformation ka kb kb setting kf type correct ka kb ka kb kb fold type fold ka kb satisfy fold fold isomorphism ka type 
generalise defining expression list replacing occurrences list generalise replacing occurrences id functor idea nested datatypes nest time nest delta id theta nest delta delta theta nest delta delta type nest delta quite different datatype defined data ff gamma theta delta example nest list type nests lists th entry nest type list 
hand th entry nest type list type list 
dramatically type nest int gives nest integers kint isomorphic ordinary lists integers generally ka constant functor list 
hand nest id higher order view generalisation previous 
reductions replacing higher order unary functors higher order binary functors enables integrate standard theory regular datatypes proposed scheme 
unfortunately higher order approach elegant generic limited scope applicability nested datatypes restricted folding natural transformations 
example sum nest integers fold nests 
computation instance useful general pattern called reduction 
possible define reductions completely generically regular types see know done nested datatypes 
way sum nest integers nest summing result fold lists 
generally strategy reduce nest arbitrary binary operator phi seed example reduces phi phi phi delta delta delta phi phi argued strategy reducing nests unsatisfactory structure nest entries reflected way phi applied 
better introduce second operator omega reduce nest omega phi omega phi phi phi omega omega phi obtain way reducing nest 
pattern computation factored fold lists reduction list fold omega delta reduce phi phi function reduce phi type nest list example applied nest reduce phi produces phi phi phi phi problem defining reduce 
functional style define reduce op nill reduce op consn xps reduce op nest op xps effect reduce op applies sequence functions corresponding entries nest id op op delta square op op delta square op delta square square op th element sequence type op reduction bush proceeds differently reduce op reduce op op reduce op bush reduce op see systematic way unifying reductions nested datatypes relating folds previous sections 
approach way higher order folds reductions previous section unified method desirable calculational point view remains seen 
requires different complicated notion folding nested involves infinite sequence appropriate algebras replace infinite sequence differently typed instances constructors datatype 
briefly sketch construction type nest basic idea provide infinite sequence algebras replace constructor ff consn nest instance ff nest nest natural number theta regular datatypes application fold term viewed systematic replacement constructors corresponding components followed evaluation result 
idea adopted nested datatypes 
regular datatypes occurrence constructor term typing true nested datatypes need provide collection replacements 
detail consider datatype defined data cons qb gb qa qb datatype coinductive infinite nested datatype 
th entry value type algebra type fs define fold fs nest gb equation fold fs delta ff head fs delta id fold tail fs head cons fs tail cons fs fs equivalently fold cons fs delta ff delta id fold fs illustrate style fold suppose define generate nest generate cons ff delta id generate square fold generate nest nest fact nest fold generate functorial action nest arrows recovered fold 
proof nest delta nest delta nest coinduction 
example suppose id gq natural transformation ma na 
define repeat repeat cons repeat type repeat 
relationship higher order folds previous sections current style folds fold fold repeat particular fold repeat ff id nest nest define reductions instance new folds 
suppose qa define ka red id red cons delta id red delta square fold nest claim reduce fold results investigation nested datatypes incomplete aspects unsatisfactory 
higher order folds attractive corresponding calculational theory familiar lack sufficient expressive power 
approach sketched previous section nest general brings machinery 
furthermore clear right extension nested datatypes bush 
ignored crucial question foregoing discussion guarantee functors nest fact exist fixed points defining equations 
categorical ensuring existence initial algebra complete category provided continuous colimit chain 

ff 
delta delta delta category fun needed fun complete fact bi complete regular functors fun 
proof polynomial functors extension type functors 
category nat fun inherits completeness base category fun see 
believe regular higher order functors continuous proof literature existence datatypes nest bush problematic 
adopt higher order approach need give systematic account reductions nested datatype 
alternative method previous section proves useful need give systematic account method arbitrary inductive nested datatype coinductive nested datatypes 
see idea proposed datatype certain kind functor called relator membership relation 
needs seen notion membership extended nested datatypes authors ian jeremy gibbons oege de moor mark jones simon peyton jones comments discussions 
particular debt owed ross paterson commented earlier draft 
due anonymous referees suggested numerous improvements 

bird de moor 
algebra programming 
international series computing science 
prentice hall 

bird hoogendijk de moor 
generic programming relations functors 
journal functional programming 

connelly lockwood morris 
generalisation trie data structure 
mathematical structures computer science 

oege de moor paul hoogendijk 
datatype 
technical report department maths computing science eindhoven university technology 

paul hoogendijk 
generic theory data types 
ph thesis eindhoven university technology 

fegaras sheard 
revisiting catamorphisms datatypes embedded functions 
rd acm sigplan sigact symposium principles programming languages 
association computing machinery 

peter freyd 
algebraically complete categories 
springer verlag lecture notes mathematics vol 

hagino 
category theoretic approach data types 
phd thesis laboratory foundations computer science university edinburgh uk 
technical report ecs lfcs 

jeuring 
polytypic pattern matching 
peyton jones editor functional programming computer architecture pages 
association computing machinery 

lambek 
fixpoint theorem complete categories 
mathematische zeitschrift 

saunders mac lane 
categories working mathematician 
graduate texts mathematics 
springer verlag 

malcolm 
data structures program transformation 
science computer programming 

malcolm 
algebraic data types program transformation 
ph thesis university groningen netherlands 

manes arbib 
algebraic approaches program semantics 
texts monographs computing science 
springer verlag 

lambert meertens 
calculate 
herbert doaitse swierstra editors programming languages implementations logics programs proceedings eighth international symposium plilp volume lncs pages 
springer verlag 

meijer hutton 
bananas space extending fold unfold exponential types 
peyton jones editor functional progamming languages computer architecture pages 
association computing machinery 

mycroft 
polymorphic type schemes recursive definitions 
international symposium programming volume lncs pages 
springer verlag 

okasaki 
purely functional data structures 
ph thesis school computer science carnegie mellon university 

okasaki 
catenable double ended queues 
proceedings acm sigplan international conference functional programming icfp pages 
acm 

peyton jones launchbury 
explicit quantification haskell 
see www dcs gla ac uk people personal simonpj 
