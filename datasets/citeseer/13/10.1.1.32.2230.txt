sml functional database programming language disjunctive information applications gunter bell laboratories mountain avenue murray hill nj mail research att com leonid libkin department computer information science university pennsylvania philadelphia pa mail libkin saul cis upenn edu describe functional database language sml handling disjunctive information database queries implementation top standard ml 
core language power nested relational algebra augmented sets deal disjunctive information 
sets sets tuples freely combined create objects gives language greater flexibility 
give examples queries require disjunctive information querying incomplete independent databases show language answer queries 
system runs top standard ml database objects values system benefits combining sophisticated query language full power programming language 
sml includes number primitives deal bags aggregate functions 
configurable user defined base types 
language implemented library modules standard ml 
allows user build just database language independent system interface systems built standard ml 
give example connecting sml existing interactive theorem prover 
key words database programming languages disjunctive information functional languages incomplete databases independent databases theorem provers 
part done author visiting bell laboratories 
partial support provided nsf iri doctoral fellowship 
reasons disjunctive information may databases 
arises areas design planning scheduling shown 
example consider design template engineer 
template may indicate component built module module template structurally complex object component collection containing meaning usual database interpretation sets turn similar structure 
designer employing template allowed query structure template example asking choices component hand designer allowed query possible completed designs asking cheap completed design 
problem arises different guise attempting plan proof strategy goal interactively theorem prover database related theorems information 
details example see section 
example arises problem combining number databases querying number independent databases 
assume databases combined 
people names social security numbers ages salaries names social security numbers ages departments 
suppose john ss recorded age database 
know john simultaneously combined database need store fact john 
uncertainty database comes conflicting information shows form disjunctive information 
describe functional language sml querying databases incomplete disjunctive information 
handle disjunctive information allow new type constructor sets name sml 
sets studied 
original motivation sets came applications design planning scheduling areas 
sets essence disjunctive information distinguished having distinct interpretations 
set treated structural level conceptual level 
structural level concerns precise way set constructed 
conceptual level sees set representing object equal member set 
example set structurally collection numbers conceptually 
angle brackets hi sets fg usual sets 
example query possible choices components query structural level query asking completed design cost conceptual level query 
language support 
describe approach language design 
language functional paradigm 
design functional database query languages studied extensively past years proved useful 
see example :10.1.1.50.9046
theoretical foundations studying languages 
functional languages certain advantages logical languages complex objects 
clear syntax need example give complicated syntactic rules range restriction col typechecked semantics generally easy define allow limited form polymorphism 
entries databases allowed sets possibly containing sets databases longer normal form 
deal nested relations complex objects 
language describe contains nested relational algebra sublanguage 
standard presentations nested relational algebra cumbersome syntax 
decided follow approach gives clean simple language precisely expressive power nested relational algebra 
relational language introduced earlier languages lists generalized collection types :10.1.1.33.5381
language obtained nested relational algebra adding appropriate primitives dealing sets called nra 
problems addressed language design mechanism incorporating structural conceptual queries language 
shown conceptually equivalent objects reduced object repeated applications just nra operators described 
induced normal form independent sequence applications operators 
type object type normal form easily 
take conceptual meaning object normal form rewriting induced operators 
consequently conceptual query language built extending structural language single operator normal takes input object normal form 
query conceptual level simply query performed normal forms 
system sml includes just nra 
normalization primitive 
limited arithmetic added elevate language expressive power bag language 
show bags certain aggregate functions encoded 
sml allows programming structural recursion sets sets 
system extensible user defined base types 
provides mechanism converting user defined functions base types functions fit type system sml 
gives way complex objects sml values 
necessary example sml part larger system sml query part larger computation needs analyze result query proceed 
sml comes equipped libraries derived functions helpful writing programs advanced applications querying independent databases 
chose standard ml sml basis implementation order combine simplicity nra queries features functional programming language 
sml benefits number ways 
sml queries may involve involved arbitrary sml procedures 
usefulness enhanced presence higher order functions sml allowing sml functions arguments queries queries arguments sml functions 
example value interaction see section 
sml implemented library modules sml 
allows user build just database language independent system interface systems built sml 
section take advantage ability connect sml existing interactive theorem prover 

stand system version sml implemented library loaded interactive system sml interactive system 
interacts sml entering declarations expressions evaluated top level read evaluate print loop sml 
results bound sml identifiers 

sml module system implementation different parts language virtually independent easy change touching rest system 
particular implementation internal sml feature changed altering user interface 
system suitable querying small medium size databases hundreds records fairly common 
extend capabilities handle large databases certain changes need particular optimizations presence disjunctive information need added sml 
just mentioned due modularity implementation changes affecting way system looks user 
organized follows 
section describe basic language relational component precisely expressive power nested relational algebra 
give examples main constructs language 
section explain normalization process gives way describe meaning object containing sets 
proceed section describe additional features language arithmetic functions programming structural recursion sets sets deconstruction objects decomposing complex object number sml objects adding user defined base types various libraries derived functions 
section demonstrate applications sml querying incomplete independent databases 
examples obtained working version sml 
core language theoretical language sml developed libkin wong 
section describe core language called nra show built top standard ml 
changed names constructs nra names sml 
object types grammar unit bool theta ftg hti ranges collection base types sml consists int string sml type unit special type domain unique element denoted bool type booleans theta product type objects pairs objects types set type ftg denotes finite sets elements set type hti denotes finite sets elements specific types nra operators rules table fig 

occurrences table object types 
briefly recall semantics operators 
comp composition functions second projections called 
pair pair formation pair 
id identity function 
bang returns unique element type unit 
cond evaluates condition satisfied 
semantics set constructs 
emptyset empty set 
constant name empty 
similarly constant available name 
sng returns singleton set fxg 
union union sets maps elements set fx ff pairwith pairs component argument item second component pairwith fx flat semantics set constructs similar 
operator alpha provides interaction sets sets 
set fa set ha denote set functions ng alpha hfa ng fi 
sequel shall need sml syntax 
sml val binds identifier sml general operators comp bool cond pair theta theta theta bang unit eq theta bool id operators sets emptyset unit ftg sng ftg union ftg theta ftg ftg fsg ftg pairwith theta ftg fs theta tg flat ftg operators sets unit hti hti hti theta hti hti hsi hti theta hti hs theta ti hti interaction sets sets alpha nra type inference sml terms prompt val binds val int sml response saying bound type int 
fun function declaration 
functions sml created named construct fn 
body 
function applied argument result bound variable sml assigns special identifier lives overridden application 
example factorial cause sml response val int 
local binding 
brackets denote lists strings 
describe sml constructs represented sml 
complex object type shall refer type object function nra true type 
true types complex objects inferred function typeof 
sml values having type type 
sml prints complex objects type uses true type show sml type object values input functions create string 
unit 
interactive creation 
function terminated typing 
example val 
val 
int 
val create abc val abc int string typechecking done steps 
static typechecking simply sml typechecking example trying call union cause sml type error 
objects type sml typechecking algorithm detect type errors statically 
example sml see wrong union true types int theta string 
remaining type errors detected dynamically sml appropriate exception raised 
instance calling union sml respond uncaught exception 
language express functions commonly query languages 
boolean negation membership test subset test difference selection cartesian product counterparts sets see 
functions included sml form structure called set 
examples programming core language functions set 
alpha create val 
int 
val create val int pair id id val int int val create val int union val int set val int int observe order elements appear set changed examples 
emphasizes fact order elements appear set set irrelevant 
order changed particular case result duplicate elimination algorithm 
sml allows limited access user defined base types 
values types user defined sml type base sml 
user required supply structure containing basic information base type particular version sml built name true type base objects 
functions included user supplied structure parsing type string 
base 
user defined base types input objects requires special care 
objects base type printed parentheses preceded symbol 
input accordingly create 
example version sml real numbers write val create val real case real numbers symbol plays crucial role indicate input 
way change symbol meaning object 
assign new object symbol symb 
example saying symb inputs complex objects 
shall symbol working reals 
number functions complex objects sml objects 
necessary example user defined base type supplied parser 
case objects created constructor functions 
example val val real list list val coa map fn 
map val coa 
real 
various styles printing objects object types 
better suited printing normalized objects see section distinguish sets sets 
styles objects types freely combined giving sml total different printing styles 
new printer installed functions printer printer type type int 
unit 
functions invoked time 
details system manual 
normalization discussed object structurally just set conceptually single integer 
assume object type contains set brackets 
object conceptually 
want list possibilities explicitly object ht contain set brackets 
intuitively object find corresponding question exists coherent way obtaining objects object conceptually represent 
way 
define rewrite system types theta hsi hs theta ti hsi theta hs theta ti hsi intuitively trying push set brackets outside cancel 
rewrite rule associate basic sml function follows theta hsi hs theta ti hsi theta hs theta ti hsi alpha pair changed arguments 
implemented sml pair pair 
rewrites rewrite system write gamma gamma 
associate sequence rewrite strategy gamma gamma gamma 
basic sml function associated possible apply rewrite strategy gamma gamma 
object getting object type denoted app 
object obtained functions core language see 
result proved theorem coherence rewrite system church rosser terminating 
particular type unique normal form denoted nf 
rewrite strategies gamma gamma 
nf app app 
theorem tell new primitive normal added sml give adequate power conceptual representations objects normal nf semantics normal type app gamma gamma 
nf 
normalization types objects represented sml functions normalize type type 
type normal type 
example val create val 
int int 
normalize typeof val int int 
normal val 
section shall show normalization solve incomplete design problem 
additional features system arithmetic functions sml integers base types 
operations available integers plus mult monus addition multiplication modified subtraction respectively true type int theta int int semantics modified subtraction monus maxf gamma ng 
function gen true type int fintg gen ng 
summation construct sum takes function true type int set fx true type fsg returns 
acts similarly sets 
reasons constructs chosen 
operations precisely added set language endow power languages nested bags 
secondly bag semantics correct evaluation aggregate functions total column easily done sml 
example sum fn 
cardinality sum add elements second column 
bags represented sets element number occurrences pairs functions bags modeled easily sml 
example difference bags implemented follows fun fun select fn 
eq set select fn 
neg eq fn 
monus sum val fn 
val create val string int val create val string int val string int primitives involving base types system allows user defined base types provide way making functions base types functions fit type system 
example user defined base type real way function 
semantics addition real numbers 
furthermore need mechanism translate predicates base types predicates complex objects cond select 
solution problem function apply takes function base list 
base returns function representing action complex objects 
example val apply applied complex object yields form complex object 
practice primitives base types unary binary 
sml special feature allows apply binary unary functions base types functions apply unary apply binary 
predicates apply test takes function type base 
bool returns form function complex objects 
example val fn 
val fn 
val create val real val real structural recursion structural recursion sets powerful programming tool query languages :10.1.1.50.9046
unfortunately powerful unsafe 
function defined structural recursion guaranteed defined definedness generally checked compiler 
helpful writing programs changing types big databases decided include structural recursion sml 
structural recursion sets sets available user means constructs sr take object type function type theta return function sr type fsg function type hsi respectively 
semantics follows sr fx similarly 
functions implementing structural recursion sr sr sr 
example find product elements set may structural recursion follows val fact sr sr create mult val fact fn 
fact create val int file support form persistence databases sml provides means writing lists complex objects files reading lists back 
modules file sml working binary files ascii files 
working ascii files relatively safe problem reading object exception raised 
safe editing 
requires parser objects base type strings read file parsed create complex objects 
parser objects base type provided binary input output module 
binary unsafe feature standard ml binary files required extension db 
sml add ask operation continued 
possible obtain list files extension db current directory 
deconstruction complex objects may case evaluating query user may need write program deal result 
operations sml type need way complex objects usual sml types 
structure dest contains functions complex objects obtain sml values 
refer reader system manual details 
applications sml querying incomplete design database section show application normalization databases 
start database containing incomplete design ask certain queries possible completed designs 
show write queries normalization 
assume database containing incomplete design 
example part may consist subparts chosen possibilities different prices 
give example assume design requires subparts part parts choice costing costing costing second costing 
part parts costing costing second costing costing third costing costing 
wish represent set possible compositions 
options true type 
components need described sets components 
part subparts costing costing costing costing costing costing 
costing costing costing costing 
advantage fact conceptually set single element meaning element may describe design complex object follows val design inferring type design normalizing shows type database completed designs 
normalize typeof design val string real string real string real string real string real 
guided type write cost function sum costs parts 
particular case val fn real real 
fun fun cost sr sr suppose find possible complete design 
ask possible costs designs costing equal design cheapest follows val normal design output omitted val cost val 
fun dest cost val fn 
set fn 
val fun test 
neg eq set test fun test 
neg comp neg test val cheapest set fn 
fn 
dest cost val cheapest 
cost cheapest val 
prices completed designs range completed designs afford build cheapest uses parts design knew costs 
possible find design expensive prices distributed designs get list completed designs prices example complicated assigning numbers part price reliability asking cheapest design certain level reliability 
normalization language writing queries relatively straightforward task 
connecting sml theorem prover example sml currently put successful theorem prover hol 
precise nature theorem prover important discussion sml enhance functionality 
aspects relevant 
hol interactive theorem prover written sml 
pre existing notion theory database permanently recording information previously defined constants previously proven theorems 
open system sense sml environment enriched collection datatypes data structures procedures 
sml open system sense 
allows incorporate query language sml specialized hol theory databases having recompile theorem prover 
main task interfacing sml hol defining type base describes different kinds information stored database 
case information just theorems proved theory associated theory database 
information includes names types constants introduced theory 
hol closed system read evaluate print loop user interface task incorporating sml queries somewhat complicated 
addition defining appropriate base datatype accompanying functions implementor need decide expose additional functionality provided sml user need modify user interface accordingly 
merging open systems able add sml hol library loadable users request 
main sml extension hol put far browsing theories theorems relevant theorem proving task hand 
power combination sml hol seen example involving proof planning 
particular example describe details hol necessary 
language hol weakly polymorphic version simply typed lambda calculus 
notion type types may parametrized types 
users may define new types 
important class user defined types inductive recursive datatypes including nested mutually recursive datatypes 
part process defining recursive datatype involves proving initiality theorem states function datatype may uniquely defined cases constructors datatype 
type recursive datatype initiality theorem stored theory database theory type defined 
recursive datatype may may principle structural induction type stored theory database 
may readily test theorem principle induction type corresponds initiality theorem 
principle structural induction may automatically derived initiality theorem 
useful facts may proved include principle reasoning cases fact constructors distinct 
goal proved wants proceed structural induction datatypes admitting induction goal universally quantified 
goal know relevant principles induction theorems kind just mentioned stored hol theory database 
type may may inductive datatype 
polymorphic datatype may instances components recursive datatypes 
see consider datatype specifications oe list nil cons oe oe list oe tree leaf oe node oe tree list provide principles induction nil cons node node nil cons principle says prove property holds lists suffices show holds nil list holds tail list holds head put 
second principle provides similar reduction proving properties trees tree lists jointly 
trying prove fact holds objects type oe tree list proceed structural induction lists proceed mutual structural induction tree lists trees 
query finding information needs sensitive possibility multiple choices disjunctive information 
assume theories db sml version theories database hol essentially set entries base type universal types term 
hol type list function procedure returns list types leading universally quantified variables term initial theorem hol type 
base 
bool function tests theorem initiality theorem type induction theorem base 
base 
bool cases theorem base 
base 
bool distinct constructors theorem base 
base 
bool functions take initiality theorem argument test second argument corresponding induction theorem function theorem supporting reasoning cases second function third theorem stating constructors distinct ranges 
function initial theorem different type functions driven type inductive definitely determines type 
functions allow gather possible information results initial theorem 
testing functions may converted ones sml composing apply test 
know complex object object equivalent object base type may convert corresponding base object base 
functions functions sml described previously may incrementally define query finding possible sequences relevant induction information follows fun ty ty fun ty set select ty fun val dest set select union set select set select fun ty ty fun bang empty val cond eq fn remco 
bang empty remco fn remco 
remco fun goal normal goal thing ordinary definition fold induction options 
note definition cons ing element front list sml confused pretty printing true types 
building sequence possibilities induction take advantage structural level sml replace empty set empty tuple bang empty represent type universally quantified variable admit induction 
allows switch conceptual level normalization acquire collection possible sequences consisting induction information appropriate place holder empty tuple induction appropriate 
described particular example creating query find possible principles structural induction related information relevant particular goal proved 
examples exist involve finding possible sequences equations conditional equations rewriting goal particular form 
experience sml hol limited 
performance acceptable size database dealing nature query apt put 
example run query goal induction option goal universally quantified variables admitting induction database containing entries took approximately seconds sparcstation 
belief ability queries involving conjunctive disjunctive information sml theorem prover hol considerably enhance users ability gather information appropriate planning proof goals 
querying independent databases general problem querying independent databases set databases query answered information approximate answer information problems investigated gave rise number theoretical models 
intuitively query databases divided groups giving upper approximation answer corresponds possible information giving lower approximation corresponds definite information 
shown approximation constructs enjoy nice theoretical properties allow defining structural recursion 
large number preconditions verified programming structural recursion inconvenient argued semantical point view approximation constructs correspond sets sets certain way 
leave general treatment problem formal definition structural recursion approximations sml demonstrate sml solution typical examples querying independent databases 
papers dealing problem querying independent databases certain assumptions existence key implicitly 
key assumptions excessively restrictive 
give example explain problems deal key assumptions 
explain dropping key assumptions inevitably leads sets 
proceed demonstrate mentioned problems solved sml 
consider problem 
suppose university database relations employees cs teaching course cs employees name salary john john mary sally cs name room john jim sally assume query asks compute set ta teaching assistants 
assume tas teach cs ta university employee 
look problems solve order answer ta query 
databases inconsistent 
jim teaches cs ta employee record jim employees relation 
get rid anomaly decide believe cs employees 
case problem solved adding jim employees null salary acquired 
case believe employee relation problem solved removing jim cs relation 
inconsistencies relations find approximation set tas find people certainly tas 
assume records fields 
achieved putting 
null missing fields sml representation empty sets represent nulls 
allows take joins meet records 
example john john john john john john 
notice join records necessarily defined 
theory partial information conveyed means partial orders worked 
instance ordering collections extensions partial orders considered argued better suited ordering sets better suited ordering sets 
notation assumptions say best information tas obtained relations cs ta employees 
show query approximate set tas done sml 
sml library domain theoretic orderings sets sets function corresponding functions meet join theta hsi empty set indicate non existent join meet singleton set produced 
functions easy write test records join 
treat employees relation possible upper bounds tas set 
elements cs tas cs set 
represent data follows val emp john john mary sally 
val cs create john jim sally problem face getting rid inconsistencies database 
particular example jim cs employees 
assuming believe employees relation remove anomaly follows compatible function tests join elements defined fun compatible neg eq join fun compat fun set true fn 
compat set select fn 
val compatible emp cs val john sally consider solution proposed 
element cs elements employees joined called promotion 
intuitively promotion adds information employees 
solution proposed take promotions elements cs sure tas elements employees consistent promotions possible tas 
solution contingent condition name field key 
condition easily program solution function promote new relation emp 
fun promote compat fun set fn 
compat alpha fn 
fn 
join val emp john mary sally 
val promote compatible emp val john sally 
val res compatible emp val res mary john sally 
big meet calculates meet family divide separates sure tas possible tas 
name field key solution 
example johns employees joined john cs meet taken salary field lost 
information database tells 
know john employees teaches cs know john 
solution set represent situation 
particular take possible joins xy xy set plays role promotion set brackets outside obtain set possible answers ta query 
refer reader full details 
summing seen canonical problems querying independent databases solved sml 
sets gives correct answer key constraints hold solution falls short doing 
described functional database language built top standard ml 
set part core language precisely nested relational algebra 
extended sets deal disjunctive information 
normalization objects added primitive allows querying databases certain kinds incomplete information example databases incomplete designs 
sets useful querying independent databases shown extend known methods querying usually rely certain assumptions keys 
language adequate power handle multisets aggregate functions 
extensible new base types interfaced systems written standard ml 
representing objects single sml type allows user write queries higher order functions typically query languages 
plan extend language variant types true records 
plan show complicated queries approximate answers 
peter buneman limsoon wong helpful discussions 
abiteboul grumbach col logic language complex objects advances database programming languages acm press pages 
breazu tannen buneman naqvi 
structural recursion query language 
proc 
rd int 
workshop database programming languages pages greece august 
breazu tannen buneman wong 
naturally embedded query languages 
lncs proc 
icdt berlin germany october pages 
springer verlag october 
breazu tannen subrahmanyam 
logical computational aspects programming sets bags lists 
lncs proc 
icalp springer verlag pages 
buneman davidson semantics complex objects approximate answers journal computer system sciences 
buneman jung ohori powerdomains generalize relational databases theoretical computer science 
church 
formulation simple theory types 
journal symbolic logic 
colby recursive algebra nested relations inform 
systems 
gordon melham 
hol 
cambridge university press cambridge great britain 
grumbach milo tractable algebras bags proceedings th conference principles database systems washington dc pages 
gunter mixed powerdomain theoretical computer science 
hillebrand kanellakis mairson 
database query languages embedded typed lambda calculus 
proc 
lics pages 
imielinski 
incomplete information relational databases 
jacm 
imielinski naqvi 
incomplete objects data model design planning applications 
proc 
acm sigmod denver colorado may 
libkin relational algebra complex objects partial information lncs proceedings symp 
math 
fund 
database systems springer verlag pages 
libkin algebraic characterization edible powerdomains technical report ms cis university pennsylvania 
libkin gunter functional database programming language support disjunctive information technical memo 
bl 
libkin wong semantic representations query languages sets proceedings th conference principles database systems washington dc pages 
libkin wong properties query languages bags proceedings th international workshop database programming languages september springer verlag pages 
libkin wong aggregate functions conservative extension linear orders proceedings th international workshop database programming languages september springer verlag pages 
milner tofte harper definition standard ml mit press cambridge mass 


convex spaces order theoretic basis problem solving technical report ms cis university pennsylvania 
ohori breazu tannen buneman database programming machiavelli polymorphic language static type inference sigmod pages 
rounds situation theoretic aspects databases proc 
conf 
situation theory applications csli vol 
pages 

schek scholl relational model relation valued attributes inform 
systems 
thomas fischer nested relational structures kanellakis editor advances computing research theory databases pages jai press 
trinder comprehension query notation proceedings rd international workshop database programming languages august pages morgan kaufmann 
trinder wadler list comprehensions relational calculus proceedings glasgow workshop functional programming pages university glasgow 
wadler comprehending monads proceedings acm conference lisp functional programming nice june 

