open agent architecture building distributed software systems david martin adam cheyer douglas moran arti cial intelligence center sri international ravenswood avenue menlo park ca usa cheyer ai sri com abbreviated title open agent architecture open agent architecture oaa developed years sri international possible software services provided operative orts distributed collections autonomous agents 
communication cooperation agents brokered facilitators sible matching requests users agents descriptions capabilities agents 
generally required user agent know iden locations number agents involved satisfying request 
oaa structured minimize ort involved creating new agents wrapping legacy applications written various languages operating various platforms encourage reuse existing agents allow dynamism exibility makeup agent communities 
distinguishing features oaa compared related include extreme exibility facilitator delegation complex goals triggers data management requests agent provision multimodal user interfaces built support including user privileged member agent community 
explains structure elements agent systems constructed oaa 
characteristics major component infrastructure described including agent library interagent communication language capabilities declarations service requests facilitation management data repositories autonomous monitoring triggers 
provide technical context describe motivations oaa design situate features realm alternative software paradigms 
summary oaa systems built date brief descriptions 
evolution models design construction software systems driven forward closely interrelated trends adoption networked computing model leading greatly increased reliance distributed sites data processing resources 
reported new computers added internet day paradigm shift computing way moves away requiring relevant data programs reside user desktop machine 
data routinely accessed computers spread world increasingly rich format comprising multimedia documents audio video streams java may include programs downloaded executed local machine 
increasingly reliant networked computing need approaches software design allow exible composition distributed processing elements dynamically changing relatively unstable environment 
increasing variety domains application designers users coming expect longer lived autonomous software applications 
push technology persistent monitoring information sources maintenance user models allowing personalized responses sharing preferences examples simplest manifestations trend 
commercial enterprises introducing signi cantly advanced approaches cases employing research results arti cial intelligence data mining machine learning elds 
increasing complexity systems development new technologies material environments creating demand accessible intuitive user interfaces 
autonomous distributed multicomponent systems providing sophisticated services longer lend familiar direct manipulation model interaction individual user masters xed selection commands provided single application 
ubiquitous computing networked environments brought situation typical user software services may access service infrequently times 
accommodating usage patterns calls new approaches 
fortunately input modalities widely available speech recognition pen handwriting gesture recognition ability manage presentation systems responses multiple media provide opportunity fashion style human computer interaction draws heavily experience human human interactions 
open agent architecture architecture oaa framework constructing multiagent systems developed arti cial intelligence center sri international arose open agent architecture oaa trademarks sri international 
brand names product names trademarks registered trademarks respective holders 
desire accommodate developments areas integrated framework suitable practical 
sections rst review various approaches distributed computing situate approach scope related 
brie characterize range oaa systems built date 
subsequent sections provide detailed descriptions inner workings oaa 
motivating concepts early version oaa cohen certain oaa systems described cheyer julia martin martin moore moran moran cheyer rst detailed technical explanation system building resources provided oaa 
technologies distributed computing brie review concepts advantages disadvantages relevant approaches distributed computing including distributed objects mobile objects architectures agent software engineering 
distributed object approach object oriented languages java provide signi cant advances standard procedural languages respect reusability modularity code encapsulation encourages creation library interfaces minimize dependencies underlying algorithms data structures 
changes programming internals date requiring modi cations code uses library 
inheritance permits extension modi cation library routines data requiring source code original library 
polymorphism arbitrary number data types 
standard object oriented programming oop languages build monolithic programs object building blocks distributed object technologies omg corba omg microsoft dcom microsoft allow creation programs components may spread multiple machines 
implement client server relationship objects distributed object systems registry mechanism corba registry called object request broker orb store interface descriptions available objects 
orb services client transparently invoke method remote server object orb responsible nding object implement request passing parameters invoking method returning results 
client object located programming language operating system system aspects part object interface 
distributed objects er powerful paradigm creating networked applications certain aspects approach perfectly tailored constantly changing environment internet 
major restriction approach interactions objects xed explicitly coded instructions application developer 
implies di cult reuse object new application bringing inherent dependencies objects embedded interface de nitions explicit method calls 
restriction approach result reliance remote procedure call rpc style communication 
easy debug single thread execution model facilitate programming exploit potential parallel computation expect distributed environment 
addition rpc uses blocking synchronous scheme scale high volume transactions 
mobile objects mobile objects called mobile agents bits code move execution site presumably di erent machine programmatic control ciently interact local environment 
commercial instantiations technology include aglets ibm concordia mitsubishi voyager objectspace 
certain types problems mobile object paradigm ers advantages traditional distributed object approaches 
advantages include network bandwidth database queries electronic commerce applications cient perform tests data bringing tests data bringing large amounts data testing program 
parallelism mobile agents spawned parallel accomplish tasks 
disadvantages mobile agent approach fashion similar programming agent developer programmatically specify go target environment 
generally little coordination support encourage interactions multiple mobile participants 
agents written programming language supported execution environment distributed technologies support heterogeneous communities components written diverse programming languages 
blackboard architectures blackboard approaches schwartz schwartz gelernter linda gelernter allow multiple processes communicate reading writing tuples global data store 
process watch items interest perform computations state blackboard add partial results queries processes consider 
blackboard architectures provide exible framework problem solving dynamic community distributed processes 
blackboard approach provides solution eliminating tightly bound interaction links distributed technologies require interprocess communication 
advantage disadvantage programmer need refer speci process computation framework provide programmatic control doing cases practical 
agent software engineering research communities approached distributed computing casting problem modeling communication cooperation autonomous entities 
ective communication independent actors requires components transport mechanism carrying messages asynchronous fashion interaction protocol de ning various types communication interchange social implications instance response expected question content language permitting expression interpretation utterances agreed set shared vocabulary meaning concepts called ontology 
mechanisms permit richer style interaction participants expressed distributed object rpc model blackboard architecture centralized exchange approach 
widely foundation technology agent software engineering knowledge query manipulation language kqml labrou finin finin :10.1.1.15.9293
kqml speci es interaction protocol conjunction knowledge interchange format kif genesereth fikes content language ad hoc formalized ontologies 
kqml introduced symbolic performatives capture information purpose communication place conversation 
creating standardized representation conversational interactions important aspect multiagent cooperation kqml limited reliance xed core set atomic performatives inevitable di culty arriving just right set capable expressing kind interaction service request 
uential approach stronger assumptions knowledge processing individual agents structuring agents activities concepts belief desire intention bdi rao george 
bdi emphasis higher level abstraction extremely important giving direction agent systems applicability may limited structural requirements imposed individual agents di culties interoperating legacy systems 
philosophy goals oaa approach distributed computing shares common paradigms outlined 
distributed object frameworks primary goal oaa provide means integrating heterogeneous applications distributed infrastructure 
sought incorporate dynamism extensibility blackboard approaches ciency associated mobile objects rich complex interactions communicating agents 
spell greater detail goals oaa may categorized general headings interoperation cooperation user interfaces software engineering 
versatile mechanisms interoperation cooperation 
interoperation refers ability distributed software components agents communicate meaningfully 
system building framework provide mechanisms interoperation level granularity agent frameworks face important new challenges area 
true primarily autonomy hallmark individual agents necessitates greater exibility interactions communities agents 
coordination refers mechanisms community agents able productively task 
areas goals framework provide exibility assembling communities autonomous service providers development time runtime 
agents conform linguistic ontological requirements ective communication able participate agent community combinations minimal prerequisite knowledge characteristics players 
agents duplicate overlapping capabilities able coexist community system making best possible redundancy 
provide exibility structuring cooperative interactions members community agents 
framework provide economical means setting variety interaction patterns agents requiring inordinate amount complexity infrastructure individual agents 
provision service dependent particular con guration agents 
impose right amount structure individual agents 
di erent approaches construction multiagent systems impose di erent requirements individual agents 
example kqml neutral content messages imposes minimal structural requirements individual agents 
hand bdi paradigm impose demanding requirements assumptions nature programming elements meaningful individual agents 
oaa falls goal provide rich set interoperation coordination precluding software engineering goals de ned 
include legacy owned applications 
legacy usually implies reuse established system fully controlled agent system developer owned refers applications developer partial access control 
examples data sources services available world wide web simple form interfaces applications cooperatively virtual enterprise remain property separate corporate entities 
possible classes application interoperate full edged members agent community requiring overwhelming integration ort 
human oriented user interfaces 
systems composed multiple distributed components possibly dynamic con gurations components require crafting intuitive user interfaces provide conceptually natural means interacting multiple distributed components 
numerous disparate agents complex tasks implemented system user able express requests having detailed knowledge individual agents 
speech recognition handwriting recognition natural language technologies mature agent architecture prepared forms input play increased role tasking agent communities 
treat users privileged members agent community 
providing appropriate level task speci cation software agents reusable means translating level level human requests possible construct interactions seamlessly incorporate types agent 
support collaboration simultaneous shared data processing resources users agents 
realistic software engineering requirements 
successful system building framework address practical concerns real world applications expressed goals minimize ort required create new agents wrap existing applications 
encourage reuse domain independent domain speci components 
concept agent orientation object orientation provides natural conceptual framework reuse long mechanisms encapsulation interaction structured appropriately 
support lightweight mobile platforms 
platforms able serve hosts agents requiring installation massive environment 
possible construct individual agents relatively small modest processing requirements 
minimize platform language barriers 
creation new agents wrapping existing applications require adoption new language environment 
overview oaa section oaa rst describing basic components structure framework illustrating concepts sample application 
oaa system structure presents structure typical small oaa system showing user interface agent application agents meta agents organized community peers common relationship facilitator agent 
facilitator specialized server agent responsible coordinating agent communications cooperative problem solving 
systems facilitator provide global data store client agents allows adopt blackboard style interaction 
note system con guration limited single facilitator 
larger systems assembled multiple facilitator client groups having sort structure shown 
categories agents illustrated application agents meta agents user interface agents categories recognized convention formally distinguished system 
application agents usually specialists provide collection services particular sort 
services domain independent technologies speech recognition natural language processing email forms data retrieval data mining user speci domain speci travel planning reservations agent 
application agents may legacy applications libraries case agent may little wrapper calls pre existing api 
meta agents role assist facilitator agent coordinating activities agents 
facilitator possesses domain independent coordination strategies meta agents augment domain application speci knowledge reasoning rules learning algorithms planning forth 
user interface agent plays extremely important interesting role oaa systems 
systems agent implemented collection micro agents monitoring di erent input modality point click handwriting pen gestures speech collaborating produce best interpretation current inputs 
shown modality agents 
agents facilitators referred client agents called acts respects client facilitator provides communication essential services client 
invoked client agent connection facilitator isknown parent facilitator 
connection agent informs parent facilitator services provide 
agent needed facilitator sends request expressed interagent communication language icl 
agent parses request processes returns answers status reports facilitator 
processing request agent variety capabilities provided oaa 
example icl request services agents set triggers read write shared data facilitator client agents maintain shared data 
common infrastructure constructing agents supplied library available di erent programming languages 
library designed minimize ort required construct new system maximize ease legacy systems ed 
sample interactions best way obtain intuitive sense oaa typically functions brie look example oaa applied real application 
automated ce system mobile executive telephone laptop computer access task commercial applications calendars databases email systems running back ce 
depicted application agent provides wrapper program making functionality natural language vocabulary available agent community registration facilitator 
user interface ui agent shown runs user local laptop responsible accepting user input sending requests facilitator delegation appropriate agents displaying results distributed computation 
user may interact directly speci remote application clicking active areas interface calling form window application making queries standard interface dialog mechanisms 
conversely user may express task executed typed handwritten spoken telephone english sentences explicitly specifying agent agents perform task 
instance question schedule written user interface request sent ui facilitator turn ask natural language nl agent translate query icl 
accomplish task nl agent may need requests agent community resolve unknown words ui agent respond name current user schedule calendar agent de nes word 
resulting icl expression routed facilitator appropriate agents case calendar agent execute request 
results sent back ui agent display 
spoken request mail arrives security notify immediately produces slightly complex example involving communication agents system 
translation icl described facilitator installs trigger mail agent look new messages security 
message arrive mail spool trigger res facilitator matches action part trigger capabilities published noti cation agent 
noti cation agent isan example meta agent rules concerning optimal di erent output modalities email fax speech generation telephone plus information individual user preferences determine best way relaying message available media transfer application agents 
competitive parallelism locate user calendar database agents may di erent guesses nd user cooperative parallelism produce required information telephone number location user password audio le containing text speech representation email message telephone agent call user verify identity play message 
key ideas illustrated examples 
new agents connect facilitator registering capability speci cations natural language vocabulary user say dynamically changes 

interpretation execution task distributed process agent de ning set possible inputs system 

single request produce cooperation exible communication agents written di erent programming languages spread multiple machines 
detailed view open agent architecture order presentation top means group agents works considering mechanisms support shared data repositories triggers nally describing basic infrastructure underlying construction individual agents 
illustrate technical aspects approach describe applications implemented oaa 
mechanisms cooperation cooperation agents oaa system achieved messages expressed common language icl normally structured part approach providers services register capabilities speci cations facilitator requesters services construct goals relay facilitator facilitators coordinate orts appropriate service providers satisfying goals 
interagent communication language oaa interagent communication language icl interface communication task coordination language shared agents regardless platform run computer language programmed 
icl agent task subset agent community explicit control frequently underspeci ed loosely constrained manner 
oaa agents employ icl perform queries execute actions exchange information set triggers manipulate data agent community 
fundamental program elements expressed icl event 
activities agent communications agents structured transmission handling events 
communications events serve messages agents regulating activities individual agents may thought goals satis ed 
event set parameters content 
example agent library procedure oaa solve agent request services agents 
call oaa solve code agent results event having form ev post solve goal params going facilitator ev post solve type goal content params list parameters 
allowable content parameters vary type event 
icl includes layer conversational protocol similar spirit provided kqml content layer analogous provided kif 
conversational layer icl de ned parameter lists associated certain 
consists speci goals triggers data elements may various events 
conversational protocol speci ed orthogonal parameterized approach 
conversational aspects element conversation represented selection event type combination selection values orthogonal set parameters 
approach ers greater expressiveness approach solely xed selection speech acts kqml 
example kqml request satisfy query employ performatives ask ask 
icl hand type request expressed event type ev post solve solution limit parameter positive integer 
request solutions indicated omission solution limit parameter 
request accompanied parameters combine re ne semantics 
kqml example forces choose possible conversational options may precisely desired 
case performative chosen single value capture entire conversational characterization communication 
requirement raises di cult challenge language designer select set performatives provides desired functionality large 
consequently debate right set performatives consumed discussion kqml community 
icl designed extension prolog programming language take advantage uni cation features prolog 
oaa agent libraries especially non prolog versions provide support constructing parsing manipulating icl expressions 
possible embed content expressed languages icl event advantageous express content possible 
primary reason allow facilitator access content conversational layer delegating requests 
give facilitator information nature request possible facilitator decompose compound requests individually delegate 
important declarations program elements represented icl expressions include addition events capabilities declarations requests services responses requests trigger speci cations shared data elements 
providing services agent participating oaa system de nes publishes set capabilities declarations expressed icl describing services provides 
declarations establish high level interface agent 
interface facilitator communicating agent important delegating service requests parts requests agent 
partly due prolog basis icl refer capabilities declarations solvables 
major types solvables distinguished procedure solvables data solvables 
intuitively procedure solvable performs test action data solvable provides access collection data 
example creating agent mail system procedure solvables de ned sending message person testing message particular subject arrived mail queue displaying particular message onscreen 
database wrapper agent de ne distinct data solvable corresponding relations database 
data solvable provide shared data store may queried updated various agents having required permissions 
technically primary di erences types solvables procedure solvable handler declared de ned necessary data solvable 
handling requests data solvable provided transparently agent library 
second data solvables associated dynamic collection facts clauses modi ed runtime agent providing solvable agents provided required permissions 
third special features available data solvables facilitate maintaining associated facts 
features mentioned section 
spite di erences noted means means agent requests service types solvables 
requesting services described section 
request agent services normally arrives form event agent facilitator 
appropriate handler deals event 
handler may coded fashion appropriate depending nature task availability task speci libraries legacy code 
hard handler return appropriate response request expressed icl 
depending nature request response indication success failure list solutions request data query 
agent library provides set procedures allowing agent add remove modify solvables time connecting facilitator 
speci cation solvables solvable parts goal list permissions list parameters declared format solvable goal parameters permissions goal solvable syntactically takes form icl structure logical representation service provided solvable 
icl structure consists functor arguments 
example structure functor arguments 
prolog structure goal arguments may structures 
various options included parameters list re ne semantics associated solvable 
foremost type parameter say solvable data procedure 
type procedure parameter may indicate handler associated solvable 
parameters appropriate data solvable mentioned section 
case procedure data solvable private parameter may restrict solvable declaring agent 
parameter valuable agent intends solvable solely internal wants take advantage oaa mechanisms accessing agent wants solvable available outside agents selected times 
support case possible agent status solvable private time 
permissions solvable provide means agent may control access services 
allow agent restrict calling writing solvable selected agents 
calling means requesting service encapsulated solvable writing means modifying collection facts associated data solvable 
default solvable callable data solvables writable 
solvable permissions changed time agent providing solvable 
example solvables simple email agent include solvable send message email params type procedure callback send mail solvable message email type data single value true write true solvable get message email msg type procedure callback get mail symbols indicating input output arguments purposes documentation 
parameters permissions default values speci cations default values may omitted parameters permissions lists 
programmer de nes agent capabilities terms solvable declarations sense creating vocabulary agents communicate new agent 
problem ensuring agents speak language share common unambiguous semantics vocabulary called ontology problem 
oaa provides tools see agent development tools martin services automatic translations solvables facilitator help minimize issue oaa rely vocabulary formally engineered ontologies speci domains instance see www ksl stanford edu knowledge sharing ontologies html ontologies constructed incremental development body agents applications 
oaa imposes hard restrictions basic syntax form solvable declarations common usage conventions illustrate utility associated solvables 
classes services tagged particular type 
instance example message get message solvables specialized email modifying names services email parameter serves execution select speci type message 
actions generally written functor solvable direct object item class rst argument predicate required arguments extensible parameter list argument 
parameter list hold optional information usable function 
generated natural language parser parameter list store prepositional phrases adjectives 
illustration points send mail bob lunch translated send message email bob jones subject lunch remind bob lunch leave transport unspeci ed send message kind bob jones subject lunch enabling available message transfer agents fax phone mail pager compete opportunity carry request 
requesting services agent requests services community delegating tasks goals facilitator 
request contains calls agent solvables optionally speci es parameters containing advice help facilitator determine execute task 
important note calling solvable require agent specify know particular agent agents handle call 
possible specify agents address parameter situations desirable general advantageous leave delegation facilitator 
programming style greatly reduces hard coded dependencies components nds distributed frameworks 
oaa libraries provide agent single uni ed requesting services agents library procedure oaa solve 
style logic programming oaa solve may retrieve data initiate actions 
put way calling data solvable looks calling procedure solvable 
compound goals powerful features oaa ability client agent user submit compound goals facilitator 
compound goal composed operators similar employed prolog comma conjunction semicolon disjunction arrow conditional execution 
signi cant extensions prolog syntax semantics particular interest 
parallel disjunction operator indicates disjuncts executed di erent agents simultaneously 
second possible specify subgoal executed breadth rst depth rst 
third subgoal compound goal address set parameters attached 
subgoal takes form address goal parameters address parameters optional 
address speci es agents handle goal may employ di referring expression unique names symbolic names shorthand names 
agent unique name assigned facilitator relies network addressing schemes ensure global uniqueness 
agents self selected symbolic names example mail guaranteed unique 
address includes symbolic name facilitator takes mean agents having name called 
shorthand names include self parent refers agent facilitator 
emphasize address associated goal subgoal optional 
address facilitator job supply appropriate address explained section 
capability development 
distributed execution compound goals particularly powerful conjunction natural language speech enabled interfaces query may specify functionality distinct agents combined 
simple example spoken utterance fax bill smith manager translated compound icl request oaa solve manager bill smith fax strategy action re ning service requests parameters associated goal subgoal draw useful features re ne request meaning 
example frequently important able specify solutions returned synchronously done reply parameter take values synchronous asynchronous 
example goal query data solvable cache parameter may request local caching facts associated solvable 
remaining parameters fall categories advice feedback 
feedback parameters allow service requester receive information facilitator goal handled 
feedback include things identities agents involved satisfying goal amount time expended satisfaction goal 
advice parameters give constraints guidance facilitator completing interpreting goal 
example solution limit parameter allows requester say solutions interested facilitator service providers free information optimizing orts 
similarly time limit say long requester willing wait solutions request system level limit may say remote facilitators may consulted search solutions 
priority parameter indicate request urgent previous requests satis ed 
advice parameters tell facilitator parallel satisfaction parts goal appropriate combine lter results arriving multiple solver agents requester may considered candidate solver subgoals request 
mentioned section advice parameters intended provide extensible set low level orthogonal parameters capable combining icl goal language fully express information ow participants 
multiple parameters grouped group name resulting high level advice parameters express concepts analogous kqml performatives de ne classi cations problem types 
instance kqml ask ask performatives represented combinations values parameters reply parallel ok solution limit 
example higher level problem type strategy math problem send query appropriate math solvers parallel collect responses signal con ict di erent answers returned 
strategy essay question send request appropriate participants signal problem cheating returned answers identical 
facilitator receives compound goal job construct goal satisfaction plan oversee satisfaction appropriate cient manner consistent speci ed advice 
facilitation facilitation plays central role oaa 
core notion facilitation similar proposed genesereth genesereth singh 
short facilitator maintains knowledge base records capabilities collection agents uses knowledge assist requesters providers services making contact 
notion facilitation considerably stronger respects 
encompasses general notion transparent delegation means requesting agent generate request facilitator manage satisfaction request requester needing knowledge identities locations satisfying agents 
cases request data query requesting agent may oblivious number agents involved satisfying request 
transparent delegation possible agents capabilities solvables treated description service entry point library body code 
second oaa facilitator distinguished handling compound goals introduced section 
involves types processing delegation determination speci agents execute compound goal combination routing results subgoals optimization completed goal including parallelization appropriate interpretation optimized goal 
delegation step results goal unambiguous meaning agents participate satisfying 
completing addressing goal involves selection agents handle subgoals subgoal selection speci ed requester 
doing facilitator uses knowledge capabilities client agents possibly facilitators system 
may strategies advice speci ed requester explained 
optimization step results goal interpretation require exchanges possible facilitator satisfying agents exploit parallel orts satisfying agents ect goal meaning 
interpretation goal involves coordination requests satisfying agents assembling responses coherent return requester 
third respect oaa facilitation extends basic concept facilitation facilitator employ strategies advice requesting agent resulting variety patterns may instantiated satisfaction request 
strategies mentioned section additional possibilities consideration mentioned section 
oaa concept facilitation generalized handle distribution data update requests requests installation triggers strategies employed delegation service requests 
triggers data maintenance mechanisms discussed sections respectively 
noted reliance facilitation absolute hard requirement requests services matched facilitator interagent communications go facilitator 
mentioned support agent library explicit addressing requests planned support peer peer communications 
oaa designed encourage developers employ paradigm community minimize development ort doing advantage facilitator provision transparent delegation handling compound goals 
summary stress facilitator viewed coordinator controller cooperative task completion 
facilitator initiates activity responds requests manage satisfaction goal update data repository installation trigger appropriate agent agents 
approach possible agents take advantage facilitator expertise delegation date knowledge current membership dynamic community 
addition situations facilitator coordination services allows developer lessen complexity individual agents resulting manageable software development process enabling creation lightweight agents 
maintaining data repositories agent library supports creation maintenance databases form data solvables 
creation data solvable requires declared explained section 
querying data solvable access solvable done oaa solve 
clarify ways solvables maintained mention features associated 
data solvable conceptually relation relational database 
facts associated solvable maintained agent library handles incoming messages containing queries data solvables 
possible re ne default behavior library managing facts parameters speci ed solvable declaration 
example parameter single value indicate solvable contain single fact point time 
parameter unique values indicates duplicate values stored 
parameters allow data solvables concepts ownership persistence 
data solvables implement shared repositories useful maintain record agent created fact solvable agent considered fact owner 
applications useful agent facts removed agent goes ine agent longer participating agent community deliberate termination malfunction 
data solvable declared facts automatically maintained way persistent data solvable retains facts explicitly removed 
agent library provides procedures agents update add remove replace facts belonging data solvables locally agents required permissions 
procedures may re ned parameters apply service requests 
example address parameter specify particular agents update request applies 
absence just service requests update request goes agents providing relevant data solvable 
default behavior maintain coordinated mirror copies data set multiple agents useful support distributed collaborative activities 
similarly feedback parameters described connection oaa solve available data maintenance requests 
ability provide data solvables limited client agents data solvables maintained facilitator request client facilitator maintenance shared facilitator clients 
useful strategy relatively stable collection agents facilitator workload predictable 
blackboard style communication data solvable publicly readable writable may thought global data repository cooperatively group agents 
combination triggers allows agents organize orts blackboard style communication 
example dcg nl agent existing natural language processing agents provides natural language processing services variety peer agents expects agents record facilitator vocabulary prepared respond indication word part speech logical form icl subgoal result word 
possible comes online nl agent installs data solvable basic part speech facilitator 
instance solvable solvable noun meaning syntax note empty lists solvable permissions parameters acceptable default permissions parameters provide appropriate functionality 
ce assistant system agents services 
instance database agent uses call library procedure oaa post noun boss indicate meaning boss concept manager oaa noun manager atom boss address parent autonomous monitoring triggers oaa triggers provide general mechanism requesting action taken set conditions met 
agent install triggers locally remotely facilitator peer agents 
types triggers communication data task time 
addition type trigger speci es condition action expressed icl 
condition indicates circumstances trigger re action indicates happen res 
addition trigger set re unlimited number times speci ed number times positive integer 
triggers wide variety oaa systems example monitoring external sensors execution environment tracking progress complex tasks coordinating communications agents essential synchronization related tasks 
installation trigger agent thought representation agent commitment carry speci ed action speci ed condition holds true 
types triggers characterized informally follows communication triggers allow incoming outgoing event message monitored 
instance simple communication trigger may say solution goal returned facilitator send result presentation manager displayed user 
data triggers monitor state data repository maintained facilitator client agent 
data triggers conditions may tested addition removal replacement fact belonging data solvable 
example data trigger users simultaneously logged machine send alert message system administrator 
task triggers contain arbitrary conditions tested processing incoming event timeout occurs event polling 
conditions may specify goal executable local icl interpreter test solvable satis able 
task triggers useful checking task speci internal conditions 
cases conditions captured solvables cases may 
example mail agent watch new incoming mail airline database agent may monitor arrive scheduled 
example task trigger mail arrives security notify immediately 
time triggers monitor time conditions 
instance alarm trigger set re single xed point time december rd pm recurring basis minutes noon 
triggers implemented data solvables declared implicitly agent 
requesting trigger installed agent may parameters apply service data maintenance requests 
important feature oaa triggers contrast programming methodologies agent trigger installed know conditional part trigger consequence trigger res action delegated facilitator execution 
commercial mail programs allow rules form mail arrives xxx forward delete archive possible actions hard coded user select xed set 
oaa consequence may compound goal executable dynamic community agents 
new agents de ne functionality vocabulary unanticipated agent example fax agent joins community modi cations existing code required user mail arrives fax bill smith 
agent library oaa agent library provides necessary infrastructure constructing agentbased system available programming languages including prolog java lisp visual basic delphi 
mentioned earlier goals library design minimize ort required construct new system maximize ease legacy systems ed 
library families procedures provide functionalities mentioned omitted lack space 
example declarations agent solvables registration facilitator managed procedures oaa declare oaa oaa 
updates data solvables accomplished family procedures including oaa oaa oaa 
similarly triggers maintained procedures oaa oaa 
essential elements protocol details messages encapsulate service request response provided library transparent far possible application code simpler 
enables developer focus desired functionality details message construction communication 
example request service agent agent calls library procedure oaa solve 
call results message facilitator exchange messages service providers send message containing desired results requesting agent 
results returned arguments oaa solve 
messages involved scenario explicitly constructed agent developer 
note description synchronous oaa solve 
agent library provides interagent infrastructure mechanisms supporting internal structure individual agents hand mechanisms cooperative interoperation agents 
worth noting infrastructure cuts boundary mechanisms support agent internals agent interactions integrated fashion 
example services provided agent accessed agent procedure oaa solve employ request service agent di erence address parameter accompanying request 
turn helps developer reuse code avoid redundant entry points functionality 
characteristics described transparent construction messages integration interagent mechanisms apply library functionality including data management temporal control mechanisms 
oaa applications oaa implement fteen applications integrating diverse technologies image processing speech recognition multiuser collaboration text extraction planning virtual reality 
table partial list oaa applications take examples illustrate qualities important framework 
uni ed messaging uni ed messaging application extends automated ce section emphasis ubiquitous access dynamic presentation information services supported agent community 
agents application depicted 
real dialog taken current system provide insight systems built oaa 
scenario user telephone interface planning trip boston soon give presentation 
capitalized sentences phrases spoken user telephone processed phone agent 
responses indicated spoken system text speech generation 
welcome sri international 
please enter user id password 
enters id password see adam cheyer 
am listening 
user interface agent including telephone agent know identify user 
information resolving anaphoric allows multiple user interfaces operated user 
today schedule 
today schedule adam cheyer am hour meeting dave 
pm hour presentation software agents 
schedule 
user operating graphical user interface telephone described conjunction automated ce application result spoken request display calendar window containing current schedule 
case graphical display available gen nl agent tasked produce spoken response played phone 
gen nl shares dynamic vocabulary phrasal rules natural language parser dcg nl contains strategies producing responses queries simple list multimedia utterances 
find friday weather boston 
weather boston friday follows sunny morning 
partly cloudy afternoon percent chance late 
mid 
addition data accessible legacy applications content may retrieved agents provide oaa wrappers useful websites 
find new mail messages 
messages available 
message mark entitled oaa meeting message message jennifer entitled presentation summary play 
message multipart mime encoded message 
parts 
part 
voicemail message text speech part speaker conference 
schedule posted soon homepage 
part part 
read text speech presentation home page www 
print message command executed 
mail messages longer just simple text documents consist multiple subparts containing audio les pictures webpages attachments forth 
user asks play complex email message telephone di erent agents may implicated translation process quite di erent request print 
challenge develop system enable agents cooperate extensible exible manner alleviates explicit coding agent interactions possible input output combination 
oaa implementation agent concentrates knows leaves delegated agent community 
instance printer agent de ning solvable print object parameters de ned pseudocode basically says get document postscript text form print 
print object parameters object find appropriate document object ref oaa solve resolve document params object document ask document postscript object id pointer oaa solve resolve id id pointer postscript object object type text postscript print 
object type text object type postscript print object example email message salient document mail agent receive request produce message postscript 
mail agent may know save text message postscript know webpage voicemail message 
parts message simply send oaa solve requests see agent knows accomplish task 
user telephone user interface 
moves desktop starts web browser accesses url referenced mail message 
record message recording voice message 
start speaking 
updated web page containing presentation schedule 
message recorded 
web page changes get note 
trigger added requested 
example local agent interfaces web browser return current page solution request oaa solve resolve web page ref sent nl agent 
trigger installed web agent monitor changes page page updated notify agent nd user transmit webpage voicemail message appropriate media transfer mechanism 
example uni ed messaging application intended show oaa concepts produce simple extensible solution multiagent problem di cult implement rigid framework 
application supports adaptable presentation queries dynamically changing complex information shared context resolution applications exible translation multimedia data 
section application highlights parallel competition cooperation agents multimodal fusion 
multimodal map goal multimodal map application explore natural ways communicating community agents 
inspired way professor instruct students blackboard combinations drawing writing speaking gesturing circling underlining forth multimodal map provides user may draw write speak 
travel planning domain available information includes hotel restaurant tourist site data retrieved distributed software agents commercial internet sites 
types user interactions multimodal issues handled application illustrated brief scenario cheyer featuring working examples taken current system 
sara planning business trip san francisco schedule activities weekend 
turns laptop pc executes map application selects san francisco 
speaking downtown 
map scrolls appropriate area 
speaking drawing region show hotels near 
icons representing hotels appear 
writes hotel info 
textual description price attributes appears 
speaking want hotels pool 
hotels disappear 
draws hotel close highway hotel disappears speaking circling show photo hotel 
photo appears 
points hotel photo appears 
speaking price hotel 
price appears previous hotel 
speaking drawing arrow scroll 
display adjusted 
speaking drawing arrow hotel distance hotel 
distance displayed 
pointing place speaking distance 
distance displayed 
sara decides human advice 
picks phone calls bob travel agent writes start collaboration synchronize display 
point identical maps input actions remotely seen 
sara speaks circles hotels bob trying choose hotels 
opinions 
bob draws arrow speaks points area really nice visit 
walk hotel 
map scrolls indicated area 
hotel selected 
sara speaks think visit 
bob speaks map show video 
video appears 
bob speaks lot fun 
system main research focus generate appropriate interpretation incoming streams multimodal input 
providing user interface dynamic set distributed agents application built agent framework oaa helping coordinate competition cooperation information sources parallel resolve ambiguities arising level interpretation process low level processing data stream pen input may gesture algorithm handwriting separate recognition process info 
multiple hypotheses may returned modality recognition component 
anaphora resolution resolving anaphoric separate information sources may contribute resolving context object type utterance show photo hotel natural language component return list hotels talked 
deictic combination spoken utterance show photo hotel pointing circling arrow gestures indicate desired object 
deictic may occur accompanying verbal command 
visual context request display photo hotel user interface agent determine hotel currently visible map desired object 
database queries information database agent combined results resolution strategies 
examples show photo hotel menlo park 
discourse analysis discourse provide source information phrases 
list means exhaustive 
examples resolution methods include spatial reasoning hotel lombard street user preferences near favorite restaurant 
cross modality uences multiple modalities modality may reinforce disambiguate interpretation 
instance interpretation arrow gesture may vary accompanied di erent verbal commands scroll left vs show info hotel 
example system take account accurately unambiguously arrow selects single hotel 
addressee addition collaboration technology humans automated agents share workspace 
pen spoken utterance may meant human system 
implementation multimodal map application exploits features oaa resolution task delegation handled distributed fashion parallel parameters oaa solve meta agents encoding rules help facilitator context user speci decisions priorities knowledge sources 
basic multiuser collaboration handled oaa built data management services 
map user interface publishes data solvables elements icons screen position viewers de nes elements attribute shareable 
update public data changes automatically replicated members collaborative session associated callbacks producing visible ect data change adding removing icon 
functionality recording playback session easily implemented adding agents members collaborative community 
agents record data changes disk read log le replicate changes shared environment 
domain speci code interpreting travel planning dialog cleanly separated speech natural language pen recognition database map user interface agents 
components reused modi cation add multimodal map capabilities applications activities crisis management multi robot control tools video analyst 
related agent systems shown promise exible fault tolerant distributed problem solving 
foundational agent technology focused interagent communication protocols finin patterns conversation agent interactions fipa basic facilitation capabilities including agent name servers types registry services brokers sycara :10.1.1.15.9293
insu cient space cover gamut agent architectures restrict mentioning projects helped evolve notion facilitation 
genesereth emphasized role facilitator genesereth singh genesereth genesereth singh describes facilitator logical reasoning 
facilitator shares emphasis content routing synthesis complex multistep delegation plans go far oaa allowing service requester uence strategies facilitator 
similarly infosleuth system nodine unruh employs matchmaking agents having ability reason deductively expressions requirements requesters match advertised capabilities service providers 
kqml labrou finin finin provides capability de nition performatives facilitation performatives broker :10.1.1.15.9293:10.1.1.15.9293
performatives may suitable structuring basic interactions players facilitated system noted provide communication protocol 
speci strategies employed facilitator means advising facilitator selecting strategy scope kqml speci cations 
sycara delineate concepts matchmaking brokering facilitation useful way explore tradeo inherent approaches 
nd brokered facilitated system exhibit dramatically better performance matchmaking 
directions remains done implementation conceptual levels 
areas investigation include scalability robustness fault tolerance improved development runtime tools improved facilitation strategies services 
facilitators ers advantages weaknesses respect scalability fault tolerance 
plus side grouping facilitator collection client agents provides natural building block construct larger systems 
minus side potential facilitator communication bottleneck critical point failure 
tasks requiring sequence exchanges agents possible facilitator assist nding establishing communication step way communicate direct dedicated channel 
relatively straightforward extension approach whichwe plan incorporate 
complex task con gurations see general areas explore addressing issues 
variety topologies exploited constructing large systems 
useful investigate exhibits desirable properties respect scalability fault tolerance 
second possible modularize facilitator key functionalities 
example goal planning delegation optimization readily separated goal execution 
envision con guration execution task distributed agents freeing facilitator 
third incorporate mechanisms basic transaction management periodically saving state agents facilitator client rolling back latest saved state event failure agent 
respect agent development tools plan updating initial area described paam martin group oriented web centric design 
improvements linguistic tools graphical monitoring agent desirable 
done agent researchers demonstrate increased autonomy individual agents particularly category information ltering personal assistants smarter autonomous facilitators means coordinating multiple agents critical evolution multiagent systems 
experience date shown value handling compound goals advice parameters facilitators 
advice relatively simple discretion exercised facilitator relatively limited 
interested exploring sophisticated strategies facilitator guided higher level advice 
may possible draw existing arti cial intelligence eld planning database eld query planning 
facilitation bene richer representations agents capabilities 
summary open agent architecture provides framework construction distributed software systems facilitates cooperative task completion exible dynamic con gurations autonomous agents 
rationale underlying design compared features distributed frameworks summarized applications built date 
addition described major components oaa infrastructure mechanisms assembling agent system 
mechanisms include general approach cooperation agents organized declaration capabilities service providing agents construction goals users service requesting agents role facilitators coordinating satisfaction goals subject advice constraints may accompany facilities creating maintaining shared repositories data triggers instantiate commitments agents 
adam cheyer luc julia 

multimodal maps agent approach 
proc 
international conference multimodal communication cmc eindhoven netherlands may available www ai sri com oaa bibliography 
adam cheyer luc julia 

multimodal tools video analyst 
proceedings international conference intelligent user interfaces iui san francisco california january 
adam cheyer luc julia jean claude martin 

uni ed framework constructing multimodal applications 
proceedings conference multimodal communication cmc san francisco california january 
philip cohen adam cheyer michelle wang soon 

open agent architecture 
etzioni editor proc 
aaai spring symposium series software agents pages stanford california march 
american association arti cial intelligence 
tim finin yannis labrou james may eld 

kqml agent communication language 
je bradshaw editor software agents 
mit press cambridge 
fipa 

foundation agents fipa speci cation 
available online cselt pa spec pa htm 
gelernter 

mirror worlds 
oxford university press new york 
michael genesereth richard fikes 

knowledge interchange format version manual 
technical report logic stanford university stanford ca 
available online logic stanford edu kif kif html 
genesereth 

software agents 
communications acm 
genesereth singh 

knowledge sharing approach software interoperation 
technical report logic department computer science stanford university stanford ca 
didier adam cheyer luc julia kurt konolige 

robots short report sri international robot team 
ai magazine 
yannis labrou tim finin 

proposal new kqml speci cation 
technical report cs computer science electrical engineering department university maryland baltimore county baltimore md february 
available online www cs umbc edu kqml 
david martin adam cheyer lo lee 

agent development tools open agent architecture 
proceedings international conference practical application intelligent agents multi agent technology pages uk april 
practical application david martin douglas moran adam cheyer 

information brokering agent architecture 
proceedings second international conference practical application intelligent agents multi agent technology uk april 
practical application microsoft 

distributed component object model protocol dcom 
available online www microsoft com activex dcom 
robert moore john dowding harry bratt mark adam cheyer 

spoken language interface battle eld simulation 
technical report arti cial intelligence center sri international june 
www ai sri com natural language projects arpa sls apps html 
douglas moran adam cheyer 

intelligent agent user interfaces 
proc 
international workshop human interface technology pages aizu fukushima japan october 
university aizu 
available www ai sri com oaa bibliography 
douglas moran adam cheyer luc julia david martin 

open agent architecture multimodal user interface 
proceedings international conference intelligent user interfaces iui orlando florida january 
nodine unruh 

facilitating open communication agent systems infosleuth infrastructure 
technical report mcc insl microelectronics computer technology austin texas april 
object management group omg 

complete corba iiop speci cation 
available online www omg org corba htm 
rao george 
bdi agents theory practice 
technical note april 
david schwartz 

cooperating heterogeneous systems 
kluwer academic publishers dordrecht 
sycara decker williamson 

matchmaking brokering 
proc 
second international conference multi agent systems icmas december 
oaa system structure 
application description automated ce mobile interfaces pda telephone integrated community commercial ce applications calendar database email ai technologies speech recognition speaker identi cation text speech natural language interpretation generation 
cohen uni ed messaging adaptable ubiquitous access email fax voice web messages services multimodal map pen voice interface distributed web data 
cheyer julia animated voice interactive interface web 
atis web try live demo speech recognition web 
available www speech sri com demos atis html spoken language interface controlling simulated forces 
moore spoken dialog summarization real time system summarizing human human spontaneous spoken dialogs japanese 
language tutoring speech recognition foreign language learning incorporating user modeling adaptive lessons 
disaster response collaborative wireless map interface emergency response teams 
integrating speech pen natural language image processing technologies video analyst 
cheyer julia oaa mediated facilitation heterogeneous structured semistructured web 
martin oaa rental agent monitors web noti es user housing meet user speci cations 
agent development tools guides agent developer steps required create new agents 
martin multi robot control team robots works assigned tasks st place aaai ce navigation event 
surgical telepresence force feedback training simulator endoscopic surgery 
physical virtual entities modeled oaa agents 
table partial list applications written oaa 
automated ce agents 
user interface automated ce application 
uni ed messaging agents 
multimodal map application 

