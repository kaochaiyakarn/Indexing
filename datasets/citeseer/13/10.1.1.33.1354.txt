sparse functional stores imperative programs bjarne steensgaard march technical report msr tr microsoft research advanced technology division microsoft microsoft way redmond wa appeared acm sigplan workshop intermediate representations ir san francisco ca pp 
january 
proceedings published microsoft research technical report msr tr appear issue sigplan notices 
sparse functional stores imperative programs bjarne steensgaard march years trend program representations imperative programs functional sparse 
new sparse representations nonfunctional new functional representations sparse presence pointer operations 
functional representation sparse presence pointer operations 
conventionally store represented functional program representation single object typically mapping locations values 
show store object may fragmented objects representing part store 
result sparser representation usual benefit directly linking producers consumers static program analysis leads smaller domains values store objects 
store fragmentation corresponds assignment factored ssa form factorization ssa form introduced 
report experiments thorough fragmentation data flow points analysis intermediate level fragmentation linear time complexity points analysis type inference 
years trend program representations imperative programs functional sparse 
new sparse representations cfr fow skr jp non functional new functional representations bmo fie sparse presence pointer operations 
functional representation sparse presence pointer operations 
conventional way representing updates variables functional program representations update operator consumes store object produces new store object domain store objects entire set live locations 
propose replacing store object domain entire set live locations set store objects domains mutually disjoint collective domain entire set live locations 
large software projects long technique different storage pools zones different types objects 
propose doing program representation typically finer grained done software project done automatically results program analyses 
store fragmentation compile time optimization program representation require runtime support 
fragmenting store objects advantages 
static analyses domains values store objects smaller resulting faster analyses join functions non linear cost 
store fragments modified computation loop function wired representation increasing sparseness 
separating operations separate store fragments may enable optimizations structure representation graph 
parallelism operations independent store fragments exposed representation making scheduling superscalar vliw processors easier 
store fragmentation corresponds establishing assignment factored ssa form 
assignment factored ssa form novel factorization dependence edges ssa form 
factorization fewer edges nodes ordinary ssa form cfr location factored ssa form ccf 
spectrum store fragmentation configurations different costs benefits 
spectrum configuration store object corresponding doing fragmentation 
low cost offer benefits 
thorough fragmentation configuration varies program point data flow pointsto analysis egh cwz 
relatively high cost obtain offers maximum benefits terms exposing parallelism representation 
describe experience thorough fragmentation intermediate level fragmentation uses linear time points analysis type inference ste 
store fragmentation terms value dependence graph vdg technique equally useful program representations program dependence web bmo pim terms fie 
quick overview value dependence graph section 
section contains technical results 
overview store fragmentation 
section small algebra creating manipulating store objects 
sections describe different fragmentation configurations experience 
sections introduce assignment factored ssa form relate store fragmentation 
section report experience types fragmentation 
section describe related section summarize indicate directions 
value dependence graph value dependence graph vdg graphical functional representation imperative programs 
resemblance demand view program dependence web bmo graphical demand driven data flow representations pa pa 
described graphical lambda calculus representation imperative programs 
program vdg represented set nodes denoting primitive computations generating values set edges representing generated values flow nodes 
loops unstructured control flow ordinary procedures functions program represented functions lambda nodes vdg 
shows vdg simple program fragment pointer operations 
store implicit representations imperative languages explicit vdg 
true aspects machine state stream state purposes ignore values 
stores explicit values produced primitive computations denotational semantics imperative languages cf 
assignment eliminated methods described ruf represented primitive operation update takes store argument produces new store 
vdg demonstrating pointer updates pointers shown 
initial vdg advantages performing optimizations require local knowledge 
performing analyses global transformations involve store operations initial vdg slightly useful control flow graph cfg asu 
advantages non functional program representations performing sparseness increasing transformations 
programs location address value call call int fact int int return vdg version factorial function written right 
rectangles represent functions function body set computations inside rectangle 
ovals rectangle sides represent parameters return values respectively 
names ovals included clarity 
call nodes represent calls functions 
fl nodes non strict selector nodes choosing arguments depending value third argument 
store store zero 
update lookup call void char char int vdg non standard version function written right 
store objects domains include live locations program 
update operation represents assignment location store 
lookup operation retrieves value location store 
operation performs pointer addition usual semantics 
program trivially removed store domain ruf 
values originally written location directed uses written location 
optimization easily performed functional graphical program representations impossible represent directly cfgs 
optimizations may represented ssa form cfr constructing ssa form requires results alias analysis lr cbc points analysis egh cwz 
pointsto information available vdg sparser performing store fragmentation describe 
store fragmentation data flow analyses monolithic store objects domains entire sets live locations implies values describing assertions live locations locations may modified operations functions values flow 
transfer functions join functions necessary 
program analysis faster transfer functions store operations manipulate values describing assertions modified part store 
possible write transfer functions call lambda boundaries ensure behavior making part program representation ensures analyses benefit automatically having extra 
allowing fragments store bypass call generalizes short circuiting fragments store update operations 
exposes parallelism representation 
function illustrated objects pointed pointers need passed function need passed back 
pointers point different objects reasonable assumption function achieved store fragment parameters function returned modification 
illustrated function 
store fragmentation replaces store object number store objects program representation 
domains replacement objects may overlap union domains may larger domain store object replace 
store fragmentation preserves property computations sequentialized requiring runtime support store fragments 
exists spectrum store different costs benefits 
section presents simple algebra functional stores implement store 
algebra enables construction manipulation store fragments 
sections describe granularities fragmentation experimented 
sections introduce assignment factored ssa form argue store fragmentation functional representation form 
algebra functional stores defined algebra manipulating store objects vdg 
basic elements vdg operators illustrated 
update operations overwrite values store correspond assignments program 
location domain argument store 
lookup operations correspond variable program 
build operations create store objects 
returned value store object domain singleton set containing argument location 
merge operations combine store objects disjoint domains 
conventional implementation stores functional representations imperative programs merge location appear value vdg argument lookup update operations 
store store zero 
update lookup call store vdg non standard version function store fragmentation 
ideally store fragment arguments contain objects pointed pointers contain objects 
store fragmentation directly exposed parallelism analyses faster 
store operations affecting contents locations store store observing contents store may performed parallel call function 
ffl ffi fi fl update store val loc ffl ffi fi fl lookup loc store ffl ffi fi fl build val loc ffl ffi fi fl merge sn ffl ffi fi fl restrict spec store operators functional store objects 
operation occur tandem build operation combined effect extend store object domain single location 
store object created store object larger domain restrict operator 
store object conceptually mapping locations values restrict operator performs restriction mapping smaller domain 
spec argument restrict operator description set runtime locations 
sets values points analysis description 
merge restrict operators construct legitimate store fragmentation point program 
illustrates operators change fragmentation configuration program point expose parallelism independent update operations 
different varying advantages costs currently experimenting different 
monomorphic type store objects type store object domain polymorphic 
ffl ffi fi fl update val floc ffl ffi fi fl update val floc loc ffl ffi fi fl merge store ffl ffi fi fl restrict floc ffl ffi fi fl restrict floc store graph new store operators 
store object store presumed domain floc loc store object store presumed domain floc sets locations loc edges update nodes annotations points analysis 
thorough fragmentation fragmentation configurations experimenting thorough fragmentation aggressively fragments store 
results data flow points analyses egh cwz :10.1.1.25.6013
fragmentation configuration varies possible program points 
defining property thorough fragmentation program point different locations put different store fragments latest possible update possible update 
compute fragmentation configuration optimistic iterative data flow analysis 
slightly aggressive fragmentation exposes amount parallelism representation thorough fragmentation obtained combining sets store fragments thorough fragmentation real consumers transitively selector functions call lambda boundaries store fragment set real consumers store fragments set 
domain store fragments may larger thorough fragmentation may detrimental effect program analysis speed 
experience differ small set program points preferable terms analysis speed 
thorough fragmentation exposes parallelism representation possible points information 
parallelism revealed alias information extra parallelism possible express vdg defined 
parallelism expressed functional representation adding functional equivalent nodes 
quick fragmentation developed linear time points analysis results simultaneously serve fragmentation configurations ste 
algorithm type inference fast union find data structures algorithm inspired hen 
algorithm computes relations equivalence classes locations 
equivalence classes remain entire program 
equivalence classes treated specifications store fragments locations equivalence class store fragment 
fragmentation configuration constant program points 
advantage quick fragmentation thorough fragmentation introduce merge restrict nodes representation 
data flow analyses transfer function merge 



legend def edge cfg edge number def edges join point may quadratic number program statements copied ccf 
restrict node may costly achieved reduction store domains may warrant 
linear points analysis algorithm independent representation easy formulate functional representation 
analysis results representations sparse performing data flow points analysis required thorough fragmentation 
fast analysis results increase sparseness def representation conventional ssa form location factored ssa form number extra may update nodes dependence edges may large conservative results 
worst case results implying update operations may affect location program lead quadratic growth size representation 
increasing sparseness representation store fragmentation increase size representation drastically matter conservative points information worst case points information implies locations store fragment 
functional stores store fragmentation better suited incremental improvement representation conventional sparse representations 
factored ssa form store fragmentation vdg functional representation assignment factored ssa form 
section define assignment factored ssa form compare location factored ssa form ccf ordinary ssa form cfr 
observed ccf ssa form factors def edges asu join points flow graph avoid explosion def edges points 
pure def form theta edges join point single location number uses location join point number definitions location join point 
illustrates point 
ssa form oe node introduced join point edges uses oe node edges oe node definitions 
location factored ssa form called simply factored ssa form ccf factors ssa edges weak updates cwz called preserving definitions ccf 
weak update location operation update location guaranteed overwrite previous contents location 
effects previous update location ignored analyses weak update affect location 
sequence weak updates location followed uses location ssa form requires theta edges 
illustrates point 
location factored ssa form creates special kind node weak update representing join update previous update 
required number edges def edges uses weak update term factor sense ccf 





quadratic number def edges due weak updates 
dashed lines represent ssa form dependence edges location 




location factored ssa form 
dependence edges dashed lines labeled location represent dependency 
statements shown statements original program 
bullets correspond statements ssa form 
single assignment statement original program represented ssa statement location possibly modified original statement ccf 
sequence gamma def def edges daisy chain weak updates 
illustrates program fragment 
location factored ssa form assumes update node location possibly updated assignment statement program 
size representation may quadratic size original program 
number dependence edges linear number ssa statements may quadratic size original program 
location factored ssa form reasonably represented vdg factorization may require assignment represented multiple nodes 
assignment factored ssa form assignment factored ssa form factors ssa edges assignments original program 
number updates disregarding oe updates representation program modulo optimizations 
weak update operation may update possible locations def def 




assignment factored ssa form 
dashed lines represent factored dependence edges bullets represent statements ssa form 
note ssa statement statement original program 
edges closest previous updates locations possibly modified 
illustrated program fragment 
update node represents update multiple locations generalizes oe nodes join points may represent join locations 
number nodes assignment factored ssa form proportional number assignments original program number dependence edges potentially quadratic size original program 
program point set locations represented single dependence edge assignment factored ssa form thorough fragmentation keep store fragment program point 
thorough fragmentation corresponds assignment factored ssa form generalized span entire programs opposed spanning single procedure body 
call lambda boundaries confluence divergence points control flow join points conditional branches treated 
experience thorough fragmentation small set line programs restrict operators necessary representation 
ratio store operation store operations sans restrict operations representation program typically smaller average number locations possibly modified update operation ste 
terms factored ssa forms means number dependence edges assignment factored ssa form number dependence edges location factored ssa form 
experience purposes alias points analysis important time consuming analysis 
fragmentation configuration thorough store fragmentation computed points analysis completed fragmentation provide help needed 
furthermore computing fragmentation configuration time consuming task 
implementation computing fragmentation configuration expensive points analysis terms time memory 
size store fragments thorough fragmentation determined number locations describing location argument update build operations 
various researchers reported average locations pointer expression 
average size store fragments slight variations usually meaning smaller store fragments due merge restrict operations 
quick fragmentation linear points analysis promising 
addition system performed measurements 
preliminary results indicate store fragments average size locations locations data flow points analysis 
store fragments determined contain exactly location store fragments eliminated entirely cf 
arity raising ruf 
experimenting ways improving quality analysis results increasing complexity algorithm possibly obtaining better results 
arity raising ruf performed program representation quick store fragmentation ensure location eliminated arity raising store fragment 
postulate quick store fragmentation absence arity raising lead improvements analysis speed memory requirements proportional measured ruf 
quick store fragmentation able global arity raising hopes ensure continuation improvement curve measured ruf large programs 
programming environment presently prevents proving empirically 
related demand view program dependence web bmo similar vdg 
described programs aliases pointer operations private communication students authors indicated explicit stores representation programs 
merge structures pim fie represent sequences assignment operations 
merge structures roughly equivalent store objects vdg 
concept store fragmentation easily applied pim terms 
store fragmentation best knowledge intermediate program representation 
concept separate storage allocation regions zones known context large software projects 
storage allocated different purposes allocated different allocation zones 
allocation zones may aid debugging easier check objects certain kind observe certain invariants may reduce size live set 
allocation zones entirely programmer control 
partitioning available store couple implementations programming languages 
extension fx programming language called fx fx regions uses regions describe area store effect encompasses 
regions examples store fragments 
fx regions allow program point specific divisions store disjoint areas 
tt describes ml implementation usual ubiquitous garbage collector 
type inference analysis compute regions results expressions written allocated 
important difference regions store fragments regions requires runtime support store fragments exist compile time 
introduced concept store fragmentation functional program representations imperative programs 
showed instance store fragmentation equivalent variant ssa form number dependence edges reduced factoring parallel dependence edges weak assignment statements 
showed store fragments monolithic store objects advantages static program analysis code generation 
briefly reported granularities fragmentation experimenting fragments stores thoroughly possible points information linear time type inference points analysis 
developed store fragmentation increase sparseness program representation thinking ssa form factorizations 
realize store fragmentation corresponds factorization ssa edges assignment operations 
see significant indicator value representation representation arrived different starting points especially starting points trends modern program representations functional representations sparse representations 
implementation currently fragment stores 
plan experiment fragmentation structures arrays 
experimented store functions monomorphic type store objects type store object domain 
allowing functions polymorphic type store objects allow finer grained fragmentation 
plan experiment polymorphic type inference data flow analyses 
acknowledgments vdg program representation developed implemented programming environment roger crew michael ernst erik ruf daniel weise 
daniel weise helped concept store fragmentation clearer acting sounding board ideas 
erik ruf helped understand optimizations uncovered store fragmentation due entirely store fragmentation optimizations uncovered means 
daniel weise ellen spertus helped comments earlier drafts 
asu alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley 
bmo robert arthur maccabe karl ottenstein 
program dependence web representation supporting control data demand driven interpretation imperative languages 
proceedings sigplan conference programming language design implementation pages 
acm press june 
cbc jong deok choi michael burke paul carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
proceedings twentieth annual acm sigplan sigact symposium principles programming languages pages 
acm press january 
ccf jong deok choi ron cytron jeanne ferrante 
efficient engineering ambitious program analysis 
ieee transactions software engineering february 
cf robert cartwright matthias felleisen 
semantics program dependence 
proceedings sigplan conference programming language design implementation pages portland june 
cfr ron cytron jeanne ferrante barry rosen mark wegman kenneth zadeck 
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems october 
cwz david chase mark wegman kenneth zadeck 
analysis pointers structures 
proceedings sigplan conference programming language design implementation pages june 
egh emami rakesh ghiya laurie hendren :10.1.1.25.6013
context sensitive interprocedural points analysis presence function pointers 
sigplan conference programming language design implementation pldi pages orlando fl june 
proceedings appear sigplan notices 
fie john field 
simple rewriting semantics realistic imperative programs application program analysis preliminary report 
proc 
acm sigplan workshop partial evaluation semantics program manipulation pages san francisco june 
published yale university technical report yaleu dcs rr 
fow jeanne ferrante karl ottenstein joe warren 
program dependence graph optimization 
acm transactions programming languages systems july 
david gifford pierre jouvelot mark sheldon james toole 
report fx programming language 
technical report tr mit lcs february 
hen fritz henglein 
efficient type inference higher order binding time analysis 
functional programming computer architecture pages 
jp richard johnson keshav pingali 
dependence program analysis 
proceedings sigplan conference programming language design implementation pages albuquerque new mexico june 
lr william landi barbara ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings sigplan conference programming language design implementation pages 
acm press june 
william landi barbara ryder sean zhang 
interprocedural modification side effect analysis pointer aliasing 
proceedings sigplan conference programming language design implementation pages 
acm press june 
pa keshav pingali arvind 
efficient demand driven evaluation 
part 
acm transactions programming languages systems april 
pa keshav pingali arvind 
efficient demand driven evaluation 
part 
acm transactions programming languages systems january 
keshav pingali beck richard johnson paul 
dependence flow graphs algebraic approach program dependencies 
technical report department computer science cornell university ithaca ny september 
ruf erik ruf 
optimizing sparse representations dataflow analysis 
proceedings acm sigplan workshop intermediate representations ir pages san francisco ca january 
eric michael michael wolfe 
extended ssa factored def chains support optimization parallelism 
proc 
th annual hawaii international conference system sciences pages january 
skr bernhard steffen jens knoop oliver 
value flow graph program representation optimal program transformation 
rd european symposium programming pages 
springer verlag may 
ste bjarne steensgaard 
experiments store fragmentation 
technical report microsoft research 
preparation 
ste bjarne steensgaard 
points analysis linear time 
technical report msr tr microsoft research march 
tt mads tofte jean pierre talpin 
implementation typed call value calculus stack regions 
proceedings st sigplan sigact symposium principles programming languages pages portland oregon january 
daniel weise roger crew michael ernst bjarne steensgaard 
value dependence graphs representation taxation 
proceedings st sigplan sigact symposium principles programming languages pages portland january 
daniel weise roger crew michael ernst bjarne steensgaard 
value dependence graphs representation taxation 
technical report msr tr microsoft research redmond wa april 

