caching strategies mobile environments extended version daniel barbar matsushita information technology laboratory research way rd floor princeton daniel mitl research panasonic com tomasz nski rutgers university department computer science new brunswick usa cs rutgers edu august mobile wireless computing environment large number users equipped low powered palmtop machines query databases wireless communication channels 
palmtop units disconnected prolonged periods time due battery power saving measures frequently relocate different cells connect different data servers different times 
caching frequently accessed data items important technique reduce contention narrow bandwidth wireless channel 
cache invalidation strategies severely affected disconnection mobility clients 
server may longer know clients currently residing cell currently 
propose taxonomy different cache invalidation strategies study impact client disconnection times performance 
study ways improve efficiency invalidation techniques described 
describe techniques implemented different network environments 
keywords wireless caching data management information services mobile wireless computing environment massive number low powered palmtop machines query databases wireless communication channels 
palmtop units disconnected prolonged periods time due battery power saving measures frequently relocate different cells connect different data servers different times 
mobile nomadic computing environment longer requires users maintain fixed universally known position network enables unrestricted mobility users 
mobility portability create entire new class applications possibly new massive markets combining personal computing consumer electronics 
displays architecture general mobile environment 
consists distinct sets entities mobile units mus fixed hosts shown 
fixed hosts called mss mobile support station augmented wireless interface communicate fixed host mss mss mss mss wireless cell wireless cell fixed network fixed host fixed host fixed host mbps gbps kbps mbps trusted part wireless lan cell mss fixed host mobile support station wireless interface wireless interface wireless radio cell mu mu mu mu mobile unit mu mu mu dumb terminals mobile environment mobile units located radio coverage area called cell 
cell real cell cellular communication network wireless local area network operates area building 
case bandwidth severely limited supporting data rates order kbits 
bandwidth wider tp mb sec 
fixed hosts communicate fixed network mobile units communicate hosts mobile fixed wireless channel 
assume mus cache portion database 
disk equipped storage system survives power disconnections flash memories 
assume data updated stationary server mus carry copies data 
mobile computing bring new style computing 
due battery power restrictions mobile units frequently disconnected power 
short bursts activity reading sending mail querying local databases separated substantial periods disconnection 
general distinguish awake time unit sleep time unit inaccessible rest network purposes main difference disconnection failure high frequency disconnection compared failures investigate scenario mobile units query databases replicated stationary servers connected fixed network 
assume stationary server corresponds local mss 
server communicates mobile clients wireless channel 
assume database accessed users mobile wide area intermediate state unit mode cpu working lower rate unit awaken message outside 
purposes state correspond awake state 
truly disconnected mode mobile unit simply ignore incoming messages difference due nature disconnection user knows disconnection occur mobile unit prepare opposed failures general predicted 
move different cells frequently disconnect 
assume data updated servers replicated copies kept consistently caching frequently accessed data items important technique reduce contention narrow bandwidth wireless channel client server 
cache invalidation strategies severely affected disconnection mobility clients server may longer know clients currently located cell 
examples applications profit techniques discuss 
scenario envision massive number users querying local databases wireless channel 
example consider large number mobile users interested news updates involving business information sales profit figures stock market data assume users defined filter selects data items interest 
user may switch unit run application program spreadsheet queries data items perform computations subsequently user may switch mobile unit wake query 
example consider server navigational data containing traffic reports useful information travelers 
assume information kept pictorial form map icons summarize traffic volumes section map useful information 
map divided sections grid 
section data identification number 
user interested particular moment set data items corresponds section currently located plus neighboring sections 
instance set neighboring sections center section current location user 
mobile unit maintains display data sections running application program periodically refreshes display asking values data items involved sections 
large degree locality queries users move relatively slowly 
area covered section map fairly big respect relative displacement user second 
user may switch mobile unit 
clients cache items need worry strategies invalidating caches data gets updated 
ways handling invalidation 
view invalidation strategy obligation server clients 
obligation understood parts serves contract 
mere understanding contract gives clients lot information handle caches 
notion similar agreement set determines data object server client copies equal 
authors logic authentication notion belief reason cache coherence provided protocols 
possible tools reason protocols 
replication database servers important considerations may assume just remote server example mobile salesman may query inventory merchandise selling order check availability pricing information example consider obligation server notify changes item day pm 
clients cache copies know consistency current copy guaranteed yesterday value 
need stricter consistency ignore cached value go directly server paying price communication 
obligation contract server clients understood 
server agrees follow understood policy notify changes items perform notification 
policy server notify changes 
format notification may vary individual messages broadcast reports 
notification range delivering information status particular cache determined running known algorithm delivering information particular item 
notice common understanding obligation gives clients lot priori information 
instance server agrees notify seconds case item changed lack notification tells clients cached valued valid seconds 
fact implement strategies save transmission costs 
types obligations commonly today systems ffl server sends invalidation messages clients item changes value 
andrew file system coda example client server architecture option 
invalidation message regarding data item just changed directed clients caching particular item 
server locate appropriate clients 
disconnected clients reached client reconnection contact server obtain new version cache 
disconnection automatically implies loosing cache 
server case stateful knows state clients caches 
ffl clients query server verify validity caches 
network file system example client server architecture takes approach 
obviously option generates lot traffic network 
types obligations mentioned mobile wireless systems 
requires client register server keeps information cache 
client particular cache gets notified invalid status 
potential waste bandwith 
second approach units required send message want cache fact wasteful bandwidth energy mobile unit 
explore different kind obligation 
techniques server broadcasts report periodically asynchronously database items updated included 
clients may caches different age reports defined time window updates update timestamps instance 
number possibilities composition reports shall describe detail section 
server case stateless know state client caches 
clients 
method choose 
answer depends parameters intensity updates queries sleep awake patterns mobile units 
organized follows 
section state problem 
section describe obligations invalidation reports 
section models analysis strategies 
section asymptotic analysis formulas derived section 
section shows examples different scenarios 
sections show ways improving effectiveness techniques 
section focuses reducing size reports relaxing cache consistency 
section presents adaptive techniques enhance performance scheme 
section shows impact different networking scenarios implementation techniques 
section discuss summarize 
problem statement database collection named data items 
data items numerical stock data temperature textual news 
consider set data servers covering cell see 
assume database fully replicated data server data server serve users currently located cell 
assume large number mus residing cell issuing queries simple requests read copy item 
assume database updated server mus exhibit large degree data locality querying particular subset database repeatedly 
subset hotspot mu 
examine possible strategies handling read requests mobile users 
goal minimize number bits transmitted channel ways downlink server mus uplink mus server 
alternatively mus may may cache data 
choose cache may consider ways managing caches having stateful server having stateless server 
stateful server knows units currently reside cell 
knows states caches 
particular data item changes cached user server send invalidation message refresh message item value analogous standard caching strategy client server architectures 
maintain server state clients inform server come go enter cell leave inform server disconnect reestablish connection 
course subject assumption clients time 
case disconnection caused failure 
stateless server case offers variety algorithms 
server information units currently cell contents ages caches long ago particular unit cached particular data item 
distinguish synchronous asynchronous cache invalidation methods 
asynchronous methods server broadcasts invalidation message data item soon item changes value 
client currently connect mode invalidate cached version item 
client disconnected looses cache entirely 
may avoid piggybacking extra information asynchronous invalidation messages example may include information data items timestamps changes 
just plain invalidation message get invalidation report 
case disconnected client may able save cache afford wait asynchronous invalidation report reconnection provided report indicates cached data items changed client disconnection period 
notice guarantees report sent guarantees waiting time 
synchronous methods cache invalidation periodic broadcasting invalidation reports 
client listen invalidation report order conclude assumption really necessary considerably simplifies analysis query update ti ti ti invalidation report invalidation reports cache valid 
notice adds latency query processing 
decision negative client issue query server refresh cache 
may turn invalidation report leads false alarm fact cache valid 
invalidation report mu concludes cache valid fact 
schemes allow false alarm errors correctly inform client copy invalid 
validity client copy guaranteed invalidation report 
formally means 
server timestamps report time initiation broadcast 
report broadcast timestamp client determines particular item cache valid listening report cache gets timestamped value marked valid time 
client submit uplink request cache invalid obtained copy timestamp equal timestamp request 
broadcast invalidation reports divides time intervals 
notice mu wait invalidation report answering query see 
mu keeps list items queried interval answers receiving report 
notice way operation consequences ffl queries item posed interval answered time interval 
ffl answer query reflect updates item interval query posed 
see 
notice case query predates update interval 
classify invalidation reports sent stateless servers different criteria follows ffl server sends invalidation reports asynchronous invalidation reports broadcasted immediately changes data items occur 
particular report may just contain name changed data item 
general may extra information data items timestamps changes 
synchronous invalidation reports broadcasted periodically 
ffl kind information sent invalidation reports state reports contain information values items database 
example state report give values items changed report 
history reports contain information items values changed 
example history report contain identities items changed seconds parameter timestamps update 
ffl information organized invalidation report uncompressed reports contain information individual items 
example uncompress report may contain values items changed report 
compressed reports contain aggregate information subsets items 
example compressed report may contain aggregate information changes predicates change departure time flights 
wide range methods proposed concentrate synchronous caching methods stateless server 
methods provide latency guarantees querying client client queries data item disconnection period wait invalidation report time bound waiting time submit query server cache 
case synchronous caching guaranteed latency due periodic nature synchronous broadcast 
demonstrate synchronous broadcast methods equivalent asynchronous broadcast 
section describe methods 
strategies section describe strategies invalidation reports stateless server fulfill obligations 
follows assume invalidation report broadcasted seconds denotes set items database 
broadcasting timestamps call strategy ts 
case server agrees obligation notifying items changed seconds 
invalidation report composed timestamps latest change items 
mu listens report updates status cache 
item cached mu cache item reported changed time larger timestamp stored cache updates cache timestamp timestamp report item mentioned 
notice done item cache regardless pending query item 
server begins broadcast invalidation report periodically times il 
server keeps list defined follows jj timestamp update gamma receiving invalidation report mu compares items cache cache timestamp decide keep cache 
mu list queried interval gamma mu keeps variable indicates time received report 
difference current report timestamp variable bigger entire cache dropped 
formally mu runs algorithm gamma drop entire cache item mu cache pair throw cache item cache cache value answer query go uplink query gg terminology section ts uses synchronous history uncompressed reports 
amnesic terminals strategy call amnesic terminals server obligation informing identifiers items changed invalidation report 
mu disconnected needs start rebuilding cache scratch 
assume unit awake listens constantly reports modifies cache dropping invalidated items 
ts server builds list items broadcast 
list defined follows update occurred gamma receiving invalidation report mu compares items cache report 
cached item reported mu drops cache 
considers cached item valid 
mu list queried interval gamma mu keeps variable indicates timestamp report received 
difference current report timestamp entire cache dropped 
algorithm mu follows gamma drop entire cache item mu cache report throw cache item cache cache value answer query go uplink query gg compare method asynchronous broadcast invalidation messages individual data items 
notice cases total number messages downloaded server identical simply groups periodic invalidation cases client looses cache entirely disconnection 
really equivalent asynchronous broadcast invalidation reports results analysis apply equally asynchronous broadcast 
terminology section uses synchronous history uncompressed reports 
signatures signatures checksums computed value items 
sending combined signatures proven useful practice comparing copies file large number may lead saving terms total number packets send due better utilization space packets pages see examples techniques 
techniques compute signature page set combined signatures exclusive individual checksums 
combined signature represents subset pages 
node sends combined signatures node turn diagnose pages copy file different copy 
techniques diagnose fixed number different pages carefully selecting subsets compose combined signatures 
techniques probabilistic diagnose page different certain accuracy probability 
techniques membership page subset decided random methods 
techniques types designed diagnose different pages render superset differing pages actual number differing pages greater file comparison problem differs problem sense mus store entire database caches compute entire set combined signatures 
techniques easily changed accommodate difference doing 
server periodically broadcasts set combined signatures 
composition subsets combined signature universally known agreed exchange information takes place 
mus cache individual items interest combined signatures subsets include items interest mu 
cached combined signatures considered equal ones broadcast current interval 
self contained take account difference file comparison problem technique taken analysis probability falsely diagnosing items 
call technique sig 
item database compute signature sig value item 
signature bits probability different items having signature gammas signatures set items combined performing exclusive individual signatures 
individual signatures bits combined signature bits 
combined signatures subset equal individual items equal probability depends probability items involved signature different combined signature approximately gammas 
notice server agreeing obligation reporting periodically value items 
server chooses fulfill obligation aggregating items sets 
policy understood clients fact aggregation may cause clients falsely diagnose caches invalid 
describe technique variation techniques succ described suspects 
assume mu contains items cache kf items really need invalidated 
randomly chosen sets items priori exchange signatures takes place called sm set chosen item set probability server computes combined signatures sig sig sig broadcasts 
mu caches signatures sig sig sig subsets include items cached mu 
mu compares signatures ones broadcast server constructing syndrome matrix follows ff kg sig sig notice mu puts ff subsets signature cached sent signature sig cached signature sig match 
cases signatures match mu cache signature entry filled zero 
matrix hand mu run algorithm set items cache invalidated 
notation means test item belongs subset combined signature sig variable ffi threshold chosen gamma 
reason obvious analyzing probability false alarm 
ff count count count essentially item declared invalid belongs signatures 
suspected date previous methods assume mu awake constantly listening reported signatures invalidating cached data items line 
terminology section sig uses synchronous state compressed reports 
analysis section develop analytical models techniques section 
stating assumptions model ffl items database 
call set items ffl bandwidth wireless network ffl query go uplink takes bits 
answer takes bits 
ffl timestamp takes bits 
ffl updates occur exponential distribution update rate item 
ffl mu repeatedly query subset high degree locality 
subset hot spot mu 
item hot spot queried mu rate ffl caching strategies server broadcasts invalidation report seconds 
ffl mus get disconnected reconnected cell user turns machine 
model assuming interval mu probability disconnected gamma connected 
assume behavior mu interval independent behavior previous interval 
notice simplifying assumption reality query issued interval mu stay connected order answer query 
assume query gets answered independently unit may decide go sleep 
notation prob queries interval unit awake interval gammal prob awake queries interval gamma gammal prob queries interval gamma prob queries interval gamma gamma gammal prob updates interval gammal gamma prob updates interval gamma gammal derive basic equation describes throughput number queries answered stateless server case 
notice interval divided sections time taken broadcast report rest interval send queries server receive answers 
total number bits transmitted interval lw call number bits transmitted broadcast bc number bits available answering queries cache misses lw gamma bc total number queries interval handled system throughput fraction gamma average hit ratio mu corresponds queries cache hits 
queries takes bits traffic bits due queries hit caches gamma 
amount equal lw gamma bc lw gamma bc gamma order normalize throughput techniques able fairly compare effectiveness define effectiveness strategy tmax tmax throughput unattainable strategy caches invalidated instantaneously incurring cost 
rest section analyze tmax throughput effectiveness strategies section ones obtained caches queries transmitted uplink 
maximal throughput consider strategy server knows exactly units cell contents caches 
assume update occurs server instantaneously sends invalidation message mus item cache 
unattainable strategy get maximum hit ratio occur update item happened 
invalidation reports bc equal 
maximal throughput equation max lw gamma maximal hit ratio hit ratio achieved strategy 
compute assume query occurring particular instant time 
query hit cache query item occurred exactly seconds ago updates queries 
probability event simply probability interarrival time gamma probability second event gamma mh computed gamma gamma evaluating integral caching course mus caching data invalidation report bc intervals 
compute number queries processed interval duration order compare values obtained rest strategies 
caches available hit ratio queries go uplink processing 
throughput cache scenario nc lw ts assume window multiple 
natural choice values queries get answered listening invalidation report 
kl 
order compute bc strategy need calculate number items changed window call value value computed gamma gammaw total size report log 
throughput ts lw gamma log gamma ts need compute average hit ratio ts ts analyzed appendix 
upper lower bounds gammap gammap gamma gammap gammap gamma gammap gammap ts gammap gammap gamma gammap gammaq size report nl log nl expected number items changed broadcast 
value computed similarly equation nl gamma gammal throughput computing equation follows tat lw gamma nl log gamma hit ratio analyzed appendix 
equation gamma gamma sig analyzing probability false alarm 
probability falsely diagnosing items cache studied points view 
probability diagnosing item invalid reality cache outdated 
earlier remarks bounded gammag arbitrarily small increasing expense bits transmitted course 
secondly probability diagnosing cache invalid 
compute probability consider probability valid cache differing signature 
happen true 
item belong set signature 
happens probability 
item cache invalidated set signature different probability gamma gamma gamma gammag notice items cache particular mu subset contains item cached mu 
expression approximated gamma probability valid cache signature match gamma define binomial variable parameters compute probability variable exceed threshold 
probability prob prob kmp 
explains reason threshold ffi chosen kp algorithm 
results chernoff inequality state prob kmp exp gamma gamma 
probability having false diagnose simply nf gamma reality want probability valid caches mu falsely diagnosed smaller certain threshold ffi 
gamma nf ffi 
order true send combined signatures ln ffi ln gamma gamma making noticing gamma gamma equation true holds ln ffi ln throughput number signatures sig lw gamma ln ffi ln gamma sig hit ratio sig analyzed appendix 
equation sig gamma nf gamma asymptotic analysis section analyzes throughput techniques extreme cases 
analysis want shows behavior probability sleeping tends 
table summarizes limit values hit ratios probabilities 
parameter gammal gammal ts gammae gammal gammal gammae gammal gammal gammae gammal gammal gammae gammal gammal sig gammae gammal gammal gammae gammal gammal nf mus sleep behavior call hit ratios techniques approach value sig lagging factor nf case best throughput exhibited report shortest 
mus sleep lot behavior call hit ratios technique approach 
large values caching scenario eventually win 
important notice equation goes faster counterparts ts equation sig equation 
reason denominator contains term gamma tends approaches contain term gamma approaches gamma specially true small values low update rates 
show behavior approaches 
happens small values updates infrequent 
table shows behavior hit ratios 
parameter ts gamma gamma ts gamma gammaq gamma gammaq sig nf table deduce hit ratio ts approximately gamma better especially number queries decreases approaches 
size report proportional number items changed ts winner scenario 
sig hit ratio exhibits constant behavior case equal probability having false diagnose 
slightly better behavior ts offset effect larger invalidation report 
worth pointing update intensive scenarios approaching hit ratios approach 
high rates updating caching strategy winner 
analysis performed section shows ffl strategy winner throughput 
ffl ts sig may outperform 
point large values heavy caching best choice 
strategy ts outperform update rate small 
examples section show scenarios techniques 
scenario corresponds set values parameters involved 
scenario corresponds set values ts effectiveness scenario gamma query sec 
gamma updates sec 
sec 
sec set parameters corresponds scenario infrequent updates 
presents effectiveness techniques varies 
see sig solid line behaves better techniques entire range effectiveness goes rapidly grows 
ts exhibits intermediate effectiveness 
worth pointing scenario value effectiveness caching strategy remains close entire interval 
scenario increase size database bandwidth 
parameters follows notice decreased window size ts ts effectiveness scenario gamma query sec 
gamma updates sec 
sec 
sec shows results set parameters 
similar scenario 
reduced window size ts stay competitive rest techniques size report large 
third scenario set parameters gamma query sec 
gamma updates sec 
sec 
sec scenario update intensive rate updates equals rate queries 
increased reflect need respond changes sig 
shows behavior techniques goes 
ts included effectiveness scenario plot size report scenario exceed rendering technique unusable 
see dominates sig entire range 
point caching strategy advantageous 
worth noticing values efficiency remain relatively high 
due relatively low value max achieved scenario 
words due high update rate maximum throughput achievable low 
encouraging achieve maximum throughput disadvantageous situation 
scenario scenario similar scenario bigger database higher bandwith 
set parameters gamma query sec 
gamma updates sec 
sec 
sec results scenario reported 
see effectiveness reduces considerably obtained scenario 
reason throughput increase rate tm reducing effectiveness 
strategy sig hand competitive scenario choice range values 
scenario ts included size report exceeds rendering technique unusable 
fifth scenario parameters effectiveness scenario gamma query sec 
sec 
sec vary time update rate gamma gamma plot results 
scenario corresponds varying rate updates 
see ts entire range 
ts technique degrades rapidly increase update rate 
sig hand behaves marginally worse entire range values 
scenario parameters gamma query sec 
sec 
sec results reported similar obtained scenario 
strategies ts effectiveness scenario sig practically 
strategy ts degrades rapidly update rate increases 
relaxing consistency caches applications supported system allows relax consistency caches opening door shorter invalidation reports 
instance mus caching stock prices may perfectly acceptable values completely date long percent true prices 
considering cached values quasi copies values server 
quasi copy cached value allowed deviate central value controlled way 
quasi copies represent form obligation server 
long clients understand server providing system take advantage concept reduce size reports 
feature quasi copy coherency condition attached 
object kept cached unit coherency condition specifies allowable deviations central copy 
particularly interested conditions taken 
delay condition establishes time image may lag true value 
formally object allowable delay ff condition times ff gamma value cached unit time value server coherency condition easily enforced mus simply dropping cache ff seconds 
hand mu drops value changed unit may querying server time needs better way weave concept broadcasting techniques 
ts effectiveness scenario item database server keeps vector obligation ist associated 
structure obligation ist built queue 
values stored obligation ist check item included report case changes 
simplicity assume ff jl ff multiple latency reported interval value pushed obligation ist 
mu queries server time just interval value pushed obligation ist 
comes time build report conditions expressed techniques described server checks interval equal element queue obligation ist 
considered reporting case satisfies normal conditions item changed report need considered 
mu caching timestamp ts marks age cache 
cache kept ffl value invalidated report ffl cache ff seconds old 
case unit waits report 
drops cache keeps ts equal time current report 
technique described bound reduce number times reported 
second coherency condition interest arithmetic condition 
value object numeric deviations limited difference values object central copy 
formally times fi fi fix gamma fi fi fi ffl deviation ffl tolerable applications running simply modify strategies section report item changes prescribed limit 
reduce number times item reported 
adaptive invalidation reports proposed number strategies stateless cache invalidation 
section propose extension strategies dynamically adjusts changing query update wake ratios environment 
technique broadcasting timestamps ts strategy 
recall ts strategy server sends timestamps latest change items updates seconds 
mu listens report updates cache throwing item report changed timestamp larger timestamp stored cache updates timestamp timestamp latest report item mentioned 
unit awake listens reports updates cache actively querying 
hit ratio denoted ts course depends window size larger window immune unit sleep time 
note window size latency consecutive invalidation reports 
number important shortcomings ts method 
illustrate consider scenario particular data item changes 
way data item included invalidation report broadcasted timestamp assuming time starts zero 
client cached data item earlier went sleep loosing invalidation reports submit uplink request query 
item queried clients disconnected time lot unnecessary uplink traffic 
environment prevail highly undesirable feature 
fact item hit ratio equal clients adequately informed 
sense keep infinite window item including pair invalidation report 
item queried units sleep lot sense extend window size item consider extreme case 
suppose item changes hit ratio equal zero clients request item uplink query 
situation sense include invalidation report 
window item equal zero hit ratio data item low units sleep item included report summarizing modify ts window size dependent data item 
order server feedback clients modify window size accordingly 
rest section approaches different feedback information 
method method clients send extra information queries sent uplink 
server uses information change window size item 
time time scale careful transition period clients may falsely conclude absence item report unchanged define maximal hit ratio item hit ratio client caching item achieve client sleep gets disconnected 
high actual hit ratio lower due sleep time increase window size 
decrease size window low query activity item low 
maximal hit ratio current hit ratio data item determined server knows cache hits client 
server get information clients satisfying cache hits locally 
clients uplink query request item piggyback timestamps requests satisfied locally previous uplink request way server knowing update history full history queries server compute actual hit ratio 
fact assume server computations periodically 
time scale divided evaluation periods multiples invalidation report latencies reevaluation server strategy results changes individual window sizes happen evaluation period 
discuss happens server strategy reevaluation 
assume evaluation period kl 
room improve 
done increasing window size item worth 
increase size window increase cumulative size invalidation reports particular stay longer report 
ffl total number queries server received evaluation period 
notice parameter number queries went uplink total number queries posed clients 
server receives part information piggybacked queries 
ffl new actual hit ratio evaluation period 
ffl old actual hit ratio period preceding evaluation period 
ffl report new number times mentioned invalidation reports evaluation period 
value course integer interval 
ffl report old number times reported invalidation reports previous evaluation period 
integer interval 
define gain gamma new gamma gamma old gamma report new gamma report old log rearranging equation gain old gamma new gamma report new gamma report old log number items database size bits query sent uplink average size timestamp 
gain represents difference terms number bits send uplink downlink result increasing actual hit ratio expense larger invalidation report 
gain positive certain threshold ffl increase size window decrease size window 
windows modified formula ffl small integer new old ffl gain old gamma ffl new new window size old old window size 
answer happens evaluation period old undefined 
start window size items 
reevaluation increase size window data item larger decrease size window 
easily check case rarely changing data item window increase steadily query rate high units sleep lot 
reverse situation queries maximal hit ratio small window eventually shrink zero 
notice history prior query requests satisfied locally cache hits go uplink cache history updates server determine posteriori optimal window size item size minimize sum invalidation report entries item plus total size uplink requests submitted window applied 
aware dangers data overfitting preferring incremental dynamic approach 
method method clients send extra information queries 
server coarser measure determine window size needs changed 
new number queries asked sent uplink clients evaluation period consequently old number queries previous interval 
report old report old 
define gain method gain new gamma old gamma report new gamma report old log method modify window size equation 
notice difference traffic uplink method measured actual difference reflect change hit ratios 
words sudden bursty activity item occurs method diagnose need change window size item 
return coarser behavior method costly require clients piggyback information queries server compute hit ratios 
role different network environments far discussed cache invalidation methods quite abstractly refering particular network 
clear order able invalidation reports network support broadcasting mode 
additionally possible mss precisely control timing download invalidation reports 
section discuss realistic assumption networks case 
environments ethernet csma cd type protocol easy control time broadcast performed 
similarly cdpd cellular digital packet data currently deployed guarantees timing frame digital information voice channels carry higher priority data 
cases resort multicast mode way addressing invalidation reports 
mode receivers tuned responding particular address 
client mss simply agree multicast group address invalidation reports 
mss periodically downloads invalidation report predefined multicast address wireless client tunes address 
cpu mu doze mode need awaken message particular address arrives invalidation report 
way avoid having active time waiting report sent 
precise timing synchronization 
multiple access schemes concept reservation prma protocol developed macaw protocol xerox possible synchronization downlink channel precise timing delivery 
mu awaken timer just invalidation report transmitted 
clock synchronization algorithm run system guarantee maximum deviation mu clock respect server clock 
summarizing concept invalidation reports largely orthogonal specific networking environment 
just concept address report changes depending underlying network 
address timestamp multicast address 
proposed new cache invalidation methods suitable wireless environment high rate client disconnection 
strategies server periodically broadcasts report reflects changing database state 
categorized mobile units basis amount time spend sleep mode 
different caching strategies turn effective different populations 
signatures data compression technique file comparison best long period disconnection long difficult predict 
broadcasting timestamps proved advantageous query intensive scenarios scenarios rate queries greater rate updates provided units 
rate updates basic idea cdpd empty voice channels existing cellular networks send data packets protocol similar csma cd called cd digital sensing multiple access collision detection increases ts efficient 
method best units rarely go sleep awake time 
methods means exhaustive 
number possible improvements 
aggregate invalidation reports considered varying granularity time timestamps minute say second basis items changes reported group items 
plan address 
caching example wide range classical systems issues expected affected mobile computing environment 
particular expect data broadcasting wireless medium effective way disseminating information large number users cost wireless broadcast depend number users 
step direction demonstrating broadcasting cache invalidation 
number possible improvements scheme performance signatures improved considering weighted schemes data item weighted relative frequency accessed cell updated 
example hot spot items individually broadcast rest database items participate signatures 
way signature vary cell cell depending local usage patterns 
database may fully replicated data servers 
case cost querying different data items may depend location user 
methods dynamically adjusting invalidation report information server gets mobile stations 
easily see method improve behavior caches cases rarely changing item rapidly changing item 
methods benefit type dynamic adjusting 
instance methods uses signatures checksums compress data sent invalidation report 
signatures combined groups mobile units signatures diagnose items invalid 
method introduces probability false diagnose meaning unit believes item invalid reality case 
item diagnosed valid effect 
dynamic strategy change way combined signatures formed individual demands items 
point broadcast solutions require mus listen reports include items mu may caching 
presents problem user paying listening time 
ways alleviate problem 
instance server broadcast indexes tell unit listen items interest 
believe services user pay flat fee subscription rate fee services constrained buildings usage 
cases broadcast mechanisms potential providing better throughput solutions 
acknowledgments kaplan help developing probabilistic models number useful comments 
special go hector garcia molina helpful suggestions concerning general model carefully proofreading 
alonso barbar garcia molina 
data caching issues information retrieval system 
acm transactions database systems september 
barbar nski 
caching strategies mobile environments 
technical report mitl tr mitl june 
barbar lipton 
class randomized strategies low cost comparison file copies 
ieee transactions parallel distributed systems 
bharghavan demers shenker zhang 
macaw media access protocol wireless lans 
proceedings acm sigcomm conference london uk 
burrows abadi needham 
logic authentication 
acm transactions computer systems february 
chernoff 
asymptotic efficiency tests sum observations 
annals mathematical statistics 
fuchs wu abraham 
low cost comparison diagnosis large remotely located files 
proceedings fifth symposium reliability distributed software database systems january 
imielinski badrinath 
querying highly mobile distributed environments 
proceedings eighteen international conference large databases vancouver august 
imielinski badrinath viswanathan 
data dissemination wireless mobile environments 
technical report rutgers university june 
imielinski badrinath 
indexing air 
proceedings international conference management data minneapolis minnesota may 

application group testing file comparison problem 
proceedings international conference distributed computing systems june 
wing satyanarayanan 
belief reason cache coherence 
proceedings acm sigact sigops symposium principles distributed computing august 
goodman 
performance prma packet voice protocol cellular systems 
ieee transactions vehicular technology august 
rangarajan 
rectifying corrupted files distributed file systems 
proceedings international conference distributed computing systems may 
sandberg goldberg kleiman walsh lyon 
implementation sun network filesystem 
proceedings usenix summer conference pages june 
satyanarayanan howard nichols sidebotham spector west 
itc distributed file system principles design 
proceedings th acm symposium operating systems principles pages december 
satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee transactions son computers april 
query query queries sleep update vulnerability scenario query query queries sleep sleep sleep scenario ii appendix order compute hit ratio assume query occurred particular instant time compute conditional probability value cache valid 
illustrate issues consider scenarios figures 
shows scenario query occurred window current query 
update occurred shaded region indicated 
notice mu disconnected periods queries effect hit probability 
shows scenario query occurred period intervals current query 
case unit gone sleep periods shown mu way knowing cache invalid declare 
independently update occurred queries 
shows scenario query occurred period intervals current query 
case mu disconnected periods 
query hit updates shaded region indicated query query queries sleep sleep queries update vulnerability scenario iii queries queries sleep intervals sleep awake queries sleep awake queries queries awake queries awake queries sleep intervals awake queries sleep awake queries sleep queries awake queries sleep awake queries sleep intervals awake queries sleep intervals sleep intervals sleeping 
divide cases study number periods queries larger case 
queries occur intervals need second query hit updates periods 
probability hit case gamma gamma term probability query second term probability having gamma periods queries intervals queries term probability updates intervals 
second case queries occur intervals case order hit unit sleep consecutive intervals updates intervals 
ki probability sleeping consecutive intervals queries happen intervals 
probability difficult compute expressions upper lower bounds 
upper bound expressed ki gamma gammak gamma gamma gamma gammak see justification equation consider 
shows way gamma intervals contain sleeping intervals 
probability having queries asleep posing queries awake gamma intervals gamma probability having queries sleeping intervals gamma intervals gamma gamma multiplying probability get probability hit ratio second case 
ts gamma gamma gamma gamma gamma gamma gammak gamma gamma gamma gammak manipulating equation ts 
gamma gamma gamma gamma gamma jp ts 
gamma gamma gamma gamma gamma gamma gamma gamma bound see ki 
gamma gamma gamma gammak ts gamma gamma gamma gamma gamma gamma gamma gamma gammak manipulating equation ts 
gamma gamma gamma gamma gamma query query awake queries intervals update vulnerability scenario appendix compute hit ratio consider event query happened intervals current 
unit disconnected gamma intervals queries mu dropped cache altogether 
updates intervals 
see 
equation hit ratio gamma gamma simply gamma gamma appendix analysis similar 
order hit mu issue queries current separated gamma intervals 
matter unit sleeps 
updates occur intervals 
diagnose correct 
event happens probability nf 
equation 
equation sig gamma gamma simply sig gamma nf gamma 
