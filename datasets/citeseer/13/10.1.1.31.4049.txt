bell laboratories numerical analysis manuscript correctly rounded binary decimal decimal binary conversions david gay november correctly rounded binary decimal decimal binary conversions david gay bell laboratories murray hill new jersey note discusses main issues performing correctly rounded decimal binary binary decimal conversions 
reviews clinger steele white conversions describes efficiency enhancements 
computational experience kinds arithmetic suggests average computational cost correct rounding small typical conversions 
source conversion routines support claim available netlib 

computers non decimal floating point arithmetic occasion arises convert number decimal form internal floating point form vice versa find internal floating point number near decimal number find decimal number near internal floating point number 
ideally conversion correctly rounded specified sense yield nearest number expressible prescribed number digits appropriate kind 
interest ask correctly rounded conversions cost computationally 
examine question commonly arithmetics ieee binary ibm mainframe vax 
ieee arithmetic assume specified rounding sense ieee round nearest mode unbiased rounding yields nearest floating point number case nearest numbers yields trailing digit 
arithmetics assume biased rounding yields floating point number larger magnitude nearest floating point numbers 
note ibm arithmetic ordinarily rounded illustrated appendix extended precision instructions compute floating point products quotients rounded way 
clinger described scheme relies ieee double extended arithmetic perform correctly rounded decimal binary conversion 
section show modify clinger method double precision arithmetic needed 
steele white described method binary decimal conversion november yields shortest decimal number correctly rounded back binary floating point precision results original number describe variants yield correctly rounded decimal strings having prescribed number digits prescribed number digits decimal point fixed point notation 
section explain ways speed calculations 
section describes computational experience offers concluding remarks 
rest section introduces notation assumptions 
conversions see thesis works cited 
signs easy treat restrict discussion conversion nonnegative numbers 
assume nonnegative normalized internal floating point numbers form floating point arithmetic base number base digits fixed positive integers integer satisfies min max prescribed integers min max digits integers 
ieee arithmetic necessary consider denormalized numbers min 
corresponding consider nonnegative decimal numbers form positive integer integer may positive negative zero 
assume sense power conversions easy power 
floating point integer integer expressed form 
suppose nearest value form bounds ignored 
max said overflow min said underflow 
ieee arithmetic allow gradual underflow min min min consider desired approximation denormalized number nearest suppose exact arithmetic operation yields result min min max max floating point number represented form 
adjacent floating point numbers rounded floating point operation mean calculation yields ieee arithmetic significant digit november 
ieee vax arithmetic hardware arithmetic operations rounded floating point operations sense just defined 
ibm arithmetic extended precision instructions shown appendix compute rounded floating point products quotients 

decimal binary conversion suppose wish find nearest floating point number decimal number initially assume min min max max underflow issue 
clinger notes small near zero expressed product ratio floating point integers compute correctly rounded rounded floating point operation 
case noted clinger single rounded floating point operation suffices large floating point integer positive integer floating point integers 
fortunately cases typical ones applications 
cases obtain combination floating point arithmetic arithmetic large integers compute reasonable approach compute series approximations say 
bi clinger suggests ieee binary double extended arithmetic compute describes procedure changes unit place adds subtracts argues choice iteration correction procedure needed 
unfortunately systems ieee arithmetic hardware support ieee double extended arithmetic systems non ieee arithmetic 
possible native floating point arithmetic high precision integer calculations correction procedure yields usually 
easy floating point arithmetic compute initial guess small constant example describes easy way achieve 
machines ieee vax ibm arithmetic upper bound roundoff analysis 
november floating point numbers adjacent desired approximation necessary sufficient min chosen properly equality holds unbiased rounding biased rounding 
necessary special case necessary condition easily reduced test requires multiplying subtracting large integers equivalent chosen md mb integers 
example max max suffices illustrated smaller choices possible 
suppose fails hold consider note number units place perturb floating point arithmetic starts obtaining floating point approximations integers compute excellent approximation new approximation denotes approximation computed floating point arithmetic 
correct exponent desired floating point approximation power differ unit place differs nearest odd multiple modest multiple happen differs differs nearly preclude infinite loop result suffices replace sign max 
similarly power close happen suitably modified special case power suffices replace max 
worst case procedure just described yields 
happen differs unit place procedure yields 
modified described previous paragraph 
consider ieee arithmetic moment suppose left hand side relaxed min handle denormalized numbers suffices adjust exponents appropriately 
specifically integer bl replace 
november correctly detecting underflow requires extra tests 
example necessary avoid underflow computation implementation discussed testing screen obvious underflows checking necessary temporarily modifying exponent intermediate result final multiplication division borderline cases sets smallest largest positive floating point number appropriate 
similarly avoids underflow computing detecting underflow largest smallest positive floating point number larger smaller respectively 
binary decimal conversion binary decimal conversion simpler decimal binary conversion sense underflow issues 
straightforward approach involves arithmetic integers large integers maintain invariant described steele white 
denote floating point number converted 
determine integers 
compute digits residuals maintain setting mod denotes greatest integer steele white suggest iterative procedure uses integer arithmetic compute holds generally efficient floating point arithmetic compute necessary integer arithmetic compute floating point arithmetics considered straightforward compute integer floating point number log log log log log 


log arithmetics considered november 



approximated constant term log 

ensure easy see taylor theorem 
high precision integer arithmetic compute arbitrarily close decimal approximation approximation significant decimal places places past decimal point desired 
simplest approach generate desired number digits round final digit appropriately 
course rounding involves propagating carries changing values 
alternative advocated steele white stopping test assures compute correctly 
convenient routine structure described saves times costs requires computing larger integers 
suppose chosen wish compute nearest decimal number form ties broken appropriately 
mod delivers desired similarly mod increased happen gives case increment set 
computation precludes special case efficient compute correct just described 
note scaling nonnegative integral power arrange tests involve integer arithmetic 
left right hand sides equal necessary appropriate tie breaking rule decide generating digits 
argued times desirable compute shortest decimal string correctly rounds floating point number example right way represent numbers set elements ampl modeling language prime motivation 
correctly round suffices floating point numbers adjacent tells compute shortest satisfies 
involves stopping tests similar 
account converted binary biased unbiased rounding allow strict inequalities equality lead shorter example binary double precision ieee arithmetic rounds binary floating point number render november 
unbiased rounding ieee arithmetic account render number implementation described honor relaxed version allows equalities appropriate rounding rule yield general necessary integer arithmetic high precision possible faster get floating point arithmetic 
particular floating point integer log log log 
floating point integers roundoff error carried straightforwardly floating point arithmetic 
case floating point arithmetic suffices number significant decimal digits required sufficiently small say log binary double precision ieee arithmetic 
case worthwhile compute 
involves floating point operations 
fact rounded arithmetic 
calculation tantamount fixed point computation subtraction exact multiplication iterations lose cumulative total bits 
vax binary ieee arithmetic ibm arithmetic holds 
right hand november side comes bounding error introduced ignoring significant bits bits set introduce rounding errors 
combining carried desired decimal approximation obtain incrementing propagating carries necessary conclusively yield desired rounded decimal approximation resort high precision integer arithmetic 
alternative tests involves computation digit may save time trailing digits zero 
note need compute 
alternative works follows 
compute test case satisfied test case note quantity appears part reduces equivalent reach holds resort high precision integer arithmetic 
average holds large probably efficient try 
fails large includes case november wish hold reasonable check floating point integer holds means floating point arithmetic 
resorting high precision integer arithmetic may unavoidable 
test suggested large comes requiring yield approximated 

computational experience written functions calculations described respectively designed conform ansi standard locale modes correspond fixed point formatting fortran fw printf df format specifiers floating point formatting ew de computing shortest decimal string rounds binary floating point number inside ansi routines fprintf printf sprintf compute shortest decimal strings advocated steele white 
source code compilable ansi compiler defining appropriate preprocessor variables compile functions suitable binary ieee conventional ibm mainframe vax double precision arithmetic 
source functions available netlib details send netlib research att com message send index fp decimal binary conversions obtain holds 
mixture integer floating point arithmetic compute integer min min rounding error multiplying dividing appropriate power expressed product factors set 
ieee arithmetic involves possibly inexact floating point operations ibm arithmetic vax 
choices deserve brief discussion 
power arithmetics considered computations involving entail multiplications factors form nonnegative integers 
keeping separate track arrange smaller values straightforward choices max max max max give 
tables showing average microseconds repetitions various conversions machines november sgi mhz mips cpu chips running irix system release binary ieee arithmetic 
compilation standard vendor supplied compiler cc 
amdahl running unix uts system release ibm mainframe floating point arithmetic 
single possibly inexact floating point operation suffices computes relevant rounded product quotient assembly coded routines source shown appendix ansi routines converted old style cfront version part translator compiled vendor supplied compiler cc 
pipe vax running th edition unix system 
compilation lcc experimental compiler chris fraser dave hanson see 
tables show approximate times indicated decimal binary conversions show corresponding times routine standard library machine question 
conversions table fall typical cases gets floating point arithmetic cases takes roughly time runs faster pipe 
vax typical cases include significant figures 
conversions table large small exponent digits resort high precision integer arithmetic take considerably longer 
easy find examples machines returns correctly rounded value accurate 
examples need decimal digits 
pipe ieee arith 
ibm arith 
vax arith 
input table 
decimal binary microseconds typical cases 
november input pipe ieee arith 
ibm arith 
vax arith 
table 
decimal binary microseconds hard cases 
tables show approximate times indicated binary decimal conversions show corresponding times sprintf routines standard library machine question 
numbers converted binary versions numbers input column computed 
columns give times computing significant figures 
input numbers tables gets floating point arithmetic seventh allows floating point arithmetic 
input numbers tables chosen force computation high precision integers 
computations column mode may need propagate carries rounding significant figures column approach advocated steele white avoiding carry propagations cost extra computation 
column shows times computing shortest decimal string correctly rounds input binary floating point number generally requires computing large integers floating point integer large input number tables 
column shows time taken library routine compute significant figures input number column shows time taken sprintf computation 
times generally longer shorter sprintf obviously extra overhead accurate sprintf machines 
november input carries possible carries sprintf table 
binary decimal microseconds binary ieee arithmetic typical cases 
carries input possible carries sprintf table 
binary decimal microseconds binary ieee arithmetic hard cases 
carries input possible carries sprintf table 
binary decimal microseconds ibm arithmetic typical cases 
november carries input possible carries sprintf table 
binary decimal microseconds ibm arithmetic hard cases 
carries input possible carries sprintf table 
binary decimal microseconds pipe vax arithmetic typical cases 
carries input possible carries sprintf table 
binary decimal microseconds pipe vax arithmetic hard cases 
concluding remarks shown possible binary decimal decimal binary conversions ways yield correctly rounded results little time penalty common cases 
hard cases resort high precision integer arithmetic 
conversion functions described machine independent routines written carry arithmetic 
assembly coded versions routines run significantly faster machines 
november ieee arithmetic modified reset test inexact flag avoid high precision integer computations cases 
extent worthwhile obviously depends cost resetting testing inexact flag distribution numbers conversion 
numeric extensions group drafting standard correct nearly correct binary decimal decimal binary conversions required 
people expressed concern cost requirement note serve demonstrate cost modest common cases 
course situations precise conversions needed trading speed accuracy desirable 
situations helpful library alternate conversion routines reasonable trade 
principle surprise suggests correctly rounded conversions default 
acknowledgments howard trickey private communication written program testing conversion routines numbers form useful detecting floating point arithmetic bugs 
howard help testing 
norm margaret wright helpful comments manuscript 
ieee standard binary floating point arithmetic institute electrical electronics engineers new york ny 
ansi ieee std 
american national standard information systems programming language american national standards institute new york ny 
ansi 
clinger read floating point numbers accurately pp 
proceedings acm sigplan conference programming language design implementation 
white plains ny june 
contributions proposed standard binary floating point arithmetic ph dissertation univ california berkeley 
dongarra grosse distribution mathematical software electronic mail communications acm may pp 

november ellis stroustrup annotated manual addison wesley 
forsythe moler computer solution linear algebraic systems prentice hall 
gay kernighan modeling language mathematical programming management science pp 

fraser language writing code generators sigplan notices pp 

formalization floating point numeric base conversion ieee trans 
computers pp 

test computer floating point arithmetic unit sources development mathematical software ed 
cowell prentice hall 
steele white print floating point numbers accurately pp 
proceedings acm sigplan conference programming language design implementation 
white plains ny june 
stroustrup programming language addison wesley 
november appendix rounded products quotients ibm extended precision assembly code suitable defines functions rnd prod rnd quot correspond ansi headers double rnd prod double double rounded double rnd quot double double rounded functions compute rounded product quotient required result expressed single possibly inexact product quotient 
entry rnd prod rnd prod rnd prod ld drop entry rnd quot rnd quot rnd quot ld ldr ld ddr std sdr dd sdr ld sdr axr november 
