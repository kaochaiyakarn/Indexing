generalized horn clause programs saumya debray department computer science university arizona tucson az raghu ramakrishnan computer sciences department university wisconsin madison wi november considers general setting axiomatic basis horn clause logic programming 
characterizes variety horn clause computations arising contexts deductive databases various interpretations extensions logic programming involving unification quantitative deduction inheritance terms simple operators discusses algebraic properties operators satisfy 
develops fixpoint model theoretic semantics generalized setting shows fixpoint semantics defined coincides model theoretic semantics 
leads generalized notion horn clause logic program captures variety fixpoint computations proposed different guises allows concise expression logic programming idiom programs involve aggregate operations 
debray supported part nsf ccr 
ramakrishnan supported part nsf iri presidential young investigator award david packard foundation fellowship science engineering 
logic program consists set clauses form gamma logically clause read implication implies reading gives rise distinct notions semantics horn program model theoretic semantics relates set facts follow logically program fixpoint semantics relates set facts computed rules defined program 
case ordinary horn programs essentially idealized version prolog model theoretic semantics program herbrand model intersection herbrand models models function symbols uninterpreted 
conventionally fixpoint semantics horn program obtained repeatedly applying clauses comprising set atoms initially empty collecting results new generated process formalized terms fixpoint operator defined terms fundamental property horn programs program unique herbrand model coincides fixpoint associated operator fact model theoretic fixpoint semantics horn program coincide pleasant mathematically establishes fundamental connection operational fixpoint intended model theoretic semantics large class systems 
researchers investigated variations extensions horn clause programming generally prove similar results various different cases considered examples variations extensions see section 
unfortunately development various model theoretic fixpoint semantics cases typically proceeded scratch 
unsatisfactory reasons machinery involved proofs reinvented minor modifications variant second approaching results piecemeal application basis fundamental essence horn computations causes results hold 
aim address situation considering fairly general setting axiomatic basis horn clause logic programming 
basic idea approach simple define generic notion horn computations simple algebraic setting small set axioms seek capture essence bottom fixpoint evaluation variety horn computations 
axioms serve specify wide class algebraic structures generalized horn programs defined manner conforms intuitions horn computations guarantees existence intuitively reasonable fixpoints models coincide 
process show variety fixpoint computations proposed different guises expressed concisely logic programming idiom 
section demonstrate generality results considering proposed horn frameworks 
discuss connections oldt resolution top computations section 
preliminaries consider language horn clauses want reason fixpoint computations standard non standard domains refer values terms values simply syntactic entities manipulated computation atoms terms feature structures graph structures domain elements set values denoted technically convenient treat predicate arity unary predicate argument tuple terms 
fixpoint evaluation program input set values set values obtained repeatedly applying clauses inferred values initial set inferred values new tuples inferred 
reasons consider arbitrary input sets evaluating deductive database applications base relations usually considered part input program second may want fix meanings predicates plus minus specify arithmetic operations 
assume binary operator omega theta gamma 
notion value instance defined follows 
definition instance omega denote bottom evaluation requires manipulation sets values lift operator omega operate sets obtain operator omega theta gamma 
definition omega fs omega sets values may reasonably assumed convey information operator van emden kowalski immediate consequence operators proposed various extensions horn logic programming essentially specifies information inferred rules program information known true 
general may happen different sets values contain amount information expressed specifying set values canonical representative contains amount information idea sets contain amount information canonical representative 
assume normalization operator gamma 
yields set values canonical representative sets values information content notion set containing amount information captured relation definition recall fixpoint evaluation horn program seen terms repeatedly applying rules program collecting sets tuples obtained rule 
course way knowing time set exists exists unique premature speak set values obtained 
point appeal primarily reader intuitions consider conditions guarantee unique smallest set obtained repeated application rules way 
notion collecting set sets tuples defined terms merge operator phi definition set sets values merge defined phi set values tuples selection operator returns set consisting element tuple element summary development far assumed operators omega operations set union selection yield algebra operations omega defined derived operators omega phi relation notationally convenient development follows 
reader may wish keep mind rest easily restated terms omega essentially process macro expansion 
axioms horn programs axiom states normalization preserves information content idempotent axiom straightforward definition equivalence relation 
notation remainder domain computation typically concerned brevity notation set denoted axiom states intuitively operations interest algebra union omega selection element tuple respect notion information content axiom congruence relation respect omega 
fs fs subsets 

fs omega omega 
third axiom states omega behaves sensibly applied tuples example omega applied tuples yield tuple axiom elements hr omega hs ht note axiom states omega behave completely unconstrained ways applied tuples 
may say want say behavior omega tuples context particular application variables shared different elements tuples handled consistently additional constraints taken account explicitly defining omega particular application 
axioms sufficient show main result states program fixpoint 
second result states program model 
notion model rests reinterpretation notion entailment notion information content discussed 
establish result need additional axiom expresses requisite properties omega axiom consists parts intuitively part states values value omega conveys information second part elaborates special case stating value omega conveys information axiom ftg phi ft omega ftg ftg phi ft omega tg ft omega tg 
axiom section preceding results require axioms 
generic fixpoint semantics generic fixpoint semantics horn programs terms operators omega phi defined follows 
rule application evaluate clause set values body literals necessary generate instances body literal instance appropriate value gamma instance hh omega hh set instances simply fhh ig omega fhh ng appropriate instances head clause obtained simply selecting element tuple computed apply rule fhh ig omega fhh ng gamma 

evaluating program evaluating program input involves computing fixpoint operator yields values inferred body literals rules phi rule pg 

fixpoint semantics fixpoint semantics program fixpoint lfp 
corollary shows exists defined program example illustrates approach shows capture important cases horn computations 
example consider case horn program set values set terms language augmented distinguished element denoting failure unification instance operator omega normalization operator defined follows 
omega usual order notion general instance tuples terms omega general instance exists 

identity function modulo ignoring phi set union modulo ignoring 
case corresponds usual case horn program evaluation yields model semantics falaschi 
alternatively consider variation example operator omega defined modified yields irredundant sets elements element set redundant subsumed element 
words set maximal elements partial order usual general ordering terms modulo variable renaming 
case computation involves subsumption checking time rules applied 
properties phi omega useful developing results 
lemma phi associative commutative idempotent 
proposition omega distributes phi proof definition omega fs omega 
omega fs omega fs omega fs omega fs omega omega omega 
axiom axiom congruence respect omega omega omega phi 
similarly omega omega omega omega omega phi omega 
omega phi omega phi omega shows omega left distributive phi symmetric argument show omega right distributive phi omega distributes phi intuitively sets values phi contains information implies phi reasonably expected contain information 
notion contains information formalized defining binary relation follows definition phi proposition partially ordered forms complete lattice element greatest element join operation phi proof hd vi poset straightforward consequence lemma 
straightforward show definition hd vi phi upper bound lemma phi associative idempotent easy show phi phi phi phi 
similar argument establishes phi 
phi upper bound respect show upper bound consider upper bound definition follows phi phi phi phi phi phi phi lemma phi phi phi lemma phi idempotent phi phi upper bound respect phi element respect follows definition phi phi subset upper bound hd vi element follows complete lattice 
see greatest element lattice hd vi note follows means phi equivalently lemma clause program 
apply rule apply rule 
proof clause gamma simplicity notation denote set fh set fh follows definition axioms fh ig omega fh ig omega 
follows axiom fh ig omega fh ig omega definition apply rule apply rule apply rule 
lemma clause program fs chain hd vi 
apply rule apply rule proof clause gamma 
consider set fr defined follows gamma obvious hr chain 
show induction base case trivial 
inductive case assume consider chain implies idempotent axiom implies inductive hypothesis axiom implies proof proceeds considering application apply rule chain hr applying results chain hs vi 
consider atom apply rule 
case apply rule means atoms hh omega hh true case means apply rule 
apply rule apply rule 
want show apply rule apply rule 
consider atom apply rule suppose apply rule set atoms hh omega hh clearly element call union appear result words implies apply rule 
sets element chain fr difficult see definition set rm apply rule rm 
follows apply rule apply rule apply rule 
apply rule apply rule 
axiom congruence respect easy see lemma apply rule apply rule 
lemma follows 
lemma set rules program set sets atoms 
apply rule apply rule proof easy see definition function apply rule apply rule fu apply rule fu apply rule choices independent apply rule 
main result 
theorem program operator gamma 
continuous 
proof wish show ts tft sg chain fs hd vi 
predicate program defined rules apply rule apply rule lemma apply rule lemma phi apply rule axiom 
definition eval pred gives eval pred eval pred 
union eval pred predicate defined implies immediately 
restated ts 
theorem follows 
combine result knaster tarski fixpoint theorem may stated follows purposes 
theorem hd vi complete lattice meet join operations respectively gamma 
continuous unique fixpoint lfp lfp 
xg element corollary guarantees existence unique fixpoint generic immediate consequence operator corollary horn program operator gamma 
unique fixpoint lfp lfp xg meet operation lattice hd vi 
models domain equipped omega phi develop notions interpretations models show program model coincides fixpoint 
saw earlier sections operator computes elements elements sets elements think set conveying information 
intuitively interpretation assign set elements predicate program model interpretation rule instance obtained omega head follow interpretation facts instantiate body follow interpretation 
important note phrase follow interpretation seen conveying information fact follows interpretation adding fact interpretation change information content 
formalize intuitions 
definition interpretation program element element element say iff phi fag notion corresponds notion truth fact true interpretation definition interpretation model rule gamma set atoms case hh omega hh interpretation model program model rule program 
model said minimal fag intuitively applying phi elements gives information elements similarly omega gives information common elements 
phi omega union intersection operations interpretations models 
result provides intuitive useful connection notion entailment notion information content 
proposition elements element case implies proof suppose phi phi fag phi phi fag phi fag phi lemma phi commutative associative 
phi fag phi fag phi fag phi phi shows implies definition easy show suppose case implies follows equivalently phi fag straightforward consequence definitions axiom phi axiom congruence respect 
fag phi fag fag axiom fag phi corollary proposition elements omega omega proof axiom definition fa omega bg fag consider proposition phi join lattice hd vi follows phi ffs omega phi ffs phi ffs omega definition omega omega fs omega ffs omega phi ffs omega follows definition omega symmetric argument establishes omega observed earlier wish omega operation model intersection 
result justifies choice showing expect fact true intersection interpretations true 
proposition elements element omega proof direction proof follows immediately propositions 
prove part suppose consider set omega axiom definition omega phi fag omega phi fag 
proposition omega distributes phi follows omega omega phi omega fag phi fag omega phi fag omega fag axiom omega idempotent omega omega phi omega fag phi fag omega phi fag 
add fag sides get omega phi fag omega phi omega fag phi fag omega phi fag phi fag omega phi omega fag phi fag omega phi fag omega lemma phi associative idempotent 
follows omega result somewhat surprising weak assumptions operator omega proposition omega associative commutative idempotent 
proof see omega associative note omega omega omega proposition omega follows corollary omega omega omega omega 
see omega commutative note omega proposition omega follows corollary omega omega see omega idempotent note follows proposition omega omega follows corollary omega theorem hd vi forms complete distributive lattice meet operation omega join operation phi element greatest element proof shown proposition hd vi forms complete lattice join operation phi element greatest element proposition omega distributes phi remains show omega meet lattice 
suffices show omega associative commutative idempotent satisfies absorption laws omega phi phi omega associativity commutativity idempotence omega follows proposition 
proposition omega phi omega phi idempotence phi follows phi omega phi join operation lattice hd vi follows phi omega 
establishes phi omega proposition omega distributes phi omega phi omega phi omega phi omega proposition omega idempotent absorption laws satisfied 
follows omega meet operation lattice hd vi 
algebraic structure theorem elaborated result easy consequence theorem definitions omega phi interesting connections establishes transitive closure computations see 
corollary hd omega phi di closed semiring 
proposition states meet models model important consequence program unique model 
proposition models program omega model 
proof consider rule instance ht gamma omega proposition follows models proposition follows omega result establishes important link model theoretic fixpoint semantics 
theorem interpretation model program proof suppose model rule gamma set atoms fb hh hh omega hh definition function apply rule apply rule fh apply rule 
follows definition fh phi fh implies contradiction 
conclude model suppose model rule gamma set atoms instance hh omega hh phi fh true instance rule follows definition function apply rule phi apply rule words apply rule follows immediately main result section proved essentially lines corresponding result corollary horn program denote model respect ordering lfp proof theorem omega meet lattice hd vi 
omega fi model pg proposition omega fi ig theorem lfp corollary 
applications section considers application framework developed preceding sections variety fixpoint computations horn logic programs 
briefly describe proposed fixpoint computations define operators omega case 
easy show axioms satisfied lack space 
existence fixpoint model equality follows consequence theorems proved earlier sections 
usually considerably simpler prove existence fixpoint reasoning local properties simple operators show axioms satisfied appealing corollary carrying explicit proof continuity involves global reasoning behavior relatively complex operators chains limit points 
similar holds regard results models 
quantitative deduction quantitative deduction system described van emden probabilistic inference logic programs 
system inferred atom associated real number weight gives confidence truth atom weight written set weighted ground atoms language consideration augmented distinguished element denoting failure unification 
additionally clause associated real number called factor 
clause head body factor written gamma 
idea set weighted ground atoms rule evaluated ground instance rule gamma fb weighted atom inferred theta evaluating set rules set weighted ground atoms atom may inferred different rules number different ways different weights weight associated inferred atom taken largest different weights associated 
words inference involves minimization weights rule maximization rules 
formulate system instance framework instance operator omega defined follows omega general instance 
common instance min 
set tuples terms weights denote largest value set fa sg set nonempty 
normalization operator defined ft ft logic programming inheritance ait kaci nasr describe system extends conventional logic programming languages incorporating subtyping inheritance directly unification algorithm 
case notions instance merge defined respect type semilattice 
objects partially ordered type structures called terms 
concepts defined formally purposes suffices note set type constructors sigma partially ordered subtype relation theta forms join semilattice theta sigma set terms inherits semilattice structure 
denotes empty set implies term contains occurrence denotes empty set may identified 
shown pair terms greatest lower bound respect type hierarchy exists term constructed effectively 
case instance operator omega join operator terms 
normalization operator identity function difference discards terms subterm 
ft occurs tg logic programming equality number authors considered extending logic programming languages generalizing unification unification unification respect equational theory see example survey 
theoretical aspects extended unification context logic programming studied jaffar gallier 
consider logic programming languages extended deal certain kinds equality theories viewed instances framework 
denote set terms language consideration augmented distinguished element 
equational theory said unitary terms unifiable unique modulo equivalence general unifier 
apart usual notion unification order terms equational theories admit unique general unifiers include boolean rings theories left distributive right distributive 
assume equational theory consideration unitary 
unifiable terms mgu denote unique general unifier instance normalization operators defined follows omega unifiable mgu 
normalization operator essentially identity function aggregate computations example aggregate computation consider program path edge 
path path path plus 
input consist relation edge ha ni edge edge node node cost relation plus hn ni plus suppose interested paths pair nodes shortest paths 
semantics difficult specify usual horn clause formalism 
case may consider sets atoms path equivalent terms information content agree costs shortest paths pair nodes 
formally set tuples path mindist denote cost shortest path nodes mindist minfn ha ni sg fn ha ni sg normalization operator defined follows set triples form ha ni represent nodes graph natural number fha ni mindist instance operator omega usual order notion general instance 
fixpoint evaluation program operators omega defined manner yields shortest paths pair nodes 
notice important operational differences evaluation case case evaluation usual operators point definition retains shortest distances nodes making compact representations efficient computation evaluation program terminates finitely steps long graph contain cycles negative cost 
difficult show definition operators satisfies axioms 
interpretation interpretation may thought execution program domain abs concrete domain computation conc concretization function conc abs gamma 
conc maps domain element concrete domain element describes 
interpretation horn programs studied various researchers see example 
structural relationships concrete domains notion omega abs derived trouble notion instance conc example plausible definition elements abs instance element conc instance element conc 
groundness analysis example nv domain elements denoting respectively set ground terms set non variable terms set terms 
instance nv turn instance 
operator defined ways set union means lub operation domain 
precise efficient precise efficient 
give examples interpretations logic programs may formulated framework 
example success pattern analysis analysis uses depth abstractions obtain finite descriptions infinite sets terms 
set terms language consideration augmented distinguished element denoting failure 
term said canonical depth abstraction depth variable occurs depth 
canonical depth abstraction term modulo variable renaming denoted ffi 
set set canonical depth abstractions language consideration 
instance normalization operators defined follows ffl instance operator omega defined follows omega ffi mgi mgi general instance usual order sense exists ffi 
ffl normalization operator essentially identity function example groundness analysis consider simple groundness analysis uses special constant represent terms known definitely ground constant represent set terms language 
notational convenience define predicate ground follows term ground ground term 
instance operator defined follows omega 
fg fg unifiable ground ground 
normalization operator essentially identity function sophisticated groundness analysis may obtained propositional formulae describe dependencies variables 
class formulae received considerable attention regard class pos positive propositional formulae consists propositional constant false formulae constructed variables connectives 
express analysis framework suffices pos omega 
domain abs pos 
intuitively sets propositional formulae convey amount information logically equivalent simple way capture identify information content set formulae set logical consequences 
abs fs sg 
generalizing instance operator omega discussion far assumed instance operator omega function omega theta gamma 
priori reason 
unreasonable assume omega need unique 
case example nontrivial equational theories 
intuitively correspond omega relation function 
technically turns convenient model generalized instance operator set valued function omega theta gamma 
omega theta gamma 
lifted operator omega theta gamma 
defined follows omega ft omega minor change treatment earlier including results sections particular corollaries extends directly variety applications 
give examples 
logic programming equational theories non unique nontrivial equational theories admit unique general unifiers 
example unification equational theories commutative idempotent associative commutative idempotent finitely general unifiers equivalent theories associative distributive associative commutative distributive infinitely general unifiers 
equational theory terms mgu denote set general unifiers operators omega defined expected way terms omega ft mgu set terms proof operators satisfy axioms straightforward 
example natural language processing describes generator parser simple fragment english 
infix function symbol ffi denote concatenation sequences constants 
concatenation associative ffi obeys axiom ffi ffi ffi ffi sequence constants clauses describe grammar consideration sentence ffi gamma noun phrase verb phrase 
noun phrase np gamma proper noun 
noun phrase ffi np gamma det noun 
noun phrase ffi ffi np gamma det noun prep phrase 
verb phrase ffi vp gamma verb noun phrase 
verb phrase ffi vp gamma verb phrase prep phrase 
prep phrase ffi pp gamma preposition noun phrase 
vocabulary part grammar specified relations determiner preposition noun proper noun verb may specified separately inputs interpreter base relations language deductive databases part program 
example consider vocabulary john 
noun telescope 
noun man 
verb saw 
preposition 
determiner 
associativity ffi able detect ambiguity certain kinds sentences example distinct values fixpoint evaluation program contains sentence john ffi saw ffi ffi man ffi ffi ffi telescope example np john vp saw np man pp np telescope corresponding reading john saw man telescope np john vp vp saw np man pp np telescope corresponding reading john saw telescope man 
logic programming polymorphism subtyping earlier section discussed application framework logic programming inheritance 
assumed subtype relation set type constructors finite semilattice 
theory terms formulated terms order sorted logic 
turns order sorted unification unification types may subtypes types admits unique general unifiers sort structure finite semilattice overloading constructors 
presence overloading polymorphism type assignment constructor case example list constructor cons existence unique general unifiers longer guaranteed number additional restrictions imposed 
discussion earlier indicates operational aspects case handled straightforward way framework existence unique general unifiers guaranteed 
instance operator omega defined described section normalization defined identity function 
proof definition satisfies axioms straightforward 
top computational models logic programming question presents immediately consider extended model horn clause computation similar generalization topdown model computation sld resolution 
things complicated fact bottom fixpoint computation prune set inferences computation top strategy omega restrict search space 
top bottomup approaches restrict computation distinct ways respectively goal directed search early approach consider top computations memoing record generated facts goals recorded effect phi treated set union 
applied final step compute answers 
oldt resolution provides formal basis computation methods methods extension tables represent specific algorithms oldt resolution 
known see close correspondence bottom evaluation programs rewritten magic templates transformation 
methods generate record sets goals facts 
straightforward reformulate terms algebraic operators course simply substitute generic fixpoint evaluation fixpoint evaluation phase magic approach 
distributivity omega phi see theorem hard show versions magic equivalent compute answer sets query predicate 
related directions extended model horn clause programs 
knowledge algebraic formulation novel proposed path algebra special class pro grams transitive closure 
giacobazzi give algebraic semantics constraint logic programs similar spirit details development different example focus minimal set axioms necessary establish necessary semantic equivalences takes different approach starting closed semirings extending class cylindric algebras 
related parker partial order programing shows variety programming problems formulated terms minimizing value expression constraints specify partial order domain computation 
goals limited ambitious parker limited parker restrict domain horn programs ambitious domain strive examine structure computations finer level granularity give axioms characterize wide variety fixpoint computations naturally expressed idiom horn programs 
important problem optimize extended horn programs 
example shortest path query may specified logic program compute path lengths pairs cities followed selection shortest path 
automatically derive equivalent program retains shortest path pair cities point computation difficult problem requiring set program transformation rules extended programs chosen suite choices omega promising results developed algebraic setting case programs involving min max aggregate operations 
basic idea roots discussions suzanne dietrich david warren 
hassan ait kaci patient explanations subtleties order sorted unification gratefully acknowledged 
due michael maher insightful comments earlier version 
ait kaci nasr logic inheritance proc 
thirteenth acm symposium principles programming languages st petersburg beach fl jan pp 

ait kaci nasr login logic programming language built inheritance logic programming vol oct pp 

levi martelli integration logic programming functional programming proc 
international symposium logic programming atlantic city nj feb pp 

giacobazzi levi declarative approach interpretation logic programs technical report tr dipartimento di informatica universit di pisa pisa italy 
levi relation logic functional languages survey logic programming vol 
oct pp 

birkhoff lattice theory ams colloquium publications vol 

bry query evaluation recursive databases bottom top reconciled ieee transactions knowledge data engineering 
graphs networks clarendon press oxford england 
codish dams bottom interpretation logic programs technical report cs dept applied mathematics computer science weizmann institute science rehovot israel oct 
fil winsborough optimal groundness analysis propositional logic logic programming submitted publication 
preliminary version appeared proc 
sixth ieee symposium logic computer science 
debray warren automatic mode inference logic programs logic programming vol 
sept pp 

dietrich extension tables memo relations logic programming proc 
symposium logic programming pages 
falaschi levi palamidessi martelli declarative modeling operational behavior logic languages theoretical computer science pp 
north holland 
gallier sld resolution methods horn clauses equality unification proc 
ieee symposium logic programming salt lake city utah sept pp 

ganguly greco zaniolo minimum maximum predicates logic programming procedings acm symposium principles database systems 
giacobazzi debray levi generalized semantics constraint logic programs proc 
international conference fifth generation computer systems tokyo pp 

goguen meseguer equality types generic modules logic programming functional logic programming eds 
degroot lindstrom prentice hall 
ioannidis wong algebraic approach recursive inference proc 
int 
conf 
expert database systems charleston sc pp 

jaffar 
lassez maher theory complete logic programs equality logic programming vol 
oct pp 

equality prolog proc 
eighth ijcai karlsruhe germany pp 

lloyd foundations logic programming springer verlag 
maher ramakrishnan ej vu fixpoints logic programs proc 
cleveland oh oct 
mannila ukkonen flow analysis prolog programs proc 
fourth ieee symposium logic programming san francisco ca sept 
marriott sndergaard describing success patterns logic programs technical report dept computer science university melbourne australia may 
marriott sndergaard bottom interpretation logic programs proc 
fifth international conference logic programming seattle 
mit press pp 

marriott sndergaard precise efficient groundness analysis logic programs acm letters programming languages systems vol 
nos 
march dec pp 

marriott sndergaard jones denotational interpretation logic programs acm transactions programming languages systems vol 
may pp 

martin nipkow unification boolean rings proc 
th international conference automated deduction oxford july 
springer verlag lncs vol 
pp 

hermenegildo determination variable dependence information interpretation logic programming special issue interpretation vol 
nos 
july pp 

parker partial order programming proc 
sixteenth acm symposium principles programming languages austin tx jan pp 

plotkin note inductive generalization machine intelligence meltzer michie eds elsevier new york pp 

ramakrishnan magic templates approach logic programs proc 
fifth international conference logic programs seattle aug pp 

mit press 
reynolds transformational systems algebraic structure atomic formulas machine intelligence meltzer michie eds elsevier new york pp 

sato tamaki enumeration success patterns logic programs theoretical computer science vol 
pp 

siekmann unification theory unification ed 
kirchner academic press pp 

smolka ait kaci inheritance hierarchies semantics unification unification ed 
kirchner academic press pp 

smolka nutt goguen meseguer order sorted equational computation resolution equations algebraic structures vol 
rewriting techniques eds 
ait kaci nivat academic press cambridge ma pp 

sudarshan ramakrishnan aggregation relevance deductive databases proc 
international conference large databases barcelona spain september 
subrahmanyam 
conceptual basis evaluation strategies integrating functional logic programming proc 
international symposium logic programming atlantic city nj feb pp 

tamaki semantics logic programming language equality proc 
international symposium logic programming atlantic city nj feb pp 

tamaki sato old resolution tabulation booktitle iclp proc 
international conference logic programming lecture notes computer science springerverlag pp 

tarski lattice theoretic fixpoint theorem applications pacific math 
van emden kowalski semantics predicate logic programming language acm oct pp 

van emden quantitative deduction fixpoint theory logic programming vol 
april pp 

laurent database complete proof procedures sld resolution proc 
fourth international conference logic programming pages 
ch 
walther unification sorted theories proc 
th european conference artificial intelligence north holland pp 

david warren memoing logic programs communications acm march 
david warren machine integrates prolog deductive database query evaluation technical report department computer science suny october 

