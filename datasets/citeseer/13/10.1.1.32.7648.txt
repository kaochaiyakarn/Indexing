empirical study reliability unix utilities barton miller bart cs wisc edu lars att com bryan cs wisc edu summary operating system facilities kernel utility programs typically assumed reliable 
experiments able crash utility programs version unix tested 
report describes tests analysis program bugs caused crashes 
content indicators testing debugging programs utilities general term reliability unix 
research supported part national science foundation ccr ccr office naval research digital equipment external research 
copyright miller 

basic operating system facilities kernel major utility programs expect high degree reliability 
parts system frequently frequent implies programs tested working correctly 
systematic statement correctness program probably form formal verification 
technology program verification advancing reached point easy apply commonly applied large systems 
experience led believe formal verification complete set operating system utilities onerous task need form complete testing 
started dark night 
authors logged workstation dial line home rain affected phone lines frequent spurious characters line 
race see type sensible sequence characters noise scrambled command 
line noise surprising surprised spurious characters causing programs crash 
programs included significant number basic operating system utilities 
reasonable expect basic utilities crash core dump receiving unusual input exit minimal error messages crash 
experience led believe serious bugs lurking systems regularly 
scenario motivated systematic test utility programs running various versions unix operating system 
project proceeded steps construct program generate random characters plus program help test interactive utilities programs test large number utilities random input strings see crash identify strings types strings crash programs identify cause program crashes categorize common mistakes cause crashes 
result testing different utility programs versions unix able crash programs 
testing included versions unix underwent commercial product testing 
byproduct project list bug reports fixes crashed programs set tools available systems community 
rich body research program testing verification 
approach substitute formal verification testing procedures inexpensive mechanism identify bugs increase system reliability 
coarse notion correctness study 
program detected faulty crashes hangs loops indefinitely 
goal complement replace existing test procedures 
type study important reasons 
contributes testing community large list real bugs 
bugs provide test cases researchers evaluate sophisticated testing verification strategies 
second bugs caused programming practice provided security holes internet worm gets finger bug additional bugs indicate security holes 
third crashes caused input type 
strange unexpected errors uncovered method testing 
fourth inadvertently feed programs noisy input trying edit view object module 
cases meaningful predictable response 
fifth noisy phone lines reality major utilities shells editors crash 
interested interactions random testing traditional industrial software testing 
testing strategy sounds somewhat naive ability discover fatal program bugs impressive 
consider program complex finite state machine testing strategy thought random walk state space searching undefined states 
similar techniques areas network protocols cpu cache testing 
testing network protocols module inserted data stream 
module randomly perturbs packets destroying modifying test protocol error detection recovery features 
random testing evaluating complex hardware multiprocessor cache coherence protocols 
state space device combined memory architecture large difficult generate systematic tests 
multiprocessor example random generation test cases helped cover large part state space simplify generation cases 
proceeds follows 
section describes tools built test utilities 
tools include fuzz random character generator test interactive utilities scripts automate testing process 
section describes tests performed giving types input utilities 
results tests section analysis results 
analysis includes identification classification program bugs caused crashes 
section presents concluding remarks including suggestions avoiding types problems detected study commentary bugs 
include appendix user manual pages fuzz 

tools developed basic programs test utilities 
program called fuzz generates stream random characters consumed target program 
various options fuzz control testing activity 
second program written test interactive utility programs 
interactive utilities screen editor expect standard input file characteristics terminal device 
addition programs scripts automate testing large number utilities 

fuzz generating random input strings program fuzz basically generator random characters 
produces continuous strings characters standard output file see 
perform different types tests depending options fuzz 
fuzz capable producing printable control characters printable characters groups null zero character 
specify delay character 
option account delay characters passing pipe help user locate characters caused utility crash 
option allows specify seed random number generator provide repeatable tests 
fuzz record output stream file addition printing standard output 
file examined 
options randomly insert newline characters output stream limit length output stream 
complete description fuzz see manual page appendix 
example fuzz test equation processor 
fuzz outfile output stream characters length stream recorded file outfile 

testing interactive utilities utility programs input output files characteristics terminal device vi editor mail program 
standard output fuzz sent pipe sufficient test programs 
program allows test interactive utilities 
allocates pseudo terminal file 
part device file side looks standard terminal device file name form dev side send receive characters terminal file dev see 
creating pseudo terminal file starts specified utility program 
passes characters sent input pseudo terminal read utility 
example fuzz test vi terminal screen editor 
fuzz outfile vi output stream fuzz characters length stream recorded file output 
complete description see manual page appendix 

scripts automating tests command shell script file written type test 
script executes utilities set input characteristics 
script checks existence core file utility terminates indicating crash utility 
core file offending input data file saved analysis 

tests building software tools tools test large collection utilities running versions unix operating system 
utility system executed different types input streams 
test utility program produce results crash program terminated abnormally producing core file hang program appeared loop indefinitely succeed program terminated normally 
note case specify correctness output 
date tested utilities versions unix versions summarized table 
versions derived form bsd bsd berkeley unix 
versions sunos release undergone substantial revision especially kernel level 
sco version system standard ibm aix unix released tested product supporting basic system utilities 
important tests covered hardware architectures systems 
program statement error tolerated machine cause program crash 
referencing null value pointer example type problem 
csh utility tested ibm rt pc 
complete testing progress 
versions unix test identifying machine vendor processor kernel letter dec bsd nfs wisconsin sun sparc sunos sunos nfs hp hp bsd nfs wisconsin sys shared memory sco system rel 
ibm rt pc unix ibm ps aix unix sequent symmetry table list systems tested testing covered total utility programs versions unix 
utilities tested system 
table lists names utilities tested type system utility tested 
detailed description utilities refer user manual appropriate systems 
list utilities covers substantial part commonly mail program screen editors compilers document formatting packages 
list includes commonly utilities cb language pretty printer 
utility program tested subjected different types input streams 
different types inputs intended test variety errors triggered utilities testing 
major variations test data including non printable control characters including null zero byte maximum length input stream 
tests summarized table 
utility vax sun hp aix sequent adb awk bc bib calendar cat cb cc lib col comm compress lib cpp csh dbx dc diction diff ditroff emacs eqn expand fmt fold ftp graph grep grn head ideal indent join latex lex lint lisp look table list utilities tested systems tested part utility crashed utility hung crashed sunos sunos crashed sunos 
utility unavailable system 
utility caused operating system crash 
utility vax sun hp aix sequent mail nm pc pic plot pr prolog refer rev sed sh sort spell spline split sql strings strip style sum tail tbl tee telnet tex tr troff tsort ul uniq units vi wc yacc tested crashed hung table list utilities tested systems tested part utility crashed utility hung crashed sunos sunos crashed sunos 
utility unavailable system 
utility caused operating system crash 
input streams interactive utilities slightly different characteristics 
avoid overflowing input buffers terminal device input split random length lines terminated newline character mean length characters 
input length parameter described number lines scaled factor 

results analysis tests unix utilities produced surprising number programs crash hang 
section summarize results group results common programming errors caused crashes input streams non interactive utilities character types null character input stream size bytes printable printable printable printable printable printable printable printable printable printable printable printable table variations input data streams testing utilities non interactive utility programs input streams interactive utilities character types null character input stream size strings printable printable printable printable printable printable printable printable printable printable printable printable table variations input data streams testing utilities interactive utility programs show programming practices caused errors 
side comment noticed tests programs crash terminate error message message difficult interpret 
basic test results summarized table 
result notice able crash hang significant number utility programs system 
included list programs commonly utilities vi emacs popular screen editors csh shell various programs document formatting 
detected types error results crashing hanging 
program considered crashed terminated producing core state dump file considered hung continued executing producing output having available input 
program considered hung continued produce output input stopped 
hung programs typically allowed execute additional minutes hung state detected 
programs blocked waiting input considered hung 
table summarizes list utility programs able crash hang categorized cause crash showing systems able crash programs 
notice utility crash system 
result due reasons 
reason differences processor architecture 
example vax incorrectly tolerate null pointers architectures sun 
second reason different systems differences versions utilities 
local changes improve degrade utility reliability 
internal structure external specification utilities change system system 
interesting note commercially tested aix unix susceptible versions unix type errors tested 
grouped causes crashes categories pointer array errors checking return codes input functions sub processes interaction effects bad error handler signed characters race conditions currently undetermined 
categories discuss error show code fragments examples error implications error suggest fixes problem 
note example noted text crashes hangs discovered automatic testing 
cause array input sub interaction bad error signed race source utility pointer functions processes effects handler characters condition code unknown adb bc cb lib col csh dc diction ditroff vs emacs eqn ftp indent join lex look plot sh prolog refer spell style telnet tsort ul uniq units vi vh table list utilities crashed categorized cause letters indicate system crash occurred see table 
pointer arrays class pointer array errors case program sequentially access cells array pointer array subscript checking exceeding range array 
common programming errors tests 
example taken cb shows error character input cc string cc 
example easily fixed check maximum array length 
programming style carried extremes form emphasized correct function 
ability overflow input buffer potential security hole shown internet worm 
second class pointer problems caused null pointer 
prolog interpreter main loop incorrectly set pointer value assumed valid pass loop 
crash caused type error occur places 
machines vax null pointer valid reads data location zero 
data accessed machine instructions 
field incorrectly accessed data pointer crash occurs 
machines sun null pointer error program crashes immediately 
path pointer set obvious extra checking may needed 
assembly language debugger adb null pointer 
case pointer supposed global variable set module 
external global definition accidentally omitted variable declaration module expected pointer 
module referenced uninitialized unix zero pointer 
pointer errors appear bad 
pointer contain bad address write variable may unintentionally overwrite data code location 
unpredictable error manifest 
tests crash lex scanner generator permuted index generator examples overwriting data crash ul underlining text example overwriting code 
crash assembler originally appeared result improper input routine 
crash occurred call standard input library routine returns character back input buffer look ahead processing 
actual cause redefined program macro similar function 
unfortunately new macro error checking system version allowed buffer pointer incorrectly set 
new macro looks original routine easy forget differences 
checking return codes checking return codes sign careless programming 
favorable comment current state unix examples error 
tests able crash adb assembly language debugger col multi column output filter ascii terminals utilities error 
adb provides interesting example programming practice avoid 
code fragment represents loop adb procedure called loop 
format line 
rdc 
input line rdc return initial loop reads characters terminating line seen 
rdc routine calls places new character global variable named 
rdc skip tab space characters 
uses unix file read kernel call read characters 
detects input file set value zero 
rdc initial loop check file 
file detected middle line program hangs 
speculate file check initial loop 
may program author thought file occur situation 
awkward handle file location 
difficult program requires extra tests flags complex loop conditions possibly goto statement 
problem complex diagnose extensive macros code fragment macros expanded 
macros may easier overlook need extra test file 
input functions seen cases character input routines loop cause program store locations past array 
input routines read entire strings vulnerable 
main holes internet worm entered gets routine 
gets routine takes single parameter pointer character string 
means bounds checking possible 
tests crashed ftp telnet utilities gets 
scanf routine vulnerable 
input specification possible specify unbounded string field 
example comes tsort topological sort utility 
fscanf input precedes follows input format field specifies unbounded strings 
program precedes follows declared relatively small lengths characters 
possible place bound string field specification solving problem 
sub processes code write carefully designed written follow rules writing programs 
program part program 
unix utilities execute utilities part doing 
example diction style utilities call vi calls csh calls troff 
sub processes called direct access raw input data stream vulnerable erroneous input 
access sub processes carefully controlled insure program input sub process checked 
alternatively utility programmed tolerate failure sub process difficult 
interaction effects interesting errors discovered result unusual interaction parts csh little careless programming 
string cause vax version csh crash string hang continuous output space characters versions csh 
example triggers csh command history mechanism says repeat command began 
find command csh forms error message string form event 
string passed error printing routine uses string parameter printf function 
parameter printf include format items denoted 
describes floating point value printed field characters wide 
format item expects additional parameter printf csh error supplied expected 
string generated normal random testing 
second example string follows path causes csh try print floating point value field characters wide 
seemingly infinite loop printf routine attempt pad output field sufficient leading space characters 
second string generated hand discovering string 
errors prevented substituting printf call simple string printing routine puts 
printf historical reasons having space efficiency 
error printing routine assumed passed strings safe print 
bad error handler best intentions reach completion 
units program detects traps floating point arithmetic errors 
unfortunately error recovery routine increments count number errors detected 
control returned faulty code error recurs resulting infinite loop 
signed characters ascii character code designed codes normally fall range represented bits 
equation processor eqn depends assumption 
characters read array signed bit integers default signed vs unsigned characters varies compiler compiler 
characters compute hash function 
bit character value read appear negative number result erroneous hash value 
index hash table range 
problem easily fixed unsigned values character buffer 
sophisticated language characters strings identified specific type related integers 
error crash versions adb 
consequence error depends address space accessed bad hash value 
error considered subcase pointer array errors 
race conditions unix provides signal mechanism allow program asynchronously respond unusual events 
events include keyboard selected functions kill program usually control kill program core dump usually control suspend program usually control 
programs want allow interrupted suspended want process control characters directly intermediate action terminating suspending 
programs cursor motions features terminal examples programs directly process special characters 
programs start executing place terminal device state overrides processing special characters 
programs exit important restore device original state 
program emacs receives suspend character appears ordinary control character triggering suspend signal 
emacs reading control reset terminal original state respond suspend terminate signals clean internal data structures generate suspend signal kernel program 
control character received input steps program terminate generating core dump 
race condition inherent unix signal mechanism process reset terminal exit atomic operation 
programs vi subject problem 
problem programs processing steps providing smaller window vulnerability 
undetermined errors columns table list programs source code currently available determined cause crash 

project started simple experiment try better understand observed phenomenon programs crashing noisy dial line 
result testing comprehensive list utility programs versions unix appears isolated problem 
offer tangible products result project 
provide list bug reports fix utilities able crash 
qualitative improvement reliability unix utilities 
second provide test method tools simple surprisingly effective 
claim tests exhaustive formal verification required strong claims 
estimate bugs program 
simple testing technique discovered wealth errors commonly near term formal procedures 
tests appear discover errors easily traditional testing practices 
results testing aix unix 

comments results examination results tests exposed common mistakes programmers 
mistakes things experienced programmers know occasional reminder helpful 
inspection errors suggested guidelines array checked valid bounds 
argument range checking full time 
especially 
pointer array checked 
terse elegant style experienced programmers correct programs elegant incorrect ones 
input fields bounded just extension guideline 
unix length specification input format bad idea 
check system call return values checking error result response error result awkward 
pointer values checked 
paths obvious extra sanity check help catch unexpected problems 
judiciously extend trust may careful programmer 
program sure data feed checked 
called defensive programming 
redefine look may eventually forget redefinition 
subject problems occur hidden differences 
may argument excessive procedure overloading languages ada 
error handlers handle errors 
routines thoroughly tested introduce new errors obfuscate old ones 
goto statements generally bad idea 
dijkstra observed years ago programmers difficult convince 
search cause bad pointer prolog interpreter main loop complicated interesting weaving control flow caused goto statements 

comments lurking bugs interesting questions buggy programs unix 
section contains commentary speculation considered editorial factual 
personal experience noticed encounter bugs programs ignore 
bugs ignored serious cause crashes reasons 
difficult isolate exactly activity caused program crash 
second quicker try slightly different method get current job done find report bug 
part informal survey unix user community department comprising researchers staff students unix workstations asked encountered bugs reported 
asked severity bugs reported 
users responded survey reported finding bugs report thirds bugs serious ones 
commentary various users speaks 
quotes responses users involved figured complicated 
changing parameters get core image dbx crash preventing really having deal problem 
experience largely useless report bugs supply algorithms reproduce 
haven reported recovery error usually fast easy 
time effort wasted due single occurrence bug usually smaller time needed report 
don generally report problems gotten impression years security hole mail look time event user mistake take forever fix 
users easy please 
received response survey stated encountered bugs unix software 
number bugs unix explained evolution 
unix suffered features important testing mentality 
early years research tool 
commercial effort required complete testing part environment 
berkeley unix vs system tastes great vs filling competition forced race features power performance 
absent debate serious discussion reliability 
claims industry version system support compared university product 
support unix dealing user complaints releasing significantly reliable product 
unix singled buggy operating system 
strengths help weaknesses visible testing programs unix particularly easy mix match modularity provided pipes standard systems undergo similar tests unix reliability compared systems 

experiments left perform 
tested utilities directly accessible user 
network services receive attention 
simple matter construct program analogous allow connect network service feed output fuzz generator 
second area examine processing command line parameters utilities 
simple construct start utilities command line parameters generated strings fuzz generator 
third area study operating systems 
unix pipes simple apply techniques utility programs tested systems 
random strings fuzz placed file file program input 
comparison different systems provide comprehensive statement operating system reliability 
fourth area random testing help find security holes 
testing involving sending programs random sequences non random key command words 
step fix bugs re apply tests 
re testing may discover new program errors masked errors study 
believe rounds testing needed reach limits tools 
making testing tools generally available invite duplicate extend tests 
initial results coming researches match experiences report 
source code related papers note source binary code fuzz tools unix windows nt available web page ftp cs wisc edu fuzz 
papers available repeat original tests applications unix platforms plus testing network services window applications ftp cs wisc edu technical papers fuzz revisited pdf 
study applying fuzz testing techniques applications running windows nt ftp cs wisc edu technical papers fuzz nt pdf 
extremely grateful jerry popek phil rush jeff fields todd robertson randy locus computing providing facilities support test aix unix system 
grateful matt computer classroom madison wisconsin providing technical support machine 
dave help locating race condition caused emacs crash 
people computer sciences department took time respond survey 
suggestion random testing help find security holes due anonymous referees 
dijkstra goto statement considered harmful communications acm pp 
march 
microscope worm mit perspective communications acm pp 
june 
spafford internet worm crisis communications acm pp 
june 
wood gibson katz verifying multiprocessor cache controller random case generation computer science technical report ucb csd university california berkeley january 
pipe fuzz utility read write write read dev dev utility pipe fuzz output fuzz piped utility 
fuzz test interactive utility 
dev pseudo terminal device dev pseudo device control terminal 

