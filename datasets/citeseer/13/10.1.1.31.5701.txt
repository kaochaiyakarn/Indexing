corrected version appearing proc 
acm sigcomm potential benefits delta encoding data compression jeffrey mogul digital equipment western research laboratory university avenue palo alto ca mogul wrl dec com fred douglis anja feldmann balachander krishnamurthy labs research park avenue florham park nj douglis anja bala research att com permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
caching world wide web currently follows naive model assumes resources referenced times changes 
model provides way update cache entry resource change transferring resource entire new value 
previous papers proposed updating cache entries transferring differences delta cached entry current value 
dynamic traces full contents messages quantify potential benefits delta encoded responses 
show delta encoding provide remarkable improvements response size response delay important subset content types 
show added benefit data compression combination delta encoding data compression yields best results 
propose specific extensions protocol delta encoding data compression 
extensions compatible existing implementations specifications allow efficient variety encoding techniques 

world wide web distributed system benefits caching reduce retrieval delays 
retrieval web resource document image icon applet internet wide area network usually takes time delay human threshold perception 
delay measured seconds 
caching eliminate significantly reduce retrieval delays 
web resources change time practical caching approach include coherency mechanism avoid presenting stale information user 
originally hypertext transfer protocol provided little support caching operational pressures quickly evolved support simple mechanism maintaining cache coherency 
server may supply modified timestamp response 
client stores response cache entry wishes re response may transmit request message modified field containing timestamp known conditional retrieval 
receiving conditional request server may reply full response resource changed may send abbreviated reply indicating client cache entry valid 
includes means server indicate expires timestamp response valid time client may cached copy response time validating conditional retrieval 
proposed specification adds new features improve cache coherency performance 
preserves model responses conditional retrievals server indicates resource value changed transmit entire current value 
common sense suggests traces confirm web resource change new instance substantially similar old 
difference delta instances sent client entire new instance client holding cached copy old instance apply delta construct new version 
world finite bandwidth reduction response size delay significant 
think deltas way squeeze benefit possible client proxy caches 
treating entire response cache line deltas treat arbitrary pieces cached response replaceable unit avoid transferring pieces changed 
dynamic traces full contents messages quantify potential benefits delta encoded responses 
previous papers proposed delta encoding realistic traces quantify benefits 
traces different sites increases confidence results 
show delta encoding provide remarkable improvements response size response delay important subset content types 
show added benefit data compression combination delta encoding data compression yields best results 
propose specific extensions protocol delta encoding data compression 
extensions compatible existing implementations specifications allow efficient variety encoding techniques 

related idea delta encoding reduce communication storage costs new 
example mpeg video compression standard transmits occasional image frames frames sent encoded potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm changes adjacent frame 
sccs rcs systems software version control represent intermediate versions deltas sccs starts original version encodes subsequent ones forward deltas rcs encodes previous versions reverse deltas successors 
jacobson technique compressing ip tcp headers slow links uses clever highly specialized form delta encoding 
spite history appears taken years thought applying delta encoding development caching somewhat haphazard 
published suggestion delta encoding appears williams cache removal policies authors elaborate design 
possibility compressing messages longer history going back early drafts specification 
appears attempted quantify potential benefits loss free compression project explore lossy compression 
study done world wide web consortium reports benefits compression example document 
traces suggest existing client implementations offer accept compressed encodings arbitrary responses apparently lynx exception 
web issue douglis wrote generally compression distributed systems 
project appears published description implementation delta encoding call differencing 
aimed specifically wireless environments includes number orthogonal optimizations 
design propose changing protocol uses pair interposed proxies convert message stream optimized form 
results reported differencing impressive limited selected benchmarks 
banga describe optimistic deltas layer interposed proxies slow link collaborate reduce latency 
client side proxy cached copy resource server side proxy simply send delta 
server side proxy cached copy may optimistically send possibly stale copy client side proxy followed necessary delta server side proxy validated cache entry origin server 
optimistic deltas delta encoding increases number bytes sent network attempt improve latency anticipating modified response origin server 
optimistic delta propose change protocol reported results small set selected urls 
analyzing traces study rate change web resources 

motivation methodology previous papers shown compression delta encoding improve performance selected sets resources analyze traces live users see benefits apply practice 
projects assumed protocol modified relied interposing proxy systems slowest link 
approach adds extra store forward latency may feasible wanted examine benefits delta encoding compression extension protocol 
propose extension section finished implementation 
trace analysis quantify potential benefits proxy applications compression delta encoding 
applications supported proposed changes 
analyze utility techniques various different content types html plain text image formats ways grouping responses queries 
look different algorithms delta encoding data compression examine relative performance high level compression modem compression algorithms 
different traces study busy internet connection points large corporations 
traces obtained instrumenting proxy capturing raw network packets reconstructing data stream 
traces captured internet servers outside corporations include inbound requests 
traces represent different protocol levels time scales user communities criteria pre filtering trace give views real life streams certainly possible environments 
raw traces include lot sensitive information reasons privacy security authors able share traces 
different trace collection methods led somewhat different analyses trace sets 

obtaining proxy traces large user communities gain access web proxy server 
proxies typically installed provide shared caches allow controlled web access security firewall 
proxy convenient place obtain realistic trace web activity especially large user community passive monitor guarantees interesting activity traced loss regardless offered load 
proxy server passive monitor gather traces simplifies task eliminates need reconstruct data streams tcp packets 

tracing environment able collect traces proxy site serves large fraction clients internal network digital equipment 
digital network isolated potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm internet firewalls internet access mediated proxy relays 
site located palo alto california operated digital network systems laboratory relayed requests weekday 
proxy load spread equally alphastation systems running digital unix 
collect traces modified version cern httpd code may proxy server 
minimal modifications reduce risk introducing bugs significant performance effects 
modified proxy code traces selected subset requests receives requests going servers ftp gopher 
requests url set suffixes gif jpeg au mpeg urls omitted order reduce size trace logs 
pre filtering considered url request content type response responses unwanted content types leaked 
request traced proxy records disk file client server ip addresses timestamps various events processing request complete header body request response 
particular proxy installation configured cache responses variety logistical reasons 
means number responses trace contained full body status code proxy operating cache modified responses body status code 
precise number responses depend size proxy cache replacement policy 
received modified responses client hosts employ caches 

trace duration collected traces hours starting afternoon wednesday december morning december 
period proxy site handled requests resulted complete trace records generated gbytes trace file data 
requests omitted prefiltering step terminated requesting client 
tracing progress approximately distinct client hosts proxy site including untraced requests forwarded gbytes response bodies addition message headers length shown standard proxy log format 

obtaining packet level traces large user community constrained proxy reach internet option instrumenting proxy available 
passively monitor network segment connecting community internet reconstruct data stream packets captured 
collected packet level trace connection internet network labs research murray hill new jersey 
trace represents smaller client population proxy trace 
packets internal users tcp port default server port seen site external servers captured tcpdump 
negligible number packets lost due buffer overruns 
raw packet traces reassembled individual tcp streams 
complex process described detail 
streams split files representing body successful request log containing information urls timestamps request response headers 
friday november monday november days collected total packets corresponding roughly gbytes raw data 
proxy trace pre filtered eliminate requests content type url extension 

trace analysis software traces obtained different techniques write different systems analyze 

proxy trace analysis software wrote software parse trace files extract relevant header fields 
analysis software groups unique resource url instances resource 
term instance describe snapshot lifetime resource 
analyses group responses url single instance responses identical modified timestamps response body lengths 
may instances resource instance 
interesting purpose response carried full message body status code meaningful compute difference response bodies just 
analysis program grouped instances iterates looking full body follows previous full body different instance resource 
involve instance presumably server sent modified response status response body identical responses 
pair full body responses different instances resource analysis program computes delta encoding second response response 
done different delta encoding algorithms program reports size resulting response bodies algorithms 
delta computation done extracting relevant response bodies trace log files temporary files invoking delta encoding algorithms files measuring size output 
delta encoding algorithms applied include diff fairly compact format generated unix diff command input ed text editor direct humans 
html files include lines arbitrary length standard ed editor handle long lines actual application technique require improved version ed 
potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm compressed diff output diff compressed gzip program 
vdelta program inherently compresses output 
diff show fairly naive easily available algorithm perform 
vdelta elaborate algorithm identified hunt best delta algorithm output size running time 
unix diff program binary format input files restricted application responses content type field indicated non binary format included text html application postscript text plain application javascript formats 
vdelta formats 

packet level trace analysis software processed individual response body files derived packet trace see section perl script compute size deltas pairs sequentially adjacent full body responses url size compressed version full body response 
proxy trace construction omitted binary format responses stream packet trace included content types 
classified textual non textual responses url extension content type response header resort scanning file variant unix file command 
traces saw requests gaps due packet losses artifacts techniques required process gbytes trace data see details trace processing 
requests detected duplicates created artifacts processing techniques 
sets excluded analysis 
restrict analysis client received complete response body included tcp streams collected syn fin packets client server size reassembled response body equaled size specified content length field response 
left usable responses total 

results trace analysis section describes results analysis proxy packet level traces 

response statistics proxy trace complete records proxy trace represent activity distinct client hosts accessing distinct servers referencing distinct resources urls 
urls contained classified query urls unique prefixes character 
requests mbytes mean bytes message 
request headers mbytes mean bytes response headers mbytes mean bytes 
responses carried full body total mb mean bytes types responses carry information bodies 
responses carried status code modified 
note mean response body size handled proxy site bytes somewhat larger mean size response bodies captured traces 
probably data types especially images filtered trace url extension tend somewhat larger average 

response statistics packet level trace usable records packet level trace represent activity clients accessing servers referencing distinct urls 
urls contained classified query urls unique prefixes character 
urls contained cgi probably cgi scripts 
mean request response header sizes bytes bytes respectively 
responses carried full body total mb response bodies mean bytes full body responses 
responses carried status code modified 
omitted subsequent analyses full body responses trustworthy timing data leaving total fully analyzed responses 
mean response size packet level trace higher proxy trace excludes binary format responses tend large 
difference may simply reflect different user communities 

characteristics responses shows cumulative distributions total response sizes response body size full body responses proxy trace 
distributions packet level trace similar omitted reasons space 
median full response body size bytes proxy trace bytes packet level traces implies packet level trace showed larger variance response size 
note bytes carried response bodies trace carried status responses normal responses status codes carry body small 
size bytes cumulative fraction messages responses total size responses total size responses body size cumulative distributions response sizes proxy trace delta encoding caching useful stream includes potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm url delta encoding url modified date instance caching 
shows cumulative distributions proxy trace number url instance 
curves shown traced resulted full body response 
logged full body responses half urls trace instances 
words resource values change relatively values seen twice urls referenced 
alternative explanation values change origin servers provide responses allow caching 
number cumulative count full body refs url full body refs instance url instance cumulative distributions counts proxy trace 
calculation savings define response delta eligible trace included previous status response different instance resource 
include response conveyed instance identical previous response url probably received caching proxy 
proxy trace status responses delta eligible 
packet level trace status responses delta eligible 
proxy trace status responses excluded consideration identical compared trace 
attribute difference number responses slower rate change image responses pre filtered proxy trace 
packet level trace status responses gif jpeg images responses delta eligible contrast status html responses delta eligible 
additional part discrepancy may result smaller client population packet level traces lead fewer opportunities sharing 
analysis assumption deltas requested proxy applied proxy responses cache done individual clients far fewer responses delta eligible 
section analyze client streams separately deltas applied clients 
delta eligible responses computed delta vdelta program previous status instance trace compressed versions response gzip vdelta 
responses content type field indicated ascii text format text html text plain application postscript computed delta unix diff command compressed version delta gzip 
delta eligible responses proxy trace text format responses responses packet level trace 
response computations measured number response body bytes saved 
estimated amount retrieval time saved response delta compression technique 
include computational costs encoding decoding see section costs 
estimate improvement retrieval time simplistic probably conservative 
estimated transfer time response timestamps traces multiplied estimate fraction bytes saved obtain prediction improved response transfer time 
proxy traces possible separate time transmit request time receive part response estimate original transfer time high 
compensated computing estimates transfer time high includes request time low include request time time receiving bytes response 
multiplied fraction bytes saved low estimate divided result high estimate arrive estimate fraction time saved 
packet level traces able partially validate model 
measured time took receive packets including bytes byte transfer number bytes seen delta encoding compression 
results agree simpler model conservative model reduction size data packet 
shows distribution latencies important steps retrieval full body status responses proxy trace 
steps measured time proxy read parse client request time connect server including dns lookup cost time forward request receive bytes response read system call time receive rest response 
spikes msec may represent scheduling anomaly proxy software spike msec simply represents sum msec delays 
sum steps high estimate transfer time step low estimate 
shows similar view packet level trace 
individual steps somewhat different packet level trace exposes finer detail latencies measured start connection client syn packet 
steps arrival server syn packet request packet response header packet response body potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm latency milliseconds number status client request connect delay data data transfer total status responses proxy trace distribution latencies various phases retrieval proxy trace latency milliseconds client initial syn packet number status responses server syn start request start response hdr start resp 
body response transfer time response body status responses packet level trace distribution cumulative latencies various phases packet level trace response 
shows transfer time response body similar smaller transfer time estimate 

net savings due deltas compression table shows proxy trace responses improved 
left hand columns show results relative just delta eligible responses right hand columns show results expressed fraction full body responses 
account response body bytes traces nearly equivalent improvement traced responses 
table row labeled unchanged shows delta eligible responses resulted delta 
unchanged response delta eligible modified time changed body 
rows labelled diff diff gzip vdelta show delta encoding results responses difference delta eligible response previous instance 
lines show results unchanged responses included 
rows labelled vdelta compress gzip compress show results compressing responses delta encoding 
final row shows improvement including unchanged responses assuming server uses whichever algorithms minimizes response 
encouraging full body responses table shows response body bytes saved vdelta delta encoding 
implies delta encoding provide significant benefits textual content types 
remarkable response body bytes saved delta eligible responses cases recipient cached copy prior instance 
appears potential savings transmission time smaller savings response bytes response time calculation quite conservative noted earlier 
delta eligible responses delta zero length vdelta gave best result time 
diff compression compression best cases respectively simply compressing response gzip worked best cases 
just delta eligible responses best left 
vdelta approach clearly works best just diff save response body bytes delta eligible responses 
half bytes new responses easily shown predecessors 
table shows responses packet level trace improvement available deltas introduced proxy point trace 
results table somewhat different table reasons 
packet level trace included larger set non textual content types leads reduc potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm relative delta eligible responses mbytes seconds relative status responses mbytes seconds computation improved mbytes saved retrieval time saved improved mbytes saved retrieval time saved unchanged diff diff unchanged diff gzip vdelta vdelta unchanged vdelta compress gzip compress best algorithm table improvements assuming deltas applied proxy proxy trace relative delta eligible responses mbytes seconds relative status responses mbytes seconds computation improved mbytes saved retrieval time saved improved mbytes saved retrieval time saved unchanged diff diff unchanged diff gzip vdelta vdelta unchanged vdelta compress gzip compress table improvements assuming deltas applied proxy packet level trace tion effectiveness delta encoding compression see section 
packet level trace analysis uses somewhat accurate conservative model savings transfer time similar reductions number bytes transferred lead different reductions transfer time 
taken results tables imply delta encoding possible usually best way transmit changed response 
delta encoding possible retrieval resource stream data compression usually valuable 

analysis assuming client applied deltas table shows proxy trace results deltas applied individually client proxy proxy 
delta eligible responses client applied deltas perform proxy applied deltas 
smaller fraction responses delta eligible individual clients improvement delta encoding smaller 
words success delta encoding depends somewhat large shared cache proxy provide 
alternatively stream longer day trace show larger fraction client delta eligible responses 

distribution savings tables report mean values improvements number bytes saved amount time saved 
expect delta encoding provide improvement delta eligible response 
cases especially small responses major changes delta encoding save small fraction bytes 
cases small change large response delta encoding save response bytes 
shows distribution fraction response bytes saved delta eligible responses proxy trace 
note vertical axis log scale 
delta encoding saves bytes delta eligible responses bimodal distribution suggests delta encoding saves bytes response 
fact responses proxy trace median number potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm relative delta eligible responses mbytes seconds relative status responses mbytes seconds computation improved mbytes saved retrieval time saved improved mbytes saved retrieval time saved unchanged diff diff unchanged diff gzip vdelta vdelta unchanged table improvements assuming deltas applied individual clients proxy trace response body bytes saved response number responses diff diff gzip vdelta distribution response body bytes saved delta eligible responses proxy trace bytes saved response delta encoding vdelta bytes compared mean bytes 
half delta eligible responses vdelta saved response body bytes includes cases size delta zero response value unchanged 
encouraging implies small overhead extra protocol headers required support delta encoding eat benefit 

influence content type coding effectiveness output size delta encoding data compression algorithms depends nature input case content type response 
effectiveness delta encoding depends amount versions differ vary content type 
subdivided packet level traces content type analyzed subset independently see important dependencies practice 
table shows fraction responses bodies entirely unchanged previous instance 
happen requests came separate clients server unable determine modified request fact refers unmodified resource resource body modified important part response headers change 
table shows type specific differences data example text html responses change text plain responses text plain responses remain unchanged smaller text plain responses change 
column shows conservative estimate amount time wasted transmission unchanged responses 
table show delta encoding effectiveness broken content type vdelta 
table shows dependency content type example delta encoding changed responses effective application octet stream resources text html resources 
octet stream resources associated application 
somewhat surprisingly vdelta algorithm improved half image gif image jpeg responses albeit reducing byte counts image formats compressed 
suspect savings may come eliding redundant header information formats 
apparent scarcity delta eligible images greatly reduces utility delta encoding viewed context entire stream 
believe bandwidth constrained contexts users avoid images suggests delta encoding especially applicable contexts 
table shows effectiveness compression gzip program broken content type 
majority responses improved compression content types compression effective 
surprising image gif image jpeg responses compressed formats compressed generated 
application responses stock quote application compressed nicely doing save potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm content type delta eligible refs mbytes total time refs unchanged bytes unchanged time wasted delta eligible text html application octet stream image gif image jpeg text plain application application image unknown table summary unchanged response bodies content type packet level trace status delta eligible including unchanged delta eligible content type refs mbytes refs mbytes total time refs improved bytes saved time saved refs improved bytes saved time saved content types text html application octet stream image gif image jpeg text plain application application image unknown table summary savings content type vdelta packet level trace transfer time responses quite short 

effect clustering query urls significant fraction urls seen proxy trace urls referenced contained character probably reflect query operation example request stock quote 
convention responses urls response change provides explicit means mark responses appropriate 
trace status responses query urls 
fewer status responses query urls distinct query urls trace requests yield status response redirection different url 
point cases individual responses different queries url prefix prefix url character similar delta encoding effective 
users frequently numerous different queries url prefix effective compute deltas different queries url prefix simply different queries identical url 
banga similar observation 
refer technique clustering different query urls common prefix 
clustering done implicitly post requests post requests carry message bodies response post may depend input url 
report frequency clustering realistic traces 
proxy trace distinct query urls clustered just prefix urls 
status responses query urls delta eligible entire url delta eligible prefix match 
tables show clustering finds cases deltas possible provides significantly reduction bytes transferred response times 
potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm content type refs mbytes total time refs improved bytes saved time saved status image gif text html image jpeg application octet stream text plain image application application video text unknown table summary gzip compression savings content type status responses packet level trace fact comparison tables shows queries clustered delta encoding improves query response transfer efficiency responses general 
note query responses generated fly somewhat shorter average responses query processing overhead server may dominate savings transfer time 
computation improved mbytes saved retrieval time saved unchanged diff diff gzip vdelta mbytes seconds table improvements relative status responses queries clustering comput 
improved mbytes saved retrieval time saved unchanged diff diff gzip vdelta diff vdelta including unchanged responses mbytes seconds table improvements clustering queries status responses queries 
including cost host processing time savings calculation described section omits latency creating applying deltas compressing decompressing responses 
operations cost section quantify cost operations typical hardware platforms 
chose systems mhz running bsd os specint considered slow mhz pentium running linux specint mhz alphastation running digital unix specint 
mhz pentium typical home user mhz alphastation typical high workstation means fastest available 
table shows results computed trials files deltas pairs instances taken packet level trace 
delta experiments pairs text files pairs non text files compression experiments text files non text files 
files chosen representative entire set responses 
sorted responses order size chose nth entry select pairs single instance responses 
express results terms throughput kbytes sec processing step sequential combination server side client side processing steps 
deltas created diff applied ed program deltas compressed output created vdelta fed program 
deltas throughput calculated average size input files 
show standard deviations values 
deviations large large fixed overhead operation depend size input throughputs larger files larger means 
fixed overhead cost starting new process computation ranges msec 
systems tested 
delta compression algorithms exist library func potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm mhz bsd os mhz pentium linux mhz text non text text non text text non text computation mean std 
dev 
mean std 
dev 
mean std 
dev 
mean std 
dev 
mean std 
dev 
mean std 
dev 
diff ed steps diff gzip gunzip ed steps vdelta steps gzip gunzip steps vdelta compress decomp steps vdelta library library steps values kbytes sec elapsed times applicable table overheads compression delta encoding tions implementation easily avoid overhead lines table show preliminary measurements library version vdelta algorithms tested platforms 
results tests suggest simply eliminating separate process reduces overheads order magnitude 
alpha performance non library versions vdelta poor relative slower pentium results library version vdelta imply alpha poor performance non library code due aspect operating system cpu 
attempt include costs calculating potential net savings section idea actual performance systems represented trace computation done parallel data transfer existing versions diff command generates output entirely compatible ed command 
ed requires additional line input stream normally generated running unix command 
adds significant overhead versions unix simple efficient fix problem measurements include execution additional command 
algorithms operate streams bytes necessary produce delta encoded compressed response line precomputed cached server historical trends processor performance promise quickly reduce costs 
observations 
throughputs computations slowest machine gunzip ed faster basic rate isdn line kbits sec kbytes sec library implementations vdelta computations significantly faster throughput line mbits sec kbytes sec 
suggests delta encoding compression certainly useful users dialup lines confirming lines probably useful sites multiple hosts sharing line useful broadband networks current levels cpu performance 
second computation speed scales cpu performance 
example cost ed apply delta appears depend factors cpu speed 
generally vdelta time efficient algorithm delta encoding compression compared diff produces larger deltas 
potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm cost applying delta decompressing response lower cost creating delta compressed response uses ed cpu 
encouraging expensive response creation step step amenable caching precomputation 

modem compression 
users connect internet modem fact slowest links ones benefit data compression modem 
modern modems perform data compression reduce benefit compression 
believe program see entire input file available moderate amount ram able compress html files effectively modem 
conducted simple experiment test transferring plain text compressed versions html files ftp mbit sec ethernet lan modem connections 
urls files listed table measurements local copies urls january 
table shows measurements 
modems involved communicating bps bis compression algorithm form lempel ziv welch algorithm gzip uses lempel ziv algorithm ftp number reasons including lack caching rendering ftp clients retrieved files written disk client mhz intel windows 
file url www org pub www protocols www org pub www www org osg cpu results results html www org osg cpu results rint html table urls modem experiments table shows modem compression algorithms high level compression algorithms reduce link level bit rate transfer time file shorter high level compression modem compression 
example achieved transfer rate file modem compression kbps nominal kbps link transfer rate vdelta compressed version file kbps 
ignoring costs compression decompression client server transfer time file shorter high level compression 
vdelta provided greater savings large files smaller files gzip algorithm apparently provides better results 
useful server generating compressed responses choose compression algorithm document size characteristics network path difficult discover path involves compressing modem 
case high level compression faster relying modem compression particularly large files 
costs compression decompression shown table included transfer time longer files better high level compression 
measurements table slowest available system mhz running bsd os results table imply modern cpu reduce costs substantially 

extending support deltas proposed simple extension support deltas space permits brief description 
assume widely deployed provides better control caching 
client wishes check validity cache entry sends conditional get server 
request indicates identity cached response entity tag match features 
extend adding optional delta header client may express server set delta encoding algorithms understands 
resource changed server supports delta encodings known client server may choose delta encoded response 
server knows exactly previous instance base delta client entity tag specifies unambiguously 
response marked indicate encoding prevent improper caching shared proxies 
deltas slightly increase header sizes 
conditional request headers bytes longer observed mean request size 
client choose omit delta header requests images avoiding overhead 
headers responses slightly longer normal responses increase decrease response body size 

able explore aspects delta encoding study 
discuss issues addressed trace analysis 
course important proof delta encoding design implement measure utility practice variations basic design feasible may need additional trace studies establish effective protocol design 
previous studies implementations double proxy approach adds store forward delays 
note analyses benefit accurate model transfer time including model network congestion 

delta algorithms images significant fraction responses traces logged traced proxy larger fraction response body bytes content type image gif jpeg image formats 
image responses relatively rare converted small deltas save bandwidth 
vdelta appears capable extracting deltas potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm size bytes lan transfer secs modem transfer secs file html gzip vdelta html gzip vdelta html gzip vdelta saved vdelta sec sec sec sec times mean trials standard deviations shown parentheses table effect modem compression transfer time file gzip 
gunzip decomp 
gzip total vdelta 
vdelta decomp 
vdelta total table compression decompression times seconds files tables pairs image files performs worse text files 
evidence vdelta poorly images generated cameras popular sites updated frequent intervals 
mpeg compression video streams relies efficient deltas frames hopes practical algorithm 

effect cache size effectiveness deltas trace analyses assumed client proxy previously traced response base instance delta 
cases responses involved appear close trace cases interval quite large 
implies order obtain full benefits delta encoding shown analyses client proxy retain gbytes cached responses 
clearly infeasible clients 
fairly simple analyze traces maximum time window hour hours looking way back trace searching base instance 
plotting average improvement function time window length see parameter affects performance 
somewhat harder model effect limited cache size 

deltas non contiguous responses analyses delta eligible responses looked status response preceding delta computed 
policy simplifies analysis simplify client server implementations limits number previous instances stored 
possible reductions delta sizes possible computing deltas current instance previous instances sending shortest 
complexity space time overheads policy significant policy hard support protocol design 
modify trace analysis tools evaluate best case savings policies 

avoiding cost creating deltas response time benefits delta encoding tempered costs creating applying deltas 
shown section cost creating delta usually larger cost applying 
fortunately may possible avoid hide cost creating deltas cases 
server receives requests answered responses avoid computation cost delta creation simply caching delta 
estimate savings technique counting number status modified unchanged responses url delta eligible response url trace 
estimate conservative trace included server entire stream 
delta may possible server hide cost creating precomputing caching delta resource changed waiting request arrive 
substantially increase cpu disk load server probably result creation deltas reduce latency seen client especially original files large 
studies shown web server loads periodic bursty time scales 
server background cycles spare spend precompute deltas 

decision procedures deltas compression results show deltas compression improve performance request server decision delta encoding compression simply send unmodified resource value may trivial 
sense server spend lot time deciding approach take transfer unmodified value 
decision depend size type file network bandwidth client presence compressing modem path see section past history resource 
believe simple decision algorithm useful know 
potential benefits delta encoding data compression corrected version appearing proc 
acm sigcomm 
summary previous studies described delta encoding compression useful 
study quantified utility traces actual web users 
best known delta algorithm proxy trace delta eligible response body bytes response body bytes saved transfer time delta eligible responses total transfer time avoided 
trace showed savings delta eligible responses response body bytes improvement response body bytes impressive 
confirmed data compression significantly reduce bytes transferred transfer time content types 
showed added overheads encoding decoding reasonable support deltas add minimal complexity protocol 
conclude delta encoding possible compression 
goal designed distributed system take maximal advantage caches transmit minimum number bits required information theory acceptable processing costs 
delta encoding compression help meet goals 
phong vo discussions relating vdelta glenn fowler discussions regarding diff update problems guy jacobson discussions regarding vdelta compression manolis steven bellovin discussions relating modem compression 
kathy richardson jason wold help obtaining traces gaurav banga deborah wallach proofreading sigcomm reviewers valuable suggestions 
martin arlitt carey williamson 
web server workload characterization search invariants extended version 
discus working dept computer science university saskatchewan march 
ftp ftp cs ca pub discus ps banga douglis rabinovich 
optimistic deltas www latency reduction 
proc 
usenix technical conf pp 

anaheim ca january 
berners lee fielding frystyk 
hypertext transfer protocol 
rfc may 
douglis 
role compression distributed systems 
proc 
fifth acm sigops european workshop 
mont st michel france september 
appears op 
sys 
review april 
douglis feldmann krishnamurthy mogul 
rate change metrics live study world wide web 

submitted publication 
fielding gettys mogul nielsen berners lee 
hypertext transfer protocol 
rfc january 
fox gribble brewer amir 
adapting network client variation demand dynamic transcoding 
proc 
asplos vii pp 

cambridge ma october 

system optimizing web browsing wireless environment 
proc 
nd annual intl 
conf 
mobile computing networking pp 

new york november 
hunt vo tichy 
empirical study delta algorithms 
ieee soft 
config 
maint 
workshop 
berlin march 
jacobson 
compressing tcp ip headers serial links 
rfc february 
fowler korn north rao vo 
libraries file system architecture 
krishnamurthy editor practical reusable unix software chapter 
john wiley sons new york 
hirschberg 
data compression 
acm computing surveys 
mccanne jacobson 
efficient extensible portable network monitor 
progress 
mogul douglis feldmann krishnamurthy 
potential benefits delta encoding data compression 
research report digital equip 
western research lab july 
nielsen gettys baird smith prud hommeaux lie lilley 
network performance effects css png 
proc 
sigcomm 
cannes france september 
tichy 
rcs system version control 
software practice exp july 
williams 
personal communication 
june 
ei cs vt edu williams diff prelim html 
williams abrams abdulla fox 
removal policies network caches world wide web documents 
proc 
sigcomm pp 

stanford ca august 
