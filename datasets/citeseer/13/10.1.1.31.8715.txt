pal lambda free logical framework zhaohui luo department computer science university durham south rd durham dh le email zhaohui luo durham ac uk october lambda free logical framework takes parameterisation definitions basic notions provide schematic mechanisms specification type theories practice 
framework pal logical framework specification implementation type theories martin lof type theory utt 
martin lof logical framework nps computational rules introduced give meanings declared constants 
pal allows talk concepts intuitively object type theories types objects families types families objects types 
particular pal directly represent families families entities done logical frameworks means lambda abstraction 
pal spirit de bruijn pal automath db 
compared pal pal allows represent parametric concepts families types families non parametric objects fully instantiated 
parametric objects represented local definitions claim pal correct meta language specifying type theories dependent type theories advantage exactly capturing intuitive concepts object type theories implementation reflects actual type theories practice 
shall study meta theory pal developing typed operational semantics showing nice meta theoretic properties 
notes wrote title finish development note luo 
partly supported uk epsrc gr gr 
motivations lambda free logical framework takes parameterisation definitions basic notions provide schematic mechanisms specification type theories practice 
reasons consider lambda free logical frameworks include ffl parametric constants definitions associated operations instantiation substitution cut basic arguably simpler notions mechanisms lambda abstraction logical frameworks martin lof logical framework nps 
parametrically defined entity represents family entities functional operation 
ffl user proof system lambda free framework understand meta level lambda abstraction represent concepts families families entities exist object type theories 
grasp concepts object type theory definitional mechanism 
ffl lambda free logical framework clear logical framework meta language provides schematic mechanisms specifying type theories definitional mechanism pragmatic 
worth remarking mechanisms necessary framework practice abstraction 
logical framework pal framework spirit de bruijn pal automath db 
pal logical framework specification implementation type theories martin lof type theory nps utt luo 
martin lof logical framework nps computational rules introduced give meanings declared constants 
pal allows talk concepts intuitively object type theories types objects families types families objects types 
particular pal directly represent families families entities done logical frameworks means lambda abstraction 
compared pal pal allows represent parametric concepts families types families non parametric objects fully instantiated 
implementation proof development system pal truly reflect intended type theory 
type theory specified implemented user concerned object type theory uses definitional mechanism abbreviation 
object type theory types functions say pi types usually confusion object level functions meta level functional operations exist meta framework 
example systems alf mn tends meta level functional operations functional programs ignoring object level functions 
parametric objects represented expressions 
distinctive features pal compared logical frameworks takes definitions lambda abstractions basic 
expressions represent local definitions parametric objects 
meta theory pal new calculus far know 
develop typed operational semantics gog pal show pal nice meta theoretic properties 
section gives formal presentation pal parameterisation mechanism definitional mechanism informal explanations 
explain parametric abstractions represent families types objects represented expressions 
section shows pal specification type theories 
sections consider meta theoretic properties logical framework pal developing typed operational semantics proving computational properties church rosser subject reduction strong normalisation 
briefly discuss issues implementation pal possible extensions framework metatheoretic features coercive subtyping 
pal pal objects kinds 
kinds include non parametric kinds form type el parametric kinds form delta delta non empty context non parametric kind 
non parametric objects objects non parametric kinds represent types objects types parametric objects objects parametric kinds represent families types families non parametric objects 
expressions representing local definitions form kinds objects 
particular parametric objects represented expressions 
give formal description pal informal explanations 
terms terms object expressions kind expressions 
presentational purposes meta theoretic reasons introduce terms associated arities natural numbers 
arity object expression indicates number arguments take forming term instantiation 
arity kind expression indicates number arguments objects take 
write ar dv sets ordinary variables definitional variables arity respectively 
assume ar dv disjoint 
furthermore ar 
ar dv 
dv definition expressions contexts pure contexts terms defined simultaneously structural induction 

set object expressions arity obj defined follows ffl ar obj 
ffl dv obj 
ffl obj obj object expressions 
ffl delta obj obj obj kind delta pure context length dv 

set kind expressions arity kind defined follows ffl type kind 
ffl el kind obj 
ffl delta kind delta pure context length kind 
ffl delta kind kind obj kind delta pure context length dv 

pure context delta sequence entries form ar kind 
context gamma sequence entries form delta obj kind delta pure context length dv 
length context gamma number entries 
set terms arity erm defined obj kind 
shall write arity arity term notation notations ffl delta empty context hi entry write delta context expression delta ffl pure context delta form abbreviated delta stand shall write delta delta indicate delta ffl fv denote set free variables term extends contexts 
ar dv similarly defined ordinary variables definitional variables respectively 
identify terms ff convertible 
judgement forms judgement forms gamma context kind expressions object expressions ffl gamma valid gamma valid context 
convention taken convention hi taken ffl gamma kind kind gamma 
ffl gamma object kind gamma 
ffl gamma equal kinds 
ffl gamma equal objects kind notation ffl delta delta write gamma delta delta sequence judgements gamma delta gamma 
ffl shall write gamma sequence judgements gamma gamma gamma gamma gamma similarly notation gamma stands sequence judgements gamma gamma gamma gamma gamma ffl simultaneous substitution stands note notation assume fv order substitutions matter 
basic rules basic rules contain substitution rules 
formally rules general inference rules logical framework lf see chapter luo 
kind type represents conceptual universe types introduced type kind type kind el kind objects type parametric kinds instantiations parametric objects represent families types families non parametric objects 
totality fully instantiated 
rules parametric kinds form delta 
note parametric entity parametric kind partial instantiation 
appropriate indexing objects parametric object object parametric kind instantiated 
variables parametric kind parametric objects include parametric constants introduced specifying object type theory expressions see 
point lf typed version martin lof logical framework different edinburgh logical framework elf hhp 
quite similar formally intended ways different 
contexts assumptions hi valid gamma kind fv gamma ar arity gamma valid gamma gamma valid gamma gamma general equality rules gamma kind gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma equality typing rules gamma gamma gamma gamma gamma gamma kind type gamma valid gamma type kind gamma type gamma el kind gamma type gamma el el basic rules pal substitution rules gamma gamma valid gamma gamma gamma valid gamma gamma kind gamma gamma gamma kind gamma gamma kind gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma substitution rules pal formation rules parametric kinds gamma delta kind delta hi kind gamma delta kind gamma delta delta gamma delta kind gamma delta delta instantiation rules parametric objects gamma gamma gamma gamma gamma gamma rules parametric kinds pal rule global definitions gamma delta fv gamma dv delta kind gamma delta valid typing equality rules global definitions gamma delta gamma valid gamma delta gamma delta gamma delta gamma valid gamma delta gamma delta delta rules global definitions 
definitions pal introduce pal global definitions form delta entries contexts local definitions expressions form delta variables delta bound definitional variable bound global definitions global definitions introduced contexts means rules 
substitution rules rule form kind remarks order 
ffl note rule global definitions require kind arity equal type el 
substitution rules global definitions gamma delta gamma valid gamma delta gamma valid gamma delta gamma gamma delta gamma delta substitution rules global definitions 
rules gamma delta kind gamma delta kind gamma delta gamma delta delta congruence rules expressions gamma delta delta gamma delta gamma delta gamma delta gamma delta delta gamma delta delta gamma delta gamma delta gamma delta gamma delta delta delta congruence rules expressions 
body global definition type object type 
delta empty rules specialise non parametric kinds 
ffl global definition fully applied totality 
ffl meaning globally defined entity directly means expressions form delta local definitions local definitions expressions introduced rules 
abide congruence rules equality rules 
parametric abstraction expressions pal plays role parametric abstraction local definitions 
particular delta empty term delta viewed form abstraction parametric abstraction 
may introduce new notation parametric abstraction form delta equality rules expressions fi gamma valid gamma gamma gamma delta gamma delta gamma delta gamma delta kind gamma delta gamma delta gamma delta gamma delta delta delta gamma delta kind gamma delta delta equality rules expressions 
represents family types non parametric objects indexed sequences objects delta 
variables delta bound variables 
may introduce parametric abstractions independently adding rules 
case luo 
gamma delta kind gamma delta delta gamma delta delta gamma delta kind gamma delta delta delta gamma gamma kind gamma gamma fv gamma parametric abstractions special form expressions 
definitional rule defines parametric abstraction terms expressions pal gamma delta valid gamma delta delta delta definition rules parametric abstractions derivable 
notation parametric abstraction examples 
want take parametric abstraction application basic define expressions means parametric abstraction 
come technical difficulty doing note expressions kind information parametric abstraction 
importantly expressions general parametric abstractions expressions including parametric kinds 
furthermore local definitions useful proof development programming environment 
natural take expressions basic parametric abstraction defined notion 
distribution laws expressions expressions satisfy number distribution laws say local definitions distributed structured expressions 
see luo details distribution rules taken replace equality rules 
example gamma delta delta kind gamma delta delta delta delta delta pal distribution rules admissible 
specification type theories pal martin lof type theory nps specify type theories logical framework pal key observations specify type theories simpler logical framework arbitrary lambda abstraction 
example types utt luo specified including impredicative universe logical propositions inductive types inductive families covered inductive schemata predicative universes 
general specification type theory pal consist collection declarations new constants non parametric parametric collection associated computational equality rules 
parametric objects parametric constant partial instantiation 
kind may introduce constant declaring effect introducing rule gamma valid gamma introduce computation rules constants asserting extends type theory rule gamma gamma kind kind gamma note non parametric kind words computational equality introduced objects type types 
give examples introducing type constructors associated operators constants 
omit el write el examples 
conforms restriction considered luo lf specify type theories 
example examples parametric constants include introducing type natural numbers type type corresponding computation rules example pi types pi type family types introduced follows pi type type type type type pi pi type type pi type pi corresponding computation rule pi define application operator app type type pi follows app df pi pi note parametric abstraction definition 
show expected equalities hold 
example show usual fi equality app furthermore propositional equality pi leibniz equality show logical rule holds logical proposition provable app pi example family types vectors objects type introduced follows type natural numbers introduced 
ec type type nil type ec cons type ec ec succ type ec type nil ec succ cons ec corresponding computation rules nil nil succ cons succ cons example types type family types introduced follows type type type sup type type ew type type type sup corresponding computation rule ew sup sup special cases types include type ordinals note parametric abstraction computation rule 
simple example shows local definitions may 
example application operator pi types defined means local definitions follows 
app pi type pi typed operational semantics pal sections study meta theory pal section develop typed operational semantics pal taken basis development meta theory pal section 
typed operational semantics tos developed type theory utt goguen thesis gog concise account tos lf gog 
luo developed tos pal parametric abstractions global definitions expressions 
take expressions basic develop tos meta theory 
far know treatment meta theory concerning calculus basic expressions rules 
tos typed operational semantics pal judgement forms ffl gamma gamma context gamma normal form gamma ffl gamma kind typed normal form context gamma 
ffl gamma kind gamma weak head normal form normal form shall notations ffl delta delta length shall notation gamma delta delta stand sequence judgements gamma gamma delta gamma delta gamma ffl length shall gamma stand sequence judgements gamma gamma ffi ffi ffi ffi gamma ffi ffi ffi ffi ffi substitution gamma gamma 
rules tos pal 
basic properties completeness tos tos defined basic properties concerning sub derivations variable occurrences contexts 
furthermore properties lemmas proved induction derivations tos judgements 
contexts hi hi gamma gamma gamma fv gamma ar arity gamma gamma gamma gamma gamma delta delta gamma delta gamma delta fv gamma dv delta kind gamma delta gamma delta kinds gamma gamma gamma type type gamma type gamma el el gamma delta delta gamma delta kind gamma delta 
delta variables gamma gamma gamma gamma gamma gamma gamma delta delta gamma delta gamma delta gamma delta delta gamma delta gamma delta instantiations gamma ar hi gamma gamma gamma gamma gamma gamma gamma hi gamma basic tos rules pal expressions objects gamma gamma gamma gamma gamma delta delta gamma delta gamma delta gamma delta hi gamma delta fv gamma delta delta delta delta gamma delta delta gamma delta gamma delta gamma delta hi gamma delta gamma delta gamma delta delta delta gamma delta delta hi gamma delta gamma delta gamma delta expressions kinds gamma delta gamma delta gamma delta tos rules expressions pal lemma ffl gamma gamma gamma context gamma gamma 
ffl gamma gamma context kind expressions arity 
ffl gamma gamma context kind expression object expressions arity 
lemma properties fold tos 
determinacy ffl gamma gamma gamma gamma gamma gamma ffl gamma gamma ffl gamma gamma 
weakening gamma gamma gamma gamma contains entries gamma gamma 
strengthening ar dv ar delta dv 
ffl gamma gamma gamma fv gamma gamma gamma gamma gamma ffl gamma gamma fv gamma gamma gamma ffl gamma gamma fv gamma gamma gamma induction derivations tos prove complete respect pal pal substitution rules figures 
represent judgements pal theorem completeness ffl gamma gamma gamma valid pal ffl gamma gamma kind gamma ffl gamma gamma gamma gamma gamma meta theoretic properties pal section define notions reduction weak head normal form normal form tos show pal desirable properties rosser subject reduction strong normalisation 
reduction subject reduction normalisation definition reduction reduction relation denoted gamma gamma context terms 
reduction reflexive transitive closure step reduction gamma defined inductively rules ffl basic rules rules possible delta hi gamma delta gamma delta fi gamma delta delta gamma delta fv gamma delta delta delta hi ffl congruence rules gamma gamma el el gamma delta gamma delta delta gamma delta gamma gamma gamma gamma gamma gamma gamma delta gamma delta delta gamma delta gamma delta delta gamma delta gamma delta delta gamma delta gamma gamma lemma adequacy reduction ffl gamma gamma ffl gamma gamma gamma definition whnf nf term weak head normal form whnf ffl ar ffl delta delta hi 
term normal form notation nf note assume expressions involved terms 
ffl ar nf ffl delta delta delta hi nf nf nf fv ffl type ffl el nf ffl delta delta nf nf lemma adequacy whnf nf 
term nf reductions context gamma term dv dv gamma implies gamma 
gamma normal form 
gamma whnf normal form 
proof induction structure induction derivations tos 
subject reduction normalisation subject reduction theorem captures subject reduction 
notion parallel reduction called 
definition parallel reduction parallel reduction relation gamma defined relation satisfying rules gamma dv gamma gamma gamma delta delta gamma delta gamma delta gamma delta delta gamma gamma delta delta gamma delta gamma delta gamma delta fv gamma delta gamma delta delta gamma delta gamma delta gamma delta delta hi gamma delta delta gamma gamma gamma gamma delta delta gamma delta gamma delta gamma delta gamma delta delta omit obvious rules kinds contexts 
lemma parallel reduction properties 
gamma context gamma term 
gamma gamma 
gamma gamma lemma parallel subject reduction ffl gamma gamma gamma gamma gamma gamma ffl gamma gamma gamma gamma gamma ffl gamma gamma gamma gamma gamma gamma gamma proof induction derivations tos 
corollary subject reduction gamma gamma gamma gamma gamma gamma proof lemmas 
corollary church rosser gamma gamma gamma gamma gamma proof corollary lemma 
shows tos types strongly normalisable terms 
term say strongly normalisable context gamma notation sn gamma term gamma implies sn gamma 
lemma strong normalisation ffl gamma sn gamma 
ffl gamma sn gamma 
proof induction derivations tos 
briefly consider case second instantiation rule rule 
ih sn gamma 
show sn gamma considering possible step reductions leading example consider case gamma lemma gamma gamma gamma delta case analysis whnf lemma show sn gamma 
soundness tos ready prove soundness tos wrt pal prove lemma admissibility substitution instantiation 
lemma proved induction measure kinds ffl jel 
ffl jk jk 
ffl delta kj jkj 
lemma 
context entry 
form object expression gamma gamma form delta delta ffl gamma gamma gamma gamma gamma gamma gamma ffl gamma gamma gamma gamma ffl gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma theorem soundness ffl gamma valid gamma gamma gamma ffl gamma kind gamma ffl gamma gamma gamma ffl gamma gamma gamma ffl gamma gamma gamma gamma proof induction derivations pal soundness completeness tos pal relationship reduction tos easily show system pal nice meta theoretic properties 
include admissibility results structural rules substitution rules computational properties reduction relation church rosser subject reduction strong normalisation typed terms 
pal extended new constants object type theories techniques developed tos gog prove meta theoretic results object type theories utt 
studied pal logical framework parameterisation definitions lambda abstraction 
extensions meta features coercive subtyping see luo may considered 
pal developed partly underlying framework implementing proof development systems 
expect simplicity gained benefit implementation user expected de bruijn indices simplified treatment meta variables may dealt simple method proposed luo implemented plastic cl 
paul callaghan durham implemented prototype pal implementation lf system plastic 
done experiments proof development inductive types universes prototype implementation 
better understanding gain implementations requires research real development proof system 
development meta theory uses tos tool heavily shows tos robust approach adapted calculi 
related poll considered meta theory adding definitions pts sp consider expressions basic pts rules 
interesting aspect consider categorical theories corresponding pal similar way cartmell notion contextual categories car car corresponds martin lof logical framework 
am grateful paul callaghan conor mcbride bengt nordstrom randy pollack referee read earlier versions useful suggestions 
callaghan prototype implementation pal extremely useful 
am grateful discussions topic members computer assisted reasoning group durham 
car cartmell 
generalized algebraic theories contextual category 
phd thesis university oxford 
car cartmell 
generalized algebraic theories contextual category 
annals pure applied logic 
cl callaghan luo 
plastic implementation lf coercive subtyping universes 
journal automated reasoning 
appear 
db de bruijn 
survey project automath 
hindley seldin editors curry essays combinatory logic lambda calculus formalism 
academic press 
gog goguen 
typed operational semantics type theory 
phd thesis university edinburgh 
gog goguen 
soundness typed operational semantics logical framework 
typed lambda calculi applications tlca 
hhp harper honsell plotkin 
framework defining logics 
proc 
nd ann 
symp 
logic computer science 
ieee 
luo luo 
computation reasoning type theory computer science 
oxford university press 
luo luo 
meta variables existential judgements 
notes august 
luo luo 
coercive subtyping 
journal logic computation 
luo luo 
pal lambda free logical framework 
proc inter workshop logical frameworks meta languages santa barbara california 
mn magnusson nordstrom 
alf proof editor proof engine 
types proof programs lncs 
nps nordstrom petersson smith 
programming type theory 
oxford university press 
sp poll 
pure type systems definitions 
proc lfcs lncs 

