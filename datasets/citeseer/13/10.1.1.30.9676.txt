advances neural information processing systems morgan kaufmann 
learning order things william cohen robert schapire yoram singer labs park ave florham park nj schapire research att com applications desirable order classify instances 
consider problem learning order feedback form preference judgments statements effect instance ranked ahead 
outline stage approach learns conventional means preference function form pref indicates advisable rank new instances ordered maximize agreements learned preference function 
show problem finding ordering agrees best preference function np complete restrictive assumptions 
describe simple greedy algorithm guaranteed find approximation 
discuss line learning algorithm hedge algorithm finding linear combination ranking experts 
ordering algorithm combined line learning algorithm find combination search experts domain specific query expansion strategy www search engine experimental results demonstrate merits approach 
previous inductive learning concentrated learning classify 
applications desirable order classify instances 
example personalized email filter gives priority ordering unread mail 
consider problem learning construct orderings feedback form preference judgments statements instance ranked ahead 
orderings constructed learned classifier regression model fact 
instance common practice information retrieval rank documents estimated probability relevance query learned classifier concept relevant document 
advantage learning orderings directly preference judgments easier obtain labels required classification learning 
instance email application mentioned approach rank messages estimated probability membership class urgent messages numerical estimate urgency obtained regression 
suppose user ordered list email messages elects read third message 
election necessarily case message urgent sufficient information estimate numerical urgency measures quite reasonable infer message ranked ahead 
setting obtaining preference information may easier natural obtaining information needed classification regression 
remainder investigate stage approach learning order 
stage learn preference function argument function pref returns numerical measure certain ranked stage learned preference function order set new instances accomplish evaluate learned function pref pairs instances choose ordering agrees possible pairwise preference judgments 
general approach novel related various fields see instance 
see appropriate feature set learning preference function reduced fairly conventional classification learning problem 
hand finding total order agrees best preference function np complete 
show efficient greedy algorithm finds approximation best ordering 
presenting results complexity ordering instances preference function describe specific algorithm learning preference function 
algorithm line weight allocation algorithm weighted majority algorithm winnow directly freund schapire hedge algorithm :10.1.1.130.9013:10.1.1.37.1595
experimental results algorithm combine results search experts domain specific query expansion strategy www search engine 
preliminaries set instances possibly infinite 
preference function pref binary function pref theta 
value pref close interpreted strong recommendation ranked value close interpreted abstention making recommendation 
noted hypothesis learning system preference function new instances ranked agree possible preferences predicted hypothesis 
standard classification learning hypothesis constructed combining primitive features 
similarly preference function combination preference functions 
particular typically assume availability set primitive preference functions rn combined usual ways boolean linear combination values especially interested combination method 
convenient assume formed certain ways 
introduce special kind preference function called rank ordering 
totally ordered set comparison operator 
ordering function function function induces preference function defined def 
call rank ordering say preferred ranked higher convenient allow ordering function abstain give preference pair oe special symbol function foeg 
interpret mapping oe mean unranked unranked 
give concrete examples rank ordering imagine learning order documents words contain 
model set documents repository pairs distinct elements words wn number occurrences prefer occurs second example consider meta search application goal combine rankings www search engines 
search engines define prefers ranked ahead list produced corresponding search engine 
gammak document appearing th position list oe document appearing ordering instances preference function consider complexity finding total order agrees best learned preference function 
analyze quantify notion agreement preference function pref ordering 
natural notion set pref preference function ae total ordering expressed ordering function ae ae iff precedes order 
define agree ae pref sum pref pairs ranked ahead ae agree ae pref ae ae pref ideally find ae maximizes agree ae pref 
general optimization problem little interest practice constraints imposed learning instance pref restricted class functions generally combination relatively behaved preference functions interesting question problem remains hard constraints 
theorem gives result showing problem np complete pref restricted linear combination rank orderings 
holds rank orderings map set elements may may oe 
clearly consists elements problem hard 
theorem decision problem np complete input rational number set set jsj collection ordering functions preference function pref defined pref wn weight vector 
question exist total order ae agree ae pref proof omitted reduction cyclic ordering 
problem hard jsj tractable linear combinations rank orderings set size 
brief suppose pref theorem save element set assume loss generality 
define ae 
shown total order defined ae maximizes agree ae pref 
case tie ae ae distinct ae defines partial order 
claim holds case total order consistent partial order 
course jsj rank orderings really binary classifiers 
fact special case tractable underscores fact manipulating orderings computationally difficult performing corresponding operations binary classifiers 
theorem implies find efficient algorithm finds optimal total order weighted combination rank orderings 
fortunately exist efficient algorithms finding approximately optimal total order 
summarizes greedy algorithm order preferences inputs instance set preference function pref output approximately optimal ordering function ae pref gamma pref non empty arg max ae jv gamma ftg pref gamma pref endwhile greedy ordering algorithm algorithm produces approximation best total order shortly demonstrate 
algorithm easiest describe thinking pref directed weighted graph initially set vertices equal set instances edge weight pref 
assign vertex potential value weighted sum outgoing edges minus weighted sum ingoing edges 
pref gamma pref greedy algorithm picks node maximum potential assigns rank setting ae jv effectively ordering ahead remaining nodes 
node incident edges deleted graph potential values remaining vertices updated appropriately 
process repeated graph empty notice nodes removed subsequent iterations progressively smaller smaller ranks 
theorem shows greedy algorithm comes factor optimal 
furthermore relatively simple show approximation factor tight 
theorem opt pref weighted agreement achieved optimal total order preference function pref approx pref weighted agreement achieved greedy algorithm 
approx pref opt pref learning weight vector section look problem learning linear combination set preference functions 
specifically assume access set ranking experts provide preference functions set instances 
problem learn preference function form pref 
adopt line learning framework studied littlestone weight assigned ranking expert updated incrementally 
learning assumed take place sequence rounds 
th round learning algorithm provided set instances ranked set preference functions instances 
learner may computer preference functions pairs producing final ordering ae learner receives feedback environment 
assume feedback arbitrary set assertions form preferred 
formally regard feedback th round set pairs indicating preferences 
algorithm propose problem weighted majority algorithm directly hedge algorithm 
define loss preference function allocate weights ranking experts parameters fi initial weight vector ranking experts number rounds 
receive set elements preference functions 
algorithm order preferences compute ordering function ae approximates pref 

order ae 
receive feedback user 

evaluate losses loss defined eq 


set new weight vector delta fi loss normalization constant chosen 
line weight allocation algorithm 
respect user feedback loss def gamma jf loss natural probabilistic interpretation 
viewed randomized prediction algorithm predicts precede probability loss probability disagreeing feedback pair chosen uniformly random hedge algorithm verbatim shown 
algorithm maintains positive weight vector value time denoted 
prior knowledge ranking experts set initial weights equal weight vector combine preference functions different experts obtain preference function pref turn converted ordering ae current set elements method described section 
receiving feedback loss preference function loss evaluated eq 
weight vector updated multiplicative rule delta fi loss fi parameter normalization constant chosen weights sum update 
feedback weights ranking experts adjusted experts producing preference functions relatively large agreement feedback promoted 
briefly sketch theoretical rationale algorithm 
freund schapire prove general results hedge applied directly loss function 
results imply immediately bound cumulative loss preference function pref terms loss best ranking expert specifically loss pref fi min loss fi ln fi ln fi gamma fi fi gamma fi 
ranking experts low loss combined preference function pref interested loss pref ordering performance actual ordering ae computed learning algorithm 
fortunately losses related kind triangle inequality 
shown pref ae loss ae disagree ae pref jf loss pref similar eq 
disagree ae pref ae ae gamma pref surprisingly maximizing agree equivalent minimizing disagree 
sum greedy algorithm section minimize approximately term right hand side eq 
learning algorithm hedge minimize second term 
experimental results metasearch experiments learning combine results www searches 
note problem exhibits facets require general approach 
instance approaches learn combine similarity scores applicable similarity scores www search engines unavailable 
chose simulate problem learning domain specific search engine 
test cases picked fairly narrow classes queries retrieving home pages machine learning researchers ml retrieving home pages universities univ 
obtained listing machine learning researchers identified name affiliated institution home pages similar list universities identified name geographical location 
entry list viewed query associated url sole relevant document 
constructed series special purpose search experts domain 
implemented query expansion methods converted name affiliation pair name location pair altavista query 
example expert ml domain search words person name plus words machine learning enforce strict requirement person name appear 
defined search experts ml domain univ domain 
search expert returned top ranked documents 
ml domain searches search expert returned named home page univ domain searches 
query constructed set consisting documents returned expanded queries defined search experts 
search expert computed preference function chose rank orderings defined respect ordering function natural way assigned rank listed document second listed document assigning rank document retrieved expanded query associated expert encode feedback considered schemes 
simulated complete relevance feedback query constructed feedback sole relevant document preferred documents 
second simulated sort feedback collected click data observing user interactions metasearch system 
query presenting ranked list documents noted rank relevant document 
constructed feedback ranking relevant document preferred preceding documents 
correspond observing link user followed making assumption link preferred previous links 
evaluate expected performance fully trained system novel queries domain employed leave testing 
query removed ml domain university domain top top top av 
rank top top top av 
rank learned system full feedback learned system click data naive best top best top best top best av 
rank table comparison learned systems individual search queries query set recorded rank training fi remaining queries 
click data feedback recorded median rank randomly chosen permutations training queries 
computed approximation average rank artificially assigning rank document unranked ranked rank 
case fair learned system rank greater possible 
summary results table additional data top performance number times correct homepage appears rank higher table give top performance values average rank ranking systems learned systems naive query person university name single search expert performed best respect performance measure 
table illustrates robustness learned systems nearly competitive best expert performance measure listed exception system trained click data trails best expert top performance small values worth noting domains naive query simply person university name effective 
weaker click data feedback learned system achieves decrease average rank naive query ml domain decrease univ domain 
summarize experiments domains learned system performs better naive search strategies consistently performs slightly better single domain specific search expert 
furthermore performance learned system weaker click data training complete relevance feedback 
hochbaum ed 
approximation algorithms np hard problems 
pws publishing 
etzioni hanks jiang karp madani waarts 
efficient information gathering internet 
th ann 
symp 
foundations computer science 
fishburn 
theory social choice 
princeton university press princeton nj 
freund schapire 
decision theoretic generalization line learning application boosting 
journal computer system sciences 
galil 
cyclic ordering np complete 
theor 
comp 
sci 
gary johnson 
computers guide theory npcompleteness 
freeman new york 
kantor 
decision level data fusion routing documents trec context best case analysis case results 
trec 
littlestone 
learning quickly irrelevant attributes abound new linear threshold algorithm 
machine learning 
littlestone warmuth 
weighted majority algorithm 
information computation 
lochbaum streeter 
comparing combining effectiveness latent semantic indexing ordinary vector space model information retrieval 
information processing management 
