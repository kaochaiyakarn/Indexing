combinator parsers toys tools doaitse swierstra department computer science utrecht university box tb utrecht netherlands doaitse cs uu nl develop stepwise fashion set parser combinators constructing deterministic error correcting parsers 
restriction grammar left recursive 
extensive lazy evaluation parsers constructed analyze 
new combinators may construction large parsers compilers practical 
categories subject descriptors programming techniques applicative functional programming programming languages language constructs features programming languages processors parsing translator writing systems compiler generators programming languages language classification applicative functional languages general terms parser combinators error correction deterministic partial evaluation parser generators program analysis lazy evaluation polymorphism 
exist di erent implementations basic parser combinators basic functions monadic formulation 
parsers constructed conventional parser combinators disadvantages grammar gets larger parsing gets slower input sentence language break 
set parser combinators exhibit shortcomings provided grammar called ll property property possible decide proceed top parsing looking symbol input 
grammars ll equivalent grammar may constructed left factoring unfortunately resulting grammars bear little resemblance language designer mind 
extending transformed grammars functions semantic processing cumbersome elegance ered combinator parsers lost 
alleviate problem set extend previous combinators way enables longer lookahead sequences new completely di erent implementation cient deals incorrect input sequences 
remaining restriction encoded grammar directly indirectly left recursive easily circumvented appropriate chain combinators consider real shortcoming usually combinators expresses intention language designer better explicit left recursive formulations 
final implementation construction large parsers 
cost added repairing errors negligible 
section recapitulate conventional parser combinators investigate problems mentioned arise 
section di erent basic machinery adds error correction combinators resulting short may small grammars 
section show extend combinators demand driven computation look ahead information 
process minimize number times symbol inspected 
extensions section section 
conventional parser combinators basic interface combinators straightforward implementation 
define new implementations new types way constructed parsers reused new definitions minimal changes 
keep presentation simple possible assume inputs sequences symbols 
parsers constructed combinators perform depthfirst search possible parse trees return ways parse idea 
note taken truly functional approach constructing result sequential composition 
constructing value complicated type simpler types chosen construct value simpler type complicated types basic combinators complicated combinators constructed 
examples combinators definition complicated combinators see infixl choice combinator infixl sequential combinator type symbol type input symbol type parser input input succeed parser symbol symbol parser symbol parser parser parser parser parser parser parser parser input result infixl derived combinator interface parser parser succeed straightforward implementation succeed input input symbol bs bs symbol input input input input pv qv rest pv qv rest type result string parser case right erroneous input res rest rs left res basic combinators web site combinators example construct parsers combinators return consider symbol take int symbol symbol symbol parser 
main shortcoming standard implementation input parsed parser returns empty list indication input things wrong 
consequence combinators form unusable input significant size 
modern compilers expect just indication compiler correct simple typing mistakes deleting superfluous closing brackets inserting missing semicolons furthermore providing proper error messages 
second disadvantage parsers constructed way parsing gets slow productions alternatives alternatives tried sequentially branching point causing large number symbol com see www cs uu nl groups st software uu parsing 
ect worse naive user uses combinators describe large grammars fold map symbol average comparisons needed order recognize symbol 
parsers may easily implicitly constructed complicated derived combinators user noticing 
source potential ine ciency caused non determinism 
alternatives may recognize strings common prefix prefix parsed times usually alternatives eventually succeeding 
highly non deterministic grammars price paid may high turn exponential size input 
known construct deterministic automata non deterministic ones knowledge implementation may easily incorporated 
start description new implementation solves problems mentioned 

error correction continuation parsing extend combinators previous section keep track farthest point input reached parser returns value backtracking completed 
unfortunately lost context information enable decide proper error correcting steps 
start converting combinators form allows possible alternatives concurrently changing depth breadth exploration search space 
breadth approach seen way making parsers parallel exploring possible routes taken 
step introduce combinators constructed continuation style 
see possible provide information parsing processes progressing complete parse constructed 
time ignore result computed simply return boolean value indicating sentence belongs language 
continuation parameter represents rest parsing process called current parser succeeds 
seen encapsulating stack unaccounted symbols right hand sides partially recognized productions remaining part input matched 
defined function parse starts parsing process 
continuation parameter function null checks input consumed totally stack pending symbols depleted 
parsing histories essential design decision just return final result combine parsing history enabling trace parsing steps led result 
consider di erent kind parsing steps ok steps represent successful recognition input symbol fail steps represent corrective step parsing process step corresponds insertion deletion symbol input stream data steps result ok steps result fail steps result result getresult steps result result getresult ok getresult getresult fail getresult getresult combination result parsing history simply take cartesian product pair constructed having reached parsing process having access final result 
introduced intricate data type allows start producing tracing information parsing completed 
ideally select result fewest fail steps sequence corresponds minimal editing distance original input 
unfortunately costly operation implies possible positions input possible corrective steps taken consideration 
suppose unmatched symbol encountered want find optimal place insert missing symbol 
case may points inserted points equivalent respect editing distance correct input 
prevent combinatorial explosion take greedy approach giving preference parsing longest prefix ok steps 
define ordering steps longest successful prefixes ok steps best steps steps steps ok best ok ok best fail best fail fail best ok best fail fail best ok best best essential observation preference sequences step postpone decision operands return returning information step selected result 
error correcting steps discuss possible error correcting steps 
take step symbol input di erent symbol expect expect symbol input exhausted 
consider possible correcting steps pretend symbol anyway equivalent inserting input stream delete current input symbol try see expected symbol cases report fail step 
add error recovery combinators defined get code 
note input left parsing process left deleted resulting number failing steps fail fail 
true 
may superfluous needed indicate input consumed 
operator find branching point alternatives led success replaced best operator selects best result 
change depth breadth approach function returns result operand completely evaluated function best returns result incremental way 
function getresult top level driving computation asking constructor head steps value 
computing semantic results combinators just defined quite useless added error correction parser return true 
add things type result bool type parser input bool input bool succeed input input symbol input case input bs bs false input input input input input parse input null input null checks input continuation combinators type result steps bool symbol input case input bs ok bs insert symbol fail input best delete symbol symbol bs insert symbol fail input succeed input input input input best input input input parse getresult foldr const fail true error correcting parsers 
computation result done original combinators 
generation error messages indicating corrective steps taken 
components handled accumulating results computed far extra arguments parsing functions 
computing result top parsers maintain kinds stacks keeping track recognized represented continuation storing pending elements elements right hand side productions recognized waiting reduction case amounts application element second 
note parsers grammars prefer may realized sight normal form right hand side alternative length occurrence combinator introduces anonymous non terminal 
length right hand side larger left associativity determines normalization defined 
element pending stack recognized left operand parser right hand side part recognised 
decide represent stack pending elements function may contain elements di erent types 
types stack reduced items continuation type stack type result input steps result gives new definition type parser type parser forall result result continuation stack stack pending values input steps result special type allowed haskell standard contains type variables result arguments type parser 
quantifying forall construct indicate type parser depend type variables passing functions link type environment 
extension accepted haskell compilers 
parser recognises value type combines value stack previously values result new stack type turn passed continuation new stack 
interesting combinator care sequential composition stack input stack 
input pv value computed parser qv value computed parser value passed stack pv qv stack 
pv qv stack pv qv exactly expect 
adapt function parse transforms constructed result desired result initializes stack id parse getresult st inp foldr const fail st inp id give new versions combinators show form 
error reporting note point introduce error correcting steps sure corrections chosen path search tree directly add error messages result keep mind fundamental property strategy may produce information result having choice 
including error messages fail constructors force prematurely take decision path choose 
decide pass error messages accumulating parameter included result parsing process 
order possible users generate error messages say language return error messages form data structure instance show see previous modifications included 

introducing look ahead previous section solved problems mentioned sure result returned message error correcting steps taken 
section solve remaining problems backtracking sequential selection low ciency sweep 
far parsers defined functions easily get information 
example useful information set symbols may recognized symbols parser parser may recognize empty sequence 
obtain information parser decide compute information separately tuple information parser constructed information 
tries see information look introduce formulation basic combinators construct trie structure representing possible sentences language represented grammar see 
exactly need parsing sentences language grouped common prefix trie structure 
possible structure constructed parse language linear time 
forget computing results error messages 
node trie represents tails sentences common prefix turn represented path root structure representing language 
choice node represents non empty tails mapping possible symbols tries representing corresponding tails 
node represents sentence 
nodes corresponds nodes choice node stored left operand node stored right operand notice language ab ac represented choice choice common prefix factored 
way cost associated backtracking parser moved construction sents structure 
language constructing trie nonterminating process 
fortunately lazy evaluation takes care problem merging process proceeds far recognising current sentence 
shortcoming approach introduces tremendous amount copying way sequential composition modelled 
structure decision process deterministic represent stack symbols recognized 
furthermore may succeeded parsing linear time possible shifted construction trie structure 
sequel show construct equivalent trie structure combining precomputed trie structure building blocks 
encoded slightly di erent structure resulted elaborate program text 
type parser forall result result stack errs input steps result data errors deleted symbol string errors inserted symbol string errors string instance show errors show deleted pos show pos show show inserted pos show pos show show show pos starting pos discarded eof input position ss null ss eof show head ss symbol pr st input case input bs ok st bs fail pr st deleted position bs bs best st inserted show input fail st inserted eof input pr succeed stack errors input stack errors input stack errors input stack errors input best stack errors input stack errors input stack 
errors input parse input getresult errors inp foldr const fail errors position inp inp id id input correcting error reporting combinators merging different approaches compare di erent approaches taken continuation parsers compute value alternatives parallel parser interprets trie data structure inspects symbol input final solution merge approaches 
compute sents fragments base decision proceed parsing continuation parsers accept symbols 
information represented new data structure closely resembles information stored state lr automaton terminology 
building complete sents structure construct similar structure may select parser continue 
proceeding consider grammar fragment succeed symbol symbol succeed symbol symbol problem arises parsers preceding respective symbol occurrences decide take symbol encountered definite answer alternative take 
problem solved pushing actions inside trie structure point merging di erent alternatives stopped point working single alternative safely perform postponed computations 
result actual parsing computation result may run phase 
discuss full version structure defined bookkeeping look ahead information see definition actions taken decision 
components look structure parsing functions accept symbols semantic processing 
discuss di erent alternatives reverse order look alternative indicates type parser sents data sents choice symbol sents sents sents left choice right combine xss ct xs ct ys case compare lt combine xs gt combine xss ys eq ct ct combine xs ys combine cs cs combine cs cs symbol choice succeed choice case choice bs choice combine bs choice error ambiguous grammar choice cs choice parse parser input bool parse choice cs parse parse inp parse inp parse inp parse true parse false representing possible sentences 
data look shift symbol look choice look look shift reduce reduce look uniquely determined merge ch look look look sp shift pcs merge ch right case right shift shift combine pcs left right merge ch left right reduce reduce merge ch merge ch merge ch merge ch shift merge ch merge ch error ambiguous grammar st input st input best st input computing look ahead information possible parser applies point component construct 
corresponds node trie structure 
marks trie fragment original try structure may reconstructed merging needed 
look part structure merged alternatives 
case alternative contains path similar path leads node 
see function merge ch constructor removed structure merged alternatives 
reduce indicates look ahead information encountered symbols right hand side production reached reduce state lr terminology parser parser 
corresponds situation may continue symbols decision information followers nonterminal 
place continue possibly non deterministic parsing process 
corresponds shift reduce conflict lr automaton 
shift look corresponds shift state need symbol order decide proceed 
parser contained alternative error correcting parser called input symbol key table shift point symbol shifted corrective steps 
giving description construct look ahead structure explain going see 
order minimize interpretive overhead associated inspecting look ahead data structures pair structure function 
uses input sequence locate parsing function called 
calls function input sequence 
proper haskell implementation implies constructors look ahead structure compiled away form partial stages evaluation 
note functions constructed way type real parsers called look ahead structures merely play intermediate role construction may discarded soon functions constructed 
argument continuation second accumulated stack third error messages accumulated far fourth input sequence result steps sequence containing parsing result 
function interprets look structure pairs corresponding 
function constructs function choose resulting select choose input making current input 
selected parser called st input 
function choose result homomorphism look structure type input discuss selection process takes place alternatives account bottom top selection needed return function rest input returns parser contained alternative 
reduce alternative dealt just alternative symbols input inspected 
case return parser going choose dynamically possible alternatives reduce calling parser contained alternative continue parser located look ahead information css 
shift alternative interesting 
dealing case inspect input symbol 
performing linear search may expensive construct binary search tree table partially evaluate function respect constructed search tree 
returned function constructed continuation selection process fails returns error correcting parser 
give code additional functions 
speak really important understanding selection process 
assured searching function computed included 
interpretation overhead associated table stu performed 
respect combinators really function parser generator 
having come far describe look structures constructed di erent basic combinators 
code basic combinators 
code combinator quite straightforward construct trie structure merging trie structures described invoke order tuple associated 
code combinator bit involved replace parser may selected look ahead sequential composition 
reduce apparently information followers node available context viz 
right hand side operand sequential composition provide badly needed information symbols may follow 
replace reduce node trie structure right hand side parser element replaced newtype forall result 
errs input steps result errs input steps result data parser parser look look parser cata look sem shift sem sem reduce sem case shift csr sem shift ch ch left right sem left right reduce sem reduce cs sem cs map look cata look qp csr shift qp csr left right left right qp reduce qp qp csr qp csr cs choose cata look css tab tree css inp case inp ss case just cp cp ss css 
css const cs const cs parser cs st input choose input st input constructing parsers look ahead structures symbol pr pr st ss ok st ss pr shift pr reduce pr succeed st input st input parser cp parser cq cp merge ch cq parser cp parser qp cata look pp csr shift pp qp csr csr rp csr merge look rp pp map look pp pp csr pp qp csr cp st st final basic combinators parser prefixed reducing parser original left hand side node 
merge alternatives 
shift update error correcting parser postfix parsers contained choice structure fact followed second parser 
definition costly saved lazy evaluation 
keep mind look structures function inspected branches reduce node reached 
grammar ll step 
soon done job structure may garbage collected 
code symbol see local functions pr original error correcting parser pr function called function constructed aforementioned choose discovered expected symbol 
case check error correcting behavior skipped 
take single symbol input incorporate result continue parsing 
record successful step adding ok step 
look ahead information apply function pr function contained construct 
parser merged parsers wrapper removed parser called decided succeed occurrences pr rest text 
test fails find proper look ahead old pr order incorporate corrective steps 
sake completeness incorporate additional functions 
extensions full set combinators included extensions 
computation full look ahead may costly choice structures computed large 
cases may want non deterministic approach 
purpose dynamic versions available ciency backtracking approach 
note process passing value error messages extended incorporate accumulation needed information examples kinds information name file parsed line number environment locate specific identifiers case state strictly speaking needed reduce node right operand construct indicating existence resolvable shift reduce conflict able store error messages recognized symbols 
extra combinators introduced library update state 
production version combinators contains numerous small improvements 
example subtle improvement consider code function choose 
locate symbol shift table resorts error correcting version 
parser try alternatives compare results 
know sure step result fail step selected result 
finding best way fail reporting parsing failed better immediately report fail step remove fail step actual result quite dealing shift reduce conflict gone dynamic comparison alternatives fail alternative succeed 
fact repair possible may discovered selection choice structure sure backtracking place prefix want guarantee correct symbols examined 
production version adds accumulating parameter construction actual parsers 
erroneous situation detected better correction produced past account 
produced versions combinators base decision proceed comparing sequences parsing steps greedy approach looking just ahead far see di erence 
making di erent choices function best incorporate di erent error correction strategies 
sequential composition incorporate call second parser trie structure 
general undecidable approach really needed getting deterministic parser may resolve shift reduce conflict computing conflict may occur possibly infinite trie structure may lead non terminating computation 
example seen grammar language approach possible discover building trie structure reached situation equivalent root branch 
may take approximate approach try find sure needed create updated version trie structure 
example situation consider number fold map symbol plus succeed number number case unneeded copy number parser order incorporate call copy structure order incorporate second number parser 
immediately see number empty alternatives disjoint leading step node postpone updating process create parser operator immediately 
data node nil tab tree tab tree tree sl bst length tab tab sl bst list nil list sl bst rest node nil nil rest sl bst list ll div rl ll lt list sl bst ll list rt list sl bst rl list node lt rt list nil node left right left right case compare eq just lt gt additional function braun tree construction inspection problem occurs number di erent possible error corrections may get quite high worse equivalent 
operator missing operands usually quite number candidates inserted resulting single failing step 
approach imply rest input parsed di erent possible corrections trying find really di erence 
contrast generalised lr parsing access explicit representation grammar especially compare functions represent di erent states consequence discover comparing equivalent parses 
library facilities limiting indefinite comparisons specifying di erent insertion deletion costs symbols limiting distance comparisons 
way fine tuning error correction process possible interfering rest parsing process 
included basic parsers ranges symbols making combinators quite usable describing lexers 
defining additional combinators extend basic machinery may deal ambiguous grammars 
example consider simple lexer defined follows succeed succeed letter upto identifier letter letter token succeed token ss succeed symbol token ss identifier token 
case problems 
want greedy approach recognising identifiers letters possible account 
string parsed token identifier may solve problem introducing new combinator step st input step st input changing code succeed step identifier letter letter token step token ss succeed symbol token ss seen text steps possible cost letters choose token alternative 
efficiency scope provide detailed discussion ciency space usage parsers constructed way 
notice follows directly construction process number constructed parsers equivalent number lr states bottom parser space leak expected case programmer performed left factorisation hand 
system perform left factorisation identify equality parsers merging identical copies look ahead information 
number times symbol inspected may bottom parser shift reduce conflict basically pursue paths di erence grammar lr implies inspecting symbol twice situation 
feel practical circumstances preferred construction full lr parsers number states easily explodes 
relatively low number states lr automaton approach lalr handled yacc preferred lr 
approach advantage smoothly handling longer look needed 
lazy evaluation takes nicely care parallel pursuit success nightmare encode java 
decision trees choice point complexity logarithmic number possible symbols 
simple parser combinators linear number fact really starts hurt dealing productions really alternatives 

shown possible analyze grammars construct parsers cient correct errors 
overhead error correction reductions symbol absence errors adding ok step removing 
comparing current approach ll grammars see included look ahead information single data structure getting uniform approach 
furthermore decision insert delete symbol done local way precise look ahead especially case follower symbols 
general parsers continue longer satisfactory way previously parser prematurely decide insert sequence symbols complete program throw away rest input needed 
comparing parsers coded library written yacc inputs look nicer 
conflict resulting incorporation semantic actions occur su cient context taken account 
conclude referring title claiming parser combinators reached adult state tool chosen wishes construct parser nice useful 

acknowledgments want pablo sergio mello schneider han david barton willingness exposed sequence variants library 
johan jeuring pim anonymous referees commenting 

burge 
programming techniques 
addison wesley 
chakravarty 
lazy lexing fast 
middeldorp sato editors fourth fuji international symposium functional logic programming flops number lncs pages 
fokker 
functional parsers 
jeuring meijer editors advanced functional programming number lncs pages 
hutton meijer 
monadic parser combinators 
journal functional programming 
jeuring swierstra 
lecture notes grammars parsing 
www cs uu nl people doaitse books pdf 
swierstra 
fast error correcting parser combinators short tutorial 
tel editors theory practice informatics th seminar current trends theory practice informatics volume lncs pages november 
swierstra duponcheel 
deterministic error correcting combinator parsers 
launchbury meijer sheard editors advanced functional programming volume lncs tutorial pages 
springer verlag 
