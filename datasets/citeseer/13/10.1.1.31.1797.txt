nondeterministic lisp substrate constraint logic programming jeffrey mark siskind university pennsylvania institute research cognitive science walnut street room philadelphia pa internet cis upenn edu david allen mcallester artificial intelligence laboratory technology square cambridge ma internet dam ai mit edu implemented comprehensive constraint programming language extension common lisp 
constraint package provides unified framework solving numeric non numeric systems constraints combination local propagation techniques including binding propagation boolean constraint propagation generalized forward checking propagation bounds unification 
backtracking facility nondeterministic dialect common lisp implement constraint package acts general fallback constraint solving method mitigating incompleteness local propagation 
important aspect implementation extension common lisp fully implemented common lisp 
contrast constraint languages formulated logic programming framework implemented efficiently language extend 
content area constraint reasoning supported part bell laboratories ph scholarship author presidential young investigator award professor robert berwick national science foundation dcr siemens family foundation 
supported part aro daal darpa nsf iri ben franklin supported part advanced research projects agency department defense office naval research contract 
years seen significant interest constraint logic programming languages 
numerous implementations languages described literature notably clp 
jaffar lassez chip van hentenryck 
point departure leading systems observation unification operation core logic programming viewed method solving equational constraints logic variables range universe herbrand terms 
natural extension view allow variables range domains augment programming language support formulation solution systems constraints appropriate new domains 
notion extending programming language support constraint programming need unique logic programming 
constraint package included screamer nondeterministic dialect common lisp described companion 
package provides functionality analogous clp 
chip common lisp framework prolog 
argue number reasons nondeterministic lisp offers better substrate implementing constraint programming techniques prolog 
screamer implementation nondeterministic common lisp 
described companion siskind mcallester 
screamer augments common lisp capacity writing nondeterministic functions expressions 
nondeterministic functions expressions return multiple values backtracking 
primitives added common lisp support nondeterminism 
macro evaluates returns value backtracking evaluates returns value second function fail initiates backtracking 
primitives construct function nondeterministically returns members set time backtracking 
defun member null fail member rest adopt generate test style programming solve constraint satisfaction problems 
member member phi fail list bulk programming constructs support efficient techniques solving class problems 
addition fail screamer provides number primitives central current concerns 
primitive crucial ability perform local side effects ones undone backtracking 
local side effects specified enclosing setf expression inside local declaration 
local setf 
logic variables prolog allow single assignment local side effects unification binding operation local side effects screamer may repeatedly change value variable changes undone reverse order appropriate times backtracking 
nondeterminism local side effects form substrate top screamer constraint package constructed 
screamer extension common lisp programming language provides capability writing nondeterministic programs constraint package described 
novel aspect screamer written common lisp fully portable complete common lisp implementation 
lowest level screamer implements nondeterminism facility 
constraint package built top substrate 
variables constraints screamer includes function variable returns data structure called variable 
screamer variables generalization prolog logic variables 
initially new variables unbound unconstrained 
variables may bound values process solving constraints asserted sets variables 
binding done local side effects 
variables unbound backtracking 
screamer provides variety primitives constraining variables 
constraint primitive constraint version corresponding common lisp primitive 
example constraint primitive constraint version 
expression form returns new variable constrains sum adding constraint 
convention screamer primitive letter constraint version corresponding common lisp primitive 
table lists constraint primitives provided screamer 
primitives property accept variables arguments addition ground values return variable result 
constraint primitive installs constrain arguments returned variable stating interpretation variables involved value result variable equal corresponding common lisp primitive applied values arguments 
example expression returns variable adds constraint 

constraint satisfied nil depending part constraint primitive obeys calling convention corresponding common lisp primitive 
screamer performs variety optimizations improve run time efficiency 
particular value variable returned constraint primitive determined type restrictions boolean andv numeric maxv expression equalv functions table constraint primitives provided screamer 
time function called value returned directly creating new variable 
screamer constraints form common lisp primitive corresponding constraint primitive 
constraints form imply type restrictions variables involved 
example constraint form 
implies boolean nil 
furthermore constraint implies numeric 
practice variable usually defined type known boolean known real known cons cell knowledge type variable significant efficiency ramification screamer constraint satisfaction algorithms 
screamer special procedures inferring types variables 
knowledge types variables important efficiency contrast common lisp primitives accept arguments type boolean constraint primitives andv require arguments boolean 
allows boolean constraint satisfaction techniques constraints introduced boolean primitives 
similarly constraint predicates return boolean variables 
example contrast common lisp primitive member return sub list second argument head satisfies equality check variable returned value expression constrained boolean 
screamer includes primitive assert 
add constraints added constraint primitives 
evaluating expression assert 
installs constraint equals conjunction constraint primitives install wide variety constraints 
example assert 
effectively installs constraint certain constraint primitives table conjunction assert directly constrain type variable 
example evaluating assert 
effectively installs mitigate apparent inefficiency conceptually clean language design implementation optimizes calls assert calls assert 
assert 
eliminate creation intermediate boolean variable resulting local propagation 
constraint number 
likewise evaluating assert 
installs constraint boolean 
effectively evaluating assert 
nil 
constraints screamer installed assert 
constraint primitives table 
constraint installed assert 
states certain variable value constraint installed constraint primitive form common lisp primitive slight variation common lisp primitive 
variations arise constraint primitives semantics constraint version differs slightly semantics corresponding common lisp primitive discussed 
attempt add constraint fails screamer determines resulting set constraints unsatisfiable 
example evaluating assert 
subsequent evaluation assert 
fail 
call constraint fail generate constraint inconsistent known type information 
example known boolean evaluation fail 
constraint propagation section discuss kinds constraint propagation inference processes performed screamer 
screamer implements binding propagation incomplete inference technique called value propagation 
second screamer implements boolean constraint propagation bcp 
incomplete form boolean inference viewed form unit resolution mcallester 
third screamer implements generalized forward checking 
constraint propagation technique discrete constraints van hentenryck chip system 
fourth screamer implements bounds propagation numeric variables 
bounds propagation combined range splitting technique discussed section implements version interval method solving systems nonlinear equations hansen hansen 
screamer implements unification 
unification viewed constraint propagation inference technique applied equational constraints involving variables range expressions 
constraint propagation techniques incrementally run completion new constraint installed assert 
constraint primitives 
forms constraint propagation described detail 
form constraint propagation viewed inference process locally derives information variables 
forms propagation capable inferring values variables 
example evaluating assert 
assert 
bcp infer value constraint propagation inference process determined value variable say bound inferred value called binding binding propagation noted constraints screamer form common lisp primitive variable variable specific value 
constraint screamer implements certain value propagation process 
specifically bindings determined variables constraint binding remaining variable follows constraint existing bindings additional binding inferred 
general principle called binding propagation 
binding propagation bind output variable constraint primitive input variables bound 
example constraint bound bound binding propagation bind 
binding propagation derive binding input binding output 
example constraint bound bound binding propagation bind 
boolean constraint propagation boolean constraint propagation bcp simply arc consistency cf 
mackworth relative boolean constraint primitives andv 
bcp arc consistency semantically incomplete 
example evaluating assert 
assert 
variable interpretation satisfying installed constraints assign value bcp inference 
semantic incompleteness necessary order ensure constraint propagation process terminates quickly 
section discuss general fallback provide backtracking search interleaved constraint propagation mitigate incompleteness local propagation 
generalized forward checking generalized forward checking applies variables finite set possible values established 
variables called discrete 
example evaluating assert 
variable discrete value known boolean variables special case discrete variables set possible values contains nil 
similarly bounded integer variables considered discrete 
discrete variable screamer maintains list possible values 
list possible values variable updated inference process 
inference process operates constraints form funcall 
constraints generated constraint primitive 
constraint primitives primitive signal error fail argument bound deterministic procedure 
consider constraint funcall 
operate constraint bound remaining variables constraint bound 
unbound variable output variable simply derives binding applying unbound variable arguments tests possible value discrete variable consistency relative constraint 
possible value consistent constraint removed set possible values example suppose evaluated assert 
assert 
assert 


case output variable constraint bound suppose constraint propagation inference process infers 
case run constraint remove set possible values single possible value remaining discrete variable system binds remaining variable value 
example running queens problem section 
bounds propagation bounds propagation applies numeric variables 
numeric value system maintains upper lower bound possible values variable 
bounds propagate constraints generated numeric constraint primitives example evaluating assert 
known larger known larger bounds propagation infer larger 
bounds propagation derive values boolean output variables numeric constraint predicates example constraint 
system determined larger system infer nil 
bounds propagation infer new bound new bound reduces known interval variable involved certain minimum percentage 
ensures bounds propagation process terminates fairly quickly 
example screamer avoids large number bounds updates result constraints assert 
assert 
assert 

unification unification operates constraints form equal generated constraint primitive equalv 
time system equations defined set equalv constraints output variable bound screamer incrementally maintains general unifier oe system equations 
example evaluating assert 
equalv cons cons result unifier oe equates unifier oe oe oe oe equal 
different forms constraint propagation interact 
example variable discrete numeric 
discrete variable numeric non numeric possible value eliminated 
bound known numeric variable discrete possible value violating bound eliminated 
screamer derives bounds information set possible values discrete numeric variable 
unification interacts screamer bindings 
example oe general unifier maintained screamer variables oe equals oe binding binding vice versa 
oe equals oe incompatible bindings failure generated 
solving systems constraints design constraint primitives described far fast local propagation techniques 
techniques necessarily incomplete solve systems constraints determine unsolvable 
screamer provides number primitives augmenting local propagation backtracking search provide general mechanism solving systems constraints 
primitive linear force applied variable cause nondeterministically take values domain 
linear force applied variable finite set allowed values constrained integer variable 
constraining variable take value linear force may cause local propagation 
single call linear force may cause number variables bound alternatively may fail variable consistently take value 
second primitive divide conquer force applied variable nondeterministically reduce set possible values may take 
divide conquer force applied variable finite set allowed values real variable finite upper lower bounds 
case set allowed values split subsets variable nondeterministically constrained take values second subset 
second case interval split half variable nondeterministically constrained take values subintervals 
functions operate single variables 
generally find values variables satisfy constraints 
screamer provides primitives accomplish 
higher order functions take single variable force function argument linear force divide conquer force produce function capable forcing list variables force function 
incorporates different strategy choosing variable force 
static ordering simply forces variables order 
single variable force function repeatedly applied variable variable takes ground value proceeding variable 
variables bound termination 
second reorder selects variable smallest domain applies single variable force function variable repeats process variables bound 
choice single variable force function orthogonal choice variable ordering strategy screamer provides distinct constraint solving strategies 
easily added 
examples illustrate power screamer constraint language small examples 
shown solves queens problem 
function defun attacks 
qi qj distance qi qj abs qi qj distance defun solution array dotimes setf aref integer dotimes dotimes 
assert 
attacks 
aref aref coerce list reorder domain size lambda declare ignore nil linear force constraint screamer program solving queens problem 
creates variable row constrains row variable take integer indicating column occupied queen row 
function member ofv simply syntactic sugar variable assert 
screamer primitive solution gathers variables nested inside structure applies multiple variable forcing function list variables returns copy variables replaced bound values 
example screamer applies technique solving underlying constraint satisfaction problem 
screamer chooses technique variables involved finite enumerated domains 
second example shown illustrates bounds propagation solve systems nonlinear equations expressed constraints numeric variables 
function nonlinear finds solution system nonlinear equations 
yz xy xyz gamma gamma defun nonlinear value real real real assert 
andv solution list reorder range size lambda 
divide conquer force screamer program uses numeric bounds propagation solving system nonlinear equations 
expression real creates variable constrained real number upper lower bounds 
constraints asserted variables divide conquer search interleaved bounds propagation find solution equations 
solution gamma 
note simplex method clp limited solving linear systems equations combination divide conquer search interleaved bounds propagation allows screamer solve complex nonlinear systems equations 
techniques enable screamer solve numeric constraint systems inequalities equational constraints 
furthermore constraint satisfaction techniques integrated screamer solve disjunctive systems equations systems mix numeric boolean forms constraints 
third example solves crossword puzzles 
code example eliminated due space restrictions included full 
crossword puzzle represented list placements form denoting entry word length starting row column dictionary list words 
objective fill placement word dictionary crossword puzzle consistent 
different placements may utilize word 
program operates creating variable placement 
domain variable restricted words dictionary appropriate length 
pairwise constraints added intersecting placements restrict values variables share letter point intersection 
program solve crossword puzzles typical games magazines dictionary taken list words appearing solution seconds cpu time 
wish point intentional similarity names screamer primitives member member ofv 
describe choice set possible alternatives 
enumerates set nondeterministically backtracking 
creates variable value constrained member set 
lends generate test style programming member member phi fail list lends constraint programming member ofv member ofv assert 
lambda phi solution list static ordering linear force program fragments structurally similar specify problem entail drastically different search strategies 
constitutes lifted variant 
discuss possibilities performing lifting transformations automatically 
lifting limited member primitive 
screamer includes syntactic sugar integer variable assert 
andv function integer lifted analog screamer primitive integer 
screamer generators lifted analogs 
related individual techniques described new 
novel particular combination 
programming languages allow stating numeric constraints date back sketchpad sutherland 
local propagation solving systems constraints borning 
steele sussman steele construct constraint primitives similar implement local propagation procedural attachment 
techniques expanded adopt unenforced convention functions prefix denote lifted generators functions return variable ranging stated domain nondeterministically returning value domain 
system gosling 
systems differ screamer ways 
handled numeric constraints lacking capacity screamer embodied unification embodied equalv 
importantly constraint solving techniques incorporated systems incomplete particularly local propagation 
systems resort backtracking search screamer provide slow complete fallback faster incomplete local propagation techniques 
numerous systems clp 
jaffar lassez chip van hentenryck constructed logic programming framework add form constraint satisfaction local propagation backtracking search mechanism logic programming languages 
screamer differs systems number ways minor major 
screamer uses fast local propagation techniques part constraint mechanism 
numeric constraint mechanism clp 
uses costly techniques simplex method linear programming 
techniques break nonlinear constraints 
screamer hand solve nonlinear constraints divide conquer force combined local propagation 
turns techniques generalization ones previously proposed numerical analysis techniques 
second difference lies common lisp prolog substrate constructing constraint programming languages 
mentioned common lisp inadequate basis constructing constraint languages due lack nondeterminism general fallback technique 
remedied screamer implementation nondeterministic common lisp 
substrate nondeterministic common lisp especially capacity local side effects screamer constraint package written totally common lisp significant loss efficiency 
contrast clp 
chip efficiently implemented extensions prolog require completely new implementations host language 
gives screamer clear advantages clp 
chip stylistic benefits functional versus logic programming 
screamer portable common lisp implementation 
second screamer easily modified extended experiment alternative constraint types constraint satisfaction methods 
screamer coexist inter operate current extensions common lisp clos clim 
allows nondeterminism constraint programming just tool available programmer bag tricks pervasive paradigm programming creativity 
current version screamer including full constraint package available anonymous ftp file ftp ai mit edu com ftp pub screamer tar encourage obtain copy screamer give feedback experiences 
alan hamilton borning 
constraint oriented simulation laboratory 
phd thesis stanford university july 
available stanford computer science department report stan cs xerox palo alto research center report ssl 
james gosling 
algebraic constraints 
phd thesis carnegie mellon university 
hansen 
solution linear algebraic equations interval arithmetic 
mathematical computation 
hansen 
nonlinear equations optimization 
control games comput 
math 
appl 
appear second special issue global optimization 
jaffar jean louis lassez 
constraint logic programming 
unknown pages 
alan mackworth 
constraint satisfaction 
stuart shapiro editor encyclopedia artificial intelligence pages 
john wiley sons new york 
david allen mcallester 
truth maintenance 
proceedings eighth national conference artifical intelligence pages 
morgan kaufmann publishers 
jeffrey mark siskind david allen mcallester 
screamer portable efficient implementation nondeterministic common lisp 
submitted aaai 
ivan 
sketchpad man machine graphical communication system 
phd thesis massachusetts institute technology january 
guy lewis steele jr definition implementation computer programming language constraints 
phd thesis massachusetts institute technology august 
vlsi memo artificial laboratory technical report 
gerald jay sussman guy lewis steele jr constraints language expressing hierarchical descriptions 
artificial intelligence 
available artificial intelligence laboratory memo 
pascal van hentenryck 
constraint satisfaction logic programming 
press cambridge ma 

