aus den fur betriebswirtschaftslehre der universitat kiel heuristic algorithms solving resource constrained project scheduling problem classification computational analysis kolisch hartmann february invited contribution handbook advances project scheduling edited published kluwer 
dr rainer kolisch hartmann lehrstuhl fur und institut fur betriebswirtschaftslehre christian universitat zu kiel 
kiel germany email kolisch bwl uni kiel de hartmann bwl uni kiel de url www uni kiel de prod kolisch html www uni kiel de prod hartmann html ftp ftp uni kiel de pub operations research resource constrained project scheduling problem rcpsp follows 
single project consists set activities processed 
fictitious activities correspond project start project respectively 
activities interrelated kinds constraints 
precedence constraints force activity started immediate predecessor activities comprised set finished 
second performing activities requires resources limited capacities 
resource types set kg 
processed activity requires units resource type period non preemptable duration resource type limited capacity point time 
parameters assumed deterministic project start activities objective rcpsp find precedence resource feasible completion times activities makespan project minimized 
gives example project comprising activities scheduled subject renewable resource type capacity units 
feasible schedule optimal makespan periods represented 
gamma gamma gamma gamma gamma gamma gamma gamma project instance example schedule denote finish time activity vector finish times called schedule fj gamma set activities processed active time instant provide conceptual decision model cf 
christofides 
min gamma objective function minimizes finish time project activity makespan project 
constraints enforce precedence constraints activities constraints limit resource type time instant resource demand activities currently processed exceed capacity 
define decision variables 
conceptual model sets function decision variables 
model solved mixed integer programming mip techniques 
order solve rcpsp mip solvers cplex employ problem formulation 
rcpsp denoted chapter book cf 
herroelen cpm cmax number activities precedence related finish start relationship zero time lags scheduled renewable resource types maximal completion time activities cmax minimized 
shown la rcpsp generalization classical job shop scheduling problem belongs class np hard optimization problems 
heuristic solution procedures indispensable solving large problem instances usually appear practical cases 
kelley introduced schedule generation scheme large number different heuristics algorithms suggested literature 
great number optimal approaches survey cf 
kolisch padman mainly generating benchmark solutions 
currently competitive exact algorithms ones brucker demeulemeester herroelen sprecher 
follows give survey heuristic approaches rcpsp 
start section schedule generation schemes essential construct feasible schedules 
section show schemes employed priority rule methods 
section devoted metaheuristic algorithms simulated annealing tabu search genetic algorithms 
heuristics belong class priority rule methods metaheuristic approaches treated section 
section report comparison priority rule metaheuristic heuristics rcpsp 
summary outlook research opportunities section 
schedule generation schemes schedule generation schemes sgs core heuristic solution procedures rcpsp 
sgs start scratch build feasible schedule stepwise extension partial schedule 
partial schedule schedule subset activities scheduled 
different sgs available 
distinguished incrementation activity time incrementation 
called serial sgs performs activity incrementation called parallel sgs performs time incrementation 
serial schedule generation scheme description serial sgs 
consists stages activity selected scheduled earliest precedence resource feasible completion time 
associated stage disjoint activity sets 
scheduled set comprises activities scheduled eligible set comprises activities eligible scheduling 
note conjunction give set activities generally called ineligible activities activities scheduled scheduled stage predecessors scheduled 
gamma remaining capacity resource type time instant ff set finish times 
fj set eligible activities 
give description serial sgs 
serial sgs initialization calculate select ef max ff min ef gamma lf gamma gamma fjg max pn ff assigns dummy source activity completion time puts partial schedule 
step decision set set finish times remaining capacities finish times calculated 
activity selected decision set 
finish time calculated determining earliest precedence feasible finish time ef calculating earliest precedence resource feasible finish time ef lf 
lf denotes latest finish time calculated backward recursion cf 
upper bound project finish time table reports serial sgs generating schedule 
table example serial sgs serial sgs generates feasible schedules resource unconstrained scheduling problem optimal 
kolisch shown serial sgs generates active schedules schedules activities started earlier delaying activity 
scheduling problems regular performance measure definition cf 
sprecher makespan minimization optimal solution set active schedules 
time complexity serial sgs delta cf 
pinson 
denote activity selected iteration execution serial sgs recorded list hj prescribes activity scheduled iteration note list precedence feasible jg fj gamma cf 
hartmann 
list example 
list give special case serial sgs serial sgs activity lists 
serial sgs activity lists initialization calculate ef max ff min ef gamma lf gamma gamma fjg max pn ff serial sgs activity lists plays important role classical machine scheduling referred list scheduling cf 
kim 
serial sgs activity lists special case serial sgs generates active schedules 
list list scheduling generate optimal schedule regular measure performance considered 
parallel schedule generation scheme parallel scheduling scheme time incrementation 
iteration schedule time activities scheduled element complete set active set complete set comprises activities completed fj active set comprises activities active fj gamma eligible set comprises activities precedence resource feasibly started remaining capacity gamma ag algorithmic description parallel sgs follows parallel sgs initialization min ag ff calculate select calculate max pn ff sets schedule time assigns project start activity active complete set sets available capacity 
iteration consists steps 
determines schedule time associated activity sets available capacity 
schedules non proper subset eligible activities start table reports parallel sgs generating schedule 
note parallel sgs stages exactly selection decisions 
fg table example parallel sgs serial parallel sgs generate feasible schedules optimal resource unconstrained case 
shown kolisch parallel sgs constructs non delay schedules 
non delay schedule schedule activity preemption allowed activities started earlier delaying activity 
set non delay schedules non proper subset set active schedules 
average smaller cardinality 
severe drawback contain optimal schedule regular performance measure 
kolisch shown problem instances set sm cf 
kolisch optimal solution set non delay schedules 
time complexity parallel sgs delta 
priority rule heuristics priority rule heuristics employ sgs order construct schedules 
priority rule order select activity decision set give survey different priority rules 
show scheduling schemes priority rules combined order obtain different priority rule heuristics 
priority rules priority rule mapping assigns activity decision set value objective stating activity minimum maximum value selected 
case ties tie breaking rules employed 
easiest ways resolve ties choose activity smallest activity label 
overwhelming acronym priority rule ref 
greatest rank positional weight lft minimum latest finish time lf lst minimum latest start time lf gamma minimum slack lf gamma ef mts total successors rsm resource scheduling method max ap gamma lf gamma spt shortest processing time wcs worst case slack lf gamma gamma max ap fe table priority rules amount research priority rules rcpsp cf 
alvarez vald es tamarit cooper davies davis patterson kolisch lawrence ozdamar ulusoy patterson shaffer thomas brown 
priority rules classified different criteria 
type information employed calculate distinguish network time resource rules cf 
alvarez vald es tamarit lawrence lower upper bound rules 
lower bound rules calculate activity lower bound objective function value upper bound rules calculate activity upper bound objective function value 
amount information employed distinguished local global rules 
local rules employ information activity consideration processing time global rules wider range information 
distinction static dynamic rules fact value remains constant changes iterations sgs 
sgs distinguish rules employed serial parallel sgs 
table gives overview known priority rules 
mts rule employs set direct indirect successors activity wcs rsm rules employ ap theta jg set activity pairs decision set wcs rule uses earliest precedence resource feasible start time activity activity started schedule time note rsm rule selects activity lowest priority value 
proposed methods priority rule heuristics combine priority rules schedule generation schemes order construct specific algorithm 
heuristic generates single schedule called single pass method generates schedule referred multi pass method 
single pass methods oldest heuristics single pass methods employ sgs priority rule order obtain feasible schedule 
examples heuristics alvarez vald es tamarit cooper davies davis patterson kolisch lawrence patterson brown 
elaborate priority rules proposed kolisch ozdamar ulusoy 
kolisch developed priority rules called worst case slack wcs rule parallel sgs table 
ozdamar ulusoy introduced local constraint analysis 
employs parallel sgs decides feasibility checks called essential conditions activities selected activities delayed schedule time 
multi pass methods possibilities combine sgs priority rules multi pass method 
common ones multi priority rule methods forward backward scheduling methods sampling methods 
multi priority rule methods employ sgs times 
time different priority rule 
rules order descending solution quality 
employed different rules experimental study 
priority rules order generate schedules virtually unlimited number schedules generated convex combinations priority rules delta 
examples approaches ulusoy ozdamar thomas 
ulusoy ozdamar employed convex combination rules order generate different schedules 
forward backward scheduling methods employ sgs order iteratively schedule project alternating forward backward scheduling 
forward scheduling outlined section 
backward scheduling applies sgs reversed precedence network activity new start activity 
priority values usually obtained start completion times lastly generated schedule 
forward backward scheduling methods proposed li willis ozdamar ulusoy 
sampling methods generally sgs priority rule 
different schedules obtained biasing selection priority rule random device 
priority value selection probability computed 
selection decision sgs probability activity decision set selected 
dependent probabilities computed distinguish random sampling biased random sampling regret biased random sampling 
random sampling rs assigns activity decision set probability jd biased random sampling brs employs priority values directly order obtain selection probabilities 
objective priority rule select activity highest priority value probability calculated dg biased random sampling methods applied alvarez vald es tamarit cooper 
schirmer propose modification called normalized biased random sampling nbrs essentially ensures selection probability activity smallest highest priority value seeking activity highest smallest priority value 
regret biased random sampling uses priority values indirectly regret values 
objective select activity highest priority value regret value absolute difference priority value activity consideration worst priority value activities decision set gamma min dg fv calculating selection probabilities regret values modified ffl ff cf 
drexl 
random sampling biased random sampling regret biased random sampling table selection probabilities different sampling methods adding constant ffl regret value assures selection probability activity decision set greater zero schedule population generated 
choice parameter ff amount bias controlled 
high ff cause bias deterministic activity selection ff zero cause maximum bias random activity selection 
kolisch general ffl ff provide results 
drexl uses ffl min dg 
schirmer propose modified regret biased random sampling ffl determined dynamically 
experimental comparisons performed kolisch schirmer revealed modified regret biased random sampling best sampling approach 
table gives different selection probabilities ffl ff 
hybrid multi pass approach proposed kolisch drexl 
heuristic applies serial sgs lft priority rule parallel sgs wcs priority rule employing deterministic regret sampling activity selection 
decision specific method analysis problem hand number iterations performed 
partial schedules discarded lower bounds 
schirmer extended approach employing schedule generation schemes different priority rules mts lft lst wcs different sampling schemes 
table gives survey priority rule heuristics rcpsp 
metaheuristic approaches general metaheuristic strategies metaheuristic strategies developed solve hard optimization problems 
summary briefly describes general solve rcpsp 
simulated annealing simulated annealing sa introduced kirkpatrick originates physical annealing process solid cooled low energy state 
starting initial solution called neighbor solution generated slightly perturbing current 
new solution better current accepted search proceeds new solution 
worse new solution accepted probability depends magnitude deterioration parameter called temperature 
author sgs priority rule sampling passes alvarez vald es tamarit par 
rules single alvarez vald es tamarit par 
rules brs multi par ser 
rules multi cooper ser 
rules brs multi davis patterson par 
lft single kolisch par ser 
rules multi kolisch par 
wcs single kolisch par ser 
rules rs brs multi kolisch drexl par ser 
lft wcs multi li willis par 
start finish times multi ozdamar ulusoy par 
multi ozdamar ulusoy par 
single shaffer par 
rsm single schirmer par ser 
rules multi schirmer par ser 
rules diff 
sampling methods multi thomas par 
convex combination multi ulusoy ozdamar par 
convex combination multi table survey priority rule heuristics rcpsp algorithm proceeds temperature reduced order lower probability accept worse neighbors 
clearly sa viewed extension simple greedy procedure called fit strategy ffs immediately accepts better neighbor solution rejects deterioration 
tabu tabu search ts developed glover essentially steepest descent ascent method 
evaluates solutions neighborhood chooses best proceeds 
concept bears possibility cycling may move back local optimum just left 
order avoid problem tabu list set form memory search process 
usually tabu list forbid neighborhood moves cancel effect performed moves lead back visited solution 
typically tabu status overrun corresponding neighborhood move lead new best solution aspiration criterion 
obvious ts extends simple steepest descent search called best fit strategy bfs scans neighborhood accepts best neighbor solution neighbors improves current objective function value 
genetic algorithms genetic algorithms ga inspired process biological evolution introduced holland 
contrast local search strategies ga simultaneously considers set population solutions 
having generated initial population new solutions produced mating existing ones crossover altering existing mutation 
producing new solutions fittest solutions survive generation deleted 
fitness value measures quality solution usually objective function value optimization problem solved 
representations metaheuristic strategy chosen attack optimization problem select suitable representation solutions 
usually metaheuristic approaches rcpsp operate representations schedules schedules 
appropriate decoding procedure selected transform representation schedule 
operators needed produce new solutions selected representation 
unary operator constructs new solution existing neighborhood move local search procedure sa ts mutation ga binary operator constructs new solution existing ones done crossover ga subsection summarizes representations reported literature metaheuristic approaches solve rcpsp 
representation give related decoding procedures operators 
order keep description short restrict definition binary operators point crossover type different representations 
roughly speaking point crossover splits existing solutions takes part part second solution order form new 
general crossover types known ga literature point uniform crossover easily obtained extending point definitions see hartmann 
activity list representation activity list representation precedence feasible activity list hj activity higher index predecessors 
shown section serial sgs decoding procedure obtain schedule activity list 
note parallel scheme applied modification 
easily verified serial sgs transforms example activity list project schedule 
initial solution generated randomly selecting activity decision set step sgs 
obtain better solution quality priority rule priority rule sampling scheme choosing eligible activity 
case recording activities order selection results precedence feasible activity list 
unary operators proposed activity list representation see della croce 
called pairwise interchange defined swapping activities ng resulting activity list precedence feasible 
special case adjacent pairwise interchange swaps activities gamma adjacent precedence related 
considering example project apply adjacent pairwise interchange obtain furthermore simple shift operator selects activity inserts immediately activity precedence constraints violated 
example shifting activity immediately activity results neighbor activity list sophisticated shift operators proposed baar rcpsp 
schedule represented current activity list operators notion critical arc defined pair successively scheduled activities 
underlying idea critical arc non critical improve current schedule 
baar define shift operators may cancel critical arc extend simple shift allowing activity shifted 
giving formal definitions illustrate shift operator critical arc schedule shown shifting activity successor activity immediately activity leads neighbor activity list binary operator crossover ga hartmann technique parent activity lists mother father child activity list defined follows drawing random integer positions taken mother setting activity list positions taken father jobs taken mother may considered 
obtain lowest index fj gamma choosing definition illustrated project example shown hartmann child activity list resulting precedence feasible parent activity lists precedence feasible 
random key representation researchers employed representation array ae assigns typically real valued number activity bean call encoding random key representation 
similar priority value representation lee kim cho kim problem space representation storer leon ramamoorthy naphade discuss approaches unified framework 
initial solution random keys usually chosen randomly see lee kim computed priority rule see leon ramamoorthy 
parallel serial sgs derive schedule ae stage select activity highest random key decision set clearly initialized latest finish time select activity minimum random key 
words random keys play role priority values 
considering example project obtain schedule applying parallel serial sgs ae alternative approach proposed naphade 
random keys perturb activity slacks serve priority values 
parallel serial sgs decoding procedures guarantee feasible schedules serial ensures existence optimal schedule solution space discussed section 
order overcome drawback possible exclusion optimal solutions parallel sgs researchers see cho kim naphade leon ramamoorthy introduced different modifications parallel sgs decoding procedures random key representation 
essentially allow delay schedulable activity search restricted non delay schedules 
unary operator pairwise interchange employed including adjacent pairwise interchange considering pairwise interchange example neighbor ae ae approach job shop problem storer proposed called problem space neighborhood randomly new old gamma ffl delta old old ffl delta old uniform distribution ffl real valued constant 
neighborhood definition ffl example neighbor ae ae random key representation allows application standard point crossover binary operator random integer new random key array ae derived random keys mother array ae remaining ones father array ae 
obtain example ae ae ae priority rule representation priority rule representation dorndorf pesch job shop problem adapted hartmann rcpsp list priority rules priority rule 
decoding procedures parallel serial sgs selecting th activity scheduled priority rule example project schedule obtained mts lst lft commonly unary operator randomly selects new priority rule example priority list possible neighbor mts lst lft binary operator point crossover follows standard definition 
random integer new priority rule list derived priority rules mother list remaining ones father list consider example mts lst lft spt lft mts spt lft shift vector representation shift vector representation proposed sampson weiss rcpsp 
solution represented shift vector oe oe oe oe oe nonnegative integer 
decoding procedure extension classical forward recursion cf 
start time activity calculated maximum finish times predecessors plus shift oe activity oe 
shift vector example project leads schedule oe decoding procedure consider resource constraints schedule derived shift vector may infeasible 
illustrated shift vector forces activities simultaneously process exceeding resource capacity units oe consequently objective function extended penalizing violation resource constraints 
neighborhood shift vector oe vectors differ oe exactly position lead project makespan exceeds upper bound 
example neighbor shift vector oe oe schedule scheme representation schedule scheme representation introduced brucker branch bound algorithm rcpsp 
follows give brief informal description 
schedule scheme consists disjoint relations 
implies activity finished activity started conjunctions 
implies activities may overlap disjunctions 
implies activities processed parallel period relations 
activities restrictions flexibility relations 
schedule scheme represents necessarily feasible schedules related relations maintained 
decoding procedure baar develop heuristic constructs feasible schedule relations large number relations satisfied 
baar introduce neighborhood definition basically consists moves transform flexibility relations relations relations flexibility relations 
neighborhood size reduced critical path calculation impact estimations moves 
discuss representation neighborhood definition detail referring reader chapter 
cf 
brucker 
proposed methods subsection briefly describe metaheuristic approaches documented rcpsp 
listed alphabetical order 
restricted list papers consider rcpsp papers cover extensions rcpsp included 
summarizing overview table 
denote employed metaheuristic strategies underlying representation method employed generate initial solutions sgs operator 
case ga mention crossover operator 
baar develop ts algorithms 
activity list representation accordance serial sgs 
neighborhood defined kinds critical path moves 
second ts approach employs schedule scheme representation related decoding procedure neighborhood definition 
ts algorithms dynamic tabu lists priority start heuristics 
propose sa procedure activity list representation serial sgs 
neighborhood moves shift operator 
cho kim modify sa algorithm lee kim see extending random key representation order allow delay schedulable activities adapted parallel sgs 
hartmann proposes ga activity list representation compares gas random key priority rule representations respectively 
approaches employ serial sgs point crossover operators related respective representation 
activity list ga regret biased random sampling method serial sgs lft rule see section determine initial generation 
kohlmorgen develop ga employs random key representation standard point crossover 
test approach massively parallel computer 
lee kim propose sa algorithm ts procedure ga approaches metah 

initial sol 
sgs operator baar ts activity list prio 
rule serial crit 
path shifts ts sched 
scheme prio 
rule relat 
heur 
related moves sa activity list prio 
rule serial shift cho kim sa random key random mod 
par 

int 
hartmann ga activity list prio 
rule serial point cr 
ga random key random serial point cr 
ga prio 
rule random serial point cr 
kohlmorgen ga random key prio 
rule serial point cr 
lee kim sa random key random par 

int 
ts random key random par 

int 
ga random key random par 
point cr 
leon ramamoorthy ffs random key prio 
rule mod 
par 
problem space bfs random key prio 
rule mod 
par 
problem space ga random key prio 
rule mod 
par 
point cr 
naphade bfs random key prio 
rule mod 
par 
problem space pinson ts activity list prio 
rule serial 

int 
ts activity list prio 
rule serial 
int 
ts activity list prio 
rule serial shift sampson weiss sa var 
shift vector null vector ext 
recurs 
related move table survey metaheuristic strategies rcpsp random key representation parallel sgs decoding procedure 
sa ts restricted version pairwise interchange move ga employs standard point crossover 
leon ramamoorthy test ffs bfs approach ga employ problem space version random key representation 
random keys initialized values computed priority rule 
modified variant parallel sgs serves decoding procedure 
unary operator defined problem space neighborhood binary standard point crossover 
naphade bfs concept problem space variant random key representation 
random keys initialized latest finish times activities modified problem space neighborhood 
decoding procedure employ modified parallel sgs random keys calculate slack priority values 
pinson suggest variants ts approach activity list representation serial sgs priority rule procedure computing start solution 
variants differ neighborhood definitions adjacent pairwise interchange general pairwise interchange shift move respectively 
sampson weiss suggest local search procedure viewed variant ta 
approach shift vector representation related neighborhood definition 
heuristics truncated branch bound methods pollack johnson uses called depth branch bound search partial solution tree 
algorithm essentially parallel scheduling heuristic 
scheduling activity highest priority value branches certain occasions branch activity highest priority value branch activity second highest priority value scheduled 
note due parallel sgs optimal solution excluded search space 
sprecher employs depth search branch bound procedure heuristic imposing time limit 
enumeration process guided called precedence tree essentially branches activities decision set serial sgs 
backtracking precedence feasible activity lists implicitly enumerated 
order obtain solutions early search process time limit priority rules applied select promising activity decision set branching 
disjunctive arc methods basic idea disjunctive arc approaches extend precedence relations set conjunctive arcs adding additional arcs disjunctive arcs minimal forbidden sets sets technologically independent activities scheduled simultaneously due resource constraints destroyed earliest finish schedule feasible respect precedence resource constraints 
shaffer restrict scope resource scheduling method forbidden sets activities earliest finish schedule processed time 
disjunctive arc produces smallest increase earliest finish time unique sink introduced earliest finish schedule recalculated 
algorithm terminates soon precedence resource feasible earliest finish schedule 
note approach transformed single pass priority rule method parallel sgs cf 
tables 
alvarez vald es tamarit propose different ways destroying minimal forbidden sets 
best results achieved applying strategy minimal forbidden sets lowest cardinality set arbitrarily chosen destroyed adding disjunctive arc earliest finish time unique dummy sink minimal 
bell han phase algorithm problem 
phase similar approach shaffer phase tries improve feasible solution obtained phase follows removing redundant arcs disjunctive arc part critical path temporarily cancelled phase procedure applied 
approaches integer programming heuristics bala 
method employs integer programming formulation originally proposed 
planning horizon divided periods equal length processing times discrete multiples period 
binary decision variable activity finished period lawrence block structures improve makespan projects 
start generating feasible solution parallel scheduling scheme 
identify blocks represent contiguous time spans completely contain activities processed 
block considered independent blocks 
method essentially individual blocks order shorten project length 
computational analysis test design section reports computational comparison heuristics summarized 
test instances employed standard sets rcpsp generated progen cf 
kolisch :10.1.1.45.7622
sets consist projects activities respectively 
set consists projects activities 
details problem instances chapter book cf 
kolisch 
algorithm tested author original implementation 
allowed authors adjust parameters order obtain results 
consequence tests performed different computer architectures operating systems 
impose bound computation time provide basis comparison 
chosen limit number generated evaluated schedules respectively 
decision assumption effort needed generating schedule similar tested heuristics 
exception schedule scheme representation ts approach baar algorithms considered investigation sgs described section 
assumption justified 
results tables display results computational comparison 
heuristics sorted descending performance respect iterations 
table summarizes percentage deviations optimal makespan instance set 
instance sets optimal solutions known measured sets average percentage deviation upper lower bound respectively 
upper bound set lowest makespan tested heuristics lower bound selected critical path lower bound cf 
stinson 
employed lower bound order allow researchers compare results ones obtained study 
lower upper bounds obtained authors request 
set percentage deviations upper lower bounds reported tables respectively 
note schedule scheme ts heuristic baar additionally run allowing trials trial terminated improved solution iterations 
way deviation upper bound lowered 
tables provide respective deviations set 
heuristics performed best study sa ga hartmann 
procedure performs best set approach hartmann dominates instance sets larger projects 
iterations algorithm sgs sa activity list serial ga activity list serial hartmann ts schedule scheme special heuristic baar sampling adaptive serial parallel kolisch drexl sampling lft serial kolisch sampling adaptive serial parallel schirmer sampling wcs parallel kolisch sampling lft parallel kolisch ga random key mod 
parallel leon ramamoorthy table average deviations optimal solution iterations algorithm sgs ga activity list serial hartmann sa activity list serial sampling adaptive serial parallel schirmer sampling adaptive serial parallel kolisch drexl ts schedule scheme special heuristic baar sampling lft serial kolisch sampling lft parallel kolisch sampling wcs parallel kolisch ga random key mod 
parallel leon ramamoorthy table average deviations best solution iterations algorithm sgs ga activity list serial hartmann sa activity list serial sampling lft parallel kolisch sampling wcs parallel kolisch sampling adaptive serial parallel schirmer sampling adaptive serial parallel kolisch drexl ga random key mod 
parallel leon ramamoorthy sampling lft serial kolisch table average deviations best solution iterations algorithm sgs ga activity list serial hartmann sa activity list serial sampling adaptive serial parallel schirmer sampling adaptive serial parallel kolisch drexl sampling wcs parallel kolisch sampling lft parallel kolisch ts schedule scheme special heuristic baar ga random key mod 
parallel leon ramamoorthy sampling lft serial kolisch table average deviations critical path lower bound iterations algorithm sgs ga activity list serial hartmann sa activity list serial sampling lft parallel kolisch sampling wcs parallel kolisch sampling adaptive serial parallel schirmer sampling adaptive serial parallel kolisch drexl ga random key mod 
parallel leon ramamoorthy sampling lft serial kolisch table average deviations critical path lower bound generally results show best metaheuristic strategies outperform best priority rule sampling approaches 
increasing number schedules allowed computed increases superiority metaheuristics 
mainly sampling procedures generate schedule anew considering information visited solutions metaheuristic algorithms typically exploit knowledge gained previously evaluated schedule 
comparison results obtained metaheuristics shows choice underlying representation crucial 
best procedures different metaheuristic paradigms employ activity list representation 
metaheuristic paradigm necessarily lead consistently solutions 
seen results ga hartmann leon ramamoorthy 
activity list ga problem space ga analyzing priority rule sampling procedures observe strong influence sgs lft rule 
serial sgs leads better results instance set parallel superior instance sets respectively 
rules wcs lft give identical results employed parallel sgs 
adaptive sampling strategies consistently dominate simple sampling procedures 
compared observe adaptive sampling approach schirmer outperforms kolisch drexl instance sets yields better results set 
metaheuristic algorithms activity list representation assumed fastest approaches 
due fact underlying serial sgs activity lists cf 
section compute eligible set select activity basis priority values 
outlook research opportunities computational results indicate best heuristics currently available metaheuristic strategies activity lists 
investigations currently way cf 
hartmann indicate exploitation problem specific knowledge crucial designing metaheuristic strategies 
fact known classical scheduling problems job shop problem cf 
nowicki smutnicki 
investigations cf 
hartmann kolisch headed deeper insight functioning different heuristics subject different problem characteristics kolisch kolisch sprecher 
priority rule methods give best results important reasons 
indispensable solving large problem instances short amount time 
second priority rule methods needed determine initial solution metaheuristic procedures 
efforts area justified 
summarizing years brought considerable progress designing efficient heuristics rcpsp believe remain fruitful field research 
addition development better heuristics extending current approaches general project scheduling problems special interest 

indebted baar peter brucker university kamel henri university li ege jorge leon balakrishnan ramamoorthy texas university andreas schirmer sven university kiel help research 
furthermore andreas drexl continuous support 
alvarez vald es tamarit 
algoritmos heur en de con 

alvarez vald es tamarit 
heuristic algorithms resource constrained project scheduling review empirical analysis 
lowi nski editors advances project scheduling pages 
elsevier amsterdam 
baar brucker 
tabu search algorithms resource constrained project scheduling problem 
technical report zur mathematik fachbereich mathematik informatik 
bean 
genetic algorithms random keys sequencing optimization 
orsa journal computing 
bell han 
new heuristic solution method resource constrained project scheduling 
naval research logistics 
bixby 
cplex callable library 
cplex optimization houston 
la lenstra rinnooy kan scheduling subject resource constraints classification complexity 
discrete applied mathematics 

efficient multi heuristic procedures resource constrained project scheduling 
european journal operational research 

new efficient simulated annealing algorithm resource constrained project scheduling problem 
technical report service de universit de li ege 
brucker thiele 
branch bound algorithm resource constrained project scheduling problem 
european journal operational research forthcoming 

cho 
kim 
simulated annealing algorithm resource constrained project scheduling problems 
journal operational research society 
christofides alvarez vald es tamarit 
project scheduling resource constraints branch bound approach 
european journal operational research 
cooper 
heuristics scheduling resource constrained projects experimental investigation 
management science 
cooper 
note serial parallel heuristics resource constrained project scheduling 
foundations control engineering 
davies 
experimental investigation resource allocation projects 
operational research quarterly 
davis patterson 
comparison heuristic optimum solutions resource constrained project scheduling 
management science 
della croce 
generalized pairwise interchanges machine scheduling 
european journal operational research 
demeulemeester herroelen 
new benchmark results resource constrained project scheduling problem 
management science 
dorndorf pesch 
evolution learning job shop scheduling environment 
computers operations research 
drexl 
scheduling project networks job assignment 
management science 

activity networks project planning control network models 
wiley new york 

algorithms project scheduling resource constraints 
international journal production research 
glover 
tabu search part orsa journal computing 
glover 
tabu search part ii 
orsa journal computing 
hartmann 
competitive genetic algorithm resource constrained project scheduling 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
hartmann 
project scheduling multiple modes genetic algorithm 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
hartmann 
acceptance criteria local search heuristics application project scheduling 
technical report forthcoming 
hartmann kolisch 
experimental investigation state art heuristics resource constrained project scheduling problem 
technical report forthcoming 
herroelen demeulemeester de 
classification scheme project scheduling 
editor handbook advances project scheduling pages 
kluwer 
holland 
adaptation natural artificial systems 
university michigan press ann arbor 
kelley 
critical path method resources planning scheduling 
muth thompson editors industrial scheduling pages 
prentice hall new jersey 

kim 
backward approach list scheduling algorithms multi machine tardiness problems 
computers operations research 
kirkpatrick gelatt jr vecchi 
optimization simulated annealing 
science 
kohlmorgen haase 
experiences fine grained parallel genetic algorithms 
annals operations research forthcoming 
kolisch 
project scheduling resource constraints efficient heuristics problem classes 
physica heidelberg 
kolisch 
efficient priority rules resource constrained project scheduling problem 
journal operations management 
kolisch 
serial parallel resource constrained project scheduling methods revisited theory computation 
european journal operational research 
kolisch drexl 
adaptive search solving hard project scheduling problems 
naval research logistics 
kolisch padman 
integrated survey project scheduling 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
kolisch schwindt sprecher 
benchmark instances project scheduling problems 
editor handbook advances project pages 
kluwer amsterdam 
kolisch sprecher 
project scheduling problem library 
european journal operational research 
kolisch sprecher drexl :10.1.1.45.7622
characterization generation general class resource constrained project scheduling problems 
management science 
lawrence 
resource constrained project scheduling computational comparison heuristic scheduling techniques 
technical report graduate school industrial administration carnegie mellon university pittsburgh 

lee 
kim 
search heuristics resource constrained project scheduling 
journal operational research society 
leon ramamoorthy 
strength adaptability problem space neighborhoods resource constrained scheduling 
spektrum 

li willis 
iterative scheduling technique resource constrained project scheduling 
european journal operational research 
lawrence 
exploiting block structure improve resource constrained project schedules 
technical report university colorado graduate school business administration 
maniezzo 
exact algorithm project scheduling resource constraints new mathematical formulation 
management science forthcoming 
naphade wu storer 
problem space search algorithms resource constrained project scheduling 
annals operations research 
nowicki smutnicki 
fast taboo search algorithm job shop problem 
management science 
bala 
comparative study computational procedures resource constrained project scheduling problem 
european journal operational research 
ozdamar ulusoy 
local constraint analysis approach project scheduling general resource constraints 
european journal operational research 
ozdamar ulusoy 
iterative local constraint analysis solving resource constrained project scheduling problem 
journal operations management 
ozdamar ulusoy 
note iterative forward backward scheduling technique procedure li willis 
european journal operational research 
patterson 
alternate methods project limited resources 
naval research logistics quarterly 
patterson 
project scheduling effects problem structure heuristic performance 
naval research logistics quarterly 
pinson prins 
tabu search solving resource constrained project scheduling problem 
proceedings 
international workshop project management scheduling pages leuven 
pollack johnson 
hybrid structures improving forecasting scheduling project management 
journal operations management 
wolfe 
scheduling limited resources zero programming approach 
management science 
sampson weiss 
local search techniques generalized resource constrained project scheduling problem 
naval research logistics 
schirmer 
case reasoning parameterized random sampling project scheduling 
technical report forthcoming 
schirmer 
parameterized heuristics project scheduling biased random sampling methods 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 

list scheduling revisited 
operations research letters 
shaffer ritter meyer 
critical path method 
mcgraw hill new york 
sprecher 
solving rcpsp efficiently modest memory requirements 
technical report aus den fur betriebswirtschaftslehre der universitat kiel 
sprecher kolisch drexl 
semi active active non delay schedules resource constrained project scheduling problem 
european journal operational research 
stinson davis 
multiple resource constrained scheduling branch bound 
transactions 
storer wu 
new search spaces sequencing problems application job shop scheduling 
management science 

heuristic scheduling activities resource precedence restrictions 
management science 
thomas 
investigation relationship heuristic performance network resource characteristics 
journal operational research society 
ulusoy ozdamar 
heuristic performance network resource characteristics resource constrained project scheduling 
journal operational research society 
ulusoy ozdamar 
constraint perspective resource constrained project scheduling 
international journal production research 
erez 
heuristic performance large resource constrained projects 
technical report departament universitat de valencia 
brown 
genres extension brooks algorithm project scheduling resource constraints 
computers industrial engineering 

