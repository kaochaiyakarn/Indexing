accepted publication artificial intelligence review special issue thinking diagrams 
cognitive factors programming diagrams alan blackwell computer laboratory university cambridge cambridge alan blackwell cl cam ac uk kirsten whitley department computer science vanderbilt university nashville tennessee whitley computer org judith human communication research centre university edinburgh cogsci ed ac uk marian petre centre informatics education research faculty mathematics computing open university milton keynes petre open ac uk visual programming languages aim broaden diagrams software industry extent integrated programming language 
result provide ideal opportunity study benefits diagrams external representation problem solving programming challenging problem solving activity effect diagram usage directly assessed comparing performance visual programming language performance standard textual language 
misconceptions visual language researchers regarding role diagrams software design addressed empirical studies new theories notation design derived studies visual programming 
research authors able recommend new directions research thinking diagrams 
keywords diagrams diagrammatic reasoning visual programming psychology programming 
investigates specific class diagrammatic notations visual programming languages vpls considering perspective research psychology programming 
field developed set research methods specifically aimed measuring human performance solving problems various external notations 
result psychology programming dealing visual programming offer important insights application diagrams problem solving contexts 
starts overview vpls reasons role play software development 
gives brief research methods psychology programming 
review empirical evidence benefits resulting diagram programming describe new insights general properties notations derived empirical 
propose pressing topics ongoing research diagrammatic properties vpls 

nature visual programming computer programming challenging intellectual task involving complexity equivalent design engineering activities 
term introduced reitman belongs class ill structured problems solved strictly defined procedure 
time programming characteristics apparently appropriate research context studying diagrammatic reasoning 
firstly programming activities take place technically constrained environment 
possible observe record measure actions taken programmer 
secondly diagrams associated computer programming external representation employed private aid thought communication medium members software project team 
engineering design professionals see ferguson review programmers commonly create informal ephemeral diagrams privately talking sketches 
engineering disciplines informal conventions formalized way persistent suitable maintenance form design documentation 
programming furthermore formalized readily amenable automated translation immediate testing 
diagrams engineering disciplines software diagrams constrained need graphical correspondence physical shape designed artifact 
resulted relatively greater freedom regarding form diagram elements 
representations design disciplines new software diagrams continually developed possible observe effect successive generations diagram conventions influence development generations design notation 
vpls evolved diagrammatic notations relatively familiar flowchart 
notations prescribed behaviour program level detail textual programming language 
design diagrams started drawn directly screen computer translated automatically equivalent lines program text 
diagram part program 
proposals vpls 
glinert edited volume collection landmark papers field dating 
research developments reported proceedings annual ieee symposia visual languages journal visual languages computing 
taxonomies vpls visualization systems proposed myers price baecker small 
boundaries dividing vpls classes diagram clear 
take view programming language executable precise semantics defined terms expected changes state digital computer 
discuss products microsoft visual basic visual logical behaviour program fully expressed form textual programming language diagrams 

psychology programming research cognitive processes involved computer programming derived general cognitive theories problem solving newell simon 
notable early cognitive theories programming include weinberg shneiderman 
aspects models familiar cognitive scientists 
include separate processing syntactic semantic information collection expert knowledge chunks structuring regularly information schemas solution design problems terms previously acquired frequently modified plans 
overview range research methods currently psychology programming collection edited hoc green ay gilmore 
volume includes chapter gilmore specifically reviewing advising empirical research methods suited investigations programming 
predominant research technique psychology programming adopts hypothesis testing methods experimental psychology 
studies generally involve observation small groups subjects performing constrained defined tasks 
performance measured terms time required complete simple task accuracy response classification statements verbal transcript experimental subject 
individual differences subjects analysed detail experimenter compares differences groups subjects looking statistically significant variations performance expected result treatment assigned group 
partly result psychology programming experimental psychology accused addressing concerns real programmers deal messy ill defined problems main challenges collaboration customers colleagues long periods time 
focus statistical analysis obscures individual differences strategies specific tasks 
particular concern strategic differences may far effect performance experimental hypotheses tested 
alternatives pure hypothesis testing approach including empirical studies aim gather qualitative data processes involved programming longitudinal field studies chart course learning programming language observations larger scale software development projects time 

empirical studies diagrammatic notations programming relatively empirical studies focused directly diagrammatic notations programming activity visual programming community may reflect growing interest undertaking studies 
section summarizes existing studies show range questions investigated show common themes findings 
summary includes studies flowcharts research vpls 
interested readers consult whitley detailed extended discussion 

flowcharts studies focused flowcharts visual programming constructs 
date suggest flowcharts outperform text certain tasks entire programming process 
scanlan investigated comprehensibility structured flowcharts textual pseudo code representations conditional logic 
asked programming students view conditional logic answer questions states required trigger actions 
flowcharts significant advantage time needed comprehend algorithm variables response accuracy 
effects observed simple cases complex ones 
scanlan results suggest flowcharts beneficial effect certain tasks particular illuminate control flow conditional logic 
similar results occurred studies programming students vessey weber taylor 
contrast studies shown flowcharts having practical advantage text full range programming activities 
curtis 
studied flowchart historical role notation supplemental textual code form design program documentation 
identified dimensions symbology spatial arrangement capable categorizing wide range notations 
symbology dimension measures succinctness notation includes possibilities unconstrained text natural language constrained text 
spatial arrangement dimension captures extent notation layout highlights execution paths case flowcharts control flow program dimension values sequential branching hierarchical 
combining possibilities yields documentation formats tested comprehension coding debugging modification tasks 
participants experiments professional fortran programmers 
consistent effects symbology comprehension coding debugging 
prose ineffective symbology format tasks constrained language equivalent 
spatial arrangement small effects observed occurred situations control flow information factor task 
results largely due branching arrangement improved performance tasks control flow important 
putting symbology spatial arrangement constrained sequential representation typically outperformed forms documentation 
sum curtis results consistent scanlan branching arrangement help tasks emphasized control flow constrained sequential representation equal better tasks 

studies vpls current empirical studies vpls current 
study pandey burnett stands strongest controlled study favorable vpls 
tested performance matrix problems textual programming languages pascal modified form apl diagrammatic subset research vpl forms 
forms solutions completely correct compared apl solutions pascal solutions 
results apply language programming environment study required pinpoint impact particular visual representation 
aside study majority empirical studies focused commercially available vpls notably prograph national instruments labview hewlett packard vee 
prograph promoted general purpose programming language labview vee frequently described measurement control languages characterized accessible scientists engineers having limited programming experience 
visual syntax labview vee expresses data flow way resembles electronic circuit diagrams particularly explicit labview 
baroth hartsough report experience labview vee 
case study compared teams developing system parallel 
team textual language worked labview 
month project labview team far progress 
study projects baroth hartsough report performance benefits labview vee 
attribute productivity gains increased communication customer developer arises say visual syntax vpls 
customers engineers scientists comfortable circuit diagrams circuit syntax helped understand program 
contrast controlled laboratory study labview seemingly contradicts baroth hartsough speculations visual syntax 
green petre bellamy labview forms visual conditional logic textual notations green petre bellamy green petre 
started gilmore green match mismatch hypothesis states problem solving performance depends structure problem matched structure notation green 
established textual forms conditional logic notation facilitates answering forward questions action results conditions notation facilitates answering backward questions conditions exist evoke specified action 
labview happens provide notations expressing conditional logic 
green petre bellamy proposed correspond respectively forward backward form compared forward backward questions textual notations 
labview notations exhibit expected match mismatch effect effect size anticipated 
response times twice long comprehension questions visual notations 
subsequent articles green petre petre petre green argue secondary notation accounts large part un readability visual notation ability read visual notation associated secondary notation dependent training 
secondary notation layout informal cues express structure defined green cognitive dimensions notations 
green petre base argument observational studies novice labview programmers expert electronics designers 
group experts approached study questions fairly consistently tended strategies choose strategies style problem 
contrast labview programmers inconsistent strategies point changing strategies mid task 
green petre attribute relative 
electronics experts recognized took advantage spatial groupings labview programmers unaware secondary notation 
green petre results explored moher 
study compared text petri nets 
moher interested petri nets show promise visual basis vpl 
experimental design comprehension questions employed green petre bellamy study different visual representations 
designed different petri net notations corresponded statement forward form labview gates notation textual statement backward forms 
moher study confirmed match mismatch hypothesis textual notations petri nets 
petri nets faster backward forward questions performed worse text counterparts third significantly different text 
results concur green petre bellamy match mismatch hypothesis account differences seen experiment 

algorithm visualization handful empirical studies investigated animated pictorial visualization software algorithms teaching tool 
studies fall purview diagrammatic research example visualization node arc graph 
despite popular enthusiasm concept visualization studies conclusive evidence recommend 
example stasko lewis examined effects visualizing heap algorithm stasko lewis 
significant difference comprehension students learned algorithm text description saw visualization 
view failure empirical validation advocate careful meta analysis earlier studies looking especially factors produced false negative results 

status empirical studies existing studies diagrammatic notations programming tasks contributed examples diagrammatic notations resulted performance benefits 
shown visual notations outperforming text time correctness 
basic assumptions surrounding studies investigated diagrams better text problems worse 
differences lie costs locating indexing information differences cognitive processing symbolic spatial information open questions 
experts appear things differently novices ways extremely hard analyse 
differences processes identification indexing selection abstraction matching strategy task finding ways making complex problems tractable 
notation information accessible expense obscuring information 
match mismatch hypothesis 
despite fact differences subjects analyzed detail individuals differ 
researchers assumptions relationships programming languages reasoning don hold empirical scrutiny people really program 
section raised questions answered don wish disguise fact research questions psychology programming open difficult 
consider questions central understanding diagram usage visual programming field properties diagrams central 

cognitive dimensions notations study cognitive factors involved vpls traced fitter green 
green collaborators including authors remains central field 
despite long history empirical studies programmers little effect design new programming languages 
generally addressed quite detailed aspects programming style language features provide grounds critique specific language features broader issues language format 
little changed complaint shneiderman computer scientists broad claims simplicity naturalness ease new computer languages techniques take advantage opportunity experimental confirmation shneiderman xiii 
green green petre introduced cognitive dimensions notations framework discussion tools descriptions artifact user relationship intended raise level discourse 
description cognitive dimensions summarizes complete treatment green petre 
cognitive dimensions constitute small vocabulary terms describing cognitively relevant aspects structure information artifact show traded 
cognitive artifact described terms description high level predict major aspects user activity 
framework task specific concentrating processes activities finished product 
broad brush framework supplements detailed highly specific analyses typical contemporary cognitive models hci 

partial list cognitive dimensions framework cognitive dimensions consists small number terms chosen easy non specialists comprehend capture significant amount psychology hci programming 
called dimensions meant coherent physical dimensions 
partial list dimensions follows thumb nail descriptions abstraction gradient abstraction grouping elements treated entity just convenience change conceptual structure 
minimum maximum levels abstraction 
fragments encapsulated 
closeness mapping programming games need learned 
programming requires mapping problem world program world 
closer programming world problem world easier problem solving ought 
consistency language structure learned rest inferred successfully 
symbols graphic entities required express meaning 
notations lot symbols lot space achieve results notations achieve compactly 
error proneness design notation induce careless mistakes 
hard find occurred 
hard mental operations places user needs resort fingers pencil annotation keep track happening 
hidden dependencies hidden dependency relationship components dependent dependency fully visible 
dependency overtly indicated directions 
premature commitment programmers decisions information need 
progressive evaluation partially complete program executed obtain feedback am doing ability evaluate problem solving progress essential novices desirable experts 
role expressiveness reader see component program relates 
enhanced meaningful identifiers structured modularity presence beacons signify certain code structures 
secondary notation programmers layout choice naming conventions grouping related statements colour cues convey extra meaning official semantics language 
viscosity effort required perform single change 
standard example viscosity having global change hand environment contains global update tools 
visibility part code simultaneously visible assuming large display possible parts side side 

trade offs dimensions purpose cognitive dimensions framework lay cognitivist view design space coherent manner possible display cognitive consequences making particular bundle design choices 
point view designer important trade relationships cognitive dimensions 
changing structure notation reduce viscosity example affect dimensions introducing hidden dependencies increasing abstraction gradient 
far analysis trade relationships needs done 
important bear mind trade relationships exist notable success dimension may reduced poor performance 
cognitive dimensions framework means finished entity 
take researchers green myers buckingham shum hammond yang burnett zloof shows wide applicability approach 

new directions final section presents directions research diagrammatic representations 
arise current understanding cognitive factors involved vpls build research described body 
directions originally proposed intentionally provocative starting points discussion thinking diagrams workshop 

basic questions empirical studies conducted yielded results keeping enthusiasm visual programming community blackwell 
success depends answers basic questions 
useful studies shed light kinds visual representations beneficial tasks especially appropriate class users notation 
little empirical evidence diagrammatic notation responsible improved programming performance 
points relevant issue attempt find evidence take care separate visual aspects vpls vpl features 
new vpls include language features orthogonal visual textual dimension 
study showing vpl outperforming textual programming language necessarily mean visual aspect vpl responsible 
second question visual notation appropriate programming difficult answer programming involves cognitive tasks 
difficulty lies ascertaining tasks account significant proportion programming effort vpl benefits processes 
third bottom line programming industry programming tool produces costeffective results 
successful vpl issue vpl produces statistically significant effect effect size large practical interest 

metaphor representation development visual languages inspired success desktop metaphor user interfaces 
reasons success desktop metaphor altogether clear 
principles direct manipulation interfaces agreed manipulation entities simplified entities constrained obey rules physical world 
fundamental correspondences value desktop metaphor especially extensions metaphor widely questioned 
pc users learn windows gui aware intended metaphor researchers halasz moran counsel caution relying metaphor 
vpls conceived foundational metaphor 
metaphor generally corresponds underlying model language 
mayer demonstrated underlying model basic language variables represent memory locations easily learned expressed terms metaphorical pigeon holes represented memory locations 
blackwell suggested vpls depend implicit metaphors 
labview example data flow paradigm pictorial metaphor depicts wires data flows 
psychology programming researchers working evaluation alternative metaphorical presentations programs 
see example 
question diagrammatic reasoning research metaphors effect instructional benefits observed mayer 
example cox suggested common graphical notations euler circles attributed inappropriate metaphors 
blackwell experimental investigations failed find substantial benefits instructional pictorial metaphors vpl diagrams 
thorough investigation metaphors vpls may throw light issue 

role reusable components commercially available vpls promoted particularly suitable user programming goal supposedly achieve visual syntax 
vpls labview provide users libraries reusable software components 
examples languages providing libraries survey dataflow vpls 
supplying libraries effectively raises semantics language higher level traditional textual programming languages 
question raised languages benefits come semantic level opposed visual aspects 
furthermore line reasoning lead question importance placed metaphor 
issue designing useful vpl really communicating computational metaphors issue matching tool problem domain 

programming languages children programming widely regarded skill great educational value taught children 
papert logo language designed children successfully years 
logo operates graphical application domain language purely textual 
di boxer attempt logo diagrammatic boxer concentrated issues context environment text organized 
languages particularly suited simple games simulations 
agentsheets repenning sumner cocoa originally described smith cypher spohrer allow children manipulate graphical elements directly define behaviour graphical grid terms graphical rewrite rules condition action rules 
number commercial visual programming products presentational techniques video games provide languages apparently far attractive children 
mid game allowed definition robot behaviour wiring logical elements 
robots placed maze competed robots 
widget workshop provided basic elements data flow language animated devices wired program depiction entertaining right 
kahn product kahn dimensional cartoon characters assemble functional programs observable actions carried robots inside separate houses 
developments entertaining 
critical question educational 
kahn reports year old boys take pleasure fact function completed house evaluated explodes 
unsurprising worked children reflects deeper problem type diagrams children 
report difficulty children interpreting symbolic 
highly salient representations far dereferenced successfully value representation decreased salient allowing children play 
presentation teach programming children certain popular reasons vpls immediately appealing adults 
benefits dangers trend fall psychology programming research diagrammatic reasoning research far know critically evaluated terms 
high priority type product widespread educational settings 

paradigm comprehension generation vpls expressed paradigm control flow order program executed shown flow charts 
contrast current languages including labview vee prograph paradigm data flow 
empirical vpls compared relative performance text graphics little consideration underlying paradigm affect comprehension 
studies may confounding issues diagram usage paradigm respect program comprehension program design considered section 
question ongoing investigating relationship paradigm representation various angles order assess relative contributions 
control flow data flow paradigms vpls studied whitley investigating data flow paradigm embodied textual visual notations 
navarro prieto shown data flow organisation spreadsheets encourages data structured mental model program 
initial results show paradigm difference novice programmer comprehension activities 
control flow vpls encourage better understanding low level program constructs program operations actions control flow data flow vpls lead higher level understanding program data flow functional aspects 
casts doubt common assumption visual programming representations mainly valuable insofar depict data flow 
results shed light issue eagerly 

paradigm design paradigm obviously important factor programming language studies program design experts suggest design activities completely constrained paradigm 
experienced programmers plan solution programming problem start writing code 
studies expert programmers show solve problems target programming language construct solution strategies personal pseudo language subsequently translated code 
petre winder personal design representation include pictorial mental images target language vpl petre blackwell 
necessary correlation programming languages solution strategies contrary strategies volunteered typical paradigm implemented language fits 
scholtz wiedenbeck observed experts learning new language strategies familiar learning features new language require different approach 
furthermore expert programmers observe language paradigm boundaries constructing solutions borrow useful features languages domains 
paradigm influence strategy may paradigm embodied language petre 
implies cost reasoning representation vary depending programmer reasoning shifts 
researchers need consider reasoning paradigm separately representation paradigm investigating design coding activities 

multiple representations benefits multiple representations programming 
shneiderman 
suggested representations known understood additional ones redundant 
may necessarily true different representations highlight different types information expense 
understanding notation complete correct learning new language novel applications language 
know empirical field addressed multiple representations program coding 
petre 
considered number scenarios multiple representations software visualisation applicable coding empirical confirmation hypotheses welcome 

scalability scalability question burnett asks software technique suitable solving small problems successfully extended large scale ones 
applies aspects computer science 
example configuration suitable small network may prohibitively expensive due traffic bottlenecks size increases 
despite common criticisms regarding scalability burnett claim vpls successfully applied large problems 
empirical studies investigating scaling issues specific visual notations problems perceptual discrimination large numbers similar symbols 
hand may demand scalable vpls nardi predicted successful vpls ones aimed user programming 
real impact vpls may stem enabling people get relatively smaller jobs done 

software lifecycle new programming languages developed emphasis processes coding comprehension 
practice commercial software development projects spend far effort activities system specification documentation testing maintenance 
whitley blackwell commercial users labview concerned issues concern focuses practical questions seldom considered visual language research problem visual languages printed example source code control systems construct visual delta files showing changes different program versions 
investigation rest software lifecycle particularly rewarding area vpl research 
particularly challenging requires long term observational studies amenable investigation controlled experiments 
review empirical studies shows small scale controlled studies little conclusive evidence regarding benefits vpls 
large scale studies real development projects produce substantially results 

described origins characteristics class diagram described visual programming languages reviewed techniques study diagrams context psychology programming 
number researchers carried empirical studies techniques directly compare problem solving performance diagrams textual notations 
studies conclusive hoped wish overly critical intuitive position regarding value visual representations 
challenge researchers thinking diagrams explain intuition valid propose ways valid effectively exploited 
empirical studies completed date formed stepping stone broader frameworks notational analysis green cognitive dimensions 
new integrative approaches moving away simplistic comparisons text graphics order investigate ways tasks matched appropriate representations 
visual programming particularly fertile area studying application diagrams real world problem solving contexts 
proposed number research questions particular relevance time writing 
challenging valuable starting point diagrammatic reasoning research 

baroth hartsough 

visual programming real world 
burnett goldberg lewis 
eds visual object oriented programming concepts environments chapter pages 
manning publications blackwell 

metaphor analogy see programming abstractions 
de decker 
eds proceedings th annual workshop psychology programming interest group pp 

blackwell 

metacognitive theories visual programming think doing 
proceedings ieee symposium visual languages pp 

blackwell 

metaphor diagrams 
unpublished phd thesis 
university cambridge 
buckingham shum hammond 
argumentation design rationale cost 
international journal human computer studies 
burnett baker carlson yang van zee 

scaling visual programming languages 
ieee computer 
cox 

representation interpretation versus representation construction ile study 
proceedings th world conference artificial intelligence education society ai ed amsterdam ios press frontiers artificial intelligence applications series 
taylor 

graphical vs textual representation empirical study novices program comprehension 
empirical studies programmers second workshop pp 

curtis sheppard bailey bailey boehm davis 

experimental evaluation software documentation formats 
journal systems software 


picture worth words young children understanding pictures models 
cognitive development 

notes programming breaking utility barrier 
norman draper eds user centered system design new perspectives human computer interaction 
hillsdale nj lawrence erlbaum 
ferguson 

engineering mind eye 
cambridge ma mit press 
fitter green 

diagrams computer languages 
international journal man machine studies 
gilmore green 

comprehension recall miniature programs 
international journal man machine studies 
glinert 
ed 

visual programming environments applications issues 
ieee computer society press 
glinert 
ed 

visual programming environments paradigms systems 
ieee computer society press 


programming paradigms information types graphical representations empirical investigations factors involved novice program comprehension 
unpublished phd thesis 
university edinburgh department artificial intelligence 
green 

conditional programs statements comprehensibility professional programmers 
journal occupational psychology 
green 
cognitive dimensions notations 
sutcliffe macaulay eds people computers cambridge cambridge university press 
pp 

green 
describing information artefacts cognitive dimensions structure maps 
diaper hammond eds people computers vi 
cambridge cambridge university press 
pp 

green petre 

visual programs harder read textual programs 
proceedings sixth european conference cognitive ergonomics ecce pp 

green petre 
usability analysis visual programming environments cognitive dimensions framework 
journal visual languages computing 
green petre bellamy 
comprehensibility visual textual programs test match mismatch conjecture 
empirical studies programmers fourth workshop pp 



testing effectiveness algorithm animation 
proceedings ieee symposium visual languages vl pp 

halasz moran 
analogy considered harmful proc 
conf 
human factors computing systems acm 
visual languages computing survey data flow visual programming languages 
journal visual languages computing 
hoc green ay gilmore 

psychology programming 
london academic press 
kahn 
animated programming environment children 
journal visual languages computing 
mayer 

different problem solving competencies established learning computer programming meaningful models 
journal educational psychology 
green myers 
visual programming visual domain case study cognitive dimensions 
people computers ix 
cambridge university press 
cambridge 

moher mak blumenthal 
comparing comprehensibility textual graphical programs case petri nets 
empirical studies programmers fifth workshop pp 

myers 

taxonomies visual programming program visualization 
journal visual languages computing 
nardi 
small matter programming perspectives user computing 
cambridge ma mit press 
navarro prieto 

role imagery program comprehension visual programming languages 
doctoral thesis university granada 
isbn 
newell simon 

human problem solving 
englewood cliffs nj prentice hall 
pandey burnett 

easier write matrix manipulation programs visually textually 
empirical study 
proceedings ieee symposium visual languages vl pp 

papert 

children computers powerful ideas 
new york basic books 
petre 
shifts reasoning software hardware systems operational models underpin declarative ones 
third workshop psychology programming interest group january 
petre 

looking isn seeing readership skills graphical programming 
communications acm 
petre 
programming paradigms culture implications expert practice 
ed 
programming language choice practice experience 
london international thomson computer press 

petre blackwell 

glimpse expert programmer mental imagery 
wiedenbeck scholtz eds proceedings th workshop empirical studies programmers pp 

petre blackwell green 

cognitive questions software visualisation 
stasko domingue brown price eds 
software visualization programming multi media experience 
cambridge ma mit press 
pp 
petre green 

learning read graphics evidence seeing information display acquired skill 
journal visual languages computing 
petre winder 
issues governing suitability programming languages programming tasks 
people computers iv 
cambridge university press 


building program metaphors 
ireland ed proceedings psychology programming interest group postgraduate student workshop 
pp 

price baecker small 

principled taxonomy software visualization 
journal visual languages computing reitman 

heuristic design procedures open constraints structure ill defined problems 
bryan eds 
human judgements optimality 
new york wiley sons 
repenning sumner 

agentsheets medium creating domain oriented visual languages 
ieee computer 
scanlan 

structured flowcharts outperform pseudocode experimental comparison 
ieee software 
shneiderman 

software psychology human factors computer information systems 
cambridge ma 
shneiderman mayer mckay heller 
experimental investigations utility detailed flowchart programming 
communications acm 
smith cypher spohrer 

programming agents programming language 
communications acm 
stasko lewis 

algorithm animations assist learning 
empirical study analysis 
proceedings interchi conference human factors computing systems pages 
vessey weber 

structured tools conditional logic empirical investigation 
communications acm 
weinberg 

psychology computer programming 
new york van nostrand reinhold 
whitley 

visual programming languages empirical evidence 
journal visual languages computing 
whitley 

search visual programming 
kann ed proceedings empirical studies programmers graduate student workshop october 
whitley blackwell 

visual programming outlook academia industry 
wiedenbeck scholtz eds proceedings th workshop empirical studies programmers pp 

yang burnett zloof 
representation design benchmarks design time aid vpl navigable static representations 
tech 
oregon state university corvallis 

