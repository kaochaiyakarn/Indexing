program slicing hardware description languages clarke fujita rajan reps shankar teitelbaum march cmu cs school computer science carnegie mellon university pittsburgh pa carnegie mellon university pittsburgh pa fujitsu labs america sunnyvale ca fujitsu labs america sunnyvale ca university wisconsin madison wi ithaca ny carnegie mellon university pittsburgh pa cornell university ithaca ny ithaca ny research sponsored semiconductor research src contract dj national science foundation nsf 
ccr defense advanced research projects agency darpa contract 
dabt 
opinions findings recommendations expressed material authors necessarily reflect views src nsf darpa united states government 
keywords hardware description languages program slicing vhdl software engineering model checking formal verification hardware description languages hdls today describe circuits levels 
large hdl programs need source code reduction techniques address myriad problems design simulation testing formal verification 
program slicing static program analysis technique allows analyst automatically extract portions programs relevant aspects analyzed 
extend program slicing hdls allowing automatic program reduction user focus relevant code portions 
implemented vhdl slicing tool composed general inter procedural slicer front captures vhdl execution semantics 
report provides theory inter procedural program slicing discussion slice vhdl programs description resulting tool discussion applications experimental results 
hardware description languages hdls today describe circuits levels conceptual system architecture low level circuit implementations suitable synthesis 
hdl source code simulation common technique analyzing resulting descriptions debugging design implementation 
major lack current source methodologies need structured design analysis techniques applied simulation process 
need structured development methodologies important increased reusable libraries existing code difficult modify maintain unstructured libraries 
major needs source code simulation include support testing debugging maintenance simulations 
tools apply model checking formally verify correctness hdl designs system vhdl described 
recognized fundamental problem model checking state explosion consequently need reduce size hdl descriptions corresponding models fewer states 
designs possible build state transition relation need hdl program reduction techniques critical cases 
desiderata close parallels software engineering domain desirable understand manipulate large programs 
difficult partly presence large quantities irrelevant code 
program slicing defined weiser cope problems performing automatic decomposition programs data control flow analysis 
program slice consists parts program potentially affect affected slicing criterion set program points interest user 
identification program slices respect slicing criterion allows user reduce original program simpler functionally equivalent respect slicing criterion 
results program slicing software engineering world suggest techniques applied hdls solve problems mentioned 
traditional program slicing techniques designed sequential procedural programming languages techniques directly applicable hdls fundamentally different computation paradigm 
hdl program non halting reactive system composed set concurrent processes hdl constructs direct analogue traditional programming languages 
report approach slicing vhdl execution semantics 
approach mapping vhdl constructs traditional programming language constructs way ensures traces vhdl program valid traces corresponding sequential program 
corresponding approach implemented vhdl slicing tool consisting vhdl front coupled language independent toolset intended inter procedural slicing sequential languages applied tool formal verification problems achieved substantial state space reductions 
remainder report organized follows section presents requisite background material section presents techniques performing language independent interprocedural slicing 
section shows capture vhdl semantics slicing 
section describes architecture implementation vhdl slicing tool provides walkthrough simple vhdl example 
section lists applications slicing provides experimental results concretely illustrate benefits slicing reducing state space size model checking 
compare contrast approaches section 
section summarizes briefly discusses plans area 
background slicing operation identifies semantically meaningful decompositions programs decompositions consist elements necessarily textually contiguous :10.1.1.50.4405
see surveys slicing :10.1.1.20.9646
slicing subsequent manipulation slices applications software engineering tools including tools program understanding maintenance debugging testing differencing specialization reuse merging :10.1.1.47.3901:10.1.1.49.3377
kinds slices backward slice program respect slicing criterion set program elements affect directly transitively values variables members forward slice respect set program elements affected computations performed members related operation program chopping 
chop answers questions form program elements serve transmit effects source element target element 
set source program points set target program points chop consists program points affected assignments performed affect values variables important understand distinction different related slicing problems version closure slice slice program respect program point variable identifies statements predicates program affect value point version executable slice slice program respect program point variable produces reduced program computes sequence values point behavior reduced program respect variable indistinguishable original program 
intraprocedural slicing solution version provides solution version reduced program required version obtained restricting original program just statements predicates solution version interprocedural slicing slice cross boundaries procedure calls turns solution version necessarily provide solution version slice may contain different subsets procedure parameters different call instances procedure :10.1.1.50.4405
solution version extended provide solution version 
system closure slicing partial support executable slicing 
second major design issue type interprocedural slicing 
slicing chopping algorithms precise sense track dependences transmitted program paths reflect fact procedure call finishes control returns site corresponding call :10.1.1.50.4405
contrast algorithms imprecise safely pessimistically track dependences paths enter procedure call site return different call site 
precise algorithms preferable return smaller slices 
precise slicing chopping performed polynomial time :10.1.1.50.4405
vhdl slicing tool supports precise interprocedural slicing chopping 
inter procedural slicing value variable directly affected assignments reach predicates control times executed 
similarly value variable defined directly affected values variables predicates control times executed 
consequently slice obtained chains dependences directly affects relation 
observation due ottenstein ottenstein noted procedure dependence graphs pdgs originally devised parallelizing vectorizing compilers convenient data structure slicing 
pdgs procedures program combined form system dependence graph sdg inter procedural slicing algorithms 
pdg procedure directed graph vertices represent individual statements predicates procedure 
vertices included constructs ffl procedure entry vertex 
ffl formal parameter vertex representing initialization corresponding actual parameter 
ffl assignment statement vertex 
ffl control structure condition vertex 
ffl procedure call vertex 
ffl actual parameter procedure vertex representing assignment argument expression implicit generated variable 
ffl procedure return value vertex representing assignment return value generated name 
ffl formal parameter local variable vertex representing declaration 
procedure parameters may implicit 
procedure assigns uses global variable directly transitively procedure call treated hidden input parameter giving rise additional actual formal vertices 
similarly procedure assigns global variable directly transitively treated hidden output parameter giving rise additional actual formal vertices 
denote program code corresponding vertex pdg vertices connected types edges ffl flow dependence edge vertices exists program variable assign value value execution path program assignment function add return function main sum print sum print sum sample sdg ffl control dependence edge condition vertex second vertex truth condition controls executed 
ffl declaration edge declaration vertex program variable vertex ffl summary edge corresponding indirect dependence procedure call actual parameters output 
edges avoid recomputing summary relationships making inter procedural slicing efficient 
computed pdg construction 
pdgs procedure system dependence graph sdg constructed connecting pdgs appropriately additional types edges ffl call edge procedure call vertex corresponding procedure entry vertex 
ffl parameter edge actual parameter corresponding formal parameter 
ffl parameter edge procedure output value vertex vertex implicit generated variable caller side designated receive 
illustrates sdg small pseudocode program 
complete algorithm building sdg program involves steps 
build control flow graph cfg procedure program 

build call graph program 

perform global variable analysis turning global variables hidden parameters procedures modify 

construct pdgs doing control dependence flow dependence analysis 
vhdl construct traditional construct procedure function procedure process concurrent assignment architecture variable local variable signal port global variable sequential statement statement mapping vhdl constructs 
optionally compress pdg strongly connected region represented node 

bring pdgs call graph form sdg 

compute summary edges procedures describe dependences inputs outputs procedure 
slices chops computed chains dependences represented edges sdg 
vhdl slicing creating independent slicer built specifically vhdl approach map vhdl constructs constructs traditional procedural languages ada utilizing semantics provided vhdl lrm 
lists mapping vhdl traditional constructs 
mappings may obvious major differences vhdl traditional programming languages complicate generation sdg 
vhdl program executes series simulation cycles illustrated 
simulation fflffl assign signals fflffl run processes simulation process resumption signal transaction fflffl oo run processes update time update signals oo simplified vhdl simulation cycle vhdl computational paradigm differs fundamentally traditional languages ways 
vhdl program non halting reactive system collection halting procedures 

vhdl program concurrent composition processes explicit means processes called manner traditional procedures 

vhdl processes communicate multiple reader signals sensitive parameters defined single procedure entry point 
vhdl procedures functions modeled traditional way 
vhdl process models capture differences types modifications ffl constructed cfgs model non halting reactive nature vhdl processes 
ffl constructed pdgs capture additional dependence corresponding vhdl signal communication 
ffl implicitly generated master main procedure controls process invocation analogous event queue controls vhdl simulator execution 
mechanisms described 
cases discussion mentions processes understood concurrent statements treated analogously 
constructing cfg cfg construction traditional languages understood identical technique vhdl procedures functions 
vhdl processes require cfg modifications 
consider processes explicit sensitivity list single wait statement 
nature processes modeled simply passing control process back 
wait statement provides complication 
suggested wait statement control passes statement simulation exits case wait condition satisfied 
simple capture cfg creating corresponding child control flow arcs wait statement 
illustrates cfg simple process 
situation substantially complicated multiple wait statements process 
procedure works case resulting slice may substantially larger needed 
wait statement corresponds point region process may invoked forward slice affects wait statement needs include portion process wait statement wait statement similarly backward slices 
model partition process regions corresponding portion process successive wait statements see example 
note require node region precedes wait statement may multiple nodes regions may overlap presence wait statements kill exit process wait process sample cfg line numbers added clarity region region region wait wait wait process regions presence multiple wait statements branching control structures vhdl programs control structures practice 
procedure process region created cfg resulting procedures created usual 
capture context information process regions process objects local process variables treated global variables renaming avoid conflicts processes recall sdg build algorithms treat global variables hidden parameters 
process wait statements procedures created starting wait statements starting process 
pdg modifications traditional languages inter procedure communication occurs global variables parameters explicitly passed calling procedure called procedure 
contrast vhdl process communication occurs signals process process region invoked wait statement event signal sensitive 
communication captured notion signal dependence addition dependence types listed section process region said signal dependent statement potentially assigns value signal sensitive 
modeling signal dependence explicitly pdg generate implicit procedure calls cfg time signal potentially assigned 
example assignment signal followed implicit calls procedure vhdl process region concurrent assignment sensitive master process changes handle reactive nature vhdl processes may invoked events input ports 
simplicity discussion deals processes arguments applicable process regions 
consider vhdl program pi processes comprising program concurrent statements treated line processes purposes discussion 
partition pi disjoint sets pi pi pi set processes sensitive input port pi pi pi 
clearly possible determine priori process pi invoked simulation initial invocation 
simulation processes invoked infinitely sdg include dependences calls 
contrast non initial invocations process pi occur assignment signal sensitive invocations handled signal dependences discussed 
observations cfg master process comprising pseudocode steps constructed pi initial invocations process call true subsequent invocations pi processes pi call pdgs master process procedure vhdl program sdg constructed usual 
correctness motivation vhdl mapping discussed captured theorem define vhdl process invocation trace sequence ht pi set processes invoked simulation cycle trace 
theorem vhdl program pi process invocation trace ht pi signal dependence statement correctness theorem seen follow vhdl operational semantics 
theorem conclude vhdl slicing algorithm correct inter process dependences corresponding call edges sdg construction 
slicer mentioned earlier vhdl slicer constructed codesurfer toolset developed marketed toolset consists reusable multi lingual components building operating dependence graph call graph symbol table representations cfg extractor vhdl program cfgs database slicer core sdg builder sdg scheme scripts vhdl slicer architecture specifications programs 
dependence graph data type interfaces scheme 
toolset supports efficient implementations powerful operations program dependence graphs precise interprocedural slicing chopping 
illustrates architecture vhdl slicer 
cfg extractor sdg builder perform algorithm described section output sdg map pdg nodes source text 
slicing chopping algorithms embedded slicer core 
user interface program slicing tool source code maintaining appropriate maps underlying sdg slicing performed source code user specifies slicing criterion selecting program elements display source code slice displayed highlighting appropriate parts program 
slices may forward backward unions slices may computed gui 
toolset gui supports browsing projects project files navigation dependence graphs slices chops 
user may write scripts operating dependence graphs program scripts written stk implementation scheme enhanced tk graphical user interface widgets 
data types internal slicer lifted stk user interface built 
tool walkthrough give feel interface capabilities tool simple vhdl program consisting flip flop logic functions figures project view provides hierarchical summary information interactively viewable partially shown file view provides actual text comprising program 
shows file view executable statements forward slice program point 
expected slice includes flip flop input circuitry 
large files right scrollbar allow user quickly scroll screenshots reproduced dithered monochrome versions color tool output suffer loss clarity example project viewer view example file viewer view forward slice slice 
shows project view backward slice program point 
time slice excludes flip flop 
applications numerous applications slicing hardware simulation design testing formal verification describe applications section 
design questions slicer help answer design include ffl part circuit control path datapath 
ffl part circuit responsible particular circuit function circuit 
ffl part design relevant actual function design test debug circuitry 
ffl reusing existing ip design modified meet new chip requirements 
circuits perform multiple functions desirable identify circuit portions perform function interest designer attention focused appropriately 
backward slice slicing provides mechanism automatically perform isolation 
circuits nonfunctional design test debug circuitry dwarf functional circuitry slicing allows high level architectural designer ignore lower level circuit details 
slicing occurs reusing ip macros 
order effectively efficiently design system system chip desirable reuse existing designs possible unrealistically time consuming design entire lsi chip scratch 
increasingly popular methodology build chips existing design components registered ip macros 
slight modifications ip macros needed meet new chips requirements interface chip components additional functionality reused designs 
efficiency modifications key issue system lsi design 
modifiable ip macros terms vhdl verilog synthesizable rtl descriptions called soft macros users understand rtl code internals order modify ip macros 
levels modification ip macros reused slicing assist follows ffl changing polarities inputs outputs adding encoders decoders inputs outputs ip macros slicing appropriate inputs outputs criteria assists designers determining modifications efficiently 
ffl deleting functionality ip macro slicing directly applied extract reusable code portions 
example obtain channel atm channel atm slicing respect atm output ports 
similarly slice mpeg encoder decoder respect frame outputs obtain simpler encoder decoder similar motion jpeg encoder decoder 
ffl adding new functionality ip macro common way adding new functionality describe new vhdl verilog module connect existing macro multiplexors 
notoriously inefficient code shared modules similar 
slicing determine macro portions related new functionality minimizing added code 
difference original code new code small expect similar delay areas performance circuits 
predictability important hardware designs 
example consider high speed communication chips 
network data rates increase communication chip macros designed earlier slower data rates reused adding modifying functionality associated data cell processing portions communication chip 
slicing identify portions vhdl verilog code associated data cell processing functionality reuse portions 
appropriate process techniques applied logic synthesis vhdl slicing rtl code generation modify gate level circuits original ip macros efficiently 
modify hard macros macros layout information placement routing 
simulation questions slicer help answer simulation include ffl code portions potentially cause unexpected signal value simulation 
ffl portions circuit affected changing particular code segment 
ffl potentially harmful interactions modules result changing particular code segment 
debugging simulation designers routinely trace backward time program state point signal holds unexpected value 
slicing criteria set statements potentially assign value signal backward slice precisely subset program designer trace remainder program may safely ignored 
code module updated forward slice updated portion identifies portions circuit potentially affected update 
slice includes code hardware units designer may alerted unexpected potential interactions may result new bugs due update 
testing testing issues slicer provide assistance include ffl execution paths covered test vector 
ffl part circuit retested certain code segment changed regression testing 
ffl portion circuit controllable set input ports 
ffl portion circuit observable set output ports 
processes concurrent statements total states reachable states original sliced safe original sliced benefits slicing formal verification ffl portion circuit testable controllable observable set input output ports 
test plan generation complicated time consuming task 
part task involves identification execution paths covered test vector 
slicing provides assistance identifying paths 
reason slicing assists determining test vectors need rerun certain code segment changed 
major research area testing involves metrics quantify testable circuit subset inputs outputs available test 
forward slice input subset provides upper bound circuit controllability backward slice output subset provides upper bound circuit observability 
intersection slices alternatively program chop input output subset provides upper bound circuit testability 
cases slicing provides metric constructing test plans 
formal verification hdl slicing particularly useful model checking prove circuit correctness 
major problem model checking state space explosion 
temporal logic specification support specification set variables signals 
backward slice set statements assigning values variables results subset program consisting statements potentially affect correctness specification 
illustrates state space reduction achieved verification controller logic risc processor model checker described 
related application program slicing hdls aware discusses number issues applications related vhdl slicing 
motivational nature aware resulting automatable approaches 
best knowledge implemented tool automatically slice vhdl programs 
sdg structures form basis gate level test generation algorithms 
approach works vhdl source level avoiding heavy complexity synthesis 
applications slicing described section sense vhdl source level 
third area related occurs model checking domain state space size reduced cone influence reduction coi localization reduction 
coi expressed fixpoint computation constructs set state variables potentially affect value variable ctl specification set variables cone influence variable interest 
alternatively coi thought building dependence graph program graph reachability determine parts specification relevant variable interest 
actual dependence graph may vhdl source code pre encoding set equations represent transition function post encoding 
localization reduction performs related function 
intuitively works conservatively abstracting system components verifying localized version specification 
localized version verifiable abstractions iteratively relaxed adding components specification eventually provable 
added components specification coi 
differences reductions slicing worth noting apply reductions done post encoding operations ffl hdl verification difficulty lies model generation model checking possible build model 
post encoding method obviously help cases 
ffl model generation process translation vhdl program restricted vhdl subset difficult impossible trace back statements original program 
design simulation testing applications mentioned report consequently possible post encoding technique 
ffl variables model size function size input program bits needed represent program counters 
post encoding reductions reduce overhead general 
ffl slicing permits complex reductions programs specified possible coi 
example suppose specification form signal false 
verification primarily interested ensuring counterexamples original program slice 
select set statements potentially assign non false values slicing criterion perform backward slice respect statements produce desired reduced program 
general case structure specification analyzed determine appropriate combination forward backward slices result equivalent program 
cases slicing disadvantage compared versions reductions mentioned applied level granularity source bits 
report shown extend traditional slicing techniques vhdl approach capturing operational semantics vhdl traditional constructs 
implemented tool automatic slicing report listed applications tool experimental results showing state space reduction achievable model checking 
currently pursuing research lines 
enhancing supported vhdl subset 
theoretical limitations expect able slice elaborated vhdl soon 
second investigating techniques achieve precise slices capturing vhdl semantics accurately sdgs 
current sdgs conservative allowing dependences exist inter cycle analysis vhdl remove dependences 
third working developing slicing techniques general concurrent languages techniques described extend readily concurrent languages 
developing theoretical basis slicing respect ctl specifications formal verification 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems april 
shankar clarke 
model checking vhdl cv 
formal methods computer aided design fmcad page appear 
weiser 
program slicing 
ieee transactions software engineering 
weiser 
program slices formal psychological practical investigations automatic program abstraction method 
phd thesis university michigan 
ottenstein ottenstein 
program dependence graph software development environment 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments pages new york ny 
acm press 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems 
horwitz reps binkley :10.1.1.50.4405
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
horwitz reps sagiv 
speeding slicing 
proceedings third acm sigsoft symposium foundations software engineering pages new york ny december 
acm press 
tip 
survey program slicing techniques 
technical report cs centrum voor wiskunde en informatica 
binkley gallagher 
program slicing 
zelkowitz editor advances computers vol 

academic press san diego ca 
gallagher lyle 
program slicing software maintenance 
ieee transactions software engineering se august 
lyle weiser 
experiments slicing debugging tools 
proceedings conference empirical studies programming june 
binkley 
semantic differencing reduce cost regression testing 
proceedings conference software maintenance orlando fl november pages 
bates horwitz 
incremental program testing program dependence graphs 
acm symposium principles programming languages pages 
horwitz prins reps integrating non interfering versions programs 
acm transactions programming languages systems july 
horwitz 
identifying semantic textual differences versions program 
sigplan conference programming languages design implementation pages 
reps 
program specialization program slicing 
danvy thiemann editors proc 
dagstuhl seminar partial evaluation volume lecture notes computer science pages schloss dagstuhl germany february 
springer verlag 
ning 
automated support legacy code understanding 
communications acm may 
jackson rollins 
new model program dependences reverse engineering 
sigsoft proceedings second acm sigsoft symposium foundations software engineering new orleans la december acm sigsoft software engineering notes december 
reps 
precise interprocedural chopping 
sigsoft proceedings third acm sigsoft symposium foundations software engineering washington dc october acm sigsoft software engineering notes 
binkley 
precise executable interprocedural slices 
acm letters programming languages systems 
weiser 
program slicing 
ieee transactions software engineering se july 
ieee 
ieee standard vhdl language manual 
std 

codesurfer manual 
ithaca ny 

program slicing vhdl descriptions applications 
asian pacific conference hardware description languages pages 
robert kurshan 
computer aided verification coordinating processes 
princeton university press 
reps program analysis graph reachability 
proc 
ilps int 
logic programming symposium pages cambridge ma 

