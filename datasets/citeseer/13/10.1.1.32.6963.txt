data grid architecture distributed management analysis large scientific datasets ann chervenak ian foster carl kesselman charles salisbury steven tuecke information sciences institute university southern california mathematics computer science division argonne national laboratory department computer science university chicago increasing number scientific disciplines large data collections emerging important community resources 
introduce design principles data management architecture called data grid 
describe basic services believe fundamental design data grid storage systems metadata management 
explain services develop higher level services replica management replica selection 
conclude describing initial implementation data grid functionality 
increasing number scientific disciplines large data collections emerging important community resources 
domains diverse global climate change high energy physics computational genomics volume interesting data measured terabytes soon total petabytes 
communities researchers need access analyze data sophisticated computationally expensive techniques large geographically distributed computing storage resources communities rely store analyze data 
combination large dataset size geographic distribution users resources computationally intensive analysis results complex stringent performance demands satisfied existing data management infrastructure 
large scientific collaboration may generate queries involving access supercomputer class computations gigabytes terabytes data 
efficient reliable execution queries may require careful management terabyte caches gigabit data transfer wide area networks data transfers supercomputer computation accurate performance estimations guide selection dataset replicas advanced techniques collectively maximize scarce storage networking computing resources 
literature offers numerous point solutions address issues see 
integrating architecture exists allows identify requirements components common different systems apply different technologies coordinated fashion range scale application domains 
motivated considerations launched collaborative effort design produce integrating architecture 
call architecture data grid emphasize role specialization extension grid emerged integrating infrastructure distributed computation 
goal effort define requirements data grid satisfy components apis required implementation 
hope definition architecture accelerate progress data intensive computing enabling integration currently disjoint approaches encouraging deployment basic enabling technologies revealing technology gaps require research development 
addition plan construct implementation architecture enable large scale experimentation 
complements activities data intensive computing 
high speed disk caches tertiary storage cache management provides basic building blocks 
digital library community developing relevant metadata standards retrieval mechanisms focused high speed movement large data objects particular focus 
storage resource broker srb shows diverse storage systems integrated uniform metadata driven access mechanisms provides valuable building block architecture benefit basic services described 
high performance storage system hpss addresses enterprise level concerns assumes accesses occur dce cell addresses new issues associated wide area access multiple administrative domains 
review principles developing design data grid architecture 
describe basic services believe fundamental design data grid storage systems metadata management 
explain services develop various higher level services replica management replica selection 
conclude describing initial implementation data grid functionality 
data grid design principles drive design data grid architecture 
principles derive fact data grid applications frequently operate wide area multi institutional heterogeneous environments typically assume spatial temporal uniformity behavior policy 
mechanism neutrality 
data grid architecture designed independent possible low level mechanisms store data store metadata transfer data forth 
goal achieved defining data access third party data mover catalog access interfaces encapsulate peculiarities specific storage systems catalogs data transfer algorithms 
policy neutrality 
data grid architecture structured far possible design decisions significant performance implications exposed user encapsulated black box implementations 
data movement replica cataloging provided basic operations replication policies implemented higher level procedures defaults provided easily substituted application specific code 
compatibility grid infrastructure 
attempt overcome difficulties wide area operation exploiting underlying grid infrastructure globus provides basic services authentication resource management information 
structure data grid architecture specialized data grid tools compatible lowerlevel grid mechanisms 
approach simplifies implementation strategies integrate example storage computation 
uniformity information infrastructure 
underlying grid uniform convenient access information resource structure state emphasized means enabling runtime adaptation system conditions 
practice means data model interface storage system hpss metadata repository ldap resource management lsf diffserv nws replica selection replica management generic grid services data grid specific services core services high level components security instrumentation kerberos netlogger service service major components structure data grid architecture access data grid metadata replica catalogs underlying grid information infrastructure 
principles lead develop layered architecture lowest layers provide high performance access orthogonal set basic mechanisms enforce specific usage policies 
example define high speed data movement functions rich error interfaces low level mechanism encode functions respond storage system failure 
policies implemented higher layers architecture build mechanisms provided basic components 
approach motivated observation achieving high performance specific applications requires implementation exploit domain specific application specific knowledge 
data grids grid systems focus simple policy independent mechanisms encourage enable broad deployment limiting range applications implemented 
limiting application specific behaviors upper layers architecture promote reuse basic mechanisms delivering high performance specialized capabilities user application 
core data grid services turn attention basic services required data grid architecture 
focus particular services view fundamental data access metadata access 
data access service provides mechanisms accessing managing initiating third party transfers data stored storage systems 
metadata access service provides mechanisms accessing managing information data stored storage systems 
explicit distinction storage metadata worth discussing briefly 
circumstances example data stored database system advantages combining metadata storage abstraction 
believe keeping concepts separate architectural level enhances flexibility storage system implementation having minimal impact implementation behaviors combine metadata access storage access 
storage systems data access grid environment data may stored different locations different devices different characteristics 
discussed mechanism neutrality implies applications need aware specific low level mechanisms required access data particular location 
applications uniform view data uniform mechanisms accessing data 
requirements met storage system abstraction prototype api data access 
data abstraction storage systems introduce basic data grid component storage system provides functions creating destroying reading writing manipulating file instances 
file instance basic unit information storage system 
consists named uninterpreted sequence bytes 
term file instance intended imply data reside conventional file system 
file instance may reside file system database storage system 
example data grid implementation system storage resource broker srb access data stored database management system 
note definition storage system logical storage system implemented storage technology support required access functions 
implementations target unix file systems servers hierarchical storage systems hpss network caches distributed parallel storage system certainly envisioned 
fact storage system need map directly single low level storage device 
example distributed file system manages files distributed multiple storage devices sites serve storage system srb system serves requests mapping multiple storage systems different types 
storage system associate set properties including name attributes size access restrictions file instances contains 
name assigned file instance particular storage system arbitrary meaning storage system 
storage systems name hierarchical directory path 
systems srb may set application metadata storage system maps internally physical file instance 
data access behavior storage system seen data grid user defined api describes possible operations storage systems file instances 
understanding functionality required api evolving certainly include support remote requests read write named file instances determine file instance attributes size 
addition support optimized implementations replica management services discussed require third party transfer operation transfer entire contents file instance storage system 
basic storage system functions relatively simple various data grid considerations increase complexity implementation 
example storage system access functions integrated security environment site remote access required :10.1.1.25.9598
robust performance higher level functions requires reservation capabilities storage systems network interfaces :10.1.1.27.7478
applications able provide storage systems hints concerning access patterns network performance forth storage system optimize behavior 
similarly storage systems capable characterizing monitoring performance information available storage system clients allows optimize behavior 
data movement functions able detect report errors 
may possible recover errors storage system errors may need reported back remote application initiated movement 
metadata service second set basic machinery require concerned management information data grid including information file instances contents file instances various storage systems contained data grid 
refer information metadata 
metadata service provides means publishing accessing metadata 
various types metadata distinguished 
common practice associate scientific datasets metadata describes contents structure data 
metadata may describe information content represented file circumstances data obtained information useful applications process data 
refer application metadata 
metadata viewed defining logical structure semantics apply uninterpreted bytes file instance set file instances 
second type metadata manage replication data objects replica metadata includes information mapping file instances particular storage system locations 
system configuration metadata describes fabric data grid example network connectivity details storage systems capacity usage policy 
metadata service provides uniform means naming publishing accessing different types metadata 
type metadata characteristics terms frequency mechanism update logical relationship grid components data items 
interesting data management applications kinds metadata 
referred different types metadata propose single interface accessing types 
applications identify files interest posing queries metadata service includes metadata repository catalog 
query specifies characteristics desired data 
metadata repository associates characteristics logical files entities globally unique names may physical instances 
metadata service identified logical files desired attributes replica manager described section uses replica metadata locate physical file instance accessed 
difficulty specifying general structure metadata apparent considers variety approaches describe application metadata 
applications build metadata repository specified list file instances data stored self describing format hdf 
high energy physics applications successfully specialized indexing structure 
digital library community developing sets metadata different fields 
user communities pursuing extended markup language xml represent application metadata 
situation complicated considers additional requirements imposed large scale data grid environments 
providing means integrating different approaches metadata storage representation service operate efficiently distributed environment 
scalable supporting metadata entities contributed myriad information sources located large number organizations 
service robust face failure organizations able assert local control information 
analysis requirements leads conclude metadata service structured hierarchical distributed system 
approach allows achieve scalability avoid single point failure facilitate local control data 
distribution complicate efficient retrieval difficulty overcome having data organization exploit hierarchical nature metadata service 
analysis leads propose metadata service treated distributed directory service provided lightweight directory access protocol ldap 
systems support naming structure rich data models designed enable distribution 
mechanisms defined ldap include means naming objects data model named collections attributes protocol performing attribute searching writing data elements 
extensive experience distributed directory services represent general grid metadata believe suited metadata requirements data grids 
directory hierarchy associated ldap provides structure organizing replicating distributing catalog information 
directory service specify data stored stored 
queries may referred servers ldap protocol placed front wide range alternative information metadata services 
capability provide mechanism data grid support wide variety approaches providing application metadata retaining consistent approach accessing metadata 
basic services data grid architecture assumes existence number basic services including ffl authorization authentication infrastructure supports multi institutional operation 
public key grid security infrastructure gsi meets requirements :10.1.1.25.9598
ffl resource reservation allocation mechanisms storage systems resources networks support performance guarantees required predictable transfers :10.1.1.27.7478
ffl performance measurements estimation techniques key resources involved data grid operation including storage systems networks computers network weather service 
ffl instrumentation services enable instrumentation storage transfers operations netlogger pablo paradyn 
higher level data grid components potentially unlimited number components exist upper layer data grid architecture 
consequently limit discussion representative components replica management replica selection 
replica management role replica manager create delete copies file instances replicas specified storage systems 
note replica user asserted correspondence physical files 
typically replicas specified catalog byte byte copies required replica manager 
remainder section terms replica file instance interchangeably 
replica created new storage location offers better performance availability accesses particular location 
replica deleted storage space required purpose 
discussion assume replicated files read concerned issues file update coherency 
replicas primarily useful access published data sets 
read model sufficient uses scientific data sets intend investigate support modifying contents file instances 
replica manager maintains repository catalog 
entries catalog correspond logical files possibly collections logical files 
associated logical file collection replicas file instances 
replica catalog contains mapping information logical file collection physical instances object 
section shows example replica catalog data visualization application 
data grid may typically contain multiple replica catalogs 
example community researchers interested particular research topic maintain replica catalog collection data sets mutual interest 
possible create hierarchies replica catalogs impose directory structure related logical collections 
addition replica manager perform access control entire catalogs individual logical files 
note existence replica manager determine replicas created replicas application require file instance entered replica catalog 
keeping policy definition replica manager maximize types situations replica manager useful 
example file instance entered catalog may considered local cache available local 
designing policy coupling file movement catalog registration single atomic operation explicitly acknowledges may user defined reasons satisfying application needs files registered replica catalog 
replica selection data filtering high level service provided data grid replica selection 
replica selection process choosing replica provide application data access characteristics optimize desired performance criterion absolute performance speed cost security 
selected file instance may local accessed remotely 
alternatively selection process may initiate creation new replica performance superior existing ones 
replicas selected access time grid information services provide information network performance ability reserve network bandwidth metadata repository provide information size file 
selector rank existing replicas determine yield fastest data access time 
alternatively selector consult information sources determine storage system result better performance replica created 
general selection service may consider access subsets file instance 
scientific experiments produce large files containing data variables time steps events application processing may require subset data 
case selection function may provide application file instance contains needed subset data original file instance 
reduce amount data accessed moved 
type replica management implemented data management systems 
example stacs capable satisfying requests high energy physics applications extracting subset data file instance 
complex indexing scheme represents application metadata events contained file 
mechanisms ing similar function may built application metadata obtainable self describing file formats hdf 
providing capability requires ability invoke filtering extraction programs understand structure file produce required subset data 
subset file instance metadata physical characteristics provided replica manager 
replication policies determine subset recognized new logical file entry metadata repository file instance recorded replica catalog file known locally selection manager 
data selection subsetting may exploit grid enabled servers capabilities involve common operations reformatting data extracting subset converting data storage different type system transferring data directly storage system grid 
utility approach demonstrated part active data repository 
subsetting function exploit general capabilities computational grid provided globus 
offers ability support arbitrary extraction processing operations files part data management activity 
implementation experiences section describe initial design catalogs metadata replica management 
catalogs supercomputing conference support application demonstrations climate modeling data visualization 
section describe experiences lessons learned prototype implementation 
ldap implementation lightweight distributed access protocol ldap construct prototype catalogs 
information ldap catalog organized tree structure known directory information tree dit 
information directory catalog resides nodes placed hierarchical relationship 
climate modeling application scientists constructed ldap catalog included metadata physical location information files data collection 
data visualization application constructed separate metadata replica catalogs managing data 
catalogs described detail 
climate modeling application describe ldap catalog climate modeling application 
dit climate application consisted root node node collections node logical file collection 
application metadata encoded xml stored node collection 
query particular time step variable mapped specific logical file 
information logical file contained storage system path name data located plus template constructing instance file name 
information construct url data 
url passed file transfer interface moved data local cache processing 
prototype user list structurally identical catalogs corresponding single replica data set 
user selected catalog locate data 
prototype demonstrated ability map query application metadata url ldap catalog move data general purpose transfer api 
subsequent designs provide catalog location information multiple replicas 
tools developed assist selection data source user specified criteria best performance 
data visualization application second catalog built locate files distance visualization application desktop visualization client streamed data remote storage systems 
file corresponds timestep series 
example output astrophysical simulation developed university chicago flash center includes data sets 
data sets includes timestep files 
addition timestep file represented different resolutions different data layouts big endian little endian 
result files flash dataset 
replica catalog initial experiments file represented objects ldap catalogs 
shows example objects replica catalog hierarchy distance visualization application 
experience prototype concluded implementation scales poorly datasets flash 
particular data sets include hundreds files multiple data layouts file formats current replica catalog implementation generates thousands objects 
large number objects slowed directory searches increased complexity requiring distributed catalog implementation 
changes design result experience 
improve ability locate sets files efficiently increased support specifying collections logical files 
associate location information collection making possible avoid describing file individually 
single lookup sufficient locate storage system path collection template map logical file name physical file name 
greatly reduces storage space required 
new design provide scalable solution terms performance catalog storage requirements 
separation functionality lesson learned prototype implementation importance distinguishing functions metadata replica management 
ideally functions metadata replica catalogs distinct possible 
information describes contents data files collections stored metadata catalog 
information includes objects attributes related structure data sets file formats 
mapping information describes particular logical files collections stored replicated storage systems maintained replica catalog 
status data grid implementation progress fronts effort identify basic low level services data grid architecture 
preliminary design data access api 
api provides standard interface storage systems including create delete open close read write operations file instances 
interface supports storage storage transfers 
prototype api design implemented interfaces storage systems including local file access ftp servers network disk caches 
described section implemented replica management metadata services 
services ldap directories store attribute information file instances lc lc flash lc flash lc lc lc lc cube lc cube lc cube lin lf lin 
file 
structure replica catalog 
storage systems logical files replica catalogs 
attributes query metadata replica catalogs grid information system find replicas associated logical file estimate performance select replicas particular performance metrics 
described experiences catalogs applications climate modeling data visualization 
represents steps effort create integrating architecture scale application domains 
performance studies data access api way plan explore basic services instrumentation 
acknowledgments gratefully acknowledge helpful discussions steve fitzgerald bill johnston reagan moore richard mount harvey newman arie shoshani brian tierney participants doe earth system grid particle physics data grid projects 
supported part mathematical information computational sciences division subprogram office computational technology research department energy contract eng 
chang gravano paepcke 
stanford digital library metadata architecture 
intl digital libraries 
baru reagan moore rajasekar michael wan 
sdsc storage resource broker 
proceedings cascon conference 

beck moore 
internet distributed storage infrastructure project architecture internet content channels 
computer networking isdn systems 
tim bray jean paoli sperberg mcqueen 
extensible markup language xml 
world wide web consortium february 
see www org tr rec xml 
chen keating louis rotem shoshani 
efficient organization access multi dimensional datasets tertiary storage systems 
information systems special issue scientific databases 
cousins garcia molina hassan ketchpel winograd 
interoperability digital libraries 
ieee computer 
renato ferreira michael chang alan sussman joel saltz 
object relational queries multidimensional databases active data repository 
international journal supercomputer applications 
fitzgerald foster kesselman von laszewski smith tuecke 
directory service configuring high performance distributed computations 
proc 
th ieee symp 
high performance distributed computing pages 
ieee computer society press 
foster kesselman 
globus metacomputing infrastructure toolkit 
international journal supercomputer applications 
foster kesselman editors 
grid blueprint computing infrastructure 
morgan kaufmann publishers 
foster kesselman lee lindell nahrstedt roy :10.1.1.27.7478
distributed resource management architecture supports advance reservations allocation 
proceedings international workshop quality service pages 
foster kesselman tsudik tuecke :10.1.1.25.9598
security architecture computational grids 
acm conference computers security pages 
acm press 
jeffrey hollingsworth bart miller 
instrumentation measurement 
pages 
william johnston 
realtime widely distributed instrumentation systems 
pages 
william johnston dennis gannon bill nitzberg 
grids production computing environments engineering aspects nasa information power grid 
proc 
th ieee symp 
high performance distributed computing 
ieee computer society press 
lesk 
practical digital libraries books bytes 
morgan kaufmann publishers 
reagan moore baru richard rajasekar michael wan 
computing 
pages 
daniel reed randy 
performance analysis visualization 
pages 
shoshani bernardo rotem sim 
storage management high energy physics applications 
computing high energy physics chep 

www lbl gov arie papers proc chep ps 
stevens woodward defanti catlett 
way national technology grid 
communications acm 
tierney johnston chen herzog hoo jin lee 
distributed parallel data storage systems scalable approach high speed image servers 
proc 
acm multimedia 
acm press 
tierney johnston crowley hoo brooks gunter 
netlogger methodology high performance distributed systems performance analysis 
proc 
th ieee symp 
high performance distributed computing 
ieee computer society press 
wahl howes 
lightweight directory access protocol 
rfc internet engineering task force 
richard watson robert coyne 
parallel architecture high performance storage system hpss 
ieee mss symposium 
wolski 
forecasting network performance support dynamic scheduling network weather service 
proc 
th ieee symp 
high performance distributed computing portland oregon 
ieee press 

