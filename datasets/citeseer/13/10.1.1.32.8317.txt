unified theory concurrency control recovery hans jorg schek gerhard weikum ye department computer science eth zurich ch zurich switzerland mail weikum inf ethz ch classical theory transaction management different independent criteria correct execution transactions 
criterion serializability ensures correct execution parallel transactions assumption failures occur 
second criterion strictness ensures correct recovery failures 
develop unified model allows reasoning correctness concurrency control recovery framework 
introduce correctness criteria prefix reducibility prefix expanded serializability investigate relationships classical criteria 
important advantage model captures schedules semantically rich adt actions addition classical read write schedules 
theory transaction management different independent criteria correct execution transactions bhg 
criterion serializability correct execution parallel transactions implicit assumption failures occur 
second criterion complements deals correct recovery case failure 
transaction management implemented way correctness criteria satisfied 
shown bhg exist schedules serializable correctly recovered failure 
schedules satisfy criterion correct recovery serializable 
dealing incomparable criteria prefer single correctness criterion appeared proceedings th acm sigact sigmod sigart symposium principles database systems pods washington dc may ensures correctness parallel executions presence failures 
develop unified model allows reasoning correctness concurrency control recovery framework 
introduce constructive correctness criterion called prefix expanded serializability allows efficient correctness testing serialization graph methods 
introduce correctness criterion called prefix reducibility show related traditional definitions 
shown class prefix reducible schedules restrictive class serializable strict schedules usually considered standard class acceptable schedules 
unified model proposed builds previous bsw wei introduced notion complete serializability 
basic idea notion represent recovery related actions explicitly schedule serializability arguments reason completed schedules 
current rename notions completed schedules complete serializability expanded schedules expanded serializability avoid confusion unrelated term complete history bhg 
far correctness recovery concerned previous stayed informal elaborate relationships notion complete serializability classical correctness criteria 
introduces novel notion prefix reducibility unified correctness criterion 
preliminary version 
notion proposed unified correctness criterion 
class rigorous schedules restrictive class serializable strict schedules 
lines complete serializability mgg wei vei rks 
models unnecessarily complex 
claim prefix expanded serializability prefix reducibility simpler criteria capture intuition easy deal formal model 
important goal model provide rigid correctness criteria non conventional recovery paradigms compensation high level actions gm mgg bsw vei wei gr 
model covers schedules semantically rich adt actions including compensating actions high level undo 
particular notions prefix reducibility prefix expanded serializability applicable extended model 
limitations classical criteria correct recovery realized number papers mgg wei vei concepts similar notion expanded schedules considered 
previous come model simplify correctness reasoning transaction management 
parallel independently extended notion strictness developed rks 
provides elegant way studying correctness compensation see aim unifying concepts concurrency control recovery 
organized follows 
section summarizes standard terminology traditional transaction model 
section unified model introduce correctness criteria prefix reducibility prefix expanded serializability 
section discusses relationships criteria classical criteria 
section conclude brief outlook extensions model 
traditional notions serializability correct recovery standard terminology database set data objects 
actions objects reads writes 
read access write access object transaction denoted respectively 
commit abort transaction abbreviated respectively 
transaction termination action commit abort action actions transaction 
partial order specifies execution order actions transaction 
actions op op conflict operate object write 
non conflicting say non conflicting actions commutative 
schedule called history bhg pair union actions submitted transactions partial order specifies execution order actions 
transaction order preserved schedule 
conflicting actions schedule ordered 
sake simplicity examples total execution order 
committed projection schedule obtained deleting actions belong committed transactions complete schedule schedule transactions terminated committed aborted 
correct concurrency control take basic definitions conflict serializability bhg 
definition serializability sr schedule serializable sr committed projection equivalent serial schedule equivalence means pairs conflicting actions appear order schedules 
known fundamental theorem serializability theory theorem schedule sr iff serialization graph sg acyclic 
note important distinguish schedule committed projection 
committed projection takes committed transactions consideration 
aborted transactions disregarded 
additional correctness rules recovery introduced 
correct recovery review definitions strictness st recoverability rc bhg 
recall notion point relationships properties 
definition recoverable rc schedule called recoverable rc transaction commits commitment transactions read 
definition strict st schedule strict st 
intuitively object may read overwritten transactions previously wrote terminate abort commit 
definition rigorous rg schedule rigorous rg guarantees strictness addition object overwritten transactions previously read terminate abort commit 
shown bhg rg ae st ae rc 
class sr hand incomparable classes rg ae sr unified model section model aims unify concepts serializability correct recovery 
rationale model ideas 
assume model allows reason properties actions serial histories actions arbitrary adt actions reads writes 
particular model allow state prove action op undoes effects action op op executed immediately op 

recovery related actions explicit represented history events represents execution order regular actions 

serializability arguments reason correctness action histories including recovery actions especially interference recovery related regular actions 
key ideas elaborated subsequent subsections 
restrict modeling transaction aborts concurrent transaction executions 
crash recovery disregarded long term goal extend model crash recovery included 
assume recovery logging deferred update 
transaction aborts implemented undoing effect update actions transaction transaction commits require recovery actions 
note virtually commercial systems employ log recovery methods gr deferred update methods adopted practice performance reasons 
properties actions section introduce fundamental properties actions sequential histories 
notably define effect freedom single actions action pairs return values actions return values define commutativity general actions conflict serializability general schedules 
properties serve basic inference steps reasoning concurrent histories 
set actions prove relevant properties standard form reasoning sequential programs weakest preconditions dij 
purpose details reasoning irrelevant 
treat basic properties actions axioms main thread model 
subsection simply define kinds axiomatic properties concurrent correctness model expects 
note methodology way restrict generality model key generality viewing sequential properties module imported model 
assume set op possible actions data items database 
action op op denote return value op rv op 
details return value types important 
requirement need equality predicate return values 
read write model return value consists value data item possibly additional return code information structure embedded sql 
return value return code information telling user write executed successfully 
assume allowed actions op 
return values means data items database inspected 
notion undo actions user view database 
action op effectively undone undo action op user longer tell action occurred user means inspecting database invoke actions op 
formalize intuition introducing notion effect free sequence actions return values 
note similarity models hw hh bbg 
definition effect free actions oe sequence actions oe 
op op op sequence oe effect free possible action sequences ff return values ff concatenated action sequence ff oe 
action sequence ff 
special case effect free sequence actions sequence oe 
op op action op undoes action op 
op denoted op gamma 
definition undo action op undo action op action sequence op op effect free 
note definition implies undo actions state independent 
input parameters op may depend return value input parameters op 
consider example actions select increment decrement update abbreviated respectively 
delta increments value data item amount delta 
delta decreases value data item amount delta 
obviously undo action delta delta undo action delta delta 
stores new value data item selects value data item undo action update action denoted gamma restores old value overwritten original 
action need undo effect free 
note effect free actions 
example action check test value data item greater limit read write model undo action write action denoted gamma write object 
value restored gamma old value overwritten original action 
read action effect free 
return values actions redefine notion conflicting actions kor ss wei hh 
definition commutative actions actions commutative action sequences ff return values concatenated action sequence ff 
identical return values sequence ff 
conflict 
note conflict definition commutativity 
principle possible state dependent return value dependent commutativity hw wei unified model details extensions scope 
table shows conflict definition example denotes commutativity denotes conflict 
definition reconsider definition serializability schedules semantically rich actions 
fairly obvious definition read write schedules section definition valid import richer notion conflicts 
completeness definition serializability restated 
definition serializability sr schedule serializable sr committed projection equivalent serial schedule equivalence means pairs conflicting actions appear order schedules 
example consider transactions schedule follows input parameters actions omitted order simplify presentation schedule serializable conflict equivalent preceding pairs conflicting actions 
note action pair conflict commute 
expanded schedules section elaborate principle making recovery related actions explicit 
idea replace transaction aborts sequence undo actions 
undo action undoes transaction original forward actions order undo actions reverse order original actions 
effect free actions aborted transactions read actions viewed null actions sense rendered meaningless abort 
particular transaction may aborted system longer guarantee serializable view transaction 
case transaction may viewed seemingly inconsistent data view declared invalid retrospect abort 
aborted transaction expanded manner consider transaction committed leaves effect database 
informal expansion rules motivate definition 
definition expanded schedule possibly incomplete schedule 
expansion denoted expanded schedule quadruple undo null 
set actions derived way transactions committed action set 
transactions aborted obtained adding undo action regular action replacing abort action commit action 
transactions terminated obtained adding undo action regular action adding commit action 
union action sets transactions 
partial order original actions order identical 
additional undo actions transaction follow transaction original actions precede transaction commit action 
ordering additional undo actions reverse order corresponding original actions 

undo contains pairs op op theta op undo action op 

null set effect free actions transactions aborted terminated example gamma undo gamma null fs definition covers incomplete schedules schedules contain active transactions termination action 
example schedule contains transactions 
committed 
aborted active transaction 
cases require general explanation 
incomplete schedules occur prefixes complete schedules 
dynamic scheduler needs decisions knowing prefix complete schedule important consider incomplete schedules 
prefix known serializable incomplete transactions committed want preserve correctness possible combinations commits aborts incomplete transactions 
commit incomplete transaction add actions current prefix case affect correctness prefix continuation 
sufficient consider case aborting incomplete transactions 
transaction aborts require additional actions continuation prefix unacceptable prefix correct 
reasons assume definition incomplete transactions schedule schedule prefix implicitly aborted 
important note definition allows undo actions aborted transaction interleaved forward actions undo actions transactions 
possible strict schedules classical read write model 
model general classical notions recovery respect ordering constraints undo actions 
example interleaving undo actions different transactions consider schedule 
example schedule contains conflict cycle transactions committed situation perfectly acceptable far 
add abort actions transactions serial order achieve correct recovery 
situation resolved allow undo actions aborts interleaved 
example schedule correct expansion gamma gamma gamma gamma correctness criteria section elaborate idea unified correctness criterion expanded schedules 
intuitively correctness expanded schedule requires 
original actions aborted transactions undone failure atomicity 
subschedule formed committed transactions serializable isolation 
undo actions aborted transactions incorrectly interfere committed transactions isolation recovery 
condition self guaranteed expansion schedule adds proper undo actions 
second third condition boil requiring serializability expanded schedule committed aborted transactions aborted transactions include undo actions 
consideration motivates correctness criterion 
definition expanded serializability xsr possibly incomplete schedule 
expanded serializable xsr expanded schedule serializable 
example xsr 
expanded serializability simple criterion aims unify correctness criteria concurrency control recovery 
unfortunately schedules expanded serializability unnecessarily restrictive 
consider example 
example expanded schedule gamma expanded schedule serializable 
perfectly valid view schedule correct concurrency control recovery perspective expanded schedule leaves effect database 
may assume conflict cycle expanded schedule example irrelevant transactions aborted anyway 
case assumption justified 
valid disregard conflict cycles aborted transactions 
consider schedule 
example expanded schedule gamma case conflict cycle relevant 
problem undo actions transactions interfere incorrectly 
undo action gamma restore value time original executed 
incidentally back effect action 
subsequent undo action erroneously decrement value essential difference schedule example schedule example example undo actions transaction adjacent respect original actions case example 
adjacency original forward action corresponding undo action example means original action effectively undone original undo action removed schedule consider serializability remainder schedule 
adjacency original action undo action weakest condition guarantee correct behavior 
sufficient conflicting action original action corresponding undo action 
considerations lead correctness criterion 
definition reducibility red schedule reducible red expanded schedule undo null transformed serial schedule transactions committed applying transformation rules finitely times 

commutativity rule conflict action ordering replaced 
undo rule undo action removed schedule 

null action rule null removed schedule 
note rule guarantees xsr 
rules reflect goal eliminating effect free action sequences belong aborted transactions 
null action rule means valid disregard actions aborted transactions need undo 
intuition rule values seen actions rendered meaningless abort transaction see section 
example reconsider schedule example reduced serial schedule empty effect free transactions applying null action rule read actions aborted transactions applying undo rule twice 
develop real schedulers necessary decisions knowledge prefix schedule bhg pap 
requirement taken account final correctness criterion 
consider example 
example schedule serializable expanded serializable reducible 
scheduler processed prefix careful allowing transaction commit continuation prefix correct going commit 
hand going abort schedule longer expanded serializable reducible 
expansion prefix gamma easily seen expanded prefix serializable reducible 
consideration leads definitions dynamic counterparts expanded serializability reducibility 
definition prefix xsr pxsr schedule prefix expanded serializable pxsr prefix expanded serializable 
definition prefix reducibility pred schedule prefix reducible pred prefix reducible 
relationships classical criteria section elaborate relationships traditional correctness criteria concurrency control recovery newly introduced correctness criteria section 
pointed aim express correct recovery terms serializability applied expanded schedule includes undo actions 
denote sr st class schedules serializable strict sr rc class schedules serializable recoverable 
subsection compares criteria xsr pxsr classical criteria aiming practically feasible schedulers 
subsection compares criteria red pred classical criteria 
classes red pred general xsr currently offer practically feasible approach exploit class prefix reducible schedules 
constructive aspects red pred subject research 
serialization graph testing part investigate extent able check serializability correct recovery simply testing serialization graph sg expanded schedule acyclic 
approach lead simple constructive way testing correctness 
practical techniques ensuring acyclicity serialization graph applicable 
carefully distinguish schedule may contain committed aborted active transactions committed projection contains committed transactions expanded schedule expands undo actions aborted active transactions 
note serialization graph solely depends notion conflicting actions defined kinds schedules 
fairly obvious result lemma 
sg sg sg 
pxsr ae xsr ae sr proof schedule sub schedule sub schedule dropping actions schedule lose conflict pairs 
proves inclusion relationship serialization graphs 
consequently xsr ae sr holds 
see inclusion proper consider schedule sr xsr 
pxsr xsr definitions obvious pxsr xsr 
schedule xsr pxsr 
schedule shows inclusion pxsr ae xsr proper 
known rigorous schedule strict serializable 
serialization graph sg sg acyclic lemma shows 
lemma rigorous schedule acyclic serialization graph sg 
proof assume sg cycle rg conflicting actions transactions separated termination action cycle leads impossible 
shows sg rigorous schedule acyclic 
combines correct recovery correct concurrency criterion strong restriction unnecessarily disallows correct schedules 
interested weaker criterion ensures correctness recovery concurrency 
note passing strictness acyclicity prefix closed properties 
strict schedule prefix strict sg acyclic prefix sg acyclic 
relationship classical notion strictness new pxsr criterion theorem schedule strict serialization graph sg acyclic pxsr 
proof arbitrary prefix know strict sg acyclic 
show xsr 
assume contain aborted active transactions 
expansion identical sg sg acyclic xsr 
interesting case contains aborted transactions active transactions 
assume xsr sg cycle 
includes actions 
sg acyclic cycle sg introduced new edge due undo action gamma aborted active transaction pair conflicting actions cases gamma gamma lead new edge conflicts case left gamma case impossible contradicts premise strict requires termination action cases shown xsr 
arbitrary prefix shown pxsr 
corollary lemma theorem corollary rg ae pxsr 
inclusion rg ae pxsr proper shown schedule pxsr rg 
view results interested class sr st rg contained pxsr xsr 
replaced combined criterion sr st pxsr xsr reached objective 
unfortunately case 
schedules show xsr incomparable contained 
consider examples 
example sr st xsr 
clearly sr strict uncommitted objects read overwritten 
gamma sr note sg cycle accordance lemma 
questionable consider schedule 
notice executed clear schedule rendered correct aborting example xsr sr st schedule shows sr st capture correct schedules gamma gamma sr equivalent serial execution followed strict 
note case sg acyclic note pxsr 
far sr st xsr incomparable 
show pxsr proper subset sr st converse theorem holds 
theorem schedule pxsr 
sg acyclic 
st proof pxsr requires sg acyclic sg cycle proves claim 
order prove claim assume strict 
conflict pair exists termination action 
consider prefix action 
active transaction undone expansion 
find gamma leading rg xsr pxsr sr st relationships pxsr xsr sr st rg cycle contradicts pxsr proves strict 
theorems give characterization pxsr 
property schedule pxsr equivalent properties sr st sg acyclic 
schedule xsr acyclic serialization graph characterize pxsr intersection xsr sr st corollary pxsr sr st xsr 
results far summarized 
reducibility schedules contrast criteria red pred criteria xsr pxsr cast directly practically feasible concurrent control mechanism 
hand xsr pxsr unnecessarily restrictive allow intuitively correct schedules 
criteria quite match intuition correctness disregard possible elimination effect free actions pairs undone undo actions belong aborted transactions 
intuition captured general criteria reducibility red prefix reducibility pred 
classical criteria strictness sr st combined serializability recoverability combined serializability developed reflect intuition correct recovery obvious step investigate relationship criteria red pred classical criteria sr rc 
start lemmas show explicitly relationship red pred hand xsr pxsr hand 
develop main theorems relate pred sr st sr rc 
theorems provide evidence addition arguments section pred appropriate correctness criterion matched intuition correct concurrency control recovery 
lemma pred ae red 
proof obvious reducibility prefixes schedule implies reducibility schedule 
show pred proper subset red consider schedule reducible prefix excludes reducible 
lemma 
xsr ae red 
pxsr ae pred 
proof prove claim assume xsr 
know sg acyclic 
serial schedule exists transformed 
shows reducible 
show xsr proper subset red consider schedule schedule reducible xsr 
prove claim assume pxsr 
prefix xsr reducible claim 
pred 
schedule pred pxsr shows pxsr proper subset pred 
xsr pred incomparable 
example schedule proof lemma xsr pred schedule proof lemma pred xsr 
merely reducibility dynamic consideration prefixes orthogonal issues 
red xsr capture correct schedules static point view pred pxsr aim practically feasible dynamic schedulers 
lemma shows restricting schedulers accept schedules pxsr xsr rule schedules intuitively correct 
develop theorems give evidence claim pred captures intuitively correct schedules 
theorem shows pred proper superset sr st pred covers classical standard criterion correctness pred allows schedules classical criterion 
theorem schedule serializable strict prefix reducible 
proof consider prefix schedule sr st follows definition sr st sr st consider expansion transformed serial schedule 
serializable problem come undo actions pair undo related actions gamma adjacent transformation reason action gamma conflicting gamma 
cases scenario 
ffl case gamma committed read actions omitted es 
case impossible strict 
ffl case gamma impossible strict 
ffl case gamma gamma case es contain corresponding forward action preceding gamma 
strictness hold see case 
hold symmetric argument 
conflicting actions ordered case impossible 
converse theorem hold 
reducible serial schedule necessarily serializable strict shown example 
example schedule shows sr st proper subclass pred 
expanded schedule gamma gamma reducible strict 
having shown pred contains schedules accepted classical criterion sr st need show pred contains intuitively correct schedules 
matching formalization intuition proven formally provide evidence claim 
theorem shows pred proper subset class sr rc serializable recoverable schedules 
established intuition sr rc contains intuitively acceptable schedules theorem shows pred sound criterion relationship classical criteria 
point pred excludes schedules sr rc executed correctly recovery method 
note considerations led wide acceptance restrictive criterion strictness classical theory see section bhg 
example schedule sr rc intuitively incorrect example 
theorem schedule prefix reducible serializable recoverable 
proof assume serializable 
conflict cycle form tn transactions committed 
follows reducible 
assume recoverable 
occur cases 
ffl case prefix excludes reducible serial schedule expansion prefix contains ordering gamma 
ffl case expansion reducible serial schedule contains ordering gamma 
ffl case expansion reducible serial schedule contains ordering gamma 
converse theorem hold 
serializable recoverable necessarily reducible shown example 
example sr rc 
expanded schedule gamma gamma reducible 
note example usually considered unacceptable intuitive point view practically justified assumption recovery logging 
observe red sr rc incomparable shown example 
example schedule reducible recoverable reducible serial schedule preceding recoverable uncommitted read 
hand schedule example recoverable serializable reducible 
sr rc pxsr xsr red rg sr st pred relationships various classes results comparing novel correctness criteria classical criteria summarized 
main insight results 
newly proposed correctness criterion corresponds subset class serializable recoverable schedules 
addition intuitive arguments section indication pred reasonable correctness criterion 
fact discussed section believe pred weakest criterion accepts schedules intuitively correct concurrency control recovery perspective 
particular shown criterion pred restrictive class serializable strict schedules 
developed model concurrent transaction executions including transaction aborts aims unify correctness considerations concurrency control recovery 
particular proposed notion prefix reducibility criterion captures intuitively correct executions 
shown relatively simple criterion restrictive classical criterion requiring serializability strictness 
started investigate second restrictive criterion called prefix expanded serializability aims practical schedulers graph cycle testing 
may worthwhile note strict pl standard protocol ensuring correct concurrency control correct recovery simply pl protocol applied expanded schedules 
strict pl scheduler careful anticipate point time possible invocation undo actions uncommitted transactions 
lock action needs include lock undo action bsw 
prefix reducibility prefix expanded serializability applicable schedules classical read write model schedules semantically rich adt actions 
model allows reasoning correctness compensation recovery fairly simple manner 
obvious step research explore class prefix reducible schedules trying identify maximum subclass recognized dynamic scheduler acceptable efficiency 
goal current consider correctness crash recovery procedures 
working extending model cover multilevel transactions open nested transactions bsw hh bbg wei 
allow high level action spawn subactions represent action implementation lower level abstraction 
extension necessary reflect fact high level actions necessarily atomic indivisible concurrency failures 
deal forests transaction trees flat schedules nodes forest correspond semantically rich actions different semantic levels adt implementation hierarchy 
introduce notion compensating actions model extend definition expanded schedules forests 
concept prefix reducibility needs additional rule allows prune isolated subtrees 
rule fairly understood previous open nested transactions bbg wei 
long term goal combine powerful model open nested transactions unified model 
ideas shaped discussions number colleagues 
notably discussions beeri contributed significantly develop proposed unified model 
vossen helpful comments earlier version 
bbg beeri bernstein goodman 
model nested transactions systems 
journal acm 
breitbart georgakopoulos rusinkiewicz silberschatz 
rigorous transaction scheduling 
ieee transactions software engineering 
bhg bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
bsw beeri 
schek weikum 
multi level transaction management theoretical art practical need 
international conference extending database technology edbt springer 
lncs 
dij dijkstra 
discipline programming 
prentice hall 
gm garcia molina 
semantic knowledge transaction processing distributed database 
acm transactions database systems 
gr gray reuter 
transaction processing concepts 
morgan kaufmann 
hadzilacos 
theory reliability database systems 
journal acm 
hh hadzilacos hadzilacos 
transaction synchronization object bases 
proc 
acm principles database systems 
hw herlihy weihl 
hybrid concurrency control data types 
proc 
acm principles database systems 
kor korth 
locking primitives database system 
journal acm 
rusinkiewicz sheth thomas 
bounding effects compensation relaxed multi level serializability 
technical memorandum tm tsv bellcore june 
levy korth silberschatz 
theory relaxed atomicity 
proc 
acm principles distributed computing 
lynch merritt weihl fekete 
atomic transactions 
morgan kaufmann 
appear 
mgg moss graham 
abstraction recovery management 
acm sigmod conference 
mohan lindsay pirahesh schwarz 
aries transaction recovery method supporting locking partial rollbacks write ahead logging 
acm transactions database systems 
muth weikum hasse 
semantic control object oriented database systems 
proc 
ieee data engineering 
neil 
escrow transactional method 
acm transactions database systems 
pap papadimitriou 
theory database concurrency control 
computer science press 
rks rastogi korth silberschatz 
strict histories object database sytems 
proc 
acm principles database systems 
ss schwarz spector 
synchronizing shared types 
acm transactions computer systems 

schek weikum ye 
unified theory concurrency control recovery 
technical report department computer science eth zurich december 
vei 
transaction concepts autonomous database environments 
phd thesis gmd bericht nr 
oldenbourg verlag 
wei weihl 
commutativity concurrency control data types 
ieee transactions computers 
wei weihl 
impact recovery concurrency control 
proc 
acm principles database systems 
wei weikum 
principles realization strategies multilevel transaction management 
acm transactions database systems 

