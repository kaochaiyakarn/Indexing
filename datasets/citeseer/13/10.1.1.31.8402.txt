functional differentiation computer programs jerzy info fr dept computer science university sciences iii bd 
mar chal france 
purely functional implementation computational differentiation tools known numeric symbolic techniques permit compute point wise derivatives functions defined computer programs economically exactly machine precision 
show lazy evaluation permits transparent elegant construction entire infinite tower derivatives higher order expressions program 
formalism may useful various problems scientific computing demand hard human preprocessing writing final code 
concrete examples 
keywords haskell differentiation arithmetic lazy semantics 
aim show usefulness lazy functional techniques domain scientific computing 
functional implementation computational differentiation techniques permit efficient computation point wise numeric derivatives functions defined computer programs 
previous version international conference functional programming 
fast accurate differentiation essential problems applied mathematics 
derivatives needed kind approximations gradient methods equation solving sorts asymptotic expansions needed optimization sensitivity stability analysis dynamical systems 
permit computation geometric properties curves surfaces modelling image synthesis animation 
domain differential equations directly analytic tool evaluating numerical stability discrete algorithm 
construction equations motion variational methods involve differentiation 
discrete mathematics differentiation useful compute combinatorial factors appropriate partition functions knuth graham patashnik textbook concrete mathematics chapter 
kluwer academic publishers 
printed netherlands 
tex 
interested computation derivatives implementing general differentiation operator acting expressions numerical program 
show laziness define data structures represent numerical expressions derivatives wrt 
independent variable 
differentiation package implemented purely functional language haskell enriched generic mathematical operations 
tested interpreter hugs relies overloading arithmetic operations aid type classes 
basic tools data structures objects defined open non terminating recursive equations overflow memory implemented naively strict language 
approach requires lazy evaluation strategy states function evaluates argument needs 
despite reasonably long history lazy functional techniques rarely numerical computations 
remain relatively unknown scientific computing community 
efficiency reasons delayed evaluations introduce overhead considered harmful computation speed crucial 
implementation meant replacement highly tuned efficient low level numerical programs 
computational differentiation packages cited optimized performance 
show lazy techniques provide useful coding tools clear readable semantically powerful plenty human time 
problems rarely addressed standard computational differentiation texts construction functions defined differential recurrences easy code lazy approach 
main goal 
assume reader acquainted lazy evaluation paradigm follow haskell code 
elementary notions differential calculus algebraic structures needed understanding implementation 

overview mechanical differentiation techniques essentially ways compute derivatives expressions wrt 
specific variables aid computers 
approximation finite differences df 
method may inaccurate big introduce serious cancellation errors small numerically unstable 
functions sampled times order permit tex construction decent polynomial interpolant 
complexity algorithm may substantial coding tedious 
symbolic computations 
essentially manual formal method computer algebra package substituted combined tool pencil 
derivatives gradients jacobians hessians exact technique costly 
intermediate expression swell cumbersome overflowing memory 
generated numerical program usually unreadable needs optimizing compiler order eliminate common subexpressions tend proliferate symbolic computations intensely 
obvious differentiate expressions result iterative process computations non trivial control structures technique usually entirely automatic 
computational differentiation cd known automatic algorithmic differentiation subject article 
computational differentiation established research engineering domain see 
george corliss established comprehensive bibliography 
cd algorithms numerical yield results exact numerical evaluation symbolic derivatives 
relatively little written functional programming context developments appear carried fortran 
natural choice wants exploit arithmetic operator overloading see description 
languages overloading source code preprocessing usually unavoidable 

computational differentiation cd idea relies standard computer arithmetic symbolic manipulations data structures representing algebraic formulae 
complicated expressions coded standard programming language composed simple arithmetic operations elementary built functions known differential properties 
course program just numerical expression 
local variables iterations explicit branching specific control structures difficult differentiate symbolically automatically sufficiently complicated code 
symbolic package unfold loops follow branches fact general interpret program symbolically 
tex possible compute needed derivatives parallel main expressions augmented program account primitive arithmetic operators derivatives known compositions obey chain rule 
control structures main computation necessarily way 
shall restrict presentation univariate case discuss direct forward mode cd 
alternative reverse mode important multi variate case 
functional implementation reverse mode treated 
multivariate case geometric framework differentiation tensors exterior forms discussed 

overview rest organized follows implementation simplified framework computing just derivatives require laziness 
simple usages variant efficient full package 
discuss features haskell class system differences framework numerical classes belonging haskell standard libraries 
short elementary differential algebra pass implementation lazy version 
implementation followed collection non trivial examples applications package 
occupy substantial part show compute derivatives program principally solving complex programming tasks 

overloading differentiation approach section introduce extended numerical structure combination numerical value expression value derivative expression point 
may declare type dx double double simplicity presentation restrict base type 
principle number domain rich needs 
domain ring field need division 
elementary objects injected calculations explicit constants example independent derivation variable represented 
doing symbolic calculations variable need particular name 
see constants objects tex derivatives vanish variable henceforth referred italic typesetting derivative equal 
value called main value 
mathematical point view constructed specific extension basic domain 
objects algebraically independent constants 
augmented arithmetic defined ensures property shows subset constants closed arithmetic operations 

overloaded arithmetic order construct procedures type dx declare numerical operator instances negate negate negate reciprocal recip negate recip define auxiliary functions help construct constants variable 
dvar conv 
numeric real constants rational functions called appropriate argument say dvar compute main value derivative 
user need change definition function 
properties haskell essential type inference automatic polymorphic 
compiler able deduce accepts argument type admits multiplication addition function normal floating numbers 
numerical constants automatically lifted source compiled polymorphic expression type depends context 
implement chain rule function demands knowledge derivative form example sin cos 
elementary functions may easily lifted domain 
examples tex exp exp exp sin sin cos cos cos negate sin sqrt sqrt sqrt log log recip recip means program res ch dvar ch exp computes automatically hyperbolic sine hyperbolic cosine concrete value 
value 
call ch calculates main value derivative equal zero 
cos dvar computes value sin cos 
function discontinuous non differentiable formalism return unsatisfactory answer 
example derivative zero equal appropriately overloaded operator uses main value 

usage haskell class system presentation arithmetic operations pairs numbers simplified 
concrete implementation haskell overloading follow discipline type system generic operations declared classes datatypes accept operations instances classes 
standard haskell library prelude specifies arithmetic classes num objects added multiplied fractional division declared floating exponential square root elementary functions package classes 
natural introduce modified algebraic style library corresponds classical mathematical hierarchy suitable definition arithmetic operations intricate mathematical objects 
modified prelude contains type classes defines addition subtraction monoid multiplication group division involved operations generic classes ring structures added multiplied field adds division ring abstracts multiplication complex object element underlying basic domain multiplication vector polynomial numeric constant 
conversion standard numbers fromint constants tex differential domain declared new orthogonal algebraic hierarchy 
classes haskell permit specify generic operations composite data structures independently type elements structures 
constr compound type parameterized type elements constr may instance constructor class 
canonical example class functor 
class declares generic mapping functional fmap applies function elements constructs structurally equivalent compound 
particular transforms list 
xk 
list applications 
xk 
current version constructor class multiplication compound elementary object uses fmap 
closely related constructor class vspace introduces generic division operation compound element basic domain 
versions package classes probably converted multi parametric type classes dependencies see hugs manual 

differential algebra lazy towers derivatives language attributes really needed example 
possibility overload arithmetic operators 
construction data structures may implemented serious language example course done packages 
extract derivatives expressions code mixed type arithmetics involving normal expressions pairs 
approach homogeneous extensions needed get second derivative little inconvenient 
propose skip intermediate stages define lazily data structure represents expression belonging infinitely extended domain 
contains principal numeric value values derivatives truncation explicitly code 
construct complete arithmetic structures show lift elementary functions compositions 
remaining section structured follows propose easy formal differential algebras define lazy data structures construct appropriate overloaded arithmetic operations defining particular instance differential algebra 
show operations discuss evident properties system 
tex 
differential algebra 
theory domain called differential algebra developed mainly see book 
term denotes branch mathematics devoted algebraic analysis differential equations name mathematical structure 
moment forget concrete computer representation numbers necessarily truncated operations may inexact meaning arithmetic operations correctness division square root extended domain inherited basic domain 
field equipped standard arithmetic operations 
set operations add derivation internal mapping linear obeys leibniz rule ab ab continuity properties 
straightforward prove field rational numbers derivation trivial result zero 
linearity leibniz rule prove immediately ring integers follows purely algebraically computer scientist means numbers constants 
basic field extended order generate non trivial derivatives 
calculating derivatives simple polynomial extension field known described books algebra bourbaki 
know compute derivatives rational extension 
extensions considered adjoining algebraic indeterminate may represented symbolically program 
usually way interactive computer algebra packages proceed 
obvious know mathematical structure manipulated expressions symbols needed polynomial may represented just list coefficients rational expression pair polynomials construction commutative algebra data structures school exercise 
practical computer program may apply algebraic transcendental functions data construction appropriate extension involved 
symbolic extensions possible costly powerful usually needed numerical program polynomial data structure permits compute value represented polynomial value variable behaves symbolic functional nonlocal object 
derivation structural operation data objects representing expressions 
approach minimalistic local possible 
just want compute numeric values expressions input values derivatives 
know priori derivatives tex needed require differential algebra closed sense derivation internal operation domain expressions 
new element introduced domain provide fact possibility infinite number algebraically independent objects priori reason algebraically dependent true cases 
propose expression numerical value program explicitly derivative necessity higher derivatives 
discusses model basic domain extended infinite number indeterminates 
item renamed basic domain accompanied derivation operator just mapping en en 
model conceptually similar sense add explicitly infinite number independent entities indeterminates 
structurally program operates infinite lazy lists elements priori independent 

data basic manipulations data type shall belongs infinite recursive domain dif parameterized basic instance needed arithmetic classes normally field 
usually double rationals complex numbers possible 
data dif dif data variant represents constants 
redundant represented purely recursive structure terminating clause adding explicit constants efficient 
field value numerical expression second tower derivatives 
numeric conversion functions definition constants variable 
construct means embedding belongs class numbers belongs class 
instance number number dif dvar compiler lift automatically numeric constants treated asd 
derivation operator declared class diff type differentiable objects df derivation operator tex instance diff double numbers constants df instance number diff dif lifting proc 
df df just selector equality instance class eq data semi defined 
inequality principle discovered finite number comparisons operator may loop forever infinite lists 
define main values 
unavoidable equality symbolic expressions ill defined computer algebra cope sin 
equality floating point numbers somewhat dubious may lead non portability programs issues discussed 

arithmetic definitions construct overloaded arithmetic operations dif objects 
presentation simplified 
subtraction clone addition lifting operators constant subfield routine 
dif data type list structure natural functor generalized fmap functional defined trivially 
multiplication rule follows operation df derivation 
algorithm reciprocal shows power lazy semantics corresponding truncated strict algorithm longer 
instance functor dif composite types fmap fmap fmap instance module dif fmap instance vspace dif fmap instance dif symmetrically neg fmap neg instance monoid monoid dif symmetrically 
leibniz rule tex instance eq monoid group group dif recip recip recip ip ip recip neg ip ip recip de 
de rule may user wishes 
generalized expressions belong differential field 
add divide multiply calculate derivatives costs programmer calculated lazily anyway consume processor time force evaluation deferred thunks 
define elementary algebraic transcendental functions acting expressions 
general lifting functional 
propose optimizations standard transcendental functions exp sin 
declared new 
simplicity defined square root 
omit trivial clauses exp 
fq univariate function lifting fq instance number monoid group group dif dif exp exp log log sqrt sqrt sin cos generic lifting instruction sin cycle sin cos neg sin neg cos cos cycle cos neg sin neg cos sin lifts univariate function domain provided list formal derivatives example exp exp 
exponential sin cos sin cos sin 
sine 
definitions exponent logarithm optimized function 
self generating lazy sequences coded extremely compact way 
definitions tex classical approach longer 
shown lazy formulation simplifies coding infinite power series arithmetic compared commonly vector style see example knuth 
see similar shortening algorithms 
definition hyperbolic cosine works gives infinite sequence ch followed derivatives point 
function applicable small log called say dvar produces logarithm euler function digamma needed program 
exaggerate errors higher derivatives increase original continuous fraction expansion taken handbook mathematical functions approximation formula specifically designed express derivatives 
get error differentiated symbolically expression constructed numerical program thereof 
value digits precision 

formal remarks include proofs correctness overloaded arithmetic formal observations may useful 
mentioned constructed formal differential algebra explicit adjoining infinite sequence independent indeterminates basic domain 
case th derivative expression list pn pn elements list numerical values obvious independent adds independent value front list 
shown definitions recursively sane 
definitions exponential efficiency self referring data structures see exp exp exp generalized unfold 
proofs 
defines inverse multiplication log exp trivial 

practical observations recapitulate basic properties computational framework 
tex definition function autonomous external blackbox entities computation derivatives fully automatic extra programming effort 
suffices call function appropriately overloaded arguments 
derivatives computed exactly machine precision 
propagation instabilities standard error propagation normalization truncation multiplication roundoff errors grow little faster main computation usually arithmetic operations needed derivative main expression polynomial 
main numerical outcome program approximation result iterative process error derivative depends behaviour iterated expression neighbourhood solution 
generalization vector tensor objects depending scalar variables straightforward fact new needed provided standard commutative algebra implemented 
efficiency method 
manual analytic highly tuned differentiation may faster human may recognize possibility global simplification automatic symbolic differentiation techniques far symbolic differentiation graph structures simplification shared sub expression handling operations increase computational complexity considerably 
obviously symbolic formula may differentiated evaluated numerically arguments cd techniques may competitive treating independently main formula derivative may inhibit optimization shared sub expressions 
words control structures needed 
computation derivatives follow normal control thread 
decisions numerical relations lifted define arithmetic relations equality imperfect 
package standard operators check main values ignore derivatives 
handle user write procedures 
deferred numerical operations generate closures thunks functional objects evaluation produces eventually demand numerical answer 
space leaks induced deferred closures dangerous 
reader think compute derivatives complex expression lazy towers program finds tex specific shortcuts preventing proliferation thunks closure keeps global values definition lazy towers grow order derivative 
know symbolic algebraic manipulations suffer intermediate expression swell may render impossible calculate high order derivatives complicated expressions 
framework just lists numbers similar difficulty exists 
order increase package performance prevent memory overflow efficient truncated strict variant method sketched section provided know derivatives needed 
code generated packages written faster 
function discontinuous defined segment wise cd algorithm discover automatically blindly computes possible values control thread program 
strategy may may user wishes circumstances technique fully automatic 
constructed small experimental extension package replacing normal numbers non standard arithmetics includes infinity undefined permits usage objects heaviside step function direction leads symbolic calculus tried avoid 
general user treat limit cases carefully 

laziness indispensable 
possible implement derivation strict language permits overloading truncation code complicated error prone resulting program faster 
standard cd packages course strict semantics 
combined strategy possible 
reimplemented cd scheme rice university mzscheme lazy streams constructed explicit thunks 
speed resulting program comparable fully lazy solution tested hugs 
execution time space efficiency gained scheme thunks really needed occupy memory hugs strictness analyser ideal 
coding tedious code longer 
thorough comparison performances difficult scheme dynamically typed language 
algorithms example definition exponential exploit self referring variables requires concerned definitions contain unreadable combinations thunks recursive binding constructs letrec constructs implemented macros 
may portable 
despite standardisation macros revised report algorithmic lan tex guage scheme currently dialects scheme syntactic extensions 
fully lazy language especially type system easier 

applications application domain covered cited literature cd wide ranging nuclear reactor diagnostics meteorology oceanography biostatistics 
authors cd packages order get concrete results thoroughly analyzed behaviour algorithms non trivial optimisation techniques proposed 
examples section demonstrate lazy semantics bridges gap intricate equations natural formulations computational problems effective algorithms 
issues treated show code solution differential recurrences order construct function defined recurrences 
standard technique symbolic manipulation rarely numerical context 
show automatically differentiate functions defined implicitly 
issues rarely addressed cd literature mathematics involved elementary scientific computations asymptotic expansions exploit intensely 
function obeys differential equation formal solution series obtained iterated differentiation 
equation singular naive algorithm breaks automation process may difficult 
show deal equation transforming particular thereof 
develop asymptotic expansion known approximation quantum theory 
example shows interplay lazy differentiation lazy power series terms bootstrap highly recursive manner 
example construct stirling approximation factorial laplace steepest descent asymptotic expansion 
test package shows deal human preprocessing necessary order apply lazy techniques non trivial cases 
tex 
recurrently defined functions suppose teach quantum mechanics wish plot hermite function say order show wave function envelope oscillator corresponds classical distribution 
insist fact exp hn dx 
want see polynomial degree need just numerical values plotted 
suffices code herm cc cc hr dvar hr exp neg hr df sqrt frominteger hr normalization factors omitted launch say map herm 
plotting obtained sequence 
example bit contrived rodrigues formula recurrence works practice problems 
efficiency differential recurrences method 
generation numbers example takes sec mhz mb pc heap space allotted hugs haskell interpreter slower compiled code 
mapping explicit symbolically computed form faster stage costly 
maple equivalent procedure reusing lower order forms 
recurrence schemes suitable 

lambert function find taylor expansion zero lambert function defined implicitly equation symbolic data 
function branches computational physics combinatorics 
interesting differential equations closed solutions terms discuss existence properties function 
differentiation gives dz dw ew tex inverse dw dz gives line code sequence knowing 
wl exp neg wl wl producing numerical sequence 
agrees known theoretical values insert formula program calculates numerically example newton approximation obtain derivatives point 
second apparently cheaper form exponential 
naturally provided knew independently value 
lazy algorithms need intelligent reformulation order transform equations algorithms definitions effective 
example immediate solution passing exp loses information know value 
add hand get derivative zy 
zy forms implementable recursive faster differentiation fraction complex 
just introduce auxiliary function multiplies expression variable 
resulting main value vanishes result non trivial zeta zeta df yl yl yl neg yl yl zeta yl reconstruct derivatives zy line 

singular differential equation previous example shows code taylor expansion function satisfying sufficiently regular differential equation 
algorithmically specific lazy approach coding shorter approach arrays indices 
cases possible treat singular equations 
function defined obeys equality tex implicit needing compute singular singularity dangerous 
may apply trick 
putting simplicity equal zero replacing obtain 
fp fp neg zeta zeta df fp second derivative protected twice touched reduction auto referential 
similar trick generate power series solution bessel equation 

expansion exercise presents way generating handling functions defined intricate differential identities domain power series small perturbation parameter differentiation variable 
derive higher order terms approximation textbook useful quasi classical approximation wave function quantum mechanics 
start generalized wave equation 
small 
essential singularity zero prevents regular development 
standard formalism represented exp sn 
inserting generates chain coupled recurrent equalities satisfied sn 
lowest approximation needs explicit integration irrelevant discussion exp profited fact coefficients directly integrable 
propose expansion separates odd powers 
coefficients proportionality necessity combine linearly solutions differing sign omitted 
exp 
injecting formula equation gives differential identities tex 
cross referencing definitions intricate constitute effective lazy algorithm 
aim section show code 
integrated methods 
really needed derivatives function reduction lazy chain stopped finite number steps 
order get numerical value say need second derivative needs second third derivative point treated series higher derivatives appear higher order terms recursive formulae effective 
introduce lazy techniques power series manipulation 
topic extensively covered 
review basics 
series symbolic variable implicit represented lazy list 
linear operations term wise addition multiplication scalar easy zip map 
multiplication algorithm simple recurrence 
represent zu uv 
reciprocal result 
differentiation integration need multiplicative zips factorials integration constant 
elementary functions exp may technique exp dz known algorithm see knuth book standard presentation lazy 
terms ui need numbers 
may belong domain dif contrary differential field may extension series domain values structure doubles series 
variant 
doubly lazy structure need extension differentiation operator variable lazy list representing series 
domain suffices map df explicitly df uq df df uq actual implementation series lists similar specific data structures chaining infix constructor constant representing zero empty series efficiently infinite list zeros 
expression may converted taylor series taylor tlr frominteger tlr tlr tlr frominteger tex may test algorithm generate approximation function solution equation numerical values fix value variable dvar 
define sqrt df equations may coded df df shifted addition represents defined aq aq multiplies series scalar 
series elements belong data type dif need derivatives main values construct function returns main value dif sequence 
application map series suffices obtain produces final solution 
generation exponentiation integration give sufficiently small numerical precision 
result known 
aim prove result obtained lines user written code symbolic variables 
asymptotic expansions example saddle point techniques generate unwieldy formulae may implemented equal ease 

saddle point approximation want asymptotic evaluation dt knowing minimum inside integration interval see similar book mathematical methods physicists 
laplace method variants saddle point steepest descent extremely important natural technical sciences 
consists expanding position minimum 
evaluating integral considering expansion exp polynomial correction main gaussian contribution point maximum tex assumed 
series constant 
analytically get iv 
derivatives taken terms need dose patience 
attempt program expansion computer algebra package serious task resulting formula difficult read 
terms necessary example computations nuclear physics quantum chemistry proportional finite number particles involved 
possible compute expansion terms analytic manipulation 
problem expressions bivariate expansions mix dependencies obtain series series 
disentangle want dependence remain parametric appear expansion 
computing series domain extracting constant series coefficient phi ah taylor phi henceforth care exp normalization compute asymptotic series 
expanding exponential multiplying fmap exp neg get un un series 
suffices integrate gaussian easy im exp dt equal ax ax 

program computes gaussian integral series multiplied mm vq odd mm mm vq cf mm cf frominteger cf frominteger ig cq vq ig cq stl vq ig mm div ig cf frominteger stl series tail ig internal iterator cf computes series coefficients keep term additional number power subsequently resulting tex laurent series 
applying function series series having restored coefficient ds ds uq ds uq obtain sum form gn gn gnm resulting infinite matrix re summed diagonals including main diagonal order get coefficients easy prove sum finite factor grow faster re summation algorithm uses order shift right added term prove added emits partial result lazily recurs 
final part program gq rs gq rs rs rs gq rs strict sum 
step rs gq lazy iteration order test formula may take log obtain seconds known stirling approximation factorial 
exp dt terms asymptotic sequence 
exp log dz 

belongs longer suite papers try demonstrate applicability modern functional programming paradigms realm scientific computing 
domain usually dominated low level coding techniques computational efficiency considered primordial needs elaborate numerical methods sophisticated tools rare 
tex partly due lack sufficiently powerful abstraction mechanisms standard languages numerical computations fortran 
path analytical formula implementation numerical context long 
human time precious computer algebra packages exploited 
symbolic computations needed insight people see analytical form numerical formulae 
symbolic algebra applied despair just generate huge expressions consumed fortran compiler looked human 
years typical computations involving differentiation 
development computational differentiation tools changed 
know compute efficiently exactly numerical derivatives expressions passing symbolic stage 
highly tuned packages adapted fortran exist popularity steadily increases integrate smoothly existing numerical software 
aim propose replacement packages 
methodological side ambition little bigger 
specificity contribution may summarized follows derivation operation exists program footing standard arithmetic procedures 
applied arbitrary priori unknown number times 
possible easy code functions defined differential recurrences 
explicit truncation derivation orders synchronisation powers needed 
laziness user major part burden 
usage package extremely simple straightforward 
suffices load short library overloaded extended arithmetic methods declare places program corresponds differentiation variable 
polymorphism automatic type inference haskell rest 
haskell class system extended arithmetics remains valid basic domain floating point reals 
changes needed order compute complex derivatives 
user constructs specific arithmetic operations polynomials ratios polynomials lifting operations differential ring field automatic 
exercise lazy style programming needs experience conceptual involved may substantial 
efficiency current implementations functional languages far ideal 
examples tex intricate easier ways compute stirling formula generic modularly discussion fairly complete 
plenty evidence lazy functional languages permit better concentrate algebraic properties operations complicated mathematical domains nice area applied mathematics 

express gratitude referees editor efforts render readable considerable 
course am responsible remaining faults 

abramowitz milton stegun irene eds 
handbook mathematical functions dover publications 

bender carl steven advanced mathematical methods scientists engineers mcgraw hill 

claus ole flexible package automatic differentiation tech 
rep imm rep dept mathematical modelling technical university denmark lyngby 

martin bischof christian corliss george griewank andreas eds computational differentiation techniques applications tools second siam international workshop computational differentiation proceedings applied mathematics 

bourbaki nicolas algebra springer 

robert gonnet gaston hare jeffrey knuth donald lambert function advances computational mathematics pp 

see documentation maple share library 

corliss george automatic differentiation bibliography originally published siam proceedings automatic differentiation algorithms theory implementation application ed 
corliss griewank times updated 
available netlib archives www netlib org bib bib places ira uka de bibliography math auto diff html see 
ralf thomas recipes adjoint code construction tech 
rep max planck institut acm toms press 

graham ronald knuth donald patashnik oren concrete mathematics addison wesley reading ma 

griewank andreas david jean vogel olaf walther andrea package automatic differentiation algorithms written acm toms pp 
algorithm 

paul bischof christian donna mario efficient derivative codes automatic differentiation interface contraction application biostatistics siam sci 
comp 
pp 

tex 
jones mark hugs user manual available web site www haskell org hugs full distribution hugs 

irving differential algebra hermann paris 

jerzy functional differentiation computer programs proceedings iii acm sigplan international conference functional programming baltimore pp 


jerzy generating power lazy semantics theoretical computer science pp 


jerzy functional programming mathematical objects proceedings functional programming languages education lecture notes computer science vol 
springer pp 

jerzy functional coding differential forms talk st scottish workshop functional programming stirling september 

jerzy adjoint codes functional framework informal presentation haskell workshop colloquium pli montreal september available author www info fr pdf 
kelsey richard clinger william rees jonathan editors revised report algorithmic language scheme available scheme repository www cs indiana edu scheme repository 

knuth donald art computer programming vol 
algorithms addison wesley reading 

rice university plt software site www cs rice edu cs plt 

joseph differential algebra dover 
tex tex 
