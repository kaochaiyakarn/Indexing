www lsv ens cachan fr proc 
th int 
workshop 
logic program synthesis transformation venezia italy sept 
volume lecture notes computer science pages 
springer 
constraint logic programming applied model checking laurent fribourg lsv ecole normale sup erieure de cachan cnrs av 
pdt 
wilson cachan france laurent fribourg lsv ens cachan fr 
review discuss existing approaches clp constraint logic programming verifying properties various kinds state transition systems 
model checking fixed point engines model checking automatic technique verifying finite state concurrent systems 
specifications expressed certain temporal logic concurrent system modeled state transition system 
kinds temporal logic model checking pltl tional linear temporal logic ctl computation tree logic mu calculus 
reachability analysis variant model checking consisting characterizing reachable states system 
useful proving safety properties verifying bad happens system 
generally model checking problem finding set states state transition graph formula underlying temporal logic true 
mainly reduces computing fixed point greatest fixedpoint temporal logic operators involved formula 
model checking extended treating infinite state systems timed automata linear hybrid systems 
logic programming generally clp constraint logic programming teams researchers constructing engines compute fixed points related model checking benefit general techniques program transformation 
review discuss proposed approaches 
plan follows 
section explains fixed point engines developed mu calculus tabled logic programming 
section reports extension mu calculus handling constraints finite domains 
clp methods analysing automata enriched timing constraints reviewed section methods automata integer constraints section 
section gives experimental results obtained clp methods 
ends discussion section 
encoding mu calculus tabled logic programming section essentially borrowed 
modal mu calculus expressive temporal logic semantics usually described sets states labeled transition systems 
logic encoded equational form syntax grammar tt ff diam box set formula variables encoded prolog atoms set actions tt ff propositional constants standard logical connectives diam possibly action formula holds box necessarily action formula holds dual modal operators 
additionally logical variables defining equations form mu fixed point nu greatest fixed point 
example basic property absence deadlock expressed logic formula variable deadlock free defined nu box diam tt stands action 
formula states essentially reachable state box deadlock free transition possible diam tt 
labeled transition system finite state automaton specified terms set facts trans src act dest src act dest source location label target location respectively transition 
semantics modal mu calculus specified declaratively logic programming providing set rules operators logic 
example semantics diam mu encoded follows models locs models locs 
models locs models locs 
models locs diam trans locs models 
models locs mu models locs 
consider rule diam 
states location loc process satisfies formula form diam loc transition location loc loc satisfies greatest fixed point computations encoded negation dual fixed point 
encoding provides sound method model checking modal mu calculus formula alternation free 
extension implementing full modal mu calculus proposed 
computation fixed points standard strategy prolog generally fails due nontermination problems 
xsb tabled logic programming system developed suny stony brook implementation tabled resolution integrated prolog style sld resolution extended negation failure rule 
programs loop infinitely prolog terminate xsb xsb calls predicate arguments prolog may call predicate infinitely 
terminating programs xsb efficiently computes model fixed point program rules understood equations sets atoms 
xsb programmable fixed point engine construct efficient model checker called xmc lines code 
xmc benefits optimization techniques developed deductive database style applications literal reordering see clause resolution factoring source code representational changes process terms 
logic optimization techniques lead considerable space time reduction 
performance improved xsb compiling highlevel specifications low level automata certain kind continuationpassing style 
mu calculus automata finite domains presents system implementing extension propositional mu calculus finite domain constraints 
encodes arithmetic relations finite domains means decision diagrams extension finite domains bryant binary decision diagrams 
decision diagrams dd admit compact canonical coding 
order solve systems linear equations compute dd encodes solution system uses classical implicit enumeration propagation technique 
principle enumerate variables order indices build dd bottom way 
adopted propagation waltz filtering consists maintaining variable minimum maximum value 
time variable domain modified modification propagated fixed point reached 
mentions performances general purpose constraint language respect specialized model checkers 
results attributed extended decision diagrams binary ones 
reachability analysis timed automata timed automata finite state automata enriched set clocks real valued variables increase continuously rate time 
kinds transitions discrete delay transitions 
discrete transition instantaneous transitions case finite state automata automaton switch location 
transitions performed certain relationship holds current values clocks guard 
performed transitions update clocks 
discrete transitions interleaved delay transitions correspond evolution time certain location 
time increase continuously delay transitions long location invariant specific constraint clock values associated location violated 
review various clp methods performing reachability analysis timed automata 
tabled resolution subsection essentially borrowed 
timed automata represented tabled logic programming framework 
requires definition relations inv trans 
inv inv associates location names location invariants 

trans act rho rsl represents transition timed automaton 
act rho rsl source target locations label transition transition conditions set clocks reset respectively 
implementation reachability analysis done integration library polyhedra manipulations explained 
case ordinary finite state labeled transition system reachability simply computed predicate trans follows reach trans 
reach reach trans 
relation reach naturally generalized constraint representation compute forward reachability timed automata 
desired generalization reach attained steps 
state timed automaton represented pair hl ri location constraint representing set clock valuations 
secondly transition trans redefined help trans follows trans act discrete transition trans act rho rsl conjunction rho reset rsl inv inv conjunction inv 
trans epsilon time successor 
predicate reset rsl computes constraint projecting constraint surface generated setting clock variables rsl zero 
implemented library polyhedra manipulations 
predicate time succ computes time successor 
computed primitive polyhedra manipulations 
computed intersecting resultant region location invariant likewise backward reachability defined back reach predicate essentially reversing application trans relation 
meta programming clp similar solution developed 
contrast performs forward backward fixed point computation appealing tabled resolution special polyhedra manipulation library 
uses just clp built real arithmetic solver meta programming facilities assert consistent infer 
related gupta simulation timed automata performed top operational semantics clp 
revesz procedure solution consists revesz bottom evaluation procedure tabled resolution meta programming clp 
revesz shown bottom evaluation subsumption terminates special class logic programs gap order constraints 
gap order constraints inequalities form variables non negative integer 
originally domain variables assumed procedure slightly modify order involve real valued variables 
reachability problem easily encoded form logic program constraints 
example consider timed automaton clocks represented 
assume initially 
transition resp 
resets clocks resp 
true resp 
guard 
location resp 
resp 
invariant 
reachability relation automaton encoded form clp program 


denotes new clock variable reset resp 
variable standing gamma resp 
gamma 
simple variable manipulation allows transform program program constraints computation reachability space computed revesz procedure 
see details 
reachability analysis automata integers automata integers extended form finite state automata 
correspond finite state automata enriched set integer valued variables 
discrete transition performed certain constraint fig 

simple timed automaton values variables holds 
transition modifies values variables specified update relation 
gap order constraints 
case timed automata easy encode reachability relation logic program arithmetical constraints 
guard update relations belong class gap order constraints possible revesz procedure order compute set reachable states 
may revesz procedure approximate non gap order constraints typically constraints form approximated form computed fixed point necessarily 
may sufficient prove undesirable symbolic state reached 
presburger arithmetic fixed point calculations associated transitions automata integers executed symbolically presburger solver called omega library 
convergence guaranteed interpretation techniques widening 
presburger solver similarly order compute symbolically reachable space petri nets viewed special forms automata integers 
fixed point computation optimized integrating method path decomposition 
method regarded logic programming point view method redundant derivation elimination model checking point view method partial order technique combating combinatorial explosion results interleaving concurrent independent transitions possible orders 
real arithmetic alternative proposed compute fixed point reachability program meta programming facilities provided sicstus prolog clp library 
logic optimization techniques magic set transformations local subsumption 
manipulate formulas reals integers add extra abstraction general loss precision possible 
furthermore order improve termination procedure may useful appeal classical dynamic techniques approximations widening 
note podelski treat reachability problems general problems ctl logic exhibiting connection ctl properties safety liveness model theoretic denotational semantics logic programs constraints 
reachability analysis petri nets lines studied constraint solver reals built hytech presburger solver 
manipulation reals integers entails priori loss precision shown computation fixed points exact terminates 
experimental results review significant results obtained running clp systems mentioned 
finite state transition systems xmc 
xmc system said memory usage known set benchmarks compared spin speed appears uneven 
speed weakness xmc attributed absence partial order optimization 
results xmc model checkers detecting livelock error protocol sophisticated sliding window protocol consisting lines code 
xmc performs better model checkers example mur comparable results error fixed 
success xmc attributed local top nature model checking algorithm 
comparisons done optimizing compiler xmc confirms performance xmc spin protocol example 
example leader election protocol spin significantly outperforms xmc partial order reduction 

favourably compared specialized model checkers milner scheduler example 
difference performance favor attributed extended decision diagrams binary ones 
timed automata xmc rt 
tabled resolution xmc system enriched constraint solver reals called xmc rt consists lines prolog code 
preliminary experiments standard examples fisher mutual exclusion protocol bridge crossing system indicate performance xmc rt comparable hytech 
gap 
fully automatic proof fundamental property parametric realtime protocol abr conformance obtained time implementation called gap revesz bottom evaluation procedure 
automata integers presburger arithmetic 
omega library system experimented example programs bakery ticket algorithms safety liveness properties proved 
presburger system performing parametric analysis safety properties deadlock freeness analysis flexible manufacturing system achieved time fully mechanical way 
real arithmetic 
sicstus system experimented examples bakery ticket algorithms 
execution times order magnitude shorter obtained omega library presburger arithmetic 
experiments conducted real constraint solver hytech show considerable performance improvement respect obtained presburger solver 
deadlock detected time real life protocol 
discussion model checking originally designed verifying finite state transition systems 
extensions method introduced order treat infinite state systems 
applied verification finite state systems stake constraint logic programming languages priori clear 
goal system written high level language declarative flexible facilities keeping performance compared specialized model checkers written low level code 
goal partly achieved system xmc 
qualifications 
treated examples drawn simple sets benchmarks 
experiments real life systems remain done 
second order achieve comparable efficiency specialized optimizing compiling techniques introduced may compromise initial objectives flexibility 
third clp systems compete specialized model checkers examples due lack integration partial order techniques 
regards infinite state systems situation clp systems compared specialized model checkers clear mainly frontier classes systems blurred 
example hytech system considered specialized model checker clp 
hand hytech specialized model checker written designed treat class called linear hybrid systems 
hand considered clp system library convex real valued constraints manipulation 
main difference hytech system xmc rt may just lie language written 
context methods level may called constraint necessarily appeal symbolic manipulation data 
extent observation applies finite state systems model checkers 
example system called constraint system specialized model checker smv relies basically binary decision diagrams manipulating boolean 
main distinctive feature may level programming language systems implemented 
mention issue received considerable attention model checking community specialized data structures representing constraints 
binary decision diagrams bdd considered model checking community decisive breakthrough explaining success finite state verification tools 
explanation success bdd provide canonical form boolean formulas substantially compact conjunctive disjunctive normal form efficient algorithms developed manipulating 
research modelchecking infinite state systems exploits compact canonical forms representing real time constraints difference bounded matrices clock difference diagrams timed automata closed convex polyhedra linear hybrid systems 
data structures smoothly efficiently implemented framework high level languages clp 
question treated 
believe performances systems benefit considerably integration 
contribute blur border classical model checkers systems 
point researchers addressed slightly different interesting related issue relationship static analysis constraint solving model checking 

alur dill 
automata modeling real time systems 
proc 
th icalp lncs pp 


erard fribourg 
reachability analysis timed petri nets real arithmetic 
concur lncs springer verlag pp 


behrmann larsen pearson weise yi 
efficient timed reachability analysis clock difference diagrams 
cav lncs springer verlag pp 


bryant 
graph algorithms boolean function manipulation 
ieee transactions computers pp 


gerber pugh 
symbolic model checking infinite state systems presburger arithmetics 
cav lncs springer verlag pp 


podelski 
set analysis reactive infinite state systems 
tacas lncs springer verlag pp 


chen warren 
tabled evaluation delaying general logic programs 
acm pp 


clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
logic programs workshop lncs springer verlag pp 


clarke grumberg long 
verification tools finite state concurrent systems 
rex school symposium decade concurrency reflections perspectives lncs springer verlag 

cousot halbwachs 
automatic discovery linear restraints variables program 
popl acm press pp 


dawson ramakrishnan ramakrishnan swift 
optimizing clause resolution unification factoring 
intl 
logic programming symp mit press pp 


podelski 
model checking clp 
tacas lncs springer verlag pp 


dill 
timing assumptions verification finite state concurrent systems 
automatic verification methods finite state systems lncs springer verlag pp 


dong ramakrishnan 
optimizing compiler efficient model checking 
forte beijing 

dong du ramakrishna ramakrishnan ramakrishnan smolka stark warren 
fighting livelock comparative study verification tools 
tacas lncs springer verlag pp 


du ramakrishnan smolka 
tabled resolution constraints recipe model checking real time systems 
www cs sunysb edu 
emerson 
lei 
efficient model checking fragments propositional mu calculus 
lics pp 


fribourg 
closed form evaluation extended timed automata 
technical report lsv cnrs ecole normale sup erieure de cachan march 
www lsv ens cachan fr 
fribourg ols en 
proving safety properties infinite state systems compilation presburger arithmetic 
concur lncs springerverlag pp 


fribourg ols en 
decompositional approach computing fixed points datalog programs counters 
constraints international journal pp 


fribourg richardson 
symbolic verification gap order constraints 
proc 
th intl 
workshop logic program synthesis transformation lncs pp 


halbwachs 
raymond 
verification linear hybrid systems means convex approximations 
sas lncs springer verlag pp 


halbwachs 

verification real time systems linear relation analysis 
formal methods system design pp 


heintze jaffar michaylov stuckey yap 
clp programmer manual version 


helm 
detection elimination redundant derivations bottom execution 
north american conf 
logic programming cleveland ohio pp 

van hentenryck 
constraint satisfaction logic programming 
logic programming series 
mit press 

henzinger 
ho wong toi 
user guide hytech 
proc 
tacas lncs pp 



clp manual edition 
technical report tr austrian research institute artificial intelligence vienna 

holzmann peled 
state spin 
cav lncs springerverlag pp 


holzmann peled pratt editors 
partial order methods verification 
dimacs series discrete mathematics theoretical computer science american mathematical society 

jaffar 
lassez 
constraint logic programming 
popl acm press pp 


kozen 
results propositional calculus 
theoretical computer science pp 



lassez maher 
denotational semantics horn clauses production system 
aaai washington pp 


liu ramakrishnan smolka 
fully local efficient evaluation alternating fixed points 
tacas lncs springer verlag pp 


mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic 

milner 
communication concurrency 
prentice hall 

pnueli 
temporal semantics concurrent programs 
tcs pp 


gupta 
constraint approach specification verification real time systems 
rtss 
ieee computer society 

pugh 
practical integer algorithm exact array dependence analysis 
acm pp 


ramakrishna ramakrishnan ramakrishnan smolka swift warren 
efficient model checking tabled resolution 
cav lncs springer verlag pp 


ramakrishnan sagiv vardi 
proof tree transformation theorems application 
th acm symp 
principles database systems philadelphia pp 


ramakrishnan srivastava sudarshan 
efficient bottom evaluation logic programs 
computer systems software engineering state ofthe art chapter 
kluwer academic 


constraint language model checking 
constraint programming basics trends lncs springer verlag pp 


revesz 
closed form evaluation datalog queries integer gap order constraints theoretical computer science vol 
pp 


schmidt 
data flow analysis model checking interpretations 
popl acm press 

srivastava 
subsumption indexing constraint query languages linear arithmetic constraints 
annals mathematics artificial intelligence pp 


srivastava ramakrishnan 
pushing constraints selections 
th acm symp 
principles database systems san diego pp 


steffen 
data flow analysis model checking 
tacs lncs springerverlag 

tamaki sato 
oldt resolution tabulation 
intl 
conf 
logic programming 
mit press pp 


ullman 
principles data knowledge base systems vol computer science press rockville md 


analysis hybrid systems clp 
cp lncs springerverlag 


simulation verification constraint logic programming 
nd european workshop real time hybrid systems pp 

