query dags practical paradigm implementing belief network inference adnan darwiche gregory provan rockwell science center dos rios oaks ca risc rockwell com describe new paradigm implementing inference belief networks consists steps compiling belief network arithmetic expression called query dag dag answering queries simple evaluation algorithm 
non leaf node dag represents numeric operation number symbol evidence 
leaf node dag represents answer network query probability event interest 
appears dags generated standard algorithms exact inference belief networks show generated clustering algorithm 
time space complexity dag generation algorithm worse time complexity inference algorithm 
complexity dag evaluation algorithm linear size dag inference amounts standard evaluation arithmetic expression represents 
main value dags reducing software hardware resources required utilize belief networks line real world applications 
proposed framework facilitates development line inference different software hardware platforms due simplicity dag evaluation algorithm 
consider designing car self diagnostic system alert driver range problems 
shows simplistic belief network provide ranked set diagnoses car troubleshooting input sensors hooked battery fuel tank oil system 
standard approach building diagnostic fault fuel fuel battery battery sensor oil pressure oil pressure sensor sensor sensor simple belief network car diagnosis 
system put belief network inference code car computer 
encountered number difficulties approach embody belief network technology industrial applications 
asked provide technology multiple platforms 
applications technology implemented ada pass certain certification procedures 
implemented domain specific hardware supports primitive programming languages 
second memory limited keep cost unit certain threshold maintain product profitability 
dilemma belief network algorithms trivial implement especially optimization crucial porting algorithms multiple platforms languages prohibitively expensive time consuming demanding qualified manpower 
overcome difficulties devised flexible approach implementing belief network systems observation 
performed standard algorithms belief networks independent specific evidence gathered variables 
example run algorithm battery sensor set low run variable set dead find algorithmic difference runs 
algorithm branch differently key decisions causal network query variables query dag evidence dag evaluator dag compiler line line evidence variables proposed framework implementing belief network inference 
difference runs specific arguments invoked numeric operations 
apply standard inference algorithm network evidence parameter specific value 
result returned algorithm arithmetic expression parameters depend specific evidence 
parametrized expression call query dag example shown 
approach proposing consists steps 
belief network set variables evidence may collected evidence variables set variables need compute probability distributions query variables compiled line shown 
compilation typically done sophisticated software hardware platform traditional belief network inference algorithm conjunction compilation method 
part process far away costly computationally 
second line system composed generated dag evaluator specific platform evaluate dag 
evidence parameterized arithmetic expression evaluated straightforward manner simple arithmetic operations complicated belief network inference 
computational needed perform line evaluation lends easy implementations different software hardware platforms 
approach shares commonality methods symbolically manipulate probability expressions spi differs spi objective manipulations results obtained 
spi explicates notion expression state belief network inference viewed expression factoring operation 
allows results optimization theory utilized belief network inference 
explicate expression explicate formalize boundaries line line inference goal identifying minimal piece software required line 
results oriented purpose include formal definition dag evaluator method generating dags standard inference algorithm algorithm need subscribe inference factoring view dag generation computational guarantees size terms computational guarantees inference algorithm generate 
spi framework positioned formulate related results pursued direction 
important stress properties proposed approach 
declaring evidence variable compilation process mean evidence collected variable line important evidence values sensors may lost practice means evidence may collected 
declare evidence wishes 
second variable declared evidence query 
allows perform value information computations decide worth collecting evidence specific variable 
third space complexity dag terms number evidence variables worse time complexity underlying inference algorithm simple enumerate possible cases approach 
time space complexity generating dag worse time complexity standard belief network algorithm generation 
network solved standard inference algorithm construct network 
section explains concept dag concrete example provides formal definitions 
framework appears belief network inference algorithm compile dag long meets general conditions topic discussed section dedicated generation dags computational complexity 
section closes concluding remarks 
query dags consider belief network 
suppose typically evidence variable interested probability variable depicts dag answering queries 
dag leaf nodes corresponding pr pr respectively 
root node form called evidence specific node esn value depends evidence collected variable line 
value node variable instantiated unknown 
pr pr pr bayesian network query dag probabilistic causal network corresponding query dag 
evidence variable interested probability variable values determined evaluate remaining nodes dag numeric multiplication addition 
numbers get assigned leaf nodes result evaluation answers queries represented leaf nodes 
example suppose evidence esn evaluated esn evaluated 
dag evaluated leading pr pr conclude pr 
evidence evaluates evaluates 
evaluated leading pr pr notation denoting variables values 
variables denoted uppercase letters variable values denoted lowercase letters sets variables denoted boldface uppercase letters instantiations denoted boldface lowercase letters denote set variables evidence 
denote instantiation variables represents evidence 
formal definition dag 
definition dag tuple pi 
distinguished set symbols called evidence variables 
pi symbol called unknown value 
maps variable set symbols called variable values different pi 

directed acyclic graph non root node labeled root node labeled number pair evidence variable value :10.1.1.33.2444
distinguished set nodes called query nodes evidence variables correspond network variables expect collect evidence line 
example evidence variable 
variables set possible values captured function example evidence variable values special value pi value variable unknown 
example may sensor variable values low medium high lose sensor value sensor breaks 
case set sensor value pi 
query nodes representing answers user queries 
example query variable leads query nodes 
important notion evidence definition dag pi evidence defined function maps variable set values pig 
variable mapped evidence tells instantiated value mapped pi evidence tell value state formally evaluate dag evidence 
notation pr pr pr pr evaluating dag respect denotes root node labeled number denotes root node labeled omega omega denotes node labeled having parents phi phi denotes node labeled having parents definition tells evaluate evaluating nodes :10.1.1.33.2444
recursive definition value assigned node function values assigned parents 
cases boundary conditions assigning values root nodes 
cases recursive ones 
definition dag pi evidence node evaluator defined function maps node number :10.1.1.33.2444
value root node labeled number number 

ae pi value evidence specific node depends available evidence consistent evidence 

omega omega value node labeled product values parents nodes 

phi phi value node labeled sum values parents nodes 
consider evaluations dag shown 
evidence qnode qnode meaning pr pr 
analogous computations done evidence possible evidence tells value variable pi 
case qnode qnode concluding pr pr 
implementing dag evaluator evaluator implemented event driven forward propagation scheme 
value dag node changes updates value children possible updates values possible 
way implement evaluator backward propagation scheme starts query node updates value updating values parent nodes 
forward propagation scheme selective visit nodes need updating opposed visiting node value query node depends 
specifics application typically determine method combination appropriate 
important stress level refinement enjoyed dag propagation scheme implications query updates 
propagation dags done level contrasted propagation message operation level standard algorithms 
propagation schemes typically optimized maintaining validity flags messages invalid messages recomputed new evidence arrives 
clearly avoid unnecessary computations avoid unnecessary ones message typically coarse purpose 
example entry message invalid message considered invalid 
recomputing message lead unnecessary computations 
problem avoided dag propagation validity flags attributed arithmetic operations building blocks message operations 
necessary arithmetic operations recomputed dag propagation scheme leading detailed level optimization 
stress process evaluating updating dag done outside probability theory belief network inference 
development efficient line inference software accessible larger group people lack strong backgrounds areas 
availability evidence construction dag requires identification query evidence variables 
may give incorrect impression know front variables observed 
problematic applications may lose sensor reading changing status variable observed unobserved applications variables may expensive observe leading line decision observe value information computation 
situations dealt dag framework 
indicated earlier dags allow unknown value pi represent missing evidence handle missing sensor readings 
second variable declared query evidence 
means incorporate evidence variable available compute probability distribution variable case evidence available 
distribution compute variable value information decide observe variable 
long version show augment dag perform value computations :10.1.1.33.2444
generating query dags section shows dags generated traditional algorithms exact belief network inference 
particular show dags generated clustering join tree jensen ls algorithm 
outline properties satisfied belief network algorithms jack breese bruce ambrosio stressing point 
order adapt generating dags 
clustering algorithm provide sketch clustering algorithm section 
reader interested details referred 
clustering method assumes constructed cluster tree satisfies running intersection property join tree belief network 
tree secondary structure inference algorithm operates 
need notation state algorithm sn clusters cluster corresponds set variables original belief network 
psi potential function cluster mapping instantiations variables real numbers 
posterior probability distribution cluster mapping instantiations variables real numbers 
ij message sent cluster cluster mapping instantiations variables real numbers 
evidence instantiation evidence variables assume standard multiplication marginalization operations potentials 
goal compute pr value variable belief network 
notation state algorithm follows ffl potential functions initialized psi pr variable matrix assigned cluster pr matrix variable likelihood vector variable consistent evidence 
ffl posterior distributions computed psi ki clusters adjacent cluster ffl messages computed ij ns psi ki clusters adjacent cluster mapping instantiations family parents conditional probabilities 
ffl probability pr computed pr cluster belongs 
compute probability variable compute posterior distribution cluster belongs 
compute posterior distribution cluster collect messages neighboring clusters 
message cluster computed collecting messages clusters adjacent generating dags generate dags clustering method perform steps 
modify initialization potential functions cluster tree quantified dag nodes numeric probabilities 
second replace numeric addition multiplication algorithm analogous functions operate dags 
numeric multiplication replaced operation omega takes dag nodes arguments constructs returns new node label parents 
numeric addition replaced operation phi takes dag nodes arguments constructs returns new node label parents numeric operations node constructors 
returning number computation result return node 
state dag clustering algorithm realize evidence set evidence variables collect evidence 
dag algorithm compute answer query pr compute dag node evaluate pr instantiation variables obtained 
equations potentials mappings variable instantiations dag nodes numbers 
example matrix variable map instantiation family node 
likelihood vector variable map instantiations evidence specific node 
dag operations omega phi extended operate new potentials way extended clustering algorithm 
new set equations formal proof soundness proposed algorithm long version :10.1.1.33.2444
ffl potential functions initialized psi pr omega variable matrix assigned cluster pr dag matrix mapping instantiations family dag nodes representing conditional probabilities 
dag likelihood vector variable means node evaluates consistent evidence 
ffl posterior distributions computed psi ki clusters adjacent cluster ffl messages computed ij ns psi ki clusters adjacent cluster ffl dag node answering queries form pr computed qnode cluster belongs 
modifications clustering algorithm changing initialization potential functions replacing multiplication addition dag constructors multiplication addition nodes 
set evidence variables variable dag algorithm compute node qnode value result computation node evaluate pr instantiation variables consider example 
example show proposed dag algorithm generate dag belief network 
evidence variable example interested generating dag answering queries variable queries form pr 
shows cluster tree belief network tables contain potential functions needed probabilistic clustering algorithm 
shows cluster tree tables contain potential functions needed dag clustering algorithm 
note tables filled dag nodes numbers 
ac ab ac ab cluster tree quantified numbers dags 
apply dag algorithm 
message computed summing potential function psi possible values variable psi leads omega phi omega omega phi omega posterior distribution cluster computed psi omega leads omega omega omega omega omega omega omega omega dag node qnode answering queries form pr computed summing posterior variable qnode phi qnode phi substituting simplifying get qnode omega omega phi omega phi omega omega phi omega qnode omega omega phi omega phi omega omega phi omega dag depicted 
computational complexity computational complexity algorithm generating dags determined computational complexity clustering algorithm 
particular proposed algorithm apply phi operation precisely clustering algorithm applies addition operation 
apply omega operation precisely clustering algorithm applies multiplication operation 
assume phi omega take constant time algorithms time complexity 
application phi omega operations ends adding new node dag 
way new node added dag 
number parents added node equal number arguments corresponding arithmetic operation invoked clustering algorithm 
space complexity dag worse time complexity clustering algorithm 
proposition space time complexity generating dag worse time complexity clustering algorithm 
means space complexity dags terms number evidence variables worse time complexity clustering algorithm terms 
specifically evidence variable add evidence specific nodes dag number values variable take 
important stress complexity guarantee may hard distinguish proposed approach brute force approach builds big table containing possible instantiations evidence variables corresponding distributions query variables 
generation algorithms polytree algorithm special case clustering algorithm shown 
polytree algorithm modified suggested compute dags 
means cutset conditioning easily modified compute dags instantiation cutset compute node pr polytree algorithm take phi sum resulting nodes 
algorithms exact inference belief networks adapted generate dags 
general algorithm satisfy key condition adaptable computing dags suggested algorithm depend specific evidence obtained depend variables evidence collected 
variable instantiated value value affect behavior complexity algorithm variable instantiated matter 
belief networks algorithms aware satisfy property 
reason notion probabilistic independence algorithms 
specifically read topology belief network relation stating variables independent variables pr pr pr instantiations variables 
possible hold instantiations specific ones 
algorithms aware take advantage notion independence 
attach computational significance specific value variable instantiated 
property existing algorithms easily adaptable generation dags 
introduced new paradigm implementing belief network inference oriented realworld line applications 
proposed framework compiles belief network arithmetic expression called query dag 
non leaf node dag represents numeric operation number symbol 
leaf node dag represents answer network query probability event interest 
inference dags worst case linear size amounts standard evaluation arithmetic expressions represent 
important point stress reported proposing new algorithm belief network inference 
proposing paradigm implementing belief network inference orthogonal standard inference algorithms engineered meet demands real world line applications 
class applications typically demanding reasons 
typically requires short response time milliseconds 

requires software written specialized languages ada assembly pass certification procedures 

imposes severe restrictions available software hardware resources order keep cost unit electromechanical device minimal possible 
address real world constraints proposing compiles belief network dag shown uses dag evaluator line reasoning 
brings required memory needed storing dag evaluator 
brings required software needed implementing dag evaluator simplistic seen earlier 
proposed approach requires belief network algorithm generate dag efficiency algorithm critical factor 
example show long version standard optimizations belief network inference pruning caching critical dag framework 
specifically optimizations subsumed simple dag reduction techniques numeric reduction dag node descendants replaced single dag node esn appears descendants node :10.1.1.33.2444
adnan darwiche gregory provan :10.1.1.33.2444
query dags practical paradigm implementing online causal network inference 
technical report rockwell science center oaks ca 
jensen lauritzen olesen 
bayesian updating recursive graphical models local computation 
computational statistics quarterly 
li ambrosio 
efficient inference bayes networks combinatorial optimization problem 
international journal approximate reasoning 
shachter andersen szolovits 
global conditioning probabilistic inference belief networks 
proc 
tenth conference uncertainty ai pages seattle wa 
shachter ambrosio del 
symbolic probabilistic inference belief networks 
proc 
conf 
uncertainty ai pages 
shenoy glenn shafer 
propagating belief functions local computations 
ieee expert 
