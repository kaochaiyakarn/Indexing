chapter things go wrong object modelling uml anthony simons university sheffield uk simons dcs shef ac uk ian graham ian graham associates uk com authors offer catalogue problems experienced developers various object modelling techniques brought prominence widespread adoption uml standard notations 
catalogue revised reflect changes uml versions number semantic inconsistencies notation fixed 
notwithstanding developers create inordinate problems pursuing unproductive development strategies apparently fostered uml 
article shows biggest problem far cognitive apparent ease rush build uml models may distract developer important perspectives system 
problem serious outstanding inconsistencies ambiguities exist uml 
number inadequacies highlighted uml fails express believe important semantic issues 
uml neutral respect bad designs consequences allowing uml drive development process include inadequate object conceptualisation poor control structures poorly coupled subsystems 

catalogue problems revision earlier survey developer experiences omg endorsed standard object modelling uml 
original findings sg different difficulties associated uml reported 
uml chapter number semantic inconsistencies notation fixed 
significant number problems cognitive semantic remain 
context critique difficulties described drawn reports developers managed known authors uml real projects academia industry 
analysing experiences authors just uml contained semantic ambiguities inconsistencies increased prominence particular modelling notations turn placed premium carrying certain kinds analysis design activity 
analysts adopting new approaches system eventually trapped unproductive arguments objects populating system proper representation control structure system 
designers refusing implement models produced analysts impossible map case models sequence diagrams conventional software engineer recognise 
decided problem cognitive important issue semantic inconsistency ambiguity 
authors appreciate benefits standard modelling notation uml supposed bring allowing developers communicate common language 
uml standard currently defined open subtle differences interpretation leading serious problems downstream discovered developers practice 
critical framework body article enumeration problems experienced developers embraced uml notations engaged considered appropriate sequence activities building uml models 
problem indexed ease classified letter code style mis 
classification codes interpretation inconsistency meaning parts uml models contradiction parts commonly accepted definitions terms amb ambiguity meaning uml models specified allowing developers interpret way adequacy meaning important analysis design concepts captured uml notations mis cognitive meaning natural development path promoted desire build uml models developer 
problem cited placed categories representing major perceived underlying cause fault 
categories intended mutually exclusive necessarily exhaustive merely indicative 
things go wrong object modelling uml section discuss believe causes underlying failures reported developers survey 
subsequent sections form body catalogue 
discuss significance numbers problems category 

cracks heart uml uml intended general purpose modelling notation consistently applied principles 
result pressures brought bear standardisation uml heterogeneous elements precursor methods notations 
difficult task minimalism expressiveness successfully uml moderately managing apply conventions number models 
strengths uml eventually account weaknesses 
universal notation multiple interpretations claimed strengths uml universal notation analysis design documenting implementation 
minimalism typically cited benefit 
side developer interpret developer diagram different set assumptions 
intended analysis diagram context may interpreted concrete design context 
developers repeatedly ran problems decide concrete uml models supposed 
association just represent vague imagined connection problem domain mean physical connection classes solution domain 
diagrams representing thing interpreted 
uml claims capacity model perspectives advantage fact offers control diagrams interpreted considered serious disadvantage 
universal notation fosters nave seamless development obvious class diagram drawn initial analysis relationships concepts problem domain pressed service concrete design 
associations converted pointers relationships translated directly set valued attributes strong mutually coupled observer patterns appear design ghjv 
better developers noticed relationships eliminated linker entities entity relationship modelling mediator patterns responsibility driven design reduce coupling classes design ssh 
repeatedly failed perceive systems terms ordinating structures see problem 
practice analysing semantic relationships problem domain classes associations actively blinds developers alternative practical chapter structures 
gestalt theory predicts initial concepts formed perception phenomenon radically affect subsequent constructs formed 
observed early analysis modelling classes tends fix concepts suppress 
development steady elaboration detail analysis classes structures change merely add attributes methods style early nave development methods cy wn emphasised seamless transition analysis design 
approach leads systems overly coupled exhibit poor modular structure ssh 
structured systems typically mapping analysis design objects 
eclectic models fail resolve competing design forces claimed strengths uml eclectic keeps best parts number precursor methods notations particular 
regarded thing means notation contains point view left 
extremely difficult ensure parts time 
old adage camel animal designed committee eclectic systems ugly borrow elements original context evolved 
uml great care taken ensure elements notation fit syntactic level 
examine intent sets model elements single uml diagram find conflict taken contexts originally supported mutually exclusive design approaches 
example class diagram blends associative relationships data structures client server relationships equivalent inter module procedure calls 
resolve data model terms minimising data dependency lead structure equivalent nf 
resolve client server class coupling model sense rdd originally term collaboration graph www lead completely different structure minimising inter module dependency ssh 
side eclectic notation different design forces compete single uml model offering single perspective offers multiple perspectives simultaneously 
consequence developers profit structure offered perspective unable proceed uml model fails resolve competing design forces 
duality just feature class diagram 
sequence diagram switches dataflow method invocation perspective 
state activity diagrams switch finite state machine flowchart perspective 
models highly constrained original context lose useful constraint extra enhancements added uml example attaching extra guard conditions events transitions state model undermines purpose state machine perspective 
richness things go wrong object modelling uml uml undoing prevents models offering clear perspective direction design take 
universal definitions notation elements transfer poorly elements universal notation interpretation analysis design implementation 
developers take concrete examples notational elements understand retrofit interpretations higher analysis process 
impedes analysis imposing implementation concerns early 
problem subtle simply asserting uml definitions concrete fosters transfer elements definitions context 
clearer fundamental definitions association dependency uml 
association concept erm initially represent imagined relationship entities 
immediate concrete interpretation 
dependency likewise defined quite abstractly uml directed relationship behaviour source functionally dependent behaviour target 
proceeding design level uml asserts quite categorically associations represent structural relationships require pointers embedding implementation dependencies correspond non structural relationships class uses argument method signatures 
mutually exclusive definition retrofitted analysis perspective prevents associations seen kinds dependency developers encouraged early distinctions associations dependencies analysis decisions really concern implementation structure systems 
notion dependency important relegated dependency outstanding problems regarding expressiveness uml follow 

cases case models cases field object technology serious attempt elicit requirements upstream object modelling business tools may prove better starting point 
rg scenarios originally collected interview instances describing single execution path procedure invocation 
view adopted uml gave case type level interpretation procedure description 
uml established uses extends generalisation relationships cases kind novel control structure analysis domain 
uml defines scenario instance case replaced uses extends relationships new include extend dependency relationships 
chapter fixes cases uml uml case model contentious widely part uml 
originally uses extends relationships defined specialised subtypes inheritance relationship cases stereotypes generalisation jargon standard generalisation arrow 
previous survey sg reported developers simply official uml semantics preferring infer different meanings uses extends number consequential problems communication model consistency 
painfully evident oopsla cases panel jacobson cockburn gave conflicting definitions meaning uses realising indicated failed understand uses extends relationships 
jacobson uses relationship adopted uml analogous subclassing concrete case inherited elements case inserted sequence 
contradiction definition developers commonly imagined uses semantics simple subroutine call case invokes case ignored generalisation arrow semantics interleaving elements 
extends relationship inconsistently defined start 
hand extension case modelled inheriting base case simultaneously regarded inserting behaviour base case 
views held consistently extension represent extra behaviour insertion semantics combination base extra behaviour specialisation semantics 
practice semantics applied violation metamodel description 
uml addressed problems abandoning old uses extends relationships 
replacements known include extend 
main change defined stereotypes dependency kinds functional dependency 
effect change remove earlier conflicts generalisation specialisation semantics 
number problems remain 
cases supposed independent formal design forward reverse engineered conceptual structures fostered cases mislead developers design structures 
logical faults introduced prevent case model scaling large systems 
inadequacies include extend relationships semantics include specified amb abandoning old view uses specialises base case interleaves procedural elements appear uml popular pressure straightforward compositional semantics include recommended open fhg practised disregard things go wrong object modelling uml uml semantics 
examples consistent subroutines interleaved routines authors fail absolutely clear semantics intended time included case called aggregation responsibilities determined factoring common behaviour reminiscent generalisation 
see plain assertion included cases atomic subroutines executed 
semantics extend handle exceptions abandoning inconsistent view old extends insertion specialisation allows new extend relationship considered purely insertion 
inserted optional behaviour executed trigger condition satisfied 
definition equivalent guarded block single branch statement control returns point call 
optional branches developers commonly extend indicate exceptions intention clear 
unfortunately insertion semantics extend support exceptions 
exception raised control returns point may return failed transaction exception processed 
semantics extend handle alternative history likewise developers commonly extend indicate alternative history 
shows typical example adapted intended alternative likewise intended alternative 
insertion semantics extend diagram nonsensical base cases execute inserted optional behaviour terminated see problem 
jacobson originally expected extend relationship able characterise insertions exceptions alternatives 
clear published semantics extend handle 
case diagrams dangerously ambiguous developers rely intuitions labelling cases establish intended logic disregard official semantics 
extend relationship different relationships conflated 
fostered case development case modelling misses long range logical dependency mis case modelling promotes highly localised perspective obscures true business logic system 
result developers fail capture important long range dependencies 
extension cases aim capture local alternatives problem notwithstanding 
uml capture explicitly exclusive alternation distant main cases likewise extensions chapter secretly inter dependent 
customer paid direct receive invoice obtain refund addition returning faulty goods 
simple examples exhibit unpleasant mutual interactions extensions base cases 
alarming fact cash paying customer captured logical loophole completely obscured case model 
order place order sign order deliver goods send invoice pay invoice return goods pay direct customer supplier pitfalls case diagram granularity cases logical task units different problems fixed uml admitted functional task units larger smaller nominal grain size cases 
case defined sequence transactions performed system yields observable result value particular actor jgj 
emphasis observable result deliberate constraint seeks ensure minimum maximum granularity cases may vacuous deliver useful result may multiple deliver single result 
unfortunately model alternative history requires empty base cases may extended substantive alternatives 
doomed attempt treat alternative branch extension second branch see problem fails semantics insertions alternative branches legitimately modelled insertions vacuous base case 
jacobson may accused doing considers logon base case substantive alternative activities terminal session compile mail inserted 
base case really observable benefit user 
likewise model long range logical dependency see problem requires large scale hierarchical units ordinate cases logically belong 
true logical alternation missing concepts represented uml appear intermediate nodes conventional structure chart 
necessary encode long range dependencies exist cases things go wrong object modelling uml arranged 
qualify case uml involve multiple transactions actors 
case dependency non logical inconsistent direction dependency misleading extend flowing insertion base case modifies 
artefact order followed analysis procedure indicating real logical dependency 
logically superordinate selection node represented uml understood bundling base extension cases depends parts 
current uml position saying branches depend logically distinguished branch clearly nonsense 
include construed genuine logical dependency sequence node subroutines extend merely records analysis indexed 
stereotypes dependency completely different kinds relationship 
case modelling unsound mis non logical formulation dependency explains extend cases break encapsulation unfairly gaining access internal structure main cases extend 
logical formulation alternatives encapsulated inside dispatching selection node 
explains extend behave come instruction control main flow 
uml authors may undermine attempts impose logical consistency asserting cases forward reverse engineered consequence promoting non logical relationships analysts develop case models completely design 
developers misguided start 

sequence collaboration diagrams sequence diagrams collaboration diagrams equivalent ways illustrating object object message interactions uml 
sequence diagram time ordering messages explicit hides structural relationships objects 
collaboration diagram displays structural connections objects sequence messages 
sequence diagram may show focus control stack frame invocation level limited degree branching accommodate collaboration diagram may illustrate sophisticated branching iteration 
fixes sequence collaboration diagrams uml number missing emphases added uml address criticisms raised sg 
sequence diagram may represent single execution single decision path procedural view decision paths available execution 
case sequence chapter diagram models scenario case models case see 
puts onus developer realise diagram sense 
failure sequence diagrams handle simplest kind branching acknowledged 
uml policy splitting merging object timeline enters alternative history abandoned 
focus bars clear stack frame semantics correctly mandated call back self delegation 
unfortunately uml authors don observe rule list focus bar interpretation continuing problem developers 
collaboration diagrams largely unchanged 
interpretation complicated syntax branching iteration explained briefly conventions referring iteration variables explained 
alarming new concept admission non procedural message flow 
serves confuse object messaging dataflow flowchart perspectives 
previous critique sg reported uml subverted original meaning term collaboration rdd www 
uml lacks concept class level client server functional dependency see problem 
method invocation dataflow workflow duality sequence diagrams developed cases produce dataflow mis properly constituted sequence diagram meaning arrow stimulus message sent activate method target object receiver 
arrow semantics invocation 
find time developers perspective drawing sequence diagrams 
tend create dataflow diagrams meaning arrow transfer information destinations corresponding imagined processes 
persistent failure adopt proper object oriented mind set disturbing 
eventually put behaviour inadequate prior object modelling 
developers proceed directly sequence diagrams cases kinds object concept available early stage relate exclusively human actors passive datastore concepts letters forms price stock records 
tendency model nouns description case literally sequence diagram 
sentences warehouse manager looks price stock level result messages external actor object concepts representing 
price stock level access methods object 
counter developers prevented drawing sequence diagrams primary model concentrate eliciting responsible object abstractions bc ww www 
sequence diagrams deployed oose confirm object model covered behaviour expected cases useful testing 
things go wrong object modelling uml flat non procedural message flow workflow mis uml authors recognise procedural non procedural message flow objects collaboration diagrams 
drawn filled arrowhead semantics method invocation messages may nest 
drawn stick arrowhead flat semantics progression control step step words workflow flowchart 
workflow place object messaging model serves distract developers 
return arrow dataflow invocation model mis uml introduced dotted shaft return value arrow distinguish passing return values call back invocations 
new problem dataflow invocation model 
confuses developers intended meaning arrows sequence diagrams 
focus bars consistently see problem return arrows unnecessary dropped express request concurrent thread rendezvous 
focus bars misunderstood inconsistently thread activation stack frame semantics focus bars focus bars stack frame semantics shown 
nested focus bar shown call back self delegation 
clear nesting length focus bars messages master routines subroutines 
uml second process thread semantics allowed shown 
case length focus bar indicates liveness thread 
developers including misuse focus bars style 
length bar conveys useful logical information corresponding interval object touched 
absent misused focus bars promote dataflow invocation mis style visually promotes conflicting dataflow semantics stimulus arrow mean invocation nested focus bar raised 
similar visual conflict arises focus bars displayed 
correct style promotes proper invocation semantics 
chapter possible determine subroutine terminates caller return value pass 
value returned implicit request need annotated freeing diagram dataflow see problem 
adequacy expressiveness interaction diagrams normal course plus extensions model fiction mis sequence diagrams supposed drawn case 
case starts premise construct normal course events supplement various extensions 
works simple examples 
general business logic complicated decision paths 
credit system developed btr hsr ways credit limit application succeed ways fail 
natural business logic structured early rejection acceptance cases continue investigate case turn may lead acceptance rejection 
impossible decide considered normal course acceptance rejection eventually occur equal likelihood 
analysts artificially constrained accepting continue investigate case normal course despite fact fairly path system 
granularity cases logical sequence units different credit system hsr designers rejected analysis model problem different cases unequal size complexity 
modularisation system judged poor 
designers wanted truncate cases points conditions branching introduced weak support branching iteration sequence diagrams 
designers represented single diagram initial portion continue investigate case early rejection point second sequence diagram cover continuation case early acceptance point 
judged sequence diagram supported single branch logic comparable modular size 
granularity principle cases broken see problem cases correspond single complete interaction user system 
cases acquired sounding names early credit limit acceptance previously rejected early 
decision logic sequence collaboration diagrams limited uml branching condition indicated brackets placed guard message stimuli 
guards branches fork mutually exclusive branch selected time 
allows client objects dispatch requests alternative servers dispatch alternative requests things go wrong object modelling uml server represent client object entering different timeline sg 
uml introduced splitting object timelines sequence diagrams dropped uml 
objects may occur multiple times collaboration diagram enter substantively different state 
earlier critique sg noted business logic tends produce overlapping parallel timelines representing alternative ways reaching outcomes contingent having passed different histories 
split join multiple timelines impossible single sequence diagram collaboration diagram 
need enter alternative timeline forces creation diagram see problem forces premature truncation cases see problems 
conflicts object messaging decision logic sequence perspective generates incorrect control logic mis sequence diagrams ways emphasize object interactions expense proper decision logic 
models developed credit system hsr see problems produced example early rejection point logically terminated timeline case tool inability support branching alternative timelines developer continued object timeline continue investigate case logically inconsistent 
true false continuation past point 
merged timelines 
pitfalls sequence diagram logic fault equivalent continuing past termination point indicated 
sequence diagrams problematic suppress developer perceptions proper decision logic 
timeline represent single sequence actions branching mutually exclusive set guarded alternative histories 
chapter alternative timelines combined mis sequence diagrams merge object timelines logically distinct especially removes point branching 
timelines easily designers result merged processing streams implementation 
illustrates case alternative processing branches initiated object eventually merged single timeline object possible view single history fact represents alternative histories 

state activity diagrams uml state diagram derives dynamic model omt ultimately harel statecharts 
fusion moore mealy finite state machines computational activity may attached transitions mealy states moore 
state level may expanded substate machine model computational activity 
arcs entering superstate correspond commencing substate machine initial substate arcs leaving superstate boundary indicate exit transitions substates 
uml activity diagram synthesis state machine flowchart petri net 
described state machine terms called action activity states really processing stages flowchart transitions represent program conditions events 
diamond decision nodes indicate branching petri style synchronisation bars indicate concurrent fork join points 
status state activity diagrams uml uml scope state diagram widened model system behaviour merely local object behaviour importance activity diagram elevated line earlier recommendations sg 
activity diagram better suited modelling real business processes interaction models see problems models workflow object messaging 
alternate parallel paths business logic may easily merge points outcome 
find developers little model proceed interaction modelling far early stage 
likewise state models occasionally see instances case far syndrome developers try encode business logic cases sg 
identified number new inconsistencies survey 
things go wrong object modelling uml interpretation problems initial final states initial state indicator state amb developers know initial state represents true state merely points substantive state 
harel semantics conflict free transition arrow proceeds substantive state 
harel semantics encourages view initial state real state system dead switched 
indicate starting point substate machine initial state icon represent dead system state exactly mealy initial free transition arrow 
similarly majority uml state diagrams place event initial transition initial state may state 
final state accept state halt state amb developers know final state represents true accept state system merely halt state system terminated 
harel semantics conflict mealy semantics state accept state substantive state machine 
accept state view causes developers place final state icons substate machines indicate eventually terminate 
indicates premature halting system successful completion substate machine 
final state icon reserved halt state substantive state way indicate true accept state 
harder see substate machine terminates breaking encapsulation nested state machines see problem 
consistency problems decomposing state machines transitions superstate boundary violate encapsulation advantage harel statecharts supposed allow developer view control structure system different levels abstraction hiding different amounts detail inside substate machines 
major alterations state transition pattern needed superstate exposed substate machine negates benefit encapsulation abstraction 
uml state diagrams routinely allow transitions state boundaries level description redrawn connect substates exposed 
breaks encapsulation state machines 
labelling transitions superstate substate levels different see problem 
problems encapsulation caused admitting shallow deep history connectors see problem 
chapter boundary crossing nested accept state redundant irritating example boundary crossing see problem practice identifying accept state substate machine see problem free transition exits substate superstate boundary 
transition properly labelled event higher level triggered completion substate machine illustrating inconsistency labelling level 
furthermore free transition exiting nested accept state effectively state redundant penultimate states exit directly events triggered 
points illustrate boundary crossing breaks encapsulation state machine logic higher lower levels 
substate machines connect directly superstate boundary 
reaching accept state substate machine deemed equivalent signalling separate event higher level 
states free exit transitions decomposable states representing processing stages sense moore machine free exit transitions meaning state may quit automatically associated processing terminated 
state expanded immediate problem interpreting free exit transition consistently harel semantics transition leaving superstate boundary equivalent exit transition substate 
mean substate exits immediately 
substate machine execute 
capturing underlying control logic conditional guards conceal duplication control states mis admission extra conditional guards events uml undermines purpose state machine formalism conceals duplication control states 
illustrates simple heating system basic events temperature triggers augmented timing guards introduce delay switching 
heating standby time time heating standby timeout timeout temp temp heating standby timeout heating standby timeout standard standard extended extended pitfalls state machine logic things go wrong object modelling uml model exactly equivalent basic events timeouts augmented temperature threshold guards illustrating augmented notation choice events essentially arbitrary 
guards revealed extra hidden control states 
conditional guards lead self deception real control structure systems advise developers expand away aware real number states events system 
history connectors conceal multiplication state machines mis uml admits shallow deep history connectors 
reentry superstate containing shallow history connector substate machine resumes left starting initial state 
enrichment breaks encapsulation problem requires reasoning state boundaries corresponds repeated duplication entire super state machine alternative remembered substate 
deep history connector applies expansion recursively nested substate machines 
appreciate approach typically thought necessary model interrupts routines unfortunately blinds developers real complexity created 
discourage routine 
entry exit actions internal transitions promote flowcharts mis simple logic state machines upset concern execute attached procedural elements correct order 
example distinction drawn standard self transitions trigger entry exit actions internal transitions 
imposes procedural flowchart perspective event driven designing state diagrams 
think self transition equivalent dwelling state exiting re entering 
self transitions typically decompose lower level transitions substate machine 
leads conclude activity attached state modelled substate machine 

class diagrams class diagrams stable widely part uml translate straightforward way program classes 
paradoxically lead developer analysis stage inadequate object modelling design stage 
strength weakness uml class diagram ability capture wide variety semantic relationships anticipated uninterpreted associations entities analysis domain cf 
omt actual structural functional connections classes design domain cf 
uses booch 
chapter eventually richness representation confuses developers 
simultaneously analysis design perspectives data modelling client server functional dependency perspectives diagram 
number problems described section 
premature object modelling class diagrams tend fix object abstractions early mis noted sections class diagrams drawn analysis phase exercise undue influence eventual design 
initial class diagrams contain obvious domain concepts related uninterpreted associations 
typically pressed design nave way 
developers reconsider true nature functional coupling classes simply add behaviour initial domain concepts eventually 
hindered thinking classes smaller concrete agent manager concepts exercising limited sets responsibilities www 
associations fix object connections translate poorly design mis section noted recording uninterpreted associations analysis produces poorly coupled designs associations necessarily correspond optimal functional couplings design 
object abstractions hard undo initial perceptions 
associations pressed prematurely physical class connections viz 
pointers 
uml fosters see 
noted sg automatic translation schemes resulted overly coupled designs set valued attributes observer style mutual connectivity domain classes see problem 
case association perspective correct optimal class coupling see problems 
detailed analysis labelling impedes structural transformation mis sg noted developers worry inordinately detailed labelling concerns disjoint versus overlapping subclasses difference association shared aggregation composite aggregation far go ocl constraints stereotypes 
important ensure semantic characterisation analysis domain preserved design implementation stages subtle annotations analysis models irrelevant design especially model structure transformed 
consider mediator pattern ghjv applied systematically reduce inter object coupling ssh 
matters little mediator true composition shared aggregation simply kind coordinating abstraction long cross connections removed mediated objects 
applying mediator pattern radically alters structure system deleting relationships 
indicate things go wrong object modelling uml developers wary investing effort analysis labelling 
unfortunately find reverse effect developers motivated applying radical structural transformations design earlier effort invested labelling structure analysis model 
functional coupling data dependency duality term collaboration concept missing uml lacks unequivocal concept class level client server functional dependency 
arguably important relationship objectoriented modelling dual association data modelling 
rdd concept known collaboration bc ww www 
unfortunately term collaboration subverted uml refer cluster objects interactions collaboration diagram refer object interaction diagram 
instance level model arrows denote individual messages objects 
rdd collaboration directed relationship classes representing functional dependency class 
missing perspective critical proper modular analysis transformation systems ssh 
available uml concepts cut cloth way directed association represents concrete structural connection indicating navigability direction 
dependency indicates non structural dependency method arguments see 
premature assumptions implementation fail capture notion client server dependency 
class diagram mixes data functional dependency mis uml class diagrams freely mix associations dependencies confusing data modelling functional dependency perspectives 
clear dependency stretches include existence dependency derived relationships omt 
section noted leads diagrams offer clear perspective direction design proceed 
class diagram fails resolve competing forces 
proper context association data modelling erm establish minimal coupling data files 
rdd notion collaboration responsibility analysis crc establish minimal functional coupling subsystem modules bc www ssh 
applying technique optimise class diagram different way 
uml class diagrams case offer collaboration graph www perspective see problem allow subsystem optimisation proceed analysis inter module functional dependency 
chapter 
survey emphasised way developers embrace uml 
cognitive issues surrounding focus developers attention engaged directed important static issues model semantics 
problem category identified counts totalling inconsistency counts amb ambiguity counts adequacy counts mis counts high level mis encountered survey worrying 
ratio mis amb grown previous survey sg partly result fixes uml inconsistencies ambiguities uml 
absolute increase mis scores previously shows developers finding ways confuse uml 
alarming just represents waste effort problem fixed simply trying clarify semantics uml stands large chunks uml need reconstructed take account ways developers minds operate 
clear gestalt psychology important initial conceptualisations influence subsequent concept formation 
initial uml analysis view pre normalised data model communications entities conceived initially dataflow workflow substantial mental effort required undo faulty perceptions 
involves going tide fighting conceptual clutter minds developers 
amb scores reflect problems consistency uml scores reflect problems completeness uml 
counts suggest revisions uml necessary 
particular authors identified problems control flow logic cases sequence diagrams absence proper model illustrate client server coupling system design optimisation 
interested reader referred alternative treatments topics methods soma discovery open fhg 
task analysis replaces cases relationship tasks corresponds clear sequence selection iteration compositions 
class diagrams correspond proper client server graphs allowing system design stage proceed smoothly 
bc beck cunningham laboratory teaching object oriented thinking proc 
th acm conf 
object oriented prog 
sys lang 
appl pub 
sigplan notices 
booch rumbaugh jacobson unified modeling language user guide addison wesley longman 
booch object oriented analysis design applications nd edn benjamin cummings 
things go wrong object modelling uml cy coad yourdon object oriented analysis yourdon press 
cy coad yourdon object oriented design yourdon press 
cockburn basic case template tr rev humans technology pub 
members aol com papers htm cockburn goals cases obj oriented prog 
cockburn goal cases obj oriented prog 
fhg henderson sellers graham open modelling language oml manual march sigs books 
fowler cockburn jacobson anderson graham question time 
cases proc 
th acm conf 
obj oriented prog 
sys lang 
appl pub 
acm sigplan notices 
ghjv gamma helm johnson vlissides design patterns elements reusable object oriented software addison wesley 
gibson objects born bred byte magazine 
graham migrating object technology addison wesley 
graham problems cases avoid proc 
rd int 
conf 
object oriented info 
sys eds patel sun patel london springer verlag henderson sellers simons open toolbox techniques addison wesley 
hsr hung simons rose 
managing time budget quality issue dynamic business object architecture development proc 
th conf 
software quality management amsterdam mep 
jacobson jonsson object oriented software engineering case driven approach addison wesley 
jgj jacobson griss jonsson software reuse architecture process organisation business success addison wesley acm press reading ma usa pp 
mcgregor testing object oriented components ecoop tutorial acm 
rational software uml manual september www rational com uml rg rubin goldberg object behaviour analysis comm 
acm 
rumbaugh blaha premerlani eddy lorensen objectoriented modeling design prentice hall 
simons object discovery process developing medium sized applications ecoop tutorial brussels acm pp 
sg simons graham things don object oriented modelling uml proc 
nd ecoop workshop precise behavioural semantics eds 
kilov rumpe technical report tum tu munich institut fr informatik 
sg simons graham things don object oriented modelling uml british computer society object oriented programming systems newsletter eds 
mitchell kent bcs autumn www ac uk issue autumn contents html 
chapter ssh simons hung design patterns litmus test strength object oriented methods proc 
th 
int 
conf 
object oriented info 
sys eds 
rolland grosz paris springer verlag 
wn seamless object oriented architecture prentice hall 
ww wirfs brock wiener responsibility driven design responsibility driven approach proc 
th acm conf 
object oriented prog 
sys lang 
appl pub 
sigplan notices 
www wirfs brock wilkerson wiener designing object oriented software prentice hall 
authors anthony simons lecturer computer science university sheffield years experience researching teaching object technology 
joined department research assistant building speech recognisers moved mainstream software engineering 
research interests type theory language design analysis design methods verification testing 
author research publications creator discovery method developing object oriented systems 
holds phd object oriented type theory language design masters degree modern languages linguistics 
ian graham chairman iga consultancy specialising advanced information technology change management 
ian years experience practitioner 
previously vp chase manhattan bank senior manager swiss bank dillon reed 
ian created system development methods chase sbc 
author books papers creator soma object oriented development method 
ian fellow british computer society masters degree mathematics holds industrial chair requirements engineering de university 
