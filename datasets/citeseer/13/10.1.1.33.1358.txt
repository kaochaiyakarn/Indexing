better algorithm ancient scheduling problem david karger steven phillips eric department computer science stanford university stanford ca oldest simplest variants multiprocessor scheduling line scheduling problem studied graham 
problem jobs arrive line scheduled non preemptively identical machines minimize makespan 
size job known arrival 
graham proved list processing algorithm assigns job currently loaded machine competitive ratio gamma 
algorithms smaller competitive ratios list processing discovered culminating bartal fiat karloff vohra construction algorithm competitive ratio bounded away 
algorithm competitive ratio gamma algorithm provably better list processing 
natural algorithm outperforms list processing competitive ratio significantly closer best known lower bound problem 
show analysis algorithm tight presenting lower bound algorithm competitive ratio large scheduling jobs machines widely studied problems computer science 
earliest simplest variants line scheduling problem introduced graham 
machines identical single task jobs independent 
job size 
jobs arrive job immediately scheduled knowledge jobs 
size job known arrival jobs executed scheduling completed 
goal minimize makespan completion time job finish 
problem referred load balancing supported nsf ccr nsf young investigator award ccr mitsubishi 
example machines communication channels jobs requests communication bandwidth 
customer requests bandwidth channel chosen required bandwidth immediately permanently available customer 
interpretation goal minimize maximum load channel 
online nature problem performance scheduler measured competitive ratio 
job sequence oe oe denote makespan algorithm schedule opt oe denote minimum makespan machine schedules oe 
competitive ratio defined ca def sup oe oe opt oe supremum nonempty job sequences 
natural question small ca 
graham showed list processing algorithm list brevity assigns job loaded machine competitive ratio exactly gamma starting algorithms developed better competitive ratios list bartal fiat karloff vohra gave algorithm competitive ratio gamma 
faigle kern turan proved lower bounds achievable deterministic competitive ratio gamma list optimal 
bartal karloff rabani improved lower bound ffl large 
presents deterministic algorithm alg ff natural algorithm bartal algorithm alg ff uses parameter ff affects behavior best choice ff depends ff alg ff outperforms list furthermore alg competitive ratio shows alg ff best choice ff compares list bartal algorithm asymptotic lower bound 
show analysis alg ff tight presenting lower bound karger phillips number machines log scale ratio competitive algorithm list lower bound large new algorithm comparison algorithm list bartal algorithm asymptotic lower bound competitive ratio alg ff choice ff large definition alg ff order better list see list wrong worst case sequence gamma jobs size followed job size list assigns large job machine gamma small jobs optimal schedule assigns large job machine 
problem list keeps schedule flat large job arrives go relatively tall machine 
algorithm alg ff strives maintain imbalance processor loads large job assigned relatively short machine 
create large imbalance immediately imply poor competitive ratio 
algorithm list scheduling small jobs big job define height load machine sum sizes jobs currently assigned 
definition 
time time just th job scheduled 
time st shortest machine shortest machine height average height shortest machines 
note average height machines time lower bound opt 
definition 
algorithm alg ff works follows job arrives placed machine ffa parameter ff determines degree imbalance alg ff tries maintain 
note definition tall job placed shortest machine 
algorithm bartal discrete version alg ff job placed machine smallest machine machine ffi 
reader may wonder average height shorter machines adding new job average height shorter machines adding new job comparing ffa rank machine job time 
furthermore compare new height machine average height machines compare ffa 
better approximations opt oe better choices 
algorithm better gamma competitive 
particular algorithms schedule long sequence equal sized jobs distribute jobs evenly slightly half machines rest machines get small number jobs 
adversary insert approximately large jobs create completely flat schedule single large job makespan gamma times optimal makespan 
sections prove theorem 
theorem 
exists ff alg ff outperforms list ff alg ff ff competitive upper bound fixed fix fix ff ff 
section shows compute upper bound competitive ratio alg ff machines induction length job sequence 
oe job sequence length normalized total size jobs oe 
oe gamma gamma jobs oe assume inductively alg ff oe gamma oe gamma 
rest section devoted showing alg ff oe oe 
lower bounds opt oe 
fact 
quantities lower bounds opt oe 
times total size jobs oe 

largest job oe jn 

twice size st largest job oe 
better algorithm ancient scheduling problem alg ff oe jn definition alg ff inductive assumption easily imply alg ff oe oe 
alg ff oe ff alg ff oe ffj fact part respectively implies alg ff oe oe 
rest section assume alg ff oe jn alg ff oe ff alg ff oe ffj prove st largest job oe size alg ff oe ff suitable choice ff combined fact part proves alg ff oe oe 
definition 
define fi gamma fi define ffl gamma ff 
define gammafi gammaffl define gamma fi gamma definition 
machine tall height gamma fi short 
current number short machines average height short machines time 
job large size definition 
elevating job raises machine short tall say elevating job machine placed 
machine tall time elevating jobs oe 
prove job large elevating jobs large 
lemma shows large job size alg ff oe ff required 
sequence oe divided phases 
phase elevating job phase go smallest machine large 
increases monotonically reach second phase called analyzed reverse starting elevating job oe moving backwards time show elevating job large 
eventually time reached processing time taken jobs tall machines elevating jobs phase proof applies preceding times 
large jobs lemma 
fi satisfies fi ffl 
proof 
fact fi follows gamma fi 
see fi ffl jn ffj jn ff 
inequality gives jn gamma ffl substituting upper bound jn second inequality gives gamma ffl ff simplifies gamma fi gamma ffl 
lemma 
alg ff oe ff proof 
equation gives alg ff oe jn gammaffl ff gammafi gammaffl lemma follows definition gammafi gammaffl large job size alg ff oe ff lemma 
ffl gamma job large 
proof 
job raises machine height gamma fi ff gamma ffl jn gamma ffl fi 
job large gamma ffl fi gammafi gammaffl setting fi worst case simplifies ffl gamma 
phase section proves oe broken phases phase second phase elevating jobs phase large 
lemma 
job elevating job machine proof 
suppose job goes machine rule alg ff implies ffa job elevating job gamma fi 
transitivity ffa gamma fi gammafi ff lemma 
job elevating job job goes shortest machine large 
proof 
lemma elevating job go short machine shortest machine shortest machine job elevating job gamma fi implies gamma fi gamma job large 
lemma 
proof 
case job elevating 
number short machines times 
difference time time absence job time karger phillips case job elevating 
short machine time time 
show job placed shortest machine time implies average height short machines increased removal consideration shortest machine 
assume elevating job placed short machine 

lemma giving contradiction 
job go machine corollary 
corollary 
elevating job arrives phase large 
section shows elevating jobs arrive phase large 
consider elevating jobs reverse order arrival 
th elevating job arrive say arrives time lower bounds heights gamma derive lower bound note number short machines time 
continue lower bound js large fact forces proving time phase 
lower bound exceeds proven elevating jobs arrive phase large 
lemma 
fi ff lower bounds delta delta delta gamma assuming lower bound alg ff computed solving linear program 
minimize subject ma gamma ffl fi max ffa gamma gamma fi gamma proof 
time size jobs arrive size jobs arrive sum sum jobs arrive time ma sum jobs arrive time jn jn gamma ffl fi lemma 
implies equation 
refer 
gamma equations follow fact go tall machines elevating job 
refer 
equation part hypothesis lemma equation definition elevating jobs job tall machines short machines length jobs equation elevating job equation corollary 
ff fi gamma successive solutions linear program lemma 
large feasible solution linear program elevating job arrives phase large 
proof 
fact linear program lemma infeasible implies assumed conditions time hold means phase time calculated minimum values elevating jobs assumption large 
elevating jobs arrive phase large 
note corollary depends fi 
remove dependence showing worst value fi analysis fi ffl 
lemma 
assume ffl 
conditions corollary hold successful fi ffl hold fi fi ffl 
proof 
superscript variable denote value variable fi equal superscript fl value fi fl 
lemma proven showing ffl delta delta delta ffl ffl linear program ffl infeasible better algorithm ancient scheduling problem fl delta delta delta fl fl linear program fl infeasible 
full proof included appendix 
determine alg ff ff competitive machines need solve linear programs described lemma corollary case fi ffl 
corollary 
conditions corollary hold ff fi ffl alg ff ff competitive machines alg fl fl competitive machines ff fl 
proof 
follows fact constraints lemma tighter larger ff 
lemma 
exists ff gamma alg ff ff competitive machines 
proof 
written code solve linear programs lemma uses binary search find smallest ff tolerance conditions corollary satisfied alg ff oe oe 
cases ff gamma ff 
upper bound large linear programs lemma apply specific value impossible solve give bound large discretize linear program lemma effectively regarding groups machines having height 
constant gamma 
variables multiple change constraint equation weaker constraint gamma similarly change constraint furthermore change constraint equation weaker constraint gamma fi 
weaken constraint discarding terms gamma ffl fi lower bound jn block 
changes linear program lemma linear program minimize subject ba max ffa gamma gamma fi gamma fi gamma note grouped machines gamma blocks machines block machines size equal follows assumption gamma 
particular linear programs identical fact simplify equations easily eliminated equation 
lastly eliminated equations pessimistically assuming machines block upper bound 
linear program simplifies minimize subject gamma gamma max ffa gamma gamma fi gamma gamma gamma fi gamma gamma linear program gives valid bound gamma 
technique prove ff alg ff ff competitive lemma 
ff alg ff ff competitive 
proof 
written code solves linear program ff theta eventually falls elevating jobs arrive large 
corollary rest elevating jobs large 
lemma job large means large jobs 
cases alg ff oe oe lemma follows 
completes proof main result 
shown alg ff ff competitive ff running code ff 
expect alg ff ff competitive ff lack computing resources verify lower bounds prove lower bounds performance alg ff small large prove ff alg ff better gamma competitive 
show analysis alg ff tight describing sequence jobs karger phillips alg competitive sequence 
similar sequences constructed prove alg ff competitive ff appear journal version 
clearly ff large alg ff better competitive long sequence equal sized jobs 
lower bound small lemma 
ff alg ff better gamma competitive 
proof 
consider case 
ff alg ff clearly worse competitive long sequence equal sized jobs 
ff hard verify alg ff act exactly list sequence giving alg ff makespan optimal makespan easily seen 
ff 
proof identical 
ff alg ff clearly worse competitive long sequence equal sized jobs 
ff hard verify alg ff act exactly list sequence giving alg ff makespan optimal makespan easily seen 
ff 
lower bound large sketch lower bound job sequence oe demonstrates alg competitive large extracted upper bound proof shows sequence bad alg ff causes create flat schedule hits final job size 
method constructing flat schedule closely follows 
sequence oe average machine height upper bound 
main part oe phases forces alg ff create schedule gamma tall machines height gamma ffl short machines height gamma ffl 
final part oe phase forces alg ff follow repeatedly setting height job just large prevent going tall machines 
parameter set jobs phase height scheduled line machine 
job size follows 
complication need ensure oe scheduled makespan just 
part oe phase consists large number extremely small jobs line algorithm filler 
rest section organized follows 
sections give details phases 
section shows opt pack jobs machines height 
assume large terms ignored 
phase phase consists sequence infinitesimal jobs bring average machine height reason value section 
schedule phase algorithm places infinitesimal jobs machine heights obey relation ffa gives recurrence solution ff gamma binomial coefficient gamma delta defined gamma delta gamma gammak 
real positive integer gamma delta 
ff gamma ff am cm gamma ff delta lastly applying stirling approximation gives cff ff gamma ff gamma phase phase consists jobs placed current shortest machine bring machine height exactly gammaffl 
value average machine height phase determined ensure better algorithm ancient scheduling problem schedule phase algorithm place job phase machine current smallest height 
value bounded constraints 
phase job placed machine height values respectively phase 
increases tightest constraint phase job inserted constraint involves adding job size gamma gamma requiring tall go height machine gamma gamma ffa gamma ff gamma ma gamma gamma gamma gamma substituting approximations gives large gamma ff ff ff gamma gamma ff ffl determined section 
second constraint phase job placed machine height current smallest machine 
straightforward calculations show weaker constraint take 
phase phase consists gamma jobs placed current shortest machine bring machine height exactly gamma ffl 
need check algorithm place phase job machine smallest time 
smallest job phase schedule phase size gamma ffl gamma cff ffl determined clearly phase job placed height machine height 
average machine heights time phase gamma ffl gamma adding phase job machine height gamma ffl raise height gamma ffl ff 
algorithm places phase job smallest machine time 
phase phase consists jobs job size minimal subject constraint algorithm places job smallest machine time 
parameter chosen job phase size breaking 
satisfies gamma ffl ffa gamma ff gamma ffl gamma gives function ffl 
constraint algorithm places job smallest machine time gives lower bound calculations gamma ffl gamma ffa gamma gamma set gammaffl gammaj gamma plus tiny perturbation lastly fact set jobs total size determines value ffl 
setting sum job sizes solving ffl gives ffl 
packing prove opt need show jobs assigned machines machine height 
done follows room job size gets machine karger phillips place smallest phase jobs machines machine 
place smallest phase jobs machines machine 
remaining phase jobs gets machine 
remaining phase jobs paired phase jobs largest phase job smallest phase job second largest phase job second smallest phase job 
infinitesimal phase jobs bring filler machine height 
check assignment machine tall observe facts ffl smallest phase jobs size gamma cff ff gamma 
ffl smallest phase jobs size 
ffl smallest phase job size gamma ffl gamma cff largest phase job size gamma ffl total 
furthermore schedule phase convex smallest phase job largest phase add second smallest phase job second largest phase job 
extensions able improve algorithm slightly algorithm compares average height machines 
definition 
algorithm alg ff oe works follows job arrives placed machine ff gamma oe oea 
judicious choice oe alg ff oe outperforms alg ff unfortunately currently prove small improvement competitive ratio large unfortunate property alg ff worst case performance ratio occurs set identically sized jobs 
desire algorithm performs job set cost increasing competitive ratio 
shown tradeoff alg ff ff ffi alg ff gamma ffi competitive large details full 
clearly smaller ff alg ff achieves better makespan jobs size 
related observation algorithm worst case optimal average case easy show ff ffi ff competitive algorithm long sequence identical jobs construct schedule makespan exceeds ffi opt leaves interesting open problems 
close gap upper lower bounds alg ff 
second alg ff gamma ffi competitive ffl 
third analysis bad job sequences alg ff section derive better lower bound algorithms determine algorithm improve alg ff 
alan hu contributing example demonstrating alg ff outperform list 
bartal fiat karloff vohra 
new algorithms ancient scheduling problem 
proc 
nd acm symp 
theory computing pages 
bartal karloff rabani 
private communication 
faigle kern tur 
performance line algorithms particular problems 
acta cybernetica 
woeginger 
line scheduling heuristic better worst case ratio graham list scheduling 
siam comput 
graham 
bounds certain multiprocessing anomalies 
bell system technical journal 
narayanan chandrasekaran 
optimal online algorithms scheduling 
manuscript university texas dallas 
appendix full proof lemma 
proof 
fl ffl 
superscript variable denote value variable fi equal superscript fl value fi fl 
show ffl delta delta delta ffl ffl linear program ffl infeasible fl delta delta delta fl fl linear program fl infeasible 
ffi ffl gamma fl 
fl gammafl gammaffl ffi gammaffl ffl fl gamma fl gamma gammafl gammaffl gamma ffl gamma ffl gamma ffl ffi ffl gamma ffl 
gives differences delta fl gamma ffl gamma ffl ffi delta fl gamma ffl gamma ffl gamma ffl ffi prove linear program fl feasible delta fl gamma ffl delta fl large ffl large 
linear program fl feasible fact linear program ffl infeasible implies linear program fl infeasible constraints tighter program 
remainder proof considering linear program elevating job arriving better algorithm ancient scheduling problem time reserve superscript variables including denote value fi omit assume fl delta delta delta fl gamma delta larger counterparts fi ffl 
show fl showing set fl ffl delta minimize fl subject fl ffl tall machines time 
delta fl gamma ffl delta fl gamma ffl tall machine notation want prove delta proving easy close cases fi gamma fi implies delta ffi problem arises ffl rises gamma ffl 
minimal index ffa ffl gamma ffl gamma ffl 
case equation get delta ff delta gamma delta 
prove delta delta simple induction proves delta delta implies delta delta 
need gamma ffl delta gamma ffl ffi means need delta gammaffl ffi ffl means need delta ffi ffl means need delta ffi 
delta delta ffis gamma ffl gamma ffl ffi gamma ffl gamma ffl ffi ffl implies delta ffi argument implies delta 
similarly delta gamma ffl gamma ffl ffl means delta ffi ffi argument implies delta 
simply need prove ffl ffl rise gamma ffl ffl ffl rise gamma ffl 
remainder proof fi ffl 
point ffa gamma gamma ffl 
clearly point rises gamma ffl 
substituting gammaffl gammas gammaffl simplifying leads gammaffl gamma ffl ffl ffl gammaffl gamma ffl ffl ffl gammaffl gamma ffl ffl 
completes proof lemma 
