compression correlated bit vectors bookstein klein center information language studies university chicago east th street chicago il july bitmaps data structures occurring information retrieval 
useful large expensive store 
reason considerable effort devoted finding techniques compressing 
techniques effective sparse bitmaps 
propose preprocessing stage bitmaps clustered clusters transform member bitmaps sparser ones effectively compressed 
clustering method efficiently generates graph structure bitmaps 
situations desired impose restrictions graph finding optimal graph satisfying restrictions shown npcomplete 
results applying algorithm bible sets bitmaps method doubled compression savings 

textual information retrieval systems irs consumers computer storage resources 
conspicuous course text constitutes content database 
efficiently database auxiliary structures created require substantial space 
compressing wide range data structures sought efficient operation systems 
date attention progress area text compression 
shall describe examine possibilities compressing bitmaps data structure proposed improving performance retrieval systems 
bitmaps occur information retrieval 
represent occurrences word sentences paragraphs making text indicate documents associated index term appear bit slices matrix signatures represent pixels rows raster graphics display 
useful large expensive store 
carried extends th acm sigir conference brussels september title construction optimal graphs bit vector compression 
compression bitmaps especially successful sparse 
bitmaps sparse sparse bitmaps benefit compression 
describes method complements existing compression techniques improves performance certain categories bitmaps 
concentrate sets bitmaps generally information retrieval ir systems 
bitmaps enhance system discussed 
bit position corresponds specified sub unit database henceforth referred segment segment refer paragraph text contexts full document set documents may preferred unit 
different word index term database map th bit appears assigned segment bitmaps compressed efficiently 
part tend sparse 
bitmaps compress better sparser expected theoretically 
suppose bitmap considered having produced random bit generator probability bit theory easily extended encompass complex models bitmap generation 
information content bit gammap log gamma gamma log gamma bitmap bits quantity forms lower bound number bits needed represent bitmap 
known increases monotonically increases decreases monotonically continues growing 
bitmaps expect compression improve decreases map sparser 
complement bitmap 
wish alert opportunities reducing density bitmaps essence approach described 
factors contribute ability compress bitmaps effectively evidenced fact actual ir bitmaps compressible randomly generated bitmaps density bits 
reason better results cluster effect segment positions bitmaps usually ordered topic chronologically adjacent bits correspond segments treating related subjects 
appearance word segment implies appears neighboring segments 
effect exploited compression methods resulting excellent reduction storage requirements 
clustering possibility hitherto overlooked involving sets bitmaps words sets bits segments single bitmap 
occurrences certain words especially part known phrases security council curriculum strongly correlated segments sense word appears certain segment 
pairs bitmaps quite similar 
identifying clusters highly associated words direct bit clusters bitmap words associated bitmaps generally arranged lexicographical order order logical proximity 
respect ir bitmaps differ self clustered graphic bitmaps adjacent raster rows similar 
objective show usefully identify clusters correlated words take advantage associations squeeze additional compression 
section briefly review known bitmap compression techniques propose new simple easy implement compression component stage compression process described section 
stage stage process partition bitmaps ir system clusters correlated bitmaps resulting clusters transform original bitmaps set bitmaps sparser effectively compressed stage process 
section report experiments testing new method database chose study hebrew bible 
consider section variants address problems raised example occasion useful couple related problems shown np complete 

bit vector compression techniques overview known methods suppose bitmap length bits ones gamma zeros 
applications maps usually sparse 
simplest way store compactly small enumerate positions bits 
needs dlog bits identify position method need sd bits map may smaller bits required uncompressed original map 
alternatively record distances successive bits give position bit relative preceding bit position relative vector 
known run length coding 
simplest form length run encoded fixed length codeword codeword large accommodate theoretical maximum run length equivalent previous method 
simple run length coding space allocated run adequate largest possible run codes inefficient runs small moderate length 
variant due improves simple run length coding having variable length representation run length 
run zeros broken successive blocks zeros exponentially increasing size block size parameter selected optimize procedure second size block produced extends run partially filled 
length run represented follows block sequence completely filled zeros represented turn zero appended string ones delimiter 
ones know delta delta delta gamma delta delta delta gamma blocks filled zeros potential block zeros empty partially filled 
explicitly represent number zeros block binary integer bits 
run length encoded log bits log max length 
jakobsson suggests huffman coding bitmaps 
bit vector partitioned blocks fixed size statistics collected frequency occurrence bit patterns 
statistics set blocks huffman encoded bitmap encoded sequence codewords 
sparse vectors bit block consisting zeros blocks single bit higher probabilities blocks average codeword length huffman code smaller fraenkel klein combine huffman coding run length coding 
parameter chosen block size 
sparse vectors probability block zeros high runs blocks zeros receive special treatment 
represent succession bit blocks comprising bitmap sequence categories symbols block bit block includes bits represent special symbol previous method 
zero block representing block represent entire run zero blocks starts string integers follows suppose run consists zero blocks represented binary form zero 
run represented symbol sequence string integers power representation effect encodes run lengths 
frequency occurrence bitmap file special integer symbol recorded permitting huffman tree constructed gamma special symbols integer symbols 
bitmap huffman encoded tree 
hierarchical method compressing sparse bitmap proposed harder 
original bit vector length bits partitioned equal blocks bits delta blocks consisting zeros dropped 
resulting sequence non zero blocks allow reconstruction append list indices indicating non zero blocks occur original vector 
list indices kept bit vector bits position th block zeros 
compressed method 
words sequence bit vectors constructed bit result oring bits corresponding block gamma procedure repeated recursively level reached vector length reduces bytes 
compressed form obtained concatenating order decreasing nonzero blocks various method appears dimensional bitmaps level compression 
hierarchical method refined choueka adding pruning algorithm removes hierarchy tree branches pointing segments 
algorithm partitions set bits subsets class bits efficiently handled hierarchical method complementary class consisting isolated bits inclusion hierarchical tree structure expensive enumeration appended list 
classes may empty 
list long compressed variant prefix omission detail sub section 
noted map number runs zeros equal number bits plus size compressed file obtained methods clearly linearly related number bits original file 
hierarchical huffman coding methods relation evident empirically established 
observation consistent theoretical argument reinforces intention design preprocessing stage reduces number bits bitmap 
simple new method technique simple generalization prefix omission method suggested secondary compression list bits pruned tree 
viewed variant hierarchical method single level compression 
choose integer parameter partition original vector length blocks bits 
shall assume number bits bitmap hierarchical method construct new vector length bit zero block contains zeros 
storing non zero blocks substitute block string indices bits block 
priori bits sufficient storing relative index need additional bit index serve flag identifies boundary block 
addition fixed overhead storing vector bits needed representing bits block small number bits significant saving space result 
find optimizes size block chosen integer minimizes gammak size bits compressed bitmap 
appearance ceiling function finding minimum value directly difficult 
shall search integer minimizes related continuous function gammak convex function integer satisfies gamma examining left hand inequality find gammak gammak gammak log gamma 
similarly right hand inequality equivalent log 
combining find satisfy log gamma log blog file bitmaps want method encoding optimal determined average bits map 
total number bits compressed file blog ms total number bits bitmap set 
priori need equal easy see cost identical cost show note definition ceiling function 
minimizes 
exceed particular 
combining results fact minimizes get conclude true optimum results excess bit storage bitmap 
takes integer values integer difference gamma smaller equal zero storage implications values 
example suppose indices bits 
get optimal blog 
bits corresponding block bits bits second block relative indices bits fourth block relative indices blocks empty 
information kept indicates sequence number bits necessary store map theta 
need theta bits need theta bits 
note list relative indices sub range increasing order flag identifying index range needed 
example instance list stored relative indices clearly sublist corresponding second bit consists elements 
bit position list stored relative indices partition list increasing sub lists uniquely determined 

bitmap clustering motivation remarked times sparser bitmaps effectively compressed 
describe method reducing number bits making natural clustering bitmaps 
take advantage fact bitmaps associated sense presence bit map increases likelihood bit occurring position 
bitmaps strongly associated sense bitmap xor possibly fewer bits say store reconstruct advantage doing may able compress effectively original vectors 
intention xoring vectors reduce number bits useful take measure association vectors number bits xored vector 
quantity familiar hamming distance vectors 
maps close hamming distance sense want keep pair xor bar indicates maps compressed say method section 
retained information original bitmap recovered decompressing yields xoring xor described unchanged map compressed directly 
may quite close third map profitably xored third map producing pair 
continuing manner impose structure bitmaps represented directed graph vertices fx xm correspond bitmaps directed edge belongs compressed 
workable restrictions imposed 
map compressed xoring map outdegree vertex 
general graph satisfying condition possible form chain bitmaps denoting stored gamma stored 
situation prohibited want able recover original bitmaps starting arbitrary node chain terminate untransformed bitmap node outdegree zero 
words legitimate graph cycle free 
conditions impose strong structure legitimate graph 
fr set vertices outdegree zero define set vertices directed path includes connected empty path 
cycles directed path starting vertex eventually terminate reaching vertices 
vertex chain starting outdegree 
impossible components disjoint ft partition connected clusters bitmaps 
linkage pair suppose edge exists 
path exists connecting path exists connecting node member impossible 
isolated connected components conditions oriented tree defined knuth section 
forest bitmaps serve basis operations 
maximize compressibility want choose forest possible forests minimizes total number ones resulting bitmaps 
conceivably exist maps special internal structure yield better compression sparser 
quantitative relationship derived detailed bitmap characteristics compression sparseness best measure bitmap compressibility 
define quantity minimized total number bits roots plus total number bits xored bitmaps cost forest 
note adopting criterion prevents xoring vectors result increase number bits example extreme case set original bitmaps xored maps forest legitimate graph 
exhaustive search generating possible graphs satisfying constraints checking cost forest ruled grounds computational expense moderately large number bitmaps number ways partition maps clusters stirling number second kind see exercise 
asymptotically gamman gamma section summing potential number clusters find number partitions omega gamma 
get number possible graphs checked consider partition number ways organize cluster internally oriented tree 
fortunately search unnecessary problem equivalent known polynomial algorithms 
see recall roots number xored bitmap just hamming distance successor directed graph 
assign distance weight edge cost forest simply sum weights edges graph plus sum number ones root 
simplify statement problem noting number ones map hamming distance zero bitmap bitmap values zero denoted forest introduce zero bitmap include weighted edge root transforming forest tree cost original forest just equal sum edge weights edges resulting tree enhanced graph 
sum called cost tree 
weights significant computing cost consider tree non directed 
simplification defined weight edge depend orientation hamming distance measure 
directed forest set nodes define non directed tree fx having cost 
converse true 
note set vertices undirected spanning tree defines directed tree root directed tree directed edge directed tree path exists undirected tree 
removing edges incident directed tree obtain directed forest furthermore edge weights defined cost forest equal cost tree induced 
equivalence optimal forest associated optimal lowest cost tree 
problem equivalent complete non directed graph vertex set union bitmaps weight edge hamming distance vertices find tree total edge weight minimum 
directed forest induced tree solution problem 
formally looking graph forest oriented trees spanning vertex set optimizing problem 
find graph consider weighted undirected graph set vertices obtained adjoining new vertex zero vector set bitmaps theta gamma ignoring order complete graph self loops removed weight associated edge hamming distance define legitimate sub graph non directed tree connecting vertices task find legitimate sub graph sum weights edges minimized fact minimum spanning tree mst mst induces optimal directed forest original set bitmaps described 
vertices adjacent vertex roots oriented trees optimal forest seeking 
algorithms finding mst non directed graph appear literature ranging kruskal simple greedy algorithm case complexity log yao involved technique need log log operations application 
algorithm statement summarizing suggest procedure stage compressing set bitmaps xm method principle improves compression algorithm individual bitmaps provided assumption strong correlation maps holds 
output get table compressed bitmaps compressed form stored addition algorithm produces small table size defined map compressed father oriented rooted tree root trees 

choose compression method individual map bitmap result applied 
extend set bitmaps adjoining zero vector 

hamming distances weights complete graph self loops having fx xm set vertices compute minimum spanning tree 
consider oriented tree rooted 
subtrees partition original set bitmaps 

vertex adjacent root oriented trees bitmaps tree compressed directly bitmap root tree directed edge bitmap tree compressed computing xor compressing case set bitmaps ir system problems compression decompression exactly 
compression performed construction system applied entire set 
decompression hand practically needed simultaneously entire set maps associated keywords submitted query 
procedure decompress returns original map uses function gamma inverse compression function gamma decompresses bitmaps compressed decompress return gamma return gamma xor decompress see savings storage space gained clustering procedure come expense increased processing time 
order recover bitmap need decompress maps forming path root cluster belongs 

example database chose testing algorithm hebrew bible consisting words partitioned chapters 
number different words 
suggestion bitmaps constructed words appear fixed frequency threshold restricted words appeared chapters 
text segment defined set consecutive chapters 
resulting bitmaps bits long 
total number bits maps bits map 
compression technique section 
optimal parameter blog 
equation get total number bits needed store set bitmaps compressed form 
uncompressed file need theta bits simple method yields compression 
optimal method get compression get 
applied kruskal mst algorithm partitioned set bitmaps clusters 
singletons maps couldn effectively xored map compressed transformation 
bitmaps partitioned clusters containing elements 
cluster root compressed directly number bitmaps xored compression gamma 
total number bits decreased 
considering entire file bitmaps number bits decreased bits bitmap 
optimal parameter blog 
substituting values equation find total number bits needed store set bitmaps clustering method section 
relative file reduction relative method section clustering improvement 
interesting compare information theoretic estimate mentioned 
probability bit original file yielding entropy bit 
means bits appear frequency independently best possible compression 
got bitmaps compressed individually 
introducing clustering exploit dependencies different bitmaps yielding compression savings possible independently generated maps 
generated clusters small elements formed deep trees tens bitmaps largest consisted tree depth vertices 
closer look larger clusters revealed interesting associations 
shows typical example 
node tree hebrew word english tg respectively beth translation word english 
cluster words numerals clearly connected bible tends give exact dimensions note words length certain detailed descriptions 
see instance exodus description court root cluster 
depth tree maximal depth recursion decompression algorithm 
note root cluster high degree 
case seen example 
second example compact representation pre order traversal tree 
tree represented recursively root followed list subtrees enclosed parenthesis 
improve readability level root subtree full tree appears subscripts parentheses 
give english translation word node hebrew words translated english words 
night saw went men came sent said sat people went court wa perfect standing burnt offering ty ark ym length ba ym axt ty xm rh city sample cluster produced mst algorithm called came please gave hand took bread sat went elements cluster form tree depth node higher degree 
note words verbs related motion past tense third person singular plural 
tried apply algorithm sparser bitmaps defining segment chapters 
bitmaps total bits compressed gave compression 
clustering algorithm produced bitmaps xored reduction number bits total number bits remained quite large bits 
optimal shifted compression improved measured relative full file reduction achieved 
case theoretical optimum independently generated bitmaps bit density 
order check influence language database algorithm repeated experiments king james bible segment equal chapter 
improvement clustering method case small number bitmaps xored 
interesting clusters 
example asher joseph simeon levi benjamin dan cluster contains names tribes 
appears cluster words jerusalem kings clearly differs tribes name refers kingdom land 
summarizing experiments see clustering algorithm works better bitmaps sparse sparse vectors tend overlapping bits gain achieved xoring 
sparse vectors known techniques yield excellent results 
clustering algorithm helps especially maps difficult compress 

variants limited number trees depth consider possibility time space tradeoffs intermediate clustering fast decompression needing space clustering mst reducing storage requirements slower decompression 
problems forest structure section number clusters may fairly large 
fact maps don benefit xoring map form singleton clusters 
practical application may want limit number clusters cluster index represented just bits 
problem mst approach trees produced may deep seen examples previous section trees decompression time bitmap proportional level tree 
desirable create trees similar ones discussed restricted number constrained small depth shall examine case maximum depth 
corresponding forest necessarily optimal space complexity probably increase hand additional map needed decompressing map gain speed 
new variant described precisely follows 
suppose partition file bitmaps mutually disjoint clusters cluster map chosen representative mapping pi fb partition terms preceding discussion corresponds tree depth root tree associated compressed directly stored 
bitmap xored representative result compressed stored index cluster belongs 
problem find partition clusters selection designated representatives savings greatest 
efficient optimal solution problem believe hard 
support assertion approximate problem similar show second problem hard 
expect partitions certain reasonable properties 
way identify partition searching partition satisfies set properties 
define second problem illustration approach 
hamming distance maps hd measure dissimilarity 
revised problem find partition sets select representatives properties satisfied total number bits representatives hd minimized sum distances map corresponding representative cluster belongs hd minimized clusters different sense distance representatives different clusters bounded constant 
sight restricted problem easier previous number depth trees restricted locate optimal member larger set 
partition clusters check possible choice representative generating spanning trees cluster 
show appendix restricted problem finding optimal partition np complete implies probably feasible polynomial algorithm available 
optimizing problem define corresponding decision problem 
hdc hamming distance clustering instance set bitmaps length bits integers question partition disjoint subsets bn representative satisfying conditions representatives sparse hd total distance bounded hd cluster representatives close hd terms representatives map best possible cluster hd min ng hd theorem 
hdc np complete 
proof partition clusters condition checked time conditions time condition time 
hdc np 
reduction problem known np complete see dm dimensional matching instance set theta theta disjoint sets having number elements 
question contain matching subset jm elements agree coordinate 
show dm hdc 
consider arbitrary instance dm 
construct instance hdc 
create set bitmaps follows bitmap element jm bitmap positions positions corresponding elements elements elements bitmap corresponding element positions corresponding zeros bitmap consists exactly gamma zeros 
set gamma suppose exists matching denote rows corresponding matching representatives clusters respectively 
define partition way 
map gamma overlapping representatives say included unique 
choose unique map qg leftmost bit position include cluster 
bitmap contains exactly bits particular true hd 
remaining gamma maps gamma map overlapping representative cluster belongs hd respectively 
hd gamma 
correspond different elements matching overlapping hd condition follows directly construction obvious fact map overlapping map 
conversely suppose partition clusters representatives satisfy 
define elements corresponding bitmaps hd bits map bits identical positions 
corresponding elements agree coordinate elements follows set matching 
artificial representatives suppose find partition set bitmaps clusters similar bitmaps 
choosing element cluster representative processed differently maps cluster construct new artificial bitmap cluster act cluster representative 
adapted optimally fit entire cluster 
maps cluster processed way 
original problem quantity try minimize number bits maps obtained xoring original maps respective plus number bits representative set clusters easy find optimal proceed adjoining bitmap containing zeros cluster 
problem bitmaps cluster create vector hd minimized included ones included sum 
minimization carried individually bit position 

looking jb gamma minimized 
optimal obtained original simple majority vote 
half bits th position maps ones 
tie majority values zero zero 
value represented compactly 
special case known result median set numbers value minimizes sum absolute derivations value 
just saw partition clusters easy construct set representatives majority rule 
converse problem set representatives find optimal partition clusters 
easily done checking bitmap representative closest 
determine optimal representatives clusters restrictions number bits representatives np complete problem 
partition clusters fixed density instance set fb bitmaps length bits integers gamma integer question partitioned clusters gamma exits representative cluster exactly bits total hamming distance bounded gamma hd 
theorem 
np complete 
proof partition representatives condition easily checked np 
reduction partition problem 
par partition instance set positive integers fa question subset kg gammaj odd partition problem trivial assume 
show par 
letting instance par construct instance 
set define set binary vectors length way delta delta delta delta delta delta delta delta delta gamma times times times vector consists order gamma zeros followed followed zeros convention gamma suppose exists set required 
ffi ij defined ffi ij ae construct vector consist order occurrences ffi followed occurrences ffi followed am occurrences ffi mj define binary complement number number cluster associated cluster represented summing hamming distances get hd gammaj hd gamma gamma shows partitioned required definition 
conversely suppose maps partitioned clusters exist representatives bits total hamming distance bounded bits hamming distance gamma minimum achieved bits positions bits 
true hand hamming distance greater gamma representative cluster belongs total hamming distance larger gamma follows bits positions maps belonging corresponding clusters bits 
hand bits positions positions bits maps cover positions bits binary complement bits arranged blocks corresponding bit positions covered vectors reformulated hd gamma hd gammaj define set contain indices maps overlapping bits representatives say hd gamma positions bits different mutually disjoint positions bits included set positions bits number bits equal number bits 
gammaj equal gamma 
gammaj shows set partitioned requested 

new algorithm transforming set bitmaps principle may improve previous compression method take account possible interrelationships different bitmaps 
experimental results suggest new method particularly effective bitmaps extremely sparse 
may applications 
example bit slices signature methods chosen density bits 
vectors impossible compress individually 
may possible gain clustering 
possibility compression permit increase size signature resulting efficient retrieval affecting space requirements 
application ir bitmaps slightly compacted maps obtained applying iteration hierarchical bit vector compression technique referred section 
applications areas outside ir image compression adjacent raster rows may similar processing genetic information different dna strings share long identical substrings 
noted situations put constraints graph structure produced algorithm 
concluded restricted problem probably intractable reasonable time justified search feasible heuristics 
heuristics investigated research 
abramowitz stegun handbook mathematical functions dover publishing new york 
bell witten cleary modeling text compression acm computing surveys 
bookstein klein bitmaps medium sized information retrieval systems appear inf 
proc 
management 
choueka fraenkel klein segal improved hierarchical bit vector compression document retrieval systems proc 
th acm sigir conf pisa acm baltimore md 
choueka fraenkel klein segal improved techniques processing queries full text systems proc 
th acm sigir conf new orleans 
faloutsos signature files access method documents analytical performance evaluation acm trans 
office inf 
systems 
fraenkel klein novel compression sparse bit strings combinatorial algorithms words nato asi series vol springer verlag berlin 
garey johnson computers intractability guide theory np completeness freeman san francisco 
jakobsson huffman coding bit vector compression inf 
processing letters 
klein bookstein deerwester storing text retrieval systems cd rom compression encryption considerations acm trans 
information systems 
knuth art computer programming vol fundamental algorithms addison wesley reading mass 

kruskal shortest spanning subtree graph travelling salesman problem proc 
amer 
math 
soc 

hirschberg data compression acm computing surveys 
compression large inverted files hyperbolic term distribution inf 
proc 
management 
mathematical analysis various superimposed coding methods amer 
documentation 
storer data compression methods theory computer science press rockville maryland 
compression method clustered bit vectors inf 
processing letters 
bit maps multiple key retrieval sigplan notices special issue vol 
ii 
harder ii 
mannheim 
yao jej log log jv algorithm finding minimum spanning trees inf 
processing letters 

