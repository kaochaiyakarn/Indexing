invited bases de donnes th french database conference toulouse extending transaction management capture consistency better performance gerhard weikum department computer science eth zurich ch zurich switzerland mail weikum inf ethz ch surveys extended transaction management 
focusses transaction oriented applications large distributed heterogeneous information systems applications span multiple autonomous databases 
environment challenge reconcile data consistency acceptable performance best extent possible may imply trading consistency versus performance controlled manner 
approach decompose long user interaction independently executed transactions provide additional control sphere glue transactions 
additional control sphere usually referred activity transactional workflow 
workflow management serves specify enforce certain types execution dependencies transactions workflow captures behavioral consistency properties application 
second approach execute long user interaction transaction order guarantee data consistency relax isolation atomicity properties transaction controlled manner order achieve acceptable performance 
approach usually referred semantic transaction management exploiting semantics operations invoked interaction 
discusses approaches covering correctness implementation issues 
semantic transaction management address complementary issues suggested appropriate building blocks directions merged integrated architecture 
need extending transaction management transaction concept underlying acid properties atomicity consistency isolation durability hr bhg proven great value commercial data processing years viewed key concept distributed client server computing gr 
past decade research topic extended transaction management known advanced relaxed transaction management emerged database community extend transaction concept conventional data processing bk el el hsu 
research direction motivated observations 
advanced database applications engineering office automation management scientific data exhibit workload characteristics quite different characteristics conventional business applications supported classical form transactions 

conventional advanced applications may span multiples databases developed independently enterprises 
entails problems large distributed heterogeneous systems emphasis autonomy involved databases 

distributed heterogeneous information systems grown size manageability relationships data transaction programs critical issue br day 
systems referred legacy systems may tp monitor umbrella spanning multiple database systems application systems 
tp monitor controls execution transaction programs knowledge relationships transactions scattered typically huge body application programs 

advanced applications cad case need organizing cooperative addition competitive concurrent units 
requirements lines addressed direction computer supported cooperative cscw 
concentrate applications retain characteristics classical transaction processing exclude application classes require concepts fundamentally different probably incompatible transaction concept especially cscw applications 
refer set database operations invoked behalf user request interaction avoid frequently biased terms activity transaction 
interaction may involve multiple dialog steps multiple systems possibly multiple human users recipients messages 
assume effects interaction visible users soon possible opposed overnight batch processing exposing certain intermediate possibly inconsistent states cause unacceptable interference interactions 
interactions require kind transaction bracketing combine multiple queries updates possibly multiple dialog steps multiple systems processing unit guarantees consistency properties 
processing units orders magnitude longer example tpc transactions debit credit usually span days weeks 
characteristics kind interactions consider may appear fairly conservative hold number important challenging applications risk assessment banking optimization material flow computer integrated manufacturing value added telecommunication services hospital federal health care information systems application classes principle supported reasonably classical transaction concept underlying implementation techniques simply executing interactions transactions 
claim certainly hold cscw 
practical point view severe objections approach 
length interactions complex structure underlying data inevitably lead unacceptable performance excessive conflicts potentially long blocking 

heterogeneity autonomy various systems may accessed single interaction pose additional problems lmr sl bgs 
point probably viable solution heterogeneity problem rely fact commercial database systems commit order preserving concurrency control protocol bgs raz support standardized phase commit protocol tp xa 
global transactions force multiple systems phase commit protocol affect execution autonomy involved systems ultimately performance local transactions unacceptable manner sks 

addressing problem manageability large legacy systems avoiding similar problems information systems requires additional control sphere transactions 
approaches reconciling consistency performance lines research address problems 
approach views interaction set transactions executed independently transaction usually span database boundaries 
additional control sphere introduced approach provide glue transactions 
additional control sphere usually referred activity script transactional workflow term workflow 
approach avoids performance problems long transactions especially multiple databases treating interaction set independent transactions acid properties classical guarantees respect data consistency completely 
deficiency transactional workflow models introduce dependencies transactions constitute workflow 
dependencies capture aspects behavioral consistency workflow provide degree data consistency classical transaction model guarantee 
particular possible interference concurrent interactions controlled line models 
hand explicitly modeling workflow behavior contributes manageability large collections data centered application programs 
second approach starts conservative position interaction correspond single transaction order preserve acid properties possible 
performance problems default case alleviated carefully relaxing isolation atomicity interactions semantics application 
ideally net effect relaxed interaction achieves performance terms minimizing conflicts concurrent interactions interaction decomposed multiple transactions 
refer interaction kind semantic transaction 
approaches deal viewed intermediate points spectrum possibilities perfect consistency possibly unacceptable performance performance expense overly relaxed consistency 
big challenge research area develop thorough understanding tradeoffs spectrum consistency performance levels reconcile consistency performance best extent possible 
overview surveys extended transaction management aims point relationships different approaches 
particular discuss outlined directions flows semantic transactions detail 
discussion covers correctness guarantees various approaches give sections basic implementation techniques achieve performance section 
obvious directions complementary cover different aspects problem overlap 
concludes preliminary ideas architecture combines workflow management semantic transaction management aiming integrate appropriate building blocks directions 
note claim cover relevant issues increasingly broadening area extended transaction management 
probably raise problems offers solutions reflecting current state art evolving field 
workflow specifications workflow models essentially decompose interaction set classical acid transactions 
typically dialog step respect database separate transaction 
weak form bracketing set transactions unit processing supported tp monitors gr 
execution model supported tp monitor known queued transactions chained transactions 
allows transaction request execution independent transactions called detached transactions sending messages handled tp monitor recoverable message queues 
major part controlling control data flow independently executed transactions typically buried code application programs 
note approach provide strong guarantee data consistency especially databases 
application programs users need anticipate certain kinds inconsistency deal highly application specific manner 
example flight reservation dialogs typically broken sequence transactions gs 
may result inconsistent situations travel agent tells seat certain flight available fails reservation minute flight fully booked 
inconsistency dealt intellectually travel agent apologize try best find alternative flight 
complex situations cim risk management banking dealing inconsistency level application programs highly trained humans difficult cumbersome 
strong need clean methodology trading consistency versus performance analyzing predicting resulting effects 
problems addressed new research direction transactional workflow management known activity management hsu 
approach viewed outgrowth generalization queued transaction model current tp monitors 
tp monitors additional objective provide consistency guarantees specifying certain types execution dependencies transactions workflow 
dependencies capture behavioral properties workflows notably control data flow transactions acceptable termination states transactions constitute workflow 
respect modeling transactional workflows highly related areas concurrent object oriented programming see ag ts petri net specifications see pe ge conceptual modeling business processes information dynamics see br ks olle rfb rr 
research category transactional workflows includes example variations sagas gs ga see wa contracts wr flex ible transactions buk acta framework cr cr cr dom model bu ghk models long running activities dhl dhl transaction dependency rules kl ch ja inter task dependencies srk woe 
rest section discusses correctness issues interactions captured workflow specifications 
workflow models proposed literature aim capture certain types execution dependencies transactions interaction 
group dependencies categories discussed subsections note merely preliminary attempt classification relatively immature state art area 
illustration example scenario sketched subsection 
rest section refer interaction transactional workflow transactions workflow steps 
terms step transaction synonyms section consistent literature transactional workflows 
example scenario consider extremely simplified example processing bank loan request involving steps correspond transaction workflow approach step accepts input parameters bank agent identity client requests loan amount currency requested enters request database 
ccr step retrieves client information possibly multiple databases including databases owned bank financial enquiry agencies assesses client credit rating 
note step may quite complex terms data accesses computation 
example client international owns shares companies belongs holdings credit rating take account loans granted involved companies previous annual balance sheets current price companies stocks re step evaluates bank risk result approving loan 
seemingly harmless step may fairly complex operation involves information bank total involvement respect client client country currency loan request risks various categories quantified compared certain pre specified limits exceeded 
ru step increments bank various categories total involvement order reflect loan request processed 
step invoked previous step returned positive result risk acceptable 
rx step may invoked regular risk evaluation step negative result executed properly temporary unavailability data 
circumstances executive officer loan department may exceptionally approve risk negative cient information client generally known excellent shape 
note example step involves human interaction mail phone personal communication person initiator workflow 
rc step compensate step loan request eventually rejected having updated total involvement information 
note compensation simply restore original data prior step separate transactions 
compensation needs decrement total involvement data 
addition previous steps led modifications risk limits loan requests particular currency modifications may undone necessarily depending compensation defined case 
provided steps returned positive results bank agent reasons reject loan request step enters approval decision returns output parameters loan agreement number possibly printed documents 
rejection loan request recorded database 
note step may reject loan request client credit rating risk evaluation positive 
note loan request example characteristics application classes consider see section multiple agents may invoke competing loan request interactions simultaneously interactions involve possibly heterogeneous databases consistency bank data total client credit rating crucial importance correct processing loan requests bank business interactions described kind executed ideally minutes hours 
control flow data flow dependencies dependencies essentially form transaction tj start executing transaction ti terminated transactions ti tj may execute parallel transaction tk start executing ti tj finished 
dependencies kind expressed precedence graph nodes representing transactions edges representing ordering constraints 
precedence graph loan request example depicted 
note contains ambiguities 
example parallel branching alternative branching properly distinguished 
steps optional invoked certain conditions 
meaning edges specified exactly 
purpose indicate flavor workflow specifications proposed literature 
fact quite proposed models precisely defined 
certainly lack formal foundation relatively new area transactional workflows design defined workflow specification language open research problem 
example rigorous form workflow specification high level petri net variants predicate transition nets proposals pursuing 
addition simple control flow dependencies data flow transactions specified additional control flow dependencies data passed enter risk exception risk evaluation risk update enter decision rating input parameters output parameters risk correction execution precedence graph loan request workflow tween transactions 
example step pass amount currency loan request step step executed amount exceeds significance threshold 
control flow constructs loops richer data flow methods streaming set valued data added specification repertoire reach expressiveness general purpose concurrent programming languages 
best knowledge wealth control flow data flow constructs currently supported contracts model wr 
note point control flow data flow dependencies computational structure interaction explicit express declarative manner today transaction processing systems computational structure typically scattered code underlying application programs 
contingency dependencies dependencies form transaction ti executed aborted commits negative result return value different ok execute transaction tj contingency step 
example express step executed step returns negative result executed completion 
note workflow models literature unfortunately referred negative transaction return value transaction failure transaction abort 
important distinguish semantic failures achieving goal transaction system enforced aborts context transaction commit execute successfully system point view semantically negative result 
strictly speaking contingency dependency boils special kind control flow dependency conditional execution transaction depending return value termination status previous transactions 
transaction termination dependencies dependencies refer termination states transactions 
transaction terminates states committed positive result semantic success committed negative result semantic failure aborted system internal reasons program errors termination dependencies general form transaction ti termination state possibilities transaction tj termination state possibilities 
specific cases class dependencies received particular attention literature commit dependencies abort dependencies cr kl 
case describes dependency success termination states transactions ti commits positive result tj commit positive result 
second case describes dependency failure termination states transactions ti commits negative result aborts tj commit positive result 
example specify step eventually executed committed initial step committed semantic failure abort step force step fail semantically commit negative result 
note confusion caused literature carefully distinguishing semantic failure success transaction abort commit transaction see subsection 
transaction metamodels acta cr refer commit abort dichotomy describing example general properties nested transaction model specification languages application workflows refer semantic result transactions 
case commit abort dependencies better called success dependencies failure dependencies respectively 
explicitly referring possible termination states states failure success refined meaning transaction dependency stated precisely 
compensation dependencies special case transaction termination dependencies distinguished explicitly form transaction ti committed subsequent transaction tj fails semantically aborted consequence effects transaction ti need undone transaction ti executed guaranteed commit eventually order compensate ti 
additional transaction ti usually referred compensating step compensating transaction gr ga 
example step loan request workflow compensating step step 
actual semantics compensation usually known application workflow management aware correspondence forward step compensating step enforce kind compensation dependencies 
vitality dependencies addition establishing relationship termination states transactions may want relate termination state distinguished transactions termination state entire workflow 
possible termination states entire workflow include generic success generic failure state states refined values workflow output parameters 
state dependencies form transaction ti fails semantically aborts entire workflow fail terminate semantic failure state 
transaction ti property called vital transaction ga 
loan request example step vital transaction 
workflow models support variations allowing workflow specification designate multiple possibly overlapping subsets workflow transactions vital 
acceptable termination states dependencies set termination vitality dependencies workflow determine set acceptable termination states transactions constitute workflow 
loan request workflow set acceptable states include example state succeed fails disallow example states fails succeeds 
specification captures certain properties behavioral consistency viewed necessary sufficient condition establishing data consistency workflow terminates 
aspects behavioral consistency captured control flow data flow dependencies 
combination control flow termination dependencies gives rise class dependencies call termination order dependencies 
example require transaction ti commits positive result transaction tj commit positive result commit ti 
note non trivial requirement ti tj ordered actual control flow dependencies execute parallel 
easily conceive types dependencies relating transaction executions termination states external information time referred temporal dependencies starting committing particular transaction specified time interval 
inter workflow dependencies major shortcoming workflow models address problem possible interference multiple instances different workflows executing concurrently 
severe problem cause loss data consistency affect consistency data view workflow operating 
workflow model addresses problem contracts model supports specification invariants steps wr 
steps explicitly specified pre postconditions predicates referring database values intermediate results external information 
specifying precondition step subsume postcondition previous step assuming sequential execution simplicity interference workflows controlled 
example specify postcondition step form result step positive current total involvement plus amount requested loan exceed risk limits precondition subsequent possibly stronger predicate stating condition invariant steps 
pre postconditions automatically checked contract manager violation precondition corresponding step denied 
may turn cause actions compensating previous steps depending specified conflict resolution policy 
example possible steps concurrent loan request workflows return positive result loan requests approved exceeding risk limits 
conflict detected checking precondition subsequent steps step denied 
technique viewed generalization simpler predicate concurrency control methods suggested high performance transaction processing gk prs 
semantic transaction models semantic transaction approach aims reconcile improved performance data consistency executing entire interaction single transaction relaxing acid properties transaction controlled manner 
approach analyzing exploiting semantic properties data access operations invoked interaction 
effect similar chopping long interaction chain transactions defined consistency guarantees case 
types approaches category classification sz 
specification application semantics exploited transaction interleaving approach data operation approach 
transaction interleaving approach transaction interleaving approach ga ly sz allowable interleavings transactions directly specified combinations transaction types 
example consider customer report transaction reports balance checking account savings account customer 
assumes funds transfer transaction access accounts customer may specify operations customer report transaction freely interleaved withdraw deposit operations funds transfer transaction 
problem approach complexity specification 
generally allowable interleavings depend consistency requirements transaction types take account combinations possibly concurrent transactions pairs transaction types 
realistic applications hundreds transaction types necessary analysis require tremendous human effort 
second problem maintenance interleaving specification new transaction types added 
currently methodology maintaining specification incrementally repeating complete analysis allowable interleavings 
problems addressed extent transaction chopping approach aims derive interleaving specification automatically data access patterns transaction types sql level 
approach ensure serializability original transactions chop transactions multiple independent subtransactions ex knowledge transaction context 
similar effect achieved exploiting equivalence rules sequences operations vv av 
general transaction interleaving approach hand relax isolation transactions flexible manner lacks formal derivation 
data operation approach data operation approach specification isolation guarantees conflict relation pairs semantically rich data access operations invoked interactions data objects viewed instances data types ss 
allowing semantically rich operations invoke operations objects leads model open nested transactions gr gr bsw bbg wei ws traced back seminal spheres control davies da 
typically conflict definition reflects general state independent commutativity operations considers name input parameters operations ko ss 
addition state dependent commutativity may exploited example considering return values operations gk hw refined considering sided commutativity br 
cases allowable interleavings transactions derived conflict relation commutative pairs operations freely reordered 
go step declaring non commutative operations compatible conflict free different effects possible execution orders considered negligible application point view pair deposit withdraw operations accounts protection penalty say charged withdraw operation results negative balance 
compatibility may property explicitly declared human application expert case may formally derived specification pre postconditions operations aes 
develop concurrency control methods enforce upper limit number compatible non commutative operations order respect serialization order transactions 
type bounded inconsistency guarantee known epsilon serializability pl 
commutativity compatibility semantics bounded inconsistency may easy rationalize application point view 
believe data operation approach practical transaction interleaving approach essentially context free considers pairs operations context transaction types operation sequences simplest case 
provided operations data objects organized modular way data types compatibility specification modular 
specifications manageable puts burden designer transaction application system 
subsections discuss correctness guarantees semantic transaction models 
concentrate data operation approach reasons practical feasibility 
main idea approach relax isolation atomicity transactions providing defined guarantees respect possible interference transactions 
refer guarantees semantic serializability semantic atomicity 
properties ensure data consistency provided individual transaction consistency preserving single user failure free execution 
semantic serializability assume compatibility specification data operations provided administration staff database usually form table 
compatibility operations means ordering operations schedule insignificant application point view 
operations may invoke operations databases 
example withdraw operation may offered interface bank application system dynamically expanded sequence sql operations update balance account update derived data branch totals 
transactions considered trees operation invocations edges representing caller callee relationship transactions operations different levels 
model considered dealing method invocation hierarchies transaction management object oriented database systems cf hh mu 
children transaction root viewed subtransactions nested transaction model 
subtransactions may committed effects visible transactions independently commit transaction root name open nested transactions 
believe semantic transaction model particularly appropriate multi database environments federation high level requestor server architecture 
top level operations global transactions assumed explicitly exported underlying databases subtransactions correspond executions exported operations single database jo veh 
model may appear fairly restrictive autonomy reasons desirable restrict operations invoked global transactions 
example airline bank rental car agency allow corporations departments access manipulate data means sql statements restricted access permissions views 
real life examples multi database interoperability high level requestor server model gr ga veh 
model schedule set transaction trees execution order invoked operations nodes trees 
schedule called semantically serializable equivalent serial execution transaction roots sense bbg serial execution stepwise constructed original execution rule compatibility operations exchanging order subtrees ordered adjacent respect execution order roots compatible operation invocations belong different transaction trees rule reduction isolated subtrees reducing isolated subtree root subtree called isolated descendants serial entire subtree ordered respect operations interleaved subtrees 
re ru re ru compatibility matrix loan request operations example consider loan request scenario subsection 
entire loan request viewed single transaction steps loan request interaction correspond operations equivalently subtransactions 
assume compatibility matrix subset operations shown denotes compatibility denotes conflict 
schedule concurrent simplified loan request transactions shown execution order left right 
sql operations insert select update invoked loan request steps abbreviated ins sel upd respectively operations omitted ease presentation 
schedule serializable terms sql operations leaf level conflict cycle due updates data objects tuples relational database schedule semantically serializable equivalent serial execution preceding proven applying compatibility reduction rules follows 
compatibility rule allows swap order update operation operation preceding insert operation isolating subtrees rooted operations 
resulting schedule subtrees level loan request operations isolated prune leaf level applying reduction rule 
apply compatibility rule loan request operations pushing forward operations follow operation 
effect isolated trees follows 
prune loan request operation level eventually shown original schedule equivalent serial execution preceding 
semantic transaction model subsumes relaxed isolation model sagas gs workflow models special case 
assume operations possibly invoked transaction roots specified compatible conflicts top level operations 
case conditions transactions correspond sagas serializability saga steps sufficient guarantee semantic serializability ultimately data consistency 
ins 


ru 
ru 
semantically serializable schedule ins 
re 
sel sel re 
sel sel upd upd ins 


ins 
upd upd upd upd semantic atomicity semantic transactions aborted invoking additional compensating operations 
assume compensating operation specified operation defined rules deriving actual input parameters compensating operation actual input parameters return values corresponding forward operation 
compensation achieves semantic atomicity sense 
schedule operation invocation compensated operation invocation return values subsequent operation invocations executed 
similar relaxing commutativity compatibility definition compensating operation may relaxed follows 
subsequent operation invocation may different return values observable differences acceptable application point view 
example cancellation order need undo possible inventory triggered order 
reason interference compensating operations forward operations concurrent executions model semantic transactions extended follows 
schedules augmented making recovery related operations explicit operations 
compensating operations including children added corresponding transaction trees bsw wei see mgg similar models 
addition compatibility reduction rules rule introduced 
rule compensation operations compensating operation forward operation immediately follows schedule isolated discarded transaction tree 
compatibility reduction compensation rules reason equivalence schedules compensating operations 
correctness criterion requires schedule stepwise transformed serial execution committed transaction roots applying rules 
implementation issues workflow management implementation issues workflow management manifold 
basic issue certainly scheduling steps specified control flow data flow dependencies 
scheduling example interpreting form high level petri net 
alternatively dependencies encoded finite state automata drive execution 
event triggering techniques active databases see dhl cha applied scheduling workflow steps 
implementation techniques cover dependency types discussed sections including compensation dependencies 
basic scheduling steps adding support distribution fault tolerance high performance poses challenging problems 
distributed execution transactional workflow requires form reliable communication steps 
ideal building block transaction oriented remote procedure call rpc ensures atomicity sending request message executing step delivering result message 
transaction oriented rpc supported prototype systems ems commercial successor sh wr contracts run time system probably supported growing number commercial tp monitors 
general fault tolerance requires mechanisms addition reliable communication 
ensure forward continuation workflow site crashes transactional events steps need recorded reliable log wr 
recover correct execution state respect control flow data flow steps context step needs logged critical points 
context contains data passed step contents step program variables re initialized step needs repeated failure environmental information handles open files persistent management context supported primitive form tp monitors implementing conversational transaction chains making support requires explicit application level programming systems writing scratch pad area gr 
achieve high performance ensure large distributed systems implementation techniques issues chosen carefully 
doing build knowledge experience gained conventional transaction processing gr 
particular techniques existing tp monitors high importance efficient workflow management example management recoverable queues 
conventional techniques efficient concurrency control ensuring isolation bhg gr carried transactional workflows directly follows prevailing assumption step workflow separate transaction terms isolation properties 
requires stronger guarantees isolation consistency advanced techniques needed concurrency control 
techniques discussed subsection semantics isolation consistency preservation entire interactions built features line extended transaction models 
discussed implementation issues workflow management part operation systems 
support transactional workflows provided distributed infrastructure layer coined middleware 
layer generalize functionality current generation tp monitors aims integrate services techniques discussed 
semantic transaction management concurrency control proven way efficiently implementing concurrency control means locking gr 
usual techniques implementing locking carried semantic transactions 
operation may invoked interaction semantic lock mode introduced state independent commutativity operations translated compatibility lock modes ko ss 
attention paid fact operations necessarily indivisible may invoke operations 
ensure isolation invoked top level operations operations treated subtransactions additional low level locks acquired operation execution released subtransaction 
low level locks conventional page record locks correspond page record accesses resulting operation execution low level locks turn refer semantically rich operations lower implementation level 
case subtransactions nested operation invocation tree open nested transaction 
lock unlock calls entire transaction tree subject nested phase locking protocol mgg ws wei conflict potential locks typically decreases higher levels lock duration decreases lower levels 
exploit state dependent commutativity special lock techniques escrow locking aggregate data counters 
amore general technique exploit return value commutativity executing operation isolated subtransaction incorporating operation return value semantic lock corresponding conflict test acquired right commit subtransaction 
powerful approach incorporate tractable restricted form predicates semantic locks 
general case optimistic check revalidate technique alternative predicate locking protocol gk prs 
essentially implementation technique proposed workflow invariants contracts model wr see subsection 
note locks may managed lock manager responsible deadlock detection 
note may possible exploit specific knowledge data access patterns certain subtransactions 
usually hard predict access pattern entire transaction information may available subtransactions correspond specific operations 
example non phase locking protocol bhg may feasible subtransactions sequential tree traversal access patterns 
extreme case subtransaction accesses single data object may simple latching synchronization light weight semaphores mo gr full fledged locking 
latching protocols may certain forms subtransactions access objects pre defined order ml 
recovery compensating subtransactions necessary handling transaction aborts crash recovery system failure 
important prerequisite regular subtransactions compensating subtransactions atomic 
recovery crash may faced database state sufficiently consistent perform necessary high level undo steps 
example storage structures complex object may contain dangling pointers derived data may partially reflect primary updates 
subtransaction modifies multiple pages low level recovery mechanism page level necessary order provide subtransaction atomicity 
problem challenging straightforward implementation recovery may cause excessive logging diminish benefits enhanced concurrency semantic transactions 
believe extended transaction models address implementation problem 
generally method kind multilevel recovery satisfy requirements 
ensure transactions atomic 

ensure transactions persistent 

ensure subtransactions atomic 
db redo log undo log transactions subtransactions page actions page undo information page cache page buffer log buffer implementation architecture semantic transaction management semantic undo information semantic lock table page lock table common log alternatively note subtransactions persistent commitment transaction belongs 
addition requirements correctness performance requirement reasonable order guarantee acceptable recovery time high availability data 
redo committed transactions performed page level reconstructing pages re executing potentially resource intensive high level operations 
architecture meets requirements shown 
requirement semantic undo log records written undo log file 
log records contains information compensating subtransaction necessary undo subtransaction 
log records transaction chained backward chain handling aborts performing transaction undo crash 
addition operation log records transaction log records written completed committed aborted transactions 
requirements redo log records written page level log file 
efficient way implementing requirement sure redo log records subtransaction set page images written atomically page level redo log 
redo information page oriented page locks released early take care writing redo log records subtransaction violate atomicity subtransactions 
solution problem combine dynamically redo information multiple subtransactions persistence sphere written atomically log 
details method aspects implementation multilevel logging described hw wh see highly related aries mo mlr lo 
described multilevel logging architecture implemented separate log files page level redo semantic undo log records logs physically combined single log file 
depicts alternatives 
system crash redo log processed forward pass subsequently semantic undo log processed single backward pass 
undo pass care taken invoke compensating subtransaction state contain effects original subtransaction compensated 
methods dealing problems discussed mo wh 
distributed multi database issues lock concurrency control log recovery carried distributed environment fairly easily 
addition course distributed commit protocol gr needed ensure atomicity distributed transactions possibly distributed subtransactions 
environment multiple autonomous databases semantic locking semantic undo logging top level operations built top involved database systems resulting subtransactions dealt database systems 
concurrency control point view correct long involved systems concurrency control protocols ensure commit order serializability bgs raz allow transactions bypass semantic locking layer top systems 
bypassing allowed additional handshakes need established semantic locking layer underlying database systems mu 
atomicity durability multi database transactions guaranteed semantic logging recovery component top involved database systems transaction undo implemented compensation 
atomicity subtransactions important prerequisite correctness compensation higher level recovery guaranteed easily executing subtransaction transaction underlying database system 
special handshakes similar log sequence numbers needed layers recovery test applicability log record ensure idempotence recovery steps 
recovery approach need distributed commit protocol top underlying database systems wv top level operations necessarily compatible 
consequently semantic locks top level operations held global commit protocol 
may appear severe impact execution autonomy participating systems fact inevitable global data consistency maintained 
important notice performance penalty result conventional commit protocol multiple databases alleviated drastically sketched approach database internal locks records pages released subtransaction semantic locks lower conflict probability held duration entire transaction 
examined major directions area extended transaction management 
direction workflow management views interaction set independently executed transactions various types execution dependencies transactions 
essence dependencies capture behavioral consistency possible declarative manner 
contributes consistency preservation data virtually workflow models contracts disregard possible interference multiple concurrent workflows guarantee full data consistency 
enforcing execution dependencies workflow specification reasonably efficient manner may hard impossible dependency specification language expressive 
workflow models literature capture crucial dependency types avoid complexity general purpose concurrent programming 
finding appropriate compromise expressiveness tractability research challenge 
issue crucial importance practical point view general deficit theoretical underpinnings workflow models 
previous foundations concurrent programming modeling information dynamics active databases may useful petri net theory temporal logic 
second direction semantic transaction management conservative views interaction single transaction 
application point view guarantees respect data consistency strong classical transaction paradigm 
key achieving acceptable performance compromising consistency exploit semantics application operations 
approach offers important advantages workflow direction 
correctness criteria semantic serializability semantic atomicity precisely defined understood build relatively developed theory 
second proven implementation techniques classical transaction management adapted generalized concurrency control recovery semantic transactions including fair amount distributed multi database environments 
advantages claimed workflow approaches 
hand semantic transaction management consider control flow data flow semantic operations guarantees behavioral consistency large multi database applications 
characterizations workflow management semantic transaction management follows directions cover complementary aspects 
obvious appropriate building blocks directions merged integrated architecture 
specification level means high level operations interaction viewed steps workflow subtransactions semantic transaction time 
control flow data flow dependencies termination dependencies steps taken care workflow part combined model 
recall termination states sense refer semantic success failure merely system oriented commit abort dichotomy 
ramifications committing aborting subtransaction step system oriented sense addressed workflow semantic transaction direction 
believe issue dealt better semantic transaction management component 
particular correspondence forward steps compensating steps expressed easily level operations compensating operation scheduled semantic recovery mechanism explicit request entire interaction automatically having interpret form compensation dependencies 
analogous arguments implementation point view 
necessary information compensating operations recorded system log time corresponding forward operation finishes execution need establishing explicit data flow forward step compensating step 
potential overlap workflow management semantic transaction management treatment data consistency steps 
noted workflow model really addresses issue contracts model 
model invariant predicates specified hold steps allows detecting possible interference concurrent workflows 
full generality predicate approach may pose severe problems respect ease specification efficient implementation 
operation compatibility approach semantic transaction direction hand handled fairly modular way implemented efficiently 
may conceive compatibility testing extended optionally incorporating pre postconditions operations possibly reconciling methods 
implementation level merging workflow management semantic transaction management requires blend implementation techniques worlds 
proven techniques semantic concurrency control logging reliable queues distributed commit core integrated run time system 
addition new issues addressed logging events ensure reliable control data flow 
may think solutions similar issues hard devise 
aspects considered truly high performance implementation 
example carefully examine combination possible integration event logging data operation logging entails issues optimization efficient communication handshakes different components biggest challenge design architectural backbone large scale distributed heterogeneous environments order provide integrated set services generation workflow transaction applications 
contents presentation benefitted intensive discussions yuri breitbart andrew werner hans schek amit sheth ye 
indirect contributions gratefully acknowledged 
ag agha concurrent object oriented programming communications acm vol aes agrawal el abbadi singh consistency semantics correctness criteria databases appear acm tods ansari ness rusinkiewicz sheth flexible transactions support multi system telecommunication applications vldb conference attie singh sheth rusinkiewicz specifying enforcing intertask dependencies vldb conference av abiteboul vianu equivalence optimization relational transactions journal acm vol bernstein transaction processing monitors communications acm vol bernstein middleware architecture distributed system services technical report crl digital equipment cambridge research laboratory br brodie promise distributed computing challenges legacy information systems ifip tc wg conference semantics interoperable database systems lorne australia bu buchmann zsu hornick georgakopoulos manola transaction model active distributed objects systems elmagarmid ed database transaction models advanced applications morgan kaufmann buk chen chen elmagarmid leu zhu ipl parallel language nd ieee international workshop research issues data engineering transaction query processing phoenix bbg beeri bernstein goodman model concurrency nested transactions systems journal acm vol breitbart georgakopoulos rusinkiewicz silberschatz rigorous transaction scheduling ieee transactions software engineering vol bgs breitbart garcia molina silberschatz overview multidatabase transaction management vldb journal vol bhg bernstein hadzilacos goodman concurrency control recovery database systems addison wesley bernstein hsu mann implementing recoverable requests queues acm sigmod conference bk kaiser concurrency control advanced database applications acm computing surveys vol br brodie design specification database transactions brodie mylopoulos schmidt eds conceptual modeling springer br badrinath ramamritham semantics concurrency control commutativity acm tods vol bsw beeri schek weikum multilevel transaction management theoretical art practical need international conference extending database technology springer cha chakravarthy 
ed ieee data engineering bulletin special issue active databases vol december che cheng chang klein lee lu obermarck open extensible event transaction manager usenix summer conference cf cart ferri integrating concurrency control object oriented database system nd international conference extending database technology springer curtis kellner process modeling communications acm vol cr chrysanthis ramamritham acta framework specifying transaction structure behavior acm sigmod conference cr chrysanthis ramamritham formalism extended transaction models vldb conference cr chrysanthis ramamritham acta saga continues elmagarmid ed database transaction models advanced applications morgan kaufmann da davies data processing spheres control ibm systems journal vol day dayal garcia molina hsu kao shan third generation tp monitors database challenge acm sigmod conference dhl dayal hsu ladin organizing long running activities triggers transactions acm sigmod conference dhl dayal hsu ladin transactional model long running activities vldb conference schek weikum semantics multilevel transaction management federated systems technical report department computer science eth zurich el elmagarmid 
ed ieee data engineering bulletin special issue unconventional transaction management vol march el elmagarmid 
ed database transaction models advanced applications morgan kaufmann elmagarmid leu litwin rusinkiewicz multidatabase transaction model vldb conference ems spector distributed transaction facility morgan kaufmann zsu semantic knowledge transactions increase concurrency acm tods vol ga garcia molina semantic knowledge transaction processing distributed database acm tods vol ga garcia molina gawlick klein salem coordinating multi transaction activities technical report cs tr department computer science princeton university ge predicate transition nets springer gr gray transaction concept virtues limitations vldb conference gr gray approach decentralized computer systems ieee transactions software engineering vol extended transaction processing dependency rules rd ieee international workshop research issues data engineering interoperability multidatabase systems vienna ga gray distributed computer systems case studies proceedings ieee vol ghk georgakopoulos hornick environment specification management extended transactions doms rd ieee international workshop research issues data engineering interoperability multidatabase systems vienna gk gawlick varieties concurrency control ims vs fast path ieee database engineering bulletin vol gr gray reuter transaction processing concepts techniques morgan kaufmann georgakopoulos rusinkiewicz litwin chronological scheduling transactions temporal dependencies appear vldb journal gs gifford spector twa reservation system gs garcia molina salem sagas acm sigmod conference hsu hsu 
ed ieee data engineering bulletin special issue extended transaction workflow systems vol june hh hadzilacos hadzilacos 
transaction synchronization object bases acm pods conference hr reuter principles transaction oriented database recovery acm computing surveys vol hw herlihy weihl hybrid concurrency control data types acm pods conference hw hasse weikum performance evaluation multi level transaction management vldb conference ja jablonski transaction support activity management technical report cec digital equipment jo integration different transaction models distributed database systems technical report ibm european networking center heidelberg kl klein advanced rule driven transaction management ieee compcon ko korth locking primitives database system journal elmagarmid execution model distributed database transactions implementation vpl rd international conference extending database technology springer ks kappel object behavior diagrams ieee data engineering conference lo lomet mlr recovery method multi level systems acm sigmod conference ly lynch multilevel atomicity new correctness criterion database concurrency control acm tods vol leu elmagarmid specification execution transactions advanced database applications information systems vol levy korth silberschatz theory relaxed atomicity acm symposium principles distributed computing lmr litwin mark roussopoulos interoperability multiple autonomous databases acm computing surveys vol lynch merritt weihl fekete atomic transactions morgan kaufmann mo mohan lindsay pirahesh schwarz aries transaction recovery method supporting fine granularity locking partial rollbacks write ahead logging acm tods vol mu muth weikum hasse semantic concurrency control object oriented database systems ieee data engineering conference mgg moss graham abstraction recovery management acm sigmod conference ml mohan levine aries im efficient high concurrency index management method write ahead logging acm sigmod conference muth atomic commitment integrated database systems ieee data engineering conference muth klas neuhold transaction model open publication environment elmagarmid ed database transaction models advanced applications morgan kaufmann muth neuhold extending multi level transactions heterogeneous autonomous database systems technical report gmd institute integrated publication information systems darmstadt nodine supporting long running tasks evolving multidatabase interactions events nd international conference parallel distributed information systems olle olle macdonald rolland sol van stuart information systems methodologies addison wesley neil escrow transactional method acm tods vol zsu valduriez principles distributed database systems prentice hall pe peterson petri net theory modeling systems prentice hall pl pu leff replica control distributed systems asynchronous approach acm sigmod conference prs reuter high contention stock trading database case study acm sigmod conference raz raz principle commitment ordering vldb conference rfb rolland conception des information paris cichocki model multidatabase transactions international journal intelligent cooperative information systems vol rr rolland richard transaction modeling acm sigmod conference reuter reliable execution large scale distributed applications contracts architecture prototype implementation german bayer eds fr springer sh sherman architecture distributed transaction processing family acm sigmod conference britton mohan phase commit optimizations tradeoffs commercial environment ieee data engineering conference sks korth silberschatz failure resilient transaction management multidatabases ieee computer vol 
sl sheth larson federated databases architectures integration acm computing surveys vol srk sheth rusinkiewicz manage interdependent data elmagarmid ed database transaction models advanced applications morgan kaufmann ss schwarz spector synchronizing shared types acm transactions computer systems vol shasha simon valduriez simple rational guidance chopping transactions acm sigmod conference schek weikum ye unified theory concurrency control recovery acm pods conference sz skarra zdonik concurrency control object oriented databases kim lochovsky eds object oriented concepts databases applications acm press tp international standard iso iec information technology open systems interconnection distributed transaction processing part osi tp model part osi tp service part protocol specification ts tomlinson concurrent object oriented programming languages kim lochovsky eds object oriented concepts databases applications acm press veh transaction model elmagarmid ed database transaction models advanced applications morgan kaufmann vv vianu vossen conceptual level concurrency control relational update transactions nd international conference database theory springer wa walter nested transactions multiple commit points approach structuring advanced database applications vldb conference weihl commutativity concurrency control data types ieee transactions computers vol weihl local atomicity properties modular concurrency control data types acm transactions programming languages systems vol wei weikum principles realization strategies multilevel transaction management acm tods vol woe woelk attie meredith sheth singh tomlinson task scheduling intertask dependencies carnot acm sigmod conference wh weikum hasse multi level transaction complex objects implementation performance parallelism appear vldb journal weikum hasse muth multilevel recovery conference wr reuter contract model elmagarmid ed database transaction models advanced applications morgan kaufmann ws weikum schek architectural issues transaction management layered systems vldb conference ws weikum schek concepts applications multilevel transactions open nested transactions elmagarmid ed database transaction models advanced applications morgan kaufmann wv wolski pc agent method achieving serializability presence failures heterogeneous multidatabase ieee international conference databases parallel architectures applications wiederhold wegner ceri communications acm vol xa open distributed transaction processing xa specification 
