optimal traversal directed hypergraphs giorgio ausiello yz roberto giuseppe italiano yz directed hypergraph defined set nodes set hyperarcs connecting set source nodes single target node 
directed hypergraphs contexts model different combinatorial structures functional dependencies ull horn clauses propositional calculus ai graphs nil petri nets pet 
hyperpath similarly notion path directed graphs consists connection nodes hyperarcs 
paths graphs hyperpaths suitable different definitions measure corresponding different concepts arising various applications 
consider problem finding minimal hyperpaths measures 
show problems surprisingly np hard 
measure function hyperpaths matches certain conditions define value measure functions problem turns solvable polynomial time 
describe efficient algorithms data structures find optimal hyperpaths value measure function appears parametric form 
achieved time bound jhj log hypergraph nodes description size jhj 
dynamic maintenance optimal hyperpaths considered proposed solution supports insertions hyperarcs 
measure function assumes values discrete set fd total time involved maintaining data structure performing sequence operations insertion new hyperarcs cost decreases log log jhj jhj final size hypergraph final number hyperarcs 
theta kh amortized update cost sequence log average size hyperarc 
directed hypergraph generalization concept directed graph 
introduced ads represent functional dependencies relational data base schemata 
directed graphs normally representing functional relations finite sets areas computer science need general types functional relations arises relations functional relations variable arity 
directed hypergraph consists finite set nodes set hyperarcs 
hyperarc pair element nonempty set nodes second element node natural interpretation hyperarc exists function relates clearly graph special case hypergraph 
classical examples combinatorial structures easily represented hypergraphs functional dependencies relational databases ads hyperarc represents functional dependency attributes attribute horn formulae propositional calculus ai hyperarc represents horn clause propositional symbols implications problem solving hypergraphs alternative graphs datalog gr operations research petri nets 
partially supported eu esprit long term research project alcom contract 
dipartimento di informatica sistemistica universit di roma la sapienza salaria roma italy 
partly developed author visiting international computer science institute berkeley california 
universit ca di venezia italy 
supported part research universit ca di venezia 
applications directed hypergraphs notions path traversal required 
paths shortest paths directed graphs standard concepts efficient algorithms computation known hypergraphs corresponding notions hyperpaths shortest hyperpaths subtle 
intuitively hyperpath set nodes single node hyperarc set exist hyperpaths nodes basis concept notion transitive closure hypergraph defined ads efficient algorithms transitive closure maintenance dynamic insertion hyperarcs introduced ain 
problem defining cost measures hyperpaths delicate 
fact hyperpaths measured compared broader range measures simple graphs 
show measures lead hard optimization problems measures cite minimizing number hyperarcs involved hyperpath length hyperpath representation sum costs hyperarcs belonging hyperpath 
case graphs shortest paths criteria may efficiently computed show case hypergraphs problem determine optimal hyperpaths criteria np hard 
situation simpler consider hyperpath measures 
define notions rank traversal cost hyperpath 
measures show efficient data structures algorithms defined allow retrieval dynamic maintenance optimal hyperpaths 
examples value measures better explained recursive definition structure hyperpath depend combinatorial constraints set affected hyperarcs measures component sub hyperpaths 
threshold np hard optimization problems problems solvable polynomial time analyzed 
particular value measures general concept captures metrics hyperpaths defined efficient algorithms data structures find optimal hyperpaths value measure function 
achieved time bound jhj log hypergraph nodes description size jhj 
notion superior function introduced knuth knu context generalization dijkstra algorithm context free grammars slightly generalized ramalingam reps rr provide dynamic algorithms 
value measures proper subclass superior functions 
difference grammar problem production may associated different function value function hyperarcs restriction allows represent hypergraphs compact way means fd graphs source set represented unique compound node fd graphs introduced section fd graphs 
important value functions commutative associative ordering arguments unimportant additional constraint improves time complexity dynamically updating value measures shown section 
particular measure function assumes values discrete set fd dk total time involved maintaining data structure performing sequence operations insertion new hyperarcs cost decreases log log jhj jhj final size hypergraph final number hyperarcs 
theta kh amortized update cost sequence log average size hyperarc 
algorithm proposed rr fully dynamic maintenance minimum weight hyperpaths sequence operations take total time hx yi jx size counting source set exiting hyperarc 
algorithm faster factor hypergraph dense omega gamma 
note just specifying update operations requires space 
remainder organized follows 
section basic definitions hypergraph hyperpath provided 
section devoted various measures hyperpath discussion complexity optimal traversal problems 
particular showing np hardness various problems concept value measure introduced main result concerning fact hyperpath optimal value measures efficiently determined stated proof section 
section analyze line case hypergraph allowed dynamically change insertion new hyperarcs provide efficient line algorithms maintaining hyperpaths optimal value measures 
applications static dynamic case considered section 
metric concepts directed hypergraphs start definition directed hypergraph 
definition directed hypergraph pair hn hi set nodes set hyperarcs 
hyperarc ordered pair hs ti arbitrary nonempty set source set single node target node 
note directed graph special case directed hypergraph source sets cardinality 
parameters taken account directed hypergraphs ffl number nodes jn ffl number hyperarcs jh ffl source area sum cardinalities source sets jsj denotes set source sets fs hs ti ng ffl nonsingleton source area sum cardinalities nonsingleton source sets sm jsj sm denotes set nonsingleton source sets sm fs hs ti jsj ffl size length description hypergraph denoted jhj 
represent directed hypergraph means adjacency lists jhj special case directed hypergraph directed graph number vertices equal number nodes number edges furthermore definition hn hi directed hypergraph 
hypergraph hn hs ti called denote definition hn hi directed hypergraph set hyperarcs union source sets target nodes hyperarcs hypergraph hn said induced example hypergraph shown 
define notion hyperpath directed hypergraphs 
recall terminology directed graphs 
path directed graph sequence edges vertices gamma path simple vertex repeats twice 
cycle path contains cycle subpath 
path describe different ways 
simple minded description path give sequence edges traversed going notice directed hypergraph induced set hyperedges hf bi hbf ei hh eig 
description may contain edge may bounded may contain cycle traversed unbounded number times 
refer description path unfolded 
alternative description may subgraph containing exactly edges note edge considered 
graph finite description bounded path referred folded 
turn directed hypergraphs show deeper difference folded unfolded hyperpaths 
definition hn hi directed hypergraph non empty subset nodes node hyperpath extended reflexivity hyperarc hz yi hyperpaths node extended transitivity recursive definition hyperpath naturally described tree labeled nodes referred hyperpath tree defined follows 
definition hn hi directed hypergraph non empty subset nodes node hyperpath hyperpath tree tree defined follows extended reflexivity empty hyperarc hz yi hyperpaths node extended transitivity consists root labeled hyperarc hz yi having subtrees hyperpath trees node note hyperpath tree root target node label 
furthermore hs ti label leaf hyperpath tree source set contained refer hyperpath tree unfolded representation hyperpath 
case path directed graph representation describes explicitly sequence hyperarcs traversed going hyperarc may appear hyperpath tree 
follows interchangeably terms unfolded hyperpath hyperpath tree 
case paths graphs hyperpaths alternative concise description defined follows 
definition hn hi directed hypergraph 
non empty subset nodes node hyperpath folded hyperpath hx induced hyperarcs unfolded hyperpath follows refer folded hyperpath simply hyperpath 
consequence definition hx empty hypergraph hyperarc hz yi hx node exists hyperpath hx hx shows unfolded folded hyperpath hypergraph 
unfolded folded hyperpath definition hn hi directed hypergraph 
non empty subset nodes node nonempty hyperpath hx consisting hyperarc hx 
hyperpath cyclic contains acyclic 
unfolded representation cyclic hyperpath may times hyperarc 
case directed graphs implies unfolded representation hyperpath larger folded representation 
differently case directed graphs case happen acyclic hyperpaths unfolded representation exponentially larger size folded representation 
example shown 
definition weighted hypergraph triple hn hn hi directed hypergraph measure function assigns weight hyperpaths hn hi 
directed graph edge associated cost 
cost path sum costs edges 
differently case paths directed graphs hyperpaths directed hypergraphs complex structure 
yields different ways measuring cost hyperpath 
follows define measures 
consider weighted hypergraph hn hi hyperarc hs ti cost hs ti associated hx hyperpath definition cost hyperpath hx hn sum costs hyperarcs hs ti hh hs ti definition number hyperarcs hyperpath hx hn defined cardinality set hyperarcs hx jh note definition includes special case definition 
definition rank acyclic hyperpath hx recursively defined follows 
acyclic unfolded hyperpath exponential size 
hx empty hypergraph hx hyperarc hz yi entering fz hx ae hx hz yi max fr hx consider unfolded hyperpath defined definition recursively define rank unfolded hyperpath sum cost root plus maximum rank children 
acyclic hyperpaths definition ranks folded unfolded hyperpaths coincide necessarily true try define rank cyclic hyperpaths 
note rank corresponds maximum cost path root leaf hyperpath tree 
size hyperpath defined gives length description hx definition size folded hyperpath hx hn sum number hyperarcs source area jh hx js hx set source sets hx note consider special case hypergraph graph measures defined far collapse usual length paths twice length case size hyperpath 
general hypergraph may hyperpaths source set single node measure function natural problem consists selecting optimal hyperpath optimization criterion min max 
assume optimization criterion min 
measure function hyperpaths possible define notion distance nodes hypergraph 
source set target node directed hypergraph hn hi define ffi min ranges possible hyperpath ffi equals exists hyperpath 
section show computational complexity finding optimal hyperpath differs widely different types measures taken consideration 
complexity optimal hyperpath problems section deal problem hypergraph measure function defined hyperpaths set nodes single node find optimal hyperpath consider minimization problems measure functions introduced far 
directed hypergraph directed graph minimizing measure functions equivalent finding shortest paths 
known fact finding minimal acyclic paths directed graph np hard instance directed graph hn ei assign negative unit cost edge exists hamiltonian path nodes exist minimum acyclic path cost 
hand cycles having negative cost exist minimal acyclic hyperpath connected nodes polynomial time 
case hypergraphs source np hardness taken account case different measure functions different complexity properties acyclic hypergraphs 
fact minimum rank problem proved polynomial considered far shown np hard 
complexity minimization problems directed hypergraphs previously considered ads np 
theorem hn hi directed hypergraph nodes integer 
consider problems 
find hyperpath hyperarcs 
find hyperpath cost 
find hyperpath size 
np complete 
proof 
consider problems separately 
consider problem 
reduction minimum cover short mc gj 
fa set elements fs sm family subsets recall integer mc consists finding cover cardinality subfamily js ha ki instance mc 
define directed hypergraph hn follows 
set nodes fp qg set hyperarcs fhp sg fhs consists single hyperarc ha qi see 
show exists hyperpath having hyperarcs exists cover cardinality equal hypergraph associated instance mc 
assume feasible solution mc contains hyperpath see definition ha qi fh fhp hs ig possible exists contains includes cover note cover cardinality hyperpath hyperarcs vice versa hyperpath kn hyperarcs 
shown contain hyperarc ha qi plus hyperarcs set plus say hyperarcs set kn gamma gamma target nodes hyperarcs set cover set fact node exists hyperarc hs construction means element set contained problem finding cover cardinality reduced problem finding hyperpath number hyperarcs kn np completeness follows immediately observation finding hyperpath hyperarcs special case costs 
prove np completeness observe reduction cover cardinality hyperpath size 
decision problems np complete np hardness corresponding optimization problems follows immediately 
corollary hn hi directed hypergraph nodes problems np hard finding hyperpath minimum number hyperarcs ii finding hyperpath minimum cost iii finding hyperpath minimum size finding hyperpaths minimum source area minimum number source sets easily shown np hard problems 
discuss conditions problem finding optimal hyperpaths may solved polynomial time 
introduce concept value measure hyperpaths consists restrictions possible definitions measure function show measure function value np hard problems arise 
intuition value measure functions independent folding degree hyperpath yielding value folded hyperpath hyperpath tree 
furthermore algorithms data structures solve efficiently problems 
give formal definition value measure function 
definition value measure function hyperpaths monotone nondecreasing described triple hx hx hx hx hx hx zk hx hz yi hx hx hx zk hx hyperpath set node real value function pair reals reals monotone respect arguments 
commutative associative function sets reals reals monotone respect arguments 
examples max sum 
consequence definition rank function described choosing addition function max operator 
framework consider measures hyperpath characterized choice functions constant definition defined cost folded hyperpath sum costs hyperarcs 
case unfolded hyperpaths define traversal cost cost root plus cost subtrees 
words hyperarc traversed cost repeatedly taken account 
definition traversal cost unfolded hyperpath inductively defined follows empty unfolded hyperpath root hz yi subtrees zk hz yi rank seen traversal cost value measure functions 
table summarizes definitions 
rank max traversal cost value measure function complexity finding minimal hyperpaths polynomial description shown section 
knuth introduces concept superior function context free grammars knu 
function 
superior function monotone nondecreasing variable max superior context free grammar productions form gamma 
capital letters nonterminal symbols superior function possibly different production 
nonterminal symbol grammar terminal symbols fff ff gamma 
ffg set terminal strings derivable terminal symbol constant value possible define function val composition superior functions val string ff provides corresponding value val ff 
grammar problem consists finding smallest value associated nonterminal symbol min ff fval ff optimization hyperpaths means value functions special case grammar problem map nonterminal symbols hypergraph nodes vice versa 
difference grammar problem production may associated different function value function hyperarcs restriction allows represent hypergraphs compact way means fd graphs source set represented unique compound node fd graphs introduced section fd graphs 
constraint relaxed long unique function associated hyperedges having source set 
important value functions commutative associative ordering arguments unimportant additional constraint improves time complexity dynamically updating value measures shown section 
ramalingam reps rr introduce slight generalization superior functions function 
weak superior function monotone nondecreasing variable definition ensures reach node hyperarc hz yi violates superior function property find better hyperpath improving distances nodes shown weak superior function commutative associative split hyperedges obtaining equivalent hypergraph superior functions 
instance weak superior function superior function defined ae 
weak superior function superior functions defined ae 


measure functions associative consider hyperarcs starting nodes optimal hyperpath problem measure function weak superior reduced optimal hyperpath problem equivalent hypergraph measure function superior 
example consider measure functions definition bottleneck hyperpath hx defined follows hx hyperpath defined transitivity min hs ti hx fw hs ti definition gap hx hyperpath hx inductively defined follows hx hx hx hx hx hz yi min fg hx case rank gap better defined respect unfolded hyperpath providing uniquely defined value case cyclic hyperpaths 
fact gap unfolded hyperpath recursively defined sum cost root plus minimum gap children 
acyclic hyperpaths hx easy see order compute optimal gap hyperpaths reduce hypergraph equivalent graph substituting arcs hz yi hz yi hyperarc yi assigning cost yi arcs 
minimum gap hyperpath corresponds minimum cost path constructed graph 
note decomposition find nodes having finite gap connected hypergraph take account computing nodes reachable hypergraph assigning infinite gap 
similar considerations hold bottleneck 
worth noting want compute maximum bottleneck hyperpath corresponding measure function dual problem value 
algorithms value measures hyperpaths section efficient algorithms find optimal hyperpaths value measure function hyperpaths 
representing directed hypergraphs section deal problem finding optimal hyperpaths node node 
technique works time space bounds problem computing optimal hyperpaths source set node 
furthermore easily generalized finding optimal hyperpath collection source sets node see ain details 
case space time complexity increase js multiplicative factor 
order design efficient algorithms directed hypergraphs data structure called fd graph introduced ads name fd graph derives functional dependency 
fd graph essentially labeled graph kinds nodes kinds edges definition shows 
definition hypergraph hn hi sm set non singleton source set sm fz exists hyperarc hz ii jzj 
fd graph labeled graph hn set simple nodes set compound nodes bijective relationship sm sm source set denote corresponding compound node simple node source set called component node compound node theta theta hz xi hg set edges referred full edges bijective relationship theta zg set edges referred dotted edges connecting compound node components 
example fd graph shown 
bf cd fd graph corresponding hypergraph 
note correspondence hyperarcs hypergraph full arcs corresponding fd graph 
hyperarcs weights weight corresponding full arc concept fd path generic source target node related folded hyperpath hx fd graph hypergraph 
dealing fd graphs extend notion fd path measure considering compound node possible target node 
definition hn hi directed hypergraph hn corresponding fd graph 
fd path source simple compound target node fd graph fd contained fd hx fd hx yi component node yg notion measure extended fd paths consistent measure corresponding hyperpath 
particular give definition value measure function 
definition hn hi directed hypergraph hn corresponding fd graph value measure function hyperpaths 
corresponding measure function fd fd paths defined follows simple node hv yi full edge fd entering fd fd hv yi fd fd fy compound node fd fd fd fd fd fd fd fd yq fd empty fd fd fd straightforward prove source simple node fd fd hx consider problem finding optimal fd paths symbol denote measure function fd paths 
notion distance source extended fd paths simple node ranges possible fd path ffi min fy compound node ffi ffi ffi ffi exists fd path ffi 
turn data structure algorithms 
fd graphs implemented maintaining adjacency lists simple compound node 
full dotted edges leaving node organized lists 
empty compound node 
describe find optimal hyperpath source order retrieve optimal hyperpaths basic idea store simple node incoming hyperarc belonging optimal hyperpath 
call backward pointer 
technique implemented fd graphs array size containing collection backward pointers defined follows points simple compound node optimal fd path simple node simple node special value null fd path exists 
notice need store analogous information compound nodes case order trace fd path forced go back simple nodes contained corresponding source set 
measure optimal hyperpaths distance simple compound node stored variable dist dist fd path optimal distance dist fd path node addition simple node variable reach defined way reach fd path fd graph reach 
variable reach defined compound node components reach reach 
words entry reach equal number simple nodes set reachable simple node note data structures simple nodes redundant reach null 
done sake clarity uniform presentation algorithms 
side increases space constant factor easily avoided implementation 
existence fd path simple compound node checked constant time examining variable reach 
reach fd path optimal fd path traced starting proceeding backward fashion incoming dotted edges compound node pointer simple node see ain details 
polynomial algorithms value measures value measure function problem finding optimal hyperpaths polynomially solvable 
section show problem solved efficiently presenting general algorithm 
algorithms described pseudocode figures 
say simple compound node visited algorithm value reach equal full edge scanned passed argument procedure scan 
optimal hyperpaths nondecreasing order 
algorithm distance generalizes directed hypergraphs dijkstra shortest path algorithm dij 
algorithm distance operates conjunction procedure scan 
algorithm uses priority queue pq node enqueued procedure scan line soon visited edge ht xi scanned node priority measure fd path algorithm 
full edge ht xi scanned node previously visited priority updated edge ht xi yields fd path improves old priority procedure scan lines 
algorithm distance initializes data structures line insert element priority queue item ht 
repeatedly algorithm extracts queue pq node minimum priority assumed measure optimal hyperpath point outgoing full edges ht xi scanned dotted edges ht zi considered line compound node reach decreased line possible cases arise reach done reach component compound node visited 
case node visited measure optimal hyperpath computed line outgoing full edges hz xi scanned 
argument easy prove invariants node visited full edge scanned algorithm distance input weighted hypergraph terms adjacency lists fd graph node distance fthe distance corresponding empty fd functions measure function output dist distance ffor simple compound node yg reach integer ffor simple compound node yg node ffor simple node xg aux pq priority queue simple nodes compound node node 


pq empty 
pq insert ht 
reach 
pq nonempty 

pq extract hs ti 
dist 

xi scan 
zi 

decrement reach 
reach fall component nodes 

dist dist dist dist 
hz xi scan 



algorithm distance 
procedure 



reach 
dist 
nil 



reach jzj 
dist 

procedure 
procedure scan node simple gamma node 

ht xi dist 
reach 

decrement reach fthe value set 
pq insert ht xi 


pq decrease ht xi 
procedure scan 
number execution loop lines set scanned full edges coincides set full edges leaving visited nodes compound node visited simple nodes visited 
lemma execution algorithm distance simple compound node visited exists fd path 
proof 
case note node visited iteration loop line 
suppose contradiction exists fd path visited algorithm 
due recursive definition hyperpath exists hyperarc hs ti nodes source set visited algorithm target node 
means conditions arises ffl exists full edge hs ti visited ffl exists compound node fz visited 
due invariants case arises 
case due invariant consider case simple nodes 
proceed induction number executions loop lines number visited nodes 
execution loop queue contains item ht visited node reachable empty hyperpath 
item hs ti dequeued previously visited inductive hypothesis reachable exists fd path 
definition hs ti fd path iteration node inserted pq full arc ht xi scanned 
theorem value measure function fd paths 
algorithm distance computes correctly optimal fd paths node 
proof 
note priority item hs ti queue pq computed procedure scan line measure actual fd path full arc hs ti 
far compound nodes concerned distance compound node computed algorithm distance line soon distance component node computed 
refer simple nodes 
ae set nodes visited algorithm item hs ti extracted queue pq 
prove induction number items extracted queue holds measure optimal hyperpath nodes ii node ffi prove theorem lemma assures node reachable eventually visited algorithm 
base case dequeued item ht claim satisfied ffi measure empty hyperpath ii hyperpath measure smaller suppose item hs ti extracted priority queue algorithm distance visited nodes set ae inductive hypothesis node algorithm correctly computed optimal hyperpath nodes set case full edge hx ti leaving node scanned minimum priority computed ii item hs ti dequeued minimum priority elements queue function nondecreasing full arc scanned produce priority value greater equal simple node node optimal fd path stored variable line soon distance stored dist 
theorem time complexity algorithm distance jhj log number simple nodes proof 
invariant full edge scanned side constant number steps performed algorithm distance full dotted edge simply verified code inspection 
execution algorithm distance insertions deletions minimum key performed priority queue pq plus priority decreases 
claimed bound derives implementation pq heap ft provided compound node function dist dist dist computable time 
dynamic maintenance value measures applications required update solution problem input data modified 
case data structures maintained intermixed sequence query update operations performed line fashion 
problem maintaining information existence hyperpaths directed hypergraph considered ain 
section generalize results consider problem maintaining quite general notion distance directed hypergraph new hyperarcs inserted 
precisely consider directed hypergraph distinguished node hand value measure function show perform arbitrary sequence operations kinds insert new weighted hyperarc hx hx yi decrease cost existing hyperarc report value distance node report optimal hyperpath order deal efficiently problem assumption measure function assumes values discrete set fd dk possible show condition sequences operations update hypergraph requires time jhj aiming efficient bounds 
number hyperarcs operations processed 
due condition total number operations kh hyperarc inserted decreased times 
order support operations strategies order speed answers requests jhj log offline algorithm described previous section recompute hyperpaths optimal measure time operation type performed 
modifications cheaper apply offline algorithm request type occurs 
total number queries type 
strategy leads total worst case time kh jhj log strategy yields kh jhj log bound 
section describe algorithms data structures solve problem total time log log jhj better previous bounds may exponentially greater 
note theta kh amortized update cost sequence log average size hyperarc 
previous section maintain fd graph corresponding original hypergraph optimal fd paths simple compound node 
algorithms properly extended slight modification case maintain optimal hyperpaths collection source sets specified time insertions 
case time complexity roughly increased jsj factor leading js log log jhj time bound sequence operation 
order maintain efficiently directed hypergraphs online fashion need representation fd graphs new compound nodes inserted 
fact case static problem know simple compound nodes hypergraph dynamic directed hypergraphs considered new compound nodes inserted data structure hyperarc insertion 
suppose set simple nodes number new compound nodes known priori order insertions hyperarcs structure arbitrary 
situation efficient dynamic data structure compound nodes maintained 
compound nodes maintained avl tree avl referred denotes set compound nodes 
allow efficiently check source set hyperarc introduced corresponds compound node existent fd graph 
technique necessary compound nodes introduced making representation non redundant 
procedures function compound arbitrary source set searches balanced tree returns corresponding compound node exists created inserted performing necessary initialization including initialization variable dist dist dist dist 
show optimal hyperpaths simple node maintained insertion new hyperarcs edge cost decreases 
procedure insert provides required updates data structures inserting hyperarc source set target node cost hx yi decreasing cost existing hyperarc new value hx yi order efficiently maintain invariant dist ffi compound node value function updated arguments changes 
associative commutative represent hyperedge balanced binary tree having component nodes leaves associate values function subtrees follows ae dist leaf ht requires additional data structure simple modification priority queue 
compound node modified priority queue heap component node contained current value dist position heap updated value dist decreases 
important property structure distances component nodes allowed decrease total cost maintaining value hyperarc hx yi kjx 
due fact order update structure changes propagated bottom propagation blocks root subtree remains unchanged 
total number nodes tree jx total number required changes kjx 
case reach useless need compute function hyperarc hx yi nodes reachable distance changes update operation 
details pseudo code see figures 
note modifying cost hyperarc handled insertion new 
correctness approach hinges invariants 
obvious derive directly pseudocode figures 

insertion edge decrease hyperedge hx yi distance node changed new measure optimal hyperpaths pass hx yi 
insertion edge decrease hyperedge distances greater previous ones procedure insert input set simple nodes node cost new cost hyperarc side effects updated structure fd graph updated data structures dist data structures heap modified heap ffor compound node zg aux node 

jx 
single element 
compound 
exists full edge hx hx yi 
hx yi hx yi 
insert hx hx yi 
hx yi dist dist 
dist 

pq empty 
pq insert hx yi 
pq nonempty 

pq extract hs ti 
dist 

ht xi scan 
zi 

update heap dist dist dist 
heap dist 

dist heap 
hz xi scan 




procedure insert 
procedure scan node simple gamma node 

ht xi dist 
dist 
ht xi pq 

pq insert ht xi 

pq decrease ht xi 
procedure scan 

insertion hyperarc edge hs ti extracted pq distance changes 
edge ht xi inserted updated pq distance changes 
insertion hyperarc full edge ht xi scanned distance changes 
lemma value measure function 
insertion hyperarc simple node points node minimal measure fd path exists hyperpath 
simple compound node dist ffi ffi denotes distance proof 
induction number hyperarcs inserted 
base induction easily proved hyperarc introduced dist dist nil simple node different thesis trivially holds 
suppose lemma holds inserting hyperarc hx yi insertion exists simple node point node minimal measure fd path hyperpath exists 
exists node hz xi dist xi dist possibilities arise excluding previous ones ffl xi changed 
due invariant fact value ffi hz xi dist xi dist hypothesis hold 
ffl hz xi changed 
case hz xi inserted pq line updated hz xi dist hz xi extracted pq line 
ffl dist changed 
case edges exiting scanned edge hz xi inserted pq line case updated hz xi extracted pq line 
ffl dist changed 
due invariant dist decreased dist changed 
lemma guarantees variables allow trace correctly optimal fd path simple compound node 
theorem summarizes behavior data structure insertion new hyperarcs provides analysis involved costs 
theorem max value measure function values ordered discrete set fd dk hypergraph nodes weighted hyperarcs may inserted cost decreased online fashion exists data structure allows check fd path simple compound node constant time ii return fd path minimal measure exists time linear length description fd path 
total time involved maintaining data structure performing sequence operations insertion new hyperarcs cost decreases log log jhj jhj final size hypergraph final number hyperarcs 
space required jhj 
proof 
points ii space bound consequence definition data structures 
insertion hyperarc hx yi requires search tree compound nodes containing nodes initialization total time complexity operations sequence updates jhj log suppose pq implemented heap 
due invariant update causes pq extract operations number simple nodes distance changes insertion 
node change distance times total cost pq extract operations nk log invariant implies number pq insert pq decrease operations jh induced hyperarcs exiting nodes distance changed due update 
reasons total cost pq insert pq decrease operations 
invariant procedure scan called jh times function computed jh times 
operations take constant time total time needed function updated jh times 
total number times function updated kh note due fact ranges values total cost maintaining function hyperarc hx yi kjx total time spent updating function 
operations take constant time update 
total time complexity log log jhj 
algorithm proposed rr fully dynamic maintenance minimum weight hyperpaths takes time log number nodes interested change plus total number hyperarcs incident nodes time needed compute weight function 
authors provide amortized bound simple analysis shows neglecting term sequence operations take total time hx yi jx size counting source set exiting hyperarc 
solution comparable avoid avl tree gives total time complexity log 
algorithm faster factor hypergraph dense omega gamma 
note just specifying update operations requires space 
shown problem finding optimal hyperpaths directed hypergraph general np hard 
section introduced concept value measure sufficient condition guarantee problem tractable 
furthermore provided efficient general algorithms find maintain optimal hyperpaths 
analogously happens minimal hyperpaths may easily noticed combinatorial problems cuts matchings higher complexity extended directed hypergraphs 
research necessary investigate conditions problems may remain tractable directed hypergraphs contributing better understanding expressive structure 
address application areas approach directed hypergraphs provided promising results 
ads ads shown directed hypergraphs successfully answer queries concerning closure set functional dependencies relational database schema 
field interesting explore possibility optimal hyperpaths directed hypergraph describing functional dependencies holding database schema order minimize chains joins materializing views answering queries 
ai shown satisfiability set propositional horn clauses depends existence hyperpath directed hypergraph representing horn formula 
general consider knowledge system horn calculus fuzzy production rules ag 
rule confidence value representing reliability interesting consider various problems degree consistency set rules reliable proof fact true finding weakest step proof 
addition design rule system may supported algorithms data structures dynamic maintenance directed hypergraphs optimal hyperpaths 
gallo gr show hypergraphs may context deductive databases check satisfiability horn formula datalog program 
general model order predicative horn calculus minimization hyperpaths may provide powerful tool optimize computations possible criteria related example processing time number accesses secondary storage unit 
directed hypergraphs model special class petri nets petri nets 
new approach leads solve problems sets reachable places potentially transitions liveness boundedness net devising algorithms time cost linear size net improving previous solutions problems 
consider petri nets amount time associated transition corresponding time required fire transition interesting investigate time bounds behavior net approach proposed 
ads ausiello sacc graph algorithms functional dependency manipulation 
journal acm 
ads ausiello sacc strongly equivalent directed hypergraphs 
analysis design algorithms combinatorial problems 
ads ausiello sacc minimal representation directed hypergraphs 
siam journal computing 

linear time algorithms liveness boundedness conflict free petri nets 
st latin american theoretical informatics volume pages 
lecture notes computer science springer verlag 
ag ausiello 
line algorithms satisfiability formulae uncertainty 
theoretical computer science 
ai ausiello italiano 
online algorithms polynomially solvable satisfiability problems 
journal logic programming 
ausiello italiano marchetti spaccamela 
incremental algorithms minimal length paths 
journal algorithms 
ain ausiello italiano 
dynamic maintenance directed hypergraphs 
theoretical computer science 
avl adelson landis 
algorithm organization information 
soviet math 
dokl 
dij dijkstra 
note problems connection graphs 
numerische mathematik 
ft fredman tarjan 
fibonacci heaps uses improved network optimization algorithms 
journal acm 
gj garey johnson 
computers intractability guide theory np completeness 
freeman 
gallo longo nguyen pallottino 
directed hypergraphs applications 
discrete applied mathematics 
gr gallo 
hypergraph approach logical inference datalog formulae 
technical report dip 
di informatica univ pisa italy 
italiano 
line maintenance minimal directed hypergraphs 
rd italian conf 
theoretical computer science pages 
world scientific 
knu knuth 
generalization dijkstra algorithm 
information processing letters 
nil nilsson 
principles artificial intelligence 
springer verlag berlin 
np nguyen pallottino 
hyperpaths shortest hyperpaths 
combinatorial optimization 
pet petri 
communication automata 
supplement tech 
report radc tr 
original german kommunikation mit univ bonn 
rr ramalingam reps incremental algorithm generalization shortest path problem 
technical report computer sciences department university wisconsin madison wi 
ull ullman 
principles database systems 
computer science press rockville md 

