feature description feature interaction analysis case maps lotos gray logrippo ware site university ottawa ottawa canada luigi jack bernard site ca tom gray tom ware com 
methodology feature design specification validation 
methodology case maps description features lotos tools animation features feature validation feature interaction detection 
developed collaborative project university ottawa experimentally design specify validate features new pbx 
methodology feature design specification validation developed joint project university ottawa 
methodology uses case maps ucms design documentation features lotos formal specification features formal verification including detection undesirable interactions 
ucm notation allows designers describe scenarios visually 
system wide scenario paths connect responsibilities possibly components causal flows 
shown ucms useful describing telephony features agent systems reasoning potential interactions high level abstraction commitment detailed design decisions 
lotos algebraic language history applications validation distributed systems general feature interaction detection particular see extensive literature 
ucms lotos complementary ways 
ucms provide visual notation capture integrate reason functional requirements lotos provides means formalization prototyping validation 
normal software development process activities precede method starts ucms continues lotos finer interleaving possible 
noted outset methodology existing ideas documented publications authors authors ucm lotos community 
ideas methodology previously applied artificial example features described feature interaction contest example involving mobile data standard gprs 
contribution show ideas combined industrial context development agent private branch exchange pbx 
related approach 
ucms provides brief overview system architecture basic call model 
basic lotos concepts recalled generation lotos prototype ucms discussed 
validation lotos model done test cases derived ucms detection undesirable interactions pairs features testing approach 
case maps ucms case maps emphasize sequencing causal paths relevant interesting critical functionalities reactive distributed systems composed responsibilities 
ucms unbound components bound case show components 
note bound ucms seen 
unbound ucms useful earliest stages design components undefined 
responsibilities causal paths internal component observable 
chosen different granularities required stage design defined usually level specific message exchanges 
ucms represent specific scenarios generic ones cover multiple scenario instances 
ucms highly reusable normally coarser grain responsibilities greater reusability 
alice bob msg start point responsibility condition point upd idle req ring component upd simple case map 
shows simple bound ucm user alice attempts establish telephone call user bob network agents 
user agent responsible managing subscribed telephony features outgoing call screening ocs 
alice sends connection request req network agent 
request causes called agent verify called party idle busy conditions italicized 
status update upd ring signal activated bob side ring 
different update occur upd appropriate message stating bob available prepared sent back alice msg 
scenario starts start point represents triggering event associated certain pre conditions filled circle labeled req ends points representing resulting events associated certain post conditions bars case ring msg 
intermediate responsibilities upd upd activated way 
causal path goes start point point 
example responsibilities allocated bound components boxes alice busy bob seen objects processes agents databases roles actors persons 
simple diagram conveys information compact form allows requirements engineers designers dimensions structure behavior evaluate architectural alternatives systems 
view reusable sense system behavior shown level close functional level implementation details 
view interest designers product managers users 
ucms messages architectural reasoning case maps refined terms message sequence charts msc uml interaction diagrams 
mentioned ucms explicitly define message exchanges components design process messages need constructed way causal relationships responsibilities different components satisfied 
usually ways depending available interfaces communication channels protocols 
alice bob req alice switch req sn upd upd ring bob ring refining ucms message exchanges 
alice bob causal path req upd ring represents successful scenario extracted serve example 
top path bound component structure implicit communication channels exist users respective agents agents 
start points points interpreted essentially messages responsibilities msc actions performed components 
new messages msg necessary causal flow remain valid 
messages various nature complexity 
ucms allow designers describe functionalities messages known advance complex negotiations involved agents 
ucms enable reuse paths different architectural alternatives 
example ucm bottom reuses path top ucm different set components 
responsibilities allocated traditional telephony req msg upd ring alice switch sn bob req msg msg msg msg ring upd components switch service node sn different dependencies 
lines added represent communication links constraining potential senders receivers message 
different decisions protocols control lead multiple solutions right note sn bob communicate directly 
easily decoupled structures ucm paths improve reusability scenarios lead behavior patterns wide range applications 
occasions ucms may provide helpful visual patterns stimulate thinking discussion system issues may reused 
note notation enables evaluation architectural alternatives done high level abstraction early commitment messages protocols message sequence charts 
additional ucm notation introduce notation elements new features added basic scenarios 
abstracts component instances introduced 
components refer bob alice longer refer generic call origination termination roles users agents 
dashed components called slots may populated different instances different times 
represent roles particular class components 
plug ins plug root map originating plug ocs plug req msg complex call connection new notation elements 
buhr introduces architectural notation different types components richer semantics active processes passive objects groupings pools objects interrupt service requests agents mutex 
components dynamic created destroyed stored moved way similar data 
definition take space examples provide intuitive descriptions 
middle part shows enhanced version ucm represents class related scenario instances 
called root map busy terminating plug idle upd upd mrb chk allowed md ring denied ucm possesses containers called stubs sub maps called plug ins ucm sub map 
stubs kinds static stubs represented plain diamonds 
contain plug enabling hierarchical decomposition complex maps 
dynamic stubs represented dashed diamonds 
may contain plug ins selection determined run time selection policy described pre conditions 
path segments coming going stubs identified root map italicized labels 
instance originating dynamic stub plug ins originating ocs 
start point originating plug bound incoming path segment point bound outgoing segment 
similar labels clear binding relation plug ins stubs general names different relation described explicitly 
ocs plug shows new component passive object represents list screened numbers originating user forbidden contact 
subscribed outgoing call screening service ocs plugin selected originating plug 
case called number checked list chk 
call denied appropriate message sent back originating party md 
terminating plug improves original ucm allowing update upd ring result accompanied concurrently ring back signal prepared sent back originating party mrb 
concurrency represented fork thin bar 
notation allows alternative paths fork join terminating plug concurrent paths fork join shared responsibilities exception paths timers failure points error handling synchronous interactions paths name elements 
stubs defined key points path simple add new plugins represent new features example 
existing maps plug ins decomposed extended radically different service added new paths new static dynamic stubs 
selecting plug ins stubs integrated view obtain flattened map contains multiple possible endto scenarios 
method hierarchical representation maps containing different locations types stubs different features system characteristics appears general flexible adaptable architectures 
obviously important designers exercise care properly defining root maps stubs allow type modifications refinements expected various stages design 
systems new converged voice data marketplace expected highly dynamic respects 
dynamically customizable suit needs individual enterprises 
adapt rapidly changing network environments highly dynamic applications 
ucms dynamic components pluggable behavior compact form multiple levels abstraction dynamic architectures understandable easier implement 
capability lacking popular software engineering description techniques case tools examined 
graphical tool called ucm navigator developed carleton university order help drawing ucms 
features tool maintains various bindings plug ins stubs responsibilities components pre post conditions 
allows users navigate web browser visit edit plug ins related stubs levels 
basic system architecture highly dynamic nature modern telecommunications systems noted 
characteristic addressed maintaining required quality service 
system consideration new architecture designed 
call processing goes types components agents device agents handle devices physical endpoint call telephone computer capable voice ip diary 
personal agents pagent know restrictions privileges specific users 
know preference relationships user devices 
functional agents represent functional role endpoint call president director secretary 
instances active simultaneously user 
scenario perspective helpful distinguish roles played components originating terminating 
features processed components appropriate 
exact functionalities components important understanding methodology described 
case maps call model ucm fi detection system architecture including various features captured ucms example shown 
shows part root ucm limited originating pagent elements 
scenario starts acquisition string representing role person called 
note existence dynamic stubs contain plug ucm describing stub appropriate selection policy 
feature ucms plugged stubs 
dial string acquired da originating pa originating fa originating da originator originating find pa basic call feature basic call failed success failed failed notify device failed ca originating basic call feature failed originator find fa part basic call root ucm 
ucms created designers structured hierarchical way describe features considered project 
nearly stubs way plug ucms reused stub 
failed originator basic call setup failed responsibilities plug ins levels deep hierarchy 
set ucms currently extended support additional features 
due large number stubs functionalities current ucms reusability expect need additional ucms capture extra features 
ucms help directly detection avoidance undesirable interactions prototype generated 
inspecting specific locations dynamic stubs designers may select appropriate strategies 
instance selection policy preconditions incomplete overlapping non deterministic cause problems 
detection resolution non determinism issues done locally stub level experience far better system level 
correctness selection policies validated testing lotos specification section 
lotos concepts lotos specification telephony systems team application limited sdl far common 
reason lotos concepts explained contrasting corresponding sdl concepts 
languages largely overlap range applicability substantial differences 
sdl requires identification specific system components specific directional messages components specific system states lotos specify systems terms partial orders generic responsibilities refined exchanges directional messages 
particular sdl actions messages sent component lotos actions events necessarily directional involve simultaneously system components 
synchronization concept explained 
events implemented directly implementation may require protocol 
represent conceptual behavioral units useful certain stages design 
seen sense ucm responsibilities correspond closely lotos actions 
important consequences ucms mapped lotos fairly easily components identified 
lotos may appropriate formal specification validation initial stages design 
sdl implementation oriented appropriate stages design 
lotos inspired ccs interprocess communication mechanism direct multi way synchronization components csp 
similar sdl remote procedure call occur number components 
think connecting number electrically charged wires establish common charge similarly lotos synchronization event different processes establish common values 
sdl lotos concept built queues components 
queues needed explicitly specified 
brief overview lotos syntax semantics 
lotos represents behavior system actions behavior expressions 
actions represent basic behaviors system targeted conceptual level example req ring 
internal invisible action written basic behavior expressions exist called deadlock unsuccessful termination exit successful termination process instantiation name lotos process set gate parameters set value parameters 
behavior expressions actions lotos operators construct complex behavior expressions follows action prefix operator disable operator choice operator full synchronization operator enable operator interleaving operator hide transforms offerings actions selective synchronization operator lotos includes basic data type formalism called act represent data abstractions lotos similar sdl 
boolean value expressions guard actions 
data associated actions basic ways meaning value offer meaning value query 
combined actions example com telephone number denotes action gate com current value variables offered value telephone queried simultaneously 
offers queries called experiments 
note data involved actions simply gate names 
data actions gate names experiments data offers queries 
sequences lotos actions called traces 
traces include visible actions internal actions shown completeness 
lotos operators possible represent clearly telephony system structures terms agents coexist independently interleave communicate selective synchronization follow actions enable interrupt disable 
internal system actions hidden 
specification styles possible lotos 
styles appropriate representing abstractly system requirements appropriate representing implementation structures 
translation case maps lotos translation ucms lotos corresponds formalization mapping semiformal model formal executable remaining design specification level 
analytic approach taken translation done manually verified formally 
order mapping ucm system analyzed missing information confusions errors detected corrected 
experience shows potential design errors caught stage 
translation guidelines defined guidelines construct lotos specifications ucms start points points usually represented lotos gates prototype 
controlled observed validation 
ucm responsibilities represented gates additional message exchanges ensure causality components 
lotos gates representing ucm responsibilities channels observable users hidden hide operator 
ucm components represented processes synchronized shared channels gates 
structure specified resource oriented style multi way synchronization interleaving operators 
containment components maintained 
component represented lotos process contains sub components processes representing instantiated possibly defined process 
multiple path segments possibly different ucm scenarios cross component integrated lotos process alternatives 
elementary processes specified state oriented style choice action prefix operators guarded behaviors 
data types represent databases operations conditions lotos guard expressions 
symmetry enforced synchronized actions actions component process mirrored synchronized processes locally hidden 
components stubs sub processes stub 
processes specify selection policy type composition possible plug ins 
dynamic stubs may multiple sub processes plug static stubs refined directly process representing plug 
stub processes receive list entry exit points input output list termination 
interprocess synchronization translation process starts analyzing ucm model determine appropriate specification structure 
analysis lotos designer choices concerning mapping agents stubs plug ins guidelines mentioned section 
ucms higher level abstraction lotos analysis gives opportunity inspecting documentation detecting missing parts contradictions problems 
consider processes gate parameters brackets represent visible channels process da pa pa da exit da pa exit endproc process pagent pa da da pa exit da pa exit endproc combined require synchronization gates follows da pa pa da da pa pa da pagent pa da da pa synchronizing points processes pagent actions involve gates da pa pa da 
lotos semantics processes wants fire action gate da pa pa da process willing action executable 
synchronizing action implies agreement values parameters event experiments 
combined interleaving operator experiments may provide dynamic kind synchronization 
subtlety called gate splitting 
involves including actions experiments play role addresses 
example action starts constant synchronize actions start way value identifiers action starts synchronize actions consider communicate different 
simplistic approach consider set gates direction communication 
produce undesirable static structure inappropriate dynamic nature agent systems notice set gates changed pagent added removed 
gate splitting possible dynamic structures 
typical application switch may wish synchronize phone time 
phone processes interleaved run independently switch ready synchronize switch com com phone com phone com 
phone com experiment included action uniquely identify phone switch may selectively synchronize specific 
query telephone number process phone switch specify action com telephone number previous definitions pagent extended gate splitting system containing processes 
pagent processes instantiated parameter identity 
process definitions process da pa pa da exit da pa pagent connect exit da pa pagent disconnect exit endproc process pagent pa da da pa pagent exit da pa pagent message data exit endproc system behavior follows da pa pa da da pa pa da pagent pa da da pa pagent pagent id pagent pa da da pa pagent pagent id instance pagent outputs identifier pagent pagent respectively queries message sort data gate da pa 
may synchronize pagent pagent event da pa pagent connect pagent pagent event da pa pagent connect 
cases offers identifier pagent message wishes send 
action executed pagent needs agree experiment pagent identifier accept second message 
techniques specification instances processes instance created process recursive instantiation demand 
instances pagent agents composed static dynamic stubs 
stubs turn contain stubs 
static stub represented single process 
dynamic stub represented instantiation process name 
process handles instantiation time exclusive choice depending selection policy sub processes sub process corresponds plug dynamic stub 
choices result lotos specification close ucm model 
translation features straightforward technique consisting ucm model replacing plug ins 
features considered far projects outgoing call screening ocs call forward cfa call forward busy cfb call hold ch recall rc call pickup cp call transfer ct 
mentioned described features specified lotos ucms 
translation lotos resulted specification lines 
validating system lotos lotos specification executable constitutes prototype final system 
means example possible execute specification order see response possible actions state step step see specification accepts rejects certain scenarios analyze large number scenarios means reachability analysis model checking tools 
methods order achieve different types assurance quality specification 
main technique project far second acceptance rejection test scenarios form specification level testing 
ucm testing lotos test scenarios manually extracted ucm model 
model start scenario extraction carried simply possible paths model 
works derivation basic system individual feature scenarios rely directly specification 
sequence activities compose path extracted ucm 
sequence translated lotos process 
resulting scenario testing lotos specification system order verify consistency specification ucm validate requirements 
derive validation test sequences ucms 
realistic systems high finite number global states generation exhaustive test suites impossible 
essential select carefully small finite set validation test cases 
base strategy exploration ucm paths strategy similar white box approaches sequential programs 
depending targeted functional coverage choose explore paths combination paths temporal sequences resulting concurrent paths call testing patterns selection strategies ucms 
number testing patterns defined ucm constructs alternatives results paths path combinations combinations sub conditions complex condition 
concurrent combination temporal sequence combinations combinations 
loops iteration iterations iterations 
patterns help document test selection strategies related functional coverage designs represented ucms 
list exhaustive ucm constructs exist patterns combinations constructs defined 
example suppose test goal check scenario call initiated goes ocs refused terminating party busy 
terms ucms corresponds path shown req msg chk allowed upd busy sequence req chk upd msg ucm paths lotos tests 
possible sequence shown 
sequence translates test 
content process may vary depending architectural decisions taken generation lotos specification ucms 
instance local responsibilities chk upd communication users agents channels agents may hidden 
italicized actions removed test leaving actions visible users req msg 
note gate splitting help identify users agents involved various events messages seen section 
various rejection test cases purpose improve robustness correctness design defined sequence 
note conditions accumulated path allowed busy satisfied 
helps defining initial configuration system instances databases test pass successfully 
tools lola validation test suites consisting dozens test cases checked large specifications minutes seconds 
specification non deterministic lola checks possible outcomes test cases need applied achieve coverage 
functional coverage criteria see ucm paths covered applied 
testing technique appears limited tests specifications derived ucms proves practically feasible approach validation verification 
main reason functional tests closer requirements simpler validate specification integrates features 
verification interaction detection process req user user user agent req user chk agent allowed agent agent req agent busy upd agent agent agent busy agent user busy msg user busy success endproc purpose scenarios derived ucm model twofold verify lotos specification ucms validate requirements test system interactions 
furthermore scenarios derived types tests mind basic system properties basic properties system possess tested basic call features 
scenarios involve simple tests calling party idle calling party busy 
possibly hidden individual features properties features taken individually tested 
feature needs working properly integrated features detecting interactions 
feature interactions undesirable feature interactions tested 
test scenarios aim reveal problems feature inflict features 
extracting types scenarios fairly straightforward goal verify lotos specification consistent ucms 
extracting scenarios feature interaction detection involves understanding properties features behaviors relation system 
features interact interact 
strategy consists analyzing features target pairs features appear risk interaction 
analysis requires knowledge system features 
carried close collaboration design team formal specification team 
feature interaction scenario precondition initial configuration describes desired state affairs scenario tested 
example scenario see section user registered outgoing call screening screens calls user calls talks 
puts hold calls talks transfers held talking 
transfer fails ocs gets fast busy tone back ucms help pruning scenarios cause interactions ucms guide selection feature interaction test cases 
example potential interactions avoided features allowed proceed independently different stubs ucm 
certain extent stubs encapsulate features environment 
ucm selection interaction test cases little idea promising currently topic study 
problems detected solved specifying lotos prototype 
testing phase helped detecting subtle problems resulted unclear expected interactions features race conditions 
far developed checked test cases basic system properties test cases individual properties features tests detection interaction pairs features 
observed initial set ucms built real problems scarce 
increased confidence effectiveness ucm design approach 
expected features added human ability prevent detect interaction design inspection decrease testing method prove valuable 
detection interactions limited ucm testing 
having lotos model enables complementary techniques available lotos tools 
include goal oriented execution observers 
planning start experimenting cadp tool allows extensive reachability analysis model checking 
translation lotos traces mscs animation tools raw results testing process form lotos traces commented sequences lotos actions 
order understandable users familiar lotos syntax tools developed 
tool translator lotos traces message sequence charts mscs 
main difficulty addressed lotos actions non directional result multi way synchronization arrows mscs represent messages generated entity directed entity 
difficulty overcome associating directions gates indicating sender receiver entities pagent parts gate name see examples 
user prepared configuration tables define structure system messages tool 
action typically includes fixed order described configuration tables list experiments identifiers instances sender receiver entities message type parameters message 
tool constructs mscs drawing vertical lines corresponding components specified configuration tables drawing arrows representing messages 
fact lotos traces translated msc machine processable representation mpr 
mscs printed tools tau 
shows flat ucm illustrates scenario section msc corresponding part ucm 
call establishment disconnection shown msc internal system actions represented states 
note example ucm msc level abstraction reality seldom case section 
example illustration purposes part design documentation higherlevel better structured detailed due space confidentiality constraints 
tool translate msc mpr notation lotos traces developed 
tool order check lotos specification recognizes scenarios produced hand tools sdl tools 
da alice idle da carol ring idle hold dial bob talk alice bob idle ring da bob hold bob held dial carol talk alice carol transfer bob carol recall carol ocs true hold carol talk alice carol internal switch held released scenario alice wants call bob gets dial tone dials bob number 
bob idle bob da rings 
bob talks alice 
alice wants call carol puts bob hold gets dial tone calls carol number 
carol da idle rings 
carol talks alice 
alice wants transfer bob carol presses transfer button 
carol put hold 
bob unable establish communication carol outgoing call screening set block calls carol 
gets fast busy tone link alice carol re established 
everybody 
transfer bob carol partial ucm partial msc target system 
user da da user da user alice da da bob da carol hold dial carol held talk alice carol recall carol ocs true talk alice carol ring held released tool developed graphic animator traces 
shows system form conventional structural diagram boxes connectors 
user causes message firings mouse 
message sent component animator shows movement arrow 
boxes associated expressive icons change depending message received showing telephones going hook hook 
prototypes tools described far completed 
advanced graphic animator real simulator enables see system responses user actions composing numbers lifting handset icons screen inspired advanced stage design 
tools requires lotos specifications written specific guidelines 
main result project shown satisfaction industrial partner design methodology telephony switches combined ucm lotos specification methods feasible effective practice 
companion project fast spec test methodology extended generation functional test cases testing implementation switches 
number research directions suggest order complete methodology 
translation ucm lotos helped 
done user assisted tools construct skeleton specifications corresponding certain architectures 
alternatively intermediate language defined 
language look ucm semantically closely related lotos 
longer range goal defining new formal language closely corresponding ucms 
extension analysis larger number features new problems 
feature databases capability configuring systems different sets features designed 
features critical automated tools propose scenarios tested 
nakamura address issue filtering approach extracts interaction prone scenarios configuration ucm stubs plug ins 
acknowledgments 
research funded part communication information technology ontario natural sciences engineering research council canada 
contributed development agent concept ware authored ucms 
participation authors fast spec test project led generated useful discussion 
andrade logrippo yi formal methods mobility standards 
proc 
ieee emerging technologies symposium wireless communications systems richardson tx usa 
www org pub ets pdf buhr gray logrippo case maps capture validation distributed systems requirements 
re fourth ieee international symposium requirements engineering limerick ireland june 
www org pub re pdf logrippo case maps lotos prototyping validation mobile group call system 
appear computer communications 
www org pub cc pdf de correctness preserving transformations early phases software development 
van de visser software development lotos 
kluwer 
buhr case maps object oriented systems prentice hall 
www org pub ucm book pdf buhr gray feature interaction visualization resolution agent environment 
bouma eds fifth international workshop feature interactions telecommunications software systems fiw lund sweden september 
ios press 
www org pub fiw pdf buhr case maps architectural entities complex systems 
ieee transactions software engineering special issue scenario management 
vol 
december 
www org pub tse final pdf sarma sdl formal object oriented language communicating systems 
prentice hall 
fu logrippo feature interaction detection lotos approach 
appear computer networks 
open caesar open software architecture verification simulation testing 
bernhard steffen editor proceedings international conference tools algorithms construction analysis systems tacas 
hoare communicating sequential processes 
prentice hall 
iso information processing systems open systems interconnection lotos formal description technique temporal ordering observational behaviour geneva switzerland brinksma ed 
itu recommendation specification description language sdl 
geneva switzerland 
itu recommendation message sequence chart msc 
itu geneva switzerland logrippo goal oriented feature interaction detection intelligent network model 
bouma eds fifth international workshop feature interactions telecommunications software systems fiw lund sweden sept 
ios press 
bergman sdl framework prototyping validation services 
eds 
sdl 
elsevier 
birk case driven analysis feature interactions 
bouma velthuijsen eds feature interactions telecommunications systems ios press 
application case maps system design tool support 
eng 
thesis dept systems computer engineering carleton university ottawa canada 
www org pub am thesis pdf milner communication concurrency 
prentice hall 
nakamura logrippo feature interaction filtering case maps requirements stage 
sixth international workshop feature interactions telecommunications software systems fiw glasgow scotland may 
pav testing functionalities lola 
ma zquez eds formal description techniques iii ifip north holland 
thomas modelling analysing user views telecommunications services 
dini logrippo 
eds 
feature interactions telecommunications distributed systems iv ios press 
turner architectural description intelligent network features interactions 
computer networks isdn systems vol 
september 
uml revision task force 
omg unified modeling language specification version june 
uml shl com artifacts htm case maps web page ucm user group www org vissers scollo van brinksma specification styles distributed systems design verification 
theoretical computer science 
weiss gray diaz experiences service environment distributed multimedia applications 
dini logrippo 
eds 
feature interactions telecommunications distributed systems iv ios press 
