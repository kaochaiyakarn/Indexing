rumor mobile data access optimistic peer peer replication richard guy peter reiher david ratner gunter wilkie ma gerald popek university california los angeles los angeles ca usa fmg www cs ucla edu rumor replication html rumor report fmg cs ucla edu currently software com currently silicon graphics affiliated platinum technology 
rumor optimistically replicated file system designed mobile computers 
rumor uses peer model allows opportunistic update propagation sites replicating files 
outlines basic characteristics replication systems mobile computers describes design implementation rumor file system presents performance data rumor 
research described demonstrates feasibility peer optimistic replication support mobile computing 
mobile computers typically suffer weaker connectivity enjoyed wired machines 
latencies significantly higher bandwidth limited power conservation requirements discourage communication communications media cost money long duration disconnections norm 
context data management techniques dramatically reduce need continuous connectivity highly desirable 
potential class solutions data replication copies data placed various hosts network generally near users local users 
extreme data replica stored mobile computer desires access read write data user data access local 
ideally replicas data item value times responsibility replication system maintain consistency face updates 
specific goals replication system include improved reliability availability data autonomy host network traffic load balancing data access performance 
supported united states defense advanced research projects agency contract number dabt 
describes rumor replicated file system designed mobile environment 
goal mobility led development decisions focusing availability autonomy network traffic reduction mobile machine point view 
discusses design alternatives replicated file systems decisions rumor system architecture system performance rumor system lessons learned developing rumor 
replication design alternatives replication systems usefully classified dimensions conservative vs optimistic update client server vs peer peer immediate propagation vs periodic reconciliation 
conservative vs optimistic update fundamental question replicated data systems handle updates multiple copies data item 
copies communicate instantaneously concurrent updates different replicas data item possible violating ideal semantics emulating single copy data storage 
conservative update replication systems prevent concurrent updates causing mobile users store replicas data items updates rejected frequently particularly connectivity poor non existent 
connected mobile users spend bandwidth check consistency update 
conservative strategies appropriate wired world poorly mobile environments 
optimistic replication allows machine storing replica perform update locally requiring machine acquire locks votes replicas 
optimistic replication minimizes bandwidth connectivity requirements performing updates 
optimistic replication systems allow conflicting updates replicated data items 
simulation results extensive actual experience shown conflicts rare usually easy resolve 
client server vs peer peer client server replication updates propagated server machine propagates clients 
peer peer systems allow replica propagate updates replica 
client server systems simplify replication systems limit costs partially imposing bottleneck server slow propagation updates replicas subject failure server 
peer systems propagate updates faster making available connectivity complex implementation states achieve 
hybrid systems peer replication servers machines serving clients 
hybrid systems typically try avoid disadvantages peer systems requiring tight connectivity servers implying disconnected mobile machines 
client server replication choice mobile systems mobile computers disconnect central network remain disconnected return 
workers take machines home night go trips portable computer connect home machine modem away examples mobile computing suitable client server replication 
peer replication choice connectivity patterns mobile computers predictable 
environments suited peer replication include disaster relief teams carry infrastructure wireless office cooperating workers 
immediate propagation vs periodic reconciliation updates data replicas propagated replicas 
update propagation attempted immediately update occurs time 
immediate propagation notifies replicas new state data quickly possible works 
may scarce expensive resources immediate propagation important 
alternatively updates propagated convenient time typically batched 
option periodic reconciliation spread updates quickly allows propagation occur cheap convenient 
systems permitting disconnected operation form periodic reconciliation supported immediate propagation fail machines disconnected 
options supported cost extra complexity possibly higher scarce expensive resources 
rumor design architecture rumor optimistic peer peer reconciliation replicated file system 
rumor built user level advantages portability limiting replication costs 
operational years research laboratory sites worldwide runs unix systems 
achieve higher portability rumor built strictly application level 
rumor intellectual roots ficus replicated file system kernel sunos implementation optimistic peer topeer replication system immediate propagation reconciliation fall back 
rumor borrows internal consistency policies algorithms ficus 
systems allow updates replica available 
reconciliation algorithms systems reliably detect concurrent file system updates automatically handle concurrent updates directory replicas 
rumor ficus permit users write tools automatically reconcile concurrent file updates kinds files 
rumor operates entirely application level 
rumor requires kernel modifications dynamically loadable libraries 
installation accomplished entirely super user root privileges allowing install upgrade rumor 
benefits application level implementation include easily portable different systems platforms free distribution rumor source code license restrictions rumor performance overhead normal operation host machine 
installed critical path user operations rumor users pay performance cost choose reconcile 
rumor purely optimistic uses peer replication 
rumor peer replication mechanically permits replica reconcile replica mechanisms exist effectively constrain patterns reconciliation 
rumor emulate client server system constrained topology update propagation suitable particular situations 
rumor maintains consistency purely periodic process called reconciliation 
rumor attempt instant update propagation 
periodic reconciliation problems temporary network machine failures easier solve reconciliation guarantees maintain consistency communication restored 
additionally multiple updates single file batched transmitted update usual batching performance improvement 
furthermore costs communicating replicas amortized updates multiple files handled single reconciliation 
rumor operates file sets known volumes 
volume continuous portion file system tree larger directory smaller file system 
example user mail directory constitute volume 
volumes systems offer key benefits 
take advantage locality performance grouping logically connected files single physical location 
performance intensive tasks initiated volume entity volume member 
volumes provide natural firewalls prevent propagation errors help establish fundamental security barriers 
volumes assist naming allowing collection logically connected files identified acted single name 
reconciliation operates volume granularity 
reconciliation time replicas synchronize single volume 
machines store multiple volumes reconciliation periodically executes separately volume 
reconciliation interval controls balance point consistency system load 
users free customize add intelligence load threshold values reconciliation interval 
disadvantage pure volume replication entire volumes stored replica reconciled 
significant disadvantage mobile computing system disk space available storage may limited small quantities bandwidth suitable propagating important updates available 
rumor overcomes problem selective replication file reconciliation mechanism 
selective replication allows particular replicas store portions volume guar correct operation 
file reconciliation permits individual files reconciled entire volume lower costs 
reconciliation operates pair communicating replicas oneway pull oriented fashion 
way mode general way model lends support inherently uni directional forms communication floppy disk transfer 
reconciliation time target replica selects source replica reconcile selection number criteria described 
source replica identified contacted reconciliation ensures target learns information known source 
information includes gossip source replica transfers local updates updates learned previous replicas 
instance machines rarely directly communicate share data mutually accessible third machine gossips behalf 
reconciliation involves pairs replicas replicas guarantee simultaneously available 
example mobile computers operating portable workgroup mode may connected single computer 
additionally operating pointto point mode underlying gossip transfer mechanism allows flexible dynamically changeable network configuration terms machines accessibility 
broadcast multicast reconciliation save significant amounts bandwidth implemented rumor 
reconciliation responsible maintaining data consistency files 
rumor uses parker version vectors detect updates update update conflicts concurrent updates 
version vector dynamic vector counters counter replica 
counter tracks total number known updates generated replica replica independently maintains version vector replicated file comparing version vectors update histories corresponding file replicas compared 
particular choices communication partners sites forms reconciliation topology 
reconciliation algorithms topology independent actual topology affect number messages exchanged replicas time required reach consistency 
rumor utilizes adaptive ring volume replicas reconfigures response current replica availability provides reconciliation occurs accessible ring member 
extreme replicas communication adaptive nature ring allows reconcile 
adaptive ring requires linear complexity number volume replicas propagate information additionally robust network failures reconfigurations 
due adaptive nature ring require point point links interconnecting members allows sharing occur rarely communicating participants relying third party replicas gossip behalf 
ring scale number replicas 
rumor designed handle arbitrary numbers replicas correctly manage data consistency 
performance correctness dictates replication factor scaling rumor 
rumor scales gracefully approximately replicas volume 
extension rumor called roam allows order magnitude better scaling 
replicated systems face special problems handling deallocation system resources disk space held unnamed file system objects 
deallocation process called garbage collection 
centralized system garbage collection relatively simple 
name file deleted file resources reclaimed 
garbage collection harder distributed replicated environment due dynamic naming 
dynamic naming allows users generate new names existing files file removed names removed including new names remote replicas local removal name may indicate resources reclaimed 
rumor uses fully distributed phase coordinator free algorithm ensure replicas learn garbage collection process eventually complete set participants may simultaneously 
rumor enforces ficus lost updates semantics guarantees data version preserved long file globally accessible 
rumor architecture rumor needs manage attributes standard file system attributes version vectors 
replication state maintained rumor lookaside database hidden volume 
currently rumor uses specially formatted file database general database facility supports transactions required recover failures unexpected terminations execution 
attribute database updated file modification time rumor contains kernel code trap updates 
updates detected reconciliation time 
comparing file modification times occasionally resorting checksum comparisons rumor guaranteed detect file updates 
case directories list directory entries utilized checksum general checksum comparisons rare required special circumstances involving explicit manipulation timestamps updates occur 
attribute database periodically updated transient files created removed reconciliation executions noticed rumor 
temporary files definition unimportant periodic database updates saves user expense replicating files 
reconciliation separated distinct phases scan recon 
shows data control flows reconciliation 
scan phase responsible determining set files volume including detecting new files updating attributes existing files noticing removal previously managed files 
remote contacting phase finds remote replica informs reconciliation performs scan fig 

rumor architecture indicating control data flow 
remote replica 
recon phase takes list local file attributes list remote file attributes received remote replica remote contacting phase compares appropriate action update local replica determined comparison sets attributes 
scan phase reads previous set file attributes database recursively traverses volume detecting new files modifying attributes previously known files updated 
updates detected examining modification timestamps occasionally checksums list directory entries directories 
update occurred rumor increments version vector obtains new checksum updates remaining attributes 
scan phase detects files removed user comparing output traversal list files previous scan stored attribute database 
scan phase completes rumor writes new list files attributes lookaside database provides recon phase processing 
remote contacting phase locates remote replica volume reconciliation topology obtains list replica files attributes 
remote site generates list files attributes simply initiating scan phase volume 
file data transferred phase reconciliation uni directional transport mechanism floppy disks 
case data sent remote site communications 
recon phase performs majority reconciliation 
lists files attributes local remote file versions compared reconciliation actions taken appropriate 
comparison yield different results local version dominates remote version action need taken remote site obtain new version initiates reconciliation 
remote version dominates request file data remote site 
versions equivalent action need taken 
versions conflict received concurrent updates processing actions taken 
conflict automatically resolved user notified conflict email instructions resolve 
recon phase detects new files deletions old files 
data requested new files created locally 
file removals processed removing appropriate local object participating garbage collection algorithm 
data requests serviced asynchronous server remote site 
data requests generated recon phase asynchronously processed remote server returns file data transport mechanism 
performing data request transfer asynchronously allows recon phase perform useful wasted time waiting network transmissions 
rumor interacts specific data transport mechanism simple operations 
currently supported transport mechanisms include nfs email floppy disks 
asynchronous data server receives data requests processes performing limited file ensure attributes sent file data date 
file updates generated time list files sent data request received rumor trap updates 
rumor checks attributes sending data updates propagated correctly complex cases 
new attributes written attribute database shipped recon phase machine 
similarly installing updates machine pulling updates rumor check attributes file ensure simultaneous user activities updated 
rumor propagate data properly conflicting updates 
rumor contains selective replication facility allows users specify files volume stored particular replica 
reconciliation transport updates files stored pulling site 
files scanned locally reconciliation allowing local attribute database updated 
reconciling entire volume may costly bandwidth limited 
rumor permits users specify individual files reconciled giving user control costs paid maintain file synchronization 
option limits costs reconciliation costs shipping metadata related particular file necessary file contents 
basically single file reconciliation applies rumor reconciliation mechanism file entire volume 
rumor provides data transmission security enforce policies may replicate particular files 
system works rumor provide protections 
rumor provides mechanism portable computer users store local replicas files help decide files replicated 
seer system provides automatic file hoarding purpose rumor replication mechanism enforce seer decisions files hoard 
better secondary storage space management growing requirement portable computers 
performance determining performance optimistically replicated system easy 
particular determining degree system achieves semantics single copy file system difficult 
best available data kind comes 
directly measuring rumor data suggestive aspect rumor performance 
space permits limited discussion rumor performance include data important metrics run time perform reconciliation realistically large volumes disk storage overheads required support rumor 
rumor design time space overheads visible larger numbers smaller files data reported focus portion exploration space 
ran experiments reconciling updates large volume replicated machines 
machines dell latitude portable computers running processors mhz mbytes main memory 
communications media dedicated ethernet running traffic 
test volume mbytes disk space store files median file size kbytes maximum file size kbytes 
experiments various percentages files volume updated replica replica invoked reconciliation pull updated versions 
shows resulting elapsed time perform 
measurements represent runs graphed point confidence intervals displayed 
reconciling large volume updates took minutes 
reconciling volume files number size data updated took little minutes 
shows increase run time close linear 
running minimal recursively executed command printed file names volume took seconds 
reconciliation times shown reasonable periodic modem ideally shorter 
disk overhead store rumor attributes necessary information replica 
shows number bytes transported wire perform 
figures include actual changed user data rumor exchange file lists communications overheads fig 

rumor reconciliation times fig 

data transferred reconciliation added rumor 
maximum amount data transferred mbytes 
times required perform reconciliation modem handle data transfer rate required rumor slowing process 
rumor fully optimized space time 
overheads reported improved significantly optimization 
related replicated file systems database systems 
rumor ancestor ficus turn strongly influenced locus shares goals rumor address mobility concerns 
cmu coda optimistic client server replication system targeted mobility 
optimistic bayou system xerox parc provides peer replication requires application aware conflict detection resolution provide selective replication 
mitsubishi reconcile facility designed support dos unix replicated directories currently available 
number commercial filesystem database products support optimistic replication varying degrees 
novell replication services supports reconciliation optimistic file replication selective replication 
sybase replication server supports optimistic database replication supporting documentation discourages usage 
similarly oracle oracle relational database product allows optimistic updates provides semantic tools help designers avoid conflicting updates possible 
summary combination principles embedded design implementation rumor essential effective mobile data access emerging computing communications environment st century 
optimistic peer peer reconciliation data replication techniques suited meet challenges lie ahead 
rumor working system implemented object oriented style largely support code perl 
beta version rumor linux freebsd available ficus www cs ucla edu rumor 

alan downing 
conflict resolution symmetric replication 
proceedings european oracle user group conference 

richard guy john heidemann wai mak thomas page jr gerald popek dieter 
implementation ficus replicated file system 
usenix conference proceedings pages anaheim ca june 
usenix 

john howard 
reconciliation share files occasionally connected computers 
proceedings fourth workshop workstation operating systems pages napa california october 
ieee 

geoffrey kuenning bagrodia richard guy gerald popek peter reiher wang 
measuring quality service optimistic replication 
proceedings ecoop workshop mobility replication brussels belgium july 

geoffrey kuenning gerald popek 
automated hoarding mobile computers 
proceedings th symposium operating systems principles pages st malo france october 
acm 

novell novell replication services white 
unpublished www novell com whitepapers nrs 

thomas page jr richard guy john heidemann david ratner peter reiher goel geoffrey kuenning gerald popek 
perspectives optimistically replicated peer peer filing 
software practice experience december 

parker jr gerald popek gerard allen stoughton bruce walker evelyn walton johanna chow david edwards stephen charles kline 
detection mutual inconsistency distributed systems 
ieee transactions software engineering may 

gerald popek bruce walker 
locus distributed system architecture 
mit press 

david ratner 
selective replication fine grain control replicated files 
technical report csd university california los angeles march 
master thesis 

david howard ratner 
roam scalable replication system mobile distributed computing 
phd thesis university california los angeles los angeles ca january 
available ucla csd technical report ucla csd 

reiher page crocker cook popek 
secure service widespread file sharing 
proceedings privacy security research group workshop network distributed system security february 

peter reiher john heidemann david ratner gregory skinner gerald popek 
resolving file conflicts ficus file system 
usenix conference proceedings pages boston ma june 
usenix 

satyanarayanan james kistler kumar maria okasaki ellen siegel david steere 
coda highly available file system distributed workstation environment 
ieee transactions computers april 

sybase sybase sql replication server enterprise wide replication solution 
white www sybase com products system html 

douglas terry marvin theimer karin petersen alan demers mike spreitzer carl hauser 
managing update conflicts bayou weakly connected replicated storage system 
proceedings th symposium operating systems principles pages copper mountain resort colorado december 
acm 

wang peter reiher bagrodia 
simulation framework evaluating replicated filing environments 
technical report csd university california los angeles june 
