parallel hashed oct tree body algorithm best student supercomputing 
michael warren john salmon theoretical astrophysics physics department mail los alamos national laboratory california institute technology los alamos nm pasadena ca report efficient adaptive body method designed implemented 
algorithm computes forces arbitrary distribution bodies time scales log particle number 
accuracy force calculations analytically bounded adjusted user defined parameter percent relative accuracy machine arithmetic accuracy 
pointers indicate topology tree identify possible cell key 
mapping keys memory locations achieved hash table 
allows program access data efficient manner multiple processors 
performance parallel program measured processor intel touchstone delta system 
comment number wide ranging applications benefit application type algorithm 
body simulations fundamental tool study complex physical systems 
starting basic physical interaction gravitational van der waals follow dynamical evolution system bodies represent phase space density distribution system 
body simulations essentially statistical nature physical system directly modeled bodies case molecular dynamics simulations 
bodies implies accurate complete sampling phase space accurate complete results 
unfortunately minimum accuracy required model systems interest depends having larger current computational resources allow 
department physics university california santa barbara interactions occur pair particles body simulation computational scales asymptotically effort expended reduce computational complexity simulations retaining acceptable accuracy 
approach interpolate field lattice resolution computed time gamma multigrid gamma log gamma fourier transforms 
dependence time complexity 
drawback method dynamics scales comparable smaller modeled 
dimensions restricts dynamic range length part part parallel supercomputer insufficient calculations 
approach divide interactions near far sets 
forces due distant particles updated frequently forces ignored completely decides effects distant particles negligible 
risks significant errors hard analyze 
significant clustering system reduce efficiency method large fraction particles near set 
past years number methods introduced allow body simulations performed arbitrary collections bodies time imposition lattice 
common truncated expansion taylor expansion legendre expansion poisson expansion approximate contribution bodies single interaction 
resulting complexity usually cited log careful analysis dependent variables held constant constant timestep error constant integrated error constant memory constant relative error respect discreteness noise leads different scaling 
event scaling tremendous improvement methods allow accurate computations vastly larger basic idea body algorithm truncated series approximation partition arbitrary collection bodies manner series approximation applied pieces maintaining sufficient accuracy force quantity interest particle 
general methods represent system bodies hierarchical manner spatial tree data structure 
aggregations bodies various levels detail form internal nodes tree called cells 
generally expansions limited domain convergence infinite expansion converges truncated expansion introduces errors magnitude 
making choice cells interact reject inaccurate critical success algorithms 
decision controlled function shall call multipole acceptance criterion mac 
multipole methods described literature briefly reviewed section 
background multipole methods appel introduce multipole method 
appel method uses binary tree data structure leaves bodies internal nodes represent roughly spherical cells 
care taken construct set cells minimize higher order multipole moments cells 
mac size interacting cells 
method originally thought log shown 
barnes hut bh algorithm uses regular hierarchical cubical subdivision space oct tree dimensions 
dimensional illustration tree quad tree show fig 

construction bh trees faster construction appel trees 
bh algorithm mac controlled parameter requires cell size divided distance particle cell center mass usually range 
cell cell interactions computed method scales log fast multipole method fmm greengard rokhlin achieved greatest popularity broader population applied mathematicians computational scientists 
uses high order multipole refer bodies particles understood general atomic objects may refer mass element charge vortex element panel quantity subject multipole approximation 
representation regular tree structure dimensions quad tree contains particles centrally clustered 
sions interacts fixed sets cells fulfill criterion separated 
fmm welldefined worst case error bound ffl guaranteed met multipole expansions carried order gamma log ffl 
dimensions systems excessively clustered fmm efficient 
implemented parallel computers 
crossover point value algorithm faster direct method stringent accuracy low particles 
hand implementations fmm dimensions performed 
schmidt lee implemented algorithm dimensions find crossover point particles 
reason computationally intensive step scales dimensions dimensions 
possible obtain better performance smaller worst case error large case 
major advantage fmm methods barnes hut error bound rigorously defined 
deficiency remedied shown section 
analytic error bounds analyzed performance barnes hut algorithm shown worst case errors quite large fact unbounded commonly values opening criterion 
developed different method deciding cells interact 
moments mass charge distribution cell method achieves far better worst case error behavior somewhat better mean error behavior amount computational resources 
addition analysis provides strict error bound applied fast multipole method 
error bound superior previously information bodies contained cell 
information takes form easily computed moments mass charge distribution strength cell 
computing information takes place tree construction stage takes little time compared phases algorithm 
exact form error bound da gamma max gamma moments defined jae gamma fi jm fi fi gamma scalar gamma distance particle position center multipole expansion largest term multipole expansion max maximal distance particles center cell see fig 

equation essentially precise statement common sense ideas 
interactions accurate ffl interaction distance larger larger 
ffl cell smaller smaller max 
ffl terms multipole expansion larger 
ffl truncated multipole moments smaller smaller 
having interaction error bound overwhelming advantage compared existing multipole acceptance criteria assume worst case arrangement bodies cell bounding interaction error 
reason worst case interaction error arbitrary strength distribution usually times larger error bound particular strength distribution 
causes algorithm knows strength distribution inside cell provide accuracy multipole interactions 
accuracy bmax illustration relevant distances error bound equation 
wasted multipole interaction errors approach worst case error bound added pollute final result 
data dependent interaction error bound prone problem resulting error bound tighter actual error computation exactly 
implementation algorithm fixed error bound poses little difficulty 
may simply solve da interaction interaction user specified absolute error tolerance 
defines smallest interaction distance allowed cell system 
case critical radius analytically derived eq 
fact max max interaction simply trace moment tensor 
general cases better bound computed error bound equation eq 
newton method 
computational expense calculating small need calculated cell 
furthermore newton method need iterated high accuracy 
mac displacement critical radius fig 

computationally similar barnes hut opening criterion fixed box size distance derived contents cell error tolerance 
data dependent mac may replace mac existing algorithms minimal additional coding 
critical radii cell daughters shown circles 
specified accuracy particle lie outside critical radius cell 
shaded region shows spatial domain particles interact lower left daughter cell 
particles outside shaded region interact parent cell unshaded region interact smaller cells inside daughter cell 
computational approach parallel distributed memory machines discussed application analysis galaxy formation may 
analysis extensions computational methods may 
mac described problematical previous methods parallel algorithm requires determination locally essential data tree traversal begins 
data dependent mac difficult pre determine non local cells required advance traversal stage 
problem particularly acute wishes impose error tolerances vary particle particle 
reason algorithm described developed 
rely ability identify priori locally essential data provides mechanism retrieve non local data needed tree traversal 
decision abandon previous parallel body algorithm motivated desire produce friendly code variety research performed computational science physics 
old code result porting previously existing sequential algorithm maze complications brought haphazard addition pieces years 
took full advantage opportunity start clean slate additional benefit years hindsight experience 
considers additional operations necessary dealing tree structure distributed processors clear retrieval particular cells required processor common operation 
conventional tree structure pointers parent cell processor translated valid daughter cells processor 
required translation led pointers proper way represent distributed tree data structure significant hardware operating system support operations 
pointers describe topology tree keys hash table 
identifying possible cell key 
performing simple bit arithmetic key able produce keys daughter parent cells 
tree topology represented implicitly mapping cell spatial locations levels keys 
translation keys memory locations cell data stored achieved hash table lookup 
key corresponding data rapidly retrieved 
scheme provides uniform addressing mechanism retrieve data processor 
basis hashed oct tree hot method 
key construction hashing function define key result map floating point numbers body coordinates dimensional space single set bits conveniently represented vector integers 
mapping function consists translating floating point numbers integers interleaving bits integers single key fig 

note place restriction dimension space physically motivated pay particular attention case 
case key derived single precision floating point numbers fits nicely single bit integer pair bit integers 
apart trivial choice origin coordinate system identical morton ordering called ordering see chapter 
function maps body system unique key 
wish represent nodes tree type key 
order distinguish higher level internal nodes tree lowest placeholder bit bit interleave octal key binary key binary coordinate representation illustration key mapping 
bits coordinates interleaved place holder bit prepended significant bit 
example bit values mapped bit key 
level body nodes prepend additional bit significant bit key place holder bit 
may represent higher level nodes tree key space 
place holder bit ambiguity keys significant bits zeroes 
root node represented key 
dimensional representation tree shown fig 

general key corresponds composite data describing physical data inside domain cell mass center mass coordinates example 
map key memory location holding data hash table 
table length smaller possible number keys hashing function map bit key bit long hash address 
simple hashing function key bit mask gamma selects significant bits 
collisions hash table resolved linked list chaining 
incidence collisions degrade performance great deal 
hashing scheme uses simplest possible function instruction 
really map floating point coordinates key performs usually consider hashing 
structure hierarchical key space selection significant bits key performs extraordinarily reducing incidence collisions 
set keys contain fewer significant bits hash mask hashing function perfect 
set keys represents upper levels tree tend accessed 
lower levels tree number bits key exceeds length hash mask distinct keys result hash address collision 
map coordinates quad tree shown binary key coordinates nodes 
bottom flat representation tree topology induced particles 
rest demonstrates relation key coordinates level tree topology 
links parent daughter cells omitted clarity 
keys keeps keys spatially separated 
parallel machine keys results collisions distributed different processors 
key space convenient tree traversals 
order find daughter nodes parent key left shifted bits result added equivalently ed daughter numbers gamma 
key retrieval mechanism flexible terms kinds accesses allowed 
wish find particular node tree pointers traverse tree start root tree traverse find desired node takes order log operations 
hand key provides immediate access object tree 
entry hash table consists pointer cell body data pointer linked list resolves collisions key various flags describe properties corresponding cell 
order optimize certain tree traversal operations store bits describe daughters cell exist 
redundant information allows avoid hash table lookup functions search cells don exist 
hash table offers important advantages 
access data takes place manner easily generalized global accessing scheme implementable message passing architecture 
non local data may accessed requesting key uniform addressing scheme regardless processor data contained 
type addressing possible normal pointers distributed memory machine 
hash table implement various mechanism caching non local data improving memory system performance 
tree construction higher level nodes tree constructed variety ways 
simplest analogous described 
particle loaded tree starting root traversing partially constructed tree 
particles fall leaf node leaf converted cell entered hash table new leaves constructed level deeper tree hold particles 
takes log steps particle insertion 
topology tree constructed contents mass charge moments cell may initialized post order tree traversal 
faster method possible advantage spatial ordering implied key map 
sort body keys consider bodies list order 
bodies inserted tree start traversal location node created root 
scheme average body insertion requires time 
require log time sort list place keeping body list sorted facilitate parallel data decomposition 
furthermore usually case numerous tree constructions take place course simulation 
positions bodies key space typically change great deal timesteps take advantage efficient insertion sort sorted data timestep 
parallel data decomposition parallel data decomposition critical performance parallel algorithm 
method may conceptually simple easy program may result load imbalance unacceptable 
method attempts balance precisely may take long performance application suffers 
implemented method rapidly domain decompose dimensional set particles load balanced spatial groups represent domain processor 
take advantage properties mapping spatial coordinates keys produce domain decomposition 
idea simply cut onedimensional list sorted body key ordinates see fig 
number processors equal pieces weighted amount corresponding body 
body readily approximated counting number interactions body involved previous timestep 
results spatially adaptive decomposition gives processor equal amount 
additionally method keeps particles spatially grouped important efficiency traversal stage algorithm amount non local data needed roughly proportional surface area processor domain 
illustration method dimensional set particles illustrated fig 
highly clustered set particles shown fig 

source inefficiency morton ordered decomposition processor domain span spatial discontinuities 
possible solution peano hilbert ordering domain decomposition contain spatial discontinuities shown fig 

path indicates dimensional symmetric self similar path induced map interleaved bits morton order 
domain decomposition achieved cutting dimensional list pieces 
parallel tree construction domain decomposition processor disjoint set bodies 
initial stage parallel tree building construction tree local bodies 
non symmetric path contain discontinuities peano hilbert order produces better decomposition practice provide performance increase 
special case occurs processor boundary dimensional sorted key list terminal bodies adjacent processors lie cell 
taken care sending copy boundary body adjacent processor allows construction proper tree nodes 
copies branch nodes processor shared processors 
stage considerably easier faster domain decomposition intimately related tree topology orthogonal recursive bisection method previous code 
branches complete set cells represent entire processor domain coarsest level possible 
branch cells globally communicated processors 
processors fill missing top tree branch cells 
address processor owns branch cell passed destination processor created marked origin 
traversal routine immediately determine processor request data needs access daughters branch cell 
daughters received processors marked fashion 
tried implementing branch communication step computationally clever manner globally concatenate branches complexity tended outweigh benefit 
rule possibility finding better method stage algorithm 
processor domain processors data decomposition clustered system bodies shown fig 

domain shown result decomposition strategy outlined text 
tree traversal tree traversal routine may cast recursive form lines code traverse key key int mac void pp unsigned int child pp find key mac pp return key key ndim child child traverse key child mac pp code applies arbitrary mac determine continue traversing children cell 
children traversed function called completion descendants 
appropriate choice mac execute pre order post order traversals complex pruning strategies multipole acceptability criteria 
parallel machine may add additional functionality find function order handle cases requested node memory processor 
additional code request non local data wait receive insert tree 
allows traversal code fragment modification distributed memory computer 
performance approach bound 
request non local data subject full interprocessor communication latency 
computation stalls waiting requested data arrive 
possible recast traversal function form allows entire context traversal stored 
case request non local data encountered request buffered computation may proceed 
latency non local data requests may hidden trading communication latency smaller amount complexity overhead 
traversal method chosen breadth list scheme 
recursion useful properties 
shall discuss plain sequential method show additions allow efficient traversals parallel machine 
input list traversal walk list nodes 
pass walk list contains root 
daughter input walk list nodes tested mac 
passes mac corresponding cell data placed interaction list 
daughter fails mac placed output walk list 
entire input list processed output walk list copied walk list process iterates 
process terminates nodes remaining walk list 
method advantage recursive traversal opportunity vectorization intermediate traversal steps generally fair number nodes tested time 
results final interaction list passed fully vectorized force calculation routine 
details intricate allow real code algorithm pseudocode mac copy root walk list empty walk list item walk list daughter item mac daughter copy daughter interact list copy daughter output walk list walk list output walk list traversal complete interact list contains vector items undergo interactions particular mac 
interactions may computed separately code may vectorized optimized independently tree traversal method 
latency hiding tree traversal parallel machine traversal encounter daughters local memory 
case add additional lists allow computation proceed evaluation non local data deferred time 
labeled bit 
bit set daughters local memory 
bit tested traversal attempt find daughters 
bit set key source processor address contained placed request list copy key placed defer list 
additionally set requested bit prevent additional requests data 
allows processing continue input walk list 
traversal proceeds additional requests occur final state reached progress possible traversal data local memory 
state number keys processor addresses request list equal number keys defer list require non local data received traversal may continue 
request list periodically translated series interprocessor messages contain requests data 
receipt message appropriate packaged reply answer returned second interprocessor message 
reply received appropriate entry hash table subsequent find requests return data 
possible implement request reply protocol loosely synchronously asynchronously 
decision governed level support relative performance offered hardware operating system 
receipt replies necessary wait replies arrive defer list renamed walk list traversal restarted newly arrived data 
alternatively entirely separate traversal compute force particle 
appropriate bookkeeping tolerate long latencies implementing circular queue active traversals shared request list 
circular queue active traversals traversals deferred restart traversal copying defer list walk list 
requested data usually arrived interim 
memory hierarchy access patterns place heavy demands memory subsystems modern computers 
quasi random access widely separated memory locations tree traversal receives little benefit small chip cache fact overwhelm translation look side buffer tlb microprocessors similar 
results poor performance algorithms consideration memory bandwidth limitations inherent memory hierarchies intended function dram significantly slower processor cycle time 
tree traversal stressful memory architectures arranged order computation take advantage underlying structure algorithm helps encourage orderly memory access pattern 
useful property algorithms particles spatially near tend similar cell interaction lists 
updating particles order takes advantage spatial proximity reduce number memory accesses cache tlb 
convenient efficient ordering uses sorted key list tree construction 
updating particles order defined key map fig 
achieve goal 
additional technique improve memory access speed rearrangement data linked list collisions hash table 
moving data accessed top linked list possible create virtual cache keeping data contiguous memory locations making hash table 
allows obtain performance hash table smaller naively expect 
extended memory hierarchy distributed memory parallel computer possibly virtual memory node benefit scheme 
wish keep things long possible fastest level hierarchy includes registers cache local memory processors memory virtual memory 
extend virtual cache model erasing data come processor 
implemented expect allow significantly larger simulations take place majority memory consists copies cells processors 
performance provide timings various stages algorithm processor intel touchstone delta installed caltech 
timings listed particle production run simulation involving formation structure cold dark matter universe 
initial stages calculation particles spread uniformly spherical computational volume 
set absolute error bound partial acceleration gamma times mean acceleration system 
results theta interactions timestep initial unclustered system 
timing breakdown follows computation stage time sec domain decomposition tree build tree traversal data communication traversal force evaluation load imbalance total gflops stages calculation system extremely clustered density large clusters particles typically times mean density 
number interactions required maintain accuracy grows moderately system evolves 
slightly increased error bound theta gamma number interactions clustered system theta timestep 
computation stage time sec domain decomposition tree build tree traversal data communication traversal force evaluation load imbalance total gflops evident initial domain decomposition tree building stages take relatively larger fraction time case 
reason order load balance force calculation processors nearly times particles mean value times particles processor fewest 
load balancing scheme currently attempts load balance involved force evaluation tree traversal initial domain decomposition tree construction scales closely particle number processor imbalanced 
note roughly execution time spent force calculation subroutine 
routine consists tens lines code sense obtain maximum possible performance careful tuning 
delta microprocessor hand coded assembly language keep stage pipeline fully filled results speed mflops processing node routine 
count floating point operations performed force calculation routine useful flops interaction speed code gflops 
number sense unfair algorithm majority code involved floating point operations tree traversal data structure manipulation 
integer arithmetic addressing speed processor important floating point performance 
hope evaluation processors better floating point speed expense integer arithmetic memory bandwidth code example balanced processor architecture necessary performance 
multi purpose applications problems current interest wide variety areas rely heavily body fast multipole methods 
accelerator beam dynamics astrophysics galaxy formation large scale structure computational biology protein folding chemistry molecular structure thermodynamics electromagnetic scattering fluid mechanics vortex method panel method molecular dynamics plasma physics name familiar certainly 
areas algorithms due simplicity 
problems grow larger fast methods necessity 
case problems electromagnetic scattering fast multipole method reduces operation count solving second kind integral equation gaussian elimination conjugate gradient iteration 
vast improvement allows contemplate problems heretofore simply impossible 
alternatively workstation solve problems previously sole domain large supercomputers 
spent substantial effort code keeping data structures functions required application away tree 
suitable abstractions segregation met success area 
currently number physics applications share tree code 
general addition application requires definition data structure additional code required respect functions physics related force calculation 
described application code gravitational body problems 
code indispensable performing statistical analyses data processing result body calculations size prohibits analysis parallel supercomputer 
code module perform dimensional compressible fluid dynamics smoothed particle hydrodynamics gravity implemented vortex particle method 
simple matter program physics involving force laws 
apart definition data structure modification basic force calculation routine need derive appropriate mac method described salmon warren 
improvements code described means final version 
implementation explicitly designed easily allow experimentation inclusion new ideas find useful 
unique serving double duty high performance production code study process galaxy formation testbed investigate multipole algorithms 
additions underlying method expect improve performance include addition cell cell evaluations similar fast multipole method ability evolve particle independent timestep improves performance significantly systems timescale varies greatly 
expect expression algorithm language produce friendly program advantage features language data abstraction operator overloading 
code portable parallel platforms currently code running intel paragon cm ibm sp networks workstations 
bulk remaining improvements area processor specific tuning coding inner loop force evaluation routine obtain optimal floating point performance cm 
view algorithm feel general items deserve special attention ffl fundamental ideas algorithm part standard tools computer science key mapping hashing sorting 
shown combination form basis clean efficient parallel algorithm 
type algorithm evolve sequential method 
requires starting anew prejudices inherent program programmer accustomed single processor 
ffl raw computing speed code extremely irregular dynamically changing set particles require global data update large number processors comparable performance quoted regular static problems identified type scalable algorithms obtain performance parallel machines 
hope convinced reader difficult irregular problems amenable parallel computation 
expect algorithms described coupled extraordinary increase computational power expected coming years play major part process understanding complex physical systems 
acknowledgments sanjay ranka pointing utility peano hilbert ordering 
providing computational resources 
js wishes acknowledge support advanced computing division nsf 
msw wishes acknowledge support afosr 
research supported part nasa hpcc program 
research performed part intel touchstone delta system operated caltech behalf concurrent supercomputing consortium 
appel efficient program body simulation siam computing vol 

order appel algorithm information processing vol 
pp 

barnes hut hierarchical nlogn algorithm nature vol 

greengard rokhlin fast algorithm particle simulations comp 
phys vol 
pp 

greengard gropp parallel version fast multipole method computers math 
applic vol 
pp 

zhao johnsson parallel multipole method connection machine siam sci 
stat 
comp vol 
pp 
nov 
schmidt lee implementing fast multipole method dimensions stat 
phys vol 
pp 

board schulten accelerated molecular dynamics simulation parallel fast multipole algorithm chem 
phys 
vol 


ding goddard atomic level simulations particles cell multipole method coulomb london interactions chemical physics vol 
pp 

salmon warren skeletons closet comp 
phys 
press 
salmon parallel hierarchical body methods 
phd thesis california institute technology 
warren salmon astrophysical body simulations hierarchical tree data structures supercomputing ieee comp 
soc 
gordon bell prize winner 
warren quinn salmon zurek dark halos formed collapse shapes alignment angular momentum ap 
vol 
pp 

zurek quinn salmon warren formation structure cdm universe correlations position velocity ap 

preparation 
singh hennessy gupta implications hierarchical body techniques multiprocessor architectures tech 
rep csl tr stanford university 
singh holt gupta hennessy load balancing data locality hierarchical body methods journal parallel distributed computing 
press 
bhatt chen lin liu abstractions parallel body simulations tech 
rep dcs tr yale university 
samet design analysis spatial data structures 
reading ma addison wesley 
barnes efficient body algorithm finegrain parallel computer supercomputers stellar dynamics hut mcmillan eds new york pp 
springer verlag 
knuth art computer programming sorting searching vol 

reading mass addison wesley 
murphy rokhlin vassiliou fast multipole method fmm electromagnetic scattering problems ieee transactions antennas propagation vol 
pp 

salmon warren fast parallel tree codes gravitational fluid dynamical problems international journal supercomputing applications 
submitted 

