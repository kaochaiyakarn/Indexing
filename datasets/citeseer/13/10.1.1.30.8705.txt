concurrent haskell simon peyton jones university glasgow andrew gordon university cambridge finne university glasgow applications easily expressed programming language supports concurrency notably interactive distributed systems 
propose extensions purely functional language haskell allows express explicitly concurrent applications call resulting language concurrent haskell 
resulting system appears expressive efficient give number examples useful abstractions built primitives 
developed freely available implementation concurrent haskell substrate graphical user interface toolkit 
concurrent haskell concurrent extension lazy functional language haskell 
principal motivation provide expressive substrate build sophisticated performing programs notably ones support graphical user interfaces usefulness concurrency established 
earlier showed monads express peyton jones wadler idea generalised accommodate securely encapsulated mutable state launchbury peyton jones launchbury peyton jones 
concurrent haskell represents step research programme aims build bridge tidy world purely functional programming gory mess intensive programs 
concurrent haskell concurrency extension ffl show concurrency smoothly integrated lazy language 
example processes communicate unevaluated data structures 
ffl give semantics concurrent haskell clearly stratified deterministic layer concurrency layer 
existing reasoning techniques retained unmodified example program transformations preserves correctness sequential haskell programs preserve correctness concurrent haskell program 
unusual feature commonly non determinism arises concurrency pervades entire language 
ffl new primitive operations expressive easy implement 
concurrent haskell implemented freely available substrate building graphical user interface toolkit finne peyton jones 
concurrency means increasing performance exploiting multiprocessors 
approach goal uses implicit semantically transparent parallelism story 
concerns explicit semantically visible concurrent performing processes 
goal extend haskell usefulness new class applications 
basic ideas concurrent haskell adds main new ingredients haskell ffl processes mechanism process initiation section ffl atomically mutable state support inter process communication cooperation section 
discuss necessary review monadic approach introduced peyton jones wadler adopted haskell language haskell 
semantics concurrent haskell discussed section 
review monadic non strict language completely impractical perform input output side effecting functions order sub expressions evaluated evaluated determined context result expression hard predict 
difficulty addressed treating performing computation state transformer function transforms current state world new state 
addition need ability performing computation return result 
reasoning leads type definition type io world 
world value type io takes world state input delivers modified world state value type course implementation performs right away modifying state world place 
call value type io action 
useful actions handle 
io char handle 
char 
io action reads character specified handle identifies file byte stream returns result action 
takes handle character returns action writes character specified file stream 
actions combined sequence infix combinators 

io 
io 
io io 

io 
io example action reads character standard input prints twice standard output stdin 
stdout 
stdout notation expression denotes lambda abstraction 
haskell scope lambda abstraction extends far right possible example body abstraction includes sequencing combinators 
feed result state left hand argument input right hand argument forcing actions data dependency performed correct order 
combinator 
throws away result argument takes result argument passes second argument 
similarity monadic programs imperative programs surprise performing specifically want impose total order operations 
useful action performs immediately returns specified value return 
io example echo action reads character prints returns character read look echo io char echo stdin 
stdout 
return performing input output provide actions create new mutable variables read write 
relevant primitives mutvar mutvar 
io mutvar value type mutvar thought name mutable location state holds value type location modified read 
far shown build larger actions smaller ones actions get performed applied real world 
program defines value main type io 
program run applying main state world 
example complete program reads single line input main io main echo 
return main principle program just state transformer applied real world give new world 
practice crucial side effects program specifies performed incrementally program finishes 
state transformer semantics alas unsatisfactory untenable concurrency introduced matter return section 
details monadic state transformers launchbury peyton jones peyton jones wadler processes concurrent haskell provides new primitive forkio starts concurrent process forkio io 
io forkio action takes action argument spawns concurrent process perform action 
side effects performed interleaved unspecified fashion follow forkio 
example loop ch prints infinite sequence ch loop ch stdout ch 
loop ch forkio loop 
loop reality types little general allowing state manipulating computations encapsulated omit details 
launchbury peyton jones 
term process distinguish explicit concurrency implicit parallelism term threads 
process managed haskell runtime system certainly correspond unix process 
forkio spawns process performs action loop 
parent process continues perform loop 
result infinite sequence interleaved appears screen exact interleaving unspecified see section 
realistic example forkio action mail tool incorporate loop io 
case compose 
forkio 
things io pop manage 
composition window awaits button press button delivers value indicating button pressed 
value case expression 
value compose action forked handle independent composition window main process continues 
features forkio worth noting implementation haskell uses lazy evaluation forkio immediately requires underlying implementation supports inter process synchronisation 

process try evaluate thunk suspension evaluated process case blocked completes evaluation overwrites thunk value 
parent child processes may mutate parts shared state world forkio immediately introduces non determinism 
example process decides read file deletes effect running program unpredictable 
whilst non determinism desirable avoidable concurrent language non deterministic 
way enforce determinism constraining processes separate parts state different files example 
trouble essentially interesting applications concurrency involve deliberate controlled mutation shared state screen real estate file system internal data structures program 
right solution provide mechanisms allow alas enforce safe mutation shared state matter return subsection 
forkio asymmetrical process executes forkio spawns child process executes concurrently continued execution parent 
possible design symmetrical fork approach taken jones hudak io 
io 
io idea action forks processes 
complete pairs results returns pair result 
rejected approach forces synchronise termination forked process 
desired behaviour forked process lives long desires provide rest parent argument extremely inconvenient 
common process calculi unix forked process name 
provide operators wait termination kill 
easily simulated mvar introduced introduces host new difficulties process middle atomic action 
synchronisation communication believed forkio sufficient support concurrent programming haskell provided underlying implementation correctly handled synchronisation processes try evaluate thunk 
belief idea processes communicate lazily evaluated list produced consumed 
whilst processes communicate way distinct reasons introduce additional mechanisms synchronisation communication processes processes may need exclusive access real world objects files 
straightforward way implement exclusive access requires shared mutable lock variable semaphore 
server process read stream values produced client process 
way solve provide non deterministic merge operation quite sophisticated operation provide primitive 
worse far clear quest ends example want server processes service single stream requests require non deterministic split primitive 
wanted find simple truly primitive operations implement non deterministic merge split desire 
writing stream processing programs awkward especially function consumes streams produces performing input output 
reasons monadic popular precisely stream style tiresome program 
ironic concurrent haskell re introduced stream processing inter process communication just monadic abolished input output 
wanted find way communication processes look just convenient point view particular process processes just considered part external world 
solution combine mutable state launchbury peyton jones structures dataflow language id arvind nikhil pingali barth nikhil arvind 
new primitive type type mvar value type mvar type name mutable location empty contains value type provide primitive operations mvars io mvar creates new mvar 
takemvar mvar 
io blocks location non empty reads returns value leaving location empty 
putmvar mvar 

io writes value specified location 
processes blocked takemvar location allowed proceed 
error perform putmvar location contains value 
see section discussion possible design choices putmvar 
useful derived operation mvar 

io var new takemvar var old 
putmvar var new 
return old type mvar seen different ways ffl seen synchronised version type mutvar introduced section 
ffl seen type channels takemvar putmvar playing role receive send 
ffl value type mvar seen binary semaphore signal wait operations implemented putmvar takemvar respectively 
mvars somewhat reminiscent ml ref types require quite bit type system preserve soundness 
turns type soundness problem arise values type mvar lambda bound monomorphic 
standard abstraction buffering way understand concurrency construct means examples 
sections describe implement number standard abstractions mvars standard examples buffering allows easy comparison literature 
example usually memory cell course mvar implements directly 
common example semaphore mvar implements directly 
buffer variable mvar nearly mediate producer consumer connection producer puts items mvar consumer takes 
fly course producer writing second value consumer removed 
problem easily solved second mvar handle consumer producer 
call resulting abstraction cvar short channel variable 
type cvar mvar producer 
consumer mvar consumer 
producer io cvar 

putmvar 
return cvar 

io val takemvar 
putmvar val cvar 
io takemvar val 
putmvar 
return val buffered channel cvar contain single value 
show implement channel unbounded buffering variants 
interface follows type channel io channel channel 

io channel 
io channel permit multiple processes write read safely 
implementation illustrated 
channel represented pair mvars drawn small boxes thick borders hold read write buffer type channel mvar stream read mvar stream write mvars channel required channel put get operations atomically modify write read channels respectively 
data buffer held stream mvar empty case data stream holds item type stream mvar item item just pair element stream stream holding rest data second value third value value item item item channel read write channel unbounded buffering data item item stream stream thought list consisting alternating items full mvars terminated hole consisting empty mvar 
write channel points hole 
creating new channel just matter creating read write mvars plus empty mvar stream read 
write 
hole 
putmvar read hole 
putmvar write hole 
return read write putting channel entails creating new empty stream hole extracting old hole replacing new hole putting item old hole 
read write val 
takemvar write 
putmvar write 
putmvar item val getting item channel similar 
notice may block second takemvar channel empty process 
read write takemvar read cts 
takemvar cts item val new 
putmvar read new 
return val worth noting number processes safely write channel read 
values written merged non deterministic scheduling dependent arrival order value read go exactly process 
variants readily programmed 
example consider multi cast channel multiple readers see values written channel 
required add new operation channel 
io channel idea channel returned read independently original sees data written channel call 
implementation simple amounts setting separate read pointer initialised current write pointer read write 
takemvar write hole 
putmvar write hole 
putmvar hole 
return write easy modification left exercise reader add inverse channel 

io reifying scheduling full section shows concurrent haskell allows programmer take control order processes freed waiting event 
effect decisions usually taken scheduler guided example static priorities reified brought control programmer 
key idea simple abstractions arrange process blocked separate mvar 
mvars manipulated program decide process re awaken 
approach illustrated concurrency abstractions including counting semaphore bounded buffer 
choice process languages provide choice construct alt occam select concurrent ml calculus allows process determine number communications ready proceed 
example calculus process read value channel behave read value channel behave 
say guard alternative similarly guards second 
provide choice construct concurrent haskell reasons languages provide choice restrict way alternatives guarded single primitive actions 
reppy argues restriction interacts badly abstraction reppy 
example want guard alternative call knowing implemented 
course lifting restriction straightforward 
example synchronising primitive action performed guard just primitive operation doing take mvar succeeds mean succeeds 
furthermore guard compound action certainly done partially completed actions alternatives 
experience generality choice rarely 
implementing general choice construct costly especially distributed setting especially guards contain read write operations 
mvars provide non determinism seen case channels multiple writers build application specific choice constructs 
short contrary initial impressions choice expensive implement rarely full generality limits abstraction 
rest section describe live choice 
common programming language pict distinguish singular choice iterated choice far common practice 
iterated choice common paradigm process service distinct sources 
iteration server chooses clients services request returns select new client 
server understood concurrent object oriented programming community concurrent object 
important thing iterated choice guards alternatives lose selected need undone simply await iteration server 
example suppose server dealing network traffic arriving distinct sources 
functions get get get packet sources respectively server packet get get io packet packet 
io course get get complicated necessary 
consist large series interactions just primitive operation 
program server cvar rendezvous buffer 
server simply reads packets buffer 
forks process packet source simply reads packet source tries write buffer 
server io server create empty buffer full token buf 
create processes forkio get buf 
forkio get buf 
buf cvar packet 
io buf buf pkt 
pkt 
buf io 
cvar packet 
io buf pkt 
buf pkt 
get buf course clients told write server processes necessary 
practice find doing breaks abstraction client presents formulation required 
singular choice occasions want choice competing alternatives put obligation programmer alternatives 
way choose express obligation making alternatives type type alternative commitment 
io type commitment io 
io type standard haskell corresponds option standard ml 
value type form just type types useful encoding values may may 
data just alternative takes action type commitment argument performs exactly wants commit 
commitment returns indicating alternative got alternative abort just reply reply action applied result alternative 
exactly alternative receive just reply reaches commitment point receive carry necessary abort actions die quietly 
simple define select select alternative 
io select arms 
committed 
putmvar committed just putmvar 
commit committed arm forkio arm commit committed result arms 
takemvar semantics hinted regarding program state transformer gives inadequate semantics input output behaviour 
example program goes infinite loop printing repeatedly just value behaviour quite different goes infinite loop performing input output 
situation worsens concurrency introduced multiple concurrent processes simultaneously mutating single state 
purely functional state transformer semantics untenable 
adopt standard approach giving semantics concurrent language operational semantics 
deterministic reduction suppose operational semantics purely functional fragment haskell 
gordon presents suitable operational semantics small fragment haskell approach extended full language 
shall show incorporate concurrency primitives semantics 
suppose stand types stand programs closed welltyped expressions operational semantics consists deterministic small step reduction relation extend grammar types ioa allow new constants expressions 
return forkio putmvar takemvar name pair drawn infinite set tags 
name mvar contains values type expression type mvar extend reduction relation reduce argument putmvar takemvar provide reductions forkio putmvar takemvar 
follows value fully reduced program type io form vio vio value vio expression vio represents concurrent action context represents continuation consumes result action 
mild extension preserves determinacy 
concurrent reaction model concurrent aspects concurrent haskell need consider systems interacting monadic processes 
stand processes 
io parallel composition inactive process restriction name hain full mvar holding hin empty mvar binding construct names write fn set names free process outcome substituting occurrence name free process adapt chemical machine presentation polyadic calculus milner 
formalise idea solution programs mvars waiting react defining structural congruence relation 
second specify reaction programs mvars simple reaction rules 
structural congruence congruence equivalence relation preserved process contexts include alpha conversion bound variables names plus collections rules 
group says process solution roughly multiset second group standard rules restriction calculus 
restriction represents locality access mvars 
fn secondly extend deterministic reduction relation programs nondeterministic reaction relation processes identified structural congruence 
rules specify interaction programs mvars put hin hain return get hain hin operations forkio turn process restriction composition fork return new 
hin fn return reacts continuation return structural rules allow reactions compositions beneath restrictions par res 
final reaction rule turns reduction program reaction program considered process reduce processes identified may freely rules bring partner programs mvars put get interactions enlarge scope mvar allocated new 
semantics intentionally minimal support result 
say process passes test iff done done new process constant allowed test processes processes testing equivalent iff pass tests 
standard definition concurrency theory de nicola hennessy 
conjecture 
programs fij equivalent functional programs testing equivalent considered processes 
believe result holds written details 
useful result means existing compiler optimisations fij equivalence remain valid concurrent haskell 
hold language unrestricted side effects concurrent ml 
fairness real system programmer want fairness guarantees 
precisely fairness mean 
imply runnable process indefinitely delayed 


consider situation processes competing access single mvar 
assuming process holds mvar indefinitely possible competing processes denied access indefinitely 
way avoid indefinite denial specify fifo order processes blocked mvar strong 
sufficient specify process blocked indefinitely mvar process holds mvar indefinitely 
summary previous semantics concurrent functional languages holmstrom jeffrey reppy scholz 
scholz set semantics closest semantics corresponds restriction gamma captures locality mvars 
notable feature semantics stratification deterministic reduction relation non deterministic reaction relation 
consider specifying imperative coordination language specifying functional computation language 
semantics sufficient show nondeterministic concurrent computation 
io types affect deterministic functional computation non io types 
sought simplest semantics 
gone instance seeking approximate testing equivalence labelled transition system bisimilarity presence higher order functions local names known bisimilarity problematic jeffrey 
bisimilarity concurrent haskell worthwhile research project minimal semantics suffices practical purposes 
provides simple precise specification operational behaviour concurrent haskell programs 
implementation implemented concurrent haskell small extension glasgow haskell compiler ghc compiler haskell 
concurrent haskell runs single unix process performing scheduling internally 
forkio creates new process heap allocated stack 
scheduler told run pre time slicing runnable processes non pre running process blocks 
scheduler switches processes defined points basic blocks points half modified heap objects liveness registers notably pointers known 
thunk represented heap allocated object containing code pointer values thunk free variables 
thunk evaluated loading pointer defined register jumping code 
process begins evaluation thunk replaces thunk code pointer special evaluation code pointer 
accordingly process attempts evaluate thunk evaluation automatically jump evaluation code queues process thunk 
original process completes evaluation thunk overwrites thunk final value frees blocked processes 
mvar represented pointer mutable heap allocated location 
location includes flag indicate mvar full empty value queue blocked processes 
primitives tiresome aspect process performs ordinary unix block concurrent haskell program just process obviously wrong 
easy way 
provide primitive enables solution built int 
io blocks process specified unix file descriptor input available 
final useful primitive added allows process go sleep specified number milliseconds delay int 
io garbage collection interesting question possible garbage collect process 
answer quite complicated process garbage collection notoriously tricky business see example hudak 
fortunately turns easy concurrent haskell 
principle follows process perform side effects 
immediate consequences runnable process garbage collected perform 
process blocked mvar garbage collected mvar accessible non garbage process 

blocked process released process puts value blocking mvar certainly happen mvar unreachable non garbage process 
leads simple modification garbage collector ffl tracing accessible heap objects treat runnable processes roots 
ffl mvar identified reachable identify processes blocked mvar reachable reachable 
system perfect example mvar reachable writes take place 
reasonably expected succeeds common cases 
example server possibility clients garbage collected blocked input mvar process mvar 
distributed implementation working distributed implementation concurrent haskell 
nice property mvars relatively easy implement distributed setting compared generalised choice example 
mvar resides place putmvar operation remote mvar implemented message send 
message carries identity sending process may blocked indefinitely far empty mvar 
mvar written blocked message returned sender carrying value written mvar 
arrival original sender reply awakens process identity carries 
putmvar message simpler requires reply 
succeeds writing empty mvar finds full mvar run time error see section 
design choices section full discuss main design choices synchronous vs asynchronous 
concurrent haskell provides asynchronous communication pict actor languages concurrent object oriented languages ccs csp occam concurrent ml facile 
synchronous communication looks primitive argue process creation absolutely requires choice hard implement distributed setting 
discuss alternative design choices mvars ffl mvar hold multiset values pict channels 
ffl mvar hold sequence values 
ffl mvar hold single value specify putmvar full mvar block cause error 
undecided choices better current semantics putmvar full mvar error 
semantics fairly easy describe implementations hard 
comparison related originally borrowed idea mvars directly id called structures 
id motivation different structures allow certainly highly parallel algorithms expressed difficult impossible express barth nikhil arvind 
basic problem solve identical convenient synchronisation parallel processes 
share id expectation programmers rarely encounter mvars 
mvars raw iron friendly abstractions built 
big difference concurrent haskell id concurrent haskell operations mvars done monad performed contexts 
id eventually evaluated side effects permitted 
interesting compare mvars ordinary semaphores provide mutual exclusion 
semaphores mutex locks ml threads remember claim lock side effecting data protects mutex implicitly protects data 
mvar protected data explicitly inside mvar means possibly forget claim lock side effecting 
connection lock data protects explicit mvar mutex 
lastly mutual exclusion semaphore requires mutable locations semaphore data 
mvar usually collapses locations reduces number side effecting operations 
complex situations implicit locking may unavoidable mvars simplify common case 
full rest section discusses relationship concurrent haskell holmstrom amber cardelli concurrent ml reppy reppy facile mishra prasad ml threads cooper morrisett jones hudak 
concurrent ml gets largest coverage 
mention related functional operating systems henderson jones jones stoye actor languages agha concurrent object oriented languages agha yonezawa 
described small simple extension haskell allows concurrent programs written 
substrate advanced construction graphical user interface toolkit finne peyton jones 
application driving force concurrent haskell just exene test case cml 
despite apparently primitive nature single synchronisation mechanism mvars language surprisingly expressive 
obvious topic development semantics 
implementation side actively working distributed multiprocessor implementation concurrent haskell 
concurrent haskell freely available ftp 
connect ftp dcs glasgow ac uk look pub haskell glasgow grab version glasgow haskell 
grateful benjamin pierce john reppy david turner luca cardelli gave helpful feedback earlier versions 
jim mattson implemented concurrency mvars glasgow haskell 
agha actors model concurrent computation distributed systems mit press 
agha sept concurrent object oriented programming comm acm 
arvind rs nikhil kk pingali oct structures data structures parallel computing toplas 
ps barth rs nikhil arvind sept structures extending parallel non strict functional language state functional programming languages computer architecture boston hughes ed lncs springer verlag 
cardelli amber combinators functional programming languages cousineau pl curien robinet eds lncs springer verlag 
ec cooper jg morrisett dec adding threads standard ml cmu cs dept comp sci carnegie mellon univ aug design implementation operating system functional language phd thesis computing lab university kent 
finne sl peyton jones april composing department computing science glasgow university 
mishra prasad facile symmetric integration concurrent functional programming international journal parallel programming 
ad gordon tutorial induction functional programming functional programming glasgow hammond dn turner pm sansom eds workshops computing springer verlag 
henderson purely functional operating systems functional programming applications darlington henderson turner eds cup 
holmstrom polymorphic type systems concurrent computations functional languages phd thesis department computer science chalmers university 
paul hudak aug distributed task memory management symposium principles distributed computing na lynch ed acm 
jeffrey fully semantics concurrent functional language monadic types proceedings tenth ieee symposium logic computer science san diego 
mp jones hudak aug implicit explicit parallel programming haskell yaleu dcs rr yale university 
simon jones aug machine support purely functional operating systems prg programming research group oxford 
simon jones sept range operating systems written purely functional style tr department computer science university stirling 
launchbury sl peyton jones state haskell lisp symbolic computation appear 
launchbury sl peyton jones june lazy functional state threads sigplan symposium programming language design implementation pldi orlando acm 
milner oct polyadic calculus tutorial ecs lfcs lab foundations computer science edinburgh 
de nicola mc hennessy testing equivalence processes theoretical computer science 
sl peyton jones pl wadler jan imperative functional programming th acm symposium principles programming languages charleston acm 
reppy june higher order concurrency phd thesis tr cornell university 
jh reppy class synchronous operations theory practice parallel programming sendai japan springer verlag lncs 
jh reppy june cml higher order concurrent language acm sigplan conference programming language design implementation pldi acm 
scholz june concurrency primitives haskell haskell workshop la jolla hudak ed 
stoye dec implementation functional languages custom hardware phd thesis tr computer lab university cambridge 
yonezawa ed 
abcl object oriented concurrent system theory language programming implementation application mit press 
