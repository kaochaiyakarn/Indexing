datatypes subtyping haruo hosoya department cis university pennsylvania south rd st philadelphia pa usa cs indiana edu benjamin pierce department cis university pennsylvania south rd st philadelphia pa usa cis upenn edu david turner teallach limited technology transfer center king buildings edinburgh eh jl uk teallach com july study calculus subtyping datatype definitions 
primary goal understand interaction subtyping mutually recursive types raises difficulties addressed previous studies 
second aim clarify relations structural subtyping user declared subtyping languages eiffel java 
hope bms datatype construct modern functional language design wal mth 
bundling lower level features mutually recursive types variants parameterized types offers convenient syntax common programming styles aids type inference shortens printed representations types 
provides hook numerous features may smoothly added lo ol em jon gr cho jon rr 
date full account integration datatypes basic language feature subtyping 
goal offer integration 
particular develop machinery deriving subtyping sets mutually recursive datatypes 
second aim clarify relations explicit user declared subtyping datatypes similar spirit named subtyping popular languages eiffel java structural form subtyping closer theoretical literature type systems presenting forms common framework 
motivate technical development consider simple example subtyping datatypes 
suppose defined usual parametric datatype list type list nil unit cons hd tl list define functions lists case analysis fun length list case nil 
cons 
length tl consider language explicit polymorphism avoid addressing issues type inference presence subtyping 
elements list type built constructor expressions list int cons hd tl list int nil constructor names qualified datatype belong plus appropriate type parameters case parametric datatypes list allows constructor name re different datatype declarations scope 
example may define new datatype lists enriched integer annotations cons cell type nil unit cons hd tl info int informally regarded list functions length applicable variants bodies compatible types 
precisely establish subtyping relation list 
component features datatype mechanism parametric types variants subtyping understood problematic feature recursive types 
single recursive type definitions appropriate mechanism captured type theoretic treatments form known amber rule car rec rec literally rule says recursive type rec subtype recursive type rec bodies subtype relation assumption recursion variables 
words rec subtype rec consistent assume example rec top rec int rule assume recursion variables subtype relation show bodies top int standard subtyping rule arrow types assumption contravariant left hand sides int subtype maximal type top 
hand rec int subtype rec top assumption 
prove int top amber rule motivated principles follows 
recursive types taken stand infinite tree expansions 
subtyping infinite trees defined formally limit series finite approximations ac roughly infinite trees subtype relation finite depth subtyping fails :10.1.1.33.8725
alternatively subtyping infinite trees defined coinductively 
define simulation relation set infinite type trees pair forms 
arrow rule 
top top rule 
reflexivity rule 
clause subtyping rules 
words simulation consistent respect subtyping rules 
example tree expansion rec top tree expansion rec int set top int int top simulation 
say tree subtype tree simulation containing pair 
algorithmically simulations easier manipulate infinite trees directly assign datatypes recursive type expressions generate type top type int notational simplicity named datatype declarations generalization mutual recursion trivial rec syntax recursive types remainder 
conjecture techniques developed applied define subtyping mutually recursive rec types appearing example harper stone hs hs 
dropping type parameters variant labels brevity construct simulation relations names datatypes 
example set simulation sense consistency pair justified showing top int subtyping assumptions plus regular subtyping rules 
definition formally section important realize reformulation involve real restriction power 
original definition simulation corresponds fluid formulation recursive types recursive type rec considered equivalent unrolling rec ac new corresponds choosing rigid formulation rec coerced unrolling explicit unfold operator :10.1.1.33.8725:10.1.1.33.8725
example formulation allow derive rec int rec int int second 
benefit working rigid system easily deal combination subtyping features binding constructs type operators cause difficulties fluid formulation involving simulation relations sets infinite trees modulo equivalence relation alpha beta conversion 
see origin amber rule 
suppose defined type type may contain may contain ignoring reflexive pairs form just relations set fd containing pair just relations simulations relations simulation show subtype assuming show equivalent isomorphic equivalent case captured amber rule 
hand essentially rule closure alpha conversion rec ff rec rec rec example type type relation simulation 
note rec rec proved amber rule 
single recursion amber rule plus alpha conversion covers possible simulations constitutes complete method proving subtyping pairs recursive datatypes 
subtyping presence mutually recursive datatype definitions rule simple form general definition subtyping simulations needed 
example suppose type int top type top bool general definition relation simulation smaller relation simulation alpha convertible 
general deriving involve exhibiting simulation containing arbitrary pairs types 
question arises simulations come 
alternatives developed detail follows 

may introduce syntax user declarations subtyping datatypes 
example enrich datatype declarations subtype annotations type nil unit cons hd tl info int list choose slightly general notation introducing separate declaration form subtype relations datatypes sub list system user declared subtyping may regarded step type theoretic account languages java heavy explicitly named mutually recursive type hierarchies 

may allow full structural subtyping datatypes 
case requiring explicit sub declarations subtype checker find simulation containing pair datatypes exists section gives subtyping algorithm property 
surprisingly algorithm similar flavor amadio cardelli subtyping fluid recursive types ac :10.1.1.33.8725
alternatives similar think second structural variant implicitly supplying largest consistent set subtype declarations user 
hand interesting differences 
particular user declared variant better suited adding constructs hastype perform run time comparisons datatype names cf 
section 
body organized follows 
section gives syntax core programming language datatype declarations user defined subtyping datatypes 
section defines subtyping typing language 
section considers refinement subtyping declarations dropped favor structural subtyping datatypes 
section compares previous 
section discusses possible extensions directions 
brevity proofs omitted 
syntax analysis datatypes carried languages range different typing features 
sake familiarity system extension standard kernel calculus cardelli wegner cw 
datatypes parametric may parameterized parametric datatypes previous accounts cho jon kind system includes type operators 
fact pleasant side benefit formulation yields account higherorder subtyping car mit meta theoretically tractable previous omega order generalizations ps com particular usual pointwise subtyping type operators need deal implicit fi conversion level types 
syntax kinds types datatype bodies terms typing contexts follows kind proper types operator kind type variable datatype name function type polymorphic type type application top maximal type kind datatype body variable fun abstraction fun type abstraction application type application type db datatype declaration sub 
subtyping declaration datatype constructor case case analysis gamma ffl empty context gamma variable binding gamma 
type binding gamma db datatype binding meta variables range kinds range types range terms range datatype names 
write binding abbreviation 
top notation denote sequence tn similarly write denote 
ln tn write db dn bn write 
en write en require case expressions contain branch 
ignore order labels datatype declarations case expressions 
kind pronounced type classifies proper types elements terms 
kind classifies parameterized datatypes 
note kind written form kn 
similarly write abbreviation 
provide maximal type top kind sub declaration form needed variant system user declared subtyping section dropped consider structural subtyping section 
term type constructors recursive function definitions records ln tn examples easily added 
types terms judgements differ names bound variables regarded identical 
binders contexts assumed distinct names new binding added context assume renamed maintain invariant 
elide usual side conditions form dom gamma inference rules 
fv set datatype names type variables free defined usual way 
look binding context write gamma mean gamma gamma gamma similarly gamma 
means gamma gamma 
gamma gamma db means db mutually recursive datatypes db gamma gamma db gamma appendix gives rules kinding gamma context formedness gamma formedness datatype declarations gamma relations straightforward 
main focus subtyping typing relations define explicit operational semantics main body 
completeness state standard type soundness properties respect simple call value reduction relation definition related standard definition syntactic values appendix datatypes user declared subtyping consider detail system user declared subtyping datatypes 
typechecking maintain set pairs datatypes declared context called current set subtyping assumptions 
set extended encounter sub construct subtyping rules answer questions subtype relations datatype names 
convenience typing rules automatically ensure set transitive user declares 

rules add 
subtyping subtyping relation form gamma pronounced subtype context gamma subtyping assumptions 
write gamma abbreviate gamma gamma 
gamma refl gamma top top gamma 
gamma gamma tvar gamma gamma gamma fun gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma app gamma data refl gamma data rules similar kernel ps 
particular usual kernel rule comparing quantifiers app corresponds point wise subtyping rule type applications requires datatypes subtype relation arguments equivalent 
novel rule data encounter pair different datatypes simply look example contains list may derive int list int 
subtyping rules take care sure related types kind 
prevents deriving nonsensical statements gamma int top premises app ensure corresponding subexpressions kind 
note subtyping rules effort check assumptions reasonable 
need check consistent simulation 
definition consistent assumptions say consistent respect written gamma iff gamma gamma gamma fewer variants common variants subtype relation assumptions intuitively statements true respect datatype definitions gamma assuming 
gamma write simply gamma say consistent gamma 
subtype relation usual properties reflexivity transitivity substitutivity 
typing typing relation form gamma read type gamma subtyping assumptions 
rules variables abstraction application type abstraction type application subsumption standard explained 
gamma gamma td var gamma gamma gamma fun td abs gamma gamma gamma td app gamma gamma 
gamma fun td tabs gamma gamma gamma gamma gamma td tapp gamma db gamma db fv gamma type db td type gamma gamma gamma sub 
td gamma gamma gamma gamma td con gamma gamma gamma gamma case td case gamma gamma gamma gamma td sub rules maintain set subtyping assumptions checking subtyping rules td sub set extended rule td 
convenience rule ensures transitive transitive closure calculated written new assumptions added guarantee soundness td check consistency user subtype declarations adding declaration sub 
encountered check premise gamma td body current context subtype body corresponding check extend new assumptions 
bodies may recursively mention datatypes 
amounts checking simulation 
td type scoping side condition fv forbids datatype escaping definition 
similar side condition standard elimination rule existential types 
note datatype mechanisms notably version standard ml allow datatypes escape scope declarations 
result hidden type attributed values compiler named programmer 
feature source nasty bugs removed sml 
td con constructor expression directly gives key look datatype definition context 
td case order look datatype definition type determined 
branch checked result type subsumption promote actual types branches common type 
rules include kinding checks sure types involved formed 
maintain invariant gamma implies gamma 
standard properties typing relation including subject reduction runtime safety respect operational semantics appendix proved little difficulty 
slight differences standard development come dealing assumptions theorem subject reduction suppose gamma formed context 
transitive consistent gamma 
gamma gamma theorem runtime safety suppose gamma formed context containing datatype declarations type variable bindings 
transitive consistent gamma 
gamma syntactic value appear system user declared subtyping represents annoying restriction permissive system structural subtyping 
fact advantages worth mentioning 
algorithmic simplicity important observation set subtyping assumptions may decide subtype relations datatypes runtime 
index rules operational semantics just typing rules executing sub declaration extends set 
example define operation hastype similar java instanceof checks run time value returned tagged datatype operation combined case expressions rr allowing pattern matching constructors datatype names 
example function applied list extracts info component argument happens nonempty returns fun list case list nil 
cons 
info list cons 
fact reasons consider restrictive variants system 
particular reppy riecke describe clever technique implementing hastype related comparisons required case constant time subtype hierarchy datatypes tree structure 
datatypes structural subtyping section study subtyping typing system structural subtyping datatypes 
difference formulation relations longer propagate set typing rules 
definition subtyping guesses consistent set assumptions types compared say gamma consistent gamma algorithmically guessing realized building set necessary assumptions fly checking consistency subtype checking 
give algorithm behavior show sound complete respect guessing definition 
subtyping relation gamma combines notions subtyping consistency previous section 
definition subtyping gamma gamma gamma expected properties reflexivity transitivity substitutivity easy establish 
subtyping algorithm definition subtyping realized algorithm computing relation form gamma check subtype gamma subtyping assumptions add necessary assumptions yielding gamma algorithm inputs output succeeds 
algorithm expects called consistent set starting assumptions 
particular started empty set assumptions calculates returns exact set assumptions needed validate 
rules subtyping algorithm 
algorithm fails written gamma fail rule applied 
write gamma gamma gamma gamma sa refl gamma top sa top gamma 
gamma gamma sa tvar gamma gamma gamma sa fun gamma gamma gamma gamma 
gamma sa gamma gamma gamma gamma gamma sa app gamma sa data refl gamma sa data seen gamma gamma gamma gamma gamma ln sa data unseen base rules sa refl sa top sa data refl sa data seen simply return assumptions 
rules sa tvar sa fun sa sa app algorithm recursively called appropriate subexpressions types 
initial assumptions passed recursive call resulting assumptions passed recursive call 
return assumptions yielded recursive call 
comparing datatypes check case apply sa data refl sa data seen succeed immediately 
descend bodies sa data unseen adding assumption initial set 
example suppose datatype declarations type type writing gamma gamma gamma gamma gamma gamma gamma note sa data unseen simply add pair transitive closure 
affect ultimate behavior algorithm pairs added closure operation added needed instances sa 
formulating rule way proofs little cleaner highlights intuitive similarity algorithm model checking algorithms deciding relations simulation finite state automata 
amadio cardelli ac give similar subtyping algorithm recursive types :10.1.1.33.8725
algorithm regarded extension theirs handling quantified types higher order subtyping type operators 
extension feasible setting adopt rigid view recursive datatypes terms rec syntax permit subtyping pairs types rec bodies related appropriately recursive types unfoldings 
greatly simplifies job example checking rec int int rec int int int requires unfolding steps amadio cardelli algorithm system analogous statement simply false 
subtyping algorithm sound complete respect declarative system section 
completeness theorem shows algorithm computes minimum necessary subtyping assumptions 
show soundness stating general property algorithm succeeds inputs gamma returns sufficient show gamma original sense assumptions consistent possibly ones provided intuitively algorithm generates reasonable results provided bogus inputs 
proposition gamma gamma gamma corollary soundness gamma gamma gamma gamma theorem completeness gamma gamma gamma prove algorithm terminates formed inputs 
theorem termination suppose gamma formed context kind gamma gamma fail 
typing typing rules system structural subtyping nearly identical section simply drop rule td erase sets assumptions appear 
particular rules depend subtyping relation definition implementation call subtyping algorithm 
gamma gamma gamma gamma gamma tapp gamma gamma gamma gamma sub subject reduction safety properties variant exactly standard ones theorem subject reduction suppose gamma formed context 
gamma gamma theorem runtime safety suppose gamma formed context contains datatype declarations type variable bindings 
gamma value note efficiency order 
subtyping algorithm calculate check needed assumptions scratch time called 
seen algorithm started consistent set assumptions return correct result larger consistent set assumptions 
may reuse algorithm output time initial assumptions input empty set 
result pair related datatype bodies compared 
care taken trim set exiting scope local datatype declaration 
related number comparisons previous mentioned 
give just additional points 
reppy riecke rr proposed object oriented extension standard ml datatype mechanism containing ideas datatypes user declared subtyping 
dimension proposal ambitious body data record just variant body record declarations sub datatypes allowed add fields record type refine types existing fields 
restriction avoids need consistency checking typing subtyping algorithms 
respects enriched datatypes go farther incorporating features method dispatch self sophisticated pattern matching 
related proposal combining user declared subtyping extensible form abstype declarations appears jategaonkar mitchell ml language jm 
typechecking algorithm combines features mitchell subtype inference lambda calculus primitive subtyping mit abstype names playing role primitive types wand row variable polymorphism wan 
mutually recursive datatypes subtyping treated times literature surprisingly different definitional styles mth lo hs hs van ow 
conjecture accounts extended subtyping lines discussed clear support subtyping naturally 
major issue addressed interaction subtyping mechanism generativity treatments 
important meta theoretic property systems subtyping existence meets joins pairs types 
form system variant structural subtyping meets joins may simply datatypes declared 
experimenting extension collection datatype names explicitly closed meets joins appears needed obtain meets joins arbitrary pairs types 
extension may provide basis account minimal typing languages datatypes 
original goals line investigation formulate definition higher order subtyping extended polarities describing contra variant type operators car ste retaining tractable metatheory 
sketch extension progress 
experimenting prototype implementation datatype mechanism described context pict language pt 
important goal investigate interactions datatypes local type inference pt 
advantages rec style presentations recursive types explicitly named formulation chosen clear behave combination module system 
instance minimal signature module containing named datatype definition 
exploring ideas may signal desirability applying techniques obtain definition subtyping mutually recursive rec types suitably generalizing amber rule 
conversations bob harper john reppy chris stone led major improvements presentation material 
hosoya supported indiana university japan society promoting science 
pierce supported indiana university nsf ccr principled foundations programming objects 
results developed visits turner indiana university 
ac roberto amadio luca cardelli :10.1.1.33.8725
subtyping recursive types 
acm transactions programming languages systems 
preliminary version appeared popl pp 
dec systems research center research report number august 
afm ariola matthias felleisen john martin odersky philip wadler 
call need lambda calculus 
proceedings nd annual acm sigact sigplan symposium principles programming languages popl pages january 
bms burstall david macqueen donald sannella 
hope experimental applicative language 
proceedings lisp conference pages stanford california 
stanford university 
car luca cardelli 
amber 
guy cousineau pierre louis curien bernard robinet editors combinators functional programming languages pages 
springer verlag 
lecture notes computer science 
car luca cardelli 
notes unpublished manuscript october 
cho kung chen paul hudak martin odersky 
parametric type classes 
proceedings acm conference lisp functional programming pages san francisco california june 
sigplan sigact sigart 
com adriana 
decidability higher order subtyping intersection types 
computer science logic september 
poland 
springer lecture notes computer science june 
available university edinburgh lfcs technical report ecs lfcs titled subtyping decidable 
cw luca cardelli peter wegner 
understanding types data abstraction polymorphism 
computing surveys december 
gr didier emy 
extending ml semi explicit polymorphism 
mart abadi ito editors international symposium theoretical aspects computer software tacs sendai japan pages 
springer verlag september 
hudak peyton jones wadler boutel fairbairn fasel guzman hammond hughes johnsson kieburtz nikhil peterson 
report programming language haskell version 
sigplan may 
hs robert harper chris stone 
type theoretic account standard ml version 
technical report cmu cs carnegie mellon university pittsburgh pa september 
supersedes earlier version 
published fox memorandum cmu cs fox 
hs robert harper chris stone 
type theoretic interpretation standard ml 
gordon plotkin colin stirling mads tofte editors proof language interaction essays honour robin milner 
mit press 
appear 
jategaonkar 
ml extended pattern matching subtypes 
master thesis mit august 
jm jategaonkar john mitchell 
ml extended pattern matching subtypes preliminary version 
proceedings acm conference lisp functional programming pages snowbird utah july 
jon mark jones 
system constructor classes overloading implicit higher order polymorphism 
fpca conference functional programming computer architecture copenhagen denmark pages new york june 
acm press 
jon mark jones 
class polymorphism type inference 
conference record popl th acm sigplan sigact symposium principles programming languages pages paris france january 
lo konstantin laufer martin odersky 
polymorphic type inference data types 
acm transactions programming languages systems toplas september 
earlier version appeared proceedings acm sigplan workshop ml applications title extension ml class types 
mit john mitchell 
coercion type inference summary 
proc 
th acm symp 
principles programming languages pages january 
mit john mitchell 
typed foundation method specialization inheritance 
proceedings th acm symposium principles programming languages pages january 
carl gunter john mitchell editors theoretical aspects object oriented programming types semantics language design mit press 
mpw milner parrow walker 
calculus mobile processes parts ii 
information computation 
mth robin milner mads tofte robert harper 
definition standard ml 
mit press 
robin milner mads tofte robert harper david macqueen 
definition standard ml revised 
mit press 
ode martin odersky 
functional theory local names 
acm editor proceedings st annual acm sigact sigplan symposium principles programming languages popl pages new york ny usa january 
acm press 
ol martin odersky konstantin laufer 
putting type annotations 
conference record popl rd acm sigplan sigact symposium principles programming languages pages st petersburg florida january 
acm press 
orh martin odersky dan rabin paul hudak 
call name assignment lambda calculus 
proceedings th acm sigplan sigact symposium principles programming languages popl charleston sc pages new york ny january 
acm 
ow martin odersky philip wadler 
pizza java translating theory practice 
principles programming languages popl 
preliminary version appeared technical report university karlsruhe july 
ps benjamin pierce martin steffen 
higher order subtyping 
ifip working conference programming concepts methods calculi 
full version theoretical computer science vol 
pp 
corrigendum tcs vol 

pt benjamin pierce david turner 
pict programming language pi calculus 
technical report computer science department indiana university 
appear proof language interaction essays honour robin milner gordon plotkin colin stirling mads tofte editors mit press 
pt benjamin pierce david turner 
local type inference 
conference record popl th acm sigplan sigact symposium principles programming languages 
full version available indiana university technical report 
em didier emy 
programming objects ml art extension ml record types 
hagiya john mitchell editors international symposium theoretical aspects computer software tacs pages sendai japan april 
springer verlag 
rr john reppy jon riecke 
simple objects standard ml 
proceedings acm sigplan conference programming language design implementation pages philadelphia pennsylvania may 
ste martin steffen 
polarized higher order subtyping 
phd thesis universitat erlangen 
forthcoming 
van 
machine assisted proof programming language properties 
phd thesis department computer information science university pennsylvania 
wal pierre weis mar ia virginia alain michel mauny asc ander su 
caml manual version 
technical report projet inria ens 
wan mitchell wand 
complete type inference simple objects 
proceedings ieee symposium logic computer science ithaca ny june 
note reviewers appendices need read understand main results 
provided easy wishing full details definitions 
kinding contexts kinding check type proper form rejecting nonsensical types int real 
gamma top top gamma 
gamma tvar gamma gamma con gamma gamma gamma fun gamma gamma 
gamma gamma gamma gamma app context rules check type appearing context kinded 
ffl empty gamma gamma gamma var gamma gamma gamma 
tvar gamma gamma db gamma db type need simple judgement checking body datatype declaration formed gamma gamma body reduction operational semantics language choose call value reduction relation closure primitive reduction rules evaluation contexts defined syntactic values follows fun fun type db sub 
type db sub 
case reduction rules term type applications standard fun beta fun beta rule case expressions case decon need rules moving datatype declarations system user declared subtyping sub declarations block potential redexes forms 
defining set extrusion contexts case adding extrusion rules fv type db type db type sub 
sub 
sub technical advantage treatment local bindings compositionality 
datatype declarations treated typing rules just bindings cf 
section leading simple statements proofs standard properties subject reduction theorem 
similar treatments binding constructs times literature notably pi calculus mpw cf 
orh ode afm 
