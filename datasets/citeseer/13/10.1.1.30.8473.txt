draft depth improving tabled logic programs alternative scheduling strategies freire swift david warren department computer science state university new york stony brook stony brook ny cs sunysb edu 
tabled evaluations ensure termination logic programs finite models keeping track subgoals called 
variant subgoals evaluation encountered program clause resolution rest uses answer resolution 
answer resolution prevents infinite looping happens sld 
asynchronicity answer generation answer return tabling systems face important scheduling choice traditional top evaluation order returning answers consuming subgoals affect program efficiency 
investigates alternate scheduling strategies tabling wam implementation slg wam 
original slg wam simple mechanism scheduling answers returned callers expensive terms trailing choice point creation 
propose sophisticated scheduling strategy batched scheduling reduces overheads operations provides dramatic space reduction speedups programs 
propose second strategy local scheduling applications non monotonic reasoning combined answer subsumption improve performance programs arbitrary amounts 
tabling extends power logic programming allows computation recursive queries speed prolog 
property led tabling new areas logic programming deductive database style applications fixpoint style problems program analysis 
ensuring new applications run efficiently terms time space may require different scheduling strategies 
possibility different useful strategies derives intrinsic asynchrony tabling systems generation answers return consuming tabled subgoal 
depending return answers scheduled different strategies formulated 
furthermore different strategies benefit serious research industrial applications emerge 
take known instance order efficiently evaluate queries disk resident data tabling system provide set time processing analogous semi naive evaluation magic transformed program communication costs minimized 
address separate defined breadth set time strategy slg wam xsb proved iteration equivalent semi naive evaluation magic transformed program 
xsb original tuple time engine engine breadth strategy showed performance disk accesses 
expanded version article appear plilp 
xsb freely available www cs sunysb edu 
draft course tabled evaluations efficient terms time space memory queries 
showed compared prolog tabled evaluation incurred minimal execution time overhead different criteria measurement 
memory critical resource computations stack space consuming tabled subgoals reclaimed ensured answers returned 
choice scheduling strategy influence condition happens affect amount space needed computation 
number tabling applications require simple recursion needed horn programs 
resolving call negative literal requires completely evaluating subgoal contained literal dependent subgoals 
similar manner waiting part evaluation completely evaluated benefit programs answer subsumption general answers need maintained returned consuming subgoals 
answer subsumption seen place arbitrary lattices just lattice terms captures aspects tabled evaluations program analyses see deductive database queries aggregates answers involving constraints 
motivates describes new types scheduling tabled logic programs describe batched scheduling highly efficient memory programs require answer subsumption 
describe local scheduling provides elegant strategy evaluate fixed order stratified programs programs answer subsumption 
provide detailed results experiments comparing strategies xsb original single stack scheduling described 
show ffl batched scheduling provide order magnitude space reduction original strategy reliably provide significant reduction time 
ffl local scheduling provide large speedups programs require answer subsumption incurring relatively small constant cost programs 
scheduling slg evaluations review slg terminology full details concepts terminology section :10.1.1.38.8814
slg evaluation predicates tabled non tabled case sld resolution 
evaluations tabling systems usually modeled forest resolution trees containing tree tabled subgoal evaluation 
slg trees nodes form answer template status goal list see figures 
answer template maintain variable bindings tabled subgoal course resolution goal list contains unresolved goals 
definite programs main focus status set generator active synonymously consuming interior answer disposed 
roots slg trees created new tabled subgoals selected 
roots status generator called generator nodes 
program clause resolution produce children generator nodes slg resolution occurs subgoal call operation 
node calling tabled subgoal denoted consuming active node children produced answer clause resolution answer return operation 
answer corresponds leaf node tree goal list empty 
conceptually new answer operation seen adding answers table associated subgoals roots trees 
interior nodes represent nodes selected literals non tabled sld resolution program clause resolution cases 
draft subgoals occur trees completely evaluated marked disposed 
sets subgoals completely evaluated possible answers derived 
concept complete evaluation subgoal necessary negation useful early reclamation stack space implementation 
subgoal completely evaluated non answer nodes marked disposed completion operation 
finite slg evaluation seen sequence forests slg systems 
applicable operations performed evaluation proceeds moving system system 
particular slg system subgoal depends subgoal iff completed node tree selected literal dependency relation gives rise subgoal dependency graph sdg slg system 
dependency relation non symmetric sdg directed graph partitioned strongly connected components sccs 
note dependency graph may labeled different types dependencies positive negative dependencies normal programs aggregate dependencies deductive database programs 
usual dependency labelings normal programs sdgs related dynamic stratification sense program dynamically stratified dynamic computation rule avoids labeled sdgs cycles negation 
refer unlabeled sdg pre stratification system 
single stack scheduling scheduling resolution prolog conceptually simple 
engine performs forward execution long possibly 
failure resolution solutions initial query desired checks scheduling stack choice point stack determine failure continuation execute 
slg wam differs wam addition resolving program clauses resolves answers active nodes 
natural way extend wam paradigm return answers active node distinguish acts returning old answers new active nodes answers table active node created returning new answers old active nodes 
case simple new active node created choice point set backtrack answers table unit clauses 
handle second case new answer derived existing active nodes answer return choice point placed choice point stack 
choice point manage resolution new answer active nodes 
forward execution continued failure time top choice point stack scheduling 
choice point stack serves scheduling stack returning answers resolving program clauses 
accordingly call scheduling strategy single stack scheduling 
operational semantics scheduling strategy described detail forms basis xsb slg wam described 
example demonstrates strategy works 
example 
consider double recursive transitive closure table 





query 
forest slg trees program evaluation shown fig 
fig 
shows snapshots choice point stack different points evaluation 
examine actions single stack scheduling detail 
top level query called inserted table tabled subgoal generator choice point draft 
cons 
int subgoals answer 
int 
cons 
cons 
fail 
fail 
answer 
fail 
cons 
int 
cons 
cons 
answer 
answer 
answer 
fail 
gen 
gen 
gen fig 

slg evaluation single stack scheduling created corresponds root new slg tree node 
program clause resolution create node 
selected literal node variant tabled subgoal new active choice point frame corresponding consuming node laid serve environment return answers stacks frozen see fig 
backtracking overwrite frames point 
addition answers table instruction backtrack return active node 
answers table second clause tried 
selected literal tabled predicate sld resolution applied prolog choice point laid 
evaluation gives rise answer node 
variants associated answer inserted table answer return choice point laid fig 

engine backtracks answer return choice point see fig 
instruction freezes stacks returns answer active nodes case answer returned node turn trigger call 
evaluation see node similar node inserted table generator choice point laid 
eventually generate answer node inserted table 
addition answer return choice point laid bindings answer propagated node derive answer 
returned node prompts call 
generator new active choice point laid 
subgoal fails completed 
completion choice points reclaimed fig 
shows 
point engine backtracks answer return choice point answer returned consuming node 
node calls completed answers engine fails 
subgoal completely evaluated space optimization slg wam answer return choice point returns answer active node removes backtracking chain represented fig 
dotted frames 
draft freeze generator 

prolog answer return 
active freeze freeze freeze freeze generator 
generator 

generator 

answer return 
prolog answer return 
active active active freeze freeze freeze freeze generator 
generator 

answer return 
prolog answer return 
active active freeze generator 

prolog 
active fig 

snapshots completion stack evaluation program example single stack scheduling reclaimed stacks see fig 

evaluation returns choice point node clause tried 
answer generated node variant answer table node engine simply fails 
engine backtracks generator node node choices tried subgoal system completed 
single stack scheduling simple conceptualize contains drawbacks 
integration action returning answers mechanism choice point stack single stack scheduling easily adaptable parallel engine 
problem memory usage order perform answer clause resolution different points slg forest stacks frozen environment correctly reconstructed different points 
need freeze stacks may lead inefficient space usage slg wam frames get trapped prolog choice point fig 

addition new choice points need move slg forest return answers means variables continually set reset switch binding environments causing inefficiencies 
batched scheduling batched scheduling seen attempt address problems single stack scheduling mentioned 
versions higher xsb new strategy default 
draft name implies batched scheduling minimizes need freeze move search tree simply batching return answers 
engine generates answers evaluating particular subgoal added table subgoal continues normal evaluation resolves available program clauses 
return answers generated evaluation consuming nodes 
demonstrated section new strategy better space reducing need freeze branches reduces number trapped nodes search tree 
reducing space batched scheduling shows significantly better execution times 
example illustrates differences single stack scheduling batched scheduling 
example 
execution program query example batched scheduling depicted slg forest fig 
sequence choice point stacks fig 

seen comparing forests fig 
fig 
procedures identical resolution steps differ fifth step 
batched scheduling resolves program clause node single stack scheduling returns answer derived step node 
difference reflects problems mentioned 
single stack scheduling requires environment switch node node return answer require back node finish program clause expansion node 
furthermore unexpanded program clause node stored engine choice point 
choice point takes space need switch back requires freezing stack choice point see fig 

frozen space reclaimed completion scc lies 
similar difference occurs answer returned consuming node 
choice point stack fig 
return answer requires placement explicit choice point freeze 
fig 
overheads avoided 

cons 
cons 
answer 
answer 
int 
cons 
answer 
fail 
cons 
int 
cons 
int 
cons 
fail 
fail 
fail 
answer 
gen 
gen 
gen fig 

slg evaluation batched scheduling creating explicit answer return choice points single stack scheduling batched scheduling controls answer return designated node scc called leader slg wam subgoal labeled unique depth number dfn reflecting location stack maintains exact order subgoals called 
leader scc subgoal scc lowest dfn subgoal scc called 
draft freeze generator 

prolog 
active freeze generator 
freeze freeze 
generator 

active generator 

active active freeze generator 
freeze 
active generator 

active freeze generator 

active fig 

snapshots completion stack evaluation program example batched scheduling generator choice point exhausted program clause resolution choice point prolog failure continuation instruction choice point instruction 
generator choice point corresponds subgoal leader scc action instruction cycle subgoals scc return unresolved answers consuming node selected literal scc 
batched scheduling related fixpoint style algorithms deductive databases 
engine iteratively backtracks instruction leader scc 
leader switches environments consuming node cons non empty delta set answers 
cons fixpoint scc reached subgoals scc completed 
new answer cons resolved backtracking unit clauses instruction single stack scheduling 
furthermore engine resolves answers cons long answers resolve may resolve answers iteration added 
step gives performance memory queries batched scheduling algorithm differ traditional goal oriented formulations semi naive fixpoint magic evaluation 
batched scheduling bears resemblance independently developed approaches algorithm :10.1.1.38.8814
fan dietrich consider strongly connected components fixpoint check strategy fair answers cause inefficiencies :10.1.1.38.8814
janssens describe machine specialized interpretation similar scheduling strategy fixpoint iterations 
take sccs account detected statically engine order evaluate general logic programs negation sccs determined run time 
local scheduling local scheduling engine evaluates single scc time 
words answers returned outside scc consuming nodes trees root subgoal scc details differences 
draft scc completely evaluated 
action local scheduling easily seen example stratified evaluation 
negative dependencies negative dependencies fig 

subgoal dependency graphs program example different search strategies example 
modularly stratified program table 





query evaluated 
evaluated single stack scheduling batched scheduling sdg produced cascading negative dependencies shown fig 

cycle negation detecting property complicate evaluation stratified programs 
local scheduling simpler sdg created depicted fig 

attain sdg independent scc completely evaluated returning answers subgoals outside scc making search depth respect sccs 
local scheduling sccs fb fgg completely evaluated returns answers completely evaluated called negative dependencies created 
negative link avoided completed time called negatively 
local scheduling improve performance programs benefit answer subsumption manner 
answer subsumption performed variation slg new answer operation 
adding answer engine may check answer general currently table 
general new answer added subsumed answers removed 
local scheduling evaluates scc completely returning answers guaranteed general answers returned scc 
process detail example 
example 
consider variation generation program finds smallest distance people generation sgi ancestor subsumes min sgi ancestor 
sgi 
subsumes min sgi joan carl 
draft louis joan mary bob john carl eve anc carl louis 
anc carl eve 
anc joan louis 
anc eve mary 
anc eve john 
anc louis mary 
anc john bob 
anc mary bob 
fig 

ancestor relation example subsumes min tabled predicate performs answer subsumption deleting non minimal answers time adds answer table 
facts fig 
number ways query evaluated 
known shortest path problems breadth search behave asymptotically better depth 
example breadth search optimal 
query trying find close joan carl 
note common ancestors louis mary bob cousins st nd rd degree 
evaluated breadth behavior batched scheduling example possible subpaths joan carl considered point evaluation subpath length far derived immediately propagated may minimal 
instance batched scheduling finds distance immediate ancestors joan carl concludes distance joan carl 
evaluation continues new distance immediate ancestors new answer generated top level query 
minimal distance joan carl correct answer returned 
local scheduling minimal subpaths propagated engine able prune number superfluous choices 
algorithms wam level implementation implementation batched scheduling mentioned section batched scheduling evaluation thought series iterations answers returned set consuming nodes fixpoint reached set 
program clause resolution intermixed answer resolution possible program clauses resolved backtracking answers takes place 
explain implementation batched scheduling contrasting single stack scheduling 
new consuming active node created single stack scheduling node backtracks answers table 
new active choice point placed choice point stack 
new answers derived returned answer return choice points depicted fig 

batched scheduling heavy new active choice points worthwhile consider detail choice points actions support 
addition environment information kept regular wam choice points new active choice point keeps pointer previous active node subgoal 
pointers maintain list active nodes predicate 
new active choice point keeps pointer list answers table associated subgoal 
engine backtracks new active choice point instruction executed 
instruction backtracks draft answer answer list returns current consuming node 
answers left executes failure continuation new active choice point 
batched scheduling differ single stack scheduling regard actions taken answers derived consuming node created 
answer derived consuming node creating answer return choice point single stack scheduling answer returned invocation new active choice point 
addition new active choice point modified continue backtracking answers consuming node long exists 
demonstrated modification provides particularly times left recursion 
changes slg wam implement batched scheduling table data structure requires new pointer answer list new answers inserted list 
new active choice point consuming node keep track answers consumed means pointer answer resolved 
instruction longer needs lay answer return choice point new answer 
instruction algorithm fail answers resolve previous new active choice point generator choice point 
instruction algorithm ffl answers may batched extra step added subgoal schedule unresolved answers consuming nodes actual completion check issued see schedule answers algorithm 
ffl leader scc engine perform fixpoint check 
instruction scans subgoals scc checks consuming nodes subgoals answers resolve 
instruction schedules subgoals choice point stack arranges stack evaluation finished completion check issued leader schedule fixpoint reached scc safely completed 
general advantages batched scheduling single stack scheduling claimed section 
note passing requires fewer machine instructions instruction tradeoff beneficial level 
batched scheduling imposes overheads scheduling answers completion check subgoal need perform fixpoint check leader 
section demonstrate advantages batched scheduling outweigh overheads 
algorithm switch environments act act new answers resolve mark current answer return answer act set forward continuation set previous choice point fail algorithm schedule answers subgoal schedule chain null active nodes answers table exists active node acts selected literal acts unresolved answers schedule unresolved answers draft add acts schedule chain schedule chain null backtrack node chain return unresolved answers algorithm leader scc subgoal scc completed mark subgoal scc completed deallocate stack space fail implementation local scheduling mentioned section local scheduling reflects pre stratification program evaluating scc completely returning answers 
shall explain local scheduling implemented top batched scheduling 
consider actions batched scheduling represented forest search trees fig 
section 
slg wam optimization root subgoal root shares bindings consuming node calling initially called evaluation eliminating need new active choice point frame calling local slg wam able coalesce choice point calling root generator choice point root able delay returning answers leader scc completion scc root accordingly referred generator active choice point 
instruction requires modification 
batched scheduling new answer generated engine goes execute continuation corresponding tabled subgoal effectively return answer calling environment 
local scheduling answer generated simply inserted table engine backtracks avoid returning answer 
recall algorithm batched scheduling completion check engine schedule answers check fixpoint reclaim space completely evaluated subgoals 
local scheduling engine performs step slightly different way accomodate extra batching answers different sccs 
algorithm local schedule answers subgoal active nodes answers table schedule chain null exists active node acts selected literal acts unresolved answers schedule unresolved answers add acts schedule chain leader scc remove generator active choice point schedule chain schedule chain null backtrack node chain return unresolved answers draft original schedule answers routine described algorithm simply scheduled available answer applicable active nodes 
algorithm schedule answers needs distinguish active generator active nodes 
schedule answers schedule unresolved answers case 
subgoal considered leader scc engine schedule resolution generator active choice point return answers scc 
find fixpoint algorithm engine simply scans topmost scc checks subgoal consuming nodes unresolved answers schedules subgoals 
engine need schedule subgoal generator active node unresolved answers 
find fixpoint succeeds engine guaranteed topmost scc completed 
point subgoals scc marked completed space reclaimed 
leader scc answers table returned 
completion check local scheduling described algorithm 
algorithm local find fixpoint subgoal leader scc subgoal scc active node act selected literal act generator consuming node act unresolved answers schedule completion check return false return true algorithm local subgoal leader scc find fixpoint mark subgoals scc completed deallocate stack space answers backtrack completed table return answers generator consuming choice point fail fail note local scheduling resolutions batched scheduling scc different order 
fact full version preparation precise argument measured answer returns time complexity batched scheduling programs require answer subsumption 
experimental results section compare execution time memory usage slg wam engines different scheduling strategies described 
xsb uses single stack scheduling xsb uses batched scheduling xsb local uses local scheduling 
execution time considered running time dynamic count slg wam instructions operations 
run sparc mb ram sunos 
bench programs consisted variations transitive closure generation shortestpath various graphs programs described table 
experimented graphs defined structures linear chains complete binary trees regular graphs knuth words nodes graph common letter english words arc draft transitive closure reach arc 
reach reach arc 
shortest path sp arc 
sp subsumes min sp arc 
generation sgi arc 
sgi arc subsumes min sgi arc 
table 
bench programs performance batched scheduling examine differences single stack scheduling batched scheduling left recursive transitive closure linear chain containing nodes query reach 
single stack scheduling facts backtracking facts arc clause active node laid subgoal second clause answer table consumed 
new answer derived process computation suspended new answer immediately returned freezing stacks pushing answer return choice point choice point stack 
batched scheduling strategy answers table returned newly derived answer considered 
instructions operations xsb xsb local freeze trail schedule answers fixpoint subgoals active nodes table 
slg wam execution profile left recursive transitive closure linear chain nodes table shows profile slg wam execution different engines 
note main difference xsb xsb example lies fact answer return choice points longer replaced 
requires fewer machine instructions tradeoff beneficial 
batched scheduling requires stack freezing utilizes memory better 
fig 
gives total stack space usage local global choice point trail completion stack strategies left recursive transitive closure query chains varying lengths 
note memory consumption grows linearly number facts xsb space remains constant xsb local kbytes 
slg wam instruction count left recursive transitive closure complete binary trees varying height similar chains 
batching answer resolution reduces words differ single character 
note table considered result environment switches 
draft instructions operations xsb xsb local freeze trail schedule answers fixpoint subgoals active nodes table 
slg wam execution profile left recursive transitive closure complete binary tree height memory kbytes number edges xsb xsb local linear chains varying length memory kbytes number edges xsb xsb local complete binary trees varying height fig 

total memory usage left recursive transitive closure need engine move slg forest batched scheduling save trails 
result memory savings bigger chains fig 
shows note new strategies space remains constant kbytes 
times different engines compute transitive closure trees chains fig 

speedup xsb xsb examples varies 
single stack scheduling name implies uses stack scheduling answers executing transitive closure say binary tree traverses tree depth manner 
batched scheduling effectively uses queue returning answers executing transitive closure traverse tree breadth manner 
accordingly optimization problems shortest path formulated left recursive transitive closure benefit breadth search run efficiently batched scheduling demonstrate compared running times different engines shortestpath program table 
considered artificial graph shown fig 

depth search compute shortest path nodes graph run worth pointing underlying data structures searched breadth manner 
depth nature program clause resolution wam maintained strategies discussed 
draft number edges xsb xsb local linear chains varying length number edges xsb xsb local complete binary trees varying height fig 

times left recursive transitive closure 
time secs number edges xsb xsb local fig 

shows time secs 
xsb xsb local find shortest path endpoints graph form depicted exponential time 
shortest path computed polynomial time graph searched breadth manner 
fig 
shows times xsb xsb local take compute sp dist different values addition running slower xsb ran memory graphs nodes 
considered realistic graphs variations knuth words speedups substantial fig 
shows 
performance local scheduling return answers scc delayed scc completely evaluated implementation local scheduling incurs cost explicitly returning answer generator node sharing bindings batched scheduling single stack scheduling 
overhead reflected tables 
instance note done xsb local requires return answers choice point 
note incur higher number environment switches 
memory consumption local scheduling constant behavior batched scheduling transitive closure trees chains evidenced fig 
notice lines local xsb overlap 
fig 
see local adds roughly constant draft time secs number edges xsb xsb local sp words dist iterations number edges xsb xsb local sp white dist iterations fig 

timings shortest path words 
time secs xsb local fig 

shows execution time query subsumes min sgi graphs form depicted varying overhead xsb execution times local engine comparable xsb 
local approximately performance xsb shortest path variations words graph artificial graph fig 
see fig 
fig 

stated programs benefit answer subsumption local scheduling perform arbitrarily better batched scheduling 
graph fig 
statement 
experiment measured times find shortest distance deepest nodes graphs form depicted fig 
varying program example 
note times local engine vary seconds xsb range seconds 
proposes new scheduling strategies improve performance memory usage execution time tabled evaluations 
due performance improvement batched scheduling default scheduling strategy xsb 
gains strategy twofold eliminating answer return choice point freezing stacks done memory usage greatly reduced reduction execution time decreases 
draft local scheduling perform asymptotically better batched scheduling combined answer subsumption 
different areas aggregate selection program analysis 
addition local scheduling may important role play evaluating programs founded semantics 
currently xsb engine may construct part sdg check loops negation 
local scheduling maintains exact sccs require step demonstrated example 
furthermore negative literals involved loop negation slg uses delay operation attempt break loop 
delay may create answer conditional truth unevaluated literal 
derivation paths may create unconditional answer example answers considered unconditional 
clearly conditional answers needed corresponding unconditional answer delay gives rise form answer subsumption leading advantage locality 
founded semantics practical programs advantages local scheduling may increasingly necessary efficient evaluation 
supported part capes brazil nsf cda ccr 

ait kaci 
wam tutorial reconstruction 
mit press 

beeri ramakrishnan 
power magic 
journal logic programming 

chen warren 
tabled evaluation delaying general logic programs 
jacm january 

dawson ramakrishnan warren 
practical program analysis general purpose logic programming systems case study 
proceedings acm conference programming language design implementation pldi pages 
acm 

fan dietrich 
extension table built ins 
software practice experience july 

freire hu swift warren 
exploiting parallelism tabled evaluations 
th international symposium plilp lncs vol 

springer verlag 

freire swift warren 
batched answers alternative strategy tabled evaluations 
technical report department computer science state university new york stony brook 

freire swift warren 
seriously resolution reconsidered disk 
technical report department computer science state university new york stony brook 

jaffar 
lassez 
constraint logic programming 
proceedings th annual acm symposium principles programming languages popl pages 

janssens bruynooghe 
blueprint machine interpretation constraint logic programs 
proceedings international symposium logic programming ilps 

knuth 
stanford platform combinatorial computing 
addison wesley 


fixpoint iteration subsumption deductive databases 
journal intelligent information systems march 

przymusinski 
logic program natural stratification iterated fixed point model 
proceedings acm symposium principle database systems pods pages 

swift 
efficient evaluation normal logic programs 
phd thesis department computer science state university new york stony brook 
draft 
swift warren 
machine slg resolution definite programs 
proceedings international symposium logic programming ilps pages 

swift warren 
analysis sequential slg evaluation 
proceedings international symposium logic programming ilps pages 

van gelder 
foundations aggregation deductive databases 
proceedings international conference deductive object oriented databases dood pages 

van gelder ross schlipf 
unfounded sets founded semantics general logic programs 
jacm 

