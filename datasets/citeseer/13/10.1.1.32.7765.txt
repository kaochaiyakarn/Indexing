fribourg automatic verification parametric real time program abr conformance protocol research report lsv dec ecole normale de cachan avenue du wilson cachan cedex france www lsv ens cachan fr research report lsv lab 
cnrs ens de cachan france dec short version appeared proc 
th int 
conf 
computer aided verification cav trento italy july volume lecture notes computer science pages 
springer 
automated verification parametric real time program abr conformance protocol erard laurent fribourg lsv ecole normale sup erieure de cachan cnrs av 
pdt 
wilson cachan france email lsv ens cachan fr 
abr conformance protocol real time program controls dataflow rates atm networks 
crucial part protocol dynamical computation expected rate data cells 
corresponding program environment notion parametric timed automata 
framework fundamental property service provided protocol user expressed reachability problem 
tool hytech computing set reachable states model automatically proving property :10.1.1.32.7765
case study gives additional evidence importance model parametric timed automata practical usefulness symbolic analysis tools 
years extensive amount research devoted formal verification real time concurrent systems 
various approaches analysis timed models successful timed automata 
model extended different features leading general notion hybrid automata 
hybrid automata infinite number states fixpoint computation reachable states terminates practice allowing verification safety properties 
explains increasing success development tools analysis real time systems numerous industrial case studies :10.1.1.32.7765
propose automated verification correctness available bit rate abr conformance protocol developed cnet centre national etudes des el france context network communications asynchronous transfer mode atm :10.1.1.32.7765
supported action forma programme dsp cnrs abr conformance protocol 
atm flexible packet switching network architecture communications multiplexed physical link providing better performances traditional networks 
different types atm connections possible time dataflow rate asked paid service user deterministic bit rate connections operate constant rate statistical bit rate connections high rate short time intervals :10.1.1.32.7765
allocation policies ensure optimal bandwidth third called available bit rate abr proposed non urgent transmissions :10.1.1.32.7765
available remaining bandwidth abr protocol dynamically computes highest possible dataflow rate sends information called resource management rm cells user adapt transfer rate data cells 
abr connection possible source emit time rate depending load network :10.1.1.32.7765
service provider control conformance emission respect currently allowed rate filter cells emitted excessive rate 
achieved program located interface user network receives rm cells way user cells user network see 
control program take user network interface cells cells conformance rm cells rm cells fig 

schematic view cells traffic account delay introduced transit cells interface user back 
additional difficulty comes fact value delay known precisely lower upper bounds denoted 
main problem abr conformance test compute emission rate expected cells parameters :10.1.1.32.7765
simple algorithm called computes ideal expected rate cell arriving time value known advance implementation require store huge number intermediate rm cell rates memory :10.1.1.32.7765
realistic algorithm called due adopted cnet 
keeps rm cell rates dynamically updates estimated value ideal rate correctness program development implementation new cnet protocol requires normalization step 
case conformance protocol necessary ensure flow control cells comparison disadvantageous user 
means arrival cell time upper approximation words current time reaches property called proved hand classical method invariants 
algorithm part international norm itu 
proof quite difficult obtain cnet felt need formal methods tools verify mechanical way versions currently development :10.1.1.32.7765
goal algorithms parametric timed automata order achieve automated proof property viewed reachability problem tool hytech 
plan 
section presents model parametric timed automata 
section describes algorithms correctness property framework 
section gives experimental results obtained hytech comparison previous 
section concludes final remarks 
parametric timed automata model parametric timed automata called automata short :10.1.1.32.7765
automata extensions timed automata parameters 
minor difference classical parametric model alur henzinger vardi clock variable discrete variables wn clocks discrete variable :10.1.1.32.7765
retrieve close variant alur henzinger vardi parametric timed automata changing discrete variable gammaw see 
alternatively simply view parametric automata particular cases linear hybrid automata 
automata 
addition finite set locations automata finite set real valued parameters finite set real valued discrete variables universal real valued clock roughly speaking parameters variables values fixed initial constraint evolve 
discrete variables variables values evolve may changed instantaneous updates 
universal clock variable value increases uniformly time reset 
formally parametric term expression form :10.1.1.32.7765
usual convention term parameter corresponds case 
atomic constraint expression term term term term parametric terms constraint conjunction atomic constraints 
formulas automata location invariants guards updates relations 
location invariant conjunction atomic constraints 
guard conjunction atomic constraints possibly special expression asap 
update relation conjunction formulas form term belongs primed copy term parametric term usual implicit appear update relation 
automaton tuple hl init sigma finite set locations init initial location set parameters set discrete variables universal clock mapping labels location location invariant simply written sigma finite set labels partitioned synchronization labels internal labels set action transitions form oe belong guard oe sigma label update relation 
transition urgent guard contains symbol asap 
semantics automata 
briefly informally recall semantics timed automata see details described terms transition systems :10.1.1.32.7765
automaton global state space transition system set qa theta theta theta tuples fl location fl :10.1.1.32.7765
parameter valuation 
data valuation real value clock region subset states form fl holds fl location constraint written theta :10.1.1.32.7765
set init initial states region init theta init constraint init automaton starts initial location initial constraint :10.1.1.32.7765
point parameter values modified 
state fl urgent exists action transition source location guard form asap holds fl urgent transition enabled :10.1.1.32.7765
non urgent state fl automaton spend time location providing invariant remains true 
delay move results state fl changed time 
location invariants convex formulas satisfied satisfied ff :10.1.1.32.7765
state fl automaton apply action transition oe providing guard true current valuations fl :10.1.1.32.7765
instantaneous action move valuation discrete variables modified update relation automaton switches target location resulting state fl 
successor state state obtained delay action move :10.1.1.32.7765
subset states ost set iterated successors states similarly notions predecessor set re defined :10.1.1.32.7765
synchronized product automata 
standard definition synchronized product parallel composition see :10.1.1.32.7765
automata common universal clock product theta automaton universal clock union sets parameters resp 
discrete variables sets parameters resp 
discrete variables 
locations product pairs locations respectively 
invariant conjunction invariants initial location pair initial locations components initial constraint conjunction components initial constraints 
automaton moves leaving unchanged location transitions common synchronization label 
case automata may perform synchronous action move associated guard resp 
update relation conjunction guards resp 
update relations 
simplicity suppose synchronized transitions non urgent :10.1.1.32.7765
parametric verification 
automaton ost init represents set reachable states :10.1.1.32.7765
problems posed reachability problems usually original system composed special process called observer safety properties system expressed conditions set reachable states synchronized product 
automata closure property finite union regions called zone successor zone :10.1.1.32.7765
output computation ost init terminates zone 
consider property set states violating characterized zone proving holds system reduces prove emptiness zone ost init alternatively suffices prove re init :10.1.1.32.7765
note interested proving property holds valuations parameters satisfying initial constraint :10.1.1.32.7765
problem known undecidable general 
solved symbolic fixpoint computation ost re terminates :10.1.1.32.7765
description system recall abr conformance algorithm program located interface network user check emission rate cells conforms value expected network 
test takes place reception cell 
rm cells arrive new allowed rate values 
order verify correctness algorithm respect environment may simply viewed generator events occurring interface ordered successive arrivals rm cells followed single arrival cell time :10.1.1.32.7765
method proceeds steps 
give automata models environment algorithms complete system obtained synchronized product automata explain check correctness property :10.1.1.32.7765
note automata share universal clock value current time loss understanding context clear model environment preliminary description model environment automaton env see involving parameter representing arrival time cell discrete variable representing rate value received rm cell 
locations ait recd 
initial location ait 
reception new rm cell simulated loop label updates non deterministic value 
final reception cell simulated transition label newd ait recd occurs value equal location ait assigned invariant order force switch location recd wait st recd newd fig 

automaton aenv modeling arrivals rm cells final cell algorithm give formal definition ideal rate incremental algorithm computing automaton modeling ideal rate definition 
transmissions interface user instantaneous conformance control easy cell accepted time interval reception previous cell reception exceeding inverse rm cell rate value lastly received 
mentioned transmission delays taken account 
transmission rm cell value interface user leads delay corresponding conformance check take place additional delay due time elapsed subsequent emission cell user reception interface 
parameters represent respectively lower upper bound current time time representing arrival time cell 
rm cell received network relevant computation ideal rate received received time gamma arrived inside time interval gamma gamma :10.1.1.32.7765
ideal rate estimated current time time highest value rm cells :10.1.1.32.7765
words denotes rate value rm cell arriving time ideal rate maxf ae maxf gamma gamma gamma incremental algorithm algorithm proceeds incremental way updating variable reception rm cell reception cell current time equal easy see time value equal ideal rate defined :10.1.1.32.7765
precisely algorithm involves variable parameter common env addition parameters representing lower upper bounds transit time interface user back specific variable equal ideal rate value universal clock reaches 
initially equal 
algorithm reacts arrival new rm cell rate value updating cases arrival time rm cell respect 
case interval definition empty updated new value 
new ideal rate max definition associativity max 
avoid function max computation splitted subcases 
rate left unchanged algorithm terminates reception cell 

arrival times cells unknown program conformance control store instant rate values rm cells received interval gamma may huge number atm network large bandwidth 
idle newd asap er asap asap bt asap fig 

automaton ai automaton ai algorithm naturally modeled automaton see 
initial location idle initial constraint reception rm cell modeled transition making switch location idle location 
transition followed urgent asap transition back idle updates depending position explained 
loss understanding transitions idle labeled corresponding operations 
reception cell modeled transition newd making switch location idle final location 
algorithm computation approximation algorithm involves parameters variable addition specific variables tfi tla play role fi rst la st deadline respectively 
acr approximate current rate corresponds 
fr rate value taken acr current time reaches tfi 
lr rate value taken acr current time reaches tla 
variable lr stores rate value received rm cell 
variable emx just convenient additional variable intended equal max fr lr 
initially tfi tla variables equal 
algorithm reacts types events receiving rm cell reaching tfi receiving cell 
receiving rm cell 
current time new rm cell value arrives variables updated relative positions respect tfi tla respect emx acr 
cases tfi emx tfi tla emx lr tla tfi emx tfi tfi tla emx lr tla tfi emx tfi tla tla emx lr tfi emx tfi acr emx lr fr tfi tla tfi emx tfi acr emx lr fr tla tfi 
tfi emx lr lr fr emx tla tfi emx lr lr fr emx :10.1.1.32.7765
tfi acr lr fr emx tfi tla tfi acr lr fr emx tfi tla reaching tfi 
current time equal tfi approximate current rate acr updated fr fr updated lr 
tfi updated tla 
cases depending tfi previously equal tla operation operation :10.1.1.32.7765
case current time go tfi tla second case stay beneath updated value tla tfi 
tfi tla acr fr fr lr emx lr 
tfi tla acr fr tfi tla fr lr emx lr 
events reaching tfi tfi receiving rm cell occur simultaneously operation case tfi tla case tfi tla performed operation accounting rm cell reception receiving cell :10.1.1.32.7765
receiving cell algorithm terminates 
case receiving cell reaching tfi simultaneously case tfi operation performed terminates :10.1.1.32.7765
automaton ab algorithm naturally modeled automaton ab represented significant guards update information 
labels automaton transitions corresponding program operations :10.1.1.32.7765
event reaching tfi tfi greater tfi tla tfi newd newd tfi tla asap tfi asap fig :10.1.1.32.7765:10.1.1.32.7765:10.1.1.32.7765

approximation automaton ab simulated introducing locations greater ab initially ab greater constraint tfi tla acr fr lr emx location invariant order force execution transition tfi tla tfi tla reaches tfi :10.1.1.32.7765
transition goes back update tfi tla transition switches greater tla time increases 
reception rm cell corresponds transition cases depending source location greater :10.1.1.32.7765
resp 
greater transition goes location resp 

transition followed urgent transition resp 
back updates discrete variables operations resp :10.1.1.32.7765
explained 
note transition additional guard tfi order prevent execution tfi forbidden reaching tfi occur simultaneously :10.1.1.32.7765
reception cell modeled transition newd making ab switch location greater :10.1.1.32.7765
note transition newd guard tfi order prevent execution newd tfi forbidden reaching tfi newd occur simultaneously :10.1.1.32.7765
synchronized product property mentioned earlier complete system obtained product automaton env theta theta ab automata synchronized labels newd simulating arrival rm cells 
order mechanically prove property compute ost product automaton starting initial region init ait idle greater theta init init constraint tfi tla acr fr lr emx check ost init contain state property violated :10.1.1.32.7765
recall property expresses terms ideal rate computed approximate value computed cell received model corresponds acr reception cell automaton switch final state property translates location recd acr set states hold region recd theta acr explained section check ost init alternatively re init 
verification correctness verification hytech automata env ab directly implemented hytech automatically computes synchronization product forward computation ost init requires iteration steps intersection checked empty 
takes sec 
sun station ultra megabytes ram memory 
alternatively backward computation re requires iteration steps intersection init checked empty sec 
automated proof correctness achieved 
comparison previous verification cnet 
ideal rate algorithm correctness property acr formalized 
cnet 
give manual proof classical method invariants 
split conjunction properties tfi acr tfi acr proof done steps 
turn strengthened delta delta delta nontrivial auxiliary properties acr fr fr lr :10.1.1.32.7765
second proved invariant true initially remaining true event 
invariance proof mechanically checked proof assistant coq :10.1.1.32.7765
auxiliary properties seen lemmas necessary achieve proof fixpoint induction 
respect approach property seen fixpoint ost approximation ost ost fixpoint 
main advantage approach auxiliary property lemma delta delta delta manually discovered mechanically verified original form 
advantage ost characterizes properties system ost immediately reused proving property system testing ost contain state violating reusable modeling verifying enhanced versions currently development cnet :10.1.1.32.7765
verification gap 
achieved mechanical proof encoding successor relation system logic program arithmetical constraints computing fixed point program bottom evaluation procedure revesz :10.1.1.32.7765
encoding required approximation successor relation upper approximation ost generated :10.1.1.32.7765
approximation sufficient prove contain state violating respect approach hytech sophisticated widely spread analysis tool hybrid systems gap specific prototype implementation revesz procedure :10.1.1.32.7765
results easily reproducible 
respect gap reach exact fixed point approximation execution time times faster 
final remarks proved automatically basic correctness property algorithm hytech 
full hytech code :10.1.1.32.7765
proof parametric sense holds values parameters involved third parameter specifying property :10.1.1.32.7765
note essentially played role observer 
proof priori impossible tools analysis real time systems uppaal kronos due parameters :10.1.1.32.7765
reachability analysis hopefully paved way verification enhanced versions currently development cnet :10.1.1.32.7765
case study gives additional evidence importance variants parametric timed automata means modeling analysing real industrial applications :10.1.1.32.7765
annex file abr hy contains system description analysis commands hytech input language recall comment rest input line adjacent dashes 
system components automata env model environment model algorithm approx model algorithm 
analysis commands backward computation comment 
abr conformance approximate computation expected rate var universal clock reset clock value arrived rm cell env rate value computed algorithm acr approximate value current rate fr time reaches tfi lr copy value tfi date rate update tla second date emx auxiliary variable discrete arrival date cell lower upper bounds delay parameter automaton env newd initially wait loc wait wait true sync goto wait sync newd goto recd loc recd true wait true goto recd env automaton newd initially idle loc idle true wait true sync goto true sync newd goto loc true wait asap goto idle asap goto idle asap goto idle asap goto idle loc true wait true sync newd goto automaton approx newd initially greater loc tfi wait tfi tfi tla tfi tla acr fr fr lr emx lr goto tfi sync goto tfi tfi tla acr fr fr lr emx lr goto greater tfi sync newd goto loc true wait emx tfi tfi tla asap lr emx tla goto emx tfi tla asap lr emx tla goto emx tla tfi tla asap lr emx goto emx tfi acr lr emx fr tfi tla goto emx tfi acr asap lr emx fr tla tfi goto emx lr asap fr emx lr tla goto emx lr asap fr emx fr goto loc greater true wait true sync goto true sync newd goto loc true wait acr asap fr lr emx tfi tla goto acr :10.1.1.32.7765:10.1.1.32.7765
asap fr lr emx tfi tla goto loc true wait true goto approx analysis commands var init region init loc idle loc approx greater loc env wait tfi tfi tla tfi emx acr emx fr emx lr emx loc loc approx loc env recd acr prints iterated succ reach forward init prints intersection empty prints ok prints nok endif prints iterated pred reach backward prints intersection empty init prints ok prints nok endif annex files abr log log contain outputs produced running hytech input file abr hy forward backward computations respectively 
abr log command usr local bin hytech abr hytech symbolic model checker embedded systems version info email hytech eecs berkeley edu www eecs berkeley edu hytech warning input changed version :10.1.1.32.7765
info iterated succ number iterations required reachability intersection ok max memory pages bytes mb time spent sec total log command usr local bin hytech abr hytech symbolic model checker embedded systems version info email hytech eecs berkeley edu www eecs berkeley edu hytech warning input changed version :10.1.1.32.7765
info iterated pred number iterations required reachability intersection ok max memory pages bytes mb time spent sec total :10.1.1.32.7765
alur courcoubetis halbwachs henzinger 
ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science pp 


alur courcoubetis henzinger 
ho 
hybrid automata algorithmic approach specification verification hybrid systems 
hybrid systems lncs pp 


alur dill 
automata modeling real time systems :10.1.1.32.7765
proc 
th icalp lncs springer verlag pp 


alur henzinger vardi 
parametric real time reasoning 
proc 
th annual acm symp 
theory computing stoc pp 


bengtsson larsen larsson pettersson yi 
uppaal tool suite automatic verification real time systems :10.1.1.32.7765
hybrid systems iii lncs springer verlag pp 


erard fribourg 
automated verification parametric realtime program abr conformance protocol 
technical report lsv cnrs ecole normale sup erieure de cachan dec 
www lsv 
fr 
see www lsv ens cachan fr 
olivero tripakis yovine 
tool kronos 
hybrid systems iii lncs springer verlag pp 


felix 
de etude de cas abr 
internal note labri university bordeaux france 

fribourg 
closed form evaluation extended timed automata :10.1.1.32.7765
technical report lsv cnrs ecole normale sup erieure de cachan march 
www lsv ens cachan fr 
fribourg richardson 
symbolic verification gap order constraints 
proc 
th intl 
workshop logic program synthesis transformation lncs pp 


henzinger 
ho wong toi 
user guide hytech 
proc 
tacas lncs springer verlag pp 


huet kahn paulin mohring 
coq proof assistant tutorial version 
technical report inria august 



correction algorithm abr conformance :10.1.1.32.7765
technical report cnet december 

nicollin olivero sifakis yovine 
approach description analysis hybrid systems 
hybrid systems lncs pp 


revesz 
closed form evaluation datalog queries integer gap order constraints theoretical computer science vol :10.1.1.32.7765
pp 

