case reasoning reusing software knowledge carsten klaus dieter althoff fraunhofer institute experimental software engineering kaiserslautern germany mail althoff fhg de 
reuse software knowledge principle improving productivity reliability software development 
achieve reuse done systematically 
means processes retrieving reusing revising retaining defined 
time organizational issues establishment separate organizational unit responsible organizational learning considered 
compare software knowledge reuse models cbr cycle aamodt plaza show approaches similar 
suggest extend cbr cycle including organizational issues explicitly conclude cbr promising technology realizing software knowledge reuse suggested organizational extensions considered 
keywords 
organizational view cbr organizational learning experience factory quality improvement paradigm software knowledge reuse reuse practice appears exhibit considerable potential far ongoing activities enhance software development process restructure process software construction actual software development departments 
accommodate exploit software reuse management organization departments restructured just locally isolation context entire organization 
reuse kinds software knowledge main pillars approach transferring software technologies institute 
transfer quality improvement paradigm qip describing activities continuous improvement goal question metric gqm approach goal oriented measurement evaluation experience factory ef concept describing organizational structure implementing process improvement program includes experience base knowledge relevant software development stored 
qip gqm ef applied successfully environments 
successful application nasa software engineering laboratory sel recognized ieee sei process achievement award 
currently approaches basis improvement programs companies covering branches industry ranging small large companies 
point looking technical support realizing experience base 
decided explore case reasoning cbr purpose 
cbr software reuse past discuss cbr approach reuse approach match respect conceptual knowledge level organizational structure 
approaches similarity retrieval airs faceted classification approaches offer model conceptual knowledge level learning past experience 
described inspired althoff wilke introduce organizational view cbr cycle described 
organizational view helpful order understand potential uses cbr software development process modeling support 
strongly support organizational view cbr detailing correspondences cbr cycle reuse software knowledge 
show interesting level detail cbr promising technology developing ef 
importance cbr goes realizing particular ef mechanisms supports realization ef general knowledge level 
remainder structured follows 
section gives short reuse software knowledge 
compare reuse process cbr task method decomposition model introduced detailing cbr cycle section 
reuse process similar cbr cycle organizational issues long considered part successful reuse program natural extend interpretation cbr cycle include organizational issues explicitly see details :10.1.1.33.3022
issues considered ongoing project case studies cbr realizing ef section 
shortly describe planned activities direction point issues open section 

subsume aspects term organizational view activities performed humans machines organizational structure organization may subdivided project organization units unit responsible organizational learning 
reuse software knowledge benefits software reuse manifold 
improved productivity improved reliability better estimates faster time market 
traditionally emphasis reusing code 
reuse 
kinds software related knowledge reused including products documents created software development project processes activities actions aimed creating product useful software development effort prediction productivity models models application implemented 
reuse applied planning software development project performance project 
reuse planning software development project software development start development project planned respect cost schedule effort resource demands 
time indicators detecting deviations project plan defined 
manufacturing production repetitive task software development creative elements 
mean software knowledge reuse applied 
similar processes project plans similar software systems 
planning project plans projects terminated 
fact led development quality improvement paradigm qip 
divides planning process steps takes account lessons learned performance project predicted cost effort resource demands correct 
saved order improve planning projects 
planning steps follows characterize 
environment software development takes place described project characteristics input 
characterization environment thought set models similar projects planned 
models may describe possible project plans document structure software system expected duration effort distribution 
addition suitable measurement goals part characterization 
set goals 
characterization capabilities strategic importance organization set measurement goals defined 
measurement goals may project specific general interest organization 
project specific goal adherence predicted effort reduction development cost long run interest organization 
measurement goals define successful project organization performance 
reasonable expectations respect goals derived baseline provided characterization step 
choose models 
depending goals set right set models characterization step chosen created 
usually chosen models tailored specific needs project 
instance effort distribution model express percentage effort spent phase requirements design code test 
total effort known effort distribution model instantiated replacing percentiles concrete effort numbers 
models constructed building blocks project plan constructed building blocks phase 
planning phase followed actual performance project step qip 
performance project monitored sure uses resources best possible way 
example effort model predicts hours design phase actual design taken hours complete obviously problem occurred solution sought 
point reuse performing project comes see subsection 
project completed evaluation takes place analyze 
project collected data problems occurred solutions analyzed 
results analysis lessons learned improvement suggestions projects 
example new technique writing software requirements applied project know requirements technique helpful subsequent phases 
probably improvement suggestions regarding technique provided project team 
package 
project feedback consolidated new updated refined models 
instance tutorial material exists describing requirements technique updated lessons learned improvement suggestions analysis phase 
way improvement suggestions find way projects 
reuse performing software development project project plan constructed planning phase guide performance project 
activity produces deliverables usually kind document 
humans start seldom scratch 
typically reused 
example writing informal application business trip forget lots important information administration application form 
true development software 
large deliverables assembled reusing old pieces 
exploit reuse fullest extend possible necessary provide support form experience base reusable objects stored 
technical activities project management replanning supported experience base 
kind knowledge reused just code 
example schedule slippage detected experience base may consulted possible actions reducing number reviews increase project risks 
reuse performance software development project typically described reuse model proposed basili rombach 
system new object integrated specification object defined 
step identify set reuse candidates candidates evaluated 
eventually best suited candidate selected 
depending close created scratch modified suitable way 
new object integrated resulting new system 
alternative modifying way satisfies modify consequently integrated easily 
step process record project specific experience evaluation successfully integrated order improve reuse support 
integration new experience experience base referred packaging 
integrating new experience may require restructure parts experience base 
referred 
experience base may populated experience gained software development organization transferring existing experience outside organization 
experience literature 
comparison cbr approach reuse approaches comparing qip reuse oriented software development model cbr approach task method decomposition model proposed aamodt plaza main reasons 
task method decomposition model bases aamodt plaza cbr cycle differ cbr cycles described literature respect basic contents 
second combination cbr knowledge level analysis helpful problem hand find technological basis ef 
third task method decomposition model successfully evaluation cbr system means analysis comparison 
fourth cbr cycle aamodt plaza appears widely accepted literature see examples :10.1.1.33.3022
shortly introduce top level sub tasks retrieve reuse revise retain cbr task method decomposition model 
retrieve decomposed identify features identifies relevant set problem descriptors search returns set cases similar new case initially match chooses set cases similar new case select chooses suitable case set 
reuse decomposed copy takes selected case basis adapt transforms solution selected case solution new case 
revise decomposed evaluate solution evaluates success solution constructed reuse task repair fault detects defects current solution generates retrieves explanations 
retain decomposed extract identifies information stored index identifies types indexes needed retrieval structure search space integrate updates knowledge base parts actual experience useful problem solving 
comparison cbr approach qip steps qip compare cbr approach follows qip step characterize 
step project characteristics retrieve set relevant models 
corresponds identify features search initially match task retrieve 
best candidate selected point select task part qip step 
qip step set goals 
step measurement goals software development projects chosen 
interpreted selecting goal cases responsible manager looks strategic improvement goals combinations reduce software development effort 
qip step corresponds task select respect measurement goals subset relevant models returned qip step 
qip step choose models 
rest relevant models describing products processes expectations goals selected accordance goals selected qip step 
qip step corresponds task select respect measurement goals 
addition project plan assembled relevant models integrated 
typically requires modification retrieved models 
qip step corresponds reuse task 
qip step perform 
step project performed 
cbr process implies solution applied tasks reuse revise provide explicit task 
correspondence qip step 
reasons project usually executed people responsible running cbr system 
terms ef concept cbr specialists ef project performed people project organization 
model describing cbr approach consider organizational issues meaning include case application explicitly 
qip step analyze 
step project performance analyzed 
lessons learned improvement suggestions respect knowledge applied written 
qip step corresponds task revise extract task retain output qip step exactly packaged step 
qip step package 
lessons learned improvement suggestions integrated experience base 
includes formalizing experience restructuring experience base 
qip step corresponds index integrate task retain 

correspondence defining similarity special kind general knowledge usually done domain expert cbr defining goals concrete improvement goals derived strategic business goals usually determined responsible manager qip 
cases resulting definition guides selection process crucial importance procedure 
table summarizes correspondences 
table 
summary comparison cbr cycle qip cbr qip qip qip qip qip qip retrieve identify features search initially match select goals reuse copy adapt revise evaluate solution repair fault retain extract index integrate comparison cbr approach reuse oriented software development model reuse software development project basically consists steps related cbr approach follows specify 
step need new object recognized needed object specified 
step corresponds identify features task retrieve 
identify 
initial set possible candidates identified 
corresponds search initially match task retrieve 
evaluate select 
suitable candidate selected 
step corresponds select task retrieve 
modify create 
suitable candidate modified fulfill initial specification new object built scratch 
correspond task reuse 
creation completely new case indirectly covered cbr cycle 
integrate 
new object integrated surrounding system 
cbr cycle include application cases explicitly step correspondence 
terms ef concept integration done project organization 
usually ef people involved step 
record experience 
success new object evaluated 
corresponds task revise extract task retain 
re package 
involves integration experience experience base 
step corresponds index integrate task retain 
table summarizes results comparison 
result comparisons carried section twofold 
shown cbr cycle software knowledge reuse models 
viewed successfully passed plausibility test cbr candidate technology realizing software knowledge reuse 
second comparisons basic correspondence missing 
reason seen perform step qip cbr cycle include explicit correspondence integrate step reuse model 
consideration underlying reasons leads organizational issues cbr systems see details :10.1.1.33.3022
current status table 
summary comparison cbr cycle reuse oriented software development model cbr specify identify evaluate select modify create integrate record experience re package retrieve identify features search initially match select reuse copy adapt revise evaluate solution repair fault retain extract index integrate current bases general framework described 
describes analysis collection experiences respect application cbr development cbr systems gathered questionnaires 
experiences reusable means cbr technology questionnaire represented structured case 
instance concrete application problem searched similar problem similar cbr tool cbr tool principle deal problem 
number ongoing industrial research house projects institute context ef development 
currently main effort identifying capturing experiences data information knowledge potential reuse 
cbr realization 
summary outlook showed cbr approach described aamodt plaza similar models area software engineering reusing knowledge project planning level project performance level 
second part introduced organizational structure reusing software knowledge 
plan cbr system software knowledge reuse evaluate benefits 
purpose common model incorporating cbr process model reuse process models developed 
model describe cbr reuse software knowledge sufficient detail 
organizational model described basis evaluation respect useful support cbr systems 
nther ruhe frank fruitful discussions 
rgen nch martin raised issues think 
christiane anonymous referees reviewing submitted 
contributed final version constructive way 
aamodt plaza 
case reasoning foundational issues methodological variations system approaches 
march 

althoff 
review industrial case reasoning tools 
ai intelligence 
oxford uk 
klaus dieter althoff 
evaluating case reasoning systems case study 
postdoctoral thesis university kaiserslautern july 
submitted 
klaus dieter althoff aamodt 
relating case problem solving learning methods task domain characteristics analytic framework 
september 
klaus dieter althoff brigitte bartsch sp rl 
decision support casebased applications 
wirtschaftsinformatik february 
klaus dieter althoff wolfgang wilke 
potential uses case reasoning experienced construction software systems business process support 
bergmann wilke editors proceedings th german workshop case reasoning lsa pages 
centre learning systems applications university kaiserslautern march 
brigitte bartsch sp rl klaus dieter althoff alexandre 
learning reasoning case reasoning systems 
proceedings th german conference knowledge systems xps march 
victor basili dieter rombach 
experience factory 
john editor encyclopedia software engineering volume pages 
john wiley sons 
victor basili dieter rombach 
support comprehensive reuse 
ieee software engineering journal september 
bergmann eisenecker 
case reasoning supporting reuse object oriented software case study german 
richter maurer editors expert systems pages 
infix verlag 
fern ndez mez hern ndez 
supporting object reuse case reasoning 
smith faltings editors advances case reasoning pages 
springer verlag 
janet kolodner 
case reasoning 
morgan kaufmann 
eduardo james hendler rub prieto az christine braun 
computing similarity reuse library system ai approach 
acm transactions software engineering methodology july 
rub prieto az peter freeman 
classifying software reusability 
ieee software january 
dieter rombach 
new institute applied software engineering research 
software process newsletter pages fall 

wilhelm sch fer rub prieto az matsumoto 
software reusability 
ellis horwood 
carsten klaus dieter althoff 
case reasoning reusing software knowledge 
technical report report fraunhofer institute experimental software engineering kaiserslautern germany 
mansour 
software reuse current status trends 
journal systems software september 
