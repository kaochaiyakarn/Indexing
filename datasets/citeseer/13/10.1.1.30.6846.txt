improved type error reporting jun yang greg michaelson phil trinder wells www hw ac uk trinder greg department computing electrical engineering heriot watt university edinburgh eh uk 
error reports produced compilers languages polymorphic type inference uninformative 
attempts produce improved error reports 
de ne manifesto error reports evaluate traditional algorithms improved algorithms including devising 
debugging type errors programs written polymorphic languages type inference hard 
reason type information implicit inferred compiler 
error occurs type inference uses program variable con ict occurs program text call site 
concepts best illustrated example 
inference proceeds left right initially assigning type variable function parameter rst algorithm infers function integer unknown type type int freshly chosen type variable standing undetermined type 
second true algorithm infers function booleans unknown type type bool 
con ict detected uni cation types int bool fails 
fn true stdin error operator operand don agree literal operator domain int operand bool expression true fig 

example inference failing unfortunately errors reported compilers uninformative 
version sml nj compiler reports error site true mention sources type con ict may real error 
reason compilers type inference algorithms designed primarily analyze programs eciently comprehensible error reporting subsidiary goal 
focuses improved error reporting languages polymorphism type inference style hindley milner type system 
de ne manifesto type error reporting section 
manifesto identify problems error reporting various inference algorithms section 
brie survey improved error reporting systems section describe new type inference algorithms improved error reporting section 
conclude comparative evaluation type error reporting systems section 
manifesto type error reporting think error reports properties 
correct 
entails correct detection errors reported exactly program legal correct reporting reported sites contribute type con ict 

precise 
con icting site located smallest useful amount source text 
simple relationship con icting type site inferred 

succinct 
error report maximise useful information minimise non useful information 
long verbose explanations tedious read 
short terse explanation hard understand 


error report reproduce large amounts counter intuitive mechanical inference 
includes reporting arti cially introduced type variables 

source 
user need know compiler internals understand error message 
example error reports core syntax generated compiler original source syntax 
inference algorithms infer report source syntax 
implementation may source 

unbiased 
inherent left right similar bias choice report error multiple sites contribute error 

comprehensive 
algorithm able report sites contribute reported type con ict 
user reason error reported sites need look parts program locate error 
error reporters aim report multiple errors stopping rst error avoiding generating cascade bogus error messages 
included manifesto desirable example error reporters education sector rst error 
inference algorithm error reporting type inference algorithms algorithms designed primarily analyze programs eciently comprehensible error reporting subsidiary goal 
algorithm implemented standard ml new jersey version october implementation algorithm 
compared manifesto inference algorithm error reports correct succinct problems 

precise 
algorithm identify precise sites program con ict 
particular fails notices error function application erroneous expression successfully type checked long consequence collides application 
example typing succeeds function argument expressions fails outermost function application entire expression reported error site 
illustrates new jersey sml algorithm report obvious human problem outermost function expects integer argument boolean 
algorithm precise particular stops earlier algorithm type error 
algorithm application stops constant variable abstraction 
shows identi es site true precisely 

mechanical 
algorithms introduce type variable constructs instantiating type error reports internal type variables obvious relation program text 
example shows function corresponding error report produced standard ml new jersey version algorithm 
type variable appears program text having introduced inference 
fn fn true false false stdin error operator operand don agree literal operator domain int operand bool expression fn fn case false fig 

algorithm imprecise error location fn fn true false false error error expression true type inconsistent requirement expression 
required type int actual type bool fig 

algorithm application error reporting 
source 
errors reported text generated syntax tree 
example sml nj reports error pretty printed version internal syntax tree di erent source syntax 

biased 
algorithms left right bias type checking proceeds exhaustively top bottom left right program text 
shown algorithm presumes rst correct 

comprehensive 
algorithms typically rst site program con ict detected may undetected con icts program 
example edinburgh standard ml core language reports true error nd second con ict false type error result tuple type application function speci type type right hand side speci type example type right hand side tuple type 
fun stdin error right hand side clause doesn agree function result type circularity expression list list result type list declaration fn arg fn fig 

inference algorithm counter intuitive reporting fun true false type clash true looking int bool fig 

inference algorithm non comprehensive reporting improved error reporting problems inference algorithm error reporting motivated aimed providing better understanding type error expense additional computation 
approach provide better explanation inference leads type error 
systems approach classi ed error explanation systems :10.1.1.46.4848
approach provide better error report necessarily explaining inference lead error 
systems approach classi ed error reporting systems 
third approach provide mechanism programmer probe type subexpressions 
error explanation systems error explanation systems 
example system duggan bend uses modi ed uni cation algorithm record reasons led program variable having particular type 
system explains inference reaches con icting types 
system explains type inference menu traversal 
compared manifesto type error explanation systems comprehensive precise correct 
fail key points 

succinct 
textual explanation information rapidly tedious 
experts usually nd explanation detailed real help nd valuable information di erent positions programs contribute type tool 

mechanical 
explanations substantial internal type variables bridges instances ones get re ned 
contrast programmer concerned type variables 
understand explanations necessary remember program variable type variable inferred re ned 
type variables impossible remember entity type variable represents 

source 
explanations text generated syntax tree original program text 

biased 
algorithm left right bias inferring types discovering errors 
error reporting systems error reports improved locating error sites locating precisely program text providing explanation con ict 
approaches including 
wand system records sites contribute type deduction type errors detected uses information explain errors happen 
algorithm records substitutions function applications causes substitution 
type error consists types uni ed derived substitutions algorithm reports application caused substitutions possible cause error 
inconsistency depends arbitrary order traversal syntax tree type analysis 
consequently number candidate error sites decided programming style 
system lists possible error sites direct source type inconsistency 
clear relationship candidate error sites user needs check types proposed error sites intentions 
johnson walz give maximum ow approach decide usage error source 
usage minority candidate mistake 
errors correct usage incorrect usage clear minority isolated minority usage may correct type 
turner considered improved error handling unbound identi er error reports error reports mutually recursive declaration error reports 
similar johnson method method chooses minority candidate error source 
bernstein stark give method debugging type errors called open system 
user replaces suspect expression program free variable 
system infers type free variable user compare expected 
user repeatedly probe program way error uncovered 
contrast techniques requires user interaction locate error 
particular user guess probable location type error 
ongoing uses graph types report errors 
graph contains information types sites contribute types explanation generated traversing graph 
generate concise explanation type errors suitable graph traversal selected 
clear best way traverse graph 
approach dinesh tip requires changes type inference algorithm type system 
basic idea apply dependence tracking rewriting implementation ml type inferencer 
program slice computed reported type inference error 
program slice consists parts program potentially ect values computed point interest 
unclear accurate slices practice 
error reporting systems vs manifesto wand system selected typical model algorithm modi ed uni cation algorithm generate explanation 
duggan bent similar modi ed uni cation algorithm report explain error 
open system included evaluation user driven type debugging error reporting 
include dinesh tip di erent type inference 
wand system compare wand approach manifesto 
correct 
sites contribute type con ict int bool 

precise 
reports applications 
precise algorithm report smallest sites operator 

concise 
report long list error sites 
simple example reports application subexpressions redundant 

fairly mechanical 
site may contribute substitutions types redundant reports single site example site reported times 
reports reasons contribute type error 
fn error sites possible sites happened bool int int int int int int int int int bool bool int int fig 

example wand error reporting 
source 
implementation source 

biased 
wand approach modi ed uni cation algorithm accumulate reason type con ict 
inference algorithm left right bias reports left right bias 

comprehensive 
reports possible sites contribute type error 
johnson walz method type inconsistency arises maximum ow technique applied set type equations determine source error 
approach 
correct 
reports subset possible error sources 

precise 
compare uses operator report operator error site 

succinct 
chooses error site 

fairly mechanical 
selects minority usage error site majority uses may cause error 
just correct usage incorrect usage possible decide error 
counter intuitive sense report con icting sites 

source 

unbiased 
assume rst correct 

comprehensive 
compare uses nd con ict sites 
error explanations illustrated implemented johnson walz method 
turner method type inconsistency arises count di erent uses determine source error 
approach 
correct 
reports subset probable error sources 

precise 
compare types patterns applications 
precise algorithm johnson walz 

succinct 
chooses error site 


selects minority usage error site 

source 
records expression type checker typing 

unbiased 
assume rst correct 

comprehensive 
nd con ict sites 
improved type error reporting improved type error reporting algorithms 
described brie outlined 
uni cation assumption environments uae rst new algorithm uni cation assumption environments 
key idea independently type subexpression application return assumption environment subexpression gives local type constraints variable subexpression 
consistency resulting assumption environments checked root subexpressions 
left right bias removed unifying assumption environments root subexpressions compare uses program variable di erent subexpression see consistent way subexpression treated equally 
uae algorithm takes type environment assumption environment expression arguments 
type environment ordinary type environment algorithm 
assumption environment contains type constraints program variables previous typed subexpressions 
start type checking type environment assumption environment empty 
assumption environment check type consistency program variables subexpressions identify precisely ner grain error sites 
fn true error type conflicts expressions true program variables type conflicts different sites expression int second expression bool fig 

example uae error report method best illustrated example shows output implementation simple function 
function shows algorithm proceeds left right inferring function type rst reporting con ict second reports true error site 
contrast uae algorithm explains monomorphic type lambda bound inconsistently di erent subexpressions 
shows uae algorithm identi es con ict left hand side function de nition uses body function 
shows algorithm reports entire function de nition error 
uae vs manifesto 
correct 
reported error site subexpression relationship sites type con icts site 
uae algorithm reports pairs sites con icting types reports true pair con icting sites 

precise 
precise algorithm 
example algorithm reports expression error site uae algorithm reports left hand side right hand side type con ict recursive function 
locates smallest pairs type con icting sites 
reported con icting types inferred reported sites directly 
fun error type conflicts expressions elements pattern different types expression list second expression fig 

second example uae error report 
succinct 
reports type con icting uses program variables pairs concludes type con icts 


reports con icting sites 
type information inferred reported sites 
understand reported sites error sites user needs understand reported type information 
type information uae algorithm local typing reported sites easier understand type information long chain inferences algorithm 

source 
implementation partially source 

unbiased 
subexpression application treated independently 

comprehensive 
uae algorithm identi es type con icting uses program variable pair subexpressions 
incremental error inference iei second new typing algorithm incremental error inference locates con icts application expressions uae algorithm 
additional functionality bought making algorithm complex 
seen section particular algorithm fails discovers typing error function application identi es large amounts program text error site 
algorithm stops earlier algorithm report ner grain error site shown 
algorithm brings type constraint expected type subexpression satisfy 
example case application required type application expression real context required type real required type carries context algorithm reports ner grained error site algorithm stopping constant variable lambda expression 
example shows error message produced algorithm program 
algorithm stops true identifying smaller error site reveal sites con ict 
key idea iei combine algorithm uae algorithm 
uae algorithm fails discovers typing error application uae nds directly con icting uses program variable subexpression iei switches algorithm stops site smaller expression 
particular algorithm stops argument application con ict function argument application 
example algorithm stops true means function fn type con ict argument fn true false false 
algorithm stops early report false type error site 
fn fn true false false possible errors function fn error error expression error operator 
required type bool int operator type int int int error error expression type inconsistent requirement expression 
required type int int actual type bool int possible errors argument fn true false false error error expression true type inconsistent requirement expression 
required type int actual type bool error error expression false type inconsistent requirement expression 
required type int actual type bool fig 

iei algorithm precise error location type check function application iei algorithm locates sources con ict assuming argument subexpression algorithm type inconsistency type correct type checking function subexpression assumption 
nd con icting site function application reason con ict 
removes left right bias inference algorithms 
example shows error reported iei program figures 
incremental error inference algorithm iei gives error explanation messages nding common program variables type con icts subexpressions uae algorithm behaves way algorithm reports entire expression error site pair directly type con icting sites showing reasons con icts 
iei reports function fn argument fn true false false type con icts 
iei identi es reason con icts required type int operator operand argument fn supplied bool value 
subexpressions fn true false sites true false required int type function fn bool type 
avoid arti cially introduced type variables error reporting iei infers concrete type information base types possible 
previously suggested combination type checking algorithms obtain additional information type errors 
example combined variant algorithm algorithm combination algorithms standard ml new jersey version 
iei vs manifesto compare iei algorithm manifesto 
correct 
uae algorithm iei algorithm reports pairs type con icting sites 
types error sites reported pair con ict 
sites contributors type con ict 
example iei reports argument int type supplied bool value 

precise 
iei algorithm reports smallest con icting sites 
example algorithm reports expression error site 
figures algorithm reports true part bool application 
reporting sucient identify type error 
iei reports argument int supplied bool value true false type con icting 

succinct 
similarly uae algorithm iei reports type con ict relationship sites types 
example reports required type application fn true false false int requirement operand actual type bool 

fairly mechanical 
iei reports pairs sites type con icts 
type information pairs inferred algorithm passed top expression subexpression may easy understand uae algorithm 

source 
implementation partially source 

unbiased 
iei assume rst correct 

comprehensive 
iei nds pair con icting sites 
summary summarises algorithms performance manifesto 
correctness omitted summary algorithms correct 
source omitted believe implementation algorithm adapted source 
observations manifesto wand johnson walz turner uae iei 
precise poor 
succinct fair fair poor 
poor poor fair fair fair fair 
unbiased 
comprehensive poor poor fig 

error reporting systems vs manifesto error reporting algorithms similar algorithm having slight advantage recursive de nitions tuple expressions precise 
algorithm error reporting may harder understand algorithm comprehensive stops early supply helpful information 
example stops true identifying false con ict site 
late may reports large chunk code error site 
example reports entire application expression error site 
wand johnson turner uae iei produce better error reports algorithms 
early algorithm late algorithm 
wand system weakest biased succinct 
worse situation complains subexpressions error sites 
hard distinguish johnson turner uae iei manifesto 
addition manifesto observation general considerations 
turner implementation source 
implementations uae iei partially source 
consider considerably improve error reporting production 
johnson turner method reports error site comparison number di erent uses 
errors form correct usage incorrect usage turner method reports expression large error site 
consider reporting con icting subexpressions better reporting expression 
type information pure uae algorithm self explained user infer type information reported sites user need look parts original expression reason type information 
type information easier understand 
identify error sites greater precision iei algorithm uses global inference reporting types long chain inference 
ect iei algorithm gains greater precision price understandability 
turner type information similar iei observations conclude error reporting uae algorithm easiest understand 
uae algorithm limited reporting con icting uses program variable 
algorithms shortcoming type information error reporting type information comes long chain inference 
consider error site important type information critical understanding error report 
type information error report needs succinct explanations improve understandability 
give better error reporting important understand humans give error explanation 
overcome shortcomings type explanation systems including type error explanation systems observed human experts explain type inference type errors developing system reports error similar way 
intend complete new explanation system particular investigating generation maximally succinct explanations human techniques 

mike ryan 
explaining type errors polymorphic languages 
acm letters programming languages systems march 

karen bernstein eugene stark 
debugging type errors full version 
technical report state university new york stony brook 

dinesh frank tip 
slicing approach locating type errors 
proceedings usenix conference domain speci languages dsl 
santa barbara ca oct 

dominic duggan frederick bent 
explaining type inference 
science computer programming 

gregory johnson janet walz 
maximum ow approach anomaly isolation uni incremental type inference 
conference record thirteenth annual acm symposium principles programming languages pages 
acm press january 

lee yi 
proofs folklore polymorphic type inference algorithm 
acm transactions programming languages systems 

bruce 
uni cation substitutions type inference 
kevin hammond anthony davie chris clack editors implementation functional languages ifl london uk volume lncs pages 
springer verlag september 

bruce 
generalising techniques type debugging 
phil trinder greg michaelson hans wolfgang loidl editors trends functional programming pages 
intellect march 

robin milner mads tofte robert harper david macqueen 
de nition standard ml revised 
mit press 

laurence laurent 
interactive programming environment ml 
technical report institut national de recherche en informatique en automatique march 

helen 
explanation polymorphic type checker standard ml 
master thesis department computer science heriot watt university 

david turner 
enhanced error handling ml 
cs project department computer science university edinburgh 

mitchell wand 
finding source type errors 
conference record thirteenth annual acm symposium principles programming languages pages 
acm press january 

jun yang 
explaining type errors nding source type con ict 
phil trinder greg michaelson hans wolfgang loidl editors trends functional programming pages 
intellect march 

jun yang greg michaelson phil trinder 
people check polymorphic types 
alan blackwell editors twelfth annual meeting psychology programming interest group proceedings pages 
april 
