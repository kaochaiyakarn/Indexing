extensible framework data cleaning helena galhardas inria rocquencourt france helena galhardas inria fr daniela florescu inria rocquencourt france daniela florescu inria fr dennis shasha new york university inria shasha cs nyu edu eric simon inria rocquencourt france eric simon inria fr data integration solutions dealing large amounts data strongly required years 
traditional data integration problems schema integration local global schema mappings additional data problems dealt absence universal keys di erent databases known object identity problem existence keyboard errors data presence inconsistencies data coming multiple sources 
dealing problems globally called data cleaning process 
propose framework ers fundamental services required process data transformation duplicate elimination multi table matching 
services implemented set purposely designed macro operators 
propose sql extension specifying macro operators 
important feature framework ability explicitly including human interaction process 
main novelty framework permits performance optimizations tailored data cleaning applications mixed evaluation neighborhood hash join decision push short circuited computation 
measure bene ts 
years big demand data integration solutions deal large amounts data 
problems traditionally addressed past schema integration local global schema mapping query decomposition data integration applications cope additional problems 
data coming di erent origins may created di erent times di erent people di erent conventions 
context question deciding data refers real object crucial 
may information clients stored tables client buys di erent services managed distinct departments 
decided build uni ed repository clients customer may referred di erent tables slightly di erent correct names john smith smith john smith 
kind mismatching called object identity problem 
may errors data 
usually due john smith joh smith errors result object identity problem data integrated object may referred data record may erroneous 
algorithms detect elds data entry errors refer object ones recognize elds written di erent format correct alternatives 
problem called instance identi cation problem duplicate elimination record linkage problem case single source 

may inconsistencies 
di erent records may recognized store information object name elds similar example may carry contradictory information instance di erent birth dates person object 
interested case contents multiple autonomous data sources combined purpose building materialized error free uni ed view 
data warehouse terminology shall call data cleaning process eliminating problems construction materialized view 
statement data cleaning problem illustrate major steps followed data cleaning process concrete example 
case illustrated gure want gather materialized view named client information tells clients identi ed id name address user name job cellular phone phone line internet connection home 
information priori disseminated source tables gsm client home client internet client 
example requires data cleaning process common client key source tables data entry errors may introduced lling elds table 
rst step determine client records taken di erent source table correspond client real life object identity problem 
henceforth records called matching records 
may express records matching records name address values equal name values high degree similarity notion similarity 
complex criteria specify records matching records name values similar record comes gsm client table comes home client table 
comparing records conversions individual table elds may needed data formats may vary 
instance names normalized format case name 
matching records second important step inspect matching records determine ones valid 
necessary single tuple say home client may priori match records gsm client internet client due approximation performed matching criteria 
possibility ask user inspect matching records possibly entailing examination huge number records 
possibility keep matching records highest similarity value wrt threshold provided value kept matching record 
phase integrate remaining matching records generate tuples materialized view 
possible rules integration envisioned 
instance name value client records taken gsm client matching records address value taken home client matching records 
job value client records obtained concatenating job values matching records gsm client home client 
choices speci ed advance interactively performed user cleaning process 
general goal cleaning process assure quality data generated materialized view natural sense client records correspond client matching records ii integrated matching records error free 
satisfy quality goal cleaning process major features 
iterative interactive 
rst iteration matching records initial matching criteria 
inspection result errors may matching records match 
consequence new matching criteria de ned new matching phase started 
similarly integration phase iterated re ne integration criteria manually controlling rst generated results 
involvement human usually expert di erent stages cleaning process necessary errors inconsistencies resolved automatically 
second feature cleaning process expressive extensible 
possible express rich variety criteria matching records eliminating erroneous matches integrate remaining matching records 
furthermore easy incorporate domain speci data normalization matching integration algorithms user client name address gsm nb phone nb user name job internet client name address user name gsm client name address gsm nb job data cleaning integration home phone internet home client name address phone nb job gsm integrated view telecom customers cleaning process 
instance algorithms practice compare person names addresses may 
extensibility allows invoked cleaning process 
specifying implementing cleaning process quality result raises main diculties 
volume data involved cleaning process usually large matching phase quite expensive 
optimization techniques needed keep cost reasonably acceptable knowing phase iterated times time avoiding pertinent matching records comparisons 
second humans expensive resource important automate possible user interferes cleaning process give user maximal amount information founded decisions taken eliminate erroneous matching records 
typically wants minimize amount data needs inspected manually 
third due iterative nature cleaning process essential able easily modify speci cation implementation cleaning process 
note rst points merely re ect tradeo exists quality eciency 
existing solutions data cleaning rst obvious solution write dedicated application program program implements data cleaning process extracting source data databases storing les 
program call external procedures compare record elds matching phase 
solution appropriate reasons 
solution exible support iterative process data cleaning explained earlier modifying parts process mean rewriting large amounts code 
second solution take advantage data processing capabilities ered current database systems implement costly data intensive operations joins matching phase 
optimizations left programmer hand wired code 
squirrel system provides automatic way generate integration mediators declarative speci cation language called isl 
isl possible specify rich variety matching criteria produce matching records input tables 
semantics enforced system limited record table match exactly record table 
record matching second record con ict raised user called resolve 
suitable performance reasons user take decisions locally having global view possible con icts 
related proposes formalism annotated non recursive datalog specifying interschema correspondences conversion matching reconciliation relational tables integrate 
correspondence speci ed set conditions applicable program implements correspondence 
squirrel tuple table match records table 
means provided support analysis matching records second step example generation materialized view 
may sacri ce quality cleaning process user may inspect matching records shortcut matching records kept consequently errors introduced view 
whirl system provides powerful way generate approximate matching records sql queries enhanced special join operator uses similarity comparison function vectorspace model commonly adopted statistical information retrieval 
matching records sorted similarity value 
targeted integrate data coming di erent web sites whirl provide means support subsequent phases required data cleaning process second third steps example 
furthermore proposed solution duplicates exist source tables 
process nature interactive decisions left vector space metrics 
method called multi pass neighborhood method proposed detect maximum number exact approximate duplicate records due errors lack eld standardization smallest amount time 
method consists repeating steps having concatenated records cleaned single le choose key consisting attributes substrings attributes record sort records accordingly compare records close xed usually small sized window 
criteria comparing records order nd duplicated ones de ned set matching rules encoded proprietary programming language instance 
execution previous steps time di erent key produces set pairs matching records 
nal transitive closure applied pairs records yielding union pairs generated independent executions plus pairs inferred transitivity equality 
main drawback method knowledge time intensive task implies passes data nding suitable key putting similar records may quite hard impossible 
eld values compared matching criteria client names european addresses may written slightly di erent similar ways distinct records put close sorting key 
extreme case records eventually neighbors passes execution di erent keys guaranteed happen reasonable period time 
drawback support cleaning rules ered commercial data cleaning tools allow matching rules applied pairs neighbor records le 
distinction sources done records concatenated single le compared schema individual source tuples supposed 
relevant related done 
yat systems commercial tools oracle sql loader utility propose solutions data conversion 
prototype described proposes name address aims solving object identity problem speci domain 
system ers set reusable extensible primitives deal schema evolution transform data accordingly consider mentioned data problems 
done focusing data 
nally description commercial tools data cleaning 
proposed solution propose new framework data cleaning application modeled directed acyclic ow transformations applied source data 
framework consists free open system platform ers main services 
data transformation service ered perform data schema conversion standardization attribute values 
multi table matching service called approximate join enables produce single uni ed table set input tables solving object identity problem 
service consists sequence matching merging phases 
duplicate elimination service enables remove exact approximate duplicates single data source sequence matching clustering merging phases 
notable feature framework user explicitly involved multi table matching duplicate elimination services eliminating errors inconsistencies matching records merging matching records 
second available informix data blade 
feature extensibility framework crucial requirement framework cover possible data cleaning applications 
service supported shared services specify behavior service application duplicates eliminated 
framework customized needs particular cleaning application ways proposed macro operators invoke external domain speci functions normalization matching instance added pre de ned library functions ii operators combined sql statements order obtain complex data cleaning programs iii set algorithms proposed certain operators clustering decision extended needed 
addition proposition open extensible framework technical contributions 
sql command language propose expressing macro operators expressive exible 
particular language expressive whirl sql language sense duplicates allowed sources richer similarity functions operators expressed support merging matching records 
semantics macro operator matching expressive windowing approach 
matching operator record compared record cartesian product algorithm 
result set matching records produced windowing approach computable operator reverse true 
exibility language achieved macro operators inherited sql avor language case special operators ered commercial tools integrity 
property guarantees easy deployment maintenance data cleaning programs 

provide techniques execution macro operators ecient 
execution operators partially supported regular sql query engine external home grown execution engine 
dual architecture enables exploit computing capabilities ered relational database systems particular optimization techniques tailored speci cities operators support similarity functions 
second optimization techniques render cartesian product semantics matching macro operator feasible large amounts data 
address issues involved data cleaning 
instance provide mechanism help user discovering integration cleaning criteria appropriate certain application 
relies mainly knowledge experience accumulated experts working application domain dealing daily anomalies data 
cover algorithms incremental maintenance materialized views data sources updated 
apart organized follows 
section presents general framework describe macro operators 
section describes novel optimizations techniques motivate design means examples 
experimental results demonstrate value approach fourth section 
section concludes 
framework section rst give overview data cleaning process enabled framework functional decomposition services 
describe semantics syntax macro operators support services 
macro operator implemented physical operator 
physical operators known map supporting mapping macro operator 
describe metadata required document data cleaning integration process back tracing possible 
overview framework services framework data cleaning process accepts input set possibly erroneous inconsistent base tables returns consistent error free set tables composing integrated view 
basic assumption tuples single table uniquely identi ed key attribute 
furthermore consider integrated view join table table models relationship resulting view tuple match tuple symmetrically tuple match tuple complete transformation input data output view decomposed sequence steps corresponds service provided framework 
describing detail framework emphasize purpose cover frequent requirements data cleaning integration applications 
believe able encompass large family applications due extensibility 
successively describe services provided framework 

data transformation service applies external functions transform values certain attributes purpose simpli cation standardization convert data schema comparison possible 
service supported mapping macro operator takes tables input produces tables output 

multi table matching approximate join service performs di erent tasks set input tables 
rst task produce set matching records 
task supported matching macro operator performs generalized join operation input tables 
case tables associates similarity value pair tuples cartesian product tables 
follows task analyzes matching records nds valid matches 
task supported decision macro operator 
task generate error free table unique records 
supported mapping macro operator data transformation service 

duplicate elimination service performs distinct tasks input table 
rst supported matching macro operator applied input table aims nding exact approximate duplicate records 
task group matching records clusters potentially similar objects 
task supported clustering macro operator takes input table produces output set clusters 
third task performed decision operator di erent algorithm analyzes clusters nds unique records 
nally mapping operator applied order construct integrated cleaned tuples 
shows services macro operators support left side 
right side gure depicts successive phases partial cleaning process telecom example highlights macro operators phase 
note noted automatic decision noted human decision meaning user interactively involved operation 
mapping stands construction mapping corresponds instantiation mapping operator constructing integrated tuples 
source tables gsm client home client relational format elds appropriately normalized transformation process 
duplicate elimination step applied gsm client home client approximate duplicate records 
nally multi table matching step applied result steps 
macro operators section syntax semantics macro operators provided framework 
operator corresponds sql command 
presentation illustrative tasks constitutes services introduced show supported macro operator 
able treat relationships requires non trivial extension algorithm concentrate attention important case 
mapping mapping mapping mapping mapping mapping matching mm clean gsm client clean home client matching decision clustering duplicate multi table transformation elimination de matching mm services macro operators gsm client home client client matching clustering decision matching clustering de decision decision de framework data cleaning process telecom example data mapping example command requesting data transformation create mapping mp select street number pob city gsm phone gsm client lowercase name street number pob city address job null return job return unknown string mp follows keywords create mapping indicates name output table 
convention extends macro operators 
example client names gsm client table converted lower case address elds decomposed elds street number post oce box city null values job eld replaced string unknown 
speci cation data transformations applied tuple gsm client table done clause 
clause consists sequence variable declarations form name variable declarations de ne expressions compute value corresponding variables evaluated element cartesian product tables clause 
expressions include calls external functions user prede ned system platform 
construction enables express complex expressions shown example 
expressions refer variable de ned clause attributes input tables 
select clause project value attribute relation appearing clause variable speci ed clause 
generally mapping operator create multiple tables set operand tables 
case multiple select clauses speci ed explicitly states output tables additional speci cation 
imagine want produce tables output previous mapping normalized gsm clients called norm gsm client second jobs stores correspondences existing jobs client identi ers 
tables created 
case mp represent anymore output table output explicitly speci ed clauses 
represented create mapping mp select street number pob city gsm phone norm gsm client select jobs gsm client lowercase name street number pob city address job null return job return unknown data matching matching operator speci ed means speci match command example 
create match gsm client home client sim name name sim address address similarity sim sim return min sim sim sim return sim sim return sim return phone nb threshold similarity set input relations speci ed clause match command produces result relation schema includes key attribute input relation extra attribute named similarity domain real number 
example projected keys automatically named key key corresponding respectively 
important point note matching operator computation similarity variable clause mandatory 
example similarity calculated complex formula value variable sim stores similarity client names value variable sim stores similarity corresponding addresses 
functions purpose external functions compute closeness names addresses respectively 
class functions commonly comparing strings edit distance functions 
compute return distance strings 
consider relationship similarity edit distance similarity distance arbitrary constant de ned convenience 
simple example hamming distance function aligns input strings returns number characters di erent 
complex edit distance functions smith waterman algorithm ukkonen algorithm 
functions written programming language included framework pre de ned library functions added user 
threshold clause speci es optional acceptance matching similarity threshold value 
presence clause tuples cartesian product similarity value threshold value discarded result 
semantics threshold clause similar sql clause imposes condition value internal variable input table attribute value 
simple example matching operator nding duplicates table gsm client create match gsm client gsm client similarity name name threshold similarity stands similarity function general clause avoids match record 
summarize semantics matching operator cartesian product external function calls 
tables involved cartesian product ones speci ed clause external functions called clause 
data clustering duplicate elimination clustering phase needed removing duplicates 
case approximate joins validation matching information performed directly result matching phase 
order perform duplicate elimination tuples considered similar matching phase grouped sets may represent unique object real world 
clustering command enables call clustering algorithms transitive closure diameter provided framework function library supplied user 
transitive closure similarity value threshold value speci ed matching operator induces symmetric relationship tuples input table 
transitive closure relationship fragments table content disjoint partitions 
partition give birth cluster clusters produced manner treated automatically human 
diameter clustering diameter return sets tuples satisfy conditions pair tuples similarity value threshold speci ed matching operator maximal set property 
immediately observed clustering diameter fragment set tuples disjoint partitions 
produce potentially overlapping sets tuples high degree connectivity 
kind clustering targeted human consumption 
cases constructed cluster unique key generated 
result operation binary table associates tuples input table clusters 
command specify clustering diameter create cluster diameter name function implementing clustering algorithm invoked speci ed clause clustering transitive closure required keyword followed name 
cases global cluster similarity value identi ed keyword may associated constructed cluster representing global similarity cluster computed similarities members aggregate function min max avg combination aggregate functions 
introducing cluster similarity modify follows create cluster diameter min similarity threshold clause speci es value cluster similarity minimum similarities members cluster 
returned tuple contains additional eld cluster similarity 
case presence threshold clause indicates additional ltering performed clusters global similarity included result 
semantics threshold clause analogous sql having clause 
data decision data decision judges correctness matching information produced matching phase 
algorithms operation vary type application duplicate elimination approximate joins written user may chosen ones provided framework library functions 
duplicate elimination approximate join decision done ways automatically manually semi automatically 
decision duplicate elimination automatic decision duplicate tuples taken clustering phase transitive closure clustering diameter induce disjoint partitioning set tuples relation 
case framework library cluster cohesion algorithm declares matching tuples belong cluster duplicates 
semi automatic decision duplicate tuples performs previous case additional threshold limit distinguishes clusters automatically detected sets duplicates cluster cohesion 
clusters global similarity threshold analyzed manually decision taken appropriately 
previous case semi automatic decision possible clustering method applied previously transitive closure 
order able apply threshold lter global similarity cluster de ned decisional mode expressed language create decision threshold manual decision duplicate tuples applied clustering phase transitive closure diameter 
case human inspect cluster extract believes unique tuples 
clustering phase necessary order minimize user ort guarantee decisions taken maximal knowledge potential duplicates 
decision multi table matching automatic decision nal pairs matching tuples may taken follows 
result match phase computes set potentially matching tuples similarity automatic decision phase chooses matching pairs matching pair form similarity similarity similarity similarity 
call pair best match 
semantics implemented best match rst algorithm provided default framework 
list matching pairs tuples sorted descending order similarity value 
iterate list 
current pair 
declare automatically tuples join 
remove rest list pairs referring declared match refer step 
algorithm decision purge 
exceptional situations algorithm user may want called 
rst arises pairs matching records equal similarity call ties 
second case highlighted example sim sim sim sim sim sim situations decision purge performed described 
tuples shown user decision purging executed 
best match rst algorithm syntax decision operation create decision recall global similarities values optional clusters 
algorithm valid assume matches 
extensions section clause stands name function implementing algorithm 
user wants provide automatic decision algorithm replaces name new function invoked 
semi automatic decision follows similar approach main di erence decision done automatically similarity considered pair matching tuples certain speci ed threshold decision threshold soon similarity value falls threshold pairs matching tuples wait manual validation 
translated simple modi cation step 
best match rst algorithm automatic decision replaced request user validation similarity inferior decision threshold 
cases pair matched tuples declared valid decision purge performed 
decisional mode expressed language create decision threshold similarity manual decision simple version semi automatic case potentially matching tuples validated human interaction 
decision purge needed positive decision 
previous decision operation transformed create decision notice threshold value refers slightly di erent notions decision phase depending talking duplicate elimination approximate join 
rst case threshold value refers global similarity value cluster helps distinguishing clusters treated automatically clusters analyzed user second case refers simple similarity value helps distinguishing pairs matching tuples probability treated automatically pairs analyzed user 
previous discussion talking approximate join tables result decision phase contain tuples decided match 
data integration process example case data consolidation interested outer join semantics interested keeping integrated view pairs tuples match tuples match tuple relation 
semantics easily obtained applying projection followed di erence union decision real matches taken 
expressible native sql ignore process 
data clustering decision fundamental bricks framework introduce notion human interaction deciding tuples automatically chosen 
summarize possible ways combine operations algorithms previously described 
pointed case duplicate removal automatic decision cluster cohesion follows clustering operation transitive closure 
clustering diameter performed display purposes followed manual decision 
underlying re organization intends help user deciding 
decision best match rst applied approximate joins performed directly matching results 
construction mapping approximate join operation construction operation needs speci ed order automatically build tuples materialized tables constitute target integrated view 
assured mapping operation constructs automatically client tuples matching tuple obtained result decision create mapping mp select key name address key gsm nb key phone nb job client key key key sim key name key name sim key street key street similarity min sim sim name sim return key name street sim return key street number rst key number key number pob rst key pob key pob city rst key city key city address concat number street pob city job concat key job key job threshold similarity attributes accessed implicit scan base tables keys 
example expression key name represents access attribute name gsm client table 
correlation attribute key original relation gsm client obtained metadata information stored entire process data transformation 
key attributes generated unique identi er generation function value name eld obtained gsm client database address concatenated partial available information street number pob city job obtained concatenation corresponding base elds 
function concatenates address components able deal null arguments number pob 
external rst function returns rst argument non null value 
note construction operation meant applied approximate join operation operation duplicate removal 
construction result case done manually current status framework 
fact unreasonable choose automatically values attributes tuple meant represent entire cluster duplicates resulting duplicate free view 
way distinguish tuples cluster way construction done choosing random values procedure sense 
contrary absolute sense construct automatically tuples integrated view approximate join 
di erence case tuples di erent sources di erent levels trustworthiness merged order produce unique resulting tuple 
case approximate join possible request human interaction extreme cases level inconsistencies certain elds high 
previous phases degree consistency tuples merged calculated clause 
user interaction requested level certain threshold 
example construction operator speci es similarity names addresses client databases user called choose name address values 
metadata requirements important requirements data cleaning application possibility explaining data transformation process 
published shows fundamental role played metadata describe multiple integration orts 
metadata describes attributes changes undergo integration 
explains metadata applied relational model takes form meta attributes attached relations stored metadata repository may called dictionary 
big advantages additional information incremental support integration process possibility information reuse exploiting common metadata possibility tracing integration process 
data conversions transformed attributes enhanced meta attributes describe meaning representation units speci cation data format 
general metadata information phase cleaning integration process encloses source target schema description library transformation functions applied example normalization functions mapping operations similarity functions matching 
support traceability process need store metadata 
may include date information produced person producing attribute value documented identi cation operation produced 
standard attribute value pairs may produced cleaning integration need stored metadata 
optimization techniques data quality reasons framework cartesian product matching operator involves comparison tuples source tables 
believe way guarantee potential errors matches captured doing performance penalty incurred cartesian product semantics enhanced external function calls evaluated dbms engines nested loop join algorithm external function calls 
matching expensive operation framework considerable amount data involved account iterative behavior required data cleaning process 
optimization matching operator main focus techniques shortly described detail sub sections 
mixed evaluation part match operation executed inside rdbms part executed outside rdbms 
example cartesian products calling external functions executed completely outside functions manipulate data les current relational databases perform operation slowly 
implies need dumping operations create les tuples loading create tables les 
operation re ordering early evaluation selective operations traditionally reduce tuple cardinality 
context early selection reduce number tuples handled matching 
able lower cost underlying nested loop join external function calls 
neighborhood hash join nested loop evaluation converted ecient hash algorithm 
case additional knowledge semantics similarity function provided metadata attached function signature 
example edit distance strings length length strings di er length need compared maximum acceptable distance 
means hash overlapping distance lengths compare certain length groups 
decision push similarity threshold value speci ed decision phase may moved order speed matching operation 
cases eliminates need doing certain computations 
example ukkonen algorithm edit distance returns distance nity di erence lengths input strings larger parameter algorithm corresponds maximum acceptable distance 
cost algorithm proportional kn length strings 
information reduce value reduce cost expensive edit operation 
short circuited computation way eliminate external function calls altogether noticing going done results computations 
example goal computation determine triple pair wise similar threshold ths triple rejected reach threshold 
eliminates need compare analogously levy mumick presents framework reasoning aggregation constraints infer predicates pushed aggregation 
assumption correct matching construction criteria 
scan scan dump dump project name project name dbms read read load key key similarity write gsm client home client similarity name name dbms project name street dump sim name name sim street street load key key similarity dbms dbms gsm client scan home client similarity min sim sim dump project name street scan left mixed evaluation right partial evaluation similarity functions cached computation helpful avoid unnecessary calls external functions expensive 
example external function deterministic calls function having arguments yield result 
cache arguments results external function call 
preparing call function rst check computed answer 
parallel computation parallelization technique hash joins parallelize execution matching operator neighborhood hash join execution optimization described applied 
edit function permit hash joins parallelism help obvious technique partitioning source tables replicating tables sites 
results obtained merged produce nal matching result 
describe optimizations section unique problem partly novel 
optimizations neighborhood hash join decision push exploit particular characteristics similarity functions 
mixed evaluation optimization approach takes advantage optimizations supported underlying sql execution engine 
dbmss perform badly presence nested loop join external function calls 
example executing entire matching operation inside dbms prohibitively expensive cost calling external function sql statement performs cartesian product high oracle calling external functions implies call pl sql function calls function 
part execution done inside dbms 
nested loop join external function calls completely executed outside dbms programs handle data les 
left side gure represents possible query execution plan implementing matching operation gsm client home client tables 
neighborhood hash join distance metric measure similarity 
lower distance greater similarity 
strings distance greater certain threshold case additional knowledge distance metric provided nested loop evaluation replaced special form approximate hash join called neighborhood hash join 
illustrate magnitude response times obtained oracle version takes seconds execute simple external function compares strings 
test done sun ultrasparc mhz physical memory virtual memory running sunos release 
dbmss may better behavior believe overhead calling external functions remains bottleneck 
input maximum acceptable distance smaller sets strings number bytes larger sets fits memory partition memory set length strings compare element element partitions length length partition length strings partition length strings smallest length largest length read partitions containing strings length memory compare element length element partitions generalized neighborhood hash join algorithm suppose distance function obeys property exists function pair inequality holds distance example may length input sets strings hashed result application function 
case bucket consists strings neighborhood hash strings bucket need compared buckets 
length edit distance neighborhood hashing entails bucketing input strings length 
suppose application interested edit distance threshold 
strings length may potentially match strings length 
similarly strings length may potentially match strings length 
example function property holds edit distance function returns number occurrences particular character string 
neighborhood hash join algorithm gure 
big input les strings handled partitions compared loaded memory 
note second loop input output partition may partitions note standard hash join table table replace nested loop evaluation classical situations clause explicitly includes predicate form attribute attribute 
claim data cleaning applications kind predicate appears frequently correspond intuitive heuristics comparing strings 
example lter predicate comparing rst letter strings frequently practice justi ed fact data entry errors rst letter quite uncommon 
decision push semi automatic decision best match rst follows matching operation corresponding decision threshold may pushed matching 
optimization pairwise best match rst algorithm takes place follows 
account relationship similarity distance previously section suppose table sources tuples tuple tuple respectively 
function compares tuples unc tuple tuple returns edit distance string elds tuple tuple 
assume time compute monotonically increasing min ukkonen algorithm 
suppose maximum distance acceptance matching corresponds matching similarity threshold maximum allowed distance decision corresponds decision similarity threshold 
assume 
algorithm gure describes way evaluate decision phase concurrently match phase total time phases minimized 
explain precisely require de nitions correspond matching tuple tuple components identi ed 
str correspond eld str jth component tuple matching tuple de ne edge pairs matching tuples stands identi er jth tuple component matching tuple said match neighbors 
matching tuples said tied edge distances equal tied unc str str unc str str matching tuple tied pair called tie 
equivalence class ties transitive closure ties formally represented tie tie decided matching tuple represents valid match tuple components matching tuples said married 
allowed marriages said marriages marriages group marriages 
allowing marriages 
appropriate input database duplicates 
algorithm steps 
rst step calculate sets intuitive meaning set contains matching tuples distance lead marriage set consists matching tuples neighbors elements married set accept matching tuples analyzed user distance decision match thresholds neighbors 
sets may change course executing step 
tasks constitute step 
ties tuples shown user 
tuples married automatically 

marriage matching tuple tuples removed ft 
removed accept ft 
user may optionally shown result deletion operation validate 

tuple may moved 
occur neighbors higher scores deleted neighbor married 
notice nding neighbors done eciently hash indexes similarly component tuple matching tuple id 
data structure enables discover neighbors expected constant time 
sake exposition distance component tuples comparison single eld str 
general case involve comparison eld 
input output marriages step fg accept fg find occurrences edge ft dist fg min dist calculate distance new constraint satisfies unc str str add add unc str str add add accept step sort accept increasing distance distance cluster tuples belong equivalence class eqt ies iterate list dist current matching record declared married optionally show user validation purge accept tuples purged tuple iterate accept list dist current matching record user analyses dist user remove accept matching records st fg unc str str add add accept re sort accept increasing distance optimization best match rst algorithm pushing decision threshold algorithm extended user wants called analyze sets matching tuples edge similarities fall certain neighborhood interval 
case ties extended tuples obeying dist dist 
addition test line algorithm replaced neighborhood add 
example example tables gsm client home client 
matching operation involves comparison names tables 
acceptance distance decision distance 
assume input match phase constituted tuples just mentioning key name attributes gsm client smith mitch home client smith smith jr mitch jr executing step algorithm results pair empty 
smith evaluated acceptance distance returns actual distance don care 
pair discarded 
ii pair empty 
smith smith equal decision distance 
tuple inserted 
iii pair tuple belongs empty equals 
edit distance maximum decision distance computed smith smith jr 
returns distance equal 
equal tuple inserted 
iv pair tuple belongs check edit distance decision distance 
compute smith mitch jr returns real distance don calculate 
equals tuple put 
pair tuple tuple belong table compute distance function mitch 
distance returned greater decision distance equals acceptance distance 
tuple inserted accept table 
vi pair tuple belongs table 
compute distance function mitch smith 
distance returned equals 
tuple inserted table 
vii pair tuple belongs table equals 
compute distance function mitch smith jr 
returns superior 
added 
viii pair tuple belongs 

compute distance function mitch mitch jr initial decision distance 
returns superior tuple put 
table summarizes distances obtained table accept belong step algorithm gsm client home client distance table accept step algorithm executed 
table ordered increasing distance follows 
matching record married 
result record purged table table checked 
tuple brought back exists edge married tuple 
tuple declared best match record purged table accept 

tuples shown user 
main bene optimization decreases distance threshold distance calculations 
result edit distance function expensive cases 
approximate analysis presents brief study computation times involved decision push optimization 
approximate analysis decision push optimization additional notation size string elds compared making pessimistic assumption length number tuples put 
step computation saved rst step decision push optimization 


may saving save time tuples put neighbors ii may possible invoke edit distance function maximum allowed distance parameter step worst case matching tuples brought back distance re computed 
case extra time consumed 


overhead optimization comparing 



point bad scenario decision push optimization 
suppose matching tuple married 
table contains matching tuples take possible values take possible values neighbors ones purged married 
consequence matching tuples values brought back edit distance function re invoked 
happen realistic situation expect matches neighbors 
purging ect large number tuples tuples seldom brought back 
group marriages matching tuples algorithm applies marriages tuple rst table married tuple second table 
modi cations introduced semantics allowed best match rst decision means tuple table match tuple inverse happen 
reconsidering example telecom match semantics corresponds situation home client may cellular phones cellular phone number corresponds single home phone number 
case edge tuples restrictive call edge 
formal de nition pe identi es table tuples marry component tuple women society men society 
de nitions remain edge replaced edge 
input output marriages step fg accept fg find occurrences edge ft dist pe fg min dist calculate distance new constraint satisfies unc str str add unc str str add add accept step sort accept increasing distance distance cluster tuples belong equivalence class ies iterate list dist current matching record declared married optionally show user validation purge accept tuples pe iterate accept list dist current matching record user analyses dist user remove accept matching records pe optimization best match rst algorithm pushing decision threshold marriages need set need accept table 
purging phase step changes modi ed algorithm decision push optimization shown gure 
note ties possible equivalence classes ties de ned edges 
group marriages may arise tuple tables allowed marry multiple tuples table 
instance internet client may marry cellular phone records vice versa 
algorithm case take account existence ties equally strong marriage accepted 
need able take advantage decreasing decision thresholds computing expensive edit distance functions 
consequently optimization 
algorithm works represented gure 
short circuited computation compilers short circuiting evaluation boolean expression outcome known 
example boolean consists conjunctive expression soon conjunct discovered false evaluation halted 
optimizations described closely related 
input output group marriages step fg accept fg unc str str add add accept step sort accept increasing distance iterate dist current matching record declared married iterate accept list dist current matching record user analyses dist best match rst algorithm pushing decision threshold group marriages short circuiting multi way similarity consider example matching operator match gsm client home client sim name name sim street street similarity min sim sim threshold similarity similarity threshold considered computing sim sim variables assigned value smaller eliminate corresponding tuple 
tuples belong matches returned satisfy condition minimum allowed similarity 
execution plan represented right gure 
pairs tuples gsm client home client satisfy condition sim sim give rise matches 
optimization fact bypass partial similarity function calls assigns value sim sim returns value 
general total similarity matching obtained applying min max computing product partial similarities appearance threshold pushed computation partial similarities avoiding 
short circuiting clustering threshold similar observation works clustering 
assume matching operator followed clustering diameter 
match gsm client gsm client sim name name sim street street similarity min sim sim threshold similarity clustering min similarity diameter threshold clustering option diameter cluster threshold similarity require matching tuples resulting similarity value greater order clustered 
assuming similarity functions applied tuples edit distance triangle inequality guarantees matching tuples pairwise distance consider relationship similarity distance de ned 
performing corresponding substitutions inequality veri ed sim sim sim 
applying result sequence operations suppose matching tuples returned similarity similarity 
similarity similarity superior similarity tuple guaranteed superior 
tuples identi ed need compared put cluster 
experimental results section presents results set experiments goal evaluate optimization techniques proposed section 
experiments databases created validation whirl system 
consists tables containing information existing companies name url industry 
operation tried optimize approximate join tables followed decision operation best match rst 
similarity tuples computed edit distance function implemented smith waterman ukkonen algorithms 
order obtain large volume data replicated original database certain number times 
randomized error introduced handled eld order avoid exact duplicates 
tested evaluation strategies scale factors tuples table 
size resulting les respectively overhead calling external function oracle extremely high consider evaluation match operator dbms interesting alternative 
ignored dbms experiments manipulated les programs 
experiment measured execution time program account time dumping oracle database les loading data les tables reading data le time writing results le 
experiments done intel pentium ii mhz mbytes running linux redhat 
oracle version 
optimization target evaluation match decision tables speci ed language sequence operators match similarity threshold similarity decision threshold similarity time dump tuples composed key field oracle les min 
time spent loading le back oracle min 
nb 
tuples table nested loop neighborhood hash join nb 
tuples source table execution time sec nested loop neighborhood hash join nested loop vs neighborhood hash join left right naive way evaluating sequence perform nested loop compute tuple cartesian product similarity value execute decision phase iterating result match deciding correct matches 
said earlier list possible optimizations apply order improve performance naive evaluation 
observe dimensions associated execution sequence rst method nd matching records second execute matching decision phases separately merge 
rst dimension choice nested loop evaluation neighborhood hash join explained section 
second dimension choice executing decision entire matching phase nished naive best match rst de ned semantics merge decision phase matching phase decision push described section 
varying possibilities dimensions obtain evaluation strategies nested loop nl nested loop decision push nl dpd neighborhood hash join neighborhood hash join decision push dpd 
execution times strategies gure logarithmic scale axis names hashed length neighborhood hash join algorithm 
expected matching performance improved hash join applied 
note gain match threshold greater gain match threshold average 
due fact number partitions compared smaller 
shows results obtained strategies considered 
measured execution time step decision push optimization marriage semantics 
previous case gain obtained hashing applied signi cant 
improvement achieved application decision push optimization signi cant tuples match threshold decision threshold 
reason 
optimization advantageous table see description algorithm lled early process 
implies distance pairs strings evaluated expensive edit distance function 
particular case number tuples large raise situation 
considering tuples thresholds gains obtained 
gain obtained optimization depends largely data threshold values 
shows dimensions match threshold decision threshold 
number tuples gain obtained decision push optimization case 
expected decision threshold permit execution algorithm take advantage nb tuples table execution time sec nl nl dpd dpd nb tuples table execution time sec nl nl dpd dpd naive best match versus decision push left tuples right tuples nb tuples table nl nl dpd dpd naive best match versus decision push calling expensive edit distance function 
additional improvement decision push optimization obtained neighborhood hash join 
achieved comparing partitions speci order 
buckets correspond strings equal length compared di erence lengths equal forth 
way probability nding rst matches similar higher 
net result table lled early possible 
furthermore match distance equal di erence lengths current partitions need continue comparing buckets di erence lengths greater gains obtained comparing neighborhood hash join decision optimization match threshold decision threshold 
second set experiments done real data 
inria suppliers database particular table supplier organizations contains approximate exact duplicates 
total number tuples 
goal apply matching operator table order nd pairs duplicates 
measured execution time quality results obtained evaluation matching operator hashing rst letter organization names described ii nested loop algorithm 
matching operation predicate specifying rst letter lter described follows match organizations organizations similarity threshold similarity lter organization names hashed rst letter partitions correspond rst letter compared edit distance function 
time execution obtained sec case 
naive nested loop evaluation times longer sec 
percentage matches lost rst letter lter evaluation 
success application kind lter depends course domain application 
fact matches naive approach lost lter false matches correspond object 
going addressed problem data cleaning entails major problems object identity problem data entry errors data inconsistencies overlapping autonomous databases 
proposed new framework consists open extensible system platform data cleaning application speci ed directed acyclic graph data transformation phases 
phase speci ed means data cleaning services ered system platform data transformation duplicate elimination multi table matching 
service supported shared kernel consisting high level sql commands 
system platform open sense new macro operators de ned added kernel new services added set macro operators 
language composed macro operators features 
expressive previously proposed languages multi table matching duplicate elimination 
particular cartesian product semantics matching macro operator contributes signi cantly expressiveness language guaranteeing potential errors correct matches captured 
second enables specify steps required data cleaning process high level manner 
instance telecom example coded lines code language annex 
experienced fact larger applications removing duplicates list inria suppliers removing duplicates biological bibliography institute consolidation bibtex le dblp database 
language extensible external functions coded conventional programming languages 
extension sql proposed existing language sql psm proposed database federation system 
allows compact speci cation cleaning process 
showed syntax macro operator encloses main functionalities constructs expressing decision trees threshold clause imposing conditions values internal variables 
second obtained uniform speci cation operators introduced new ones decision clustering 
lastly language primitives permit application optimization techniques pushing thresholds 
proposed novel optimization techniques eciently execute matching operations 
rst technique execute macro operators relational database system speci cally tailored execution engine 
second technique exploit semantic knowledge similarity functions combined hash join algorithms dramatically reduce number records compared approximate joins 
push decision operations matching operations avoid unnecessary accesses matching records 
experiments conducted test database varying size showed optimization techniques bring substantial performance improvement database gets large 
progress encloses study classical edit distance functions order come properties optimization purposes 
doing research signature functions grams algorithms 
detailed study metadata stored process cleaning done account notion propagation rules 
approach intensively experimented real data needs cleaned 
bernstein 
meta data support data transformations microsoft repository 
ieee data engineering bulletin march 
fisher rogers 
hancock language describing signatures 
usenix 
bouzeghoub fabret galhardas pereira simon 
fundamentals data warehousing chapter data warehouse refreshment 
springer verlag 
calvanese de giacomo lenzerini nardi rosati 
principled approach data integration reconciliation data warehousing 
submitted publication 
claypool rundensteiner 
flexible database transformations approach 
ieee data engineering bulletin march 
cluet delobel sim eon 
mediators need data conversion 
proc 
acm sigmod conf 
data management 
cohen 
integration heterogeneous databases common domains queries textual similarity 
proc 
acm sigmod conf 
data management 
cohen 
practical observations integration web information 
webdb workshop conj 
acm sigmod 
dayal 
processing queries generalization hierarchies multidatabase system 
proc 
int 
conf 
large databases 
edd 
home page data tool 
www com edd 
hellerstein 
optimization techniques queries expensive methods 
acm trans 
database systems 
hellerstein stonebraker 
independent open enterprise data integration 
ieee data engineering bulletin march 
hernandez stolfo 
merge purge problem large databases 
proc 
acm sigmod conf 
data management 
hernandez stolfo 
real world data dirty data cleansing merge purge problem 
journal data mining knowledge discovery 
hinneburg keim 
tutorial cluster discovery methods large bases 
proc 
acm sigmod conf 
data management 

identifying merging related bibliographic records 
master thesis massachusetts institute technology june 
international 
home page eti data 
www com 
iso 
database language sql part persistent stored modules sql psm 
www com edd 
kelley 
general topology 
van nostrand princeton new jersey 
kukich 
techniques automatically correcting words text 
acm computing surveys 
levy mumick 
reasoning aggregation constraints 
proc 
int 
conf 
ext 
database technology 
milo zohar 
schema matching simplify heterogeneous data translation 
proc 
int 
conf 
large databases new york 
monge elkan 
ecient domain independent algorithm detecting approximately duplicate database records 
workshop research issues data mining knowledge discovery conj 
acm sigmod 
oracle 
oracle server utilities manual 
papakonstantinou garcia molina ullman 
mediation system declarative speci cations 
icde 
qualitative marketing software 
home page merge purge tool 
www com 
rosenthal 
metadata propagation large multi tier database systems 
submitted publication 
rosenthal seligman 
data integration large challenge reuse 
proc 
int 
conf 
large databases santiago chile 
ramakrishnan swift 
rule data enterprise data bases 
int 
conf 
practical applications prolog 
siegel rosenthal 
semantic values facilitate interoperability heterogeneous information systems 
acm trans 
database systems 
seligman rosenthal 
metadata resource promote data integration 
proc 
ieee metadata conference silver spring md 
shasha 
wang 
new techniques best match retrieval 
acm transactions information systems volume 
apr 
smith waterman 
identi cation common molecular subsequences 
journal molecular theory 
ukkonen 
finding approximate pattern strings 
algorithms 

home page integrity tool 
www com html prod int html 

home page tool 
www com 
zhou hull king 
generating data integration mediators materialization 
journal intelligent information systems 
cleaning integration program telecom example consider motivating example section 
possible set tuples gsm client smith domaine de voluceau bp manager rue vasco da gama informatics domaine de voluceau bp manager rue gama bank employee smith voluceau bp manager hans oliver de mars writer home client smith domaine de voluceau rocquencourt director mitch vasco gama bp ans de mars null internet client john smith domaine de voluceau bp rocquencourt smith rue vasco gama paris mitch smith rocquencourt france null hanna oliver de mars paris null hanna oliver rst step cleaning integrating tables composed data schema mapping operation represented create mapping mp select name street number pob city gsm phone job gsm client lowercase name street number pob city address transformed mp tuples smith domaine de voluceau null bp null manager mitch rue vasco da gama null null informatics domaine de voluceau null bp null manager rue da la fontaine bordeaux null null bank employee smith voluceau null bp null manager hans oliver de mars null null null writer analogous data schema operations home client internet client create mapping mp select name street number pob city home phone job home client lowercase name street number pob city address create mapping mp select name street number pob city username internet client lowercase name street number pob city address step consists removing duplicates gsm client table 
expressed sequence operations matching clustering decision construction follows create match mp mp sim name name sim street street similarity min sim sim threshold similarity 
outputs tuples clustering transitive closure nding duplicates speci ed operation create cluster min similarity threshold returns sets tuples schema key cluster cluster cluster cluster cluster decision applied partitioning operation represented create decision threshold decides automatically duplicates cluster cluster similarity superior 
cluster cluster analyzed hand similarity decision threshold 
user validates valid cohesive cluster duplicates entirely manual construction operation mp speci es user called build clean gsm client tuples 
create mapping mp select name street number pob city gsm nb job clean gsm client set tuples decided user free duplicates keys generated automatically keys base table gsm client smith domaine de voluceau null bp null manager director rue vasco da gama null null bank informatics sql view de ned gather matching tuples gsm client tuple clean gsm client tuples 
de ned create view select gsm client select key union select clean gsm client resulting tuples smith domaine de voluceau null bp null manager director rue vasco da gama null null bank informatics hans oliver de mars writer home client need undergo process duplicate elimination 
consider matching operation result normalized home client table create match mp sim name name sim street street similarity sim sim return min sim sim sim return sim sim return sim return phone nb threshold similarity resulting table schema key key similarity resulting matching tuples duplicate elimination process applied internet client similar applied transforms tuples new tuple follows john smith domaine de voluceau bp rocquencourt france smith resulting table called clean internet client transformed view similar composed initial tuples new 
matching operation speci ed create match mp sim name name sim street street similarity sim sim return min sim sim sim return sim sim return sim return phone nb threshold similarity returns tuples results gathered sql view executes join resulting tables 
outputs triples semantically represent approximate join tables 
create view select key key key key key key min similarity similarity similarity key key resulting tuples decision executed view represented create decision threshold similarity tuples decided automatically best matches 
tuple decided user similarity decision threshold 
construction mapping operation applied decision intends build tuples integrated view table client 
tuples construction similarity threshold manually constructed 
automatically constructed 
construction threshold states names street names suciently similar user called construct hand client tuples 
create mapping mp select key name address username job client key key key sim key name key name key name name sim return key name sim key street key street key street street sim return rst key street key street key street number rst key number key number key number pob rst key pob key pob key pob city rst key city key city key city address concat number street pob city key null return key gsm nb return null key null return key phone nb return null username key null return key username return null job concat key job key job similarity min sim sim threshold similarity resulting client tuples smith domaine de voluceau bp rocquencourt smith manager director mitch rue vasco da gama bp paris mitch informatics hanna hans oliver de mars paris hanna oliver writer 
