pad alternative approach tothe computer interface believe navigation information spaces best supported tapping natural spatial geographic ways thinking 
developing anew computer interface model called pad 
ongoing pad project uses spatial metaphor computer interface design 
provides intuitive base support applications electronic marketplaces information services line collaboration 
pad nite dimensional information users le system shared 
objects organized geographically object occupies de ned region pad surface 
navigation pad uses portals magnifying glasses peer roam di erent parts ofthis single nite shared desktop links speci items established broken continually portal view changes 
portals recursively look portals 
paradigm enables sort peripheral activity generally real physical working environments 
apparent size object determines amount presents 
di erent users share view multiple applications assigning degree interaction 
documents visually nested zoomed move back forth primary secondary working attention 
things peripherally accessible 
describe pad interface 
discuss ciently implement graphical aspects illustrate initial applications 
siggraph copyright ken perlin david fox courant institute sciences new york university broadway th floor new york ny imagine computer screen section wall size typical bulletin board whiteboard 
area surface accessed comfortably leaving chair 
imagine applying extraordinarily hand coordination user read write comfortably micron wide section surface larger section 
allow full surface pixels long high comfortably create move read compare information di erent scales 
scenario feasible quantities information directly user 
example pages text surface reducing su ciently scale making number line information services encyclopedias directly available 
practice arrange surface hierarchically easier nd 
collaborative environment see layout miniature collaborators surfaces glance 
scenario impossible read write microscopic scale 
concept natural mimics way continually manage giving place 
approximation ideal depicted provide sort system magic magnifying glasses read write create cross inde nitely zoomable surface 
describes pad interface principles 
overview section brief summary basic ideas components ofthe pad model 
nish section comparison pad window icon paradigm prior 
sec page tion typical pad application section covers principles pad system 
section covers issues implementation pad section lists ongoing projects 
section presents acknowledgments 
basic pad model pad surface nite dimensional information plane users asa network le system shared 
populated pad objects de ne object entity user interact examples text le viewed edited clock program personal calendar 
pad objects organized geographically object occupies de ned region pad surface 
visible pad objects create types ink graphics portals place pad surface 
graphic simply sort mark bitmap vector 
portals navigation magnifying glasses peer roam di erent parts ofthe pad surface 
portal may highly magni ed view broad panoramic view view easily changed 
screen just special root portal 
portal window represents dedicated link section screen speci thing unix shell windows directory macintosh finder 
portal view single nite shared desktop links speci items established broken continually portal view changes 
windows portals recursively look portals 
large nancial document pad surface 
small portal top ofthe gure shows overview entire report 
portals show successive portions report 
object portal interaction object may look quite di seen di erent portals 
techniques allow objects vary appearance semantic zooming portal lters 
object visible screen cation depends sequence portals seen 
magni cation object changes nds useful see di erent types information object 
example document screen user may want see title 
object magni ed may augmented summary outline 
point entire text revealed 
call semantic zooming 
semantic usingthe expose event says particular portion pad surface rendered particular magni cation 
object receives event generates display items needed cation 
objects manage portal lters portals show non literal views cooperating objects 
example portal may show objects contain tabular data display objects portal 
enable application embed bar chart placing portal lter looks object contains tabular data 
application allow text spreadsheet style tabular user 
edits seen changes bar chart looking atthe document 
ect thatthe bar chart lter portal see tabular data bar chart see objects inthe usual way 
portal lters expose event objects knows render 
asks object objects information needs create display items render 
interesting portal lter control modi er 
imagine example paint program types brush 
normally click image particular brush select 
seen control modi er portal lter brush image appear panel parameter controls user change brush internal state width law 
portal lter modify controls application pad recognizes message conventions 
pad vs window icon paradigm pad universe universe window systems interaction object possesses de nite physical location 
sense dimensional virtual reality 
user changing view allow objects appear larger smaller 
paradigm allows sort peripheral activity real physical working environments 
object user screen commands degree attention commensurate big object appears user 
allows object vary amount detail presents user 
di erent users share view multiple applications assigning degree interaction 
documents page quarterly report 
portals views parts ofthe pad surface 
page visually nested zoomed move back primary secondary 
things peripherally accessible 
example macintosh desktop user double clicks folder icon see contents directory window 
see contents ofany folder folder double click create separate window 
comparison user pad generally views directory portal 
contents visible miniature sub portals 
allows user peripheral awareness subdirectory contents perform explicit action 
sense pad better suited non command 
prior related number researchers developed ways visually structure interactive information er alternative windows icons 
ofthe rst systems spatial data management system mit information landscape screens screen panoramic overview application screen providing closer view 
user pan locally onthe application screen go directly area pointing onthe panoramic view 
hand hypertext systems allow place conceptual information space 
notable problem current state systems di culty knowing location space application designed carefully user easily get lost 
related desktop publishing systems provide tiny thumbnail sketches images stored disk 
le user simply points miniature images specifying le name 
approach providing peripheral information developed george furnas bellcore applied research 
fisheye user interface shows information current interest great detail showing progressively detailed view surrounding information 
ofthe components fast image zooming existed 
williams images texture ltering burt image processing prior tanimoto 
bad windows interface allows drawings accessed multiple levels detail 
dimensional interactive virtual ces allow user change viewpoint developed mackinlay feiner 
changes scale long computer graphics entertainment scienti visualization notable early example molecular simulation nelson max 
large body interesting groups remotely share common drawing surface collaborative part larger ongoing research ort shared media spaces 
similarly rendezvous system bellcore general building shared conversational interfaces teleconferencing situations smith example application multiscale daily monthly semantic zooming 
figures show calendar looks successive magni cations 
level user type draw calendar 
user zooms away scale annotations drawn rst translucent invisible 
way user overlay levels annotation calendar confusion 
major problem type involve large number display items spatial density display items pad grows geometrically user zooms calendar 
fairly small number display items visible user zooms screen occupies smaller absolute area pad 
address problem designing calendar object expandable semantic tree identifying display items di erent nodes tree 
time calendar displayed semantic tree traversed 
node reached display items generated needed 
individual display items ephemeral item screen quietly removed calendar object 
way total number display items remains small 
general notion geographic database expand self prune asthe user roams pad library called ephemeral database manager 
plan apply library pad applications inherently tree structured semantics 
system structure section introduce data types needed implement pad 
describe page approach calendar object large scale display items fade disappear 
calendar object generates smaller scale display items area visible user screen 
display items screen may garbage collected destroyed 
concepts necessary display needed support interaction 
addresses regions address location scale nes linear transformation ta 

represents log scale 
region rectangle de ned address raster width 
region covers portion pad surface ta ta 
display items lowest level entities pad universe display items come basic types graphic portal 
display items entities visible user screen 
graphic consists ofa raster image address display item said region iw ih isthe portion pad surface occupies 
portal graphic additional address called look raster image mask portal look region iw ih pad surface 
portion pad surface user annotations created ink fades greater magni cations 
look covers masked bythe portal graphic visible location portal region 
raster masking enables portal give shaped view pad surface 
portal square round shaped known corporate logo 
refer display item az scale 
general display item visible screen viewed succession portals may transform 
refer display item apparent seen screen magni cation 
image user screen created set display items 
portal associated user screen called root portal display process consists rendering root portal 
means rendering region pad surface root portal looks 
display items root portal look rendered 
procedure applied recursively render display item portal 
display process recurses portal transformation portal address portal look 
recursion expanded compute location display item screen 
suppose item viewed successively nested portals pn 
determine magni cation display screen apply transformation ap lp apn lpn ai page incrementing component display item address increase magni cation 
incrementing component look double size looked region decrease magni cation item seen 
think increasing viewer altitude 
properties primitive display items important note visibility range graphic object range magni cation outside 
important display items useful certain range magni cation 
transparency range similarly graphic range magni cation outside graphic transparent 
allows objects gracefully magni ed 
transparency achieved masking pixel mask screen resolution 
private display items display items may attached case visible viewed portal addresses relative ofthe portal 
creates hierarchy display items implement lters described 
pad objects graphics su ce drawing program 
system building general user interfaces requires higher level structure called pad object interpret events control display items behave asa single application 
pad object consists region package code respond event messages 
object behavior speci ed application developer 
order seen object manages collection display items creating modifying deleting 
pad objects receive events user mouse keyboard plus timer events channel events events representing types input output process expose events inform object portion visible screen 
events normally location address address transformed event passes portal received object 
similarly expose event covers region just rectangle region transformed portals object informed portion region rendered magni cation 
objects maintained order just display items drawing order objects atthe mouse address mouse events sent front 
object may event purposes may pass event objects may transform event address pass part pad 
events passed may go unused objects case original object may event purposes 
display display complicated fact objects may continually creating display items 
create display rst need give object opportunity know magni cation called appear probably uence display items chooses show 
display twophase process 
rst phase object gathers necessary information portions appear screen magni cations 
rst phase display items may spawned 
second phase screen image drawn 
phase portal displayed having pad object controls communicate objects intersect portal look region 
process begins special root object controls user root portal 
portal controlled object procedure follows sends expose event portal region 
event received objects regions intersect portal look region 
object responds tells produce display items proper magni cation clip 
controls portals procedure invoked recursively 
display items receives back attaches portal 
process continues recursively items large see screen accounted 
second phase portal painted accumulated list display items 
process starts continues portals seen root portal recursively portals 
note portals screen overlapping look regions lists may display items common 
page interacting objects semantic zooming implemented object display method depend cation 
object told cation display phase 
portal lters implemented follows 
consider bar chart lter portal described earlier 
suppose portal lter managed object 
phase ofthe portal display procedure sends expose event portal receives number acknowledgments 
suppose just received acknowledgment object 
queries nd object 
gets tabular data builds display items bar chart attaches portal 
asks items usual 
ect lter portal see tabular data bar chart see objects inthe usual way 
implementation details pad system written layers real time display layer written providing layer collection scheme code implementing pad application interface 
currently runs windows ms dos 
windows version compiled sunos aix linux 
source code ofthe released version available anonymous ftp cs nyu edu inthe directory pub local perlin 
rendering display items absolutely essential system arbitrarily scaled bitmaps displayed real time 
algorithm achieve desktop model require special purpose hardware lose real time response 
scenario limit model general usefulness typical currently available graphical workstations 
method render raster image graphic item depends item magni cation 
trial error experiences re ect best results tuning process 
di erent techniques drawing raster image graphic depending onthe range magni cation 
largest magni cations quickest simply draw individual lled squares pixel 

moderate magni cations indexed byte pattern cation bits shift properly position result word 
di erent tables depending onthe depth image 

cation need worry amount shift necessary position result 

images index pre computed pyramid images precomputation done atthe time graphic created creates speed penalty process 
graphic items generally reused screen refreshes penalty usually problem practice 
amount cation bitmap visible need drawn 
techniques yield display time object approximately proportional size entire screen image 
practice tends keep refresh time dependent screen resolution image complexity 
address space limits addresses implemented oating point arithmetic claim nite address space current system 
true unbounded address space achieved extended integer arithmetic 
current form space provided astronomical 
suppose numbers wehave screen 
position object screen uses bits leaving minimum bits precision position look square 
means example lay pages text area 
ongoing shared object space important goal create distributed pad system pad objects exist remote machines migrate machine machine 
pad objects distributed computers problem updating display region screen combined distributed database computational geometry problem 
page subject ongoing research scope 
depth discussions implementation problems refer readers preparata shamos overview computational geometry optimal data structure rendering 
continuous zoom early prototypes discreet zoom levels toachieve high performance 
wehave implemented continuous zoom algorithm midpoint line drawing algorithm allows continuous scaling raster images approximately half speed discreet zooming bitmapped workstations 
algorithm uses table lookups greatly speed calculation 
hierarchical text editor familiar applications hierarchical domain suggest 
multiscale text editor generalization traditional text editor added capabilities text appear di erent sizes recursively inserted text 
screen structure longer dimensional array boxes 
allows direct look feel hypertext footnotes embedded entirety atthe point 
successive user gradually expands contents seen referenced 
text structured hypertext text string may contain embedded links text strings 
structure document arbitrary directed graph 
visually text linked appears location link smaller 
contents ofa hyperlink accessed disruptive sudden change view text 
text zoomable text visibly small appears title 
user zooms expands include 
zooming reveals rst outline short text descriptions nally full text 
options exactly visually place linked text 
text appear miniature beneath lines parent text alternatively superimposed parent text 
option requires zoom dependent 
user zooms text seen hyperlinks fades visually larger text simultaneously fades 
text visible simultaneously number portals 
view maintain certain amount state information 
example needs bea cursor view 
means ifthe mouse particular portal insertion point cursor view 
portals contain ownership attributes restrict access parts document 
text visibility particular portal depends text ownership public shared users private seen user 
public text contain links private text 
general visibility attributes text vary depending text viewed 
nitely scalable painting program wehave luis principles nitely painting program 
organizing nite multiscale canvas straightforward requiring quad tree 
unfortunately simulating application paint brush requires compositing operation blending ofthe underlying image brush image 
operation non commutative easy problems 
example say user zooms way paint scene ata ne scale pulls paint wash coarse scale nally zooms back ne scale details 
system implement 
straightforward approach williams immediately apply coarse scale operations ner level pixels 
computationally prohibitive highly scaled scenes number ne scale pixels ected grows exponentially di erence coarse ne scale 
clearly pyramid kind called 
non commutativity successive operations di erent levels separated traditional laplacian similar multilevel pyramid say strictly additive system 
solution spline wavelets 
break brush image component wavelet basis apply independently level wavelet basis pyramid 
wavelet reconstruction produce correct result 
implemented aone dimensional canvas working dimensional version 
multiple narrative paths pad way store documents hierarchy multiple narrative pathways 
side discussions textbook embedded situ 
allows interesting possibilities 
example novel may written bifurcations allowing reader explore page overview branching tree story 
begins asingle sentence 
branches tree represent story paths asthe reader zooms di erent branches di erent stories unfold 
interleaving stories sort visual alexandria quartet 
example creating user novel literally shaped tree seen gures 
cooperative pad applications withthe onset high bandwidth consumer information services pad provides viable look feel information browsing 
customer zooms information service semantic zoom level information content increases 
zoomed browsing freely available customer successively higher rates speci data 
example title brief synopsis video may accessible low zoom levels 
higher zoom levels play movie 
browsing level customer see geographically arranged clusters lms may related interest lms particular director 
similarly pad map project provide user community access map manhattan annotated information cultural events 
users able add annotations reviews just gra ti 
part pad system annotations scale contain links annotations level zoom branching tree story 
scale narrative contains paragraphs detail 
desirable keep reviews lm portals visible theatre lm 
project explore mechanisms necessary manage user contributions user system 
shared spreadsheet project re casts spreadsheet application hierarchical sharable form 
example hierarchy imposed placing spreadsheet cell spreadsheet particular cell bethe value appears cell magni cation low 
value sharing spreadsheet users comes immediate access latest data elimination need merge copies spreadsheet updated independently eventually display communication technology improves pieces display surface scattered environment common walls desks electronic tm notes 
pad suited distributed environment places oating location information geography 
windows icon menu pointer model suited motivated desire create desktop metaphor single display screen 
page levels zoom branching tree story 
see story ade nite shape possible narrative path 
described new kind graphical space number advantages traditional window systems 
key advantage group users share view multiple applications assigns various levels importance easy visual nesting zooming move peripheral primary working attention 
compared standard current window models system easier exploit visual memory places organize informationally large workspaces 
believe approach enriches workstation window paradigm fundamental way 
acknowledgments research funded nynex nsf number iri 
nathan nynex initial discussions leading jack schwartz lorie raj allison druin gene miller contributed valuable ideas time apple generous equipment donation 
particular credit goes matthew fuchs distributed pad scheme system 
bly sara 
media spaces bringing people video audio computing environment cacm vol 
pp 

burt peter 
multiresolution spline applications image mosaics acm transactions graphics vol 
pp 

clark james 
geometric models visible surface algorithms 
acm communications vol 
pp 

william 
spatial management information acm siggraph conference proceedings 
edelsbrunner 
new approach rectangle intersections part ii int journal computational mathematics pp 

feiner 
worlds worlds metaphors exploring dimensional virtual worlds 
proc 
uist acm symp 
user interface software technology snowbird ut oct pp 

fuchs matthew 
unpublished ph dissertation progress 
furnas george 
generalized fisheye views human factors computer systems chi conference proceedings pp 

hill ralph 
rendezvous language architecture cacm vol 
pp 

hypertext hypertext macintosh version disk 
acm press new york 
lu 
idea management shared drawing tool 
proceedings second european conference computer supported cooperative ecscw amsterdam holland 
mackinlay 
rapid controlled movement virtual workspace 
acm siggraph conference proceedings 
max nelson 
acm siggraph film show 
minneman bly 
managing trois study multi user drawing tool distributed design proceedings chi conference human factors computer systems new orleans la nelson ted 
literary machines 
pa nielsen jakob 
non command user interfaces cacm vol 
pp 

page perlin ken luis 
wavelet representation unbounded resolution painting nyu technical report 
preparata franco shamos michael ian 
computational geometry springer verlag new york 
small david 
masters thesis mit media laboratory 
smith randall shea tim malley claire taylor 
preliminary experiments distributed multi media problem solving environment 
proceedings european conference computer supported cooperative uk pages 
tang minneman 
video interface collaborative drawing 
proceedings chi conference human factors computing systems seattle wash 
tanimoto pavlidis 
hierarchical data structure picture processing 
computer graphics image processing vol 
pp 

tufte edward 
visual display quantitative information graphics press 
weiser 
computer st century sci 
am 
pp 

williams lance 
pyramidal 
acm siggraph conference proceedings 
williams lance 
personal communication 
page 
