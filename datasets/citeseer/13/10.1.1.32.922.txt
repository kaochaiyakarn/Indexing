analysis loops florian martin martin alt reinhard wilhelm christian ferdinand universitat des saarlandes postfach saarbrucken fon fax cs uni sb de programs spend time loops procedures 
program transformations necessary static analyses deal 
long recognized different execution contexts procedures may induce different execution properties 
established techniques interprocedural analysis call string approach 
loops received similar attention area data flow analysis interpretation 
executions treated way typically executions may exhibit different properties 
new technique allows application known established interprocedural analysis theory loops 
turns call string approach limited flexibility possibilities group calling contexts analysis 
extension overcome problem relies similar approach gives useful results practice 
classical new techniques implemented program analyzer generator pag demonstrate findings applying techniques real world programs 
keywords program analysis program analyzer generator loops call string approach functional approach 
data flow analysis meet paths solution computed approximated 
presence loops means body loop data flow value entry combined values return 
loops may start state different encountered iterations useful keep distinguished data flow analysis 
allow solution relies extensions known interprocedural analysis techniques call string approach functional approach described sharir pnueli 
advantage similar problems loops procedures treated formal framework 
furthermore allows existing theory implementations interprocedural analysis analysis loops 
necessity better loop analyses claimed harrison proposed transform loops procedures techniques interprocedural analyses 
area compiler construction optimization techniques loops software pipelining 
main idea applying interprocedural analysis loops extend procedure concept special block structure control flow graph program 
blocks analyzed procedures interprocedural analysis allowing separation information different paths control flow graph 
number paths usually infinite possible analyze separately 
partition sets paths classes order analyze 
functional approach done inspecting data flow information entries blocks dynamically analysis time 
call string approach paths grouped statically advance 
solution allows application interprocedural techniques loops arbitrary blocks code 
shows classical call string approach interprocedural analysis suited analysis nested loops 
new improved technique called 
classical new approaches integrated program analyzer generator pag 
practical experiments real applications show applicability performance gains new approach respect classical approaches 
section motivation extension interprocedural analysis techniques closer look analysis loops context practical application 
sec 
classical interprocedural techniques discussed 
approach introduced sec 

sec 
classical interprocedural techniques applied analysis problem results compared evaluated 
motivation example analysis loops considered context cache behavior prediction 
caches improve access times fast microprocessors relatively slow main memories 
upper part storage system hierarchy fit register set main memory 
reduce number cycles processor waiting data providing faster access referenced regions memory 
modern workstations equipped microprocessors cycle times ns dram dynamic random access memory cycle time ns 
cache behavior prediction representative large class analysis problems high practical relevance area hard real time systems 
require timing validation bounds execution time 
closely related pipeline behavior prediction similar analysis requirements exist 
goal cache analysis compute categorization memory describes cache behavior 
categories described fig 

category abb 
meaning hit ah memory result cache hit 
am memory result cache classified nc memory classified ah am 
fig 

categorizations memory example 
consider sufficiently large data cache program fragment execution loop result cache variable data cache 


fig 

motivating example cache 
iterations result cache hit cache sufficiently large hold variables referenced loop 
control flow graph program shown fig 

empty box means cache box means cache 
classical approach iteration iterations distinguished 
combination function needed combine data flow information nodes control flow graph incoming edges cache analysis similar set intersection 
example combination function combine data flow information entry loop data flow information loop body obtain new data flow value loop 
combined data flow information include variable cache loop entered 
variable classified nc 
wcet worst case execution time computation safe approximation 
interprocedural analysis key idea interprocedural analysis general procedure called different data flow elements calculated different dynamic calls 
different data flow values calls procedure called calling contexts 
precise analysis results obtained procedure analyzed separately calling context 
increase complexity analysis may lead nontermination analysis guaranteed procedure analyzed finite number different calling contexts 
strategies overcome problem reduce complexity analysis differ classical approaches 
procedure different calling contexts known subsequent optimization pass create optimized versions procedure specialized different contexts 
statically known analysis call contexts produced call site call replaced call version procedure specialized contexts 
functional approach functional approach doesn try reduce complexity analysis 
analyzes procedure call context arises computation 
done different call contexts procedure corresponding data flow element exit procedure 
tables procedures seen functions map incoming data flow values outgoing data flow values 
represent versions procedures 
time iteration algorithm reaches call node looks call context table called procedure 
exit value result call 
exit value calculation triggered 
procedures simultaneously recursive trigger calculation values 
tables procedure grow infinitely domain finite 
sufficient termination conditions known assume exists compact representation functions 
disadvantage functional approach analysis correspondence paths table entries known efficient specialization possible 
call string approach call string approach partition dynamic calls procedure constructed pre pass analysis 
analysis procedure analyzed class dynamic calls 
members class dynamic calls procedure chosen suffixes path taken dynamic call tree 
call string concatenation calls 
hope dynamic calls set similar data flow behavior 
idea understood simulating call stack machine contains frames procedure call finished 
tracing call strings done encoding domain data flow values original domain domain gamma constructed gamma set call strings length transfer functions tf extended appropriately function tf approach advantages compared functional approach possible deal data flow domains infinite cardinality 
second easily possible cut complexity analysis selecting small values third easily possible find call context set paths call graph replace procedure specialized versions 
disadvantages call string approach precise functional approach 
practical encode call strings analysis domain 
extending interprocedural analysis interprocedural analysis pieces code procedures analyzed times different incoming data flow values calling contexts 
done get better analysis results pieces code executed different contexts 
motivating example sec 
shown body loops executed times different contexts 
techniques interprocedural analysis extended applied loops 
concept procedures generalized blocks 
blocks entry exit nodes ways enter leave block 
additionally edges inside block entry blocks correspond procedure calls interprocedural context referred call edges 
call edges corresponding edge exit called block back node inside calling entry exit fig 

loop original cfg transformed cfg loop void loop void loop entry call return call return exit fig 

transformation loop recursive procedure block called return edges 
node cfg belongs exactly block 
transformation loop block seen fig 

loop corresponds cfg transformed cfg 
description requires edge correspondence edge transformed cfg 
edge fig 
allows continuation calling block called block returns 
loop tail recursive return 
return edge degenerates self loop exit node 
comparison fig 
shows code cfg loop fig 
expressed recursive procedure 
self loops omitted standard data flow analysis edges important transformation sec 

program described block structure calling conventions represented supergraph 
definition supergraph 
supergraph consists control flow graph set nodes set edges partition ae nodes class represents block 
block unique entry exit nodes entry exit 
class represents main block entry predecessors exit successors 
edge node entry corresponding edge exit edges intra partition edges 
block supergraph said directly recursive edge entry 
set blocks supergraph simultaneously recursive subgraphs strongly connected 
supergraph called recursive contains set simultaneously recursive blocks 
procedures loops blocks approach limited 
applied block code entry 
remainder section static call graph approach introduced extended blocks 
transforms supergraph call string length expanded supergraph 
expanded supergraph cfg analysis problem solved standard intraprocedural algorithm 
static call graph approach interprocedural techniques call string approach 
static call graph approach keep different call paths separated node supergraph annotated array data flow elements 
pair consisting node index array called location 
block number data flow elements nodes block fixed called multiplicity written mult 
mult location main block 
mult simply extended nodes defining mult mult mult iff node connector set functions conc mult mult describe call edge locations calling block connected locations called block 
different strategies call string strategy construct connectors multiplicities supergraph chosen 
discussed detail section 
leads definition expanded supergraph new kind cfg nodes locations 
locations connected edges supergraph 
blocks th location connected th location successors 
call edges conc determines data flow elements calling block connected elements called block 
corresponding return edges inverse conc applied 
definition 
expanded supergraph supergraph function mult connector conc defined ge ffl jn mult gg ffl iff conditions hold 
entry con ii 
exit con corresponding call edge iii 
exit entry example expanded supergraph mult mult con con con 
return fac exit call fac entry fac return call fac call return call call return return fig 

connector example solve data flow problem expanded graphs necessary find suitable conc mult functions 
possible tune analysis higher multiplicity better precision achieved time space needed 
connectors section methods determine pairs multiplicity connectors explained 
simple connector simplest case multiplicity block conc functions identity 
standard control flow graph obtained 
call string connector call string approach fixed length call strings simulated static call graph approach 
method allows avoid calculation call strings solution procedure paths call graph 
encoding call string analysis domain avoided 
done static calculation analysis passes call edge entry call string approach append node actual call string 
simulated encoding call strings numbers correspond locations call edge assigned unique number gamma number call edges program 
call string fl corresponds digit number base 
number converted decimal system multiplying th digit add digits jn 
zero zero denotes empty call string ffl 
fortunately call strings valid procedure 
deleting non valid numbers procedure number locations reduced location 
call string connector call string approach described follows count number incoming edges entry take multiplicity con entry functions project data flow elements single fixed position vector data flow elements entry turned practice call string approach optimal nested loops 
length call string chosen level nesting depth loops paths separated interesting 
shows example nested loops 
call edges labeled stands calls calls 
possible call strings reach loop call string approach considers suffixes length paths 
interpretation iteration outer inner loop second iteration inner loop iteration inner loop iteration outer loop inner analysis problem assumed initialization effects expected important separate second iterations 
exit exit loop exit loop entry loop entry loop entry fig 

call string approach nested loops iterations 
leads appropriate separation scheme outer loop inner loop nested loops results expanded supergraph fig 

programs direct recursion formal mapping multiplicity construction looks follows multiplicity block sum blocks edge entry recursive multiplied 
recursive edge con function defined con ae mult mult non recursive edges non recursive edges entry 

exit loop exit entry entry loop exit loop entry loop fig 

nested loops numbered th edge con ck gamma mult source block th call 
non recursive procedures method simulates full inlining recursive ones separates pass passes 
name mapping comes virtual inlining procedures virtual unrolling loops 
simultaneously recursive blocks complete virtual inlining follows call graph constructed blocks nodes edge iff entry graph strongly connected components calculated considered single node collapsed call graph acyclic call graph method described simple recursive case applied 
collapsed call graph expanded 
expansion process block strongly connected component inherits multiplicity summary node 
example shown fig 

block block block block block block block block block block fig 

calculation multiplicity simultaneous recursive 
numbers edges mean numbers edges entry numbers nodes calculated multiplicities edge block block means edges nodes block entry block 
name description instr 
jpeg forward discrete cosine transform matmult matrix multiplication data encryption djpeg jpeg decompression color image fft fast fourier transformation matrix summation stats arrays sum mean variance standard deviation linear correlation dhrystone dhrystone integer benchmark fig 

test programs practical evaluation connector applied cache behavior prediction analysis loops functions shown results 
shows test programs 
executables format 
number machine instructions shown column 
fig 
see percentage instructions program classified hits misses traditional analysis connector 
programs definite precision gain traditional method programs allows predict cache behavior precisely 
course increase number analyzed contexts observation experiments increase quite moderate 
test programs analyzed seconds sun sparcstation 
analysis times shown seconds traditional advantage name ah am nc time ah am nc time matmult djpeg fft stats dhrystone fig 

evaluation cache analysis instruction cache 
time analysis time seconds 
traditional approach analyses 
applying connector example sec 
see fig 
clearly iteration iterations hit 
related technique proposed analyze loops confused code motion techniques move loop invariant code loops 
special data flow analyses fit classical data flow framework proposed technique general framework applied data flow analyses order obtain precise analysis results 
structure analyses interval analysis orthogonal technique 
solve data flow problems efficiently presence loops 
solve problem expanded supergraph iterative algorithms 
property oriented expansion program model developed 
aims similar goals analysis separation program states program point different properties generated different program paths 
reached unfolding paths result different properties 
terminate method requires set properties finite 
worst case complexity worse functional approach expansion limited certain call edges applied node predecessor 
fundamental interprocedural analysis discusses functional call string approach theoretical way 
practical comparison 
exit loop entry loop entry exit fig 

example cache prediction motivated poor results analyses practice generalization interprocedural analysis loops arbitrary blocks 
extending existing methods static call graph technique possible focus analysis effort points main interest 
especially loops allows distinguish iterations 
applicability methods shown practical experiments 
newly developed approach possible predict example cache behavior programs tighter bounds conventional analysis methods 

martin alt christian ferdinand florian martin reinhard wilhelm 
cache behavior prediction interpretation 
radhia cousot david schmidt editors sas static analysis symposium volume lecture notes computer science pages 
springer september 
long version accepted sas special issue science computer programming 

martin alt florian martin 
generation efficient interprocedural analyzers pag 
alan mycroft editor sas static analysis symposium volume lecture notes computer science pages 
springer september 

martin alt florian martin 
practical comparision call string functional approach data flow analysis 
herbert editor programmiersprachen volume des institutes fur wirtschaftsinformatik 
wilhelms universitat july 

christian ferdinand florian martin reinhard wilhelm 
applying compiler techniques cache behavior prediction 
workshop languages compilers tools real time systems pages june 

williams harrison iii 
personal communication interpretation dagstuhl seminar 

hennessy patterson 
computer architecture quantitative approach 
morgan kaufmann 

ryder 
elimination algorithms data flow analysis 
acm computing surveys september 

micha sharir amir pnueli 
approaches interprocedural data flow analysis 
steven muchnick neil jones editors program flow analysis theory applications chapter pages 
prentice hall 

bernhard steffen 
property oriented expansion 
radhia cousot david schmidt editors sas static analysis symposium volume lecture notes computer science pages 
springer 

stephan florian martin martin alt 
pag user manual 

reinhard wilhelm dieter maurer 
compiler design 
international computer science series 
addison wesley 
