index structures path expressions extended tova milo tel aviv university milo math tau ac il dan suciu labs suciu research att com years increased interest managing data conform traditional data models relational object oriented model 
reasons non conformance diverse 
hand data may conform models physical level may stored data exchange formats fetched internet stored structured files 
hand may conform logical level data may missing attributes attributes may different types different data items may heterogeneous collections data may simply specified schema complex changes described easily traditional schema 
term semistructured data refer data 
data model proposed kind data consists edge labeled graph nodes correspond objects edges attributes values 
illustrates semistructured database providing information city 
relational databases traditionally queried associative queries retrieving tuples value attributes 
answer queries efficiently database management systems support indexes translating attribute values tuple ids trees hash tables 
object oriented databases path queries replace simpler associative queries 
data structures proposed answering path queries efficiently access support relations path indexes 
case semistructured data queries complex may contain generalized path expressions :10.1.1.32.3916
additional flexibility needed order traverse data structure irregular partially unknown user 
example query retrieves restaurants serving lasagna dinner select restaurant menu dinner lasagna starting root database db query searches paths satisfying regular expression restaurant retrieved nodes searches regular expression menu dinner lasagna 
queries evaluated naive evaluation scans database traversing possible paths selects match patterns query obviously expensive 
case relational oo databases indexes speed evaluation queries 
index structures developed traditional data models rely pre defined database schema relational databases index specific attribute specific relation object oriented databases index specific path object oriented schema document section title 
index structures applicable semistructured data schema missing unavailable partially known 
extreme full text indexing systems take opposite approach 
knowledge structure information index data 
limited semistructured data partial knowledge structure may available exploited queries query insists dinner item appears inside menu 
addressed problem efficiently evaluating path expressions semistructured databases :10.1.1.41.3258:10.1.1.25.9024
focused mainly deriving schema information rewrite queries guide search 
issue indexing ignored 
exception dataguides record information existing paths database index 
scope dataguides restricted queries single regular expression adequate complex queries having regular expressions variables 
propose novel general index structure semistructured databases called 
improves previous approaches ways 
indexes flexible allow trade space generality 
class paths associated index specified path template 
example build index evaluate paths described template replaced regular expression stands path expression 
query form 
alternative template restaurant regular expression fixed corresponding index takes space general 
second show index efficiently constructed 
dataguides required powerset construct underlying database worst case exponential cost contrast indexes rely computation simulation bisimulation relation efficient algorithms exists 
third offer guarantees size index 
example size index associated single regular expressions linear database contrast dataguides worst case exponential experiments show 
third show turn elegant generalizations index structures considered previously various contexts dataguides semistructured data pat trees full text indexes access support relations oodbs 
index starts grouping database objects equivalence classes containing objects indistinguishable class paths defined path template described 
computing equivalence relation may expensive pspace complete consider finer equivalence classes defined bisimulation simulation efficiently computable 
index built equivalence classes constructing non deterministic automaton states represent equivalence classes transitions correspond edges objects classes 
index designed particular class queries template answer queries general forms 
address problem deciding query generalized path expressions rewritten take advantage index 
full generality problem generalization query rewriting problem case queries generalized path expressions best knowledge open 
modest goal show certain restriction query rewriting problem decidable ptime specific class queries interest practice 
restricted form result interesting corollary fact containment restaurant cafe restaurant dining www com shopping name westfield museums summit aquila menu hours example semistructured database informations small towns new jersey 
regular expressions consisting concatenations constants wildcards decidable ptime 
comes surprise associated deterministic automaton case exponential size regular expression 
organization section review data model query language semi structured data introduce notion path templates explain indexes built templates consider sections specific templates corresponding indexes called index resp 
presenting cases illustrate details techniques carry section general case indexes 
conclude section 
review data model query languages start reviewing basic framework databases queries 
data model models proposed semistructured data consists labeled graph nodes correspond objects database edges attributes 
relational object oriented data models labeled graph model carries data schema information making easy represent irregular data treat data coming different sources uniform manner 
definition assume infinite set data values infinite set nodes 
data graph db labeled rooted graph ae finite set nodes theta theta set labeled edges set root nodes 
assume nodes reachable root refer data graph database 
path expressions formulas describe properties labels edges data graphs 
assume set base predicates domain values denote set formulas obtained boolean combinations predicates 
assume satisfiability formulas decidable 
regular path expression path expression short regular expression formulas ffl jp denote regular language defined set words values exists word fn holds set word obtained replacing formula value satisfies 
traditional techniques regular language easy see languages defined path expressions closed intersection emptiness problem decidable 
data graph db path vn gamma vn db say matches path expression iff word 
brevity sequel shorthands 
path expression constant written rue written written example restaurant name regular path expression 
queries query path expression form pn xn distinct variable names path expressions 
graph database db say nodes satisfy query path pn xn root gamma exist path gamma matches query form select pn xn query consists query path set head variables 
query section form 
refer query giving query path implicitly assume variables head variables 
answer query projection indexes tuples vn satisfy query path 
path templates relational databases create separate index relation attribute pair 
object oriented databases associate separate path indexes path object oriented schema 
index answer certain class queries designed 
index structures describe designed classes queries 
class specified query template 
formally query template form tn xn regular path expression placeholders concrete query path obtained query template instantiating place holders concrete path expressions place holders concrete formulas 
query path obtained called instantiation query template set instantiations denoted inst 
example consider query template restaurant name query paths possible instantiations restaurant name restaurant name restaurant ffl name query template goal construct index structure enable efficient evaluation queries inst 
fact shall see assist answering variants queries 
templates guide indexing mechanism concentrate interesting frequently queried parts data graph 
example know database contains restaurants directory common queries refer restaurant name may query template guide indexing process 
example assume know database assume users ask objects path 
may take build corresponding index 
explaining indexes constructed general templates give intuition indexing process concrete templates targeted queries searching nodes reachable root arbitrary path expression queries form select path expression second targeted queries searching pairs objects connected path matching arbitrary path expression 
queries form select 
call index constructed handle case index second case index presenting cases illustrate details techniques 
carry general case called index template index 
address issue index maintenance consider briefly section 
indexes index assists path expression finding objects reachable root matching path 
putting terms query templates assists computing query paths inst 
index consists description possible paths db path objects reachable path 
queries evaluated compact representation original database 
attempt naive way soon refine capture information paths data graph db proceed follows 
node db db short db understood set words paths root node db def fw anand exists path db root define language equivalence relation nodes db denote equivalence class db 
clearly equivalence classes nodes db 
language equivalence important nodes db distinguished query path inst iff naive index constructed follows consists collection equivalence classes accompanied automaton regular expression describing corresponding language set nodes equivalence class 
call set extent denote extent 
naive index query path form evaluated iterating classes class testing language class nonempty intersection 
answer query union extents extent intersection empty 
naive approach inefficient reasons 
distinguished mean node belongs query answer 
ffl construction cost construction index expensive computing equivalence classes data graph pspace complete problem 
ffl index size automaton regular expressions associated different equivalence classes overlapping parts stored redundantly 
results inefficient query evaluation intersect regular language 
address problems 
tackle construction cost introduce notion approximation 
call equivalence relation approximation property shall see approximation fine constructing indexes soon efficiently computable illustrate examples approximations 
basic idea tackle index size introduced consists concise representation languages finite state automata 
novelty non deterministic automaton get compact structure 
approximations discuss choices approximations bisimulation simulation discussed extensively literature 
idea approximate language equivalence dates back modeling reactive systems process algebras 
completeness revise definitions appendix 
approximations satisfy equation 
fact implications strict illustrated easiest compute log followed mn pspace 
constructing indexes bisimulation simulation 
reader may wonder loose practice approximation answer 
fact tree data graphs coincide 
prove slightly general statement 
say database db unique incoming labels node labels distinct edges entering particular tree databases unique incoming labels 
prove appendix proposition db graph database unique incoming labels coincide 
indexes define indexes 
database db approximation equivalence relation satisfying equation construct rooted labeled graph db follows 
nodes equivalence classes equivalence class node db 
db edge iff db contains edge roots equivalence classes db roots root db 
regular languages previously stored explicitly equivalence class implicitly db 
call db index db db clear context omit simply store index follows 
associate oid node store graph structure standard fashion 
second record node nodes db belonging equivalence class denote extent 
oid extent 
space incurs costs space graph extents 
graph large data graph db argue practice may 
extents exactly total number nodes db may acceptable indexes costly complex indexes discussed 
describe appendix techniques reducing total size extents 
evaluating query paths indexes describe evaluate query path evaluating data graph db evaluate index graph db 
fs set nodes db satisfy query path 
answer query db extent extent extent 
correctness algorithms follows proposition proof appendix proposition approximation satisfies equation db 
node db db db 
complexity evaluating query graph proportional size graph 
fact polynomial size graph query path complexity computing truth value unary formulas index smaller database db evaluating query index database yields better performance 
note nodes index graph may outgoing edges 
equivalence class may contain nodes outgoing edges class node union data graph index outgoing edges 
computation faster edges indexed hashing tree labels selection edges specific labels faster 
example illustrates fragment database tuples irregular structure dropped values attributes 
index shown 
evaluating query follow paths original database take union extents 
attribute values added current leaves outgoing edges representing 
typically possible values outgoing edges attribute index outgoing edges tree 
searching specific value follow paths corresponding tree identify outgoing edge 
size index storage index consists graph sum extents 
explained bounded size size database constant factor 
query paths computed index graph db smaller relative db better improvement 
experimental side tested technique variety databases obtaining results showing common scenarios significantly smaller db 
brief discussion experiments appendix describe simple implementation techniques reduce storage size graph associated extents 
theoretical side identify parameters may cause size approach upper bound 
large number distinct labels db existence long acyclic paths 
prove imposing limits parameters upper bound size independent db 
technically hardest results believe valuable focusing research aimed reducing index size 
formally database db number say db short simple paths length example trees depth short 
important instances semistructured databases practice short small web sites structure start tree depth add back links point back ancestor current page navigation bar consisting links distinguished pages web site importantly page having navigation bar refers set distinguished pages 
easy see database gamma short 
practice small web site large 
theorem db short database having distinct labels approximation coarse bisimulation size bounded number depending independent size db 
proof sketched appendix 
connection related data guides authors proposed time method extracting possible path information database db describe concise labeled graph called dataguide 
approach insist path data represented dataguide implies dataguide viewed finite state automata deterministic 
fact dataguide db deterministic automaton generates words db 
discussion db viewed automata roots initial states nodes final states 
observes dataguide appropriate answering queries general exists clear correspondence states sets nodes db extents 
consider dataguides having certain properties call strong data guides 
db exists exactly strong dataguide standard powerset automaton construct db 
correspondence nodes nodes db explicit node set nodes db relationship similar extents 
indexes extents strong simple path path go node twice 
dataguide may overlap 
storage size dataguides larger indexes reasons size dataguide graph may large exponential database index linear total size extents dataguide may large exponential database due overlaps indexes linear size db 
believe main contributions identify relaxing determinism requirement imposed dataguides indexes constructed stored efficiently time achieve similar performance 
pinpoint relationship dataguides indexes proposition 
proof omitted 
proposition approximation relation nodes database db satisfies equation index constructed db deterministic automaton built standard powerset construction coincides strong dataguide 
indexes non deterministic alternatives dataguides 
coincide tree databases case viewed automaton deterministic 
indexes section describe index structures answering queries form select regular path expression 
template representing queries language equivalence form equivalence classes nodes 
interested pairs nodes matching consider language pairs nodes 
formally define db def fw exists path dbg write db clear context 
define pairs equivalent iff denote equivalence class 
computing prohibitively expensive consider efficiently computable approximations satisfying case index possible define efficient approximations variants simulation bisimulation relations 
details omitted lack space 
define index db db rooted graph 
index data graph nodes equivalence classes roots equivalence classes form edge iff exist 
db contains edge graph store state extent consisting pairs equivalence class proposition db db 
node db left represent paths database db db right represents paths index db root index 
query evaluation indexes proceeds similarly indexes small modification compute select compute query path take union extents 
note saves search searching nodes db index suffices look paths staring roots 
fewer nodes db example acyclic databases single root nodes db 
shows index extents database 
single root top node 
query select evaluated traversing outgoing edges root 
indexes storage index consists parts graph extents 
worst quadratic size db 
guarantees querying index take querying database keep index small possible 
experiments described appendix indicate practice index size far smaller upper bound providing significant improvement query evaluation 
number implementation techniques reducing size indexes available scope mentioned briefly appendix 
theoretical side theorem extended indexes obtaining upper bounds size graph independent size db omit lack space 
remains true replace connection related patricia trees conclude section explaining briefly relationship full text indexing mechanisms particular pat trees 
purpose assist computing regular expressions large text files 
pat tree patricia tree constructed possible suffixes text viewing text infinitely long follows 
root node outgoing edge character file 
children say corresponding letter child character letter children may correspond ka kb kc nodes turn child continuation group characters node child child deleted node annotated number descendents omitted 
leaves tree point back data corresponding strings 
exists close relationship pat trees indexes view file consisting sequence characters graph database db having single long chain index db tree note discussion implies index single root 
pat tree obtained index performing optimizations appendix keeping values extents skipping nodes pointing back data descendents form long chain keeping extents leaf nodes 
indexes index index represent paths database paths root case index paths structure irregular index may large inefficient 
performance improvement obtained restrict class queries index supports 
general principal applied successfully relational object oriented databases indexes specific attribute fixed path 
illustrate example semistructured data consider repository cities 
assume high percentage query mix form select restaurant arbitrary path expression query conforms template restaurant indexing paths convenient index having restaurant incoming edge 
example case information database fixed pre defined structure certain components irregular 
example consider relation restaurants name phone menu name phone fixed structure menu attribute complex structure differs restaurant 
want standard optimization indexing techniques structured parts focus novel indexing mechanisms menu part standard ones apply 
show principles underlying indexes extended flexible index structures capturing generalizing relational indexes object oriented path indexes indexes 
remainder section consider query template tn xn path expression place holder build index structure called index assist answering queries inst 
going definition index point index generalize specialize indexes certain ways 
generalization comes fact indexes particular cases indexes see 
indexes specialize indexes intuition 
suppose built index template want evaluate query select index evaluate index path expression sense compatible tn path indexes reduce class path expressions evaluate 
discuss test query evaluated index 
definitions case indexes defined language equivalence equivalence relation nodes resp 
pairs nodes db 
want proceed similarly arbitrary templates difference query binds variables xn order sense talk identifying tuples nodes corresponding subsets variables 
choice impose evaluation strategy variables xn searched bound order 
leads definition 
notations tuple nodes db denote language gamma denote language 
definition tn xn path template 
sn new data values 
domain data values definition tuple nodes db define db regular language alphabet sn db def regular expression ffl path template def ffl formula template def set labels edges gamma root 
ffl constant path expression def def 
tuples define language equivalence relation iff db db 
equivalence class denoted tuples un db distinguished query path pn xn inst iff vn un 
goal new symbols pinpoint range path term query particular match constant path expressions template determine assignments nodes query variables 
issue clarified 
computing expensive consider approximations satisfying computed efficiently 
case index possible define efficient approximations variants traditional simulation bisimulation relations 
details omitted 
approximation index db rooted graph nodes nodes include equivalence classes class introduce additional new node denote edges edges labeled node gamma gamma 
additionally template tn xn introduces edges depending structure 
edge db edge gamma gamma 
additionally edge labeled special ffl symbol 

edge db edge gamma gamma 
path expression node gamma contains edge gamma gamma new symbol 
root nodes roots nodes root db 
terminal nodes graph databases indexes distinguish terminal nodes nodes form remove nodes reachable root having outgoing path terminal node associate terminal node vn extent containing tuples vn 
example consider template restaurant menu equivalence classes 
single nodes exactly classes contains nodes reachable root path matching restaurant menu second contains nodes 
considering pairs equivalence classes sets pairs language addition similar equivalence classes pairs transition continued arbitrary transitions edges db transitions ffl terminal state 
note outgoing edges nodes removed graph 
resulting index looks index considers data reachable restaurant menu path 
observe path root terminal node traverses exactly gamma edges 
define language describing paths root slight modification ffl symbols interpreted epsilon moves omitted strings 
evaluating query paths indexes simplest scenario query matches template completely rn xn inst 
def def ae constant case indexes nodes outgoing edges index labels 
evaluate query path interpreting ffl edges epsilon moves 
exactly gamma signs retrieved nodes form vn answer query union extents retrieved nodes 
guarantees correctness algorithm 
proposition 
approximation satisfies equation db 
tuple db db 
tuple vn satisfies query iff db defined 
evaluating complex queries index evaluate queries inst 
illustrate examples 
example obviously inst follows 
instantiate inst instantiated 
expressed projection select example inst 
single instance compute prefix variables continue compute search data graph 
rewrite select subtle point unused tail harmful implied 
effect replaced prefix instance call prefix replacement general problem deciding path query rewritten terms indexes generalizes query rewriting problem regular path expressions 
attempt solve rewriting problem regular expressions open 
identify restrictions rewriting done efficiently 
formally template query path variables xn define prefix replacement consists instance inst proper variable renamings postfix query path query select xn equivalent checking query path admits prefix replacement pspace hard 
arbitrary regular expressions equivalent iff query path prefix replacement template equivalence regular expressions pspace complete 
full version prove converse checking exists prefix replacement finding exists pspace 
proof consists careful reduction prefix replacement problem problems testing equivalence regular path expressions known pspace finding regular expression number tuples regular languages rn rn prove problem pspace 
consider particular case templates queries believe frequent practice 
define regular path expression simple consists concatenation constants example simple regular path expression 
similarly define template simple constant regular expressions simple 
prove full version checking finding prefix replacement simple query simple template ptime 
core result lies lemma stating containment simple path expressions tested ptime 
may come surprise deterministic automata associated simple regular path expression may exponentially states proof omitted traditional containment test regular languages expensive 
proposition template query path problem exists prefix replacement pspace complete 
simple problem ptime 
connection related indexes flexible structures fine tuned tradeoff space generality 
capture indexes templates respectively 
generalize traditional relational indexes assuming encoding relational databases index attribute relation captured template tup generalize path indexes oodbs 
example kemper moerkotte describe access support relation asr index structure query paths oodbs 
asr designed evaluate efficiently paths form object attribute names 
define access support relation asr ary relation un iff exists path un database 
ignoring mismatch object oriented semistructured data model exists close relationship asr index template xn graph structure index chain nodes un terminal node associated extension extension precisely asr 
indexing mechanism called index aimed assist evaluating query paths semistructured data 
index captures possibly partial knowledge structure data type queries query mix described path templates 
abiteboul vianu consider order equivalence classes tuples values database 
tuples xn yn equivalent indistinguishable fo formula 
language equivalences base index constructs superficially related fo equivalence classes queries consider distinguish tuples chain queries 
language equivalences coarser fo equivalences results fewer equivalence classes 
buchsbaum kanellakis vitter consider problem incrementally maintaining query paths fixed regular expression database insertions deletions 
describe efficient method incremental updates 
method refers fixed regular expression incremental updates indexes template restricted constant regular expressions 
address index maintenance note possible alternative incremental maintenance optimization technique mentioned appendix pointing back data doing portion index graph invalidated update 
acknowledgment frankel implementation indexes 
abiteboul quass mchugh widom wiener 
lorel query language semistructured data 
international journal digital libraries april 
serge abiteboul 
querying semi structured data 
icdt 
serge abiteboul victor vianu 
generic computation complexity 
proceedings rd acm symposium theory computing 
elisa won kim 
indexing techniques queries nested objects 
ieee transactions knowledge data engineering june 
adam buchsbaum paris kanellakis jeffrey scott vitter 
data structure arc insertion regular path finding 
annals mathematics artificial intelligence 
peter buneman susan davidson mary fernandez dan suciu 
adding structure unstructured data 
proceedings international conference database theory pages greece 
springer verlag 
peter buneman susan davidson gerd hillebrand dan suciu 
query language optimization techniques unstructured data 
proceedings acm sigmod international conference management data 
christophides abiteboul cluet scholl 
structured documents novel query facilities 
richard snodgrass marianne winslett editors proceedings acm sigmod international conference management data minneapolis minnesota may 
flajolet sedgewick 
digital search trees revisited 
siam journal computing 
harold gabow robert tarjan 
faster scaling algorithms network problems 
siam journal computing 
roy goldman jennifer widom 
dataguides enabling query formulation optimization semistructured databases 
vldb september 
gonnet 
efficient searching text pictures extended 
technical report oed university waterloo 
monika henzinger thomas henzinger peter 
computing simulations finite infinite graphs 
proceedings th symposium foundations computer science pages 
kemper guido 
access support relations indexing method object bases 
information systems 
alon levy alberto mendelzon yehoshua sagiv divesh srivastava 
answering queries views 
proceedings th symposium principles database systems san jose ca june 
mendelzon mihaila milo 
querying world wide web 
proceedings fourth conference parallel distributed information systems miami florida december 
robin milner 
communication concurrency 
prentice hall 
nestorov abiteboul motwani 
inferring structure semistructured data 
proceedings workshop management semi structured data 
nestorov ullman wiener chawathe 
representative objects concise representation semistructured hierarchical data 
icde 
robert paige robert tarjan 
partition refinement algorithms 
siam journal computing 
tompa 
pat expressions algebra text search 
papers computational lexicography complex pages 
stockmeyer meyer 
word problems requiring exponential time 
th stoc pages 
acm 
appendix bisimulation simulation completeness include definition bisimulation simulation 
note need slightly modify traditional definitions reverse directions edges context refers set paths leading typically literature 
definition db data graph 
binary relation nodes called reversed bisimulation satisfies 
root 
conversely root 
edge exists edge 
conversely edge exists edge binary relation called reversed simulation satisfies conditions 
say nodes reversed bisimilar notation iff exists reversed bisimulation exists maximal reverse bisimulation equivalence relation precisely paige tarjan describe log time algorithm computing maximal bisimulation unlabeled graph nodes edges easily adapted log algorithm labeled graphs 
case reversed simulation exists maximal denote equivalence relation general preorder say nodes reversed similar notation henzinger henzinger give mn algorithm computing simulation relation unlabeled graph nodes edges derive algorithm labeled graphs 
proof proposition recall consider accessible graph databases node accessible root 
show reversed bisimulation proves proposition follows 
check conditions definition 
root root 
proves items 
reflexive transitive necessarily symmetric 
root data graph relations differ 
edge 
language contain words db unique incoming labels 
follows accessible node db exists edge entering follows proof proposition inclusion holds equivalence relation approximations path db root node corresponding path converse prove induction length word empty word root root implies consider transition definition exists nodes edge induction follows implies fact approximation conclude proof theorem suffices prove statement case reversed bisimulation relation 
show case equivalence classes reversed bisimulation database db short paths distinct labels 
defined def def thetac matter terminology 
due particular setting edges turned opposite direction traditionally 
proof reversed bisimulations reversed trees paths leading root 
drop attribute reversed 
note case trees edges lead children parents 
consider node db 
define infinite reversed unfolding db possibly infinite tree having root path db labeled exists unique corresponding path labels 
node db may correspond nodes possibly infinitely 
notation nodes db talk nodes equal recall db root node call unfoldings old roots importance trees 
nodes db iff exists bisimulation 
order count number equivalence classes suffices count number equivalence classes infinite trees 
sequel definition bisimulation graphs exactly definition items required roots old roots 
matter terminology classify nodes levels root level children level tree identify certain set nodes cut 
consider paths length root gamma gamma gamma distinct nodes equal gamma say define cut node call index note subtrees rooted isomorphic 
db short cut nodes levels finitely 
construct finite tree performing cuts 
cut node delete children children children leaf 
label new leaf special symbol oe index intend recapture information lost cutting level number help restore lost information 
repeating cut nodes gives finite tree depth leaves labeled oe oe importance lies fact 
exists bisimulation exists 
bisimulation equivalence classes easier count 
prove fact 
new kind trees change definition bisimulation adding requirement labeled oe labeled oe vice versa 
consider bisimulation 
show bisimilar consider intermediate construction 
define similarly graph obtained fusing cut node index delete node redirect unique edge keep label edge call new edge back edge 
tree anymore back edges introduce cycles 
infinite unfolding node isomorphic similarly 
suffices prove bisimilar 
recall bisimulation relation 
define subset binary relation iff level parents satisfy fact trees ensures remains bisimulation 
prove bisimulation 
obviously satisfies conditions definition old roots real roots check condition assume consider back edges regular edges trivial node level corresponds edge labeled oe simulation btw 
exists edge labeled oe cut node find corresponding back edge level ancestors level follows way designed 
proves bisimilar 
count number equivalence classes bisimulation finite trees depth leaves may labeled oe oe nodes may designated old roots 
prove equations upper bound number 
tree consists single node necessity real root 
addition may designated old root may labeled oe oe 
total choices 
induction case consider tree depth 
single node brings back previous case give summand equation real root non empty set direct children 
case start dropping duplicate subtrees 
obtain bisimilar tree root theta children label edge paired possible bisimulation equivalence class trees depth 
exists edges data graph size index index bibtex web site table experiments showing index size thetac gamma equivalence classes bisimulation adding summands gives equation 
experiments recall index storage consists parts graph extents 
graph carries schematic information size critical query performance graph distinguishes index structures traditional indexes 
currently conducting series experiments asses size index graphs results reported table 
testing technique variety graph types including relatively structured ones bibtex data loosely structured web data particular web site cs department tel aviv university randomly generated graphs mixed graphs composed components types 
briefly describe experiments 
order asses schematic information measure number non leaf nodes graphs 
started considering indices 
surprisingly smallest indices obtained bibtex data structure bibtex items may vary collection items naturally modeled semi structured data model number possible paths nodes limited 
considered increasingly growing files corresponding graph representation 
nodes size indices stabilized having vertices resp staying size regardless growth data providing significant performance improvement querying large files 
observe independence index size data size implied theorem experimental results show practice index size smaller theoretical upper bound induced proof theorem 
evaluate technique structured environment considered web site cs department tel aviv university 
noted pages site built maintained individually distinct people significant constraints structure automatically generated application done organizations structure loose site typical example semistructured information 
graph nodes size index amounts original size index 
observe potential upper bound size index square number nodes graph implies effort evaluation queries form original data potentially square needed index 
db need evaluate query node just evaluate root 
usage indices focusing specific interesting parts data tested mixed graphs combining randomly generated subgraphs bibtex web site data templates focusing bibtex web parts 
reduction size similar reported depending size parts ignored construction due template 
techniques reducing size index graph describe methods 
explain indexes describe briefly techniques generalized indexes 
normalizing labels cases distinct labels database graph synonyms denoting concept 
example labels name firstname fname name may refer thing 
index described stores separately 
avoid may chose normalize database constructing index applying normalization function labels db reduce size index 
denote index obtained db 
easy see proposition formulas query path px property value holds iff holds evaluated db computes exactly answer original db 
pointing back database assume equivalence class node index having descendants representing small equivalence classes 
note gain little computing part index big corresponding part data graph 
remove avoid duplication data 
set nodes having property 
reduce size redirecting edges ing node point database db 
node delete outgoing edges introduce new edges db extent 
root resulting combined structure old root queries evaluated hybrid index starting roots 
space gain consists removing parts longer accessible root 
may come cost increased computation time part search done db 
note hybrid index anymore property indexes node extents disjoint database node may appear db parts structure 
prove full computing hybrid structure yields correct result 
dropping extents alternatively keep entire index delete extents 
computation regular path expression reduced index proceeds follows 
nondeterministic automaton equivalent regular expression theta acc standard product automaton retain accessible part 
consider states terminal state associated extent include extent result far computation similar described section 
backtrack state extent proceed database 
easy visualize tree 
general case backtrack step proceeds follows 
compute cut meaning set nodes separates initial states precisely property path initial state goes node cut efficiently ptime low degrees 
computing cut consider states form extent backtrack step consists considering automaton obtained considering initial state terminal state computing db extent roots 
indexes combination techniques discussed help keep size control previous result regarding normalization labels holds 
regarding dropping extents note extents contain pairs tuples nodes individual objects 
dropping extent completely take compromising approach just drop attributes 
example know queries interested variable attribute dropped reducing size extents 
restore needed switch nodes db look corresponding 
combined technique pointing back data accept computation moved index database need remember value caused transition pair retrieved nodes 
furthermore queries interested values reduction obtained observations 
note acyclic parts graph values node extent union values extents children 
may decide drop extent needed compute recursively children 
index contains chains nodes having extent set outgoing edges skip nodes just record number repetitions 

