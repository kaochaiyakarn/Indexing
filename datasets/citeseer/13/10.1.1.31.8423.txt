visual programming languages empirical evidence whitley department computer science vanderbilt university box station nashville tn whitley vanderbilt edu october appear journal visual languages computing contents issues need empirical 
methodological di culties 
visual programming possible ects 
evidence non programming studies 
people perform better organized explicit information 
notations superior absolute sense 
programming studies 
flowcharts notation control ow 
forms notation matrix manipulations 
labview participatory programming 
summary evidence 
evidence non programming studies 
notations superior absolute sense 
programming studies 
flowcharts documentation control ow 
labview match mismatch hypothesis 
labview petri nets secondary notation 
algorithm animation pedagogical aid 
spreadsheets problem visibility 
summary evidence 
past decade witnessed emergence active visual programming research community 
noteworthy shortage empirical evidence supporting resulting research 
summarizes empirical data relevant visual programming languages show current empirical status act call arms empirical 
past decade witnessed emergence active visual programming research community orts yielded visual programming languages vpls visualization systems 
date shortage empirical studies backing design decisions vpls visualization systems 
de nite negative consequences stem lack evidence 
example critics larger computer science community inclined dismiss visual programming unpromising research fad 
addition visual programming researchers forced design choices data direct decisions 
unproven status visual programming empirical studies major contribution visual programming orts 
case empirical evidence problem warrants called biggest open problem visual programming research 
evidence problem deserves equal footing scalability problem recognized visual programming researchers major open problem 
fundamentally visual programming research rests idea visual notations properly integrated text form vpls visualization systems improve human programming experience 
asks data exists tells visual notations bene cially context complex cognitive activities required programming 
focuses vpls lesser extent visualization systems 
visual notations interest depictions lines patterns geometric shapes form non textual parts vpl closely resemble non textual parts vpl 
brevity sake term visuals place term visual notations 
remainder examines empirical data follows 
section starts investigation discussion issues raised considers performing proper user studies 
section presents evidence re ects favorably particular visual vpl section summarizes bene ts accruing studied visual 
evidence sections include studies conducted visual programming community aswell pertinent studies broader computer science literature cognitive psychology 
cases notes studies contributions cases design aws 
interested readers consult version 
section concludes look 
issues need empirical sense scarcity empirical studies visual programming surprising 
software engineering programming languages areas historically su ered lack empirical validation 
common pattern software engineering research development system building techniques object oriented design strongly advocated absence evidence 
part situation stems di culties carrying studies projects size typical software projects 
factor resistance computer researchers adopt techniques outside traditional set computer science techniques 
re strong arguments appeared acknowledge di culty performing quantitative assessments urge software community inertia 
bottom line software engineering empirical eld 
ultimately software engineering technique theory programming judged produces cost ective results 
designing programming language involves mixture factors ideally includes understanding cognitive demands required language 
clearly visual programming ts category topics empirical techniques apply 
software engineering general visual programming su ers need empirical data :10.1.1.57.1633
surveying visual programming literature lack empirical foundation apparent majority research backed claims 
blackwell catalogs hypotheses expressed visual programming literature 
claims reason able initial hypotheses shortage supporting evidence leaves door wide open justi able attacks critics 
green claims ill digested pseudo psychology brooks predicts entire eld ultimately prove useless 
promote balanced view worth mention software engineering programming communities completely empirical tradition 
studies summarized proof fact 
workshops directed empirical study program ming including empirical studies programmers esp ieee workshops program comprehension psychology programming interest group ppig annual workshop 
empirical techniques currently exception rule 
methodological di culties researchers interested undertaking empirical studies simply assessing studies need understanding methodological issues 
fact software engineering community needs boost understanding studies hampered aws plagued previous studies 
fenton glass vessey weber brooks psychology programming provide excellent explanations biggest methodological problems 
explanations repeated exceptions 
conducting empirical user studies major areas concern theory experi mental design 
theory design phases overlap issues distinct issues raised 
understanding di erence understanding methodology empirical studies 
vessey weber succinctly explain crux theory issues theory prerequisite empirical 
researcher designs empirical study test hypothesis 
ideally hypothesis generated underlying theory 
strictly extreme empirical study performed theoretical underpinning utility study limited 
contrast theory provides guidance targeting behavior study assessing study results 
vessey weber discuss topic terms hypotheses prediction versus hypotheses understanding moran discusses topic describing points empirical theoretical spectrum 
current problem programming studies rudimentary nature relevant cognitive theory 
programming boils complex form problem solving involving ill structured design problems 
fact relatively little research ill structured problem solving general 
experimental hypotheses study formed experimental design issues come fore 
care required aspects experimental design including selection subjects choice experimental task identi cation dependent variable choice meaningful statistical techniques 
particular issue studies programming studies complex problem solving tasks problem large individual di erences 
previous studies programmers shown programmers heterogeneous population fact create di culties ects independent variable masked di erences population 
example subjects experimental design subjects divided groups di erent groups exposed di erent experimental conditions 
variability scores group large relative variability groups real ect hidden 
implications problem 
researchers need take special measures design experiments 
technique successful studies subjects experimental designs testing subject experimental stimuli study statistical analysis relative performance condition subject 
second possibly importantly large individual di erences largely unexplained raise research questions understanding distinguishes individual programmers integral part developed theory programming 
magnitude individual di erences understanding source di erences may yield real gains programming productivity 
visual programming possible ects setting agenda empirical assessment vpls develop initial theory vpls ect programming 
perusal initial studies vpls reveals studies test relatively vague hypotheses common hypothesis notations properly incorporate visuals allow people complete tasks faster purely textual notations 
hypotheses go general speculation detailed visual cause speedup ect software lifecycle 
subsection presents preliminary analysis intended provide structure discussion reasons possible ects vpls 
initial question notation plays signi cant role human performance 
researchers know problem solving performance ected way problem 
studies described show people frequently translate problem normalized internal mental representation independent original external presentation 
external representations tend constrain internal representations 
corollary people naturally cient representations 
reason speculate visual notations ect programming level 
develop theory design experiment push uncovering speci cs phenomena 
strategy times researchers studies described test visual notations relative familiar phases software lifecycle 
tested notations incorporating visuals context speci tasks design coding debugging modi cation tasks 
partitioning programming tasks comes easily follows accepted understanding programming 
alternative framework comes considering cognitive processes 
programming task cognitive skills required searching comprehension 
analogy production system larkin simon break problem cognitive skills search recognition inference 
question arises vpls ect people ability understand solve problem vpls solely ect routine skill searching 
example case vpls provide perceptual cues allow person searching piece information skip portions code examined 
bene ts case may implications audience vpls ectively 
researchers hypothesized vpls successful empowering user programming 
vpls succeed user programming reasonably surmise vpls ease problem solving burden 
contrast vpls primarily speed search proper audience trained programmers 
case vpls may practical searching may represent substantial portion programming time certain types programming 
body certain factor developments theory vpls cognitive dimensions framework put forward green petre :10.1.1.22.1477
green petre set forth set vocabulary terms known cognitive dimensions designed describe cognitive design space information structures programming languages 
astute observations provide basis theory 
cognitive dimensions early design process evaluate vpl designs 
examples cognitive dimensions apply visual programming consult evaluations vpls including labview prograph evaluation vpl pursuit evaluation spreadsheets 
developing initial theory ects vpls researchers consider 
previous studies programming notations established lan guage features large factors programming performance 
particular textual syntactic issues bottleneck software development trained programmers high level languages 
establish theory ects vpls pay examine vpls address syntactic issues 
second cases signi cant ects due notation magnitude ects may warrant enthusiasm 
experimental studies designed detect minute di erences experimental conditions 
signi cant results necessarily mean ect size large yield cost ective performance gains 
evidence underlying premise visual programming research visuals improve human machine interface catering human cognitive abilities 
currently small body empirical evidence exists back premise 
studies discussed section part body evidence 
overview table lists studies order discussed 
non programming studies people perform better organized explicit information accurate generalization explaining relative cacy alternative representations peo ple perform better information arranged consistent organized manner 
furthermore cient representations tend ones information explicit 
principles apply forms representation textual visual 
example textual list information people usually process information ectively list semantically grouped 
regard visual representations researcher section representation day list vs matrix list vs spatial map schwartz sentence vs tree vs matrix carroll thomas malhotra matrix mcguinness tree vs matrix scanlan pseudocode vs vessey weber pseudocode vs tree vs decision table taylor pascal vs fpl pandey burnett pascal vs modi ed apl vs forms baroth hartsough vs labview vee table studies results favorable visual notation 
studies discussed section listed order discussed 
entry table represents study group related studies 
table researcher column lists researcher conducted study 
column lists full study report 
section column gives section study discussed 
representation column lists textual visual notations investigation 
evidence support hypothesis organization possible visual notations allows ective displays possible textual notations 
example day studied ects alternative representations di erent domains including domains bus schedules medication instructions computer text editing 
case medication instructions day devised representations set instructions stroke patient 
instructions direct patient take distributed di erent drugs times day 
day exposed di erent subject groups di erent repre sentations 
studying instructions subjects answered questions type take times day 
study wasa subjects design 
study experiment independent variables having values combinations independent variables tested 
subjects design groups measured dependent variable 
day rst independent variable represen tation 
groups subjects medicine instructions list textual format groups dealt matrix visual format 
second independent variable memory versus comprehension 
groups instructions available test phase memory condition groups instructions consult comprehension condition 
dependent variable correctness 
list notation tablet times day tablet tablet meals tablet hours twice day tablet times day tablet day matrix notation breakfast lunch dinner day representations medication schedules 
list format actual set instructions doctor stroke patient 
adapted page permission academic press 
signi cant performance di erences resulted dimensions 
subjects matrix format correct questions subjects list correct questions 
special note subjects comprehension group errors subjects list representation 
discussing results day matrix representation facilitates learning matrix allows dimensions information emphasized simultaneously case visibility medications times day 
list day speculates clear extended list format produce comparable improvements performance take longer achieve performance opportunity harmful errors time 
day study computer text editing example visual textual 
subjects observed see quickly learn small set elementary cursor movement commands ciently apply commands 
subjects study designed independent variables representation symbol de nition match 
representations list textual spatial map visual see 
symbol de nition match dimension relates principle stimulus response compatibility germane current discussion 
dependent variables correctness ciency 
day took account subjects prior experience editors 
study involved memorization phase followed testing phase 
memorization phase subjects studied assigned representation minutes 
testing phase involved problem solving task problems requiring subject move cursor location indicated list notation ahead line back line forward line previous line sample problem spatial map notation previous line ahead back forward line line line day representations text editing commands 
sample problem shows subjects saw testing phase simpli ed computer screen dashes indicate possible cursor locations box represents current cursor position asterisk represents goal position 
adapted page permission academic press 
new position 
time allotted complete problem solving xed minutes 
correctness problem solving section subjects spatial map signi cant advantage 
scored correct versus correct scored groups list format 
prior knowledge editors ect correctness scores 
interesting correctness results analysis problem solving ciency 
subjects solved particular problems correctly ciently 
day measured ciency terms excess keystrokes 
problems excess keystrokes possible subjects list format averaged excess keystrokes correctly solved problems spatial map averaged excess keystrokes 
contrast correctness results prior knowledge editors ected ciency 
subjects low prior knowledge averaged excess keystrokes high knowledge averaged 
day remarks subsequent expands initial study command set problem solving di cult 
initial results magni ed expanded study number excess keystrokes subjects list format times spatial map 
sum day text editing supports hypotheses 
visual representation di erence small sized problems 
second bene visual representation grow di culty problem grows 
day studies give weight principle visuals facilitate presentation informa oldest patricia nd generation nd billy oldest peter oldest john tom rd nd nick th jane rd susan nd mary tree notation st generation th anne rd robert oldest sheila oldest margaret nd michael nd richard rd paul th sarah rd david th kathy th elizabeth mcguinness tree representation family relationships 
actual version subjects second generation laid level page 
adapted page permission psychonomic society 
tion consistent explicit organized fashion 
similarly schwartz report matrix outperformed sentence rewrites tree diagrams solving deductive reasoning problems 
schwartz add superiority matrix grew problem size grew 
carroll thomas malhotra conducted performance study subjects asked solve relatively complex design problems 
subjects solved isomorphic problems 
experiment subjects performed better solving spatial isomorph ce layout problem opposed temporal isomorph scheduling problem 
second experiment performance di erences mitigated subjects trained matrix representation 
notations superior absolute sense delving deeper questions visuals ect problem solving mcguinness con study comparing visual representations 
mcguinness study involves principle notations probably superior absolute sense relation speci tasks mcguinness tree notation matrix notation encode information family relationships figures 
relationships included parent child cousin relationships set family members 
family information sets principle known match mismatch hypothesis discussed section 
nd generation oldest nd rd th oldest john patricia billy tom jane matrix notation st generation nd mary peter nick susan anne rd robert sheila michael paul kathy th sarah margaret richard david elizabeth mcguinness matrix representation family relationships 
adapted page permission psychonomic society 
questions devised 
set focused cousin relationships posed questions go vacation 
set concentrated sibling relationships asked questions inherit house 
correct answers restricted rules exceptions 
rule speci ed sex birth ordering older younger valid vacation companion 
exceptions list named people willing go vacation 
question sets problem solving largely matter searching knowledge base 
mixed factors design involves subjects subjects variables 
independent variables relevant current discussion representation subjects variable number exclusions subjects variable 
subjects assigned groups tree group matrix group 
groups memorized representation testing phase answered sets questions 
dependent variable time needed answer question 
examine results consider performance question sets separately 
tion questions ects independent variables signi cant 
representation dramatic impact 
subjects learned tree notation took twice long subjects learned matrix 
speed accuracy tradeo furthermore number exclusions signi cantly ected performance 
fact signi cant inter action number exclusions representation questions exceptions increasingly di cult subjects tree notation 
performance di erential notations started approximately seconds exception risen seconds exceptions 
mcguinness summarizes questions di cult cient representation important 
contrast inheritance questions representation signi cantly ect performance 
number exclusions ect performance identically representations 
mcguinness interprets contrast re ecting di erences family ties mapped notations 
tree matrix contained information matrix allowed stress dimensions simultaneously 
matrix tree provided fairly direct representations sibling relationships matrix simultaneously allowed direct access sort cousin information required answer vacation questions 
probe deeper mcguinness queried subjects answered questions 
subjects described process mentally stepping notation systematic fashion crossing ineligible elements 
descriptions mcguinness proposed way quantify mental ort required questions 
mcguinness de ned concept mental step access notation element 
mcguinness mental steps required question notations 
evidence support mental step hypothesis mcguinness conducted second study 
mental step analysis valid certain changes information mappings result predictable changes response times 
mcguinness performed study altering way family information encoded notations cousin relationship stressed altered notations sibling relationships stressed matrix 
sets questions step counts predicted inheritance questions di cult tree notation vacation questions yield signi cant di erences 
results study match predictions strengthening idea notations mappings cient relation speci processing demands 
programming studies flowcharts notation control ow historically main visual tool available programmers owcharts 
previous studies focused owcharts increase comprehension compared standard program text 
example scanlan scanlan devised experiment detect di erences comprehension conditional logic expressed structured pseudocode versus structured owcharts 
testing procedure entailed subjects viewing conditional logic answering questions boolean states required trigger certain actions 
independent variables representation algorithm complexity 
study algorithms simple medium di cult complexity 
algorithms pseudocode variation total stimuli 
study subject design meaning subject encountered independent variable values performed tasks 
apparatus experiment designed sensitive timing data isolated 
speci cally dependent variables time taken comprehend algorithm time spent answering questions algorithm number times subject brought algorithm view answers questions correctness subjects con dence answers 
subjects time needed answer questions 
subjects mis management information science students 
save exception structured owcharts signi cant advantage dependent variables levels algorithm complexity 
sensitive measure time needed comprehend algorithm 
scanlan surprised nd owcharts di erence simple case 
furthermore bene owcharts increased algorithms complex 
ratios time needed comprehend pseudocode compared owcharts simple medium complex cases 
results dramatic considering students pseudocode produced signi cantly errors 
assessing scanlan results observe scanlan study designed isolate pos sible ects independent variables 
scanlan carefully isolated timing data results studies including summarized term comprehension refer subjects performance answering questions segment programming code opposed creating solutions writing segment code cases distinguish speci cognitive skills comprehension versus searching done section 
pseudocode notation proc green steam chop endif fry endif endif proc hard grill endif bake boil green steam grill flowchart notation boil fry chop hard scanlan representations conditional logic 
pair gives di erent examples medium level algorithm complexity 
adapted permission publisher page ieee 
indicate prior studies owcharts awed extent ects representa tions may masked discussion raised section 
hand scanlan stimuli simple sense actions branches conditional statements word action verbs grill bake 
conditions word adjectives 
scanlan structured owcharts illuminating condi tional logic owcharts detailed actions typical real programs involving boolean expressions arithmetic expressions variable dependencies 
programs involve iter ation 
furthermore questions asked control ow type information owcharts highlight 
particular pseudocode layout may biased study bake pseudocode programming style spreading statement lines may pseudocode examples harder read compared compact professional programming styles 
scanlan study suggest owcharts bene cial ect certain tasks 
similar results occurred studies vessey weber taylor 
vessey weber compared decision trees pseudocode decision tables task expressing conditional logic 
terms time needed perform experimental tasks decision trees performed equal better pseudocode outperformed decision tables 
taylor compared pascal fpl vpl aimed programmers task comprehending small code segments 
programmers took signi cantly time answering questions fpl code segments 
reporting study taylor provide example questions clear complexity code segments 
green petre bellamy note regrettably taylor report experimental procedure detail reader fully certain shown 
page 
forms notation matrix manipulations currently study conducted pandey burnett stands strongest controlled study favorable vpl 
study particularly interesting compared textual programming languages non vpl 
speci cally pandey burnett tested subjects performance vector matrix problems representations pascal modi ed form apl vpl forms 
experiment subject design 
independent variable representation languages dependent variable correctness 
subjects cs students experience pascal experience apl experience forms 
experiment consisted lecture followed testing phase 
lecture subjects went vector matrix problems shown answers languages 
concepts needed vector matrix manipulations language 
apl modi cations alternate syntax english opposed apl special mathematical symbols left right evaluation rule expression evaluation 
pascal procedure fib var vector integer var integer forms modified apl temp take temp temp append temp dimension pandey burnett representations vector matrix manipulation tasks 
trio shows pascal modi ed apl forms solutions problem computing rst elements fibonacci sequence 
adapted permission publisher page ieee 
furthermore subjects copies lecture overheads lecture began take additional notes refer copies notes test 
studies memorization way measuring ect representation pandey burnett wanted note improve learning wanted remove memorization factor performance 
testing phase subjects created solutions matrix problems languages total solutions 
problem append compatibly shaped matrices 
compute sequence fibonacci numbers 
solutions done 
subjects allotted minutes solution 
correctness assessed assigning solution rank point ordinal scale 
correctness semantics syntax errors ignored 
results surprising 
forms stood problems 
append problem forms apl outperformed pascal 
particular relevance fact apl built append operator lecture 
fibonacci problem forms pascal outperformed apl 
problems forms solutions completely correct compared apl solutions pascal solutions 
results surprising go ways 
problems short simple leading authors initially fear ceiling ects occur experimental di erences masked task simple 
second subjects prior experience pascal suspect bias pascal 
subjects previously seen written fibonacci solution pascal forms performed comparably 
labview participatory programming study section industry observational study measurement technology center mtc group supports jet propulsion laboratory 
authors baroth hartsough claim productive vpls real programming situations 
assessment stems results study labview observations culled years mtc labview vee building test measurement systems 
labview vee commercial vpls data ow paradigm 
targeted user programming enable scientists engineers write data acquisition analysis display control applications 
study involved parallel development telemetry analyzer development teams goal discern labview compare conventional text programming 
labview development team compared simultaneous ort text team 
development teams received requirements funding amount time months complete project 
months labview team advanced team 
team complete requirements labview team gone original requirements 
labview performance convinced people mtc viability visual programming 
consequently labview group awarded additional projects 
baroth hartsough attribute productivity bene ts vpls increased communication customer developer turn attribute visual syntax vpls 
particular customers engineers scientists possess limited programming experience comfortable data ow diagrams 
labview vee programs visually familiar mtc customers 
baroth hartsough consistently nd customers understand process labview vee code albeit necessarily details code 
baroth hartsough explain accessibility visual syntax allows customer involved development process 
communicating solely formal written requirements documents meetings customer developer jointly develop parts system 
baroth hartsough report customers understand data ow diagrams suggestions point errors 
customer sit developer system building especially initial phases inevitable questions exact nature requirements arise 
fact participatory prototyping style labview team seen confounding factor study 
study labview team met frequently interactively coded customer 
team followed classical approach worked initial requirements meet customer demonstrated system month time period 
results study possibly biased favor labview team performed better rapid prototyping strategy met frequently customer 
hand study intended tightly controlled experiment 
conclude speci visual aspects labview study helpful ways 
study evidence industry bene cial commercial vpls real programming situations 
second baroth hartsough observations customers easily understood labview vee code yields direction research 
summary evidence people design problem solving situations perform better information consistent organized manner 
furthermore cient representations tend ones information explicit 
guidelines apply notations including textual ones 
studies section indicate compared textual notations visual notations provide better organization information explicit 
properly visuals result quanti able performance bene ts 
studies showed visuals outperforming text time correctness 
notations probably absolute sense 
green writes notation absolutely relation certain tasks 
situation observable mcguinness study tree versus matrix notation 
observed studies 
matrices mcguinness study outperformed trees certain situations trees vessey weber study consistently outperformed decision tables matrices 
particular comparison studies possibility explains matrix helpful characteristic systematic access 
mcguinness study matrices faster trees question set allowed subjects search matrix consistent row row column column fashion progressed element adjacent element 
systematic access pattern missing vessey weber decision tables parts mcguinness study systematic pattern adjacent elements equaled trees 
cases matrices failed outperform trees 
noteworthy summarized studies largely dealt visuals representing nonspatial concepts cooking instructions scanlan study 
studies counter speculation visuals bene cial representing objects concrete counterparts real world 
idea arise observation highly successful uses visuals deal concrete spatial objects 
example successful diagrams help students solve physics problems shows larkin simon rope pulley example 
example visual basic visuals build guis essentially spatial objects 
idea stem discussions raymond speculates general programming deals discrete analog information amenable useful visualization 
hand bene visual representations grows size complexity problem grows 
trend observed summarized studies day editing study schwartz study mcguinness study scanlan study 
vpls may possibly play important role traditional programming problems usually larger problems controlled experiments 
hand visuals yield better performance small sized problems 
ect noted summarized studies day editing study scanlan study taylor study pandey burnett forms study 
vpls may play important role user programming problems usually smaller problems encountered professional programmers 
baroth hartsough describe participatory programming style users researcher section representation wright reid prose vs short sentence vs tree vs matrix shneiderman fortran vs fortran ramsey atwood pdl vs van curtis documentation formats green petre bellamy pseudocode vs labview moher pseudocode vs petri net lawrence text vs text algorithm animation stasko lewis transparencies vs algorithm animation algorithm animation hendry green spreadsheet brown gould spreadsheet table studies results unfavorable visual notation :10.1.1.57.1633
studies discussed section listed order discussed 
entry table represents study group related studies 
table researcher column lists researcher conducted study 
column lists full study report 
section column gives section study discussed 
representation column lists textual visual notations investigation 
programmers closely 
baroth hartsough correct advantage vpls lies accessibility certain classes 
questions vpls understandable users certainly directions research 
evidence visuals simply poorly designed inappropriate task 
visuals provide bene programming process 
studies section indicate question vpls ective realistic programming remains unanswered 
table lists studies order discussed 
non programming studies notations superior absolute sense mcguinness study wright reid performed study suggests represen tation may elicit di erent ects di erent circumstances 
interested relative power prose short sentences decision trees matrices problem solving situations 
compare representations wright reid devised series rules dictating appropri di erent space vehicles space travel 
factors uencing space vehicle decision included time limitations cost limitations length journey 
wright reid equivalent versions rule base representations 
wright reid tested representations mixed factors design 
decision algorithm representations subject asked series problems requiring subject choose mode space travel appropriate problem conditions 
questions asked stages questions stage 
stage subjects rules available consult 
start stage rules removed warning 
stage subjects told memorize rules preparation remaining questions subjects minutes learn rules rules removed 
independent variables study representation subjects memorization subjects question di culty subjects 
question di culty refers question gave required facts directly indirectly type question considered complicated 
dependent variables time correctness 
prose format consistently error prone slower non prose options 
interesting results involved non prose options 
stage interaction representation non prose options question di culty 
easier problems signi cant di erences error rates non prose formats table yielded signi cantly faster times format 
harder problems decision tree table gave signi cantly lower error rates short sentences prose 
ects changed subjects memory 
stages signi cant accuracy di erences representations 
distribution error rates trials suggests interesting trend 
course answering questions mean percent error tree table deteriorated trials performance prose short sentences improved 
similar distinction textual visual representations occurred timing data 
wright reid speculate subjective reorganization needed memorize textual material gave rise improved performance prose short sentences 
event mcguinness study study indicates ect notation relative task performed 
question visuals appropriate programming di cult programming involves cognitive tasks 
di culty lies ascertaining tasks account signi cant proportion programming ort vpl bene ts processes 
programming studies flowcharts documentation control ow owcharts historically primary visual tool available programmers studies done owcharts visual programming constructs 
early studies shneiderman ramsey atwood van undertaken time owcharts considered notation documentation words considered supplemental textual source code 
bene owcharts aid textual code 
shneiderman study series experiments testing ects documentation novice programmers comprehension composition debugging modi cation tasks 
yielded signi cant di erences non groups 
assessing study consider design aws 
example discuss aws shneiderman 
primary aw concerns way time handled 
experiments students time wanted complete investigators measure time dependent variable 
debugging experiment time xed groups time explanation 
scanlan opinion time needed comprehend algorithm sensitive important measure ectiveness representation page 
light design aws possible nd strong implications shneiderman results 
study raise question owcharts helpful full edged programming tasks 
ramsey atwood van study phased experiment cs grad students designed implemented assembler 
goal study compare program design languages owcharts notations detailed design phase software development 
main reported result signi cantly better quality detailed designs pdl 
authors conclude largely result probably preferable design notation 
reason subjects tended include algorithmic detail designs owcharts force person compress information constrained space 
designer programmer probably adopt space saving habits non mnemonic variable names result lower quality designs 
contrasting opinion curtis points signi cant skill di erence groups subjects may confounded results 
aspects study warrant attention 
control ow information program overriding import owcharts outperform 
second hypothesized space constraints owcharts serious argument owcharts 
currently thorough de nitive value owcharts comes form controlled experiments performed curtis colleagues 
studies curtis investigated ectiveness owcharts documentation tool 
studies researchers undertook systematic strategy identify speci characteristics notation responsible measured ects 
opposed comparing representations rst identi ed primary dimensions capable categorizing wide range documentation notations 
rst dimension symbology includes possibilities unconstrained text natural language constrained text icons 
symbology dimension measures succinctness notation 
second dimension spatial arrangement values sequential branching hierarchical 
spatial arrangements di er extent notation highlights execution paths case control ow program 
illustrates dimensions 
combining possibilities symbology spatial arrangement curtis colleagues created documentation formats 
shows example notations 
tested formats context comprehension coding debugging modi cation tasks 
basic experimental design experiments 
independent variables symbology spatial arrangement type program documented 
total experimental conditions 
program type refers di erent programs experiment curtis chose engineering program complex algorithm business program complex data structure program complex algorithm data types symbology types spatial arrangement natural language constrained language replace contents copy item item item contents item item item sequential branching hierarchical curtis dimensions characterize documentation notations 
symbology dimension concerns layout program level detail individual words 
spatial arrangement dimension concerns layout program level program statements statements juxtaposed 
adapted permission publisher page elsevier science 
read input large read input hierarchical notation large large curtis hierarchical notation 
adapted permission publisher page elsevier science 
structures 
programs coded roughly lines fortran 
dependent variables varied task time complete task measured cases 
experiment subject performed tasks task involving experimental conditions 
participants experiments professional fortran programmers minimum years professional experience 
experiments average amount professional experience years 
experiments results fairly consistent 
furthermore re sults stable experiments curtis argue results truly re ect characteristics representations studied 
symbology consistent ects comprehension coding debugging experiments modi cation study symbology signi cant data trends consistent results 
experiments symbology responsible variance dependent variable 
results largely re ect role natural language 
prose ine ective symbology format tasks constrained language equivalent 
spatial arrangement small ects observed occurred situations control ow information factor task 
partic ular signi cant ects spatial arrangement comprehension modi cation tasks accounted total variance 
results largely due branching arrangement improved performance tasks control ow important 
putting symbology spatial arrangement constrained sequential representation typically outperformed forms documentation 
format essence pdl 
runners constrained symbology branching arrangement 
far largest ect individual di erences accounted third half performance variations 
curtis consider magnitude impact individual di erences compared impacts experimental variables alarming 
results de nitely keeping observed trend individual di erences account large percentage performance variation software productivity 
labview match mismatch hypothesis turning focus away owcharts experimental studies vpls solid replicated results 
green petre researchers undertaken study non vpl 
study green petre labview textual code test comprehension conditional logic 
green petre study simply comparison representation comparison context gilmore green match mismatch hypothesis speci es problem solving performance depends structure problem matched structure notation 
gilmore green match mismatch hypothesis somewhat stronger statement basic principle bene ts notation relative particular task 
match mismatch hypothesis states notation highlights kinds information obscuring 
match mismatch hypothesis predicts notation perform relatively poorly certain tasks 
gilmore green research established speci instance principle involving textual forms conditional logic 
particular green identi ed conditional notations forward notation statements common procedural programming languages backward notation called statement production system notation 
match mismatch gilmore green observed textual forms conditional logic notation facilitates answering forward questions action results conditions notation facilitates answering backward questions conditions exist evoke speci ed action 
labview happens provide notations expressing conditional logic 
gates notation uses familiar idiom circuit diagram 
boxes notation uses unusual method showing logical path time user toggle buttons see various paths conditional logic 
green petre felt notations correspond forward boxes notation backward form gates notation conditional notation 
test speculation green petre decided study labview notations forward backward questions hypothesis correct match mismatch forward notation high wide deep deep tall tall tall deep wide long thick thick thick long thick thick thick long wide high tall tall tall high backward notation honest tidy lazy sluggish laugh honest tidy lazy sluggish honest tidy nasty greedy nasty greedy bellow honest tidy nasty greedy honest tidy nasty greedy honest sluggish shout honest sluggish green textual forward backward representations conditional logic 
ifthen notation facilitates answering questions require working inputs conditions outputs actions 
notation facilitates working outputs inputs 
adapted permission green 
result 
plus green petre wanted compare labview performance textual notations 
devised study involving parts 
part subjects shown programs question forward backward question program 
part subjects tested di erent questions 
words subjects pairs programs pair asked programs functionally equivalent 
independent variables study notation visual versus textual form conditional expression forward form versus backward form type question forward question versus backward question subjects factors 
dependent variables correctness time 
total subjects took part experienced programmers 
furthermore subjects group labview months remaining group experienced electronics schematics 
looking results time sensitive measure dependent variables 
part signi cant ects aspects study 
match labview gates representation conditional logic 
gates perform boolean operations 
input conditional logic ows left right 
reprinted permission green 
mismatch hypothesis labview notations exhibit expected ects 
visual versus textual comparison visuals slower text conditions 
fact text outperformed labview subject subjects mean visual versus text times compared 
mean times seconds text compared seconds labview 
analysis indicates notation accounts total variance time data 
part green petre nd signi cant match mismatch behavior 
nd evidence visual notation causing longer response times 
aw study noted 
green petre note part group subjects received di erent comparisons pairs composed text program visual program 
full range data necessary contrast performance visual versus textual representations available group subjects 
aw corrected group subjects 
additionally researchers raise point contention citing static nature stimulus programs study second aw 
speci cally labview boxes representation conditional logic 
notation interactive ina sense 
see paths true false statement user clicks statement true false button toggle views true false arms statement 
reprinted permission green 
pandey burnett baroth hartsough believe subjects fully interact stimulus programs study biased labview 
belief rests idea bene ts vpls stem responsive nature characteristic vpls 
green petre study completely clear issue applies boxes notation de nition interactive limited degree 
case visual programming community needs controlled studies green petre study separate ects visual primitives vpls additional interactive aspects vpls environments 
way researchers learn visual aspects language add bene ts interactive textual language 
green petre study quite illuminating 
match mismatch hypothesis experiment 
magnitude match mismatch ect anticipated 
green petre struck di culties created visual notations especially experience level subjects fact labview programs laid accepted style conventions expert circuit designers 
di culty visual notations strongest ect observed study 
labview petri nets secondary notation subsequent articles green petre report additional observations labview study raise topics 
speci cally argue secondary notation accounts large part un readability visual notation ability read visual notation associated secondary notation dependent training 
secondary notation refers layout visual program includes techniques clustering white space known technique textual programming indentation 
green petre coined term secondary notation perceptual aspects programming style order emphasize layout cues usually formal part language de nition uential determining comprehensibility programs written language 
green petre argument observational studies watched expert electronics designers observations taken labview study 
observational studies indications experts distinguished novices ability secondary notation 
labview study green petre similar observations 
statistically signi cant performance di erences group group subjects green petre observed behavior led suspect di erence expertise levels groups 
group subjects displayed behavior green petre attribute relative 
group group subjects approached study questions fairly consistently subjects tended strategies choose strategies style problem 
contrast group subjects inconsistent strategies point strategies mid task 
group recognized took advantage sub term groupings group unaware secondary notation 
sum expertise overcome labview notations consistently slower text 
subjects performance hint importance secondary notation expertise need study topics 
interestingly green petre results explored moher study experimental setup compare text petri nets 
moher lazy bored tired nested petri net scream sleep talk moher forward representation conditional logic 
petri net notations allow inhibitor arcs indicated small circles drawn place arrowheads normally terminate arcs 
adapted page permission ablex 
interested petri nets show promise visual basis vpl 
interested comparing results green petre bellamy results green petre bellamy reports preliminary results scores group subjects green petre 
toachieve ends moher experimental design software testing data collection stimulus programs questions employed green petre bellamy study 
similarly independent dependent variables 
subjects faculty members advanced graduate students experienced conditional logic petri nets 
di erence moher labview study course choice visual representation 
moher designed di erent petri net notations figures 
designed nested net form felt corresponded statement forward form designed distinguished net articulated net forms analogs gates notation statement backward forms respectively 
important aspect notations study summarized conditional logic expressed petri net notations di ers secondary notation 
visual representations contrasted studies di ered visual shapes syntax bored lazy tired distinguished petri net scream sleep talk sleep scream talk articulated petri net lazy tired lazy bored bored lazy tired lazy tired moher backward representations conditional logic 
distinguished petri net notation conditions arranged vertically left separately actions 
actions grouped vertically right 
articulated petri net notation action gets subnet 
conditions arranged right repeated needed subnets 
adapted pages permission ablex 
semantics attributed shapes petri net notations di ered set visual objects arranged screen 
moher rst investigators target directly experiment ects secondary notation visual programming notations 
notable aspect notations reasoning articulated net design 
moher observed notation green petre bellamy may advantage 
notation articulates possible action separately repeated conditions contrast gates distinguished net notations integrated format conditions cost overlapping lines 
counter possible advantage moher devised articulated net notation 
moher study yielded signi cant results manifested time data 
part match mismatch hypothesis replicated textual notations petri nets 
petri nets faster backward questions forward questions 
addition petri nets consistently performed worse equal text counterparts 
strongest case petri net notation text notations came articulated nets response times articulated nets signi cantly di erent notation 
interestingly petri nets compared favorably scores achieved labview notations green petre bellamy study moher subjects outperformed labview group subjects considering faster times articulated net 
part moher pairs program text form graphic form data necessary comparisons text visual dimension 
part data exhibit signi cant match mismatch pairs response times reduced subjects dealt matched pairs pairs programs forward forms backwards forms compared unmatched pairs 
assessing moher study note petri nets designed moher particular characteristics moher represented conditional logic deterministic petri nets yield single output token action input tokens conditions 
consequently study probe qualities normally associated petri nets common role modeling speci cation tool complex concurrent non deterministic systems 
results shed light topics 
results concur green petre results match mismatch hypothesis account di erences seen experiment 
second results uncover situation comprehension dependent secondary notation 
cases text petri nets 
articulated nets performed identically statements 
related irony nested nets isthe layout style traditionally considered best petri nets prescribes minimizing wire crossings performed worst petri net forms 
algorithm animation pedagogical aid handful empirical studies evaluating algorithm animation conducted focused animations pedagogical tool 
despite popular enthusiasm idea algorithm animations studies conclusive evidence recommend 
example stasko lewis examined ects algorithm animation animation heap algorithm 
stasko lewis studied students subjects design measure learning textual description versus learning text accompanied animation 
student group exposed experimental conditions groups answered questions comprehension test 
independent variable presence animation dependent variable correctness scores comprehension test 
signi cant di erence occurred comprehension test scores 
similar results occurred subsequent study conducted lawrence stasko 
followup experiment complex design evaluate ects algorithm animation classroom setting manner allows direct student involvement learning process 
animation di erence comprehension test scores 
study isolated static versus dynamic aspect animation results relevant question chosen visual notation bene cial 
groups exposed animation sequence transparencies snapshots animation contrast textual visual representation earlier study 
view failure empirically validate animation advocate careful meta analysis existing looking especially factors produced false neg ative results 
meta analysis identi ed experimental design issues may account previous disappointing results 
factors general experimental issues remaining pinpoint speci aspects animation systems may confound study results 
researchers conducting empirical study consider issues designing studies 
alternatively algorithm animation community consider repeated negative results mean animation yields improvement standard teaching techniques 
spreadsheets problem visibility arguably successful vpl possibly successful programming language gen eral spreadsheet 
due success spreadsheet captured attention language designers wish reuse successful features programming languages 
correspondingly papers written strengths spreadsheet model 
literature largely composed expert opinion 
existing empirical studies observational study hendry green stands premise language designers need shift focus weaknesses spreadsheets 
hendry green stress programming language design point design space position represents decisions design process 
usually decisions attempt facilitate certain kind programming decisions favoring certain cognitive tasks result tradeo desirable cognitive aspects 
hendry green argue overlooking weaknesses spreadsheets fosters shallow understanding spreadsheets turn blocking avenue improvement 
hendry green observational study consisted interviews spreadsheet users 
subjects users computers part everyday 
interviews subjects asked experiences creating comprehending spreadsheets asked explain spreadsheets worked 
subjects spreadsheets explained cover wide range spreadsheet subjects worked avariety ofwork environments domains spreadsheets ranged size pages length complexity solely simple formulas formulas containing cell subject matter nancial reporting complex models global warming time create taken hours create developed years 
interviews subjects echoed commonly held beliefs concerning bene ts spread sheets especially idea spreadsheet paradigm supports quick easy setup spread sheets 
interviews brought di culties subjects faced spreadsheets stemming surprisingly simple sounding tasks 
larger problems cur rent spreadsheets poor visibility 
refers manner formulas cell dispersed spreadsheet cells 
ect norm spreadsheet packages formulas hidden interface 
visibility problem creates di culties users locating cell dependencies building global vision spreadsheet debugging 
hendry green ndings regarding poor visibility consistent observations earlier study conducted brown gould 
study brown gould observed experienced spreadsheet users created spreadsheets 
brown gould subjects quite con dent spreadsheets contained errors spreadsheets contained errors 
majority errors occurred formulas included mistakes incorrect cell 
result sets observations hendry green brown gould propose spreadsheet visibility debugging tools improvement standard spreadsheet interface 
short hendry green study valuable reasons 
study provides list speci weaknesses warrant attention 
second particulars hendry green study underscores value empirical study means improvement 
notwithstanding success spreadsheets hendry green argue consider weaknesses major reason increased understanding lead improved language designs 
summary evidence cacy notation depends task performed 
point illustrated section 
section raised slightly stronger principle called match mismatch hypothesis 
green petre study moher study support hypothesis 
strong result wright reid study hints importance considering ects notation range tasks 
question vpl research range information required programming vpl highlight important information practical bene 
hendry green observational study spreadsheets underscores lesson match mismatch hypothesis 
marketplace success spreadsheet clear spreadsheet useful spreadsheet facilitate cognitive tasks 
addition hendry green remind language designs situated complex design space decisions design process unwittingly impede certain cognitive tasks 
empirical study help shed light situations acting means improvement 
members vpl community dismiss studies owcharts irrelevant current day vpls argument current vpls owcharts 
studies completely ignored 
obvious applicability vpls visual representations illustrate control ow 
studies direct bearing vpls owcharts pict fpl 
studies may germane vpls owcharts se designed illustrate control ow program category includes tree structured notations exotic designs 
implication studies control ow comprise large part programming di cult 
note curtis study strong role individual di erences played experiment 
results individual di erences accounted typically third half variability seen dependent variables 
mentioned impact individual di erences recurring theme empirical studies programming ects vpls di cult pinpoint 
issue leads remember distinction statistical signi cance realized bene magnitude impact 
important issue vpl statistically signi cant ect question ect size large practical interest 
note ramsey atwood van study space saving techniques brings topic deutsch limit 
term deutsch limit refers relatively low screen density visual notations compared textual notations 
long recognized issue visual programming community fuels speculation vpls fail practical 
issue involves visuals ect nature text conjunction visuals vpls allow visual elements screen time 
secondary notation issue textual visual notations 
case text range secondary notation techniques relatively limited due text symbolic nature basic serial layout 
visual notations secondary notation potentially richer 
green petre assessments correct novice users immediately master secondary notation vpls 
remains seen novice users equivalent greater problems secondary notation visual opposed textual programs 
issue especially troublesome vpls aimed users 
di culty studies vpls date stemmed experimental design problems 
reasoned identi cation independent variable careful choice valid depen dent variable clear notion task experiment important success study 
particular attention paid decisions relative poorly understood area 
far vpl studies common dependent variables time correctness scanlan thinks comprehension time sensitive ects visual notations 
algorithm animation studies group uncovered bene ts animations learning algorithms 
truly re ect fact animations er bene ts teaching techniques 
contrast feel premature 
meta analysis existing animation studies emphasizes possibility prior studies missed ects animations 
example stasko lewis study lawrence stasko study measures ectiveness comprehension test scores 
ects animation seen study examined time needed learn algorithm 
collection results shows visual representation improve human performance 
fact remains vpl community lacks founded cognitive empirical argument support vpls 
strategies action 
course action continue developing vpls assumption vpl designs naturally evolve appropriate directions users recognize worth 
strategy worked spreadsheets spreadsheets wildly successful despite shortage validation studies 
second strategy devote resources empirical testing 
decade research vpl community handful vpls starting points study 
solid evidence may crucial factor continuation vpl research area met sharp criticism 
current context programming software engineering struggling move craft actual engineering discipline scienti method 
acknowledgments gratitude goes doug fisher margaret burnett laura jonathan zweig carefully reviewed drafts 
appreciation goes chang anonymous referees 
constructive comments 
burnett baker carlson yang van zee 
scaling problem visual programming languages 
ieee computer march 
whitley 
visual programming languages empirical evidence 
tech nical report cs department computer science vanderbilt university nashville tn october 
fenton glass 
science substance challenge software engineers 
ieee software july 
glass 
software research crisis 
ieee software november 
fenton 
software measurement necessary scienti basis 
ieee transactions software engineering se march 
green 
guide visual programming 
interfaces 
british computer society human computer group 
pandey burnett 
easier write matrix manipulation programs visually textually 
empirical study 
proc 
ieee symposium visual languages vl pages 
price baecker small 
principled taxonomy software visualization 
visual languages computing 
green petre 
visual programs harder read textual programs 
proc 
sixth european conference ergonomics ecce pages 
vessey weber 
structured tools conditional logic empirical investigation 
communications acm january 
blackwell 
metacognitive theories visual programming think doing 
proc 
ieee symposium visual languages vl pages september 
brooks 
silver bullet essence accidents software engineering 
ieee computer april 
appeared 
editor information processing pages elsevier science publishers 
vessey weber 
research structured programming empiricist evaluation 
ieee transactions software engineering se july 

psychological study programming 
acm computing surveys march 
brooks 
studying programmer behavior experimentally problems proper method ology 
communications acm april 

hoc green gilmore editors 
psychology program ming 
academic press london 
moran 
guest editor applied psychology user 
acm computing surveys march 
larkin simon 
diagram worth words 
cognitive science 
green petre 
usability analysis visual programming environments cognitive dimension framework 
visual languages computing 
green 
cognitive dimensions notations 
people computers proc 
british computer society hci pages september 
green myers 
visual programming visual domain case study cognitive dimensions 
people computers ix proc 
british computer society hci pages 
hendry green 
creating comprehending explaining spreadsheets cognitive interpretation discretionary users think spreadsheet model 
int 
human computer studies 
day 
alternative representations 
bower editor psychology learning motivation volume pages 
academic press 
schwartz 
ect problem size representation deductive problem solving 
memory cognition 
schwartz 
representation deductive problem solving matrix 
experimental psychology 
schwartz 
modes representation problem solving evolved half solved 
experimental psychology 
carroll thomas malhotra 
presentation representation design problem solving 
british psychology 
mcguinness 
problem representation ects spatial arrays 
memory cognition 
scanlan 
structured owcharts outperform pseudocode experimental comparison 
ieee software june 
taylor 
graphical vs textual representation empirical study novices program comprehension 
empirical studies programmers second workshop pages 
baroth hartsough 
visual programming real world 
burnett gold berg lewis editors visual object oriented programming concepts environ ments chapter pages 
manning publications 
green petre bellamy 
comprehensibility visual textual programs test match mismatch conjecture 
empirical studies programmers fourth workshop pages 
raymond 
characterizing visual languages 
proc 
ieee workshop visual languages vl pages 
wright reid 
alternatives prose expressing outcomes complex contingencies 
applied psychology 
shneiderman mayer mckay heller 
experimental investigations utility detailed owcharts programming 
communications acm june 
ramsey atwood van 
flowcharts versus program design languages experimental comparison 
communications acm june 
curtis sheppard bailey bailey boehm davis 
experimental evaluation software documentation formats 
systems software 
petre 
looking isn seeing readership skills graphical programming 
communications acm june 
petre green 
learning read graphics evidence seeing information display acquired skill 
visual languages computing 
moher mak blumenthal 
comparing textual graphical programs case petri nets 
empirical studies programmers fifth workshop pages december 
lawrence stasko 
empirically evaluating animations teach algorithms 
proc 
ieee symposium visual languages vl pages october 
stasko lewis 
algorithm animations assist learning 
ical study analysis 
proc 
interchi conference human factors computing systems pages april 

testing ectiveness algorithm animation 
proc 
ieee symposium visual languages vl pages september 
hendry green 
visual description language spreadsheets 
visual languages computing 
brown gould 
experimental study people creating spreadsheets 
acm transactions ce information systems july 
gilmore green 
comprehension recall miniature programs 
int 
man machine studies 
green 
conditional program statements comprehensibility professional programmers 
occupational psychology 
glinert 
exploring general purpose visual alternative 
visual languages computing 
miyamoto murakami oki 
design speci cation japan tree structured charts 
ieee software march 

technology soviet visual programming environment 
visual lan guages computing 
doherty zorn 
formal semantics control completely visual programming language 
proc 
ieee symposium visual languages vl pages october 

