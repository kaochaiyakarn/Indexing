scale distributed systems clifford neuman information sciences institute university southern california years scale factor increasing importance design distributed systems 
scale system dimensions numerical geographical administrative 
numerical dimension consists number users system number objects services encompassed 
geographical dimension consists distance system scattered 
administrative dimension consists number organizations exert control pieces system 
dimensions scale affect distributed systems ways 
affected components naming authentication authorization accounting communication remote resources mechanisms users view system 
scale affects reliability system scales numerically likelihood host increases scales geographically likelihood hosts communicate decrease 
scale affects performance numerical component affects load servers amount communication geographic component affects communication latency 
administrative complexity affected scale administration difficult changes frequent require interaction different administrative entities possibly conflicting policies 
scale affects heterogeneity size system grows pieces identical 
looks scale affects distributed systems 
approaches taken existing systems examined common aspects highlighted 
limits scalability systems discussed 
set principles scalable systems list questions asked considering far system scales 
scale 
clifford neuman 
scale distributed systems 
readings distributed computing systems 
ieee computer society press 
years scale increasingly important factor design distributed systems 
large computer networks internet broadened pool resources distributed systems performed author completing phd university washington supported part national science foundation number ccr washington technology centers digital equipment 
constructed 
building system fully resources requires understanding problems scale 
system said scalable handle addition users resources suffering noticeable loss performance increase administrative complexity 
scale components number users ob author address university southern california information sciences institute admiralty way marina del rey california usa 
bcn isi edu jects part system distance farthest nodes system number organizations exert administrative control pieces system 
system expected grow ability scale considered system designed 
naming authentication authorization accounting communication remote resources affected scale 
scale affects user ability easily interact system 
grapevine earliest distributed computer systems consciously designed scale 
projects internet domain naming system kerberos sprite dec global naming authentication services concentrated particular subsystems 
projects attempted provide complete scalable systems 
locus andrew project athena dash amoeba 
scale affects way users perceive system number objects accessible grows increasingly difficult locate objects interest 
plan profile prospero quicksilver tilde systems address aspect scale 
examines methods handle scale systems 
section discusses problems scale presents general solutions problems 
sections look problems specific individual subsystems discuss particular solutions systems 
solutions generally fall categories replication distribution caching defined section discussed sections 
earlier sections describe affect scale systems section examines problems confront users large systems 
techniques covered summarized section list suggestions followed questions asked building scalable systems 
section summarizes scope limitations drawn 
short descriptions systems mentioned may appendix 
definitions terms repeatedly 
defined quick 
term system refers distributed system 
distributed system collection computers connected computer network working collectively implement minimal set services 
node individual computer system 
site collection related nodes subset nodes system 
service resource replicated multiple logically identical instances appearing different nodes system 
request access resource directed instances 
service distributed provided multiple nodes capable handling subset requests service 
request handled nodes implementing service subset nodes service replicated 
distribution function maps requests subset nodes handle 
results query cached saving requesting node may reused repeating query 
caching improves performance local node reducing time spent waiting response 
caching improves scalability reducing number repeated queries sent server 
caches employ validation tech niques sure data cache results query changed 
caching temporary form replication 
effects scale scale affects systems numerous ways 
section examines effects scale reliability load administration heterogeneity 
effects felt parts system 
reliability number components distributed system increases likelihood decreases working simultaneously 
system scales geographically components able communicate 
system cease operate just certain nodes unavailable 
reliability improved increasing autonomy nodes system 
collection nodes autonomous runs independently nodes system 
failure autonomous system affects access resources neighborhood failure 
example failure name server part network prevent access local resources 
replication improve reliability system 
replication allows resource instances running inaccessible 
replicas scattered network network failure isolate part system replicas 
possible dynamically reconfigure set servers client server goes clients continue little disruption possible 
system load scale affects system load number ways 
system gets bigger amount data managed network services grows total number requests service 
replication distribution caching reduce number requests handled server 
replication distribution allow requests spread multiple servers caching reduces repeated requests 
multiple file servers providing storage different files example distribution 
existence system binaries server example replication 
replication choice server factors load proximity 
administration administrative dimension scale adds problems 
number nodes system grows impractical maintain information system users node copies keep date 
administration collection nodes easier common information maintained centrally example name server authentication server file server provides central repository system binaries 
system continues grow information system changes frequently 
practical single individual keep date 
additionally system crosses administrative boundaries organizations want control part system 
willing delegate control individuals outside organization 
problems addressed distribution 
responsibility maintaining pieces database assigned organization organization maintains part databases concerning systems 
section describes methods distribute database 
heterogeneity administrative dimension scale compounds problem heterogeneity 
systems cross administrative boundaries include hardware different types may running different operating systems different versions operating system 
practical guarantee runs exactly software 
coherence approach dealing heterogeneity 
coherent system computers part system support common interface 
requirement takes forms 
nodes required support instruction set practical 
looser requirement nodes support common execution abstraction 
computers share execution abstraction software runs computer easily recompiled run 
looser coherence protocol level nodes required support common set protocols protocols define interfaces subsystems tie system 
mit project athena example system uses coherence execution abstraction deal heterogeneity 
heterogeneous computer systems project provides explicit support heterogeneity 
mechanism provided allows single interface communicating nodes different underlying protocols 
hcs approach shows possible support multiple mechanisms heterogeneous systems 
ability important different mechanisms different strengths weaknesses 
just seen issues affect scalability system 
sections examine effects scale particular subsystems 
naming directory services name refers object 
address tells object 
binding name object refers 
name server directory server maps name information name binding 
information address object general personal information user 
attribute name service maps information object object matching information 
attribute naming discussed section 
granularity naming name servers differ size objects name 
name servers name hosts 
names finer grained objects services files include name host object 
problem approach difficult move objects 
name servers name individual users services 
names entities change frequently ratio updates usually fairly low 
simplifies job name server considerably 
name servers name individual files 
huge number files transient nature 
supporting naming level requires support frequent updates massive number queries 
intermediate approach sprite number file systems 
groups objects sharing common prefix assigned servers 
name service maps prefix server remainder name resolved locally server object stored 
advantage approach name service handles fewer names prefixes change frequently full names objects 
allows clients easily cache mappings learned 
advantage names need include name server object resides allowing groups objects sharing common prefix moved 
main disadvantage objects sharing common prefixes stored size naming database frequency queries read write ratio affected granularity objects named 
factors affect techniques support naming large systems 
reducing load techniques reduce number requests handled name server 
simplest replication 
allowing multiple name servers handle queries different clients able send requests different servers 
choice physical location relative loads different servers random 
difficulty replication lies keeping replicas consistent 
consistency mechanisms discussed section 
distribution second technique spreading load servers 
distribution different parts name space assigned different servers 
advantages distribution prefix entire file name done limited number objects scale 
part naming database stored server reducing number queries updates processed 
size database smaller request usually handled faster 
distribution client able determine server contains requested information 
techniques doing described section 
caching third technique reduces load name servers 
name resolved need resolved 
results remembered additional requests information avoided 
seen caching particular importance domain distribution names 
name names common prefixes 
caching mapping prefix name server handling names sharing prefix resolved fewer messages 
extremely important prefixes shorter number names share grows 
caching prefixes high level name servers overloaded bottleneck name resolution 
caching form replication replication need keep things consistent biggest difficulty 
caching described greater detail section 
uid naming distributed systems hierarchical name service described 
systems unique identifiers name objects 
capability systems amoeba fall category :10.1.1.121.2679
capability unique identifier names access rights object 
unique ids may thought addresses 
usually contain information identifying server maintains object identifier interpreted server 
information identifying server address unique identifier included requests broadcast client 
client needing access object service expected possess unique identifier 
problem uid naming objects move uids identify server object resides 
uids scattered way find continue exist incorrect addresses objects 
technique solve problem forwarding pointers 
forwarding pointers user attempting old address access object new uid containing new address 
drawback forwarding pointers chain links followed lengthy 
reduces performance nodes chain prevents access object 
drawback solved emerald requiring object home site forwarding pointer site kept date 
solution client update forwarding pointers traversed subsequent forwarding pointers encountered 
prospero supports uids expiration dates 
directory service guarantees uids maintains kept date 
expiration dates possible get rid forwarding pointers possible uids old address expired 
directory services uid systems desirable translate symbolic names humans uids named objects 
directory service 
uid directory possible read contents directory map symbolic name directory uid add symbolic name uid pair directory 
directory contain uids files directories fact object uid exists 
load directory servers easily distributed 
requirement subdirectory server parent 
different parts name space reside different machines 
replication supported associating multiple uids symbolic name uids identify multiple replicas object directory 
primary differences name server directory server directory server usually possess little information full name object 
directory server support pieces independent name spaces possible name spaces overlap contain cycles 
prospero amoeba directory servers translate names uids 
growth reorganization system scalable able grow gracefully 
organizations separate global name spaces merge reorganize combine name spaces problem arises name spaces disjoint 
problem arises name spaces suddenly change 
new names correspond old names new prefix corresponding point new name space original name space attached 
causes problems names hardcoded programs specified change 
dec global name service addresses problem associating unique number root independent name space 
file name stored number root name space stored name 
name spaces merged entry new root pairing unique id previous root prefix required find 
name associated root id resolved id checked doesn match current root corresponding prefix prepended allowing hardcoded name 
security subsystem size system grows security increasingly important increasingly difficult implement 
bigger system vulnerable attack points intruder enter network system greater number legitimate users users conflicting goals 
particularly troublesome distributed system spans administrative boundaries 
security mechanisms employed different parts system different strengths 
important effects security breach contained part system broken 
security aspects authentication system verifies user identity authorization decides user allowed perform requested operation accounting records user done sure user excessive resources 
accounting include mechanisms bill user resources 
systems implement distributed mechanism authentication leave authorization individual server 
systems provide accounting distributed manner 
authentication techniques authenticate users distributed systems 
simplest passwords host requires maintenance password database multiple nodes 
easier administer grapevine supported central service verify passwords 
password authentication cumbersome user required password time new service requested 
unfortunately letting workstation remember users password risky 
password authentication vulnerable theft passwords attackers eavesdrop network 
host authentication rlogin rsh berkeley unix problems 
host authentication client authenticated local host 
remote servers trust host properly identify client 
loses control nodes system willing trust claims systems identity users 
encryption authentication suffer problems 
passwords sent network 
user assigned encryption key key prove user identity 
authentication problems 
principals users servers maintain key principal possibly communicate 
impractical large systems 
altogether keys required number users number servers 
needham schroeder show number keys maintained reduced authentication server 
securely generates keys needed distributes parties wishing communicate 
party kerberos authentication protocol shares key key pair 
authentication kerberos modified version needham schroeder protocol 
client wishes communicate server contacts sending name name server contacted 
randomly generates session key returns client encrypted key client registered 
accompanying encrypted session key ticket contains name client session key encrypted key server registered 
kerberos session key ticket received valid limited time cached client reducing number requests 
additionally user secret key needed initially logging 
subsequent requests login session session key returned response initial request 
prove identity server client forwards ticket timestamp encrypted session key ticket 
server decrypts ticket uses session key contained decrypt timestamp 
server knows message sent principal knew session key session key issued principal named ticket 
authenticates client 
client requires authentication server server adds timestamp re encrypts session key returns client 
system scales practical authentication server share keys client server 
additionally trust single entity 
kerberos allows registration principals distributed multiple realms 
distribution mechanism described section 
kerberos authentication protocol conventional cryptography authentication accomplished public key cryptography 
public key cryptography separate keys encryption decryption key distribution step authentication accomplished publishing principal public key 
issues revocation considered authentication protocols public key cryptography different tradeoffs provide little reduction complexity 
authentication public key cryptography significant difference authenticating single message multiple recipients 
authorization number ways distributed systems approach authorization 
request sent authorization service server needs access control decision 
authorization service decision sends answer back server 
approach allows access control decision take account factors servers global quotas vantage cumbersome access control service bottleneck 
second approach client authenticated server decision client authorized perform operation 
server knows request best position decide allowed 
example andrew file system directory associated list known access control list acl identifying users authorized access files directory 
access file requested client name compared acl 
acl entries andrew contain names groups 
groups allow rights granted named collections individuals need update multiple acls time membership group changes 
andrew file server maintains list groups user belongs list consulted checking acl 
server making authorization decision provided information possible 
example authentication required participation names took part available 
possible server external sources obtain information group membership 
approach grapevine similar authorization service 
differs requests require information group server final decision left server 
andrew authorization grapevine membership acls 
acls contain individuals groups contain individuals groups 
group membership determined sending name server query containing name individual name group 
name server recursively checks group membership individual 
necessary recursive queries sent name servers 
noticeable bottlenecks grapevine time required check membership large groups especially name servers involved 
external information available server need contact service 
client request cryptographically sealed credentials authorizing access particular object verifying membership particular group 
credentials passed server manner similar capability approach described 
difference capabilities credentials usable particular user require proof really issued user presenting 
version kerberos supports credentials 
described separately 
capabilities approaches discussed far access control list model authorization 
disadvantage model client authenticated looked potentially long list lookup may involve recursive expansion multiple groups interaction may required servers 
advantages access control list model leaves final decision server straightforward revoke access required 
amoeba uses capability model authorization :10.1.1.121.2679
capability model user maintains list objects access authorized 
object represented capability server bearer access ob ject 
prevent users forging capabilities amoeba includes random bit pattern 
choosing bit pattern sparse address space sufficiently difficult user create capability 
client presents capability wishes access object 
server compares bit pattern capability stored object match access allowed 
advantage capability model contacted client server access control decision contacting servers 
server need maintain large authorization database difficult keep upto date large system 
disadvantage capabilities revoked en masse 
capabilities revoked changing bit pattern causes outstanding capabilities object immediately invalidated 
new capability reissued legitimate users 
large system significant task 
authorization capability distributed systems dependent authentication related mechanisms 
authentication required user logs system user granted initial capability obtain capabilities directory service 
additionally case passwords capabilities easily intercepted server network 
simply sent clear 
sent encrypted sufficient information prevent replay 
mechanism quite similar encryption authentication 
accounting distributed systems handle accounting host host basis 
need distributed secure scalable accounting mechanism especially large systems cross administrative boundaries 
date systems considered problem 
difficulty lies inability trust servers run unknown individuals organizations 
bank server accounting proxies approaches described 
amoeba accounting handled bank servers maintain accounts behalf users servers 
users transfer money servers draw balance resources 
proxy accounting tied closer authentication authorization 
client server proxy allowing server transfer funds client account 
approaches require support multiple currencies 
important systems span international boundaries accounting service called maintain information different types resources 
currencies represent actual funds clients represent limits resources printer pages cpu cycles 
quotas reusable resources disk pages represented deposit resource released 
authorization accounting depend 
direction transfer funds requires authorization owner account funds taken 
server verify client sufficient funds quota pay operation performed 
replication distribution caching section described problems specific scaling security subsystems large systems discussed mechanisms solve 
problems saw naming arise security 
naming replication distribution caching 
applying techniques security area considerations kept mind 
replicating server maintains secret keys compromise replica result compromise important keys 
security service weakest replicas 
distribution multiple servers may involved particular exchange 
important principals know servers involved correctly decide trust place results 
longer allows credentials cached longer take recover key compromised 
system grows trust placed component pieces 
reason encryption security mechanisms appropriate choice large distributed systems 
encryption mechanisms rely trust certain pieces system 
making clear pieces need trusted services better able decide request authentic 
remote resources naming security parts system affected scale 
scale affects sharing kinds resources 
processors memory storage programs physical devices 
services provide access resources inherit scalability problems naming security mechanisms 
example access resource finding 
involves identifying resource needed determining location name 
resource authentication authorization required 
services scalability problems similar techniques employed solve 
problems load reliability addressed replication distribution caching 
services reduce load shifting computation client possible done information needed computation readily accessible client 
services access remote resources dependent underlying communications mechanisms employ 
section look scaling issues related network communication services 
provide example problems arise supporting access remote resources look effect scale heavily resource network file system 
communication system grows geographically medium communications places limits system performance 
limits considered deciding best access remote resource 
approaches reasonable low latency connection reasonable satellite link 
greatly affect usability system underlying communications parameters completely hidden application 
dash system job exposing communication parameters appropriate manner 
connection established possible application require connection meet certain requirements 
requirements met error returned 
set required communication parameters met possible application access resource alternate mechanism file caching remote reads writes 
communication typically takes forms point point broadcast 
pointto point communication client sends messages particular server satisfy request 
contacted server satisfy request respond identity server 
broadcast client sends message servers satisfy request respond 
advantage broadcast easy find server handle request just send request correct server responds 
unfortunately broadcast scale 
preliminary processing required servers handle request 
total number requests grows load due preliminary processing server grow 
global broadcast limits scalability computer networks 
computer networks improve aggregate throughput distributing network traffic multiple subnets 
messages need pass subnet reach destination transmitted particular subnet 
local communications part network seen users 
messages broadcast globally transmitted subnets consuming available bandwidth 
global broadcast avoided scalable systems broadcast need ruled entirely 
amoeba uses broadcast subnets improve performance local operations :10.1.1.121.2679
communications local subnet uses point point communication 
multicast broadcast mechanism 
multicast single message sent group servers 
reduces number messages required transmit message multiple recipients 
multicast scale groups messages sent kept small recipients need receive message 
additionally network transmit multicast message subnets necessary reach intended recipients 
file systems file system provides excellent example service affected scale 
heavily requires transfer large amounts data 
global file system distribution line defense overloading file servers 
files spread servers server processes requests files stores 
mechanisms find server storing file file name described section 
distributed systems files assigned servers prefix file name 
example system names binaries start bin files assigned common server 
unfortunately binaries frequently referenced files parts file system assignment evenly distribute requests file servers 
requests spread file servers replication 
files assigned multiple servers clients contact subset servers making requests 
difficulty replication lies keeping replicas consistent 
techniques doing described section 
binaries rarely change manual techniques sufficient keeping replicas consistent 
caching extremely important network file systems 
local cache file blocks network delays noticeable 
file read network block time access data block locally 
caching significantly reduces number requests sent file server especially applications read file bytes time 
primary difficulty caching lies making sure cached data correct 
file system problem arises file modified systems file parts file cache 
mechanisms maintain consistency caches described section 
issue importance caching files size chunks cached 
systems cache pieces files 
appropriate parts file read 
coda early versions andrew file system support file caching entire file transferred client workstation opened 
files modified copied back closed 
files remain cached workstation opens subsequent open require file fetched 
approaches file caching networks high latency important geographically large system 
file caching expensive application wants access small part large file 
problem difficult diskless workstations support file caching large files 
range capabilities computers communication channels distributed system multiple file access mechanisms supported 
replication replication important tool building scalable distributed systems 
naming authentication file services reduces load individual servers improves reliability availability services 
issues importance replication placement replicas mechanisms kept consistent 
placement replicas placement replicas distributed system depends purpose replicating resource 
service replicated improve availability service face network partitions replicated reduce network delays service accessed replicas scattered system 
replicas located network partition service unavailable significant number users 
majority users local service replicated improve reliability service improve availability face server failure spread load multiple servers replicas may placed near 
placement replicas affects choice mechanism maintains consistency replicas 
consistency replicated object logically thought single object 
change object change visible 
particular point time set replicas said consistent value object readers 
approaches maintain consistency replicas distributed systems 
systems support replication readonly information 
andrew athena take approach replicating system binaries 
files change infrequently changed normal users external mechanisms keep replicas consistent 
closely related read approach replication immutable information 
approach amoeba file server 
files amoeba immutable result replicated 
changes files creating new files changing directory new version file 
restrictive alternative allow updates require updates sent replicas 
limitations approach updates take place replicas available reducing availability system write operations 
mechanism requires absolute ordering updates inconsistencies result updates received replicas different orders 
final difficulty client fail update resulting receipt replicas 
primary site replication updates directed primary replica forwards updates 
updates may forwarded individually echo database periodically downloaded replicas kerberos berkeley internet domain naming system bind implementation 
advantage primary site approach ordering updates determined order received primary site updates require availability primary site 
disadvantage primary site approach availability updates depends single server systems select new primary site existing primary goes 
additional disadvantage applies changes distributed periodically updates delayed update cycle 
applications absolute consistency overriding concern 
delay propagating change acceptable especially tell response incorrect 
observation exploited grapevine allowing guarantee loose consistency 
loose consistency guaranteed replicas eventually contain identical data 
updates allowed network partitioned servers 
updates sent replica replica forwards update available 
conflicting updates received different replicas different orders timestamps indicate order applied 
disadvantage loose consistency guarantee query returns data 
name servers possible check response correct time 
maintaining consistent view replicated data require replicas upto date 
requires date information visible users data 
mechanisms described far updates eventually replica 
quorum consensus voting updates may sent subset replicas 
consistent view maintained requiring reads directed replica date 
accomplished assigning votes replica selecting numbers read quorum write quorum read quorum plus write quorum exceeds total number votes requiring reads writes directed sufficient number replicas collect votes satisfy quorum 
guarantees set replicas read intersect set written update 
timestamps version numbers stored replica allow client determine data 
distribution distribution allows information maintained distributed service spread multiple servers 
important reasons may information fit single server reduces number requests handed server allows administration parts service assigned different individuals allows information frequently part network maintained nearby 
section describe distribution naming authentication file services 
issues importance distribution placement servers mechanisms client finds server desired information 
placement servers distributed systems exhibit locality 
certain pieces information accessed users part network users 
information distributed servers near users frequently access information 
example user files assigned file server subnet workstation usually user 
similarly names maintained name servers assigned names nearby objects obtained local name servers 
addition reducing network traffic assignments improve reliability network partition local server inaccessible 
case desirable avoid need contact name server country order find resource room 
assigning information servers administrative lines organization avoid dependence 
distributed organizational lines objects maintained organization said particular domain cell andrew 
kerberos uses term realm describe unit distribution exists explicit trust relationship server principals assigned 
finding right server difficulty distribution lies distribution function client determine server contains requested information 
hierarchical name spaces task easier names common prefixes stored necessary identify server maintaining part name space 
methods frequently mounts broadcast domain queries 
sun network file system locus plan mount table identify server named object resides 
system maintains table mapping name prefixes servers 
object referenced name looked mount table request forwarded appropriate server 
nfs table different different systems meaning name refer different objects differ discussion prefix means significant part name 
file names names dec global naming system prefix 
domain names really suffix 
ent systems 
locus supports uniform name space keeping mount table systems 
plan table maintained process basis 
broadcast sprite identify server particular file 
client broadcasts request server file replies 
reply includes prefix files maintained server 
prefix cached subsequent requests files prefix sent directly server 
discussed section approach scale local network 
fact systems approach provide secondary name resolution mechanism broadcast goes unanswered 
distribution grapevine domain 
techniques described distribution function domain naming prefix name resolved 
names divided multiple components 
component specifies name resolved particular name server specify server resolve name 
example names grapevine consist registry name registry 
name form neuman uw stored uw registry name neuman 
dec global naming system support variable depth names 
systems point name domain separated vary 
components name specify domain components specify name domain 
example isi edu registered name server isi edu domain 
find name server containing information domain registry client sends request local name server 
local name server sends back answer infor isi edu lookup isi edu isi edu lookup isi edu lookup isi edu edu isi edu uw edu edu time servers client resolving domain name mation redirecting query name server 
level name space supported grapevine queries required find server registry resolve name 
server registry looking name gv registry replicated grapevine server 
resolution name variable number components shown 
client sends request local server requesting resolution host name isi edu 
server returns name address edu server 
client repeats request edu server responds name address isi edu server 
process repeats successively longer prefixes server case isi edu returns address requested host 
client caches intermediate responses mapping prefixes servers subsequent requests handled fewer messages 
domain distribution names scales 
system grows queries frequent additional replicas frequently queried registries domains added 
grapevine level name space places limits scalability 
name server maintain gv registry size registry grows linearly total number name servers total number name servers supported limited 
clearinghouse production version grapevine addressed problem supporting level name space 
allows name service scale larger number names eventually reaches limit due size root second level registries 
primary disadvantage domain distribution names take queries resolve single name 
fortunately appropriate caching additional queries eliminated 
domain distribution authentication 
kerberos principals may registered multiple realms 
allows organization set kerberos server eliminating need global trust 
server realm determine sequence authentication servers contacted 
client kerberos realm wishes server authenticate authentication server server realm realm 
shows multiple hop cross realm authentication kerberos 
numbers messages loosely correspond 
message authenticating client kerberos server accompanied request credentials 
message message encrypted client key response encrypted session key ticket sent previous message 
initial version kerberos supported single hop cross realm authentication 
re mit edu edu isi edu time client cross realm authentication quired realm know realm communicate 
limitation exist version kerberos dec global authentication system 
multiple hop cross realm authentication known client authenticated may weak local claims remote claims authenticated client 
allow server informed decision necessary knows complete list realms took part authenticating client 
global authentication information part name authenticated principal 
principal name constructed concatenating names links traversed step authentication process 
version kerberos list realms included credentials 
protocols allow intermediaries skipped 
speeds authentication process secure 
caching caching important tool building scalable systems 
form replication replication issues importance placement caches kept consistent 
difference replication caching cached data temporary replica 
updates need propagated caches 
consistency maintained invalidating cached data consistency guaranteed 
placement caches caching occur multiple places 
caching usually performed client eliminating repeated requests network services 
caching take place servers implementing services 
example addition caching workstation sprite caches blocks memory file server 
reading file memory cached copy file server faster reading client local disk 
additional caching file server improve performance file server memory client blocks cached file server read multiple clients 
caching multiple places useful name servers 
name servers unable answer query return address name server sharing longest prefix common name resolved 
cases name server root 
bind may configured local name server queries behalf client caches response intermediate responses local clients 
additional level caching allows higher levels naming hierarchy bypassed client know server desired prefix 
example client cs washington edu domain wishes resolve isi edu local name server query root name server behalf client return address name server cache 
second host cs washington edu domain wanted resolve isi edu local name server able return address correct name server additional query root 
clients willing look information locally initially asking root name server 
cache consistency case replication techniques maintain consistency caches 
common approaches keep caches consistent distributed systems timeouts check hints callbacks leases 
timeouts maintain cache consistency dec name service prospero number systems 
systems responses servers include time may considered valid time live ttl 
ttl vary item item 
usually long infrequently changing information shorter information expected change 
clients cache information ttl expires 
information changes ttl sets upper bound time required new information 
change expected advance ttl reduced change take effect quickly 
possible tell incorrect information obtained cached entries treated hints 
hints don kept consistent date fact detected data entry flushed 
grapevine quicksilver hints 
hints useful naming systems objects identifier stored object 
cached data tells object object moved fact apparent client attempts retrieve 
treating cached data hints may change detected avoiding need complicated mechanisms keep cache consistent 
systems way check validity cached data go back server provided information originally 
small amounts data cost doing information cached 
larger amounts data check takes significantly time transferring data 
andrew file system originally form check decide locally cached copy file 
experience showed checks primary bottleneck common case files unchanged 
reason implementation subsequently coda callbacks 
file cached file server adds caching site list stored file 
file changes message sent sites copies telling cached copy longer valid 
requiring clients check validity files reboot contact file server lost problems due lost callbacks minimized 
leases similar callbacks important differences 
lease eventually expires server granting lease guarantees change period lease valid gets approval lease holder 
client holding lease cache data lease applies term lease authorizes server break lease 
tradeoffs similar choosing ttl apply selection term lease 
user view mechanisms help system deal scale 
unfortunately effect scale user received relatively little attention 
user finite mental capacity 
number computers system grows system expands geographically begins cross administrative boundaries potential exists size system overwhelm user 
mechanisms needed allow objects resources interest organized manner allows easily 
doesn want quickly lost sea objects resources little interest 
important user able identify additional objects resources potential interest 
traditional systems andrew locus sprite support uniform global name space uniquely names objects 
approach allows simple sharing names advantage harder users understand systems previously 
unfortunately systems cross administrative boundaries difficult obtain agreement appear name space 
solution names sites appear top level site names objects 
unfortunately results related information scattered global name space users don know look 
familiar system model number objects resources available overwhelm user 
reason mechanisms needed help user organize information reduce amount information dealt 
solution allow individual users customize name space see objects interest 
approach taken plan prospero tilde quicksilver 
naming systems described user centered exception prospero better described user exclusive object added user name space named 
prospero expected objects start user name space lengthy names 
user expresses interest object link added name space bringing object closer center root 
objection user centered naming name refer different objects different users 
address objection prospero supports closure object system associated name space 
names normally resolved name space associated object name 
systems looked mechanisms identifying objects needed object full name known 
profile supports attribute naming 
naming user specifies known attributes object name 
place name attributes specified uniquely identify object 
order scale information distributed multiple name servers 
profile user working set name servers contacted 
responses name server may require resolution different server 
successive resolution links similar mechanism resolve names traditional distributed systems 
key difference links necessarily form hierarchy 
alternative approaches examined resource discovery project university colorado 
approaches information available network 
approach resource discovery agents collect share information agents scattered system 
user wishing find resource asks agents agents route queries exploiting semantics query limit activity take place 
resource response returned client 
prospero takes slightly different approach identifying objects interest 
tools provided allow users customize organize views system 
prospero supports user centered name space closure 
naming objects resources handled uid directory service 
name spaces may overlap cycles allowed 
prospero directory service supports filters union links 
filter program modify results directory query path queried directory passes filtered link 
union link allows results possibly filtered query merged contents directory containing link 
nature directory service support filters union links allows users organize objects ways 
ability objects multiple names easier find things look object organization best fits information known 
users organizations set directories organize objects directories available 
sharing users find new objects 
building scalable systems section presents suggestions building scalable systems 
suggestions discussed greater detail form guide 
hints broken groups corresponding primary techniques replication distribution caching 
building systems important consider factors scalability 
excellent collection hints general design computer systems lampson 
replication replicate important resources 
replication increases availability allows requests spread multiple servers reducing load 
distribute replicas 
placing replicas different parts network improves availability network partitions 
placing replica area frequent requests requests directed local replica reducing load network minimizing response time 
loose consistency 
absolute consistency doesn scale 
loose consistency cost updates reduced changes guaranteed eventually replica 
systems loose consistency desirable able detect outof date information time 
distribution distribute multiple servers 
distributing data multiple servers decreases size database maintained server reducing time needed search database 
distribution spreads load servers reducing number requests handled 
distribute evenly 
greatest impact scalability felt requests distributed servers proportion power 
uneven distribution server may idle overloaded 
exploit locality 
network traffic latency reduced data assigned servers close location frequently 
internet domain naming system 
site maintains information hosts servers 
queries name server local hosts 
result queries leave local network 
bypass upper levels hierarchies 
hierarchically organized systems just needs information root 
cached copies available subordinate servers upper levels bypassed 
cases desirable server answer queries immediate subordinates subordinates responses available subordinates 
caching cache frequently accessed data 
caching decreases load servers network 
cached information accessed quickly new request 
consider access patterns caching 
amount data normally referenced ratio reads writes likelihood conflicts number simultaneous users factors affect choice caching mechanisms 
example files normally read start finish caching entire file efficient caching blocks 
conflicts readers writers rare callbacks maintain con reduce requests 
ability detect invalid data allows cached data condition detected 
cache timeout 
associating time live ttl cached data upper bound placed time required changes observed 
useful eventual consistency required backup cache consistency mechanisms 
ttl chosen server holding authoritative copy 
change expected ttl decreased accordingly 
cache multiple levels 
additional levels caching reduce number requests level 
example name server handling requests local network caches information root name servers request answer local requests information requiring client request separately 
similarly caching file servers allows block read cached multiple clients requires disk access 
look locally 
looking nearby copies data contacting central servers load central servers reduced 
example name available cache local system contact name server local network contacting distant name server 
authority name resolved local name server may possess information allowing root name server bypassed 
extensively shared frequently changed 
extensively shared object changed large number cached copies invalid refreshed 
system organized extensively shared data relatively stable 
hierarchical name space exhibits property 
changes occur leaves hierarchy 
upper levels rarely change 
general shed load 
computation done easily client server best leave client 
allowing client perform computation requires return significantly greater amount information case database query appropriate server computation 
additionally result cached server provided appropriate computation server especially computation requires contacting additional servers 
avoid global broadcast 
broadcast scale 
requires systems process message need 
multicast acceptable groups include servers need receive message 
support multiple access mechanisms 
applications place varying requirements access mechanisms 
best application 
changing communication parameters affect choice mechanism 
multiple mechanisms supported accessing objects resources 
client choose method prevailing conditions 
keep user mind 
mechanisms help system deal scale 
mechanisms system difficult understand 
familiar system model number available objects resources overwhelm user 
large systems require mechanisms reduce amount information processed remembered user 
mechanisms hide information interest 
evaluating scalable systems questions asked evaluating scalability distributed system 
subsection lists questions important 
provide formula yields number 
fact different systems scale different ways 
system may scale better administratively scales better numerically 
unknowns affect scaling experience true test system ability scale 
set questions concerns system 
frequency queries grow system grows 
percentage queries handled central servers 
replicas central servers added problems introduced doing bottlenecks 
set questions concerns data maintained 
size databases handled individual servers grow 
affect query time 
information change 
update mechanism scale 
update affect frequency queries 
caches invalidated result sudden increase requests caches refreshed 
final question concerns administrative component scale 
systems require single authority final decisions concerning system 
required practical environment system 
asking questions point problem areas system 
complete list 
entirely possible important factors addressed cause system scaling earlier 
examined problems arise systems scale 
examples systems demonstrate problems solutions 
systems mentioned systems scale factor design simply provided readily available examples mechanisms discussed 
discussion necessarily taken narrow view systems discussed examining individual subsystems systems 
effects scale felt system 
shown scale affects large systems 
scale broken numerical geographical administrative components 
component introduces problems solutions employed number systems discussed 
techniques repeatedly handle scale replication distribution caching 
collection suggestions designing scalable systems section 
suggestions expand primary techniques suggest additional ways applied 
hoped hints help system designers address scale design distributed systems 
acknowledgments brian bershad robert cooper barbara gordon bruce gordon terry gray andrew herbert richard ladner ed lazowska hank levy mary ann neuman david notkin john zahorjan anonymous referees commented earlier drafts 
appendix systems designed scale mind scalability included design criteria number systems 
degree systems scale ranges collection computers local area network computers distributed entire internet 
appendix describes systems states degree system intended scale lists ways system addresses problems scale 
table summarizes information tabular form 
amoeba developed vrije universiteit cwi amsterdam capability distributed operating system long haul networks spanning multiple organizations 
objects referenced capabilities include identifiers server object access rights object 
capabilities provide distributed naming authorization mechanism 
andrew system developed university runs thousands computers distributed university campus 
notable component andrew file system ties file systems sites distributed united states 
coda follow andrew improving availability especially face network partitions 
mit project athena system built thousands computers distributed campus 
distributed services provide authentication naming filing printing mail administrative functions 
kerberos developed part project athena 
dash development berkeley distributed operating system designed large networks exhibiting range transmission characteristics 
dash notable exposing characteristics allowing application require connection meet certain requirements returning error requirements met 
dec global naming system developed dec systems research center designed support naming large networks spanning multiple organizations 
notable attention paid reorganization name space independent name spaces merged external relationship organizations change mergers acquisitions echo distributed file system supporting consistent replication local partitions partitions tied loosely consistent global naming system 
dec global authentication system notable fact principal name absolute determined sequence authentication servers authenticate principal 
grapevine earliest distributed systems designed scale large network 
developed xerox parc support electronic mail provide name service location network services support simple password authentication world wide network connecting xerox sites 
heterogeneous computer systems project university washington demonstrated single interface communicate systems different underlying protocols data representations 
important large systems practical dictate choice hardware software multiple sites underlying mechanisms different strengths weaknesses 
internet domain naming system distributed name service running internet supporting translation host names internet addresses mail forwarders 
organization maintains replicated servers supporting translation names part name space 
kerberos encryption network authentication system developed mit project athena supports authentication users locally organizational boundaries 
locus developed ucla designed run systems distributed network 
locus notable earliest distributed systems support uniform view file system nodes system 
sun network file system supports transparent access files stored remote hosts 
files named independently host 
remote file accessed remote file system containing file mounted local system establishing mapping part local file name space files remote system 
nfs server maintains little information state clients 
plan bell labs intended large supports process centered name space allowing users incorporate name space parts global system useful 
profile developed university arizona attribute name service maps possibly incomplete information coarse grained objects large network better described process objects added user name space named 
object matching information 
prospero developed university washington runs systems distributed internet 
supports view entire system allowing users define virtual system specifying pieces global system interest 
prospero support closure resolves problems caused multiple name spaces 
quicksilver developed ibm almaden research center notable proposed user centered name space 
system spanning large multi national name space allows users see parts system concern 
sprite network operating system developed berkeley designed local area network 
file system notable caching client server improve performance prefix tables distribute requests correct file server 
tilde naming system developed purdue supports process centered naming 
allows specify process basis names map pieces global system 
ability provides applications advantages global name space file names resolved globally allowing parts name space specified locally file names better resolved local files 
iso standard describing distributed directory service designed store information users organizations resources similar entities worldwide 
scalability addressed largely manner internet domain name service 
intended environment methods system service nodes geographic administrative replication distribution caching amoeba general wide area multiple organizations immutable capabilities andrew file system wide area multiple organizations read cell volume blocks athena general campus university service clusters coda file system global multiple organizations optimistic volume file dash general wide area multiple organizations dec global naming global multiple organizations loose directories time live dec global authentication global multiple organizations loose directories echo file system wide area multiple organizations loose primary volume grapevine general multiple departments loose registry hcs general wide area multiple organizations naming global multiple organizations primary domain kerberos authentication global multiple organizations primary realm tickets locus general local department primary mount nfs file system local single organization mount blocks plan general multiple mount profile naming wide area multiple organizations information principal client managed prospero naming global multiple organizations uid quicksilver file system multiple departments prefix immutable sprite file system local department read prefix client server tilde naming local single organization trees naming global multiple organizations table important distributed systems methods handle scale david anderson domenico ferrari 
dash project overview 
technical report computer science division department electrical engineering computer science university california berkeley august 
andrew birrell butler lampson roger needham michael schroeder 
global authentication service global trust 
proceedings ieee symposium security privacy pages april 
andrew birrell roy levin roger needham michael schroeder 
grapevine exercise distributed computing 
communications acm april 
luis felipe cabrera jim wyllie 
quicksilver distributed file services architecture horizontal growth 
proceedings nd ieee conference computer workstations pages march 
ibm research report rj april 
ccitt 
recommendation directory december 
george daniel jr william 
project athena distributed computer system 
ieee computer september 
douglas comer ralph thomas murtagh 
experimental implementation tilde naming system 
computing systems fall 
robert fowler 
decentralized object finding forwarding addresses 
phd thesis university washington december 
department computer science technical report 
david gifford 
weighted voting replicated data 
proceedings th acm symposium operating system principles pages december 
pacific grove california 
cary gray david cheriton 
leases efficient fault tolerant mechanism distributed file cache consistency 
proceedings th acm symposium operating systems principles pages december 
andy hisgen andrew birrell timothy mann michael schroeder garret swart 
availability consistency tradeoffs echo distributed file system 
proceedings nd ieee workshop workstation operating systems pages september 
john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
butler lampson 
hints computer system design 
proceedings th acm symposium operating system principles pages 
butler lampson 
designing global name service 
proceedings th acm symposium principles distributed computing august 
paul mockapetris 
domain names concepts facilities 
darpa internet rfc november 
mullender tanenbaum 
design capability distributed operating system 
computer journal 
roger needham michael schroeder 
encryption authentication large networks computers 
communication acm december 
clifford neuman 
issues scale large distributed operating systems 
generals report department computer science university washington may 
clifford neuman 
proxy authorization accounting distributed systems 
technical report department computer science engineering university washington march 
clifford neuman 
prospero file system global file system virtual system model 
proceedings workshop file systems may 
david notkin andrew black edward lazowska henry levy jan john zahorjan 
interconnecting heterogeneous computer systems 
communications acm march 
john ousterhout andrew frederick douglis michael nelson brent welch 
sprite network operating system 
computer february 
larry peterson 
profile naming service 
acm transactions computer systems november 
presotto pike thompson trickey 
plan distributed system 
proceedings spring may 
sandberg goldberg kleiman walsh lyon 
design implementation sun network file system 
proceedings summer usenix conference pages june 
satyanarayanan 
scalable secure highly available distributed file access 
ieee computer may 
michael schroeder andrew birrell roger needham 
experience grapevine growth distributed system 
acm transactions computer systems february 
schwartz 
networked resource discovery project 
proceedings ifip xi world congress pages august 
san francisco 
steiner neuman schiller 
kerberos authentication service open network systems 
proceedings winter usenix conference pages february 
dallas texas 
andrew tanenbaum robbert van renesse hans van staveren gregory sharp mullender jack jansen guido van rossum :10.1.1.121.2679
experience amoeba distributed operating system 
communications acm december 
douglas terry mark painter david zhou 
berkeley internet domain server 
proceedings usenix summer conference pages june 
walker popek english kline thiel 
locus distributed operating system 
proceedings th acm symposium operating systems principles pages october 

