active objects autonomous agents submitted ieee concurrency special series actors agents jean pierre briot team objects agents simulation information systems oasis laboratoire informatique de paris lip case place jussieu paris cedex mail jean pierre lip fr studies extend concept active objects structure agents 
discusses requirements autonomous agents covered simple active objects 
propose extension single behavior active object set behaviors meta behavior scheduling activities 
concrete proposal ideas describe extended framework active objects named generic multi agent platform named dima 
discuss extension implemented 
report application dima simulate economic models 
keywords active object agent implementation meta behavior modularity re usability simulation 
object oriented concurrent programming appropriate promising technology implement agents 
concept active object may considered basic structure building agents 
furthermore combination agent concept object paradigm leads notion agent oriented programming context 
uniformity communication mechanism objects provides facilities implement communicating agents concept encapsulation objects enables combination various granularities agents 
furthermore inheritance mechanism enables specialization factorization knowledge 
agent easily implemented active object 
concept active object provides degree autonomy rely external resources activated 
behavior remains procedural reaction message requests 
generally consider autonomous agents able perform number functions activities external intervention extended time periods 
achieve autonomy researchers proposed add active object function control messages reception processing considering internal state see example 
basic questions build bridge implementation modeling requirements multi agent systems implementation modeling facilities techniques provided generic structure define main features autonomous agent 
accommodate highly structured model relatively generic multi agent implementation structure 
attempt provide answers questions 
deals modeling requirements multi agent systems providing generic modular agent architecture extension implementation modeling facilities 
concretely describe extend model active object named framework generic modular agent architecture named dima platform 
structured follows 
section presents briefly active objects framework limitations active objects represent agents requirements build generic agent structure 
section describes proposed generic agent architecture 
section describes implementation architecture 
section reports application proposed autonomous agents architecture modeling economic agents evolution 
discuss advantages architecture design implement multi agent systems describe 
active objects concept active object named actor introduced carl hewitt describe set entities cooperate communicate message passing 
concept brings benefits object orientation modularity encapsulation 
distributed environments provides object oriented languages characteristics open systems 
characteristics models proposed see instance 
selection process activity actual computation message mailbox message invocation behavior address address reception activity address components active object 
framework implementing various kinds active object models single programming environment smalltalk 
basic principle active object languages implemented enqueuing received messages mail box message reception interpretation 
active object composed components see instance class address encapsulates mail box active object 
defines way messages received enqueued interpretation instance class activity represents internal activity active object 
provides autonomy actor 
owns smalltalk process continuously removes messages mail box launches interpretation behavior component instance class represents behavior active object way individual messages interpreted 
build active object describe behavior standard smalltalk object 
active object behavior created sending message active behavior 
active creates active object activating behavior self activity self address self methods represent default component classes creating activity address components 
customizing framework means defining subclasses component classes address activity 
allows activity sample hierarchy activity synchronization classes 
user define specific models active objects various communication protocols subclasses class address various models activity synchronization subclasses class activity see 
limitations active objects build generic agent structure provides powerful foundations modeling implementing agents 
powerful useful foundations really provide generic agent structure 
active objects monolithic procedural behavior 
spite communicating subjects appearance active objects reason behavior relations interactions active objects 
active object receive messages objects stays inactive 
cope limitations researchers enriched concept active object define generic agent structure see example 
interesting proposals offer generic agent structure matches spectrum multi agent systems requirements 
clear quickly summarize needed agent properties provided active objects agent monolithic may behaviors communication perception deliberation behavior procedural include symbolic representations substantial reasoning mechanisms 
example communication behavior may integrate knowledge agent acquaintances agents reasoning mechanism reason interactions acquaintances 
agent autonomous entity 
operates direct intervention humans agents 
control behaviors internal state 
realize autonomy agent needs autonomous behaviors 
example communication behavior reuse active object communication mechanism integrate message interpreter autonomy 
interpretation message relies agent state message contents 
message may interpreted differently 
example gives interpretation rule tests mail box state priority received message activate suitable action 
rule message message conditions self mailbox size self threshold 
message priority self threshold 
actions self perform message 
agent pro active entity 
simply act response received messages agents 
example economic agent see section communicate agents receive message 
agent interacts environment environment non agent entities choose appropriate action current context 
behaviors perception deliberation 
agent pro activity allows manage behaviors 
agent pro activity self control mechanism manages set behaviors accordance agent world states 
call world union environment agents 
agent sociable entity 
example agents considered form groups notion group rarely provided active objects 
agents may interact speaking different languages 
example agent communication languages kqml knowledge query manipulation language language message indicated attribute received performative 
language object oriented language smalltalk java 
inter change representation language kif 
agent adaptive entity 
world environment agents continuously evolving 
behaviors adaptive agent capable sustained performance 
example realized experiments see section results shows difficult improve firm performance predicting competition performance 
furthermore results indicate case reasoning predict competition model changes improve agent performance 
section generic agent architecture addresses requirements 
generic agent architecture control data data methods data 
methods data 
methods 
supervision module atn states transitions behavior behavior behavior proposed architecture 
attempt define generic architecture addresses previous properties agent propose extension single behavior active object set behaviors 
architecture see relies layer interactive modules 
modules represent different concurrent agent behaviors communicating reasoning perceiving 
provide agent properties described section 
example communication module manages interaction agent agents system 
higher level supervision module represents agent meta behavior 
allows agent manage different behaviors 
behaviors agent model complex systems agents need combine cognitive abilities reason complex situations reactive abilities stimulus response 
agent may kinds behaviors reactive cognitive behaviors 
representation behaviors behavior encapsulates set data defines behavior state set methods see 
data updated behavior methods asynchronous events 
example method scan perception behavior manages interactions agent environment 
monitors sensors translates sensed data define set believes represent model agent acquaintances environment 
methods procedural standard object oriented methods knowledge method executes knowledge base 
behavior contains procedural methods called reactive behavior 
contains knowledge methods called cognitive behavior 
behavior engine controls activation various methods 
procedural behavior engine simple automaton 
example perception behavior engine agent firm defines infinite loop activation single method scan behavior see 
control data perception behavior domain dependent data scan state scan example procedural behavior engine 
knowledge behavior engine inference engine 
implement knowledge bases framework realizes neat integration rule programming smalltalk 
prominent features declarative specification control meta rules 
meta rules rules operate called control objects 
rule base may associated meta base controls firing rules 
number meta bases designed users define standard types control 
adapted needs changing individual meta rules control firing set procedural knowledge methods example section 
examples behaviors section give examples modules perception module procedural behavior deliberation module knowledge behavior communication module procedural knowledge 
ffl perception behavior manages interactions agent environment 
ffl deliberation behavior represents beliefs intentions knowledge agent 
responsible generating adequate responses messages transmitted communication module changes detected perception module achieving agent goal 
ffl communication behavior manages interactions agent agents group matter machine running 
defines mail box agent way messages received enqueued interpretation 
modules sufficient application domains see example section 
agents deliberation behavior communication behavior perception behavior 
modular approach facilitates integration new modules learning module 
agent meta behavior issues hybrid architectures proposed see build agents components reactive cognitive :10.1.1.35.7370
reactive components kind precedence cognitive ones scheduling components static 
component viewed invoking service underlying system blocks agent action completed 
key problem architectures kind control manage interactions fundamentally different components reactive cognitive components 
decision perception static scheduler consider simple economic agent behaviors perception decision components 
gives example static scheduling implicitly existing architectures see example :10.1.1.35.7370
agent activity may summarized perception decision loop 
underline problem control give scenario time firm model competitive firm greater price lower quality 
firm activates decision process 
parallel process firm decreases unit price improves quality product 
firm deal rapidly modifications product consumed 
avoid problem solution focus control attention prescribing static scheduling 
agent adapt rapidly scheduling changes world agents environment 
agent scheduler static proposed existing architectures 
solution systems emphasized need explicit separate representation control reflexive aspect meta level architectures 
tradition explicit separate representation control propose meta behavior agent architecture 
meta behavior gives agent ability appropriate decisions control adapt behaviors time new circumstances 
provides agent self control mechanism dynamically schedule behaviors accordance internal state world state 
solution foundations behaviors explicitly dynamically scheduled meta behavior behaviors explicitly interrupted allow meta behavior adapt scheduling new events 
procedural behaviors provided time granularity single procedural method firing knowledge behaviors provided time granularity single rule firing 
words knowledge methods level scheduling performed rule firing 
solution acceptable industrial applications 
meta behavior representation proposed meta behavior relies fundamental notions states transitions naturally build augmented transition network atn 
gives example atn may describe economic agent meta behavior 
states represent decision points 
choose transition associated transitions 
transition labeled condition action 
represents step global scheduling agent links input state output state 
conditions transitions test occurrence asynchronous event urgent message reception new data 
asynchronous events true true state state state example atn economic agent operate changes behaviors data 
example tests new data occurred provides important change previous data 
actions transitions allow management layer behaviors activate reasoning terminate reasoning activate communication activate perception meta behavior choose behavior activate 
kill kill kill true true state state state second example atn economic agent meta behavior may evaluate behaviors behaviors needed 
agent condition action kill agent 
gives example atn uses kill 
meta behavior data updated 
example remove behavior add new 
state atn meta behavior evaluates conditions transitions representing new events select appropriate behavior 
conditions verified actions associated transition executed agent state modified 
meta behavior represents agent self control mechanism 
self control provides agent kind control behaviors internal state 
defines agent pro activity restricted message reception sending 
agent autonomous allowing operate direct intervention humans agents 
agent adaptive allowing deal rapidly new events 
implementation dima dima multi agent system set agents possibly set objects representing agents environment 
implement multi agent system implement environment collection simple smalltalk objects implement agents customizing dima 
object oriented language brings benefit inheritance mechanism 
customizing dima means subclassing hierarchies classes see 
allows define agent behaviors agent meta behavior agent engine 
classes describing agent components 
agent meta behavior dima decouple agent meta behavior described atn agent engine interprets atn 
expert systems decouple knowledge bases inference engine achieves modularity 
agent meta behavior represents analog behavior active object implemented class meta behavior defined subclass class 
agent engine represents activity agent implemented class defined subclass class activity see 
class meta behavior attribute defines attribute defines collection behaviors defined agent 
class implements conditions actions atn transitions methods creating agents 
main steps describe agent followings 
determination agent behaviors 

implementation classes describing behaviors sub existing classes see 

implementation agent atn instantiating class atn 

creation agent appropriate method defined class meta behavior 
example method agent meta behavior atn 

activation agent engine agent resume 
agent engine class activity represents internal activity active object 
instance method body defines basic loop active object serially processes messages mail box 
activity activity setting 
body true self self body implement agent engine sub classed class activity define class 
method body redefined activity setting 
body self atn 
atn state atn self atn 
state atn 
state atn state atn state note agent oriented programming cycle knowledge inference implements cycle message acceptance 
agent activity limited message reception sending 
dima agent activity represented atn interpreter explicit programmer 
advantage proposed agent architecture modularity proposed architecture helps decomposing arbitrarily complex behavior agent collection small specialized behaviors supervising various behaviors meta behavior 
advantages architecture match agent properties discussed section 
may stated multi granularity agents various granularities size internal behaviors knowledge may expressed proposed architecture 
property important design complex systems 
goes classical dichotomy reactive cognitive agents 
dynamicity openness agents may dynamically created killed 
may integrate new behaviors change acquaintances information receive perceive 
new behaviors may created integrated agent needs new skills 
reflection architecture implements agent model reflection agent meta behavior governs various behaviors order appropriate decisions control adapt behaviors time new circumstances 
heterogeneity heterogeneity important issue multiagent systems 
existing systems accept heterogeneous agents agents implemented speaking different languages 
proposed architecture mainly characterized separation agent communication behavior deliberation behavior communication behavior translate received message language internal agent language 
characteristics allow language multi agent system 
experiments validate operational platform dima developed applications 
section report application simulate economic models 
economic model chose result extensive research conducted representative sample manufacturing firms 
database collected french national bank de france 
application consider set economic agents competition market 
agents behaviors perception deliberation 
meta behavior described section see 
firm perception behavior perception behavior allows firm observe market build competition model 
observable data ones shown market data representing performances various firms 
represent behavior implemented class sub class 
behavior method called scan aims build competition model observing data changes market 
scan collection performances firms self 
self 
self 
elementary competition model define data best average worst performances 
ymax max 
average 
ymin min 
class implements set conditions atn 
example method see means new observed collection data similar previous 
self similarity defined expression jy gamma gamma jy gamma gamma ffl ffl constant weight associated performance variable 
weights defined expert economist 
note firm deliberation behavior firm defined main properties state variables vector represent different types resources funds people equipment 
owned firm 
variables represent performances firm 
directly influenced vector 
firm characterized strategy follows allocate resources 
model strategy order priority modification vector 
instance cost strategy concentrates vector variables related production resources 
internal parameters modification strategy choice application modification parameters competition model send new parameters transaction zone compute firm deliberation behavior 
describes firm deliberation behavior methods box describing method 
example procedural method 
hand knowledge method chooses strategy 
method implemented simple knowledge base 
give example rule 
init 
conditions decreases 
actions 
class subclass 
underlined section engine behavior inference engine system implement knowledge base 
system set meta rules 
give examples meta rules behavior 
firm engine 
evaluator conditions status init 
context exists 
actions self 
status 
modified 
firm engine 
evaluator conditions status 

actions status 
modified 
simulation experiments aim experiments underline properties proposed agent architecture 
population agents property try underline agents added dynamically leave system 
agent meta behavior see transitions condition related application domain 
economic agent defined expression capital 
market evolution ffl action kill kills agent behaviors 
series simulation considered firms capital initial resource set 
tested effects entry market 
new firms entered simulation left market see 
heterogeneous agents second series simulation show dima define heterogeneous sets agents 
defined second kind firms case base reasoning choose strategy behavior 
kinds agents agents fixed decision process implemented knowledge base 
agents build case base studying evolutionary paths 
performance evolution firms learning abilities 
simulations show firms case decision efficient ones fixed decision process see 
results show merits adaptive behaviors 
discussion dima provides user facilities implement multi agent systems 
facilities improve development time 
example economic agents system implemented days 
number agents fixed user 
agents may leave new agents created dynamically 
furthermore inheritance mechanism enables specialization existing classes introduce new behaviors 
example implement agents learning abilities reused class describing simple decision see 
new class behavior redefined method implements strategy choice 
new method uses case reasoning 
implementation agents case decision required change 
instance atn new agents old see 
architectures proposed see build agents components cognitive reactive :10.1.1.35.7370
reactive components kind precedence cognitive ones 
key problem architecture kind control manage interactions fundamentally different components 
architecture proposes decompose behavior agent organization behaviors uses meta behavior manage interaction different reactive cognitive behaviors 
architecture provides main properties agent autonomy pro activity reactivity sociability 
detailed implement architecture active objects 
validated architecture applications manufacturing process simulator intensive care patient monitoring modeling economic agents evolution architecture offers interesting framework studying multiagent problems 
instance describe real time agents currently studying anytime reasoning technique 
realized experiments offer promising results 
limited study real time aspects agent level 
real time agents necessary real life applications sufficient build real time multi agent systems 
interesting study agents society cooperate solve global problem real time 
agha hewitt 
concurrent programming actors exploiting large scale parallelism 
th conference foundations software technology theoretical computer science pages 

briot 
experiment classification specialization synchronization schemes 
springer verlag lncs editor nd international symposium object technologies advanced software pages 
castelfranchi 
guarantees autonomy cognitive agent architecture 
intelligent agents theories architectures languages lnai volume pages 
ferguson :10.1.1.35.7370
touringmachines architecture dynamic rational mobile agents 
phd thesis university cambridge clare hall 
gasser 
overview dai 
kluwer academic publisher boston 
gasser 
briot 
distributed artificial intelligence theory praxis chapter object oriented concurrent programming distributed artificial intelligence pages 
kluwer academic publisher 

real time agent model asynchronous object environment 
maamaw pages eindhoven netherlands january 
springer verlag 
ichikawa tokoro 
decentralized ai chapter modeling autonomous agents groups pages 
elsevier science 
muller 
modelling reactive behaviour vertically layered agent architectures 
ecai pages amsterdam nl 
pachet 
embeddability production rules object oriented languages 
journal object oriented programming pages 
shoham 
agent oriented programming 
ai 
mckay finin fritzson 
kqml agent communication language 
acm press editor third international conference information knowledge management november 
wooldridge jennings 
agent theories architectures languages survey 
knowledge engineering review june 
yonezawa tokoro 
object oriented concurrent programming 
mit press 

