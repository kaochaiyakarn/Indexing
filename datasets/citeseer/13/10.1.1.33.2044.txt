supporting compositional reuse component web engineering martin office teco university karlsruhe str 
karlsruhe germany teco edu world wide web anticipated scope environment knowledge exchange changed dramatically 
major modifications primary mechanisms web turned platform distributed applications 
originally simple defined coarse grained implementation model web hinders web application development 
fine grained development artifacts design patterns established software engineering methods hard reuse web way implementation resources 
application software engineering practice development web referred web engineering especially systematic reuse components web application development low costs main goal achieve 
explains object oriented component markup language addresses problems 
systematic approach code reuse repository essential tool retrieval classification large component sets 
repository architecture crafted support multiple representation classification approaches 
facilitates reuse component web engineering 
keywords repository reuse pattern component retrieval 
existence www seen medium knowledge exchange proliferation 
roughly years passed applications put web moved long way plain hypermedia system envisioned 
today organizations www platform choice deciding system independent way deploying running distributed applications 
www browsers html base technologies thousands intranets allowing members organization remote access workflow systems increasing complexity 
requirements reached levels complexity previously known conventional software development development process numerous companies organizations working web ad hoc chaotic 
software development problem approached software engineering 
consequently applying software engineering practice web widely regarded solution 
denote approach term web engineering commonly remains undefined 
large gap granularity design models granularity implementation model web recognized main reasons low acceptance disciplined development community web developers 
argument new implementation model desirable results research compositional reuse stem field software engineering resulted new sub discipline component software engineering cbse 
cbse aims assembling large software systems previously developed components turn constructed components 
nature implementation model www burdens systematic compositional reuse previously developed artifacts code fragments 
object oriented model xml markup language allows defining components granularity introduced 
possible represent design concepts implementation 
facilitates web application development means composing web applications components 
sufficient amount components required reasonable chance finding matching component task 
finding component identified major problem compositional reuse 
repository storing components aiding location retrieval required facilitate reuse components attractive 
repository utilize representations components differ information extractable components able offer advanced methods location retrieval 
fully exploit advantages code reuse system designed implemented repository 
key feature repository openness adding new representation classification methods enhanced retrieval capabilities 
chapters give synopsis related technology address software engineering issues specific web 
furthermore architecture repository 
presenting perspective discuss aspects repository implementation 

applying component technologies web idea component software engineering construction software existing components decades 
definitions software components manifold feel calling supply 
subscribe definition requires components self contained clearly identifiable artifacts 
cbse said allow construction complex software lower costs 
supposed lead easier maintenance evolution higher flexibility software product entire life cycle increase quality performed systematically 
applying component software engineering web analogy cbse introduce term component web engineering denote construction web applications disciplined process involving systematic compositional reuse 
definition component web engineering cost effective production high quality web applications defined process includes systematic reuse components domain knowledge 
additionally common problems software engineering field activity subject faces sort specific problems web engineering exception 
known problems software engineering world wide web lies fact resource file implementation model truly intended kind complicated applications put web today 
design web applications entities handled designers defined higher resolution possible actual code produced development process 
objects seen different system parts designers integrated single resource single design entity may appear different documents implementation 
software engineering methods brought web design models especially suited web hypermedia applications example rmm jessica 
implementation model remains far coarse grained reflect designs crafted powerful methods 
granularity design models finer finer complexity applications developed implementation model web remained 
decade web wide gap opened expressiveness design methods semantically deprived web implementation model 
hard cases impossible represent maintain design decisions higher level concepts code 
consequently mapping changes design changes implementation tedious error prone task 
expressive power implementation model variety concepts design decisions get lost way code 
result reverse mapping web implementations higher level fine grained concepts impossible 
impact artifacts design part application life cycle 
evolutionary approach development encountered web particularly undesirable phenomenon 
effect hinders reuse level abstraction reduced journey design code 
actual code typically specialized design implementation model 
increasing complexity requirements coarse grained implementation model web burden developing maintaining parties 
component approach web application development approach introduced allows modeling web applications components 
bridges gap design implementation allowing capture design artifacts components arbitrary granularity 
resolution component preset vary depending level detail required design concept question 
component may represent example atomic feature font size attribute complex navigation structure implementations hypermedia design patterns simply compositions components 
way supports bridging gap design implementation model offering highresolution implementation model relying code abstractions 
complete target language resources constructed compiling compositions components 
model object oriented consequently supports code reuse creating new components existing ones inheritance 
inheritance works prototype instance model self class inheritance models known languages java 
prototyping referencing components techniques code sharing form reuse 
web composition markup language introduced offer convenient way define represent components 
markup language application extensible markup language xml allows tag definition components properties relationships components top prototype instance model 
xml chosen basis developing markup language components qualities described 
platform independent easy parse rigorous terms formed valid documents 

repository model hoped growing numbers components increase probability component fitting certain purpose exists 
hand difficulty associated finding component increases larger numbers components 
soon lot components available finding appropriate components main problems code reuse cbse approach especially 
component repositories answer problems posed situation human developer acquainted components know details 
providing flexible platform repositories intended reuse employ different methods classification representation components improve chance finding component matching development problem augmented perspective stored components 
commonly representation methods usually belong categories controlled uncontrolled indexing methods contain semantic information 
hypertext systems mentioned 
empirical study frakes thomas pole compared representation methods belonging category discovering inherently superior 
results methods useful differed slightly 
perfect 
frakes pole concluded set reuse entities represented ways afford considering results desirable design repository way newly developed classification representation methods added time 
especially research environment concerned applying new representation methods example conceptual modeling compositional reuse development advances fast pace potentially directions resulting need extensible flexible repository 
sections overview repository architecture 
explain main system parts architecture informally 
repository architecture single program constitutes repository 
basic mode operation repository cooperation system entities component store wrapper described metadata store search browsing tool repository tool 
tool utilize information stored metadata stores provide advanced retrieval abilities display information component store wrapper augmented additional information provided metadata stores 
tools shaped information certain sets metadata stores 
browsing tool graphs example cooperate metadata store contains statistical data 
component store wrapper metadata stores tool working referred repository context 
user repository repository context 
major design goal repository architecture possibility adding metadata stores tools time 
refer design goal 
brokerage mechanism provided architecture ensure fulfillment goal 
metadata store metadata store metadata store metadata store repository tool metadata store 
df reuse statistics component prototype property 
experience report component prototype intranet 
problems encountered documented 
conference 
component store wrapper component store repository tool created context containing metadata stores component store wrapper 
metadata tool gives augmented perspective components 
metadata stores metadata stores key functionality repository 
offer data components stored component store 
way metadata stores create representations components available contain information differing information contained components 
component store offers flat representation components 
provides simple dbms query functionality example doesn classify components functionality criteria 
especially large set undocumented components hard find appropriate component text search 
repository tool prominent part repository context repository tool 
supplies user interface part directly visible user 
user interface may gui command line interface human user may api allows tool programs 
typically tool viewer query tool browser retrieving components analyzing components offering services repository 
retrieving sorting displaying sets components way defined structures varying semantics possible metadata stores 
additionally possible metadata store manipulate metadata reaction query tool user actions 

repository system repository system designed allow access set components different classification retrieval methods 
system allows adding different representations existing components time 
chapter give detailed presentation system parts cooperate 
repository architecture implementation architecture requires repository works domain established component system corba com 
call implementation component system component system component integration technology implement repository 
architecture independent concrete component system component system fulfills certain set basic requirements 
informally speaking assumed component system provides unique component handles registered component system 
components offer interfaces contain methods 
assumed component component systems domain component handle known 
requirements fulfilled today popular component systems 
components component system implement repository confused components 
component store wrapper metadata stores components implementation component system 
tool need component 
system part metadata store component store wrapper 
enable tool contact components tool receive component handles 
repository broker provide handles 
broker implemented component component system 
set interconnected implementation component system domains component handle repository broker exists called repository domain 
broker unique repository domain 
tool communicates metadata stores component store wrapper implementation component system interfaces 
question metadata store tool cooperate boils question metadata store supports interface tool requires 
interface component store wrapper standardized 
metadata stores may offer different interfaces depending kind metadata stored 
metadata store contains statistical data prior uses component different interface metadata store containing graph structure 
repository context tis io mn ion values 
denotes repository domain context 
tis tool created context 
set interfaces exchange data metadata stores context 
component store wrapper 
mi metadata wrapper set interfaces supported mi context 
interfaces context listed 
context created destroyed exists completely repository domain repository broker view requirement openness satisfied procedure adding metadata wrappers mio tools repository domain way tool tis create repository context metadata wrapper io system part responsible guaranteeing openness repository broker 
allows selecting metadata stores interfaces 
installation new component repository domain repository broker register method called notify broker installation 
registration method offered broker implementation component system interface takes new components component handle parameter 
broker provides persistent storage handles registered metadata stores 
necessary broker knows metadata store interface able query interfaces passed registration 
tool pass interface unique identifier interface question implementation broker request list registered metadata stores support interface 
broker supply component handles metadata stores matching query 
implementation component system required enable tool component soon handle known tool create repository context newly registered metadata store 
argued implementation component system features brokerage mechanism corba system provided broker fulfill tasks repository broker 
metadata store repository tool implementation metadata store implementation component system component offering interface 
qualifying criterion component metadata store interface methods components return values parameters 
metadata stores interfaces offer methods depend type metadata stored 
tools able interfaces store 
stated primary purpose metadata stores supply information usually associated repository definition repository 
information example information component design history interactions components classification semantic information documentation 
metadata store store additional indexing browsing hierarchy meta information 
metadata store brokerage mechanism supplied repository allows adding metadata retrieval mechanisms various possibly unknown types 
repository tool tool defined program standalone program component creates repository context metadata store matching interface component store wrapper 
uses components returned interface metadata stores retrieve corresponding components component store 
screenshot simple repository tool 
requires metadata store supports interface browsing graph 

different representations component sets paragraph give examples kind information metadata stores supply tool utilize information information access component stores 
examples example additional textual information obvious example metadata store contains textual information components 
usually hard deduce effects component undocumented code 
third party component suppliers deliver metadata stores actual components 
appropriate tool easily implement online documentation help system 
example indexing information metadata store contain representations category representation methods 
metadata store filled librarian enumerated classification scheme free text indexing 
different user groups maintain index support team vocabulary 
repository architecture user groups achieve separate sets indices working repository contexts tool different metadata stores interface 
example statistical information interface metadata store may offer methods allow modifying contents store 
development tool tool role repository context may report components metadata store recording component usage 
way organization gather data success reuse attempts 
evaluation tool data produce statistics measuring values reuse efficiency 
example tool give lucid presentation concept want give condensed overview simple tool implemented 
tool works metadata stores contain directed graphs metadata tool display components defines directed graph set components 
metadata stores cooperating tool offer standardized interface supports iteration graph 
vertices components 
semantics weighted edges defined tool may differ different metadata stores offering interface 
consequently tool view example inheritance hierarchy graph conceptual closeness components 
required information represented directed graph 
receiving list handles metadata stores supporting interface question broker tool allows human user select list 
selection create repository context user start browsing graph portion displayed screen 
display modes selected 
vertices components chosen code displayed exported 
possible change recursion depth retrieving neighborhood current iterator position 
allow changing position graph rapidly possible issue queries dispatched directly component store 
queries boolean operations predicates component properties 
resulting jumped current iterator position 
tool extract entire contents metadata store create hypertext structure 
way fill metadata store offering interface described able tool evolution 
evolution repositories described 
teco metadata store constructed uses adaptive clustering techniques create new indices set components 
metadata store records paths repository user takes browsing components requires metadata store 
paths taken genetic algorithm tries put components clusters similar clusters higher level clusters 
way tree hierarchy constructed automatically 
approach similar 

pointed coarse grained implementation model world wide web hinders representation design concepts actual code 
resulting gap implementation design model burden modern software engineering practices web projects 
approach implementation technology bridges gap allows designing reuse 
component software engineering problem storing retrieving managing components center point considerations 
repository storing components approach address problem 
flexible nature repository architecture suited framework research developing comparing representation classification methods capabilities applied retrieval components reuse 
criteria adequacy repository 
sufficient number components provided secondly appropriate code easy locate retrieve 
existing repository addresses second issue 
current research focuses complex search tools metadata stores 
main goals create metadata stores store domain knowledge web environment 
consequently tool knowledge retrieving data component store 
parallel tools developed acquire html data www statistical evaluation semi automatic component extraction 
massive amounts code exist web promising approach meeting second criterion adequacy formulated maarek berry kaiser 
tools extraction recurring patterns high level languages exist peel lisp 
structures layout language html far simpler lisp example believe level human aid required extraction program lower similar tools real programming languages 
availability compiler available www teco edu 

jessica object oriented hypermedia publishing processor 
computer networks isdn systems special issue th intl 
world wide web conference brisbane australia april 

berg 
component software development silver bullet object magazine 

biggerstaff perlis software volume acm press 
coda ghezzi vigna garzotto 
software engineering approach web site development 
proceedings th international workshop software specification design ise japan 

frakes pole empirical study representation methods reusable software components ieee transactions software engineering vol 
pp 


frakes 
software reuse information retrieval proceedings th annual hawaii international conference system sciences 

beigl gellersen mobile information access catering heterogeneous browser platforms 
proceeding international workshop mobile data access conjunction th international conference conceptual modeling er singapore 


gellersen schmidt ller 
objectoriented web engineering large scale web service management 
sprague ed 
proceedings nd annual hawaii international conference system sciences maui hawaii cd rom 


gellersen enabling technology reuse object oriented web engineering 
poster session th international world wide web conference www toronto ontario canada 


gellersen 
object oriented support system web engineering lifecycle 
computer networks isdn systems special issue th intl 
world wide web conference santa clara ca usa 

haines carney john foreman 
component software engineering cots integration 
software technology review software engineering institute carnegie mellon university 
www sei cmu edu str descriptions cbsd html 

henninger 
evolutionary approach constructing effective software reuse repositories acm transactions software engineering methodology 

stohr 
rmm methodology structured hypermedia design communications acm vol 
august pp 


johnson adaptive clustering hypermedia documents information systems vol 
pp 


kristensen 
template resolution xml html 
computer networks isdn systems special issue th intl 
world wide web conference brisbane australia april 

maarek berry kaiser information retrieval approach automatically constructing software libraries ieee transactions software engineering vol 
pp 

pr 
mcilroy mass produced software components scientific affairs division nato software engineering conference 
prieto diaz classification reusable modules 
rossi garrido carvalho 
design patterns object oriented hypermedia applications 
pattern languages programs vlissides coplien eds addison wesley 
pr 
software engineering reusable components springer verlag 
schwabe rossi barbosa 
systematic hypermedia design 
proceedings acm international conference hypertext hypertext washington march 
pr 
ungar smith 
self power simplicity oopsla proceedings 
pr 
world wide web consortium 
xml extensible markup language 
www org xml authors authors share address office teco university karlsruhe str 
karlsruhe germany www teco edu ph fax email teco uni karlsruhe de martin research assistant office teco university karlsruhe technical lead collaborative web engineering projects 
research interests application software engineering practice applications www specifically component software engineering reuse frameworks reflection software architectures patterns software evolution web applications 
obtained master degree computer science university karlsruhe 
currently preparing thesis web engineering research degree computer science university karlsruhe 
worked software developer projects 
teco focusses cbse web technology 
developer implementations repository 
interested software engineering systematic reuse general especially tools supporting cbse 
