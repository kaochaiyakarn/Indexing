exploiting event infrastructure develop complex distributed systems cugola di fuggetta politecnico di milano milano italy mail cugola fuggetta polimi development complex distributed systems demands creation suitable architectural styles paradigms related run time infrastructures 
emerging style receiving increasing attention notion event 
event architecture distributed software components interact generating consuming events 
occurrence event component called source asynchronously notified component called recipient declared interest 
paradigm holds promise supporting flexible effective interaction highly reconfigurable distributed software components 
developed object oriented infrastructure called jedi java event distributed infrastructure support development operation event systems 
past year jedi implement significant example distributed system opss workflow management system 
illustrates jedi main features implement opss workflow management system 
provides initial evaluation experiences event architectural style 
keywords event systems distributed systems workflow business processes object orientation 
convergence telecommunication broadcasting computing opening new opportunities challenges potentially large market innovative network wide services 
class users interested revolution significantly large families professionals large organizations government agencies administrations 
services range home banking electronic commerce coordination workflow support large dispersed teams multiple companies 
research industrial activities currently carried identify feasible strategies develop operate services effective economically viable way 
technical problems addressed complex critical 
services able operate wide area network acceptable performance 
software technology implement services light scalable respect capabilities platform services running 
technology enable plug play approach support dynamic reconfiguration new service components 
essential support openness services easily extended integrated services offered network 
important research topic addressed foster diffusion network wide applications identification proper architectural styles able cope requirements challenges 
architectural styles exploit remote procedure call rpc support communication distributed components 
middleware infrastructures corba java rmi kind communication model 
rpc tight coupling object requests service client object satisfies request server 
invoking service client know existence server capable satisfying request obtain server 
situations decoupled communication model objects preferable 
example consider network management system 
system network node signals failure procedure started fix failure 
node necessarily need know existence recovery procedure 
simply notify external world detected failure 
kind scenarios easy develop communication model implemented corba java rmi 
appropriate paradigm address issue proposed event architectures 
components event architecture cooperate sending receiving events particular form messages 
sender delivers event event dispatcher 
event dispatcher charge distributing event components declared interest receiving 
event dispatcher allows decoupling sources recipients event 
relevance potential impact event paradigm acknowledged omg defined event service top corba framework see section related 
open issues need addressed define effective workable event infrastructures 
contribution research developed event objectoriented infrastructure called jedi java event distributed infrastructure 
jedi implement network wide process support system pss called opss orchestra process support system 
pss environment developing executing process workflow applications 
process application software system supporting coordinated set activities involving humans computerized tools 
typical examples business services customer care procedures 
contributions summarized follows introduces jedi new event infrastructure suitable develop wide range distributed systems 
illustrates exploited jedi develop opss discusses advantages derived adoption event approach 
presents experiences event paradigm 
consistently structure section quick tour jedi presents jedi basic concepts implementation section opss orchestra provides overview architecture opss section evaluation provides evaluation experience section related presents related works section draws 
jedi architecture jedi describes architecture jedi 
opss developed part orchestra project funded telecom italia 
ture notion active object ao 
ao autonomous entity performs application specific task 
ao interacts producing consuming events 
events particular type message 
conventional messages sent source recipients specified source 
conversely events include information recipients 
event generated ao notified event recipients dynamically selected specific component infrastructure called event dispatcher ed 
ed waits occurrence event delivers explicitly declared interest receiving 
ao declares classes events interested invoking event subscription operation 
accepting events class invoking unsubscribe operation 
event subscription unsubscription invoked time active object lifetime 
notification events accomplished asynchronously respect generation 
event dispatcher ao ao ao ao ao event logical view jedi architecture 
jedi event ordered set strings 
string event name 
remaining strings event parameters 
event represented notation similar function calls traditional programming languages open foo read open name event foo read parameters chosen simple event structure sake flexibility interoperability 
exploiting dynamic binding type checking features offered java defined events java objects significantly enriching semantics 
choice introduced constraints network wide availability system 
subscribe specific event event pattern 
event pattern ordered set strings representing simple form regular expression 
string pattern pattern name may asterisk strings standard strings strings composed single character 
pattern event matches pattern iff conditions term component heavily overloaded induced confusion 
hold name equal name contain asterisk name starts characters name excluding asterisk 
number parameters 
parameter pattern equal equal corresponding parameter event experience active objects operate quite standard sequence operations 
activation ao subscribes set events starts waiting occurrence 
event notified ao performs operation possibly generating new events starts waiting 
executes standard loop wait event subscribed process 
reason introduced particular type active objects called reactive objects 
reactive object exhibits method called specified programmer automatically invoked time reactive object receives event subscribed 
jedi provides classes implement generic active objects reactive objects see section 
reactive objects offer mechanism support mobility 
reactive object autonomously decide move different site invoking move operation causes actions occur 
state reactive object serialized saved standard java facilities 

reactive object moves new location informs ed ready receive events 

ed keeps events received migrating reactive object ready receive 
versions ed exploit different implementation strategies centralized hierarchical 
centralized approach ed constituted single process 
hierarchical approach introduced address issue scalability network wide level 
critical applications network management number high typically dispersed large number hosts 
number events dispatched extremely large 
context vital identify means reduce event traffic optimize performance distribution mechanism 
address issue hierarchical ed structured collection processes usually machine running jedi interconnected form tree 
ao connects processes 
events propagated ed process tree basis subscriptions posted ao 
notice behavior influenced implementation strategy chosen ed 
decision exploiting centralized hierarchical version affects performance system 
provide details issue main focus 
summary event communication style jedi characterized properties asynchronous multicast source communication specify destination communication destination communication necessarily know identity source events guaranteed received sequence produced reactive object move loosing occurrences events subscribed 
implementation jedi jedi implemented set java classes supports development pure event applications applications communicate exchanging events 
jedi includes event dispatcher components needed develop active reactive objects 
components properly tailored specific requirements system implemented 
jedi includes java packages 
package polimi jedi contains classes needed implement active objects 
package polimi jedi dispatcher includes classes implement event dispatcher 
describe uml logical design packages 
active object communicates event dispatcher methods offered interface shown 
interface includes operations needed produce events receive event notifications subscribe unsubscribe events 
infrastructure provides implementations interface classes 
uses rmi connect event dispatcher implement relationship uses standard tcp ip sockets 
jedi provides class implement reactive objects 
users may easily implement new reactive objects creating subclasses 
subclasses provide suitable implementation method 
illustrates java classes implement event dispatcher package polimi jedi dispatcher event dispatcher supports connections rmi standard tcp ip sockets 
tcp ip connections allow non java active objects exploit features jedi event dispatcher 
classes register store queue events received dispatched received event subscriptions respectively 
polimi jedi dispatcher uses polimi jedi 
polimi jedi register dispatcher package polimi jedi dispatcher 
opss orchestra pss orchestra multimedia distributed infrastructure offering range advanced telecommunication features 
particular allows users transparently access services types terminals 
supports users access orchestra environment constrained physical location 
services distributed replicated network depending load balancing needs 
opss conceived support design operation business services top orchestra infrastructure 
address requirements decided exploit jedi eventbased approach 
section main characteristics opss implemented top jedi 
architecture opss opss main components set agents state server see 
agents agents autonomous entities able receive activity description process model fragment execute 
activities specified language understood agents execute 
agents dynamically instantiated execution process 
event distribution key mechanism support agent interoperation 
events notify variety situations start termination activity creation new artifact 
exploitation event mechanism possible achieve important results 
agents dynamically seamlessly plugged opss 
particular creation removal agents affect directly agents 
second event notification defines standard interoperation mechanism independent language interpreted agents 
event dispatcher activity description tool agenda state server orchestra process support system 
opss offers kinds agents external tools software agents human agents 
external tools possibly offthe shelf components execute business specific activities configuration management tool 
activity description external tool just set information needed launch tool initial parameters 
external tools opss dedicated shelf tools 
interfaced opss gateway 
jedi class supports programmer implementation tools gateways 
software agents general purpose interpreters automated activities 
current implementation opss activity descriptions software agents coded java 
defined sub classes 
human agents people executing creative human specific activities customer service operator 
human agents supported agenda show assignments responsibilities process 
agenda explicitly developed opss uses services send receive event notifications 
state server state server charge coordinating agents offering logically centralized view state process 
state process defined entities shown 
entity associated set possible states define behavior 
class store information process agents 
modeled agents states available 
state agent requested execute activity 

class maintain information activities process 
activity states defined assigned ongoing suspended terminated aborted 
states detail 

class defines information concerning outcomes process 
possible states created edited destroyed 

class contains data tools invoked opss executable code java interpreter external tool devices printer audio device 
possible states available 
entities subclasses see 
turn subclass 
consequence instance subclasses autonomous thread execution reacts jedi events 
impl precedes creates modifies uses structure 
entity reacts events finite state machine defined class level called life cycle 
defines set admissible transitions states 
transition defined triple triggering event condition action 
respect transitions similar eca rules active databases 
entity receives event notification state transitions having initial state triggering event evaluated firing 
transitions condition evaluates true nondeterministically fired 
firing transition causes execution action part moves instance final state 
execution action part state transition produce new events may influence execution activity descriptions state objects state server 
defined assigned ongoing terminated suspended aborted suspend resume terminate abort abort abort abort activity life cycle 
example shows life cycle associated class 
object class created state defined 
state object characterized unique identifier activity description 
state defined object move state assigned corresponding activity description assigned agent execution event activityid received 
transition executed instance class corresponds selected agent tid state available 
transition execution instance moves state assigned instance moves state event activityid produced 
agendas usually subscribe types events provide human agents information assignments 
instance receives event activityid moves state assigned state ongoing provided activities preceding activity activityid terminated 
executing action part transition instance produces event activityid ad url 
event subscribed agent assigned activity activityid human agent agenda triggers execution activity 
parameter ad url contains location activity description executed 
state server main class impl 
defines inherited method react events login users creation new activities artifacts resources 
dynamic behavior state server simple subscribes waits events 
events occurs new activity needs started state server creates object able describe state corresponding entity process new activity keep track evolution 
time information stored state server mirror state process executed 
event interface state server exports set services java component query state running process instances subclasses 
services constitute synchronous interaction mechanism directly supported jedi 
motivation choice discussed section evaluation 
evaluation development opss demonstrated main advantage event paradigm supported jedi easy re configurability system 
instance integrated process monitor opss affecting behavior parts system 
process monitor simply subscribes events represent change process state visualizes accordingly 
experience identified problems open issues briefly discuss 
synchronous vs asynchronous communication jedi active objects communicate pure eventbased style 
mean active object send receive information generate receive event 
events sent received asynchronous way 
noticed situations active object generating event needs response recipient event order perform operation 
instance consider case agent needs notify state server new activity created activity assigned certain agent 
agent executes code fragment execution code erroneous possible race conditions 
instance state server reacts event unable create corresponding object event produced 
result event lost object late subscribing 
case state server able properly keep track agent assignment 
avoid situation convenient agent receives confirmation creation object generating event 
jedi behavior obtained programming event recipient produce event acts response initial event 
way source initial event explicitly subscribe event wait event occurrence producing event 
solution quite cumbersome expensive requires exchange high number messages event source recipient event dispatcher 
alternative solution explicitly define jedi concept return value event recipient back agent generated event provide programmers mechanisms easily manage values 
particular introducing additional synchronous operation event generation requires return value recipient event 
execution operation allows active object send event dispatcher wait information returned event recipient object interested event event dispatcher 
event multiple recipients policies envisaged manage return values 
instance source wait return value wait recipients provided response 
case event dispatcher inform source number return values receive 
notice additional synchronous mechanism preserves anonymity recipient event exchange return value managed event dispatcher 
general preserves basic semantics events multicast dispatching anonymity source recipients introducing significant amount flexibility optimization management complex agent interaction patterns 
event granularity experienced significant problem identifying events exchanged agents 
granularity events low events generated poor limited meaning 
choice significantly complicate programming activity reduce performance system difficult test monitor system 
side course grained definition events hide inside agents significant operations visible rest system 
instance consider example previous section 
case events gave synchronization troubles replaced unique event carrying information creation activity assignment specified agent 
design choice reduces number exchanged events modifies semantics activities activity created proper executing agent selected 
universal solution problem 
designer responsibility evaluate trade select suitable solution constraints requirements problem addressed 
client server vs event design paradigms main problem programmer encounters pure event approach programming philosophy differs traditional client server approach 
client server approach interaction components occurs component able perform operation asks behalf 
event approach components autonomous entities inform external world main changes occurred internal state state components devices observe 
notification event seen component external stimulus determine change internal state 
collaboration components indirect 
consideration main step understanding architectural paradigms identification classes systems better suit approach 
address different requirements discover event client server approaches alternative 
profitably integrated system 
opss tried event approach guarantee autonomy process agents reconfiguration system 
exploited client server approach query global state process maintained state server 
aware systematic study needed 
open issues network wide event distribution mobility development opss emphasized need powerful efficient mechanisms support notification distribution events network wide scale internet 
event infrastructure guarantee services implemented top available users dispersed internet 
hierarchical ed implemented may represent initial solution problem 
number issues addressed 
particular distributed ed provides performance improvement number messages exchanged delivered event ed components reasonable 
current experience aspects impact issue topology connections ed components expressive power provided subscription mechanism 
colleagues university colorado boulder uc irvine addressing issue defining assessing new architectures distributed eds 
argue mobility reactive objects supported jedi represents powerful mechanism implementing sophisticated applications 
may introduce problems combined ed distribution 
ed provide specific mechanisms guarantee moving objects receive duplicated events original ordering events respected 
provided specific solution hierarchical ed impact issue alternative ed architectures understood 
lack extensive experimentation mechanism exploited opss implementation 
related section surveys event infrastructures compares jedi 
shows impact adoption event approach opss comparing system similar state art 
event infrastructures frameworks past years growing interest distributed software architectures capable easily supporting dynamic system reconfiguration 
event paradigm provides promising solution problem 
breaks tight connection clients servers eliminating need clients know identity servers 
examples event systems may literature 
differ structure events dispatched way events observed mechanisms event subscription run time architecture see detailed characterization aspects 
general products approaches mention section support mobility software components exchanging events 
multicast rpc known group rpc allows client invoke service group servers exports interface 
servers register class messages service requests joining group exporting common interface defined group 
quite different approach taken jedi 
jedi event consumers powerful declarative approach register class messages need export common interface 
multicast rpc synchronous communication mechanism answer required jedi implements asynchronous communication mechanism answer 
viewpoint multicast rpc complementary jedi approach similar synchronous mechanism advocated section evaluation 
linda precursor generation languages aiming describing supporting cooperative computations 
basic idea different autonomous computations cooperate reading writing information shared repository space information tuples 
linda program read tuple repository basis contents pattern matching mechanism 
read operation remove tuple repository 
linda offers consume operation reads tuple remove repository 
linda jedi general event paradigm 
jedi possible declare subscribe operation class events application interested 
consequence application receive events conform subscribe declaration 
need explicitly request 
events distributed ed application produced asynchronously respect main control flow application 
conversely linda read consume operation independent synchronously executed linda program 
second jedi true event approach guarantees parties declared interest event eventually receive 
enforced jedi run time support subscription requests 
linda way achieve similar effect application level 
instance removing tuple linda program check global information sure interested parties read 
possibility event producer writes multiple copies tuple interested party 
means producer know number interested parties 
cases correctness event distribution semantics left programmer responsibility 
event systems considered evolution established class products called message oriented middleware 
explicit message queues distribute messages 
guarantee delivery messages location transparency 
multiple consumers message queue 
queue similar linda tuple space 
argue exhibit problem linda 
fact mom possible just read message queue removing decision left consumer 
guaranteed event delivered interested parties 
product derived field originally conceived support tool integration software engineering environment message exchange facility 
tools subscribe events send events receive events subscribed 
events asynchronous synchronous called notifications requests respectively 
case recipients supposed provide source return value 
approach similar developing jedi see section synchronous vs asynchronous communication publish subscribe semantics implemented typically oriented support tool integration case environment insufficient application domain 
particular offers event visibility levels session file 
session defined set tools served server 
usually user launches servers controlling separate group tools 
program subscribe messages belonging session related file 
mechanism impossible wide application approach 
instance possible develop monitor tool subscribes events related files 
corba event service defines roles system components event supplier event consumer 
described different idl interfaces provide methods exchange events event suppliers consumers 
structure corba event hidden event service 
events distributed suppliers consumers event channels 
event channel allows multiple suppliers communicate multiple consumers asynchronously 
event system may include event channels 
component system supplier consumer may connected event channels 
corba event service differs jedi significantly 
corba event distributed basis just implicit attribute name event channel event originally posted 
event dispatched consumers attached channel 
contents event visible event channel manage distribution event 
conversely jedi event composed set attributes 
producers see different channels 
simple post structured events ed 
consumers flexibly subscribe single declarative operation class events dynamically defined event patterns 
consequently expressive power jedi higher corba 
corba event channels easily simulated jedi event names quite cumbersome inefficient simulate jedi patterns corba 
necessary write specific code general need poll different corba event channels 
general jedi pattern includes selection criterion involves event attributes event name equivalent corba consumer programmed perform selection desired events analysis event contents 
means jedi ed avoid dispatching events match selection criterion equivalent corba consumer receives discards number undesired events increase event traffic 
tibco infrastructure creating maintaining large distributed event applications 
past years integrate financial banking applications especially trading services financial markets offers interesting features including reliable scalable distribution events 
exploits level hierarchical event dispatcher 
available documentation tibco offers event structure similar offered corba labeling mechanism assign names events 
lacks ability defining event patterns jedi 
event architectural style designed support development gui software 
multiple software components communicate connectors manage routing broadcasting events 
components connectors form dag direct acyclic graph 
dag component communicate connectors 
events classified notifications requests depending fact travel dag respectively 
differences jedi 
component developer event definition generation primitive 
notifications messages automatically sent run time support notify execution component method invocation 
possible component developer define generate events different semantics 
requests synchronous communications anonymous multicasted 
jedi propose synchronous mechanism return receipt preserve anonymity senders receivers possibility multicasting event 
yeast main component centralized server observes event sequences reacts occurrence action specification 
users add new specifications yeast running 
events operating system events file changes messages produced components system 
events combined sequence logical temporal operators 
actions include command executed computer command interpreter 
yeast jedi quite different complementary 
offer event dispatching functionality provides sophisticated mechanisms defining observing event sequences reacting occurrence 
yeast functionality easily implemented top jedi proper active object 
worthwhile compare opss state art better appreciate impact adoption jedi development range features functionalities 
relevant system 
process state server providing storage process state operations defining manipulating structure state 
applications execute process operate clients 
execute process activities invoke operations modify state process order reflect result processing 
event dispatching system notify interested clients changes occurred state process 
similar opss state server 
main difference uses event communication model notify state changes clients 
clients communicate rpc 
conversely opss state server supports rpc event interaction 
pss presents characteristics similar opss 
developed support distribution process execution lightweight installation reconfiguration easy integration components executing process fragments tools artifacts 
architecture composed main levels user level charge managing interaction users system level defines main process abstractions activities artifacts foundation level manages object persistency distribution 
opss provide decentralized execution processes exploit multiple process engines 
main difference rely event approach coordinate interaction different engines interact sharing artifacts information stored passive repository 
definition information stored opss state server inspired 
corba pss described 
connected tools corba orb 
pss manages activities artifacts resources agents 
associated life cycle 
state transition defined life cycle object executed corresponding event occurs 
available publications unable understand mechanisms run time manage event creation notification 
impossible carry detailed comparison architectures approaches 
illustrated main features jedi event infrastructure development complex distributed systems 
jedi exploits notion event standard internet technology provide software developer programming framework multiple active objects cooperate generating consuming events 
jedi implement significant example distributed system opss process support system 
jedi offers simple set mechanisms create multiple active objects interoperate exchanging events 
entire architecture simple orthogonal concepts 
events asynchronously distributed subscribers 
operations related event subscription event notification managed highly dynamic flexible way 
opss significant example distributed system development greatly benefited availability event infrastructure 
exploiting jedi features opss offer extremely flexible dynamically changeable support workflow management 
main lessons learned described indicate event approach certainly offers significant advantages traditional rpc conventional message communication techniques 
advantages demonstrated growing interest technology demonstrated academia industry 
number technological issues concerning event architectures explored 
respect argue critical issue addressed identification appropriate design implementation strategies possible integrate different conflicting features scalability enhanced event model objectoriented synchronous asynchronous event handling mechanisms event filtering 
effective methodological guidelines guide support design event systems 
plan investigate issues critical impediments effective exploitation event architectural style 
authors wishes antonio carzaniga carlo ghezzi dennis heimbigner david alex wolf important contribution accomplishment described 
wish provided essential support development implementation jedi opss 
opss development funded telecom italia contract managed armando 
views contained document authors interpreted representing official policies expressed implied telecom italia 

process enactment support distributed environment wet ice ieee fourth workshop enabling technologies infrastructure collaborative enterprises berkeley springs west virginia april 

conradi fuggetta 
assessing process centered environments acm transactions software engineering methodology vol 
july 

birman joseph reliable communication presence failures acm transactions computer systems february 

taylor process system integration infrastructure conference software process improvement practice experience january irvine ca 

carriero gelernter linda context communication acm april 

fraternali tanca structured approach definition semantics active databases acm transactions database systems 

heimbigner process server approach process programming fifth acm sigsoft conference software development environments december washington 
krishnamurthy yeast general purpose event action system ieee transactions software engineering vol 
october 

experimental open architecture support multimedia services corba java www technologies como italy may 

object management group common object services specification july ftp ftp omg org pub docs formal pdf 
ovum ovum evaluates middleware ovum 

reiss connecting tools message passing field environment ieee software july 

rosenblum wolf design framework internet scale event observation notification th european software engineering conference joint sigsoft foundations software engineering zurich switzerland september appear 

sun microsystems integrating applications toolset 
www sun com software products literature int tool preface html 
sun microsystems java remote method invocation specification february ftp ftp javasoft com docs jdk rmi spec pdf 
taylor medvidovic anderson whitehead jr robbins 
component architectural style gui software ieee transactions software engineering vol 
june 

tibco enterprise toolkit white 
www tibco com products hml 
yap tripathi tripathi fault tolerant remote procedure call proceedings th international conference distributed computing system june 

wang zhao zhu communication cooperation mechanism distributed systems acm operating system review 
