query language optimization techniques unstructured data peter buneman university pennsylvania peter central cis upenn edu susan davidson university pennsylvania susan central cis upenn edu gerd hillebrand university pennsylvania saul cis upenn edu dan suciu research suciu research att com certain database tasks require great flexibility people turning new kind data representation database constrained schema 
component database carries description independent components 
systems acedb popular biologists tsimmis proposal data integration organize data tree structures components equally represent sets tuples 
query language appropriate structures 
propose simple language unql querying data organized rooted edge labeled graph 
model relational data may represented fixed depth trees trees unql equivalent relational algebra 
novelty unql consists programming constructs arbitrarily deep data cyclic structures 
strictly powerful query languages path expressions unql efficiently evaluated 
describe new optimization techniques deep vertical dimension unql queries 
furthermore show known optimization techniques operators flat relations apply horizontal dimension unql 
reasons wanting consider unstructured data mean data structure constrained schema 
systems proposals emerged schema absent schema places loose constraints data stored database second purposes browsing may convenient forget schema exists 
new unstructured approach data representation component object describes structure components may linked arbitrary fashion 
shall consider problem querying manipulating data 
shall represent data general framework roughly speaking edge labeled rooted directed graph 
shall call labeled tree model query language shall develop easily thought tree traversing language expressible queries defined cyclic structures 
justify choice model briefly examine current systems conveniently represented framework 
unstructured data models 
biological data storage poses problem fixed schema systems 
problem rapid evolution experimental techniques requires constant adjustment schema grs 
missing data common desirable system presents data fields null values mentioned 
database corresponding author 
address department computer information science university pennsylvania south rd street philadelphia pa 
phone 
fax 
entry entry entry movie movie tv show title cast director title cast director title cast episode special guests casablanca play sam credit actors allen director allen referenced actors example movie database 
system extremely popular molecular biology community storing experimental data acedb elegans database tmd 
acedb schema schema imposes weak constraints database 
class acedb schema thought labeled tree non terminal edges labeled attribute names base types leaves labeled base types class names 
instance class non terminal edge subtree missing base type leaf contains set values type class leaf contains set instances class 
instances may directly indirectly refer introducing possibility cycles underlying structure 
acedb data model object oriented model think adapting object oriented query language 
need deal problem internal structure instance tree done problem dealing missing data extremely cumbersome queries 
limited query language developed acedb 
allows selections objects pointer traversals restructuring data form projections joins performed 
system uses tree model tsimmis project pgmw proposed heterogeneous data integration 
idea data describe trying force common global schema databases arisen independently may little structure common 
tsimmis schema type data interpreted user labels structure 
particular difference record set tsimmis structure record node edge labels distinct set node edge labels 
query language proposed tsimmis allows limited forms deep traversal data structures 
languages restructuring tsimmis appear important tsimmis proposed model data exchange 
optimization languages appears open issue 
edge labeled trees 
edge labeled trees provide reasonable generalization models 
example structure want deal consider movie database shown 
subtrees root movies differ represent actors 
third subtree represents tv series little structure common movies 
furthermore movies tv series refer creating cycles structure 
situation quite similar bibliographical extension acedb enables projections joins hack form compositional query language 
internet movie database www edu movies 
deliberately irregular example way reflects details structured useful database 
database cf 
examples pgmw information heterogeneous documents referencing relationship represented graph structure 
note information resides labels 
express structure information resides nodes acedb tsimmis allow simply migrate information new edge attached node 
note kinds labels tree character strings integers symbols corresponding attribute names 
atomic data values strings integers may occur tree just terminal edges 
similar acedb allows integer labeled fields 
browsing 
schema exists data data stored relational database management system may convenient ignore browsing purposes 
example want search character strings database determine tables contain particular term 
write generic relational algebra expression express query 
languages kks provide solution extended limitations object oriented databases 
problem deep queries query optimization remains 
example deep query known programmers find file known tree structured file system 
utilities perform particular query usually available generalize easily dealing recursive structures arise presence symbolic links usually achieved hack 
outline 
sections develop general unstructured data model detail discuss correspondences relational object oriented databases 
develop query language unql unstructured query language examples 
fixed depth structures unql expressive power nested relational algebra 
express arbitrary traversals tree searches controlled regular expressions paths 
far language limited restructure database arbitrary depths 
give general complex construct restructure database arbitrary depths 
give calculus languages translated provide optimization techniques calculus 
particular show horizontal optimizations relational structures vertical counterparts apply deep queries 
conclude questions connection unql languages 
data model need simple formulation kinds data just described 
restricting moment tree structures shall adopt edge labeled tree model data start explicit syntax construction trees ffl fg empty tree ffl fl tg tree root outgoing edge labeled attached subtree ffl union trees formed coalescing roots shall syntactic sugar fl fl fl delta delta delta fl example tree gamma gamma psi gamma gamma psi specified fa fb fg fgg fgg 
simplify syntax shortening notation terminal edges fg omitting braces singleton trees fl tg 
example fa fb cg dg 
labels carry basic information tree model need specify types data labels 
assume usual base types string integer real available 
types values relation 
addition shall new type symbol labels correspond attribute names relation 
shall write numbers symbols delta delta delta delta deltaff au delta delta delta delta deltaff au ffl cw ffl cw ffl cw tup sw tup gamma gamma gamma gamma gamma psi tup tup tup phi phi phi phi phi phi phi phi hj fr fa tup fa gg fc tup fc tup fc ggg representations relational database 
literally usually capitalized quotation marks strings cat 
follows shall simplifying assumption edges symbols strings integers fact type labels just discriminated union base types 
note real distinction symbols strings just useful categories remind intended 
relational nested relational databases 
easy encode relational databases trees 
starting tuples relation attributes tuple ha vn may encoded fa vng 
choosing special label indicate encoding tuple encode relation tup tup encodings tuples relation 
database set relations named rn encoding database fr rn ng encodings associated relations 
example shows simple relational database conventionally tree encoding 
nested relational databases encoded similarly 
cyclic structures 
built extending syntax trees tie leaf nodes back tree 
introduce tree markers syntactic construction xn expression denotes possibly cyclic tree 
tree expressions built previous tree constructors augmented tree markers may tree 
example fa fd gg fb denotes cyclic structure depicted 
abuse terminology call structures trees understood rest tree really rooted directed connected graph 
cyclic structures easiest draw aid ffl edges edges having label 
see ffl edge node node meaning copy edge emanating attached example consider tricky cyclic structure recall markers may trees may valid tree expression 
root root root cyclic structures 
fa fb fcg draw naturally 
furthermore prove graph ffl edges equal sense precise ffl edges graph equivalent 
object identity equality 
tree markers confused object identities different expressions may describe tree 
example expressions denote tree fa fa fa gg fa fa notion equality adopt bisimulation mil 
graphs bisimilar exists binary relation nodes theta nodes root root edge labeled exists edge labeled vice versa 
bisimulation extends naturally graphs ffl edges bds graphs bisimilar 
translated oodb terminology means notion equality value consider databases equal possibly infinite databases obtained replacing oid value corresponding object 
tree data model intended object oriented model worthwhile discuss briefly advantages adopting complex notion equality object identifiers 
bisimulation sense observational equality kos shown reasonably expressive object oriented query language directly observe test equality object identifiers databases bisimilar iff indistinguishable query language 
result bisimulation notion relevant database query languages 
second question efficiency 
suppose wish find databases fragments thereof independently generated oid 
oid notion equality instance graph isomorphism problem known tractable 
contrast bisimulation graphs tested quite efficiently paige tarjan pt show graph vertices edges bisimilarity tested log time 
types 
type labeled trees simple description 
label type edge labels type fin describe type finite sets type labeled trees tree satisfies equation tree fin label theta tree 
informally equation says tree set pairs labels trees 
bts obtain natural form computation type structural recursion 
know bds general structural recursion powerful cyclic structures queries may lead infinite recursion give undefined results 
languages describe restrictions general structural recursion defined cyclic structures 
development languages important remember dealing just data types label tree 
query language unql describe query language unql 
presenting examples query tree fixed depth 
prove data structures representations relational databases queries equivalent relational algebra queries 
give examples query arbitrary depth 
queries retrieve information tree 
contain complex path expressions meaningful cyclic structures 
scratching surface top level fragment unql start simple examples relational database described 
assume database name db 
example expression select nt db says compute union trees db contains edge emanating root 
edge query returns simply set tuples 
returned expression fa tup fa gg important differences comprehension syntax bls relational calculus languages derived sql 
part expression component form nt db generator components pattern nt left generator arrow tree db right hand side arrow 
seen tree simply set edge subtree pairs generator matches pattern pairs 
edges labeled match match occurs variable nt bound associated subtree expression select clause evaluated added result 
variables introduced unql flagged backslash 
backslash part comprehension select part 
explicit binding variables needed avoid ambiguities arise nested queries 
example expression uses label variable nl match edge emanating root 
select nl nt db result union tuples relations heterogeneous set described single relation 
example conventional select project operation relation select fa tup fa nx ny db complex pattern bind components successive tuples relation 
query equivalent query select fa tup nt db nx ny example join common attribute project select fa tup fa nx db tup fc db note variable bound pattern generator constant pattern second 
example query performs group operation column 
select fx select tup fc db tup nx fg db nx fg needed bind edge label tree expression select clause sense 
contrast ny ranges trees 
output query tree gg 
example turning movie database see queries answered techniques developed 
example give titles casts entries movies tv shows select ft cast entry ft nx cast db wildcard symbol matches edge label equivalent binding fresh anonymous variable point 
note query returned tree set pairs components pairs trees 
example example problematic 
want binary relation consisting actress actor title tuples movies 
problem information uniformly located tree 
select factor entry movie ft ny cast db nx fg select nu assumption names want immediately cast edge step 
want edges strings 
query illustrates condition second construct occur part comprehension 
assumed type labels discriminated union properties available 
summarize unql syntax far 
general select construct form select cm tree expression generator condition 
conditions predicates labels tree emptiness tests isempty 
generators form pattern tree expression 
syntax patterns tree literals addition patterns may bind new variables variables preceded backslash 
bound variables may constants patterns see variable example 
note variables kinds label variables tree variables 
example query select nl nt db label variable tree variable 
kind variable depends introduced variable label variable iff bound left arrow 
forces explicitly add empty wildcard tree pattern 
example query select flg nl db returns top level edges db associated subtrees select nl db returns db unchanged treated tree variable match entire tree db 
semantics query select cm follows 
assignment labels trees variables cm causes patterns match ground instance pattern matches tree iff occurs subtree rooted top satisfies conditions expression evaluated produce ground tree 
output query union trees obtained 
plunge deep queries 
apparent previous examples need expressive power look data depth tree predetermined schema 
example simplest queries need look arbitrarily deep database find edges certain property 
example find set strings database select flg nl db repeated wildcard matches path sequence edges tree 
construct proposed pgmw 
shall find useful queries need 
shall want specify regular expressions paths shall adopt grep syntax 
may wonder queries containing construct defined cyclic structures number paths structures infinite 
cyclic structures finite number distinct subtrees finite number distinct assignments labels trees variables clause output query finite 
leading common shall special abbreviation pattern tree expression query select flg nl db example consecutive deep generators find movies involving select xg movie nx db find movie edges database matter return edges subtrees contain beneath 
example problem example may return required 
example movie returned refers movie involved 
order avoid paths complicated pattern path select xg movie nx db movie movie grep pattern movie matches path contain label movie 
arbitrary regular expressions may labels 
general pattern regular expressions unql tree pattern tree constant tree variable fp pm pm patterns form pattern 
variable nl regular expression nl nt db nt db nl nt db bind variables inside regular expressions 
examples complex patterns nl nt db binds edge label depth db 
show nl nt db binds edge label occurs twice db occurrence tv show edge second reachable traversing edge 
bind 
variables inside regular expressions nl nt binds top level label occurs exactly edge 
examples section borrowed limited regular expression syntax unix grep command see section deal larger class regular expressions described deterministic finite automata 
regular expressions paths leads number ways controlling searches 
queries far bring subtrees top level 
example extract relational database structures trees perform deep restructuring trees 
section address general problem 
unql relational databases 
section showing traditional flat relations general nested relations unql collapses simply relational algebra nested relational algebra respectively 
statement precise follows 
flat nested relational database schema oe tree oe denotes set trees represent instance oe described section 
easy see nested relational operator expressible unql techniques earlier 
interestingly prove converse unql query schema preserving satisfies condition tree oe tree oe expressed nested relational algebra 
summarized result proof omitted 
theorem nested relational database schemas oe oe set unql queries mapping tree oe tree oe coincides set nested relational algebra queries 
making deep changes queries discussed far exploited depth pulling subtrees 
section describe language constructs allow changes deep tree 
consider simple example example want replace labels label traverse db giving case ff xg case nl fl xg construction says replace edge tree db tree follows 
see edge labeled db replace tree ff xg essence just edge leading marker see edge labeled replace tree fl xg 
different trees joined follows leaf tree replacing edge joined roots trees replacing successors note order write case statements matters reversed produced tree identical original 
restructuring performed traverse construct relatively simple acts locally edges 
simplicity allows meaning cyclic structures cycles simply transformed cycles limits expressive power 
increase expressiveness significantly allowing markers confining local illustrated example 
example suppose want replace edge edge tv shows leave edge kinds movies untouched 
part tv show local information available edge general don know far apart tv show edge underlying 
trick construct trees parallel db movie featuring new root movie featuring movie replacing edges tv shows 
new root root tree 
note part trees inaccessible root need constructed query evaluation 
having edges going second illustrated 
tree identical copy input database db 
second tree copy db edges replaced 
addition edge labeled tv show redirected corresponding node consequence edge db replaced small trees markers keep track traverse db giving case tv show ftv show case ff case nl fl fl construction pattern matching done twice edge time clauses having assignment current marker considered 
tv show edge clause succeed clause convention final result tree rooted marker parts superfluous edges beneath tv show edge tv show edge 
discarded anyway inaccessible root fact execution query parts need constructed 
general form construct traverse giving case 
case pm cm tree markers pm patterns starting edge form nx cm optional conditions tree expressions may involve markers illustrated previous example may group clauses pattern condition 
output traverse computed 
edge input tree replaced trees corresponding markers follows 
current edge 
deep nest query example marker match edge successively patterns corresponding conditions assignment match find 
th tree replacing edge value match replace edge empty tree 
continue way 
glue little trees follows 
marker trees replacing edge coalesced roots th trees replacing successor edges 
convention root result corresponding example consider deep nest example tree want nest edges labeled subtree form fa top edges replaced fa ng markers refers output constructed far refers set children node 
query simplicity assume edges occur topmost level consecutive edges tree 
see illustration 
traverse db giving case fg case nl fl fa fg case nl fl fg note processing edge locally look surroundings 
example pattern nl means processing edge labeled nl look see followed edge labeled fact unql allows look subtree beneath restriction tree replacing constructed independently replacing edges 
traverse construct typically executed traversing tree process constructing resulting tree 
traverse queries composed apparently traverse tree twice build intermediate result 
show section composed query optimized fuse traversals single eliminate intermediate result 
example recall query example returning tree edges replaced edges 
assume want compose query select tg nt composing queries obtain set excluding tv shows 
course easy obtain set single traverse query 
section show single query obtained simple algebraic equations 
considered allowing unql look tree top edge construct expressive current traverse plan exploit 
fg tree label tree fl tg tree tree isempty bool tree tree tree tree tree tree label theta tree tree tree gext tree deltay rules uncal 
calculus unql optimizations show unql equivalent simple calculus call uncal unstructured calculus 
term calculus sense lambda calculus formalism variables functions sense relational calculus logic variables quantifiers 
give simple effective procedure translating unql queries uncal expressions 
simplifying unql uncal achieve purposes 
prove properties unql example queries defined cyclic structures computable ptime 
second important build optimization techniques unql algebraic identities hold uncal 
section show equations illustrate corresponding optimizations 
calculus uncal salient construct uncal recursion operator gext mechanism underlying traverse construct 
traverse unorthodox operator uses tree markers essential way 
real life examples probably put burden markers interactions different sets markers result optimization step shall see shortly somewhat delicate 
uncal quite keeping track markers 
finite set markers denote tree set trees having markers implies tree tree furthermore reason apparent shortly assume put markers build new delta new marker built distinct markers built way 
sets markers delta denotes set markers delta uncal operators listed exploit dual nature trees sets horizontal dimension branching lists vertical 
uncal set operators horizontal dimension trees list operators vertical dimension 
best illustrated union operator joins trees horizontally append operator joins vertically 
expected append somewhat complex operation union 
append expression tree type tree indexed family trees type tree families occur uncal write fx xn fx xng denote set indexed families trees markers tree result append obtained replacing marker tree markers preserved output type tree simple example marker consider fa xg fb 
fxg fa fb 
example markers fa fcg fx indexed family fx fb dg fb egg 
fx fa fb fc dgg 
see 
simple operators uncal fg fl tg emptiness test dimension neutral 
complex operator uncal gext 
function label tree inputs returning indexed family trees markers gext produces indexed family trees describe works 
examples append consider case marker say describe gext recursive process 
gext fxg 
fg def fg fl tg def fxg def suggests computation method start root go downwards tree 
wonders gext loops forever cycles 
answer 
assuming cyclic structure defined say tree markers yn add additional clause definition def alternatively useful view gext parallel process 
compute gext fxg start making copy node tree take edge going vertex replace 
doing identify root vertex identify leaves labeled see illustration 
prove recursive parallel processes describing gext equivalent 
parallel clear computation go infinite loop cyclic structure justifies somewhat arbitrary equation 
recursive view appropriate designing queries 
markers say fx xm gext construct allows define simultaneously mutually recursive functions shown 
apply gext tree markers yn get tree mn markers labeled delta fg def fg gm fg def fg fl tg def gm fl tg def fm def def def delta gm def xm delta shorthand indexed family fx xm gm input trees usually markers yn inside important specify gext interacts reasons markers part specification cyclic structure part gext construct 
happen optimizations 
equivalently join ffl edges 
gext visualization gext applied independently edge resulting small trees joined 
way gext acts dimensions tree set horizontal list vertical 
cases gext specialized dimension 

case topmost level tree denoted processed 
classical operation sets call ext label theta tree tree tree ext tree meaning ext fl ng delta delta delta 
second case depends label tree call vext 
label tree tree vext tree deltay single marker vext exactly ext lists 
assume encode list vertically fa fa fan gg assume returns list form fb fb fbm xg gg label vext described vext def 
example vext consider query returns set subtrees unql expressed select nt uncal express component vext fx fl fl generalized arbitrary regular expressions precisely show deterministic finite automaton exists vext expression pulls top level subtrees reachable path accepted automaton 
automaton may labels previously bound variables negation edges 
number markers plus number states automaton 
particular queries select nt section regular expression translated vext 
uncal includes conditional equality predicate labels 
theorem unql uncal equivalent 
exists effective translation unql uncal 
proof sketch direction easy 
uncal expression obviously translated unql gext traverse 
direction involved sketch briefly 
consider select cm construct 
loss generality may assume canonical form selectors forms nl nt nt regular expression predicate easy transform select query canonical form replacing nl nl nt nl nt nl nt translate select cm uncal expression follows 
form nl nt translation ext select cm 
form nt translate ext select cm 
predicate translation select cm fg 
course cases continue translate remaining select expression 
eventually reach select simply consider traverse expression 
restructure canonical form traverse giving case nl nt expressions include constructs patterns conditions 
obvious canonical form precisely gext construct fx uncal simpler formalism unql 
prove easily properties uncal unql 
example theorem queries expressible uncal unql defined cyclic structures computable ptime 
optimizations uncal biggest advantage having simple formalism enables derive optimization rules 

optimization rules set query languages centered ext set union considered previously won 
surprisingly hold identical form vertical dimension slight twist restrict vext gext 
considering optimization rules shall focus simple equation pushing selections join tree second complex loop fusion putting maximum strain usage markers uncal 
example start simple optimization rule ext adapted won ext ext ext occur free extends naturally vext gext gext gext gext occur free derive classical optimization rule pushing selections join tree vertical dimension uncal 
see works consider vertical selection join query traverse giving case na traverse giving case nb ff edge satisfying replaced full copy tree edges satisfying removed 
copy obtained replacing labels new label 
query nontrivial assume initially markers ignore marker renaming issues query gets translated uncal expression vext fxg vext fy ff fg 
correct version traverse giving delta tv show featuring special guest tv show special guest special guest special guest special guest tv show graphic representation functions problem predicate applied inner loop obviously expensive apply outer loop traverse giving case na traverse giving case nb ff translated vext fxg vext fy ff fg 
rule described earlier simple rule vext fg fg allows transform query second 
second optimization rule corresponds vertical loop fusion gp 
consider expression vext vext 
visualize pipeline process edges fed function transforms label small tree 
new edges produced fed replaces edge small tree 
optimize process traversing replacing edge tree vext 
intermediate result vext unnecessary may speed computation dramatically trees empty pruning early computation vext 
short perform optimization replacing vext vext vext vext ffif ffi denotes function composition 
getting rule presence markers hard task discovered right way vext interact markers existing essentially equation 
listing optimization rules consider example 
example take query example replacing edges edges tv shows movie database suppose query defines view expressed vext fx db graphically represented 
assume want query view follows 
want set written select tg nt equivalently traverse giving case case na fa precisely vext fy function represented graphically 
querying view boils computing composition vext fy vext fx db 
pipeline process described earlier equivalent vext db fy delta delta delta delta obtained applying locally small trees produced best way understand tv show special guest special guest tv show tv show special guest featuring graphic representation function vext ffi function graphically see 
write resulting query consisting single traverse expression traverse giving delta delta delta delta case tv show delta delta delta ftv show delta case delta delta delta ff delta case nl delta delta delta delta delta fa delta delta fa delta observe tree corresponding delta empty edge leaving state ffl edge state 
simplify resulting query eliminating marker delta replacing fg fact markers necessary express composed query single traverse 
instances may discover markers accessible root markers eliminated simplifying query 
give optimization rules general form 
mentioned earlier rules won apply vertical operators uncal 
listing show powerful ones corresponding horizontal versions 
theorem optimization equations hold ext ext ext vext vext deltay vext ext ext ext ext ffi vext gext gext deltay vext ffi equation emphasizes parallel nature vext 
compute vext applying independently note fails gext appending results 
note markers interact markers indexed family trees 
vext markers delta index right hand side 
note indexed family trees vext delta indexed family trees obtained aggregating indexed families trees obtained applying vext tree family second equation vertical loop fusion general form example instance equation 
note loop fusion works loop gext second loop needs vext 
note new loop function vext ffi produce mn markers number markers produced respectively 
related adopted labeled tree abstraction wide variety structured unstructured data sources shown possible develop simple query languages underlying optimizable algebra querying transforming labeled tree structures 
intend incorporate comprehension fragment unql existing implementation cpl collection programming language won 
important open questions 
syntax 
syntax making deep queries probably improved 
deep restructuring operations expressible uncal translation traverse giving cumbersome 
expressive power 
certain restructuring queries appear expressible uncal require fix point operation 
view theorem know transitive closure expressed terms fixed depth structures expressible unql 
interesting problem generalization edge merging example section 
merging sibling edges level leads possibility edges level siblings merged 
easy see result repeatedly merging sibling edges merges possible defined appear possible compute unql 
connections graph logic 
approach querying labeled trees variety graph logic cm 
possible express vext fragment uncal datalog graph representation input tree 
represent tree set oid label oid triples construct program expresses output graph predicate oid label oid triples oid values constructed skolem function input oids similar id terms logic kl 
datalog optimizations optimizations open question 
optimizations 
examination examples section indicate schema obtain useful optimizations pruning search searching subtrees known contain relevant structures 
problem describe schemas 
seen relational databases idea generalize object oriented databases 
may looser notions schema labeled tree model 
val breazu tannen peter buneman limsoon wong 
naturally embedded query languages 
biskup hull editors lncs proceedings th international conference database theory berlin germany october pages 
springer verlag october 
available upenn technical report ms cis 
bds peter buneman susan davidson dan suciu 
programming constructs unstructured data 
technical report ms cis department computer information science university pennsylvania philadelphia pa march 
bls buneman libkin suciu tannen wong 
comprehension syntax 
sigmod record march 
bts breazu tannen subrahmanyam 
logical computational aspects programming sets bags lists 
lncs proceedings th international colloquium automata languages programming madrid spain july pages 
springer verlag 
cm consens mendelzon 
graphlog visual formalism real life recursion 
proceedings th acm sigact sigmod sigart symposium principles database systems april 
gp goldberg paige 
stream processing 
proceedings acm symposium lisp functional programming pages austin texas august 
grs goodman stein 
requirements deductive query language genome mapping database 
proceedings workshop programming logic databases vancouver bc october 
kks kifer kim sagiv 
querying object oriented databases 
stonebraker editor proceedings acm sigmod international conference management data pages san diego california june 
kl kifer 
logic higher order language reasoning objects inheritance scheme 
proceedings acm sigmod pages june 
kos anthony 
modeling merging database schemas 
technical report ms cis department computer information science university pennsylvania 
mil robin milner 
communication concurrency 
prentice hall 
pgmw papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
ieee international conference data engineering march 
pt robert paige robert tarjan 
partition refinement algorithms 
siam journal computing 
tmd thierry durbin 
syntactic definitions acedb data base manager 
technical report mrc xx mrc laboratory molecular biology cambridge cb qh uk 
won limsoon wong 
querying nested collections 
phd thesis department computer information science university pennsylvania philadelphia pa august 
available university pennsylvania ircs report 

