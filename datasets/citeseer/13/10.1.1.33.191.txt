fundamentals object oriented database modelling klaus dieter schewe technical university computer science institute 
frg schewe informatik tu de 
solid theoretical foundations object oriented databases oodbs missing 
reported contains results formally founded object oriented datamodel oodm intended contribute development uniform mathematical theory oodbs 
clear distinction objects values turns essential oodm 
types classes structure values objects 
founded top underlying type system 
outline di erent approaches type systems semantics claim oodb theory top arbitrary type systems leads type theory topos theoretically de ned semantics 
basis known solutions problems unique object identi cation genericity generalized 
turns extents classes completely representable values 
classes called value representable 
consequence object identi ers degenerate pure implementation concept 
stimulates considerations depend identi ers 
order approach problem object oriented schemata instances reorganized means general category theoretical arguments occur theories higher order intuitionistic logic associated topos de ned type system 
case value representability seen object identi ers dispensed logical level 
allows approach queries algebraically logically sets starting point deduction oodbs 
shortcomings relational database approach encouraged research aimed achieving appropriate data models 
claimed object oriented approach key technology database systems languages 
systems arose orts 
contrast research relational area common formal agreement constitutes object oriented database 
basic question object trivial variety answers large 
object oriented programming notion object intended generalization data type concept additional feature inheritance 
sense object orientation involves isolation data semi independent modules order promote high software development productivity 
development object oriented databases regarded object basic unit persistent data view heavily uenced existing semantic sdms 
object oriented databases composed independent objects provide maintenance inter object consistency demand degree basic style object orientation 
theoretical investigations eld oodbs rare 
existing results oodb theory classi ed groups 
rst studies expressiveness complexity query languages object creation duplicate elimination 
follows ideas iql framework 
second asks fundamental features object oriented semantical foundations :10.1.1.15.6572
third group continues line research databases occur theories de ned logic programs 
view common oodb research objects abstractions real world entities identity 
leads distinction values objects 
value identi ed object identity independent value 
object identity usually encoded object identi ers 
abstracting pure physical level identi er object regarded immutable object lifetime 
identi ers ease sharing update data 
identi ers relieve task provide unique identi cation mechanisms objects 
object oriented programming object names sucient retrieving mass data name 
approaches oodbs object coupled value xed structure 
point view contradicts goal objects abstractions reality 
real situations object changing aspects captured object model 
object model object consists unique identi er id set type value pairs set object pairs ref set operations types structure values 
rst problem concerns semantics type system variety types de ned schema de nitions 
consider di erent approaches simple type system set semantics typed calculus slightly extended version girard reynolds polymorphism 
third case known set theoretic model 
case suitable models obtained ective topos grothendieck topoi 
may ask model respect computational aspects 
may argued having mind point view may help ective computations 
classes serve structuring primitive objects having structure behaviour 
obvious multiple aspects view object allows simultaneously members class change class memberships 
oodm class structure uniformly combines aspects object values 
extent classes varies time types immutable 
relationships classes represented referential constraints object identi ers involved 
class accompanied collection operations 
schema collection class de nitions explicit integrity constraints 
shown semantics oodm schemata de ned uniform way independently underlying type system 
important oodb problems concern unique identi cation objects existence generic update operations 
immutable identity object encoded concept object identi ers 
advantages approach sharing mutability values cyclic structures represented easily 
hand object identi ers meaning user hidden 
notion value representability known guarantee unique identi cation case set semantics 
generalized general case 
applies genericity problem 
show categorical terms classes schemata instances captured categorically 
internal logic topos may de ne schemata instances theories get rid object identi ers existence identity description predicates intuitionistic logic 
basis algebraic logical queries de ned 
step depends value representability necessary property genericity unique identi cation objects weak value identi ability sucient 
slight extensions omitted allow capture case 
assume basic knowledge category theory elementary topos theory relation higher order intuitionistic logic 
type systems start brief look di erent type systems semantics 
approaches comprise simple type system set semantics typed calculus semantics cartesian closed categories version polymorphic second order typed calculus 
common cases view types basically base types constructors 
occur types free type variables 
type free variables called proper base types assume identi er type id type occurrence id called value type 
simple type system 
set modelling type may regarded immutable set values uniform structure 
subtyping relate values di erent types 
type system consists base types bool nat int string type constructors records nite sets lists arbitrary types de ned nesting 
assume recursive types semantics de ned rational trees 
shall proceed giving formal de nition types 
type system de ned ftg semantics types sets values de ned usual 
type system may extended subtype relation semantically gives rise subtype functions omit details 
proper type occurring type exists corresponding occurrence relation truth object set bool 
typed calculus 
typed main emphasis function types de ne type system semantics typed calculus described cartesian closed categories 
polymorphism 
third approach choose slightly enriched version polymorphism grp types language denotes collection base types including purposes type id object identi ers represents type variable represents product types represents function types impredicative polymorphic abstraction running types 
recall notion topos 
topos nitely complete cartesian closed category subobject classi er object global element true monomorphism 
unique classifying morphism cl triv de ne pullback cl true 
denotes terminal object 
may de ne mean model type theory topos model grp topos consist essentially small internal category closed nite products exponents ob indexed products embedding preserves properties 
commonly known model category partial equivalence relations ective topos exhibition various approaches construct models refer 
oodm schemata section slightly modi ed version object oriented datamodel oodm 
observe object real world identity 
system provided object identi ers introduced capture identity 
real world object basis abstraction identi er identi cation object 
contrast existing object oriented object coupled unique type 
contrast observe real world objects di erent aspects may change time 
primary decision taken object associated type types change object lifetime 
applies objects 
class concept 
class concept provides grouping objects having structure uniformly combines aspects object values 
generic operations objects object creation deletion update values associated classes provided operations de ned 
objects belong di erent classes guarantees object object model captured collection possible classes 
values de ned types objects de ned classes 
object class consists identi er collection values objects classes 
identi ers represented unique identi er type id values combined representation type occurence id denotes classes 
may de ne structure class types free variables 
dynamics distinguish visible hidden operations emphasize operations invoked user 
operations class including hidden ones accessed operations hidden operations handle identi ers 
denotes large collection names 
value type free variables pairwise distinct names class names expression derived replacing called structure expression 
ii class consists class name structure expression set superclass names fd dm set fm operations 
call class class type derived replacing type id called representation type tc class type uc ident id value tc called class type 
iii operation signature consists operation name set input parameter input type pairs set output parameter output type pairs 
write iv operation class consists operation signature name body recursively built constructs assignment class variable xc local variable term type skip fail loop sequential composition choice projection guard restricted choice formed formula variable type instantiation operation class input parameters output parameters variables type term type variable 
operation class signature called value de ned proper value types 
vi schema nite collection classes closed superclasses occurrences class names operations 
semantics 
assume underlying type systems set semantics 
de ne instances oodm schemata 
instance schema assigns class value type uc conditions satis ed uniqueness identi ers class id tc inclusion integrity subclass id dom dom tc subtype subtype function tc id tc referential integrity corresponding occurrence relation id tc dom basis topos theory rephrase de nition database instances 
set consider subobject dc 
id tc monomorphism 
id tc id canonical projection uniqueness identi ers means monic 
image factorization im dc id factor subclass thirdly dc subobject dc id classi ed dc id id 
id tc id id tc id corresponds im dc 
id result image factorization dc 
dc id factor semantics operations de ned predicate transformers shown classical case topos semantics 
example 
look simple university example simple type system set semantics 
rst introduce types classes show example instance 
type personname firstname string string titles string type person nat name personname type nat spouse schema consist classes class structure person class isa structure nat spouse class isa structure nat supervisor major minor class isa structure nat age nat salary nat faculty class structure string name instance 
john denver professor dr mary stuart dr john stuart laura james dave ford john stuart laura james computer science philosophy music value representability object oriented point view database may considered huge collection objects arbitrary complex structure 
problem uniquely identify retrieve objects collections 
object database abstraction real world object unique identity representation objects oodm uses identi er type id encode identity 
identi er may considered immutable 
systems oriented view permutations collapses identi ers changing ect behaviour database 
user identi er object meaning 
di erent access identi cation problem required 
show unique identi cation object class leads notion value identi ability stronger notion required unique de nition generic update operations 
case handled class called value identi able exists proper value type called cation type instances morphism tc composition dc 
id tc tc monic 
ii called value representable exists value cation type vc instances morphism tc vc cation types image factorization tc dv 
vc exists morphism dv easy see value representable class value identi able 
value representation type vc unique isomorphism 
want de ne algorithms compute types vc turn proper value types certain conditions 
extend subtyping structure expressions natural way care isa relations 
super structure expression instance de ne morphism dc dc 
id representation type algorithm 
provided exists super structure expression de ned tc unde ned 
id occurs corresponding write id iterate long possible rules proper value type id occurs replace corresponding id 
ii id occurs recursively de ned result replacing id type name 
iteration terminates exists nite collection classes 
rules longer applicable replace remaining occurrence id type name provided de ned 
ut note algorithm computes mutually recursive types 
graph class schema smallest labelled graph rep satisfying exists vertex ft cg top level type structure expression 
ii proper occurrence type id tc exists unique vertex ftg 
iii structure expression graph ref subgraph ref 
iv vertex corresponding exist unique edges respectively case type case rst case fs corresponding selector name case label fs fc schema 
fc schema exists super structure expression de ned tc identi cation graph id class obtained graph changing label notations easy see class exists super structure expression classes occurring label identi cation graph id type computed algorithm respect super structure expression de nition id proper value type 
theorem 
class schema exists super structure expression classes occurring label graph ref vc type computed algorithm respect trivial super structure expressions type computed algorithm respect arbitrary super structure expressions 
value representable value representation type vc value identi cation type 
ii class schema exist generic update methods value representable 
super subclasses 
iii value representable class schema super subclasses value representable 
exist unique generic update operations proof set arguments 
logical reconstruction far seen decisive role type semantics oodbs 
topos types may describe instances schema top 
assumption existence type id object identi ers 
known topoi inherently connected higher order intuitionistic logics 
principal equivalent ways approach logic topos 
rst mitchell language anf kripke joyal semantics second fourman scott languages follows general line logics de ning syntax interpretation arbitrary topos 
presentation take second approach directly comes equality existence description 
recall fourman scott language consists sets sort const sorts constants power sort map 
sort sort written 
family countable sets fv ar sort indexed sorts map const sort assigning constant sort 
ar sort ar refer set variables 
variable ar write refer sort abbreviation empty power sort regarded consisting truth values 
terms sort sort language constructed smallest set variable sort constant ix variable formula belong 
formulae build smallest set formulae term terms sort terms formulae formulae variables ar formulae may introduce predicate quanti er abbreviations 
intension description symbol needs explanation 
informally ix means unique satis es 
may exist 
logic deals problem introducing formal existence predicate means exists 
formalized distinguishing domains possible elements pick subdomains actual elements 
bound variables range actual elements 
interpreting logic topos construction related partial morphism classi cation 
existence predicate uences equality predicate considered property actual elements 
order compare possible elements equivalence predicate introduced 
non existing elements considered equivalent 
equality de ned terms equivalence existence predicates taken primitive logic 
mentioned sort considered truth values 
formula tf formula asserts dispense description axioms rules de ne derivation operator interpretation arbitrary topos 
mention theory canonically de nes topos called topos de nable types de nable total functions topos written form 
particular canonical interpretation sound complete 
order de ne introduce types relations terms speci syntactic forms 
types re ect possible subdomains domains associated power sorts 
type term form iy 
relation term form iz 
type relation said de nable de ning formula closed 
convenient notation type de ned formula fx 
term sort get formula variable may quanti ers relation may notation iy know graph function 
furthermore functional abstraction writing abbreviation iz 
relations type type equivalent respect holds 
theory topos de nable types de nable total functions objects de nable types morphisms equivalence classes de nable relations holds 
hom hom composition hom de ned 
schemata instances theories 
topos try shift categorical characterization instances associated logic 
recall sorts logic objects constants sort morphisms partial morphism classi er power sort map takes consider monomorphism dc 
id tc canonical projection id tc id im dc 
id result image factorization 
assume monic universal property images gives rise unique monomorphism im dc dc 
assume value representability monic gives monomorphism im dc subobject id tc universal property partial morphism classi er tc gives rise unique monomorphism id tc similarly consider morphism tc id corresponding class class tc tc id tc td de nes monomorphism may consider partial morphism classi er id gives unique morphism tc td tc td exponential adjoint 
morphisms classes assuming moment unique names sucient describe objects 
fact may think morphisms semantically associated instance syntactically may class names names 
gives rise formulae form ground facts instance 
formulae de ne axioms schema ec ed subclass ec ed ax set formulae de ned schema corresponds theory ax 
addition ax set formulae instance ground facts corresponding theory ax ax 
note model theory underlying topos gives rise logical morphism 
nally construction possible value representability assumed case shall get monomorphism 
general fact io may exist may factor true 
model inconsistent topos 
smooth extension case weak value identi ability possible 
getting rid identi ers 
object identi ers identi ed pure implementation concept 
leads requirement weak value identi ability 
construction assumed stronger value representability re ected fact morphism tc rst categorical reformulation monomorphisms id tc type tc involves identi ers corresponding shown value types identify objects ectively computed 
sketch corresponding construction consider pullback tc td id de nes object tc morphisms exp tc td exp tc tc monic 
id universal property pullbacks de nes unique monomorphism id tc exp 
may repeat construction respect morphisms corresponding including exp constructed 
de nes diagram denote limit unique monomorphism id morphisms note may assume objects bounded exists monomorphism xed object turn subobject construction types introduce object description identi ers 
tc result elimination identi ers formally occurs pushout tc morphisms de ne pullback exponential adjoint exponential adjoint true triv id de ne pushout get object pullback morphisms tc diagram extends morphisms obtain required types occurrences id extend logic 
queries 
relational model basic approaches queries relational algebra relational calculus 
able introduce analogous constructions oodm 
algebraic perspective may operation supplied type system 
syntactically means consider closed value terms queries semantics de ned morphisms addition class de nes query semantics id tc instance combining basic queries operators type system gives simple query language 
note relational subcase obtain operators relational algebra join 
furthermore need polymorphic operators combine queries 
queries de ned morphisms functions may consider inner pullback way outer pullback universality obtain unique morphism de ning semantics pullback query relational algebra join corresponds pullbacks 
classes containing may consider queries fr dg de ned substitution class semantically consider pullback tc td id td td tc td morphisms id tc id td give rise unique monomorphism id 
tc td de nes semantics substitution queries 
calculus things easier may exploit associated logic 
classes incorporated logic simply term ix de ning formula 
generalizes relational approach 
indicated fundamentals logical semantics object oriented databases 
starting point consideration building blocks oodb schemata types classes 
observed decisive importance type semantics 
objects considered abstractions real world entities immutable identity 
identity rst encoded identi ers assumed form type id value type associated object 
contrast allow values possibly di erent types belong object collection types may change 
classes structure objects 
time class corresponds collection objects values type objects xed set classes 
general reasonable assume semantics topos theory 
considerations generalized notions category theory 
basis problems identi cation genericity solved general 
unique identi cation objects existence generic update operations class require class value representable 
topos theory inherently connected higher order intuitionistic logic able rst rephrase notions object oriented databases category theory transform logic 
allows de nition query algebra calculus 
value representability desirable property account show get rid object identi ers detected pure implementation concept 
results achieved far er reasonable logical foundation object oriented databases 
allow relate eld investigations foundations computer science respect type theory ective computation 
just story concerning deductive capabilities object oriented databases 
proceed interesting investigate higher order geometric theories 
research planned direction 
dynamics object oriented databases concerning formalization operation semantics may wish exploit axiomatic semantics sense dijkstra predicate transformers 
problem theory depends suitable logic guarantees existence predicate transformers intended semantics 
whilst classical theory uses nitary rst order logic required generalization topos logic shown 
types handled exible way extend algebraic data type speci cations higher order functional truth value sorts de ne topoi models constructor theories 
approach described 
open problem kind type theory relates synthetic domain theory roughly domain theory topos 
basic assumption theory domains speci objects topos morphisms continuous constructions solely categorical properties recurring order theoretic properties 
ective topos turns reasonable source examples kind theory 

abiteboul deductive object oriented database language data knowledge engineering vol 
pp 

abiteboul hull ifo formal semantic database model acm tods vol 
december pp 

abiteboul kanellakis object identity query language primitive proc 
sigmod portland oregon pp 

kaci overview life schmidt eds proc 
generation information systems technology springer lncs vol 
pp 

albano ghelli orsini types databases galileo experience type systems database programming languages university st andrews dept mathematical computational sciences research report cs 
albano ghelli orsini objects classes database programming language fide technical report 
albano ghelli orsini relationship mechanism strongly typed object oriented database programming language sernadas ed proc 
vldb barcelona 
atkinson bancilhon dewitt dittrich maier zdonik object oriented database system manifesto proc 
st dood kyoto 
bancilhon benzaken delobel pfe er richard velez design implementation object oriented database system proc 
oodbs ii workshop bad frg september 
barr wells category theory computing science prentice hall 
beeri formal models object oriented databases proc 
st dood pp 

beeri formal approach object oriented databases data knowledge engineering vol 
pp 

beeri algebraic optimization object oriented query languages abiteboul kanellakis eds proc 
icdt springer lncs pp 

beeri new data models languages proc 
pods 
beeri milo subtyping oodbs proc 
pods 
beeri thalheim see identi cation please 
proc 
workshop database semantics re january appear 
bruce meyer semantics second order polymorphic lambda calculus kahn macqueen plotkin eds semantics data types springer lncs 
cardelli wegner understanding types data abstraction polymorphism acm computing pp 
cardelli typeful programming digital systems research center reports dec src palo alto may 
carey dewitt data model query language exodus proc 
acm sigmod 
vision object oriented database management system proc 
workshop database programming languages france september 
cattell object data management object oriented extended relational database systems addison wesley 
cousot methods logics proving programs van leeuwen ed handbook theoretical computer science vol formal models semantics elsevier 
dearle connor brown morrison napier database programming language type systems database programming languages university st andrews dept mathematical computational sciences research report cs 
vianu database method schemas object creation proc 
pods 
dijkstra scholten predicate calculus program semantics springer verlag 
beech cate chow iris object oriented database management system acm tois vol 
january 
fourman logic topoi barwise ed handbook mathematical logic northholland studies logic vol 

freyd recursive types reduced inductive types mitchell ed th symposium logic computer science philadelphia 
hammer mcleod database description sdm semantic database model acm vol 
pp 

hull king semantic database modeling survey applications research issues acm computing surveys vol 
september 
hyland ective topos troelstra van dalen eds brouwer symposium north holland 
hyland steps synthetic domain theory carboni rosolini eds category theory springer lnm vol 

hyland robinson rosolini discrete objects ective topos proc 
lms 
johnstone topos theory lms monographs vol 
academic press 
copeland object identity proc 
st int 
conf 
oopsla portland oregon 
kifer lausen 
logic higher order language reasoning objects inheritance schema proc 
sigmod 
kim banerjee chou woelk integrating object oriented programming system database system proc 
oopsla 
mac lane moerdijk sheaves geometry logic topos theory springer 
maier stein development object oriented dbms oopsla september 
matthes schmidt bulk types add built proc 
dbpl iii 
mitchell type systems programming languages van leeuwen ed handbook theoretical computer science vol formal models semantics elsevier 
mylopoulos bernstein wong language facility designing interactive database intensive applications acm tods vol 
april pp 

mylopoulos borgida jarke koubarakis telos representing knowledge information systems acm tois vol 
october pp 

nelson generalization dijkstra calculus acm toplas vol 
october pp 

ohori representing object identity pure functional language proc 
icdt springer lncs pp 

pitts polymorphism set theoretic constructively pitt poign rydeheard eds category theory computer science springer lncs 
reynolds polymorphism set theoretic kahn macqueen plotkin eds 
semantics data types springer lncs 
rosolini categories ective computations pitt poign rydeheard eds 
category theory computer science springer lncs 
rosolini robinson colimit completions ective topos journal symbolic logic 
rosolini notes synthetic domain theory university genova february 

schewe thalheim wetzel schmidt extensible safe object oriented design database applications university rostock preprint cs september 

schewe speci cation data intensive application systems habilitation thesis tu cottbus 

schewe schmidt wetzel identi cation genericity consistency objectoriented databases biskup hull eds proc 
icdt springer lncs 

schewe thalheim fundamental concepts object oriented databases acta cybernetica vol 


schewe semantics type speci cations topos theory tu cottbus technical report 

schewe non classical generalization dijkstra calculus axiomatic semantics typed program speci cations tu cottbus technical report 

schewe thalheim wetzel foundations object oriented database concepts university hamburg report fbi hh october 

schewe schmidt stemple thalheim wetzel re ective approach method generation object oriented databases university rostock informatik berichte 
scott identity existence intuitionistic logic fourman mulvey scott eds applications sheaves springer lnm 
scholl 
schek relational object model proc 
icdt springer lncs pp 

stemple sheard fegaras re ection bridge programming database languages proc 
hicss 
su sam semantic association model corporate scienti statistical databases inf 
sci vol 
pp 

taylor fixed point property synthetic domain theory kahn th symposium logic computer science amsterdam 
van den bussche dirk van gucht hierarchy faithful set creation pure oodbs biskup hull eds proc 
icdt springer lncs 
van den bussche dirk van gucht semi determinism proc 
pods acm press 
van den bussche formal aspects object identity database manipulation ph thesis university antwerp 
vickers geometric theories databases fourman johnstone pitts eds applications category theory computer science london mathematical society lecture notes series cambridge university press 
vickers geometric logic computer science burn gray ryan eds theory formal methods springer 
zdonik maier readings object oriented database systems morgan kaufmann publishers 
