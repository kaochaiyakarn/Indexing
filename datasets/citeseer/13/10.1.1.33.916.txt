model checking mu calculus allen emerson university texas austin austin tx usa 
growing recognition need apply formal mathematical methods design high confidence computing systems 
systems operate safety critical contexts air traffic control systems errors major adverse economic consequences banking networks 
problem especially acute design reactive systems exhibit correct ongoing behavior amenable thorough testing due inherently nondeterministic nature 
useful approach specifying reasoning correctness systems temporal logic model checking provide efficient expressive tool automatic verification finite state system meets correctness specification formulated temporal logic 
describe model checking algorithms discuss application 
focus attention particularly important type temporal logic known mu calculus 
growing need reliable methods designing correct reactive systems 
systems characterized ongoing typically nonterminating highly nondeterministic behavior 
systems amount parallel distributed programs 
examples include operating systems network protocols air traffic control systems 
nowadays widespread agreement type temporal logic pn provides extremely useful framework reasoning reactive programs 
basic temporal operators nexttime possible easily express important correctness properties sent received asserts message sent eventually received 
introduce path quantifiers meaning possible computations possible computation respectively distinguish inevitability events afp potentiality efp 
system referred branching time temporal logic 
commonly branching time logic ctl computation tree logic cf 
ec ce 
branching time logic propositional mu calculus ko cf 
ec pr 
mu calculus may thought extending ctl fixpoint greatest fixpoint operator 
note efp efp fixed point known fixpoint expression exy fact efp fixpoint exy fixpoint ordinarily denoted 
example suggests ctl needed basis defined terms atomic proposition constants variables boolean connectives nexttime operators ax ex greatest fixpoint operators 
rest ctl operators defined terms surprisingly simple primitives 
fact modal temporal logics interest defined terms mu calculus 
way provides single simple uniform framework subsuming logics interest reasoning reactive systems cf 
el 
classical approach temporal logic reasoning reactive programs manual obliged construct hand proof program correctness axioms inference rules deductive system 
desirable aspect proof systems may formulated compositional facilitates development program hand hand proof correctness systematically composing proofs constituent subprograms 
manual proof construction extremely tedious error prone due large number details attended 
correct proofs large programs difficult construct organize intellectually manageable fashion 
clear unrealistic expect manual proof construction feasible large scale reactive systems 
systems millions just tens thousands lines codes transcription clerical errors guarantee task proof construction ability humans 
historically advocated alternative automated approach reasoning reactive systems cf 
em ce 
useful approaches specifying reasoning correctness systems turned temporal logic model checking cf 
ce em qs provide efficient expressive tool automatic verification finite state reactive system meets correctness specification formulated propositional temporal logic 
empirically turns systems interest usefully modeled level abstraction finite state systems 
propositional fragment temporal logic suffices specify important correctness properties 
model checking problem formalized model checking problem finite state transition graph initial state temporal logic specification formula model 
variant formulations model checking problem stipulate calculating set states true 
remainder organized follows section defines mu calculus 
section defines certain related logics including ctl 
expressiveness mu calculus discussed section 
algorithms model checking mu calculus described section 
section gives concluding remarks 
mu calculus propositional mu calculus cf 
pa ec ko provides fixpoint operator greatest fixpoint operator possible give extremal fixpoint characterizations correctness properties 
intuitively mu calculus possible characterize modalities terms recursively defined tree patterns 
example assertion computation paths true eventually characterized fixpoint functional axz atomic proposition variable intuitively ranging sets states ax denotes universal nexttime operator 
give formal definition mu calculus 
syntax formulae propositional mu calculus generated rules atomic proposition constants atomic proposition variables exp formula 
negation formula 
conjunction formulae assertions related 
propositional temporal logics satisfy finite model property specification satisfiable finite model may viewed system meeting specification 
formula syntactically monotone propositional variable occurrences fall number negations 
set formulae generated rules forms language connectives introduced abbreviations usual way abbreviates abbreviates pq abbreviates qq axp abbreviates ex abbreviates intuitively stands greatest resp 
fixpoint exp axp means true successor state reachable current state means jpj denote length number symbols say formula subformula formula provided viewed sequence symbols substring subformula said proper provided 
top level immediate subformula maximal proper subformula 
sf denote set subformulae fixpoint operators somewhat analogous quantifiers 
occurrence propositional variable subformula formula said bound 
occurrence free 
renaming variables necessary assume expression occurs sentence closed formula formula contains free propositional variables variable bound formula said positive normal form pnf provided variable quantified twice negations applied atomic propositions 
note formula put pnf driving negations deep possible laws dualities 
double length formula 
proper defined way subformulae proper subformulae 
oe denote bound variable formula unique subformula oey quantified 
denote subformula oey called variable oey called variable 
oe subformula oe resp 
subformula main connective say top level oe subformula provided proper oe subformula proper oe subformula oe subformula basic modality oe sentence proper oe 
semantics set sigma atomic proposition constants set gamma atomic proposition variables 
ap denote sigma gamma sentences propositional mu calculus interpreted respect structure set states total binary relation theta ap labeling associates state set consisting atomic proposition symbols underlying set atomic propositions ap intended true state may view labeled directed graph node set arc set node labels size jm jsj jrj jsj size state space sum sizes jrj number transitions 
power set may viewed complete lattice 
intuitively identify predicate set states true 
false corresponds empty set bottom element true corresponds top element implication corresponds simple set theoretic containment provides partial ordering lattice 
functional say monotonic provided implies 
say fixpoint functional provided 
fixpoint fixpoint provided fixpoint note fixpoint unique fixpoints denote fixpoint analogously denotes greatest fixpoint 
existence extremal fixpoints guaranteed 
theorem tarski knaster 
monotonic functional 
fy fy fy fy false ranges ordinals cardinality state space finite ranges jsj union ascending chain approximations false false false true ranges ordinals cardinality state space finite ranges jsj intersection descending chain approximations true true true 
formula free variables yn interpreted mapping interpreted predicate transformer 
write yn denote free variables yn valuation denoted vn assignment subsets vn free variables yn respectively 
denote value actual arguments vn cf 
ec ko 
operator defined inductively follows fs atomic propositional constant ap sn exp fs rg fs vn note syntactic restrictions monotonicity ensure greatest fixpoints defined 
usually write respectively respectively mean sentence respectively formula true structure state valuation 
understood write simply temporal logics section define representative systems propositional temporal logic 
system pltl propositional linear temporal logic standard linear time temporal logic cf 
pn mp 
branching time logic ctl computational tree logic allows basic temporal operators form path quantifier futures followed single usual linear temporal operators nexttime cf 
ce ec 
syntactic restrictions limit expressive power example correctness fair scheduling assumptions expressed 
consider richer language ctl extends ctl allowing basic temporal operators path quantifier followed arbitrary linear time formula allowing boolean combinations nestings cf 
eh 
syntax give formal definition syntax ctl 
inductively define class state formulae true false states rules class path formulae true false paths rules atomic proposition state formula state formulae path formula ep ap state formulae state formula path formula path formulae path formulae xp set state formulae generated rules forms language ctl 
connectives introduced abbreviations usual way abbreviates abbreviates abbreviates fp abbreviates gp abbreviates abbreviate gfp infinitely abbreviate abbreviate uq 
take view ap abbreviates give terse syntax terms just primitive operators approach easier give syntax sublanguage ctl 
restricted logic ctl obtained restricting syntax disallow boolean combinations nestings linear time operators 
formally replace rules state formulae xp path formulae 
set state formulae generated rules forms language ctl 
boolean connectives introduced temporal operators defined abbreviations follows efp abbreviates agp abbreviates ef afp abbreviates egp abbreviates af 
note definition seen consistent ctl 
set path formulae generated rules define syntax linear time logic pltl 
semantics formula ctl interpreted respect structure mu calculus 
fullpath infinite sequence states convention denotes fullpath denotes suffix path 
write respectively mean state formula respectively path formula true structure state respectively fullpath 
define inductively follows iff iff iff case ep iff fullpath ap iff fullpath iff iff iff case iff implies xp iff formula ctl interpreted ctl semantics rule path formulae generated rule 
similarly formula pltl pure path formula ctl interpreted ctl semantics 
say state formula resp path formula valid provided structure state resp fullpath resp 
state formula resp path formula satisfiable provided structure state resp fullpath resp 
formula ctl basic modality provided form ap ep contains arbitrary formula pltl 
similarly basic modality ctl form aq eq single linear temporal operators applied pure propositional arguments 
ctl respectively ctl formula thought built boolean combinations nestings basic modalities atomic propositions 
expressiveness mu calculus considerable importance reasons relate expressiveness 
mu calculus provides single elegant uniform logical framework great raw expressive power subsumes modal temporal logics programs related formalisms 
ctl ctl translated mu calculus commonly modal temporal logics programs 
shown mu calculus infinite binary trees coincides expressive power finite state tree automata fact mu calculus formulas really alternating finite state automata infinite trees cf 
ej 
second semantics mu calculus firmly anchored fundamental tarski knaster theorem basic notion inductive definability 
provides ready means model checking check structure defines model specification discussed section 
translation logics formalisms turns require small syntactic fragments mu calculus 
implications complexity model checking discussed section 
mentioned syntactic fragments determined alternation depth mu calculus formula 
intuitively alternation depth refers depth significant nesting alternating 
alternation forms insignificant inner oe formula sentence influenced surrounding oe formula opposite polarity 
contrast alternation forms significant free occurrence variable appears scope free occurrence occurs scope give technical definition alternation depth ad formula follows cf 
el 
assume initially placed positive normal form 
ad ad atomic proposition constants variables ad ad max fad ad ad ad ad max fad subformula occurs free ad max fad subformula occurs free denote mu calculus restricted formulas alternation depth modal temporal logics programs translated succinctly cf 
el 
example give characterizations ctl basic modalities terms greatest fixpoints 
note formula efp exz agp axz afp axz egp exz axz exz fixpoint characterizations simple plausible 
turn important applications underly original ctl model checking algorithm ce symbolic approaches developed discussed section 
sketch representative proofs correctness fixpoint characterizations cf 
ec el 
assume proof conducted context arbitrarily chosen underlying structure proposition 
efp exz proof idea 
exz 
false corresponds set states possible reach state satisfying path length states 
plainly satisfies efp iff false ut proposition 
agp axz 
proof idea 
duality interchanging connective wedge 
agp converted dual efp exz converted dual axz 
result follows preceeding proposition 
ut proposition 
afp axz 
proof idea 
establish dual claim egp exz 
exz 
note egp fixpoint viz 
egp egp 
suppose arbitrary fixpoint 
arbitrary state virtue set states satisfying successor apply argument 
get infinite computation path comprised consecutive states satisfies path witnesses truth egp state satisfies egp subset set states satisfying egp fixpoint subset egp greatest fixpoint establish dual claim 
ut fixpoint characterizations ctl basic modalities provide key translating ctl mu calculus viz ec el 
instance ctl formula ag afp seen comprised basic modalities form ef af ag 
expanding fixpoint characterizations doing appropriate substitutions get ag afp axz exz axy observe result alternation depth 
translation ctl mu calculus involved 
basic modality ctl form eh pltl formula 
converted automaton infinite strings converted equivalent regular expression cf 
es vw 
eh readily rendered permits translate ctl el 
example temporal logic formula corresponding regular expression denoting set infinite strings form 
infinite repetition finite strings comprised finitely consecutive followed single exz 
take true property simplifies regular expression notation true equivalent fq meaning path occurs infinitely fixpoint characterization may simplified ex suggested properties associated fairness expressed alternation depth 
fact require alternation depth 
shown fq expressible alternation depth formula cf 
ec el 
existence translations witnesses generality mu calculus 
translations important practice correctness specifications written logics ctl ctl readable specifications written directly mu calculus 
fact turns easy write highly mu calculus formulae readily apparent intuition regarding intended meaning 
mu calculus formula really alternating tree automata surprising 
basic automata deterministic finite state automata finite strings highly complex incomprehensible spaghetti 
hand mu calculus characterizations correctness properties elegant formalism increasing favor especially europe owing simple elegant underlying mathematical structure 
event people find translations serve tame mu calculus making expressive power useful 
years known higher alternation depths form true hierarchy expressive power 
affirmative solutions open problem reported br le 
practice little difference appear practical alternation depth 
theoretical interest 
question bearing complexity model checking mu calculus discussed 
model checking turned useful techniques automated reasoning reactive systems began advent efficient temporal logic model checking ce cf 
em qs ces 
basic idea global state transition graph finite state reactive system defines kripke structure sense temporal logic cf 
pn give efficient algorithm checking state graph defines model specification expressed appropriate temporal logic 
earlier protocol community addressed problem analysis simple reachability prop erties model checking provided expressive uniform specification language form temporal logic single efficient verification algorithm automatically handled wide variety correctness properties 
taxonomy model checking approaches possible give rough taxonomy model checking methods certain criteria explicit state representation versus symbolic state representation 
explicit state approach kripke structure represented extensionally conventional data structures adjacency matrices linked lists state transition enumerated explicitly 
contrast symbolic approach boolean expressions denote large kripke structures implicitly 
typically data structure involved binary decision diagrams bdds applications manipulate boolean expressions denoting large sets states efficiently 
distinction explicit state symbolic representations large extent implementation issue conceptual 
original model checking method algorithm fixpoint computation implemented explicit state representation 
subsequent symbolic model checking method uses fixpoint computation algorithm represents sets states implicitly 
succinctness bdd data structures underlying implementation significant practical difference 
global calculation versus local search 
global approach structure formula algorithm calculates fs fg set states true 
necessarily entails examining entire structure 
global algorithms typically proceed induction formula structure calculating various subformulae algorithm recursive form recursion unwinds values shortest subformula calculated shortest contrast local approach specific state wish determine computation proceeds performing search starting potential advantage times practice portion may need examined settle question 
worst case may necessary examine 
cf 
sw 
monolithic structures versus incremental algorithms 
extent implementation issue conceptual 
significant practical consequences 
monolithic approach entire structure built represented time computer memory 
conceptually simple consistent standard conventions judging complexity graph algorithms practice may highly undesirable entire graph may fit computer memory 
contrast incremental approach referred fly online approach entails building storing small portions graph time cf 
jt 
extensional model checking algorithms technically tarski knaster theorem understood providing systematic basis model checking 
specifications formulated mu calculus logics ctl noted readily translatable mu calculus 
example calculate states ctl basic modality efp holds structure fixpoint characterization efp exz 
successively calculate ascending chain approximations false false false jsj false false 
intuition just false corresponds set states reach distance reachable state iff reachable steps size iff false size idea easily generalized provide straightforward model checking algorithm ctl entire 
tarski knaster theorem handles basic modalities 
compound formulae built nesting boolean combinations handled recursive descent 
iterative fixpoint algorithms 
building simple idea iterative fixpoint calculation tarski knaster theorem get number successively faster global model checking algorithms 
naive algorithm 
give algorithm calculate structure formula valuation set fs set states formula true valuation straightforward implementation runs time complexity jm jjf input structure input formula formulas nested deep 
basic algorithm 
naive algorithm significantly improved utilizing monotonicity consecutive fixpoints consecutive greatest fixpoints simple generalization tarski knaster theorem 
original algorithm model checking mu calculus cf 
el exploited basic optimization 
initialize atomic proposition constants variables set fs pg set inductively calculate set recursive procedure set case form return set unchanged return unchanged return set fs set return set fs implies set return set set set return set set set return set set false repeat set return set true repeat set return set endcase fig 

naive algorithm theorem generalized tarski knaster 
monotonic functional 
ranges ordinals cardinality state space finite ranges jsj union ascending chain approximations ranges ordinals cardinality state space finite ranges jsj intersection descending chain approximations 
consider formula alternating 
example take jm iterations initially true 
subsequent iteration involves calculating ascending chain iterations starting false length jm total iterated jm times 
consider consecutive nested alternation 
computed resetting false time outer changes 
case resetting apparently essential shrinking growing 
case monotonicity ensures growing unnecessary reset false changes 
false initial value context denote stabilizes similarly 
computation proceeds follows 
false initially 
compute computes limit 
ascending chain approximations false ae ae ae 
applies compute compute 
way entails simply computing ascending chain approximations false ae ae ae 
applies having reinitialized false 
monotonicity 




generalized tarski knaster theorem permitted start computation 
general 


take 
basis see jm iterations required jm iterations algorithm straightforwardly implemented run time jm delta jf ad space jm delta jf 
improved jm delta jf ad avoiding redundant computation computing successive differences 
algorithm 
extensive monotonicity considerations exploited cf 
lo improvement 
key idea formula yn yn alternation depth ad gamma variables turn monotonic better accounting obtain sharper multi parameter bounds jsj ad gamma delta jrj delta jf adequate exposition 
respect innermost variable monotonic various instantiations 
instance computing formula ad avoid 
varies computation proceeds number iterations surrounding variables 
fixed tuple variable indices number iterations innermost variable jm number tuples jm ad dominant term complexity corresponds jm ad iterations 
implemented run time jm delta jf ad 
careful examination reveals exponential number intermediate results roughly proportional number tuples indices stored 
space complexity exponential 
algorithm theoretical interest noted time complexity jm delta jf ad basic algorithm 
exponential space complexity compare favorably polynomial space complexity basic algorithm 
exponential space complexity especially problematic practice usually space complexity time complexity limiting factor 
applications computation fit main computer memory performing quickly question 
formulas alternation depth algorithm yields advantage 
practical example correctness property requiring alternation depth known clear actual situation algorithm helpful 
provides mathematical insight nature mu calculus 
algorithms 
variety types extensional model checking algorithms just briefly discuss 
contrast bottom iterative approaches associated global model checking satisfaction fixpoints outward top approaches associated local model checking 
instance specific state structure wish know perform depth search starting keeping stack sequence states visited cycle detected seeing false 
search eventually return true 
related approach form product jm syntax diagram jf view result tree automaton 
test tree automaton nonemptiness 
testing nonemptiness done model checking certain restricted formulas ejs cf 

tree automaton approach captures essence boolean graph approach cf 
cs boolean graphs correspond transition diagrams tree automata 
complexity explicit state model checking complexity results summarize explicit state model checking 
best known algorithm corresponds algorithm 
exponential time worst case polynomial time bounded alternation depth 
practical correctness properties alternation depth low order polynomial time algorithm explained 
pnueli advanced argument cf 
lp practice typically structure size formula size dominant factor complexity structures usually extremely large specifications short 
highly desirable algorithm complexity grows linearly structure size exponential growth specification size may tolerable 
ctl get algorithms time space complexity jm delta jf linear size inputs cf 
ces cs 
ctl problem pspacecomplete get model checker time complexity jm delta exp jf el cf 
lp 
significant unsolved problems practical implications open question 
model checking algorithm runs time linear structure size 
terms complexity classes result ejs cf 
lo va proposition 
model checking mu calculus np np 
proof idea 
structure formula guess annotation subformulae true state annotation provides rank variable indicating times associated formula unwound 
ranks correspond indices tarski knaster sequence approximations 
ranked variable equivalent state depending equivalent state depending state forth depending relation founded fixpoint unwound bounded viz 
jm times 
general ranks tuples natural numbers tuple length jf tuple component natural number value jm ranks ordered lexicographically 
guessing ranked threaded annotation simply verify founded 
shows membership np 
membership np follows fact trivially closed complementation 
ut open question 
polynomial model checking algorithm entire mu calculus extensionally represented structures 
state explosion emphasize discussion focuses extensional model checking assumed structure including nodes arcs explicitly represented data structures adjacency lists adjacency matrices 
obvious limitation combinatorial state explosion problem 
reactive system composed sequential processes running parallel global state graph essentially product individual local process state graphs 
number global states grows exponentially particular systems may happen final global state graph tractable size say states plus transitions 
number practical systems modeled useful level abstraction state graphs size extensional model checking helpful tool 
hand quickly infeasible represent global state graph large banking network automatic teller machines having just local states yield global state graph astronomical size amounting states 
plainly astronomical size systems question perform model checking algorithms run time space linear size state space 
various approaches state explosion currently investigations 
approach abstraction 
basic idea replace large detailed system small detailed system inessential information suppressed 
appropriate correspondence large small systems established correctness small system may ensure correctness large system 
instance suppose gamma 
agree atomic propositions linear time formula transition transition may conclude path satisfying image path satisfying small system af large system af approach represent transition relations sets states symbolically 
symbolic approaches noteworthy advance symbolic model checking techniques cf 
mcm pi cm practice able succinctly represent model check state graphs size states considerably larger 
basic algorithms symbolic model checking extensional model checking iterative calculation representation set states temporal basic modality holds fixpoint computation justified tarski knaster theorem 
key distinction state graph kripke structure sets states formulae true represented terms boolean characteristic function turn represented ordered binary decision diagram bdd cf 
br 
bdds practice extremely succinct 
bdd model checkers remarkably effective useful debugging verification hardware circuits 
reasons understood bdds able exploit regularity readily apparent human eye hardware designs 
software typically lacks regularity bdd model checking helpful software verification 
refer reader mcm extended account utility bdds hardware verification 
emphasized bdd model checking methods worst case intractably inefficient 
hand structures astronomical size small bdds representing exploited applications noted 
structures derived applications software bdd representation intractably large 
plainly counting argument shows structures small bdd representation 
event checking simple graph reachability structure represented bdd pspace complete cf 
gw br 
disparity theoretical worst case results symbolic checking surprisingly performance practice far development associated complexity theory application 
debugging versus verification model checkers type decision procedure provide answers 
turns practice model checkers debugging verification 
industrial environments capacity model checker function debugger better appreciated utility tool verifying correctness 
consider empirical fact designs initially wrong go sequence corrections refinements truly correct design achieved 
suppose aspect correctness wish check simple invariance property form holds provided system started obviously initial state quite invariance may fact hold initial faulty design due conceptually minor tricky errors fine details 
iterations design process fact ef desirable circumvent global strategy examining calculate set ef checking member set 
exist state reachable detected longer necessary continue search examining heuristic motivating local model checking algorithms 
involve searching start state looking confirming refuting states cycles algorithm terminate prematurely having determined formula true false basis portion examined limited search 
course may states examined finding refutation certainly truly correct design achieved states reachable examined 
practical cases refutation may quickly limited search 
note passing symbolic model checkers adapted provide sort counter example facility debugging 
reactive systems increasingly important society 
undeniable growing need find effective methods constructing correct reactive systems 
factor systems common nondeterministic ongoing reactive nature highly complex typically finite state 
may relatively easy express informally general terms system supposed provide air traffic control system appears quite difficult provide formal specification correct behavior prove implementation satisfies specification 
mu calculus associated temporal logics ctl provide handle precisely stating just behavior occur variety levels detail 
fully automated type reasoning provided model checking provides convenient tool verifying correctness automatic debugging 
number interesting mathematical problems arise connection model checking mu calculus 
acknowledgments supported part nsf ccr src contract dp 
neil immerman kedar richard moshe vardi helpful comments 
anderson verification temporal properties concurrent systems ph 
dissertation computer science department aarhus univ denmark june 
vardi wolper automata theoretic approach branching time model checking computer aided verification conference cav pp 
june 
br mu calculus alternation hierarchy strict appear concur 
bouajjani fernandez raymond minimal state graph generation science computer programming 
bs stirling local model checking infinite state spaces theor 
comp 
sci vol 
pp 

bcd browne clarke dill checking correctness sequential circuits proc 
ieee int 
conf 
comput 
design port ny pp 
browne clarke dill mishra automatic verification sequential circuits temporal logic ieee trans 
comp 
pp 
br bryant graph algorithms boolean function manipulation ieee trans 
computers 
burch clarke mcmillan dill hwang symbolic model checking states proceedings th annual ieee cs symposium logic computer science pp 
june ce clarke emerson design synthesis synchronization skeletons branching time temporal logic logics programs workshop ibm yorktown heights new york springer lncs pp 
may 
ces clarke emerson sistla automatic verification finite state concurrent system temporal logic th acm symp 
principles prog 
lang jan journal version appears acm trans 
prog 
lang 
sys vol 
pp 
april 
clarke jha exploiting symmetry temporal logic model checking th international conference computer aided verification crete greece june 
cs cleaveland linear time model checking algorithm alternation free modal mu calculus formal methods system design vol 
pp 
april 
cl cleaveland analyzing concurrent systems concurrency workbench functional programming concurrency simulation automated reasoning springer lncs pp 

cm coudert madre verifying temporal properties sequential machines building state diagrams computer aided verification clarke kurshan eds dimacs series pp 
june 
dgg dams grumberg gerth generation reduced models checking fragments ctl cav springer lncs 
dc dill clarke automatic verification asynchronous circuits temporal logic ieee proc 
pt 
pp 

em emerson branching time temporal logics design correct concurrent programs ph 
dissertation division applied sciences harvard university august 
ec emerson clarke characterizing correctness properties parallel programs fixpoints 
proc 
th int 
colloquium automata languages programming lecture notes computer science springer verlag 
eh emerson halpern revisited branching versus linear time temporal logic jacm vol 
pp 
jan 
ej emerson jutla tree automata mu calculus determinacy proc 
rd ieee symp 

comp sci 
ejs emerson jutla sistla model checking fragments mu calculus proc 
th inter 
conf 
computer aided verification greece springer lncs pp 

el emerson lei efficient model checking fragments mu calculus ieee symp 
logic computer science lics cambridge mass june 
el emerson lei modalities model checking branching time strikes back pp 
acm popl journal version appears sci 
comp 
prog 
vol 
pp 
es emerson sistla symmetry model checking th international conference computer aided verification crete greece june full version appear formal methods system design 
es emerson sistla deciding branching time logic logics programs workshop springer lncs pp 

em emerson temporal modal logic handbook theoretical computer science vol 
van leeuwen ed elsevier north holland 
gw wigderson succinct representation graphs information control vol 
pp 

gs german sistla reasoning systems processes journal acm july vol pp 
ho hoare communicating sequential processes cacm vol 
pp 

jt line model checking finite linear time specifications international workshop automatic verification methods finite state systems lncs 
ko kozen results propositional mu calculus theor 
comp 
sci pp 
dec kt kozen tiuryn logics programs handbook theoretical computer science van leeuwen ed elsevier north holland 
ku kurshan testing containment omega regular languages bell labs tech 
report conference version kurshan reducibility analysis coordination springer verlag 
ku kurshan computer aided verification coordinating processes automata theoretic approach princeton university press princeton new jersey 
lr ladner reif logic distributed protocols proc 
conf 
theor 
aspects reasoning knowledge ed 
halpern pp 
los altos cal morgan kaufmann la lamport temporal logic programs th annual acm symp 
principles programming languages pp 

la lamport temporal logic proc 
ifip pp 

le hierarchy theorem mu calculus appear icalp 
lp pnueli checking finite state concurrent programs satisfy linear specifications popl pp 
jan 
lo long browne clarke jha improved algorithm evaluation fixpoint expressions proc 
th inter 
conf 
computer aided verification stanford springer lncs june 
mp manna pnueli temporal logic reactive concurrent systems specification springer verlag mcm mcmillan symbolic model checking approach state explosion problem ph 
thesis carnegie mellon university 
unpublished manuscript 
fixed points versus infinite generation proc 
rd ieee symp 
logic computer science pp 

pa park fixpoint induction proof program semantics machine intelligence eds 
meltzer michie vol 
pp 
edinburgh univ press edinburgh 
pi computational theory implementation sequential hardware equivalence cav dimacs series vol dimacs tech 
report june 
pi theory implementation sequential hardware equivalence ieee transactions computer aided design pp 
vol 

pn pnueli temporal logic programs th annual ieee cs symp 
foundations computer science pp 

pn pnueli temporal semantics concurrent programs theor 
comp 
sci vol 
pp 
pr pratt decidable mu calculus nd annual ieee cs symposium foundations computer science pp 
may 
qs sifakis specification verification concurrent programs cesar proc 
th int 
symp 
prog springer lncs pp 

der de roever recursive program schemes semantics proof theory math 
centre tracts amsterdam 
sw stirling walker local model checking mu calculus pp 
springer lncs 
st stirling modal temporal logics 
handbook logic computer science gabbay ed 
oxford ta lattice theoretical fixpoint theorem applications pacific 
math pp 

va vardi complexity bounded variable queries proceedings th acm principles database symposium june 
va 
vardi modal logic decidable 
volume 
vw vardi wolper process logic logics programs workshop springer lncs pp 
june 
vw vardi wolper automata theoretic techniques modal logics programs stoc journal version jcss vol 
pp 

vw vardi wolper automata theoretic approach automatic program verification proc 
ieee lics pp 

article processed macro package llncs style 
