july building complex software systems case agent approach nicholas jennings dept electronics computer science university southampton southampton bj uk 
ecs soton ac uk building high quality industrial strength software difficult 
argued developing software domains telecommunications industrial control business process management represents complex construction tasks humans undertake 
background wide range software engineering paradigms devised 
successive development claims engineering process easier extend complexity applications feasibly built 
evidence emerging support claims researchers continue strive effective techniques 
argue analysing designing implementing complex software systems collection interacting autonomous agents multi agent system affords software engineers number significant advantages contemporary methods 
say agent oriented software engineering represents silver bullet evidence suggest represent order magnitude improvement productivity 
increasing number deployed applications bears testament potential advantages accrue approach 
seeking demonstrate efficacy agent oriented techniques compelling argument quantitatively show adoption improved development process range projects 
data simply available approaches patterns application frameworks component ware 
fact best achieved qualitative justification agent oriented approaches suited engineering complex distributed software systems 
managing complexity software systems industrial strength software complex large number parts interactions 
complexity accidental innate property large systems 
situation role software engineering provide structures techniques easier handle complexity 
fortunately designers complexity exhibits number important regularities complexity frequently takes form hierarchy 
system composed inter related sub systems turn hierarchic structure lowest level elementary sub system reached 
precise nature organisational relationships varies sub systems generic forms client server peer team identified 
relationships static vary time 
choice components system primitive relatively arbitrary defined observer aims objectives 
hierarchic systems evolve quickly non hierarchic ones comparable size complex systems evolve simple systems rapidly clearly identifiable stable intermediate forms 
possible distinguish interactions sub systems sub systems 
frequent typically order magnitude predictable 
gives rise view complex systems nearly decomposable sub systems treated independent quite interactions 
interactions predicted design time 
drawing insights possible define canonical view complex system 
system hierarchical nature expressed related links components sub system connected frequent interaction links interactions components expressed infrequent interaction links 
july observations software engineers devised number fundamental tools trade helping manage complexity decomposition basic technique tackling large problems divide smaller manageable chunks dealt relative isolation note nearly decomposable sub systems 
decomposition helps tackle complexity limits designer scope 
abstraction process defining simplified model system emphasises details properties suppressing 
works limits designer scope interest time 
organisation process defining managing inter relationships various problem solving components note sub system interaction links 
ability specify enact organisational relationships helps designers tackle complexity enabling number basic components grouped treated higher level unit analysis ii providing means describing high level relationships various units 
case agent oriented software engineering step arguing agent oriented approach software engineering involves identifying key concepts agent computing 
concept agent agent encapsulated computer system situated environment capable flexible autonomous action environment order meet design objectives number points definition require elaboration 
agents clearly identifiable problem solving entities defined boundaries interfaces ii situated embedded particular environment partial control observability receive inputs related state environment sensors act environment effectors iii designed fulfil specific role particular objectives achieve iv autonomous control internal state behaviour capable exhibiting flexible problem solving behaviour pursuit design objectives reactive able respond timely fashion changes occur environment proactive able opportunistically adopt goals take initiative 
adopting agent oriented view soon apparent problems require involve multiple agents represent decentralised nature problem multiple loci control multiple perspectives competing interests 
agents need interact achieve individual objectives manage dependencies ensue situated common environment 
interactions vary simple semantic interoperation traditional client server type interactions rich social interactions ability cooperate coordinate negotiate course action 
nature social process points qualitatively differentiate agent interactions occur software engineering paradigms 
firstly agent oriented interactions generally occur high level declarative agent communication language speech act theory 
consequently interactions conducted knowledge level terms goals followed time cf 
method invocation function calls operate purely syntactic level 
secondly agents flexible problem solvers operating environment partial control observability interactions need handled similarly flexible manner 
agents need computational apparatus context dependent decisions nature scope interactions initiate respond interactions foreseen design time 

booch uses term hierarchy invariably gives connotation control 
neutral term organisation 
july majority cases agents act behalf individuals companies part wider initiative 
typically underpinning organisational context agents interactions 
context defines nature relationship agents 
example may peers working team may manager 
capture links agent systems explicit constructs modelling organisational relationships manager team member 
cases relationships subject ongoing change social interaction means existing relationships evolve team peers may elect leader new relations created number agents may form team deliver service individual offer 
temporal extent relationships vary enormously providing service permanent bond 
cope variety dynamic agent researchers devised protocols enable organisational groupings formed specified mechanisms ensure groupings act coherent fashion developed structures characterise macro behaviour collectives 
drawing points seen adopting agent oriented approach software engineering means decomposing problem multiple autonomous components act interact flexible ways achieve set objectives 
key abstraction models define agent oriented mindset agents interactions organisations 
explicit structures mechanisms describe manage complex changing web organisational relationships exist agents 
software engineering credentials agent oriented approach argument favour agent oriented approach software engineering composed steps show agent oriented decompositions effective way problem space complex system show key abstractions agent oriented mindset natural means modelling complex systems show agent oriented philosophy modelling managing organisational relationships appropriate dealing dependencies interactions exist complex systems 
merits agent oriented decompositions complex systems consist number related sub systems organised hierarchical fashion 
level sub systems achieve functionality parent system 
sub system constituent components deliver functionality 
basic model interacting components working achieve particular objectives occurs system 
fact entirely natural components terms objectives achieve words component thought achieving objectives 
second important observation complex systems multiple loci control real systems top pg 
applying philosophy objective achieving decompositions means individual components localise encapsulate control 
entities thread control active control actions autonomous 
active autonomous components fulfil individual collective objectives need interact recall complex systems nearly decomposable 
system inherent complexity means impossible potential links interactions occur unpredictable times unpredictable reasons unpredictable components 
reason futile try predict analyse possibilities design time 
realistic endow components ability decisions nature scope interactions run time 
follows components need ability initiate respond interactions flexible manner 

view decompositions functions actions processes intuitive easier produce data objects acknowledged object oriented community see pg 
july policy deferring run time decisions component interactions facilitates engineering complex systems ways 
firstly problems associated coupling components significantly reduced dealing flexible declarative manner 
components specifically designed deal unanticipated requests spontaneously generate requests assistance find difficulty 
interactions enacted high level agent communication language coupling knowledge level issue 
stroke removes syntactic concerns types errors caused unexpected interactions 
secondly problem managing control relationships software components task traditional objective decompositions significantly reduced 
agents continuously active coordination synchronisation required handled bottom inter agent interaction 
discussion apparent natural way complex system terms multiple autonomous components act interact flexible ways order achieve set objectives 
agent oriented approach simply best fit ideal 
suitability agent oriented abstractions significant part design process finding right models viewing problem 
general multiple candidates difficult task picking appropriate 
designing software powerful abstractions minimise semantic gap units analysis intuitively conceptualise problem constructs solution paradigm 
case complex systems problem characterised consists sub systems sub system components interactions organisational relationships 
turn sub systems naturally correspond agent organisations 
involve number constituent components act interact role larger enterprise 
case viewing sub system components agents 
interplay sub systems constituent components naturally viewed terms high level social interactions complex system level abstraction find meaningful collections objects collaborate achieve higher level view pg 
view accords precisely knowledge level treatment interaction afforded agentoriented approach 
agent systems invariably described terms cooperating achieve common objectives coordinating actions negotiating resolve conflicts 
complex systems involve changing webs relationships various components 
require collections components treated single conceptual unit viewed different level abstraction 
agent oriented mindset provides suitable abstractions 
rich set structures available explicitly representing organisational relationships 
interaction protocols exist forming new groupings unwanted ones 
structures available modelling collectives 
point especially useful relation representing sub systems team components working achieve collective goal 
need flexible management changing organisational structures organisational constructs class entities agent systems explicit representations organisational relationships structures 
agent oriented systems concomitant computational mechanisms flexibly forming maintaining organisations 
representational power enables agent systems exploit facets nature complex systems 
firstly notion primitive component varied needs observer 
level entire sub systems viewed singletons alternatively teams collections agents viewed primitive components system eventually bottoms 
secondly structures provide stable intermediate forms essential rapid development complex systems 
availability means individual agents organisational groupings developed relative isolation added system incremental manner 
turn ensures smooth growth functionality 
july agent oriented techniques widely adopted 
key pragmatic issues determine agent oriented approaches catch software engineering paradigm degree agents represent radical departure current software engineering thinking ii degree existing software integrated agents 
point dealt turn 
number trends evident examining evolution programming models 
firstly move languages conceptual basis determined underlying machine architecture languages key abstractions rooted problem domain 
agent oriented world view natural way characterising types problem 
just real world populated objects operations performed equally full active purposeful agents interact achieve objectives object oriented analyses start precisely perspective view world set autonomous agents collaborate perform higher level function pg 

secondly basic building blocks programming models exhibit increasing degrees localisation encapsulation 
agents follow trend purpose inside agent giving agent thread control encapsulating action selection 
thirdly richer mechanisms promoting re provided 
agent view reaches new heights 
stopping re sub system components design patterns component ware rigidly pre interactions application frameworks agents enable subsystems flexible interactions re 
case agent designs implementations reused applications 
consider example class agent architectures beliefs agent knows desires agent wants intentions agent doing core 
architectures wide variety applications including air traffic control process control fault diagnosis transportation 
case flexible patterns interaction contract net protocol agent task complete advertises fact believes capable performing agents may submit bid perform task interested originator delegates task agent best bid various forms resource allocation auction english dutch vickrey re significant numbers applications 
short agent oriented techniques represent natural progression current software engineering thinking reason main concepts tenets approach readily acceptable software engineering practitioners 
second factor favour wide spread take agents adoption require revolution terms organisation software capabilities 
agent oriented systems evolutionary incremental legacy non agent software incorporated relatively straightforward manner 
technique place wrapping software legacy code 
wrapper presents agent interface software components 
outside looks agent 
inside wrapper performs way translation function external requests agents mapping calls legacy code legacy code external requests mapping appropriate set agent communication commands 
ability wrap legacy systems means agents may initially integration technology 
new requirements placed system agents may developed added 
feature enables complex system grow evolu 
certain similarities object agent oriented approaches adhere principle information hiding recognise importance interactions number important differences 
firstly objects generally passive nature need sent message active 
secondly objects encapsulate state behaviour realisation encapsulate behaviour activation action choice 
object invoke publicly accessible method object 
method invoked corresponding actions performed 
thirdly fails provide adequate set concepts mechanisms modelling complex systems systems find objects classes modules provide essential insufficient means abstraction pg 
individual objects represent fine granularity behaviour method invocation primitive mechanism describing types interactions take place 
recognition facts led development powerful abstraction mechanisms design patterns application frameworks component ware 
whilst undoubtedly step forward fall short desiderata complex systems developments 
nature focus generic system functions mandated patterns interaction rigid pre determined 
object oriented approaches provide minimal support specifying managing organisational relationships basically relationships defined static inheritance hierarchies 
july tionary fashion stable intermediate forms adhering important principle working version system available 
case study provisioning virtual private network exemplar complex distributed system consider task dynamically provisioning public communication network internet virtual private network users 
concrete task question setting video conferencing meeting 
application involves variety different individuals organisations 
users represented personal communication agent pca 
providers services network setting videoconference example represented service provider agent spa 
agents represent network provider telecommunications infrastructure services delivered represented network provider agent npa 
setting video conference call various pcas negotiate behalf user order find suitable time call 
come agreement pcas contacts subsequently negotiates various offer video conference service 
negotiation revolves cost conference call quality service desired 
spa wins contract negotiates various determine deliver desired quality bandwidth best price 
application highlights benefits claimed agent oriented approach software engineering 
firstly autonomous agents natural means representing distinct individuals organisations application 
entity active problem solver objectives achieve control actions chooses resources expends 
agents need responsive changes environment npa may need buy additional network capacity npa order maintain agreed quality service part network fails need able opportunistically adopt new goals may discover complementary service capabilities may decide act order offer new service 
secondly agents need engage knowledge level interactions order achieve individual objectives 
case agents typically represent self interested entities main form interaction negotiation 
set time video conference select particular service network provider agents proposals trade offers concessions hopefully come agreements 
rich form interaction necessary agents represent autonomous stake holders ensure agents arrange activities manner appropriate prevailing circumstances 
clear explicit notion organisational context 
application involves number different real world organisations individual users companies provide different types services network providers control underlying telecommunications infrastructure 
relationships directly effect agents behaviour 
example spa npa fact part organisation negotiations cooperative nature represent unrelated companies 
similarly pcas agreed hold conference call act team collection individuals 
additionally ongoing operation application new organisational groupings appear 
pcas distinct users form collectives require particular service participants video conference 
individual combine capabilities offer new services scope individual provider 
competing form temporary coalitions order respond particularly large requests network resources 
contrast object oriented approach suitable problem naturally represent autonomous problem solving behaviour constituent components recall objects encapsulate action choice say design flexible problem solvers balance reactive proactive problem solving inter agent negotiation fact involves message exchanges innate mechanism representing reasoning fact agents represent different stakeholder organisations fact different classes 
july agent oriented techniques increasingly range telecommunication commercial industrial applications 
enter mainstream software engineering vital clear arguments advanced suitability solving large classes problems opposed specific point solutions 
sought justify precisely agent oriented approaches suited developing complex distributed software systems 
general points concrete showing apply specific telecommunications application 
making arguments possible proponents software engineering paradigms claim key concepts agent oriented computing reproduced technique 
undoubtedly true 
agent oriented systems computer programs programs set computable functions 
misses point 
value paradigm mindset techniques provides software engineers 
respect agent oriented concepts techniques suited developing complex distributed systems extension currently available paradigms 
booch object oriented analysis design applications addison wesley 
brooks mythical man month addison wesley 
faratin jennings sierra automated negotiation provisioning virtual private networks fipa compliant agents proc 
th int conf 
practical application intelligent agents multi agent systems manchester uk 
jennings wooldridge eds 
agent technology foundations applications markets springer verlag 
newell knowledge level artificial intelligence 
mayfield labrou finin evaluating kqml agent communication language wooldridge ller tambe eds intelligent agents ii springer meyer object oriented software construction prentice hall 
parunak industrial practical applications distributed ai weiss ed multi agent systems mit press 
simon sciences artificial mit press 
wooldridge agent software engineering iee proc software engineering 
wooldridge jennings intelligent agents theory practice knowledge engineering review 
group want call npa view canonical complex system canonical view multi agent system pca agree time negotiation dynamic provisioning virtual private networks users pca spa spa spa npa npa npa july sub system sub system component related frequent interaction infrequent interaction users locate video conference provider negotiation service providers select network provider negotiation network providers 
