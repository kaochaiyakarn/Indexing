claraty architecture robotic autonomy presents overview newly developed coupled layer architecture robotic autonomy claraty designed improving modularity system software tightly coupling interaction autonomy controls 
frame problem briefly reviewing previous field describing impediments constraints encountered 
describe fresh approach topic warranted introduce new tiered design evolutionary modification conventional level robotics architecture 
new design features tight coupling planner executive decision layer interacts separate functional layer levels system granularity 
functional layer object oriented software hierarchy provides basic capabilities system operation resource prediction state estimation status reporting 
decision layer utilizes capabilities functional layer achieve goals expanding ordering initiating terminating activities 
declarative procedural planning methods process 
current efforts targeted implementing initial version architecture research mars rover platforms rocky 
addition working nasa robotics autonomy communities expand scope participation architecture moving flight implementation time frame 
table contents 
background effort 
challenge 
claraty architecture 
implementation 
summary 
acknowledgments 
background effort history outside jpl development robotics autonomy architecture old field 
possible ieee richard tara estlin darren richard hari das jet propulsion laboratory california institute technology pasadena california phone email firstname lastname jpl nasa gov completely review body effort builds 
simply describe dominant trends influencing new architecture document 
efforts robotic architectures largely arisen pragmatic need structure software development ease system building 
grown scope complexity corresponding systems grown 
early efforts concentrated detailed software packages general frameworks 
decade emergence fast computers real time operating systems infrastructures designed open architecture controllers modern robot systems 
parallel robot control efforts artificial intelligence systems planning scheduling execution developed relied underlying closed architecture robot controllers 
tendency systems slow computationally costly led emergence minimalist school thought behavior control 
faster control layers available general desire leverage planning functionality newer systems implement multi tiered approach includes planning execution control modern software framework 
architectures prototyped problems emerged 
generally accepted standard preventing leverage entire community effort 
problem lead second implemented systems typically emerged patchwork legacy code designed 
third robotics implementations slow leverage larger industry standards object oriented software development unified modeling language uml framework 
believe time ripe revisit robotics autonomy efforts fresh effort aimed addressing shortcomings 
history inside jpl jet propulsion laboratory california institute technology jpl long history building remotely commanded controlled spacecraft planetary exploration 
effort concentrated simple robust execution linear sequences created ground controllers 
areas expertise concentrated sophisticated board closed loop control largely outside traditional areas robotics falling realm aerospace guidance navigation 
implementation solutions hand tailored software solutions optimized specific spacecraft limited cpu memory 
concepts robotics autonomy started considered flight missions 
history robotic efforts jpl primarily research program 
oldest efforts areas manipulator teleoperation systems limited software software architecture components 
major software architecture efforts telerobotic testbed large research effort developing autonomous multi robot satellite servicing 
complex system conforming architecture relied subsystems disparate software paradigms 
diffuse efforts individual research participants subsequent assignments little software structure survived demise testbed 
afterward smaller orbit manipulator research projects existed software implementation remote surface inspection vxworks satellite servicing assembly motes ada vxworks 
efforts provided parallel duplication similar functionality minimal code sharing due architectural differences 
parallel robot manipulation efforts mobile robot efforts developing software infrastructure relative isolation 
time testbed development large mars rover platform name robby vxworks 
research robby ended paradigm shift large rovers software deliberative sensing planning small rovers reactive behaviors 
fourth rocky vehicles programmed forth underlying operating system sold concept placing sojourner rover pathfinder mission 
sojourner programmed software written scratch inherited predecessors 
sojourner built new rover research address problem providing software infrastructure modularity reconfigurability code re implicit design 
new rover rocky built development team selected software development environment hoping set new standard 
subsequent research rover efforts started new spectrum control infrastructures re emerged rover tasks fido darpa tmr similar situation seen manipulation tasks half decade 
time frame construction sojourner rocky large scale effort autonomy control flight targeted cruise orbit surface operations 
aegis deep space project renamed remote agent experiment rax collaborative effort jpl nasa ames research center arc 
emerging determination jpl build fundamentally new software architecture missions named mission data system 
mds state object oriented architecture moves away previous mission control concepts sequence 
originally targeted orbital insertion outer planet missions addressing mars surface mission scheme application 
large efforts software architecture development jpl mds flag history divided efforts robotics research community objective authors report put forth new framework robot software jpl 
report outlines results year describing broad design resultant claraty architecture providing initial implementation efforts outlining directions upcoming construction rover control software new framework 

challenge having briefly reviewed history robot control architectures apparent required 
section summarize impediments success existed past outline reasons attempting overcome new architecture describe constraints solution provided 
impediments success numerous impediments success control frameworks robotics systems 
may categorized follows programmatic vision implicit success research endeavor need sustain effort funding especially early development 
typically difficult maintain significant research funding control architecture development 
primarily product infrastructure new robot system algorithm 
new infrastructure enable better faster system algorithm development indirect results difficult sell programmatically 
invented nih part autonomy robotic systems domain research products commercial products 
typical research team want develop grow products 
expresses giving unique signature promotion results 
fear unknown products closely tied nih fact research products outside team varying unknown levels performance quality support 
products dilute research identity consume valuable effort trying adopt 
flexibility research nature robotics absolute consensus best solve problems exist important problems solve 
researchers desire maximum flexibility hardware software meet specific needs new projects 
desire flexibility odds software framework specifically tailored task 
simply put architecture optimal problems flexible quickly loses structure gives value 
overhead coupled desire flexibility need optimize performance 
comes form computational overhead robot system system building overhead encountered software development products unfamiliar unwieldy 
critical mass new software infrastructure recognized valuable value realized large group researchers chooses standardize 
group exists provides critical mass standard enables easier exchange ideas software theory snowball 
difficult decision research team join new standard critical mass reached 
external standard require overhead benefits may come critical mass achieved 
learning curve human nature conservative logistics research program provide resistance abandoning known understood methods new ones require investment time learn 
especially true projects short development cycles true years 
technical vision researchers develop infrastructure build systems developed opinions preferred solutions 
may willing abandon solutions favor external product surely technical vision odds external products 
depending strengths researchers may join larger community external architecture standard 
independent implications research loss participation detrimental community 
needs new start impediments acceptance unifying architecture may wonder impetus creation 
primary reason drives desire robotics place elimination need people waste time lesser endeavors 
paths goal 

elimination efforts prevent attainment critical mass parallel duplication previously discussed efforts robotic manipulation mobility research 
diminishes final products wasting resources solving problems different infrastructure time 
serial duplication evident new research tasks start wipe slate clean eliminate old system problems lack familiarity trust previous products 
typically software legacy due solely single individual local community 
obviously ability bridge group ownership transfer outside institutions restricted 

follow software community lead open source movement value shared software dramatically illustrated linux gnu share free ware products 
typically existed desktop pc market obvious reason model leveraged software robotics community 
evidence fact announcement intel sponsorship open source computer vision library 
object oriented design complementary open source movement growth object oriented design pc software 
commercial software industry dominates 
paradigm largely utilized robotics isolating community 
promises better facilitate software sharing discussed 

leverage complimentary efforts software sharing build critical mass worldwide relatively small robotics community extremely beneficial architecture framework widely accepted 
enable easier sharing design concepts importantly enable direct transfer software parties 
sharing limited communities jpl nasa currently arduous rare 
step eliminate hurdles completely 
mission data system nasa invested heavily large scale efforts spacecraft hardware software mds promise infrastructure leveraged expanded 
benefit nasa robotics efforts leverage products applicable 
spacecraft control problem similar general robotics problem anticipated gained leveraging 
obviously sources relevant technology exist outside limited set incorporated applicable 
constraints solution needs issues constrain success architectural solution 
need community acceptance 
acceptance robotics autonomy community users de success 
full acceptance proba bly possible desirable growing research area 
described previously important reach level critical mass users developers gain lose adherence standards participation software exchange 
second vital span divides necessary user developer communities 
divides exist forms robotics ai research areas 
result desire solve different types robotics problems way parts assembly humanoid interfaces 
result emphasis different phases product life cycles basic research fielded systems 
institutions differences cultural spanning departments mechanical engineering computer science organizations academia commercial companies 
third desire leverage existing software research nasa flight efforts 
particular jpl substantial effort new mds similar architecture described largely focused problems zero gravity spacecraft robots operating planetary surfaces 
requirement leverage standard practices industry 
needed avoid wheel enable nasa robotics efforts adopt techniques solutions commonly employed commercial products global software community 

claraty architecture response needs requirements developed initial framework new autonomous robot software architecture 
due structure call coupled layer architecture robotic autonomy claraty 
section review new structure evolutionary differences predecessors 
introduce layers architecture provide overview interaction 
review level architecture typical robot autonomy architectures comprised levels functional executive planner shown 
dimension level thought breadth system terms hardware capabilities 
dimension layer thought increasing intelligence reflexive procedural deliberative 
responsibilities height level strictly defined case researchers domain expand capabilities dominance layer working 
result systems functional layer dominant executive dominant planner dominant 
considerable research activity blurs line intelligence system planner executive functional 
typical level architecture 
planner executive questions hierarchical superiority 
problem description lack access planner functional level 
typically desirable configuration execution separates planner information system functionality planning 
consequence planners carry separate models system may directly derived functional level 
repetition information storage leads inconsistencies 
third problem description apparent equivalence concepts increasing intelligence increasing granularity 
actuality part hierarchy varying granularity 
functional layer comprised numerous nested subsystems executive trees logic coordinate planner time lines planning horizons different resolution planning 
granularity system may diagram 
worse obscures hierarchy exist system levels 
proposed layer architecture correct level architecture propose evolution tiered coupled layer autonomous robot architecture claraty illustrated 
structure major advantages explicit representation system layers granularity third dimension blending declarative procedural techniques decision making 
addition granularity dimension allows explicit representation system hierarchies functional layer accounting de facto nature planning horizons decision layer 
functional layer object oriented hierarchy describes system nested en convention employed consider lower granularity mean smaller granule sizes 
intelligence granularity system planner common database executive functional 
proposed layer architecture 
subsystems provides basic capabilities level nesting 
instance command move directed motor mobile robot team 
decision layer granularity maps activities time line created executed 
due nature dynamics physical system controlled functional layer strong correlation system granularity time line granularity decision layer 
blending declarative procedural techniques decision layer emerges trend planning scheduling systems executive qualities vice versa 
afforded algorithmic system advances faster processing 
claraty enhances trend explicitly providing access functional layer higher levels granularity frequently allowing time iterative replanning 
recognized need procedural system capabilities executive interface functional layer infusion procedural semantics plan specification scheduling operations 
claraty single database interface planning executive functionality leveraging efforts merge capabilities 
sections develop concepts providing overview features functional decision layers connectivity 
functional layer functional layer interface system hardware capabilities including nested logical groupings resultant capabilities 
capabilities interface decision layer uses robotic system 
shows simplified stylistic representation functional layer 
functional layer characteristics object oriented object oriented software design desirable reasons 
structured directly abstraction joint motor manip 
robot 
team locomotor arm mast wheel linkage stereo sensor camera switch digital io hardware environment 
proposed functional layer 
granularity system motor rover arm robot coordinated system rover locomotor rover rover locomotor 
simple example illustrating object hierarchy class inheritance concepts 
match nested modularity hardware robotic system 
second levels nesting basic functionality state information system components encoded logical place 
third proper structuring software inheritance properties manage complexity software development 
structure graphically designed documented uml standard 
gives simplified description object hierarchy functional layer 
diagram fourth abstraction dimension added illustrate inheritance structure classes functional layer 
bottom rover object aggregates arm locomotor objects 
objects comprise specific rover system derived parent classes general 
advantage structure system extension easier 
multiple copies objects instantiated copies rover arm left right 
second child classes may inherit properties rover arm class rover arm somewhat different 
moving class abstraction hierarchy inheritance relationships may get complicated 
locomotor common parent coordinated system turn parent rover called robot 
motor class children aggregated coordinated system class 
way motor functionality specified centrally object available levels hierarchy greatly simplifying software maintenance 
encoded functionality objects contain basic functionality accessible functional layer directly decision layer 
functionality expresses intended accessible system capabilities 
purpose structure hide implementation details objects higher levels granularity providing generic interface 
extent possible baseline functionality provided parent classes inherited children 
children may replace functionality add 
instance previous example class contain generic inverse kinematics method children 
rover arm may overwrite functionality closed form algorithm optimized specific design 
addition may add functionality specific class stow methods 
addition inheritance functionality polymorphic expression functionality 
typically member function name levels hierarchy representing capability appropriate level move read set status 
decision layer access levels functional layer hierarchy uses structure simplify interactions different granularity 
instance move command issued rover object navigate place locomotor requirement follow straight line find science targets way 
decision layer wanted rover interface access move locomotor directly accessing science target finder object 
resident state state system components contained appropriate object obtained query 
includes state variable values state machine status resource usage health monitoring way decision layer obtain estimates current state predictions state execution monitoring planning 
local planners decision layer global planner optimal decision making may utilize local planners part functional layer subsystems 
instance path planners trajectory planners attached manipulator vehicle objects provide standard capabilities regard global optimality 
functional layer infrastructure local planners option decision layer 
resource usage predictors similar local planners resource usage prediction localized objects resources 
queries predictions done decision layer planning scheduling requested varying levels fidelity 
instance power consumption vehicle particular traverse hard coded value estimate previous power usage detailed analysis upcoming terrain 
level fidelity requested time resource constraints planning stage margins available time window consideration availability detailed estimate infrastructure 
cases subordinate objects may accessed superior ones process servicing detailed prediction request 
simulation simplest form simulation system accomplished providing emulation capability lowest level objects interact hardware 
case superior objects knowledge causing real actions robot 
simulation baseline capability architecture 
typically done faster real time level computer resources 
advantageous percolate simulation capability superior objects hierarchy 
cost increasing complexity simulation computations 
purposes complexity may valuable 
resource estimation levels fidelity may specified provide useful simulation reduced computation desired 
test debug initial development regression testing system complexity grows objects contain test debug interfaces external 
decision layer decision layer breaks high level goals smaller objectives arranges time due known constraints system state accesses appropriate capabilities functional layer achieve 
shows simplified stylistic representation decision layer 
decision layer characteristics goal net goal net conceptual decomposition higher level objectives constituent parts decision layer 
contains declarative representation objectives planning temporal constraint network resulting scheduling possibly task tree procedural decomposition execution 
goals goals specified constraints state time 
thought bounding system specifying shouldn done 
example goal net goals 
planner dominant 
executive dominant mission planning space robot planning space line 
proposed decision layer 
joint angle exceed degrees degrees 
goals may decomposed subgoals elaboration arranged chronological order scheduling 
resulting goal nets schedules may saved recalled 
tasks tasks explicitly parallel sequential activities tightly linked 
result fixed procedural decomposition objective sequence possibly conditional nature 
contrast goals tasks specify exactly done 
example joint angle degrees 
commands commands unidirectional specifications system activity 
typically provide interface terminating fringes goal net capabilities functional layer 
closed loop control decision layer maintained monitoring status state system commands executed 
line line conceptual border decision making functional execution 
exists instantaneous lower border elaborated goal net moves different levels granularity current elaboration 
projected functional layer denotes border system black box decision layer 
state state functional layer obtained query 
state decision layer essentially plan active elaboration history execution maintained layer 
may saved reloaded part 
layer connectivity architectural layers functional decision flexibility ways may con nected 
spectrum system capable decision layer functional layer provides basic services 
spectrum system limited decision layer relies capable functional layer execute robustly high level commands 
capable decision functional layer created may redundancy seen strength claraty weakness 
allows system user system consider trade offs operating interface layers lower higher level granularity 
lower granularity built capabilities functional layer largely bypassed 
enable system take advantage globally optimized activity sequencing decision layer 
enables combination latent functionality ways provided aggregation objects higher levels granularity functional layer 
requires decision layer aware small details system lower granularity time process information 
mission critical operations may worth expending long periods time plan ahead short sequences activity 
model employed force system spend disproportionate amount time planning enacting plans 
plan may provide optimality execution inclusion planning time cost may force system suboptimal 
avoid problem decision layer robust basic capabilities built functional layer objects hierarchies 
allows interface layers exist higher granularity 
case decision layer need second guess functional layer algorithms limited computing resources 
particularly situations resources usage near margins subsystems operating parallel efficient directly employ basic encoded functionality 
directly allows problem solving appropriate level abstraction problem software developers 
time line interaction interaction architectural layers understood considering creation execution activities time line 
shows layers sequence activation highlighted green 
decision layer high level goals decomposed subordinate goals bottom level goal directly accesses functional layer 
planning scheduling process occurs queries resource usage local plans 
high fidelity information requested function layer resource margins tight functional layer object may need access subordinates improve predictions 
resultant activity list resource usage placed time line shown activities top resource usage bottom 
scheduling optimally order activities enable goal achievement violating goal net 
functional access level method calls level object hierarchy appropriate goal motor joint stereo sensor camera digital io arm linkage manip 
mast switch hardware environment executive dominant 
planner dominant line team robot locomotor wheel 
goals mission planning space robot planning space resource predictions local plans elaboration 
state values resource usage execution 
line 
proposed relationship function decision layers 
activities resources execution history exec domain planner domain 
time plan freeze plan horizon 
example system execution time line 
resource constraints 
process frozen point sufficiently far schedule self consistent time meant executed 
time horizon planning scheduling done limited constrain problem 
time boundaries shown 
inside plan freeze boundary responsibility executive initiate actions accessing functional layer 
process illustrated arrows functional layer green shading portion object hierarchy contains 
actions take place resources consumed typically slightly different amounts predicted 
usage reported decision layer discrepancies possibly trigger conditional parts current plan modify projections resource availability time line forces replanning occur 
cycle indicated large arrows 
process described typical systems pro components executive separated declarative components planning scheduling 
necessary boundary planning execution exist specific point time planning scheduling occur near executive style procedural decomposition may incorporated distant planning 
plan freeze boundary required claraty potential cross coupling planner executive primary reasons merging single decision layer 
discussed format merged activities interface currently development 
important note migration executive style procedural expansion functional layer 
object built functionality procedural decomposition actions may mini executive planner 
claraty preclude allows functionality leveraged bypassed depending desire system designers capabilities decision layer 

implementation prototyping implementation claraty architecture early stages specifications results important mention illustrating direction 
described tool standard choices heritage software included framework prototyping status time 
tools standards point time tools standards accepted claraty development unified modeling language uml system design documentation 
intent full uml including templates 
language create claraty due wide academia industry need object oriented implementation requirements realtime software implementation 
os support provide real time software support allowing workstation development claraty constructed run vxworks linux solaris 
extension operating systems possible 
standard template library spirit leveraging public domain standards employed software community software specifications standard template library employed possible 
software development tools possible build parts claraty writing software directly text editor desirable employ standard tool organizing structuring styling software manner developers 
consideration tools decision final 
desire prevent wide participation claraty tools large costs desirable 
documentation important provide documentation components system various forms 
uml chosen partly reason 
tools line code documentation standardization investigated 
intent leverage current tools standards create new ones 
heritage claraty new architecture design design prototype construction rely important existing infrastructure 
initial concepts functional layer object hierarchy developed planetary manipulators task jpl 
second research rovers rocky rocky frame problems testbeds prototyped solutions 
third years technology development jpl nasa research facilities provided valuable software implemented claraty framework 
software inclusion jpl stereo vision carnegie mellon university jpl path planning estimation planning scheduling execution decomposition monitoring kinematic dynamics computing 

summary new claraty architecture robotic autonomy software 
briefly reviewed history topic potential impediments success needs continued effort constraints acceptable solutions 
circumstances evolutionary modification prior architectural structure addresses needs merging procedural declarative planning providing object oriented encapsulation system functionality 
new claraty structure comprised decision functional layers complete overview interaction provided 
brief description current implementation efforts included 

acknowledgments discussed concepts leverage developed mission data system team jpl 
continued interaction architecture design issues 
research described carried jet propulsion laboratory california institute technology contract national aeronautics space administration 
specific commercial product process service trade name trademark manufacturer constitute imply endorsement united states government jet propulsion laboratory california institute technology 
alami autonomy 
international journal robotics research april 
albus mccain 
nasa nbs standard model control system architecture 
nbs technical note national bureau standards gaithersburg md july 
james albus 
rcs model architecture unmanned ground vehicles 
ieee internation conference robotics automation san francisco april 
backes automated planning scheduling planetary rover distributed operations 
ieee internation conference robotics automation detroit mi may 
backes long steele 
modular task execution system space telerobotics 
ieee internation conference robotics automation atlanta georgia may 

kinematic state estimation mars rover 
special issue intelligent autonomous vehicles 
stone 
automated assembly jpl testbed 
intelligent robotic systems space exploration norwell ma 
kluwer academic publishers 

robot arm dynamics control 
technical memorandum jet propulsion laboratory pasadena ca february 

dual arm system advanced teleoperation performance experiments 
fifth annual workshop space operations applications research soar houston tx july 
architecture 
international journal robotics research april 
brooks 
robust layered control system mobile robot 
ieee journal robotics automation march 
chien knight sherwood 
integrated planning execution autonomous spacecraft 
ieee aerospace conference aspen march 
dvorak rasmussen reeves sacks 
software architecture themes jpl mission data system 
ieee aerospace conference big sky montana march 
estlin chien 
continuous planning techniques coordinate multiple rovers 
ijcai workshop scheduling planning stockholm sweden august 
firby 
adaptive execution complex dynamic worlds 
phd thesis yale university department computer science 
fisher planning approach monitor control deep space communications 
ieee aerospace conference big sky mt march 
gat 
layer architectures 
kortenkamp murphy editors artificial intelligence mobile robots boston ma 
mit press 
gat behavior control robotic exploration planetary surfaces 
ieee transactions robotics automation 
hayward paul 
robot manipulator control unix robot control library 
international journal robotics research winter 
www intel com research mrl research 
open source computer vision library 
intel 
knight integrating model artificial intelligence planning procedural elaboration onboard spacecraft autonomy 
conference toulouse france june 
laubach 
theory experiments autonomous sensor motion planning applications flight planetary 
phd thesis california institute technology may 
das 
autonomous vision manipulation rover platform 
ieee symposium computational intelligence robotics automation pages monterey california november 
pathfinder 
journal geophysical research 
muscettola 
remote agent boldly go ai system gone 
artificial intelligence 
das 
rover maneuvering autonomous vision dexterous manipulation 
ieee conference robotics automation san francisco ca april 
schenker fido rover long range autonomous mars science 
intelligent robots computer vision xviii spie proceedings boston september 
schneider software architecture complex electromechanical systems 
international journal robotics research april 
schoppers 
software architecture hard real time execution automatically synthesized plans control laws 
aiaa nasa conference intelligent robots field factory service space houston tx march 
simmons 
structured control autonomous robots 
ieee transactions robotics automation 
simmons 
task description language robot control 
ieee rsj intelligent robotics systems conference vancouver canada october 
singh progress local global planetary rovers 
ieee conference robotics automation san francisco ca april 
stewart khosla 
design dynamically reconfigurable real time software port objects 
ieee transactions software engineering december 
welch wilcox 
embedded control miniature science rover planetary exploration 
th international symposium robotics applications wac anchorage alaska may 

navigation results desert field tests rocky mars rover prototype 
international journal robotics research 

technology robotic surface inspection space 
aiaa conference intelligent robots factory service space houston texas march 
rocky generation mars rover prototype 
journal advanced robotics 
wilcox robotic vehicles planetary exploration 
ieee conference robotics automation pages nice france may 

systems technologies missions outer planets 
th international congress international federation melbourne australia september october 
xiong matthies 
error analysis real time stereo system 
computer vision pattern recognition pages 
xiong matthies 
vision guided autonomous stair climbing 
ieee conference robotics automation san francisco ca april 
yen jain 
roams rover analysis modeling simulation software 
symposium artificial intelligence robotics automation space netherlands june 
biographies richard ph principal investigator long range science rover research team 
research interests include real time sensor control robot design software architectures path planning computer vision 
richard received 
ph 
applied physics carnegie mellon university air force laboratory graduate fellow 
thesis research concentrated real time force impact control robotic manipulators 
december jet propulsion laboratory california institute technology senior member technical staff 
member remote surface inspection project investigating sensor control technology telerobotic inspection international space station 
starting led development rocky generation mobile robot prototypes sampling missions mars 
received nasa exceptional achievement award led design concepts mars rover mission 
ph cognizant engineer architecture autonomy research task 
research interests include software hardware architectures robotic systems autonomous sensor coordination actuation control computer vision object oriented design artificial intelligence 
received degree electrical engineering manhattan college ny 
earned ph degrees robotics mechanical engineering department university notre dame respectively 
joined adept technology senior project engineer inventing implementing new technologies high speed vision robotic applications holds patent impulse flexible parts feeder 
participated consortium working industry leaders factory automation ford gm electronics cummins engine designing hardware software standards robotic assembly cells 
joined nasa jet propulsion laboratory member technical staff 
jpl worked planetary dexterous tor project researching autonomous sensor manipulation rovers 
addition duties architecture autonomy task working flight project autonomous sensor landing mars 
received notable organizational value added nova awards exceptional achievement award jpl 
member eta kappa nu tau beta pi national honor societies 
tara estlin ph senior member artificial intelligence group jet propulsion laboratory pasadena california performs research planning scheduling systems rover automation multi rover coordination 
dr estlin led jpl efforts automated rover command generation planning distributed rovers team member jpl long range science rover team 
received computer science tulane university computer science ph computer science university texas austin 
numerous publications planning scheduling machine learning including high profile forums aaai ijcai icra 
current research interests areas planning scheduling multi agent systems 
darren received bachelor science degree computer science university california santa barbara 
current projects include long range science rover statistical hypothesis evaluation automated planning scheduling environment aspen 
richard member telerobotics research applications group jet propulsion laboratory california institute technology 
currently member long range science rover team supporting design robotic architecture planetary rovers 
previous jpl involved design architecture rocky research rover development algorithms articulated camera mast low level software motor control vision systems science instruments 
coming jpl rich worked space shuttle space station avionics ibm federal systems division space information systems implementing redundant hardware software 
rich graduated drexel university mechanical engineering 
got space sciences university houston clear lake 
hari das received scd degree mechanical engineering mit 
senior member technical staff jpl 
research interests development evaluation robotic systems biomedical planetary exploration applications 
