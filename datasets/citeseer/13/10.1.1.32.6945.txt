guaranteed quality dependability information services gerhard weikum university saarland saarbrucken germany mail weikum cs uni sb de www www dbs cs uni sb de time written shorter letter 
blaise pascal impressive advances global networking information technology provide great opportunities kinds ubiquitous information services ranging digital libraries information discovery virtual enterprise workflows electronic commerce 
services exhibit poor quality unsuitable mission critical applications 
encourage intensive research efforts service quality guarantees ultimate goal ability construct deploy truly dependable systems provable correctness continuous availability predictable performance 
aims sort issues elusive goals mainly discussing case study workflow management 
point various assets leveraged notably database tp technology mathematical modeling reasoning outline research directions encourage pursue 
proliferation information services database technology witnessing proliferation global information society sheer explosion information services world spanning network 
opens unprecedented opportunities information discovery virtual enterprises cyberspace collaboration mundane things electronic commerce 
services frustrating experience 
information services including web search engines deliver poor results inconsistent arbitrarily inaccurate completely irrelevant data clients break easily exhibit long outages perform poorly unacceptable response times ultimately render offered service useless 
bottom line quality services highly unpredictable service quality guarantees usually absent today fast moving world 
contrast situation evolution database systems 
decades database systems developed outstanding reputation keeping mission critical data consistent virtually losing data providing high availability excellent performance wide variety workload patterns 
bottom line database systems proven dependable intensively stress tested services computer science business 
flip side coin admit full fledged database systems typically heavy weight platforms large footprint salient qualities achieved conjunction human support staff takes care system administration performance tuning 
database technology widely viewed promising candidate backbone quality conscious information services 
database community rest achievements past 
rapidly evolving highly diverse world global information services calls new blend database technology 
certain components database system needed building blocks integrated technologies workflow multimedia security technologies prominent example application class characteristic electronic commerce 
building blocks light weight easy composable adaptable require zero administration self tuning 
aspects constitute strategic research avenues database oriented interact computer science application fields 
additional dimension wish highlight focus need guaranteed service quality building blocks comprehensive information services 
challenge providing service quality guarantees objective providing services guaranteed quality poses variety research challenges 
need better understanding kinds guarantees useful express rigorous comprehensible manner 
overriding goal develop highly dependable systems 
includes provably correct behavior high reliability availability presence component failures predictably performance stress conditions 
service quality comprise qualitative quantitative properties examples specific areas ffl qualitative side guaranteed termination workflows active application components example 
addition mere termination ideally guarantee outcome acceptable user terms business private goals granting loans credit worthy customers purchasing certain financial constraints 
kind service quality requires formal reasoning specification workflow failure resilience availability guarantees underlying recovery manager 
ffl quantitative side consider notion quality service qos area multimedia storage communication 
involves quantifying presentation quality video audio streams terms guaranteed bandwidth guaranteed playback smoothness 
addition throughput startup latency metrics major interest storage servers network switches serve clients concurrently 
cost servers non negligible issue demands resource utilization 
quality service stochastic nature better cost performance ratio 
example smooth playback guaranteed specifiable probability close 
properties information services establish service quality guarantees qualitative quantitative facets 
properties perceived user qualitative merely ordinal ideally quantified comparison purposes 
quality information retrieval services web search engines falls grey area intelligent similarity searching multimedia documents scientific data exhibits similar problems 
furthermore may encounter inherent tradeoffs different notions service quality 
data warehouse environment example may consider trading completeness accuracy timeliness query results faster response quicker profound decision support 
thorough understanding notion service quality ramifications implications lacking claim insight rigorous reasoning service quality crucial building deploying truly dependable information systems 
objective outline aims increase consciousness service quality guarantees need truly dependable information systems encourage intensive subject 
attempt sort issues subject sketch big picture various research directions 
primarily example scenario area workflow management issues bring relevant kinds information services 
rest organized follows 
section introduces categories service quality systematic manner clarify terminology identify important issues 
section presents detailed discussion example scenario area workflow management serving demonstrator promising approaches research needs various facets service quality 
section preliminary subjective attempt outline strategic research avenues quality guarantees highly dependable information systems 
notions service quality dependability setting discussion different notions service quality thing faced confusing plethora existing terminology especially ities reliability availability predictability authenticity 
purpose section organize notions systematic framework clarify meanings 
subsection consider desirable properties entire information system 
subsection shift focus individual processes controlled system service qualities relevant single process 
subsection address quality notions may associate information units filtering information 
see categories include quantitative qualitative properties 
general disclaimer add entire discussion highly informal merely serves sketch crude roadmap aiming 
system centric notions overriding comprehensive notion quality kinds information systems known dependability meaning system trustworthy users able willing fully depend system 
fashionable meaning notion survivability indicating high quality systems survive kinds external impacts load peaks disasters hacker attacks ideally user noticeable disruption degradation 
dependability comprises number technical notions ffl reliability probability system break time horizon non way damage noticeable user 
database systems example non failure non recoverable loss inconsistency data double triple disk failure 
reliability measure system components single disks system 
appropriately designed redundancy disk mirroring raids database backups log files mirroring entire servers build highly reliable systems reliable components 
ffl availability redundancy system exploited repair failures system level non component level 
example log file serves provide recovery server disk crash 
repair system may able provide regular service users 
availability system defined probability system temporarily randomly chosen point time horizon 
practice interested expectation value mean availability shown quotient mttf mttf mttr mttf denotes mean time failure completing repair hit failure mttr denotes mean time repair failure completing repair 
availability increased ensuring failures infrequent mttf high ensuring short mttr 
efficiency database redo recovery crucial objective crash media recovery algorithms exploit tricks log truncation ffl integrity requires certain logical invariants hold state information system 
database systems user specified internal consistency constraints data 
constraints interpreted necessary sufficient condition state real world business properly captured database 
ffl security aims ensure explicitly authorized properly authenticated users invoke certain operations access certain data hardest part objective ensure authorization authentication mechanisms circumvented intruder 
cryptographic methods come play encrypting data digital signatures authentication watermarking detect piracy ensuring customer anonymity specific electronic commerce settings 
ffl performance primary objective includes ensuring user acceptable response time specific operations system 
time goals may differ operation types user classes 
information services multiuser systems clients second metric consider throughput system number successfully completed user invoked operations time unit 
response time interpreted constraint system sustain certain throughput corresponds total user induced load arrival rate operations number concurrently active users 
gives rise complication response time involves queueing delays contention system resources memory disk network bandwidth locks data effect largely disastrous load peaks 
network server queueing exactly services world wide web slow 
ffl performability component failures modern information systems may able provide continued service repair period example switching fraction load mirror server 
way certain class failures principle masked users 
continued service typically degrades performance 
failed resources disk decrease system throughput potentially increase response time additional resource consumption ongoing repair line reconstruction failed disk aggravates problem 
quantifying effects leads notion performability combination performance availability 
essence metric viewed performance weighted availability resources including degraded repair periods total entire service 
ffl verifiability ideally properties verifiable rigorous sense 
particular correctness entire system functionality mathematically provable 
involve proving implemented system conforms formal specification supposed operational real world environment 
database information systems community probably people agree extremely elusive goal merely thinking complexity information systems 
years come consider verifiability system level feasible goal come back ambitious limited scope variant theme subsection 
process centric notions modern database servers encompass traditional issues data management substantial extent aspects application logic means trigger rules stored procedures application specific data blades 
furthermore major trend information systems tier architectures middle tier middle clients data servers application server called business objects example tp monitor web application server object request broker workflow management system 
application process executes environment calls certain service qualities execution guarantees ensured surrounding middleware additional support tools 
particular verifiability specific properties may reconsidered limited scope level individual processes 
properties classified categories ffl safety properties safety property demands point execution process process state satisfies certain logical invariants 
intuitively aims ensure bad thing happens lifetime process 
property may ffl generic hold types processes example isolation property database transactions requiring ongoing process see effects concurrent transactions expose effects concurrent transactions ffl application specific hold instance particular process type example trip planning process exceed travel budget 
ffl liveness properties liveness property demands process guaranteed progress achieving goal enforcing disallowing certain patterns state transitions process 
intuitively aims ensure thing happens 
safety properties liveness properties ffl generic examples absence deadlocks atomicity property database transactions requiring process eventually executed completion leaves traces ffl application specific example trip planning process eventually include airline tickets hotel reservations arrangements 
information centric notions retrieving relevant information specific need greatest challenges information highway era 
today classical mainstream technologies available cope problem database systems information retrieval 
increasing importance semistructured information multimedia information push technology information feeds complex olap data mining applications borderline paradigms blurred ultimately obsolete 
paradigms need reconsidered probably merged novel class information filtering capabilities 
overriding issue information quality entails number dimensions ffl accuracy measure resolution retrieved information capturing spectrum exact query answers traditional database settings approximative potentially uncertain answers information retrieval global information systems semistructured data 
deviation exact result quantified example aggregation queries executed intelligent sampling process possibly deviation probabilistically bounded confidence interval may acceptable applications including data warehousing 
information retrieval query results usually ranked lists traditional albeit metric measuring accuracy result precision 
essentially precision top elements query result probability elements perceived relevant user 
ffl comprehensiveness measure states complete query result regard principally available information 
traditional database queries percent comprehensive global information mediators searching large numbers data sources may willing compromise ideal 
information retrieval especially web search engines percent comprehensiveness virtually infeasible 
metric traditionally information retrieval measuring comprehensiveness recall query 
essentially recall top elements query result probability relevant information missing relevance refer top information units documents user consider relevant knew entire usually huge set accessible units world wide web urls known search engine 
ffl timeliness information may date slightly outdated hopelessly aged little value historian 
users obtain query result indication timeliness retrieved information 
poses little problems individual html xml document issue complex derived information combines results different data sources may turn lazy replication 
ffl credibility information subject plagiarism faking kinds accidental malicious distortions users concerned credibility information retrieve global data sources 
raises issue able trace construction piece information back origins 
example global query engines combine results number data sources explain demand obtained query results underlying information pieces user comprehensible manner 
ffl cost effectivity retrieving information associated cost 
may monetary cost reflects value information highly subjective depending user cost arises resource consumption underlying information communication system memory disk os network bandwidth 
users competing resources higher resource consumption result higher monetary cost charged user requiring expensive servers data warehousing 
note requiring fast query responses inevitably entails higher resource consumption 
ffl latency queries typically return set ranked list results 
users wish see portion result fast care response time obtaining entire result set long fraction result list 
kind query latency considered important metric may optimized independently traditional response time metric 
simple case study service quality guarantees section presents concrete example service quality mean assets build achieving research avenues need explored 
specifically consider workflow management scenario covering process centric system centric notions service quality 
dependable management enterprise wide enterprise spanning workflows important prerequisite mission critical process centric applications 
conventional applications credit request insurance claim processing banks workflow technology bears great potential applicability advanced forms electronic commerce applications virtual enterprise collaborations negotiating setting maintenance service contracts customers merchants vendors contractors outsourced services 
subsection introduces example scenario terminology workflow management 
subsection discuss approaches guaranteeing application specific safety liveness properties considered workflow 
subsection complement kinds service qualities approaches providing additional generic execution guarantees account potentially failure prone system environment workflow embedded 
subsection takes global viewpoint addresses system level qualities highly dependable workflow infrastructure 
example scenario travel planning workflow workflow set activities steps belong order achieve certain business goal 
activities completely automated interaction human user intellectual decision making 
particular activity spawn requests arbitrary invoked application provided server independently current workflow 
orchestrate workflow activities crucial specify template control data flow activities may necessary run time medical applications 
making flow activities explicit factored entire application exactly key leverage workflow technology allows institution largely automate repetitive parts processes quickly adjust processes changing business needs 
concrete example workflow consider activities necessary planning business trip say trip conference 
suppose manager professor allows choose scientific developer conference may attend 
involves activities ffl select conference subject technical programme time place 
suitable conference process terminated 
ffl check registration fee conference depends memberships tutorials may wish attend ffl check cost trip conference typically delegation travel agency 
ffl compare total cost attending selected conference allowed budget decide attend conference cost budget 
desirable allow trials different conferences number trials limited 
activities control flow graphically depicted 
illustration specification formalism known statecharts particular kind formal specification method workflow management systems :10.1.1.20.461
state charts adopted uml industry standard elements 
oval denotes state workflow execution 
state turn corresponds activity activity spawned state entered 
activity may invoke application programs 
workflow started specified initial state state predecessors entered workflow terminates final state state successors reached 
example initial state state final states go 
select conference check flight check hotel check cost go budget trials cost cost budget cost budget trials cost budget trials cost select tutorials compute fee check check hotel fig 

specification travel planning workflow transitions states governed event condition action rules attached transition arcs labels 
meaning rule form transition fires event occurred condition true current state 
current state left state transition arc points entered transition specified action performed 
example conditions actions 
refer small set variables instantiated workflow instance relevant control flow 
kind control flow specification allows conditional execution loops high level predicates 
entire specification hierarchical supporting top refinement bottom composition existing building blocks allowing states nested 
state turn contain statechart executed state entered 
addition specification formalism allows parallel execution graphically indicated breaking state called orthogonal components separated dashed line executed parallel 
example activities correspond states executed parallel 
states refined steps leads parallel substates 
workflow specific safety liveness guarantees absolute verification workflow sense proving formal workflow specification matches user intuitive intention thinking 
done verify certain particularly critical properties workflow strengthening user confidence correctness 
need ingredients ffl formal language specifying workflow ffl formal language expressing properties wish verify ffl automatic possibly preferably semi automatic proof technique 
statecharts introduced formal language mathematically defined underpinnings fit purpose 
methods may suitable notably languages petri nets temporal logic process algebras see verification approaches see considerations workflow context :10.1.1.28.2740
alternatives statecharts lead particularly efficient proof techniques 
capturing safety liveness properties processes variants temporal logic established formalism 
particularly attractive variant computation tree logic ctl reconciles reasonably efficient tractability expressiveness sufficient workflow context 
ctl uses propositional logic formulas finite set variables elementary building blocks 
state process formula evaluated true false usual manner 
addition ctl allows apply existential universal quantifiers denoted respectively paths 
quantifier ranges set possible execution paths originating state called kripke structure 
quantifiers combined called temporal modalities globally abbreviated form combined formulas types arbitrary ctl formula elementary ffl ax meaning holds state execution paths originate current state ffl ex meaning holds state execution path ffl ag meaning holds globally states execution paths ffl meaning holds states execution path ffl af meaning execution paths reach state holds ffl ef meaning execution path reach state holds 
critical workflow properties formally stated verified formal specification workflow appropriate proof techniques 
approach full fledged theorem provers 
cases approach computationally infeasible 
powerful efficient approach model checking technique 
technique builds assumption model investigation finite finitely states essentially checks property ctl formula holds finite state automaton derived actual model 
logic terminology model checking tests finite state automaton model formula formula holds structure necessarily tautology name technique 
efficient variant model checking known symbolic model checking 
symbolic model checking compact symbolic representation finite state automaton viewed boolean function terms ordered binary decision diagram obdd 
model checking widely popular verification hardware designs vhdl specifications lowlevel communication protocols 
applied simple electronic commerce protocol ensure properties money atomicity 
sketch model checking applied verify critical properties workflow specifications 
guaranteed workflow behavior 
example scenario possibly critical properties ffl allowed budget trip exceeded 
ffl travel planning workflow eventually terminate booked trip state go giving intended conference trip state 
note property safety property second liveness property short labels capture properties ctl encounter difficulty condition refers integer variables budget cost 
comparisons integer variables allowed ctl underlying propositional logic 
integer variables workflow specification strictly speaking longer finite state system 
step applying model checking transform workflow specification model integer variables 
resort trick intellectually modifying workflow specification recoding integer comparison boolean variable 
example introduce new boolean variable set activity 
variable set true cost budget false 
similarly replace integer test new boolean variable set activity 
essence shift complexity counters integer arithmetics activities able necessary computations level workflow specification 
note kind transformation yields equivalent statechart sense execution paths correspond original statechart 
note trick certainly general recipe may fairly limited applicability believe workflow specifications opposed general purpose concurrent programs typically simple integer variables trick wide 
finite set workflow states finite set boolean variables position formally capture ctl formulas properties example workflow provably satisfy ffl ag go read states execution paths originating current state having reached state go implies boolean variable true equivalent ctl formula ef go ffl af go read states execution paths state go state entered formulas term state simply interpreted boolean variable true state entered 
construct add additional complexity ctl 
formulas admittedly exactly typical business process designer deal 
interesting critical properties workflows follow certain patterns structure corresponding ctl formula 
chance construct simpler user friendly graphical macro language top hiding complexity ctl see approaches macro patterns 
merely small step away applying model checking workflow specification 
step consists converting workflow specification explicit finite state automaton 
workflow intuitively appears finite state automaton contains elements fit conventional notion automata 
specification contains orthogonal states nested states 
second boolean variables especially propositional logic formulas variables require treatment 
issue settled forming cross products states entered simultaneously adding cross products set states addition simple states 
needs applied states correspond orthogonal components states form nesting hierarchy 
example construct new tuple state 
nested states obvious optimizations innermost state implicitly represents parent states 
worst case state space consists power set simple states potentially huge definitely finite set 
fortunately kind state explosion problem dramatic application cases 
efficient model checking tools able handle state spaces order states 
capability distinguished characteristic model checking opposed proof techniques 
second issue boolean variables formulas resolved explicitly constructing context workflow specification define variable value mapping workflow variables 
value boolean formula fully determined set currently entered state current context 
furthermore set possible contexts finite 
cross product workflow state space possible contexts constitutes finite set coin set workflow configurations 
set configurations exactly state set finite state automaton transition source state target state corresponding source configuration workflow lead corresponding target configuration step workflow execution 
model checking procedure operates kind finite state automaton 
essentially iterative state marking procedure proceeds structural induction ctl formula 
marks states elementary subformulas hold 
considers composition subformulas formula derives markings composite formula constituents 
example markings subformulas marking simply intersection markings 
marking temporal formula ax words holds possible states set states successor states marked markings expressive quantified formulas ag derived marking computing fixpoint set states ax 
holds 
fixpoint computation iterative procedure marks th iteration state state marked successor states marked st iteration 
state space finite termination fixpoint computation guaranteed 
similarly simple procedures exist combinations quantifiers temporal modalities 
final result model checking obtained reading final markings property holds workflow automaton initial state marked property corresponding ctl formula 
mentioned classical way model checking substantially improved terms efficiency symbolic model checking obdds 
toy examples verified seconds complex realistic workflow examples handled order minutes see experimental experience 
guaranteed application behavior 
kind workflow verification sketched previous subsection far complete 
provably guarantees correct workflow behavior relative assumption invoked applications correctly 
applications treated black boxes approach 
wish expand correctness reasoning capture aspects application behavior example incorporating integrity constraints underlying databases typically manipulated invoked applications 
ideas lines making model checking powerful theorem proving techniques 
particularly intriguing approach incorporate assertions behavior invoked application 
example activity travel planning scenario characterized assertion cost cost cost cost refer values workflow variable cost invoking activity application 
similarly add assertion cost cost activity assuming behavior conference organizers boolean formulas arithmetic constraints 
enriching workflow specification kind assertions course verification problem harder 
model checking longer sufficient combined techniques example constraint solvers 
combined verification approach concurrent programming 
generic execution guarantees far implicitly assumed idealized failure free system environment workflow execution takes place 
real systems susceptible sorts process computer network communication failures quality guarantees derived previous subsection necessarily hold anymore 
kind guarantees discussed previous subsection need complemented generic execution guarantees 
question arises kinds generic guarantees need efficiently provided workflow management system middleware leveraging techniques transaction processing tp systems 
survey style discussion issues structured types failure situations may arise dealt 
failure resilient workflow state context 
client initiates workflow execution instance travel planning example workflow server workflow management system responsible execution particularly maintaining state context workflow instance executes workflow configuration sense subsection 
consider failure workflow server workflow execution entered state time 
restarted server simply forgotten state context workflow client manually re initiate entire workflow possibly forced type input repeat dialogs realistic long lived workflows complex simple example scenario substantial amount extended time period may lost willing rely workflow technology mission critical processes 
straightforward solution workflow server keep state context workflow persistent reliably managed store record necessary updates workflow performs state transition value workflow variable changes 
obvious implementation database purpose alternatively workflow server maintain persistent log file 
sufficient simply record change state context separately 
crucial variable changes associated completion activity subsequently firing state transitions embedded single atomic transaction 
see necessary consider situation workflow reached state value cost variable allowed budget 
suppose workflow server records state transition persistent store updated value cost variable 
server fails point restarted resume workflow state assumed value cost variable variable value non recorded update 
result workflow erroneously enter go state 
require actions behalf current state outgoing transition combined atomic transaction 
transaction includes ffl updates workflow variables modified activity run current state return code result parameters activity ffl state modification results firing current state outgoing transition ffl updates workflow variables triggered transition part transition eca rule 
kind transactional state context tracking problems eliminated server guaranteed recover failure workflow consistent state context 
initialization workflow execution successfully recorded server server guarantees complete execution workflow exactly execution 
note stronger guarantee mere atomicity database transaction 
means places burden handling outcome client 
difficulty lies situations client resubmit seemingly failed workflow time avoiding successful parts executed second time possibly non idempotent effects 
exactly property hand combines execution involve idempotence guarantee state testing methods log sequence numbers database pages 
technique proposed number research projects see especially probably industrial strength workflow management systems 
distributed workflows 
issue previous subsection complicated workflow execution spread multiple independent workflow servers 
standard situation workflows span different enterprises example support called virtual enterprises context business business electronic commerce outsourcing service provisioning 
fact large enterprise finds largely autonomous organizational units decentralized responsibilities certain activities subworkflows typically entails distributed workflow execution 
example scenario case parallel activities possibly decentralized airline hotel reservation server 
firing transition state superstate left unnamed contains parallel subordinate statecharts spawn follow activities 
distributed execution corresponding servers need notified workflow server charge activity firing transition 
servers say successfully notified corresponding message server lost network server failure workflow system may inconsistent situation 
sending server repeat notification message second server message server resent ensure exactly semantics 
solution problem leverage existing tp technology combining notifications receiving servers single distributed transaction standardized phase commit protocol xa corba counterpart ots 
better combine update sending server state context information notifications single site transaction 
atomicity transaction guarantees state transition state globally perceived place exactly 
situations solution incurs certain terms independence ultimately performance involved servers 
example receiving servers temporarily unavailable may possible commit party transaction 
activity available receiving server started server restarted reconnected network commits notification 
processing times activities may vary orders magnitude delay parallel activities possibly severe problem 
better solution decouple involved servers middle man form failure resilient transactional queues 
sender simply place notification queues receiver immediately commit update local state context 
receivers independently dequeue notification 
doing combine persistent recording single transaction 
benefit method dequeued message automatically placed back receiver queue undoing transaction update receiver local state context fails 
party protocol broken transactions 
distributed transaction workflow server queue manager typically tp monitor possibly orb object request broker modern middleware 
net result workflow progress largely autonomous servers loosely coupled manner ensuring exactly execution workflow 
sketched technique long tp environments called queued transactions viewed limited form workflow typically restricted sequential chains transactions 
queued transactions distributed workflow discussed example 
incorporating invoked applications 
point wonder approaches cope external effects applications invoked workflow activities 
example activity may go ahead hotel flight reservations typically involving database servers control workflow server 
situation consider workflow servers atomic state transition assumption activity completed successfully activity invoked application fails loses 
solution incorporate invoked application external effects atomic state transition feasible 
activity completes distributed atomic transaction includes actions ffl state transition workflow server responsible completing activity including modifications workflow variables result activity state transition ffl notification workflow servers responsible newly entered states corresponding activities ideally messages receiving servers queues see addition ffl updates completing activity invoked application external databases types encapsulated business objects corba style persistent objects 
method feasible data servers affected invoked application support standardized commit protocol transaction atomicity 
widely available support xa ots assumption satisfied 
assumption hand need address issue fundamental approach discussed subsection 
atomicity spheres 
intriguing idea arises previous subsection considerations combine multiple activities corresponding applications single transaction sphere atomicity 
note priori making workflows failure resilient providing reliable exactly execution 
general atomicity spheres serve additional convenience workflow designer specify intended behavior case certain semantically failing activity outcomes able find hotel vacant rooms 
example scenario wish combine sub activities sub states single atomic unit 
semantic failure effects activity invoked application automatically undone 
effect equally achieved explicitly specifying desired exception handling workflow specification language adding appropriate states activities statechart semantically sophisticated cases exception handling necessary anyway 
face fine borderline generic execution guarantees form atomicity spheres application specific safety liveness properties exception handling explicitly modeled 
atomicity spheres indicating activities belong atomic unit techniques ensuring atomicity known 
cases ffl invoked applications sphere activities support standardized commit protocol directly rely support xa ots 
ffl invoked applications support protocol unacceptable performance viewpoint hold application resources locks uncertain prepared state possibly long time may commit invoked application separately early possible resorting compensation providing semantic notion atomicity 
example hotel booking committed semantically undone additional compensating activity 
implicit assumption exposing hotel reservation concurrent workflows harm 
assumption justified additional semantic isolation steps needed workflow level predicate oriented locking conflict testing semantic locking data type operations 
techniques implement undoing atomicity sphere cases really different 
registered workflow system affected activity compensating activity treated just logical undo operations database system 
undo procedure may involve form idempotence testing log sequence numbers ensure activity atomicity sphere undone exactly 
directly build techniques handling partial rollbacks intra transaction equivalently undoing subtransactions closed type nested transaction see 
major problem far swept rug arbitrary sets activities meaningfully combined atomicity sphere 
reason issue atomicity spheres properly tied workflow 
activities atomicity sphere undone entire workflow needs resumed example alternative activities 
feasible atomicity sphere contain updates control flow variables states workflow 
general contain state transitions states correspond activities atomicity sphere 
example sphere activities undone activities updates workflow cost variable undone sub workflow reset initial states surrounding super state 
achieve combine affected applications workflow servers state transition recording atomic unit discussed previous subsections 
hand combine states atomicity sphere clear state context values workflow variables workflow resumed undo sphere 
statechart specifications safe solution problem limit atomicity spheres single states workflow 
states nested fairly general approach 
specification languages especially arbitrarily structured graphs vaguely defined operational semantics problem may harder 
intuitive restriction allow connected subgraphs single root single sink atomicity spheres 
considerations lines partly driven commercial workflow systems 
failure resilient applications 
far assumed invoked applications workflow support form atomic commit protocol 
real life useful applications geared think spreadsheet interactive statistical tools simulation virtual reality animation tools examples 
tools transactional database server data management application updates persistent data undoing re invoking invoked application consequence workflow atomic state transitions result interactive user lost 
user severely having repeat interactive steps 
best possible world interactive applications failure resilient sense failures masked user appropriate application recovery methods 
course surrounding workflow atomic state transitions ask application undo 
guaranteed application re invoked workflow servers forward recovery applications resumed state 
techniques making arbitrary application processes failure resilient years essentially require periodically saving application state failure resilient store logging messages received sent application process 
message logging adds major complexity approach especially concerned efficiency 
messages considered include ffl invocation application return message workflow server ffl request reply messages application exchanges underlying database servers business object servers course ffl input output user case interactive application 
illustrate quite complex situations cope consider scenario showing messages arcs execution threads curly lines time proceeding left right 
invoked application failed right completing sending reply workflow server application recovery restart application process saved state say invocation point scenario replaying message events log file 
replaying messages need careful avoid resending message may lead non idempotent effects 
example simply resubmit application request database server processing new request possibly fail reproduce server reply original request 
note earlier reply may dependent interleaved execution concurrent requests clients 
requests restarted application process may contact servers previously sent reply messages want force message log records disk immediately 
challenge lies developing efficient solution aims minimize amount forced logging activity ensuring server independence correct recovery possible circumstances 
protocol properties developed method considers tier architectures client applications database servers 
generalization arbitrarily structured systems workflow business object application data servers concurrent executions levels open issue 
workflow server application database server clients users fig 

messages invoked application surrounding servers highly dependable workflow infrastructures highly available services 
failure resilience techniques discussed previous subsection serve provide high reliability system guarantees correct execution presence failures 
information probabilities certain failure classes transient network database server failures permanent disk failures ideally quantify probability system loses ability correctly example logged information corrupted disk failure 
probability sufficiently high replicate critical data especially log files increase system reliability 
high guarantee progress executing workflows classes client requests 
example system busy performing recovery steps processing active workflows suspended new client requests rejected 
high availability need additional form active redundancy replicating server processes replication underlying permanent temporary data 
recovery server ongoing newly arriving dynamically switched backup server system continuously available high probability remaining risk primary backup servers fail simultaneously 
techniques operating highly available multi server configurations years specific tp environments small number carefully administered servers applying generalizing techniques open manifold world data servers workflow servers business object application servers issue trivial 
particular unclear extent various replication techniques data processes scale increasing system size complexity 
reliability ideally able quantify availability guaranteed system configuration degree replication various servers data stores type replication protocols 
conversely need guarantee certain availability level percent equivalently expectation hour outage year able derive system configuration provably satisfies goal 
configuration tools lines lacking 
ideal case knowledge failure rates repair rates resulting availability levels built system dynamically re configure demand 
example server fails recover fast system decide increase degree replication dynamically spawning third backup server creating corresponding resources addition backup server takes failed server 
intelligent decisions obviously require probabilistic models predicting service availability different configurations time horizons 
guaranteed performance auto tuning servers 
situation interpreted particular kind unavailability overloaded server extremely poor catastrophic performance 
administered systems lot human care feed may face problem business growth hard predict popular services may hit load peaks 
irony exactly unanticipated popularity lead performance disaster may cause severe damage service reputation ultimately revenue 
need intelligent monitoring configuration tools assess current workload predict resulting performance derive required system configuration early possible 
initial approaches lines workflow management multimedia services lot needed viable solutions 
note introducing form admission control avoid load peaks practiced video servers truly satisfactory solution rejected clients perceive service unavailable slow client request put wait admission queue 
note envisioned kind configuration tools need consider expectation values response time related metrics throughput properties response time distribution example th th percentile 
ideally system give stochastic performance guarantee ensuring response time client request user interaction workflow turnaround time entire fully automated production workflow certain user tolerated threshold specifiable probability close 
guarantees ideally user workload class basis require advanced stochastic modeling techniques 
addition combine availability performance considerations stochastic predictions system performability see section 
analogously previous subsection considerations availability performance guarantees need take account evolving workloads change time 
systems auto tuning automatically identify bottlenecks dynamically re assign resources workload classes 
addition specified performance goals met existing available resources system prompt service owner upgrade server adding memory disks extend resource pool additional servers mirror sites network 
system require human intervention giving precise recommendations kind required upgrade amount additional memory needed system manageable non trained operators 
direction zero admin dynamically auto tuning self healing systems pressing total cost information service dominated costs human administrator staff 
strategic objectives research avenues stepping back interesting issues workflow example observation strategic importance multiple notions service quality combined obtain value added qualities 
previous section synergetic combination application specific safety liveness arguments generic exactly execution guarantee surrounding system environment achieves substantially higher degree process quality system dependability 
synergetic effects need studied systematically 
unfortunately combination different notions quality lead tradeoffs 
data warehouse push technology information feed example sheer volume data manifold information desires dictate careful system design support insightful decision support needs affordable costs 
may willing trade quality delivered query results comprehensiveness accuracy timeliness see section faster response time lower resource consumption 
example may prefer fast approximate result aggregation query finding exact result hours reasonably matches data mining style query seconds best matches time consuming expensive service 
able cope tradeoffs predictable manner harder mixed information services combine information retrieval style searching sql style processing optimization highly distributed heterogeneous environment 
information service digital libraries advanced forms electronic commerce xml oriented web wide information retrieval require blend technologies information filtering sql query processing workflow management 
understanding managing mutual impact multiple notions service quality absolutely crucial cost users services especially cost means money charged service 
research agenda better understanding service qualities follow proven rationale think globally fix locally 
local level involves research individual notions quality 
example despite progress nearly fast naively hope continue intensify efforts ffl applying logic reasoning behavior information services ffl applying stochastic modeling quantifying availability performance performability information systems 
global level encourage bold steps truly dependable information systems 
service quality properties certain meta properties strive order quality manageable 
list modest attempt identify meta properties impose structure envisioned research avenues 
ffl predictability overriding goal systems predictable 
include qualitative quantitative behavior 
words sufficient build scalable systems behavior performance observe empirically retrospect 
predictions system behavior different resource workload settings fundamental part system construction 
importance predictability cite example strategic report ability analyze predict performance enormously complex software systems lie core economy painfully inadequate 
ffl face tradeoffs different notions service quality ideally able assess qualities quantitative manner 
example choosing web search engine information feed users want assess comprehensiveness accuracy service versus resource consumption service charges 
similar lines combining ranked result lists different search engines global result mediator level requires form normalized merging 
may start quantitative ordinal property ranks various search engines need assess query results cardinal scale 
holds especially combine problem scenarios mediating result lists different sources cost constraints 
traditional ground goals predictability entail great challenges query optimization conventional databases 
state art optimizers provide relatively coarse estimations resource consumption runtime query various execution plans 
may reasonable basis relative ranking alternative plans order select albeit necessarily optimal plan 
need cope tradeoffs say plan resource consumption latency retrieving results distributed parallel system need assess absolute response time cost versus query result data warehouse data mining system need come predictions precise possible 
underlines importance statistically informed selectivity estimations analytic models resource consumption resource contention memory pressure 
ffl quality information service reproducible way moderate time resources 
holds qualitative properties correctness testing quantitative metrics benchmarking purchasing deploying systems subscribing information services include money back guarantee promised quality achieved practice 
note option require customer fully understand quality guarantee derived testability sufficient 
example stochastic guarantees availability response time percentiles translated bounds service downtime limited numbers client requests unacceptable response time certain time horizon year 
having bad luck drawing unacceptable sample considered violation contract stochastic guarantee valid 
underlying stochastic models statistical confidence measurements serve risk assessment service provider system vendor 
ffl composability information services non monolithic complex architecture consisting smaller building blocks interoperable business objects see 
assuming building block provides defined service quality guarantees challenging step preserve guarantees composition building blocks transform higher level notion service quality 
presence tradeoffs higher level guarantees may subject negotiation 
information services need support quality guarantees automated manner agents act behalf client preferences ffl final issue ensure users information services know interpret offered service qualities 
particularly delicate stochastic guarantees say performance availability 
intuition proper assessment probabilities 
limited mathematical background human customers excuse providing rigorously founded quality guarantees 
people understand differential equations inflating automobile expect car engineers proper understanding full control critical functions 
sketched problem areas call intensive research efforts obtain better fundamental understanding service quality 
questions addressed service quality properties specified 
quantify initially qualitative service properties 
cope tradeoffs quantitative properties 
compose service quality guarantees multiple building blocks comprehensive services give guarantees clients 
ultimate goal provide legally binding guarantees ubiquitous information services generations 
concluding remarks threshold st century industry driven fast pace time market regime 
database research community ought careful infected virus 
strive provable correctness predictable performance guaranteed availability name highlights comprehensive suite quality guarantees crucial truly dependable information services 
steps elusive goals laborious progress slow exactly role researchers tackle hard problems especially vital nature society 
doing increase awareness existing neighboring fields recognize usefulness necessity mathematical modeling reasoning important tools practically viable solutions 

alonso mohan agrawal el abbadi kamath exotica persistent message architecture distributed workflow management ifip working conference information system development decentralised organizations trondheim norway 

alonso hagen schek distributed processing stand systems applications proceedings rd international conference large data bases vldb athens greece 

alpern schneider recognizing safety liveness distributed computing vol pp 


apers 
editors multimedia databases perspective springer 

asilomar report database research acm sigmod record vol december 

attie singh sheth rusinkiewicz specifying enforcing intertask dependencies international conference large data bases vldb dublin 

barrera gray ft nt tutorial microsoft cluster server tutorial notes international conference fault tolerant computing systems ftcs seattle 

bauer dadam distributed execution environment large scale workflow management systems subnet server migration international conference cooperative information systems coopis charleston 

bernstein newcomer principles transaction processing systems professional morgan kaufmann 

chaudhuri 
editor bulletin ieee technical committee data engineering vol june special issue databases world wide web 

chaudhuri dayal overview data warehousing olap technology acm sigmod record vol pp 


chen dayal failure handling transaction hierarchies international conference data engineering icde birmingham uk 

chomicki saake logics databases information systems kluwer academic publishers 

christodoulakis triantafillou research development issues largescale multimedia information systems acm computing surveys vol december pp 


clarke emerson sistla automatic verification finite state concurrent systems temporal logic specifications acm transactions programming languages systems vol april pp 


clarke wing formal methods state art directions acm computing surveys vol december pp 


communications acm vol february special anniversary issue years 

transaction concept software process management nets technical report fraunhofer institute software systems engineering berlin dortmund germany 

podelski model checking clp nd international conference tools algorithms construction analysis systems amsterdam springer 

dogac ozsu sheth 
editors advances workflow management systems interoperability nato advanced study institute springer 

dogac 
editor special section electronic commerce acm sigmod record vol december 

ehrich caleiro sernadas denker logics specifying concurrent information systems 

emerson temporal modal logic van leeuwen 
editor handbook theoretical computer science elsevier science publishers 

faloutsos searching multimedia databases content kluwer academic publishers 

franklin 
editor bulletin ieee technical committee data engineering vol september special issue data dissemination 

franklin 
editor bulletin ieee technical committee data engineering vol september special issue improving query responsiveness 

franklin zdonik data face push technology perspective acm sigmod international conference management data seattle 

freytag cristian masking system crashes database application programs international conference large data bases vldb brighton uk 

fuhr decision theoretic approach database selection networked ir technical report university dortmund germany submitted publication 

dittrich bundling new construction paradigm persistent systems networking information systems journal vol 

gravano garcia molina tomasic gloss text source discovery internet appear acm transactions database systems 

gray computers done 
editors office automation teubner 

gray reuter transaction processing concepts techniques morgan kaufmann 

raghavan information retrieval world wide web ieee internet computing vol september pp 


harder 
editor special issue workflow management german informatik forschung und entwicklung vol 

harder fault tolerance issues transactions systems german german conference fault tolerant computing systems springer 

harel statecharts visual formalism complex systems science computer programming vol pp 


harel executable object modeling statecharts ieee computer vol july pp 


harel naamad statemate semantics statecharts acm transactions software engineering methodology october pp 


reiser 
editors report workshop system performance evaluation origins directions schloss dagstuhl germany september www ani univie ac dagstuhl 
heintze tygar wing wong model checking electronic commerce protocols nd usenix workshop electronic commerce 

hellerstein 
editor bulletin ieee technical committee data engineering vol december special issue query processing nonstandard data 

jablonski bussler workflow management modeling concepts architecture implementation international thomson computer press 

kamath alonso mohan providing high availability large workflow management systems proceedings th international conference extending database technology edbt avignon france 

klein advanced rule driven transaction management ieee compcon 

kossmann 
editor bulletin ieee technical committee data engineering vol september special issue interoperability 

lamport proving correctness multiprocess programs ieee transactions software engineering vol 
se pp 


leymann transaction support workflows german 

kramer walter network global database challenges interoperability proactivity legacy international conference large data bases vldb athens greece 

lomet application recovery advances elusive goal international workshop high performance transaction systems asilomar 

lomet weikum efficient transparent application recovery clientserver information systems acm sigmod international conference management data seattle 

manna pnueli temporal logic reactive concurrent systems specification springer 

may proving correctness labeled transition systems semantic tableaux international conference automated reasoning analytic tableaux related methods pont france 

mcmillan symbolic model checking kluwer academic publishers 

theobald algorithms data structures vlsi design obdd foundations applications springer 

mohan transaction processing distributed computing internet age tutorial notes international conference extending database technology edbt valencia spain 

mohan treiber obermarck algorithms management remote backup data bases disaster recovery ieee international conference data engineering vienna 

moss 
editor bulletin ieee technical committee data engineering vol march special issue integrating text retrieval databases 

muth weikum kotz dittrich workflow management state activity charts 

muth weikum stochastic service guarantees continuous data multi zone disks proceedings acm international symposium principles database systems pods tucson arizona 

muth triantafillou weikum mixed workload multimedia storage servers guaranteed performance service quality international workshop multimedia information systems como italy 

oberweis modeling execution workflows petri nets german teubner 

olderog nets terms formulas views concurrent processes relationship cambridge university press 

pinger verification information systems model checking german german workshop foundations database systems germany 

raghavan information retrieval algorithms survey proceedings acm siam symposium discrete algorithms 

rahm goal oriented performance control transaction processing german conference performance measurement modeling assessment computer communication systems germany 

reuter schneider contracts revisited jajodia kerschberg 
editors advanced transaction models architectures kluwer academic publishers 

rothermel mohan aries nt recovery method write ahead logging nested transactions international conference large data bases vldb amsterdam 

rump analysis event process chains reachability graphs german technical report university oldenburg germany 

trivedi performance reliability analysis computer systems kluwer academic publishers 

schek ye weikum unified theory concurrency control recovery acm international symposium principles database systems pods washington dc 

schroeder cui shepherdson verification business processes ccs international joint conference activities coordination collaboration wacc san francisco february 

schuster configuration management approach large workflow management systems international joint conference activities coordination collaboration wacc san francisco february 

silberschatz stonebraker ullman 
editors database research achievements opportunities st century acm sigmod record vol march 

silberschatz zdonik strategic directions database systems breaking box acm computing surveys vol december pp 


automatic verification transactions objectoriented database international workshop database programming languages dbpl estes park colorado 

ubiquitous self tuning scalable servers acm sigmod international conference management data seattle 

president information technology advisory committee interim report president august www gov ac interim 
vossen becker 
editors business process modeling workflow management models methods tools german international thomson publishing 

weikum schek concepts applications multilevel transactions open nested transactions elmagarmid 
editor database transaction models advanced applications morgan kaufmann 

weikum hasse comfort automatic tuning project information systems vol pp 


weikum kotz dittrich muth specification verification distributed execution workflows mentor german 

weikum formal foundation distributed workflow execution state charts international conference database theory icdt delphi greece 

wolf steinmetz multimedia communication proceedings ieee vol december pp 


wu buchmann research issues data warehousing german conference database systems office engineering scientific applications ulm germany 

zimmermann advanced database systems components german workshop foundations database systems germany 

