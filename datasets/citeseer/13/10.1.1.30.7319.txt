efficient representation sparse sets preston briggs linda torczon rice university sets fundamental abstraction widely programming 
representations possible offering different advantages 
describe representation supports constant time implementations clear set delete member 
additionally supports efficient forall iterator allowing enumeration members set time proportional cardinality set 
detailed comparisons costs operations representation bit vector representation 
additionally give experimental results showing effectiveness representation practical application construction interference graph graph coloring register allocation 
representation developed solve specific problem arising register allocation useful especially implementing efficient analysis techniques large programs 
new representation panacea 
operations required particular set carefully considered representation representation chosen 
categories subject descriptors data structures data storage representations general terms algorithms additional keywords phrases set representations set operations compiler implementation register allocation 
sets fundamental abstraction widely programming 
representations possible offering different advantages 
choice best representation set depends operations required cost time space relative frequency operations 
part exploration register allocation graph coloring looked implementations phase allocator 
quickly construct interference graph needed set representation supported efficient implementations operations clear set add member delete member iterator forall enumerated members 
bit vector representations traditional choice data flow analysis efficient case 
require time clear time iterate members represents size universe 
requirements especially applications number elements set small relative size universe 
inspired memorable homework problem aho hopcroft ullman problem developed sparse set representation supports required operations efficiently 
implemented versions new representation find widely useful particularly implementation efficient analysis techniques large routines 
section introduce sparse representation discuss implementation 
section consider asymptotic complexity sparse representation compare costs versus supported arpa onr ibm 
authors address department computer science rice university houston texas 
sparse dense gamma members set member bit vector representation 
section discuss applications sparse representation context optimizer 
conclude review related brief summary 

set representation problems usually manipulate sets fixed size universe represent number elements universe variables program compiler temporaries routine 
convenience map elements integers gamma 
note restriction fixed size universe significant restricts sparse sets line algorithms page 
flexible alternatives available line algorithms necessarily efficient 
course bit vectors require fixed size universe 
sparse set representation components vectors elements long scalar records number members set 
illustrates example set single member 
scalar members delimits initialized portion dense vector 
initialized elements dense point members sparse vector point back dense 
values elements dense sparse unimportant initialized 
number member set satisfy conditions sparse members dense sparse code membership test look int member set unsigned int unsigned int sparse return members dense simplicity assume initial access sparse provoke bounds violation 
furthermore sparse vector unsigned integers comparison required prove 
variations possible pointers integer indices asymptotic complexity 
members set appear members dense clearing set requires setting members 
enumeration members forall accomplished iterating elements dense 
apply function foo member set loop members unsigned int member dense foo member adding member involves checking membership adding new element dense 
corresponding entry sparse point new dense entry 
void set unsigned int unsigned int sparse unsigned int members dense sparse dense members assuming final example consider code deleting member void set unsigned int unsigned int sparse unsigned int members dense unsigned int dense members dense sparse case check membership element dense overwrite deleted member dense 
link sparse updated point dense 

costs section discuss asymptotic space time complexity sparse sets 
additionally compare actual costs common set operations context sparse sets bit vector representation 
asymptotic complexity sparse set requires space regardless number members set 
implementations allocate bytes set storing bit indices vectors 
shown constant time implementations member add member delete member 
additionally clear set cardinality choose simple constant time implementations 
operations obvious implementations forall run time number operation bit vector sparse member add member delete member clear set choose cardinality forall copy compare union intersect difference complement table asymptotic time complexities members set union set intersection set difference set copy set equality 
set complement requires time rarely necessary existence efficient set difference 
comparisons bit vector representation table compares asymptotic time complexities set operations bit vector representation sparse set representation 
notice operation sparse sets bit vectors considered asymptotic costs safely choose sparse set bitvector representation application 
course relative costs different operations important particularly clear difference asymptotic complexities 
section explore actual costs operations sparse set bit vector representation 
costs bit vector operations straightforward determine depend data 
sparse sets costs operations depend data state uninitialized portion sparse 
example ibm rs cost performing member operation bit vector cycles 
hand cost performing member sparse set cycles depending exact path taken conditional branches 
cycle counts simple operations add member requires cycles bit vectors cycles sparse sets 
delete member requires cycles bit vectors cycles sparse sets 
sparse set remaining constant time operations choose cardinality clear set inexpensive compared corresponding operations bit vector representation 
verify calculated costs performed experiment comparing performance operations representations 
representation measured time required delete member member operations 
time required operations sparse set cycle counts determined examining output ibm compiler rs ignoring possibility cache misses 
bit vector sparse size total time average cost total time average cost ratio seconds cycles seconds cycles seconds cycles seconds cycles seconds cycles seconds cycles table relative operation timings data dependent performed operations sequence random data 
test framework shown set size set rand size set rand size void member set rand size rand unix system call returning integers range gamma 
factor overhead subtracted time required loop calls dummy set routines 
help show effect cache misses performed experiment different universe sizes elements 
tests run ibm rs model kbyte data cache mhz clock hz timer 
test repeated times results averaged 
table summarizes results tests 
earlier comparisons suggested simple operations bit vector representation times faster sparse representation 
experimental results confirm comparisons 
surprisingly results show operations sparse representation severely affected cache misses particularly large universes 
compared costs complex operations set union set intersection 
bit vector operations require time corresponding sparse set operations require time 
expect tradeoff representations depend density sets value versus constant factors implied implementations 
considered operations detail set copy copying entire set requires du cycles bit vectors cycles sparse set representation 
set union address union requires du cycles bit vectors 
sparse set requires cycles startup plus cycles member comparing requirements set copy suggests sparse set faster 
set union expect tradeoff point range 
course costs machine dependent particular depend heavily bit word rs 
longer word lengths favor bit vector representations 
obvious reason bit vector operations require average cycles expected cycles 
rs complex superscalar implementation rely compiler estimates structural interlocks 
compiler estimates flawed due lack interprocedural information 
performed tests verify comparisons 
measured time perform operation bit vectors universe size elements 
times independent data set effort initialize operands 
second measured time required perform operations sparse sets universe size 
sparse sets initialized random elements number elements varied 
set copy copying bit vector required versus prediction cycle difference 
measured cost copying sparse set varied linearly empty set set members versus predicted cost difference cycles 
breakeven point occurred set containing members compared predicted 
set union bit vector union required versus prediction difference cycles 
time required sparse union varied linearly empty set set members suggesting cost approximately cycles member 
breakeven point occurred set containing members corresponding density 

applications sparse set representation widely applicable 
section study motivating example greater depth experimental comparison implementations 
describe briefly successful applications sparse sets 
constructing interference graph original motivation efficiently constructing interference graph graph coloring register allocation 
interference graph construction algorithm sketched 
setting concerned operations involving set live 
block flow graph live live range lr liveout live find lr instruction reverse order copy instruction dst src live find dst defined live range def live range lr live graph lr find def defined live range def live find def referenced live range live find considering asymptotic complexities sparse representation suited application 
measured superiority bit vectors add member delete member operations suggest bit vector representation live prove competitive 
test possibility built versions chaitin allocator version bit vector representation live second version sparse representation live 
program doduc tomcatv fpppp routine tomcatv fpppp live ranges spilling clear set add member delete member forall avg 
length density time live ranges spilling clear set add member delete member forall avg 
length density time total construction time total allocation time table interference graph construction table summarizes results experiment 
tested allocators routines collected programs spec benchmark suite 
routines fpppp chosen known difficulties provoked size 
routine chosen relatively high ratio basic blocks instructions fpppp represents extreme single basic block 
remaining routines chosen representative smaller examples 
sets measurements routine set initial interference graph set interference graph constructed immediately round spilling 
measured total time spent constructing interference graphs total time spent register allocation 
tests conducted ibm rs model kbyte data cache mhz clock hz timer 
test repeated times results averaged 
times reported table seconds 
times bit vector version reported italics times sparse version shown sans serif 
timing results quite conclusive application sparse set representation faster bit vector representation 
phases shown analyzed detail improvement usually factor extreme case see factor 
produces factor improvement total amount time spent constructing interference graphs routine 
change total allocation time factor significant 
addition timings table contains variety data help illustrate behavior graph construction algorithm 
number live ranges indicates size universe set live 
entries clear set add member delete member indicate number times note interference graph constructed passes repeatedly refined coalescing measured pass 
operation invoked graph construction 
construction process invokes clear set basic block entries clear set correspond number basic blocks routine 
entries marked forall indicate definition points encountered indicate times line executed 
entries average length density show average number members live 
low average density shows bit vector version competitive 
naturally average length reduced spilling 
successful applications adding implementation sparse set representation toolbox discovered additional opportunities 
cases sparse sets provide asymptotically superior implementation choice cases simply offer convenient reuse unnecessary run time costs 
typical applications described 
ffl chaitin register allocator computation spill costs straightforward high level tricky implement 
version section walk backwards basic block maintaining set live ranges referenced death 
set requires operations member add member delete member clear set forall 
operation clear set especially important empty set death potentially instruction 
ffl actual coloring phase chaitin allocator divide nodes sets high low depending degree 
node edges removed graph neighbors may migrate high low 
low efficiently implemented singly linked list high doubly linked list sparse set representation just fast 
existing implementation sparse sets simpler implementation choice 
ffl placing oe functions construction minimal ssa boolean arrays cleared variable 
sparse sets simple arrays able clear sets constant time 
matter convenience represent worklist sparse set 
applications sparse sets discovered register allocation similar ideas passes optimizer including dead code elimination value numbering constant propagation partial redundancy elimination 

related problem designing specific set representations covered textbooks algorithms aho hopcroft ullman 
papers analyzing special representations specific problems common 
example westbrook tarjan analyze algorithms set union backtracking yellin considers problem providing constant time test set equality 
forall bit vectors considered bit word vector 
word non zero shifted bits word empty 
allocator allowed integer registers floating point registers 
average length spilling suggests interesting way compare effectiveness register allocators greater average number members live indicate efficient utilization machine register set 
presentation boolean arrays replaced integer arrays counter maintained avoid need reinitialize variable 
approach suggested solution problem posed aho hopcroft ullman 
similar problem solution bentley page 
idea boehm weiser support pointer identification conservative garbage collector 
interesting alternative approach implementation setl 
default setl representation uses hashing achieve constant expected time member add member delete member links support efficient forall 
hashed representation requires time initialize hash table set clear set copy 

summary programs designed terms understood abstractions sequences trees sets 
design complete programmer decide representation object choice representation guided relative frequency different operations tempered space considerations 
unfortunately programmers tend rely intuition developed experience consider new problem care deserves 
course part difficulty lies recognizing particular problem new 
case interference graph construction years carefully considered requirements live 
part difficulty lay lack adequate profiling difficult measure overhead loop program distracted cost adding edges graph 
computed liveout traditional bit vector techniques natural wrong bit vector routines implement live 
described representation suitable sets fixed size universe 
representation supports constant time implementations clear set member add member delete member cardinality choose 
efficiency operations new representation superior alternatives bit vectors balanced binary trees hash tables linked lists additionally new representation supports enumeration members time making competitive choice relatively sparse sets requiring operations forall set copy set union set difference 
rob brian west suggested improvements implementation 
editor referees keith cooper suggested ways improve presentation 
keith cooper ken kennedy supported years 
help interest 
aho hopcroft ullman design analysis computer algorithms 
addison wesley reading massachusetts 
bentley programming pearls 
addison wesley 
boehm weiser garbage collection uncooperative environment 
software practice experience sept 
briggs register allocation graph coloring 
phd thesis rice university apr 
briggs cooper torczon 
sigplan notices july 
proceedings acm sigplan conference programming language design implementation 
chaitin register allocation spilling graph coloring 
sigplan notices june 
proceedings acm sigplan symposium compiler construction 
chaitin auslander chandra cocke hopkins markstein register allocation coloring 
computer languages jan 
cytron ferrante rosen wegman zadeck efficient method computing static single assignment form 
conference record sixteenth annual acm symposium principles programming languages austin texas jan pp 

cytron ferrante rosen wegman zadeck efficiently computing static single assignment form control dependence graph 
acm trans 
program 
lang 
syst 
oct 
grand liu schwartz schonberg programming refinement exemplified setl representation sublanguage 
acm trans 
program 
lang 
syst 
july 
spec release sept 
standards performance evaluation 
westbrook tarjan amortized analysis algorithms set union backtracking 
siam comput 
feb 
yellin representing sets constant time equality testing 
tech 
rep rc ibm apr 
revised october 

