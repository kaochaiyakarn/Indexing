model checking programs willem visser riacs nasa ames research center field ca usa ptolemy arc nasa gov klaus havelund qss nasa ames research center field ca usa havelund ptolemy arc nasa gov guillaume brat kestrel nasa ames research center field ca usa brat ptolemy arc nasa gov park riacs nasa ames research center field ca usa spark ptolemy arc nasa gov majority carried formal methods community decades reasons devoted special languages designed easier experiment mechanized formal methods theorem provers model checkers 
attempt give convincing arguments believe time formal methods community shift attention analysis programs written modern programming languages 
keeping philosophy developed verification testing environment java java pathfinder jpf integrates model checking program analysis testing 
part consisted building new java virtual machine interprets java bytecode 
jpf uses state compression handle big states partial order reduction slicing abstraction runtime analysis techniques reduce state space 
jpf applied real time avionics operating system developed honeywell illustrating intricate error model spacecraft controller illustrating combination abstraction runtime analysis slicing model checking 
majority carried formal methods community decades hoare axiomatic method proving programs correct devoted special languages differ main stream programming languages 
typical examples formal specification languages purely logic languages theorem provers guarded command languages model checkers 
cases modeling languages designed resemble programming languages focus protocol designs 
linguistic choices feasible conveniently experiment new algorithms frameworks analyzing system models 
example logic language suited rewriting rule guarded command notation convenient model checker 
believe continued research special languages important research investigates semantically clean language concepts impact language designs analysis algorithms 
want argue important step formal methods subgroup software engineering community focus attention real programs written modern programming languages 
believe studying programming languages result new challenges drive research new directions described part 
main interest multi threaded interactive programs unpredictable interleavings cause errors argument extends sequential programs 
second part describe effort follow vision presenting development verification analysis testing environment java called java pathfinder jpf 
environment combines model checking techniques techniques dealing large infinite state spaces 
techniques include static analysis supporting partial order reduction set transitions explored model checker predicate abstraction abstracting state space runtime analysis race condition detection lock order analysis pinpoint potentially problematic code fragments 
part consisted building new java virtual machine jvm jpf interprets java bytecode 
jvm jpf called model checking engine interpret bytecode generated java compiler 
believe attractive idea develop verification environment java reasons 
java modern language featuring important concepts object orientation multi threading language 
languages example support multi threading part core 
second java simple example compared 
third java compiled bytecode analysis done bytecode level 
implies tool applied language translated bytecode bytecode furthermore convenient breakdown java easily manageable bytecode instructions eased construction analysis tool 
jpf second generation java model checker developed nasa ames 
generation jpf jpf translator java promela language spin model checker :10.1.1.29.7274
organized follows 
section outlines arguments applying formal methods programs 
section describes jpf 
section presents applications jpf real time avionics operating system developed honeywell illustrating intricate error model space craft controller illustrating combination abstraction runtime analysis slicing model checking locate deadlock 
errors errors real code systems 
section contains description 
analyze code 
argued verification technologies applied designs programs catching errors early design level reduce maintenance costs 
agree catching errors early crucial 
state art formal methods naturally lend designs simply due fact designs complexity formal analysis feasible practical 
design verification important research topic popular subject analysis statecharts example uml 
want argue formal methods community put attention programs number reasons describe 
programs contain fatal errors spite existence careful designs 
deadlocks critical section violations example introduced level detail designs typically deal formal designs 
example demonstrated example exist translators eiffel ada ocaml scheme prolog bytecode 
analysis nasa remote agent spacecraft control system written lisp programming language analyzed spin model checker 
classical multi threading errors really design errors programming mistakes forgetting enclose code critical sections 
missing critical section errors spin introduced sibling module caused real deadlock flight space miles earth see section 
way describing relationship design code distinguish kinds errors 
hand errors caused flaws underlying complex algorithms 
examples complex algorithms parallel systems communication protocols garbage collection algorithms 
kind errors simple minded concurrency programming errors forgetting put code critical section causing deadlocks 
kind errors typically caught design real hazard particular safety critical systems 
complex algorithms probably analyzed design level reason designs expressed modern programming language 
shown real example section deep design errors appear code 
second argue modern programming languages result decades research result language design principles 
may design modeling languages 
extent applied idea uml statechart transitions control states annotated code fragments favorite programming language 
fact distinction design program gets blurred final code may get generated uml designs 
additional observation program development methods suggest prototyping approach system incrementally constructed real programming language derived design 
example case remote agent mentioned 
furthermore research result programming languages benefit design verification designs typically complex 
third different kind argument studying verification real programs research force community deal hard problems may drive research new areas 
believe example advantageous formal methods combined research fields traditionally focused programs program analysis testing 
techniques typically complete scale better 
believe objective formal methods prove programs correct debug programs locate errors 
lim ambition may able apply techniques complete heuristics certain testing techniques 
fourth studying formal methods programming languages may furthermore derived advantages formal methods community due fact tendency standardize programming languages 
may feasible compare integrate different tools working language clean subsets languages 
mentioned useful study relationship formal methods areas program analysis testing techniques 
working level programs possible better interact communities 
experience informal collaboration kansas state university tool generated slicing criteria runtime analysis tool slice java program criteria apply model checker resulting program 
final derived advantage orders magnitude increased access real examples users may want experiment techniques produced 
may important impact driving research scalable solutions 
general hope formal methods play role everyday software developers 
focusing real programming languages hope community able interact intensively solving common problems 
furthermore technology transfer problem mentioned may vanish replaced technology demand 
model checking java programs known concurrent programs non trivial construct java essentially giving capability writing concurrent programs believe model checker java bright 
fact area believe immediate impact environments java taught 
rest section address important issues model checking programming languages 
specifically highlight major reasons model checking programs considered hard illustrate tackle problems jpf 
complexity language constructs input languages model checkers kept relatively simple allow efficient processing model checking 
course exceptions example promela input notation spin resembles programming language modeling language 
general programming languages contain new features seen model checking input languages example classes dynamic memory allocation exceptions floating point numbers method calls treated 
solutions currently pursued different groups trying model check java translate new features existing ones create model checker handle new features combination translation new extended model checker 
translation version jpf system translation java promela 
systems successful model checking interesting java programs source translations suffer serious drawbacks language coverage language feature source language counterpart destination language 
true java promela promela example support floating point numbers 
source required order translate source original source required case java bytecodes available example case libraries code loaded www 
java requirement source exists overcome doing translation bytecodes 
approach bandera tool bytecodes manipulation translated promela smv model checker input notation 
custom model checker order overcome language coverage problem obvious current model checkers need extended new custom model checker developed 
done extending spin model checker handle dynamic memory allocation terms java covers part language required full java language coverage achieved way 
jpf took route developed model checker execute bytecode instructions allow java model checked 
model checker consists java virtual machine jvm jpf executes bytecodes search component guides execution 
note model checker explicit state model checker similar spin symbolic binary decision diagrams smv 
nice side effect developing model checker ease able extend model checker interesting new search algorithms general easy achieve existing model checkers especially spin 
major design decision jpf modular understandable possible sacrificed speed process spin order magnitude faster jpf 
believe price worth paying long run 
jpf written java uses package manipulate classfiles 
sacrifice speed extend doubt minds doing jpf java saved months development time 
initial system handle integer bytecodes language subset java model checkers translating spin developed man months 
system described required approximately man months 
current model checker check deadlocks invariants user defined assertions code temporal logic model checking added near complex states order ensure termination explicit state model checking know state revisited 
common hashtable store states means efficient hash function required fast state comparison 
verisoft system developed model check software design premise state software system complex encoded efficiently verisoft store states visits verisoft limits depth search get termination problem mentioned 
verisoft system executes actual code little control execution user defined hooks communication statements impossible encode system state efficiently 
insight convinced tie model checking algorithm existing jvm general highly optimized speed allow memory encoded easily 
design philosophy keep states jvm complex data structure allow encode states efficient fashion order determine visited states 
specifically state consists components information thread java program static variables classes dynamic variables objects system 
information thread consists stack frames method called static dynamic www inf fu berlin de dahm information consists information locks classes objects fields classes objects 
components mentioned java data structure 
early stages jpf development store structures directly hashtable terrible results terms memory speed mb exhausted storing sigma states sigma states evaluated second sparc ultra 
solution adopted storing states efficient generalization collapse method spin component jvm state stored separately table index component stored represent component 
specifically component example fields class object stored table component specific component table index returned unique stored open slot index returned 
effect encoding large structure integer collapsing states fashion allows fast state comparisons indexes need compared structures 
philosophy collapsing scheme states visited program underlying components states 
somewhat trivial example statement updates local variable method part system changed frame representing method parts system state unaffected collapse indexes 
simple optimization added update part system changes keep indexes calculated previous state calculate changed date done optimization parts system 
currently system store millions states mb evaluates states second depending size state sparc ultra 
jpf current state illustrates software systems complex states efficiently analyzed see section extensions better hardware platforms run believe systems lines code analyzed 
state explosion challenging part model checking reducing size state space tool handle 
designs contain detail implementations model checking thought technique best applied designs implementations 
believe applying model checking tables implemented hashtables cases index object integer value 
programs scale programs lines 
avenue pursuing augment model checking information gathered techniques order handle large programs 
specifically investigating interpretation static analysis runtime analysis allow efficient model checking java programs 
abstraction abstraction algorithms theory interpretation received attention model checking community :10.1.1.48.2623:10.1.1.48.4077
basic idea underlying user specifies abstraction function certain parts system model checking system decision procedures automatically generates fly model checking state graph data automatically generates system manipulates data model checked 
trade techniques generation state graph precise price calling decision procedures model checking process generation system requires decision procedures called proportional size program 
experience abstractions defined small parts program class small group classes favor generation programs thefly generation state graphs 
unclear state graph approach scale systems states due time overhead incurred calling decision procedures 
specifically developed abstraction tool java takes input java program annotated user defined predicates stanford validity checker svc generates java program operates predicates 
example program contains statement interested abstracting predicate written increment statement abstracted code false verify method indicates nondeterministic choice 
bandera tool uses similar techniques say integer variable java positive negative zero called sign abstraction pvs model checker 
novelty approach lies fact predicates class example class field class field specify predicate 
abstracted code allows instantiations objects class handled correctly interested reader referred details techniques 
java abstraction tool development encouraging results 
example matter seconds omnipresent infinite state bakery algorithm written java finite state checked exhaustively 
section show abstraction tool real example 
static analysis static analysis technique areas software engineering achieve reduction program size 
comparatively activity reduce size systems model checking 
specifically noticed slicing useful way reducing program size allow efficient model checking 
best exponent slicing reduce java programs model checking bandera tool variables occurring ltl formula slicing criteria 
believe interesting avenue research currently process interfacing jpf bandera tool 
jpf currently static analysis techniques determine java statements thread independent statements threads execute concurrently 
information guide partial order reductions built jpf 
partial order reduction techniques ensure interleaving independent statements executed model checker 
established experience spin model checker partial order reductions achieve enormous state space reduction cases 
similar experience jpf switching partial order reductions caused model checking runs ran hours finish minutes 
believe model checking java programs tractable general partial order reductions supported model checker order calculate independence relations required implement reductions static analysis required 
runtime analysis runtime analysis conceptually idea executing program observing generated execution trace extract various kinds information 
information predict different execution traces may violate properties interest addition course demonstrate generated trace violates properties 
note generated execution trace violate properties order potential violation traces detected 
algorithms typically guarantee errors arbitrary trace 
may yield false positives 
attractive algorithms scale catch problems designed catch 
practice runtime analysis algorithms store entire execution trace maintain selected information past analysis information fly program termination 
example data race detection algorithm eraser developed compaq :10.1.1.161.222
example locking order analysis called developed 
algorithms implemented jpf 
describe algorithms describe integrated jpf run stand integrated model checking reduce state space 
eraser algorithm detects data races 
data race occurs concurrent threads access shared variable access write threads explicit mechanism prevent accesses simultaneous 
program data race free variable nonempty set locks threads access variable 
eraser algorithm works maintaining variable set locks active threads access variable 
furthermore thread maintained set locks taken time 
thread accesses variable set refined intersection access just assigns race condition may potential empty 
algorithm described relaxed allow variables initialized locks read threads locks writes :10.1.1.161.222
algorithm looks potential deadlocks detecting differences order threads take locks 
classical deadlock situation defined thread accessing locks order thread accesses reverse order 
deadlock may occur takes takes threads continue 
define deadlock limited way program deadlock free locks accessed order 
algorithm searches violation ordering locks 
maintains tree lock orders thread compares trees execution 
contrast eraser algorithm analysis fly 
runtime analysis modes jpf 
stand simulation mode 
second runtime analysis guide model checker 
experiments eraser module jpf generates called race window consisting threads involved race condition 
model checker launched focusing race window forcing scheduler pick threads window threads 
near plan perform runtime analysis model checking 
applications jpf tools section describe application jpf related tools real world examples 
model spacecraft controller section illustrate jpf find errors introduced coding phase design 
example illustrates different techniques jpf combined 
second example real time operating system section subtle error time partitioning threads fact example error introduced design discovered design due lack detail 
remote agent spacecraft controller remote agent ra ai spacecraft controller developed nasa ames research center 
consists components planner generates plans mission goals executive executes plans recovery system monitors ra status suggests recovery actions case failures 
executive contains features multi threaded operating system planner executive exchange messages interactive manner 
system highly vulnerable multi threading errors 
fact real flight may ra deadlocked space causing ground crew put spacecraft standby 
ground crew located error data spacecraft asked challenge group locate error model checking 
resulted effort described shall shortly describe 
basically identified error combination code review abstraction model checking jpf generation java pathfinder 
code review got suspicion error resembled discovered spin model checker flight 
modeling focused code suspicion containing error 
describe abstraction process abstraction tool works new generation jpf 
major components modeled events tasks illustrated 
shows java class event event objects instantiated 
class local counter variable synchronized methods waiting event signaling event releasing threads having called wait event 
order catch events occur tasks executing event associated event counter increased event signaled 
task calls wait event case counter changed new events restarted call wait event 
shows definition tasks 
task activity defined run method class planner extends thread class built java class supports thread primitives 
body run method contains infinite loop iteration conditional call wait event executed 
condition new events arrived event counter unchanged 
class event int count public synchronized void wait event try wait catch public synchronized void signal event count count notifyall class planner extends thread event event event int count public void run count event count true count event count event wait event count event count generate plan event signal event 
rax error java shown program theoretically infinitely reachable states due repeated increment count variable events 
abstraction remove count variables specifying remove count classes event planner 
place variables declare abstraction predicates corresponding predicates program involve count variables 
instance put eq count event count definition planner class 
having annotated program abstraction declarations abstraction tool applied new abstracted program generated 
jpf reveals deadlock abstracted program 
error trace shows planner evaluates test count event count evaluates true call event wait event executive signals event increasing event counter notifying waiting threads 
planner unconditionally waits misses signal 
solution problem enclose conditional wait critical section events occur test wait 
fact pattern occurred places places critical section 
simply omission 
java model happened board spacecraft created suspicion source error obtained code review 
suspicion created fact pattern cause errors different part ra pre flight effort spin model checker years 
source error missing critical section automatically eraser data detection algorithm 
variable count class event accessed unsynchronized planner run method line count event count specifically expression event count 
signal event called executive increase variable synchronized condition planner executed signal 
may cause data race count variable accessed simultaneously planner executive 
running jpf eraser mode detects race condition immediately 
locate error see consequences 
jpf model checker hand analyze consequences 
illustrate jpf integration runtime analysis model checking example slightly realistic adding extra threads java program resemble real system 
new program states 
applied jpf special runtime analysis model checking mode 
immediately identified race condition eraser algorithm launched model checker thread window consisting threads involved race condition planner executive locating deadlock seconds 
additional experiment collaboration designers bandera tool fed part result race detection variable accessed unprotected bandera slicing tool turn created program slice code irrelevant value counter removed 
jpf deadlock sliced program 
illustrates philosophy integrating techniques different disciplines abstraction turn infinite program finite runtime analysis pinpoint problematic code slicing reduce program model checker launched analyze result 
deos avionics operating system deos real time operating system developed honeywell business aircraft written 
manual analysis code developers noticed subtle error system testing picked 
relating error slice original code contained error handed nasa ames goal see model checker find error 
error subsequently translation code promela 
full account verification exercise 
slice deos fairly large sigma lines error subtle candidate validate philosophy model checking code directly 
step code translated java straight forward original code contained little pointer arithmetic resulted java classes containing approximately lines code 
deos system put parallel nondeterministic environment order model checking 
luckily environment created promela model re translation java large extent 
added classes system combined total lines java code making far largest example terms lines code attempted jpf 
change required java version model checking create invariant show error occurred promela version ltl formula current system support 
invariant fairly complex lines java created developers deos system 
spin version started limiting search depth model checker original system infinitely states 
initial runs discouraging error running system hours 
partial order reductions switched error instantly 
fact faster spin error promela java versions identical read result example order nondeterministic choices different 
promela version large parts system executed atomic steps 
promela version applied predicate abstraction hand reduce system finitely states step java abstraction tool automatically current version tool handle abstraction predicates arrays requirement case 
part argued formal methods subgroup software engineering community devote efforts analysis systems described real programming languages just special purpose notations 
second part described applied philosophy analysis java programs 
specifically showed model checking applied java programs hampered perceived problems cited reasons model checking source code 
process showed augmenting model checking interpretation static analysis runtime analysis lead efficient analysis complex java software 
combination techniques new best knowledge automatic predicate abstraction different classes static analysis support partial order reductions runtime analysis support model checking novel contributions 
drawing different techniques synergy techniques clear areas research exists 
obvious extensions improvements different algorithms areas feel crucial success applying model checking java source code 
firstly need develop methods assist construction environments suitable model checking currently users model checker construct environment models hand believe automation required non experts java model checker 
secondly naive believe model checking capable analyzing programs lines cases measure system checked 
software testing measure coverage measure currently investigating means calculate typical coverage measures example branch coverage method coverage condition decision coverage model checking jpf 
barrett dill levitt 
validity checking combinations theories equality 
fmcad volume lncs november 
jones editors 
formal specification software development 
prentice hall international 
booch rumbaugh jacobson 
unified modeling language user guide 
addison wesley 
clarke fujita rajan reps shankar teitelbaum 
program slicing hardware description languages 
bad germany 
colon uribe 
generating finite state abstractions reactive systems decision procedures 
cav volume lncs july 
corbett dwyer hatcliff pasareanu robby laubach zheng 
bandera extracting finitestate models java source code 
proc 
nd int 
conf 
software engineering ireland june 
acm press 
cornes courant huet paulin mohring munoz murthy parent werner 
coq proof assistant manual version 
technical report inria rocquencourt france february 
cousot cousot 
interpretation frameworks 
journal logic computation august 
das dill park 
experience predicate abstraction 
cav volume lncs 
iosif 
deadlock detection tool concurrent java programs 
software practice experience july 
iosif 
dspin dynamic extension spin 
proc 
th spin workshop volume lncs 
godefroid 
model checking programming languages verisoft 
proc 
th acm symposium principles programming languages pages paris january 
gordon 
hol proof generating system higher order logic 
vlsi specification verification synthesis 
kluwer dordrecht netherlands 
graf saidi 
construction state graphs pvs 
cav volume lncs 
harel 
statecharts visual formalism complex systems 
science computer programming 
havelund 
java pathfinder translator java promela 
proc 
th th spin workshops volume lncs september 
havelund 
mechanical verification garbage collector 
number lncs april 
san juan puerto rico 
havelund lowry park penix visser white 
formal analysis remote agent flight 
proc 
th nasa langley formal methods workshop june 
havelund lowry penix 
formal analysis space craft controller spin 
proc 
th spin workshop paris france november 
appear ieee transactions software engineering 
havelund 
model checking java programs java pathfinder 
int 
journal software tools technology transfer april 
special issue selected papers spin workshop 
havelund shankar 
experiments theorem proving model checking protocol verification 
fme volume lncs 
havelund 
practical application model checking software verification 
proc 
th th spin workshops volume lncs 
sellink vaandrager 
proof checking data link protocol 
technical report cs cwi march 
hoare 
axiomatic basis computer programming 
comm 
acm 
holzmann 
state compression spin 
proc 
rd spin workshop enschede netherlands april 
holzmann 
model checker spin 
ieee trans 
software engineering may 
special issue formal methods software practice 
holzmann peled 
improvement formal verification 
forte berne switzerland october 
larsen pettersson yi 
uppaal nutshell 
int 
journal software tools technology transfer dec 
mcmillan 
symbolic model checking 
kluwer 
melton dill ip stern 
murphi annotated manual release 
technical report stanford university palo alto california usa july 
teitelbaum 
slicing promela application model checking simulation protocol understanding 
proc 
th spin workshop 
muscettola nayak pell williams 
remote agent boldly go ai system gone 
artificial intelligence august 
owre rajan rushby shankar srivas 
pvs combining specification proof checking model checking 
cav number lncs new brunswick nj july august 
penix visser larson 
verification time partitioning deos scheduler kernel 
proc 
nd int 
conf 
software engineering ireland june 
acm press 

mechanically verified incremental garbage collector 
formal aspects computing 
saidi 
modular incremental analysis concurrent software systems 
th ieee int 
conference automated software engineering october 
shankar 
model check prove 
cav volume lncs july 
savage burrows nelson sobalvarro :10.1.1.161.222
eraser dynamic data race detector multithreaded programs 
acm transactions computer systems november 
spivey 
notation manual nd edition 
prentice hall int 
series computer science 
raise language group 
raise specification language 
bcs practitioners series prentice hall 
tip 
survey program slicing techniques 
journal programming languages 
visser havelund penix 
adding active objects spin 
proc 
th spin workshop trento italy july 
visser park penix 
predicate abstraction reduce object oriented programs model checking 
proc 
rd acm sigsoft workshop formal methods software practice august 
