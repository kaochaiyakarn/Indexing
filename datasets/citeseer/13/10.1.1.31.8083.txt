axiomatic model dynamic schema evolution objectbase systems randal peters university manitoba tamer ozsu university alberta schema database system consists constructs model entities data 
schema evolution timely change schema consistent management changes 
dynamic schema evolution dse management schema changes database management system operation 
dse necessary facility objectbase systems obss volatile application domains obss support 
propose complete axiomatic model dse obss object oriented computing subtyping property inheritance 
model infer schema relationships identified input sets associated type called essential supertypes essential properties 
sets typically specified schema designers automatically supplied obs 
inference mechanism performed model proven termination 
axiomatic model formal treatment dse obss distinguishes approaches informally define number schema invariants rules enforce 
informal approach leads multiple dse mechanisms differences object models choices system designers 
lack common object model comparison obss difficult 
axiomatic model provides solution dse obss serving common formal underlying foundation describing dse existing systems comparison systems easier 
design space obss inclusion axioms classify compare differentiate features obss 
test expressibility model dse obss reduced axiomatic model compared 
categories subject descriptors database management logical design schema subschema general terms algorithms design management theory additional key words phrases dynamic schema evolution object database management systems 
object oriented computing emerging predominant technology providing database services advanced application domains engineering design cad cam systems multimedia medical imaging geo information systems name 
important characteristic applications schema changes frequently dynamically 
example engineering design application components design go modifications final product design produced 
kinds changes require modifications way data components research supported natural science engineering research council nserc canada operating ogp ogp 
performed part author ph dissertation university alberta 
authors addresses randal peters department computer science university manitoba manitoba canada email randal cs ca tamer ozsu department computing science university alberta edmonton alberta canada email ozsu cs ualberta ca delta randal peters tamer ozsu modeled changes schema 
furthermore evolutionary characteristic applications require sophisticated mechanisms managing changes schema ensuring consistency system 
mechanisms constitute dynamic schema evolution component database management systems 
schema meta information objectbase system obs information describes structure operations object instances stored objectbase managed objectbase management system 
example types classes object model properties attributes methods behaviors form schema obs 
dynamic schema evolution dse process applying changes schema consistent fashion propagating changes object instances obs operation 
majority published approaches dse informally define number invariants specify set rules maintaining 
invariants describe constraints schema relationships schema elements rules define procedures enforce invariants 
orion banerjee example defines invariants twelve rules 
systems differ number semantics invariants rules define 
lack formal basis management dse ad hoc comparing different approaches difficult 
propose sound complete axiomatic model dse obss 
main benefit model formalization dse characteristics welldefined set axioms 
axioms automatically maintain complex schema relationships properties input sets associated type schema 
elements sets provided user schema designer system combination sources 
set called essential supertypes contains types maintained supertypes type long consistently possible 
set called essential properties contains properties maintained type long consistently possible 
correct properties relationships schema automatically derived axiomatic model essential supertypes essential properties basis 
derivations performed axiomatic model proven soundness completeness termination 
inclusion exclusion axioms model leads design space categorizes obss object type object oriented systems 
category refined distinct subcategories vary functionality expressiveness 
illustrate power practical usefulness model dse operations existing obss reduced axiomatic model compared common framework 
years researchers addressed problem defining dse policies obss 
studies approach issue perspective individual systems 
axiomatic model unique respect captures formalizes salient features dse obss adopted common underlying foundation individual systems 
order clarify illustrate expressiveness axiomatic model dse policies tigukat obs ozsu peters example 
dse tigukat reduced axiomatic model compared axiomatization orion 
tigukat developed laboratory database systems research tigukat tee goo kat term language canadian people meaning objects 
canadian commonly known native peoples canada ancestry originating arctic regions country 
axiomatic model dynamic schema evolution objectbase systems delta university alberta 
complementary research prototyping efforts addressing dynamic schema evolution view management advanced database systems laboratory university manitoba 
identifying characteristic tigukat uniform extensible object model capable services single underlying framework 
keeping tigukat modeling capability dse policies defined uniform extensions base system 
schema changes advocated tigukat similar orion vary deal complete model uniformity fully supported orion 
main contributions follows introduces axiomatic model dse obss benefits model formal specification dse obss model proven soundness completeness termination derivations performed model powerful express dse existing obss model practice serving common foundation characterizing comparing dse various systems 
develops design space obss inclusion exclusion axioms 
presents uniform extensible dse policies tigukat obs 
formalizes compares dse policies tigukat orion reduction axiomatic model 
remainder organized follows 
axiomatic model dse obss defined section proofs soundness completeness termination 
design space obss inclusion exclusion axioms section 
overview tigukat object model definition dse tigukat terms axiomatic model section 
reduction orion axiomatic model section comparison axiomatization tigukat orion 
related discussed section particular focus systems propagate schema changes object instances 
section contains concluding remarks discussion 

axiomatic model dse typical schema changes obs include adding dropping types adding dropping sub supertype relationships types adding dropping properties type 
fairly extensive classification widely accepted schema changes part orion banerjee 
typical schema change affect aspects system 
fundamental problems consider semantics change refers effects schema change way system organizes information effects schema change propagation refers method propagating schema change underlying objects existing instances 
problem basic approach define number invariants satisfied schema define rules procedures maintaining invariants possible schema change 
invariants rules ensuring compliance depend underlying object model 
object models differ dse delta randal peters tamer ozsu policies various systems approach differ 
furthermore lack formal semantics systems difficult compare 
axiomatic model captures underlying mechanism dse powerful describe semantics change various systems compared 
second problem solution explicitly coerce objects coincide new definition schema 
technique updates affected objects changing representation dictated new schema 
versioning mechanism conjunction coercion old object representations lost 
screening conversion filtering techniques defining coercion takes place 
scope limited specification axiomatic model semantics change 
handling change propagation various systems discussed section 
section formal axiomatic model dse obss deal semantics change problem 
followed proofs model termination soundness completeness 
axiomatization schema changes type object model called class models defines properties objects 
existing systems attributes methods behaviors represent properties 
term property generically encompassing 
types templates creating objects 
set objects created particular type called extent type 
type denote construct defines object properties class denote type extent 
subtyping facility object models allows types built incrementally types 
represent reflexive transitive antisymmetric subtype relationship means type subtype type equivalently supertype diagrammatically directed arrow subtype tail supertype head represent subtype relationship diagram 
subtype inherits properties supertype define additional properties exist supertype 
subtype multiple supertypes inherits properties supertypes 
known multiple inheritance results graph subtype relationships 
type lattice simply lattice ht consists set types partial order elements subtype relationship 
term lattice semi lattice commonly object oriented literature denote typing structure supports multiple inheritance 
meaning correspond lattice strict mathematical sense notions upper greatest lower bound relaxed term understanding object oriented meaning applies 
type lattice represented directed acyclic graph types vertices subtype relationships directed edges 
notation axiomatic model shown table terms denote various arrangements types properties represented virtually object model 
address terms simple example type lattice clarify semantics 
example kept simple functionality axiomatic model easily understood 
apparent discussion model scales type lattices complex prefix indicates type 
axiomatic model dynamic schema evolution objectbase systems delta application environments mentioned 
term description set types system 
type lattice system 
type elements immediate supertypes type pe essential supertypes type pl supertypes type supertype lattice type native properties type inherited properties type ne essential properties type interface type ff apply operation 
table notation axiomatic model 
set types represents types system dse operations performed 
set consisting types shown forms example 
type lattice formed set subtype relationships maintained immediate supertypes types immediate supertypes type types reached transitively type 
words link direct subtype relationship 
object person student employee null fig 

simple type lattice 
definition 
immediate supertype distinct types immediate supertype equivalently immediate subtype exist gamma fs tg example immediate supertypes student employee 
ft student 
supertypes person object reached transitively student employee 
essential supertypes types identified essential construction existence type essential supertypes maintained supertypes long consistently possible evolution schema 
way delta randal peters tamer ozsu break link essential supertype explicitly remove dropping subtype relationship dropping entirely 
note means immediate supertypes essential 
obs impose constraints force newly created type subtype certain system primitive types 
words primitive types essential supertypes type 
example tigukat defines primitive root type object supertype types directly transitively type 
creation new type system initialize ft 
orion defines primitive root type object operate similarly 
addition system supplied types schema designer provide elements represent essential inheritance constructs particular application domain 
typical environment system provide essential supertypes known constraints schema designer provide essential supertypes expertise particular application domain modeled 
assume system provides root type object assume schema designer specified remaining essential supertypes ft student employee person student employee dropped immediate supertypes person established immediate supertype essential 
lost supertype declared essential 
supertype lattice hpl type consists set pl includes supertypes immediate essential partial order pl definition 
supertype lattice types type supertype lattice types set types pl defined pl fs sg 
example employee supertype lattice types pl employee ft employee person native properties type properties defined supertypes inherited supertype natively defined note native properties type may defined types subtype relationship type 
example type employee may native salary property defined supertypes 
person may native name properties defined subtype relationship 
common properties inherited multiple supertypes employee inherits name property person conflict arise form conflict resolution performed 
consider conflict resolution levels behavioral functional 
behavioral resolution resolves conflicts semantics properties 
accepted semantic specification properties notion semantic equivalence behavioral resolution fairly simple support 
example semantics name person equivalent semantics name employee match semantics 
effect conflict name behavioral level semantics name equivalent places appears 
axiomatic model dynamic schema evolution objectbase systems delta currently widely notion property semantics signatures 
general signature consists name list argument types result type 
name apply property object sending message object list arguments 
result corresponds result type signature 
approaches variance contra variance identify semantic equivalence 
behavioral resolution relies acceptable semantic specification properties defined fairly simple support 
signatures provide step semantic specification general inadequate applications 
reasonably sufficient semantics type properties open research problem 
functional resolution resolves conflicts implementations property semantics 
semantics property implemented type defines 
implementation form stored attributes computed methods 
single semantic property may implemented differently types defined 
example name may implemented length encoded string person null terminated string 
furthermore age property person may implemented stored attribute type computed method 
name age semantically equivalent types implemented differently 
case implementation name age employee clear 
typical choices select implementation person implementation completely redefine implementation 
focus dse semantic behavioral level implementation functional level discuss functional conflict resolution techniques 
purposes assume functional conflict occurs schema designer asked resolve choosing implementation list conflicting ones redefining implementation entirely 
inherited properties type union properties defined supertypes native inherited properties disjoint 
example inherited properties employee union properties defined person object 
contrast native properties employee defined employee defined person object 
essential properties properties identified essential construction existence type essential properties maintained part definition long consistently possible evolution schema 
essential properties type consist properties natively defined type may contain properties inherited supertypes 
schema designer expertise understand properties types particular application domain support declare properties essential types including specification type additionally system may require types support various primitive properties object instances object identity retrieval object equality 
type creation time system initialize appropriate primitive properties 
synergy schema designer system primitives goes hand hand definition essential properties essential supertypes 
schema evolution essential property specifications may require inherited properties type adopted native properties supertype defining properties natively removed 
example assume property defined declared essential employee 
property inherited employee delta randal peters tamer ozsu deleted property adopted employee native property 
derivations axioms automatically adjustments type lattice 
interface type union native inherited properties term simply serves specification properties object instances respond 
table ii depicts axioms dse various types properties table derivation various sets axioms terms 
dse operations handled terms eases burden schema designer system manageable 
effects schema changes subtyping relationships property inheritance closely scrutinized order maintain system integrity intentions schema designer 
axiomatic model provides consistent automatic mechanism deriving entire type lattice structure change 
changes components fundamental evolution schema 
axiomatic model flexibility handle variations type property arrangements depending defaults imposed individual systems 
results powerful model describe dse obss support subtyping property inheritance 
specification management shared responsibility system user 
example new type defined system may open dialog schema designer determine supertypes properties essential new type 
alternatively system may default assumption supertypes properties including inherited properties essential type immediate ones essential 
current systems vary semantics defined notions subtyping inheritance nativeness 
formalization concepts gives common basis allows systems flexibility build customized notions top remaining rooted formal model 
combination user system managed control effective 
example system may assume initial supertypes properties defined type essential 
default inherited properties assumed essential 
schema designer may evolve schema adding dropping properties adding dropping subtype relationships 
operations noted essential properties types 
operations may fulfilled inheritance links may 
example defining inherited property type include property include furthermore adding subtype relationship types includes added supertype pl 
way maintains minimum properties defined maintains minimum supertypes minimality beneficial efficiency system 
assume availability apply operation axiomatic model 
operation denoted ff applies unary function elements set types function defined single variable shown subscript ff operator 
variables appearing parenthesis ff operation substituted values prior execution remain constant apply operation 
semantics apply range elements type axiomatic model dynamic schema evolution objectbase systems delta bound evaluated answer included final result set 
empty empty set returned 
functional notation ff operation applies lambda function element returns set containing results 
axiom closure pe axiom acyclicity ff pl axiom 
pl pe 
axiom 
pl 
axiom supertypes pe gamma ff pl pe gamma fxg pe axiom supertype lattice pl ff pl ftg axiom interface axiom nativeness ne gamma axiom inheritance ff table ii 
axiomatization subtyping property inheritance dse obss 
table ii summarizes axiomatization subtyping property inheritance dse obss 
ff apply operation table returns set sets result 
union operator immediately preceding ff operator performs extended union members result set effect unnesting result single level set types 
define extended union empty set empty set 
axiom table ii discussed axiom closure 
types supertypes giving closure note root essential supertypes empty set proper subset axiom acyclicity 
cycles type lattice formed partial order 
axiom disallows element appearing supertype lattice types immediate supertypes form cycles 
axiom 
single type supertype types type called root defined type axiom relaxed case type lattice roots known forest 
axiom 
single type subtype types type called base defined type lattice said pointed 
axiom relaxed case lattice leaves 
axiom supertypes 
set immediate supertypes type exactly subset essential supertypes reached transitively type 
axiom provides means automatically instantiate immediate supertypes type essential supertypes type 
axiom supertype lattice 
supertype lattice type includes recursively types supertype lattices immediate supertypes 
axiom provides means automatically instantiate supertype lattice types type 
axiom interface 
interface type consists union native inherited properties type 
axiom provides means automatically instantiate interface type 
delta randal peters tamer ozsu axiom nativeness 
native properties type subset essential properties inherited 
axiom provides means automatically instantiate native properties type essential properties type 
axiom inheritance 
inherited properties type union interfaces immediate supertypes 
axiom provides means automatically instantiate inherited properties type 
simplifications axioms order reduce amount mutual recursion 
recall easily verified observing set difference operation axiom supertypes 
means contains information 
point types gamma supertypes type 
reachable transitively type 
significance point properties defined types gamma inherited type 
means contain property information 
declare safely substituted supertype lattices property inheritance concerned 
axioms expressed follows 
axiom acyclicity ff pl 
axiom supertype lattice pl ff pl ftg 
axiom inheritance ff furthermore substituting equation formula axiom reducing simpler equation derived 
derivation follows 
axiom interface gamma illustrate expressiveness axioms consider simple type lattice 
axioms satisfied lattice 
axiom holds object axiom holds null 
assume essential supertypes defined follows ft student person employee essential teaching assistant student person employee object essential tax source 
note teaching assistants tax sources inheritance employee 
separation teaching assistants cease employees removing subtype relationship automatically cease sources 
axiom instantiates immediate supertypes ft student 
student dropped new instantiation immediate supertypes include employee 
properties inherited student lost declared 
employee dropped essential supertype axiom instantiates ft immediate supertype 
properties employee lost declared essential properties 
axiomatic model dynamic schema evolution objectbase systems delta axiomatic model scales complex type lattices required geo information systems cad cam multimedia systems 
supported ability view type isolation decide essential supertypes properties model provides automatic derivation complete subtype property relationships 
termination soundness completeness section prove termination soundness completeness axioms 
termination guarantees axioms eventually complete derivations performed 
termination directly related structure type lattice specifications essential supertypes essential properties 
axiom acyclicity guarantees cycles type lattice remaining axioms traverse lattice type root eventually terminate bottom essential supertype property sets 
soundness guarantees valid schema objects properties relationships derived axioms 
soundness important ensure erroneous results produced axioms 
hand completeness guarantees valid schema objects properties relationships derived 
completeness important ensure missed axioms 
define gamma 
maximal path length mpl type lattice type type maximal path length longest possible path immediate supertype links example null object gamma 

furthermore define gamma 
ng 
complete set types mpl root type equal dependency graph derivations performed simplified set axioms shown 
axiom numbers shown square brackets 
calculation axiom tail directed edge uses depends axiom head edge 
dotted edge indicates calculation axiom tail uses axiom head supertypes type semantics dotted edges traverse type lattice root 
significance graph illustrates recursive calculations denoted cycles graph axioms 
cycle second cycle pl 
carefully considered proving termination axioms 
pe pl ne fig 

axiom 
intuitively termination axioms straightforward dependency delta randal peters tamer ozsu graph 
cycles graph factors represent potential nontermination 
prove termination cycle prove termination axioms 
cycle dotted edge represents shift type lattice 
uses calculation uses supertypes subsequently calculation uses uses supertypes pattern leads root type supertypes terminates calculation 
termination pl cycle proven similarly 
calculation pl uses pl supertypes 
leads root type supertypes terminates recursion 
opportunities optimization actual implementation 
example inherited properties stored type avoid recursion 
section concerned theoretical proofs axiomatic model imply implementation strategy 
formal proofs termination soundness completeness follow 
theorem 
schema evolution axioms terminating 
proof assume terminating fixed sized sets 
typically supplied schema designer system constraints reasonable assume fixed size 
axioms assert condition types components rely terminating terminating 
axiom terminating fixed set 
turn attention proving termination axioms axioms depend 
termination axioms proved induction mpls type lattice 
basis 
root type 
show axioms terminating root type 
axiom 

ff operation terminates 
terminates 
axiom 

ff operation terminates pl 
terminates 
axiom 

ff operation terminates 
terminates 
axiom 

terminates 
fixed 
terminates 
axiom 

terminates 
fixed 
terminates 
induction 
assume axioms terminating choose gamma 

show axioms terminating axiom 
finite set types pl terminating ff operation terminating terminates 
axiom 
finite pl terminating ff operation terminating pl terminates 
axiom 
similarly finite terminating ff operation terminating terminates 
axiom 
terminates fixed terminates 
axiom 
terminates fixed terminates 
proof follows induction 
axiomatic model dynamic schema evolution objectbase systems delta qed 
axioms rely solely terminating axioms fixed set terminating 
theorem 
schema evolution axioms sound 
proof assume sound 
typically supplied schema designer system constraints important vacuously sound 
axioms assert condition types components rely sound sound 
axiom sound sound set type turn attention proving soundness axioms axioms depend 
axiom 
unsound type immediate supertype transitively linked type 
formally type exists distinct type observe order satisfy transitive relationship exists type choose way 
due set difference operation order chance included element 
variable ff operation bound pl gamma frg right hand side axiom 
pl result equation extended union ff set containing set difference removes result 
shown unsound type exist 
types exist distinct type words type immediate supertype satisfies definition immediate supertypes sound 
axiom 
unsound property defined natively inherited 
formally property 
due set difference operation order chance included element 

shown unsound property exist 
properties 
native properties essential inherited 
satisfies definition nativeness sound 
axiom 
proof axiom inheritance sound induction mpls 
basis 
root type 
show 
ff sound 

ff operation results empty set 
sound 
induction 
assume sound choose gamma 

show sound 
note sound sound sound set sound union sound sets contributing factors 
extended union sound sets sound 
proof follows induction 
delta randal peters tamer ozsu axiom 
set sound union sound sets contributing factors 
axiom 
proof axiom supertype lattice sound induction mpls 
basis 
root type 
show pl 
ff pl sound 

ff operation results empty set pl 
sound 
induction 
assume pl sound choose gamma 

show pl sound 
note sound definition subtyping mpls 
pl sound extended union sound pl sets results sound set union result fg produces sound result pl 
proof follows induction 
qed 
axioms rely solely sound axioms sound set sound 
theorem 
schema evolution axioms complete 
proof assume complete 
typically supplied schema designer system constraints important vacuously complete 
axioms assert condition types components rely complete complete 
axiom complete complete set type turn attention proving completeness axioms axioms depend 
axioms 
proof completeness axioms pl done parallel induction mpls 
basis 
root type 
show 

gamma ff pl 
gamma fxg pl 
ff pl complete 


complete 

ff operation pl 
results empty set pl 
complete 
satisfy definitions immediate supertypes supertype lattice 
induction 
assume pl complete choose gamma 

show pl complete 
complete complete removes supertypes resulting complete set direct supertypes 
prove pl complete note complete pl complete extended union complete pl sets union fg results complete set supertype lattice types pl 
proof follows induction 
axioms 
completeness proved parallel induction mpls 
basis 
root type 
show 

complete 
show 
ff complete note 
resulting empty set ff operation 

complete 
furthermore 


complete union complete sets 

satisfy definitions inherited properties type interface 
axiomatic model dynamic schema evolution objectbase systems delta induction 
assume complete choose gamma 

show complete 
prove complete note complete complete extended union complete sets results complete set 
complete union complete sets contributing factors 
proof follows induction 
axiom 
assume complete 
means exists native property defined 
defined supported interface 
native property inherited supertype 
order satisfied initial assumption incorrect making complete 
qed 
axioms rely solely complete axioms complete set complete 

axiomatic design space dse wegner wegner describes design space object language paradigms respect interesting subsets features objects classes inheritance 
similar process identify interesting subsets dse axioms relate object paradigms wegner examine obs issues various classifications 
offers design space dse obss axiomatic model indicates axioms contribute various kinds expressibility obs 
wegner objects autonomous entities consist set operations state 
objects respond operations applied operation object may update state return results dependent object state 
paradigm object language identified language supports notion objects 
class type classifies objects common operations 
class acts template objects created 
objects created class common operations 
paradigm class language identified object language object supported class 
inheritance serves categorize classes types shared operations 
class type may inherit operations superclasses supertypes turn may operations inherited subclasses subtypes 
single multiple inheritance may supported 
paradigm object oriented language identified class language hierarchy classes types may incrementally defined inheritance mechanism 
collection object oriented languages proper subset class languages proper subset object languages 
paradigms summarized table iii 
paradigm supports object language objects class language objects classes types object oriented language objects classes types inheritance table iii 
summary object language paradigms 
delta randal peters tamer ozsu object languages support functionality objects object management handled outside language 
class languages provide degree object management collecting shared operations common place provide mechanism support management classes 
object oriented languages known wide spectrum languages allow objects classes managed language providing uniform mechanism high level design class hierarchies low level implementation objects 
taxonomy relate inclusion exclusion dse axioms obs object type object oriented paradigms 
obs supports definition properties object individual basis fits object paradigm 
object obss support axioms support definitions notion type 
new definition objects types introduced object obs denote native properties 
example introduce set object defines native properties object 
object maintains independent set native properties serves complete interface object 
different objects need support common properties properties duplicated objects 
native properties object basis notion supported objectbased obss 
changes native properties objects responsibility object designer exception system propagate change corresponding object 
dse object obss simple manage schema change object isolated set meaning objects need considered 
result systems lack semantic richness inherent semantic relationships objects 
obs supports notion fits type paradigm common properties objects type recorded 
paradigm identifies need reason introducing axiomatic model 
axioms supported dse type obss axioms rely inheritance form 
management semantics change simple type obss schema change type isolated set meaning types need considered 
result schema change may propagated objects type issues concerning change propagation propagate change screening conversion need addressed type obss 
type obs supports belongs object oriented paradigm 
object oriented paradigm supports inheritance axiom inheritance axiom supported object oriented obss 
consequence axiom interface axiom supported types form complete interface native inherited properties 
represents minimum requirements obs fit object oriented paradigm 
table iv illustrates various classifications obs paradigms features supports 
object oriented obss classified refined subsets support additional axioms 
discussed compare differentiate obss 
obss typically concerned information modeled stored objectbase information outside universe discourse 
result obss support notion closure limits management information currently axiomatic model dynamic schema evolution objectbase systems delta paradigm supports object obs objects type obs objects types ne object oriented obs objects types inheritance ne pe minimal axiom inheritance axiom interface closed minimal axiom closure native minimal axiom nativeness lattice minimal axiom supertype lattice direct lattice axiom supertypes acyclic lattice axiom acyclicity rooted lattice axiom pointed lattice axiom table iv 
summary obs design space axiomatic model 
objectbase 
obss support axiom closure classified closed systems 
closure supported obss widespread included part minimal requirements object oriented obss 
leave open design choice allow axiom closure serve differentiating factor comparing systems 
systems support native properties clean separation properties defined type inherited type 
improve efficiency searching implementations properties dynamic dispatching reducing number implementations need considered resolving conflicts implementation level functional resolution 
support lattice supertypes type simple extension support type lattice object oriented obss 
simply involves maintaining subsets type system subsets partial ordering subtype relationships 
supertype lattice support useful interoperability systems portions schema need integrated schemas exported participate federation obss 
serve help determine closure views obss view management support 
supertype lattices lead additional classifications object oriented obss 
systems support direct supertypes give type lattice type maintains minimum number supertype links 
simplify dynamic dispatching obss reducing number supertypes need inspected inherited properties inherit implementations supertypes 
example gemstone performs smalltalk dynamic dispatching inspects supertypes type implementation property type 
direct supertypes minimize number types need inspected 
simplify functional resolution examining direct supertypes guarantees minimal number types contribute conflict considered 
respect graphical type browsers displaying direct supertype links offers complete type lattice concise form 
closure acyclic type system common feature obss 
obvious advantages lie reduced complexity type system polynomial computational complexity graph algorithms searching type system 
rooted type system offers reasonable environment support uniformity system object shares common interface root type 
root type describes properties objects general description delta randal peters tamer ozsu part type system external notion object required 
types inherit properties root inherit support general notion objects 
system defined terms types inherit root type system including schema modeled objects 
pointed type system fairly easy support offers advantages obss 
type system pointed lifting bottom type 
bottom type need physically stored managed semantic notion subtype types supports properties types 
bottom type useful defining primitive null error objects returned result operation object subsequently operation applied 
objects safely initialize properties objects return error conditions objects result operations 
subsequently property applied encountering don understand message scenario smalltalk type checking errors 

example axiomatization dse tigukat section give brief overview tigukat object model define dynamic schema evolution policies tigukat indicate policies described axiomatic model section 
focus effects changes schema level limit discussion definition semantics schema changes exclude change propagation deals effects object instance level 
see peters discussion change propagation tigukat uses object model 
object model overview tigukat object model ozsu peters purely behavioral uniform object semantics 
model behavioral access manipulation objects application behaviors 
behaviors tigukat model correspond generic concept properties discussed section 
model uniform component information including semantics modeled class object defined behavior 
means addition usual application specific objects persons employees system manages information types behaviors classes objects 
results self managed system reflective capabilities peters ozsu 
primitive type system tigukat shown 
types define behaviors applicable instances 
type object root type system null base 
concentrate shaded types uniformly model schema describe role supporting dse terms axiomatic model 
complete model definition including primitive behaviors see peters 
primitive objects tigukat include atomic entities reals integers strings types defining common features objects behaviors specifying semantics object properties functions specifying implementations behaviors classes automatic classification objects type collections general heterogeneous groupings objects 
prefixed refers type types extents separate constructs tigukat 
axiomatic model dynamic schema evolution objectbase systems delta object type function class poset bag boolean character string real integer natural class class type class collection class null supertype subtype collection atomic list behavior fig 

primitive type system tigukat object model 
class behavior 
example person refers type person class age behaviors 
david prefix denotes application specific 
objects consist unique identity encapsulated state 
access manipulation objects occurs exclusively application behaviors 
clearly separate definition behavior possible implementations functions methods 
supports overloading late binding implementations behaviors 
component behavior semantics 
signatures denote partial semantics behaviors 
complete semantic specification mechanism currently development 
signature includes name apply behavior list argument types result type 
object behavior applied called receiver 
dot notation denote application behavior receiver object type defines behaviors encapsulates behavior implementations state representation objects created type template 
tigukat supports multiple inheritance type structure forms lattice 
lattice rooted type object lifted base type null form pointed lattice 
type null defines objects assigned behaviors result known null undefined 
set behaviors defined type denote interface objects type 
types foundation schema object models including tigukat 
fundamental schema evolution operations types add drop types add drop subtype relationships types add drop behaviors properties types 
order illustrate principles section define modeling types tigukat terms axiomatic model 
uniformity tigukat dictates types modeled objects 
primitive delta randal peters tamer ozsu type type defines behaviors type objects 
behaviors types related schema evolution include supertypes super lattice interface inherited native 
correspond exactly pl respectively axiomatic model 
supertypes behavior returns immediate supertypes receiver type 
type immediate supertype 
super lattice behavior returns partially ordered collection types representing supertype lattice pointed receiver type rooted object 
way type base type supertype lattice 
behaviors interface inherited native represent collections behaviors related various interface components types 
furthermore type includes maintain essential supertypes essential properties respectively 
sufficient model dse tigukat terms axiomatic model 
aspects tigukat related change propagation aspect dse 
briefly discussed 
class ties notions type object instances 
class supplemental distinct construct responsible managing instances particular type type extent 
way model clearly separates types extents 
schema change occurs particular type changes propagated type extent associated class 
collections heterogeneous grouping constructs opposed classes homogeneous inclusion polymorphism 
object creation occurs exclusively classes classes extents types managed automatically system 
collections hand managed explicitly user 
object exist tigukat existence class 
change propagation collections unnecessary changes performed class object 
types class class type class collection class part extended meta type system 
placement type lattice directly supports uniformity model brings definition meta model model 
discussion architecture meta model features provides class behaviors reflective queries see peters ozsu 
definition schema various kinds objects modeled tigukat classified schema objects 
objects tigukat fit categories type class behavior function collection 
categories distinguish schema objects objects changes affect identified schema evolution operations 
formal definition schema objects 
followed definition constitutes schema tigukat obs 
definition 
schema objects general classifications objects form schema objects tigukat types schema objects 
class type forms set type schema objects denoted tso 
equivalent axiomatic model 
types tso extended union interface sets types interface forms set behavior schema objects denoted 
behaviors defined interface type considered behavior schema object means behavior 
represents set properties axiomatic model represented 
axiomatic model dynamic schema evolution objectbase systems delta behaviors types tso extended union implementations behaviors implementation forms set function schema objects denoted 
functions defined implementation behavior type considered function schema objects means function 
functions objects denote implementations properties axiomatic model represented attributes methods executable code 
axiomatic model high level directly deal implementations conflict resolution strategies associated 
conflict resolution properties semantic level semantics property unique simple set operations resolve conflicts 
class collection forms set collection schema objects denoted lso 
collections represent flat space heterogeneous user defined managed object groupings 
axiomatic model impose restrictions management collections 
class class forms set class schema objects denoted cso 
note cso lso class collection 
classes tigukat mirror types class responsible managing entire extent type 
subset inclusion structure classes directly related subtyping lattice axiomatic model 
type requires class actual objects extent need class 
allows formation types just define properties objects allow creation objects type 
object schema object identified object category 
definition 
schema schema tigukat obs union schema object sets schema tso lso cso recall cso lso included completeness 
basic operations performed objects add drop modify 
table shows combinations various object categories different kinds operations performed 
bold entries represent combinations imply schema evolution modifications emphasized entries denote changes considered part schema evolution problem 
operation objects add drop modify type subtyping type deletion add behavior ab drop behavior db add subtype relationship asr drop subtype relationship dsr class class creation class deletion extent change behavior behavior definition behavior deletion change association ca function function definition function deletion implementation change collection collection creation collection deletion extent change instance creation instance deletion instance update table classification schema changes 
delta randal peters tamer ozsu semantics change section modifications affect schema bold entries table axiomatization described 
basic operations affecting schema include adding behaviors type definition dropping behaviors type definition changing implementation behavior type adding dropping classes 
schema changes adding dropping types adding dropping subtype relationships dropping behaviors dropping functions defined terms type related basic operations 
mt ab modify type add behavior operation adds behavior essential component type 
add behavior type added sets derived 
results reflected native inherited interface respectively 
mt db modify type drop behavior operation drops behavior essential component type 
drop behavior type removed sets derived 
resulting sets reflected native inherited interface respectively 
note may remove interface may inherited supertypes eventually links supertypes defining removed longer part mt asr modify type add subtype relationship operation adds type essential supertype type effectively adds subtype relationship types 
add type supertype type added sets pl derived 
results lattice change reflected supertypes due axiom acyclicity addition type supertype type rejected introduces cycle lattice 
mt dsr modify type drop subtype relationship operation drops type essential supertype type effectively drops subtype relationship types 
drop type supertype type removed sets pl derived 
results lattice change reflected supertypes due axiom tigukat obeys subtype relationship object dropped essential 
add type operation creates new type integrates existing lattice 
creating type adds tso axiomatic model turn adds schema 
type creation supported regular subtyping operation provided primitive model 
new behavior defined part meta system accepts collection supertypes collection behaviors 
result creating new type subtype types essential behaviors adds sets pl derived 
supertypes specified object assumed 
due axiom tigukat obeys new type added null types essential supertypes base type 
dt drop type operation drops type removing tso removes schema 
drop type type removed type axiomatic model subtypes axiomatic model specifically define subtypes property trivial define inverse operation supertypes property 
tigukat define subtypes behavior types finding subtypes dropped type easy task 
axiomatic model dynamic schema evolution objectbase systems delta tigukat restriction primitive types model primitive type system dropped 
type dropped type associated class instances shallow extent class dropped 
object migration techniques instances migrated type prior dropped order preserve existence 
object migration outside scope 
ac add class operation creates class uniquely associates particular type manage extent 
creating class adds cso turn adds schema 
creation class allows instances associated type created 
dc drop class operation drops associated class type removes cso schema 
instances dropped class dropped 
mentioned object migration techniques migrate objects class dropping class order preserve objects 
explicitly type definition operation mt db schema change dropping behavior entirety schema change behavior may defined types needs dropped types 
db drop behavior operation drops behavior possibly remove schema 
dropped behavior dropped types define behavior essential 
semantics operation follows dropping behaviors types operation mt db defined dropped containing behavior 
mb ca modify behavior change association operation changes implementation behavior associating different function 
implementation schema change outside scope high level axiomatic model 
defined complete set possible implementation changes conflict resolution procedures changes 
details peters 
conflict high level behaviors properties semantics unique description behavior set operations 
changing association function behavior considered schema change dropping function entirety schema change function may associated implementation behavior type 
df drop function operation drops function possibly remove schema 
operation rejected function associated implementation behavior type associated class 
collections heterogeneous user defined managed object groupings axiomatic model interfere flexibility 
included completeness 
dl drop collection operation drops collection removing lso schema 
classes dropping collection drop members 
instances dropped collection affected 
add collection operation adds new empty collection schema 
collection addition collection creation defined primitive model 
creating collection adds lso turn adds schema 
behavior new defined classes applied collection create new collection object 
remaining entries table represent changes considered part schema evolution problem 
creating dropping updating object instances operations delta randal peters tamer ozsu ao ones discussed clearly operations concerned real world concepts modeled objectbase affect schema 
defining new behavior operation ab affect schema behaviors don part schema added essential behaviors type 
defining new function operation af affect schema functions don part schema associated implementation behavior defined type 
modifying function operation mf affect semantics behaviors may associated operation affect schema 
collections groupings objects defined maintained user 
modifying collection involves changing membership extent changing membership type 
operations related contents collection part schema evolution problem 

discussion comparison advantage axiomatic model precision offers specifying dse obss 
important advantage possibility axiomatic model practice compare evaluate obss common framework model provides 
section compare dse operations tigukat orion reductions axiomatic model 
result allows certain judgements functionality expressibility system serves illustrate practical axiomatic model 
fundamental dse operations defined orion authors state inclusive interesting schema changes 
soundness completeness thorough taxonomy schema change operations proven operations 
soundness orion shows schema operations generate valid class lattices completeness shows legal class lattice attainable schema operations define 
notions soundness completeness orion differ section 
orion deals specific identified taxonomy schema change operations section deals general schema operations carried 
show semantics fundamental operations orion represented axiomatic model 
result notions soundness completeness preserved mapping 
purpose comparison section parallels orion terminology class subclass superclass tigukat terminology type subtype supertype respectively 
axiomatization orion mapping orion class structure axiomatic model represents superclasses orion class 
notion set minimal superclasses orion ignored 
explicit superclass lattices orion implied superclass relationships formed classes 
superclasses orion ordered guide conflict trivial define total ordering purpose 
ordering external axiomatic model adversely affect axiomatization orion conflict resolution alter interface class underlying encapsulated implementations changed 
conflict resolution lower level high level semantics captured axioms 
members orion regardless set ordered 
sake completeness ordered conflict resolution axiomatic model dynamic schema evolution objectbase systems delta considered axiomatization orion 
mapping properties represents defined re defined properties orion class 
notion minimal native inherited properties orion 
inherited properties class orion expressed gamman axiomatic model 
interface class meaning orion axiomatic model 
properties orion names domains conflict resolution 
axiomatic model assumes properties semantics 
names domains part semantics turn conflict resolution 
axiom closure explicitly stated orion implied connected nature class structure 
axiom acyclicity hand strictly enforced 
furthermore axiom obeyed object axiom relaxed single class base 
note comparison purposes orion class structure lifted base class null example 
fundamental operations orion semantics expressed terms axiomatic model follows op 
add new property class add 
perform orion conflict resolution necessary 
operation performed attribute method 
op 
drop existing property class remove 
perform conflict resolution necessary 
operation performed attribute method 
op 
add edge class superclass class add ordered 
perform conflict resolution necessary 
axiom acyclicity violated operation rejected 
op 
drop edge remove class superclass class remove superclass case linked superclasses 
operation rejected superclass class object 
algorithm illustrates procedure fsg superclass 
object reject operation superclass object reject 
link superclasses remove safely removed superclass 
op 
change ordering superclasses class simply change ordering classes 
perform conflict resolution necessary 
op 
add new class subclass class create add 
specified object default 
orion additional superclasses added op 
op 
drop existing class subclasses remove superclass op 
effect remove remove lattice 
op 
change name class change occurrences class new name 
fundamental operations specified equivalent semantics axiomatic model conclude orion reducible axiomatic model 
furthermore delta randal peters tamer ozsu definitions orion definitions soundness completeness preserved 
analogy reduction may consider axioms formal assembly language precisely specify semantics higher level schema operations 
reduction axiomatic model orion possible example orion maintain minimal superclasses native properties classes 
axiomatic model subsumes schema evolution capabilities orion 
section compare similarities differences schema evolution tigukat orion terms axiomatizations 
axiomatization orion useful results 
unification dse attributes methods single framework properties simplifying specification dse orion bringing step closer uniform model 
second clarification dse semantics orion 
particular informal definition op better understood axiomatic form 
specification op best interpretation informal definition available literature 
interpretation may entirely correct stresses need formal model 
systems gemstone define dse policies follow orion 
orion definitions informal lack common framework comparison purposes 
due similarities orion axiomatization systems shown 
axiomatic model serves basis comparing dse systems obss 
section compare axiomatization dse tigukat orion sufficient illustrate salient features model 
comparison dse tigukat orion relation design space tigukat object oriented obs supports subcategories dse benefit advantages provide 
orion object oriented obs supports proper subset subcategories exploit advantages ones missed 
orion closed system supports type lattice implicit notion lattice individual type 
lattice orion acyclic rooted pointed 
furthermore orion support direct types management native properties types 
terms subtyping property inheritance tigukat axiomatic model reducible directions reduction orion axiomatic model possible 
result observation minimal supertypes minimal native properties exploited orion useful efficiency system 
example resolve property naming conflicts type necessary iterate minimal supertypes type conflicts detectable supertypes 
minimal supertypes displaying type lattice graphically 
due property inheritance user needs observe direct subtype relationships understand complete inheritance functionality type 
comparing schema operations systems focus operations tigukat outlined table fundamental operations identified orion 
side side comparison common dse operations approaches 
second discuss dse operations specific particular system 
offer general comments approaches express judgements dse semantics relation 
list associates dse operation tigukat corresponding operation axiomatic model dynamic schema evolution objectbase systems delta orion separating slash 
commonality tigukat orion operation association justified subtle variances highlighted 
mt ab op mt db op 
operations adding dropping properties types classes virtually identical systems 
subtle difference tigukat explicitly maintains minimal native properties orion 
mt asr op 
operation adding subtype relationship types edge classes similar systems 
differences orion maintains ordered supertype list conflict resolution tigukat explicitly maintains minimal supertype set 
mt dsr op 
operation dropping subtype relationship edge classes quite different systems 
dropping series edges orion produce different lattice depending order edges dropped 
tigukat ordering irrelevant lattice produced regardless order dropped 
subtype relationship dropping order independent tigukat orion 
axiomatization systems judgement dropping subtype relationships tigukat simpler uniform orion 
op 
operation adding type class similar tigukat obeys axiom new type added essential supertype null 
dt op 
operation dropping type class different tigukat orion systems base operation operation relationships edges 
systems differ handling operation differ 
differences equivalent defined comparison mt dsr op 
aside common dse operations vary slightly approaches 
operation changing ordering classes op introduced axiomatization orion deal conflict resolution 
implementation detail abstracted axiomatization tigukat general conflict resolution differ various systems 
similarly operation changing name class op specific orion 
tigukat deals abstractly notion act names objects unique identity 
example act adding mean add name set means add object identified set 
may different different names refer object 
objects tigukat renamed different identities orion tigukat objects created unique immutable object identity 
drop behavior operation db table defined terms mt db comparison orion terms mt db op discussed 
remaining dse operations tigukat discussed ac dc mb ca df dl deal change propagation issue addressed axiomatic model 
axiomatic model basis represent dse operation semantics enables comparisons 
comparison easy observe similarities differences systems tigukat orion respect schema operations type class lattice properties 
tigukat uniform model reflected handling schema changes 
major difference delta randal peters tamer ozsu systems handling dropping subtype relationships mt dsr op 
tigukat operation order independent orion 
judgement difference dse tigukat simpler uniform 
result difference ramifications consistency schema considering distributed interoperable obss 
example distributed system may replicated portions schema managed various semi autonomous sites 
orion systems order type dropping important needs carefully scrutinized replicated schemas order ensure consistency 
hand tigukat systems type dropping order irrelevant may allow concurrency systems 
additional differences lie tigukat separation types extents behaviors implementations functions 
allows axiomatization tigukat consider types considering extents consider behaviors considering implementations 
directly related dichotomy introduced handling semantics change issues versus change propagation issues 

related various systems proposed solutions problems semantics change change propagation dse obss 
support semantics change common approach define number invariants satisfied schema set rules procedures maintain invariants schema change 
support change propagation solution explicitly coerce objects coincide new definition schema 
technique updates affected objects changing representation dictated new schema 
versioning mechanism conjunction coercion old representations objects lost 
screening conversion filtering techniques define coercion takes place 
screening schema changes generate conversion program independently capable converting objects new representation 
coercion immediate delayed instance modified schema accessed 
object access monitored system outdated object accessed system invokes conversion program coerce object newer definition 
conversion programs resulting multiple independent changes type composed meaning access object may invoke execution multiple conversion programs handles particular change schema 
screening causes processing delays access objects conversion program may applied 
furthermore difficult determine system longer needs check particular conversion program needs applied particular object 
cause overhead object access may increase amount supplementary information system needs keep form screening flags 
conversion schema change initiates immediate coercion objects affected change 
approach causes processing delays modification schema delays incurred object access 
conversion complete objects date 
solution handling change consistency instances introduce new version schema modification supplement schema version additional definitions handles semantic differences versions 
additional definitions known filters technique called filtering 
error handlers axiomatic model dynamic schema evolution objectbase systems delta example filters 
defined version schema trap inconsistent access produce error warning messages 
filtering approach changes propagated instances 
objects instances particular versions schema 
schema changed old objects remain old version schema new objects created instances new schema 
filters define consistency old new versions schema handle problems associated behaviors written version accessing objects different version 
example property dropped type filter defined new version produces default value method written old type version accesses dropped property object created new version contain property 
approach introduces overhead maintaining separate versions filters need applied time time 
hybrid approach combines methods 
example system filtering underlying mechanism allow explicit coercion newer versions types screening conversion 
reduce overhead number versions filters need maintained 
example system takes active role screening default switching conversion system idle 
orion banerjee kim chou system introduce invariants rules approach structured way describing dse obss 
invariants define consistency schema constraints object model 
rules introduced guide preservation invariants choices schema arise 
orion defines invariants set twelve accompanying rules maintaining invariants schema changes 
allowed schema changes orion classified categories affect different components schema 
categories describe changes contents class attributes methods changes subtyping relationships classes changes classes adding dropping entire classes 
orion taxonomy changes represents majority typical schema modifications allowed obss 
change propagation orion handled screening coerces date objects new schema definitions objects accessed 
section complete axiomatization semantics change dse orion compare axiomatization tigukat 
schema evolution gemstone stein similar orion definition number invariants 
gemstone model complex orion multiple inheritance explicit deletion objects permitted 
result schema evolution policies gemstone simpler cleaner powerful orion 
example orion defines twelve rules clarify effects schema modification gemstone requires rules 
conversion gemstone propagate changes instances 
literature gemstone mentions possibility hybrid approach allows conversion screening clear system developed 
skarra zdonik skarra zdonik skarra zdonik define framework versioning types encore object model support mechanism evolving type definitions 
focused dealing change propagation semantics change 
schema evolution operations similar orion 
generic type consists collection individual versions type 
known delta randal peters tamer ozsu version set type 
change type definition results generation new version type 
change type affect subtypes specialization requirements new versions subtypes may need generated 
default objects bound specific type version explicitly coerced newer version order updated 
objects bound specific type version problem missing information arise programs methods written type version applied objects different version 
example property dropped type programs written older type version may longer objects created newer version newer object missing information dropped property 
similarly property added type programs written newer type version mind may older objects missing information 
reason type versions include additional definitions called handlers act filters managing semantic differences versions missing information problem 
approach address issue maintaining behavioral consistency versions types 
result skarra zdonik design methodology defining handlers 
handler defined type version specifies condition traps read write access undefined invalid properties type version 
furthermore handler defines appropriate action take access occurs 
consider missing information example 
handler defined type version missing property returns default value nil value simply generates error 
approach handler defined semantic difference type versions order filter object access trap inconsistent accesses may occur 
filtering approach change propagation maintains semantics properties different versions types 
downside approach defining handlers various type versions confusing unmanageable systems large number types change 
nguyen nguyen discuss schema evolution model compare encore gemstone orion earlier models cad systems called 
emphasis provide equal support semantics change change propagation 
schema changes allowed follow orion 
schema changes propagated instances conversion screening selected user 
conversion approach discussed 
change propagation assisted notion relevant classes 
relevant class semantically consistent partial definition complete class bound class 
relevant class similar type version skarra zdonik complete class resembles version set 
properties relevant classes characterized automatically selecting powerset instance variables constraints defined complete class definition 
selection restricted combinations meaningful respect certain semantic rules nguyen 
objects instances exactly relevant class characterizes partial definition object 
purpose relevant classes evaluate side effects propagating schema changes instances guide propagation 
relationships relevant classes characterized graph nodes relevant classes edges labeled schema changes take relevant class definition 
schema evolves relevant classes evaluate axiomatic model dynamic schema evolution objectbase systems delta changes test semantic consistency 
objects migrated relevant classes effect changes 
migration essentially object coercion 
propagation objects set relevant classes large overhead argued relevant classes group objects smaller sub classifications number objects affected change class reduced increasing performance 
approach valid systems consider partial definitions objects class 
model structure called context maintenance versions contexts proposed basis schema evolution 
context partial view schema serves dual purpose defines subset objects database subset operations performed objects 
global database schema derived set contexts 
typical schema changes follow orion allowed 
context represented connected graph nodes classes edges attributes denoting relationships classes 
contexts similar entity relationship diagrams 
schema changes characterized graph operations rules maintaining graph integrity defined 
elements contexts shared contexts objects maintain information contexts participate 
consider amount extra space needed store information objects types 
focus managing changes schema propagation techniques explicitly stated conversion screening 
brief discussion model improves independence programs changing schema suggests filtering approach unclear model achieves feature 
authors argue context provides smaller group objects need modified result schema changes intended improve performance 
osborn osborn describes algebra utilizes inclusion polymorphism define equivalence queries different versions schema 
describe schema changes propagated object instances 
kinds schema modifications considered 
involves changing simple atomic attributes strings integers complex aggregates simple types opposite direction changing aggregates simple types discussed 
level aggregation considered 
aggregation aggregate types discussed 
second modification considered specializing aggregate types 
schema modified specializing previous types shown equivalence queries preserved preserved polymorphism 
results interesting full scope schema evolution considered 
lerner habermann focus shifts dynamic schema evolution database reorganization 
invariants rules approach typical schema changes allowed 
invariants define default transformations schema change 
schema changes produce transformation table describes modify affected instances 
multiple schema changes usually grouped released package called transformer 
screening apply transformer propagate changes instances 
multiple releases composed access older object invoke multiple transformers bring object date 
result database reorganization approach multiple changes packaged single release expected reduce number screening operations need invoked delta randal peters tamer ozsu object access 
result transformers represented tables initialized 
simple language provided describe transformations 
releasing transformer database administrator edit entries table override default transformations 
provides additional flexibility defining changes filtered 
semantics change dse tigukat discussed section 
change propagation handled filtering approach uses behavior histories peters temporal aspects object model 
change schema change automatically propagated instances 
old version schema maintained change recorded proper temporal histories behaviors 
existing objects continue maintain characteristics older schema newly created objects correspond semantics newer schema 
coercion older objects newer versions schema optional tigukat 
different versions types maintained temporal histories schema information older objects available continue processing objects historical manner 
coercion desired entire object need updated 
objects coerced newer version schema behavior time 
means behaviors object may newer versions may older ones 
contrast models object converted entirety newer schema version losing old information object 

issues schema evolution identified semantics change issue describes possible schema changes ii change propagation issue describes schema changes affect object instances 
address semantics change introducing sound complete axiomatic model dynamic schema evolution dse objectbase systems obss 
develop solutions change propagation tigukat obs temporal aspects object model peters formal treatment change propagation integration axiomatic model part 
axiomatization dse provides foundation describing schema evolution policies different systems single underlying framework 
axiomatic model proposed power provide basis obss property inheritance 
furthermore common foundation offered model provides means better compare dse facilities various systems 
design space obss inclusion exclusion axioms developed classify compare differentiate features obss 
illustrate power axiomatic model schema evolution policies tigukat orion reduced model compared 
primary interest implementation dse tigukat reduction axiomatic model 
prototype implementation core tigukat object model complete irani extension efficient algorithms dse currently development 
completion task provide necessary empirical evidence performance characteristics 
additionally formal complexity analysis implementation techniques provide theoretical basis performance 
intend define taxonomy performance characteristics dse operations obss 
dse reductions axiomatic model provide basis theoretical axiomatic model dynamic schema evolution objectbase systems delta comparison performance taxonomy empirical performance analysis benchmarking dse existing obss 
direction pursued extension axiomatic model support schema integration heterogeneous systems solving interoperability problems 
formalism axiomatic model potential serve framework precisely specifying semantics schema integration 
investigating similar approach define closed views view management obss 
acknowledgments authors grateful referees associate editor valuable suggestions improved content presentation 

management schema evolution databases 
proc 
th int conf 
large databases pp 

banerjee kim kim korth 
semantics implementation schema evolution object oriented databases 
proc 
acm sigmod int 
conf 
management data pp 

leontiev ozsu szafron 
uniform behavioral temporal object model 
technical report tr department computing science university alberta edmonton alberta canada 
irani 
implementation design development tigukat object model 
master thesis department computing science university alberta edmonton alberta canada 
available university alberta technical report tr 
kim chou 

versions schema object oriented databases 
proc 
th int conf 
large databases pp 

lerner habermann 
schema evolution database reorganization 
proc 
ecoop oopsla conf pp 

nguyen 
expert database support consistent dynamic objects 
proc 
th int conf 
large databases pp 

nguyen 
schema evolution object oriented database systems 
data knowledge engineering 
osborn 
role polymorphism schema evolution oodb 
ieee transactions knowledge data engineering sept 
ozsu peters szafron irani mu 
tigukat uniform behavioral objectbase management system 
vldb journal july 
special issue persistent object systems 
stein 
class modification gemstone object oriented dbms 
proc 
int conf 
object oriented programming systems languages applications pp 

peters 
tigukat uniform behavioral objectbase management system 
ph 
thesis department computing science university alberta edmonton alberta canada 
available university alberta technical report tr 
peters ozsu 
reflection uniform behavioral object model 
proc 
th int conf 
entity relationship approach pp 

skarra zdonik 
management changing types object oriented database 
proc 
int conf 
object oriented programming systems languages applications pp 

skarra zdonik 
type evolution object oriented database 
research directions object oriented programming pp 

mit press 
wegner 
dimensions object language design 
proc 
int conf 
oriented programming systems languages applications pp 

