appear aaai task decomposition plan parsing anthony barrett daniel weld department computer science engineering university washington seattle wa cs washington edu task decomposition planners schemata define tasks terms partially ordered sets tasks primitive actions 
existing planners synthesize plans topdown approach called task reduction uses schemata replace tasks networks tasks actions actions remain 
bottom plan parsing approach task decomposition 
reducing tasks actions incremental parsing algorithm recognize partial primitive plans match schemata 
essence approach exploits observation schemata convenient means reducing search 
compile schemata declarative search control language machine learning research rejects plan refinements parsed 
demonstrate parsing reduction dominates efficiency grounds provide preliminary empirical results comparing 
note parsing approach allows convenient comparison combination different search control technologies generates minimal plans handles expressive languages universal quantification conditional effects ease 
noah sacerdoti introduced important innovations partial order step representation schemata define tasks terms primitive actions tasks 
noah represented plans partially ordered sets tasks actions reduced tasks substituting networks tasks actions actions remained 
tasks actions interfered critic functions performed arbitrary plan transformation repairs 
despite ubiquity task decomposition industrial strength planners sipe wilkins wilkins plan currie tate appreciate helpful comments suggestions denise draper oren etzioni keith golden nick kushmerick ying sun mike williamson 
research funded part national science foundation iri office naval research formal analyses planning ignored idea hierarchies decomposition schemata 
researchers focussed noah idea partially ordered plan steps dropped notion tasks 
example tweak chapman snlp mcallester rosenblitt synthesize plans solely actions 
subsequent research continued focus actions explored expressive languages conditional effects universal quantification pednault mcdermott pednault penberthy weld 
investigated task decomposition yang erol nau hendler formulations assume strips action representation 
interesting question remains sound complete task decomposition algorithm expressive language adl pednault conditional effects universal quantification 
inadequate emphasis task decomposition unfortunate effect machine learning research planning explanation learning minton static domain analysis etzioni smith peot abstraction knoblock yang tenenberg case planning hammond derivational analogy veloso carbonell 
unfortunate vast majority research speedup learning ignored planners defining tasks provides successful form search control 
leads second question existing speedup learning techniques task decomposition planners 
describe implemented ucpop parse algorithm new approach answers questions 
performing task decomposition task reduction ucpop parse inverts process plan parsing 
algorithm partial order planner synthesizes networks actions incremental parser identifies decomposition corresponds actions 
demonstrate reduction parsing approach strictly dominates efficiency system kambhampati hendler rare exception 
grounds 
parsing approach provides advantages 
uniform search control framework parsing critic implemented set declarative search control rules turned combined forms control knowledge domain dependent hand coded rules output machine learning algorithms 
preliminary experiments demonstrating claim 

lazy minimal expansion approach expands tasks actions actions needed solve problem 
actions useful achieving goals added plan 
enables ucpop parse easily handle actions conditional effects sections introduce schemata example illustrates universally quantified conditional effects review task reduction describe plan parsing compare approaches task decomposition 
task decomposition problems illustrate task decomposition extension briefcase domain pednault encode primitive operators 
carry moves briefcase contents open close act briefcase put take respectively add remove items briefcase open table 
note conditional universally quantified effects carry action see pednault penberthy weld action semantics 
open precondition open effect open close precondition open effect open take precondition open effect put precondition open effect carry precondition open effect table actions briefcase world operators description initial state desired goal constitute planning problem 
example suppose items briefcase dictionary initially home inside briefcase 
goal home dictionary office 
clearly action sequence solves problem open take put close carry home office decomposition schemata task decomposition planner solves planning problems exploiting set useful plan fragments called decomposition schemata 
intuitively schema specifies coordinated set tasks actions combine solve common subproblems 
yang provides formal definition illustrate graphically 
example shows move decomposition schema 
omega omega omega omega omega omega oe omega omega omega oe carry manage contents open move decomposition schema defining task moving objects location 
arrows leaving box indicate move appropriate way achieve goal involving predicates 
contents schema indicate goals achieved move expands carry action defined manage contents task defined schema 
note contains numerous arrows labeled predicates negation represent protection intervals 
interval signifies producer node left arrow responsible achieving literals involving predicate consumer node right 
example manage contents task responsible achieving literals open carry 
note information specified protection interval producer equivalent prodigy style search control rule minton rejects attempts achieve goals inappropriate actions 
explained ucpop parse compiles schemata plan parser rules form 
presents schema defines manage contents task 
intuition manage contents simple briefcase opened objects added removed case shut 
manage contents schema illustrates important feature absent previous example 
schema allows varying numbers primitive take put actions introduced 
example carry action move schema requires multiple objects inside briefcase manage contents schema directs planner intervals producer drawn circle indicate corresponding literals achieved reusing existing action plan adding new task provides literal 
readers familiar nonlin tate plan currie tate note circle intervals correspond achieve conditions intervals producer drawn box correspond supervised conditions 
xxxx open open open take put open manage contents close open open decomposition schema defining task managing briefcase contents 
add put actions necessary single close action 
task reduction typically task decomposition planners iteratively schemata expand tasks networks actions tasks test resulting partial plans critic function 
cycle starts single problem task continues primitive actions remain critic detects irreconcilable interaction plan case backtracking necessary 
goal problem top level schema defines language appropriate plans 
specifies goals achieved way 
example shows expand problem task correspond previously mentioned problem 
resultant plan reduced schemata shown previously 
illustrates final decomposition leading step plan solves goal 
open goal problem move manage contents carry home office close put take decomposition solve briefcase problem replacing tasks accordance schemata yields legal subset possible networks actions view set decomposition schemata grammar see parse tree 
set schema derived networks constitutes formal language call schema generated plans 
set action sequences solve planning problem defined pednault constitutes language call solution set 
adopt insight due erol nau hendler task decomposition considered search plan intersection sets 
sound complete partial order planners tweak chapman snlp mcallester rosenblitt ucpop penberthy weld generate solution space directly 
traditional planners task reduction process expands schema generated set selects membership solution set 
plan parsing ucpop parse approach breaks tradition reversing roles refinement testing processes 
reducing task fixed network actions tasks ucpop parse adds actions effects needed incrementally composes layers tasks 
conceptually ucpop parse thought algorithm takes problem specification input returns plan 
algorithm ucpop parse problem 
initialize successively ffl ucpop init plan problem ffl parses init parses 

terminate solves problem return 
refine invoke ucpop refine plan choose returned set 

parse parses extend parses parses 
parses empty fail 

go step 
ucpop parse algorithm 
schemata compiled parser interacts ucpop planner penberthy weld general rule search controller 
routine ucpop init plan takes problem specification returns initial plan consisting solely start action effects encode initial conditions goal action preconditions encode goals 
plan solve problem contains flaw ucpop routine ucpop refine plan take plan select single flaw plan return set plans single flaw repaired ffl flaw unsatisfied precondition open effects possibly constrained unify desired proposition considered 
returned set contains plans created adding single causal link mcallester rosenblitt original plan 
added causal link records different way satisfy precondition new existing action 
ffl flaw involves action called threat possibly interfering precondition supported causal link returned set contains plans created methods resolve threat ordering steps plan posting additional subgoals adding variable binding constraints 
example guidance plan parser ucpop solves briefcase example described previously generating plan 
au au open close start carry home office goal take put home home open office open open home home open open primitive plan solves simple briefcase world problem ucpop planner complete solution planning problem exists ucpop find penberthy weld 
property merits comes cost forcing ucpop consider conceivable way achieving goal complex domains leads poor performance 
decomposition schemata compiled routines init parses extend parses prune inappropriate plans ucpop consideration 
routine init parses takes initial plan computes set parses 
example briefcase problem routine return set parse identifying plan goal step goal node problem schema 
planning process ucpop parse plan consideration set parses associated 
parse consists partially instantiated derivation tree mapping actions plan distinct leaves tree 
routine extend parses takes plan created repairing single flaw updates set parses reflect repair 
repair adds causal link parse extended match new link protection interval specified schemata derivation tree 
match parse deleted set 
times extension parse 
number parses varies planning progresses 
example consider open goal office briefcase problem 
flaw repaired adding carry action 
case goal associated problem schema provides little constraint link producer circle signifying goes 
planning process constrained parser dealing open preconditions plan carry action 
carry action appear move task shows schema move strong constraints associated protection intervals 
ucpop parse returns solution plan single associated parse shown 
comparing parsing reduction compare approaches terms efficiency ability combine evaluate multiple sources search control knowledge ability handle action languages universal quantification conditional effects 
efficiency approach performs different type commitment problems approach preferable 
illustration consider schemata 
top level problem schema task decomposed schemata 
primitive actions explicitly affect ff asserts ff 
ucpop parse adds step committing decomposed produce quickly determines problem solvable necessarily ff 
reduction planner hand loop forever reduce task fi fl start goal fl fi fi fl fl ff problem schemata problem plan parsing dominates 
slightly different problem search space finite reduction planner infinite ucpop parse 
consider schemata 
differences order decomposition schema addition ff explicit effects 
reduction planner determines problem solvable reducing ucpop parse add new step hope solution 
fi fl start goal fi fi fi fl fl ff problem ff ff schemata problem task reduction dominates 
general reduction approach reason effects preconditions task committing decomposition parsing approach add primitive step plan committing manner tasks decomposed produce primitive step 
exist domains approach surpasses question matter planner performs best practice 
preliminary attempt answer question compared ucpop parse reduction planner implemented routines add new steps handle protection intervals manage variable bindings 
performed experiments nonlin encoding blocksworld house building domain 
results appear table 
cpu seconds problem ucpop parse reduce sussman anomaly block tower shift build house table performance ucpop parse decomposition planner problem domains sun sparc ipx running common lisp 
experiments planners similar performance domains simple expect perform experiments complex domains 
uniform search control framework conceptual disadvantages parsing intuitive reduction people years experience 
hand ability turn parser leads uniform framework comparing forms search control provided schemata 
illustrate feature tested ucpop parse example briefcase problem posing problems complex domains russell process planning gil 
problems remove tire automobile hub completely change flat tire 
shortest solutions problems require steps respectively 
process planning problems involved block copper drilling hole block brass 
problems required steps respectively 
purpose experiment explore interactions plan parsing different search strategies vanilla best best search search space structured abstraction hierarchy generated alpine machine learning algorithm knoblock domain dependent hand coded rules 
create parser defined tasks getting tools inflating tires removing tires installing tires cleaning 
process planning parser created set schemata defining tasks setting drill presses securing objects machines 
results experiments appear table 
plan parsing clearly decreases size search space extent improvement depends difficulty problem relative search strategy 
note cases amount search reduction insufficient produce real problem plans generated cpu seconds strategy parse parse parse parse briefcase best remove tire best alpine hand coded fix flat best alpine hand coded saw block best alpine hand coded drill hole best alpine hand coded table performance ucpop parsing problem domains sun sparc ipx running common lisp 
problem runs marked terminated resource bound exceeded 
speedup parsing overhead 
overhead depends number possible parsings function particular partial plan question parser overhead depends search strategy 
demonstrated plan parsing complementary alpine believe usefully combined explanation machine learning algorithms 
hope validate intuitions 
expressive actions test reduction planner briefcase process planning domains handle actions conditional effects 
assumptions typically reduction planners action preconditions known added plan reduction reducing schema specifies preconditions handled 
assumption hold actions conditional effects new preconditions may introduced unused effect gets requested confronted 
extending reduction planner handle conditional effects topic research 
sipe wilkins allow conditional effects compute universally quantified preconditions action preconditions computed action added plan 
unclear extended add preconditions step point 
described fully implemented planner ucpop parse plan parsing 
stands ucpop parse handle recursive schemata cause parser enter infinite loop 
hope soon adapt flow graph parsing algorithm order circumvent problem 
wish see derivational analogy veloso carbonell automatically learn decomposition schemata 
showed reduction parsing approach dominates problem domain 
addition reported preliminary experiments suggest performance comparable approaches 
plan parsing offers advantages traditional task reduction method ffl plan parsing incrementally expands task variable number primitive actions 
feature useful full advantage actions context dependent effects 
actions needed achieving goals added plan 
ffl plan parsing acts guide search behavior ucpop planner combine contrast performance gains provided decomposition schemata engendered speedup learning subgoaling mechanisms 
ucpop proven sound complete penberthy weld ucpop parse automatically inherits soundness 
addition shown complete relative schema language intersection long parser complete 

algorithm parsing flow graphs 
ai tr mit ai lab 
chapman 
planning conjunctive goals 
artificial intelligence 
currie tate 
plan open planning architecture 
artificial intelligence 
erol nau hendler 
general framework hierarchical task network planning extended 
working notes aaai spring symposium foundations automatic planning classical approach 
menlo park ca aaai press 
etzioni 
acquiring search control knowledge static analysis 
artificial intelligence 
gil 
specification process planning prodigy 
cmu cs carnegie mellon university 
hammond 
explaining repairing plans fail 
artificial intelligence 
kambhampati hendler 
validation structure theory plan modification reuse 
artificial intelligence 
corresponds definition completeness erol nau hendler schema planner incomplete respect primitive solution set 
knoblock 
learning abstraction hierarchies problem solving 
proc 
th nat 
conf 

mcallester rosenblitt 
systematic nonlinear planning 
proc 
th nat 
conf 

mcdermott 
regression planning 
international journal intelligent systems 
minton carbonell knoblock kuokka etzioni gil 
explanation learning problem solving perspective 
artificial intelligence 
available technical report cmu cs 
minton 
quantitative results concerning utility explanation learning 
proc 
th nat 
conf 

pednault 
synthesizing plans contain actions context dependent effects 
computational intelligence 
pednault 
adl exploring middle ground strips situation calculus 
proc 
st int 
conf 
principles knowledge representation reasoning 
pednault 
generalizing nonlinear planning handle complex goals actions contextdependent effects 
proc 
th int 
joint conf 
penberthy weld 
ucpop sound complete partial order planner adl 
proc 
rd int 
conf 
principles knowledge representation reasoning 
available ftp pub ai cs washington edu 
russell 
efficient memory bounded search algorithms 
proceedings tenth european conference artificial intelligence 
vienna wiley 
sacerdoti 
nonlinear nature plans 
proceedings ijcai 
smith peot 
postponing threats partial order planning 
proc 
th nat 
conf 

tate 
generating project networks 
proc 
th int 
joint conf 

veloso carbonell 
derivational analogy prodigy automating case acquisition storage utilization 
machine learning 
wilkins 
practical planning 
san mateo ca morgan kaufmann 
wilkins 
sipe planning system manual sipe version 
sri international ravenswood avenue menlo park ca 
yang tenenberg 
abstracting nonlinear commitment planner 
proc 
th nat 
conf 

yang 
formalizing planning knowledge hierarchical planning 
computational intelligence 
