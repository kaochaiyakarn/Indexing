formal approach analyzing browsing semantics hypertext paul de bra geert jan houben dept mathematics computing science eindhoven university technology po box mb eindhoven netherlands yoram computer systems research institute univ toronto king college road toronto ontario canada browsing hyperdocument leads orientation problems don know lost hyperspace 
problems may diminished specific browsing tools fish eye views history mechanisms problems embedded structure hyperdocument 
order detect analyze potential problems hyperdocument reduce different types browsing actions unified know formalism petri net 
object oriented model describe hyperdocuments 
model models describes objects number different description layers layers fixed model excluded model :10.1.1.27.7665
order petri nets describe browsing operations dealing hierarchical structure objects composites towers cities translated operations equivalent simple follow link 
stotts furuta ruiz combine operations offered hypertext system presentation layer link structure document order characterize browsing semantics document system unity 
existing analysis tools different kinds petri nets easily detect potential browsing problems unreachable nodes links dead ends simultaneously displayed nodes infinite loops analyze consequences 
analysis valuable hypertext authors biggest problem creation appropriate links 
link structure hyperdocuments cause problems reading browsing hypertext 
lost hyperspace problem means user gets distracted original goal looses track current position hyperdocument 
user idea get back information nodes related subject interested 
far hypertext system managed offer universal solution problem problem originate system caused link structure hyperdocuments 
potential sources lost hyperspace problem ffl meaningless links occurring hyperdocuments generated automatically written linear documents 
small percentage meaningless links disturbing distracting 
ffl dead ends occur hierarchically structured documents force user go back index choose new direction 
backtrack history mechanism may aid user hides problems documents 
ffl loops short nodes confuse reader trying follow links new information previously read 
system may help marking links leading new information problem hyperdocument remains 
problem source eliminated improving automated understanding natural language 
attempt deal problem 
second third source easy detect automatically hypertext authoring systems typically offer tools doing 
complicated structures powerful user interfaces emerge difficult capture browsing semantics find loops dead ends 
order analyze problems hyperdocument needs formalism describe structure document potential ways document 
study browsing semantics hyperdocument zheng pong statecharts formalism especially useful modeling behavior hyperdocuments contain composite structures 
stotts furuta ruiz automata theory 
set possible paths hyperdocument viewed language accepted automaton 
formalism languages accepted automata known numerous tools analyzing automata exist 
main shortcoming previously quoted approaches oversimplified view possible structures hyperdocuments 
hypertext models systems provide richer structures simple nodes links including contexts hypergraphs forms composite objects activity spaces 
proposed general model extensible data model hyperdocuments tower model short 
apart basic composite nodes links model tower constructor describing different levels description object somewhat similar layers dexter model city constructor describing different views object 
hyperdocuments longer look simple graphs easily described automata 
model forbid simultaneous access different nodes making browsing process multithreaded 
definition tower model included browsing language 
structures model suggest number desirable browsing operations 
apart common follow link consider operators zoom composite objects towers cities operators switch description levels tower towers city 
focus concept state hyperdocument 
enable describe behavior hyperdocuments formulated tower model special kind petri nets emulate normal petri nets 
show system features translated additions petri net describing hyperdocument able analyze behavior hyperdocument system browsing 
petri net approach graphical nature firm mathematical foundation petri nets studied years powerful analysis methods 
simple finite state automata analysis tools petri nets exist 
behavior hyperdocuments analyzed existing tools 
organization follows section briefly recall structural definitions tower model 
refer details 
section define state hyperdocument discuss possibilities describing browsing semantics means possible transitions states hyperdocument 
section define browsing operations tower model 
formalize browsing semantics means special petri nets show emulate normal petri nets 
tower model revisited briefly recall basic definitions tower model 
definition node described couple object identification node value contents state 
link described tuple object identification link source anchor link destination anchor link value meaning 
anchor described couple object identification anchor value 
value anchor assumption anchor value indicates node anchor connected 
hyperdocument set objects belong class nodes links anchors 
node represents unit information 
nodes connected links attached nodes means anchors 
anchors represent sources destinations links 
typically source link word phrase occurring text node destination text node picture fragment audio video links connect anchors nodes 
means links nodes allowed depends values assigned anchors definition link 
system true source link word phrase dictionary source anchors effect link appears source anchors 
node containing copy source anchor follow link destination node 
link source anchor easily replaced set links having source anchor located node 
model substantial difference 
implementation clear user system uses single link anchor nodes uses identical links originating node 
having links node time fundamental 
result link may text node appears side side video fragment animation may accompanied sound fragment 
link simulated links single node 
definition object node link anchor 
value object basic application dependent value composite value tower value city value 
hyperdocument triple consisting set nodes set links set anchors 
link source destination anchor elements anchor connected nodes basic objects objects basic value black boxes hypermedia system 
value behavior application specific 
keep description behavior entire hypermedia document simple navigating moving objects included full internal behavior objects definition composite value tuple composite constructor set nodes set links set anchors 
composite constructor kind constructor including network set list constructors possible kinds additional global information constraints 
just networks 
allow constructors behavior modeled kinds automata describing browsing finite state machines petri nets 
nodes links anchors occur composite object restricted basic objects 
may basic composite tower city value 
likewise composite object composite node link anchor 
models allow composite nodes 
definition tower value mapping fixed finite set labels set objects kind node link anchor 
label corresponds description level level functionality hyperdocument 
labels typically fixed order case tower value described tuple objects 
objects level complex composite objects tower value described tuple atomic values tower levels floors depicted 
definition city value mapping parameter space set tower objects 
parameter space typically set names data type 
semantic role presentation storage type graphical representation tower 
view 
view view view 
view graphical representation city 
city object object city value describes set views information object 
enumerated set possibly infinite set views calculated common object description 
cities defined engelbart 
gives graphical representation city 
typical example city value mapping angles cross sections dimensional object 
city object called virtual object towers city generated function objects hyperdocument stored objects 
set description levels usually fixed hyperdocument 
model specify number possible levels number usually small 
objects need non empty value level generally fixed number levels imposed entire document 
city number towers views large possibly infinite drastic semantic difference towers city levels tower 
distinction usually clear aspects hypermedia system modeled towers aspects correspond cities 
state hyperdocument turning semantics browsing shall introduce notion state hyperdocument 
mainly interested accessibility nodes links anchors 
normally hypertext system control computer completely 
instance may complete control screen layout 
windows may obscured user window manager actions information intended displayed window may restricted smaller window scrolled 
restrictions important describing browsing semantics 
user access anchor link instance scrolling window moving windows consider anchor accessible 
node visible moving windows node accessible 
definition state hyperdocument state hyperdocument function objects document boolean values true false 
value true means object accessible false means 
browsing nodes anchors screen important 
part state information related navigation document 
assume timing constraints 
shall remove restriction 
number objects hyperdocument may infinite cities may infinite parameter space state hyperdocument may function infinite domain 
generate problems assume elements city finite number objects 
node city finite number anchors 
assumption finite number possible combinations accessibility values objects city 
assumed previous section structure composite described kind automaton finite state machine petri net know composites finite number components 
objects hyperdocument essentially finite far structure interconnections concerned 
user fires hypermedia application information appears 
hyperdocument enters initial state objects nodes source anchors accessible visible screen possible access way command language 
source anchors outgoing links usually visible buttons highlighted words phrases 
assume source anchors connected accessible node accessible 
user interface provides way activate outgoing link instance moving cursor pointing device pressing button keyboard pointing device 
link activated followed information node containing destination anchor link displayed source node removed screen part destination 
typical example source nodes remain accessible unix guide system line say window 
replacement source anchors destination link 
typical example generates windows top creating illusion source node link removed 
moving windows source node shown accessible 
general know link hyperdocument means state hyperdocument changes set objects accessible changes 
link follow paths user follow browsing hyperdocument 
ideally situation link follow 
case user stuck 
call dead hyperdocument 
ideally user follow links lead nodes viewed read aware 
call loop hyperdocument 
course hyperdocuments finite number nodes loops dead ends avoided 
stotts furuta ruiz investigate browsing semantics hyperdocuments primarily analyzing documents 
pay attention hypermedia system documents intended associated browser features 
result find hyperdocuments lead dead ends hierarchical structure 
chose ignore hypermedia system may provide ways switch node presence link anchors hyperdocument 
systems provide button go back node displayed button go back start index node 
example system 
systems provide button remove old nodes screen explicitly 
example feature trellis system 
button behaves link empty destination anchor 
argue implicit links provided system dependent features taken account section show concepts guided tours history navigation expressed virtual links 
impossible browse hyperdocument system document written 
translating documents systems implicit links provided system converted explicit links destination system provide system dependent feature 
assumes node displayed link enquiry mode unix guide system behaves differently 
removes source node screen meaning browsing operations easily modeled finite state machines mapping state hyperdocument node displayed 
tower model assumption 
consequence number possible states number nodes hyperdocument 
clear finite state machine representation longer suitable 
trellis system suffers problem assumption 
experience trellis shown number states needed represent browsing semantics trellis documents means finite state machines generate large automata really exponentially large 
browsing hyperdocuments tower model follow link definition follow link operation hyperdocument state link enabled true node connected 
enabled link hyperdocument state defined follows ffl false nodes connected isn source nodes part destination inaccessible 
ffl true nodes connected destination nodes accessible 
ffl nodes accessibility nodes involved follow link operation remains unchanged 
may wish describe effect links state anchors links look accessibility nodes 
node accessible anchors connected outgoing links anchors enabled 
case anchors connected accessible nodes may accessible avoided modeling nodes cities views connected accessible anchors 
boolean petri net effect link shown special kind petri net called boolean petri net 
completeness discussion start short description standard petri nets 
standard petri net pn bipartite directed graph composed finite set places finite set transitions 
flow relation theta theta describes set arcs connecting places transitions 
place input place transition output place place contains tokens 
state petri net distribution tokens places 
transition fire input places contains token 
firing consists removing token input places adding token output places describe effect link special kind petri net place contains exactly token value true false 
shows possible kinds connections effect 
transition fire input places token value true 
value true false value true value remains true value true value false value true operations boolean petri nets may need transitions represent link node source anchor link connected 
shows graphical representation link 
link enabled node accessible 
link nodes accessible 
example node remains accessible 
link possible action may follow link nodes 
graphical representation link 
representation browsing develop representation browsing structure hyperdocument means petri net 
shall describe approach number steps 
translate link structure boolean petri net 
link structure may different depending description level towers look level time 
petri net description level 

describe operations switch description levels adding transitions boolean petri net 
operations connect petri nets different levels generate big petri net browsing possibilities 

add transitions operations move views city case city finite 

add transitions zooming objects 
operations typical going browser type representation composite object elements composite 
operations added resulting boolean petri net translated standard petri net means algorithm described way results analyzing standard petri net easily translated boolean petri net 
petri net approach graphical nature firm mathematical foundation availability efficient analysis tools mature tools 
step translation link structure boolean petri net 
hyperdocument 
create boolean petri net bpn ffl node place labeled ffl node connected source anchor link transition single incoming arrow outgoing arrow node connected destination anchor theta source anchor connected ng theta destination anchor connected ng 
ffl initial state hyperdocument true nodes accessible hyperdocument opened false nodes 
initial marking bpn assigns truth values places nodes 
ffl hyperdocument consists tower objects boolean petri net created description level obtaining nets levels 
links objects description level objects description level 
hypermedia systems offer description levels different link structures 
features including activity spaces system implementations different link structures common set nodes 
different link structures content space argumentation space rhetorical space planning space displayed edited simultaneously 
case moving windows screen means moving description levels 
step moving description levels hyperdocument 
existing description level bpn boolean petri net generated step level create boolean petri net bpn contains bpn tower node add transitions places corresponding different description levels change description level possible hyperdocument 
usually possible moves description levels objects hyperdocument 
possible go description level description level 
graphically draw line description levels 
composite tower node instance moves description levels exist components composite 
graphical representation moves look service elevator shafts tower 
semantic role presentation storage type composite tower elevator shafts step changing views city moving towers city analogous links modeled boolean petri net 
special thing links tower node connected source anchor inaccessible links destination anchor connected tower node 
composite objects constructed objects 
assumed composite constructor effect browsing represented automaton 
finite state machine easily represented petri net petri net 
boolean petri net overlay top bpn translation standard petri net described 
step zoom operations composite objects usually graphical way 
individual objects represented iconic way selecting object opens zooms object 
possible zoom operation composite elements add transition bpn composite element 
done making composite inaccessible normally composite remain accessible 
zoom operation similar element typically inaccessible 
note notion composite objects tower model hyperdocuments hierarchical 
constraints saying links elements composite forbidden links element composite node outside composite forbidden 
composites tower model simply provide way superimpose grouping structure link structure 
turning composites objects possible provide links basic nodes composites vice versa tompa hypergraph model addition model consider composite links may instance represent series arguments tying set premises 
argumentation spaces form excellent example composite links 
step reduction standard petri nets bpn result steps 
create standard petri net pn follows place replaced places transition replaced transitions number places outgoing arrow incoming arrow 
simple construction clear 
boolean petri net standard petri net translation boolean petri net petri net 
translation simply replaces boolean place pair places value true value false 
node place presence token means node accessible place token means node inaccessible 
nodes token time 
order avoid generating token output place transition read value output place 
boolean place replaced normal places transition needed reads true place transition reads false place 
transitions write true place destination node accessible 
transition needed possible combination truth values destination places 
transition output places input place combinations equal number transitions 
exponential factor translation size standard petri net exponential number nodes destination single link 
call degree link 
hyperdocuments number cases number may larger small number 
case translation keeps close relationship nodes links hyperdocument places transitions standard petri net 
note total number tokens net constant net structurally bounded 
navigation techniques section discussed browser specific features translated virtual links description hyperdocument captured uniform platform independent manner 
example features concept guided tours 
guided tours attempt solve lost hyperspace problem giving predefined paths hyperdocument readers difficult choices go 
straightforward tours expressed sequences links 
features systems offer leaving guided tours returning start simply simulated virtual links 
history browsing example feature hypermedia systems offer give reader possibility just return path followed 
possibility just walk back path followed 
feature place bookmarks able return node bookmark set node visited 
fairly simple express features petri nets 
link backward link available 
similarly systems keep list nodes visited list containing bookmark visited node user jump back previously visited node 
shows needs added boolean petri net structure order represent feature lets user return previously visited node 
transition activates node marks node able return 
node jump global history node history 
illustrates easy add functionality navigational aids provided hypertext systems petri net representation history activate history history recall nodes recalled history boolean petri net representation history navigation analysis main advantages petri net approach availability powerful analysis methods 
powerful way analyze petri net construction called reachability graph referred occurrence graph coverability tree 
reachability graph answer variety questions node reachable 
links followed 
maximum number active nodes 
dead ends 
note questions answered specific initial state hyperdocument 
reduce size graph reduction techniques developed 
petri net possible calculate place transition invariants linear algebraic techniques 
invariants investigate dependencies nodes node active node active detect loops 
place transition invariants prove properties hyperdocument independent initial state 
similar techniques calculate traps deadlock petri net 
trap petri net indicates set nodes number active nodes set decreases 
siphon may indicate nodes unreachable transient nodes 
close relationship standard petri net hyperdocument easy interpret analysis results terms hyperdocument 
translation analysis results hyperdocument properties automated results obtained commonly available tools 
implementation complete history list backtracking mechanism popular navigation aids requires ability store node id stack 
extensions petri net formalism possible emulate stack petri nets resulting nets complicated analysis 
navigation problems originate structure hyperdocument navigation tools omit simulation 
reduction browsing hyperdocument tower model petri net take account possible temporal constraints hypermedia systems 
temporal constraints may different kinds ffl information contained node displayed time link anchor connected node followed 
modeled adding timestamp tokens petri net see 
timed petri net describe various aspects temporal behavior hyperdocument 
ffl anchors connected node may accessible time 
consider instance animation objects anchors appear disappear 
turning animation city object assigning anchors appropriate views creating links simulate sequence images animation assigning appropriate timestamps tokens views timed petri nets deal time constraints 
ffl link may take time 
simulated making transition add extra time timestamps produced tokens 
possible colored petri net petri net token specific value 
way possible model multiple browsing sessions time see stotts furuta nodes having specific attributes expiration dates access control lists petri nets extended time color investigated authors analysis tools nets built 
critics timed colored petri nets observe nets simulate turing machine interesting problems undecidable 
true number colors infinite usually case 
describing behavior hypertext interested infinite behavior hypertext limit timeline day 
analyzing behavior timed petri net day week course decidable 
described browsing hyperdocuments means petri nets represented hyperdocuments tower model standard petri nets timed petri nets depending temporal constraints 
restrictions mainly enforce finiteness navigation hyperdocument described independently behavior information elements 
translation hyperdocument corresponding petri net problems behavior petri net immediately traced back design errors hyperdocument missing undesirable links instance causing dead ends loops 
describing navigational semantics document included features typically available hypermedia system 
features explicitly stored documents 
examples possibility view node time close button removing old nodes screen buttons returning start table contents index node graphical interfaces enable user zoom nodes composite basing structure hyperdocuments general tower model description explicit implicit browsing semantics hyperdocuments powerful generally applicable previous browsing 
wil van der aalst eindhoven university technology help part boolean petri nets 
brown hypertext system unix 
computing systems 
campbell goodman ham general purpose hypertext machine 
commun 
acm 
de bra houben extensible data model hyperdocuments 
proc 
acm conf 
hypertext dec pp 

engelbart augmented knowledge workshop 
history personal workstations addison wesley pp 

furuta stotts trellis hypertext model 
proc 
hypertext standardization workshop national institute standards jan 
halasz schwartz dexter hypertext model 
proc 
hypertext standardization workshop national institute standards jan 
harel statecharts visual formalism complex systems 
science comp 
programming june 
jensen coloured petri nets 
basic concepts analysis methods practical 
eatcs monographs theoretical computer science 
springer verlag 
lange formal model hypertext 
proc 
hypertext standardization workshop national institute standards jan 
murata petri nets properties analysis applications 
proceedings ieee 
sauter open hypermedia system 
proc 
acm conf 
hypertext dec pp 

shneiderman user interface design electronic encyclopedia 
proc 
acm hypertext conf 
nov pp 

stotts furuta petri net hypertext document structure browsing semantics 
acm trans 
information systems 
stotts furuta ruiz hyperdocuments automata trace browsing property verification 
proc 
acm conf 
hypertext dec pp 

streitz haake lemke schuler sch utt th cooperative hypermedia authoring environment 
proc 
acm conf 
hypertext dec pp 

streitz ideas arguments hyperdocuments travelling activity spaces 
proc 
acm hypertext conf 
pp 

tompa data model flexible hypertext database systems 
acm trans 
information systems jan 
van der aalst timed coloured petri nets application logistics 
phd thesis eindhoven univ technology 
zheng pong 
statecharts model hypertext 
proc 
acm conf 
hypertext dec pp 

