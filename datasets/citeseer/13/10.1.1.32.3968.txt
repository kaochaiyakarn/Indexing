logical understanding delimited continuations extended kameyama graduate school informatics kyoto university japan kameyama kyoto ac jp delimited continuation called partial continuation notion representing partial rest computation 
proposals control operators delimited continuations understanding reach satisfactory level case call cc operator 
tries give better understanding delimited continuations 
types logical meaning guiding principle 
start simple type system control operators delimited continuations study type structure logical meaning obtain suitable representation encoding control operators nally obtain reduction rules induced types encoded terms 
result naturally arising control operators exactly existing ones operational meaning invocation delimited continuations arbitrary times 
study done purely logical way resulting operator ensured number desirable properties subject reduction con uence strong type preserving cps translation automatically obtained 
type system shift reset static analogue danvy filinski shift reset operators known control operators delimited continuations :10.1.1.42.4772
reduction evaluation context term variables reset operator shift operator binds example 
continuation closest delimiter captured object computation 
may think typing rules appropriate shift reset operators context variables 
set types 


fbg 

fbg type system shift reset shift operator may go reset operator reduces closest reset operator may di er encloses shift operator 
anomaly comes dynamic nature shift reset 
murthy introduced elaborated type system hierarchy shift reset 
changed function type type th delimiter annotates function type complicates type structures bit 
aim nd essential logical structure delimited continuation operators want treat complicated system 
insist simple type system see control operators arise type system 
amounts considering static analogue shift reset operators 
summary address problem nd computational interpretation typing rules see relation existing control operators shift reset 


fbg 

fbg logical analysis rst note rst typing rule things time discharges type works weakening rule 
splitting rst rule rules obtain rules 
fbg 
fbg 

fbg throw 

fbg catch second throw third catch rules catch throw rules nakano sato static catch throw calculus key rules parigot calculus 
calculi known give simple formulations classical propositional logic 
say logical meaning rules known 
task understand rst rule marked 
views classical inference peirce inference admissible rule classical logic derived catch throw rules 
ii purely intuitionistic inference 
rule catch rule corresponds intuitionistic logic derive intuitionistic reasoning 
possible way 




corresponding views obtain di erent interpretations delimited continuations 
terms reductions previous section concentrated types static analogue delimited continuation operators 
section consider corresponding terms naturally arise interpretation typing rules see reduction rules 
representation terms attach tag explicit correspondence shift reset 
denoted rst view rst view obtain de nitions catch throw catch new tag 
interpretation interesting throw tag shift operator call cc operator 
little interesting interpretation catch throw throw catch rst sight may look interesting reduces throw captures delimited continuation turns representation call cc mechanism rei ed continuation object throw contains throw operator discards current continuation note important property delimited continuation composable normal functions 
case rst view lead proper formulation delimited continuations 
second view second view implies de nition throw catch new tag 
evaluation context contains exactly instance reduction sequence catch throw catch throw catch throw catch throw result case identical original shift reset 
particular result contains function object delimited continuation represents control operator delimited continuation 
contains occurrences operators result may original shift reset 
encoding generated similar di erent control operator existing 
argue large number examples contains occurrence shift operator danvy ip op danvy filinski cps translation partial evaluator examples encoding provides sound logical foundations reason properties programs 
static catch throw operators encoding done call value version parigot calculus 
implications encoding encoding control operators uses logically established machinery obtained straightforwardly 
higher order ness types delimiters limited atomic types shift reset obtains sound cps translation arbitrary types functional types allowed case 

properties subject reduction con uence strong normalization obtained automatically static catch throw calculus call value calculus 

simple type preserving cps translation obtained type preserving cps translation callby value calculus 
obtain expository static aspect delimited continuation operators grasped sound logical systems static catch throw calculus calculus 
apparently result give full understanding delimited continuations result applies static variants limited side ect free calculi duplicated context 
hand static nature compromised abstraction mechanism tag believe gives rst step logical understanding control operators delimited continuations 

danvy filinski abstracting control proc 
acm conference lisp functional programming pp 


danvy filinski representing control study cps transformation mathematical structures computer science pp 


de groote cps translation calculus lecture notes computer science pp 


felleisen theory practice class prompts proc 
th acm symp 
principles programming languages pp 


hieb dybvig anderson subcontinuations lisp symbolic computation pp 


kameyama type theoretic study partial continuations proc 
ifip international conference theoretical computer science ifip tcs sendai japan lecture notes computer science pp 

murthy control operators hierarchies pseudo classical type systems translation proc 
acm workshop continuations pp 


nakano constructive formalization catch throw mechanism conf 
rec 
ieee symposium logic computer science pp 


parigot calculus algorithmic interpretation classical natural deduction proc 
intl conf 
logic programming automated reasoning lecture notes computer science pp 


sato intuitionistic classical natural deduction systems catch throw rules theoretical computer science pp 


