provably bounded optimal agents stuart russell university california berkeley ca usa russell cs berkeley edu subramanian cornell university ithaca ny usa cs cornell edu ronald parr university california berkeley ca usa parr guard berkeley edu program bounded optimal computational device environment expected utility program running device environment high programs device 
bounded optimality differs decision theoretic notion rationality explicitly allows finite computational resources real agents 
central issue foundations artificial intelligence 
consider restricted class agent architectures program consists sequence decision procedures generated learning program priori 
class agents give efficient construction algorithm generates bounded optimal program episodic environment set training examples 
algorithm includes solutions new class optimization problems scheduling computational processes real time environments 
class appears contain significant practical applications 
artificial intelligence philosophers economists looked satisfactory definition rational behaviour 
needed underpin theories ethics inductive learning reasoning decision making economic modelling 
doyle proposed ai defined computational study rational behaviour 
decisiontheoretic definition rational behaviour maximization expected utility analogous definitions context logical planning extremely valuable allowing ai research done level independent specific implementations 
systems said satisfy required inputoutput relations 
unfortunately approaches limited value ignore total reaching optimal decisions realistic situations 
propose concept bounded optimality utility decision function quality time taken choose 
give formal definition informally say agent exhibits bounded optimality program solution constrained optimization problem architecture 
section necessarily brief discussion relationship bounded optimality earlier notions rationality 
note particular important distinctions missed precise definitions terms 
section introduce formal definitions agents programs behaviour rationality 
section examines class agent architectures problem generating bounded optimal configurations efficiently soluble 
solution involves new class interesting practically relevant optimization problems 
examine types episodic real time environments derive bounded optimal programs regimes 
describe set open theoretical experimental issues including asymptotic version bounded optimality may robust tractable strict version 
historical perspective classical idea perfect rationality developed mill put formal footing von neumann decision theory stipulates rational agent act maximize expected utility 
expectation taken agent beliefs perfect rationality require omniscience 
artificial intelligence logical definition rationality known philosophy practical syllogism put forward mccarthy reiterated strongly newell definition agent take action believes guaranteed achieve goals 
ai said theoretical foundation definition rationality provided 
term ralph rational agent limited performance hardware denote agent exhibits bounded optimality 
say wrong approach time 
mccarthy believed probably correctly economists rationality model economic entities purposes economic forecasting designing market mechanisms 
unfortunately simon pointed real economic entities limited time limited powers deliberation 
proposed study bounded rationality investigating shape system effectiveness computation important weapons survival 
simon focussed mainly satisficing designs deliberate reaching solution satisfying preset aspiration level 
results descriptive value modelling various actual entities policies prescriptive framework bounded rationality developed 
emphasized conceptual distinction classical type rationality called type ii rationality maximization expected utility account deliberation costs 
means agent exhibits type ii rationality deliberation subsequent action subjective utility maximized compared possible deliberate act pairs engaged 
define space possible deliberations informal descriptions clear type ii rationality intended prescribe optimal sequences computational steps 
unfortunately may harder select actions 
recognizing problems suggested definition minimal rationality specifying lower bounds reasoning powers rational agent upper bounds 
philosophical proposal generally consistent notion bounded optimality dennett moral aid manual researchers ai discussed worked problem designing agents limited computational resources aaai symposium ai limited rationality contains interesting variety topic 
metareasoning reasoning reasoning important technique area enables agent control deliberations costs benefits 
combined idea anytime flexible algorithms return better results time goes simple form metareasoning allows agent behave real time environment 
breese apply similar ideas controlling multiple decision procedures 
russell wefald give general method certain aspects metareasoning system efficiently estimate effects individual computations intentions giving finegrained control reasoning 
techniques seen approximating type ii rationality provide useful insights general problem control reasoning reason suppose days formal intractability results computation known early stages field important concentrate epistemological adequacy heuristic adequacy 
simon says global optimization problem find cost best return decision net computational costs approximations optimal sense 
horvitz uses term bounded optimality refer optimization computational utility set assumptions expected problems constraints reasoning resources 
russell wefald say agent exhibits bounded optimality program solution constrained optimization problem architecture 
philosophical move optimizing actions deliberation sequences optimization programs key proposal 
reality designers intelligent agents direct control agent actions deliberations generated operation agent program 
prescriptive specification actions type deliberations type ii may produce impossible constraints specifications realized program agent 
precise definition space agent programs important part study bounded optimality 
section build suitable set definitions ground demonstrate examples provably bounded optimal agents 
agents architectures programs intuitively agent just physical entity wish view terms perceptions actions 
counts instance necessarily thinks thinks 
initial refusal consider constraints internal workings agent reason logically example helps ways allows view cognitive faculties planning reasoning occurring service finding right thing second room take position systems right thing cognitive faculties third allows freedom consider various specifications boundaries interconnections subsystems 
agent described abstractly mapping agent function percept sequences actions mapping implemented agent program 
design evaluation agents behaviour agent program environment 
set percepts agent receive instant set possible actions agent carry external world 
definition agent function mapping set possible percept sequences 
agent function entirely entity agent program 
computability theory relates functions finite representations programs running machine 
move analogous development rule act 
etzioni russell zilberstein seen optimizing defined set agent designs 
consider physical agent consisting architecture program 
architecture responsible interfacing program discrete deterministic environment running program 
architecture associate finite programming language lm just set programs runnable architecture 
agent program program lm sequence percepts provided architecture program sequence actions generated th action occurs percept percept 
architecture maps percept sequence length action sequence length program running 
behaviour agent sequence actions generates 
definition architecture fixed interpreter agent program lm theta purposes define environment set world states mappings defining effects actions generation percepts definition environment set world states mappings ta theta tp 
important note program induces mapping sense action percept necessarily agent response percept delay incurred deliberation may reflect percepts occurring earlier sequence may possible associate action particular prior percept sequence 
bounds rationality expected utility action possible outcomes ij agent prior evidence environment ij ij real valued utility function states 
definition perfect rationality agent perfectly rational iff selects action argmax maximize expected utility 
definition persuasive specification agent function underlies current projects intelligent agent design 
direct implementation specification ignores delay incurred deliberation yield reasonable solution problem calculation expected utilities takes time real agent 
neglecting fact limited resources computation classical decision theory fails provide adequate theoretical basis artificial intelligence 
finitary arises real agents finite computational power don time world 
terms simple formal description agents introduced easy see difficulty arisen 
designing agent program decision theorists concentrated specifying optimal agent function opt order guarantee selection best possible action situation 
function opt independent architecture unfortunately behaviour program implements function may desirable 
delay computing opt means th action may optimal respect earlier subsequence totally inappropriate 
bounded optimality escape propose machinedependent standard rationality optimality constraints imposed programs agent functions deliberations behaviours 
formalize idea helpful assume real valued utility function histories sequences world states 
assign values program sequence states drives environment run starting world result result denotes state sequence generated execution program defined obvious way ta tp initial state environment known optimal agent program definition optimal agent program opt argmax lm designer probability distribution initial state environment model introduce distribution state sequences generated optimal program highest expected value distribution 
provably order construct provably rational agent limited performance hardware ralph carry steps ffl specify class machines programs run 
ffl specify properties environment actions taken utility function behaviours 
ffl propose construction method 
ffl prove construction method succeeds building 
production system architectures study simple form production system condition action rules form oe applicable left hand sides true 
simple system easily resources real time agent rule base large conditions complex 
agent implemented production system contain approximate rules action guaranteed best possible condition oe obtains world 
illustrative example provided image processing algorithms automated mail sorter 
machines scan handwritten printed addresses mail pieces dispatch accordingly 
scanned image processed procedures designed read varying degrees accuracy resource expenditure procedure may possible variants example vary number hidden nodes neural network recognizer 
prevent jams mail piece sorted appropriately rejected time stochastic arrival piece 
object maximize accuracy sorting minimizing reject percentage avoiding jams 
consider special case production system complete rules decision rules matched fixed sequence 
call sequence production rules strategy 
rule associated match time quality corresponds utility rule recommended action taken episode 
assume rule drawn rule language 
keeping scheduling literature term job refer rule sequence 
mj denote production system architecture accommodate rules maximum size rule language example consider feedforward neural networks nodes 
executing typical sequence hr agent matches rule turn current percept generating recommended action 
time episode decide act selecting highest quality action recommended rules previously matched 
quality rule chosen value episode agent function regimes described 
episode begins agent may know act example stochastic deadline case generally speaking value strategy expectation 
episodic real time environments place restrictions environment order simplify problem 
need learn utility information order avoid temporarily credit assignment problem assume episodic environment non null action agent reward received environment reaches unknown state drawn probability distribution remains stationary time 
initial state drawn distribution 
mail sorting example reward correct dispatch incorrect dispatch say reject gamma jam 
order talk deadlines time cost useful notion inaction 
noop denote sequence null actions lasting time steps 
denote sequence world states action sequence drives environment initial state delta denote concatenation sequences 
define typical real time regimes fixed time cost fixed deadline stochastic deadline 
definition fixed time cost action state state sequences delta delta noop delta delta delta delta delta gamma ct constant definition fixed deadline action state state sequences constant delta delta noop delta delta ae delta delta delta gamma deadlines represented utility cliff occurring time episode 
case stochastic deadline describes mail sorter location utility cliff known exactly 
assume designer value noop random variable distributed way action probability zero utility episode 
corresponds cumulative distribution function deadline arrival time 
construction algorithm general scheme exhibit algorithm capable learning sets individual decision procedures arranging sequence performance agent sequence agent 
construction algorithm operating returns program architecture opt 
observing set training episodes building approximately optimal strategy learning algorithm lj learning rules size rule language procedure 
flj ng 
optimize addition constructing decision rules lj outputs estimates rule quality assume rule match times deadline distribution stochastic case known 
algorithm optimize extracts optimal strategy assume percept immediately precedes actual deadline allowing agent respond step 
agent walking blindfolded utility cliff interesting problem 
rule set subsections describe variants optimize 
results fixed time cost case straightforward 
value strategy max gamma theorem optimal strategy fixed time cost utility functions singleton argmax gamma ct 
results fixed deadline case straightforward 
value strategy ae max gamma theorem optimal strategy singleton sequence highest rules results stochastic deadlines stochastic deadline distributed value strategy expectation 
calculated summation jobs interrupted probability interruption times quality best completed job gamma max convenience define sm 
formula prove number properties optimal strategies 
simple example serves illustrate value function 
consider fr rule quality needs seconds run represent 
rules 
deadline density function dp dt uniform distribution seconds 
value sequence gamma gamma gamma geometric intuition notion performance profile shown 
uniform deadline density function value sequence proportional area performance profile possible interrupt time 
note height profile interval length job running quality best previous jobs 
lemma gives extremely useful property optimal sequences lemma exists optimal sequence sorted increasing order henceforth need consider ordered strategies 
means equation replaced lemma establishes strategy improved addition better job performance profile superimposed 
lemma sequence sorted increasing order quality single step sm sz 
corollary exists optimal strategy highest quality job proofs results appear dynamic programming algorithm dynamic programming method obtain optimal sequence decision rules pseudopolynomial time 
assume time associated rule integer loss generality standard rounding scaling methods keeping lemma assume optimal strategies ordered algorithm constructs table entry table highest value sequence ends rule time assume rule indices arranged increasing order quality ranges start time time update rule max gamma gamma gamma gamma corollary read best sequence highest value row matrix theorem dp algorithm computes optimal sequence time number decision procedures uniform distributions deadline uniformly distributed initial interval obtain optimal sequence strongly polynomial time 
initially assume interval longer possible sequence 
probability deadline arrives job sequence just 
simple recursive specification value sequence job gamma sm dynamic programming algorithm state function highest value rule sequence rule lemma equation update rule max gamma boundary condition gamma 
tabulated time obtain optimal sequence 
rules fit deadline distribution corollary rule rule highest quality 
rule rule non zero chance completing check candidate theorem optimal sequence decision procedures uniformly distributed stochastic deadline determined time number decision procedures agnostic learning decision rules learning algorithm lj searches best rule order environment agnostic assumptions target function form correct decision rule 
searches best subject complexity parameter bounds size rules 
kearns schapire sellie shown theorems languages error learned approximation bounded ffl best rule fits examples probability gamma ffi sample size needed guarantee bounds polynomial complexity parameter ffl ffi approximate rule certain complexity ng learned statistically estimate quality standard chernoff hoeffding bounds limit error quality estimate ffl probability gamma ffi sample size needed polynomial ffl ffi error agnostically learned rules bounded ffl best rule complexity class probability gamma ffi error quality estimation rules bounded ffl probability gamma ffi show policy selection methods real time regimes incur deficit ffl ffl choice optimal sequence rules 
bottom line state bounded optimality theorem construction procedure 
theorem assume production system architecture mj operating episodic environment 
real time regimes defined probability greater gamma ffi gamma ffi construction procedure returns program opt gamma ffl ffl seeing number episodes polynomial ffl ffl ffi ffi furthermore computation time worst polynomial quantities sum rule execution times 
theorem practical applications mainly intended illustration derivation bounded optimal agent 
additional general error bounds derived case rule execution times real time utility variation time cost fixed deadline deadline distribution estimated training episodes 
plan extend directions follows 

foundational issues learning agents agent design optimized includes learning component notion bounded optimality interesting take account agent configuration evolve time reflecting expected obsolescence 
asymptotic bounded optimality strict notion bounded optimality may useful philosophical landmark explore artificial intelligence may strong allow interesting general results obtained 
just complexity theory absolute efficiency aim asymptotic efficiency game speak studying bounded optimality asymptotic version help 
need class environments unbounded complexity measure environments 
say agent program asymptotically bounded optimal iff km opt km denotes version machine speeded factor english means program basically right lines just needs faster machine best program problems certain level difficulty 
asymptotic bounded optimality generalizes standard definition asymptotic complexity 
class environments problem input machine time input size measure 
return decreasing function program outputs correct solution time programs 
program bounded optimal iff asymptotic complexity equal tight lower bound class note standard complexity allow constant factor execution time program definition uses constant factor speed machine 
standard setting equivalent general time dependent utilities appropriate 

scheduling issues existence polynomial time algorithms approximation schemes variants computation scheduling problem scheduling algorithms situations solution qualities individual processes interdependent results scheduling combinations computational physical job shop flow shop processes objective functions combination summation maximization computation scheduling parallel machines multiple agents 

learning issues relaxing stationarity requirement environment entails generalizing pac model handle case fact agent learns may effect distribution episodes relaxing episodic requirement allow rewards entails addressing credit assignment problem examining variants agnostic learning model find practically useful theoretical scenario 

applications despite deliberate simplicity architecture construction algorithm applied directly problems scheduling image processing algorithms mail sorter 
scheduling mixed computational physical processes mentioned broadens scope applications considerably 
industrial process designing manufacturing car consists computational steps design logistics factory scheduling inspection physical processes stamping assembling painting 
easily imagine applications real time financial industrial military contexts 
short proposing new line inquiry bounded optimal agents value decision judged terms effect actions performed agent noting actions computations time value 
bounded optimality may provide suitable basis theoretical research artificial intelligence 
asymptotic bounded optimality particular promises yield useful results composite agent designs optimality preserving composition methods robust measure rationality possible ai big descriptions complexity theory 
bounded optimality philosophically interesting implications 
example rule longer talk rational actions individual actions deliberations bounded optimal agent may arbitrarily irrational classical sense 
furthermore theoretical research design apply practice artificial intelligence way idealized infinite resource models may 
way illustrating definition bounded optimal agent design simple rule system learning mechanism provably efficiently converges rational configuration 
agre chapman 
pengi implementation theory activity 
proc 
th national conference artificial intelligence seattle wa morgan kaufmann 
breese 
control problem solving principles architecture 
shachter levitt kanal lemmer 
eds 
uncertainty artificial intelligence 
amsterdam north holland 
brooks 
robust layered control system mobile robot 
ieee journal robotics automation 

minimal rationality 
cambridge mit press 
dean boddy 
analysis timedependent planning 
aaai 
dennett 
moral aid manual 
tanner lectures human values university michigan 
doyle 
rational psychology 
modern mental philosophy 
ai magazine 
etzioni 
tractable decision analytic control 
proc 
st international conference knowledge representation reasoning 
russell 
eds 
proceedings aaai spring symposium limited rationality 
stanford ca 

principles rationality 

eds 
foundations statistical inference 
toronto holt rinehart winston 
horvitz 
reasoning beliefs actions computational resource constraints 
levitt lemmer kanal 
eds 
uncertainty artificial intelligence 
amsterdam north holland 
horvitz cooper heckerman 
reflection action scarce resources theoretical principles empirical study 
proceedings eleventh international joint conference artificial intelligence detroit mi morgan kaufmann 
kearns schapire sellie 
efficient agnostic learning 
proc 
th ann 
workshop computational learning theory 
pittsburgh pa morgan kaufmann 
mccarthy 
programs common sense 
proceedings symposium mechanization thought processes england 
newell 
knowledge level 
ai magazine 
nilsson 
logic artificial intelligence 
artificial intelligence 
russell subramanian 
provably rational agents limited performance hardware 
baum 
ed 
computational learning cognition proceedings third nec symposium siam press 
russell wefald 
principles metareasoning 
proc 
kr 
russell wefald 
right thing studies limited rationality 
cambridge ma mit press 
russell zilberstein composing realtime systems 
proc 
ijcai sydney 
savage 
foundations statistics nd rev ed 
new york dover 
simon 
decide 

simon 
models bounded rationality volume 
cambridge mit press 
valiant 
theory learnable 
communications acm 
von neumann morgenstern 
theory games economic behavior 
princeton princeton university press 
