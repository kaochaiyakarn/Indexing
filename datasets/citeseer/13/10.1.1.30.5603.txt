sumatra language resource aware mobile programs anurag acharya ranganathan joel saltz department computer science university maryland college park cs umd edu 
programs mobility mechanism adapt resource changes requirements shared mobile programs 
need monitor level quality resources operating environment 
second need able react changes resource availability 
third need able control way resources behalf libraries support code 
chapter describe design implementation sumatra extension java supports mobile programs 
describe design implementation distributed resource monitor provides information required sumatra programs 
mobile programs move active thread control site execution 
flexibility potential advantages 
example program searches distributed data repositories improve performance migrating repositories performing search site fetching data current location 
similarly internet video conferencing application minimize response time positioning server location users 
applications running mobile platforms react drop network bandwidth moving network intensive computations proxy host static network 
primary advantage mobility scenarios tool adapt variations operating environment 
applications online information operating environment knowledge resource requirements judicious decisions placement computation data 
systems provide form support program mobility 
simplest form support ability download code execute completion single site provided systems safe tcl java 
systems ncl rev obliq allow programs execution initiate computation remote nodes wait completion 
sophisticated support provided systems agent research supported arpa contract syracuse subcontract tcl emerald mole aglets tacoma telescript permit executing program move execution 
programs mobility mechanism adapt resource changes requirements shared mobile programs 
need aware execution environment 
particular need monitor level quality resources operating environment 
refer awareness requirement 
second need able react changes resource availability 
refer agility requirement 
third need able control way resources behalf libraries support code 
refer authority requirement 
chapter describe design implementation sumatra extension java supports resource aware mobile programs 
describe design implementation distributed resource monitor provides information required sumatra programs 
discuss constraints requirements awareness agility authority place languages mobile programs 
describe sumatra discuss design decisions guided constraints 
discuss considerations guide design resource monitors particular fault tolerance need allow applications control resources behalf 
describe distributed resource monitor discuss design meets requirements 
sumatra implemented available individuals organizations sun jdk license 
provide implementation details appropriate 
chapter assume reader familiar mobile code languages java obliq agent tcl 
chapters book provide excellent introductions class languages mechanisms implement mobility 
design constraints section discuss language design constraints arise desire resource aware mobility mechanism adapt changes resource availability 
discuss requirements awareness agility authority constraints generates 
section describe sumatra discuss design guided constraints 
awareness resource aware programs need able monitor availability quality resources environment 
resource monitored demand continuously 
kinds monitoring useful 
demand monitoring useful kinds situations 
resource question infrequently expensive application mobile host uses cell modem periodically scan incoming mail held post office machine 
second availability resource question changes infrequently application chooses location monitors process amount disk space available location 
third resource expensive monitor cost monitoring outweighs potential gains application accesses large volumes data slow link 
continuous monitoring useful resource frequently resource changes frequently cheap monitor 
demand monitoring necessity synchronous 
request information return till information available 
continuous monitoring hand support synchronous asynchronous interfaces 
synchronous request return immediately information current availability resource question asynchronous request monitor resource notify application resource availability longer satisfies application specified predicate 
synchronous interface suitable example application sends sequence large messages checks state network sending message 
asynchronous interface useful example application uses resource continuously receiving video stream network application network calls library routines may 
asynchronous interface useful inform applications qualitative change operating environment example platform mobile may need switch multiple wireless networks 
continuous monitoring important decision granularity resource change monitored 
simplest alternative report change requesting application 
impractical resource levels jitter usually little impact application performance 
simplest alternative jitter threshold track changes larger threshold 
jitter threshold schemes proposed researchers way dealing resource variability mobile platforms 
jitter threshold schemes changes resource levels usually stable 
transient changes usually just spikes resource levels cause spurious responses 
alternative augment jitter scheme filter eliminates transients 
allows applications track stable changes 
important allow applications register application specific resource specific filters determine changes resource availability quality reported requesting application 
summarize languages resource aware mobile programs provide resource monitoring interface allows demand monitoring continuous monitoring 
continuous monitoring resource monitoring interface allow programs register application specific filter determines resource changes reported 
agility achieve agility mobile code language provide mechanisms allow programs react quickly asynchronous events revocation allocated bandwidth memory qualitative changes network connectivity mobile host 
mechanisms required 
ability receive event asynchronous manner la unix signals second ability take appropriate action response events including moving program execution different site 
requirement programs able move event handling code constrains choice mobility mechanisms 
major alternatives go jump primitive freezes execution current site resumes execution target site function call mechanism allows programs execute procedure specified site 
mobile code languages selected alternatives 
agent tcl telescript aglets go mechanism obliq ncl rev tacoma function call interface 
ensure prompt response asynchronous events function call interface require things language automatically captures continuation point event occurs available corresponding event handler programmer emulates functionality writing large number functions represent continuations different points programs 
cases language allow continuation passing style 
believe go interface simpler astute reader probably noted option exactly effect go 
authority requirement authority far demanding 
requires language allow programs control way resources behalf system support libraries 
effect requires module boundaries completely opaque allow resource usage related restrictions pass enforced part execution 
trade extent programs allowed control resource ease programming 
extreme language require operations resources interest performed explicitly authorized 
allows complete control resource usage 
unauthorized accesses raise exception 
scheme similar java applets control access local resources see example 
works java applets level access local resources usually changed execution program advantage retrying operation 
hand entirely possible response authorization failure resource usage cases change level authorization 
cases retrying operation desirable 
problem authorization failures occur deep library code 
may may possible restart operation failure delivered exception 
example consider code 
example assume resource interest number sockets 
call succeeds second fails say program created sockets permitted exception raised 
common response situation negotiate resource manager higher limit number sockets restart operation 
clean restart possible socket created 
situation dealt treating resource violation asynchronous event allowing programs associate handler restriction resource 
handler executed context operation caused violation allow operation restarted desired 
summarize forms control resource desirable checking operations resources interest authorization delivering exception usage authorized considering violation asynchronous event allowing programs associate event handlers resource restrictions execute context faulting operation 
public boolean mkdir security system security null security path return mkdir public boolean file dest security system security null security path security dest path return dest fig 

excerpts java class libraries illustrate access local resources controlled 
actual operations creating directory renaming file performed mkdir 
public boolean string host int port boolean stream resource system resource null resource host port stream return socket host port stream private socket socket private socket socket public void string host string host int port boolean stream socket host port stream socket host port stream fails authorization check fig 

sample java code illustrate problem restarting operations fail authorization checks 
code assumes java extended resource manager similar current security manager 
design implementation sumatra sumatra extension java supports resource aware mobile programs 
platform independence primary rationale choosing java base effort 
design sumatra altered java language 
sumatra run legal java programs modification 
added functionality provided extending java class library modifying java interpreter affecting virtual machine interface 
sumatra adds programming abstractions java object groups resource monitoring asynchronous events 
object group dynamically created group objects 
objects dynamically added removed object groups 
objects object group treated unit mobility related operations 
allows programmer customize granularity movement amortize cost moving tracking individual objects 
object groups allow programmer control lifetime objects 
objects included object group continue live host thread created completes execution migrates host 
objects belong object group subject garbage collection usual 
execution engine corresponds notion location distributed environment 
concrete terms corresponds interpreter executing host 
multiple engines exist single host 
sumatra allows object groups moved execution engines 
execution engine may host active threads control 
currently multiple threads engine scheduled run completion manner 
plan implement scheduling strategies 
threads move engines 
resource monitoring support sumatra allows programs query level resource availability control extent various resources program library code linked 
demand continuous monitoring supported 
continuous monitoring resource monitoring interface allows programs register jitter thresholds determine resource changes reported 
sumatra asynchronous events notify executing programs urgent changes execution environment 
notifications come interpreter external environment operating system administrative process 
expect interpreter asynchronous events notify program violations requested program expect external environment asynchronous events inform program changes environment interpreter including resource revocation 
sumatra allows programs register handlers asynchronous events 
handlers asynchronous events able inspect current state execution take appropriate action including moving away current execution site changing resource restrictions force 
sumatra computation begins single site spreads sites ways remote method instantiation remote thread creation thread migration 
remote method instantiation corresponds familiar notion rpc remote procedure call calling thread suspended operation performed request remote site 
remote thread creation differs remote method instantiation new thread independent creating thread creating thread continues execution creation complete 
thread migration involves stopping execution calling thread current site transferring state site resuming execution site 
subsections describe design implementation sumatra 
subsections describe programming abstractions mentioned 
final subsection discusses design decisions guided constraints described previous section 
execution engines execution engines correspond interpreters identified hostname port number listen 
created specifying parameters constructor 
error conditions possible remote host unreachable due network partition remote host remote host may allow creation interpreters desired port number 
exception returned error conditions error message provides additional information 
possible error conditions include authorization errors 
execution engines support operations thread migration remote thread creation downloading code 
presents execution engine interface 
sumatra allows explicit thread migration go method bundles stack program counter moves thread specified execution engine 
execution resumed instruction call go 
automatically marshal stack sumatra interpreter maintains type stack parallel value stack keeps track types values stack 
thread migrates sumatra transports local objects referenced stack belong object group 
objects belong object group move object group moved 
stack objects left part converted proxy 
thread moved target site possible stack contains proxy point objects remote local 
converted back local call go returns 
error conditions occur execution go remote host unreachable remote host may interpreter implementing execution engine died remote site may local classes program need executing site 
exception returned error conditions error message provides additional information 
new thread created rexec ing main method class existing remote engine 
arguments new thread copied moved remote site 
remote thread creation non blocking calling thread resumes immediately main method call sent remote engine 
note remote calls main method blocking calling thread suspended till execution main completes 
remote thread creation different thread migration creates new thread remote site runs concurrently original thread thread migration moves current thread remote site creating new thread 
concurrent threads communicate calls shared objects 
thread creating new thread share objects child passing objects arguments main 
sumatra automatically move code go operation rexec operation 
method download class template object associated bytecode 
allows programs control environment extent class program decide implementation implementation provided host executing 
downloaded cached classloader checks cache checking local file system 
host retains complete control classes downloaded reject operations attempt replace critical classes 
implementation mechanism similar familiar inetd daemon manage creation execution engines 
master daemon runs machines allow creation execution engines listens known socket 
execution engine creation request received creates new interpreter process attempts bind specified socket 
operations fail exception value returned 
master daemon responsible checking authorization 
currently authorization checks implemented 
execution engine operations currently implemented native methods 
shows interface sumatra communication package implement operations 
note need implemented java rmi layered java classes 
java rmi available implementing sumatra 
java provide user level primitive serialize stack implemented public final class engine public string hostname public int port public engine string int public void string classname public void go public native void rexec string classname string args fig 

sumatra engine interface object groups primary properties object groups 
aggregates 
move group 
second sticky 
moved explicit move object group operation move migrating threads 
third persistent 

long object member object group spared garbage collector 
presents sumatra object group interface 
string name associated creation time object group 
name identify different object groups 
sumatra check system wide uniqueness name 
check local uniqueness attempts create object group name raises exception 
public final class comm save state current thread transmit public static native void string hostname int invoke rpc call walks stack get arguments public static native object throws download class execution engine public static native void string classname engine engine start execution engine machine public static native void string hostname engine engine find current engine public static native engine fig 

sumatra communication package objects dynamically added removed object group checkin checkout methods respectively 
moveto method move object group different execution engine 
membership object groups explicit member object group checked explicitly 
moveto shallow move objects explicitly checked moved 
accordance authority requirement communication takes place explicit request 
thread objects checked object group 
restriction imposed including thread object object group require thread move object group 
causes problems 
cause migration executing threads arbitrary points 
restricting migration syntactically marked program points advantages see advantage second moving thread cause objects moved violate authority requirement 
moveto operation objects object group automatically marshaled type information stored class templates 
moved local objects group stack objects converted proxy record new location object 
objects objects tightly bound local resources moved 
objects reset reinitialized new site 
error conditions possible remote host unreachable due network partition remote host remote execution engine may contain classes corresponding objects moved remote execution engine may contain object group name 
exception returned error condition error message provides additional information 
method invocations proxy objects translated calls remote site 
type information stored class templates achieve call functionality stub compiler 
exceptions generated called site forwarded caller 
accordance authority requirement sumatra automatically track mobile objects 
requesting remote method invocation object longer called site results object moved exception calling site 
facilitate applicationlevel tracking exception carries forwarding address 
caller handle exception deems fit re issue request new location migrate new location raise exception 
mechanism allows applications locate mobile objects lazily paying cost tracking need 
allows applications abort tracking need pursue alternative course action 
possible application specify exception delivered methods invoked proxy objects 
allows application avoid communication desires 
furthermore sumatra support direct access instance variables remote objects 
variables accessed remote invocation access methods return values instance variables 
keeping authority requirement 
implementation object groups implemented lists objects 
execution engine list lists 
object group operations implemented native methods 
main reason interaction object groups garbage collector 
objects belong object group garbage collected 
possible re implement feature portably keep alive thread lives forever exists sole purpose keeping objects garbage collected 
public final class public string public string name public native void checkin object object public native void checkout object object public native void moveto engine engine public native engine location private native void fig 

sumatra object group interface resources asynchronous events sumatra provides resource monitoring interfaces allows application poll state particular resource allows request asynchronous notification availability resource goes outside specified threshold 
presents interface demand monitoring 
program indicates interest resource creating resource object appropriate arguments 
resource monitored associated single host server load argument ignored 
request continuous monitoring consists pair values defining range resource availability upper lower bounds bandwidth upper bound frequency polling function called resource availability longer range uses interface asynchronous events shortly 
sumatra provides single interface shown handling kinds asynchronous events 
create event handler user creates new subclass callback class creates object class registers system 
event handler function specified overriding callback method 
note method declared subclass override 
callback method completes control returns point interruption happened 
call go embedded callback method execution resumes target host 
kind asynchronous events currently supported asynchronous notification continuous resource monitoring violation resource restrictions external events form unix signals 
class events require upper lower bounds frequency bound specified methods 
second class events requires upper bound 
third class events unix signals require signal number 
signals external environment operating system administrative process inform application urgent asynchronous events particular resource revocation 
handler application take appropriate action including moving away current execution site 
implementation sumatra assumes local resource monitor available queried information environment 
application monitoring request sumatra forwards request local resource monitor 
monitor support requested operation monitor available exception raised 
communication sumatra monitor known shared memory segment 
allows sumatra cheaply acquire rapidly changing resource information 
ondemand monitoring requests implemented directly reading segment 
demand monitoring default polling frequency resource monitor 
event handlers need registered explicitly 
depending type event registered different structures set inside interpreter 
asynchronous notification continuous monitoring implemented unix signals 
interpreter uses handler unix signals identity signal saved event queued 
event queue checked java virtual machine instruction 
resource restrictions implemented interpreter activating counters keep track resource usage 
counters collected single module currently implemented easy re implement entirely java sumatra lines security manager 
currently memory restriction implemented 
public final class resource public resource string type string string public int read value fig 

sumatra demand monitoring interface 
public class callback callbacks asynchronous notification public callback resource callbacks external event handlers public callback int type public void int low public void int high public void int freq public resource get resource public void callback fig 

sumatra event handling interface 
discussion section discuss ways design sumatra influenced agility authority requirements 
calls go occur particular embedded inside callback methods 
allows sumatra programs react quickly asynchronous events revocation allocated bandwidth memory qualitative changes network connectivity mobile host 
design alternative go interface allow migration function call boundaries 
ensure prompt response asynchronous events require things language automatically captures continuation point event occurs available corresponding callback method programmer emulates functionality writing large number functions represent continuations different points programs 
cases language allow continuation passing style 
believe go interface provided sumatra simpler easier implement 
remote accesses trapped parts 
sumatra allow programs access instance variables remote objects 
attempts result exception raised 
second programs request exception raised methods invoked proxy objects 
features program turn communication desires 
objects moved tracked groups allows application control granularity operations 
object groups tracked lazily application control 
requesting remote method invocation object longer called site results object moved exception calling site 
exception carries forwarding address allows application continue tracking re issuing request new location abort tracking desires 
membership object groups explicit objects explicitly added object group belong 
object component objects added object group top level object member object group 
include component objects object group explicitly added 
allows application precisely control objects moved 
distributed garbage collection sumatra provides distributed garbage collection 
responsibility application ensure objects longer needed removed object groups 
note sumatra provide local garbage collection 
object groups sticky objects belong object group move object group moved 
thread migrates sumatra transports local objects referenced stack belong object group 
life time object controlled object groups member objects subject garbage collection 
implemented adding list object groups set roots garbage collector 
ensures objects belong object groups transitive closure spared garbage collector 
allows applications temporarily deposit data intermediate execution sites extend existing servers downloading objects extend current functionality 
legal object belong multiple object groups 
membership multiple object groups useful situations multiple reasons keep object alive 
lead unexpected communication object groups moves takes object 
programmer responsibility ensure multiple membership lead unwanted communication 
location object queried sumatra allows programs query location object 
allows programs selectively control communication desired program allow critical remote operations restricting remote operations 
memory bounded sumatra programs specify upper bound memory allocation 
attempts allocate memory bound results asynchronous event handled desired 
example section provide feel sumatra programming model simple example 
task scan database ray images stored remote site images show lung cancer 
task performed steps 
step computationally cheap pruning algorithm quickly identify lungs cancer 
compute intensive algorithm identify images show cancer 
way write program task download lung images image server processing locally 
absence cancer lung images cheaply established scheme wastes network resources moves lung images destination site 
approach send selection procedure site image database send interesting images back main program 
selection procedure able filter images approach significantly reduce network requirements 
third flexible approach allow shipped selection procedure extract interesting images database return size extracted images main program 
information conjunction information network bandwidth current location database site estimate transfer time selected images 
estimated time large program may choose move database site perform cancer detection computation downloading data 
avoids downloading images cost possibly slower processing server 
hand transfer time small data shipped processed locally 
shows code third approach 
filter object new lung filter cancer object new lung checker filter object system comm create engine xray database site 
remote engine new engine gov indicate interest monitoring bw gov bw new resource bandwidth hostname gov send lung filter class remote engine remote engine lung filter create new object group 
new lung filter group add lung filter object object group checkin filter object move object group database site moveto remote engine remote method call selects interesting size filter object query db compute estimated time transfer images transfer time size bw read value take long 
transfer time threshold migrate thread process images return 
remote engine go result cancer object detect cancer go estimated transfer time small fetch process locally 
moveto result cancer object detect cancer display result locally system display result fig 

excerpt sumatra program migrates depending time required transfer data 
sumatra assumes local resource monitor available queried information environment 
section describe distributed resource monitor provide information sumatra applications 
distributed resource monitor different applications different resource constraints govern decision migrate example network latency network bandwidth server load number server connections available cpu cycles propose single monitor resources 
single monitor facilitates applications need information multiple resources 
reduces communication requirements distributed monitoring information multiple resources sent message 
design host runs monitor daemon communicates peers hosts 
monitoring daemons loosely coupled udp communication monitoring network 
simple timeout scheme handle lost packets re transmissions 
applications register monitoring requests local daemon 
resource mentioned request monitored current host local daemon handles request 
requests handled locally example network latency remote sites forwarded local daemon daemon appropriate host 
applications request current availability resource demand monitoring request periodic checks resource availability continuous monitoring 
demand monitoring returns single snapshot 
continuous monitoring applies resource specific filter eliminate jitter resource levels 
eliminating jitter helps reduce reporting requirements communication needed impacting application performance 
data corresponding remote requests continuous monitoring forwarded requesting sites filtered value resource changes 
requests continuous monitoring may specify sampling frequency subject upper bound 
enforces upper bound frequency keep monitoring cost acceptable level 
daemon supports limited number monitoring requests 
limit applies local remote requests 
limit sampling frequency ensures monitoring load individual hosts acceptable limits 
request application specified time live 
upper bound time live allows daemons clean requests applications hosts crashed 
applications need refresh requests time live 
requests refreshed dropped 
daemon runs entries monitoring table requested entry ejected 
monitoring requests passed sumatra local daemon known unix domain socket 
resource information available daemon read shared memory segment 
allows applications rapidly access latest available monitoring information 
implementation current implementation monitors network latency 
daemon pings network link received monitoring requests sending byte udp packet daemon link interest 
echo received expected interval maximum ping period times current round trip time estimate packet retransmitted 
eliminate short term variation latency measures developed filter extensive study internet latency 
study revealed lot short term jitter latency measures cases jitter small occasional jumps latency appear single observation cases short window values mode contains large fraction observations indicates mode characteristic value rtt distributions 
developed filter latency measures returns moving window mode defined mode returns moving window mean 
plan extend near monitor network bandwidth server load number available server connections 
discussion design section discuss design influenced awareness authority requirements 
provides demand continuous monitoring 
allows applications select monitoring mode resource host basis host pair basis network latency bandwidth 
resources monitored continuous mode allows applications control frequency resource monitored 
allows applications control effort spent monitoring behalf keeping authority requirement 
safeguard hosts malicious runaway applications enforces upper bound monitoring frequency 
provides synchronous interface asynchronous interface 
current implementation asynchronous notification implemented unix signals 
asynchronous interface allows filters pre process information individual resources individual applications replicate functionality 
control operation providing values filters parameters 
allows applications track stable changes 
network related resources choice active versus passive monitoring 
provides active monitoring 
assumes passive monitoring responsibility applications 
applications coordinate operations lead loss information 
example applications independently access server share information network connection server designed cooperate manner able utilize information acquired 
user level monitoring system keep track network performance programs ways applications required measure performance network access supply information local daemon messages routed 
attractive options 
believe cooperating applications share information requiring applications acquire provide 
approach coda file system able adapt changes network connectivity 
individual components coda cooperate monitoring bandwidth maintain information shared location 
discussion currently core support resource awareness implemented discussed individual sections re implemented java sumatra libraries relative ease 
particular resource restrictions implemented resource manager similar current security manager module 
possible re implement sumatra portable manner 
primary limitation lack portable way save restore stack 
limitation support handling external events unix signals 
process migration remote execution proposed successfully mechanisms adapting changes host availability 
remote execution proposed efficient execution computation requires multiple remote accesses efficient execution graphical user interfaces need interact closely client 
application scenarios remote execution way avoid network 
proposed uses java remote execution avoid repeated client server interaction 
applications decisions placement computation hard coded 
best knowledge sumatra system allows distributed applications monitor network state dynamically place computation data response changes network state 
network awareness particularly important applications running mobile platforms see rapid changes network quality 
various forms network awareness proposed applications 
system level adaptation variations network bandwidth successfully designers coda file system improve performance applications 
odyssey project mobile information access plans provide support application specific resource monitoring adaptation 
primary adaptation mechanism consideration change data fidelity 
duchamp propose remote execution reducing communication mobile machine static network 
systems location various computation modules fixed adaptation achieved changing way network 
java systems aglets mole provide support mobility 
systems implemented java java rmi unable provide true thread migration 
provide object mobility 
weak form process migration achieved programmers explicitly unwinding stack copying needed appropriate instance variables 
systems provide explicit restart method called start processing destination site 
sumatra provides true thread migration requires code 
distinction eliminated versions java provide portable way pack stack 
major features sumatra provided mole aglets object groups support application level tracking object groups objects case control lifetime objects needed implement distributed garbage collection application level 
system provides resource monitoring facilities 
provide capability cleanly move exception handlers hard unwind stack situation 
aglets proposes asynchronous mobility requests 
sumatra guarantees threads moved explicit request 
point note constraints introduced awareness authority requirement common resource aware programs particular programs execute resource limited platforms mobile computers 
noble price satyanarayanan badrinath welling propose notification schemes tracking resource changes mobile hosts 
propose interface allows applications specify jitter threshold 
constraints introduced agility requirement specific mobile programs 
acknowledgments sharma thought provoking discussions 
resident skeptic 

acharya saltz 
study internet round trip delay 
technical report cs tr university maryland december 

acharya saltz 
dynamic linking mobile programs chapter unknown 
springer verlag 
jan vitek christian tschudin eds 

adl tabatabai lucco wahbe 
efficient languageindependent mobile programs 
proceedings sigplan conference programming language design implementation pages may 

duchamp 
agent mediated message passing constrained environments 
proceedings usenix mobile location independent computing symposium pages aug 

bharat cardelli 
migratory applications 
proceedings eighth acm symposium user interface software technology pages nov 

borenstein 
email mind safe tcl language enabled mail 
proceedings ifip working group international conference pages jun 

badrinath welling 
event delivery abstractions mobile computing 
technical report lcsr tr rutgers university 

brian noble morgan price satyanarayanan 
programming interface application aware adaptation mobile computing 
proceedings second usenix symposium mobile location independent computing feb 

cardelli 
language distributed scope 
proceedings nd acm symposium principles programming languages jan 

clark otto 
migration transparent version pvm 
computing systems spring 

nettles wing 
reliable distributed computing common lisp 
proceedings international conference computer languages pages 

douglis ousterhout 
transparent process migration design alternatives sprite implementation 
software practice experience aug 


programmable interface language heterogeneous systems 
acm transactions computer systems nov 

gosling 
java language environment white 

gray 
agent tcl flexible secure mobile agent system 
proceedings fourth annual tcl tk workshop tcl july 

johansen van renesse schneider 
tacoma distributed system version 
technical report university 

jul levy hutchinson black 
fine grained mobility emerald system 
acm transactions computer systems feb 

stamos gifford 
implementing remote evaluation 
ieee transactions software engineering july 

katz 
case wireless overlay networks 
invited talk acm federated computer science research conferences philadelphia 

lange oshima 
programming mobile agents java 
progress 
ch 

litzkow livny 
experiences condor distributed batch system 
proceedings ieee workshop experimental distributed systems huntsville 

ebling satyanarayanan 
exploiting weak connectivity mobile file access 
proceedings fifteenth acm symposium operating system principles dec 

satyanarayanan noble kumar price 
application aware adaptation mobile computing 
operating systems review jan 

baumann 
mole java mobile agent system 
proceedings ecoop workshop mobile object systems 

sun microsystems 
java remote method invocation 
javasoft com current rmi index html 

white 
telescript technology mobile agents 
www com telescript whitepapers 


attacking process migration bottleneck 
proceedings eleventh acm symposium operating system principles pages nov 
article processed macro package llncs style 
