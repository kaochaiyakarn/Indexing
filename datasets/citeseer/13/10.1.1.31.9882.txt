optimizing multi feature queries image databases ulrich university bingen informatik uni tuebingen de digital libraries image retrieval queries similarity objects feature attributes shape texture color text 
multi feature queries return ranked result set exact matches 
user wants see top ranked objects 
new algorithm called quick combine european patent pending nr 
ep combining multi feature result lists guaranteeing correct retrieval top ranked results 
score aggregation virtually combining function including weighted queries 
compared fagin algorithm developed improved termination condition tuned combination heuristic control flow adopting narrowly particular score distribution 
top ranked results computed output incrementally 
show dramatically improve performance particular non uniform score distributions 
benchmarks practical data indicate efficiency gains factor 
skewed data observed speed factors larger 
performance results scale different database sizes numbers result sets combine 
universal database systems handling multimedia data images video audio files poses increasingly demanding problem 
query evaluation model typically retrieve set exact matches ranked result set aggregated score attached object returned 
top ranked results normally interest user 
imagine traditional image archive image labeled captions permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference cairo egypt 
wolf balke university augsburg balke informatik uni augsburg de werner kie ling university augsburg informatik uni augsburg de name registration number related information photographer name image size 
retrieve images meta information known search 
times digitization archives increasingly replaced modern image databases systems focus related text information retrieval allowing users intuitively describe desired retrieval result 
natural query example ask top images database similar fixed image terms color texture query type referred query visual example 
query optimization needs adapted essentially different query model multimedia data 
systems implemented visual retrieval systems ibm qbic virage vir 
database applications middlewares garlic chs mes sab started capabilities visual retrieval 
major challenge systems similarity different objects defined precisely 
handle queries similarity different kinds information multimedia objects stored 
example case images color histograms features textures layout related fulltext information describing object 
similarity measured exactly form retrieval result likewise adapted user needs 
consider query returning top objects database ranked aggregated similarity score cf 
select top images repository rank average color images similar average color ex pic texture images similar texture ex pic queries similarity focus single feature 
general multimedia queries refer different features simultaneously 
potentially weighted combining function database object aggregated score value computed 
results sorted scores returned rank number top ranked object best score value entire database collection 
texture average color rank score oid image query visual example query result query color texture top results query focusing feature called atomic 
complex multimedia query seen combination atomic subqueries 
optimization challenge combine ranked results atomic queries order determine best objects database 
naive approach calculate aggregated score database objects combining function 
growing size database obviously results unacceptable response times requiring linear scan entire database 
top objects returned database objects accessed 
focus efficient query combinations atomic subqueries 
aim solutions guarantee correct result set time minimize number objects accessed 
previous significant area due fagin fag fag gives algorithm guarantees correct result set 
algorithm asymptotically optimal terms database size arbitrarily high probability uniform score distributions rarely occur practice 
section introduces basic version new algorithm called quick combine 
section extends quick combine cope skewed data ubiquitous practice 
section prove analytical results worst case behavior quick combine 
section reports speed gain quick combine skewed data implying real performance breakthrough achievable 
section give summary results outlook parallel query combination heterogeneous environments 
new test termination fag approach process complex query consisting atomic subqueries may monotonous combining function example maximum arithmetical mean 
algorithm correctly retrieves best objects database combination atomic queries 
fagin algorithm yardstick 
general atomic queries posed ways type searching database retrieving objects database ordered descending score single feature refer enlarging atomic output stream sorted access 
hand specific object score atomic output stream interest 
case referred random access 
quick combine algorithm basic version fagin algorithm proceeds phases producing atomic output streams second consisting random accesses 
phases necessary number necessary accesses minimized new test termination 
new test information ranks output streams scores assigned objects output stream specific form combining function 
algorithm returns top answer combined query consisting atomic subqueries qn aggregated monotone combining function letx object si score subquery qi 
object occuring result set subquery qi rank denoted ri 
algorithm quick combine basic version 
subquery compute atomic output stream consisting pairs si descending order score get elements 

object output stream seen get missing scores subquery random access compute aggregated score sn 

check top scored object best object database compare aggregated score value minimum scores subquery returned far 
test sn rn zn zi lowest rank seen output stream qi 

inequality holds theorem returned top object database 
inequality hold elements output streams evaluated 
get elements streams proceed step newly seen objects 
examples correctness consider sample results query visual example cf 
fig 

example show get top scored object database quick combine query texture rank score object query avg 
color rank score object 
atomic output streams evaluated alternately 
objects streams collected aggregated score calculated instance arithmetical mean combining function random accesses object random output accesses stream score 
test termination performed lowest scores seen output stream 
due sorting streams scores scores object seen stream test termination object seen agg 
score lowest scores accessing fourth object evaluation streams stopped inequality holds 
best object seen returned top scored object entire database 
note objects accessed seen sorted access streams 
quick combine applicable monotonous combining function case maximum minimum 
case fagin presents special algorithms differing general approach 
show quick combine test termination definitely return relevant object database theorem stated theorem correctness results output streams evaluated inequality holds object providing best aggregated score objects output stream far best aggregated score objects database 
proof omitted efficiency improvements skewed data focus gain efficiency 
show evaluating test termination twice save random accesses 
create control flow takes advantage distribution scores stream address weighted queries 
generalize test termination return best objects database complete algorithm 
proving quick combine correctness section see top scored objects successively returned algorithm running 
reducing number random accesses loss generality focus case best object database returned 
closer look formula obvious inequality may true 
right side reduced query stream qj enlarged sj rj zj replaced sj rj zj 

left side increased newly seen object maximum aggregated score sufficient terminate algorithm 
quick combine stream qj enlarged providing new score sj rj zj 
new object seen random accesses score values needed calculate aggregated score 
theorem show case formula holds random accesses aggregated score newly seen object larger maximum score objects seen enlarging qj 
random accesses saved test termination performed random accesses 
theorem saving random accesses set objects seen aggregated scores calculated 
aggregated score object onew occurring stream qj rank zj seen enlarging query stream qj equal maximum aggregated score objects formula holds substituting sj rj zj sj rj zj 
proof omitted control flow evaluation streams quick combine considers top ranked element output stream proceeding ranked elements 
quick combine uses ranks scores control flow distribution scores relative ranks occur decrease number objects accessed termination 
course distribution atomic output stream 
heuristic approach determine order streams different distributions evaluated gain maximum effect 
heuristic measure efficiency simple rule stated accessing objects formula hold means database accesses results efficient algorithm 
obviously ways formula hold initializing algorithm ranks stream helps increase left side 
object seen output stream generally better stream get maximum aggregated score chance seen ranks different output stream getting probable 
certain query stream preferred evaluation advisable analyze objects stream 
decrease right side quickly consider distribution scores relative ranks occur 
distribution totally differ output stream 
output streams scores falling monotonously declining ranks may streams scores slightly change decreasing ranks 
streams starting high score values declining rapidly may exist output streams scores changing 
want force decline right side streams showing behavior declining scores rapidly relative ranks preferred evaluation 
efficient combining algorithm control mechanism preferring evaluation rapidly declining output streams needed 
obvious measure derivative functions correlating score values ranks occur output stream 
functions discrete behavior estimated difference pth output score value assuming elements stream 
course stream provide comparability 
larger value better estimates output stream global behavior small values detect local changes stream 
considerations useful equally weighted queries 
indicator streams low weights naturally regarded important indicators highly weighted streams get prior evaluation 
weights expressed combining function weighted arithmetical mean simple measure importance stream qi partial derivative combining function xi weighted case indicator stream qi containing elements calculated follows xi si ri zi si ri zi quick combine algorithm full version generalize quick combine result set containing best matches implement control flow 
assumption objects stream returns top answers complex query consisting atomic subqueries qn 
subquery ranked result set consisting pairs si descending sorted order score computed object si score subquery qi 
algorithm quick combine full version 
initialization get results subquery suitable natural number 
compute indicator query stream qi equation 
random access new objects new object output stream seen previously get missing scores subquery random access 
new object random accesses necessary 
objects seen ignored 

calculation aggregated scores new object seen compute aggregated score sn 

test termination check top scored objects seen far compare aggregated score top scored objects value combining function lowest scores seen feature 
check objects aggregated score larger equal aggregated minimum scores feature sn rn zn gj inequality holds theorem top scored objects returned top objects database 

enlarging atomic output stream inequality hold elements atomic output streams evaluated 
get element stream having maximum maximum reached streams chosen randomly 

second test termination check inequality holds new object score 
inequality holds return top scored objects 

indicator computation calculate new enlarged stream 
proceed step newly seen object 
control mechanism indicator approximates local behaviour distribution absolute score values relative ranks appear 
show relevant database object missed quick combine theorem correctness results output streams evaluated inequality holds objects providing best aggregated scores appeared output stream far best aggregated score objects database 
proof show object seen larger aggregated score top objects seen 
inequality hold top objects object database seen output streams 
due sorting streams atomic scores satisfy sn sn rn zn due monotony formula sn sn rn zn sn 
theorem shows object satisfying inequality top scored object collection 
delivered user soon course applies ranks algorithm terminates 
user satisfied ranks query execution large values stopped processing 
state corollary theorem corollary successive output results quick combine run objects satisfy formula successively objects returned algorithm running 
complexity uniform distributions section focus efficiency quick combine compared fagin algorithm 
particular show quick combine complexity complexity fagin 
give general geometrical interpretation efficiency issues improvement factors rare case uniform distribution score values 
worst case complexity theorem show quick combine access distinct objects fagin algorithm 
number distinct objects fagin algorithm collects phase compared number distinct objects collected quick combine 
theorem upper bounding atomic output streams sorted descending order 
formula holds streams evaluated far fagin algorithm terminates set objects delivered streams 
proof ok different objects output stream monotonous combining function 
due descending order scores stream atomic score si oj satisfies oj sn oj sn rn zn due oj oj sn oj sn rn zn objects ok equation holds 
geometrical interpretation pf geometrical model combining query results shown case 
atomic subquery mapped axis divided score values match exact match object database represented point ndimensional space 
stream stream combining atomic output streams evaluating results atomic subquery ranks represented moving hyperplane orthogonal axis downwards 
order objects collected hyperplane exactly mapped ranks occur 
example consider assume output stream subquery evaluated objects satisfy si si ri zi objects retrieved stream scores larger equal score object occurring rank zi stream 
areas evaluated stream stream intersection containing top scored objects seen streams 
fagin algorithm phase collects objects occur dark shaded area 
course objects collected shaded areas need random accesses seen phase 
evaluations aggregated scores monotonous combining function represented moving hypersurface collecting objects moving area 
objects collected top aggregated scores returned correct retrieval result hypersurface orthogonal optimal direction starting optimal level 
level combining function stream stream stream level combining function stream arithmetical mean combining function fagin algorithm upper quick combine lower return correct result hypersurface collect objects 
fagin algorithm insists objects dark shaded area hypersurface sweeps objects calculated aggregated scores 
relevant object missed 
depending combining function area number objects fagin algorithm aggregated scores calculated far large 
consider example left showing arithmetical mean combining function 
hypersurface collect object till lower left corner dark shaded area objects area seen aggregated scores objects calculated 
objects dark shaded area objects light shaded triangles hyperplane dark shaded area collected 
uniform distributions triangle area dark shaded area guarantee correctness results minimize calculations aggregated scores random accesses needed cf 
right 
fagin algorithm quick combine concentrates minimized area 
shown right case quick combine streams enlarged dashed lines 
improvement analysis uniform distributions fagin proven important result algorithm expected asymptotically optimal independent output streams uniform score distribution 
uniform distributions rarely occur practice stated case quick combine improves fagin algorithm minimizing number object accesses 
analysis geometrical interpretation 
growing dimension number atomic subqueries combined dark shaded area model evolves high dimensional cuboid volume determines number objects calculate aggregated scores 
depending combining function high dimensional cases cuboid contained geometrical guaranteeing correctness objects 
consider dimensional case arithmetical mean combining function output streams evaluated score triangles generalized polyhedra sn dark shaded square dimensional cube wn light shaded rectangles dimensional cuboids 
polyhedron sn formed set points combining function hypersurface pn xi theorem shows cube volume shrinks rapidly growing dimensions proportion polyhedron volume 
theorem ratio cube polyhedron wn dimensional cube wn xn xi ng vol wn volume 
sn denote poly sn xn xi vol sn volume 
ratio vol wn 
equal vol sn nn 
proof omitted get precise impression efficiency gain compare total number objects accessed fagin algorithm quick combine 
volume dark light shaded areas cf 
fagin algorithm compared corresponding areas needed quick combine polyhedron volume fagin cube 
increasing volumes cuboids obviously causes necessary object accesses ratio volumes improvement factor number objects accessed 
theorem improvement uniform distributions total number objects accessed quick combine polyhedron sn volume cube wn needed fagin algorithm np times 
smaller number objects accessed fagin algorithm uniformly distributed scores 
proof omitted stirling formula improvement factor asymptotically equal np 
npp 
quick combine results efficiency gain increasing visual features determine multimedia query ranked results text retrieval typical values 
table shows improvement factors practical values table improvement factors object accesses uniformly distributed case 
middleware architecture system speed results skewed data fagin optimality results plus improvements quick combine valid case uniform score distributions 
practice skewed data prevalent 
name game efficiency speed ups practical skewed data 
report performance results practical data followed extensive synthetic benchmarks 
benchmark results practical data system process set atomic queries images 
components query composition user specific image delivery efficient format conversions features combining engine different visual retrieval systems databases cf 
fig 

combining engine implements quick combine 
experiments ibm db qbic technology visual retrieval 
measure gain efficiency number objects retrieved compared average number objects combining algorithm access 
described section number objects accessed determines number random accesses needed calculate aggregated scores forms main computational costs 
exact fagin algorithm need random accesses objects objects seen atomic output streams aggregated values directly calculated 
small number random accesses proven negligible case 
set scenario combination atomic subqueries repository images database 
randomly chosen subqueries focused image average color textures color histograms combining function chose arithmetical mean indicator computation 
shows average experimental results different queries 
output streams statistically independent color object supposed related shape texture number objects accessed plotted number objects returned 
scores distributed uniformly fagin algorithm accesses far objects 
obviously early combination function composition control flow quick combine results higher gain efficiency especially larger values practical values quick combine accesses times objects fagin algorithm 
number objects accessed improvement factor fagin algorithm quick combine objects retrieved objects retrieved benchmark results real data benchmark results synthetic data practical tests gained insight distributions really occur image retrieval 
argue typical distributions visual retrieval systems low percentage objects having high medium score values high percentage having low scores 
text retrieval included percentage having high medium scores decreases 
extensively tested types distributions synthetic data databases objects generating different score distributions 
performance quick combine changes variations number objects return number streams combine database size distribution 
re sults quick combine compared result fagin algorithm 
efficiency measures compare threefold number distinct database objects accessed number necessary sorted accesses number necessary random accesses 
total number objects accessed uniform distribution objects retrieved improvement factors objects accesses uniform distribution objects retrieved average number object accesses skewed distributions test scenario focused slightly skewed score distribution typical content image retrieval 
percent database objects high medium score values uniformly distributed rest shows values smaller 
smaller database streams 
seen diagrams fig fig fig measured number accesses different objects number sorted random accesses varying values fagin algorithm light columns average needs access far objects quick combine dark columns 
right diagram respective average improvement factors seen 
types accesses range 
obviously improvement scales varying entire database size retrieved 
observation experiments ratio sorted random accesses fagin algorithm quick combine nearly respective ratio distinct object accesses 
analysis concentrate accesses omit diagrams sorted random accesses 
experiments focused skewed score distributions fig 

score distribution high medium scores low scores generated 
average improvement factors observed quick combine adopts specific distribution 
improvement total number sorted accesses uniform distribution objects retrieved improvement factors sorted accesses uniform distribution objects retrieved average number sorted accesses skewed distributions case minimal objects database having noticable scores 
diagram fig shows scalability large databases 
database generated showing score distribution 
note retrieval database size quick combine accesses little objects fagin algorithm accesses third entire database objects 
average improvement factors case range 
experiment fig 
analyzes quick combine varying number streams combined 
combined different streams database size score distribution experiment 
observed average improvement factors ranging 
note fagin algorithm accesses database objects output streams combined 
discussion performance results stated fag fagin algorithm expected ac cess objects 
shown quick combine expected access np 
objects uniformly distributed case 
case rare practice 
get impression practical efficiency issues experiments real synthetic data practical score distributions compared 
experiments real synthetic data number objects fagin algorithm accesses far higher number accessed quick combine 
number sorted random accesses fagin total number random accesses uniform distribution objects retrieved improvement factors random accesses uniform distribution objects retrieved average number random accesses skewed distributions algorithm considerably higher quick combine 
quick combine scales growing values increasing number streams combine 
quick combine efficient large database sizes 
quick combine highly efficient skewed score distributions 
fagin strongly influenced statistical approaches cg experimental results show number objects retrieved considerably smaller fagin algorithm 
approaches gain performance exchange guaranteed correctness results 
quick combine get high performance correct results 
summary outlook proposed algorithm called quick combine combine multi feature queries typical modern digital libraries digital image archives 
examined previous area compared approach fagin algorithm fag 
quick combine efficiently retrieves relevant database objects guaranteed correctness monotonous combining function 
measuring number necessary database accesses theoretical analysis experimental results indicate quick combine considerably efficient fagin algorithm 
speed quick combine compared total number objects accessed uniform distribution objects retrieved improvement factor object accesses uniform distribution objects retrieved average number object accesses skewed distributions fagin algorithm increases growing score distributions factor orders magnitude 
real live benchmark images showed speed factors 
remarkable benchmark results suggest quick combine real performance breakthrough content image retrieval large image databases achievable 
definitely high speed iterators sorted accesses relying efficient multi dimensional indexes fast access methods random accesses essential 
parallel execution sorted streams java threads done addition 
fast internet access large image databases commercial digital photo archives sight 
grateful matthias wagner thomas achim helpful comments suggestions 
project funded german research foundation dfg strategic research initiative distributed processing exchange digital documents 
european patent supported dfg 
database software applied system granted ibm program db educational purpose 
total number objects accessed distribution objects retrieved improvement factors object accesses distribution objects retrieved average number object accesses large databases bach fuller gupta hampapur horowitz humphrey jain shu 
virage image search engine open framework image management 
storage retrieval image video databases spie pages 
cg chaudhuri gravano 
optimizing queries multimedia repositories 
th acm symposium principles database systems pages tucson 
acm 
chs carey haas schwarz arya cody fagin flickner niblack petkovic thomas williams wimmers 
heterogeneous multimedia information systems garlic approach 
th intern 
ws 
research issues data engineering distr 
object management pages 
ieee cs 
fag fagin 
combining fuzzy information multiple systems 
th acm symposium principles database systems pages montreal 
acm 
fag fagin 
fuzzy queries multimedia database systems 
th acm symposium principles database systems pages seattle 
acm 
total number objects accessed distribution number streams combined improvement factors object accesses distribution number streams combined average number object accesses varying number streams combine faloutsos barber flickner hafner niblack petkovic equitz 
efficient effective querying image content 
journal intelligent information systems 
kie ling 
balke wagner 
project multimedia database support history human sciences 
kruse editors proc 
gi annual conf 
informatik pages 
springer 
pf pfeifer fuhr 
efficient processing vague queries data stream approach 
th annual international acm sigir conference research development information retrieval pages seattle 
acm 
sab vs subrahmanian brink lu rogers ross ward 
hermes heterogeneous reasoning mediator system 
technical report university maryland 
sheth shah 
searching distributed heterogeneous digital media approach 
th conf 
database semantics semantic issues multimedia systems pages 
kluwer 
