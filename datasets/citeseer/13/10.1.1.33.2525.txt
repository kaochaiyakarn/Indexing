life cycle inheritance petri net approach van der aalst basten department mathematics computing science eindhoven university technology netherlands email win tue nl 
inheritance key issues object orientation 
inheritance mechanism allows definition subclass inherits features specific superclass 
means methods attributes defined superclass available objects subclass 
existing methods object oriented modeling design dynamic behavior objects defining inheritance 
useful mechanism allows inheritance dynamic behavior 
describes approach formal specification verification type inheritance 
petri nets specify dynamics object class 
petri net formalism allows graphical representation life cycle objects belong specific object class 
possible inheritance relations defined 
inheritance relations verified automatically 
powerful transformation rules preserve specific inheritance relations 
keywords object orientation petri nets inheritance object life cycle 
object oriented design relatively young practice considered promising approach software development 
years leading object oriented methodologies omt ood conquered world software engineering 
methodologies state transition diagrams specifying dynamic behavior objects 
typically object class state transition diagram specified 
state transition diagram shows state space class methods cause transition state 
petri nets see example specifying dynamics object class 
reasons petri nets 
petri nets provide graphical description technique easy understand close state transition diagrams 
second parallelism concurrency synchronization easy model terms petri net 
third techniques software tools available analysis petri nets 
petri nets extended color time hierarchy 
extension color allows modeling object attributes methods 
extension time allows quantification dynamic behavior object 
hierarchy concept structure dynamics object class 
term object life cycle refer petri net specifying dynamics object class 
shows object life cycles 
object life cycle specifies dynamics single married alive single married object life cycles 
object class person 
creation object modeled transition label 
firing transition corresponds birth person 
firing transitions label results termination object death person 
object class person state single state married 
states corresponds place object life cycle firing transition label corresponds marriage person results transfer token single married 
firing transition label corresponds divorce person 
result token transferred married single 
object life cycle specifies dynamics class person 
compared original object life cycle transition labeled place alive added 
firing additional transition corresponds birthday person 
note object life cycle state person represented tokens 
result possible concurrency object 
general state object represented configuration tokens places 
transitions represent state changes 
label transition refers method executed transition fires 
note method implementation operation executed specific objects 
reserved method labels object creation object termination internal method 
labeled transitions 
turns useful distinguish internal methods external methods 
internal methods activated object 
external methods activated objects 
object life cycles shown lot common 
fact appears life cycle incorporates inherits properties life cycle adds unique properties 
inheritance key issues object orientation 
unfortunately inheritance limited sharing attributes methods object classes 
concept life cycle inheritance lacking see example 
existing objectoriented methodologies omt ood give clear definition inheritance respect dynamics object class 
tackle problem deciding object life cycle class inherits life cycle class 
investigated problem simple acp process 
shown encapsulation abstraction turn important concepts characterization life cycle inheritance 
concepts inheritance relations defined 
process algebraic characterization life cycle inheritance straightforward encapsulation abstraction investigated contrast state transition diagrams petri nets states represented explicitly 
rich theory acp quite easy show inheritance relations number desirable properties 
unfortunately algebraic characterization inheritance difficult handle people familiar process algebra 
people prefer state transition diagrams graphical nature simplicity fact states represented explicitly 
features apply process algebra essential success existing object oriented methodologies 
resort petri nets specification object life cycles 
petri nets provide graphical formalism closer existing methodologies omt ood 
show possible formalize inheritance relations context 
extend results 
example contrast approach able handle object life cycles recursion 
allow recursion possible verify inheritance relations automatically 
number transformation rules preserve specific forms inheritance 
transformation rules show object life cycle superclass may extended subclass preserving life cycle inheritance 
labeled petri nets standard petri nets extended labeling function 
universe action labels 
action labels thought method identifiers firing transition label corresponds execution method definition 
labeled petri net labeled petri net tuple finite set places ii finite set transitions iii set directed arcs called flow relation iv labeling function 
place called input place transition exists directed arc place called output place transition exists directed arc denote set input places transition notations similar meanings 
example set transitions sharing input place 
places petri net may contain zero tokens 
state petri net referred marking distribution tokens places 
state net represented finite multi set bag places 
definitions notations bags 
bag elements alphabet considered function natural numbers 
bag alphabet denotes number occurrences empty bag denoted 
explicit enumeration bag notation similar notation sets square brackets curly brackets superscripts denote cardinality elements 
example denotes bag elements elements bag contains elements holds predicate symbols alphabet 
denote individual elements bag symbol sets 
union bags denoted defined 
difference denoted defined max 
restriction bag domain denoted defined 
notion defined expected bag denoted 
definition 
marked petri net marked petri net pair labeled petri net bag denoting state marking net 
marked petri nets dynamic behavior defined firing rule 
definition 
firing rule marked petri net 
transition enabled denoted input place contains token 
enabled transition fire 
transition fires consumes token input places produces token output places 
visible effect firing label transition 
formally 
firing rule notion reachability formalized 
definition 
reachability marked labeled petri net 
state reachable denoted equals exist 
markings 


want able compare behavior objects specified marked petri nets 
equivalence petri nets needed 
equivalence distinguish petri nets behaviors different moments choice moment choice may influence order methods allowed executed 
addition petri nets external behavior possibly different internal behavior considered equal 
requirements branching bisimulation suitable equivalence 
set marked labeled petri nets equal 
recall labeled transition corresponds internal method 
auxiliary relation expresses marked petri net evolve marked net firing sequence labeled transitions 
definition 
relation smallest relation satisfying abbreviation 
means zero steps simply define branching bisimulation need identify marked petri nets correspond successful termination object 
life cycle tokens corresponds terminated object life cycle terminated object form 
definition 
branching bisimulation equivalence binary relation called branching bisimulation rm ii rm rm iii 
marked petri nets called branching bisimilar denoted exists branching bisimulation branching bisimulation 
requirements state steps marked petri net possible second vice versa 
third requirement says marked petri net terminate number steps holds related marked petri net 
shows essence branching bisimulation 
note relation depicted labeled arrow relation depicted double headed arrow 
note definition differs original definition 
fact definition semi branching bisimulation defined formulated appears :10.1.1.158.7366
shown notions equivalent 
reason alternative definition concise intuitive original definition 
object life cycles petri nets specification object life cycles allows specify partial ordering methods 
labeled petri net specifies object life cycle 
discussed introduce reserved labels object creation object termination internal methods 
set containing special labels set method labels corresponding external methods set method labels including special labels 
petri net specifies life cycle exactly transition corresponds creation object bears label 
convenience assume unique input place transition input place 
petri net describing life cycle refers life cycle single object 
suffices consider just object fact objects interact execution methods directly life cycle 
focus object time initially place contains token 
object terminates moment method label executed 
creation object firing termination object firing labeled transition token life cycle 
restrict life cycles inherent parallelism suffices just token 
parallelism results multiple tokens life cycle 
think tokens stage indicators referring object 
moment object terminated tokens correspond object removed 
means firing labeled transition results empty petri net indicating object ceased exist object removed 
assume possible terminate executing appropriate sequence methods 
mean object forced terminate 
definition formalizes definition object life cycle 
definition 
object life cycle marked labeled petri net describes object life cycle contains special place contains special transition 
transition 
transition ii initial marking contains just token token initial place 
iii arbitrary state reachable 

correspondence termination object firing labeled transition 
possible terminate successfully 
restrict free choice petri nets polynomial time algorithm verify requirements definition 
object life cycles easy see requirements hold 
petri nets satisfying requirements stated definition number nice properties 
boundedness number reachable states finite 
property 
marked petri net representing object life cycle bounded 
proof 
object life cycle bounded reachable states life cycle sequence firings leading 
label transition fired 
execute 
case label final firing firing result contradicts fact object life cycle 
object life cycle bounded 
life cycle inheritance formal definition object life cycle terms petri net 
time answer question object life cycle subclass object life cycle 
example subclass 
words inherit certain features 
answer question establish inheritance relation object life cycles 
inspired process algebraic concepts encapsulation abstraction basic forms inheritance appropriate 
basic form inheritance corresponds encapsulation 
object life cycles 
environment calls methods distinguish observable behavior subclass 
means new methods added subclass blocked environment willing new methods superclass subclass behave equivalently 
shown corresponds encapsulation operator known acp translates actions deadlock 
form inheritance referred protocol inheritance subclass inherits protocol superclass 
difficult verify subclass respect protocol inheritance 
method birthday blocked observable behaviors identical 
second basic form inheritance corresponds abstraction 
environment willing call methods distinguish observable behavior respect methods subclass 
means calling new methods methods behavior subclass coincides behavior superclass respect old methods 
environment reluctant call new methods may discover differences respect old methods 
consider new methods internal methods disable enable old methods superclass subclass behave equivalently 
familiar process algebra easy see corresponds abstraction operator translates actions silent steps form inheritance referred projection inheritance 
easy see subclass respect projection inheritance 
hide method birthday observable behaviors identical 
analogously define forms inheritance combining basic forms just 
define encapsulation operator abstraction operator petri nets 
definition 
encapsulation abstraction marked labeled petri net 
encapsulation operator removes transitions label petri net 
formally 
ii abstraction operator renames transition labels implies implies 
note encapsulation methods corresponds removal transitions blocking method achieved removing corresponding transitions 
property 
branching bisimulation congruence encapsulation abstraction 
proof 
straightforward verify branching bisimulation equivalence relation :10.1.1.158.7366
remains show marked petri nets implies 
branching bisimulation 
define binary relation 
difficult verify branching bisimulation 
congruence encapsulation operator similarly prove congruence abstraction operator encapsulation abstraction define protocol inheritance projection inheritance respectively 
possible combine definitions 
define additional forms inheritance 
protocol projection inheritance conjunction basic forms inheritance 
object life cycle subclass object life cycle respect protocol projection inheritance subclass respect protocol inheritance projection inheritance 
disjunction basic forms inheritance yield inheritance relation desirable properties transitivity 
possible state new method basic forms inheritance hold 
form inheritance called life cycle inheritance 
object life cycle subclass object life cycle superclass respect life cycle inheritance abstraction methods encapsulation methods subclass results object life cycle equivalent superclass 
definition 
inheritance relations marked petri nets protocol inheritance subclass protocol inheritance denoted pt ii projection inheritance subclass projection inheritance denoted pj iii protocol projection inheritance subclass protocol projection inheritance denoted pp iv life cycle inheritance subclass life cycle inheritance denoted lc 
note life cycle inheritance defined terms function composition 
demand disjoint may change order encapsulation abstraction changing definition life cycle inheritance 
pp pj pt lc overview life cycle inheritance relations 
shows overview inheritance relations 
protocol projection inheritance strongest form inheritance 
object life cycle subclass respect protocol projection inheritance subclass respect forms inheritance 
subclass respect protocol projection inheritance 
subclass respect forms inheritance 
life cycle inheritance weakest form inheritance 
object life cycle subclass respect forms inheritance subclass respect life cycle inheritance 
shown inclusion relations strict inclusion relations protocol inheritance projection inheritance 
pt pj lc 
example 
object life cycles shown illustrate inheritance relations 
subclass protocol inheritance omission transition labeled yields net structurally equivalent branching bisimilar 
subclass projection inheritance hiding transition labeled yields marked petri net branching bisimilar 
subclass protocol inheritance blocking yields net terminate successfully 
subclass protocol inheritance subclass projection inheritance 
subclass life cycle inheritance 
object life cycles shown figures illustrate inheritance relations complementary 
belief inheritance relations valuable strengthened fact relations reflexive transitive 
property 
protocol inheritance projection inheritance protocol projection inheritance lifecycle inheritance preorders 
proof 
labeled marked petri net equal equal 
pt pj pp lc reflexive 
fairly straightforward show pt transitive 
marked petri nets pt pt 
possible find sets labels 
congruence see property easy verify 
pt 
analogously prove pt transitive 
pp pt pj follows immediately pp transitive 
showing life cycle inheritance transitive involved 
assume lc lc 
definition life cycle inheritance follows subsets possible choose see 
congruence abstraction encapsulation follows 
lc transitive 
analogously result show subclass equivalence coincides equivalence object life cycles inheritance relations life cycle subclass second life cycle vice versa life cycles branching bisimilar 
result showing definitions sound 
theorem 
decidability inheritance object life cycles decidable subclass respect pt pj pp lc proof 
follows property object life cycles bounded 
modified object life cycles definition bounded may satisfy requirements definition 
checking modified life cycle branching bisimilar decidable 
inheritance preserving transformation rules petri nets long life cycles complex easy check specific inheritance relation holds 
unfortunately object life cycles tend complex 
possible check inheritance relations automatically check may require lot computing power 
propose number transformation rules preserve inheritance 
transformation rules reveal essence inheritance relations described definition 
convenience introduce alphabet operator petri nets 
labeled petri net 
union petri nets defined union components assumption 
protocol inheritance preserving transformation rule 
transformation rule preserves protocol inheritance illustrated 
extend life cycle petri net transitions shared nets new transitions consuming places label result life cycle extended life cycle subclass original life cycle respect protocol inheritance 
theorem 
protocol inheritance preserving transformation rule petri nets 
object life cycles satisfying requirements stated definition 
additional properties satisfied ii subclass respect protocol inheritance 
pt 
proof 
show 
consider marked petri net 
initially places empty 
way add tokens places firing transition consuming tokens encapsulate transitions places remain empty remaining transitions able fire 
subnet added dead encapsulate transitions having new label 
binary relation 
subnet added dead straightforward verify branching bisimulation 
transitions set operate guards 
blocking guards new part object life cycle deactivated 
operate guards 
applying transformation rule able show subclass 
apply rule show subclass 
transformation rule described theorem inspired axiom 
show relation inheritance preserving transformation rules algebraic rules give intermezzo familiar process algebra 
intermezzo 
algebraic theory pa studying life cycle inheritance 
pa acp process algebra deadlock internal actions renaming 
context object life cycle defined closed pa term starting object creation action 
theory defined forms inheritance analogous definition 
example object life cycles pt pa number rules illustrate conditions inheritance preserved 
remainder intermezzo concentrate rules 
defined analogous definitions 
closed pa terms actions 
conditions axioms apply 
pt pt pj pj pj pj pj pj pp pp rule axiom pt corresponds rule theorem 
method functions guard 
blocking guard environment forced follow original life cycle rules pj pj state inserting new behavior object life cycle disable behavior original life cycle yields subclass projection inheritance 
rule pj shows putting alternative behavior parallel original life cycle yields subclass projection inheritance 
rule pp shows protocol projection inheritance allowed postpone behavior 
remainder section show formulate transformation rules petri nets correspond pj pj pp possible define transformation rule corresponds pj duplication meaningful context petri nets 
second transformation rule corresponds rule pj illustrated 
extend life cycle petri net places shared nets new transitions label transitions consuming tokens obey free choice property result life cycle extended life cycle subclass original life cycle respect projection inheritance 
add parts life cycle executed parallel original life cycle preserving projection inheritance 
projection inheritance preserving transformation rule 
theorem 
projection inheritance rule petri nets 
object life cycles satisfying requirements stated definition 
additional properties satisfied ii iii subclass respect projection inheritance 
pj 
proof 
prove 
binary relation 
prove branching bisimulation show requirements stated definition hold 
state state 
state easy verify state 
corresponds firing transition transition 
ii state prove state state 
transition 
enabled 
enabled prove enabled firing transitions enabled places empty 
assume able fire 
input places contains token enabled third property transitions consuming input place able fire 
means life cycle successful termination possible 
conclude possible enable firing transitions firing results state 
iii remains prove 
way reach state tokens marked petri net satisfying definition firing labeled transition just reaching state 



satisfies definition possible 

theorem specifies sufficient requirements extension life cycle part executed parallel yields life cycle projection inheritance 
transformation rule show subclass 
difficult find transformation rules preserve kind inheritance 
shows transformation rule inspired rule pj 
transformation rule shows insert new behavior parts original life cycle executed sequentially preserving projection inheritance 
contrast previous transformation rules petri net corresponds superclass modified 
transformation rule shown boils replacement arc entire petri net 
transformation rule preserves projection inheritance requirements stated conjecture met 
projection inheritance preserving transformation rule 
conjecture 
projection inheritance preserving transformation rule petri nets place transition ii iii free choice petri net live bounded 

object life cycles satisfying requirements stated definition subclass respect projection inheritance pj 
people familiar free choice petri nets requirement iii may hard swallow 
rich theory free choice petri nets easy prove called home marking see 
implies eventually token consumed place returned 
methods added replacement arc change external behavior 
shown replacement arc preserves projection inheritance 
pj lc pj lc pt lc application transformation rules leads preserving life cycle inheritance 
example 
illustrates transformation rules far 
transformation rule prove pt removed 
second rule prove pj relabeled 
application third transformation rule shows pj relabeled 
transformation rules preserve life cycle inheritance 
lc transitive deduce lc 
rule preserves protocol projection inheritance 
transformation rule corresponds rule pp illustrated 
protocol projection inheritance preserving transformation rule 
conjecture 
protocol projection inheritance preserving transformation rule petri nets place ii iii free choice petri net live bounded 
object life cycles satisfying requirements stated definition subclass respect protocol projection inheritance pp 
easy see protocol inheritance preserved conditions stated theorem apply 
projection inheritance preserved transitions renamed willing fire token consumed returned eventually 
direct result fact home marking 
transformation rule described conjecture shows protocol projection inheritance allowed postpone part life cycle 
note contrast rules transformation rules applicable object life cycles recursion 
fact easy see application transformation rule introduces recursion 
transformation rules give characterization various forms inheritance 
contrast provide rules preservation life cycle inheritance rules combinations rules protocol projection inheritance see example 
fact rules correspond elegant transformation rules petri net context encouraging 
appears inheritance concepts quite universal transcend formalisms 
concluding remarks framework specification verification life cycle inheritance 
framework petri nets close professional experience people engaged object oriented design 
inheritance relations inspired process algebraic concepts encapsulation abstraction 
shown inheritance relations checked automatically 
number powerful inheritance preserving transformation rules 
transformation rules show object life cycle may extended preserving certain dynamical properties 

authors jos baeten marc valuable suggestions 

van der aalst 
class petri nets modeling analyzing business processes 
computing science reports eindhoven university technology eindhoven netherlands 

agha panel discussion workshop object oriented programming models concurrency 
th 
international conference application theory petri nets torino italy june 

basten 
branching bisimilarity equivalence 
appear information processing letters 

basten van der aalst 
process algebraic approach life cycle inheritance inheritance encapsulation abstraction 
computing science reports eindhoven university technology eindhoven netherlands 

booch 
object oriented analysis design applications 
benjamin cummings redwood city ca usa 

desel esparza 
free choice petri nets volume theoretical computer science 
cambridge university press cambridge 

van glabbeek 
branching time semantics 
bulletin eatcs number pages 
european association theoretical computer science june 

van glabbeek weijland 
branching time abstraction bisimulation semantics extended 
ritter editor information processing proceedings ifip th 
world computer congress pages san fransisco ca usa august september 
elsevier science publishers north holland 

van glabbeek weijland 
branching time abstraction bisimulation semantics 
report cs centre mathematics computer science cwi amsterdam netherlands 
revised version appear journal acm 

van hee 
information system engineering formal approach 
cambridge university press cambridge uk 

jensen 
coloured petri nets 
basic concepts analysis methods practical 
eatcs monographs theoretical computer science 
springer verlag berlin 

reisig 
petri nets volume monographs theoretical computer science eatcs series 
springer verlag berlin 

rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall englewood cliffs nj usa 

