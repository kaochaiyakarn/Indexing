feature extraction pattern information retrieval anton manolescu cs uiuc edu technology determines types amounts information access 
currently large fraction information originates silicon 
cheap fast chips smart algorithms helping digital data processing take sorts information processing 
consequently volume digital data surrounding increases continuously 
information centric society additional requirements availability capability process digital data 
able find pieces information relevant particular problem 
having answer question able find equivalent having 
increased volumes information wide variety data types finding information challenging task 
current searching methods algorithms assumptions technology goals reasonable widespread computers 
assumptions longer hold context information retrieval systems 
ideas scale kay chapter presents pattern provides proven solution searching large volumes information 
pattern originated information retrieval domain 
information retrieval expanded fields office automation genome databases fingerprint identification medical imaging data mining multimedia pattern works kind data applicable domains 
see examples text searching telecommunications stock prices medical imaging trademark symbols 
key idea pattern map large complex problem space small simple feature space 
mapping represents creative part solution 
type application uses different kind mapping 
mapping feature space hard part pattern 
traditional searching algorithms viable problems typical information retrieval domain 
designed exact matching similarity search cumbersome 
contrast feature extraction provides elegant efficient alternative 
information retrieval expanding fields pattern applicable wide range applications 
context digital libraries handle large amounts information 
offer access collections documents represented electronic format 
bruce schatz sch digital library enables users interact effectively information distributed network 
network information systems support search display items organized collections 
increasing number users discover online information retrieval interactive searches 
comfortable new tools demand new materials available digital libraries 
requires department computer science university illinois urbana champaign west springfield ave urbana il 
obtaining digital representations documents 
process getting cheaper faster extending digital library easy 
obviously increase amount information strong impact supporting software 
consider example case searching text retrieval 
simple basic operation digital libraries 
different algorithms available traditional text retrieval fo 
applicable context digital libraries 
example full text scanning regular expression searching signature files bad response times large amounts information 
inversion method web search engines scalable large storage overhead index updates expensive 
large volumes data challenging characteristic typical digital libraries 
conventional database systems digital library users usually perform similarity searches approximate exact searches 
typical query database user may title book isbn contrast digital library system user ask list decreasing order similarity books subject isbn database systems answer queries provided appropriate index structure created advance 
corresponds query example 
conventional database systems handle approximate searches designed purpose 
emergence multimedia content electronic publications raises issue 
provide query digital image ask electronic documents contain similar pictures retrieve documents contain images look sunset case challenge understanding contents image 
digital images multimedia data matter complex data 
computers representing manipulating digital representations type information decoding contents research issue 
workaround problem person annotate image set keywords 
manual classification time consuming potentially error prone ebg 
temporary workaround 
problem current applications deal large amounts information similarity searching complex data 
software handle requirements 
forces information retrieval systems handle large amounts data 
signature files inversion traditional search algorithms viable applications digital libraries 
similarity searching useful domains 
relational algebra handles exact queries cumbersome similarity search 
multimedia databases contain digital representations acoustic visual data 
current software understand meaning complex information 
information retrieval systems require small space overhead low computational overhead queries insertions 
fast response time important 
solution alternative simpler representation data 
representation contains information unique data item 
computation function 
maps problem space feature space 
reason called feature extraction function typical feature extraction function text documents automatic indexing 
function maps document point dimensional keyword feature space number keywords 
automatic indexing consists steps fo 
removes common words reduces remaining words stem normalized form 
instance reduces computer computation comput dictionary synonyms helps assign word stem concept class sch 
steps known preprocessing 
preprocessing extracts concepts contents 
method builds vector keyword space 
vector element gives coordinate dimensions corresponds concept class 
options computing coordinates feature space binary document vectors values indicate presence absence term 
vectors weighting functions values corresponding term frequency specificity illustrates document indexing maps document space dimensional feature space 
multi dimensional index structure stores feature space representation 
document document space feature extraction feature space point indexing 
mapping document dimensional feature space 
multidimensional index typically feature extraction maps larger problem space smaller feature space 
consider previous example document indexing 
document space document contains large number words 
searching collection documents requires string matching operations 
keyword space documents correspond multi dimensional vectors 
pattern searching documents contain set keywords involves computing linear expressions see 
faster string matching 
feature extraction enables scalable solutions problems deal large amounts information 
feature space similarity searching corresponds operations normalized vectors 
popular intuitive choice similarity measure cosine function 
example dimensional space similar terms angles choices available 
instance asymmetric functions preferred digital library applications 
cos cos 
case cosine value easily computed inner product see implementation notes section 
consequently matching query feature space represented linear expressions kan 
answers query ranked order similarity 
queries return answers threshold 
feature extraction provides natural low overhead solution similarity search 

cosine function vector similarity 
feature extraction similarity search limitations 
data items similar long representation feature space similar 
necessarily humans perceive things 
reasons 
problem space may ambiguous 
text notorious example 
humans handle problem surrounding text establish context 

feature extraction function non injective 
distinct points problem space map point feature space 
issue 
domain mappings widespread technique mathematics 
usually map complex domain simpler complexity refers operations domain 
known example operational method solution differential equations bs 
method consists going differential equation means integral transformation transformed equation 
transformed equation easier solve differential counterpart 
possible integral transformations laplace transform transform 
software context mapping problem space feature space enables computers manipulate complex information 
digital images example 
current image databases employ pattern obtain simplified representations images 
typical domain mappings mathematics simplified representations lose information 
consider significant image features low frequency coefficients fourier transform 
common features images color histograms textures shapes combination 
way feature extraction enables software systems process different types complex information understanding contents 
mapping large problem space feature extraction considers significant features feature space discarding rest 
truncation yields non injective mapping 
example documents map point keyword space 
mean identical 
insert query new entity query insert search new entity matching entities problem space matching entities insert query insert new entity new features new entity query entity feature matching entities extraction query features feature space problem space search matching features new features matches post process filtered matches 
insertion query processing feature extraction 
additional stages required feature extraction shaded 
function injective inverse mapping 
points problem space map single point feature space 
property affects applications employ pattern provide answers queries 
solution add post processing step filters false alarms typical number false alarms small post processing step usually performs sequential search eliminate 
post processing pattern requires additional stages 
feature extraction works features working set items documents images 
new item added data store system computes features coordinates feature space 
insertion needs extra step 

operation changes query processing 
fundamental idea feature extraction perform computations smaller simpler space 
processing takes place space 
consequently answering query requires computing representation feature space 
summarize feature extraction complicates insertion query operations requires additional stages data store 
shown 
information retrieval ir domains employs feature extraction extensively 
ir expanded fields office automation genome databases fingerprint identification medical image management data mining multimedia kan 
applications objective minimize response times different sorts queries 
performance depends fast system performs searches multidimensional feature space 
choice spatial access method sam critical 
may challenging 
unidimensional indexing methods scale exponentially high dimensionalities eventually reducing sequential scanning afs 
apply small number dimensions sufficient differentiate data items 
section design decisions provides alternatives larger number dimensions 
design decisions applying feature extraction pattern involves design decisions 
section covers decisions discusses potential choices 
creative part pattern obtaining suitable feature extraction function 
hard part pattern 
important requirements domains employ feature extraction correctness 
query return qualifying information misses false alarms due non injective mapping problem post processing removes 
formal proof required demonstrate correctness 
alternatively domain specific algorithm may automatically construct correct feature extraction function problem 
example fl describes algorithm indexing data mining visualization traditional multimedia datasets 
obviously feature extraction function domain problem dependent 
discrete fourier transform dft example feature extraction function 
function suitable pink noise signals energy spectrum follows wide range data stock prices musical scores fits description 
consequently dft usable different domains 
transform successfully similarity search afs 
properties guarantee completeness feature extraction 
dft orthonormal distance preserving distance data items problem space distance corresponding points feature space 
dft applicable similarity measure expressed euclidean distance feature vectors feature space 
known uses section provides additional examples feature extraction functions 
finding feature extraction function decide features consider 
explained features 
example systems dft keep low frequency coefficients 
lossy part pattern ensures feature space smaller problem space 
deciding number features involves tradeoff accuracy speed 
extreme system lossless keeps features 
ensures false alarms 
searching large feature space pattern trying avoid 
extreme feature 
case degenerate search feature space fast simply returns 
post processing takes long time filters data items 
number features determines balance searching time feature space post processing time 
third part pattern choosing suitable spatial access method 
choice depends number features dimensions feature space 
methods available indexing low dimensionality domains example hashtables tree variants 
number dimensions grows degenerate sequential scanning 
tree variants trees bkss wj offer performance larger number dimensions 
summarize feature extraction pattern involves design decisions determine feature extraction function 
challenging part pattern 
decide features consider 
decision determines balance search time post processing time 
choose spatial access method 
determines fast system search feature space 
consequences feature extraction provides solutions important information retrieval problems 
enables scalable solutions systems deal large amounts information 
second provides natural solution similarity search 
enables software process different types complex information understanding contents 
feature extraction pattern benefits liabilities manage large amounts data 
compared sequential scanning applications pattern obtain increasingly better performance volume data increases afs 
similarity searching corresponds vector operations feature space 
low computational overhead rank results 
software manipulate complex information having decode semantics 
key implementing multimedia databases 
users easily refine queries 
results available mark relevant 
system adjusts original query performs new search 
user feedback consistent queries converge iterations 
mode operation known relevance feedback sb 
feature space relevance feedback consists adding selected vectors query vector 
hard determine feature extraction functions 
subject doctoral dissertations careers 
efficient search feature space requires spatial access methods 
indexing methods scale number dimensions 
obtaining efficient scalable multidimensional index structure difficult 
inserting new items answering queries require additional processing 
architect determine right balance number features post processing time 
features require additional data store 
systems feature extraction data stores 
problem space data store holds domain specific entities documents images likewise feature space data store holds corresponding features 
shows situation 
implementation notes possible implementation solution group feature extraction code manager som object 
properties manager pattern excellent candidate encapsulating feature extraction 
manager access subject instances 
consequently ideal place implement post processing 
second domain functionality independent subject classes 
developers change implementation subject class affecting manager 
applications need feature extraction reuse manager code 
manager object encapsulates feature extraction indexing 
provides flexible solution 
example fancy spatial access method concentrate getting feature extraction function right 
satisfied part experiment different indexing algorithms persistence mechanisms changes transparent rest application 
feature extraction manager acts factory ghjv subject objects responsible lifecycle 
clients manager bring new subjects system 
population clients employ manager services obtain subject objects response queries 
client need answers query longer asks manager destroy corresponding subjects 
explained solution see section queries rely feature extraction return variable number answers ranked order similarity 
manager needs ordered collection store subjects 
access subjects collection useful service iteration increasing decreasing order similarity 
manager provide functionality clients implementing iterator ghjv pattern 
figures illustrate possible implementation 
depicts classes responsibilities collaborations shows uml fs class diagram 
separate strategy ghjv objects carry information retrieval processing 
object encapsulates feature extraction function 
likewise encapsulates post processing 
solution flexible strategy objects easier reuse individual methods 
configured plugged runtime 
database class charge database operations see 
manager dispose methods allow clients iterate results similarity search 
manager create subject dispose subject insert search iterate subjects map feature space client mapping strategy filtering strategy subject database filtering strategy discard false alarms manager subject feature set mapping strategy extract features manager subject feature set database insert search 
class responsibilities collaborations 
manager subject feature set shows client adds new subject information retrieval system sends message object argument 
manager object responds sending message 
returns vector represents object feature space 
sends message 
updates data store index adds object feature vector appropriate data stores 
provides example query operation dynamic configuration requirement 
systems feature sets answer query 
see known uses section example 
execute execute manager insert subject search subject int subject dispose database subject featureset featureset featureset 
manager collaborating objects 
attributes database classes shown 
subject client manager insert 
insert sequence diagram 
sends message passes query argument 
responds sending message 
maps query document feature space returns corresponding vector 
manager sends message 
message involves similarity function perform search feature space 
example cosine function determine similarity vectors 
easily computed inner product vectors see cos vector norms 
cartesian coordinates corresponds linear expression answers available message performs post processing discards false alarms 
sequence diagram illustrated leaves matches 
creates objects 
client iterates subjects sending message 
message returns object invocation 
client sends dispose message manager need subjects longer 
retires sending message 
figures messages implement feature extraction prefixed ir 
similarly messages involve database operations prefixed 
operations localized manager object 
start traditional database implementation add feature extraction size database starts cause scalability problems 
addition require changes 
implement methods 
delegate ir strategies figures 
modify similarity function 
example sql translates replacing clause call stored procedure computes cosine value 
related patterns section lists known patterns may useful implementing feature extraction 
client manager subject subject subject search dispose new new new dispose dispose dispose 
query sequence diagram 
messages sent dispose shown 
scenario section illustrates pieces fit simple scenario 
digital libraries multimedia databases may exotic scenario considers familiar domain 
professional assist companies find matches openings 
looking new employees provides wish list list contains qualifications looking exhaustive 
uses list query database 
query returns people database satisfy search criteria 
type application requires similarity search candidate feature extraction 
feature extraction begins studying wish lists get idea companies looking 
objective decide key characteristics differentiate potential candidates employer perspective 
features example assume knowledge programming languages smalltalk java modeling language uml 
feature space dimensions 
correspond point space 
figures corresponds deciding map dimensional space dimensional indexing algorithm 
case extracting features easy 
scanned languages corresponding coordinate set 
example joe lists ada fortran smalltalk corresponding vector joe information ada fortran lost 
performs full text search keywords 
computes feature vector stores database corresponding 
mapped feature space ready system 
assume opening knows smalltalk years experience java uml 
feature space query corresponds vector vquery note experience requirement corresponding feature lost 
message supplied wish list parameter 
maps query feature space obtains vquery 
search computes similarity query vectors database 
ones threshold returned 
assume order adam bob clark donna adam bob clark exact matches query vector traditional database system 
donna vector uml component similarity function threshold match 
traditional database system sort matching requires complex boolean expression 
feature extraction provides elegant solution 
similarity matching essential wish list carved stone 
example donna proficient omt credentials better probably get offer 
corresponds message 
computes similarity query vector vectors stored database 
post processing compares original query potential candidate returns ones meet experience requirement 
message implements post processing 
case full text search returned discards bob resume satisfy experience requirement 
completes manager creates object match 
clients send message iterate objects 
comparing original query feature extraction maps problem dimensional space solution simpler 
returns qualifying answers plus false alarms 
post processing performs full text scan answers discards false alarms 
sample code code fragments illustrate image retrieval system employs feature extraction 
code smalltalk implementation mars system orc 
method adds new images system 
corresponds situation illustrated 
method computes features image variable 
updates index image identifier file name computed features 
time writing working demo mars system available web ifp uiuc edu 



application feature extraction consists color histogram color layout texture information 
code fragment feature extraction follows 
type feature extracted 
image image 
image histogram 
image grid histogram 
texture image 
extraction actual features delegated image class 
code shows implementation color histograms 
type processing domain dependent 
image anumber anumber returns anumber anumber color histogram flattened array saturation significant hue significant length area length anumber anumber 
area width height 
array new length 
self self levels anumber 
self levels anumber 
anumber 
increment 
collect area finding answers query involves mapping query feature space finding matches filtering false alarms see 
code fragment performs search feature space distance function specific image processing 
ordered collection holds matches 
index start 
initialize 
new 
distance 
index 
index size min add index 
index index 
known uses feature extraction new 
pioneers gerald salton 
employed feature extraction smart system sal cornell long time term digital library coined 
information currently produced available electronic format application domains feature extraction 
include telecommunications multimedia medicine business despite widespread studies document feature extraction se 
table summarizes domains feature extraction functions examples remainder section 
domain feature extraction function sample query telecommunications singular value decomposition amount sales acme august th 
finance point discrete fourier trans find companies sales similar acme medical imaging shape size roundness orientation rays similar bob distance relative position ray 
trademark imaging image aspect ratio circularity acme symbol sufficiently simi transparency relative area trademark symbols sharpness complexity directedness cause confusion 
table 
examples feature extraction functions domains 

authors feature extraction perform ad hoc queries large datasets time sequences 
data consists customer calling patterns order hundreds gigabytes 
calling patterns stored matrix element numeric value 
rows correspond customers order hundreds thousands columns correspond days order hundreds 
case problem compression matrix consists time sequences maintaining random access generic compression algorithms lempel ziv huffman achieve compression ratios 
queries compressed data require decompression 
viable amounts data corresponding calling patterns 
feature extraction avoids need decompression 
function feature extraction singular value decomposition svd 
truncates original matrix keeping principal components row achieves compression ratio 
svd maps large customer calling pattern matrix smaller matrix feature space 
compressed format lossy supports queries specific cells data matrix aggregate queries 
example query specific cell amount sales acme august th method yields average error data value 

large amounts data typical financial domain 
feature extraction provides fast way searching stock prices frm useful time series databases weather geological environmental astrophysical dna data 
problem finding fast method locating sub sequences time series databases 
system needs answer queries find companies sales patterns similar acme sequential scanning viable reasons 
scale large amounts data 
second large space overhead search requires availability entire time sequence 
feature extraction provides fast dynamic solution 
case feature extraction function point discrete fourier transform dft 
maps time series trace multidimensional feature space 
method considers low frequency coefficients queries return superset actual results 
post processing eliminates false alarms space overhead small response times orders magnitude faster sequential scan 

handling large amounts data feature extraction applicable software systems manipulate complex information 
digital images typical example 
computers manipulating basic image components luminance chrominance 
decoding semantics information contained image contents research issue 
petrakis faloutsos pattern similarity searching image databases pf 
problem support queries image content database medical images 
typical query find rays similar bob ray problem requirements 
needs accurate 
results query return qualifying images 
second query formulation flexible convenient 
user able specify queries example gui 
response times scalability important 
performance remain consistently better sequential scanning size database grows 
system represents image content attributed relational graphs holding features objects relationships 
representation relies realistic assumption fixed number objects common images liver lungs heart common objects labeled application feature extraction function considers features labeled object image size roundness orientation distance relative position 
describe spatial relationship objects 
features sufficient medical purposes 
method handle additional features domain expert may want consider 
approach outperforms sequential scanning scales size database 

trademark images important elements industrial property 
identify producer product service 
gain legal protection trademark symbols formally registered 
patent office ensure new trademarks sufficiently distinctive avoid confusion existing marks 
currently manual assignment classification codes main method organizing trademark image collections 
method typically employs vienna classification system developed world intellectual property organization 
top level hierarchy distinct categories 
trademark image retrieval unique characteristics 
trademark search images primitive features shape 
second trademark registries hold large collections images electronic format 
trademark field successful retrieval criteria defined 
characteristics trademark image retrieval ideal candidate content base image retrieval techniques 
project automatic retrieval trademark images shape analysis ebg intended replace trademark image system currently uk patent office 
system needs answer type query candidate trademark sufficiently similar existing mark cause confusion studying trademark researchers concluded shape important characteristic 
attributes neglected 
example color information discarded images deliberately registered black white 
consequently works shape features 
feature extraction function considers features organized vectors 
boundary shape vector consists features aspect ratio circularity transparency relative area 
likewise family characteristics vector consists features right sharpness complexity directedness 
authors experimenting alternatives 
related patterns manager return proxy ghjv objects subjects 
may useful circumstances subjects large memory footprints available remote databases 
pattern independent feature extraction function 
domain experts select function suitable problem ensuring produces correct results 
strategy ghjv objects represent various feature extraction functions 
useful domains consider multiple feature sets 
example image databases popular feature choices patterns colors textures 
digital library systems feature extraction compound documents contain text multimedia information 
case components probably extension object gam pattern provide interfaces information retrieval operations 
acknowledgments ralph johnson originally encouraged document feature extraction pattern directed pioneering gerald salton 
members software architecture group john brant ian chai brian foote peter hatch ralph johnson don roberts joe yoder brian james provided substantial feedback drafts 
shepherd kyle brown additional suggestions 
smalltalk implementation mars written michael ortega provided feedback suggestions improvement 
likewise members mosaic writer workshop plop provided valuable input 
additional comments information retrieval experts came christos faloutsos members group 
am grateful 
afs rakesh agrawal christos faloutsos arun swami 
efficient similarity search sequence databases 
proc 
fodo conference 
available web ftp cs umd edu pub techreports fodo ps 
bkss norbert beckmann hans peter kriegel ralf schneider bernhard seeger 
tree efficient robust access method points rectangles 
hector garcia molina jagadish editors proceedings acm sigmod international conference management data pages atlantic city nj may 
bs 
handbook mathematics 
springer verlag third edition 
ebg john boardman margaret graham 
similarity retrieval trademark images 
ieee multimedia april june 
fl christos faloutsos king ip david lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
proc 
acm sigmod pages may 
available technical report cs tr umiacs tr institute systems research tr web cs umd edu pub techreports sigmod ps 
fo christos faloutsos douglas oard 
survey information retrieval filtering methods 
technical report department computer science university maryland college park md august 
frm christos faloutsos ranganathan yannis manolopoulos 
fast subsequence matching timeseries databases 
proc 
sigmod conference pages 
available web ftp cs umd edu pub techreports sigmod ps 
fs martin fowler kendall scott 
uml distilled applying standard object modeling language 
object technology series 
addison wesley june 
gam erich gamma 
extension object chapter 
martin mrb october 
ghjv erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
kan paul kantor 
information retrieval techniques 
martha williams editor annual review information science technology volume 
american society information sciences 
kay alan kay 
keynote address 
oopsla 
flip korn jagadish christos faloutsos 
efficiently supporting ad hoc queries large datasets time sequences 
proc 
sigmod conference 
available web ftp cs 
umd edu pub techreports sigmod ps 
moo fred moody 
sing body electronic year microsoft multimedia frontier 
penguin group 
mrb robert martin dirk riehle frank buschmann editors 
pattern languages program design 
software patterns series 
addison wesley october 
orc michael ortega yong rui kaushik chakrabarti sharad mehrotra thomas huang 
supporting similarity queries mars 
proc 
th acm international multimedia conference november 
pf petrakis christos faloutsos 
similarity searching medical image databases 
ieee trans 
knowledge data engineering may june 
sal gerard salton 
interactive information retrieval 
technical report tr cornell university computer science department august 
sb gerard salton chris buckley 
improving retrieval performance relevance feedback 
technical report tr cornell university computer science department february 
sch bruce schatz 
information retrieval digital libraries bringing search net 
science january 
som peter 
manager chapter 
martin mrb october 
wj david white ramesh jain 
similarity indexing ss tree 
proceedings th international conference data engineering pages 
ieee computer society february 

