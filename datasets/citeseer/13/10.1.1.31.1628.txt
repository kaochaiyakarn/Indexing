graph rewriting visual language database programming king university sheffield college university london contact peter rodgers department computer science university sheffield regent court portobello street sheffield dp uk 
email rodgers dcs shef ac uk textual database programming languages computationally complete disadvantage giving user non intuitive view database information manipulated 
visual languages developed years allowed naive users access direct representation data graph form concentrated user interface complex programming tasks 
need system combines advantages programming methods 
describe implementation spider experimental visual database programming language aimed programmers 
uses graph rewriting paradigm basis fully visual computationally complete language 
graphs rewrites represent schema instances database 
unique graph rewriting method spider syntactic semantic simplicity 
form algorithmic expression allows complex computation easily represented short programs 
furthermore spider greater power normally provided textual systems show queries schema associative queries performed easily requiring additions language 
believe identified need visual language programmers complex data structures databases 
graphs wisely aid experienced users comprehend complex concepts 
previous area graph visual languages concentrated allowing expert users access low complexity programming facilities systems met aims success 
attempts allow expert users access advantages visualisation data programs fruitful 
describes spider visual database language graph rewriting 
integrates complex programming facilities graph data representation seamless manner 
discuss types query show paradigm benefits available textual query languages 
graph rewriting derives mathematical area graph grammars 
textual programming language uses graph rewriting 
derived graph grammars grammars basis powerful visual graph rewriting language loyall kaplan 
give examples state oriented data oriented applications 
definition rewrites suffer restrictions appearance triangular form 
rewrites parallel basis largest number non conflicting subgraphs rewritten 
progres systems developed graph rewriting databases 
progres combines visual rewriting textual programming language 
non deterministic approach subgraph matching 
visual graph rewriting system object oriented database primitive changes specified explicitly diagram 
system rewrites operate parallel matching subgraphs 
spider implemented database programming language 
fully visual graphs display data programs 
language works rewriting graph containing database nodes initiating computation 
produces computationally complete conceptually simple visual programming language allows programmers direct access representation data structure modifying 
program contains transformations similar structure functions predicates declarative textual languages 
transformations composed series graph rewrites 
rewrites formed way maintain visual structure data rewrite having graphs represent graph matched represent changes 
transformations started simply presence application nodes host graph called application graph 
application nodes represent data introduced application graph initially user transformations executed consequence 
execution halts application nodes remain application graph 
allows spider syntactically simple flexible types transformation 
spider deterministic approach rewriting single subgraph application graph 
achieved sorting graph matching highest ordered subgraphs 
rewriting potential subgraphs allows formation classes non conflicting transformation 
functionality textual languages spider natural consequence paradigm 
programs query alter schema possible 
queries allow access meta data forms schema 
spider capability perform associative queries 
examine structure data connections database treated graph paths connecting specified nodes results 
database integrated spider uses binary relational model 
relational databases contain relations may number entities binary relational database contain relations entities 
allows database easily represented graph relation represent arc set entities schema level represent set arcs connect instance values instance level 
section contains overview spiders user interface programming method update schema instances database example 
section detailed description graph matching strategy spider 
associative queries section 
give section 
appendix contains formal definition spiders rewriting strategy 
appendix demonstration computational completeness spider implementing normal order reduction lambda calculus program compare graph rewriting functional paradigm 
informal overview spider section introduce spiders syntax semantics informal manner database update command running example 
database small section london local election database 
update find people time winner ward election 
method add required meta data schema update instance data 
formal approach semantics spider appendix graph primitives spiders data programs formed various kinds graph constructed types primitives nodes arcs 
primitive characteristics described sorting graph 
possible node types set nodes circular border instance nodes oval application nodes rectangular 
nodes labelled may duplicate identifiers graphs superscript node label distinguish nodes label 
set instance nodes describe data application nodes performing graph transformations 
arc types function arcs black solid lines labels instance arcs grey dotted lines labels 
types arc directional 
user interface spider system main windows 
schema window allows user define save load binary relational database schema 
data entered deleted instance window schema appears changed window 
transformations manipulate database constitute visual program defined transformation window 
execution transformations displayed application window 
window menus access functionality provided 
user feedback written free space menu bar windows output dialogue box case important messages 
position mouse pointer coordinates right menu bar 
windows including application window facilities edit graphs 
basic operations described seen edit menu schema window 
mouse button click primitive drag area button selects primitives editing operations require 
windows editing options adding editing node moving nodes mouse button drag adding arc selected nodes editing type name arc copying cutting deleting selected subgraphs unconnected arcs left graph added clipboard pasting copied cut subgraphs graph clipboard 
pasted subgraphs originate graph long primitives valid destination graph 
ensure structures spider system valid graphs 
arcs connecting nodes terminal nodes selected arc added arcs connect node removed node removed 
restrictions editing specific graphs explained due course 
primitive creating editing commands bring dialogue box allows input characteristics method means invalid characteristic options deactivated 
schema window menu options displayed windows file menu commands exit window print window contents postscript file diagrams produced 
view menu main functions access windows redisplay current window contents 
case schema window windows accessed 
rearrange option leads sub menu redraw command redisplay window may contain access graph rearranging algorithms instance window currently functionality 
display options sub menu facilities changing colour size shape primitives graph 
database schema window schema window shown includes menu options discussed section user interface 
spider displays manipulates schema information window allowing set nodes function arcs 
window initial displayed allows access view menu windows system 
schema consists set nodes connected function arcs 
schema window file menu facilities creating saving loading databases 
instance window shows contents instance window example election schema associated instance data 
window entered schema window selecting subgraph schema indicate part database displayed 
note instance nodes connected function arcs corresponding set nodes 
instance connected set node instance arc function arc instance nodes corresponding set nodes 
instance node function arc added graph selecting template primitive 
node automatically connected appropriate set node 
function arc system ensures subsequently selected nodes correct 
instance arcs edited indirectly adding deleting instance node 
set nodes edited 
copying cutting deleting instance nodes function arcs allowed 
pasting valid subgraphs permitted 
additional menu execute unique window 
commands query update start user defined program discussed 
display instances altered extent hiding revealing parts graph 
problem displaying instance data non trivial 
systems sql table format allow easy access large amounts data simple relationships seen 
graph representation allows information rich display connections instances shown diagram easily unmanageable 
problems associated visualising large amounts data discussed consens banks person soot er cr ward res pg vote wr candidate res cr wr election date cr wr cr ward kc cr cr gained gained gained gained gained gained gained instance window contents goldman 
transformation window winner displayed wr cr winner wr wr cr winner wr transformation transformation window visual program written spider comprised number transformations 
window winner transformation shown 
highest level transformation program rest shown figures 
operation program discussed explanation spider programming language consists rest section 
transformations defined user name 
transformation consists sequence graph rewrites winner 
graph rewrite lhs graph left hand side specify template subgraph changed rhs graph right hand side specify resultant alteration 
transformations saved loaded file menu 
lhs rhs graphs directly edited window edit menu option create graph editing sub window particular graph 
edit menu options create delete rewrites 
allows user toggle state transformation query update current state shown view menu window 
note update usually complex query maintain database data query destructively rewrite database graph 
lhs graph lhs graph defines template find subgraph rewritten 
special forms primitive effects described variable nodes arcs drawn italic labels negative primitives drawn thick lines 
nodes graph may connected way type arc application node type graph name transformation 
rhs graph new subgraph replace matched lhs graph rhs graph 
excepting negative primitives nodes arcs valid lhs graph valid graph may connected way 
may number application nodes graph provides mechanism calculation recursion 
duplicate identifiers nodes type label lhs rhs graph duplicate identifiers 
written superscript node label 
duplicate identifiers seen 
wr cr cr vn winner gained winner best gained cr wr best gained cr cr wr greatest best gained arg best gained arg cr wr gained winner transformation application graph application graph host graph rewritten 
contains set instance application nodes 
restriction may connected instance function arcs features loops arcs source destination duplicated labels possible 
initial application graph created instance graph adding application node specifying execution query update mode 
queries effect database rewrite application graph destructive manner resultant graph update program database data maintained 
note updates create invalid databases due structure new graph allowed change database 
application graph start winner update shown 
note database simple addition winner application node 
possible edit application graphs arbitrary manner addition deletion changing primitives 
file menu allow graphs saved loaded 
editing file functions designed evaluation queries updates mean spider constrained database general programs may written data structure 
helps testing operation spider commands file menu allow formation execution test bed 
view menu commands hide giving user facility hide selected parts application graph affecting rewriting process show reveal hidden primitives 
initiate execution buttons provided step run 
step performs just execution step run performs execution steps program completed 
transformation step program executed performing series transformation steps 
transformation step process applying created newest application nodes application graph 
node applications cause transformation name node label applied 
rewrite graph creating deleting primitives 
execution stops longer application nodes graph 
newest application node 
created transformation step considered applied parallel 
application conflict occurs node deletes area graph matched application window start execution different node step 
situation execution halted error message 
responsibility avoiding application conflicts lies user 
application node applied graph rewrite transformation matches subgraph application graph 
rewrite transformation application node remains graph 
application graph contains application node winner newest node graph applied 
resultant rewrite depend lhs graphs winner matched application graph 
newest strategy applying application nodes creates hierarchy transformations user knows application nodes derived applied older ones activated 
allows user structure programs sensible clear manner 
finding matching subgraph graph matching process finding part application graph match lhs graph 
lhs graph application subgraph logical structure primitive labels lhs primitive variable 
potential subgraphs matched method deciding discussed detailed section graph matching 
node arc lhs graph variable label may match primitive type application graph 
variable instantiated label 
occurs kind primitive lhs graph match label time 
negative nodes arcs drawn thick lines lhs graph match subgraph matches positive primitives part subgraph matches lhs graph 
positive negative primitives 
positive arcs connected negative nodes treated negative arcs 
note positive part subgraph matched subgraph 
see lhs graph winner find match application graph 
set nodes person ward res exist application graph connected arc labelled winner arc drawn thick line negative arc 
graph rewriting appropriate subgraph matched rewritten 
rewrite decided comparing positive primitives lhs graph rhs graph 
section consequences having attractor node rhs graph explained gives simple rules graph rewriting leave application graph primitives lhs rhs graphs 
primitives lhs graph rhs graph deleted application graph 
primitives rhs graph lhs graph created application graph 
arcs source destination node deleted deleted 
variable primitives get created instantiated label instantiated variable name rhs lhs unique label 
set node deleted instances explicitly defined 
lhs rhs graph deleted 
note nodes defined type label duplicate identifier superscript label 
arcs defined type label source destination nodes 
comparing lhs rhs graphs rewrite winner see application node winner graphs changed application graph 
true set nodes person ward res new arc winner created set nodes rhs graph lhs graph negative arc name effect rewriting process 
resultant application graph addition function arc winner 
rewrite performs query update database schema 
transformation step application node application graph winner 
lhs graph match time negative arc match winner arc created step second lhs graph tried 
successful variable node wr match ward res instances person node attached winner arc graph matched containing node wr section graph matching explains method determining matched subgraph wr instantiated value 
comparison second rhs graph indicates application node connected wr function arc created 
result rewrite seen 
application nodes graph newest applied step 
winner applied subsequent application nodes disappeared 
rewrite takes person connected candidate res arc specified ward res instance winner arc attaches arc 
relevant people winner arc attached rewrite longer applied second rewrite 
removes application node adds application node 
transformation remove created winner arcs person highest vote 
copying vote nodes people winner arcs deleting winner arcs uses builtin transformation greatest delete duplicate nodes 
second rewrite takes remaining duplicate node finds original matches winner arc relevant person 
continues rewrites match 
winner arc left leaving third rewrite delete application node 
application window contents step ward winner soot er cr kc person banks cr ward res wr wr cr election date cr candidate res cr vote cr pg wr gained gained gained winner gained gained gained gained winner left application node graph 
takes ward res instance dealt repeats process 
continues second winner rewrite meaning third match deleting application node finishing execution leave just updated database 
note program deals nicely partially updated database 
new ward res instances added program run program run find new winners adversely affecting updates run 
attractor nodes attractor nodes modify rewriting process 
source destination node arc deleted arc attached attractor node exists 
attractor nodes shaded appearance 
normal nodes appear application graph 
attractor nodes rhs graph allowed 
built transformations hard coded transformations exist transformations expect instance nodes connected application node arcs arg arg 
attractor instance result instance node 
include add multiply minus divide greatest 
similar calculations instances set including 
produce result calculated instances set node 
built transformations simply alter display features primitives act 
example highlight causes argument node outlined bold 
arcs highlighted nodes highlighted 
application window execution halts step kc cr cr cr soot er pg wr candidate res banks person cr cr election date ward res vote wr ward cr wr gained gained gained gained winner gained gained winner winner winner gained transformation graph matching method graph matching introduced briefly previous section 
discuss method spider uses detail 
previous rewriting systems taken different approaches graph rewriting 
matching subgraphs rewritten 
spider rewrite transformation deletes connected nodes application node cause conflict application graph lhs graph match overlapping ways 
conflict avoided subgraph rewritten 
progres takes approach arbitrarily selecting rewritten subgraph candidate matches 
unfortunately causes nondeterministic behaviour 
variation idea loyall kaplan rewrite largest subset non conflict causing subgraphs result non determinism implemented spider 
example figures methods leave single node graph defined 
spider rewrites single subgraph gain advantages increasing number classes rewrites allowed 
solve problem maintaining deterministic programming language sorting candidate subgraphs 
sorting considers subgraphs surrounding areas application graph 
result differentiate subgraphs entirely equivalent means rewriting equivalent subgraphs results application graph 
cases comparing surrounding subgraph unnecessary differences candidate subgraphs 
ordered comparing highest ordered nodes intuitive method easy user decide subgraph chosen 
paragraph gives users perception method equivalent say sort application graph lhs graph backtracking search application graph starting highest valued primitives node lhs graph turn 
node matching ensure node characteristics arcs connected previously matched nodes satisfactorily matched 
application graph sorting view improves implementation efficiency system highest ordered subgraph matched 
means subgraph application graph large number case lhs graph contains variable primitives 
large number sorted large processing cost 
efficiency maximised sorting algorithm orders specific primitives instance constants nodes large number arc connections higher matched 
reduce amount backtracking performed possible take number equal subgraphs attempt sort surrounding graph 
initial sort application graph changes due graph rewriting tend leave majority primitives unchanged graph sort transformation step integrate unsorted new primitives performing sort entire graph 
graph sorting algorithm graph represented list nodes list arcs 
sorting change order primitives list add position value primitive 
position list position highest valued 
primitives separable position 
sorting algorithm uses variety comparison functions take nodes arcs return equal greater 
sorting principle constant refinement position nodes arcs position pair primitives discovered different compared stage 
outline algorithm follows sort nodes characteristic sort arc characteristic repeat changes position sort arcs connection sort nodes connecting arcs nodes arcs sorted characteristic 
significant 
order node characteristics positive higher negative constant higher variable application higher instance higher set node names string comparison function strcmp defined string valued higher string aa turn valued higher string duplicate identifiers strcmp 
order arc characteristics positive higher negative constant higher variable instance higher function function arc names function strcmp 
nodes sorted neighbouring nodes 
requires series iterations propagate difference graph 
loop performed sorts arcs connecting nodes nodes position number arcs connected improvements ordering graph 
arc connection sort loop compares position source nodes arcs difference destination nodes compared 
sort nodes connecting arcs difference position values connecting arcs arcs paired order position 
node connecting arcs ordered higher 
algorithm take account possibility multiple duplicate arcs duplicate nodes 
resolved ordering higher node largest number duplicate arcs node 
shows graph type duplicate arc case node ordering rightmost labelled leftmost node node labelled 
complexity algorithm greater standard sorting algorithm routines middle sort elements previously changed 
sorts effectively pockets primitives previous comparison able distinguish 
shows example application graph primitives position illustrate features sorting 
note nodes inseparable consider graph surrounds 
difference graph top nodes arcs connected higher position 
differences arcs top entirely equivalent position 
eventually algorithm propagates differences nodes means arcs separated leaving highest valued node higher value 
ordering shown numbers primitives 
applying method example figures shows highest valued instance node lhs graph match highest valued instance node application graph 
follows connecting arc matches node match 
resultant graph simply node 
associative queries associative queries introduced king hydra system 
principle information relationships data database useful data 
example criminal investigation database pathways suspects major interest objects closely linked particular individual vicinity individual 
order allow associative queries sort hydra special commands return functions instances associations 
knock effects language 
instance dealing problem functions data elements 
associations graphs semantic networks 
section show associative queries written spider need extensions language 
result shortestpath arg tagged arg shortestpath failed result keep tagged failed transformation shortestpath shortestpath arg arg current shortestpath arg arg tagged shortestpath result current pathway tagged keep tagged keep result result keep tagged keep pathway tagged transformation current tagged tagged current pathway tagged tagged current tagged current tagged result current tagged tagged pathway current result tagged pathway tagged transformation current tagged tagged current tagged tagged pathway failed current transformation application graph start shortestpath pg kc cr soot er wr cr cr banks wr cr shortestpath cr cr wr gained gained gained arg gained gained gained arg set nodes hidden picture 
shortest path queries figures show transformations shortestpath query 
find connection nodes shortest path add failed instance node graph path 
nodes unconnected subgraphs 
shows election database application graphs section set nodes hidden view find connection people banks 
nodes connected shortestpath application node arcs arg arg 
shows application graph execution completed 
see stood election ward 
note chosen ease comprehension results deleting nodes path 
application graph result shortestpath cr banks wr wr cr minus tag tag depth arg center arg center tagged tagged depth tag tagged center depth tag tag depth center tagged tagged tag tagged tag tag minus tagged depth tagged center depth arg center arg transformation depth center tag tag tagged depth center tagged vicinity depth center tag vicinity depth tagged center transformation vicinity vicinity vicinity tag tagged highlight arg transformation vicinity queries vicinity query finds instances close chosen center 
user decides deep search 
figures show transformations query 
shows find instances arcs cr 
result shown 
note query built transformation highlight emphasise resultant instances 
primitives highlighted subgraph appear thick borders confused negative primitives drawn thick borders appear application graph 
alternative method showing result path query 
informal overview spider including syntax semantics user interface 
illustration purposes performed relatively complex calculation example database 
shown spider enables programmers perform queries normally available database programming languages 
paradigm introduced differs greatly ones currently database programmers 
believe form basis practical system hard empirical evidence spiders suitability useful programming language area 
interesting avenues research include looking useful primitives added system 
syntactically simple system 
making complex add substantially semantics 
candidates inclusion lhs fold nodes may match different nodes lhs primitives match time application graph primitive reducing need tagging nodes 
method encapsulating subgraphs single node useful 
approach hypernodes subgraphs arc connecting outside graph 
general approach arbitrary subgraphs application graph start vicinity banks cr wr kc wr cr cr cr wr cr soot er cr pg vicinity center gained depth gained gained gained gained gained result vicinity kc cr pg banks wr wr cr wr cr cr soot er cr cr gained gained gained gained gained gained encapsulated difficult possible 
authors grateful epsrc ibm uk laboratories financial support professor sharman ibm helpful discussions 

petre green 
learning read graphics evidence seeing information display acquired skill 
journal visual languages computing 
pp 

catarci santucci 
graphical query language recursion 
ieee transactions software engineering 
pp 


consens cruz mendelzon 
visualizing queries querying visualizations 
sigmod record march 
pp 


cordy graham 
visual specification graphical output 
journal visual languages computing 
pp 


mohan kashyap 
visual query language graphical interaction schema intensive databases 
ieee transactions knowledge data engineering 
pp 


nagl 
tutorial bibliographical survey graph grammars 
proceedings nd international workshop graph grammars application computer science 
lncs 
springer verlag 
pp 


kennaway sleep 
experimental graph rewriting language 
proceedings th international workshop graph grammars application computer science 
lncs 
springer verlag 
pp 


loyall kaplan 
visual concurrent programming grammars 
journal visual languages computing 
pp 


schurr 
rapid programming graph rewrite rules 
proceedings usenix symposium high level languages santa fe october 
pp 


gyssens paredaens van den bussche van gucht 
graph oriented object database model 
ieee transactions knowledge data engineering 
pp 


frost 
binary relational storage structures 
computer journal 
pp 



information technology support law enforcement investigations intelligence 
icl technical journal november 
pp 


goldman goldman kanellakis zdonik 
isis interface semantic information system 
proceedings acm sigmod international conference data engineering 
pp 


king 
extending semantic power functional database query languages associational features 
aix en provence 
pp 

appears des information 
pp 


quillian 
word concepts theory simulation basic semantic capabilities 
behavioural science 
pp 


poulovassilis levene 
nested graph model representation manipulation complex objects 
acm transactions information systems 
pp 

appendix formal definition section gives formal treatment graphs structures introduced informal way section 
allows define graph matching rewriting method spider system 
formal definition specify restrictions graphs 
definition spider graph define spider graph tuple set nodes graph set arcs tuple containing functions describe nodes 
node characteristics described single function tuple convenience functions kept separate tuple containing functions describe arcs 
similar node tuple functions describing arc characteristics kept separate function associates nodes labels 
set possible node labels function associates nodes duplicate identifiers 
set possible duplicate identifiers describes characteristic nodes 
elements codomains atomic values function associates arcs labels 
set possible arc labels describes characteristic arcs 
elements codomains atomic values functions give source destination nodes arcs respectively 
empty node labels arc labels duplicate identifiers value restrictions hold spider graph nodes empty labels function arcs empty labels instance arcs empty labels 
instance arcs constant 
definition application graph application graph spider graph restrictions apply definition lhs graph lhs graph spider graph sets defined partition similarly partition 
partition set collection non intersecting subsets union set 
informally sets divide graph positive negative primitives 
restrictions hold arc connected negative node negative arc application node allowed graph application node positive node labels duplicate identifiers different 
name name dup dup set instance application attractor variable constant name name function instance variable constant nil nil function nil instance nil instance cons tan nil constant constant pos pos neg neg pos neg pos neg neg neg neg application application neg application definition rhs graph rhs graph spider graph restrictions attractor node allowed graph node labels duplicate identifiers different definition transformation definition program transformation definition label sequence pairs set possible transformation definition labels 
lhs graph rhs graph true formulae follow rest section distinguish functions particular node arc sets obvious represents formula immediately 
application node left hand side graph label transformation definition 
program consists set transformation definitions 
definition graph node sets arc sets subsets node arc sets lhs graph sets nodes arcs application graph graph pair injective functions injective function different members domain mapped member codomain 
informally functions mapping primitive lhs graph unique primitive application graph 
definition define graph match 
restrictions apply node map node type constant node map node label variable nodes label map nodes label arc map arc type constant arcs map arc label variable arcs label map arcs label attractor attractor name lhs rhs 
lhs rhs name lhs rhs lhs lhs application sp lhs app lhs app lhs lhs app app lhs app lhs app lhs lhs constant lhs variable variable lhs lhs constant lhs variable variable node matches source arc source matched arc node matches destination arc destination matched arc definition graph match application graph lhs graph 
define graph match graph graph positive nodes map application graph node 
positive arcs map application graph arc 
informally graph match mapping positive primitives lhs graph primitives application graph long mapping lhs negative primitives lhs graph unmapped primitives application graph 
note simplicity define subgraph application graph matched 
definition rewrite rule rewrite rule lhs graph rhs graph tuple injective partial functions 
note partial function strictly function maps subset domain subset codomain 
useful indicate node deleted defined similarly arc deleted defined 
node created defined arc created defined 
define follows exists lhs node node positive equal characteristics rhs node 
function set pairs boolean value true characteristics source destination equal 
note exist source destination arc value arc false 
function largest possible subsets lhs lhs app lhs pos lhs app pos lhs app lhs app lhs app pos lhs pos lhs lhs rhs lhs rhs lhs rhs lhs rhs lhs lhs rhs rhs pos lhs rhs pos lhs rhs lhs rhs lhs rhs lhs defined partial function possible arc mapped arc definition necessary duplicate arcs nodes exist 
duplicates exist graph injective partial function preserved 
definition labelling functions define labelling functions graph match finding labels new matched primitives defined follows note functions assumed appropriate ones primitive 
constant nodes keep label 
deleted variable nodes label 
variable nodes kept graph instantiated label 
new variable nodes instantiated instantiated label 
new variable nodes instantiated unique label 
constant arcs keep label 
deleted variable arcs label 
variable arcs kept graph instantiated label 
new variable arcs instantiated instantiated label 
new variable arcs instantiated unique label 
functions give label primitive appears application graph constant primitive retaining label corresponding primitive lhs rhs graph 
primitive application graph instantiated variable gets label matched application graph primitive variable 
instantiated label undefined unique new label 
rhs lhs rhs lhs rhs lhs rhs name lhs rhs name app lhs lhs rhs lhs rhs constant lhs variable undefined nil lhs variable defined rhs variable undefined lhs variable rhs variable undefined lhs variable unique value lhs rhs constant lhs variable undefined nil lhs variable defined rhs variable undefined lhs variable rhs variable undefined lhs variable unique value definition graph rewrite position formally define graph rewrite graph rewrite application graph lhs graph rhs graph new application graph derived application graph graph match lhs graph rewrite rule derived lhs rhs graphs graph match graph match rewrite rule formed labelling functions note definition application graph requires nodes constant duplicate identifier requires arcs constant 
unmatched primitives unmatched application nodes instance nodes set node deleted members new application graph label type 
unmatched app arcs members new application graph source destination nodes new graph 
matched unchanged primitives matched deleted node application graph put new graph 
matched deleted arc application graph source destination new graph put new graph 
new primitives new node rhs graph put new graph 
app lhs rhs app lhs rhs new new new new new app lhs new app app lhs lhs rhs lhs rhs nil app undefined instance app set app set set instance set set new new new app new app app undefined new new new new app new app new app new app app defined defined new new app new app app defined defined new new new new app new app new app new app rhs undefined new new new rhs new arc rhs graph put new graph 
attracted arcs informally attracted arc application arc matched source destination node deleted 
characteristics nodes existing application graph unconnected attached attractor node 
attractor node arcs created 
definition node application application graph node transformation definition consisting sequence pairs node application application graph defined node label transformation definition label different new graph old graph 
pair transformation definition sequence graph match informally node application application graph formed rewrite lhs rhs pair lhs graph sequence matches 
definition transformation step application graph set created nodes created time program transformation step application graph formed parallel node application nodes created method 
set node applications formed transformation definition transformation label 
set graphs graph match lhs graph matched new node subset 
matched new arc subset 
rhs undefined new new new rhs new rhs new rhs att rhs att attractor app undefined new new new att app undefined new new new att app app app app application lhs rhs 
lhs rhs app app app app app app app lhs rhs lhs rhs lhs app app application app sp ks step app 
app app kj kj sub 
sub app kv lhs kv app defined app sub app defined app sub pair containing nodes arcs matched lhs graph defined application nodes rewritten graphs 
deleted instance node deleted set node match 
application arcs rewritten graphs 
deleted disconnected source destination match 
transformation step defined application graph program application conflict occurs 
application conflict occurs application conflict occurs primitives deleted node application matched 
define transformation step informally transformation step formed rewrites newest nodes application graph long rewrites deletes primitive matched rewrite 
appendix computational completeness appendix give implementation lambda calculus order demonstrate spider computationally complete 
rest rest app app undefined rest app app undefined rest app app kw lhs app app kw lhs aj step step step step step step rest sub sub 
sub step rest sub sub 
sub app app app 
nq app step step app app app 
nq app step step app app app 
aq app step step app app app 
aq app step step app app app 
aq app step step app app app 
aq app step step arg current transformation var body substitute exp right left exp substitute lambda var var left var var exp lambda left substitute var var exp exp var var substitute exp exp var tree var exp exp tree exp body var substitute left right substitute var exp substitute body left right exp body var transformation substitute substitute arg arg arg arg arg transformation arg figures give program calculate normal order reduction lambda calculus expression 
simple example expression application graph 
result single node 
program uses pure version lambda calculus constants easily extendable include builtin functions add adding appropriate reduction rewrites transformation 
implementation program takes effort required traditional textual language 
due current left lambda left right left current right left current substitute transformation lambda right left current left right lambda left right current left right tree tree tree tree transformation application graph lambda lambda right left right left left right left right example resultant application graph main features ability explicit changes lambda tree rewriting nature lambda calculus reduction 
specifics reduction requiring substitutions variables lambda subexpressions variable left program simple 
major difference requirement copy subtrees requires spider transformation achieve 
