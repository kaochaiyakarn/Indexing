dynamic object replication migration protocol internet hosting service michael rabinovich labs research park avenue florham park nj rabinovich dun way nj rajaraman dimacs center rutgers university piscataway nj amit aggarwal department computer science university washington seattle wa proposes protocol suite dynamic replication migration internet objects 
consists algorithm deciding number location object replicas algorithm distributing requests currently available replicas 
approach attempts place replicas vicinity majority requests ensuring time servers overloaded 
request distribution algorithm uses simple mechanism take account server proximity load knowing 
replica placement algorithm executes autonomously node knowledge object replicas system 
proposed algorithms rely information available databases maintained internet routers 
simulation study synthetic workloads network backbone uunet largest internet service providers shows proposed protocol effective eliminating hot spots achieves significant reduction backbone traffic server response time expense creating small number extra replicas 
replication mirroring internet parlance commonly address scalability problem popular internet sites 
currently mirroring done manually system administrators monitor demand information sites decide data replicated 
difficult task especially important daunting growing number companies offer hosting service service maintaining providing access objects belonging third party information providers 
scale systems increases terms number objects hosting servers decision space replica placement increases brute force worst case design prohibitively expensive 
appropriate new technology system administration related object placement may factor limiting scale hosting platforms 
propose suite algorithms dynamically replicate internet objects response changing demand 
addition automating placement decisions dynamic replication system responsive changes demand patterns 
fundamental issues dynamic replication system address deciding number placement replicas distributing requests object replicas 
protocol replica placement decisions node autonomously requests serviced node knowledge replicas objects exist 
request distribution algorithm takes server load proximity account knowing actual load servers 
illustrate problem simple roundrobin request distribution distribute load replicas oblivious proximity clients servers 
hand directing requests closest replica algorithms create problems server swamped requests originating vicinity matter additional replicas server creates requests sent anyway 
main novelty request distribution algorithm allows hosting server derive bounds number requests going potential new replicas local knowledge 
algorithm wellsuited dynamic object replication 
allowing host decide object migration replication autonomously bounds enable object relocation done en masse waiting load observations move 
system intended scale hopelessly slow adjusting demand changes 
replica placement algorithm relies bounds provided request distribution algorithm avoid vicious cycles back forth migrations replications deletions objects 

past done caching clients proxy servers provide shared cache multiple clients 
clearly useful caching obviate need replication hosting platform evidenced wide mirrors 
static non personalized objects cached 
second caching outside control service provider complicates issues copyright protection usage metering advertisement insertion update propagation giving service providers incentive disallow caching objects cacheable 
numerous studies shown proxy hit rates 
caching complimentary service solution considered 
remainder consider client requests missed caches 
existing internet replication concentrated request distribution fixed set replicas 
commercial products offering transparent load balancing web servers local area network front ip multiplexing device 
approaches katz dns servers request distributors 
cisco distributed director ibm network dispatcher capable request distribution wide area network 
systems offer dynamic object replication migration 
algorithms server selection wide area network described 
notably algorithms fei clients choose servers previously observed latencies response times implicitly accounting load network proximity factors 
algorithms focus replica selection consider replica placement aspect 
schwartz describe various methods determine proximity nodes network 
cisco distributed director routers databases extract proximity information 
cisco asynchronously client requests reducing request latency expense potential staleness proximity information 
reason routing proximity metric network centric view reducing backbone bandwidth overriding concern 
existing protocols performance motivated dynamic replication rely assumptions unrealistic internet context 
wolfson propose adr protocol dynamically replicates objects minimize communication costs due reads writes :10.1.1.38.9051
internet objects rarely written see suitable cost metric internet 
addition protocol imposes logical tree structures hosting servers requires requests travel edges trees 
mis match logical physical topology especially node way interpret request collect statistics requires practice separate tcp connection pair nodes result impractically high delay request propagation 
dynamic replication protocol proposed specifically web 
burdens internet routers task maintaining replica locations web objects intercepting interpreting requests web objects 
assumes request arrives single packet 
authors note protocol deployed today networks 
algorithmically adr decide replica placement assumption requests serviced closest replica 
protocol allows load sharing server overloaded requests vicinity 
objects replicated neighboring servers result high delays overheads creating distant replicas common case mirroring internet 
adr requires replica sets contiguous making expensive maintain replicas distant corners global network internal replicas maintain control information 
works bestavros bestavros cunha appear predecessors 
proposes reduce network traffic intra net caching organization popular objects close intra net entry point 
context backbone node hosting platform entry point 
protocols address problems choosing entry points place object replicas allocating requests replicas 
questions considered 
bestavros cunha discuss benefits replicating popular objects host server request tree 
algorithms described 
propose infrastructure performing replication web describing algorithms deciding replica sets 
infrastructure assumes gradual learning replica set clients may hurt responsiveness system 
protocol complimentary 
gwertzman seltzer motivate need geography object replication 
propose base replication decisions geographical distance miles clients servers 
measure may correctly reflect communication costs fetching object network topology correspond geographical distances 
problem placing objects proximity requesting clients addressed research file allocation see early survey 
early area assumes central point decisions object placement solving integer programming optimization problem 
search space heuristically pruned scale application approaches impractical 
awerbuch bartal fiat designed distributed file allocation protocol show nearly optimal terms total communication cost storage capacity nodes 
protocol address load balancing issue 

contributions main contributions follows 
protocol dynamic replication internet integrating algorithm deciding number placement object replicas algorithm distributing requests replicas 
request distribution algorithm allows derivation bounds load changes due potential object migration replication 
replica placement algorithm relies bounds making placement decisions autonomously node knowing existence replicas 
bounds allow host safely decide replica placement objects waiting observe actual loads move 
protocol relies practical assumptions derived existing internet technology 
information available routing databases ip headers drive protocol 
new functionality required routers 
system responsiveness changes demand patterns explicit design goals 
responsiveness improved ways 
existing protocol performs replication distant nodes directly replicating intermediate nodes path 
second bounds load internet node containing router host redirector node containing router host node containing router host distributor stand redirector 
system model 
new object replicas protocol relocates multiple objects waiting new access statistics move 
intended scale system protocol feature slow time arrives desired replica placement demand pattern may change 
simulation study synthetic workloads backbone topology uunet largest commercial internet service providers shows protocol effective eliminating hot spots servers achieves significant reduction backbone traffic server response time expense creating small number extra replicas 
protocol showed acceptable responsiveness changes demand patterns 

system model consider internet hosting system maintains provides access web objects 
system contains set nodes consisting router hosting server connected local area network 
hosting servers hosts short maintain web objects routers connected wide area links form platform backbone 
nodes called gateway nodes connections outside internet 
nodes requests enter system 
nodes contain distributors addition routers hosts 
system contains 
distributors functions described shortly may physically located machine hosts 
request client object directed closest gateway distributor regardless requested object cisco distributed director dns server anycast widely available 
notion closeness mechanism internet routing protocols requested object sent client gateway node anyway 
distributor forwards request udp message redirector chooses host currently replica object forwards request udp message host 
host sends object directly distributor forwards object client 
redirector requests object 
scalability load divided multiple hash partitioning url namespace 
note sending requests object redirector protocol reduce distance traveled requests 
goal reduce distance response message 
responses carry object data typically larger requests determining factor backbone bandwidth consumption 
simplicity assume homogeneous hosts 
heterogeneity introduced incorporating protocol weights corresponding relative power hosts 
assume objects change user accesses simply accumulate usage statistics 
multiple studies show large majority web accesses objects 
objects replicated freely user accesses result replica divergence usage statistics individual replicas easily merged 
consistency object modifications content provider maintained primary copy approach 
objects change user accesses limited migration protocol 
heuristics replica placement routes messages take getting source destination 
granted different messages pair nodes take different routes time practice routes usually similar 

internal router path distributed director dns server uses routes database system routers resolve logical name web site www foo com ip address host fewest hops away client issued query 
anycast mechanism single ip address set hosts routers advertise routes ip address lead respective closest hosts 
host external client preference path sequence hosts located corresponding routers 
distinguish hosts located routers 
message host client passes hosts preference path advantageous request request serviced hosts 
furthermore closer data preference path greater benefits 
assume host knows preference path client information statically extracted periodically refreshed routing database kept platform routers 
routing information allows comparing network distance hosts platform 

load metrics assume existence uniform load measure allows load comparison different servers 
compactness presentation assume load metric represents single computational component 
length ready queue output uptime command unix measure computational load 
general load metric may represented vector reflecting multiple components notably computational load storage utilization 
extending algorithms allow vector loads technical matter 
assume individual server estimate fraction total load due object server 
done keeping track resource consumption cpu time io operations due requests individual objects dividing total load objects proportionally consumption 
load metrics usually recorded periodically reflect average load moving window time 
refer size moving window measurement interval 
load measure right object relocation event host reflect change set hosted documents 
deal technicality host accepts object uses estimate load acquiring object deciding honor requests accepting objects hosts 
host returns normal load metrics current window contain object relocations 
similarly host decides needs offload lower limit estimate load 
enabling derivation load bounds contributions protocol 
frequent object relocations measurement windows contain relocation event host periodically halt relocations take fresh load measurements 
executed redirector responsible object receiving request client closest host client replica ratio xp aff xp host replica smallest value ratio xq aff xq ratio ratio choose xq xq choose xp xp endif 
algorithm choosing replica 

notation terminology rest denote replica object server load denote load node load denote load node due object object said geo migrated geo replicated host placed order increase proximity client requests 
object migrated replicated due load considerations object said load migrated replicated 
request distribution algorithm challenge designing algorithm assigning requests replicas service algorithm combine goal distributing load goal choosing replica close client 
example consider hosting system just hosts america europe 
choosing replicas round robin manner neglect proximity factor 
roughly half requests come region round robin distribution may result directing american requests european replica vice versa 
hand choosing closest replicas result poor load distribution 
assume american site overloaded due local requests 
closest replicas chosen creating additional replicas europe help overloaded site requests directed site anyway 
goal algorithm direct requests closest hosts case distributing requests hosts regardless origin requests second case 
addition algorithm allow derivation bounds load changes due object relocations 
bounds enable hosts replica placement decisions autonomously multiple objects time waiting observe effects object relocation 
especially important responsiveness system 
algorithm run redirector responsible requested object shown 
replica redirector keeps count number times chooses replica called request count 
maintains replica affinity aff preference factor replica request distribution 
replica created affinity initialized object migrated replicated host replica object affinity incremented creating replica host 
refer ratio xs aff xs unit request count reflects request count affinity unit 
request client arrives algorithm begins identifying replica smallest unit request count replica closest client 
chooses replica comparing unit request count requested replica unit request count divided closest replica 
different constant chosen corresponding changes load bounds replica placement algorithm 
explore tradeoffs choosing constant 
show somewhat arbitrary constant intuitive sense works 
applying algorithm example case replicas roughly request count request directed closest replica assuming replicas affinity 
second case american site receive requests request count exceeds request count european site factor point european site chosen 
load american site reduced third average 
creating replicas reduce load 
assume replicas object created 
replica closest requests easy see replica service total number requests 
increasing number replicas load replica arbitrarily low 
odd request arrives replica region request directed local replica 
replica affinities allow protocol flexible request distribution 
continuing example assume request patterns change equally divided american european replicas split 
site overloaded replica placement algorithm set affinity american replica 
regular request inter spacing request europe arrives requests america request distribution algorithm direct requests including europe european site rest american site 
precisely xp closest replica gateway received client request 
problem algorithm new replica created chosen requests request count catches rest replicas 
may cause temporary overloading new replicas 
avoid redirector resets request counts notified changes replica set object 
main strength protocol allows derivation bounds load effects resulting object replication migration 
bounds theorems 
proofs formal definition steady demand 
theorem host replicate object host create new replica affinity increment affinity 
steady demand absence replications migrations load may decrease load replication 
theorem host replicate object host load replication 
steady demand absence replications migrations deletions load replication may increase aff theorem host migrate object host create new replica affinity increment affinity reduce affinity drop affinity 
steady demand absence replications migrations load migration may decrease aff aff aff load aff affinity migration 
theorem host migrate object host aff load affinity migration 
steady demand absence replications migrations deletions load migration may increase aff 
replica placement algorithm trivial solution replica placement replicate object server 
requiring server storage capacity expensive 
see section significant reduction network traffic achieved expense extra replicas 
feasible servers holding entire web repository better spend money greater number inexpensive hosts 
fact request distribution algorithm having needless replicas harmful 
algorithm oblivious server loads distributes requests available replicas 
excessive replicas cause requests sent distant hosts 
replica placement protocol creates new replicas beneficial client proximity server load reasons 

control state host maintains state object contains host appeared preference paths requests execution replica placement algorithm host keeps count number appearances cnt referred access count particular cnt cnt gives total access count host maintains replica affinity aff 
call ratio cnt xs aff xs unit access count candidate ratio load xs aff xs unit load replica 
algorithm periodically host runs algorithm illustrated decide replica placement objects 
pairs tunable parameters protocol low high load watermarks hosts lw hw deletion replication thresholds objects 
water marking standard technique add stability system 
high watermark reflects host capacity 
exceeding load degrade performance host undesirable level 
low watermark chosen high watermark 
deletion replication thresholds determine options replica placement 
replica dropped count falls migrate count migrate replicated count provide stability parameters chosen subject theoretical constraint reason constraint provided theorem theorem host replicates object host unit access count exceeds steady demand lower bound unit access count replica host replication nodes independently replicate migrate object replication occur replica replication access count exceeding newly created replicas dropped 
knowing allows host autonomous decision replicate object just replica load creating vicious cycle replica creations deletions 
practice ratio higher prevent boundary effects 
experiments 
host modes operation 
load exceeds high water mark hw switches offloading mode sheds objects hosts beneficial proximity perspective 
mode host continues manner load drops low water mark lw 
moves objects improves proximity requesters stays mode load exceeds hw 
executed host load hw loading es load xs cnt xs aff xs xs loop nodes non zero access counts xs decreasing order distance form node cnt xs cnt xs rat io send migrate xs load xs aff xs responded ok xs break loop endif endloop endif xs dropped migrated cnt xs aff xs loop nodes non zero access counts xs decreasing order distance node cnt xs cnt xs repl rat io send replicate xs load xs aff xs responded ok break loop endif endloop endif endfor loading es objects dropped migrated replicated offload endif xs aff xs decrement aff xs send new value aff xs redirector send redirector redirector responds ok drop xs endif 
replica placement algorithm 
modes operations described subsections 

geo migration replication establishing mode operation examines access counts object decide placement 
affinity unit object dropped unit access count deletion threshold 
redirector ensures replica object deleted arbitrating competing replica deletions disallowing procedure 
object chosen migration host appears preference paths rat io fraction requests object 
prevent object migrating back forth nodes rat io 
choose provide extra stability presence load fluctuations boundary 
object chosen replication migrated total unit access count exceeds candidate closer minimum number requests relative total number requests received repl rat io chosen rat io replication take place 
chose repl rat io 
choosing value ensures replication beneficial object replicated sole copy illustrated 
assume sole replica object replicates host appeared preference paths requests 
assuming requests client evenly spaced time neglecting boundary effects right replication request distribution algorithm direct requests host including requests closer 
constitutes requests serviced access count prior replication exceeded total number requests closer exceed requests service replication replication beneficial 
method xs load xs executed candidate load lw send refuse invoker terminate endif method migrate load load xs hw send refuse invoker terminate endif copy host aff xp aff xp aff xp endif new copy xp created value aff xp changed send xp aff xp redirector endif load load load xs send ok invoker 
algorithm creating object replica 
object replicated migrated attempts place replica farthest qualified candidates 
heuristic improves responsiveness system 
replicate migrate object candidate sends request includes id object replicated migrated load host generated due candidate accepts replication request load low watermark 
accept migration request candidate checks addition upper bound load estimate proposed migration high watermark 
prevents migration host cases single object migration bring recipient load low watermark high watermark 
vicious cycle occur object geo migrates site back original sender 
note absence similar restriction replication heuristics 
overloading recipient temporarily may necessary case order bootstrap replication process 
vicious cycle danger replication brings system new state 
conditions migration replication satisfied creates copy notifies corresponding redirector new copy updates upper bound load estimate 
load estimates fact host acquires new replica object extra load imposed host bounded times load existing replica object 
case migration source host learns recipient created copy removes copy executing 
replica set object changes corresponding redirector notified 
note redirector notified copy creation fact deletion fact 
sequence actions preserves invariant replica set recorded redirector subset object replicas exist 
ensures redirector assigns requests replicas resorting expensive distributed transactions updating state 

host offloading host offloading mode migrates replicates objects nodes beneficial proximity perspective 
protocol shown 
offloading host finds recipient node 
refer reader details finding choosing recipient 
purpose assume hosts periodically exchange load reports host knows probable candidates 
recipient accepts offloading request load low watermark case responds requesting host load value 
offloading host goes objects starting higher rate foreign requests attempts migrate replicate recipient 
choosing migration replication done similarly algorithm 
difference offloading host try migrate heavily loaded objects objects unit access count replication threshold replicated 
reason load migrating objects undo previous geo replication 
decide conservatively offloading process sending node re calculates lower bound estimate load upper bound estimate recipient load object migration replication 
falls rises low watermark offloading stops actual load measurements available 
offload executed offloading host find host load lw recipient load load load lw recipient load objects examined xs unexamined object highest value cnt xs cnt xs cnt xs aff xs send migrate xs load xs aff xs responded ok load load load xs aff xs load xs aff xs aff xs recipient load recipient load load xs aff xs aff xs exit 
send replicate xs load xs aff xs responded ok load load load xs recipient load recipient load load xs aff xs exit 
endif endwhile 
protocol host offloading 
note estimates reflect load changes due migration replication performed concurrent changes replica placement nodes obviously affect load nodes involved offloading 
true single object transfer load estimates 
estimates worsen load prediction allowing transferring objects bulk essential responsiveness system demand changes 

performance performed event driven simulation protocol study performance 
synthetic workloads simulation 
presents results trace driven simulation explores depth tradeoffs involved adjusting various parameters algorithm 

simulation model logical isp provide hosting services chose backbone largest existing isps uunet testbed 
backbone see map contains nodes north america europe pacific rim australia 
assume backbone nodes serve gateways 
simulation backbone node generates client requests constant rate enter platform 
node backbone service client requests 
documents parameter value number objects size object kb placement decision frequency seconds node request rate requests sec server capacity requests sec network delay ms hop link bandwidth kbps high watermark requests sec low watermark requests sec deletion threshold requests sec replication threshold requests sec table 
simulation parameters 
system initially distributed nodes round robin fashion object assigned node mod 
request assigned physical replica algorithm routed node hosts replica shortest path preference path request 
equidistant paths nodes path chosen requests sole redirector responsible objects located node average distance hops nodes minimum 
plan explore problem optimally placing different objects order minimize added latency due 
assume pages equal size request size negligible compared page size 
explore workloads 
expect real life workload mix workloads similar ones considered 
zipf 
previous studies observed popularity pages requested clients popularity pages web site follows zipf law says pages ranked access frequency popularity page rank proportional workload clients choose pages zipf law page number corresponds popularity rank 
hot sites 
sites divided randomly hot cold sites going cold bucket rest hot bucket 
client chooses random page initially assigned hot sites probability random document cold site probability 
workload models situation entire web sites vary popularity 
hot pages 
hot pages workload pages divided hot cold buckets ratio 
page hot bucket requested high probability 
hot pages workload models situation objects uniformly popular 
regional 
nodes divided regions western north america eastern north america europe pacific australia 
region assigned contiguous set object numbers totaling objects representing preferred object set region 
probability node requests random object preferred set node probability random object entire set objects chosen 
regional workload models situation object popularity varies region 
time system takes adjust workload starting initial document assignment indicates responsiveness protocol change demand pattern 
node services requests serve order 
node load measured rate serviced requests averaged period called load measurement interval sec simulation 
request incurs latency due queuing processing server network delays 
table lists simulation parameters experiments 
number tradeoffs involved choosing parameters highlighted explored 
tradeoffs rationale choosing particular values time successive placement decisions determines responsiveness system 
low time leads better responsiveness algorithm sensitive temporary bursts 
shows internet traffic bursty fine time scales order seconds smoothes larger time scales order minutes larger 
choose inter placement time seconds simulations 
deletion threshold determines aggressively migrate replicate 
tradeoff involved low deletion threshold implies aggressive replication migration replicas created leading lower latency requests 
may increase overhead traffic number extra replicas 
simulations choose arbitrarily deletion threshold approximately rate requests sent client hot document hot pages workload 
replication threshold greater theorem 
choose threshold times deletion threshold 
watermarks lw hw determine maximum load host 
watermarks inter request time determine load system 
choose server capacity higher watermarks order avoid backlog messages 
backlog messages representative real world servers normally drop messages client timeout queues build 
document size chosen kb link delay assumed ms link bandwidth time sec overhead traffic hot pages hot sites zipf regional 
network overhead 
assumed kb sec 
values preliminary experiments traces accesses pages hosted hosting service topology 

results depicts bandwidth consumed average response latency various workloads 
bandwidth determined summing number bytes transmitted hop 
path taken response greater impact bandwidth consumed request data size larger request size 
bandwidth consumption reduces hot pages hot sites zipf workload regional workload 
hot pages hot sites zipf workloads document requested probability hosts popular document globally popular 
hand regional workload probability document requested host depends region host belongs 
locality document access patterns 
document popular particular region allows replicas document concentrated region 
workloads replicas spread lack locality access pattern 
explains lower bandwidth consumption regional workloads 
noticeable feature access pattern hot sites similar initial configuration documents differs hot sites hot documents concentrated sites hot pages distributed 
equilibrium bandwidth consumption cases indicates algorithm tries optimally place replicas access patterns irrespective initial configuration 
latency reductions show similar trend 
average response latency reduces zipf hot pages workloads regional adjustment average number time min replicas hot sites hot pages regional zipf table 
adjustment time average number replicas 
load 
spectacular improvement latency compared bandwidth due fact request goes global redirector 
hot sites workload latency initially extremely high order tens seconds requests queued popular sites 
quickly drops levels similar zipf hot pages workloads indicating algorithm successfully removes hot spots 
shows traffic overhead percentage total traffic 
overhead occurs replication migration documents reduced total traffic 
shows maximum load system 
maximum load remains high watermark reqs sec shows algorithm successfully distributes load servers 
initially maximum load hot sites zipf workloads high sites documents excessively popular 
algorithm manages remove hot spots replications migrations 
table shows average number replicas created adjustment time various workloads 
compute adjustment time time takes reach bandwidth consumption average equilibrium bandwidth consumption 
depending workload adjustment time minutes 
note significant traffic reductions occur quicker 
number replicas cases low considering number hosts topology nodes requesting documents rate 
plots load estimates hosts system actual load 
actual load lies high load estimate low load estimate shows algorithm successful predicting load 
shows performance dynamic replication load system high 
high load simulated decreasing high low watermark respectively 
average places low watermark load server 
effects high load 
responsiveness system decreases 
recipient nodes close low watermark protocol unable relocate multiple objects transfer 
second performance gains diminish 
perceptible graphs bandwidth consumption increases hot sites regional workload average latency compared low load case 
reason behavior bytes request bytes time sec bandwidth consumed hot pages hot sites zipf regional network traffic 
time sec latency hot pages hot sites zipf regional average response latency 

performance dynamic replication 
load reqs sec time sec maximum load hot pages hot sites zipf regional maximum load system 
time sec load estimates low load estimate high load estimate actual load load estimates 

maximum load load estimates 
bytes request bytes time sec bandwidth consumed hot pages hot sites zipf regional bandwidth consumption 
time sec latency hot pages hot sites zipf regional average response latency 

performance dynamic replication high load protocol mechanism exchanging pages overloaded nodes 
instance node page page accessed node vice versa sense nodes swap pages load remain proximity improve 
high load prevents node accepting request page placement 
summary algorithm decreases bandwidth consumption average response latency considerably imposing high network overhead 
successful removing hot spots network distributing load servers 
experiments show algorithm correctly predicts higher lower bounds load host main contributions scheme 
performance algorithm diminishes load increases 
explores effect load performance sensitivity algorithm simulation parameters 

manual mirroring internet objects slow process 
high costs results poor performance system administrators react changes demand objects 
proposes protocol automatic replication migration objects response demand changes 
goal place objects proximity majority requests ensuring hosts overloaded 
protocol incorporates main parts algorithm deciding number placement replicas algorithm distributing requests replicas 
replica placement algorithm executes autonomously node knowledge object replicas system 
request distribution algorithm uses simple mechanism take account proximity servers requests server load knowing 
algorithms information feasible obtain routing databases maintained internet routers 
simulation study showed additional traffic generated protocol due moving objects hosts far offset reduction backbone traffic due servicing client requests nearby hosts 
effective reducing response latency experienced clients eliminating hot spots servers 
benefits achieved expense creating small number extra replicas indicates heuristics protocol successful deciding selectively perform replication 
wish vassalos divesh srivastava discussions es summer internship labs 
go panagos simulator toolkit simulation study 
jim reeds provided convenient approximation zipf law 
people stimulating discussions comments including alex fred douglis jagadish dennis shasha 
aggarwal rabinovich 
performance replication schemes internet 
submitted publication 
available www research att com radar tm perf ps gz 
almeida bestavros crovella de oliveira 
characterizing locality www 
proc 
ieee conf 
parallel distr 
information sys 
awerbuch bartal fiat 
distributed paging general networks 
proc 
th acm siam symposium discrete algorithms pp 
january 
baum 
sturm 
enhancing web infrastructure caching replication 
ieee internet computing vol pp 
march april 
bestavros 
demand document dissemination reduce traffic balance load distributed information systems 
proc 
ieee symp 
parallel distr 
processing pp 

bestavros cunha 
server initiated document dissemination www 
bulletin computer society technical committee data engineering pp 

vol 
september 

braun claffy 
experimental means providing geographically oriented responses relative source domain name server queries 
technical report san diego supercomputing center april 
carter crovella 
server selection dynamic path characterization wide area networks 
ieee infocom 
cisco 
white 
available www cisco com warp public cisco 
www cisco com warp public ph 
yu dias 
scheduling algorithms distributed web servers 
proc 
th ieee intl 
conf 
distributed computing systems may 
cunha bestavros crovella 
characteristics www client traces 
technical report tr boston university department computer science april 
demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database maintenance 
proc 
th symp 
principles distr 
computing pp 

douglis feldmann krishnamurthy mogul rate change metrics live study world wide web proceedings symposium internet technologies systems december 
farrell 
distributing web load 
network world september 
fei bhattacharjee zegura ammar 
novel server selection technique improving response time replicated service 
proceedings ieee infocom 
gribble brewer 
system design issues internet middleware services deductions large client trace 
proc 
usenix symp 
internet technologies systems pp 

december 
schwartz 
locating nearby copies replicated internet servers 
proceedings sigcomm 
gwertzman seltzer 
case geographical push caching 
proc 
hotos workshop 
available ftp das ftp harvard edu techreports tr 
ps gz 

globally load balanced fully distributed caching hot published documents 
proc 
th ieee intl 
conf 
distributed computing systems may 
helal bhargava replication techniques distributed systems kluwer academic publishers 
huitema 
routing internet 
prentice hall englewood cliffs new jersey 
ibm interactive network dispatcher 
www ics raleigh ibm com katz butler mcgrath 
scalable web server ncsa prototype 
computer networks isdn systems pp 
september 
may 
kramer 
methodical analysis adaptive load sharing algorithms 
ieee trans 
parallel distributed systems pp november 

optimization file migration distributed systems 
phd dissertation university california berkeley 
available technical report ucb csd computer science division eecs university california berkeley april 
seltzer 
web facts fantasy 
usenix symp 
internet technologies systems pp 

partridge 
host anycasting service 
request comments november 
paxson 
measurements analysis internet dynamics 
phd dissertation 
lawrence berkeley national laboratory university california 

rabinovich rabinovich rajaraman 
dynamic replication internet 
labs technical report ha tm march 
available www research att com radar tm ps gz 
breitbart scheuermann 
selection algorithms replicated web servers 
workshop internet server performance june 
available www cs wisc edu cao mehmet html 
seshan stemm katz 
spand shared passive network performance discovery 
proc 
usenix symp 
internet technologies systems pp 

uunet global backbone 
available www uu net lang en network web challenger 
white network 
available www com html 

wolfson jajodia huang :10.1.1.38.9051
adaptive data replication algorithm 
acm transactions database systems tods vol 
june pp 


