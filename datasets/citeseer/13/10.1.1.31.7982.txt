adding contracts java handshake andrew duncan urs lzle department computer science university california santa barbara ca urs cs ucsb edu www cs ucsb edu urs technical report december 
contracts describe agreement writer user class 
enhances programmer productivity program reliability especially library code 
handshake provides contracts java classes interfaces form class invariants method pre postconditions 
handshake programmer add contracts classes interfaces needing access source code changing class files changing jvm implementation 
existing implementations contracts java handshake intercepts vm file operations modifies classes fly requiring modification jvm 
dynamic link library interposed vm operating system system relatively simple port new os works variety jvm implementations 
system imposes little overhead time required evaluate contract boolean expressions 
am contract shakespeare part king henry vi 
assertion ho boolean expression satisfied associated code execute properly :10.1.1.116.2392
assertion part implementation algorithm class describes constraints values 
programmers assertions extend refine type constraints imposed class interface 
combination comprises contract mm executed class clients users 
introduce handshake simple flexible way adding contracts java classes interfaces 
java language specification gjs provides explicit interface type describing types class publicly visible instance methods class constants 
interfaces express type constraints semantic properties expected client guaranteed class 
specify example numeric parameter positive instance nonnull field stand relation 
philips mp compare electrical outlet size shape constrain physical properties inserted plug promise power provided 
meyer introduced notion design contract mm describe distribution responsibility class users 
methods equipped preconditions postconditions classes invariants 
responsibility method caller satisfy precondition method guarantees postcondition 
invariants apply state instance satisfied time object usable client 
order preserve contractual semantics class presence polymorphism class assertions combined ancestors described 
programmers various approaches incorporating advantages contracts java code 
approaches include explicit tests surrounding method additional assertion classes mp preprocessors augmented java grammars java reflection interface 
approach particular shortcomings awkward handling inherited assertions lack integration pre existing subsequently changed libraries incompatibility shelf java installations 
previous implementations contracts java handshake uses dynamically linked library modify affected classes runtime 
solution lets user leave existing shelf jvm java source class files 
class implementor provide separate description contract java class handshake library jvm operating system making corresponding modifications class file read disk network leaving original unaltered 
approach avoids problems inherent approaches provides effective way incorporating contracts working java code 
advantages handshake modify java virtual machine jvm semantics implementation require upgrading patching new jvms released 
add contracts java interfaces classes data types specified implementation 
require source files guarded code add contracts system third party classes 
changes existing class files project developed handshake compatible java implementation 
defer class loading time affects performance active 
easy activate deactivate enforcement contracts 
deactivated contracts exact performance penalty 
remainder describe fit contracts framework existing java installation 
section describes user view handshake discusses alternative implementations 
section defines semantics contracts defined enforced handshake 
section describes implementation section provides performance measurements real world classes 

defining enforcing contracts handshake provides tools describing implementing contracts java classes 
user specify method preconditions postconditions class invariants apply java class 
shows contract part class 
contract source handshake compiler contract binary handshake library class contract standard jvm contract specification resides file separate java class file 
library client create file library implementor provide library class files 
component handshake user needs handshake library simple shell script start jvm contracts enabled 
java assertion systems runtime class loaded contrast handshake works class load time 
jvm calls operating system request class file handshake intercepts call adds assertion code original class file 
adding contract class returning class 
way modification transparent running virtual machine os knows interacting directly 
handshake operates class load time acts logical filter leaves permanent changes deactivated easily activated example changing single environment variable command line argument 
handshake implementation dynamically linked library advantages load time strategies modifying jvm creating user defined class loaders 
sections describe process defining contract compiling binary form enforcing handshake library 
compare approach ways implementing load time class modification 
defining contract add contract class handshake programmer creates contract file associated single class 
consider class implements stack integers class protected int values protected int size public void push int 
public int pop 
public int top 
public boolean full 
public boolean empty 
java type system provides form contract constraining class usage 
example client tries pass string push assign result pop character java compiler catch mistake compile time jvm catch runtime 
compiler vm prevent user trying pop empty stack 
specify constraints handshake stack implementor writes contract file contract invariant size size negative public void push int pre full stack full post top public int pop pre empty stack empty assertion contract contains boolean expression evaluate true 
optional string provides explanation assertion failure 
syntax contract specification simple contract contract id invariant clause invariant invariant expr string clause pre post pre pre expr string post post expr string bnf notation square brackets optional constructions kleene star usual zero meaning 
non terminal specified 
non terminal expr essentially primary expression type excluding instance array creation assignment 
excluded expressions side effects necessary assertions 
shows changes handshake apply class implement contract 
client modified class push check invariant check pre push old check post check invariant push old pre existing code 
renaming wrapping method contracts enabled actual code generated new push method public void push int size throw new invariant failed size negative entering push full throw new precondition failed stack full push push old call original version 
top throw new postcondition top failed push size throw new invariant failed size negative leaving push method named contract handshake renames constructs new method evaluates appropriate assertions nested call renamed method 
assertion hold added code throws exception appropriate message contract specification 
enforcing contract class load time handshake library combines contract file original class file produce class contract 
library acts simple filter java runtime system libraries vm 
handshake library implement contracts variety unmodified java virtual machines share operating system libraries 
shows simplified picture data path process 
java interpreter java jit open class contract open handshake standard library library activate assertions contract user arranges jvm handshake library augmented version dynamically linked standard library 
handshake library intercepts jvm calls open class files provides modified classes adding assertions defined contract 
original class file disk network change 
event user wants contract complex binary edits undo 
handshake look associated contract file directory class file repository directory apply changes class file 
class implementor provide contract file class file clients need concern process compiling contract just reading understanding 
convenient feature approach robust respect changes code guarded assertions 
long interface guarded class change assertion adding process continue correctly 
words class changes development explicit programmer action needed continue enforcing contracts 
parts interface change handshake add assertions unchanged parts 
contract class 
intercepting system call handshake library alternative implementations handshake library functions filter jvm operating system libraries 
alternative ways intervening juncture include modifying jvm file opening calls directly writing class loader java 
addition user add contracts class files line runtime 
possible approaches shortcomings 
obvious way providing contract functionality integrate jvm 
simple modify jvm file handling code directly adding stage looks contracts adds reading class files 
modifying jvm creates significant restriction contracts particular vm 
java virtual machines publicly available source code adding support popular vms option 
contrast handshake shelf jvms needs port os 
new vm small amount necessary writing modifying short shell script 
java jdk specification includes extension mechanism allows users define class loaders lb 
class loaders consistent portable scheme modifying classes loading shortcomings task hand 
apply user defined classes system classes java lang loaded directly jvm approach add assertions classes 
second applications may class loaders bypassing loader inserts contract assertions 
user defined class loaders influence semantics class accessibility lb 
application class loaders delegate class loader class namespaces separate merge unpredictable results 
approach modify classes disk creating parallel set classes 
case user run tool adding contract code recompile 
added programmer keep track date classes contracts maintain separate repository modified classes 
handshake system achieves goals automated incremental transparent way checking cached classes access rebuilding necessary 

semantics handshake contracts contract augments class interface constraints state entry exit conditions methods 
excludes contract assertions loop invariants constraints values variables may inside body code 
handshake provides kinds assertions associated java class interface method preconditions postconditions class invariants 
focus find effective practical ways integrate contracts standard shelf java virtual machines handshake currently takes conservative approach modeled eiffel contracts implementing essential features contracts adding extra bells 
handshake assertions consist keyword optional string boolean expression 
syntactically expression may legal java expression instance creation array creation assignment 
expression may refer member normally visible entry guarded method 
precondition specifies predicate hold entry method violated caller method responsible 
postconditions describe guarantees method provided preconditions met postcondition fails bug method 
postconditions non void methods may refer variable result set value method return 
method exits uncaught exception handshake effort check postconditions 
invariant describes properties hold object consistent state behave properly 
handshake evaluate invariants entry preconditions exit postconditions non private method listed contract 
contracts extend semantics class type just substitutability derived classes requires type conformance requires contract conformance 
preconditions contravariant inheritance postconditions covariant 
situation directly analogous rules substitutability types som 
handshake constructs proper variance logically ing overridden method preconditions ancestor postconditions ed 
handshake considers violated contract invalidate execution guarded method immediately throws java lang 
currently handshake provide specialized subclasses system class projects contracts need additional classes 

implementing handshake handshake system consists parts compiler dynamically linked library 
compiler written java compiler construction tools invokes java compiler generate bytecodes assertion expressions 
library edited re linked version standard dynamically linked library jvm 
handshake compiler handshake compiler stages contract compiler bca compiler shown 
result running handshake compiler translate contract binary file easy combine class file load time 
handshake compiler written java contains classes 
contract compiler contract source contract compiler intermediate file bca compiler binary contract file contract compiler text text translator processes contract file intermediate text file input second stage handshake compiler 
step necessary text form file easy read understand provides convenient debugging checkpoint allows reuse existing tool manipulating class files 
built contract compiler combining contract syntax existing lalr grammar java expressions feeding result compiler tools jlex javacup hu create parser syntax tree builder contract language 
tree available inspection supports visitor design pattern gof relatively easy extend functionality contract compiler support additional features contracts 
resulting intermediate file provides fine grained language expressing explicit description changes class file load time 
syntax semantics language details compiler defined kh 
briefly file specify renaming class instance members adding members carrying changes specific classes interfaces implementors interface 
language provides highly flexible internal path current handshake implementation allows expansion 
intermediate file corresponding example contract class form handshake compiler 
components handshake compiler delta adapts class rename method void push int push old add method public void push int size throw new invariant failed size negative entering push full 
similar section 
push old call original version 
top size rename method int pop pop old add method public int pop 
file shows handshake adds assertion method changes method name appending characters old 
character mechanically generated code convention minimize possibility name clashes 
handshake defines new method original name 
calls original method redirected new 
new method contains code testing assertions throwing appropriate exceptions 
handshake uses wrapper method original guarded method multiple exit points method pose problem 
method returns value non void handshake generates code stores local variable result pending postcondition evaluation 
wrapper method currently check thrown exceptions code original method throws exception postconditions invariants skipped 
interest simplicity handshake currently requires contract file class 
java supports combination class files single jar file 
difficult extend handshake similar way example allowing compound contract file jar file 
bca compiler bca compiler translates intermediate specification compact representation binary contract file containing java bytecodes associated annotations 
format allows efficient incorporation existing class file load time produce modified version 
details compiler binary file structure kh 
handshake library virtually operating systems programs dynamically linked libraries insulate details operating system hardware running 
example libraries provide code familiar file handling functions open close read 
handshake library currently considering supporting postconditions exception returns spirit proposal 
modified version dynamically linked standard library 
change library manner similar way handshake changes java classes add wrapper functions open file return information 
example library called open java class file processing midst calls library file functions 
shows control data flow process adding contract class 
java virtual machine shown left calls open library routine start loading java class 
handshake version open reads class file contract file calling library original open function 
handshake parses class file internal representation applies changes specified contract translates result back class file format writes modified class file user specifiable cache location disk 
handshake passes new path library routine returns resulting file descriptor 
jvm open class contract library binary component adaptation handshake library handshake library detects request open java class file looks cache directory see class modified stored 
handshake just redirects system call cached version passes call library 
handshake looks contract file directory class file cache directory 
looking cache directory allows specifying contracts classes system classes directories writable handshake user 
contract file class handshake applies changes class file caches redirects system call new file 
contract file handshake effect just passing call unchanged library 
handshake locates cached version class file checks see class file date respect contract file original class file 
class file date library contract file class caches result described 
contract class 
data control flow handshake system contract handshake compiler standard library implements file related routines 
example solaris library libc contains functions open open 
handshake library jvms platform modify file routine check class files 
addition open variants instrument stat call returns information file particular size 
functions changed versions go process described looking contract file modifying class file appropriate 
procedure creating handshake library similar platforms edit existing library compile replacement code link 
example create version unix platform working duplicate dynamically linked library libc 
edit binary file directly renaming functions want intercept open open 
create new source file redefining open carry process adding contracts classes calling renamed library version necessary 
handshake incorporates part bca runtime library kh kh perform class file modifications 
compile link code existing library resulting handshake library 
handshake library dynamically linked suffices arrange shelf jvm finds uses place standard library 
usually simple shell script setting library search starting jvm needed add contracts new jvm 
current implementation solaris supports solaris jvms jdk interpreters jdk vm solaris beta jit jvms differ way open class files supported library 
currently porting code win platform popular jvms 
performance evaluate overhead imposed contracts added contracts classes javac java compiler provided jdk 
table shows times required various combinations libraries contracts caching policies 
measured performance jdk beta sun ultra mhz workstation running solaris operating system 
line table shows time required javac compile hello world program 
case compiler handshake library 
second line shows added time required compiler file handling system calls went handshake library 
overhead half second takes place compiler asks class files handshake looks cached class file contract file case unsuccessfully returning originally requested file 
third line represents typical execution program instrumented contracts 
added empty contracts classes javac executed order generate cached classes measured overhead cached classes 
overhead similar contracts case search finds cached file returns original 
fourth line shows time required run compiler cold start classes cached 
case handshake find contract file ascertain cached class read parse class memory perform modifications case un parse write file cache return file 
case performance penalty total running time seconds th second instrumented class 

related library contract type user time eiffel incorporates contracts integral part class interface 
supports pre postconditions class invariants loop variants invariants mid method checks 
eiffel automates inheritance assertions overridden methods provides mechanism retrying code triggers assertion violation restoring instance state violation 
allows wide range control assertions classes assertions tested runtime 
way express enforce contract constraints include code explicit tests desired properties 
philips mp discuss elementary addition assertion classes static methods testing assertions throwing exceptions 
programmer access program source add 
calling static methods entry exit method inflates body considerable amount code conceptually belong implement method semantics 
assertions harder distinguish implementation code automated tools reason program properties 
difficult kernel time total cpu time total running time unmodified program handshake library contracts handshake library contracts cached classes handshake library contracts cached classes table 
overhead handshake instrumentation enable disable assertions selectively scheme 
simple predicate tests insufficient handle correctly interaction assertions inheritance 
user add additional pre postcondition wrapper methods guarded method awkward error prone 
inflating individual methods methods existed 
kramer icontract specifies extension javadoc comment syntax provides preprocessor converts assertion comments code 
advantage system contract extent part official interface class extracted standard jdk tool javadoc 
addition icontract supports limited versions existential universal quantifiers adds code tests infinite recursion assertion evaluation avoids testing invariants intra instance calls sends self 
approach requires access source file cases may impractical impossible 
payne schatz schmid describe assertion class expression assertions control flow violations easier pss 
reliable software technologies sells commercial product defines extension java comment syntax uses extended comments instrument class files assertions 
uses reflective capabilities java factory method design pattern gof support addition contracts 
objects instantiated special factory class factory adds new instance instrumentation code 
approach uses existing standard java constructs calls 
provides retrying method throws exception rolling back variables earlier values 
user specify distinct private boolean methods precondition postcondition invariant exception handler leading great proliferation class members 
way intercept system calls proc file system available versions unix operating system fg aiss 
files directory virtual files represent address spaces running processes 
approach jvm runs child process 
parent process uses ioctl call intercept input output child virtual file equivalent system calls process 
approach limited unix environments 
problems include child process runs different address space parent different space file descriptor indices 

designed handshake simple 
system satisfy criterion longer list features convince developers regularly 
handshake supports core ideas contractual design 
features may add handshake contracts example support old keyword postconditions express state instance entry method greater selectivity activating deactivating assertions checking invariants nested method calls instance 
handshake currently operates individual class files support jar files java libraries stored compressed format classes single jar file 
add support jar files version classes adding contracts classes associated contract files result passing jar file jvm 
handshake currently manage package namespaces cache directory currently adding functionality 

designed implemented novel way add language functionality java implementations needing change jvm implementation class files source 
handshake library ported new operating system add contract support new offthe shelf jvm little effort usually creating modifying simple script 
having privileged access jvm sources provide uniform support contracts different java implementations 
addition portability advantage handshake allows programmer add contract assertions existing classes system classes process activating contracts completely transparent programmer worry re running preprocessors tools 
furthermore handshake allows programmer add contracts java interfaces just classes considerably boosting usefulness contracts 
handshake modest performance penalty contracts 
overhead typically comes additional file lookup time running program asks class 
extra time represents small fraction total running time substantial program 
contracts important generalization strongly typed interfaces subtyping java object oriented languages support 
believe handshake system practical effective way provide advantages contracts java developers users 
acknowledgments funded part sun microsystems state california micro program national science foundation career ccr nsf ccr 
ralph keller extensive binary component adaptation 
grateful albert alexandrov discussions intercepting system calls advice contracts assertions 

aiss albert alexandrov klaus schauser chris 
extending operating system user level ufo global file system 
proceedings usenix technical conference anaheim ca january pp 

elliot 
jlex lexical analyzer generator java 
available www cs princeton edu appel modern java jlex 
fg faulkner gomes 
process file system process model unix system proc 
winter usenix technical conference january 
gof erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable software 
addison wesley 
ho hoare 
axiomatic basis computer programming 
communications acm october 
hu scott hudson 
javacup parser generator java 
available www cs princeton edu appel modern java cup 
kramer 
icontract java design contract tool 
available www ch kramer 
kh ralph keller urs lzle 
binary component adaptation 
proc 
european conf 
object oriented programming springer verlag july 
kh ralph keller urs lzle 
implementing binary component adaptation java 
technical report university california santa barbara 
urs lzle john bruno 
reflective java library support design contract 
technical report university california santa barbara 
lb sheng liang gilad bracha 
dynamic class loading java virtual machine 
proc 
acm conf 
object oriented programming systems languages applications october 
bertrand meyer 
object oriented software construction st ed 
prentice hall 
bertrand meyer 
eiffel language 
prentice hall 
mm bertrand meyer dino ed 
advances object oriented software engineering 
prentice hall 
mp mike roy phillips 
prevention better cure 
java report september 
pss jeffery payne michael schatz matthew schmid 
implementing assertions java 
dr dobb journal vol 
january 
som clemens stephen omohundro stephan 
engineering programming language type class system sather 
icsi tech report tr university california berkeley 

