tree pattern aggregation scalable xml data dissemination chee yong chan fan pascal felber minos garofalakis rajeev rastogi bell labs lucent technologies minos rastogi research bell labs com pascal felber eurecom fr rapid growth xml document traffic internet scalable content dissemination xml documents large dynamic group consumers important research challenge 
indicate type content interested data consumers typically specify subscriptions xml pattern specification language xpath 
large volume subscribers system scalability efficiency mandate ability aggregate set consumer subscriptions smaller set content specifications reduce requirements speed matching process 
provide systematic study subscription aggregation subscriptions specified tree patterns important subclass xpath expressions 
main challenge aggregate input set tree patterns smaller set generalized tree patterns space constraint total size subscriptions met loss precision due aggregation document filtering minimized 
propose efficient tree pattern aggregation algorithm effective document distribution statistics order compute precise set aggregate tree patterns allotted space budget 
part solution develop novel algorithms tree pattern containment minimization upper bound computation set tree patterns 
results interest right prove useful domains xml query optimization 
extensive results prototype implementation validate approach 
xml extensible markup language dominant standard data encoding exchange currently leave temple university supported part nsf career award iis 
current affiliation institut eurecom sophia antipolis france permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference hong kong china internet including business transactions business business business consumer applications 
rapid growth xml traffic internet effective efficient delivery xml documents important issue 
consequently growing interest area xml content filtering routing addresses problem effectively directing high volumes xml document traffic interested consumers document contents 
conventional routing packets routed limited fixed set attributes source destination ip addresses port numbers content routing general patterns document contents significantly flexible demanding 
consumers typically specify subscriptions indicating type xml content interested xml pattern specification language xpath 
incoming xml document content router matches document contents set subscriptions identify sub set interested consumers routes document 
content routing destination xml document generally unknown data producer computed dynamically document contents active set subscriptions 
effective support scalable content xml routing crucial enabling efficient timely delivery relevant xml documents large dynamic group consumers 
large volume potential consumers system scalability efficiency ability judiciously aggregate set consumer subscriptions smaller set content specifications 
goal course reduce subscriptions storage space requirements routing table fits main memory speed filtering incoming xml traffic 
instance core router application may choose aggregate subscriptions geographical location affiliation domain specific information telecommunications 
subscription aggregation essentially involves aggregating initial set subscriptions smaller set document matches subscription matches subscription 
typically loss precision associated aggregation documents matched aggregated set general superset matched original set 
result document may routed consumers subscribed resulting increase amount unwanted bach 
cd sony 
cd bach 
cd bach 
bach cd bach cd sony classical jazz pop example tree patterns xml document tree 
document traffic 
order avoid spurious forwarding documents desirable minimize number false matches minimize loss precision respect space constraint aggregated subscriptions 
far limited subscription aggregation mainly simple subscription models 
example subscription set attribute predicate pairs ge aggregated subscription allowed contain wildcard values indicating entire set domain values certain attributes 
provide systematic study subscription aggregation problem subscriptions specified expressive model tree patterns 
tree patterns represent important subclass xpath expressions offers natural means specifying tree structured constraints xml ldap applications 
compared earlier attribute predicate subscriptions effectively aggregating tree patterns poses challenging problem subscriptions involve content information node labels structure information parent child ancestor descendant relationships 
briefly tree pattern aggregation problem stated follows input set tree patterns space constraint aggregate smaller set generalized tree patterns meets space constraint loss precision due aggregation minimized :10.1.1.11.8038
example consider similar tree pattern subscriptions shown matches document root element labeled cd sub element labeled sony sub element arbitrary label turn sub element labeled bach matches document element labeled cd subelement labeled bach 
node labeled wildcard matches label node labeled descendant matches possibly empty path 
xml document shown matches satisfies sub element labeled bach due space constraints detailed overview related appendix 
parent element labeled cd 
efficiency reasons want aggregate set tree patterns single tree pattern 
examples aggregate tree patterns document satisfies satisfies 
number nodes intuitively precise respect preserves ancestor descendant relationship cd bach elements required 
xml document satisfies satisfies say contains 
best knowledge address timely subscription aggregation problem xml data dissemination 
main contributions summarized follows 
study properties tree patterns develop efficient algorithms deciding tree pattern containment minimizing tree pattern computing precise aggregate upper bound set patterns 
results interesting right provide solutions special cases tree pattern aggregation problem 
propose novel efficient method exploits coarse statistics underlying distribution xml documents compute precise set aggregate patterns allotted space budget 
specifically scheme employs document statistics estimate selectivity tree pattern measure pattern preciseness 
aggregation problem reduces finding compact set aggregate patterns minimal loss selectivity greedy heuristic 
demonstrate experimentally effectiveness approach computing space efficient precise set aggregate tree patterns 
usefulness results tree patterns aggregation limited content routing extends application domains optimization xml queries involving tree patterns processing dissemination subscription queries multicast environment aggregation reduce server load network traffic 
results complementary efficient indexing structures xpath expressions 
focus earlier research speed document filtering set xpath subscriptions appropriate indexing schemes 
contrast focuses effectively reducing volume subscriptions need matched order ensure scalability bounded storage resources routing 
clearly techniques pre processing step indexes hard constraints size index met 
due space limitations proofs theoretical results full version :10.1.1.11.8038
problem formulation definitions tree pattern unordered node labeled tree specifies content structure conditions xml document 
specifically tree pattern set nodes denoted node label denoted tag name wildcard matches tag operator 
particular root node special label 
denote subtree rooted referred sub pattern 
examples tree patterns depicted 
define semantics tree pattern semantics sub pattern root node 
recall xml documents typically represented node labeled trees referred xml trees 
xml tree node say satisfies node denoted conditions hold tag child node labeled child node child node labeled arbitrary tag child node descendant node possibly child define semantics tree patterns 
xml tree root tree pattern root 
say satisfies denoted iff child node tag labeled child node specifies tag may label child node descendant node possibly subtree rooted identical label root node 
observe treated differently rest nodes 
motivation illustrated specifies xml tree satisfying root labeled contain consecutive elements 
expressed special root label tree patterns allow union operator 
example consider tree pattern 
xml document satisfies root element satisfies conditions label isa child element arbitrary tag turn child element label descendant element ac child element child element 
essentially specifies existential conjunctive conditions xml documents 
noted documents satisfying may tags subtrees mentioned 
instance root element may ad child element elements may descendant elements 
tree pattern said consistent exists xml document satisfies 
consider consistent tree patterns 
tree patterns defined naturally generalized accommodate simple conditions predicates ge 
simplify discussion consider extensions 
worth mentioning tree pattern easily converted equivalent xpath expression sub pattern expressed condition qualifier :10.1.1.11.8038
tree patterns graph representations class xpath expressions similar tree patterns studied xml queries 
tempting consider larger fragment xpath express subscription patterns 
turns mild generalization tree patterns addition union disjunction operators leads higher complexity conp hard basic operations containment computation see 
tree pattern said contained tree pattern denoted xml tree satisfies satisfies 
refer container pattern contained pattern 
say equivalent denoted 
definition generalized sets tree patterns set tree patterns contained set tree patterns denoted exists containment sub patterns defined similarly 
size denoted cardinality node set 
example referring 
problem statement tree pattern aggregation problem investigate stated follows 
set tree pattern subscriptions space bound total size aggregated subscriptions compute set tree patterns satisfies conditions general concise precise possible sense exist set tree patterns satisfies conditions clearly tree pattern aggregation problem may necessarily unique solution possible sets satisfy conditions need devise measure quantify goodness candidate solutions terms conciseness preciseness 
respect conciseness interested minimal tree patterns contain redundant nodes 
precisely say tree pattern minimized tree pattern case 
respect preciseness 

pe 




pa pb pc pd pf pg shown containment relationship universe tree patterns defines lattice 
particular notions upper bound upper bound relevance aggregation problem define formally 
upper bound tree patterns tree pattern xml tree 
upper bound lub denoted upper bound upper bound generalize notion lubs set tree patterns 
upper bound tree pattern denoted 
lub denoted upper bound upper bound clearly aggregate tree pattern set tree patterns upper bound 
observe lub precise aggregate tree pattern 
fact shown exists unique equivalence set tree patterns meaningful talk precise aggregate tree pattern :10.1.1.11.8038:10.1.1.11.8038
example consider tree patterns 
observe minimized pattern 
fact tree patterns minimized patterns 
note root node tag child node exists node parent node tag node tag node 
observe upper bound tree pattern upper bound 

note size lub necessarily smaller size constituent patterns 
example 
note upper bound 
conclude section presenting additional notation 
node tree pattern denote set child nodes 
ph examples tree patterns 
pi define partial ordering node labels tag names iff nodes defined upper bound labels follows :10.1.1.11.8038
example 
notational convenience refer node tree pattern refer tag node 
computing precise aggregate section consider special case tree pattern aggregation problem aggregate set consists single tree pattern space constraint 
case provide algorithm compute precise aggregate tree pattern lub set tree patterns 
algorithms section key components solution general problem section 
input tree patterns computes precise aggregate tree pattern lub 
traverses top computes tightest container sub patterns pair sub patterns encountered nodes respectively 
tightest container sub patterns set sub patterns consists container sub patterns xml document element note sub pattern tree patterns upper bound terms interchangeably 
input 
output tree pattern representing lub 
return return initialize denote root nodes resp create tree pattern root node label set child sub patterns return sub input nodes tree patterns respectively dimensional array set tightest container sub patterns output 
return return return initialize pattern root node label set child subtree patterns pattern root node label set child subtree patterns pattern root node label set child subtree patterns return upper bound computation algorithm 
tightest sense set container sub patterns satisfies condition xml document element intuitively collection conditions imposed satisfies satisfies conjunction conditions 
show lub computed tightest container sub patterns 
roots patterns respectively 
note document satisfies satisfies restriction root node consequently document satisfies satisfy pattern consisting root node label 
children tightest container subpatterns pair pattern lub 
main subroutine lub computation algorithm lub sub computes tightest container subpatterns follows 
resp 
resp 
tightest container subpattern tightest container sub patterns aset sub patterns defined manner 
root node labeled child subtrees tightest container sub patterns child subtree child subtree intuitively root corresponds roots label equal upper bound 
words preserves positions corresponding nodes position preserving generalization sufficient may common subpatterns different positions relative roots 
example common sub pattern rooted node child child pattern located different positions relative roots capture position common sub patterns need compute child subtrees tightest container sub patterns child subtree label root node accommodate common sub patterns different positions relative roots similarly root node label child subtrees tightest container sub patterns child subtree computing tightest container sub patterns recursively algorithm computes lub input tree patterns 
induction structures show result :10.1.1.11.8038
proposition tree patterns computes :10.1.1.11.8038:10.1.1.11.8038
example algorithm lub returns help explain computation notation refer node tree pattern labeled collection nodes sharing label ordered pre order sequence example refer leftmost rightmost nodes respectively :10.1.1.11.8038
algorithm lub sub invoked algorithm lub extracts position preserving tightest container sub patterns yields sub pattern steps 
note root node labeled root nodes labeled sub patterns quite different structures position preserving attempt extract common sub patterns yields particular common sub pattern consisting node child node child node captured process occur different positions relative root nodes extract position common sub patterns algorithm lub sub compares compares steps 
yields root common sub pattern occurs different positions relative root nodes mentioned produced position processing algorithm lub sub recursively processes sub pattern respectively 
algorithm removes redundant nodes result tree pattern minimization algorithm explained shortly generate lub 
straightforward show lub operator considered binary operator commutative associative result naturally extended compute lub set tree patterns 
explain details auxiliary algorithms 
needs check containment tree patterns implemented 
input tree patterns algorithm determines 
maintains dimensional array initialized indicate compared clearly denote root nodes respectively 
main subroutine containment algorithm sub 
abstractly contains sub traverses top updates pair nodes visited follows 
denote respectively 
computed value returned 
algorithm determines follows 
iff child subtree contains child subtree 
additional conditions need taken account 
node tag name node node container tree pattern mapped possibly empty chain nodes contained tree pattern 
example consider tree patterns 
note node mapped node sense contained node input tree patterns 
output returns 
initialize denote root nodes resp return sub sub input nodes tree patterns respectively dimensional array output 

return leaf node return tree pattern containment algorithm 
deleted 
hand tree patterns node mapped nodes sense additional scenarios handled steps algorithm contains sub step accounts case node mapped empty chain nodes step case node mapped nonempty chain 
note steps expression returns 
induction structures show result 
proposition tree patterns algorithm determines time :10.1.1.11.8038:10.1.1.11.8038
quadratic time complexity tree pattern containment algorithm due things fact pair sub patterns checked array 
simplify discussion omitted algorithm con tains certain subtle details involve tree patterns chains nodes 
cases require additional pre processing convert tree pattern canonical form increase algorithm time complexity 
ensure tree patterns concise need identify eliminate redundant nodes 
minimized tree pattern equivalent computed recursive algorithm min 
starting root minimization algorithm performs steps minimize sub pattern rooted node forany delete deleted step recursively minimize complete details :10.1.1.11.8038
proposition algorithm minimize minimizes tree pattern time 
proposition minimized tree patterns iff syntactically equal 
low computational complexities con tains expect case 
unfortunately worst case size minimized lub tree patterns exponentially large see detailed analysis 
implementation results demonstrate lub algorithm exhibits reasonably low complexity practice 
selectivity aggregation algorithm lub algorithm previous section compute single precise aggregate tree pattern set patterns size lub may large may violate specified space constraint total size aggregated subscriptions section 
order fit aggregates allotted space budget relax requirement single precise aggregate permitting solution set single pattern pattern contained pattern course require provide tightest containment patterns space constraint section number xml documents satisfy tree pattern small 
simple measure preciseness selectivity essentially fraction filtered xml documents satisfy pattern objective compute set aggregate patterns selectivity close 
clearly selectivity tree patterns highly dependent distribution underlying collection xml documents denoted 
infeasible maintain detailed distribution streaming xml documents aggregation space requirements enormous 
approach building concise synopsis line documents streaming synopsis estimate approximate tree pattern selectivities 
high level aggregation algorithm iteratively computes aset selective satisfies space constraint starting original set patterns performing sequence steps iteration 
generate candidate set aggregate tree patterns consisting patterns lubs similar pattern pairs 
prune pattern deleting merging nodes order reduce size 

choose candidate replace patterns contained 
candidate selection strategy marginal gains selected candidate results minimum loss selectivity unit reduction size due replacement patterns 
note pruning step step candidate aggregate patterns selective addition decreasing size 
replacing patterns patterns effectively trying reduce size giving selectivity 
subsections describe detail algorithm computing presenting approach estimating selectivity tree patterns underlying document distribution critical choosing replacement candidate step 
selectivity estimation tree patterns document tree synopsis 
mentioned simply impossible maintain accurate document distribution full set streaming documents order obtain accurate selectivity estimates tree patterns 
approach approximate concise synopsis structure refer document tree 
document tree synopsis denoted captures path statistics documents built line xml documents stream 
document tree essentially structure xml tree differences 
root node special label 
second non root node frequency associated denote intuitively sequence tag names nodes path root excluding label root represents number documents contain path tag sequence originating root frequency root node set number documents 
xml documents stream incrementally maintained follows 
arriving document construct skeleton tree document inthe skeleton tree node child tag 
built simply coalescing children node share common tag 
clearly traversing nodes top fashion coalescing 
document tree compressed document tree skeleton tree 

example documents skeleton tree document tree patterns 
child nodes common tags construct single pass event xml parser 
example depicts skeleton tree xml document tree 
update statistics maintained document tree synopsis follows 
path tag sequence say node corresponding unique path 
increment shows document tree node frequencies xml trees 
note possible compress techniques similar spirit methods employed summarizing path trees 
key idea merge nodes lowest frequencies store merged node average original frequencies nodes merged 
illustrated document tree label indicate merged nodes 
due space constraints remainder subsection solutions selectivity estimation problem uncompressed tree 
proposed methods easily extended compressed :10.1.1.11.8038
note selectivity estimation problem tree patterns differs important respects 
authors consider problem estimating selectivity simple paths consist node followed tag nodes 
contrast estimate selectivities general tree patterns branches nodes arbitrarily distributed tree 
second interested selectivity granularity documents goal estimate number xml documents match tree pattern addresses selectivity problem granularity individual document elements discovered path 
easy see different estimation problems 
selectivity estimation procedure 
recall selec 
tivity tree pattern fraction documents satisfy 
construction synopsis gives accurate selectivity estimates tree patterns comprising single chain tag nodes 
obtaining accurate selectivity estimates arbitrary tree patterns branches general possible summaries 
captures number documents containing single path store document identities 
result pair arbitrary paths tree pattern impossible determine exact number documents contain paths documents contain path 
estimation procedure solves problem making simplifying assumption distribution path tree pattern independent paths 
estimate selectivity tree pattern containing labels simply product selectivities root leaf path pattern 
patterns containing consider possible instantiations element tags choose pattern selectivity maximum selectivity value instantiations 
similar definition fuzzy operator fuzzy logic 
illustrate selectivity estimation methodology example 
example consider problem estimating selectivities tree patterns shown figures document tree shown 
total number documents clearly number documents satisfying pattern consists single path estimated accurately path returning frequency node path 
selectivity accurate documents satisfy estimating number documents containing pattern somewhat tricky 
paths tag sequences match corresponding instantiating 
summing frequencies nodes paths gives answer estimates number documents satisfying documents satisfy 
avoid double counting frequencies estimate number documents satisfying maximum sum frequencies paths match selectivity estimated selectivity computed considering possible instantiations choosing maximum selectivity 
possible instantiations result non zero selectivities instantiated 
choosing results maximum selectivity product selectivities paths maximum equal depicted invoked input parameters root pattern root computes selectivity arbitrary tree input node tree pattern node 
output 
computed return return leaf return child return tree pattern selectivity estimation algorithm 
pattern time 
algorithm nodes stores selectivity sub pattern respect subtree rooted node 
selectivity estimated similar selectivity pattern consider instantiations obtained instantiating element tags selectivity instantiation computed respect root root 
instance suppose node child node node 
selectivity respect essentially product selectivity paths respect node whichis goal compute 
pair nodes algorithm sel computes values children 
clearly steps algorithm path begins label different selectivity paths leaf steps simply instantiate giving selectivity 
hand internal node addition instantiating need compute child instantiation maximum selectivity respect child 
selectivity respect product children gives selectivity respect 
simply case selectivity respect computed described step instantiated sequence consisting followed child selectivity respect maximized step 
observe steps evaluates tree pattern aggregation algorithm ready greedy heuristic algorithm tree pattern aggregation problem defined section general hard clustering problem 
described earlier aggregate input set tree patterns space efficient precise set algorithm iteratively prunes tree patterns replacing small subset tree patterns concise upper bound aggregate pattern satisfies space constraint 
iteration algorithm generates small set potential candidate aggregate patterns selects locally best candidate pattern candidate maximizes gain space minimizing expected loss selectivity 
input set tree patterns space constraint 
output set tree patterns 
initialize select maximum return tree pattern aggregation algorithm 
candidate generation 
explain process generating candidate set steps 
reduce size individual candidate patterns form candidate pruned invoking algorithm prune details 
input pattern space constraint prunes smaller tree pattern 
algorithm treats tag nodes selective nodes tries prune away nodes tag nodes 
specifically algorithm prunes nodes replacing adjacent pair non tag nodes single node child eliminating subtrees consist non tag nodes 
tree pattern small pruning nodes start pruning tag nodes 
ways reduce size tree pattern node 
delete leaf node second collapse nodes single node 
help select leaf node delete pair nodes collapse selectivity tag names 
specifically document tree synopsis estimate total number occurrences tag name document collection choose tags higher total frequencies selective candidates pruning 
candidate selection 
set candidate aggregate patterns generated need criterion selecting best candidate insert purpose associate benefit value candidate aggregate pattern denoted marginal gain define ratio savings space loss selectivity 
formally represent root nodes equal note compute selectivity loss comparing selectivity candidate aggregate pattern selective pattern contained 
gives approximation selectivity loss cases patterns generate similar overlap document tree 
candidate aggregate pattern highest benefit value chosen replace patterns contained steps 
experimental study verify effectiveness tree pattern aggregation algorithms conducted extensive performance study real life dtds large numbers tree patterns 
results indicate proposed aggregation techniques achieve significant reductions number total size tree patterns minimal loss selectivity 
experimental testbed methodology general methodology evaluating effectiveness pattern aggregation algorithm follows 
large input set tree patterns space constraint weuse set aggregate patterns space constraint expressed terms number nodes patterns arbitrarily large 
measure loss precision filter xml documents 
observe contains single container pattern 
measure loss precision aggregate set subset representative set xml documents document matches tree pattern initial pattern set 
reason course xml documents match guaranteed match affect measurements 
precise documents erroneously reported matches 
number documents match loss precision estimated 
aggregation algorithm obviously effective remains small decreases 
xml documents 
real life dtds generate xml document data set 
extensible hypertext markup language xhtml dtd reformulation html xml application arguably document type widely internet 
xhtml dtd version contains elements attributes 
second dtd news industry text format nitf dtd supported world major news agencies 
nitf dtd version contains elements attributes 
generated data set xml documents ibm xml generator tool 
xhtml nitf dtds contain recursive structures nested produce xml documents arbitrary number levels 
added option generating documents skewed zipf distribution tag names appear frequently generally case real life data 
dtd skew value generated disjoint sets xml documents approximately nodes levels average 
set corresponds collection xml documents construct document tree selectivity estimation second set measure loss precision aggregation algorithms 
sets generated parameters expected similar distributions 
experiment combined xml documents xhtml nitf dtds total documents document tree different documents measuring loss precision 
xpath expressions 
generate set tree patterns implemented xpath expression generator takes dtd input creates set valid xpath expressions set parameters control maximum height tree patterns probabilities having wildcard descendant operator node tree pattern probability having child node skew zipf distribution selecting element tag names 
dtd skew value generated set tree patterns experiment run tree patterns xhtml nitf dtds tree patterns amounted nodes 
algorithms 
compared different aggregation algorithms experiments 
naive algorithm prune simple node pruning works follows 
iteration selects tree pattern largest number tag nodes collapses multiple nodes deletes node leaf node node located nodes highest frequency selective document tree 
tree pattern identical pruned pattern duplicate removed 
algorithm iterates space constraint satisfied 
second algorithm aggr greedy tree pattern aggregation algorithm candidate generation selection maximizing benefit 
experiments conducted mhz intel pentium iii selectivity loss prune prune prune aggr aggr aggr number nodes varying selectivity loss number nodes prune prune prune aggr aggr aggr varying machine mb main memory running linux 
algorithms completed aggregation tree patterns approximately minutes 
experimental results compare performance aggregation algorithms varying skew element tags xml documents xpath expressions 
ran experiments skew skewed xml documents skewed xpath expressions skew xml documents xpath expressions 
case skew distribution element names opposite direction applying skew xml documents xpath expressions yield similar results skew 
experimental results shown figures space constraint expressed terms number nodes varied axis axis indicates observed loss selectivity space constraint percentage xml documents erroneously reported matches 
measure benefits aggregation terms filtering performance xtrie matching algorithm described 
cost filtering xtrie grows linearly number xpath expressions expect observe significant improvement filtering speed cardinality decreases 
non skewed workload 
xml data tree patterns contain skew aggr algorithm aggregate tree patterns original size loss precision results non skewed data reported graphs 
contrast precision prune algorithm starts degrade sooner loss precision reaches initial space 
better performance aggr attributed main factors upper bound computation generates candidates nodes little loss precision selectivity heuristics help detect discard candidates correspond patterns low selectivity frequently occurring dtd covering computation enables redundant tree patterns evaluation aggregation algorithms 
selectivity loss prune prune prune aggr aggr aggr number nodes varying eliminated early 
skewed xml documents 
real world xml documents generally uniformly distributed valid xml data dtd 
xml documents skewed observe effectiveness aggr algorithm increases 
reason data skewed xml documents tend form clusters documents cluster similar different clusters turn improves accuracy selectivity estimation 
prune algorithm benefits skew lesser extent frequency pruning heuristic 
skewed tree patterns 
observe significant improvement aggregation algorithm element names tree patterns skewed 
skew induces clustering patterns similar tree patterns grouped cluster consequently increases proportion patterns develop containment relationships 
permits aggregation algorithm reduce size minimal loss selectivity computing tighter upper bound patterns discarding covered patterns 
skewed workload 
aggregation algorithms perform best xml data tree patterns skewed different directions 
high skew values little overlap element names xml documents tree patterns aggr remains highly selective hundreds nodes 
prune algorithm exhibits significant improvements maintains selectivity original number nodes reduced third 
filtering speed 
mentioned previously cost matching tree patterns incoming xml documents proportional number tree patterns 
aggr generates candidates computing upper bounds candidates cover patterns result number patterns shrinks faster aggr 
shows average filtering time document decreases faster space increased aggr prune algorithm 
aggregation algorithm effec filtering time ms prune aggr number nodes filtering speed 
tive terms selectivity filtering speed 
related best knowledge tree pattern aggregation problem novel problem studied earlier 
contrast flat patterns previously studied context aggregating attribute predicate subscriptions focuses hierarchical patterns complex tree patterns consist data contents structure require sophisticated aggregation techniques 
related area query merging reduce data dissemination costs query subscriptions multicast environment 
motivation query merging merge multiple similar queries single general query reduce workload server possibly amount traffic server clients 
problem domain considered focuses geographical queries represented rectangles furthermore issue space constraint relevant 
forms tree patterns studied queries xml data 
particular minimization algorithms patterns developed order optimize pattern queries 
tree patterns differ aspects 
hand tree patterns allow nodes wildcards mentioned section give rise subtle problems presence nodes descendants containment tree patterns considered 
hand support selection set document nodes result pattern query consider matters subscription aggregation context document matches subscription actual set document nodes matches subscription relevant 
differences minimization algorithm complexity contrast complexity 
similarly studies different class tree patterns minimization algorithm known polynomial time 
provided systematic study tree pattern aggregation important problem building scalable xml dissemination systems 
main challenge aggregate input set tree patterns smaller set space constraint total size patterns met loss precision due aggregation minimized 
proposed efficient aggregation algorithm effective document distribution statistics order compute precise set aggregate tree patterns allotted space budget 
algorithmic results interest right prove useful domains xml query optimization 
extensive results prototype implementation verified effectiveness approach 
naughton 
estimating selectivity xml path expressions internet scale applications 
proc 
th intl 
conf 
large databases vldb september 
franklin 
efficient filtering xml documents selective dissemination information 
proc 
th intl 
conf 
large databases vldb pages september 
amer cho lakshmanan srivastava 
minimization tree pattern queries 
proc 
sig mod pages santa barbara california may 
carzaniga wolf 
content networking new communication infrastructure 
nsf workshop infrastructure mobile wireless systems october 

chan fan felber garofalakis rastogi 
tree pattern aggregation scalable xml data dissemination 
bell labs tech 
memorandum february 

chan felber garofalakis rastogi 
efficient filtering xml documents xpath expressions 
proc 
th intl 
conf 
data engineering san jose california february 
world wide web consortium 
sgml xml web page 
www org tr xhtml january 
cover 
sgml xml web page 
www oasis open org cover sgml xml html december 
crespo garcia molina 
query merging improving query subscription processing multicast environment 
ieee trans 
knowledge data engineering 
appear 
deutsch tannen 
containment regular path expressions integrity constraints 
proc 
intl 
workshop knowledge representation meets databases krdb 
diaz lovell 
xml generator 
www alphaworks ibm com tech september 
exploiting ip multicast content publish subscribe systems 
proc 
intl 
conf 
distributed systems platforms middleware 
fagin 
combining fuzzy information multiple systems 
proc 
th acm symp 
principles database systems montreal quebec june 
fox 
discrete optimization marginal analysis 
management science november 

xml path language xpath 
www org tr xpath 

extensible markup language xml 
www org xml 
wood 
minimizing simple xpath expressions 
proc 
intl 
workshop web databases webdb santa barbara california may 
zipf 
human behaviour principle effort 
addison wesley cambridge massachusetts 
