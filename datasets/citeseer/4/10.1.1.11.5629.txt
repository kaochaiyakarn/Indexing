indexing methods approximate string matching gonzalo navarro ricardo baeza yates erkki sutinen tarhio indexing approximate text searching novel problem receiving attention applications signal processing computational biology text retrieval name 
classify indexing methods taxonomy helps understand essential features 
show existing methods completely different regarded form range solutions optimum usually 
approximate string matching finding pattern text suffered kind undesirable corruption 
number applications retrieving musical passages similar sample finding dna subsequences possible mutations searching text presence typing spelling errors 
problem approximate string matching formally stated follows long text length comparatively short pattern length sequences alphabet sigma size oe find text positions match pattern errors 
existing error models focus popular levenshtein edit distance error character insertion deletion substitution 
distance strings minimum number errors needed convert seek text substrings distance pattern 
techniques easily adapted error models 
ff error ratio ff 
numerous solutions line version problem pattern preprocessed text :10.1.1.21.3112
range classical mn worst case time optimal log oe average case time 
fast line algorithms exist applications handle large texts line algorithm provide acceptable performance 
alternative approach text large searched frequently preprocess build data structure text index speed searches 
indexing methods developed exact string matching decade ago doing approximate string matching open problem 
copyright ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
bulletin ieee computer society technical committee data engineering dept computer science university chile 
supported part 
dept computer science university finland 
dept computer science engineering helsinki university technology finland 
decade proposals index text speed approximate searches 
attempt done show common light 
purpose 
classify existing approaches dimensions data structure search method 
different data structures literature 
serve roughly purposes different space time tradeoffs 
mention powerful space demanding 
suffix trees permit searching substring text 
suffix arrays permit operations slightly slower 
grams permit searching text substring longer samples permit text substrings 
hand search approaches 
neighborhood generation generates searches index strings distance pattern neighborhood 
partitioning exact searching selects patterns substrings appear unaltered approximate occurrence uses index search substrings checks text areas surrounding 
assuming errors occur pattern text leads radically different approaches 
intermediate partitioning extracts substrings pattern searched allowing fewer errors neighborhood generation 
consider errors occur pattern text 
table illustrates classification places existing schemes context 
search approach data structure neighborhood partitioning intermediate generation exact searching partitioning errors text errors pattern errors text errors pattern jokinen suffix tree ukkonen shi ukkonen suffix array gonnet navarro baeza yates jokinen grams ukkonen navarro myers baeza yates sutinen samples sutinen navarro tarhio table taxonomy indexes approximate text searching :10.1.1.9.8541
means data structure unsuitable implement search approach information maintained 
basic concepts suffix trees suffix trees widely data structures text processing 
position text defines automatically suffix suffix trie trie data structure built suffixes leaf node points suffix 
internal node represents unique substring appears 
substring traversing path root possibly continuing search directly text leaf reached 
practice suffix tree obtained compressing unary trie paths preferred yields space construction time offers functionality 
illustrates suffix trie 
text suffix trie suffix array suffix trie suffix array sample text 
special marker denote text lexicographically smaller characters 
search simple pattern suffix trie just enter driven letters pattern reporting suffix start points subtree node arrive 
consider searching abr example 
search time optimal 
weak point suffix tree large space requirement worsened absence practical schemes manage secondary memory 
attempts reduce space best practical implementations require times text size handle secondary memory 
suffix arrays suffix array weak version suffix tree requires space pointer text position times text size poses small penalty search time 
leaves suffix tree traversed left right order text suffixes retrieved lexicographical order 
suffix array simply ordered array containing pointers text suffixes 
illustrates 
suffix array built directly log worst case time log log average time 
secondary memory practical log time algorithm preferable amount main memory available 
suffix arrays simulate binary searching algorithm suffix trees log time penalty factor 
suffix subtree corresponds suffix array interval moving child node equivalent reducing current suffix array interval doing binary searches 
instance exact searching pattern takes log time approach 
grams samples indexes weaker space demanding scheme limit length strings directly index 
gram index allows retrieval text strings length gram index different text gram substring length stored 
gram positions text called occurrences stored increasing text order 
space demanding alternative sample index text grams called text samples stored text gram 
text samples text grams overlap may space pair samples 
severely restricted index attractive low space requirements permits searching long strings see 
grams samples index built linear time large texts practical log time algorithm 
depending index takes times text size reasonable retrieval performance 
computing edit distance basic algorithm compute edit distance strings dynamic programming see :10.1.1.21.3112
compute matrix jxj jyj filled 
computed min gamma gamma ffi gamma gamma ffi zero gamma gamma 
minimization accounts allowed operations substitutions deletions insertions 
jxj jyj 
matrix filled column wise guarantee necessary cells computed 
table left illustrates algorithm compute survey surgery 
algorithm time worst average case 
space required jxj column wise processing previous column stored compute new 
neighborhood generation neighborhood pattern number strings match pattern errors finite length string exceed call set strings neighborhood denote fx sigma kg 
idea approach essence generate strings index search text occurrences errors 
string searched separately sophisticated technique see 
main problem approach quite large 
bounds show exponential growth ju oe 
approach works small backtracking suffix tree array find strings text 
substring text potential occurrence traversing suffix tree root sufficient explore path starting root descending branch seen branch start string 
explain algorithm suffix trie 
compute edit distance pattern text string labels path root trie node start root initial column root section recursively descend branch trie 
edge traversed compute new column previous assuming new character labeling edge just traversed 
cases may occur node may find means report leaves current subtree answers 
may find means prefix string abandon branch trie 
cases occur continue descending branch 
arrive leaf node continue algorithm section text suffix pointed 
illustrates process path spells string surgery 
matrix seen stack grows right 
backtracking ends reading surge string matches pattern case 
search pruned case considering alternative path shown considering cases entry matrix 
dynamic programming algorithm run suffix trie 
show path additional link 
improvements algorithm avoid processing redundant nodes cost complex node processing practicality established 
method compare text 
partitioning exact search approximate occurrence pattern contains pattern substrings match errors 
derive sufficient conditions approximate match exact matching carefully selected pattern pieces 
pieces searched errors text areas surrounding occurrences verified approximate occurrence complete pattern 
technique called filtration :10.1.1.21.3112
indexed searching kind index quickly locate exact occurrences selected pattern pieces classical line algorithm verification 
general limitation filtration methods maximum error ratio ff useful larger error levels text areas verify cover text 
general lemma useful unify existing variants 
lemma strings gamma strings 
strings appear relative distances inside differ clear consider sequence edit operations convert edit operation affect remain unaltered 
extra requirement relative distances follows considering edit operations produce misalignments larger main branches algorithms lemma exist differing essentially errors assumed occur pattern text 
errors pattern technique application lemma setting 
pattern split pieces pieces appear inside occurrence 
pieces searched text text areas pieces appear stated distance requirements verified complete match 
data structures section time search pieces index log checking time dominates 
case proposed shows average time check candidates kn oe 
case proposed analysis 
clear better 
grows pieces get shorter matches check hand forcing pieces match filter stricter 
note know pattern pieces text text positions searchable 
technique described works samples index 
price smaller index tolerates lower error ratios 
errors text assume errors occur text occurrence extract substrings length fixed text intervals length samples correspond lemma space samples 
lemma ensures inside occurrence containing text samples appear positions 
lemma hold need ensure occurrence contains text samples gamma gamma search time gamma overlapping pattern grams extracted searched index text samples 
pattern grams match text proper distances text area verified complete match 
idea earlier versions 
discuss best value want small avoid large set different samples 
want large minimize amount verification 
analyses show theta log oe optimal value 
hand little said best value larger may trigger verifications 
intermediate partitioning approach lies previous 
filter search looking pattern pieces pieces large may appear errors occurrences 
appear errors neighborhood generation search 
new lemma useful 
lemma strings gamma strings 
set nonnegative numbers gamma 
string appears errors proof easy needs errors match total distance gamma 
note particular choose bk jc errors pattern search approaches method proposed 
split pattern pieces discuss soon 
neighborhood generation find text positions pieces appear allowing bk jc errors 
text position check line algorithm surrounding text 
main question value 
pattern partitioned gram index minimum gives short pieces length 
index search pieces length partitioning done order optimize search time 
consider evolution search time moves neighborhood generation partitioning exact search 
search pieces length errors error level ff stays subpatterns 
moves cost search neighborhood pieces grows exponentially length shown section 
moves cost decreases reaching 
find pieces larger better 
cost verify occurrences 
consider pattern split pieces increasing start 
lemma states occurrence pattern involves occurrence halves errors may occurrences halves yield occurrences pattern 
consider halving halves pieces call quarters 
occurrence halves involves occurrence quarter errors may quarter occurrences yield occurrences pattern half 
shows partition pattern pieces occurrences triggered 
verification cost grows zero maximum 
tradeoff illustrated 
search verify neighborhood generation intermediate partitioning partitioning exact search intermediate partitioning seen tradeoff neighborhood generation partitioning exact search 
shown optimal theta log oe yielding time complexity 
sublinear ff gamma oe known limit filtration approach pessimistic replaced practice :10.1.1.21.3112
interestingly results obtained setting theta log oe 
experiments show intermediate approach far superior extremes 
errors text time consider occurrence containing sequence samples chosen steps gamma gamma jc 
lemma samples appear pattern bk jc errors 
sample appears pattern block hi gammak hi gamma errors hold method searches block index samples backtracking find number errors match text sample inside slight modification algorithm section 
zone consecutive samples errors add area verified line algorithm 
permit efficient neighborhood searching need limit maximum error level permit 
permitting errors may expensive text sample considered 
choose bk jc assume text sample matches errors 
search pattern blocks permitting errors 
sample errors changes estimation stays optimistic bound 
tradeoff 
small value search neighborhoods cheaper assume text samples errors unnecessary verifications carried 
hand larger values gives exact estimates actual number errors text sample reduces unnecessary verifications exchange higher cost search environments 
done obtaining optimal mentioned cost search grows exponentially minimal bk jc choice 
shown experimentally scheme tolerates higher error levels corresponding partitioning exact search 
considered indexing mechanisms approximate string matching novel difficult problem arising areas 
classified different approaches coordinates supporting data structure search approach 
shown promising alternatives look optimum balance point exhaustively searching neighborhoods pattern pieces strictness filtration produced splitting pattern pieces 
separate issue covered indexing schemes approximate word matching natural language text 
mature problem established solutions 
approach totally different existing ones rarely attempted edit distance give text structure metric space 
clear competitive results index elements form metric space 
radically innovative ideas welcome area 
apostolico galil 
combinatorial algorithms words 
springer verlag 
baeza yates 
text retrieval theory practice 
th ifip world computer congress volume pages 
elsevier science 
baeza yates gonnet 
fast algorithm average sequence matching 
proc 
th symp 
string processing information retrieval spire 
ieee cs press 
previous version unpublished dept computer science univ chile 
bugnion roos shi widmayer widmer 
approximate multiple string matching spatial indexes 
proc 
st south american workshop string processing wsp pages 

fast approximate matching suffix trees 
proc 
th ann 
symp 
combinatorial pattern matching cpm lncs pages 
giegerich kurtz stoye 
efficient implementation lazy suffix trees 
proc 
rd workshop algorithm engineering lncs pages 
gonnet 
tutorial computational biochemistry darwin 
technical report informatik switzerland 
gonnet baeza yates snider 
information retrieval data structures algorithms chapter new indices text pat trees pat arrays pages 
prentice hall 
sutinen 
approximate string matching gram places 
proc 
th finnish symp 
computer science pages 
univ 
jokinen ukkonen 
algorithms approximate string matching static texts 
proc 
nd ann 
symp 
mathematical foundations computer science mfcs pages 
manber myers 
suffix arrays new method line string searches 
siam computing 
mccreight 
space economical suffix tree construction algorithm 
acm 
myers 
sublinear algorithm approximate keyword searching 
algorithmica 
earlier version tech 
report tr dept cs univ arizona 
navarro :10.1.1.21.3112
guided tour approximate string matching 
acm comp 
surv 
navarro baeza yates 
practical gram index text retrieval allowing errors 
electronic journal 
www cl earlier version proc 

navarro baeza yates 
hybrid indexing method approximate string matching 
discrete algorithms 
hermes science publishing 
earlier version cpm 
navarro sutinen tarhio 
indexing text approximate grams 
proc 
th ann 
symp 
combinatorial pattern matching cpm lncs pages 
shi 
fast approximate string matching blocks sequences 
proc 
rd south american workshop string processing wsp pages 
carleton university press 
sutinen tarhio 
gram locations approximate string matching 
proc 
rd european symp 
algorithms esa lncs pages 
sutinen tarhio 
filtration samples approximate string matching 
proc 
th ann 
symp 
combinatorial pattern matching cpm lncs pages 
takaoka 
approximate pattern matching samples 
proc 
th int 
symp 
algorithms computation isaac lncs pages 
ukkonen 
finding approximate patterns strings 
algorithms 
ukkonen :10.1.1.9.8541
approximate string matching suffix trees 
proc 
th ann 
symp 
combinatorial pattern matching cpm lncs pages 
ukkonen 
constructing suffix trees line linear time 
algorithmica 

