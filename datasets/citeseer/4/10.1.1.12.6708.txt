performance wide area synchronous database replication yair amir michal amir jonathan stanton technical report cnds www cnds jhu edu november fundamental challenge database replication maintain low cost updates assuring global system consistency 
di culty problem magnified wide area network settings due high latency increased likelihood network partitions 
consequence research area focused improving performance local transaction execution replication models weaker semantics rely application knowledge resolve potential conflicts 
identify performance bottleneck existing synchronous replication schemes residing update synchronization algorithm 
compare performance synchronization algorithms highlight large performance gap various methods 
design generic synchronous replication scheme uses enhanced synchronization algorithm demonstrate practicality building prototype replicates postgresql database system 
claim optimized synchronization engine key building practical replication system wide area network settings 
database management systems important software systems driving information age 
internet applications large number users geographically dispersed may routinely query update database 
environment centralized database exposed significant risks performance degradation due high server load 
data loss risk due server crashes 
high latency queries issued remote clients availability issues due lack network connectivity server downtime 
computer science department johns hopkins university baltimore md usa 
email cnds jhu edu spread concepts llc email michal com computer science department george washington university washington dc usa 
email edu apparent solution problems synchronously replicate database server set peer servers 
system queries answered servers additional communication order system remain consistent transactions update database need disseminated synchronized replicas 
obviously transactions system updates replicated system trades performance availability fault tolerance 
replicating database local cluster cost relatively low solution successfully addresses problems 
response time availability due network connectivity remain valid concerns clients scattered wide area network cluster limited single location 
wide area network settings cost synchronizing updates peer replicas maintaining global system consistency magnified high network latency increased likelihood network partitions 
consequence synchronous database replication deemed impractical research area focused improving performance transaction execution single server maximizing concurrency degree design alternative asynchronous replication schemes ultimately rely application resolve potential conflicts define building blocks generic peer synchronous replication system identify performance bottleneck systems 
examine classical synchronous replication methods enhanced replication systems non generic approaches exploit application semantics tightly coupled integration database order gain performance 
notice critical component performance system method employed synchronize update transactions participating replicas 
generic symmetric synchronous replication system uses enhanced update synchronization method 
compare performance synchronization methods show increased performance scalability enhanced synchronization method bring local wide area network settings 
build solution generic system black box employed replicate database system modifying database transparently large number applications 
investigate limitations imposed design show design adapted alleviate provide cient synchronous replication tightly integrated specific database system adapted needs specific applications 
furthermore argue transparent replication architecture avoids complex tailoring specific application database systems facilitate interoperability di erent database systems 
performance prototype system postgresql database system 
remainder organized follows section surveys related general area 
section inspect characteristics existing replication systems special emphasis synchronous replication systems 
section compare performance synchronization algorithms 
section describes proposed transparent synchronous replication architecture 
section evaluate performance postgresql prototype 
section concludes 
note applications critically require continuous data consistency asynchronous replication schemes 
related solution peer synchronous replication maintaining strict consistency semantics 
rest particular section provide detailed comparison existing synchronous replication methods 
section give overview state art entire spectrum database replication methods 
despite ine ciency lack scalability phase commit protocols remain principal technique commercial database systems try provide synchronous peer replication 
accessible copies algorithms maintain approximate view connected servers called virtual partition 
data item read written virtual partition virtual partition approximation current connected component contains majority read write votes 
case data item considered accessible read write operations done collecting sub quorums current component 
maintenance virtual partitions greatly complicates algorithm 
view changes servers need execute protocol agree new view recover date item state 
view decisions membership connected servers changes update requires acknowledgments quorum 
state art commercial database systems provide level database replication 
cases solutions highly tuned specific environment settings require lot ort setup maintenance 
oracle supports asynchronous synchronous replication 
requires level application decision conflict resolution requires replicas system available able function making impractical 
informix sybase db support asynchronous replication ultimately relies application conflict resolution 
open source database community database systems emerge clear leaders mysql postgresql 
default systems provide limited master slave replication capabilities 
projects exist provide advanced replication methods postgres postgres replicator uses trigger store forward asynchronous replication method 
evolved approaches postgres project combines open source expertise academic research 
postgres implements algorithms designed kemme alonso postgresql database manager order provide synchronous replication 
current version uses spread underlying group communication system focuses integrating method version postgresql system 
research protocols support group communication wide area networks internet begun expand 
new group communication protocols designed wide area networks proposed continue provide traditional strong semantic properties reliability ordering membership 
group communication systems aware currently exist available provide extended virtual synchrony semantics horus ensemble spread 
synchronous database replication replication methods replicated database system needs perform main functions execute transactions locally sure outcome transaction reflected replicas 
task achieved ways 
master slave approach master replica charge executing committing transactions locally disseminates transactions just outcome slave replicas 
method closest single server solution performance concurrent transaction execution optimizations applied limitations high latency remote clients reduced availability face network problems 
model consistency replicas guaranteed consistency execution replica slave replicas lazily updated provide accurate responses queries 
asynchronous replication approach disseminates transactions parallel execution replicas 
replica answer queries initiate execution transaction consistency guaranteed conflicting transactions may executed di erent order di erent replicas 
situations detected conflict resolution procedures applied order restore consistency 
conflicts arise transaction execution system proceed fast replica locally execute transactions soon received 
synchronous replication methods guarantee replicas maintained consistent times executing transaction locally replicas agreed execution order 
way strict level consistency maintained providing high availability latency response clients 
strict synchronization replicas required transaction synchronous replication methods deemed times centralized master slave approach preferred systems critically require strict consistency 
believed trade performance throughput client response time unbalanced practical needs 
sections argue exist cient synchronization algorithms integrated complete architecture synchronous database replication performance local wide area networks 
synchronous replication methods phase commit pc widely synchronous replication method 
analyzing pc obvious performance tradeo deemed high kind replication pc requires unicast messages transaction forced disk write transaction replica 
local area network settings number forced disk writes required order guarantee consistency impact performance wide area settings communication price high 
furthermore pc vulnerable faults critical points crash transaction coordinator blocks system crashed server recovers 
order enhance fault tolerance pc phase commit pc algorithms introduced pay higher communication cost rarely practice 
keidar introduces corel replication algorithm exploits group communication properties order reduce communication costs synchronization procedure 
algorithm establishes global consistent persistent order transactions commits replicas order 
algorithm requires multicast messages transaction plus forced disk write action replica 
multicast unicast pc clear improvement corel algorithm performs transaction synchronizations order guarantee correctness 
lamport introduces paxos highly robust replication algorithm pays similar price corel algorithm unicast messages transaction plus forced disk write transaction replica 
amir introduce prove correctness synchronization algorithm enhanced group communication paradigm extended virtual synchrony evs :10.1.1.16.3690
algorithm requires safe multicast message transaction forced disk writes transaction replica 
similar corel replica commits transactions global consistent persistent order established avoids benefiting lower level guarantees group communication provides 
particular evs group communication system provides complete accurate membership information informing synchronization algorithm currently connected members special type total order delivery called safe delivery message safely delivered server total order message established group communication guarantees currently connected members received message 
evs system provides special delivery case message received network event partition crash occurs stability message determined 
knowledge algorithm guarantee consistency faults occur resorting transaction implicit network level group communication primitives provide expensive synchronization required faults occur set currently connected servers changes 
kemme alonso demonstrate practicality synchronous database replication local area network environment network partitions occur 
approach tightly integrated database system uses group communication order totally order write sets transaction establish order locks acquired avoid deadlocks 
contrast method algorithm requires multicast messages total order multicast generic multicast transaction 
method allows concurrent execution transactions site allowed local concurrency manager transactions may aborted due conflicts 
presents performance results postgresql replicated database prototype postgres 
authors examine methods provide online reconfiguration replicated database system order cope network partitions server crashes recoveries 
authors approach replication problem targeted local area clusters supporting network partitions merges server recoveries 
solution tightly integrated database completely transparent requires application provide conflict class information order allow concurrent processing nonconflicting transactions 
similar transaction encapsulated message multicast sites 
transaction executed master site conflict class optimistic delivery order 
commit message containing write set transaction issued optimistic order conflict final total order 
write set applied replicas total order 
methods take advantage primitives ered modern group communication systems 
various solutions di erent degree exploit group communication properties 
argue optimal usage group communication primitives lead significant performance improvements synchronization algorithm improvements turn build practical synchronous database replication solution local wide area networks 
synchronization methods evaluation section compare performance synchronization methods described 
compare evs replication engine described corel implementation upper bound pc implementation :10.1.1.16.3690
chose algorithms comparison reasons cope wide area network settings complete algorithm group communication literature type delivery refered stable delivery vast amount research group communication area lead design implementation group communication systems highly cient ordered communication primitives spread ensemble number clients replicas transactions second evs engine corel upper bound pc lan synchronization comparison available correctness proofs naturally implemented independently database system 
pc implementation assume locks granted instantly ensuring maximum level concurrency pc method support 
essence just send necessary messages perform necessary forced writes disk 
reason call implementation upper bound pc 
corel evs engines implemented spread underlying group communication 
explore performance synchronization methods setups 
local area cluster emulab wide area testbed 
cluster contains linux dual piii computers mbytes scsi disk 
emulab utah network test bed provides configurable test bed network setup sets latency throughput link loss characteristics links 
configured network emulated emulab local area network actual routers computers emulate required latency loss capacity constraints 
emulab linux computers emulate network depicted 
emulab machines piii mbytes ide disk 
tests assume actions represent update transactions replicated committed replicas 
client submits action time 
action committed client receives peer server generate new action 
throughput comparison algorithms local area network testbed 
pc algorithm reaches maximum throughput approximately actions second corel reaches approximately actions second 
evs synchronization engine reaches peak actions second 
evaluated algorithms emulab emulating wide area network depicted accurately possible 
diameter network measured ping approximately ms involving sites 
validated emulab measuring safe delivery latency di erent message loads 
loads networks provided similar message latency details available technical report 
compare evs synchronization engine upper bound pc implementation wide area network depicted 
upper bound pc engine reaches emulab available www emulab net primarily supported nsf ani cisco systems 
ms mbits sec ms mbits sec ms mbits sec ms mbits sec mb mb virginia delaware boston san jose los angeles ms mbits sec ms mbits sec ms mbits sec ms mbits sec mb mb virginia delaware boston san jose los angeles layout network number clients replicas wide area transactions second evs engine upper bound pc wan synchronization comparison maximum capacity approximately actions second engine saturated actions second 
results obtained experiments show significant performance di erence various synchronization techniques 
important aspect fact exist cient synchronization methods evs engine sustain high amount throughput local wide area network conditions 
di cult compare isolation evs synchronization engine core engines employed tight integration database dependence additional application semantics argue gain performance due optimizing network synchronization outweigh gains obtained parallelization transaction processing 
transparent synchronous replication scheme validate hypothesis identifies synchronization module main performance bottleneck synchronous replication scheme develop evaluate complete architecture replicates postgres database system 
architecture overview architecture provides transparent peer replication supporting diverse application semantics 
core system synchronization algorithm benchmarked previous section 
peer replication symmetric approach replicas guaranteed invoke set actions order 
approach requires state database determined current state action guarantees replicas reach database state 
section generic term action refer non interactive deterministic multi operation database transaction state database execution new action defined exclusively state database execution action action 
database transaction multi operation sql transaction packed action replication engine 
model user abort transactions submitted system initiation 
transactions assumed deterministic abort operation transaction boundaries executed replicas dictated database state transaction time execution 
section discuss architecture support generic transaction types 
group communication replication server application send receive multicast deliver request apply reply network db group communication replication server application safe order messages membership persistent order actions db unreliable packets group communication replication server application send receive multicast deliver request apply reply network db group communication replication server application safe order messages membership persistent order actions db unreliable packets synchronous database replication architecture sections refer read transactions queries non read transactions contain update operations referred updates 
architecture structured layers replication server group communication toolkit 
replication servers maintains private copy database 
client application requests action replication servers 
replication servers agree order actions performed replicated database 
soon replication server knows final order action applies action database execute commit 
replication server initiated action returns database reply client application 
replication servers group communication toolkit disseminate actions servers group help reach agreement final global order set actions 
typical operation application submits request replication server server logically multicasts message containing action group communication 
local group communication toolkit sends message network 
currently connected group communication daemons eventually receives message delivers message order replication servers 
group communication toolkit provides multicast membership services extended virtual synchrony model 
particularly interested safe delivery property model 
similarly current postgres approach chose spread supporting group communication system 
group communication toolkit overcomes message omission faults notifies replication server changes membership currently connected servers 
notifications correspond server crashes recoveries network partitions re merges 
notified membership change group communication layer replication servers exchange information actions sent membership change 
exchange information ensures action known member currently connected servers known 
knowledge final order actions shared currently connected servers 
consequence exchange completed state database connected servers identical 
cost synchronization spread replication engine semantics optimizer postgres interceptor postgres postgres replication server spread replication engine semantics optimizer postgres interceptor replication engine semantics optimizer postgres interceptor postgres postgres replication server transparent postgres replication architecture amounts message exchange connected servers plus retransmission updates connected server connected server 
course site disconnected extended period time cient transfer current snapshot 
consistency system presence network partitions server crashes recoveries guaranteed quorum system uniquely identifies connected components primary component system 
updates continue committed primary component components continue remain active answer queries consistently outdated 
advanced replication systems support peer peer environment address possibility conflicts di erent replicas 
architecture eliminates problem conflicts updates invoked order replicas 
course basic form model excludes possibility concurrently executing updates replica 
restriction inherent completely generic solution assume knowledge application semantics rely application resolve potential conflicts 
latency throughput system updates obviously highly dependent performance group communication safe delivery service 
queries sent network answered immediately local database 
important property architecture achieves transparency allows replicating database modifying existing database manager applications accessing database 
architecture require extending database api implemented directly database part standard database access layer odbc jdbc 
presents non replicated database system postgres database manager 
presents building blocks implementation replicating postgres database system 
building blocks include replication server spread group communication toolkit 
database clients see system aware replication access database replication server 
similarly instance examples quorum systems include majority dynamic linear voting database manager sees local replication server client 
replication server consists independent modules provide database integration consistency services 
include replication engine includes replication logic synchronizer algorithm applied database application 
engine maintains consistent state recover wide range network server failures 
replication engine algorithm :10.1.1.16.3690
semantics optimizer decide replicate transactions apply application semantics available actual content transaction replica primary component 
database specific interceptor interfaces replication engine dbms clientserver protocol 
proof concept replicate postgres created postgres specific interceptor 
existing applications transparently interceptor layer provide interface identical postgres interface postgres database server sees interceptor regular client 
database need modified applications 
similar interceptor created databases 
semantics optimizer semantics optimizer provides important contribution ability system support various application requirements performance 
level sophistication semantics optimizer incorporates degree integration database system determine amount additional optimizations replication system take advantage concurrent transaction execution data partitioning 
purpose detail integration achieved outline basic variations standard implementation illustrate flexibility architecture 
strictest model consistency updates applied database primary component global consistent persistent order action determined 
read actions queries need replicated 
query answered immediately local database update pending generated client 
significant performance improvement achieved system distinguishes queries actions update database 
purpose postgres prototype built semantics optimizer implements basic sql parser identifies queries actions 
replica handling query part primary component guarantee answer local database reflects current state system determined primary component 
applications may require updated information prefer block information available may content outdated information prior consistent state weak consistency preferring receive immediate response 
system allow client specify required semantics individually connecting system 
system support specification action require client aware replication service 
addition strict consistency semantics standard weak consistency implementation supports limited types consistency requirements delay updates cancel actions names refer execution updates actions non primary component 
delay updates semantics transactions update database ordered locally applied database global order determined 
client blocked continue submitting updates querying local database needs aware responses queries may incorporate ect previous updates 
cancel actions semantics client instructs semantics optimizer immediately abort actions issued non primary component 
specification method polling availability primary component client perspective 
decisions semantics optimizer semantic specifications client system setup provided 
examples demonstrate semantics optimizer determines path action enters replication server 
interceptor reads action client passes semantics optimizer 
optimizer detects action query desired semantics current connectivity replica decides send action replication engine send directly database immediate processing cancel altogether 
action sent replication engine semantics optimizer involved decision process action ordered 
applications may request action optimistically applied database action locally ordered 
happen application knows update semantics commutative order important application willing resolve possible inconsistencies may arise result conflict 
barring cases action applied database globally ordered 
design tradeo design perspective distinguish possible approaches architecture replicated database 
opted black box approach assume knowledge internal structure database system application semantics 
flexibility architecture enables replication system support heterogeneous replication di erent database managers di erent vendors replicate logical database 
contrast white box approach integrate replication mechanism database attempting exploit powerful mechanisms concurrency control conflict resolution implemented inside database price losing transparency 
middle way gray box approach assumes database system enhanced providing additional primitives outside include replication mechanism inside database 
exploits data partitioning common databases assuming application provide information conflict classes addressed transaction 
argue design allow basic form concurrent transaction execution doesn su er performance drawback uses cient synchronization algorithm 
highly concurrent synchronous replication system overcome fundamental cost global synchronization limited performance synchronization module 
presentation model mention replication architecture assumes possibly multi operation transaction deterministic encapsulated action removing possibility executing normal interactive transactions 
assumption relaxed certain degree 
allow example transaction execute deterministic procedure specified body transaction depends solely current state database 
transactions called active transactions 
help active transactions mimic interactive transactions user starts transaction reads data user level interactive decision regarding updates 
transactions simulated help actions model 
action contains query part transaction 
second action active action encapsulates updates dictated user checks values data read action number replicas actions second upd upd upd upd upd lan postgres throughput varying number replicas number clients replicas actions second upd upd upd upd upd lan throughput valid 
valid second action aborted transaction aborted traditional sense 
note server aborts servers abort trans action apply identical deterministic rule identical state database guaranteed algorithm 
prototype performance evaluation evaluated performance postgres replication prototype environments described section 
order better understand context results measured throughput single non replicated database sustain single serialized stream transactions 
computers local area experiments perform non replicated postgres database approximately update transactions read transactions second defined 
computers wide area experiment perform non replicated postgres database approximately update transactions read transactions second defined 
experiments run postgresql version standard installations 
order facilitate comparisons database experiment setup similar introduced 
database consists tables tuples 
table attributes integers character string float date 
tuple size slightly bytes yields database size mb 
transactions contain queries updates order simplify analysis impact poses system 
control percentage update versus query transactions experiment 
action experiments types described table randomly selected table value id randomly selected number update table set attr int attr int attr id random select avg float attr sum float attr table experiment postgres database avoid side ects previous experiments 
client submits action update query time 
action completed client generate new action 
number clients replicas actions upd upd upd upd upd wan postgres throughput experiment tested scalability system number replicas database increases 
replica executes separate computer local client local area network 
shows separate experiments 
experiment uses di erent proportion updates queries 
update line shows disk bound performance system 
replicas added throughput system increases maximum updates second disks support reached updates second replication adds additional disk sync updates number replicas 
maximum reached system maintains stable throughput 
achieved update throughput overhead replication server disk syncs taken account matches potential number updates machine capable 
significant improvement number sustained actions second proportion queries updates increases attributed semantics optimizer executes query locally replication overhead 
maximum throughput entire system improves replica handle additional load queries 
throughput queries increases linearly reaching queries second replicas expected 
experiment fixes number replicas replica computer local area network 
number clients connected system increased evenly spread replicas 
sees small number clients produce maximum throughput updates 
reasons client transaction active time latency update limits number updates client produce second 
second replication server sync updates generated locally connected clients updates evenly distributed computers clients added 
throughput queries increases linearly clients reaching queries case flat database replica saturated 
wide area experiment conducted emulab measured throughput varying client set action mix 
system able achieve throughput close achieved local area network similar number replicas clients depicted 
latency update experiences experiment ms load reaches ms point system reaches maximum throughput updates second 
queries similarly lan test performance increases linearly number clients servers reach queries second 
results mixes expected 
postgres proof concept demonstrates architecture replicate database useful cient manner 
cient synchronization method previous solutions able sustain throughput rates su cient large number applications maintaining reasonably low response time wide area settings 
comparing results experiments notice significant improvement latency throughput attribute performance gain cient synchronization algorithm despite giving additional gains concurrent transaction execution 
transparent peer synchronous database replication architecture employs optimized update synchronization algorithm order improve performance system 
contrast existing techniques sacrifice performance gains attained parallelization transaction execution favor enhanced synchronization method real bottleneck synchronous replication system show viability approach practical experimentation 
improvements noticeable local area network especially wide area experiments 
furthermore synchronization engine build generic transparent solution adapted employed replication solutions integrated database exploit specific application information creating exciting new realm opportunities database replication 
abbadi skeen cristian 
cient fault tolerant algorithm replicated data management 
proceedings th acm sigact sigmod symposium principles database systems pages 
acm march 
abbadi toueg 
availability partitioned replicated databases 
proceedings th acm sigact sigmod symposium principles database systems pages 
acm march 
agarwal moser melliar smith 
totem multiple ring ordering topology maintenance protocol 
acm transactions computer systems may 
amir 
replication group communication partitioned network 
phd thesis hebrew university jerusalem jerusalem israel 
www cnds jhu edu publications yair phd ps 
amir stanton 
loss tolerant architecture protocol wide area group communication 
proceedings international conference dependable systems networks dsn pages june 
amir stanton 
spread wide area group communication system 
technical report cnds johns hopkins university center networking distributed systems 
aware fact database models employed di erent assumptions limitations method adapted order serve reasonable variety modern applications amir 
total order database replication 
proceedings international conference distributed computing systems icdcs pages vienna austria july 
ieee 

www net 
db 
www ibm com software data db 
emulab 
www emulab net 
gray neil shasha 
dangers replication solution 
proceedings international conference management data pages montreal canada june 
acm sigmod 
gray reuter 
transaction processing concepts techniques 
data management systems 
morgan kaufmann publishers san mateo ca usa 
hayden 
ensemble system 
phd thesis cornell university 
informix 
www informix com 
jajodia 
dynamic voting algorithms maintaining consistency replicated database 
acm transactions database systems 
jimenez peris martinez kemme alonso 
improving scalability fault tolerant database clusters 
proceedings international conference distributed computing systems icdcs pages 
ieee july 
keidar 
highly available paradigm consistent object replication 
master thesis institute computer science hebrew university jerusalem israel 
keidar dolev 
increasing resilience atomic commit additional cost 
symposium principles database systems pages 
keidar 
client server approach virtually synchronous group multicast specifications algorithms 
proceedings th ieee international conference distributed computing systems 
ieee april 
keidar sussman marzullo dolev 
client server oriented algorithm virtually synchronous group membership wans 
proceedings th ieee international conference distributed computing systems pages 
ieee april 
kemme alonso 
don lazy consistent postgres new way implement database replication 
proceedings th international conference large databases vldb cairo egypt sept 
kemme bartoli babaoglu 
online reconfiguration replicated databases group communication 
proceedings conference dependable systems networks goteborg sweden 
lamport 
part time parliament 
acm transactions computer systems may 
lamport 
private communication talk directions distributed computing june 
moser amir melliar smith agarwal 
extended virtual synchrony 
international conference distributed computing systems pages 
mysql 
www mysql com doc replication html 
oracle 
www oracle com 
martinez jimenez peris kemme alonso 
scalable replication database clusters 
proceedings th international symposium distributed computing disc 

sourceforge net 
postgres 
postgresql org project php 
postgresql 
www postgresql com 
spread 
www spread org 
sybase 
www sybase com 
van renesse birman ma eis 
horus flexible group communication system 
communications acm apr 

