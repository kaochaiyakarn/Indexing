centrum voor wiskunde en informatica software engineering coinductive counting weighted automata rutten report sen december software engineering cwi national research institute mathematics computer science 
sponsored netherlands organization scientific research nwo 
cwi founding member ercim european research consortium informatics mathematics 
cwi research theme oriented structure grouped clusters 
listed names clusters parentheses acronyms 
probability networks algorithms pna software engineering sen modelling analysis simulation mas information systems ins copyright stichting centrum voor wiskunde en informatica box gb amsterdam nl kruislaan sj amsterdam nl telephone telefax issn coinductive counting weighted automata rutten cwi box gb amsterdam netherlands email cwi nl url www cwi nl general methodology developed compute solution wide variety basic counting problems uniform way objects counted enumerated means infinite weighted automaton automaton reduced means quantitative notion stream bisimulation reduced automaton compute expression terms stream constants operators represents stream counts 
mathematics subject classification acm computing classification system keywords phrases coinduction coalgebra stream derivative di erential equation enumeration combinatorics counting weighted automaton note extended report appeared technical report sen 
report accepted publication journal automata languages combinatorics 
faculty mathematics computer science vrije universiteit de boelelaan hv amsterdam 
contents motivation basic facts stream calculus streams weighted automata aside splitting derivatives compositions natural numbers surjections counting probabilities bracketed words streams continued fractions bracketed words permutations set partitions special numbers discussion motivation trend combinatorial analysis started schools emphasis placed relations combinatorial structure algebraic structure generating functions 
years led formalizations addressing foundational question combinatorial structure 
specify 
relation specifications counting 
introduced jackson gj flajolet sedgewick fs fs joyal bll stanley sta sta 
add formal system list called method coinductive counting 
enumerative point view possible derive existing counting results new perspective 
illustrate method coinductive counting means example summarize motivation contents 
counting problem taken gkp 
male bees called female bees called queens 
born queen father queen born father mother queen 
levels pedigree drawn upside look follows see mother grandmother great 
number female ancestors level 
key idea coinductive counting tree enumerates female ancestors basis representation infinite stream 
containing answers 
tree turned automaton arrows indicate transitions queen states output states formally shall dealing weighted automata letter alphabet weights reals 
stream behaviour automata defined coinductively expressed terms transition sequences 
automaton number encoded number paths length leading initial topmost state output queen state sequences queens level translated original counting problem question streams representation automata entering coinductive world stream calculus rut 
crucial ingredient stream calculus notion stream bisimulation help automaton simplified identifying equivalent states follows 
state bisimulation equivalent state queen state equivalent state state automaton intuitively queen state state transition behaviour take transitions states respectively equivalent 
similarly states transition 
consequence state new automaton equivalent representation stream answers corresponds number paths length leading case output state classical convenient way capture infinite sequences means single expression generating functions generally formal power series 
stream calculus closed expression infinite stream answers represented state easily defined coinductively see section formal computation yielding generating functions stream expression encodes numbers turn fibonacci numbers 
leave aside computation explicit formula consider fraction formulated terms stream constants operators satisfactory answer question 
summarizing distinguish phases procedure coinductive counting 
enumeration objects counted infinite tree shaped weighted automaton 

identification equivalent states bisimulation 

expression resulting stream counts terms stream constants operators 
shall see shortly entire approach essentially quantitative transitions output states generally labelled weights real numbers taken account notion stream bisimulation bisimulation 
enumerative point view new results contained feel method coinductive counting number contributions coinductive counting proves general flexible method totally di erent structures counted uniform simple way 
contrasted di erent methodologies discipline enumerative combinatorics context free languages tournament trees symbolic counting transfer matrix method 
coinductive counting leads number cases new representations existing solutions 
heart method consists reduction infinite weighted automata better structured finite ones bisimulation relations necessary identification states 
method provides illustration fundamental nature bisimulation mathematics notion originally stemming world modal logic semantics parallel programming languages 
method contains number elements new theory weighted automata 
notably infinite weighted automata usually attention play crucial role 
furthermore extensive notion stream derivative generalisation brzozowski notion input derivative go weighted automata streams vice versa 
method coinductive counting yields number beautifully structured infinite weighted automata sequences called special numbers 
overview sections summarize part stream calculus needed 
basic exercises coinductive counting treated sections dealing compositions natural numbers surjections counting probabilities respectively 
counting problem section deals bracketed words causes need develop theory 
section certain structured infinite weighted automata studied stream behaviour expressible means generalisations continued fractions 
results section section bracketed words section permutations section set partitions 
concluded discussion related 
basic facts stream calculus basic facts coinductive calculus streams repeating parts earlier formal power series streams rut rut 
concepts bisimulation coinduction may new readers number examples treated 
set streams defined ir ir 
individual streams denoted 
shall call initial value stream defined 
order conclude streams equal necessary su cient prove 
proved straightforward induction natural number prove show implies 
succinct description formula exist consequently induction simply applied 
shall take coalgebraic perspective ir exclusively proof principle coinduction formulated terms notion world universal coalgebra jr rut 
stream bisimulation bisimulation short relation ir ir ir equivalent notations 
union bisimulation relations called bisimilarity denoted 
theorem coinduction streams ir proof consider streams ir ir bisimulation ir containing pair 
bisimulation follows induction 
likewise denotes th derivative defined implies bisimulation 
proves note converse trivially holds ir bisimulation relation ir theorem gives rise surprisingly powerful proof principle called coinduction order prove equality streams su cient establish existence bisimulation relation ir ir shall see examples coinductive proofs follows moment rut contains detail 
coinductive definitions phrased terms derivatives initial values called behavioural di erential equations ir denote constant stream 
context clear real number stream intended 
constant stream plays role formal variable 
note 
shall operators streams defined means behavioural di erential equation behavioural di erential equation initial value name sum convolution product inverse shu product shu inverse writing shall silently assume 
note definition read stream similarly definition read stream 
usual shall write 
conventions unique existence solution equations ultimately due fact combination operations initial value stream derivative ir ir ir constitutes final coalgebra structure set streams 
formally existence unique solution follows rut thm deals large family systems behavioural di erential equations generalising 
fact systems behavioural di erential equations shall encounter shown unique solution application theorem 
format definitions non standard reader invited consult rut comparison definitions equivalent traditional ones shu product 
bottom line definitions behavioural di erential equations formulated terms initial values derivatives enable give proofs coinduction amount construction bisimulation relations characterized terms initial values derivatives 
shall freely various basic properties stream operators sum product inverse shu 
note derivatives convolution product inverse di erent classical analysis 
time derivatives shu product inverse familiar formulae 
refer explicitly rut source identities streams operators proved 
proof coinduction proof principle theorem uses induction construction bisimulation pair general induction 
th element streams involved looks 
bisimulation relations constructed simply closing set derivatives checking initial values agree 
point bisimulation relations trying prove prove stronger statement pairs examples identity follows coinduction fact bisimulation ir show singleton set bisimulation proves behavioural di erential equations 
similarly order prove su ces show bisimulation ir follows order appreciate strength coinduction example reader invited prove identity coinduction possibly formula recall 
proof coinduction follows fact bisimulation immediate consequence basic properties operators involved notably ir ir analytical stream taylor coe cients defined coinductively behavioural di erential equation ir cf 
pe behavioural di erential equation initial value name df tay ser es df denotes analytical derivative function 
readily check defines df dx dx 
identity sin proof coinduction simply consists observation relation sin cos sin cos bisimulation relation ir observation readily proved facts immediate consequences defining behavioural di erential equations convolution product inverse 
mentioned large classes behavioural di erential equations existence unique solution immediate consequence fact ir final coalgebra 
insight necessarily provide information solution looks 
fortunately compute relatively simple behavioural di erential equations explicit called closed form solution expression build stream constants operators 
main tool obtaining closed form simple useful fundamental theorem rut streams ir theorem expresses obtained initial value derivative 
note multiplication considered type stream integration 
order illustrate theorem consider stream defined behavioural di erential equation 
clearly defines stream 
compute succinct expression implies stream number obtained repeatedly computing derivatives identity writing usual easily prove taylor expansion stream note absence factorial coe cients 
operation infinite sum defined generalising definition binary sum 
example yields 
worthwhile note stream calculus equalities formal identities 
contrasted instance generating functions represent encode streams 
mild generalisation notion bisimulation easier give coinductive proofs 
bisimulation relation ir ir ir exist notion bisimulation strengthening coinduction proof principle called coinduction bisimulation typical example consider streams bisimulation note follows coinduction 
shall encounter notion 
stream called rational defined constant streams sum convolution product convolution inverse 
typical example 
rational streams closed applications shu product closed shu inverse 
typical example non rational stream 
streams weighted automata stream conveniently represented means weighted automaton consisting generally infinite set states output function ir transition function ir set contains functions ir finite support finite 
output function assigns state ir 
transition function assigns state function ir specifies state 
thought weight multiplicity transition occurs 
notation denotes denotes shall simply write case called output state 
pictures usually include non zero output values arrows non zero label 
stream behaviour ir state weighted automaton defined equivalent ways 
formula formula computes th element weighted count number paths transition sequences length start state state non zero output 
precisely aspect counting paths weighted automata suitable representation counting problems general 
time formula yield compact representations suited actual reasoning 
shall benefit coinductive calculus streams sketched 
specifically consider state weighted automaton set states 
stream behaviour ir state defined behavioural di erential equation system behavioural di erential equations state di erential equation initial value unique existence solution system equations immediate consequence rut thm 
follows fundamental theorem section system behavioural di erential equations equivalent system equations automaton state space finite finite system equations solved familiar algebraic way yielding rational streams solution 
di cult prove equivalence definition formula hand definition means behavioural di erential equations 
see rut prop 
formal proof 
example stream behaviour weighted automaton consider automaton defined picture occurred counting example section 
stream represented state computed ways 
formula finds weights number paths length state non zero output yielding 
second definition yielding aside splitting derivatives explained needed formulation solution combinatorial counting problems coinductive manner 
point turning actual subject 
technically speaking play role follows provide explanation close relationship streams weighted automata fundamental importance notion stream derivative 
section explained go automata streams 
converse possible procedure called splitting derivatives shall explain means small example 
consider stream obtained behaviour state automaton section 
computing repeated derivatives find 
take expressions states automaton transitions determined derivatives fact derivative consists sum define transitions summands 
fact determines output state 
coinductive definition stream behaviour weighted automata previous section find behaviour state obtained automaton exactly stream similarly 
course general di erent ways splitting derivative yielding di erent equivalent weighted automata representations stream 
certain classes streams procedure described systematic way cf 
rut rut 
example class rational streams splitting derivatives gives rise minimal finite weighted automata representations 
interestingly splitting derivatives applied streams rational gives rise infinite structured weighted automata representations 
point illustrated example repeated afore mentioned 
consider stream defined behavioural di erential equation di erential equation initial value stream called tangent numbers taylor coe cients tangent function tan 
recall defined shu product times 
little bit basic stream calculus derivative stream computed follows di erential equation gives rise automaton state labelled transitions splitting derivative summands transition included symmetry output state initial value 
infinite pretty automaton representation stream tangent numbers constructed computing splitting stream derivatives defining behavioural di erential equation 
shall encounter automaton outcome coinductive counting exercises 
compositions natural numbers composition natural number sequence natural numbers whatis number compositions 
equivalently stream counts 
problem solved coinductively going phases mentioned 
enumeration automaton enumerates compositions natural numbers follows pictures show levels understood infinite automaton automaton picture formally described defining state set output function ir ando transition function ir defined 
denotes concatenation word letter word 
follows shall automata usually pictures formal strictly necessary 
natural number 
correspondence paths length starting topmost initial state hand compositions natural number situated th level automaton 
consequence total number compositions equal total number paths length starting initial state 
follows formula section stream behaviour initial state equals stream 
identification identify states possible defining bisimulation streams represented infinite weighted automaton repeated left tiny state automaton right superscripts added states automaton left indicate state automaton right related 
explicitly precisely picture suggests definition relation ir ir follows relating streams represented stream behaviour states automaton left streams represented states right 
order show bisimulation note initial values related pairs match words 
check derivatives related natural numbers component related matching 
proves bisimulation 
follows coinduction 
expression easily compute closed expression system equations consisting ands yielding stream readily proved equal stream announced shall deal analysis finding closed formulae individual numbers worthwhile emphasizing quantitative aspect notion bisimulation fact state original weighted automaton labelled non empty word take transitions similar states reflected labelled transition 
surjections natural number number surjections set set defining 
shall see answer generalized surjections set fixed arbitrary 
enumeration denote function means word 
automaton enumerates level functions note states labelled word representing surjection containing defined output states 
note restricted picture levels automaton transitions included lack space 
follows initial state represents stream 
answers interested 
identification automaton simplified identifying states labelled words number di erent symbols indicated superscripts precisely streams represented superscripted states related stream represented state automaton means relation ir ir defined follows occasion denotes number di erent symbols contained itis straightforward check bisimulation follows coinduction 
expression stream behaviour state automaton determined system equations solving system equations finds easily generalised 
arbitrary fixed number surjections set set 
stream counts nx equality proved basic stream calculus 
counting probabilities consider necessarily fair coin probability producing head probability producing tail 
probability getting flipping coin times sequence heads tails length occurrence consecutive heads outcomes required heads 
hope reader su ciently experienced coinductive counting able supply details left succinct presentation solution 
enumeration weighted automaton describing possible scenarios hh ht th 
tt hth 
thh tht tth 
ttt states labelled sequence heads output states transitions 
stream 
counts represented initial state thatis 
identification states identified number final heads hh ht th tt hth thh tht tth ttt yielding automaton precisely prove coinduction 
expression stream behaviour easily computed qx bracketed words far identification phase coinductive counting exercises resulted finite automaton yielding rational stream 
example stream counts longer rational algebraic 
consider letter alphabet consisting left right bracket 
number bracketed words alphabet length 
enumeration output states level automaton correspond precisely words stream 
counts represented initial state 
identification identify states number left brackets contain matching right bracket yields structured infinite automaton prove coinduction 
expression stream behaviour automaton infinite system equations immediately obvious infinite system equations solved 
trying solve shall section develop general results directly infinite automata type 
discussion solution problem postponed section 
streams continued fractions section study stream behaviour infinite weighted automata type labels output values arbitrary real numbers 
labels fori fori pronounced level 
stream behaviour automaton expressed means generalised continued fraction deal full generality treat special cases particularly relevant counting problems come 
case concerns situation output values output value state may arbitrary convenience chosen theorem stream behaviour state automaton continued fraction 
proof sense continued fraction denoted infinite expression 
formally defined follows 
streams unique solutions system behavioural di erential equations di erential equation initial value fundamental theorem follows 
infinite continued fraction theorem simply read suggestive notation show consider relation streams ir streams defined bisimulation relation ir follows coinduction 
second special case automaton section assume downward transitions 
contrast automaton theorem states may non trivial output value ir theorem stream behaviour state upward continued fraction 
proof omitted 
lines proof theorem 
return automaton section general theorem stream behaviour state crazy expression consists nested continued fractions growing upward downward theorem proved manner previous theorems 
bracketed words return problem section compute closed expression stream bracketed words length alphabet 
addition shall look variation problem counting bracketed words consisting pairs matching brackets 
section automaton representation stream counts application theorem yields continued fraction 
regular structure fraction possible come succinct expression 
easy see cf 
proof theorem 
implies solution quadratic equation order solve need square root operator streams 
usual stream calculus definition means behavioural di erential equation 
streams defined unique stream satisfying di erential equation behavioural di erential equation initial value square root real number 
operator quadratic equations solved way analysis see rut details 
yields final outcome stream counts bracketed words equals stream 
having catalan numbers positions 
various ways enumerate structures counted means di erent automata leads new ways expressing stream counts 
example tackle counting problem bracketed words slightly di erent form number bracketed words consisting matching pairs opening closing bracket 
enumeration way enumerating words 
state labelled word dots considered output state underlined children word dots children arise replacing left dot di erent ways 
kind grammar growth automaton describing state children look contain dots 
identification states identified number dots contain yielding automaton expression find expressions stream answers 

catalan numbers 
equality follows formula 
second third equalities obtained similarly problem bracketed words section 
permutations permutation bijection represented corresponding sequence images 
common equivalent representation shall describes permutation unique sequence cycles permutation composed 
instance permutation represented sequence 
cycle denotes permutation defined start trivial question number permutations set defining automaton enumerates permutations listing possible sequences cycles state level represents permutation set output state 
transition state level adding number existing cycles adding new cycle 
states level precisely transitions transition second type transitions total 
explains structure automaton time indicates states single level identified yielding automaton applying formula andu obtain stream 
counts 
words 
di erent permutations set comes surprise 
chosen represent permutations sequences cycles automaton easily adapted deal various related counting problems 
straightforward variation keep track total number cycles permutation 
variable label transitions represent addition new cycle recall transitions label usual omitted identifying states level gives equivalent automaton formula applied yielding ux equality proved elementary stream calculus 
note formula generalises solution previous counting obtained stream considered having parameter 
encodes numbers counting permutations consisting cycles 
numbers known stirling numbers kind computed stream taylor coe cients powers 
treat formal variables bring multivariate stream calculus omitted 
way counting permutations keeping track number cycles yielding representation stirling numbers kind 
specifically permutations alternatively enumerated follows general pattern tree weighted automaton grown follows 
state node level numbers occur possibly number dots 
states dots output states representing completed permutations 
states dots represent permutations completed dots indicate places growth possible 
specifically dot successor states dot replaced andn respectively 
addition state level successors corresponding opening new cycle 
transitions new cycle opened labelled 
similarly second counting problem bracketed words section states identified number dots contain indicated superscripts identification equivalent states yields structured automaton formula applied resulting continued fraction ux ux 
second equality obtained combining second way counting permutations cycles 
obtained di erent expressions stirling numbers kind 
forgetting number cycles leads equalities 

moving question permutations called involutions 
return automaton section remove states ones consisting cycles states identified number cycles cycles contain indicated superscripts 
yielding automaton applying formula yields expression pretty omitted 
special case permutations consisting cycles enumeration involutions di erence states contain cycles longer output states 
corresponding reduced automaton looks formula pleasant expression stream answers 
question number permutations 
precisely permutations consisting cycles cycles xy 
automaton happens pruning tree automaton lists note states output states 
states cycle states cycle identified respectively leading automaton corresponding expression stream answers example section return representation permutations mentioned section 
permutation bijection represented corresponding sequence images 
referring representation permutation called alternating pretty answer odd natural number total number alternating permutations set putting 
enumeration odd alternating permutations general pattern tree grown follows 
dots indicate places growth possible 
dot level children vn dot replaced dots sides 
states identified number dots contain identification equivalent states automaton obtained note automaton stream answers represented minor variation formula get 
taylor tan equality follows fact reduced automaton precisely automaton section splitting derivatives stream taylor coe cients function tan 
set partitions series counting problems deals set partitions counted various ways 
number ways set partitioned subsets called bell numbers 
automaton enumerates level partitions states identified number subsets corresponding partition indicated superscripts 
identifying usual equivalent states gives reduced automaton formula expression obtained stream answers easy keep track explicitly number subsets partition labelling transitions new subset added partition fixed real number variable identification done yielding reduced automaton corresponding expression stream answers ux stream encodes numbers partitioning set subsets 
numbers called stirling numbers second kind 
note previous case back 
seen various examples di erent way enumeration di erent representation structures counted leads di erent equivalent expression solution counting problem 
phenomenon illustrated alternative solution problem counting set partitions 
automaton contains level partitions set output states addition level contains various intermediate states containing dots indicate possibilities growth 


general pattern follows dot occurring node level children obtained replacing dot dot allowing growth addition node level children obtained opening new subset containing presence dot previous examples representations involving dots states identified number dots contain 

yielding reduced automaton application formula corresponding expression stream answers 
equality obtained identifying second solution problem 
possible keep track number subsets partition 
omitting enumerating automaton resulting reduced automaton corresponding expression stream answers ux ux ux 
special numbers theorem summarizes representations means reduced weighted automaton various sequences called special numbers encountered preceding sections 
clearly shows representations great structural similarity 
theorem table stream numbers mentioned right represented state automaton left stream tangent numbers represented state discussion single counting problem dealt exist literature far detailed complete treatments see mentioned 
contribution method coinductive counting lies fact solves di erent counting problems way structures counted enumerated infinite tree shaped weighted automata 
automata reduced means bisimulations 
resulting reduced automata expression stream answers derived means elementary stream calculus 
traditionally situation respect points follows di erent mathematical structures representations objects including weighted graphs sets walks various kinds trees formal languages regular context free automata transfer matrices 
know systematic way sense specific notion reducing representations smaller better structured ones 
stream calculus rut rut viewed formalisation generalisation generating functions formal power series cf 
rut detailed comparison 
technically novelty coinductive counting method systematic infinite weighted automata received literature automata theory sofar attention ii quantitative notion stream bisimulation iii consequent coinductive calculus streams search closed expression outcome 
presently proposed method coinductive counting far restricted scope mentioned 
notably classical analytical methods 
methods point methods stops obtained stream expressions suited analytical treatment 
continued fractions inspired fla see gj chapter 
formal treatment continued fractions somewhat easier setting coinductive stream calculus 
combinatorial interpretations various fractions discussed automaton represents fibonacci numbers catalan numbers involutions tangent numbers stirling numbers st factorial numbers stirling numbers st factorial numbers stirling numbers nd bell numbers stirling numbers nd bell numbers representations special numbers simpler uniform 
basic weighted automata br 
sections fairly straightforwardly generalised streams called multivariate streams generally formal power series non commutative variables coe cients arbitrary semiring 
obvious things done replacing inverse shu inverse star shu star 
worked rut rut 
mention briefly points research 
strength method counting enumeration minimization generality simplicity 
weakness ad hoc character way counted structures enumerated 
raises question exists systematic way enumeration possibly terms kind grammars tree growing 
grammars doubt closely related alternative approach counting structural properties expressed kind domain equation xt binary trees instance fs bll 
florence school related point 
ii issue minimization weighted automata course touched 
examples usually obvious minimized candidate systematic algorithmic analysis welcome 
iii dealt univariate case 
worthwhile develop multivariate case detail 
iv case section distinguished rational algebraic streams 
notably flajolet fs said classification streams generating functions analytical terms 
looking various weighted automata encountered sofar distinguish types finite automata correspond rational streams 
infinite automata regular sense having finitely states locally di erent transition behaviour correspond algebraic streams see examples bracketed words 
infinite automata regular afore mentioned sense considered regular criterion instance involving nicely increasing sequences labels examples 
type automata streams represent deserve study 
counting exercises reported call heavy weighted automata turned extremely practical 
mind automata transitions labelled complete stream expressions real numbers 
due manfred droste heiko vogler anonymous referee corrections suggestions 
bll bergeron 
combinatorial species tree structures volume encyclopedia mathematics applications 
cambridge university press 

eco methodology enumeration combinatorial objects 
journal di erence equations applications 
br berstel reutenauer 
rational series languages volume monographs theoretical computer science 
springer verlag 
fla flajolet 
combinatorial aspects continued fractions 
discrete mathematics 
fs flajolet sedgewick 
average case analysis algorithms counting generating functions 
research report inria rocquencourt 
pages 
fs flajolet sedgewick 
analytical combinatorics functional equations rational algebraic functions 
research report inria rocquencourt 
pages 
gj jackson 
combinatorial enumeration 
john wiley sons 
gkp graham knuth patashnik 
concrete mathematics second edition 
addison wesley 
jr bart jacobs jan rutten 
tutorial algebras induction 
bulletin eatcs 
available url www cwi nl 
pe pavlovic 
calculus coinductive form 
proceedings th annual ieee symposium logic computer science pages 
ieee computer society press 
rut rutten 
automata power series coinduction input derivatives seriously extended 
report sen cwi 
available url www cwi nl 
proceedings icalp lncs pp 

rut rutten 
behavioural di erential equations coinductive calculus streams automata power series 
report sen cwi 
available url www cwi nl 
appear theoretical computer science 
rut rutten 
universal coalgebra theory systems 
theoretical computer science 
rut rutten 
elements stream calculus extensive exercise coinduction 
stephen brooks michael mislove editors proceedings mfps seventeenth conference mathematical foundations programming semantics volume electronic notes theoretical computer science pages 
elsevier science publishers 
sta stanley 
enumerative combinatorics volume studies advanced mathematics 
cambridge university press 
sta stanley 
enumerative combinatorics ii volume studies advanced mathematics 
cambridge university press 

