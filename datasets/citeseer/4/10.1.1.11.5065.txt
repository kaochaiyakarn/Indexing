sisc complete scheme interpreter java scott miller th january examine design sisc fully rs compliant interpreter functional language scheme proper rst class continuations 
noteworthy components interpreter described discussion implementation details related interpretation optimizations cient object oriented host language java 
contents rationale proper tail recursion 
continuations 
interpreter expression compilation 
environments 
associative environments 
lexical environments 
evaluation 
execution 
expressions 
procedures 
built procedures 
closures 
continuations 
proper tail recursion 
continuations 
error handling 
user view 
implementation 
datatypes symbols 
numbers 
multiple values 
java pros cons object oriented bene ts 
optimizations call frame recycling 
expression recycling 
immediate fast tracking 
extensibility performance comparison sisc java interpreter scheme 
di ers java scheme interpreters attempts sacri ce simplicity evaluation model order provide complete interpretation scheme 
particular complete rs scheme standard supported sisc sacri cing speed sisc uses heap approach control context management stack approach procedure call mechanism host language native stack maintain continuations full control language continuations 
reason sisc able provide rst class continuations de ned standard just subset continuations escaping continuations provided stack interpreters java 
thorough discussion heap stack interpreters refer 
sisc engine able provide support core language features 
addition portable syntax case macro expander sisc able provide hygienic macro support standard 
lexical environments sisc provide cient linear time lookups sets linear respect lexical depth lexically referenced variables 
top level global variable lookups sets constant time sisc predecessor stack interpreter named lightweight interpreter scheme code second interpreter scheme code 
exceptions standard sisc violations standard 
particular sisc allows syntax standard 
example sisc require vector constants quoted extension common implementations 
inlined storage location pointers store free variable syntactic de nitions 
sisc speed quite competitive respect java scheme interpreters 
sisc compiles scheme expressions fully expanded forms stores object oriented internal representation programs typically perform signi cantly faster interpreters evaluate place 
compare sisc popular scheme interpreters publicly available benchmarks 
sisc implements full number stack support xed arbitrary precision integers arbitrary precision oating point numbers rational numbers arbitrary precision components complex numbers arbitrary precision oating point components 
number forms printed correctly rs standard mathematical operations function correctly forms 
rationale creating interpreter scheme question design goals raised 
implementations scheme strive prove truly useful real world chez mit 
created teaching purposes drscheme 
designed toy implementations interesting irrelevant design goals silk scheme defun 
show broad range possibilities exibility scheme small elegant language 
implementations sacri ce important features meet goals 
right sacri ces 
frequently ignored requirements scheme standard proper tail recursion full rst class continuations 
proper tail recursion proper tail recursion just academic 
central pillars functional programming idea recursive problem solving 
ability functional languages encourage type problem solving greatest strength 
consequently programmers functional languages recursion solve problems ways ordinarily tasked iteration languages 
programmer assumes circumstances programs run regardless size data number loops recursive function 
broken non tail call optimization fundamental bene functional languages 
sisc realization proper tail recursion described section 
silk grown renamed 
execution model remains 
continuations continuations clear cut 
useful programs written aware existence 
inclusion language entity removes signi cant barrier producing programs need advanced control ow 
class continuations allow progamming constructs possible langages today threading routines engines exceptions requiring explicit language support features 
scheme syntax extension continuations scheme exible languages existence 
sisc realization rst class continuations described section 
interpreter expression compilation scheme expression evaluated compiled sisc internal expression representation 
put stock term compiling 
expressions merely parsed semantics turned internal representation sisc evaluation engine 
process entails syntactic expansion followed examination expression creation internal representation 
syntactic expansion accomplished portable macro expander package kent dybvig 
fully hygienic macro expander takes scheme lists representing expressions returns scheme lists representing fully expanded form 
expander implements algorithm described 
syntactic expansion core scheme expression types lambda quote define variable sets applications remain 
expression run compiler performs task examining scheme expression create number sisc expressions 
recognition expression types lambda define generation internal representations handle forms performed compile time 
consequently able realize substantial performance increase runtime longer examine expressions determine evaluate 
combined object oriented nature sisc expressions means apart dynamic method dispatch examination overhead list traversal string comparison necessary runtime 
downside lengthy expansion compilation occur expressions entered loaded 
due complexity macro expander incur signi cant overhead 
example load standard macro de nitions derived expressions library functions sisc churn away seconds startup unreasonable amount time wait scheme system start easily solved loading pre expanded compiled heap startup 
actual conversion scheme expressions sisc expressions worth describing detail small cases 
quoted expressions merely compile value values evaluate 
expressions constant tests eliminated selecting correct branch compile time 
optimization done eliminate unnecessary expressions unnecessary expressions ect context 
environments sisc types environments 
rst associative environments create foundation top level free variable 
second lexical environments support lexically scoped variable scheme programs 
associative environments associative environments store mapping symbol storage location 
storage locations represented array values 
compile time free variable translated sisc expression aware variable referencing 
addition expression contains set index value array 
initially set unset 
runtime free variable encountered value retrieved retrieving value storage location associated 
notice lookup symbol required operation completes constant time small overhead memory indirect 
storage location unset initially set determined querying variable name 
unbound runtime error signaled 
bound set set uses require lookup environment 
note lookups top level environment constant time xed overhead mappings stored hashtable 
penalty greater lookup calculate hash code indirect table fetch storage location indirect storage location retrieve value 
fortunately happens free variable encountered runtime 
setting free variable equally straightforward 
contain correct variable 
free variable set merely changes value set environment 
mechanism determine set unresolved 
storage location created created runtime depending platform jvm hardware course 
new entry binding variable new storage location placed known environment 
lexical environments lexical resolved compile time 
involves compiler keeping environment bound variables 
compiler traverses code builds lexical environment consists number formal parameters pointers parent rib 
example processing expression lambda lambda rib structure compiler compiler encounters variable looks variable lexical environment keeping track number crosses 
variable cross nd variable position rib 
produces lexical 
variable cross rib nd variable position rib 
produces lexical 
lexical depth lexical position 
nd variable lexical environment free variable generates semantics described section 
runtime application closures modify active lexical environment creating new lexical environment values formals lambda pointer parent lexical environment 
perform lexical lexical set simply follows parent pointer current lexical environment decrease depth depth zero sets lexical environment values point position eld 
example scheme expression lexical environment active lexical encountered representing variable parent pointers followed depth zero 
depth started zero pointers followed 
set rib position retrieve value 
lexical encountered representing parent pointers followed depth zero 
parent pointer followed 
set rib position retrieve value 
evaluation heap interpreter sisc virtual machine provides registers allocates call frames store state volatile registers built 
registers 
expression holds expression evaluate 

accumulator acc holds result previously evaluated expression 

value rib vlr holds evaluated arguments function application 

lexical environment env holds lexical environment active expression 

failure continuation fk holds active failure continuation invoked error occurs 

stack register stk topmost call frame 
call frames store volatile registers may change due execution expression 
precise vlr env fk stk volatile registers stored call frame 
call frame essentially data structure representation stack 
explicit control stack call frames treat call frame continuation point execution expression 
take care design expressions immutable capturing continuation matter returning active call frame packaging behaves procedure scheme 
execution interpreter main loop attempt repeatedly evaluate register long expression 
register unset mainloop attempt pop call frame stack may ll cause interpreter continue 
call frames pushed stack various expressions evaluated described section 
point register stk register empty main loop terminate returning contents acc register result evaluation entire expression 
expressions expressions de ned sisc evaluated identity produce expression 
intents purposes bit data processed sisc expression 
values example treated expressions evaluate 
interesting expressions course implement semantics scheme 
sisc expressions lie package sisc exprs fall categories expr expressions set registers process expression 
eval expressions post processing registers nish expr type 
distinction clear examine expression type detail 
ll start simplest expressions deal variable binding variable locations storing values storage locations 
lets examine generic evaluation expression 
generated compiler contain expressions pre post expression 
push post expression stack set expression register pre 
consequence result pre expression available accumulator post expression evaluated 
variable binding expressions place value top level variable accumulator 
variable unbound error raised 
look lexical variable see section place value accumulator 
free variable impossible lexical refer unbound variable lexical discovered compile time 
variable aren lexically scoped automatically compiled free variable 
expects evaluated value accumulator 
evaluated set top level variable value acc 
set value lexical variable value accumulator 
de de handles top level de nes sisc 
de constructed symbol evaluated creates top level binding provided symbol value accumulator 
control ow expressions control ow expressions include expressions handle 
evaluate expressions particular order return value result entire expression 
scheme expression simply created chaining number representing expression scheme 
post expression expression value entire expression 
expects value accumulator placed pre expression test expression scheme 
value non false place true expression 
value false place false expression accumulator 
way branches result entire expression 
function application function application handled pair coordination 
push stack push stack operator operand expressions set operand 
ll vlr values operand set operator 
control return conclude application operator operands 
expects evaluated operator accumulator values operand value rib 
apply operator operands entails determined operator see section 
interestingly singleton expression 
requires context instances application 
expressions expressions needed handle creation closures evaluation expression 
lambdaexp lambdaexp create closure capturing current lexical environment env register placing new closure accumulator 
lambdaexp compiled scheme lambda dot notation lambdaexp created ag set called nite arity 
ects lexical environment created closure applied 
expects nd value expression accumulator 
constructed pointer position value rib number expressions nal tail expression 
sets position value rib value accumulator expressions remain evaluated pushes stack value rib address arbitrary order 
expressions remain evaluated places tail expression 
produced evaluation call values expression 
expects single value multiple values object accumulator places values value rib 
places procedure accumulator sets 
result value accumulator arguments procedure 
procedures procedures di er slightly expressions sisc 
applied values value rib may cause additional expressions evaluated pushing additional call frames stack setting new expression 
classes procedures sisc 
built procedures built procedures procedures behavior determined native code sisc module see section 
built procedure call module procedure id integer speci es procedure applied 
sisc primitives de ned built procedures host module sisc primitives 
closures closures user de ned procedures generated lambda expressions specifically lambdaexp described section 
consist closed lexical environment body expression 
applied lexical bindings values vlr 
cient operation entails creating new lexical environment current environment parent copy vlr values 
closure nite arity closure see section lexical environment contain values required parameters list containing optional parameters value position 
env set new lexical environment set body expression 
continuations continuations simply call frames sisc nal procedure class 
continuation captured call frames stack clone value level mark frame captured see section reasoning 
call frame applied frame registers replace interpreter registers values vlr placed accumulator 
value multiple values placed acc 
see section proper tail recursion proper tail recursion comes easily side ect heap register architecture 
relevant expressions implemented knowledge sub expressions tail position 
take example expression tree created expression aware pre expression non tail position post expression tail position 
example non tail position pushes stack sets evaluated stack popped nds 
prevent semantic errors due side ects operands application 
fact recognizes immediate simply places accumulator 
aware consequent alternate expression tail position 
case stack pushes necessary 
appropriate expression case put control returns main loop 
expressions behave properly built numerous chained 
naturally post expression behave tail position entire correct tail semantics 
closure applications closure expression bind parameters new lexical environment set body pushing stack 
applications somewhat complicated application may may tail position 
compile time determined tail non tail position expression contains 
non tail position current continuation saved prevent corrupting value rib 
tail position save done current registers opted 
continuations proper tail recursion rst class continuations elegant consequence heap register architecture 
point evaluation expression stk register represents continuation active expression 
implement rst class continuations sisc need capture stk register ensure contents stack modi ed 
captured vlr cloned volatile expressions locked stk parent captured 
prevents evaluation modifying vlr altering results applying continuation 
see section brief discussion behave procedures details applying continuation 
error handling sisc bit unique comes errors exceptions processed 
scheme standard specify method establish error handling program level 
various implementations error handling scheme implementations 
chez scheme example allows user set error handler procedure takes arguments standard error function 
de ned error handler overrides default handler 
problem mechanism user override active error handler ability call previously de ned error handler explicitly code ability call previous handler storing rede ning new procedure 
solution inelegant allow user write modular code handles errors transparently raise errors earlier handlers knowledge existence 
user view sisc error handling loosely modeled java 
user de ne local error handler called error raised subexpression evaluated 
similar java try catch mechanism exception handling 
sisc interface error handling de ned follows procedure call failure continuation thunk failure handler procedure call fc thunk failure handler thunk argument procedure containing expression evaluated failure handler argument procedure 
thunk evaluated current continuation 
error raised evaluation failure handler called parameters string message error continuation active time error failure continuation active call fc site 
applying failure continuation error message rst arguments produce results having installed new failure continuation 
examples call fc lambda error bad things happened lambda message error continuation parent fk message error bad things happened string call fc lambda error bad things happened lambda message error continuation parent fk parent fk message error continuation error bad things happened error signaled call fc lambda car lambda message error continuation parent fk error continuation implementation sisc error model implemented failure continuation register fk call frame 
new error handler installed fk register set expression implements handler 
conceptually means stacks active point computation 
rst ordinary stack continuations 
second stack failure continuations 
error raised details error applied failure continuation 
failure continuation may rethrow error causes fk register applied thrown error details 
point failure continuation set null java fatal java exception terminates interpreter 
sisc read eval print loop written scheme uses mechanisms ensure scheme error escapes repl prevent catastrophic failure 
cases repl required may desirable interpreter throw uncaught error knowing calling java code handle error 
datatypes full range scheme values supported largely straightforward 
types symbols numbers implementation multiple values worth discussion 
symbols symbols stored java strings 
order provide pointer equivalence symbols scheme sisc keeps static memory maps string values symbol objects 
new symbol requested symbol table consulted symbol regenerated exists table 
equal 
equivalent symbols pointer eq 
equivalent 
allows java garbage collector reclaim unreachable symbols despite existence symbol table 
numbers full number stack supported class called quantity 
quantity class contains values number components 
quantity supports math operations including proper contagion types numbers fixed precision integers integer arbitrary precision integers decimal arbitrary precision oating point numbers rational ratios arbitrary precision numerators denominators complex complex numbers arbitrary precision oating point components sisc xed precision oating point numbers precision su xes little sense 
sisc treats su xes creates arbitrary precision oat expect 
new number generated goes simpli cation process 
complex numbers simpli ed decimal numbers imaginary component zero 
ratios reduced simplest form integers denominator 
integers reduced bit java integer 
likewise mathematical operators produce appropriate results 
example sqrt negative number produce complex result ows computations promoted transparently integers 
result full number stack works keep numbers simplest form cient computation sacri cing precision 
multiple values multiple values treated separate type sisc data values 
normal values multiple value object evaluated identity 
evaluation multiple values object implies values object single value context 
evaluation values object produces error 
special expression expression form capable receiving values object 
see section java pros cons writing scheme java gives number bene ts related ability structure interpreter object oriented methodologies 
status java garbage collected language means spared complexity doing heap management 
negatives introduced java selection heap interpreter 
particular instantiation costs created structures especially call frames signi cant 
address problem section 
addition oft criticism writing interpreter language interpreter java virtual machine 
advances just time compilers modern jvms cost small justify java advantages 
fact quantity implementations di erent precisions oating point numbers 
precision ags ignored 
sisc sqrt try produce exact results exact square numbers 
practical limitation doing 
object oriented bene ts object oriented language allows couple data behavior 
turns remarkably bene cial designing interpreter 
example expect value types printed certain ways 
know evaluation expression involves semantics expression values certain elds expression 
sisc java interpreters scheme choose java native types represent scheme values 
create explicit classes scheme value 
classes sisc expressions extend value class 
value class mandates subclasses implement display optionally write method producing output compatible display scheme compatible write 
expression class mandates subclasses implement eval method requires expression evaluate produce additional expressions values 
sisc values share eval method merely sets accumulator values evaluate 
value implements display method di erently producing appropriate human readable form value 
values implement write method write output value di ers display output 
write method unimplemented display 
expressions di erent semantics share common interface eval method 
aware semantics implemented eval method interpreter needn concern recognizing expression types 
merely calls eval expression register long expression 
rely method dispatch java take care rest 
bene simple elegant code 
similar approaches taken areas 
example call frames implemented class serves container saved registers procedure expression knows correctly apply continuation applied 
optimizations far described design implementation sisc strictly relates evaluating scheme code 
sisc respectable level performance considered favor stack implementation 
speed stack interpreters realized native stack represent control context 
consequently di cult impossible possible disadvantage know underlying method dispatch mechanism jvm 
dispatch slow interpreter su er 
fortunately desirable java developers dynamic method dispatch fast performance area receive considerable attention 
realize scheme rst class continuations entirety heap interpreters manage control context realize full semantics scheme continuations performance penalty 
sisc uses major optimizations minimize penalty ensure excellent performance presence rst class continuations 
call frame recycling primary source overhead sisc heap interpreters creation hundreds thousands call frames 
call frames live short duration freed case java eventually garbage collected 
relatively expensive cost call frame instantiation compared native stack operations incredible strain placed garbage collector reclaim memory call frame instantiation acts signi cant bottleneck performance 
sisc counter problem recycling call frames 
popped stack reclaim holding small number call frames time letting rest garbage collected 
call frame required check see old call frames re 
re assign elds old frame return 
keeping old frames possible able eliminate call frame instantiations place stress garbage collector reclaim old frames 
translate noticeable increase speed 
catch 
scheme allows continuations captured evaluation overwrite old call frames 
doing may invalidate previously captured call frame 
solve problem call frame boolean ag called captured ag 
call frame captured call cc mechanisms captured ag set call frame stack 
frame popped captured ag examined set may placed reclamation pool 
simply discarded 
java garbage collector frame memory may reclaimed unreachable 
frame reachable contents left intact continuations capturing frame behave properly 
fact possible stack interpreters implement real continuations stack tricks 
possible java impossible access control stack way exceptions 
exceptions allow program ow outward reason stack java interpreters scheme claim support escaping continuations 
compiling initial environment provides meaningful benchmark highlight optimization number instantiations number bytes allocated total call frame recycling call frames call frame recycling call frames expression recycling small source overhead cost instantiating number 
expression type instantiated argument procedure application 
recycle order continuations behave properly expression stack immutable 
call frames allow signi cant exibility moment expression captured continuation 
overwrite elds expression re stack instantiate new expression place stack 
expression caught continuation 
call frame tag expressions alter captured ag captured continuation 
long captured mutate elds re stack 
captured ag new expression stacked 
additional speed maintain pool similarly pool 
necessary generate pool checked rst 
immediate fast tracking memory management bottlenecks way primary source overhead evaluation arguments application function 
fortunately cases arguments procedure called immediates expression value determined evaluating expression 
immediates include values variable 
evaluate require lookup 
therefor includes logic fast track immediates 
evaluated list operands direction direction order operations unspeci ed 
long operand immediate fetches value places immediately vlr 
done operator 
additionally performs check 
non immediate placed register pushed handle result 
best case application immediate operands operator need single 
result evaluating simply set vlr lled values 
extensibility sisc allows native extension functionality addition sisc modules 
module simply java class initialization method provides access interpreter context 
typical module bind number builtin procedures top level environment 
due extensive object oriented nature sisc module may introduce new native procedures include class de nitions new types 
sisc modules exist providing bridging java language networking capabilities debugging touching sisc engine 
performance comparison compare performance sisc known java scheme interpreters silk gabriel lisp benchmarks available scheme 
tests completed error systems included numbers 
times milliseconds scheme system deriv destructive div iter sisc silk scheme system div rec fread tak total sisc silk scheme rare beast world programming languages 
languages implemented twice usually inventors language 
scheme contrast implemented dozens times number languages strengths weaknesses 
scheme java bit rocky start 
compilers scheme exist time complete 
interpreters rare designed speci goals mind silk example primary design goal code size scripting java programs 
primary goals run scheme programs building modern interpretation techniques adding object oriented programming styles sisc shows creating complete implementation scheme java possible 
see limiting design decisions order produce useful implementation language sacri ce completeness sake performance 
implementation models scheme 
kent dybvig 
university north carolina computer science technical report ph dissertation april 
syntactic abstraction scheme 
kent dybvig robert hieb carl bruggeman 
lisp symbolic computation pp 
december 
portable syntax case expander 
kent dybvig available ftp ftp cs indiana edu pub scheme repository code lang 
tar gz rs revised report algorithmic language scheme 
richard kelsey william clinger rees editors 
sisc sisc freely available program released simultaneously gnu general public license mozilla public license 
versions sisc sisc sourceforge net 
gabriel lisp benchmarks scheme 
available ftp ftp cs indiana edu pub scheme repository code lang gabriel scm tar gz 
