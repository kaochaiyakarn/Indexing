contracts higher order functions assertions play important role construction robust software 
programming languages dates back 
eiffel object oriented programming language adopted assertions developed design contract philosophy 
entire object oriented community recognizes value assertion contracts methods 
contrast languages higher order functions support assertion contracts 
predicates functions general undecidable specifying predicates appears meaningless 
functional languages community developed type systems statically approximate interesting predicates 
show support higher order function contracts theoretically founded practically viable manner 
specifically introduce con typed lambda calculus assertions higher order functions 
calculus models assertion monitoring system employ drscheme 
establish basic properties model type soundness illustrate usefulness contract checking examples drscheme code base 
believe development assertion system higherorder functions serves purposes 
hand system strong practical potential existing type systems simply express assertions programmers state 
hand inspection large base invariants may provide inspiration direction practical type system research 
categories subject descriptors general terms design languages reliability keywords contracts higher order functions behavioral specifications predicate typing software reliability partly conducted rice university houston tx 
address university chicago th street chicago il permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp october pittsburgh pennsylvania usa 
copyright acm robert bruce findler matthias felleisen northeastern university college computer science boston massachusetts usa dynamically enforced pre post condition contracts widely procedural object oriented languages 
rosenblum shown example contracts great practical value improving robustness systems procedural languages 
eiffel developed entire philosophy system design contracts design contract 
java support contracts requested extensions 
exception higher order languages ignored assertion style contracts 
exception bigloo scheme programmers write order type constraints procedures 
constraints generate efficient code compiler prove correct turned runtime checks compiler prove correct 
order procedural contracts simple interpretation 
consider contract written ml syntax int int val rec states argument int greater produces int 
enforce contract contract compiler inserts code check proper range called result proper range returns 
proper range caller blamed contractual violation 
symmetrically result proper range blame falls 
world detecting contractual violations assigning blame merely means checking appropriate predicates defined points program evaluation 
simple mechanism checking contracts generalize languages higher order functions 
consider contract int int int val rec proc 
contract domain states accepts int int functions apply ints larger 
turn functions produce ints 
contract range produce ints 
developer java sun com developer top html may contract matches domain contract accept functions stricter contracts int int val rec functions explicit contracts functions process external data read num int int val rec read num read nth entry file read num functions behavior depends context val rec dual purpose predicate global state 
long context properly established applies argument 
clearly algorithm statically determine proc matches contract possible dynamically check contract applied 
worse monitor applications proc occur body may pass proc function store global variable 
additionally higher order functions complicate blame assignment 
order functions blame assignment directly linked pre post condition violations 
pre condition violation fault caller post condition violation fault callee 
higher order world promises obligations tangled complex manner due arguments 
contract system higher order world 
key observation contract checker ensure argument meets contract called 
wait proc applied 
point ensure proc argument greater 
similarly proc returns ensure proc result range 
enforcing contracts manner ensures contract violation signaled soon contract checker establish contract violated 
contract checker provides order value witness contract violation 
additionally witness enables contract checker properly assign blame contract violation guilty party 
section introduces subtleties assigning blame higher order contract violations series examples scheme 
section presents con typed higher order functional programming language contracts 
section specifies meaning con section provides implementation 
section contains type soundness result proves implementation section matches calculus 
section shows extend calculus function contracts range depends input function section discusses interactions contracts tail recursion 
example contracts presentation series scheme examples explain contracts written useful check 
examples illustrate syntax basic principles contract checking 
sections discuss problems contract checking higher order world 
section explains important contracts class values 
section demonstrates contracts help callbacks common higher order functions stateful world 
illustrate points section includes examples drscheme code base 
contracts look example sqrt function sqrt number number define contract sqrt tradition design programs sqrt function proceeded ml type specification comment 
scheme define define contract expression consists variable expression initial value function case 
addition second subterm define contract specifies contract variable 
contracts simple predicates function contracts 
function contracts turn consist pair contracts predicate function contract domain function range function cd cr 
domain portion sqrt contract requires receives non negative number 
similarly range portion contract guarantees result non negative 
example illustrates general contracts check certain aspects function behavior complete semantics function 
contract position definition arbitrary expression evaluates contract 
allows clarify contract sqrt defining bigger zero 
predicate definition sqrt contract bigger zero 
number boolean define bigger zero 
sqrt number number define contract sqrt bigger zero 
bigger zero 
contract sqrt strengthened relating sqrt result argument 
dependent function contract constructor allows programmer specify range contracts depend value function argument 
constructor similar range position contract simply contract 
function accepts argument original function returns contract cd arg cr module preferences scheme contract provide add panel open dialog add panel panel panel void define contract add panel new child children send send new child get parent get children eq 
car children new child panel set 
panels cons panel panels panels listof panel panel define panels null open dialog void define open dialog instantiate dialog sp instantiate single panel parent children map call panel sp panels call panel panel panel panel panel define call panel sp panel panel sp 
contract specified add panel example dependent contract sqrt sqrt number number define contract sqrt bigger zero 
res bigger zero 
res abs res res contract addition stating result sqrt positive guarantees square result argument 
enforcement order types key checking higher order assertion contracts postpone contract enforcement function receives order value argument produces order value result 
section demonstrates delays necessary discusses ramifications delaying contracts 
consider toy module module delayed scheme contract provide save saved integer integer define saved save integer integer void define contract save bigger zero 
bigger zero 
set 
saved integer integer define module preferences scheme provide add panel open dialog add panel panel panel void define add panel panel set 
panels cons panel panels panels listof panel panel define panels null open dialog void define open dialog instantiate dialog sp instantiate single panel parent children map call panel sp panels call panel panel panel panel panel define call panel sp panel new child panel sp children send send new child get parent get children eq 
car children new child contract error panel new child 
contract manually distributed bigger zero 
bigger zero 
saved module declaration consists name module language module written provide declaration series definitions :10.1.1.11.4008
module provides save 
variable saved holds function map positive numbers positive numbers 
exported module contract 
getter save visible accessors saved 
function save stores new function invokes saved function 
naturally impossible save detect value saved applied positive numbers determine argument 
worse save guarantee time saved value applied return positive result 
contract checker delays enforcement save contract save argument applied returns 
accordingly violations save contract detected called 
general higher order contract checker able track contracts evaluation point contract established call site save discovery contract violation return site potentially evaluation 
assign blame contract checker able report violation discovered contract established 
toy example clearly contrived 
underlying phenomenon common 
practical example consider drscheme preferences panel 
drscheme plugins add additional panels preferences dialog 
plugins register callbacks add new panels containing gui controls buttons list boxes pop menus preferences dialog 
bool bool define op op number number bool define define eq equal bool define eq eq define equal equal bool define 
abstraction predicate contracts gui control needs values parent callback invoked control manipulated 
gui controls need additional control specific values label list choices 
order add new preference panels extensions define function accepts parent panel creates sub panel parent panel fills sub panel controls configure extension returns sub panel 
functions registered calling add panel 
time user opens drscheme preferences dialog drscheme constructs preferences dialog registered functions 
shows definition add panel contract boxed 
contract requires add panel arguments functions accept single argument 
addition contract guarantees result call add panel argument panel child parent panel 
checks ensure order panels preferences dialog matches order calls add panel 
body add panel saves panel making function list 
user opens preferences dialog open dialog function called calls panel functions contracts checked 
dialog single panel classes part primitive gui library instantiate creates instances 
comparison contains checking code written higher order contract checking 
boxed portion excluding inner box contract checking code 
code enforces contracts code implements preferences dialog 
decreases readability contract call panel client programmers need determine portion code concerns contract checking performs function 
addition author preferences module find call site higher order function 
finding sites general impossible practice call sites collaborators code source available 
blame contravariance assigning blame contractual violations world class functions complex 
boundaries cooperating components obscure world order functions 
addition invoking component exported functions component may invoke function passed component 
applying class functions corresponds flow values components 
accordingly blame corresponding contract violation lie supplier bad value matter bad value passed directly applying exported function applying class function 
order function contract checking parties involved contract function caller 
firstorder function contract checking general rule applies blame assignment 
rule number times base contract appears left arrow higher order contract 
base contract appears number times function responsible establishing contract 
appears odd number times function caller responsible 
odd rule captures party supplies values corresponds standard notions covariance positions contravariance odd positions 
consider example little detail 
imagine body call integer integer integer define contract greater 
zero 
zero 
point invokes greater 
portion contract fails 
odd rule fault 
fact supply bad value blamed 
imagine variation example applies 
imagine returns 
violation result portion argument contract odd rule fault lies caller 
accordingly contract enforcement mechanism track odd positions contract determine guilty party contract violations 
problem assigning blame naturally appears contracts drscheme implementation 
example drscheme creates separate thread evaluate user programs 
typically extensions drscheme need initialize thread specific hidden state user program run 
accessors mutators state implicitly accept current thread parameter code initializes state run user thread 
enable drscheme extensions run code user thread drscheme provides primitive run user thread 
accepts thunk queues thunk run user thread returns 
contract promises argument thunk applied current thread user thread run user thread void void define contract run user thread eq 
current thread user thread thunk contract higher order function contract 
interesting aspect pre condition function passed user thread 
covariant position function contract rule blame assignment means run user thread responsible establishing contract 
state available user program accessors mutators lexically available user program 
module preferences scheme contract provide add panel preferences add panel panel panel void define contract add panel sp pre children copy spine send sp get children new child post children send sp get children length post children add length pre children eq 
cdr post children pre children eq 
car post children new child panel set 
panels cons panel panels copy spine listof listof define copy spine map 
preferences panel contract protecting panel run user thread promises clients function thunks supply applied user thread thunks initialize user thread state 
class contracts experience drscheme shown certain patterns contracts recur frequently 
patterns contracts values passed functions 
example curried comparision operators common see 
interestingly patterns higher order function contracts common 
example drscheme code manipulates mixins values :10.1.1.127.1416
mixins functions accept class returns class derived argument 
extensions drscheme supply mixins drscheme important verify mixin result truly derived input 
contract common defined drscheme contract library mixin contract class class contract define mixin contract class 
arg res subclass 
res arg contract dependent contract 
states input function class result subclass input 
common contracts mixins guarantee base class passed mixin just class class implements particular interface 
support contracts drscheme contract library provides function constructs contract mixin contract intf interface class class contract define mixin contract intf interface implements 
interface arg res subclass 
res arg mixin contract intf function accepts interface argument produces contract similar mixin contract contract guarantees input function class implements interface 
mixin contract principle checkable type system type system currently implemented 
ocaml oml rich express mixins typechecking fails interesting mixins type system allow subsumption imported classes 
contract example expressiveness contracts leads opportunity improve existing type systems 
hopefully example encourage type system designers build richer type systems support practical mixins 
callbacks stateful contracts callbacks notorious causing problems preserving invariants 
szyperski shows callbacks important cause problems 
short code invokes callback guarantee certain state modified dynamic extent callback 
typically invariant maintained examining state callback invoked comparing state callback returns 
consider simple library registering invoking callbacks 
module callbacks scheme contract provide register callback invoke callback register callback void void define contract register callback arg old state save relevant state res compare new state old state set 
callback invoke callback void define invoke callback callback callback void define callback void function register callback accepts callback function registers current callback 
invoke callback function calls callback 
contract register callback dependent contract constructor new way 
contract checker applies dependent contract original function arguments function applied 
range portion dependent contract determine key aspects state save closure resulting predicate 
predicate called result function compare current version state original version state ensuring callback behaved 
technique useful contract drscheme preferences panel contract considered 
consider revision add panel contract 
revision practice lock variables technique adapts lock variable solution callback problem 
core syntax val rec fix aop rop hd tl mt true false str contract pred dom rng blame str aa ab rop aop variables types list int bool string contract evaluation contexts val rec val rec val rec val rec val rec aop aop rop rop hd tl contract dom rng pred blame values str true false contract vp val rec 
con syntax types evaluation contexts values just ensure new child child 
addition guarantees original children preferences panel remain panel order preventing extension removing preference panels 
contract calculus contracts guarantee stronger properties types program execution guarantees hold particular program executions 
contrast type checker weaker guarantees hold program executions 
contracts types play synergistic roles program development maintenance practical programming languages support 
spirit calculus contains types contracts show interact 
contains syntax contract calculus 
program consists series definitions followed single expression 
definition consists variable contract expression expression initializing variable 
variables bound val rec single program distinct 
error true false true false fix fix contains val rec true false hd hd error hd tl tl error tl mt true mt false contract true false pred contract pred error pred dom dom contract error dom rng rng contract error rng blame error 
reduction semantics con definitions mutually recursive contract positions may refer defined variables appear earlier program 
expressions include abstractions applications variables fix points numbers numeric primitives lists list primitives expressions booleans strings 
final expression forms specify contracts 
contract expressions construct flat function contracts respectively 
expression returns true argument flat contract false argument function contract 
pred dom rng expressions select fields contract 
blame primitive assign blame definition violates contract 
aborts program 
model omits dependent contracts return 
types con core ml polymorphism plus types contract expressions 
typing rules contracts 
typing rule complete programs 
program type record types written types types definitions type type final expression 
contracts flat values tagged contract value constructor predicates operate appropriate type 
contracts functions consist contracts domain ti contract xi ti ti xi ti val rec xi ti bool contract contract contract dom contract int contract contract contract contract rng contract int int aop bool list list list contract pred bool list mt bool int int rop int list hd string blame contract bool fix list tl list bool true bool false bool str string range function 
typing rule definitions ensures type contract matches type definition 
rest typing rules standard 
consider definition sqrt function val rec sqrt contract contract body sqrt function elided 
contract sqrt contract type sqrt function type 
domain range portions contract predicates integers sqrt consumes produces integers 
succinctly predicates contract augment sqrt type indicating domain range positive 
figures define conventional reduction semantics base language contracts 
contract monitoring explained earlier contract monitor perform tasks 
track higher order functions discover contract violations 
second properly assign blame contract violations 
track higher order functions program evaluation covariant contravariant portions contract 
monitor contracts add new form expression new values evaluation contexts reduction rules 
contains new expression form representing obligation superscript contract expression base expression obliged meet 
variables 
variables enable technically sqrt consume produce number con contains integers precise details sqrt unimportant consider restricted form sqrt operates integers 

con type rules contract monitoring system assign blame properly 
variable names party responsible values produced expression superscript second variable names party responsible values consumes 
implementation add fourth superscript representing source location contract established 
superscript carried evaluation contract violation discovered point reported part error message 
model definition treated written different programmer 
definition considered separate entity purpose assigning blame 
implementation fine grained 
blame assigned coarser construct modula modules ml structures functors java packages 
drscheme blame modules 
programmers write obligation expressions 
contracts extracted definitions turned obligations 
enforce define judgment ok holds obligation expressions obligations placed val rec defined variable 
part obligation definition contract expression 
variable initially name referenced definition 
second variable initially name definition occurs main occurs expression 
function defined accompanying technical report specifies precisely insert obligations expressions :10.1.1.11.4081
obligation expressions induces extension set evaluation contexts shown 
specify value superscript obligation expression determined base value 
additionally obligation expression induces new type rule 
type rule guarantees obligation appropriate contract base expression 
obligation expressions obligation type rule obligation evaluation contexts obligation values vv obligation reductions contract contract flat blame hoc 
monitoring contracts con add class labeled values 
labels function obligations see 
grammar allows value labeled function contract type soundness theorem coupled type rule obligation expressions guarantees delayed values functions functions wrapped additional obligations 
reductions superscripted evaluation proceeds just original evaluation superscript carried instruction result 
additional reductions 
predicate contract reaches flat value predicate flat value checked 
predicate holds contract discarded evaluation continues 
predicate fails execution halts definition named variable positive position superscript blamed 
final reduction key contract checking higher order functions hoc arrow stands higherorder contract 
application superscripted procedure domain range portion function position superscript moved argument expression entire application 
obligation maintain contract distributed argument result application 
obligation moves argument position application value producer value consumer exchange roles 
values provided function provided argument vice versa 
accordingly superscripts obligation expression reversed ensures blame properly assigned odd rule 
example consider definition sqrt single main expression 
reduction sequence application sqrt shown left 
brevity variables defined val rec treated values reduce variable current values 
reduction example obligations distributed application 
domain portion superscript contract moved argument procedure range portion moved application 
second reduction second wrap contract string string wrap fix wrap 
ct ct pred ct error dom ct rng ct wrap wrap 
contract compiler wrapping function reduction examples flat contracts checked 
case predicate holds value 
predicate failed second reduction step main blamed main supplied value sqrt 
predicate failed second reduction step sqrt blamed sqrt produced result 
second example recall higher order program translated calculus val rec gt val rec bet false val rec gt bet bet definitions gt bet merely helper functions defining contracts need contracts 
calculus allow definitions simple extension add contract checker simply ignore 
accordingly variable body main expression definition contract 
variable compiled obligation 
contract obligation contract 
position contract met blamed odd position contract met main blamed 
reduction sequence gt bet bet main gt bet main bet main gt bet main bet main gt main bet main bet main gt blame bet main bet main blame reduction step obligation distributed argument result application 
additionally variables indicating blame swapped obligation 
second step substitutes body resulting application 
third step distributes contract result application 
addition variables odd blame switch positions contract 
fourth step reduces flat contract test determines contract holds 
final reduction steps assign blame supplying argument promised supply number greater 
reductions con original program val rec sqrt contract contract body intentionally elided sqrt sqrt contract contract sqrt main sqrt contract main sqrt contract sqrt main sqrt blame main contract sqrt main sqrt contract sqrt main contract sqrt main blame sqrt example shows higher order functions order functions treated uniformly calculus 
higher order functions merely require distribution reductions order functions 
fact nested arrow contract expression induces distribution reduction corresponding application 
simplicity focus sqrt example remainder 
contract implementation implement con compile away obligation expressions 
key compilation wrapper function 
wrapper function defined calculus expression short hand inline applications expressions clarity 
accepts contract value test strings 
strings correspond variables superscripts 
write wrap meta variable stand program text program variable 
compiling obligations merely matter replacing obligation expression application wrap 
argument contract referenced variable 
second argument expression obligation final arguments string versions variables obligation 
accordingly define compiler maps programs programs 
replaces obligation expression corresponding application wrap 
formal definition accompanying technical report :10.1.1.11.4081

reducing sqrt con wrap reductions compiled expression wrap contract contract sqrt sqrt main wrap contract sqrt wrap contract main sqrt sqrt main steps show reductions wrap argument reduction wrap clarity 
wrap contract sqrt wrap contract main sqrt sqrt main wrap contract sqrt blame main sqrt main wrap contract sqrt sqrt main wrap contract sqrt main blame sqrt function wrap defined case wise case kind contract 
case handles flat contracts merely tests value matches contract blames positive position test fails 
second case wrap deals function contracts 
builds wrapper function tests original function argument result recursive calls wrap 
textually recursive call wrap corresponds post condition checking 
applies range portion contract result original application 
second recursive call wrap corresponds pre condition checking 
applies domain portion contract argument wrapper function 
call wrap positive negative blame positions reversed domain checking function 
right hand side shows compiled version sqrt program reduces 
begins call wrap obligation expression original program 
reduction applies wrap 
contract case function contract wrap takes second case definition returns expression 
expression applied 
point function contract distributed sqrt argument result sqrt application just distribution reduction con shown left side 
reduction step call wrap argument sqrt 
contract flat case definition wrap applies result test 
test failed branch assigned blame main supplying bad value sqrt 
test passes expression returns reduction step 
fh fw fn vp error vp vp error fn fh fn fh vv vp fh vp vp vp error fh error fn fw fw vp vp error fw error 
evaluator functions sqrt returns 
arrive final call wrap 
contract flat predicate wrap reduces expression 
time test failed sqrt blamed returning bad result 
final reduction test succeeds result entire program 
correctness definition divergence 
program diverges exists 
definition divergence refers reduction relations 
type soundness theorem con standard 
theorem type soundness con 
program type judgments exactly holds vp error val rec defined variable hd tl pred dom rng diverges 
proof 
combine preservation progress lemmas con lemma preservation con 
lemma progress con 
vp remainder section formulates proves theorem relates evaluation programs instrumented semantics section contract compiled programs section 
relate semantics introduce new semantics show bridges gap 
new semantics extension semantics figures 
addition expressions contains obligation expressions evaluation contexts flat reduction new values hoc reduction wrap reduction wrap 
free definition evaluators 
define fh transitive closure flat hoc define fw transitive closure flat wrap 
evaluator functions shown defined programs ok short hand notation write program value equal value vp main expression program vp equal lemma 
evaluators partial functions 
proof 
inspection evaluation contexts prove unique decomposition program evaluation context instruction value 
follows evaluators partial functions 
theorem compiler correctness 
efh proof 
combine lemma lemma 
lemma 
proof sketch 
proof straightforward examination evaluation sequences 
reduction application wrap corresponds directly flat wrap reduction evaluators proceed lock step 
full proof accompanying technical report :10.1.1.11.4081
lemma 
efh proof sketch 
proof establishes simulation efh 
simulation preserved reduction step relates values errors 
full proof accompanying technical report :10.1.1.11.4081
dependent contracts adding dependent contracts calculus straightforward 
reduction relation dependent function contracts naturally extends reduction relation normal function contracts 
reduction distributing contracts applications difference 
placing range portion contract obligation application range portion function original argument placed obligation 
dependent contract expressions dependent contract type rule contract contract contract dependent contract evaluation contexts dependent contract reductions 
dependent function contracts con evaluation contexts dictate obligation superscript reduced value base expression 
particular order evaluation means superscripted application resulting dependent contract reduction reduced base expression 
procedure dependent contract examine state world function proper applied 
order evaluation critical callback examples section 
tail recursion contract compiler described section checks postconditions preserve tail recursion procedures post conditions 
typically determining procedure call tail recursive simple syntactic test 
presence higher order contracts understanding exactly calls tail calls complex task 
example consider program val rec gt contract val rec gt gt gt body tail position respect conventional interpreter 
tail call optimizing compiler optimize call allocate additional stack space 
due contract result larger call optimized semantics contract checking 
worse functions contracts functions contracts evaluation call function tail call times call function call tail call 
instance imagine argument locally defined recursive function 
recursive calls tail calls associated top level variable contract enforced 
contracts effective module boundaries serve programmer improving opportunities modular reasoning 
written contracts programmer study single module isolation adding functionality fixing defects 
addition programmer changes contract changed contract immediately indicates source files change 
minimum compiling tail call difficult 
experience shown module boundaries typically involved tight loops conjecture losing tail recursion contract checking problem practice 
particular adding contracts key interfaces drscheme noticeable effect performance 
removing tail call optimization entirely render drscheme useless 
serrano presents evidence conjecture tail recursion 
compiler preserve tail recursion procedure call just contracts 
problem practice section 
higher order typed programming language implementations static type discipline prevents certain abuses language primitive operations 
example programs apply non functions add non numbers invoke methods non objects statically rejected 
languages go 
run time systems dynamically prevent additional abuses language primitives 
example primitive array indexing operation aborts receives bounds index division operation aborts receives zero divisor 
techniques dramatically improve quality software built languages 
advent module languages support type abstraction programmers empowered enforce abstractions type level 
abstractions expressive power language designer specifying language primitives 
dynamic part invariant enforcement second class citizen 
programmer manually insert dynamic checks blame assigned automatically checks fail 
worse discussed section possible programmer insert checks manually call sites may unavailable modules 
presents assertion contract checker languages higher order functions 
contract checker enables programmers refine type specifications abstractions additional dynamically enforced invariants 
illustrate complexities higher order contract checking series examples chosen drscheme code base 
examples serve purposes 
illustrate subtleties contract checking languages higher order functions 
second demonstrate current static checking techniques expressive support contracts underlying drscheme 
believe experience assertions reveal contracts biggest impact software quality 
hope information turn helps focus type system research practical directions 
acknowledgments thomas der michael anonymous icfp reviews comments 
send special icfp reviewer careful analysis insightful comments renewed faith conference reviewing process 
bell 
standard ml new jersey 
clinger proper tail recursion space efficiency 
proceedings acm sigplan conference programming language design implementation pages june 
felleisen findler flatt krishnamurthi 
design programs 
mit press 
felleisen hieb 
revised report syntactic theories sequential control state 
theoretical computer science pages 
findler clements flanagan flatt krishnamurthi felleisen 
drscheme programming environment scheme 
journal functional programming march 
preliminary version appeared plilp lncs volume pages 
findler felleisen :10.1.1.11.4081
contracts higher order functions 
technical report nu ccs northeastern university 
findler flatt 
modular object oriented programming units mixins 
proceedings acm sig plan international conference functional programming pages september 
flatt plt mzscheme language manual 
technical report tr rice university 
www org software mzscheme 
flatt composable compilable macros want 
proceedings acm sigplan international conference functional programming 
flatt krishnamurthi felleisen 
programmer reduction semantics classes mixins 
formal syntax semantics java 
preliminary version appeared proceedings principles programming languages 
revised version rice university technical report tr june 
gomes stoutamire 
language manual sather august 
gosling joy guy steele 
java tm language specification 
addison wesley 
harper lillibridge 
type theoretic approach higher order modules sharing 
proceedings acm conference principles programming languages pages 
holt cordy 
turing programming language 
communications acm volume pages december 
jones reid yale haskell group 
hugs user manual 
kelsey clinger 
editors 
revised report algorithmic language scheme 
acm sigplan notices 
lling rosenberg 
blue language specification version 
leroy manifest types modules separate compilation 
proceedings acm conference principles program ming languages pages 
leroy objective caml system documentation user guide 
luckham programming specifications 
texts monographs computer science 
luckham von henke 
overview anna specification language ada 
ieee software volume pages march 
meyer eiffel language 
prentice hall 
milner tofte harper 
definition standard ml 
mit press 
mitchell plotkin 
types existential type 
acm transactions programming languages systems 
parnas technique software module specification examples 
communications acm may 
vouillon 
objective ml simple objectoriented extension ml 
proceedings acm conference principles programming languages pages january 
rosenblum practical approach programming assertions 
ieee transactions software engineering 
serrano bigloo practical scheme compiler 
serrano bee integrated development environment scheme programming language 
journal functional programming may 
steele expensive procedure call myth procedure call implementations considered harmful lambda ultimate goto 
technical report mit artificial intelligence laboratory 
appeared proceedings acm national conference seattle october 
eiffel 
prentice hall 
szyperski component software 
addison wesley 
ghc team 
glasgow haskell compiler user guide 
wright felleisen 
syntactic approach type soundness 
information computation pages 
appeared technical report tr rice university 
