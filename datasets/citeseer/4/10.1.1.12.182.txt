indexing large trajectory data sets seti prasad adam patel rapid increase inexpensive location aware sensors variety new applications large amounts time sequenced location data soon accumulated 
efficient indexing techniques managing large volumes trajectory data sets urgently needed 
key requirements trajectory indexing technique support searches inserts efficiently 
proposes new indexing mechanism called seti scalable efficient trajectory index meets requirements 
seti uses simple level index structure decouple indexing spatial temporal dimensions 
decoupling searches inserts efficient 
actual implementation demonstrate seti clearly outperforms previously proposed trajectory indexing mechanisms tree tb tree 
previously proposed trajectory indexing structures seti logical indexing structure uses existing spatial indexing structures trees modifications 
consequently dbmss currently support trees easily implement seti making practical efficient choice indexing trajectory data sets 
supported part nsf iis ibm faculty award 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings cidr conference university michigan beal avenue ann arbor mi usa eecs umich edu need accurately determine location critical part exploration endeavors early days human history 
advent satellite atomic clock technologies second half century lead development satellite location determination techniques gps 
long time gps technology available military applications may possible civilian gps receivers accurately identify location gps receiver meters 
gps technology quickly enabling number new applications including tracking vehicles navigating boats ships tracking wildlife 
popular application technology cellular phones embedded gps sensors 
united states cellular phones required enabled 
federally mandated requirement states cellular phone companies able locate geographical location cellular phone user accuracy meters cases 
case emergency provide better location information emergency workers 
gps works computing location outdoors determining location inside building requires techniques 
popular technique determining location indoors ultrasonic radio frequencies combination techniques 
location information produced techniques accurate example bat system compute locations usually accurate cm actual location 
availability indoor location information giving rise new class applications asset tracking contextaware applications adapt users needs user moves physical space 
rapid advances semiconductor technologies possible build location computing devices small price making mass deployments devices possible 
location computing techniques ob ject moves space gather successive location positions object 
successive locations viewed sequence line segments collectively form trajectory object 
trajectory segment object moving dimensional space essentially line dimensional space time additional dimension 
years seen rapid increase deployment location sensing devices applications information trend accelerate near 
result soon faced task managing large volumes trajectory data 
example continually collect gps sensor readings fleet trucks transmitting location minute data set grows new segments day 
trajectory data sets number ways including analyzing factors contribute accidents examining factors lead missed delivery targets 
trajectory data combined data instruments vehicle odometer braking system fuel gauge information identify factors contribute poor fuel consumption 
indexing techniques effectively managing large data sets application domains natural expect indexing techniques play crucial role managing trajectory data sets 
address issue efficiently indexing large trajectory data sets 
propose new indexing structure called seti scalable efficient trajectory index decouples indexing spatial dimensions time dimension 
seti partitions spatial dimension static non overlapping partitions partition builds sparse index time dimension 
spatial index sparse index including tree variants tree 
seti indexing technique key features advantages trajectory indexing techniques objects indexed onedimensional time lines indexing structure suffer curse dimensionality causes performance indexing structures degrade rapidly number dimensions increases 
straightforward way indexing trajectories store trajectory segment tree standard tree search algorithms 
implementation shore show seti clearly outperforms indexing approach 
implemented proposed trajectory indexing structure tb tree shore results comparing performance seti tb tree 
performance com show seti convincingly outperforms tb tree 
updates trajectories tend append operations add new segments ends existing trajectories 
support high append rates seti keeps location object memory front line structure 
new location update object available look position object front line structure add trajectory segment seti index 
sparse tree index time dimension updates fast 
index scales handle large trajectory data sets multiple sparse indices 
show seti scales increasing number mobile objects actual users devices increasing trajectory sizes increasing number segments trajectory 
seti viewed logical indexing structure built top existing spatial indexing techniques tree 
consequently implementing seti easier implementing new physical indexing structure 
addition existing techniques concurrency control developed trees directly seti 
remainder organized follows problem definition related section 
seti indexing mechanism section 
section presents experimental results actual implementation seti trees 
section contains plans 
problem definition related data model trajectory data moving objects continuously changing successive updates location mobile object 
poses problem representing location object times conventional models data representations static nature 
commonly model representing trajectory data approximates motion object straight line segment consecutive updates 
model representing trajectories 
position moving object sampled discrete times series straight lines connecting successive positions represents movement object 
line referred segment sequence connected segments single moving object referred trajectory 
furthermore assume object moves dimensional space extensions fairly straightforward 
stated formally trajectory represented tid un tid unique trajectory id un sequence points reflecting positions moving object 
point ui tuple ui xi yi ti xi yi represent spatial position object dimensions respectively time ti 
restriction sequence ui ui ensure time parameter trajectory sequence monotonically increasing 
trajectory segment represented si tid sidi ui ui sidi unique segment number segment trajectory trivially set sidi ui ui update points 
model easily extended associate additional variables segment update point example trajectory data set moving vehicles update point may additional reading recording engine temperature time update 
query types queries moving data broadly classified categories queries ask questions positions moving points queries ask questions historical positions moving objects 
class queries answered storing current position speed direction moving objects 
second class queries classify historical queries different sub classes coordinate queries queries 
coordinate queries include timeinterval select objects area give time period time slice queries select objects area time instant nearest neighbor queries 
trajectory queries involve information trajectory topology velocity 
focus coordinate queries general time interval time slice queries particular 
related efficient indexing structure trajectory data sets essentially scalable number moving objects supports update rate objects 
previous access structures literature variations tree address scalability specifically 
earliest structures rt tree stores time nodes regular tree 
temporal query search entire rtree discrimination index search temporal dimension 
trees treat temporal property simply additional dimension 
weakness tree temporal dimension treated manner spatial dimensions 
bounding box index includes time dimension overlap keys increases dead space increases 
consequently performance tree degrades rapidly data set size increases 
hr trees similar maintain separate tree time stamp 
duplication unchanged nodes consecutive trees avoided reduce storage space 
indexing structures efficient evaluating time slice queries search performance degenerates time interval queries 
addition storage space required hr trees typically high 
mv tree hybrid structure uses multi version tree time stamp queries small tree time interval queries 
tree dimensional extension multi version trees 
tree built leaf nodes tree 
keep space requirement manageable indices share leaf pages leads complex insert algorithm 
addition tree models temporal change discrete event moving objects maintain position new position updated 
discrete event data model mv tree outperforms indexing structures tree hr tree 
main drawback model represent gradual change position required trajectory model see section 
tb tree trajectory bundle tree tree 
main idea tb tree indexing method bundle segments trajectory leaf nodes tree 
tree insert algorithm modified leaf nodes contain trajectory segments belonging moving object 
segments single trajectory need leaf node representing segments leaf nodes store trajectory bundles trajectory connected forward backward pointers 
design aims reduce node accesses retrieving complete trajectory 
trajectory retrieval easy structure important topological queries 
tree insertion solely trajectory id proximity space time dimensions expect large overlaps minimum bounding box mbb keys internal nodes tree 
updates index chronological order reducing overlap 
spatio temporal data management systems aggregate data maintained actual data traffic flow patterns 
aggregated data representation may address privacy concerns 
papadias propose aggregate tree arb tree maintains spatial regions tree uses tree regions tree temporal dimension 
aggregate values time stamps maintained trees 
volatile regions handled historical trees 
nature aggregate indexes arb trees limited types queries support extended support ones consider 
song roussopoulos consider problem updates large number moving objects system stores latest location information 
assume approximate location information required partition working space nonoverlapping cells 
solve update problem storing cell number object updating cell number associated object object moves different cell 
approach adequate dealing trajectory data sets reasons provide accurate position information support spatio temporal queries store detailed trajectory data moving objects 
best knowledge previous works trajectory indexing considered efficiency index operation appends new segments existing trajectories 
seti description trajectory data sets line segments exhibit characteristics different general dimensional data sets 
tree storing line segments differences exploited design efficient indexing structure 
tree temporal spatial dimensions treated equally 
trajectory data sets important differences characteristics dimensions 
specifically boundaries spatial dimensions remain constant change slowly lifetime trajectory data set growth time dimension continually increasing 
extent spatial dimensions change indexing structure partition spatial dimensions statically see section discussion adapting dynamic partitioning 
spatial partition indexing structure needs index lines time dimension 
consequently approach exhibit rapid degradation index performance generally observed indexing techniques 
seti indexing mechanism capitalizes observation achieve spatial temporal discrimination seti spatial discrimination maintained logically partitioning spatial extent number nonoverlapping spatial cells 
cell contains tra term discrimination frequently literature refers effectiveness indexing structure identifying candidate set index entries false positives 
schematic diagram insert procedure segments completely cell 
trajectory segment crosses spatial partitioning boundary segment split boundary inserted cells see section details 
trajectory segment stored tuple data file restriction single data page contains trajectory segments belong spatial cell 
lifetime data page defined minimum time interval completely covers time spans segments stored page 
lifetime values pages logically mapped spatial cell indexed tree 
temporal indices sparse indices entry data page maintained entry segment 
sparse indices distinct advantages smaller index overheads improved insert performance 
temporal indices provide temporal discrimination searches 
trajectory applications location updates arrive chronological order 
order updates essentially tree indices clustered entries clustered times trajectory segments 
clustering property results additional index efficiencies fetching trajectories overlap specified query 
note trajectory updates arrive near chronological order resulting index nearly clustered performance benefits fully clustered index 
insert illustrates insert procedure seti 
key performance insert algorithm seti memory structure called front line maintains updated location moving objects 
front line cache positions objects positions organized hash structure indexed movement front line front line time movement front line structure front line time dt unique id associated moving object 
new update moving object system front line structure consulted pull known location moving object 
trajectory segment previous new location constructed inserted seti index 
front line structure updated new location moving object 
persistence front line structure important front line structure implemented persistent index structure hash tree index 
example insert procedure illustrate insert procedure example shown 
shows trajectories belong different moving objects 
point latest location information moving object maintained front line structure 
object moves new location update request sent insert module shown 
segment aa represents movement object updates 
insert module determines particular spatial cell location belongs partitioning module 
segment aa spans multiple spatial cells split number smaller segments shown 
spatial extent partitioned regular hexagons shown dashed lines 
discussed section adaptive spatial partitioning strategies seti 
long segment aa broken smaller segments ax xa location intersection splitting segments insert segment aa cell partition boundary 
location logical update location locations actual update points 
segments ax xa inserted corresponding spatial cells 
note techniques alter location data moving object logically stored segments ax xa represent single segment aa 
original segment retrieved merging ax xa segment identifier see section 
shows split dimensions actuality segment split dimensions including temporal dimension 
time logical update spatial boundary determined interpolating times successive updates locations 
search shows steps search algorithm 
input search algorithm time interval query dimensional query box consists spatial predicate box temporal predicate range 
time slice query temporal predicate range consists single value 
search algorithm executes steps 
spatial filtering step spatial partitions overlap spatial predicate box computed candidate cell list produced 

temporal filtering cells candidate cell list corresponding temporal index probed temporal predicate range 
step generates list pages lifetimes overlap temporal predicate 
time slice queries data pages lifetimes contain predicate timestamp fetched 

refinement step page candidate list pages processed follows 
page belongs spatial cell completely inside spatial predicate box temporal predicate range applied 
temporal predicate range contains lifetime page segments page qualify result additional refinement steps needed 
pages query predicates applied segment page 
step produces list segments overlap query box 

duplicate elimination set segments produced refinement step may multiple segments belonging trajectory moving object 
unique trajectory identifiers required part result duplicates eliminated 
done maintaining bitmap trajectory id bit bitmap corresponds unique trajectory id segment qualified refinement step corresponding trajectory id bit set bitmap 
bit set segment discarded 
step bitmap scanned producing list trajectory ids corresponding bit positions turned 
search algorithm needs produce trajectory id segment number matching segment trajectory id segment number pairs written file sorted eliminate duplicates 
schematic diagram search algorithm deletes updates types deletions complete trajectory deleted particular segment trajectory deleted 
segment deleted time interval query issued bounding box particular segment predicate 
operation retrieves required segment data deleted data page 
lifetime data pages changes corresponding entry temporal tree updated 
delete entire trajectory segments trajectory identified 
information maintained auxiliary composite tree index trajectory id segment number trajectory 
segments trajectory identified deleted time outlined 
modifications entire trajectories treated deletion followed insertion 
spatial partitioning spatial skew spatial partitioning number moving objects cell fairly uniform 
producing partitioning strategy challenging distribution objects may non uniform distribution may change time 
partitioning strategies may static dynamic 
static partitioning strategy described partition boundaries fixed dynamic partitioning strategy partition boundaries may change time 
crucial parameter partitioning strategy number partitioning cells turn affects area covered spatial cells 
spatial cells cover large areas spatial discrimination index reduced adversely affect search performance 
hand spatial extent partitioned finely number segments cross cell boundary increases turn increases partitioning overhead 
intuitively expect static partitioning space inefficient underlying object densities number moving objects cell skewed 
cells overloaded performance corresponding temporal tree expected deteriorate 
inefficiency usually arise temporal tree sparse indexes 
result temporal indices grow index large number data pages small deterioration performance index 
addition chronological update order tree grow direction resulting key values leaf level little overlap 
general performance tree starts degrade overlap keys large requires traversing multiple paths search operation 
seti degradation usually seen temporal trees chronological arrival order 
chronological arrival order data set indexed temporal tree increases rapidly overlap keys index increase rapidly reducing impact partitioning skew 
circumstances random arrival updates topological change spatial extent may need repartition spatial dimensions 
number alternatives available 
simplest split partitions heavily populated rebuild corresponding temporal tree indices 
resulting spatial cell boundaries uniform indexed spatial index structure quad tree 
complex alternative keep track history splits spatial partitions structure historical tree 
existing tree indices time dimension rebuilt appends cells split inserted new temporal tree indices 
small changes search algorithm seti adapted handle dynamic partitioning strategy 
spatial partitioning methods previous section described static uniform non overlapping partition spatial dimension fairly straight forward adapt seti accommodate spatial partitioning strategies partitioning non uniform cells overlapping spatial partitioning strategies 
interest space consider options 
experimental evaluation section experimental results evaluating behavior seti trajectory indexing structures tree tb tree 
tree simply stores trajectory segment line segment tree 
tb tree essentially tree index modification leaf nodes contain trajectory segments trajectory 
implementation details experimental platform experimental platform intel pentium iii mhz machine configured mb main memory gb ibm rpm ultra ata disk running debian linux version 
software experiment system called comet currently building research issues continuous management evolving trajectory data sets 
system uses shore storage manager indexing techniques examine section implemented shore 
shore currently supports trees tree key definition shore modified fairly straight forward fashion support trees 
implemented additional indexing mechanism shore 
seti implemented existing trees shore 
spatial extent partitioned uniform rectangular grid front line structure implemented hash index mapped single large shore object persistence 
experiments buffer pool mb 
disk page size experiments kb 
values dimensions including time dimension represented byte integers 
trajectory segments stored separate tuples single shore file 
tuple unique trajectory id segment number points trajectory segments 
data sets queries real trajectory data sets currently freely available generated synthetic data sets different methods method uses data generator second method uses network data generator 
data generator produces trajectory data sets specified number moving objects specified number segments moving object 
generator numerous knobs changing distribution initial positions moving objects direction movements trajectory segment length experimented number data sets produced varying parameters results default uniform distributions representative data sets 
interest space results data sets generated default data generation parameter values 
network data generator models movements users moving network paths roads 
takes input map data set generates trajectories users moving paths map 
network data set generated tiger data files road network san county ca 
data set distribution moving objects density road networks larger population mobile objects areas dense road networks 
real world mobile users remain stationary specific location long period time 
resulting trajectory segment long span temporal dimension increases life times data pages indexed temporal trees 
intuitively characteristic lead deterioration performance temporal indices 
explore effect data sets modified network data generator simulate cell phone users 
simulation time period days day user moves san county road network roughly hours day 
remaining part day users remain stationary 
number users varied produces data sets half trajectory segments 
results section data sets generated results san network data set 
choice extensively previous area making easier reader put results perspective 
execution time ms seti number partitions effect number spatial partitioning cells time interval query size mb seti tb tree data sets number different data sets examine effect increasing number mobile users effect increasing number trajectory segments mobile object 
denote data sets nomenclature nt ns nt number trajectories moving objects data set ns total number trajectory segments data set 
similarly nt ns represent network data set cp nt ns represent data set cell phone users moving county road network 
experiments types queries timeinterval queries time stamp queries 
predicate time interval query box equal normalized widths dimension 
extent dimension different range query box dimension normalized actual extent dimension 
selectivity time interval query equal volume query box universe unit length dimension 
results query selectivities 
note query corresponds range predicate selectivity single dimension 
time slice query time interval single timestamp value range spatial dimension 
selectivity query area spatial predicate box universe unit length spatial dimensions 
data points query performance graphs generated set random queries 
query set selectivity starting values predicates chosen randomly 
ran queries starting cold buffer pool computed average query execution time 
graphs show average query execution time 
tree insert time segment ms number segments index sizes seti tb tree tree comparing insert performance inserts effect number spatial partitions experiment examine effect number spatial partitions search performance seti 
shows results data set time interval query 
small number cells cell covers large portion spatial extent 
consequently moving objects mapped cell reduces spatial discrimination index 
result search process produces large number false positives filter steps leads poor performance 
number cells increases spatial discrimination increases improving performance index 
number cells increases probability trajectory segment cross spatial cell boundary increases 
behavior leads increase replication index starts degrade performance index 
addition number cells increases number trees total space consumed trees increases leads greater competition buffer pool space 
range degradation performance gradual number cells increased 
index performs best number partitions cells range cells performance search best case 
observed similar behavior queries data sets interest space omit additional results 
remaining experiments keep number cells constant 
index sizes shows sizes seti tb tree tree indexes data sets 
data sets shown correspond increasing number seg execution time ms tree tb tree seti number segments scaling number segments time interval query execution time ms ments trajectory 
sizes shown include size index file 
size data file data sets mb mb mb respectively 
seti segments split crossed spatial partition boundaries data file sizes larger indices described section logical split points stored data file 
seen seti index sizes smaller tb tree seti uses sparse indices seti index time dimension 
tree requires amount space average page occupancy 
tb tree close page occupancy 
seti average page occupancy leaf pages having close occupancy 
insert performance section evaluate performance index operation appends new segments existing trajectories 
experiment data set 
building indices inserted additional segments 
shows average time taken insert single trajectory segment inserts 
seen inserts seti nearly times faster tb tree nineteen times faster tree 
tb tree insert operation executed steps 
leaf node trajectory located check space accommodate new trajectory segment leaf node 
new trajectory segment inserted leaf node newly created leaf node 
tb tree index sparse index splits leaf nodes frequent seti leading poor relative performance 
inserts tree costly page splits 
key representation tree larger seti leading smaller fanout larger number splits 
tree tb tree seti number segments scaling number segments timeinterval query execution time ms time interval queries tree tb tree seti number segments scaling number segments timeinterval query section performance index structures evaluating time interval queries 
varying number segments experiment generated number data sets number moving objects varied total number segments 
figures plot performance indices query selectivities 
shown figures tree worst performance indexing structures 
representation segments tree index results large dead space keys represent leaf nodes large amounts overlap keys internal nodes 
result search performance degrades multiple paths traversed evaluate query 
performance degradation rapid larger query selectivities observe rapid performance degradation 
tree take longer time build index reasons 
data sets segments index build time hours aborted tests 
clear experiment tree performs poorly rest consider trees 
going back figures observe seti outperforms tb tree 
reasons behavior trees seti efficient tree tb tree 
trees seti index time dimension keys tree tb tree dimensional 
higher dimensional keys dead space overlap tree increases degrades search performance 
addition sparse index seti efficient 
seti significant advantage tb tree respect cpu cost 
temporal indices correspond spatial cells fully contained time ms tb tree seti cpu time time cpu components time interval query execution time ms query box temporal predicates need checked refer section 
cpu costs shown constitute big portion spatial query evaluation spatial objects surprisingly cpu component significant working trajectory data sets 
cpu contributions seti tb tree shown sample timeinterval query data set 
shows cpu costs higher tb tree 
observed similar trend query sizes data sets 
network data set shows results network data set varied 
experiment time interval query 
results similar queries interest space additional results omitted presentation 
results follow trend data set 
data set objects moving uniform speed times data set users vary speed update rate 
concentration users varies road network distributed uniformly 
slow moving objects urban areas road density high fast moving objects freeways country side roads 
experiment demonstrates seti continues effective non uniformly distributed trajectory data sets 
main reason counterintuitive result index looses spatial discrimination objects clustered spatial cell temporal discrimination increases 
dense cells objects average cell generate updates 
update produces trajectory segment indexed temporal tree cell 
trajectory segments dense cell segments tend better clustered time dimen tb tree seti number segments san dataset time interval query execution time ms tb tree seti number objects long update intervals cp timeinterval query sion 
consequently lifetimes pages dense pages generally smaller leads better temporal discrimination 
dense cells decrease performance due larger trees offset improvement search performance caused increase temporal discrimination 
shows results data set simulating cell phone users moving county road network 
recall section data set segment long time spans 
characteristic affects performance temporal indices increasing lifetimes data pages segment stored 
result shows seti temporal indices deteriorate long segments 
time periods objects stationary segment inserted index object 
lifetimes pages contain segments long time spans long 
pages short time spans result degradation search performance severe 
performance tb tree deteriorates lowerlevel non leaf nodes leaf nodes contain large minimum bounding box keys 
result searches slow large number false positives produced leads poor search performance 
varying number objects examined scalability index search performance number moving objects increased contrast increasing number trajectory segments moving object done experiments section 
experiment number mobile objects range number segments trajectory kept constant results total number segments increasing 
interest space result time interval query representative performance observed queries 
execution time ms tb tree seti number moving objects scaling number objects time interval query result shown figures 
experiment demonstrates seti continues outperform tb tree index data set large number trajectories 
time slice queries section evaluate performance index structures evaluating time slice queries 
ran experiment number time slice queries selectivities interest space results time slice query 
results queries similar 
figures plots performance seti time slice queries number different data sets 
show seti outperforms tb tree index time slice query temporal discrimination affects query performance spatial discrimination 
seti performance advantages come cpu efficiencies 
data points experiment number disk os incurred seti lower tb tree seti portion cpu costs lower tb tree 
proposed evaluated new trajectory indexing mechanism called seti 
previously proposed trajectory indexing mechanisms seti decouples indexing spatial time dimensions leads greater search update efficiencies 
implementation shore demonstrated seti outperforms tree tb tree time interval time slice queries 
seti capable supporting faster rates operations append new segments existing trajectories 
seti added advantage logical indexing structure easily built existing spatial indexing structures tree 
property easier database developer implement seti 
execution time ms tb tree seti number segments scaling number segments time slice query part plan investigating impact performance various adaptive partitioning strategies 
plan investigating seti evaluating trajectory queries require fetching entire trajectories computing derived values average speed 
focused historical queries part plan investigating extensions front line structure seti answer queries positions moving objects 
richard providing valuable feedback earlier version 
addition anonymous reviewers comments particular anonymous reviewers provided valuable detailed comments suggestions helped improve presentation quality 
agarwal arge erickson indexing moving points 
proceedings nineteenth acm sigmod sigact sigart symposium principles database systems dallas texas usa may pp 

bahl padmanabhan radar rf user location tracking system 
infocom pp 

becker seeger widmayer asymptotically optimal multiversion tree 
vldb journal 
beckmann kriegel schneider seeger tree efficient robust access method points rectangles 
proceedings acm sigmod conference atlantic city nj usa june pp 

berchtold hm kriegel 
pyramid technique breaking curse dimensionality 
proceedings acm sigmod conference seattle wa usa june pp 

brinkhoff generating network moving objects 
proceedings th international conference scientific statistical database management berlin germany july pp 

carey dewitt franklin hall mcauliffe naughton schuh solomon tan white persistent applications 
proceedings acm sigmod conference minneapolis minnesota usa may pp 

fcc wireless requirements 
federal communications commission 
finkel bentley quad trees data structure retrieval composite keys 
acta informatica springer verlag 
getting global positioning system 
ieee spectrum dec 
ting hlen erwig jensen schneider foundation representing moving objects 
acm transactions database systems mar 
guttman trees dynamic index structure spatial searching 
proceedings acm sigmod conference boston ma june pp 

harter hopper steggles ward webster anatomy context aware application 
mobile computing networking seattle wa usa august pp 

gunopulos indexing mobile objects 
proceedings eighteenth acm sigact sigmod sigart symposium principles database systems philadelphia pennsylvania usa may pp 

banks high concurrency locking trees 
proceedings st vldb conf 
zurich switzerland september pp 

mohan hellerstein concurrency recovery generalized search trees 
proceedings acm sigmod conference tucson arizona usa may pp 

silva historical 
proceedings acm symposium applied computing acm sac pp 

silva evaluation access structures discretely moving points 
spatio temporal database management edinburgh scotland september pp 

papadias tao zhang indexing spatio temporal data warehouses 
proceedings international conference data engineering san jose ca usa february pp 

patel dewitt partition spatial merge join 
proceedings acm sigmod conference montreal quebec canada june pp 

jensen theodoridis novel approaches query processing moving object trajectories 
proceedings st vldb conf 
cairo egypt september pp 

pitoura locating objects mobile computing 
ieee transactions knowledge data engineering 
priyantha chakraborty cricket location support system 
mobile computing networking boston ma usa august pp 

jensen leutenegger lopez indexing positions continuously moving objects 
proceedings acm sigmod conference dallas texas usa may pp 

sistla wolfson chamberlain dao modeling querying moving objects 
proc 
th international conference data engineering birmingham april pp 

song roussopoulos hashing moving objects 
mobile data management hong kong polytechnic university hong kong january pp 

tao papadias mv tree spatiotemporal access method timestamp interval queries 
vldb journal pp 

theodoridis silva generation spatiotemporal datasets 
advances spatial databases th international symposium lecture notes computer science springer pp 

theodoridis vazirgiannis sellis spatio temporal indexing large multimedia applications 
international conference multimedia computing systems pp 

bureau census 
tiger line files tm technical documentation 
ward jones hopper new location technique active office 
ieee personnel communications oct 
xu han lu rt tree improved tree index structure spatio temporal databases 
proceedings th international symposium spatial data handling pp 

