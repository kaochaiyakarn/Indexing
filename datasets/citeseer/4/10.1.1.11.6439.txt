experiments test case generation runtime analysis doron allen goldberg klaus havelund mike lowry corina pasareanu ro willem visser computer systems institute eth zurich ch zurich switzerland naval postgraduate school monterey california usa time rover cupertino california usa kestrel technology nasa ames research center moffett field california usa nasa ames research center moffett field california usa department computer science university illinois urbana champaign riacs nasa ames research center moffett field california usa 
software testing typically ad hoc process human testers manually write test inputs expected test results automating execution regression suite 
process cumbersome costly 
reports preliminary results approach automate process 
approach consists combining automated test case generation systematically exploring program input domain runtime analysis execution traces monitored verified temporal logic specifications analyzed advanced algorithms detecting concurrency errors data races deadlocks 
approach suggests generate specifications dynamically input instance statically 
describes experiments variants approach context examples planetary rover controller space craft fault protection system 
program typically tested manually creating test suite turn set test cases 
individual test case description test input sequence program description properties corresponding output expected 
procedure complicated ultimately unavoidable real systems writing test cases inherently innovative process requiring human insight logic application tested 
discussions robotics space craft engineers nasa support view 
equally widespread opinion non trivial part testing automated 
described case study line java application tested different student groups different testing techniques 
conjectured vast majority bugs system students fully automatic way 
presents reflections preliminary applying low budget automated testing identify bugs quickly 
shall seen position statement experiments testing tools case studies 
suggest framework generating test cases fully automatic way illustrated 
particular program tested establishes test harness consisting modules test input generator module property generator module program instrumentation module observer module 
test input generation property generation program instrumentation observer fig 

test case generation test input generation property generation runtime analysis instrumentation observation 
test input generator automatically generates inputs application 
generated input fed property generator automatically generates set properties program satisfy executed input 
input fed program executes generating execution trace 
observer module observes executing program checking behavior generated set properties 
observer takes input execution trace set properties generated property generator 
program instrumented report events relevant monitoring properties satisfied particular execution 
instrumentation cases automated 
test input generator property generator written hard wired specifically application tested 
replaces manual construction test cases 
instrumentation observer modules generic tools re different applications 
rest term test case generation refer test input generation property generation term runtime analysis refer instrumentation observation 
described framework applied case studies planetary rover controller space craft fault protection system 
case system properties expressed temporal logic 
rover controller test cases generated model checker properties generated specific single test case 
fault protection system test cases gen erated small program universal correctness properties manually constructed 
property generation difficult step process 
investigating problem characteristics tradeoffs approaches studies 
approach generating properties specific single test case novel investigated 
organized follows 
section outlines framework test case generation tried adhere 
section describes runtime analysis techniques 
sections describe case studies 
section concludes outlines preliminary continued 
test case generation section presents test case generation framework 
mentioned earlier consider test generation consisting test input generation property generation 
test input generation practice today generation test inputs program test timeconsuming manual activity 
test input generation naturally lends automation focus research attention adopted industry 
main approaches generating test inputs automatically static approach generates inputs kind model system called modelbased testing dynamic approach generates tests executing program repeatedly employing criteria rank quality tests produced 
dynamic approach observation test input generation seen optimization problem cost function optimization typically related code coverage statement branch coverage 
model test input test case generation approach widely see hartman survey field 
model model testing typically model expected system behavior derived number sources model requirements cases design specifications system code create model symbolic execution approaches 
dynamic approach typical notion coverage model derive test inputs generate inputs cover transitions branches model 
construct model expected system behavior costly process 
hand generating test inputs just specification input structure input pre conditions effective typically costly 
propose model checker traverse space possible valid inputs order generate test inputs 
describe input model nondeterministic program describes valid inputs model checker traverse state space program 
assert property model checker check test input exists causes model checker produce counterexample valid test input generated counterexample trace produce test input 
important various techniques searching state space available gives flexibility generate large array test inputs achieve better coverage behavior system test 
test input generation java pathfinder model checker jpf analyzes java programs supports various heuristic search strategies example branch coverage random search 
section show model checker generate test inputs mars rover 
closely related korat tool generates test inputs java predicates model checking dedicated efficient search strategy 
counterexample capability model checker generate test inputs studied see survey full system model just input structure pre conditions suggested 
property generation mentioned earlier ideal goal particular test input generate properties checked executions program input 
precisely assume particular program want test domain input inputs 
construct objects 
need define domain observable behaviors 
shall regard executing program generating execution trace domain trace trace sequence observable events domain event 
define function execute input trace input returns execution trace generated program applied input 
defining domain event function execute practice amounts instrumenting program log events importance 
resulting execution trace consist logged events 
obviously need define domain property properties relevant application relation trace property determines traces satisfy properties 
say written trace satisfies property essentially needed function translate translate input property set input returns set properties regarded relevant test execution program input 
behaved program satisfies formula vi input 
translate 
execute experience temporal logic appropriate notation writing properties applications investigated studied subsequent sections 
particular application needs provide execute property generator translate generates set temporal logic properties particular input 
shall discuss aspects connection case studies 
runtime analysis runtime analysis consists instrumenting program observing execution instrumented program 
runtime analysis modules consist code instrumentation module augments program test code generates event log observer module evaluates event log conformance desired properties 
event log transmitted inter process communication stored file 
allows running instrumented executable remotely little impact performance system test 
case studies different runtime analyzers commercial tool extension temporal rover tool research tool 
systems described 
architecture runtime analysis framework designed allow different event interpreters easily plugged observer component 
test studies event interpreters algorithm analyzes temporal logic properties discussed concurrency properties 
algorithms discussed 
instrumentation framework instrumentation takes program properties expected satisfy produces instrumented version program executed generates event log information required observer determine correctness properties 
implemented general powerful instrumentation package instrumenting java bytecode 
requirements instrumentation package include power flexibility ease portability efficiency 
rejected alternative approaches instrumenting java source code debugging interface modifying java virtual machine violated requirements 
essential minimize impact instrumentation program execution 
especially case real time applications applications may particularly benefit approach 
low impact instrumentation may require careful trades computed locally instrumentation amount data need transmitted observer 
mentation package allows trades allowing seamless insertion java code program point 
code instrumented instrument specification consists collection predicate action rules 
predicate predicate bytecode instructions translation java statement 
predicates conjunctions atomic predicates include predicates distinguish statement types presence method invocations pattern matched fields local variables 
actions specifications describing inserted instrumentation code 
actions include reporting program point method source statement number time stamp executing thread statement type value variables expression invocation auxiliary methods 
values primitive types recorded event log value object unique integer descriptor object recorded 
implemented java api provides lower level instrumentation functionality 
general bytecode instrumentation particular worked remaining challenges respect instrumenting concurrency aspects program execution 
observer framework described run time analysis divided parts instrumenting running instrumented program produces series events observing events 
second part event observation see split stages event analysis reads events reconstructs run time context event interpretation 
note may event interpreters 
minimize impact program test log entries contain minimal contextual information log entries different threads interleaved 
event analysis interleaved entries reconstructs context 
contextual information transmitted internal events include thread names code locations reentrant acquisitions locks lock counts 
event analysis package maintains database full context event log 
allows writing simpler event interpreters subscribe particular event types accessible observer interface completely decoupled 
event interpreter builds model event trace may consist dependency graphs data structures 
event interpreter record relevant information keeping history events context maintained event analysis changes dynamically event evaluation 
information needs kept final output addition context information needs stored event interpreter 
analysis detects violations rules model show results stored data context information code locations thread names observer ev ev 
interpretation ys events event analysis internal events observable events interpretation result fig 

observer architecture 
temporal logic monitoring temporal logic general linear time temporal logic ltl particular investigated years specification language reactive systems 
ltl propositional logic standard connectives 
furthermore includes temporal operators eventually lg eventually occur op step dual past time operators past time past previous step 
example consider time formula 
states case holds eventually holds 
ltl property intuitively similar natural language capable describing interesting properties reactive systems 
metric temporal logic mtl extends ltl temporal operator augmented relative time real time constraint 
example units hold 
clock 
similarly lg requires true cycles underlying state cycle semantics define notion cycle 
mentioned experimented systems perform temporal logic monitoring 
temporal observer mtl monitoring tool code generator 
extends mtl forms parametrization multi instancing allows rule independently validated instance object class process thread parametrization time series data values enables verification properties temporal stability monotonicity 
consists gui editing temporal assertions graphical ltl mtl simulator execution engine 
builds executes temporal rules target program application run time listens event messages target application evaluates corresponding temporal assertions 
temporal observer respect temporal logics implemented specialized algorithms traversing execution trace forwards backwards rewriting automata gen eration implemented java maude 
briefly sketch algorithms refer interested readers elaborated descriptions 
efficiency runtime analysis algorithms important aspect research observer operates line 
crucial observation design efficient algorithms focusses segments temporal logics entire logic 
able develop optimal algorithms time past time temporal logics separately 
regard segmentation problem practice experience far rarely uses past time operators requirements formula 
algorithm going describe monitors time temporal logic formulas entirely rewriting technology 
idea maintain set monitoring requirements time ltl formulas modify accordingly new event emitted instrumented program 
formulas false means formula violated error message generated appropriate action taken 
rewriting rules inspired known recurrences temporal operators transform formulas new nonterminal event received mention called terminal events formula formula transformed formula hold receiving event example hold event remaining trace hold hold postponing obligation 
memoization hashing techniques provided advanced rewriting engines maude simple rewriting algorithm performs practice 
example able monitor events minutes formula stating safety policy traffic light controller yellow come green 
interested reader referred proofs correctness complexity analysis evaluation algorithm 
second approach building ltl observers automata construction 
rewriting algorithm monitoring past time ltl requirements formulas quite different time ltl 
dynamic algorithm approach monitoring past time ltl formulas 
concurrency analyzer multi threaded programs particularly difficult test due fact non deterministic 
multi threaded program consists threads execute parallel 
main issue programmer multi threaded application ensure mutual exclusion shared objects 
avoid data races thread writes object threads simultaneously write read object 
multi threading programming languages provide constructs ensuring mutual exclusion 
ensure mutual exclusion shared object thread acquire lock accessing object releasing 
threads acquire lock accessing object mutual exclusion guaranteed 
threads acquire lock don acquire locks accessing object risk data race 
eraser algorithm detect disagreements analyzing single execution traces 
eraser algorithm implemented tool 
deadlocks occur threads acquire locks cyclic manner 
example situation consider threads acquiring locks thread acquires releasing thread acquires releasing situation poses deadlock situation thread acquire thread acquires threads progress 
implemented algorithm detecting deadlock situations 
builds lock graph nodes locks edges represent lock hierarchy 
example edge edge example graph contains cycle cycle represents potential deadlock situation 
algorithm yields false positives false warnings false negatives missed deadlocks 
extension algorithm described reduces number false positives 
concurrency analysis integrated deadlock results graphically displayed uml message sequence charts 
case study planetary rover controller case study planetary rover controller particular executive subsystem developed nasa ames research center full account case study described 
executive receives plans actions rover requested carry executes plans 
description system including description plans input lo plan node block nodelist task condition node block task block node list nodelist node nodelist task action symbol fail duration duration time id symbol start condition condition condition condition continue failure time starttime endtime block id plan continue failure node list task id start condition time condition time action duration task id drive condition time action fail fig 

plan grammar left example plan right 
domain look 
outline plans test inputs automatically generated model checking describe plan set temporal logic properties automatically generated executive satisfy executing plan 
system description executive multi threaded system lines java code receives flexible plans planner executes plan language semantics 
plan hierarchical structure actions rover perform 
plans deterministic sequences actions 
increased rover autonomy requires added flexibility 
plan language allows branching conditions need checked flexibility respect starting time time action 
give short presentation simplified language description plans rover executive execute 
plan syntax plan node node task corresponding action executed block corresponding logical group nodes 
left shows grammar language note node attributes exception node id optional 
node may specify set conditions start condition true node execution condition true node execution 
condition includes information relative absolute time window indicating lower upper bound time 
continue failure flag indicates behavior node failure encountered 
attributes fail duration added original plan facilitate testing executive 
testing test case generation real actions executed require operating rover mechanics 
fail duration attributes replace actions testing 
fail flag task specifies action status execution duration specifies duration action 
right shows plan block tasks drive 
time windows relative indicated signs conditions 
plan semantics node execution proceeds steps wait start condition satisfied current time passes start condition node times node failure 
execution task proceeds invoking corresponding action 
action takes exactly time specified duration attribute 
note attribute testing replaces actual execution action rover 
action status fail fail true time conditions met status success 
action status indicates failure task failure 
execution block simply proceeds executing nodes node list order 
time exceeds condition node fails 
node failure execution returns sequence value failed node continue failure flag checked 
true execution proceeds node sequence 
node failure propagated enclosing nodes 
node failure passes top level plan remainder plan aborted 
test input generation shows java code referred universal planner generate plans test inputs executive 
exploit nondeterminism choose methods systematically generate possible plans number nodes specified structure specified grammar nondeterminism generate data values time conditions value specified 
assertion program specifies possible create plan executions reach assertion generate valid plans 
jpf model checker explore finite state space generated input plans jpf model checks universal planner 
different search strategies ic ic tic plan nn tr nn tr node plan print plan assert false static node nnodes return nu return null return return static node symbol action new symbol boolean fail nt duration choose task new task id action start fail duration nnodes return static node nnodes new node null block new block id start return static symbol id static start static boolean static id new symbol choose nt time choose start new time choose time choose new time fig 

universal planner generates input plans system test 
find multiple counterexamples assertion counterexample ran jpf simulation mode print generated plans file served input rover 
system analysis semantics particular plan naturally formulated tempo ral logic 
writing properties predicates start id true immediately start execution node corresponding id success id true execution node ends successfully fail id true execution node ends failure id denotes success id fail id 
instrumented code monitor pred 
plan wrote collection temporal properties predicates verified validity execution traces 
example properties plan shown right shown 
set properties fully represent semantics plan approach appeared sufficient catch large amount bugs 
plan initial node plan eventually start 
start plan oi plan starts task execution time units 
start qi drive task starts successfully time units eventually terminate failure 
success drive task ends successfully task eventually execution 
drive plan termination task implies successful termination plan due continua failure flag 
task successfully duration time window 
drive task dri fail due fail 
fig 

temporal logic properties representing partial semantics plan 
purpose case study find number seeded errors rover number different technologies including runtime analysis model checking static analysis traditional testing 
just focus results runtime analysis done framework described 
monitor temporal properties plan satisfy 
generated formulas plan hand similar fashion formulas 
approach errors pertaining plan semantics easily discovered 
worth noting techniques plan semantic errors temporal logic runtime analysis technique 
possible generate properties automatically 
rest errors related concurrency concurrency analysis see section 
concurrency errors discovered way 
seeded data races seeded cyclic deadlocks resource deadlocks errors tool find 
errors find communication deadlocks involving java wait notify constructs 
errors subtle required analysis time 
note supports hypothesis framework finding large class errors may finding subtle errors advanced techniques may required model checking find concurrency errors rover 
case study space craft fault protection system section describe ongoing application framework verification experiment targeted mission critical nasa application called fault protection system fps 
fault protection system monitors critical hardware software components spacecraft executes corrective responses detected faults 
approach case study 
write small program generate test cases fps 
write partial specification instantiation fps form ltl linear temporal logic assertions 
instrument fps emit log allows checking ltl assertions 
write test driver runs generated test invokes ltl observer analyze generated log 
observer reports test cases assertion combinations failed inconclusive 
system description fps system analyze consists reusable core engine portion customizable specific spacecraft 
fps complex logic oriented system 
code dense decision points yielding large number potential control paths 
complexity mission criticality reusability code high level reliability demanded 
fps system study model checking experiment reported 
fps nally written flown spacecraft 
new implementation java developed 
implementation provided wrapper allows run stand simple command interface 
experiments java implementation 
commands informs fps spacecraft problem symptoms 
fps maintains customizable mapping symptoms faults responses 
basic mode execution respond symptom mapping symptom fault fault response execute response 
fps executes response time 
symptoms may reported requiring responses queued 
addition responses different priority levels responses interrupted responses call responses subroutines 
addition responses symptoms faults may various modes enabled disabled commands reset responses fault protection system 
furthermore fps respond ground commands execute response manner differs responses invoked fault protection 
capabilities contribute significant complexity fps 
fps core engine specified finite state machines signal invoke generating events 
state machines fps engine instances state machine symptom fault response 
fact state machines response 
part engine records status response second encodes semantics responses turn device 
code automatically generated response state machines part code base instantiation fps 
fact analyzed particular instantiation fps responses 
test input generation application simple program lines python code written generate test cases 
test case fps simply sequence commands 
generator generated commands sequences specified length making independent random selections individual commands 
generator parameterized number test cases generated number commands test case relative frequency command command relative frequency arguments 
subtlety process 
noted execution response takes time 
generally time unit response performs action described single state state machine transitions new state 
signalling new time step corresponds execution command signal advance clock 
relative frequencies commands need selected response queues overflow pending responses test behavior multiple faults required response 
owen malley nasa writing test case generator 
system analysis temporal observer check ltl formulas execution traces generated test execution 
partial static ltl specification fps 
specific single input case experiment 
code design documents describing state machines fps test data expected results 
clearly purpose specification describe intended semantics program independently program program ideal 
places code exhibits inconsistencies resolving essential specification creation 
fact process bugs 
ltl natural notation describing fps 
fps transaction system 
top level functionality command processor 
reads commands executes potentially queuing actions 
characterizing state fps state state machine value certain variables characterizing action time command state natural methodology developing specification 
addition properties asserting action taken response relevant command insure program intended 
subtlety process mapping specification level concepts completes suitable code level event 
may didate predicates events code level correspond specification level predicate event 
code level predicates may differ subtle ways may may correctly model intended semantics 
effective relate predicates events closely inputs output products program 
experiments progress 
components described place executing 
additional strengthen ltl specification 
date identified program bugs inaccuracies specifications 
bug significant existed version flew spacecraft 
case study proposed framework respects 
model checker generate test cases 
model checking approach fine enjoy benefits described 
second defined properties universal correctness properties walid inputs 
framework suggests defining function maps input set properties specific input 
case straightforward define universal properties evident alternative approach property specification easier 
note specification constructed formalizing semantics type command account computation state independently commands 
approach followed knowing commands sequence help simplifying property set 
framework testing automated test case generation runtime analysis 
framework requires construction test input generator property generator application 
arbitrarily large test suite automatically generated executed verified conformity properties 
input sequence generated test input generator property generator constructs set properties hold program test executed input 
program instrumented emit execution log events 
observer checks event log satisfies set properties 
take position writing test oracles temporal logic formulas natural leverages algorithms efficiently check execution test input conforms properties 
property definition difficult domains effective approach write property generator universal set properties independent test input 
note properties need completely characterize correct execution 
user choose spectrum weak easily generated properties strong properties may require construction complex formulas 
see proposed framework complementary approach testing may applied opportunistically test selected system behaviors 
proposed demonstrated model checking test case generation 
exploring improve quality generated test suite altering model checker search strategy symbolic execution 
near continue development complete testing environment rover seek get technology transferred nasa engineers 
continuing instrumentation java bytecode 
parallel effort robert filman nasa ames riacs colleagues source code instrumentation tool developed ideas aspect oriented programming 
concerning observer part various interpreters temporal logic 
current devoted design specification language attractive engineers powerful capture majority practical system requirements 
investigating new algorithms concurrency analysis extend scope deadlocks data races identified 
research group done fundamental research areas software model checking model checking application just input domain static analysis 
general ultimate goal combine different technologies single coherent framework 

bensalem havelund 
reducing false positives runtime analysis deadlocks 
submitted publication october 

boyapati khurshid marinov 
korat automated testing java predicates 
proceedings international symposium software testing analysis issta july 

brat giannakopoulou goldberg havelund lowry pasareanu visser 
comparative field study advanced verification technologies 
internal report preparation submission november 

clavel duran eker lincoln marti oliet meseguer quesada 
maude specification programming rewriting logic march 
maude system documentation maude 
csl 
sri 
corn papers 

cohen 

compaq www compaq 
com java download 


temporal rover atg rover 
spin model checking software verification volume lncs pages 
springer 


monitoring temporal rules temporal data 
submitted publication october 

feather fickas 
model checking validation fault protection system 
proceedings sixth ieee international symposium high assurance system engineering 
ieee computer society october 

gamma helm johnson 
design patterns elements reusable object oriented software 
addison wesley 

gurevich schulte 
generating finite state machines state machines 
proceedings international symposium software testing analysis issta july 

visser 
model checking java programs structural heuristics 
proceedings international symposium software testing analysis issta 
acm press july 

hartman 
model test generation tools 
www 

de documents cs 
pdf 

havelund johnson rou 
specification error pattern program monitoring 
proceedings european space agency workshop board autonomy netherlands october 

havelund rou 
monitoring java programs java 
havelund rou editors proceedings international workshop runtime verification rv volume electronic notes theoretical computer science pages paris france july 
elsevier science 

havelund rou 
monitoring programs rewriting 
proceedings international conference automated software engineering ase pages 
ieee cs press 
island california 

havelund rou 
rewriting approach trace analysis 
submitted journal publication september 

havelund rou 
synthesizing monitors safety properties 
tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer 
best award etaps 

hong lee ural 
temporal logic theory test coverage generation 
proceedings th international conference tools algorithms construction analysis systems tacas april 

king 
symbolic execution program testing 
communications acm 

korel 
automated software test data generation 
ieee transaction software engineering august 


om 

pnueli 
temporal logic programs 
proceedings th ieee symposium foundations computer science pages 

savage burrows nelson sobalvarro anderson 
eraser dynamic data race detector multithreaded programs 
acm transactions computer systems november 

tracey clark mander 
way forward unifying dynamic test case generation optimisation approach 
international shop dependable computing applications pages 
ifip january 

vec 
vec com 

visser havelund brat park 
model checking programs 
proceedings ase th ieee international conference automated software engineering 
ieee cs press september 
