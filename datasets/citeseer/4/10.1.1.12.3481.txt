haystack platform authoring user semantic web applications dennis quan david huynh david karger mit ai laboratory lcs technology square cambridge ma usa 
overview web fulfilled practical need users allowing conveniently author browse share content online 
similarly believe semantic web technologies quickly prove directly useful users 
haystack project brings semantic web users leveraging key semantic web technologies allow users easily manage documents mail messages appointments tasks haystack user interface capable visualizing variety different types information including mails items news feeds web page bookmarks :10.1.1.13.8368
way haystack interface constructed gives clues notion underlying data model represented resource description framework rdf standard data representation language semantic web 
presenting information manner familiar intuitive users key users familiar ontological vocabulary descriptive logic 
words user semantic web applications need developed way users need aware semantic web involved 
support cause haystack built extensible platform allows various kinds functionality developed easily independently incorporated seamlessly 
wish authoring rdf content haystack features act content easy authoring html web content 
describe tools haystack provides semantic web developers building user applications rdf 

related believe availability tools prototyping building programs produce content render content semantic web help improve reception semantic web technologies 
current generation tools represents step direction expose programming interfaces manipulating information 
toolkits generating processing visualizing graphs rdf data widely available platforms 
tools editing data specific ontologies ont mat prot give knowledge engineers powerful tools creating manipulating data corresponds specific schemata :10.1.1.21.3877
furthermore server side software packages developed help users aggregate rdf information presentation users 
building toolkits haystack exposes functionality users interacting information higher levels abstraction 
exposing information series rdf statements haystack concentrates concepts important users information documents messages properties annotations copyright held author owner 
www may budapest hungary 
acm xxx 
karger ai mit edu 
adenine system haystack sizeable amount code agents user interface components devoted creation manipulation rdf encoded metadata 
developed language called adenine specifically suited manipulating rdf special syntactic runtime support 
adenine supports standard programming constructs loops statically scoped variable bindings respects resembling version python native support rdf data types built 
lisp adenine data definition language imperative programming language 
rdf statements described syntax similar notation 
pieces executable adenine code called methods named uris rdf properties 
lisp functions adenine methods representable data language adenine ontology describes way encode execution adenine method series instruction resources linked instruction predicates 
information adenine web site haystack lcs mit edu previous :10.1.1.13.8368:10.1.1.13.8368

agents services past programs aggregated data multiple sources mail merge customer relationship management software capable speaking numerous protocols different back ends generate results 
rich corpus information user haystack possibility automation significant services agents written single unified abstraction 
service agent interchangeably document autonomous running entities capable receiving sending messages haystack 
furthermore agents written help users deal problem information overload extracting key information mail messages documents presenting user summaries 
agents haystack callable entities expose methods maintain state 
core agents written java written adenine python agents hosted interpreter 
utilize rdf ontology derived wsdl describing interfaces agents noting server processes hosts agents 
consequence able support different protocols communicating agents simply passing process java objects rpc mechanisms post soap 
words haystack agents effect web services implement specific java interface appropriate wsdl metadata entered store system takes care exposing agents protocols supported 

slide ontology haystack uses rdf things model user interface 
bottommost layer slide ontology allows developer specify appearance formatting user interface elements buttons paragraphs text tables 
slide modeled html html assembled tree structure expressible rdf trees graphs 
adenine hook executable code events mouse clicks 
individual slide elements described rdf resources rendered screen java components 
key benefits rdf representation html 
feel way data conforms rdf schema just important schema 
slide conjunction adenine user interface concepts discussed enables rdf describe schema ideal mode presentation 
second slide ontology extensible needs simply add rdf description new slide element rdf store order component supported 
fact support writing components completely adenine providing pure rdf solution distributing presentation logic 

views user interface architecture uses slide ontology information terms views 
specifically view component displays certain types resources particular way 
rdf class may number different views associated 
furthermore views described rdf allowing characterized rdf classes support way display resources full screen line summary applet 
resource needs displayed haystack certain way full screen view chosen possesses necessary characteristics 
components views enable pieces user interface functionality reused 
developer line summary view contacts displaying person name telephone number provides rdf description system enables developers need display summaries contacts reuse component 
best example reuse seen case views embed views resources 
example view address book containing contacts mailing lists needs implement views displaying contacts mailing lists system provides way views specify resource needs displayed certain location screen certain fashion line summary 
way composite views constructed leverage specialized user interface functionality child views embedded 
system responsible instantiating views keeping track child views embedded parent views system provide default implementations certain direct manipulation features free 
example drag drop user starts drag view system knows resource represented view view dropped user interface drop target informed resource involved simply textual graphical content particular representation dragged 

operations systems provide mechanism exposing functionality applied specific circumstances 
example java expose methods class definition perform specific tasks invoked 
define functions accept arguments particular types 
windows define verbs bound specific file types perform actions opening printing document activated context menu windows explorer shell 
general mechanisms permit parameterized operations defined exposed clients 
haystack analogous construct called operation accept number parameters certain types perform task 
operations adenine methods expose pieces functionality user interface 
definition operation includes basic information name icon set parameters generated automatically adenine compiler definition adenine method 
parameters names type constraints 

constructors particular type functionality provided applications deserves special focus object creation 
object creation manifests different forms ranging addition text box slide presentation graphics program composing mail 
applications support object creation usually expose interfaces allowing users choose appropriate type object create find template wizard help guide process creating object 
rdf process creation na thought fresh uri followed rdf type assertion 
corresponding choice list creating objects rdf implemented displaying list rdfs class resources known system 
issues addressed solution 
user mental model object creation may map distinct activities programmatic sense creating resource establishing default view population resource default data 
example creation picture album perspective data model straightforward picture album simply collection resources happen pictures 
user begins viewing blank picture album address book view may believe system created wrong object 
respect third point gamma assert object creation come various ways ranging straightforward instantiation creating objects fixed pattern 
haystack enables flexibility constructors operations initialize resource instance fashion 

acknowledgments supported mit ntt collaboration mit oxygen project packard foundation fellowship ibm 

berners lee primer getting rdf semantic web 
www org swap primer html 
eriksson fergerson shahar musen automatic generation ontology editors 
proceedings th banff knowledge acquisition workshop banff alberta canada 
gamma helm johnson vlissides design patterns 
boston addison wesley 
handschuh staab maedche cream creating relational metadata component ontology driven annotation framework 
proceedings cap 
huynh karger quan haystack platform creating organizing visualizing formation rdf semantic web workshop eleventh world wide web conference www :10.1.1.13.8368

www org 
stojanovic maedche staab studer sure seal framework developing semantic portals 
proceedings international conference knowledge capture 
