retrospective thin locks david bacon ravi chet murthy ibm watson research center box yorktown heights ny mauricio serrano intel microprocessor research labs mission college blvd santa clara ca 
years old 
owes influence explosive growth internet java programming language period 
adoption java production commercial applications widely viewed risky primary barriers acceptance poor performance 
aside interpreted java incorporated number features previously seen mainstream programming language garbage collection dynamic loading concurrency 
features created various sorts performance challenges 
tell java spending half time synchronization single threaded benchmarks surely form large portion java programs 
led thinking single threaded java program fast thread safe libraries synchronization extensively 
previous experience hermes programming language developed ibm years earlier led conviction scheduling performed user level optimized common case concurrency incorporated language order magnitude slowdowns commonly accepted 
thin locks essentially reduce common case locking single compare swap operation 
compare swap long feature mainframe architectures ibm time began thin locks compare swap available newer generations microprocessors 
notably absent original ibm power architecture intel supported alternate kernel locking 
thin locks highly successful providing large speedups java applications 
general design met goals set speed compactness scalability simplicity maintainability 
importance aspects overlooked 
thin locks provide fast path layer fails pre existing heavier weight locking mechanism 
ability layer locking protocol greatly simplifies implementation improves portability 

variations improvements aspects thin locks improved various ways albeit expense original desiderata years acm sigplan conference programming language design implementation selection copyright acm 
busy waiting lock inflated arbitrary duration lack deflation contended locks potentially leading high resource overheads certain pathological cases space overhead bits object lock objects locked atomic operations locking objects locked times row thread 
problems seen implications locality principles locking exploited thin locks 
busy waiting problem busy waiting dealt 
suggested special contention bit reside separate word object header signal contention allowing variant thin locks busy wait 
header bits scarce especially occupy multiple words 
gagnon proposed variant algorithm placed contention flag thread structure lock owner object 
solutions completely satisfactory complicate algorithm slow fast path lock release code 
deflation thin locks algorithm lock expanded 
contention large number objects possible finite lock resources consumed causing excessive space consumption resource failure 
inflation overflow problem practice satisfying solve problem 
agesen alternative approach called meta locking word header contains bit meta lock bit data field meaning determined meta lock bits 
meta lock obtained data field updated point lock structure information normally resides data field hash code gc state temporarily moved lock structure 
object unlocked reverse operation performed assuming queued threads deflation part algorithm 
meta locking locks true inflates requiring allocation lock structure copying data field fast path 
lock data separate structure additional cache line wasted 
simple approach deflation seen published literature simply deflate locks garbage collection assuming garbage collection world 
applied thin locks requiring additional synchronization locking code 
space consumption speedup due thin locks secondary benefit default object size reduced words lock consuming bits 
similarly meta locks consume bits common case full bit word lock inflated 
fundamentally substantive improvement reduce size object header single word 
bacon showed practical combining number heuristics synchronized blocks far common synchronized methods objects locked synchronized method 
modification thin locks lock treated implicit data field declared synchronized method object hierarchy 
allows full bit word thin lock offset varies object object compile time constant synchronized method invocations 
atomic operations cases thread repeatedly lock object locks intervening thread 
degenerate case object synchronized shared quite common practice 
situations atomic operations expensive portion operation portion cost rising architectural trends required uniprocessors significantly optimized multiprocessors eliminated entirely case java synchronization semantics non local cache effects bacon fink proposed variant thin locks objects initially owned creator lock unlock operations object owning thread performed simple load store operations compare swap non owners heavy weight protocol get lock effectively sending message owning thread asking change state lock 
independently developed similar scheme better locality heuristic owner 
implemented algorithm showed provide significant speedups cases 

shared memory 
thin locks related shown possible implement java ubiquitous synchronization object potentially lock manner space time efficient 
experience java concurrency semantics broader implications 
knowledge java language attempt define precise semantics shared memory concurrency furthermore wide availability shared memory multiprocessors running java semantics academic interest 
turns original definition shared memory semantics java flawed attempts underway correct revise 
resulting definition quite complex scope majority programmers fact designers considerable difficulty defining semantics interaction hardware software reordering optimizations 
begs question language definition complex understood users 
difficulties defining clean simple semantics shared memory parallelism language level potential performance problems implementing definition safely believe worth questioning appropriate programming model general purpose high level programming language 
explored possibility defining java language access shared objects mediated true monitors encapsulate sharable data prevent data races 
related taken different approach retaining shared memory model requiring annotations allow program provably race free compile time 

java surprisingly rapid acceptance fueled explosive growth internet introduced number technologies mainstream programming languages garbage collection dynamic loading concurrent programming 
turn stimulated enormous amount research areas rapidly moved laboratory marketplace 
thin locks example trend 
agesen detlefs ramakrishna white efficient meta lock implementing ubiquitous synchronization 
oopsla conference proceedings object oriented programming systems languages applications oct 
sigplan notices 
bacon fink method provide concurrency control objects atomic operations non shared objects 
patent filed august 
bacon fink grove space time efficient implementation java object model 
proceedings sixteenth european conference object oriented programming june magnusson ed vol 
lecture notes computer science pp 

bacon strom guava dialect java data races 
acm conference object oriented systems languages applications oct 
sigplan notices 
boyapati rinard parameterized type system race free java programs 
oopsla conference proceedings object oriented programming systems languages applications oct 
flanagan freund type race detection java 
proc 
sigplan conference programming language design implementation june pp 

gagnon hendren sablevm research framework efficient execution java bytecode 
proceedings java virtual machine research technology symposium apr pp 

gosling joy steele java language specification 
addison wesley reading massachussetts 
lock reservation java locks atomic operations 
oopsla conference proceedings object oriented programming systems languages applications nov 
study locking objects bimodal fields 
oopsla conference proceedings object oriented programming systems languages applications oct 
sigplan notices 
pugh fixing java memory model 
proceedings acm java grande conference san francisco 
strom bacon goldberg lowry yellin yemini hermes language distributed computing 
prentice hall 
