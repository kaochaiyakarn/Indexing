delivering semantic web services massimo paolucci robotics institute carnegie mellon university forbes ave pittsburgh pa usa paolucci cs cmu edu growing infrastructure web services assumes programmer loop connections web services directly programs web service composition 
emerging technology daml semantic web allows web services connect transact automatically minimal intervention programmers 
discuss problems related autonomous web services daml provides information solve 
furthermore describe implementation demonstration systems technology system application business assembles computers automatically finds partners providing parts automatically second describes commerce application helps user organize trip meeting automatically interacting different web services calendar user stored ms outlook 
results experiments show web services deployed web interact provide information dynamically second transaction carried automatically programmer intervention 
keywords web services semantic web semantic capability matching 
growing infrastructure web services xml unifying language guarantee web services interoperability 
xml provides standard common syntax shared web consequence guarantees syntactic interoperability 
result web services exchange xml encoded information parse message verify adheres expected formats eventually locate piece information message 
unfortunately web services means decode meaning messages exchanged extract information contained 
web services awkward position understanding structure message understanding content messages 
limitations representation entailed xml reflected growing infrastructure web services requires programmers web services information produces www specific release location copyright information 
www submission cls 
supported acm 
copyright held author owner 
www may budapest hungary 
acm xxx 
katia sycara robotics institute carnegie mellon university forbes ave pittsburgh pa usa katia cs cmu edu kawamura research development center toshiba tokyo japan isl rdc toshiba jp interaction partners messages exchange interpretation messages receive 
result set rigid web services reconfigure dynamically adapt changes direct human intervention 
web services hardcoded definite set providers modify pattern interaction new provider line better cheaper 
similarly react problems providers web service goes line reason supply chain affected web services constitute nodes chain look alternative providers 
ideally web services act autonomously require minimal human intervention possible 
web services able register autonomously infrastructure registries uddi addition infrastructure registries locate providers services need able transact web services sending information formatted way understand able interpret information receive response 
autonomous web services minimize human intervention interaction web services allowing programmers concentrate application development able recover failures efficiently automatically reconfiguring interaction patterns 
example partners failing unreliable may able find reliable partners similarly new cheaper anyway better provider comes line web services able switch new provider 
autonomous web services need able find partner web services order need able describe register capabilities public registries locate web services specified capabilities 
capability information crucial web services locate bases services provide bases name name deploys web service 
addition web service information interact provider means know interaction protocol provider binding information 
crucially information allow requesting web services provider decode information exchanged specify format messages exchange remote procedures call semantic type information exchange 
view embraced daml defines daml ontology description web services attempts bridge gap infrastructure web services essentially wsdl soap semantic web 
words daml bridges gap specification format information exchanged specification meaning 
daml assumes view web services wildly shared community 
assumes transaction web services involves parties provider service requester service infrastructure component uddi facilitates location provider possibly facilitates transaction provider requester 
furthermore daml allows flexible assignment roles web service provider transaction requester allows role switch transaction 
daml constructed modules provide description different aspects web services 
called profile description web service transformation implements described transformation inputs web service requires outputs generates 
second module process model characterizes web service specifically describes interaction flow web service function produced step 
third module called grounding specifies input outputs step mapped wsdl specifications messages web services exchange 
daml provides information web services need interact web 
daml supports discovery allowing web services describe capabilities service profile matched requests capabilities 
daml capability description capability matching extends uddi registry allowing web services register capabilities locate providers functionality seek :10.1.1.120.1500:10.1.1.126.670
provider located requesting agent process model grounding interact provider 
process model describes interaction workflow provider requester derive information provider needs time 
grounding requester compiles messages exchange provider 
tested daml construction demonstration applications stress different aspects daml 
system application hypothetical computer manufacturer looks providers computer parts 
goal computer manufacturer locate providers parts computer negotiate prices parts schedule delivery 
second application variant travel management application interesting case application web services 
application goal requester locate travel agent web service book flight meeting synchronizing schedule flight schedule user stored ms outlook 
remaining discuss detail architecture applications 
specifically section discuss challenges automatic composition web services section discuss daml meets challenges section discuss architecture web service section discuss details implementation section conclude 

composition cycle transaction web services typically involves parties requester 
providers registry uddi supports web services transaction possibly mediates requester provider 
roughly speaking requester corresponds client provider corresponds server expect web ser matchmaker available www ri cmu edu requester problem store compile request request report matches registry match select provider compile message send reply interpret response problem solved advertise composition cycle 
provider selection provider interaction vices able play roles instance web service may client transaction server transaction 
furthermore transaction client server relation may switch server asks client decide alternatives provide additional information 
web services composition follows cycle described segmented phases phases location provider interaction requester provider 
consistently registries uddi assume provider comes line advertises registry known available requesters 
strictly speaking advertisement provider part transaction registration multiple transactions essential precondition transaction take place 
location providers process locating provider composed stages requester compile request provider send registry 
second registry match request advertisements stored web services available web third requester selects provider closely fits needs 
requester point knows problem expects provider solve idea providers available solve problem 
order find provider needs able inquire registry locate web services give capability 
web services able locate indexed services provide name organization fielded 
requester looks provider compiles request describing hypothetical web service provides service sought 
automatic compilation request requires abstraction problem requester faces capabilities requester expects provider order solve problem 
task registry locate advertisement matches request 
matching request advertisement guarantee selected web service produces effects requester expects 
crucial stress matching process take account different parties different perspectives may provide radically different descriptions service 
matching process restricted exact match request provided advertisements allow degree matching web services provide service similar requested selected web services definitely provide service discarded 
result list potential providers requester select provider 
selection providers requires type registry outside registries offered growing web services infrastructure uddi 
uddi stores host useful information web services information organization fielded web service binding information allow web services interact unbounded set properties called tmodels allow attach additional information web service 
problem uddi explicit representation web service 
search web service capability difficult 
example locate web service reports weather information requester may look web services contain tmodel associated classification services naics specified weather providers web services descriptions contain tmodel associate web service look intersection results searches 
problem course type search distinguish weather services provide information weather services may provide information weather countries 
uddi misses form capability representation capability matching extremely difficult find web services desired capability uddi 
selection provider result matching request advertisements result number matches requester select provider wants 
general hard fast rule selection provider soon turns domain specific decision 
simplest thing select provider highest score web services reported registry 
general approach decision theoretic reasoning requester selects provider maximizes utility function practice web services explicit utility model leverage 
types information contained request advertisement credit history provider amount requester estimates order satisfy inputs preconditions expected provider general likelihood requester gather input information achieve preconditions expected provider 
strategies proposed assume requester select provider interact 
decision may extremely risky inefficient world web services 
nice part web services run time different machines implementing actual parallelism 
consequence requester may attempt interact multiple providers time advantage delaying selection provider reduces risks early decision 
course problem strategy requester may commit buy service multiple providers incurring additional costs gain 
strategy followed requester aware place transaction commits buy point requester may commit provider 
example requester interested buying books may try interact book selling web service attempt find cheaper 
strategy long requester selects web service buy commits buy book providers 
interaction provider provider selected requester initiate transaction 
support interaction provider public interaction protocol declaring information expects requester order format information binding information specify ports provider requester transaction 
declaration sequence messages provider 
needs declare material consequences step protocol 
current web services standards address different parts problem 
protocols xlang wsfl bpel ws address problem describing temporal part interaction protocol specifying workflow models describe sequence messages exchanged 
wsdl maps descriptions information exchanged web services message formats binding specify message delivered transmission protocol 
specification interact protocol really allow successful transaction requester derive interaction protocol provider information receives 
discussion commitments previous section provides argument favor requirement order compute commitments requester understand consequences steps protocol requester avoid expensive commitments need 
expressing consequences transaction problem parallel interaction multiple web services problem single provider single requester 
example requester want sure goods delivered provides payment information money 
types inferences impossible provider specifies consequences message exchange requester 

implementing web services daml analysis composition cycle led establish expect language describes web services 
requirement language supports description capabilities web services words description function web service accomplishes 
furthermore algorithm indexing descriptions comparing infer describe function 
second requirement language allows specification interaction protocol provider support specification actual consequences interaction 
lastly support mapping information inputs expected provider outputs generated scheme information transfer allows requester provider exchange actual messages 
requirements satisfied possible construct infrastructure web services centered registry performs capability matching 
web services find infrastructure provides sufficient information interact 
daml growing infrastructure attempts satisfy requirements described 
daml emerging web services description language enriches web services descriptions wsdl semantic information daml ontologies semantic web 
daml organized modules profile describes capabilities web services additional features help describe service 
second module daml describes process model web service specifically provides description activity web service provider web service requester derive interaction protocol consequences message exchange 
third feature daml grounding description information exchanges described process model mapped actual messages provider requester exchange 
service profile role daml profile describe web service capabilities additional features web services provides rich description web service 
daml describes capabilities web services functions produce transformation 
transformation happens levels information level set inputs transformed set outputs concrete level set conditions true false 
example consider travel booking web service information level may require departure arrival information provides generates flight schedule confirmation number concrete level books flight generate ticket charges credit card money available account reduced 
capabilities daml represented levels information level represented inputs require outputs generate state level preconditions web service execute effects web service generates 
different web services different features may capabilities daml allows specification host additional information web service may help selection process 
additional information consists category web service described classification service classification schema parameters restrict web service quality rating specify web service provided 
daml just web services representation imply form processing relatively easy implement matching algorithm recognize web services advertisements match request 
matching engine takes advantage underlying daml logic infer logic relations input outputs request input outputs advertisements :10.1.1.126.670
complete description algorithm outside scope main idea outputs request subsumed outputs selected advertisements condition guarantees selected web services provide expected information 
furthermore matching engine ranks advertisements bases input matching inputs match inputs request subsume inputs advertisement 
condition selects services requester information invoke 
daml profiles play role similar role uddi entries uddi registry 
data structures provide description web services possible construct mapping daml records uddi tmodels encode capability information :10.1.1.120.1500
capabilities encoded uddi matching engine daml matching algorithm retrieve web services uddi bases capabilities 
initial version registry implemented experiments described 
process model process model fulfills tasks specify interaction protocol sense allows requester know information send provider information sent provider time transaction 
addition extent provider public processes allows client know provider information 
process model defined ordered collection processes 
daml process model distinguishes types processes composite processes atomic processes 
atomic processes correspond operations provider perform directly 
composite processes describe collections processes atomic composite organized basis control flow structure 
example sequence processes defined composite process type sequence 
similarly conditional statement choice defined daml composite process 
daml process model allows type control flow structure including loops sequences conditionals non deterministic choice concurrency 
expressivity daml process model represent arbitrary workflow 
processes defined transformations initial state final state 
initial state defined inputs process set preconditions process run successfully 
inputs represent information web service needs collect execute process correctly preconditions represent conditions true execution process succeed 
result process described set outputs information results execution process set effects represent physical changes result execution process 
daml distinguishes types input outputs type internal input outputs case output process feed input process 
second type external input outputs define information provided requester reported requester 
interaction provider requester analyzes process model infer process provider currently executing 
requester particularly interested input provider needs outputs result execution process requester provide input information interpret output information 
process model interpreting information received provider requester infer information provider expects time information provider send 
implicitly process model provider specifies interaction protocol provider requester providing details information provider needs order 
message format binding information specified daml grounding 
specification preconditions effects processes allow specification consequences execution 
preconditions specify conditions process executed effects specify results execution process 
example precondition buy action credit card valid effect credit card charged 
role preconditions provide way requester reduce failures requester knows preconditions satisfied provider able execute correctly process 
description effects process specify consequences execution process instance buying process consequence transferring ownership goods requester know execution process goods 
specification input outputs preconditions effects processes daml process model supports reasoning needed requester interact provider 
side supports specification interaction protocol provider side provides information requirements satisfied requester execute web service correctly result execution processes 
requester information decide give provider knowing requires consequences choice 
daml grounding daml grounding transforms description information exchanges provider requester messages exchanged net procedure call 
specifically daml grounding defined mapping atomic processes wsdl specifications messages 
wsdl inherits definition message binding information compose messages extracted execution process model 
daml grounding provides connection growing web services infrastructure specifies role played daml role played wsdl 
furthermore facilitates linking non daml web services web services rely daml describe workings 

web service architecture discussion shows daml provides promising framework control web services interaction 
provides information web services need negotiate autonomously internet minimizing interventions programmers maintaining flexible reliable connection providers 
problem harvest information available real implemented web services 
center trying develop web service architecture take advantage information available daml descriptions produce daml toolkit facilitates implementation daml enabled web services 
requirement daml enabled web service understand structure information contained daml description 
requirement entails ability compiling correct requests service processing descriptions services daml processor web services interaction toolkit daml processor application description daml web service architecture retrieved correctly workflow described process model drawing correct inferences preconditions effects processes process model 
precondition requirement web services understand ontologies encoded daml 
dealing daml ontologies fundamental allows web service derive inferences different statements included daml description 
furthermore required extract information included messages exchanged web services long information compiled daml web service needs include ways wsdl descriptions grounding send receive messages correctly 
module responsible exchange messages web services managing wsdl description managing network protocol transmission information reception information 
architecture adopted displayed 
assumes daml processor constructed top daml processor 
way daml encoded information treated ontology web 
daml processor access web services toolkit manages message exchange web services consistently wsdl descriptions providers 
module web service application specification implements main body web service 
daml mute application type application principle take place 
application level responsible decisions daml 
instance application level responsible information extracted messages received web services decide information send web services 
order take advantage flexibility supported daml application level support decision system non deterministic choices maintaining efficiency control behavior web service 
employed retsina planner control application level 
retsina planner htn planning paradigm provides reliable efficient planning scheme :10.1.1.145.3912
advantage htn planning planning schemes htn plans decomposition introducing set actions plan planners introduce action time 
furthermore htn planning principle complexity planners principles practice reduces number decisions planner resulting overarching efficiency gain 
retsina planner extends htn planning adding interleaving planning execution basically allows web service execute plan completely formed 
interleaving planning execution number advantages traditional planning 
allows web service discover providers available plan course actions function features 
second advantage allows replan react unexpected situations 
instance providers description system scheduling trip daml pi meeting fails respond requester may look alternative provider interact 

evaluation implementation test approach daml implemented systems different characteristics take advantage daml web service architecture described 
simple application web service looks business partners automatically negotiate business agreements 
second application application travel domain web service functions personal assistant user organizes trip conference booking trip conference verifying availabilities user schedule stored ms outlook 
system describes application web service task assembling computers looks providers computer parts 
architecture web service described 
interface agent provides operator way interact planning agent compare options combinations business partners schedules costs 
planning agent employs planning scheme described achieve goals proposed operator case find providers computer parts organize supply chain meets cost time limitations 
achieve goals planning agent queries matchmaker potential parts suppliers uses toshiba fujitsu financial services verify suppliers bankrupt production time affecting business 
planning agent contacts suppliers negotiate schedule costs 
challenge system support interaction web services provided different organizations cally spread orchestrate bases daml information 
furthermore allowed experiment suppliers selection information exogenous daml 
unfeasible expect daml profiles contain information requesters need provider case requester planning agent uses financial services gather information providers contacting 
matchmaker system daml enhanced uddi uses freely available uddi server store daml advertisements encoding described allowing capability matching uddi :10.1.1.120.1500
organization second example displayed goal book trip conference daml pi meeting 
assume organizers meeting publish web service provides information meeting time location talks participants 
retsina calendar agent user plans trip conference 
calendar agent verifies availability checking schedule user stored ms outlook uses matchmaker previous system find airlines car rental companies hotels 
uploads schedule trip outlook 
example extends previous complex process models implement web service loaded dynamically control interaction client side 

initially ibm test uddi site switched uddi server description system scheduling trip daml pi meeting outlined different challenges faced autonomous web services 
furthermore showed daml tackles challenges providing information allow web services connect interact autonomously little intervention programmers 
propose web service architecture takes advantage daml information support automatic discovery interaction web services 

acknowledgments ankolekar nishimura terry payne rahul sing useful discussions inputs planning implementation 

additional authors 
berners lee hendler lassila 
semantic web 
scientific american 
bureau 
north american industry classification system naics 
www census gov www naics html 
christensen curbera meredith weerawarana 
web services description language wsdl 
www org tr note wsdl 
coalition 
daml web service description semantic web 
iswc 
committee 
daml oil march language 
www daml org daml oil index html 
curbera goland klein leymann roller thatte weerawarana 
bpel ws white 
www ibm com software solutions webservices 
paolucci sycara 
interaction commitments initial approach 
agents 
erol hendler nau :10.1.1.145.3912
htn planning complexity expressivity 
aaai seattle 
leymann 
wsfl white 
www ibm com software solutions webservices 
paolucci kawamura payne sycara :10.1.1.120.1500
importing semantic web uddi 
proceedings services semantic web workshop 
paolucci kawamura payne sycara :10.1.1.126.670
semantic matching web services capabilities 
iswc 
paolucci shehory sycara 
execution multiagent team planning environment 
electronic transactions artificial intelligence 
forthcoming 
payne singh sycara 
calendar agents semantic web 
ieee intelligent systems 
thatte 
xlang white 
www com team xml default htm 
uddi 
uddi technical white 
www uddi org 

extensible markup language xml second edition 
www org tr rec xml 

soap version working draft december 
www org tr wd soap part 
