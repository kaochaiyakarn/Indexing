policy language pervasive computing environment kagal tim finin anupam joshi department computer science electrical engineering university maryland baltimore county baltimore md finin joshi cs umbc edu describe policy language designed pervasive computing applications deontic concepts grounded semantic language 
pervasive computing environments consideration people devices mobile various wireless networking technologies discover access services devices vicinity 
pervasive environments lend policy security due extremely dynamic nature 
policies allows security functionality modified changing implementation entities involved 
extremely dynamic environments tend span domains entities varied capabilities 
policy language environments sort needs expressive lightweight easily extensible 
demonstrate feasibility policy language pervasive environments prototype part secure pervasive system 

policies guide behavior entities policy domain extensively security management network routing 
policy security systems flexibility required users services access rights change frequently 
computationally enabled devices laptops phones pdas household appliances commonplace short range wireless connectivity improves increased need automated security resulting pervasive environments formed mobile users accessing resources services information handheld devices 
environments research supported part hewlett packard labs palo alto darpa contract 
lated large number wirelessly networked heterogeneous users services semi automated entities varied capabilities making necessary ensure different entities behave appropriately 
believe policy security effective possible modify different entities act modifying internal mechanism 
policies generally require application specific information reason forcing researchers create policy languages bound domains developed 
prevents policy languages flexible applicable domains 
order enable entities pervasive computing systems consist different domains systems understand interpret policies correctly propose represented semantic language rdf daml oil owl 
believe semantic language allows different systems share model policies roles attributes 
describe specification policy language rei rei deontic concepts includes constructs rights prohibitions obligations deferred obligations 
language consists simple constructs extremely flexible allows different kinds policies security privacy management conversation specified 
policy language tied specific application permits domain specific information added modification 
policy language geared environments consist domains believe potential policy conflicts 
language includes constructs specifying meta policies invoked resolve conflicts setting modality preference negative positive vice versa stating rei pronounced ray japanese character means universal essence 
chosen indicate universal applicability policy language flexibility versatility allow large variety policies including security conversation management specified 
priority policies 
example possible say case conflict federal policy overrides state policy 
pervasive environments describing comprehensive policies may time consuming possible 
believe policies simple possible control decentralized authorization possible just key entities 
rei models speech acts delegation revocation request cancel allow policies exhaustive allow decentralized security control 
due large number entities environment may possible identify accurately pre determine users service 
suggest developing policies associated properties entities identities 
properties established proving entity credentials beliefs entities appropriate security policies 
structured follows discussion specification language section includes policy constructs action specifications representation domain specific information 
section describe types possible conflicts meta policies resolve 
delegation management important environments section approach delegation discuss types delegation rei covers 
implementation details policy engine associated rei covered section 
section talk prototype secure pervasive system developed test feasibility policy language 
discussing related background state contributions research section 
section summarize describe research directions 

structure policy language policy language modeled deontic concepts rights prohibitions obligations 
believe policies expressed entity user agent service terms actions services conversations making language capable describing large variety policies ranging security policies conversation behavior policies 
rei implemented logic language prolog 
developed ontologies enables policy engine interpret subset rdf policies 
rei policy language includes certain domain independent ontologies accepts domain dependent ontologies 
includes concepts permissions obligations actions speech acts operators set ontologies shared entities system define domain classes person file properties associated classes age num pages email 
execution actions outside policy engine policy language includes representation actions allows contextual information captured allows greater understanding action parameters 
similarly permits domain dependent information added 
rei includes types constructs policy objects ii meta policies iii speech acts 
policy objects represent rights obligations prohibitions 
policy construct allows objects associated different entities creating policy rules 
allows reuse policy objects 
example right read certain file associated different entities different policy domains 
ii policy language contains meta policy specifications conflict resolution 
include constructs specifying precedence modality priority policies 
iii rei models speech acts system modify policies dynamically delegate revoke cancel request 
order correct policy decisions assume presence monitoring service sends relevant speech acts policy engine 
associated policy language policy engine interprets reasons policies speech acts domain information decisions users rights obligations 

policy objects core policy language set constructs describe concepts rights prohibitions obligations 
constructs denoted represented action conditions action domain dependent action conditions constraints actor action environment 
policy object defines commonly occurring right obligation prohibition 
example right print certain printer obligation brew fresh pot coffee coffee pot empty order associate policy object entity construct 
subject subject uri identifying entity variable allowing entities satisfy conditions associated policy object possess policy object 
policy consists rules 
rei allows role group policies defined variable specifying role group domain dependent part condition policy object 
way policies individual role group combination 
mechanism different existing policy languages include special constructs role group rights obligations :10.1.1.17.4489
kinds policy objects rights ii prohibitions iii obligations iv 
rights permissions entity 
possession right allows entity perform associated action 
entity abc perform action conditions true abc right conditions abc satisfies conditions variable right conditions abc binds variable satisfies conditions example 
rule states employees umbc perform represented variable right employee variable umbc policy rule action employee condition 
prohibitions negative authorizations implying entity perform action 
entity abc prohibited performing action abc conditions true abc prohibition conditions abc satisfies conditions variable prohibition conditions abc satisfies conditions example 
rule states students umbc prohibited faculty printer specified variable prohibition student variable umbc action student variable umbc condition entity satisfy order possess prohibition 
prolog word starting uppercase letter assumed variable 
constants start lowercase letter 
obligations actions entity perform usually triggered certain set conditions true 
entity abc obliged perform conditions true abc obligation conditions abc satisfies conditions variable obligation conditions abc satisfies conditions example 
policy rule specifying employees abc display badges represented variable obliged employee abc action employee abc domain dependent condition 
additional parameters associated obligation better processing policy object met effects 
subject decide complete obligation comparing effects meeting obligation effects meeting obligation 
reasoning part policy engine left individual subject 
policy engine learns environment including actions performed relevant speech acts contextual information monitoring service 
information policy engine able infer obligations fulfilled obligations need fulfilled 
actions entity longer required perform 
act existing obligations 
entity abc longer obliged perform action abc obligation abc satisfies abc abc satisfies 
variable obligation abc satisfies variable abc satisfies 
example 
john longer required pay wife re 
john wife john 
action specifications policy language suggests representation actions allows greater understanding action parameters 
actions represented tuple parameters action pre conditions effects identifier uri action list objects action performed pre conditions conditions need true action performed effects results action performed 
preconditions reflect context action performed effects infer state environment action performed 
example 
action printing page represented action 
action operators policy language simple possible certain additional constructs required create complex action descriptions 
example difference john having permission perform action followed john having permission perform permission perform tried model operators existing action specifications unable come satisfactory result forcing additional complexity 
policy language includes action operators allow various kinds complex actions specified sequence non deterministic repetition 
sequence actions seq denotes action performed action action performed sequence 
non deterministic actions denotes choice implying performed 
repetition action repetition denotes executed times 
action denotes performed 
example 
consider right associated john 
john right perform action followed repeated executions perform action 
right lab member ai 
john right seq repetition lab member john ai 

speech acts rei geared highly distributed large environments includes representation speech acts decentralize control 
policy language currently includes specifications speech acts affect policy objects communicating entities delegation ii request iii cancel iv revocation 
speech acts governed policies entities certain speech act right 
consider example john may right send request joan delegate cancel 
structure speech acts allows natural nesting speech acts policy objects 
example possible request cancel request 
policy engine currently implements certain subset nested speech acts delegation rights actions requesting rights actions cancellation requests revoking types rights including right delegate 
delegation delegation allows entity give right entity group entities 
delegation valid causes right created 
entity right delegate valid delegation 
delegator retains right revoke delegated right 
delegation represented sender receiver right action condition receiver satisfies conditions receiver right action condition example 
assuming john right delegate delegates mark right print lab printer long working project john 
john mark right project john project mark action queue queue request kinds requests request action request right 
accepted causes obligation part receiver 
request right valid accepted causes receiver delegate right sender 
policy overrides overrides meta policy rule overrides policy creator meta data set rules positive modality modality negative modality rules assoc policy policy rules actor conditions policy object permission propositions time validity policy object action condition commitment condition obligation delegation allows sender permission perform action receiver right delegate 
sender receiver action disagree sender receiver action receiver obligation action condition sender receiver right action condition disagree request sender receiver right action condition receiver sender right action revoke revocation removal right acts prohibition 
revocation allowed cases entity revoke rights right revoke rights delegated 
sender receiver right action condition revocation receiver right action condition sender longer right perform action cancel entity cancel request sent obligation delegation caused request 
sender receiver action receiver obligation action true receiver action condition sender receiver right action sender longer right perform action condition prohibition root rei ontology conditions condition agent entity name location owner 
rei policy language ontology object speech acts policy object delegation request 
domain specific information action domain action name target precond effects revocation cancel rei policy engine accepts information entities properties semantic language converted triples form subject predicate object 
understands class hierarchies interprets correct instance ontology subclasses 
semantic information stored reasoned triples 
illustrates ontology developing express policies rdf 
rdf ontology available daml umbc edu ontologies policy developed part larger ontology security trust privacy concepts 
example consider security policy developed database application 
database related actions creating viewing deleting updating table adding deleting modifying record creating different views instances subclasses domain action 
databases tables users system represented classes entity 
policy specified set policy rules meta policy rules 

conditions possible identify entities pervasive systems allowing identity policies rei permits policies properties action targets subjects environmental factors time place 
policy languages permits complex conditions built properties supports operators complex condition conditions associated true conditions true 
example employee umbc lab member ai true conditions true complex condition conditions associated true conditions true complex condition consisting true complex condition proved 
example 
example consider complex constraint application dependent conditions agent lab member ai agent group member ir 
lab member ai group member ir rei requires semantic rule language includes unification variables provided prolog 
studying existing semantic languages rdf daml oil owl rule languages ruleml currently supported 
currently looking feasibility language combination prolog semantic language represent conditions 
prolog engine currently accepts conditions combinations triples prolog predicates 

conflicts conflict resolution due nature pervasive environment expect policies applicable domain lead potential conflicts 
example policy mary obligation write report policy prohibits mary writing report 
conflicts occur policies overlap subject target action policy objects different 
moffett sloman identify kinds conflicts conflict modality conflicts occur entity authorized perform right forbidden performing prohibition certain action certain set targets required obligation performing certain action certain set targets 
includes rights prohibitions obligations caused speech acts 
conflict obligation prohibition conflicts occur entity required perform obligation forbidden performing prohibition certain action certain set targets 
rei entity right perform action performing causes conflict reduce conflict prohibition right 
order resolve conflicts rei includes meta policies policies policies interpreted conflicts resolved run time 
reasoning security decision policy engine comes opposing policy objects entities consideration declares conflict tries find appropriate meta policy resolve conflict 
meta policies system regulate conflicting policies ways priorities ii precedence relations 

priorities priorities specified named policy rules entire policies 
example possible state school policy overrides department policy case conflict 
possible set priorities rules 
rule giving mark right print rule prohibiting mark printing 
overrides priority 
conflict rules resolved run time giving mark right print 
construct specify priorities policies 
possible specify priorities policies evaluated priorities conflicting policy rules 

precedence possible specify modality holds precedence meta policies 
policy maker associate certain precedence set actions set entities satisfying certain conditions 
constructs metarule 
negative modality holds prohibitions hold rights stronger obligations set entities fulfill associated conditions meta policy construct positive modality reverse 
kinds meta rules positive negative allows modality precedence set set actions satisfy action conditions 
positive negative allows modality precedence set set entities satisfy conditions 
metarule policy positive negative default precedence set policy 
example 
meta policy specifies conflict regarding policies employees abc negative modality holds precedence defined employee abc negative modality exists partial ordering meta policies ordering manipulated policy 
default ordering meta rules associated actions highest priority followed meta rules subjects rules associated action subject default meta rule considered 

delegation management delegation important highly dynamic widely distributed systems allows policy relatively simple allows rights entities configured dynamically 
policy printers lab defined managers right delegate right print right re delegate right employee 
employee delegate misbehaves way system hold associated manager responsible 
forces managers careful delegations time allowing rights printers propagate 
rei policy language defines types interrelated rights associated action give certain delegation rights 
right execute possessing right allows agent perform action 
agent right action condition action action condition conditions execution right delegate execution agent possesses right delegate execution action delegate entities right perform action agent perform action 
agent right action agent right action condition condition conditions agent action delegate right action condition right gives possessor right delegate previous right right execute 
right delegate delegation right agent delegate agent group entities right delegate right perform action delegate delegation right 
point right divided right delegate right execution right delegate right delegation decided combine expect conditions right take care propagation delegation 
right gives possessor right delegate previous right right delegate execution right delegate delegation 
agent right action agent right action condition condition conditions delegator agent action delegate right action condition condition conditions delegatee action delegate right action condition rights force conditions executor action delegator action right delegated 
agent right certain action including speech acts possesses right delegated right 
satisfy conditions associated innermost right execution delegation chain 
delegator satisfy condition delegation delegation chain delegatee conditions previous delegations 
entity fails delegator condition delegations point invalid 
policy engine ensures circular delegations allowed entity delegate right entity delegates back delegator previous delegator delegation chain 
example 
example demonstrates working cascaded delegations 
amy right delegate right execute delegates right tim 
tim execute satisfies condition associated speech act employee tim umbc condition associated amy delegation right group member group 
amy right amy delegate right print group employee amy umbc amy tim right tim print employee tim umbc john right delegate right delegate right execute delegates right tim 
tim delegate long satisfies group member group john right delegate employee tim umbc delegation 
john right delegation place conditions tim delegate case lab members ai employees umbc 
amy right john delegate right delegate right print lab member ai group employee john umbc john tim right tim delegate right delegate right print employee umbc employee umbc employee tim umbc tim delegates jane right delegate right execute 
jane satisfy conditions associated earlier delegations rights delegation chain order able delegate right delegation valid entity delegates satisfy associated conditions 
tim jane right jane delegate right print group member group employee jane umbc morning 
delegation types identify types delegation delegations delegations 
delegation forces satisfy conditions order true 
delegation requires immediate delegator satisfy conditions time delegation 
example consider delegation giving jane right delegate employee 
delegations jane employee hold leaves 
hand similar delegation fail delegator leaves 
delegation default delegation type 
example 
represents example described delegation mark matthew right action condition matthew satisfies condition matthew right action condition matthew longer satisfies condition matthew right action condition delegation default delegation mark matthew right action condition matthew satisfies condition matthew right action condition matthew satisfy condition matthew right action condition 
policy engine developed policy engine reasons policies described rei policy language uses policies meta policies domain knowledge security decisions access rights obligations 
policies prolog policy engine accepts policies rdf existing rei ontology 
policy engine developed java uses prolog reasoning engine 
currently interface java interface 
envision policy engine security module application similar lines application security framework pervasive environments 

application pervasive environment ubiquitous computing paradigm information services accessible virtually time device phones pdas laptops watches 
scenario step realizing vision 
smart homes offices consist intelligent services accessible users handheld devices connected short range wireless links 
services integrated seamlessly environment user familiar enabling easy automatic usage 
vision guides research system 
define dynamic environment provides infrastructure providing services mobile users short range wireless communication link 
designed implemented security framework provides access control services 
confined space client access services provided nearest system short range wireless technology 
acts active proxy executing services behalf client requests 
minimizes resource consumption client avoids having services installed client wishes blessing resource poor mobile clients 
consists functional components communication managers ii service managers iii certificate managers iv security agents clients 
communication managers handle communication various entities system 
communication manager flexible allows medium communication implementation purposes infrared cdpd bluetooth 
users services susan laptop request permission id cert john pda delegation john request id cert rights john security agent interface accessible services service request fax response coffee machine printer lamp service request service response delegation request delegation response request service access response 
overview system 
organization 
user uses framework gain access services space 
user request permission user access service 
conceptually shown central system distributed components 
treated equally clients 
clients communicate language extensible markup language xml 
communication encrypted public key infrastructure pki 
assume points computationally robust relies simplified pki 
entities system enjoy non repudiation authentication protection replay attacks vis vis simplified pki 
certificate manager responsible generating version digital certificates entity system responding certificate validation queries service managers 
service managers responsible client service management 
security agents provide access control services 
users services treated equally clients 
infrastructure designed minimize load portable devices provide media independent infrastructure communication protocol provision services 
addition solving issue controlling access services accommodates users foreign entities entities known system advance 
conventional systems access rights static agents able request permission access service 
architecture allows agents ask permission agents delegate rights 
extends security policy secure manner agents permission delegate delegate 
pervasive system divided controlled service manager 
service manager acts broker matching client requests registered services 
service manager uses security agents maintain security 
security agent enforces security policy organization interprets policy provide controlled access services 
global policy associated organization local policy associated 
security agents organization enforce global policy additionally enforce local policy specific space 
uses subset rei constructs specify policies include rules role assignment access control rights prohibitions delegation revocation 
security agent stores rei policies meta policies contextual information knowledge base security decisions reasoning information 
illustrates working system 
service manager receiving request service asks security agent request valid 
security agent replies positive negative response depending security policy 
response service manager allows denies clients request 
user needs access service right access requests user right permission access service 
entity requested permission delegate access service entity sends delegation message security agent requester 
security agent checks roles delegator delegatee ensures delegator right delegate delegation follows security policy 
adds permission client access service sets short period validity permission 
period security agent delegation 
useful revoked certificates delegations rights 
entity delegation chain loses permission propagated chain quickly till chain entity loses ability 

background sloman policies define relationship subjects targets 
policy domains groups policy applies 
policies affect behavior objects domains 
sloman believes important represent interpret policy information 
classifies policies authorization obligation states kinds constraints policies temporal parameter value 
contrast rei handles authorizations prohibitions obligations policy rules allows policies split actions constraints policy objects 
rei allows constraints domain dependent external policy specifications 
ponder allows general security policies specified 
authors ponder define policy set rules defines choice behavior system 
ponder declarative object oriented language specifying security management policies 
allows policy types defined policy element passed create specific instance 
useful ability fact rei allows done automatically 
rei allows types policy objects defined allows linked dynamically subjects 
ponder allows definition positive negative authorization policies access control information filtering transforming requested information suitable format delegation positive negative 
ponder includes simple notion delegation believe important distributed systems 
rei supports different kinds delegation includes mechanisms control delegation propagation 
ponder describes meta policies policies policies similar way rei views 
ponder provides group construct group related policies role construct role policies 
rei distinguish role group individual policies allowing described set constructs leading simpler policies uniformity 
lupu classifies conflicts modality conflicts application specific conflicts 
modality conflicts arise policies opposite modalities refer subjects 
application specific conflicts refers consistency contained policy external criteria manager authorize payments sign payment checks 
lupu suggests couple ways resolving modality conflicts deciding default priority assigning explicit priorities rules finding distance policy managed object name 
rei accepts lupu definition modality conflicts suggested mechanisms 
rei provides construct specifying modality holds precedence sets agents actions grouped certain conditions 
rei allows priorities assigned policy rules policies 
policy languages provide certain set constructs sort programming language 
representing policies logic 
woo lam propose default logic authorization policies 
access control decisions conclusive include conflict resolution mechanisms 
jajodia describe specifications language stratified logic tries support different access control policies 
authorization specification language asl allows users specify authorization policies specify way decisions policies 
language supports objects actions carried subjects users groups roles 
asl depends heavily authors understanding interpretation groups roles rei concepts belong entirely domain interpreted required domain 
asl defines authorization policy tuple consisting object user role set action 
language step right direction complicated consists large set interdependent rules user fully understand order expressive rei 
asl provisions domain dependent information insists specific set conditions 
rei specify role group individual policies constructs certain user defined conditions 
asl include conflict resolution expects set rules terms predicates defined access 
conflict resolution straightforward rei mechanisms modality precedence priority specification 
example rei possible state possible actions colors printers certain lab permissions hold precedence prohibitions 

contributions rei flexible expressive policy language deontic concepts describe kinds policies 
example consider se policies 
security policies restrict access certain resources organization 
rei create actions resources describe role rights prohibitions users organization 
hand management policies define role individual terms duties rights map directly obligations rights rei 
conversation policies important semi autonomous environments pervasive environments 
order speech acts occur called conversation 
specifying speech acts agent certain conditions rights specifying speech acts agent obligation certain conditions include speech acts just received policy conversations specified rei 
policies similarly described terms deontic principles making rei versatile 
specification correct consistent complete 
rei allows inconsistent incomplete specifications described policy engine correct 
rei policy engine consistent request allowed denied 
due structure meta policies resolves conflicts forcing engine come positive negative decision 
policy engine complete request result 
rei composed domain dependent information domain independent information 
rei allows policy makers application specific information rei prior knowledge reason making decisions 
rei allows types policy objects specified 
example rights certain resource prohibition printing color printers fifth floor right delete files belonging colleague 
mentioned earlier structures rei allow individual policies group role policies specified making uniform 
languages bibliography take delegation consideration 
believe required distributed dynamic systems included policy specifications 
rei policy engine includes strong delegation management making useful dynamic systems consisting transient resources users distributed systems creating comprehensive policies may time consuming 
rei includes kinds delegation provides standard way controlling propagating access rights delegation 

described specifications policy language rei designed developed distributed dynamic environments pervasive systems 
rei deontic concepts allows policies different types specified terms rights obligations prohibitions 
currently working identifying deontic logic rei closely related 
policy engine development currently supports expressivity provided policy language 
engine supports action operators rights support policy objects currently development 
currently handle nesting capable speech acts requesting 
policy language accepts rdfs representations entities properties rei ontology mentioned earlier working representing conditions semantic languages 
conflicts detected resolved run time believe pre determining policy conflicts practical uses 
investigating feasible solution statically detecting conflicts rei policies 
include developing daml oil owl ontologies 

dr bernard burg agents mobility research group dr alan karp hp labs palo alto support insightful comments 
dr reed 
invaluable suggestions encouragement possible 
official bluetooth website 
www bluetooth com 
boley grosof wagner 
ruleml 
www dfki uni kl de ruleml html 
bradshaw suri hayes burstein carvalho johnson kulkarni 
representation reasoning daml policy domain services kaos 
review 
brickley guha 
rdf vocabulary description language rdf schema 
working draft april www org tr rdf schema 
damianou dulay lupu sloman 
ponder policy specification language 
policy workshop bristol springer verlag lncs jan 
dean connolly van harmelen hendler horrocks mcguinness patel schneider stein 
web ontology language owl version 
www org tr wd owl ref 
harel 
order dynamic logic 
new york springer verlag 
horrocks van harmelen patel schneider berners lee brickley connolly dean decker fensel fikes hayes heflin hendler lassila mcguinness stein 
daml oil language specifications 
www daml org 
jajodia samarati subrahmanian 
logical language expressing authorizations 
ieee symposium security privacy 
oakland ca 
kagal 
rei policy language centric project 
hp labs technical report 
kagal finin joshi 
trust security pervasive computing 
ieee communications december 
kagal finin joshi 
developing secure agent systems delegation trust management 
security mobile multiagent systems held autonomous agents multiagent systems aamas 
kagal finin peng 
framework distributed trust management 
proceedings ijcai workshop autonomy delegation control 
kagal joshi finin 
security architecture trust management pervasive computing systems 
proceedings grace hopper women computing 
lupu sloman 
policy role object model 
proceedings edoc ieee computer society press 
lupu sloman 
conflicts policy distributed systems management 
ieee transactions software engineering november december 
mally 
basic laws ought elements logic willing 

meyer 
deontic logic concise overview 
deontic logic computer science pp 
chichester john wiley sons 
moffett sloman 
policy conflict analysis distributed systems management 
journal organizational computing 
monahan 
regulating electronic communities contracts 
technical report hp labs 
phillips link 
role conversation policy carrying agent conversations 
issues agent communication 
satyanarayanan 
pervasive computing vision challenges 
ieee communications 
sloman 
policy driven management distributed systems 
journal network systems management 
swedish institute computer science 
sicstus prolog 
www sics se sicstus 
taylor 
internetwork mobility cdpd approach 
prentice hall professional technical 
kagal joshi finin 
secure infrastructure service discovery management pervasive computing 
published acm monet journal special issues mobility systems users data computing 
von wright 
note deontic logic derived obligation 
mind 

extensible markup language 
www org xml 
weiser 
computer century 
scientific american pp 
september 
woo lam 
authorizations distributed systems new approach 
journal computer security 
