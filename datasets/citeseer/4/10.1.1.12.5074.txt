scs report march distributed single address space operating system supporting persistence heiser kevin stephen russell graham school computer science engineering university new south wales persistence long difficult integrate operating systems 
main problem pointers lose meaning taken address space 
distributed system single address space encompassing virtual memory node system 
design possible practicable advent bit microprocessors 
system pointer retains meaning independent location nodes secondary storage 
restrictions imposed pointers application programs 
persistence naturally elegantly integrated system 
features uniform addressing unlimited sharing data memory protection password capabilities making system easy 
reliable paging protocol ensures impact node crashes parts system minimised 
persistence long recognised effective means applications simpler safer 
due persistent system ps relieving application programmer burden having flatten data structures permanent storage overhead introduces eliminates protection normally provided types 
major drawback persistence hard integrate traditional operating systems os 
main reason fact persistent objects traditional os tend change address lifetime 
persistent object initially created process memory object process address space 
object stored secondary memory accessed process general allocated different address second process address space 
system able find pointers persistent objects translate appropriately run time pointers permitted persistent objects 
solution unacceptable force application flatten data structures explicitly making persistent ps raison tre 
alternative solution requires imposing restrictions structure persistent objects system able find traverse inter object napier :10.1.1.11.4252
possible ps free application program need flatten file structures storing disk flattening needs done run time system 
complexity removed pushed user system domain 
reason underlying difficulties existence multiple address spaces 
persistent object global sense accessed processes 
individual process access object mapped process sense local 
way prevent problems occurring away multiple address spaces replace single global address space 
single address space os impractical due shortage address bits 
years ago standard computer architectures limited bit addresses 
hardly memory requirements single processes 
accommodate multiple processes process private address space 
advent bit architectures mips dec alpha completely changed situation 
quite feasible single address space accommodate processes system address space big incorporate secondary memory computer system distributed system consisting hundreds thousands workstations 
possible provide persistence clean elegant way requirement flattening data structures including associated overheads code size redundant copying vanishes completely 
global virtual memory system featuring flat single address space objects persistent potentially visible processes 
system enforced limits sharing happens simply passing addresses 
system purely software approach run standard hardware possibly augmented add components enhance efficiency 
advantage combining persistence single address space recognised number years ago monads group 
monads features special architecture designed support large address space 
virtual memory monads structured provide hardware support modularisation data encapsulation 
sharing supported making modules globally visible system protected capabilities provide protection 
monads dependence specialised hardware difficult profit rapid advances computer architecture adapting monads state art microprocessors expensive time consuming task 
chase recognised advantages large single address space :10.1.1.40.7969
approach similar 
publications contain proposals hardware support protection little important issues address space management memory coherence fault tolerance software model protection 
clear far issues researched 
proposed carter 
project conceptual stage little detail published contrast approach 
projects show progress computer architecture leading new approach operating systems design 
remainder outlines basic structure system highlights open problems possible avenues investigate solution 
section contains general overview 
section describes proposed memory organisation section discusses management large address space 
section presents paging protocol proposed maintain consistency address space spite unreliable communication network 
section discusses management persistent objects 
section contains 
system overview distributed system nodes share address space byte data system unique address 
addresses bits wide 
explicit system interaction required allow processes share data object 
process wishes share object process provide object address access privileges second process access object fashion objects 
course important provide protection objects access unauthorised processes 
protection system password capabilities allows user processes deal capabilities simple addresses :10.1.1.11.4252
attempt object system validates process permission access object comparing object password capabilities possessed process 
implicit presentation capabilities facilitated system maintained data structure containing capabilities 
capabilities system objects passed freely 
mechanisms temporarily changing protection domain similar unix set uid provided 
details protection system 
distribution completely transparent user processes process know location memory object need know location soon address referenced system obtain corresponding page network local 
traditional virtual memory model effectively extended include network local secondary store 
data migrate transparently processes 
migrate process required migrate process control block pcb includes register image 
remote node registers reloaded process restarted appropriate address page fault working set network 
currently plan support heterogenous processing nodes consider heterogeneity support essential demonstrate utility design 
believe models heterogeneity developed related problems adapted 
furthermore system meant support parallel programming oriented different applications distributed shared memory projects 
aim support workstation environment laboratory building scale hundreds thousands processing nodes 
implications sharing patterns expected overwhelmingly read read writable data tend localised workstation owner 
memory organisation pages objects objects basic units memory allocation protection 
address space divided pages equal size purpose virtual memory paging 
pages basic unit migration data network 
different pages single object may instant reside different nodes distributed system 
hidden user distribution transparent 
system view object contiguous segment memory page aligned contents uniform protection state process allowed perform certain operation part object permission perform operation part object 
kernel assume support structure objects higher software layers free impose structure 
object table single kernel maintained data structure object table ot contains addresses sizes passwords corresponding access modes objects data time stamps accounting information 
ot resides global virtual memory shared kernels 
paging protocol section allows read copies parts ot cached locally efficient access 
ot structured tree 
interior nodes tree form index keys start addresses objects 
leaves tree contain actual information object 
interior node contain keys height tree expected small 
data structure allows efficient translation arbitrary address corresponding object exists 
furthermore object entries sorted address order 
combined partitioning address space allocation purposes allows efficient distribution leave pages ot section 
page table authorised process attempts access certain memory location traditional virtual memory system page fault raised corresponding page local physical memory 
different kinds page faults page local disk 
corresponds page fault traditional virtual memory system lead kernel loading page disk freeing frame physical memory 
page available locally resides node 
similar basic paging mechanism page loaded remote node local disk 
paging network may involve page ownership transfer explained section 
virtual page allocated reside node 
kernel signal memory fault faulting process 
accessed pages corresponding entry translation lookaside buffer tlb indicate availability location page 
cases kernel maintained page table indicates page resident local disk remote node unallocated 
page table bit address space course big kept memory 
sparsity address space possible sparse multi level page tables pages paged local disk 
subpage table entries representing unallocated memory left unallocated corresponding entry higher level table represents entries unallocated page 
alternative approach page tables hashing monads 
decided hardware inverted page table avoid specialised hardware possible 
option hashing conjunction software loaded tlb offered current bit microprocessors 
page table entries contain traditional os physical address dirty presence access mode bits small amount data kernel 
presence bits represent cases resident disk locally remote zero unallocated consequence single address space address translation information process independent change process switch 
means significant gain moving parts page table chip example top level table kept small say entries 
investment chip area microprocessors 
includes type field indicate memory coherency section stability model section 
unknown 
resident case physical address frame number page memory 
page disk address indicates disk block 
case remote page address field contains location hint identifying node hold page 
unknown case page held unknown node unallocated 
zero pages useful support allocation large area memory growing objects stacks heaps wasting lot memory page table pages 
newly created object consists pages 
time virtual page accessed physical page allocated filled zeroes resident page 
zero page exist node object belongs created 
translation vs protection mapping virtual physical addresses differs computing nodes processes 
process switch mapping change translation data need invalidated 
hand protection data process dependent change process switch 
conventional tlb caching translation protection data flushed process switch translation information valid 
tlb entries tagged process ids invalidation longer necessary 
implies shared pages tlb entries required page processes share page 
really waste tlb space entries differ protection bits 
possible improvement realising protection translation orthogonal translation associated pages protection objects 
concepts supported different hardware mechanisms significant reductions process switching costs conceivable 
assume conventional systems tlb searched address issue translation virtual physical address 
parallel protection lookaside buffer plb searched check validity access address 
translation information tlb longer needs invalidated time processes switched 
similarly contents virtual cache retained 
changes significantly reduce process switching costs serious bottleneck traditional operating systems 
hardware support protection object oriented systems indicates device plb possible 
page location access page unknown location attempted kernel sends broadcast message nodes network 
page allocated owner reply broadcast 
unallocated page node corresponding address space partition mounted see section knows page allocated send appropriate reply kernel tries locate page 
case remote page page table contains location hint kernel attempts obtain page sending request message node indicated hint 
hint incorrect kernel node broadcast request behalf original requestor page copy sent requester 
reliable page transfer protocol discussed section 
node pointed location hint may possess different location hint table 
broadcasting original request kernel forward request node pointed location hint 
reduce number broadcasts expense increased latency introduced larger number node node messages exchanged 
investigations required determine page request forwarded 
locality neighbouring pages owned node 
page unknown status location hint previous page available may lead current owner page 
research required determine best policy location hints neighbouring pages 
scheme ensures pages valid location hint located quickly 
incorrect location hints result unnecessary messages sent increasing network traffic page migration latency 
reason desirable get rid old hints 
page page table brought back memory assumed location hints contains outdated remote entries page reverted unknown 
timeout schemes invalidation old location hints investigated 
note page table contains information pages held locally memory disk pages held locally 
set small due locality 
amount information kept page table node distributed system larger stand node local primary secondary memory 
exists danger page table fragmented relevant information entries location information unknown sparse allocated page table 
extreme case entry page table page different unknown case page table fill local memory 
locality address space management policies happen 
address space management address space statically partitioned significant bits address represent address space partition id api 
number partitions large maximum number nodes system support 
apis bits long 
partition mounted single node 
mounting partitions higher level management function requiring system administrator intervention 
process creates object kernel allocate memory object partitions mounted local node 
pages allocated object primary pages object owned creator node 
initially object pages zero 
page ownership dynamic property owner page changes page migrates network 
instant time page associated possibly identical nodes creator node node corresponding address space partition mounted owner node primary page currently resides 
creator permanent attribute page owner transient 
efficiency reasons nodes owner may hold copies page 
copies secondary pages 
secondary pages read obtained owner primary page 
secondary pages exist primary page marked read 
attempt node write page secondary copies invalidated update page allowed proceed 
write invalidate protocol described section 
creator node deallocate page 
process holding sufficient privilege wants destroy object local kernel forwards request object creator node address space partition containing object mounted 
creator obtains ownership object pages implicitly invalidates secondary pages cf 
section removes object global object table section deallocates pages 
advantages partitioning address space 
major advantage ot management efficiently distributed nodes 
objects recorded leaf page ot belong partition 
node partition mounted user page ot reduces contention accessing ot 
advantage partitioning node maintain separate free lists partitions 
allows efficient creation destruction transient objects stacks heaps section particularly separate partition objects 
final decision memory deallocated reused 
monads reuses memory advantage object addresses truly unique identifiers times 
bit address space large scheme possible 
password capability scheme removes need strict uniqueness new passwords assigned time virtual address reused 
furthermore simulations show reusing memory leads significantly smaller page tables 
results reuse deallocated memory attractive 
simulations show multi level page table scheme feasible 
typically order allocated memory page tables entirely reasonable 
results show way address bits mapped page table levels important schemes second results smallest page tables third produces largest 
pointed simulations trace driven unix bsd file data 
memory usage expected differ somewhat file usage traditional operating system 
overestimate predictive value simulations 
believe taken indication right path 
pt pt pt pt pt offset pt pt pt pt pt offset pt pt pt pt offset possible allocations address bits page table levels 
pt index th level page table data migration fault tolerance paging protocol mentioned earlier virtual page primary possibly secondary physical pages 
node primary page resides owner page 
secondary pages read exist primary page currently read 
process node attempts read page resident obtain read copy owner primary page writable mark read sending copy subsequently process attempts write invalidate secondary copies changing status back writable allowing update go ahead 
process node attempts write page obtain ownership negotiates transfer contents ownership 
transferring ownership invalidate copies nodes exception 
note scheme double faults generated read access immediately followed write introduce extra overhead 
difficult avoid current architectures 
location owner page requires broadcast page table contains correct location hint explained section 
invalidation secondary pages may require broadcast node required send message owner 
imposes significant load network means invalidation read pages may possible just single node 
invalidation broadcasts avoided list nodes holding secondary pages kept owner 
probably impractical large number objects read shared extensively executable code 
assuming sharing typically happens participants message buffers large number executable programs may possible significantly reduce number invalidation broadcasts holder single secondary copy kept 
single node number kept page table 
study required issue 
consistency page ownership information essential operation system 
reliable protocol phase distributed commit transfer page ownership 
protocol assures page ownership lost duplicated messages lost duplicated due unreliable network case node crash 
error detection mechanisms network interface expected remove corrupted messages 
protocol prevents loss duplication ownership node crashes handshake exchange stalled participating nodes network connecting operational 
general block process receiving node 
system remain operational particular processes local data able proceed unaffected 
minimise impact single node crash remainder system protocol allows receiving node break exchange original request answered timeout period elapsed 
gives kernel chance signal process memory temporarily unavailable process decide retry give 
expected useful particularly interactive programs 
implementation protocol require small amount stable store node 
expect non volatile ram nvram chip purpose 
nvram implement stable memory needed critical system data structures see section 
memory coherency paging protocol just described automatically implements strict data coherency model guarantees secondary copies page exist exactly contents unique primary page 
constitute performance bottleneck write sharing occurs 
expect great amount write sharing take place system supposed support workstation environment multiprocessor 
workstation network sharing processes typically read read files read occasionally updated 
paging protocol guarantees single writer provide object level coherency 
explicit synchronisation guarantee consistency objects updated processes 
assuming processor test set instruction able provide distributed single bit semaphores purpose 
support efficient testing semaphore test set instruction really write attempt implies acquiring ownership appropriate memory page 
special kernel support distributed semaphores required 
applications coherency model unnecessarily strict introduces significant overhead 
investigate weaker consistency models typed objects 
persistent object management transient persistent objects memory object created system globally unique address independent process created object object automatically persistent 
introduces management problems objects nature meant persistent 
example process stack object purpose process exited 
pcb contain table objects destroyed kernel process exits 
default newly created object recorded table 
separate system call performed object persistent 
nature easy tempting create large number small objects 
object start page boundary result poor memory 
excess small objects negative impact performance protection system 
produce performance penalty processes objects hopefully discourage 
particular unwise create separate object item traditionally process heap 
continue associate heap object process normal malloc calls allocate 
heap object process stack object automatically deallocated exit 
objects meant persistent shared processes allocated separately 
objects shared need survive process message buffers recorded pcb kernel destroy process exits 
process associated non persistent objects stack heap pcb 
user process access pcb protected system object 
objects need created time new process comes existence destroyed process exits 
object recorded global object table processes expensive modification object table required communication nodes 
structure object table partitioning address space overcomes problem cf 
section 
system point view objects fixed size increased object created possible implement growing user level objects stacks heaps 
large area memory allocated object 
carries serious performance penalty virtual pages object initially marked zero really allocated 
object big lower level page table pages allocated 
user level object grows consume allocated address space virtual pages allocated physical memory 
stability stability information objects existence memory allocation essential operation system 
event node crash information corrupted different nodes differing views allocation state 
valid object cause memory allocation faults nasty situation question points important system data 
free list stable 
user system objects live address space real distinction 
existence objects consistently maintained system 
data critical 
losing user objects contents painful affected users system survive loss 
prototype immediate need provide universal stability 
system ensure stability critical data appropriate update protocol 
main medium objects course local disk 
achieve stability updates disk atomically 
generally introduces significant overhead acceptable objects particularly meant stable place local data process 
possible solutions different classes objects 
classes objects perfectly stable 
updates objects class immediately recorded stable storage 
write access objects fairly expensive 
objects class stabilised user explicitly asks system 
gives users control effort put keeping objects stable traditional file system stable copy data may guaranteed date user performed explicit close flush operation 
coherency models cf 
section object classification implemented typing virtual memory 
caching updates fast stable store 
pointed section fast stable store nvram required record status pending inter node page transfers 
nvram generally stable cache update operations stable objects 
scheme added benefit improved uniformity paging status information treated just stable object 
schemes advantages best solution combination 
garbage management garbage collection usual sense possible due fact wish place restrictions pointers user processes 
system distinguish pointers user data maintain counts objects 
garbage collection impractical owing sheer size address space 
contrary traditional systems need garbage collection arises necessity reuse memory cf 
section requirement reuse generally known commercial systems including unix provide stability user files 
note objects provide possibility save running processes system crashes exception currently executing register contents may lost 
limited backing store stable objects 
sense clean backing store virtual address space 
precise method subject investigation probably leasing economic models 
compilation issues switch single address space effects operation language processors 
possible generate completely position independent code necessary assemble code situ 
assembler allocates object contain binary module jump instructions absolute targets object 
linking phase inserts appropriate pointers binary modules 
execution program occurs place 
conventional programming languages longer absolute addressing static data extern storage class 
absolute addresses global shared instances program 
private process data provided relative addressing base register 
serious restriction instruction sets current architectures don offer absolute addressing modes data 
distributed single address space operating system naturally elegantly integrates persistence 
system features uniform addressing unlimited sharing address space encompassing virtual memory node network 
memory protection password capabilities allows user programs treat object normal memory addresses traditional operating system 
reliable paging protocol ensures consistency address space underlying network unreliable 
proposals address space garbage management persistent object stability outlined 
atkinson bailey chisholm cockshott morrison 
approach persistent programming 
computer journal 
morrison brown conner dearle :10.1.1.11.4252
napier manual 
persistent programming research report universities glasgow st andrews 
mips computer systems sunnyvale ca 
mips microprocessor user manual st edition 
digital equipment maynard ma 
alpha architecture handbook 
russell skea heiser 
distribution persistence global virtual memory 

cabrera jul editors international workshop object orientation operating systems volume pages france 
ieee 
rosenberg abramson 
monads pc capability workstation support software engineering 
proceedings hawaii international conference system sciences volume pages 
ieee 
rosenberg 
object management addressing monads architecture 
international workshop persistent object systems volume scotland 
ieee 
chase levy baker harvey lazowska :10.1.1.40.7969
opal single address space system bit architectures 
workshop workstation operating systems pages 
carter cox johnson zwaenepoel 
distributed operating systems protected global virtual address space 
workshop workstation operating systems pages 
anderson pose wallace 
password capability system 
computer journal 
russell heiser 
capability protection persistent global virtual memory system 
school computer science engineering report university nsw kensington nsw australia march 
zhou stumm li 
heterogeneous distributed shared memory 
ieee transactions parallel distributed systems 
nitzberg lo 
distributed shared memory survey issues algorithms 
computer august 
ousterhout 
aren operating systems getting faster fast hardware 
usenix conference pages june 
mogul borg 
effect context switches cache performance 
symposium architectural support programming languages operating systems volume pages 
anderson levy bershad lazowska 
interaction architecture operating system design 
symposium architectural support programming languages operating systems volume pages 
kaiser 
access control monitor providing protection persistent object oriented systems 
international workshop persistent object systems volume pages pisa italy 
morgan kauffman 
kong 
name management page table organisation distributed global virtual memory system 
bsc thesis school computer science engineering university nsw kensington nsw australia 
ousterhout da costa harrison kunze kupfer thompson 
analysis unix bsd file system 
acm symposium os principles volume pages 

distributed systems global naming 
thesis school electrical engineering computer science university nsw kensington nsw australia 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
bennett carter zwaenepoel 
munin distributed shared memory type specific memory coherence 
conference principles practice parallel programming pages 
acm 
gray cheriton 
leases efficient fault tolerant mechanism distributed file cache consistency 
acm symposium os principles volume pages 
tanenbaum mullender 
design capability distributed operating system 
technical report ir vrije universiteit november 
ieee 
workshop workstation operating systems volume key florida 

