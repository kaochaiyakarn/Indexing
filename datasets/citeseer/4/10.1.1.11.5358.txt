mining asynchronous periodic patterns time series data yang wei wang philip yu watson research center department computer science watson research center ibm university north carolina chapel hill ibm ibm com cs unc edu ibm com detection time series data challenging problem great importance applications 
previous focused mining synchronous periodic patterns recognize misaligned presence pattern due intervention random noise 
propose flexible model asynchronous periodic pattern may subsequence occurrences may shifted due disturbance 
parameters min rep max dis employed specify minimum number repetitions required segment non disrupted pattern occurrences maximum allowed disturbance successive valid segments 
satisfying requirements longest valid subsequence pattern returned 
phase algorithm devised generate potential periods distance pruning followed iterative procedure derive validate candidate patterns locate longest valid subsequence 
show algorithm provide linear time complexity respect length sequence achieve space efficiency 
keywords asynchronous periodic pattern segment approach partial periodicity detection time series data challenging problem great importance real applications 
previous research area assumed disturbance series repetitions pattern result loss synchronization subsequent occurrences pattern previous occurrences 
example joe smith reads newspaper morning periodic pattern 
joe read newspaper morning occasionally disturbance affect fact joe reads newspaper morning subsequent days 
words disturbance allowed terms missing occurrences general insertion random noise events 
assumption restrictive may fail detect interesting pattern occurrences misaligned due inserted noise events 
consider application inventory replenishment 
history inventory refill orders regarded symbol sequence 
assume time cold medicine month normally 
refill order filed month major outbreak flu turn causes additional refill rd week 
replenishment frequency back month refill time shifts rd week month month longer 
desirable pattern recognized disturbance reasonable threshold 
addition system behavior may change time 
pattern may time time interval 
aim mining periodic patterns significant subsequence symbols may contain disturbance length certain threshold 
parameters min rep max dis employed qualify valid patterns symbol subsequence containing subsequence turn viewed list valid segments perfect repetitions interleaved disturbance 
valid segment required min rep contiguous repetitions pattern length piece disturbance allowed max dis 
intuition pattern needs repeat certain number times demonstrate significance 
hand disturbance valid segments reasonable bound 
appropriate treat disturbance signal change system behavior random noise injected persistent behavior 
parameter max dis acts boundary separate phenomena 
obviously appropriate values parameters application dependent need specified user 
patterns satisfying requirements model return subsequence maximum repetitions 
note due presence disturbance subsequent valid segment may synchronized previous ones 
position shifting occurs 
turn impose great challenge mining process 
similar allow pattern partially filled enable flexible model 
instance cold partial monthly pattern showing cold medicine reordered week month replenishment orders weeks strong regularity 
allow shifted occurrence valid segment flexible model poses difficult problem solved 
give pattern associated valid segments may overlap 
order find valid subsequence repetitions decide valid segment specifically portion valid segment selected 
relatively easy find set valid segments pattern substantial difficulties lie assemble valid segments form longest valid subsequence 
shown min rep valid segments pattern 
set max dis longest subsequence considered turn longest 
look symbol sequence position looking ahead sequence difficult determine switch continue sequence example symbol sequence indicates may need track multiple ongoing subsequences simultaneously 
number different valid segments grows exponentially increasing period length process mine longest subsequence daunting task simple pattern 
solve problem pattern efficient algorithm developed identify subsequences may extended longest organize way longest valid subsequence identified single scan input sequence time small portion extendible subsequences needs examined 
innovation mining algorithm discover periodic patterns regardless period length 
previous research area focused patterns pre specified period length pre defined calendar 
unfortunately practice period available priori part want mine data 
stock different may different frequencies may unknown ahead time may varies time time 
period may span thousands symbols long time series data just symbols 
introduce distance pruning mechanism discover possible periods set symbols appear pattern possible period 
order find longest valid subsequence possible patterns employ level wise approach 
apriori property holds patterns period 
valid segment pattern valid segment pattern fewer symbols specified pattern 
example valid segment 
period valid patterns longest supporting subsequences mined iterative process 
summary claim contributions 
ffl pattern partially specified 
ffl flexible model asynchronous periodic patterns proposed allow mining patterns periods cover wide range known priori subsequence replenishment order merchandise may prescheduled filed inventory low 
occurrences may misaligned due insertion random disturbance 
ffl phase algorithm devised generate potential periods distance pruning followed iterative procedure derive validate candidate patterns locate longest valid subsequence containing pattern 
ffl segment approach devised discover longest valid subsequence pattern single scan input sequence 
ffl analyze time space complexity prove correctness proposed algorithm 
remainder organized follows 
section gives brief overview related research problem 
general model section 
section outlines major steps algorithm 
algorithms distance pruning singular pattern verification complex pattern verification elaborated sections respectively 
discuss limitations extensions algorithm section 
section presents experimental results 
drawn section 
related discovering sequential patterns introduced 
input data set sequences called data sequences 
data sequence list transactions 
typically transaction time associated transaction 
sequential pattern consists transactions sets items 
problem find sequential patterns user specified minimum support support sequential pattern percentage data sequences contain pattern 
surprising sequential pattern discovery proposed 
authors search patterns occurrence significantly greater expectation 
information gain measure degree surprise significance pattern 
full cyclic pattern studied 
input data set transactions consists set items 
addition transaction tagged execution time 
goal find association rules repeat input data 
han algorithms efficiently mining partial periodic patterns exploring interesting properties related partial periodicity apriori property max subpattern hit set property 
proposed solution requires predefined period synchronous pattern 
bettini proposed algorithm discover temporal patterns time sequences 
basic components algorithm includes timed automata granularities tags number heuristics 
tags testing specific temporal pattern called candidate complex symbol type appears frequently time sequence 
addition heuristics reduce number candidate symbol types 
heuristics exploit information provided explicit implicit temporal constraints granularity symbol structure 
inclusion user defined calendar studied 
user explicitly defines calendar interesting patterns discovered calendar 
example user defines temporal subsequence start days government announces unemployment rate calendar calendar applied stock prices new york stock exchange interesting patterns discovered relating reaction stock prices announcements 
general model section formally define model investigating 
fd set literals sequence literals 
introduce notations facilitate discussion remainder 
definition pattern period sequence symbols symbol 
pattern start sequence need consider patterns start non symbol 
introduced allow partial 
particular denote don care position pattern 
pattern called pattern exactly positions symbols 
rest positions filled 
example pattern period 
definition patterns period specialization generalization iff position true 
example pattern considered specialization generalization 
definition pattern period sequence literals say matches supports iff position true 
called match general sequence symbols pattern multiple matches may exist 
matches 
say matches period overlapped iff share common subsequence disjoint 
instance disjoint overlapped common subsequence indicated shaded area 
valid subsequence segments matches valid segments disturbance valid subsequence example matches segments definition pattern period sequence symbols list disjoint matches called segment respect iff form contiguous subsequence referred number repetitions segment 
segments form contiguous subsequence shown 
subsequence segment respect pattern 
note definition match pattern segment respect definition segment respect pattern valid segment iff number repetitions respect required minimum repetitions min rep 
value min rep set segments qualify valid segments illustrated shaded area 
valid segment contains match 
general pattern sequence symbol viewed list disjoint valid segments respect interleaved disturbance 
example subsequence enclosed dashed contour treated disturbance valid segments definition sequence pattern valid subsequence set non overlap valid segments distance successive valid segments exceed parameter max dis 
number repetitions valid subsequence equal sum repetitions valid segments 
valid subsequence repetitions called longest valid subsequence 
definition sequence symbols exists valid subsequence respect pattern pattern called valid pattern 
follows definition valid segment valid subsequence 
set max dis individually valid subsequences exist valid subsequence containing due violation maximum allowed disturbance 
contrast subsequence enclosed dashed line valid subsequence number repetitions 
sequence literals parameters min rep max dis maximum period length max want find valid subsequence repetitions valid pattern period length exceed max algorithm overview section outline strategies tackle problem mining subsequences repetitions possible patterns 

distance pruning 
symbol examine distance occurrences dc number times distance exactly period set symbols dc counters min rep retained step 

single pattern verification 
potential period symbol passed previous step candidate pattern formed assigning validate candidate patterns single scan sequence 
note single pattern format essentially equivalent pattern period shifted starting position sequence 
segment approach developed linear scan input sequence sufficient locate longest valid subsequence pattern 

complex pattern verification 
iterative process carried ith iteration candidate patterns generated set valid gamma patterns validated scan data sequence 
elaborate step sections 
distance pruning candidate patterns huge number potential patterns lmax pruning method needed reduce number candidates 
pruning method motivated observation symbol participates valid pattern period min rep times distance occurrences exactly order form valid segment 
proposed distance pruning method pass data sequence discover possible periods set symbols appear pattern possible period 
symbol period number times distance occurrences sequence collected 
perform distance pruning scanning sequence need maintain moving window max symbols scanned 
symbol say compare symbol moving window 
match occurs jth position count period max gamma symbol denoted dc lmax gammaj incremented 
example third fifth position contribute due generality model occurrence symbol need track distance previous occurrences moving window 
model allow partially specified patterns occur position recognizes patterns repetition symbol 
sufficient just track distance symbol occurrence 
symbol period dc larger equal min rep threshold possible participate valid pattern period property reduce candidate patterns significantly 
longest subsequence identification single pattern symbol period pair passed distance pruning longest subsequence identification lsi algorithm discover subsequence repetitions period occurrence sequence corresponds match pattern 
occurs position subsequence position position gamma match pattern 
consider pattern sequence 
occurs times corresponds match denoted 
presenting algorithm introduce concept extendibility subsequence dominance 
definition segment respect pattern list matches prefixes 
matches extendibility dominance position position invalid prefixes valid prefixes example extendibility subsequence dominance form segment formed called prefix referred extension called valid prefix valid segment 
definition segment extendible iff prefix segment 
segment prefix 
segment number repetition exist different prefixes shows possible prefixes segment valid prefixes valid min rep 
say prefixes extendible 
definition valid subsequences starting position prefix extension iff valid segment valid segment valid segment may prefix valid segment starting position match pattern say extended position generate definition pattern valid subsequence extendible exists valid subsequence extension valid subsequences min rep max dis 
prefix extended position generate result said extendible 
definition position valid subsequences positions gamma max dis gamma say dominates position iff number repetitions greater equal clear position dominates subsequence dominance defines total ordering set valid subsequences considered extendible position 
dominates position subsequence generated appending starting position shorter extension generated appending 
need extend position note keep may need extend include position 
scenario may happen ends earlier position known extendible position provides motivation justification pruning technique employed algorithm 
max dis max dis max dis necessary generate extendible max dis subsequence dominance algorithm description scanning sequence determine longest subsequence containing pattern discovery process may experience phases repeatedly ffl phase segment validation 
instance latest segment subsequence number repetitions pattern min rep ffl phase valid segment growth 
segment considered valid repetition count may continue grow 
ffl phase extension disturbance 
valid segment may ended 
going disturbance noise region see get extended segment pattern max dis referred extension window 
returns phase subsequence terminates 
challenges 
transition point phase phase obvious 
missing consecutive match clearly signals transition phase presence match necessarily mean continuation phase illustrated gamma th position 
secondly transition point phase phase straightforward 
fact just occurring extension window potentially candidate leading new extension subsequence 
second extension window leads valid segment 
need develop efficient tracking mechanism managing phase transitions 
furthermore pruning issue 
overlapping subsequences pattern 
efficient pruning criterion needs developed prune subsequences longest valid subsequence 
reduce number concurrent subsequences need tracked 
problem longest subsequence particular instant may shorter overlapping subsequence 
clearly demonstrated assume min rep max dis 
recognizing segment encountered grows longest valid subsequence 
observe valid subsequences begins dominate position sequence extension dominated extension 
prune position point check dominance relationship point segment valid 
point encompasses valid overlapping subsequences converge common tail segment 


segment valid subsequences min rep max dis inspired observations algorithm outlined follows 
scanning input data sequence time match pattern identified say position set currently extendible subsequences extended principles 
ffl mark subsequences prior position gamma phase ffl dominating subsequence phase extended include newly discovered match 
ffl subsequence phase simply extend repetition check transition point phase reached 
mark subsequence phase multiple subsequences phase dominating retained 
ffl subsequence repetitions phase identified update longest valid subsequence pattern 
ffl dominating subsequence phase extended 
newly discovered match serves new segment subsequence transits phase address phase transition issues algorithm maintains separate data structures 
ongoing seq queue tracks subsequences phases valid seq queue tracks potential subsequences phase elements queues overlapped transition phase phase fuzzy 
fact subsequence phase appear ongoing seq valid seq queues 
longest seq tracks longest subsequence pattern detected far 
describe contents various data structures scanning ith position input sequence 
ffl longest seq contains longest valid subsequence known position extendible 
knowledge data behavior position valid subsequences prior position gamma max dis gamma guaranteed extendible moment 
determine extendibility valid subsequence ends position gamma max dis gamma 
longest seq longest valid subsequence ends prior position gamma max dis gamma 
ffl seq contains set subsequences currently extended segment may may repetitions valid 
explain position subsequences gamma period length organize positions queue structure 
entry queue holds set subsequences position illustrated 
example want verify pattern sequence thresholds min rep max dis ongoing seq queue illustrated processing occurs th position 
subsequences extended obvious different positions subsequences 
ends position match rest position match 
need maintain chance grow longest subsequence 
longer valid subsequence segment meet min rep requirement 
discard moment 
subsequences position position data structure entry ongoing seq queue pointer list matches sample sequence 
sequence position start pos pos total rep current rep auxiliary information subsequence head tail ongoing seq status ongoing seq queue status valid seq ongoing seq valid seq data structures ffl valid seq contains set valid subsequences may extendible 
shows valid seq set consists valid extendible subsequences 
necessary keep may need extend valid subsequence multiple times appending different matches pattern 
example segment extended twice shown 
subsequence ongoing seq valid seq keep track starting position start pos position pos number repetitions total rep number repetitions segment current rep shown facilitate tracking 
lsi algorithm scans input data sequence occurrence symbol position sequence match position gamma 
segments pattern identified extend previously generated subsequences applicable 
steps taken sequentially match detected position 
valid seq examined remove subsequences position max dis maximum disturbance threshold away current position position 
note subsequences extended violation maximum disturbance requirement 
necessary keep valid seq 
time removed subsequence seq valid seq compare longest seq update longest seq necessary 

ongoing seq queue investigated 
iteration taken time entry head queue examined queue empty reach entry position 
position subsequences entry prior gamma segment subsequence entry extended 
example circled reached know segment ended 
simply dequeue entry discard 
rationale immediately extend subsequences initiating new segment starting current match valid extendible subsequences entry valid seq examined step 
position exactly gamma segment subsequences entry extended include current match 
circled informs segment extended include steps taken sequentially 
append current match subsequence entry update auxiliary data associated accordingly 
position subsequences updated gamma 
ii 
multiple valid subsequences entry current rep satisfies minimum repetition requirement subsequence largest total rep value retained rest discarded 
obvious discarded subsequences dominated retained 
discard impact correctness algorithm efficiency improved 
iii 
step ii valid subsequence entry 
exists valid subsequence potential phase candidate phase subsequence replicated valid seq 
note remains ongoing seq 
gives valid subsequence opportunity extended multiple ways concurrently 
example extended valid segment 
necessary segment subsequence extendible 
subsequence may dominate subsequences valid seq position turn extended 
iv 
entry position gamma moved head ongoing seq queue tail queue 

valid seq subsequence seq ends prior position dominates subsequences position prior identified seq position gamma create new subsequence new seq extending seq include current match interval position seq treated disturbance 
new seq inserted entry position gamma ongoing seq queue 
entry exist new entry created added tail seq queue 
signals transition subsequence phase phase entire sequence scanned subsequence largest total rep value valid seq returned 
words seq longest subsequence position prior new subsequence needs created seq ends position gamma necessary extensions subsequences position gamma taken step 
step essentially designed give valid subsequence ends prior position gamma opportunity extended appending current match 
example shows sequence symbols status various data structures processing th occurrence position shown longest seq empty 
process th th th occurrences illustrated change data structures step shown 
head tail ongoing seq status ongoing seq queue step status longest seq step valid seq status valid seq step head tail ongoing seq status ongoing seq queue step processing th occurrence head tail ongoing seq status ongoing seq queue step iv head tail ongoing seq status ongoing seq queue step iv valid seq status valid seq step iii processing th occurrence head tail ongoing seq status ongoing seq queue step head tail ongoing seq status ongoing seq queue step head tail ongoing seq status ongoing seq queue step ii matches sample sequence 
sequence position processing th occurrence valid seq status valid seq step iii status ongoing seq valid seq longest seq example observations 
ffl ongoing seq entries corresponds different moved head ongoing seq tail 
subsequences entry position extended include 
position updated reflect change 
step skipped entry seq ends position 
subsequences valid seq current position position 
subsequence discarded valid seq 
th occurrence position step ii step skipped valid subsequence exists entry 
replicated entry ends position valid seq 
positions away iv ends position generated 
subsequences entry change 
position extended include 
position updated reflect step skipped entry seq ends position 
valid seq remains unchanged subsequences positions away current 
th occurrence position removed valid longer 
replicated valid seq 
moved head ongoing seq tail 
entry ends position ends position new subsequence step skipped entry seq ends position 
entry position removed seq 
ends position current position 
removed valid seq get new extension 
put longest seq 
longest seq empty previously 
th occurrence position generated extending include 
new entry created position appended tail ongoing seq 
iii positions away new subsequence needs needs generated 
example illustration position gamma 
furthermore entries subsequence distinct length segment distinct current rep 
subsequence current rep larger equal min rep due step ii 
ffl valid seq element distinct position gamma max dis gamma gamma due step 
complexity analysis analyze time complexity space complexity lsi algorithm 
time complexity sizes valid seq ongoing seq essential analyzing time complexity lsi algorithm 
processing target symbol position valid subsequence inserted valid seq step iii position gamma indicated step 
follows subsequence valid seq different positions 
addition processing match starting position position subsequences valid seq gamma max dis gamma gamma 
result max dis subsequences valid seq 
complexity step max dis 
invoked match pattern time complexity step processing lsi symbol theta max dis number occurrences entire procedure entry removed head ongoing seq step associated distinct position target pattern 
distinct positions corresponds match step entries removed ongoing seq symbol period 
step invoked times 
complexity step 
consider course entry ongoing seq time initialized step time permanently discarded step 
easy show induction subsequence distinct value current rep claim holds trivially initialized step subsequence subsequent time new subsequence new seq added step result processing match value current rep new seq match segment new seq 
contrast current rep subsequences segments extended include 
new seq different value current rep subsequences conclude subsequence holds distinct value current rep subsequence segment min rep repetitions due step ii number subsequences bounded min rep complexity invocation step min rep 
time entry ongoing seq associated distinct position 
processing match starting position entry position gamma 
complexity step symbol period theta min rep 
explained max dis subsequences valid seq time 
turn takes max dis time complexity time step invoked 
brings total complexity theta max dis 
summary complexity lsi algorithm symbol period length theta min rep max dis period length complexity find longest subsequence symbols theta min rep max dis theta min rep max dis length input sequence 
time complexity discover longest single symbol subsequence periods symbols theta max theta min rep max dis max max maximum period length 
worst case complexity 
distance pruning may prune large number symbol period pairs real running time faster 
addition propose techniques reduce time complexity lsi algorithm section 
space complexity main data structures lsi ongoing seq valid seq 
symbol period length size valid seq max dis size ongoing seq bounded occurrence new subsequence inserted ongoing seq 
furthermore entry ongoing seq min rep subsequences size ongoing seq min min rep theta 
space complexity find longest subsequences symbols period length max dis theta num symbols min min rep theta theta num symbols num symbols number symbols input sequence 
space complexity possible period lengths max dis max theta num symbols theta max min theta max min rep theta max theta num symbols space complexity analysis theoretical bound worst case space requirement smaller practice shown section 
reality data structures easily fit main memory 
improvement longest subsequence identification algorithm time complexity lsi algorithm improved 
way queue store valid seq heap index subsequences valid seq total rep time subsequence inserted valid seq added queue 
naturally subsequences lie queue ascending order positions 
step easily accomplished dequeue obsolete subsequence head queue 
course operation incur log max dis overhead maintain indexing heap 
virtue heap indexing invocation step requires log max dis time complexity period length complexity lsi algorithm period lengths symbols reduced theta max theta min rep log max dis max proof correctness lemma segment invalid subsequence removed ongoing seq extendible 
proof 
place may remove invalid subsequence ongoing seq step 
assume subsequence ends position gamma 
true match starts position segment invalid subsequence extendible 
lemma prefix longest valid subsequence put ongoing seq valid seq 
proof 
consider starting position say longest valid subsequence valid segments starting position gamma min rep theta position gamma max dis gamma 
longer valid subsequence formed extending backwards include additional valid segment 
contradicts assumption longest valid subsequence 
result valid empty position new subsequence denoted starting position consisting match subsequences entry extended position pattern added ongoing seq 
addition starting position valid segment starting position 
lemma stay ongoing seq grows valid subsequence min rep repetitions 
extended valid subsequence denoted replicated valid seq longest ongoing seq 
subsequences ongoing seq start 
lemma holds 
lemma processing match valid subsequences ongoing seq valid seq 
proof 
valid subsequences ongoing seq generated step removed immediately step ii 
remaining applicable replicated valid seq step iii 
lemmas longest valid subsequence fully generated update longest seq valid prefix removed valid seq extended 
consider processing match starting position lemma processing match starts position longest valid subsequences position gamma max dis gamma gamma valid seq 
proof 
processing match positions gamma valid subsequence position gamma max dis gamma gamma may extended include due reasons 

gamma 
removed ongoing seq step ii existence valid subsequence position ongoing seq dominates chosen extended include retained ongoing seq potential extension 

valid seq dominated valid subsequence valid seq extended include added ongoing seq step 
summary reason extending dominated valid subsequence extended include resides ongoing seq 
lemma valid subsequences ongoing seq valid seq 
processing match valid subsequence position gamma max dis gamma gamma valid seq dominated valid subsequence valid seq 
words longest valid subsequences position gamma max dis gamma gamma valid seq 
lemma processing match starts position longest valid subsequences prior position gamma max dis gamma longest seq 
proof 
proof trivial time subsequence removed valid seq due obsolete position longest seq updated necessary 
theorem direct inference lemma 
theorem processing entire sequence longest seq holds longest valid subsequences 
complex patterns discovering single patterns valid subsequences different symbols may combined form valid subsequence multiple symbols period 
employ level wise search algorithm generates subsequences patterns valid subsequences gamma patterns period length 
efficiently prune search space properties symbol property segment property 
property symbol property pattern valid generalizations valid 
property segment property valid segment pattern valid segment generalizations properties straightforward omit proof 
properties prune candidates valid pattern efficiently 
example patterns valid candidate patterns generated 
shown patterns period containing equivalent 
equivalent patterns 
equivalent patterns equivalent patterns 
equivalent complex patterns patterns shifted starting position 
similarly candidate pattern valid 
candidate set valid patterns generated similar algorithm lsi executed verify candidates valid patterns 
side product lsi algorithm finds valid subsequence repetitions valid pattern 
discussion parameters specification approach mining results effected choice parameters min rep max dis 
parameters set properly noises may qualified patterns 
iterative method set proper value parameters 
discovering patterns pair min rep max dis prune discovered patterns statistical significance 
example discovered pattern expected continuous repetition pattern random sequence exceeds min rep threshold conclude pattern may occur due chance discarded 
notice may uniform threshold min rep max dis statistical significance probability occurrence patterns may difference 
instance occurrence probability higher 
pruning number remaining patterns small adjust parameters min rep max dis reducing min rep increasing max dis mine patterns 
process terminates sufficient number patterns discovered 
noises may types noises real applications 
parameter max dist employed recognize noises segments perfect repetitions pattern 
may exist types noises intra pattern noise 
pattern 
segment may occurrence pattern noise 
extra symbol bs 
modify definition asynchronous pattern slightly recognize type noises 
segment similar pattern certain degree consider segment repetition pattern 
major modification algorithm able handle type noise 
extensions application sensor network multiple events may occur simultaneously 
result possible multiple symbols may occur position sequence 
proposed approach easily extended handle situation 
need modify step algorithm 
generating candidates need take account possible subsets symbols time slot 
example symbols occurred time slot candidate generation phase need consider possible candidates time slot fag fbg fa bg fg 
possible extension asynchronous pattern discover possible sequential rules followed chance subsequence 
find type sequential rules minimum repetitions viewed support 
asynchronous patterns discovered algorithm considered patterns satisfy support threshold 
post process step verify rules satisfy confidence requirement 
quality rule followed chance probability subsequence patterns valid sufficient long portion sequence 
verify confidence requirement satisfied 
experimental results implemented programming language executed ibm rs mhz cpu mb running aix operating system 
real sequence apply model real trace web access log 
web search engine specialized multimedia content search url www net 
early average daily number hits grown 
trace hits march june total days collected 
total number accesses 
entire trace summarized sequence follows 
trace divided minute intervals 
number hits minute interval calculated 
label interval symbol 
example number hits interval labeled number hits interval labeled 
summarized sequence consists occurrences distinct symbols 
exist interesting patterns discovered algorithm 
min rep max dis set respectively patterns discovered 
example discovered patterns 
exists pattern weekdays am am est 
pattern occurs am pm est weekday 
experiment length sequence relatively short mining processes done minute 
understand behavior proposed asynchronous pattern mining algorithm constructed long synthetic sequences sensitive analysis algorithm sequences section 
synthetic sequence generation purpose evaluation performance synthetically generated sequences 
sequence consists distinct symbols occurrences symbols 
synthetic sequence generated follows 
sequence period length pattern selected geometric distribution mean number symbols involved pattern randomly chosen period number valid segments chosen geometrical distribution mean number repetitions valid segment follows geometrical distribution mean valid segment length disturbance determined geometrical distribution mean process repeats length sequence reaches 
sequences generated values table 
experiments set max period max dis min rep thetal data set ds ds ds ds table parameters synthetic data sets distance pruning section investigating effects distance pruning 
distance pruning thetal max different single patterns 
shows fraction patterns eliminated distance pruning 
evident number pruned patterns monotonically increasing function min rep threshold 
reasonable min rep threshold small portion potential single patterns need validated generate candidate complex pattern 
shows space utilized ongoing seq valid seq patterns lsi algorithm 
real space utilization far theoretical bound shown section due reasons 
large number candidate patterns pruned 
shown 
secondly theoretical analysis consider worst case space utilization ongoing seq reality space occupied ongoing seq theoretical bound 
min rep ds ds ds ds min rep ds ds ds ds effects distance pruning pattern verification distance pruning remaining potential single pattern validated lsi algorithm 
validation process pattern trivial task subsection demonstrate efficiency lsi algorithm comparing reasonable stage ts algorithm 
ts algorithm pattern valid segments discovered possible combinations valid segments tested repetition chosen 
shows average elapse time validating pattern 
note axis log scale 
evident lsi outperform ts algorithm order magnitude regardless min rep threshold 
response time shows response time find patterns 
axis shows value min rep axis shows response time 
higher min rep threshold shorter response time 
contrast formula due effect distance pruning shown 
min rep lsi ts min rep lsi ts min rep lsi ts min rep lsi ts lsi algorithm vs ts algorithm min rep ds ds ds ds response time propose flexible model asynchronous periodic patterns mine patterns length may subsequence occurrences may shifted due disturbance 
parameters min rep max dis employed specify minimum number repetitions required contiguous segment pattern occurrences maximum disturbance allowed successive valid segments 
satisfying requirements longest valid subsequence pattern returned 
phase algorithm devised generate potential periods distance pruning followed iterative procedure derive validate candidate patterns locate longest valid subsequence 
show algorithm provide linear time complexity respect input sequence length achieve space efficiency 
demonstrated experimental results 
agrawal srikant 
fast algorithms mining association rules 
proc 
th int 
conf 
large data bases 
agrawal srikant 
mining sequential patterns 
proc 
int 
conf 
data engineering icde taipei taiwan march 
agrawal psaila wimmers zait 
querying shapes histories 
proc 
st int 
conf 
large data bases 
bayardo jr efficiently mining long patterns databases 
proc 
acm sigmod conf 
management data 
bentley 
programming pearls 
communications acm vol 

berndt clifford 
finding patterns time series dynamic programming approach 
advances knowledge discovery data mining 
bettini wang jajodia jia ling lin 
discovering frequent event patterns multiple granularities time sequences 
ieee transaction knowledge data engineering 
chan fu 
efficient time series matching wavelets 
proc 
th int 
conf 
data engineering 
das 
lin mannila gopal padhraic smyth 
rule discovery time series 
proc 
int 
conf 
knowledge discovery datamining 
feldman aumann amir mannila 
efficient algorithms discovering frequent sets incremental databases 
proc 
acm sigmod workshop research issues data mining knowledge discovery dmkd 
srivastava 
event detection time series data 
proc 
acm sigkdd 
han gong yin 
mining segment wise periodic patterns time related databases 
proc 
int 
conf 
knowledge discovery data mining 
han dong yin 
efficient mining partial periodic patterns time series database 
proc 
int 
conf 
data engineering 
jagadish koudas muthukrishnan 
mining time series database 
proc 
th int 
conf 
large data bases vldb 
keogh smyth 
probabilistic approach fast pattern matching time series databases 
proc 
int 
conf 
knowledge discovery datamining 
korn jagadish faloutsos 
efficiently supporting ad hoc queries large datasets time sequences 
proc 
acm conf 
management data sigmod 
lin risch 
querying continuous time sequences 
proc 
th int 
conf 
large data base vldb 
liu hsu ma 
mining association rules multiple minimum supports 
proc 
acm sigkdd 
mannila toivonen verkamo 
discovery frequent episodes event sequences 
data mining knowledge discovery vol 

oates 
identifying distinctive subsequences multivariate time series clustering 
proc 
acm sigkdd 
ramaswamy silberschatz 
cyclic association rules 
proc 
th int 
conf 
data engineering 
qu wang wang 
supporting fast search time series movement patterns multiple scales 
proc 
th acm int 
conf 
information knowledge management 
rafiei 
similarity queries time series data 
proc 
th int 
conf 
data engineering 
ramaswamy mahajan silberschatz 
discovery interesting patterns association rules 
proc 
th intl 
conf 
large data bases vldb 
srikant agrawal 
mining sequential patterns generalizations performance improvements 
proc 
th int 
conf 
extending database technology edbt 
thomas sarawagi 
mining generalized association rules sequential patterns sql queries 
prof th intl 
conf 
knowledge discovery data mining kdd pp 


temporal reasoning qualitative quantitative information points durations 
proc 
th national conf 
artificial intelligence aaai 
yang wang yu 
mining surprising periodic patterns 
proc 
th intl 
conf 
knowledge discovery data mining kdd pp 


