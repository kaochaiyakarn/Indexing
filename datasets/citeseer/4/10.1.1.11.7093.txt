catamorphisms subtypes monad transformers writing modular functional interpreters 
luc duponcheel utrecht university ch utrecht netherlands luc cs ruu nl www cs ruu nl people luc november writing functional interpreters things need taken care having modularity mind syntax semantics 
previous papers methods subtypes monad transformers dealing semantics 
combines methods method catamorphisms dealing syntax 
subtypes monad transformers catamorphisms possible write library code building functional interpreters composed reusable components 
moggi proposes model semantics program computation 
wadler shows write programming language interpreters functions interpret syntax 
compute value 
type syntax represents syntax interpreted programming language 
unary type constructor compute turns type value semantic values type computations yield values 
authors proposed methods writing functional interpreters modular way 
jones duponcheel steele liang hudak jones :10.1.1.138.4552
interpreter written haskell see lazy functional programming language supports type classes 
interpreters written gofer see haskell dialect supports constructor classes generalisation type classes :10.1.1.138.4552
modular functional interpreters build combining reusable components 
component interprets specific part programming language 
modularity realised partitioning set syntactic constructs programming language subsets related constructs 
typical subsets describe arithmetic expressions variable definitions function application abstraction 
write interpreter component know value type final interpreter component 
similarly know computational features computation final interpreter component 
interpreter components written way impose constraints value type computation fixed ones 
example write component interpreting arithmetic expressions value type super type int 
arithmetic expressions handle division ongoing computation able throw error message number divided 
authors subtype class handle constraints value type modular way 
similarly class handle constraints computation modular way 
monad transformers generalise monad composition methods authors :10.1.1.138.4552
moggi suggested monad transformers deal problem modular monadic semantics 
interpreter composed reusable components 
uses monolithic data definition representing syntax interpreted language 
main contribution functor algebra class deal syntax interpreted language modular way 
syntax programming language modelled syntactic algebra functor 
semantics language modelled semantic algebra functor syntactic construct language corresponds semantic action algebra 
algebraic approach allows syntactic features combined 
algebraic approach combined monadic approach natural way 
functions defined making functors algebras referred catamorphisms 
malcolm shows usefulness catamorphisms functional programming 
meijer brought attention mainstream functional programming community 
meijer hutton ideas accessible way :10.1.1.1.7380
organised follows section show catamorphisms handling syntax modular way 
section briefly show handle semantics 
section presents components modular calculus interpreter similar 
components combination classes dealing syntax classes dealing semantics 
complete code ftp home page 
section draw 
dealing syntax section show interpret arithmetic expressions modular way 
starting monolithic interpreter section finish modular section 
try suppose written code simple expression evaluator 
data expr num int expr add expr num id add int eval expr 
int eval num num eval add eval add eval evaluator replaces syntactic constructs num add expr semantic actions num add int 
easily change expression evaluator handle division 
data expr num int expr add expr expr dvd expr dvd error divide eval expr 
int eval num num eval add eval add eval eval dvd eval dvd eval evaluator replaces syntactic construct dvd semantic action dvd 
note way build error function gofer throw error message number divided 
way throwing error messages non acceptable computational behaviour 
interpreters interactive programs want finish main read eval print loop exception dividing number occurs 
method adding new features albeit simple systematic serious disadvantage reused part code foregoing evaluator 
sense define data expr expr dvd expr eval expr 
int eval dvd eval dvd eval try combine eval eval way 
problem comes fact components try combine recursive nature 
combining recursive data functions result recursive data functions looking 
second try fortunately exists easy way problem subsection defining recursive components trying combine proceed way round combining non recursive components introducing recursion 
data definitions dealing data definitions expr expr section goes follows replace recursion extra type parameter 
data num int add data dvd recursion introduced follows data expr expr data expr expr data constructors needed avoid recursive types 
simple calculation shows types expr expr dvd expr 
expr expr expr dvd expr functions dealing functions eval eval section little bit complex 
define functions map map replace recursion extra function parameter 
map 


map num num map add add map 


map dvd dvd note replaced syntactic constructs num add dvd semantic counterparts num add dvd 
done functions phi phi 
phi int 
int phi num num phi add add phi int 
int phi dvd dvd functions num add dvd seen semantic actions int 
functions apply actions 
recursion introduced follows eval expr 
int eval phi map eval eval expr 
int eval phi map eval invite reader closer look types involved definition eval functions 
gofer type checker infer type eval functions definition 
bodies eval functions read follows data constructor stripped actual structure expression visible 
function eval job recursively subexpressions map 
numbers obtained recursively applying eval subexpressions assembled phi 
looks complicated matters 
finished function eval similar complex subsection function eval useless subsection 
comes reward concentrating data definitions expr expr functions eval eval concentrate data definitions functions phi phi 
combined resulting expression evaluator handle numbers addition division 
show done subsections 
general way combining data definitions functions data sum 




sum 


case 

combining data define combined data definition making sum 
recursive data definition expr defined way expr expr 
type sum mape data expr ine expr combining functions second define combined functions mape making 
recursive function defined way eval eval 
mape 


mape map 
map int 
int phi 
phi expr 
int ine mape looks promising writing code interpreter components think terms semantic actions functions phi phi correspond syntactic constructs data definitions 
code final interpreter obtained making sum data definitions 
semantic actions 
code handles recursion general nature relationship whatsoever specific interpreter mind 
third try having closer look code section reveals lot room generalisation 

expr data definitions similar 

types functions map phi bodies functions eval similar 

way combined functions map phi depend 
issues addresses section 
recursive data definitions data definitions expr expr similar 
similarity captured general recursive data definition data rec rec type expr rec type expr rec type expr rec simple calculation shows types expr expr 
expr rec rec expr note exactly calculation done expr expr 
recursive functions types functions map map similar 
fact way 
similarity captured appropriate constructor class 
constructor classes powerful features gofer 
generalisation type classes haskell 
typical example type class class eq 


bool type instance eq class appropriate equality operator defined 
typical instances instance eq int 
instance eq eq 
eq 
instance primitive equality operator numbers 
second instance shows build complex instances simpler ones 
advantage defining eq class comes fact overload operator defining general purpose functions types equality operator defined 
example elem eq 


bool elem false elem ys elem ys allowed type classes pass operator extra argument function elem 
code elem mention functions 
haskell implementation passes extra arguments water way 
feature extremely useful especially type classes involved 
haskell type checker infer type elem definition 
qualifier eq reflects fact definition elem 
stressed useful feature writing functional programs 
constructor classes similar type classes 
parameters class constructors types 
constructor classes supported gofer 
comes definition constructor class typical instance 
class functor map 


instance functor map xs xs functor class allows map notation normally working lists situations 
types functions map map mape section instances general type map 
corresponding class instances 
instance functor map map instance functor map map instance functor map mape functions map map mape follow pattern recursion defined member map functor class seen pattern recursion defined functor types functions phi phi section similar 
model making second constructor class corresponding instances 
class functor 
algebra phi 
types functions phi phi section instances general type phi 
corresponding class instances 
instance algebra int phi phi instance algebra int phi phi instance algebra int phi functions phi phi apply semantic actions int corresponding syntactic constructs functors member phi algebra class seen applying semantic actions algebra corresponding syntactic constructs functor defined algebra class define general recursive function eval terms follows eval algebra 
rec 
eval phi map eval definition looks opinion appealing 
pass extra parameters phi map 
gofer type checker infer type eval definition 
extra parameters simply replaced class constraint algebra body eval abstracts common pattern bodies functions eval eval section 
functions eval called fold referred catamorphisms 
name fold suggests exists similar unfold function 
case 
strongly recommend interested reader look called banana papers :10.1.1.1.7380
combining functors algebras function mape resp 
section defined terms map map resp 
phi phi way depend 
observation leads functor algebra class instances type sum mapc phic mapc functor functor 



mapc map 
map phic algebra algebra 

phic phi 
phi instance functor functor 
functor map mapc instance algebra algebra 
algebra phi phic general instances avoid writing similar definitions combining functions map map resp 
phi phi 
may look problems related modularity solved look syntax interpreted language partitioned parts write code components interpret parts 
rest done automatically making appropriate general purpose classes 
oversimplified matters 
dealt semantic aspects components 
components evaluating arithmetic expressions int semantic value type 
happens want component interpreter evaluate boolean expressions 
write components way put constraints value type fixed 
similarly components evaluating arithmetic expression computational features 
mentioned computations 
happens want component interpreter requires computational features throwing error dividing number way main read eval print loop 
write components way put constraints computation fixed 
type constructor classes turn excellent tools specifying constraints value type computation 
dealing semantics section show deal semantics interpreted language 
authors notably liang hudak jones 
go details 
reusable components calculus interpreter similar 
argued section components algebra instances represent application semantic actions 
ideas moggi computations 
consequence define semantic actions computations values 
way combine algebraic semantic action approach monadic computation approach elegant way 
sub typing write interpreter component say interpreting numbers know value type final interpreter component 
know want interpret numbers faithful way value type super type int 
subtypes super types modelled type class 
class subtype sub sup inj sub 
sup prj sup 
sub monads common behaviour computations modelled monad class 
way return result computation 
second way bind value returned computation continuation order yield new computation 
class functor 
monad result 
bind 


go details monads 
excellent usage monads functional programming 
excellent usage monad class 
monads gives functional programming imperative flavour 
gofer supports called notation imperative flavour apparent 
typical piece code syntax looks mx result results returned computations mx accessible function realised lambda abstraction bind 
fact code syntactic sugar mx bind 
bind 
result details notation refer interested reader release notes gofer 
presenting code interpreter components define useful function combines subtype monad features 
monad subtype sub sup 
sub 
sup result inj component numbers subsection code component interpreting numbers 
component handles division 
needs features ones offered monad class want throw error message dividing number 
computations throw error message modelled constructor class derived monad class 
class monad 
throw string 
ingredients needed writing number interpreter component 
code component general turns help gofer type checker bit introducing safe type casts 
data num int add dvd num mx add mx prj prj 
int 
int 
int mx dvd mx prj throw divide prj prj 
int 
int 
int instance subtype int 
algebra phi num num phi mx add mx add phi mx dvd mx dvd emphasise fact gofer type checker infer requirements value type computation 
interpreter number component value type contains integers computation throw error messages 
component functions spectacular component function abstraction function application 
known fact order treat functions class citizens value type super type function type 
property called reflexivity 
monadic framework need value type super type monadic function type 
monadic functions map computations computations values values 
monadic reflexivity modelled class purpose define synonym special instance existing class 
class subtype 

reflexive instance subtype 

reflexive class special sense puts common requirement value type computation 
function application abstraction example implemented making environment consists table holds monadic values 
ongoing computation able read current environment compute new environment 
computational behaviour modelled class derived monad class 
class monad 
env read env env 

ready function interpreter component 
application handled evaluating function applying argument evaluated table obtains evaluating function 
abstraction handled returning function uses table updated appropriate way 
notice call value update result computation call name update computation 
type table string monad 
string 
table 
table tab result tab table 
table 

data app string call name string call value app mf ma mf tab read prj tab ma mb tab read 

tab mb mb tab read 

result tab mb instance table reflexive 
algebra phi app mf ma app mf ma phi mb mb phi mb mb interpreter component able table environment reflexive sense value type super type monadic function type 
example dealt problem realising class constraints 
produce value type monad realise constraints imposed components final interpreter 
realising subtype constraints subtype constraints realised sum data type 
build towers types type value sum int bool types int bool subtypes type value 
purely technical reasons avoiding overlapping subtype class instances introduce dummy type synonym type 
id 
id realising monad constraints monad constraints realised monad transformers 
modelled class class monadt lift 
idea define special monad class example class monad transformer say transformed monad instance 
lift member monadt class hope lift computational features original monad transformed monad way monad extra computational feature case ability throw error messages 
typical chain transformed monads type compute envt table id transformers envt monad compositions left reader monad right error monad respectively see information :10.1.1.138.4552
resulting monad table environment throw error messages 
identity monad base monad 
want build interpreter handle nondeterministic computations list monad base monad 
nondeterminism show difference call name call need semantics 
typical session interpreter features needed show difference 
main author luc duponcheel 
parse :10.1.1.1.7380
eval :10.1.1.138.4552
parse :10.1.1.1.7380
eval note idea list monad transform monads :10.1.1.138.4552
composing list monad associativity law monad composition hold see minimal counterexample :10.1.1.138.4552
showed catamorphisms dealing syntax interpreted language modular way 
results functional interpreters composed reusable components 
modelled catamorphisms making constructor classes combined classes classes previous structure semantics interpreted language 
written reusable component library build calculus interpreters flexible way 
gofer type system turned extremely useful writing code components 
writing modular interpreters summarised follows ffl partition syntax interpreted language parts contain related constructs 
model syntax parts functors 
write interpreter components algebras semantic actions corresponding syntactic constructs 
model syntax language sum functors parts 
model semantics language sum algebras parts 
fixed point final functor algebra obtain final interpreter 
ffl subtypes away actual value types interpreter components 
realise subtype requirements final interpreter building semantic domain tower types 
ffl appropriate computational abstractions writing interpreter components 
realise computational abstractions building monad chain monad transformers 
methods writing modular interpreter code concrete interpreters 
interpreters type checkers 
author currently working modular type checker components 
type checker components avoid overhead substitutions representing types graphs 
believe framework possible write range type checkers type checkers linear types flexible way 
graham hutton reading early draft giving helpful suggestions 
furthermore doaitse swierstra giving opportunity 
erik meijer maarten fokkinga ross paterson 
functional programming bananas lenses envelopes barbed wire 
john hughes editor proc 
conference functional programming computer architecture 
springer verlag june 
lecture notes computer science 
erik meijer graham hutton :10.1.1.1.7380
bananas space extending fold unfold exponential types 
proc 
conference functional programming computer architecture 

mark jones luc duponcheel :10.1.1.138.4552
composing monads 
research report yaleu dcs rr yale university department computer science new haven connecticut december 
mark jones 
official release notes gofer ftp ftp cs nott ac uk nott fp languages gofer paul hudak simon peyton jones philip wadler 
report programming language haskell non strict purely functional language version 
acm sigplan notices vol 
may 
mark jones 
system constructor classes overloading implicit higher order polymorphism 
proc 
conference functional programming computer architecture 
new york june 
acm press 
mark jones 
system constructor classes overloading implicit higher order polymorphism 
journal functional programming january 
sheng liang paul hudak mark jones 
monad transformers modular interpreters 
proc 
nd acm symposium principles programming languages 
san francisco january 
malcolm 
algebraic data types program transformation science computer programming vol pp 
september 
guy steele jr building interpreters composing monads 
proc 
st acm symposium principles programming languages 
new york january 
eugenio moggi 
view programming languages 
technical report ecs lfcs laboratory foundations computer science university edinburgh scotland 
philip wadler 
essence functional programming 
proc 
th acm symposium principles programming languages 
new mexico january 

