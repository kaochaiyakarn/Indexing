disconnected operation coda file system james kistler satyanarayanan carnegie mellon university disconnected operation mode operation enables client continue accessing critical data temporary failures shared data repository 
important exclusive application disconnected operation supporting portable computers 
show disconnected operation feasible efficient usable describing design implementation coda file system 
central idea caching data widely performance exploited improve availability 
categories subject descriptors operating systems file systems management distributed file systems operating systems reliability fault tolerance operating systems performance general terms design experimentation measurement performance reliability additional key words phrases disconnected operation hoarding optimistic replication reintegration second class replication server emulation 
serious user distributed system faced situations critical impeded remote failure 
frustration particularly acute workstation powerful standalone configured dependent remote resources 
important inst ante dependence data distributed file syst em 
placing data distributed file system simplifies collaboration users allows delegate administration data 
growing popularity distributed file systems nfs afs supported defense advanced research projects agency avionics lab wright research development center aeronautical systems division afsc air force wright patterson afb ohio contract arpa order national science foundation pyi award ecd ibm faculty development award graduate fellowship research initiation digital equipment external research project bellcore information networking research 
authors address school computer science carnegie mellon university pittsburgh pa 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm acm transactions computer systems vol 
february pages 

kistler satyanarayanan attests compelling nature considerations 
unfortunately users systems accept fact remote failure critical juncture may seriously inconvenience 
improve state affairs 
ideally enjoy benefits shared data repository able continue critical repository inaccessible 
call mode operation disconnected operation represents temporary deviation normal operation client shared repository 
show disconnected operation file system feasible efficient usable 
central idea caching data widely improve performance exploited enhance availability 
implemented disconnected opera tion coda file system carnegie mellon university 
initial experience coda confirms viability disconnected operation 
successfully operated disconnected periods lasting days 
disconnection duration process propagating changes typically takes minute 
local disk mb adequate periods disconnection 
trace driven simulations indicate disk half size adequate disconnections lasting typical 

design overview coda designed environment consisting large collection untrusted unix clients smaller number trusted unix file servers 
design optimized access sharing patterns typical academic research environments 
specifically intended applications exhibit highly concurrent fine granularity data access 
coda client local disk communicate servers high bandwidth network 
certain times client may temporarily unable communicate servers 
may due server network failure due detachment portable client network 
clients view coda single location transparent shared unix file sys tem 
coda namespace mapped individual file servers larity subtrees called volumes 
client cache manager venus dynamically obtains caches volume mappings 
coda uses distinct complementary mechanisms achieve high availability 
mechanism server replication allows volumes read write replicas server 
set replication sites volume volume storage group 
subset currently accessible client accessible 
performance cost server replication kept low caching disks clients parallel access protocols 
venus uses cache coherence protocol callbacks guarantee open file yields latest unix trademark bell telephone labs acm transactions computer systems vol 
february disconnected operation coda file system 
guarantee provided servers notifying clients cached copies longer valid notification referred callback break 
modifications coda propagated parallel sites eventually missing sites 
disconnected operation second high availability mechanism coda takes effect empty 
disconnected venus services file system requests relying solely contents cache 
cache misses serviced masked appear failures application programs users 
disconnection ends venus propagates modifications reverts server replication 
depicts typical scenario involving transitions server replication disconnected operation 
earlier coda papers described server replication depth 
contrast restricts attention disconnected operation 
discuss server replication areas presence signifi cantly influenced design disconnected operation 

design rationale high level factors influenced strategy high availability 
wanted conventional shelf hardware system 
second wished preserve transparency seamlessly inte grating high availability mechanisms coda normal unix environment 
detailed level considerations influenced design 
include need scale gracefully advent portable workstations different resource integrity security assumptions clients servers need strike balance availability consistency 
examine issues sections 
scalability successful distributed systems tend grow size 
experience coda ancestor afs impressed need prepare growth priori treating afterthought 
brought experience bear coda ways 
adopted certain mecha nisms enhance scalability 
second drew set general principles guide design choices 
example mechanism adopted scalability callback cache coherence 
mechanism file caching offers added advantage simpler failure model cache occur open read write seek close 
turn substantially simplifies implementation disconnected operation 
partial file caching scheme afs echo mfs complicated implementation disconnected operation transparent 
scalability principle considerable influence design placing functionality clients servers 
integrity acm transactions computer systems vol february 
kistler satyanarayanan acm transactions computer systems vol 
february disconnected operation coda file system security compromised violated principle 
scalability principle adopted avoidance wide rapid change 
consequently rejected strategies require election agreement large numbers nodes 
example avoided algorithms locus depend nodes achieving consensus current partition state network 
portable workstations powerful lightweight compact laptop computers commonplace today 
instructive observe person data shared file system uses machine 
typically identifies files interest downloads shared file system local name space isolated 
returns copies modified files back shared file system 
user effectively performing manual caching write back reconnection 
early design coda realized disconnected operation substantially simplify portable clients 
users different name space isolated man propagate changes reconnection 
portable machines champion application disconnected operation 
portable machines gave insight 
fact people able operate extended periods isolation indicates quite predicting file access needs 
turn suggests reasonable seek user assistance augmenting cache management policy disconnected operation 
functionally involuntary disconnections caused failures different disconnections caused portable computers 
coda provides single mechanism cope disconnections 
course may qualitative differences user expectations extent user cooperation different cases 
vs second class replication disconnected operation feasible server replication needed 
answer question depends critically different assumptions clients servers coda 
clients appliances turned may unattended long periods time 
limited disk storage capacity software hardware may tampered owners may diligent backing local disks 
servers public utilities greater disk capacity physically secure carefully monitored administered professional staff 
appropriate distinguish class replicas servers second class replicas cache copies clients 
class replicas higher quality persistent widely known secure available complete accurate 
second class replicas contrast inferior dimensions 
periodic revalidation respect class replica second class replica useful 
acm transactions computer systems vol 
february 

kistler satyanarayanan function cache coherence protocol combine performance scalability advantages second class replica quality class replica 
disconnected quality second class replica may degraded class replica contingent inaccessible 
longer duration disconnection greater poten tial degradation 
server replication preserves quality data face failures disconnected operation quality avail ability 
server replication important reduces fre quency duration disconnected operation properly viewed measure resort 
server replication expensive requires additional hardware 
disconnected operation contrast costs little 
server replication trade quality cost 
coda permit volume sole server replica 
installation rely exclusively disconnected operation chooses 
optimistic vs pessimistic replica control definition network partition exists disconnected second class replica class associates 
choice families replica control strategies pessimistic optimistic central design disconnected operation 
pessimistic strategy avoids conflict ing operations disallowing partitioned writes restricting reads writes single partition 
optimistic strategy provides higher availability permitting reads writes deals attendant danger conflicts detecting resolving occurrence 
pessimistic approach disconnected operation require client acquire shared exclusive control cached object prior disconnection retain control reconnection 
possession exclusive control disconnected client preclude reading writing replicas 
possession shared control allow reading replicas writes forbidden 
acquiring control prior voluntary disconnection relatively simple 
difficult disconnection involuntary system may arbitrate multiple requesters 
unfortunately information needed wise decision readily available 
example system predict requesters object release control relative costs denying access 
retaining control reconnection acceptable case brief disconnections 
unacceptable case extended disconnections 
disconnected client shared control object force rest system defer updates reconnected 
exclusive control prevent users making copy object 
coercing client reconnect may feasible whereabouts may acm transactions computer systems vol 
february disconnected operation coda file system known 
entire user community mercy single errant client unbounded amount time 
placing time bound exclusive shared control done case leases avoids problem introduces 
lease expires disconnected client loses ability access cached object system interested 
turn defeats purpose disconnected operation provide high availability 
worse updates disconnected discarded 
optimistic approach disadvantages 
update disconnected client may conflict update disconnected connected client 
optimistic replication viable system sophisticated 
needs machinery system detecting conflicts automating resolution possible confining dam age preserving evidence manual repair 
having repair conflicts manually violates transparency annoyance users reduces usability system 
chose optimistic replication felt strengths weaknesses better matched design goals 
dominant influence choice low degree write sharing typical unix 
implied optimistic strategy lead relatively conflicts 
optimistic strategy consistent goal providing highest possible availability data 
principle chosen pessimistic strategy server replica tion choosing optimistic strategy disconnected operation 
reduced transparency user faced anomaly able update data disconnected unable connected subset servers 
previous arguments favor optimistic strategy apply server replication 
optimistic strategy presents uniform model system user perspective 
time able read latest data accessible universe updates immediately visible universe 
accessible universe usually entire set servers clients 
failures occur accessible universe shrinks set servers contact set clients turn contact 
limit operating disconnected accessible universe consists just machine 
reconnection updates visible enlarged accessible universe 

detailed design implementation describing implementation disconnected operation focus client complexity lies 
section describes physical structure client section introduces major states venus sections discuss states detail 
descrip tion server support needed disconnected operation contained section 
acm transactions computer systems vol 
february 
kistler satyanarayanan client structure fig 
structure ofa coda client 
coda servers complexity venus user level process part kernel 
approach may yielded better perfor mance portable considerably difficult debug 
illustrates high level structure coda client 
venus intercepts unix file system calls widely sun vnode interface 
interface imposes heavy performance overhead user level cache managers tiny kernel filter kernel venus interactions 
contains support remote access disconnected operation server replication functions handled entirely venus 
system call coda object forwarded vnode interface 
possible call serviced control returned application 
contacts venus service call 
turn may involve contacting coda servers 
control returns venus application program updating state side effect 
state changes may initiated venus events callback breaks coda servers 
measurements implementation confirm critical performance venus states logically venus operates states hoarding emulation reintegration 
depicts states transitions 
venus normally hoarding state relying server replication alert possible disconnection 
disconnection enters emulation state remains duration disconnection 
reconnection venus enters reintegration state acm transactions computer systems vol february disconnected operation coda file system hoarding fig 

venus states transitions 
disconnected venus emulation state 
transmits reintegration successful reconnection member hoarding resumes connected operation 
cache reverts hoarding state 
volumes may replicated set servers venus different states respect different volumes depending failure conditions system 
hoarding hoarding state named key responsibility venus state hoard useful data anticipation disconnection 
responsibility 
venus manage cache manner balances needs connected disconnected operation 
stance user may indicated certain set files critical may currently files 
provide performance venus cache files 
prepared disconnection cache set files 
factors complicate implementation hoarding file behavior especially distant predicted certainty 
disconnections reconnection unpredictable 
true cost cache disconnected highly variable hard quantify 
activity clients accounted latest version object cache disconnection 
cache space finite availability critical objects may sacrificed favor critical objects 
acm transactions computer systems vol 
february 
kistler satyanarayanan personal files xii files coda usr jjk xll maintainer coda usr jjk papers usr xll bin coda usr jjk pape rs sosp usr xll bin usr xll bin mwm system files usr xl bin usr bin usr xll bin clock usr usr xll bin usr include usr xll bin usr lib usr xll xll bitmaps usr local gnu usr xll lib app defaults usr local rcs usr xll lib font mist usr ucb usr xl lib system venus source files shared coda developers coda project coda src venus coda project coda include coda project coda lib fig 

sample hoard profiles 
typical hoard profiles provided hy coda user application maintainer group project developers 
profile interpreted separately hdb front program line indicates add entry command 
commands delete entry clear entries list entries 
modifiers pathnames specify priorities default entry 
note pathnames usr symbolic links coda 
address concerns manage cache prioritized algorithm periodically reevaluate objects merit retention cache process known hoard walking 
prioritized cache management 
venus combines implicit ex plicit sources information priority cache management algo rithm 
implicit information consists history traditional caching algorithms 
explicit information takes form workstation hoard database hdb entries pathnames identi fying objects interest user workstation 
simple front program allows user update hdb command scripts called hoard profiles shown 
hoard profiles just files simple application maintainer provide common profile users 
users collaborating project maintain common profile 
user customize hdb specifying different combinations profiles executing front commands inter actively 
facilitate construction hoard profiles venus record file observed pair start events indicated user 
reduce verbosity hoard profiles effort needed maintain venus supports meta expansion hdb entries 
shown letter follows pathname command applies acm transactions computer systems vol february disconnected operation coda file system immediate children descendants 
indi cates command applies children descendants 
hoard entry may optionally indicate hoard priority higher priorities indicating critical objects 
current priority cached object function hoard priority metric representing usage 
updated continu ously response new serves age priority objects longer working set 
objects lowest priority chosen victims cache space reclaimed 
resolve pathname cached object disconnected imperative ancestors object cached 
venus ensure cached directory purged descendants 
hierarchical cache management needed tradi tional file caching schemes cache misses name translation serviced albeit performance cost 
venus performs hierarchical cache management assigning infinite priority directories cached children 
automatically forces replacement occur bottom 
hoard walking 
say cache equilibrium signifying meets user expectations availability uncached object higher priority cached object 
equilibrium disturbed result normal activity 
example suppose object brought cache demand replacing object suppose mentioned hdb 
time activity ceases priority decay hoard priority cache longer equilibrium cached object lower priority uncached object venus periodically restores equilibrium performing operation known hoard walk 
hoard walk occurs minutes current implementation may explicitly required user prior voluntary disconnection 
walk occurs phases 
name bindings hdb entries reevaluated reflect update activity coda clients 
example new children may created direc tory pathname specified option hdb 
second priorities entries cache hdb reevaluated objects fetched evicted needed restore equilibrium 
hoard walks address problem arising callback breaks 
traditional callback caching data demand callback break 
coda strategy may result critical object unavailable disconnection occur 
immediately callback break avoids problem ignores key characteristic unix environments object modified modified times user short interval 
immediate policy increase client server traffic considerably reducing scalability 
strategy compromise balances availability consistency scalability 
files symbolic links venus object callback acm transactions computer systems vol 
february satyanarayanan break demand hoard walk whichever occurs earlier 
disconnection occur object unavailable 
directories venus purge callback break marks cache entry suspicious 
stale cache entry available disconnection occur hoard walk refer ence 
acceptability stale directory data follows particular callback semantics 
callback break directory typically means entry added deleted directory 
case directory entries objects name unchanged 
saving stale copy event causes consistency suffer little increases availability considerably 
emulation emulation state venus performs actions normally handled servers 
example venus assumes full responsibility access semantic checks 
responsible generating temporary file identi new objects pending assignment permanent reintegration 
venus functioning pseudo server updates accepted respect integrity protection real servers 
follows coda policy trusting servers clients 
minimize unpleasant delayed surprises disconnected user venus faithful possible emulation 
cache management emulation done priority algorithm hoarding 
mutating operations directly update cache entries objects involved 
cache entries deleted objects freed immediately modified objects assume infinite prior ity purged reintegration 
cache default behavior venus return error code 
user may optionally request venus block processes cache misses serviced 
logging 
emulation venus records sufficient information replay update activity 
maintains information volume log mutating operations called replay log 
log entry contains copy corresponding system call arguments version state objects referenced call 
venus uses number optimizations reduce length replay log resulting log size typically percent cache size 
small log conserves disk space critical resource periods disconnection 
improves reintegration performance reducing latency server load 
important optimization reduce log length pertains write operations files 
coda uses file caching close open file modification installs completely new copy file 
logging open close intervening write operations individually venus logs single store record handling close optimization consists venus discarding previous store record file new appended log 
follows fact acm transactions computer systems vol 
february disconnected operation coda file system store renders previous versions file superfluous 
store record contain copy file contents merely points copy cache 
currently implementing optimizations reduce length replay log 
generalizes optimization described previous paragraph operation overwrites effect earlier operations may cancel corresponding log records 
example canceling store subsequent unlink truncate 
second optimization exploits knowledge inverse operations cancel inverting inverted log records 
example rmdir may cancel log record corresponding mkdir 
persistence 
disconnected user able restart ma chine shutdown continue left 
case crash amount data lost greater failure occurred connected operation 
provide guarantees venus keep cache related data structures nonvolatile storage 
data consisting cached directory symbolic link contents status blocks cached objects types replay logs hdb mapped venus address space recoverable virtual memory rvm 
transac tional access memory supported rvm library linked venus 
actual contents cached files rvm stored local unix files 
transactions manipulate meta data simplifies venus job enormously 
maintain invariants venus need ensure transaction takes meta data consistent state 
need concerned crash recovery rvm handles transparently 
chosen obvious alternative placing meta data local unix files follow strict discipline carefully timed synchronous writes ad hoc recovery algorithm 
rvm supports local non nested transactions allows independent con trol basic transactional properties atomicity permanence serializability 
application reduce commit latency labelling commit flush avoiding synchronous write disk 
ensure persistence flush transactions application explicitly flush rvm write ahead log time time 
manner rvm provides bounded persistence bound period log flushes 
venus exploits capabilities rvm provide performance constant level persistence 
hoarding venus initiates log flushes infrequently copy data available servers 
servers accessible emulating venus conservative flushes log frequently 
lowers performance keeps amount data lost client crash acceptable limits 
resource exhaustion 
possible venus exhaust non volatile storage emulation 
significant instances acm computer systems vol 
february kistler satyanarayanan file cache filled modified files rvm space allocated replay logs full 
current implementation graceful handling situa tions 
file cache full space freed truncating deleting modified files 
log space full mutations allowed ion performed 
course non rout ing operations allowed 
plan explore alternatives free disk space emulating 
possibility compress file cache rvm contents 
compression trades computation time space shown promising tool cache management 
second possibility allow users selectively back updates disconnected 
third approach allow portions file cache rvm written removable media floppy disks 
reintegration reintegration transitory state venus passes changing roles pseudo server cache manager 
state venus propagates changes emulation updates cache reflect current server state 
reintegration performed volume time update activity volume suspended completion 
replay algorithm 
propagation changes client accomplished steps 
step venus obtains permanent new objects uses replace temporary replay log 
step avoided cases venus obtains small supply permanent advance need hoarding state 
second step replay log shipped parallel executed independently member 
server performs replay single transaction aborted error detected 
replay algorithm consists phases 
phase log parsed transaction begun objects referenced log locked 
phase operation log validated executed 
validation consists conflict detection integrity protection disk space checks 
case store operations execution replay identical execution connected mode 
store empty shadow file created meta data updated data transfer deferred 
phase consists exclusively performing data transfers process known bac fetching 
final phase commits transaction releases locks 
ation succeeds venus frees replay log resets priority cached objects referenced log 
reintegration fails venus writes replay log local replay file superset unix tar format 
log corresponding cache entries purged subse quent cause current contents 
tool provided allows user inspect contents replay file compare state replay selectively entirety 
acm transactions computer systems vol 
february disconnected operation coda file system reintegration finer granularity volume reduce latency perceived clients improve concurrency load balancing servers reduce user effort manual replay 
revising implementation granularity subsequences depen dent operations volume 
dependent subsequences identified precedence graph approach davidson 
revised imple mentation venus maintain precedence graphs emulation pass servers replay log 
handling 
optimistic replica control means disconnected operations client may conflict activity servers disconnected clients 
class conflicts concerned write write conflicts 
read write conflicts relevant unix file system model notion atomicity boundary single system call 
check conflicts relies fact replica object tagged uniquely identifies update 
phase replay server compares object mentioned log entry replica object 
comparison indicates equality objects operation performed mutated objects tagged new specified log entry 
comparison fails action taken depends operation validated 
case store file entire reintegration aborted 
directories conflict declared newly created name collides existing name object updated client server deleted directory attributes modified server client 
strategy resolving partitioned directory updates consistent strategy server replication originally suggested locus 
original design disconnected operation called preservation replay files servers clients 
approach allow damage confined marking conflicting replicas inconsistent forcing manual repair currently done case server replication 
awaiting usage experience determine correct approach disconnected operation 

status evaluation today coda runs ibm rts decstation laptops toshiba 
small user community coda daily basis primary data repository april 
development coda done coda 
july nearly mb replicated data coda plans expand gb months 
version disconnected operation minimal functionality demon october 
complete version functional january regular 
successfully operated disconnected periods lasting days 
experience system acm transactions computer systems vol february 
kistler satyanarayanan andrew benchmark venus time table time reintegration reintegration time size replay log seconds replay con records bytes data back fetched bytes note data obtained toshiba client mb memory mb disk ethernet ibm rt apc server mb memory mb disk 
values shown means trials figures parentheses standard deviations 
quite positive confident refinements development result usable system 
sections provide qualitative quantitative answers important questions pertaining disconnected operation 
long reintegration take 
large local disk need 
conflicts 
duration reintegration experience typical disconnected sessions editing program development lasting hours required minute reintegration 
characterize reintegration speed precisely measured times disconnected execution defined tasks 
task andrew benchmark widely basis comparing file system performance 
second task compiling linking current version venus 
table presents reintegration times tasks 
time reintegration consists components time allo cate permanent time replay servers time second phase update protocol server replication 
component zero disconnections due preallocation hoarding 
expect time second component fall considerably cases incorporate replay log optimizations described section 
third component avoided server replication 
interesting secondary observations table 
total time ation roughly tasks andrew benchmark smaller elapsed time 
andrew benchmark uses file system intensively 
sec ond reintegration venus takes longer number entries replay log smaller 
file data acm transactions computer systems vol 
february max avg cl min disconnected operation coda file system 
time hours fig 

high water mark cache usage 
graph total traces active coda workstations 
curve labelled avg corresponds values obtained averaging high water marks workstations 
curves labeled max min plot highest lowest values high water marks workstations 
note high water mark include space needed paging hdb replay logs 
back fetched third phase replay 
task involves think time 
result reintegration times comparable longer typical disconnected session environment 
cache size local disk capacity mb clients proved adequate initial sessions disconnected operation 
obtain better understanding cache size requirements disconnected operation analyzed file traces environment 
traces obtained instrumenting workstations record information file system operation regardless file coda afs local file system 
analysis simulations driven traces 
writing validating simulator precisely models complex caching behavior venus quite difficult 
avoid difficulty modified venus act simulator 
running simulator venus driven traces requests kernel 
code communicate servers code perform physical local file system simulation 
shows high water mark cache usage function time 
actual disk size needed disconnected operation larger explicit implicit sources hoarding information imperfect 
data appears disk mb adequate operating disconnected typical 
course user activity acm transactions computer systems vol 
february 
satyanarayanan drastically different recorded traces produce significantly different results 
plan extend trace driven simulations ways 
investigate cache size requirements longer periods disconnection 
second sampling broader range user activity obtaining traces machines environment 
third evaluate effect hoarding simulating traces hoard profiles specified ex ante users 
likelihood conflicts optimistic server replication coda nearly year seen virtually conflicts due multiple users updating object different network partitions 
observation subject criticisms 
possible users cautious knowing dealing experimental system 
second conflicts problem coda user community grows larger 
third extended voluntary disconnections lead conflicts 
obtain data likelihood conflicts larger scale mented afs servers environment 
servers computer science faculty staff graduate students research program development education 
usage profile includes signifi cant amount collaborative activity 
coda descended afs kind usage assumptions data esti mate frequent conflicts coda replace afs environment 
time user modifies afs file directory compare identity user previous mutation 
note time interval mutations 
file close open update counted mutation individual write operations counted 
directories operations modify directory counted mutations 
table ii presents observations period twelve months 
data classified volume type user volumes containing private user data project volumes collaborative system volumes containing program binaries libraries header files similar data 
average project volume files directories system volume files directories 
user volumes tend smaller averaging files directories users place data project volumes 
table ii shows modifications previous writer chances different users modifying object day apart 
expected see highest degree write sharing project files directories surprised see occurs system files 
conjecture significant fraction sharing arises modifications system files operators change shift periodically 
system files excluded absence acm transactions computer systems vol 
february disconnected operation coda file system acm transactions computer systems vol 
february kistler satyanarayanan write sharing striking mutations previous writer chances different users modifying object week data highly ing point view optimistic replication 
suggests conflicts serious problem afs replaced coda environment 

related coda unique exploits caching performance high availability preserving high degree transparency 
aware system published unpublished duplicates key aspect coda 
providing tools link local remote name spaces cedar file system provided rudimentary support disconnected operation 
primary goal cedar provide support hoarding transparent ation conflict detection 
files ver immutable cedar cache manager substitute cached version file unqualified remote file server inaccessible 
implementors cedar observe ity exploited remote files normally referenced specific version number 
birrell schroeder pointed possibility data availability early discussion echo file system 
description echo indicates uses highest levels naming hierarchy 
face file system uses integrate caching 
lack integration negative consequences 
reduces transparency users applications deal different name spaces different consistency properties 
second tion local disk space worse 
third usage information cache management available manage 
available literature face report lack integration usability system 
application specific form disconnected operation implemented system mit 
allowed clients disconnect manipulate existing mail messages generate new ones central repository reconnection 
relying heavily semantics mail transparent coda required manual resynchronization clients servers 
optimistic replication distributed file systems pioneered locus 
locus peer peer model clientserver model availability achieved solely server replication 
notion caching disconnected operation 
coda benefited general sense large body transparency performance distributed file systems 
particular coda owes afs inherits model trust integrity mechanisms design philosophy scalability 
acm transactions computer systems vol 
february 

disconnected operation coda file system disconnected operation coda facility active development 
earlier sections described progress areas log optimization granularity reintegration evaluation hoarding 
additional done lower levels system 
section consider ways scope may broadened 
excellent opportunity exists coda adding transactional support unix 
explicit transactions desirable systems scale hun thousands nodes informal concurrency control unix effective 
mechanisms supporting disconnected operation operation logging precedence graph maintenance conflict checking transfer directly transactional system optimistic concurrency control 
transactional file systems new idea system scalability availability performance properties coda proposed built 
different opportunity exists extended coda support weakly con nected operation environments connectivity intermittent low bandwidth 
conditions networks rely voice grade lines wireless technologies packet radio 
ability mask failures provided disconnected operation value weak connectivity 
techniques exploit adapt communi cation opportunities hand needed 
techniques may include aggressive write back policies compressed network transmission partial file transfer caching intermediate levels 

disconnected operation simple idea 
preload cache critical data continue normal operation dis connection log changes disconnected replay reconnect ion 
implementing disconnected operation simple 
involves major modifications careful attention detail aspects cache man agement 
hoarding surprisingly large volume variety lated state maintained 
emulating persistence integrity client data structures critical 
reintegration dynamic choices granularity reintegration 
hindsight realize extent implementations traditional caching schemes simplified guaranteed presence lifeline class replica 
purging demand strategy handle pathological situations implementa tions viable supporting disconnected operation 
obstacles realizing disconnected operation insurmountable 
central message disconnected operation feasible efficient usable 
way view regard extension idea write back caching 
write back caching hitherto acm transactions computer systems vol 
february 
kistler satyanarayanan performance shown extended mask temporary failures 
broader view disconnected operation allows graceful transitions states autonomy interdependence distributed system 
favorable conditions approach provides benefits remote data access unfavorable conditions provides continued access critical data 
certain disconnected operation increasingly important distributed systems grow scale diversity vulnerability acknowledgments wish lily invaluable assistance collecting postprocessing file traces section dimitris helped instrument afs servers yielded measure ments section 
wish express appreciation past contributors coda project especially kumar hank maria okasaki david steere 

burrows efficient data sharing phd thesis univ cambridge computer laboratory dec 

cat gross concepts compression caching level file system 
proceedings th acm symposium architectural support programm mg languages operating systems santa clara calif apr pp 

resource management federated computing environments 
phd thesis dept computer science princeton univ oct 

davidson optimism consistency partitioned distributed database systems 
acm trans 
database syst 
sept 

davidson garcia skeen consistency partitioned networks 
acm comput 

sept 

floyd transparency distributed file systems 
tech 
rep tr dept computer science univ rochester 

gray cheriton leases efficient fault tolerant mechanism distributed file cache consistency 
proceedings th acm operating system principles park dec pp 


hisgen birrell mann schroeder swart availability consistency tradeoffs echo distributed file system 
proceedings second workshop workstation operating systems pacific grove calif sept pp 


howard kazar menees nichols satyanarayanan sidebotham west scale performance distributed file system 
acm trans 
comput 
syst 
feb 

kleiman vnodes architecture multiple tile system types sun unix 
summer usenix conference proceedings atlanta ga june pp 

kumar satyanarayanan log directory resolution coda file system tech 
rep cmu cs school computer science carnegie mellon univ 

lambert distributed mail system personal computers 
darpa internet rfc 
satyanarayanan rvm recoverable virtual memory user manual 
school computer science carnegie mellon univ 
acm transactions computer systems vol 
february disconnected operation coda file system 
needham herbert report third european sigops workshop autonomy interdependence distributed systems reu 
apr 

ousterhout harrison kunze kupfer thompson trace driven analysis bsd file system 
proceedings th acm symposium operating system orcas island wash dec pp 


sandberg goldberg kleiman walsh lyon design implementation sun network filesystem 
summer usenix conference proceedings portland ore june pp 


satyanarayanan influence scale distributed system 
proceedings th international conference software engineering singapore apr pp 


satyanarayanan kistler kumar okasaki siegel steere coda highly available file system distributed workstation environment 
ieee trans 
comput 
apr 

satyanarayanan scalable secure highly available distributed file access 
ieee comput 
may 

schroeder gifford needham caching file system programmer workstation 
proceedings th acm symposium operating system principles orcas island wash dec pp 


steere kistler satyanarayanan efficient user level cache file management sun vnode interface 
summer usenix conference proceedings anaheim calif june pp 


file system transarc jan 

walker popek english kline thiel locus distributed operating system 
proceedings th acm symposium operating system principles woods oct pp 

received june revised august accepted september acm transactions computer systems vol 
february 
