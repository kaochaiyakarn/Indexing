optimizing search engines clickthrough data presents approach automatically optimizing retrieval quality search engines clickthrough data 
intuitively information retrieval system relevant documents high ranking relevant documents 
previous approaches learning retrieval functions examples exist typically require training data generated relevance judgments experts 
difficult expensive apply 
goal develop method utilizes clickthrough data training query log search engine connection log links users clicked ranking 
clickthrough data available abundance recorded low cost 
support vector machine svm approach presents method learning retrieval functions 
theoretical perspective method shown founded risk minimization framework 
furthermore shown feasible large sets queries features 
theoretical results verified controlled experiment 
shows method effectively adapt retrieval function meta search engine particular group users outperforming google terms retrieval quality couple training examples 

www page user want retrieve types keywords search engine 
typically thousands pages contain words user interested smaller subset 
simply ask user feedback 
knew set pages relevant user query training data optimizing personalizing retrieval function 
unfortunately experience shows users rarely willing give explicit feedback 
argues sufficient information hidden logfiles www search engines 
major search engines re permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigkdd edmonton alberta canada copyright acm 
thorsten joachims cornell university department computer science ithaca ny usa tj cs cornell edu millions queries day data available abundance 
compared explicit feedback data typically elicited laborious user studies information extracted logfiles virtually free substantially timely 
presents approach learning retrieval functions analyzing links users click ranking 
leads problem learning preference examples query document da ranked higher document db 
generally formulate problem learning ranking function finite domain terms empirical risk minimization 
formulation support vector machine svm algorithm leads convex program extended non linear ranking functions 
experiments show method successfully learn highly effective retrieval function meta search engine 
structured follows 
starts definition clickthrough data recorded generate training examples form preferences 
section introduces general framework learning retrieval functions leading svm algorithm learning parameterized orderings section 
section evaluates method experimental results 

clickthrough data search engines clickthrough data search engines thought triplets consisting query ranking user set links user clicked 
illustrates example user asked query support vector machine received ranking shown clicked links ranked 
query corresponds triplet amount data potentially available virtually unlimited 
clearly users click links random somewhat informed choice 
clickthrough data typically noisy clicks perfect relevance judgments clicks convey information 
key question information extracted 
deriving model clickthrough data analyzed consider recorded 
recording clickthrough data clickthrough data recorded little overhead compromising functionality usefulness 
kernel machines svm gmd de 
support vector machine com 
svm light support vector machine ais gmd de thorsten svm light 
support vector machines www support vector net 
support vector machine kernel methods svm research bell labs com sv html 
archives support vector machines ac uk www ac uk lists sup ort ect machines html 
lucent technologies svm demo applet svm research bell labs com sv sv html 
royal holloway support vector machine svm dcs rhbnc ac uk 
support vector machine software www support vector net software html 
lagrangian support vector machine home page www cs wisc edu dmi ranking query support vector machine 
marked bold links user clicked 
search engine 
particular compared explicit user feedback add overhead user 
query returned ranking easily recorded resulting ranking displayed user 
recording clicks simple proxy system keep logfile 
experiments system 
query assigned unique id stored query log query words ranking 
links results page user lead directly suggested document point proxy server 
links encode query id url suggested document 
user clicks link proxy server records url query id click log 
proxy uses location command forward user target url 
process transparent user influence system performance 
shows clickthrough data recorded easily little cost 
address key question analyzed principled efficient way 
kind information clickthrough data convey 
strong dependencies parts 
ranking depends query determined retrieval function implemented search engine 
furthermore set clicked links depends query ranking user click link relevant 
dependency desirable interesting analysis dependency clicks ranking water 
particular user click link low ranking independent relevant extreme probability user clicks link rank virtually zero document relevant query 
user scroll ranking far observe link 
order get interpretable meaningful retrieval function hand tuned avg 
table average retrieval functions hand tuned strategy uses different weights html tags implemented laser 
rows correspond retrieval method laser query time columns hold values subsequent evaluation methods 
figures reported means standard errors 
data table taken results clickthrough data necessary consider model dependencies appropriately :10.1.1.41.9172
defining model consider interpretation clickthrough data appropriate 
click particular link seen absolute relevance judgment 
consider empirical data table 
data taken recorded search engine laser covering www cmu school computer science :10.1.1.41.9172
table shows average rank clicks query example 
table cell contains average retrieval strategies averaged queries 
average equal methods 
subjective judgments retrieval functions substantially different ranking quality 
lack difference observed average explained follows 
users typically scan links ranking clicking link interpreted relevance judgment absolute scale 
document ranked lower list relevant user saw 
appears users click relatively promising links top independent absolute relevance 
relative preference judgments captured analyzed 
consider example 
possible infer links relevant absolute scale plausible infer link relevant link probability higher random 
assuming user scanned ranking top bottom observed link clicking making decision click 
abstracts links sufficiently informative gives indication user preferences 
similarly possible infer link relevant links 
means clickthrough data convey absolute relevance judgments partial relative relevance judgments links user browsed 
search engine ranking returned links relevance ranked links ahead link ahead 
denoting ranking preferred user get partial potentially noisy information form link link link link link link link link link link strategy extracting preference feedback summarized algorithm 
algorithm 
extracting preference feedback clickthrough ranking link link link 
set containing ranks clicked links extract preference example pairs type feedback suitable standard machine learning algorithms 
derives new learning algorithm weak type relative feedback training data 

framework learning retrieval functions problem information retrieval formalized follows 
query document collection dm optimal retrieval system return ranking orders documents relevance query 
query represented merely set keywords abstractly incorporate information user state information search 
typically retrieval systems achieve optimal ordering operational retrieval function evaluated closely ordering approximates optimum 
formally binary relations fulfill properties weak ordering asymmetric negatively transitive 
document di ranked higher dj ordering di dj di dj di dj stated assume simplicity strict orderings 
means pairs di dj dj di 
straightforward generalize result weak ordering 
appropriate measure similarity system ranking target ranking binary relevance scale average precision frequently information retrieval 
information retrieval researchers agree binary relevance coarse merely simplifying assumption 
method require simplification depart binary relevance scheme adapt kendall performance measure 
comparing ordinal correlation random variables kendall frequently measure statistics 
finite strict orderings ra rb kendall defined number concordant pairs number discordant pairs inversions 
pair di dj concordant ra rb agree order di dj 
discordant disagree 
note finite domain documents sum strict orderings 
case kendall defined ra rb example consider rankings ra rb follows ra ra ra ra number discordant pairs 
remaining pairs concordant 
ra rb 
similarity measure appropriate information retrieval 
equation depends fixed collection 
taken distance measure fulfills axioms kemeny snell strict orderings 
furthermore proportional measure yao proposed evaluating information retrieval systems 
applied binary relevance scale easy see maximizing equivalent minimizing average rank relevant documents 
related average precision 
particular number inversions gives lower bound average precision follows 
avgp rec number relevant documents 
proof appendix 
arguments show relates retrieval quality 
demonstrate maximizing connected improved retrieval quality multiple frameworks 
position define problem learning ranking function 
fixed unknown distribution pr queries target rankings document collection documents goal learn retrieval function expected kendall pr maximal 
note proportional risk functional loss function 
goal learning defined question remains possible design learning methods optimize 

svm algorithm learning ranking functions machine learning information retrieval consider formulation simplifies task binary classification problem classes relevant non relevant 
simplification drawbacks 
example due strong majority non relevant documents learner typically achieve maximum predictive classification accuracy responds non relevant independent relevant documents ranked 
importantly section showed absolute relevance judgments extracted clickthrough data simply available 
algorithm directly addresses empirical risk minimization approach 
independently identically distributed training sample size containing queries target rankings 
learner select ranking function family ranking functions maximizes empirical qi 
training sample 
note setup analogous classification minimizing training error just target class label binary ordering relation 
ranking svm algorithm possible design algorithm family ranking functions finding function maximizing efficient function generalizes training data 
consider class linear ranking functions di dj di dj 
weight vector adjusted learning 
mapping features describe match query document description oriented retrieval approach fuhr 
features example number words query document share number words share inside certain html tags title page rank see section 
illustrates weight vector determines ordering points twodimensional example 
weight vector points ordered projection equivalently signed distance hyperplane normal vector 
means points ordered implies ordering 
maximizing directly equivalent minimize number discordant pairs equation 
class linear ranking functions equivalent finding weight vector maximum number example weight vectors rank points 
inequalities fulfilled 
di dj di dj di dj di dj unfortunately direct generalization result shows problem np hard :10.1.1.31.3135
just classification svms possible approximate solution introducing non negative slack variables minimizing upper bound adding svm regularization margin maximization objective leads optimization problem similar ordinal regression approach 
optimization problem 
ranking svm minimize subject di dj di dj 
di dj di dj parameter allows trading margin size training error 
geometrically margin distance closest projections target rankings 
illustrated 
optimization problem convex local optima 
rearranging constraints di dj apparent optimization problem equivalent classification svm pairwise difference vectors di dj 
due similarity solved decomposition algorithms similar svm classification 
adaptation sv light algorithm training shown learned retrieval function represented linear combination feature available svmlight joachims org vectors 
di dj di dj dl di dl dj possible kernels extend ranking svm algorithm non linear retrieval functions 
derived values dual variables solution 
commonly ranking set documents new query case sufficient sort documents value rsv di di dl dj 
kernels property application learned retrieval function efficient 
fast algorithms exists computing rankings linear functions means inverted indices see 
partial feedback clickthrough logs source training data full target ranking query observable 
shown section subset inferred logfile 
straightforward adapt ranking svm case partial data replacing observed preferences training set partial information target ranking results algorithm 
optimization problem 
ranking svm partial minimize subject di dj di dj 
di dj di dj resulting retrieval function defined analogously 
algorithm results finding ranking function low number discordant pairs respect observed parts target ranking 

experiments experiments verify inferences drawn clickthrough data justified ranking svm successfully partial preference data 
experiment setup framework meta search engine described 
follow results offline experiment online experiment 
offline experiment designed verify ranking svm learn retrieval function maximizing kendall partial preference feedback 
online experiment goes verifies learned retrieval function improve retrieval quality desired 
experiment setup meta search elicit data provide framework testing algorithm implemented www meta search engine called 
meta search engines combine results basic search engines having database 
setup advantages 
easy implement covering large document collection www 
second basic search engines provide basis comparison 
meta search engine works follows 
user types query interface 
query forwarded google excite altavista hotbot 
results pages returned basic search engines analyzed top suggested links extracted 
urls union links composes candidate set ranks links learned retrieval function presents top links user 
link system displays title page url 
clicks user recorded proxy system described section 
able compare quality different retrieval functions method described 
key idea rankings time 
particular form presentation leads blind statistical test clicks user demonstrate unbiased preferences 
particular compared rankings combined single ranking condition holds top links combined ranking 
top links combined ranking contain top ka links top kb links ka kb 
words user scans links top bottom point seen equally links top top shown combined ranking exists constructed efficiently 
example 
results retrieval functions combined ranking user 
note abstracts aspects presentation unified user tell retrieval strategy proposed particular page 
example user clicks links 
inference draw clicks 
example user seen top links individual rankings clicked link combined ranking 
decided click links top ranking link ranking 
reasonable conclude probability larger random top links judged better query 
straightforward design hypothesis tests regarding user preferences combined ranking 
roughly speaking user preference regarding click equally links top ranking 
sample pairs 
bs user clicks significantly links contain relevant links sense 
formalizing assumption users click relevant link relevant link decision user click link influenced factors links ranking 
kernel machines svm gmd de 
svm light support vector machine ais gmd de thorsten svm light 
support vector machine kernel 
svm com sv html 
lucent technologies svm demo applet svm com sv sv html 
royal holloway support vector machine svm dcs rhbnc ac uk 
support vector machine software www support vector net software html 
support vector machine tutorial www support vector net tutorial html 
support vector machine com combined results ranking 
kernel machines svm gmd de 
support vector machine com 
support vector machines www support vector net 
archives support vector machines www ac uk lists sup ort 

svm light support vector machine ais gmd de thorsten svm light 
support vector machine software www support vector net software html 
lagrangian support vector machine home page www cs wisc edu dmi 
support 
bennett blue researchindex citeseer bennett support html 
kernel machines svm gmd de 
support vector machine com 
svm light support vector machine ais gmd de thorsten svm light 
support vector machines www support vector net 
support vector machine kernel methods svm research bell labs com sv html 
archives support vector machines ac uk www ac uk lists sup ort ect machines html 
lucent technologies svm demo applet svm research bell labs com sv sv html 
royal holloway support vector machine svm dcs rhbnc ac uk 
support vector machine software www support vector net software html 
lagrangian support vector machine home page www cs wisc edu dmi example query support vector machine 
upper boxes show rankings returned retrieval functions lower box contains combined ranking user 
links user clicked marked bold 
way proven empirically verified drawn method lead result evaluation explicit manual relevance judgments large offline experiment experiment verifies ranking svm learn regularities partial feedback clickthrough data 
generate training set search engine queries october 
displayed results google combination method previous section 
clickthrough triplets recorded 
resulted queries non empty set clicks 
data provides basis offline experiment 
learn retrieval function ranking svm necessary design suitable feature mapping describing match query document features experiment 
set features far optimal 
attributes reflect intuition important learning ranking included features easy implement 
furthermore feature selection similar tuning appropriate design features promises room improvement 
implemented features 
rank search engines features total rank minus rank google msn search altavista hotbot excite divided minimum top ranked google altavista hotbot excite binary top ranked top google msn search altavista hotbot excite binary top ranked top google msn search altavista hotbot excite binary top count ranked search engines top count ranked top search engines top count ranked top search engines 
query content match features total query url cosine cosine url words query range query cosine cosine title words query range domain name query query contains url binary 
popularity attributes features total url length length url characters divided country country code url binary attribute country code comparison clicks learned clicks learned tie clicks clicks total learned vs google learned vs learned vs table pairwise comparison learned retrieval function google non learning meta search ranking 
counts indicate queries user clicked links top ranking returned respective retrieval function 
prediction error number training queries google learning generalization error ranking svm depending size training set 
error bars show standard error 
domain domain url binary attribute domain name contains home word home appears url title binary attribute url contains tilde url contains binary attribute url url atom binary attribute queries pairwise preferences extracted algorithm described section 
addition constraints added clicked document indicating ranked higher random document candidate set constraints user feedback hold optimal ranking cases 
additional constraints help stabilize learning result keep learned ranking function somewhat close original rankings 
shows predictive performance ranking svm 
produce graph full data set split randomly training test set 
axis shows number training queries 
axis shows percentage pairwise preference constraints fulfilled test set 
point average training queries training queries different test training splits 
training ranking svm kernel trade training error margin selected minimizing leave error training set 
graph shows ranking svm learn regularities prefer ences 
test error decreases 
graph shows number constraints violated rankings produced google 
error rates substantially larger learned retrieval function 
results provide proof concept justify larger scale experiment multiple users 
particular offline experiment verifies ranking svm learn predict preference constraints clear learned retrieval function improve retrieval quality objectively 
question addressed experiment 
interactive online experiment show learned retrieval function improves retrieval online experiment conducted 
starting october st search engine available group approximately users 
group consisted researcher students ai unit university dortmund headed prof morik 
asked just www search engine 
november th system collected training queries click 
queries ranking svm trained general setup described 
learned function implemented ranking candidate set evaluation period lasting december nd learned retrieval function compared google baseline meta search engine ranks links retrieved rank google altavista excite hotbot links ranked ranked different strategies compared method described section 
learned retrieval strategy combination baseline rankings selected random 
table shows queries users click links top learned retrieval function 
line table compares learned retrieval function google 
queries users click links learned function queries click links google queries click equal number 
tailed binomial sign test difference significant level leading learned retrieval function better google group users 
applies comparisons 
weight feature query cosine top google query url cosine top count top host citeseer domain nec top count top google country de 
contains home top hotbot 
domain name query 
domain tu bs country fi top count url length top count top count table features largest smallest weights learned training data online experiment 
analysis learned function previous result shows learned function improves retrieval 
learned function look 
reasonable intuitive 
ranking svm learns linear function analyze function studying learned weights 
table displays weights features particular highest absolute weights 
roughly speaking high positive negative weight indicates documents features higher lower ranking 
weights table reasonable group users 
queries scientific material appears natural urls domain citeseer alias nec received positive weight 
influential weights cosine match query url top google cosine match query words url 
document receives large negative weights ranked top search engine top search engine note second implies url long 
weights reasonable sense intuitively 

discussion related experimental results show ranking svm successfully learn improved retrieval function clickthrough data 
explicit feedback manual parameter tuning automatically adapted particular preferences group users 
improvement verification ranking svm learn partial ranking feedback argument personalizing retrieval functions 
conventional search engines fit retrieval function large heterogeneous groups users due cost manual tuning machine learning techniques improve retrieval substantially tailoring retrieval function small homogenous groups individuals prohibitive costs 
previous learning retrieval functions exists methods require explicit relevance judgments 
closely related approach bartell :10.1.1.41.9172
mixture experts algorithms linearly combining ranking experts maximizing different rank correlation criterion 
setup rely explicit relevance judgments 
similar algorithm combining rankings proposed cohen 
show empirically theoretically algorithm finds combination performs close best basic experts 
boosting algorithm freund approach combining weak ranking rules strong ranking functions 
approximately minimize number inversions explicitly consider distribution queries target rankings 
algorithm probably adapted setting considered 
algorithmically closely related svm approach ordinal regression herbrich 
consider different sampling model 
ordinal regression objects interact ranked scale 
ranking problem information retrieval rankings need consistent query queries 
ranking problem constrained 
example ranking problem documents di dj different ranks different queries exactly feature vector di dj 
elegant perceptron algorithm ordinal regression proposed crammer singer :10.1.1.147.3204
interesting question online algorithm solve optimization problem connected ranking svm 
attempts implicit feedback observing clicking behavior retrieval systems browsing assistants :10.1.1.41.9172
semantics learning process results unclear demonstrated section 
commercial search engine direct hit clickthrough data 
precise mechanism unpublished 
different problem interesting clickthrough data proposed 
clickthrough data identifying related queries urls 
computational demands training ranking svm clickthrough data 
sv light solves dual optimization problem depends inner products feature vectors 
feature vectors sparse sv light handle millions features efficiently 
influential training time number constraints optimization problem 
clickthrough data number constraints scales linearly number queries number clicks query upper bounded 
applications sv light showed solve problems millions constraints regular desktop computer 
scaling order magnitude major search engines interesting open problem 

approach mining logfiles www search engines goal improving retrieval performance automatically 
key insight clickthrough data provide training data form relative preferences 
new formulation learning problem information retrieval derives algorithm learning ranking function 
support vector approach resulting training problem tractable large numbers queries large numbers features 
experimental results show algorithm performs practice successfully adapting retrieval function meta search engine preferences group users 
opens series question regarding machine learning search engines 
size user group groups determined 
clearly trade amount training data 
large group maximum homogeneity 
single user 
possible clustering algorithms find homogenous groups users 
furthermore clickthrough data adapt search engine group users properties particular document collection 
particular factory settings shelf retrieval system necessarily suboptimal particular collection 
shipping shelf search engines learning capabilities enable optimize maintain performance automatically installed intranet 
algorithm limited meta search engines www 
situations goal learning ranking parameter query 
particular recommender problems cast way 
particularly interesting recommender setting fact ranking svm trained partial preference data 
example consider recommender system aims learn tv watching preferences 
observing channel surfing behavior system infer shows prefer programs particular time 
relative preference preference absolute scale 
open questions regarding algorithm concern theoretical characterization efficient implementation 
possible prove generalization bounds margin 
interesting practical point view possible analyze process multiple learning feedback steps sense incremental online algorithm 
elaborated dependence links user system receives feedback 
interesting explore active learning ideas optimize feedback 
framework possible explore mechanisms algorithm robust spamming 
currently clear far single user maliciously influence ranking function repeatedly clicking particular links 
regarding algorithms solving optimization problem sped constraints special form 
particular online algorithms appropriate application settings 

prof morik ai unit university dortmund providing help resources experiments 
rich caruana alexandru niculescu sengers john kleinberg lillian lee helpful discussions wim helping clarify connection recommender systems 

baeza yates ribeiro neto 
modern information retrieval 
addison wesley longman harlow uk may 
bartell cottrell belew :10.1.1.41.9172
automatic combination multiple ranked retrieval systems 
annual acm sigir conf 
research development information retrieval sigir 
beeferman berger 
agglomerative clustering search engine query log 
acm sigkdd international conference knowledge discovery data mining kdd 
boser guyon vapnik 
algorithm optimal margin classifiers 
haussler editor proceedings th annual acm workshop computational learning theory pages 
boyan freitag joachims :10.1.1.41.9172
machine learning architecture optimizing web search engines 
aaai workshop internet information systems august 
cohen shapire singer 
learning order things 
journal artificial intelligence research 
cortes vapnik 
support vector networks 
machine learning journal 
crammer singer :10.1.1.147.3204
ranking 
advances neural information processing systems nips 
freund iyer shapire singer 
efficient boosting algorithm combining preferences 
international conference machine learning icml 
fuhr 
optimum polynomial retrieval functions probability ranking principle 
acm transactions information systems 
fuhr hartmann lustig tzeras 
air rule multistage indexing system large subject fields 
riao pages 
herbrich graepel obermayer 
large margin rank boundaries ordinal regression 
advances large margin classifiers pages 
mit press cambridge ma 
simon van horn :10.1.1.31.3135
robust single neurons 
journal computer system sciences 
joachims 
making large scale svm learning practical 
sch lkopf burges smola editors advances kernel methods support vector learning chapter 
mit press cambridge ma 
joachims 
learning classify text support vector machines methods theory algorithms 
kluwer 
joachims 
unbiased evaluation retrieval quality clickthrough data 
technical report cornell university department computer science 
www joachims org 
joachims freitag mitchell 
webwatcher tour guide world wide web 
proceedings international joint conference artificial intelligence ijcai volume pages 
morgan kaufmann 
kemeny snell 
mathematical models social sciences 

kendall 
rank correlation methods 
hafner 
lieberman 
letizia agent assists web browsing 
proceedings fifteenth international joint conference artificial intelligence ijcai montreal canada 
morgan kaufmann 
mood 
theory statistics 
mcgraw hill edition 
page brin 
pagerank eigenvector ranking approach hypertext 
st annual acm sigir international conference research development information retrieval 
salton buckley 
term weighting approaches automatic text retrieval 
information processing management 
silverstein henzinger marais 
analysis large altavista query log 
technical report src digital systems research center 
vapnik 
statistical learning theory 
wiley chichester gb 
yao 
measuring retrieval effectiveness user preference documents 
journal american society information science 
appendix theorem 
ranking placing relevant documents ahead non relevant documents learned ranking 
number discordant pairs average avgp rec relevant documents 
proof 
pr ranks relevant documents sorted increasing order average precision computed avgp rec pi minimum value avgp rec number discordant pairs fixed 
easy see sum ranks 
pr related number discordant follows 

pr possible write lower bound integer optimization problem 
computes worst possible average precision fixed value minimize pr subject 

pr pi 
pr pr integer relaxing problem removing sets constraints decrease minimum solution constraints lower bound 
remaining problem convex solved lagrange multipliers 
lagrangian pr pi pi 
minimum optimization problem lagrangian known partial derivatives equal zero 
starting partial derivatives pi pr pi solving pi substituting back lagrangian leads pr 
derivative respect pr solving substituting lagrangian leads desired solution 
