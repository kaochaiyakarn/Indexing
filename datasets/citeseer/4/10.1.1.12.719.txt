modeling simulation environment agent networks congolog nter gans gerhard lakemeyer matthias jarke thomas rwth aachen informatik aachen germany fraunhofer fit schloss birlinghoven sankt augustin germany gans lakemeyer jarke cs rwth aachen de 
prototype environment supporting representation dynamic evaluation designs social networks comprising human hardware software agents 
environment employs metadata management technology integrate extended version formalism static network modeling congolog logicbased activity simulator 
defines formal mappings necessary achieve integration describes demonstration 
intended application domain requirements management mediation support inter embedded process systems simulation support inter organizational studies entrepreneurship networks 
modeling business processes important aspect information systems engineering years 
research progress pure drawing facilities formal semantics observed 
formal understanding enables consistency completeness analysis models semi automatic transformation 
step progression modeling simulation dynamic business aspects 
known business process formalisms event process chains aris modeling formalism sch timed petri nets oss commercialized ag oracle designer environment simply automata mechanisms pj simulation environments developed impact different business strategies operational efficiency cases organizational memory similar long term factors assessed 
modeling dynamic inter organizational relationships especially complex social networks involving human organizational possibly technological agents mature stage 
extensions traditional business models cover important aspects modern business concepts supply chain management ignore autonomy members network settings underestimating independent banks 
eds caise lncs pp 

springer verlag berlin heidelberg evaluation different agent goals modulated strategic resulting complex dynamics negotiation trust distrust activity 
report modeling simulation environment agent networks attempts remedy shortcomings 
social networks mind particular created independent organizations individuals pursue shared strategic goals risk falling apart 
formalize networks agentoriented requirements modeling language yu particularly suited explicitly allows capture mutual dependencies actors key ingredients networks 
representing structural relationships actors sufficient 
argued gjk equally important model network dynamics interactions actors large extent trust understand impact trust needs consider interactions effects time 
authors propose multi perspective modeling approach includes extension speech acts action language congolog 
suggested translate executable congolog programs see gjk mapping preliminary partially developed 
consider complete automatic translation large fragment extended models 
report fully implemented prototype implementation 
having system takes input graphical network representations extended turned executable programs valuable provides tool network participants simulate various network scenarios outcome may give valuable information regarding risks benefits certain actions 
rest organized follows 
section introduce extensions necessary facilitate translation executable programs 
section introduce congolog translation extended networks congolog programs 
section implemented system 
open issues 
representing social networks extended section introducing modeling language yu originally devised early requirements engineering 
extended facilitate automatic translation executable programs 
representing diagrams conceptual modeling language telos possible perform static analysis network enforce integrity constraints help telos query language 
modeling language firmly notions actor goal assumes social settings involve actors depend goals achieved tasks nter gans performed resources furnished 
framework includes strategic dependency sd model describing network relationships actors rationale sr model describing supporting reasoning actor performs concerning relationships actors 
enjoy meal eat go restaurant rate meal guest legend goal choose meal resource task rating meal tip means ends link meal serve meal cook task decomposition link goal dependency resource dependency chef repeat customers fig 

strategic rationale model restaurant example earn money waiter go sd models focus sr models illustrate key features way restaurant example shown involving actors guest 
guest main component go restaurant task serves bring goal enjoying meal decomposed subtasks 
guest depends waiter meal served 
conversely obtain tip waiter depends guest favorable rating meal chef depends goal repeat customers 
example simple actors involved may share long term strategic goals serves illustrate main ingredients approach advantage familiar readers 
enriching task description goal turn specifications sr diagrams agent programs ready simulation 
current form models expressive purpose 
example consider decomposition go restaurant task 
clearly subtasks need ordered ordering determined model 
fact semantics decomposition left open 
interpret decomposition subtasks need performed give precise semantics section 
tasks decomposed implicitly assumed subtasks eventually performed 
see example cases decomposition needed subtasks performed 
clear tasks involved activated 
see achieved consider enriches task descriptions appropriate way 
syntactical point view main new graphical feature triangles 
labeled logical formulas predicates called fluents truth value may vary execution tasks 
triangle points task trust high pointing choose meal 
task points triangle denotes postcondition effect task turn preconditions tasks 
precondition triangles bold face special meaning serve triggers interrupts execution task pointing 
example order received triggers execution cook 
require toplevel tasks interrupts task 
tasks interrupts trigger execution considered exogenous start task example 
graphical object assigned actor 
exogenous task belongs special actor called exogenous 
intuitively kinds tasks external control may example start simulation run 
note may exogenous task 
decomposition rate meal example decomposition 
inparticular want sure rate rate bad performed 
see section semantics decompositions quite subtle 
note preconditions arrows directed 
example fluent trust high obtain value 
complete specification precondition refers fluent confidence guest say takes value positive real number initialized appropriately 
updated effects rating bad rating respectively 
example rating activated raises value guest confidence small amount 
included details diagram avoid clutter 
implementation discussed section details usually hidden visible demand see 
nter gans eat meal rate bad meal go start ready restaurant cook exogenous eating finished trust high legend guest ok ok choose meal precondition effect interrupt effect resource task rate meal rate rating bad rating meal accept order chosen order received waiter serve meal task decomp 
link task decomp 
link means ends link fig 

extended strategic rationale model restaurant example note synchronization tasks pre postconditions gives rise dependencies actors implicit fashion 
example chef cook meal order accepted waiter expressing natural dependency waiter chef 
summarize introduced sr models preconditions postconditions interrupts special kind preconditions 
static analysis conceptbase conceptbase metadata manager conceptual modeling language telos representation language extended diagrams 
added benefit providing powerful query language allows perform static analysis networks 
syntactical checks application 
example useful chef network nodes outgoing links isolated elements sense formulated follows conceptbase query language elements link isa retrieved attribute name string constraint rule exists example describes allowed subtasks decomposition supertask 
tasks going task decomposition link tdl query subtask isa constraint rule exists tdl tdl tdl tdl tdl tdl see section queries conceptbase play important role supply relevant information translation extended diagrams congolog programs 
simulation social networks congolog short methodology plans expressed logic language congolog 
section describes congolog formal foundation situation calculus 
situation calculus increasingly popular language representing reasoning preconditions effects actions mcc 
variant order logic enriched special function predicate symbols describe reason dynamic domains 
go language detail note features terms language sorts ordinary objects actions situations special constant denote initial situation situation actions occurred distinguished binary function symbol denotes successor situation resulting performing action relations truth values vary situation situation called relational fluents denoted predicate symbols situation term argument similarly functions varying situations called functional fluents denoted analogously special predicate poss state action executable situation strictly speaking small dose second order logic required issue concern 
nter gans language formulate theories describe world changes result available actions 
possibility basic action theory form lpr axioms describing initial situation 
action precondition axioms primitive action characterizing poss 
example fact robot pick object object holding formalized follows poss pickup holding 
convention free variables implicitly universally quantified 
successor state axioms fluent stating conditions holds function holds situation place called effect axioms provide solution frame problem reiter 
example consider simple model time progresses discrete fashion unit result special action 
time situation specified help fluent time successor state axiom time time time domain closure unique name axioms actions 
congolog extension golog language specifying complex actions high level plans 
comes equipped interpreter maps plans sequences atomic actions assuming description initial state world action precondition axioms successor state axioms fluent 
complex actions defined control structures familiar conventional programming languages sequence loops recursive procedures non deterministic actions choosing nondeterministically actions performing action arbitrary number times 
addition parallel actions priorities possible 
primitive action 
test action sequence conditional loop nondeterministic choice actions pi nondeterministic choice arguments star nondeterministic iteration conc concurrent execution prioritized concurrent execution concurrent execution terminates interrupt interrupts proc procedure definition translating extended congolog important constructs conc 
intuitive meaning conc obvious says preferred possible 
means programs start executing concurrently construct terminates soon terminates 
contrast conc parts need terminate 
needed give semantics decomposition subtasks 
interrupt executed condition true 
words interrupts serve triggers initiate actions 
go formal semantics congolog note uses conventional transition semantics defining single steps computation concurrency interpreted interleaving primitive actions test actions 
details see gl 
transformation extended executable programs section show automatically translate large fragment extended sr models includes new features added section executable congolog specifications 
get back parts sr models dealt section 
translation needs specify parts description application domain complex tasks operating domain 
application domain need describe fluents primitive actions preconditions effects 
complex tasks correspond congolog procedure definitions 
fluent primitive action procedure assigned unique actor belongs 
follows prolog syntax interpreter implementation 
variant congolog developed line execution choice primitive action alternates execution 
generating application domain description describe application domain clauses sense prolog form prim fluent prim action action primitive fluents primitive actions exogenous actions respectively 
clauses initially true poss needed initialize fluent value situation resp 
define action precondition axiom 
convenient feature suffices declare effects actions construct added gl :10.1.1.31.9110
line modus action sequence computed execution 
line modus appropriate simulation purposes 
nter gans automatically converted successor state axioms introduced section 
effect axioms form causes val newval cond reading performing action fluent obtain new value newval condition cond holds 
fluents explicitly specified extended sr model meal chosen confidence guest interrupts resources represented relational fluents 
trigger corresponding congolog interrupts inside procedures see 
needed describe owner resource components model may change time 
restaurant example meal owner initially obtains default value chef performs cook owns meal resource 
waiter perform serve meal resource owned chef situation 
sense resources formally treated special task preconditions 
system defined fluent time keeps track time meaning successor state axiom section 
initial values fluents generated corresponding annotations sr model see example 
primitive actions generated extracting names tasks decomposed exogenous task 
example choose meal considered primitive action go restaurant 
primitive action advances time executed lowest priority 
poss clause primitive action generated collecting corresponding preconditions sr model computing appropriate 
example task rate performed precondition ok holds 
ok held rate performed rate bad branch pruned decomposition applies construct see 
exogenous actions special primitive actions controlled user 
model action exogenous belongs special actor called exogenous simulation user able invoke exogenous actions interactively 
regarded primitive corresponding task sr model may decomposed 
example task start exogenous action obvious 
general exogenous tasks restricted initiating simulation runs 
example replace rate meal task exogenous rate meal task give user chance influence meal rating process outside 
fluent affected actions determined ways read explicitly postconditions tasks corresponding primitive actions meal chosen satisfied action choose meal interrupt fluents meal chosen automatically reset task pointing resource fluents affected changes ownership special fluent time affected action 
appropriate causes val clauses generated 
excerpt definitions generated restaurant example 
initially confidence guest 
prim action choose meal 
prim fluent meal chosen 
prim fluent confidence guest 
poss choose meal confidence guest 
causes val rate confidence guest confidence guest 
causes val choose meal meal chosen true true 
causes val meal chosen false true 
note clauses generated completely automatically sr model 
sr model stored conceptbase easily collect relevant information clause generation posing appropriate queries 
example order define fluents interrupts model query fluents isa retrieved attribute name string result query simple matter emit right prim fluent definitions 
generating procedural descriptions generation procedures complex tasks need subset instructions sequential prioritized concurrent execution actions resp 
conc control actions prioritized interrupts interrupt condition body resp 
prioritized interrupts list 
abbreviation prioritized concurrent execution interrupts precedence list means higher priority 
actor model need procedure describes behavior 
particular interrupts actions form body procedures 
additionally need start procedure concurrently starts procedures involved agents provides services simulation 
relevant information extracted automatically conceptbase queries proc agent guest conc interrupt eating finished true decomp rate meal interrupt ready true decomp go restaurant 
proc agent chef interrupt order received true cook 
proc agent waiter interrupt meal chosen true decomp 
proc start sim prioritized interrupts interrupt sim running true nter gans conc conc agent guest agent chef agent waiter interrupt true noop interrupt sim running false noop 
primitive actions cook directly decomposed tasks go restaurant lead auxiliary procedures initiate execution corresponding subtasks concurrent fashion 
words interpretation decomposition subtasks started concurrently need terminate successfully supertask terminate 
case decomposed task proc decomp conc accept order serve meal 
note procedure decomp ends primitive action things switching interrupt performing direct effects task 
decompositions recall intuition termination subtasks lead termination task 
glance tempted construct provided congolog nondeterministically chooses execution 
problematic line execution 
interpreter needs commit right away choices may information right choice 
need construct proposed gl starts executing concurrently stops soon reaches final state 
restaurant example rate meal decomposed translation results proc decomp rate meal rate bad rate meal rate rate meal 
ends description translation extended sr diagrams 
note mapping completely automatic precise declarative semantics extended sr models precise meaning 
caveat considered features 
goals subgoals notable omissions dealt near 
soft goals positive resp 
negative contribution links problematic introduced vague concepts clear howto formally represent 
software environment modeling analysis simulation social networks extended diagrams composed modification editor ome object modeling environment ly 
ome developed original extended cover new features preconditions tasks 
task satisfies goal idea insert test action corresponding procedure representing task 
simulation eclipse linux windows fig 

ome object modeling environment java interface simulation performance fluents static model tel file editor plugin ome windows simulator java program pl file fig 

software architecture model query response model history storage tcp ip interface data storage conceptbase solaris addition attached java plugins ome maintain connection conceptbase server see initiate static analysis extended diagrams perform translation process congolog programs 
ome snapshot shown 
context static analysis mentioned concept base deductive object manager meta databases details see 
role conceptbase clearer look implementation architecture 
establishing tcp ip connection able transfer framework current application model nter gans fig 

simulator conceptbase 
way able conceptbase query language perform certain queries static analysis purposes described 
suitable queries issued conceptbase obtain information necessary translation process generate congolog programs 
third component fig 
simulator written java retrieves framework application position graphical object conceptbase 
interpreter written prolog processes program simulator controls execution monitors changing fluents initiates exogenous actions shows step step view simulation run 
shows snapshot simulator running restaurant example 
user creates specific simulation runs exogenous actions 
preconditions hold depicted green border red borders 
snapshot ok holds leads task rate bad performed 
consequence precondition trust high gets red border 
red bordered resource meal illustrates guest owner 
related lesp rance demonstrate congolog applied model simulate business processes 
similar spirit labels screenshot legible reader referred shows network hand drawn 
wang lesp rance wl propose integrate congolog way quite different 
roughly introduce small number newnode link types task preconditions decomposition graphical representation sr models annotate original sr diagrams congolog constructs loops sequential task decompositions 
allows fine grained control flow specifications level comes expense burdening user choosing various control alternatives 
strive automatic translations extended congolog need considerable user interaction 
start enrich constraints formalized linear time logic inspired kaos language 
model checking techniques verify consistency specification 
models listing fluents true certain time points thought form simulation 
main motivation model checking finding counterexamples bugs specification 
system hand mainly intended simulation different scenarios consistent specifications 
approaches complement issue want explore 
proposed framework modeling simulating complex interactions social networks 
graphical language yu introduced specification network internal structure agents involved 
models stored conceptbase system query language static analysis models 
automatically translated executable congolog programs prototype implementation provides graphical interface visualize simulation runs 
originally motivated desire understand model role trust distrust social networks gjk 
implemented modeling simulation environment position test existing theories distrust evolve time 
doing require collecting data extensive simulation runs storing history interactions suitable form 
storing history conceptbase advantage making accessible user analysis agents network decision making 
important issue test modeling simulation environment real data 
application scenario ongoing case study trans atlantic entrepreneurship networks 
realistic application lead refinements extensions methodology 
nter gans acknowledgment supported part deutsche forschungsgemeinschaft focussed research programme 
cimatti clarke giunchiglia roveri 
nusmv new symbolic model checker 
int 
journal software tools technology transfer 
de giacomo levesque 
highlevel programs sensing 
logical foundations cognitive agents pages 
de giacomo lesp rance levesque 
congolog concurrent programming language situation calculus 
artificial intelligence 
dardenne van lamsweerde fickas 
goal directed requirements acquisition 
science computer programming 
pistore mylopoulos traverso 
model checking early requirements specifications tropos 
proceedings fifth ieee international symposium requirements engineering re toronto canada august 
gjk gans jarke lakemeyer 
requirements modeling organization networks dis trust approach 
proceedings th ieee international symposium requirements engineering re pages toronto canada august 
los alamitos ieee computer society press isbn 
gjk gans jarke lakemeyer 
dis trust simulations agent networks 
proceedings th workshop deception fraud trust agent societies pages montreal may 
gl lakemeyer 
realistic logic robot controllers 
proc 
aaai 
matthias jarke stefan rainer manfred jeusfeld martin staudt 
conceptbase deductive object base meta data management 
journal intelligent information systems special issue advances deductive object oriented databases 
lesp rance kelley mylopoulos yu 
modeling dynamic domains congolog 
proceedings caise june 
lpr hector levesque pirri ray reiter 
foundations situation calculus 
link ping electronic articles computer information science 
levesque reiter lesp rance lin scherl 
golog logic programming language dynamic domains 
journal logic programming 
ly liu yu 
ome object modeling environment www cs toronto edu km ome 
mylopoulos borgida jarke koubarakis 
telos representing knowledge information systems 
acm transactions information systems october 
mcc john mccarthy 
situations actions 
stanford university 
reprinted minsky ed semantic information processing mit press 
oss oberweis scherrer 
income star methodology tools development distributed information systems 
information systems 
pj peters jarke 
simulating impact information flows networked organizations 
proceedings th international conference information systems cleveland ohio usa pages 
sch 
scheer 
business process engineering models industrial companies 
springer verlag berlin edition 
wl wang yves lesp rance 
agent oriented requirements engineering congolog 
working notes agent oriented information systems workshop montreal qc may 
yu yu 
modelling strategic relationships process reengineering 
phd thesis university toronto 

