technical report tr sux sequoia index approximate string matching hunt department computing science university glasgow glasgow qq uk dcs gla ac uk march address problem approximate string matching protein dna rna strings arbitrary cost matrix 
focus full sensitivity searching equivalent smith waterman algorithm 
data structure propose compact 
index text length just bytes 
data structure amenable compression 
show index scan approximate matching algorithm dynamic programming matrix computed time complexity mg pattern length alphabet size indexing window size demonstrate sux sequoia largest public repository proteins storing symbols 
results indicate full sensitivity approximate matching delivered speed comparable heuristic matching 
believe opens way database solution approximate sequence matching problem 
contents background related sux sequoia sequoia approximate matching index creation index layout disk matching algorithm experimental results data sources 
hardware software 
benchmarks 
index creation 
query scenario 
discussion results reporting 
implementation issues 
repetitions text 
index compression 

biomedical research increasingly dependent computing technology manage data identify interesting data sets 
searching similar biological sequences day activity biological lab far database technologies produced tools provide fast access sequence data 
sequence data strings di ering lengths 
dna sequences alphabet rna uses alphabet amino acid sequences aas proteins letters include ambiguity codes 
sequence comparison purposes sequences stored fasta format includes line sequence header followed sequence shown 
gij ae cg gene product drosophila volume sequence data growing daily increase exponentially years ago publicly available dna genbank gbytes excess gbytes protein data size increased mbytes mbytes time period 
data updated daily done transactional mode single new sequences added changed 
change existing sequence normally associated new identi er indicating new version replaces old 
context easy add changes index rebuilding index 
justi ed sequence repositories host public sequence query services serve large volumes queries thousands day 
volume availability biological sequence increases cross genome comparisons undertaken require access large computational resources 
improvement speed full sensitivity sequence analysis bring quality cost bene ts research projects biotechnology industry 
approximate searching arbitrary cost matrices provided software scans set sequence les aligns query 
standard solutions divided exhaustive algorithms represented smith waterman algorithm heuristic ones including blast fasta 
specialised forms heuristic algorithms suited dna matching exist include sim 
algorithms indexing 
proteins recommended author sensitivity blast 
ncbi ebi provide public blast services running www ncbi nlm nih gov database index html www ncbi nlm nih gov entrez query db nucleotide www ncbi nlm nih gov blast www ebi ac uk large computer clusters 
exhaustive searching provided ebi 
knowledge developments index structures strings produced viable full sensitivity search tools applicable biology 
domain structures tested persistent context approximate matching 
grams grams useful close matches sought deliver distant matches 
sux array tested small amounts dna unit cost model superior sux tree 
tested sux tree potentially useful delivering fast performance due large disk image 
myers durbin produced signi cantly faster version smith waterman algorithm indexes query improved version twice fast best known optimised implementation called swat myers durbin entire text traversed optimisation due sparsity positive values cost matrix 
optimised version computes dynamic programming matrix 
ecient solution exhaustive searching exist heuristics assumption signi cant matches may go unnoticed 
signi cant ort hardware parallelisation improve performance smith waterman algorithm similar carried respect blast 
coarse grained parallelism achieved farm computers distribute text di erent processors 
multimedia instructions process protein dna symbols time 
field programmable gate arrays fpgas commercial implementations research 
possible hardware solutions complement algorithmic solutions orthogonal database approach uses persistent indexing 
produced complete sequence analysis solution believe ndings constitute signi cant step solving problem 
designed sux sequoia combine features sux tree approximate string matching context compactness array text window addressed integer code representing window 
major contribution new data structure combines features sux tree array index measurement structure performs approximate matching 
comparison myers durbin dynamic programming matrix computed entire text scanned require text scan index scan matrix computed top index 
tests aa residues index window size upper bound size www ebi ac uk index html mbt washington edu phrap docs phrap html www com www com matrix computation practice part matrix computed due sparsity positive values cost matrix 
needed explore implementation options reuse existing body algorithmic solutions embodied existing programs blast 
start review related section 
section introduce sequoia section show approximate matching 
section focuses index creation algorithm 
disk layout index section matching algorithm summarised section 
turn attention experimental results section discuss various aspects approach implementation section points need re nements exploration implementation options 
conclude section 
background related de ne terminology 
target sequence length alphabet size aligned query length cost matrix size providing score comparison symbols threshold thresh provided alignments scoring threshold output 
example alignment shown 
sequences aligned annotated sets sequence sequence identi er start line sequence identity annotated sequence similarity shown 
gap alignment shown line hyphens 
gaps scored simple model gap cost gap ane model gap cost equal kl cost start gap gap length cost gap extension 


illustration fragment pam scoring matrix shown 
biologists variety cost matrices uence query sensitivity 
cost matrices dominated non positive values allows algorithmic optimisations rst exploited swat swat observation large parts cost matrix negative calculations involving negative zero values skipped 
smith waterman algorithm gold standard biological sequence comparison 
version algorithm run time proportional product text length query length 
sequences compared left right scan text text symbol alignment column calculated summarises similarity text symbol query 
simple gap model recurrence formula calculation matrix cell follows 
maxf gap gap denotes gap cost 
adopt model investigation 
proceed give example calculation 
pattern text max max matrix select maximum similarity dynamic programming matrix evaluated simpli ed unary cost model 
algorithm calculate similarity sequences called dynamic programming algorithm dp 
demonstrates principle text mbt washington edu phrap docs phrap html tgv ra tgv ra tgv tgv root sux tree 
sux corresponds leaf marked sux number 
surgery query survey 
simplest model assume unit costs character deletion insertion substitution 
calculate similarity sequences lengths build matrix size ll rst row column zeros recurrence formula ll remaining cells 
matrix lled nd cells highest scores normally done storing additional data structure soon computed output scores string positions 
variety methods applied past indexing biological sequences approximate matching biological veri cation 
rough partitioning methods statistical algorithmic methods 
statistical methods include wavelet indexing appear gained acceptance biologists possibly due information loss happens process indexing 
algorithmic methods gan divided approaches 
rst approach uses hashing maintains index text windows index query windows 
window assigned unique code relationship code window content 
query indexed complexity search dominated text size 
index text search ecient 
index created traversal string exact approximate matching ltering 
approach non overlapping text windows indexed memory 
navarro shows approach limited approximate matching nds words closely similar query 
type index index query respect cost matrix alignment 
second algorithmic approach uses sux index 
sux index index substrings form 
index implemented sux tree sux array 
sux tree illustrated compressed digital trie built inserting suxes string trie terminator character ensures correspondence suxes tree leaves 
approximate searching carried sux tree sux array 
cases query string cut shorter words word aligned suxes tree starting root certain string depth 
fact top sux tree string searching motivated explore possibility summarising top tree array data structure 
sux sequoia bbb bbbb bb suffix array suffix sequoia depth disk resident memory resident bit map position array aaa aab aba abb baa bab bba bbb hash function construction suffix sequoia suffix tree text bbbb bbbb bbbb relationship sux tree sux array sux sequoia 
sux sequoia illustrated derivative sux tree truncated string depth stored memory bit map array text positions 
disk version hash function needed approximate matching disk accessed match rst discuss memory resident version index index creation time writing disk 
bit map represents absence presence short substring text 
cell positions array represents suxes share common pre length positions array viewed array lists starting indexes text window 
create index slide window size text 
text length windows form win index creation windows lexicographically sorted updating positions array containing cells window code 
achieve encoding order alphabet symbols lexicographically map integer range 
window assigned integer code code win bitmap set bitmap code win true window code win indexed text false 
array integer lists 
bitmap code win set true array code win contains list starting positions window text 
sequoia approximate matching perform dynamic programming algorithm dp sux sequoia sux tree 
explain principle dp matrix calculation index text traditional traversal entire text 
shows sux trees strings lays sux 
show dp matrix smaller index 
example window size index size reduces calculation size case 
highly repetitive string aaaaa index entry aaa 
full dp matrix size text query index cells 
index reduces size calculation cells 
dp matrix cells index reduces matrix size cells indexable windows length 
kind saving bitmap matching sparse indexes advantage smaller target dataset search performed 
text text indexed cells full dp cells indexed cells full dp cells text compact sequoia depth aaa alphabet aaaaa alphabet compact sequoia depth aba abb baa bab bba bbb aaa aab ab ab ab ab ab ab ab indexing gain due hashed index windows length 
realised sux tree 
sux tree children node ordered lexicographically provides additional indexing gain shown index shows part sux tree alphabet index depth equal 
arranging window entries sux sequoia alphabetical order take advantage ordering calculate dp matrix just characters change previous index entry looking 
general alphabet size indexing depth window size size calculation upper limit text dimension dp matrix follows observation character comparisons rst letter index window query comparisons second letter index window query letter index window entries need compared query 
illustration provided 
rst index window aaa compared query ttt second third index windows aab aac just subtree subtree subtree root indexing gain due index ordering corresponding lexicographic order 
letters shown correspond dp columns need calculated 
query ttt sux sequoia dp calculation limited shaded areas 
letter index window requires comparison ttt window aba requires recalculation columns 
rst letter window changes full matrix recalculated scratch 
focus calculation matrix range indexes expressed codes code code 
algorithm calculation matrix values range codes shown 
algorithm bitmap index looked check codes index 
may useful indexes sparse false marks bitmap 
byte query int base int code int code matrix mat initialise dp matrix dp new array decode code text array bytes bytes text decode base code calculate dp matrix rst indexed word text query mat code code increment code code bitmap goto optional update text code checking start calculation calculate dp matrix starting active column text query mat exceeded return see section report matching codes index creation time create index proportional length sequence indexed 
space required operation depends size window size alphabet size text space complexity 
space factor re ected running time needed maintenance holding lists integers 
traverse text calculate integer code window 
window window position stored indexed code 
code win dna alphabet symbols calculate code win follows code win code win mod code calculation proteins analogous alphabet size replaced 
memory index ready place disk 
details procedure follow 
index layout disk bits offset array bitmap integers code offset offset index positions ordered code position ordered list positions array size integers index layout disk 
data structure consists conceptually les bitmap sets le positions le 
bitmap uses java util class serialised disk 
sets positions les les integers 
implementation sets positions les split les rst letter index window 
assume available ram greater sum small bu er data read text le bitmap size array arrays holding window positions total fewer integers handles sets positions output les administrative overheads needed java virtual machine 
maintain arrays expand needed system method class java util vector consumed space 
size array arrays exceeds ram size adopt strategy described entire index built traversals text adding sets positions le need le merging 
approach possible les re ect alphabetic ordering index windows 
exact le sizes depend alphabet size window size dominating cost storage positions text window demonstrate 
bitmap size bits protein index window size java requires kbytes disk takes second write disk 
protein index depth space requirement kbytes 
second le index sets size integers 
sequence repositories indexing gbytes protein byte integers le requires mbytes depth 
sets pointers proper index window positions 
le potentially compressed 
third le index positions window sequence le 
input le size fewer positions stored index index start window fewer windows 
byte integers window size index aas needed gbytes storage positions le 
possible compress le text window produces increasing list integers 
les accessed follows 
matching check bitmap index code index 
perform alignment 
current implementation check making java util class slowed matching process considerably 
ect may due size bitmap kbytes cache implementation class java 
alignment score threshold nd sets code indexed code index sets nally retrieve portion positions list le sets 
follows index description total index size dominated storage integer position lists 
compression bytes integer need bytes index 
window size total index size mbytes 
times size aa sequence 
index split smaller les 
store bit map separately sets positions les call index partitions 
matching algorithm algorithm phases perform rst 
part scan index identify matching windows 
part delivers list codes associated scores 
part currently performed access disk bitmap data structure 
part retrieval positions corresponding reported code windows disk 
part builds alignments scores reported part positions lists gathered disk part 
focus part aspects explored expect able adapt solution 
query sequence scanned window size index depth 
query length fewer windows 
query window aligned index 
complexity index scan product mg 
point introduce optimisation paralleling solutions swat myers durbin algorithm 
improvement heuristic 
follows fact indexed suxes analysis formula calculate dp matrix negative score kept matrix replaced 
means evaluating match leads negative score unproductive missed 
pam matrix see positive scores comparison letters 
rst letter current query window parts index correspond starting letters strictly positive score part algorithm starts lists index codes similar query window score threshold 
code check bit map see marked true code means code occurs text 
code occurs look sets le corresponding code code marked bitmap 
look produces pointers le window positions data pointers read 
part algorithm dominated number hits read positions le 
computation involved random le reads 
complexity part number hits reported 
run diculty windows produce large runs matching index windows 
instance query window comparing index window starting letter produce matching codes giving score score 
threshold window match set report matches possibly database 
overcome diculty additional parameter 
similarity threshold individual window match set maximum number codes report disk look query window 
equivalent limiting number positions looked rough measure data reported 
sure know presence popular codes query increment global score query query windows leading situation 
experimental results data sources le nr acquired th january ftp ftp ncbi nih gov blast db 
data set called nr non redundant represents proteins currently known predicted exist translations known dna sequences 
decompression le measured bytes 
data consisted sequences data pure aa sequence rest record headers 
query le consisted protein sequences total length aas 
selected rst entries les retrieved th february zebra sh records fth le listed 
choice initially dictated ssearch benchmark accepts query les kbytes 
ftp ftp ncbi nih gov blast db aa ftp ftp ncbi nih gov mrna prot mouse faa ftp ftp ncbi nih gov mrna prot rat faa ftp ftp ncbi nih gov sapiens mrna prot hs faa ftp ftp ncbi nih gov mrna prot faa sequences represent organisms drosophila fruit mouse rat human zebra sh 
time index creation smaller dataset protein set worm elegans downloaded ftp ftp sanger ac uk pub elegans sequences size bytes 
hardware software tests performed compaq pc evo series gb mhz ddr ram intel pentium cpu running ghz local disk speci cation gb disk wd bb cja ata disk drive sectors mb cache chs 
os linux release 
software developed java version java tm runtime environment standard edition build java hotspot tm client vm build mixed mode 
access les package java nio provides memory mapped les 
class java util store bit map memory disk serialised object 
file reads bu ered memory mapped les 
file writing index creation bu ered 
blast obtained ftp ncbi nlm nih gov blast executables version dated mon jul edt 
ssearch provided package fasta downloaded ftp ftp virginia edu pub fasta version may 
swat version obtained phil green washington edu 
tests run blosum blast blosum sequoia ssearch swat 
default parameters programs 
gap cost sequoia set 
benchmarks blast heuristic algorithm 
query sequence indexed proteins index window letters 
window generate similar windows letters changed 
mutated windows aligned text exact match windows query approximate matching dynamic programming matrix follows attempts connect exact hits called highly scoring pair hsp 
tested blast entire set sequences individual sequences set comparing nr 
preprocessing nr command compresses data creates indexes record headers took 
ssearch swat implement smith waterman algorithm 
perform exhaustive alignment query text 
ssearch query le kb 
started ssearch query le sequences residues nr target aborted hours completed 
attempted test swat nr turned possible seconds query length performance comparison blast ssearch swat sequoia blast swat ssearch sequoia comparing performance blast ssearch swat sux sequoia 
error message instructed reduce size target le 
subsequently took subset nr containing residues 
constitutes nr ran sample number queries swat ssearch 
times observed swat ssearch execution scaled proportionally multiplied 
summarises performance blast swat ssearch sequoia range queries 
performance sequoia par blast swat ssearch signi cantly slower 
index creation speed index creation related size data indexed size array needed maintain memory resident array arrays written disk 
data indexed memory bitmap disk traverse array write sets positions les disk 
writing disk bu ered slow 
show timings nr dataset window sizes elegans dataset aas window size 
le size window indexing le writing mbytes seconds seconds able index nr depth traversal machine 
hand surprised fact initialise position arrays size copy time need expand index build time reasonable minutes 
clearly need improve code places data disk solution attractive 
query scenario submitted queries multiple times similarity thresholds limiting number codes reported 
total queries executed 
query read le ascii representing aa residues 
perl script invoked java query thresholds parameters 
timer started java query passed analysis 
sliding window length passed query window score threshold threshold maximum number matching codes nd index nd similar sequences le window positions read deliver matches 
read matches disk reported count matches 
positions read disk index partitions number matching codes exceed 
actual number matching window positions retrieved related parameter exact number window positions depends frequency particular codes 
query windows processed timer stopped 
assemble alignment fragments 
recorded similarity threshold threshold query length number text positions read disk time needed operation 
compares speed prototype blast 
similarity thresholds query window length set set 
setting similarity threshold equal means possible similarity reported 
threshold means index partitions fewer codes looked disk partition matches discarded 
partitioning sets codes partition shared rst letter index window re ected les sets les positions 
setting report window positions partition code distribution uniform 
practice varies distribution skewed 
observe blast faster factor realistic number matching codes reported 
seconds query length query execution sequoia similarity thresholds compared blast sequoia thresh blast sequoia thresh performance comparison blast sequoia nr dataset 
summarise numbers hits reported results shown 
interested uence similarity threshold threshold number codes looked disk 
shows relationship sample query aas 
interpret follows 
setting returns matches average query window 
know currently sucient 
better returning similar number window matches thresholds minimum threshold 
threshold return minimum number matches queries 
explained fact threshold matches individual letters window reported match reported times 
higher similarity thresholds matches longer matching words reported fewer match reported times 
explained detail section 
peaks thresholds tails threshold 
hits millions query length number hits query sequoia similarity thresholds threshold threshold relationship query length number individual window hits similarity thresholds limit set 
discussion results reporting exhaustive searching needs return partial matches assemble 
solution threshold ideal point view report matches 
unnecessarily carry computation reach threshold avoiding computation 
improved solution possibly sequence statistics needed improve quality results query eciency 
problem current due fact index suxes compare query windows 
consider consecutive windows text instance 
query window pam gap cost score windows follows 
matches similarity threshold relationship similarity threshold number matches reported query aas aas aas aas ect similarity threshold reporting sux sequoia 
due high scores consecutive pairs characters fact index windows contain combination letters score reported times index window contain 
similarly stretches query 
taken steps eliminate 
believe analysis necessary 
situation perform disk accesses arises query string contains repeating similar words 
eliminated indexing query way done blast 
implementation issues java ease programming cross platform compatibility 
generic solution widely available continue line implementation 
believe relational database support indexing mechanism prototype evaluated 
combination relational database easily support index updates deletions insertions 
main data structure column table containing window code column window index position column 
table clustered code provide query response times 
repetitions text common sequence searching lter repetitive sequences 
usually done dna searching package called context 
data structure allows easy identi cation sequence repeats independent previous knowledge repeats look 
statistics frequency windows easily generated index decision windows represented 
enable searches repeat masking enabled additional bitmap created repeats marked false 
index compression sux sequoia index created left right traversal sequence 
window positions added array referring particular code ascending order 
possible lossless compression techniques store integer lists 
choice compression scheme guided analysis data distribution positions lists selection local global compression scheme 
issues discussed need look carefully statistics index possible 
analysis statistics window distribution ect query performance impact implementation data structure prerequisite 
genome washington edu cgi bin experiments di erent window lengths various cost matrices dna alphabet carried understanding problem 
statistical algorithmic challenges resolved planning implement full sensitivity search tool dna proteins test large genomic data sets context comparative genome analysis 
envisage implementation fpga technology parallel implementation index partitions placed di erent disks machines 
designed index combines features sux tree space eciency array 
index created eciently scan text small footprint 
index requires access disk dp calculation time size indirectly related size underlying data 
shown index perform full sensitivity sequence searching arbitrary cost matrix cost heuristic searching 
pave way ecient database implementation full sensitivity sequence retrieval 
jens stoye rob irving comments manuscript 
research supported medical research council uk 
altschul basic local alignment search tool 
mol 
biol 
altschul madden er zhang zhang miller lipman 
gapped blast psi blast new generation protein database search programs 
nucleic acids research 
baeza yates navarro 
hybrid indexing method approximate string matching 

baeza yates gonnet 
sequence matching 
technical report dept comp 
science univers 
de chile 
ftp sunsite dcc uchile cl pub users papers ps gz 
burkhardt ferragina 
rivals 
gram database searching sux array 
recomb pages 
acm press 

fast approximate matching sux trees 
cpm lncs pages 
springer 
international human genome sequencing consortium 
initial sequencing analysis human genome 
nature 
eck park 
model evolutionary change proteins 
editor atlas protein sequence structure volume 
silver springs md national biomedical research foundation 
durbin eddy krogh mitchison 
biological sequence analysis 
probabilistic models proteins nucleic acids 
cup 
zhang rubin miller 
computer program aligning cdna sequence genomic dna sequence 
genome research 
keller 
gene matching 
fpl lncs pages 
springer 
huang 
space ecient parallel sequence comparison algorithm message passing multiprocessor 
international journal parallel programming 
hunt atkinson irving 
database index large biological sequences 
vldb pages 
morgan kaufmann 
hunt atkinson irving 
database indexing large dna protein sequence collections 
vldb journal 
singh 
ecient index structure string databases 
vldb pages 
morgan kaufmann 
james kent 
blast alignment tool 
genome res 
kurtz ohlebusch stoye giegerich 
manifold applications repeat analysis genomic scale 
nucleic acids research 
automated construction high density comparative maps rat human mouse 
genome research 
manber myers 
sux arrays new method line string searches 
siam comput october 
marsan 

extracting structured motifs sux tree algorithms application promoter consensus identi cation 
recomb pages 
mccreight 
space economic sux tree construction algorithm 
journal april 
miller brass 
rapid algorithm sequence database comparisons application identi cation vector contamination embl databases 
bioinformatics 
myers durbin 
accelerating smith waterman searches 
lncs pages 
springer 
navarro 
guided tour approximate string matching 
acm computing surveys 
navarro baeza yates 
practical gram index text retrieval allowing errors 
electronic journal 
navarro baeza yates sutinen tarhio 
indexing methods approximate string matching 
ieee data engineering bulletin 
navarro sutinen tarhio 
indexing text approximate grams 
cpm lncs pages 
springer 
ning aj cox jc 
fast search method large dna databases 
genome res 

ective indexing filtering similarity search large databases 

appear 
pearson lipman 
improved tools biological sequence comparison 
proc natl acad sci 
smith waterman 
identi cation common molecular subsequences 
mol 
biol 
collins 
version 
www ebi ac uk index html 
parallel sequence alignment algorithm rapid sensitive database searches 
nucleic acids research 
ukkonen 
approximate string matching grams maximal matches 
theor 
comput 
sci 
ukkonen 
approximate string matching sux trees 
cpm pages 
ukkonen 
line construction sux trees 
algorithmica 
sequence human genome 
science 
wall schwartz christiansen potter 
programming perl 
nutshell handbook 
reilly associates nd edition 
waterman 
computational biology 
maps sequences genomes 
chapman hall 
weiner 
linear pattern matching algorithm 
proceedings th annual ieee symposium switching automata theory pages washington dc 
witten mo bell 
managing gigabytes compressing indexing documents images 
morgan kaufmann publishers los altos ca usa second edition 
yamaguchi maruyama 
high speed homology search run time recon guration 
fpl lncs pages 
springer 
yuan liu suh cheung lee buell 
rice genome annotation resource annotating rice genome creating resources plant biologists 
nucleic acids research 

