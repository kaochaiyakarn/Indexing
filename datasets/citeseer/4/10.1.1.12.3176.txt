simple persistent catenable lists 
haim kaplan chris okasaki robert tarjan 
consider problem maintaining persistent lists subject concatenation insertions deletions ends 
updates persistent data structure operation produces new list incorporating change keeping intact list lists applies 
general techniques exist making data structures persistent techniques fail structures subject operations catenation combine versions 
develop simple implementation persistent double ended queues catenation supports deque operations constant amortized time 
implementation functional allow memoization 
key words 
functional programming data structures persistent data structures stack queue stack ended queue steque double ended queue deque memoization 
ams subject classi cations 


fteen years considerable development persistent data structures current version older ones available access partial persistence updating full persistence particular driscoll sleator tarjan developed ecient general methods pointer data structures partially fully persistent dietz developed ecient general method array structures fully persistent 
general methods support updates apply single version structure time accommodate operations combine di erent versions structure set union list catenation 
driscoll sleator tarjan coined term con persistent fully persistent structures support combining operations 
alternative way obtain persistence purely functional programming 
take extremely strict view pure functionality disallow lazy evaluation memoization techniques 
list data structure design purely functional programming amounts lisp functions cons car cdr 
purely functional data structures automatically persistent con persistent 
simple important problem data structure design issue con uent persistence concrete implementing persistent double ended queues deques catenation 
series papers culminated kaplan tarjan developed con persistent implementation deques catenation worst case constant time space bound deque operation including catenation 
kaplan tarjan data structure precursors obtain con uent persistence purely functional 
department computer science tel aviv university tel aviv israel 
math tau ac il 
department computer science columbia university new york ny 
research carnegie mellon university supported advanced research projects agency title fox project advanced languages systems software arpa order 
issued esc ens contract 

cs columbia edu 
department computer science princeton university princeton nj technologies sunnyvale ca 
research princeton university partially supported nsf 
ccr 
ret cs princeton edu 
kaplan okasaki cares persistence purely functional programming unnecessarily restrictive 
particular okasaki observed lazy evaluation combination memoization lead ecient functional purely functional sense data structures con persistent 
order analyze structures okasaki developed novel kind debit amortization 
techniques weakening time bound worst case amortized able considerably simplify kaplan tarjan data structure particular eliminate complicated skeleton encodes tree extension redundant digital numbering system 
explore problem simplifying kaplan tarjan result 
obtain con persistent implementation deques catenation constant amortized time bound operation 
structure substantially simpler original kaplan tarjan structure simpler okasaki catenable deques okasaki requires ecient persistent deques catenation building blocks structure entirely self contained 
furthermore analysis uses standard credit approach 
give alternative closely related implementations method 
rst uses memoization 
second saves small constant factor time space uses extension memoization expression replace equivalent expression 
remainder consists sections 
section introduce terminology concepts 
section illustrate approach developing persistent implementation deques catenation 
section extend approach handle stacks catenation 
section develop solution deques catenation 
conclude section remarks open problems 
extended appeared 

preliminaries 
objects study lists 
allow operations lists return new list containing single element push return new list formed adding element front list pop return pair rst component rst element list second component list containing second elements inject return new list formed adding element back list eject return pair rst component list containing element second component element return new list formed rst 
seek implementations operations speci subsets persistent lists operation allowed previously constructed list lists time 
discussions various forms persistence see 
stack list push pop allowed 
queue list inject pop allowed 
steque stack ended queue list push pop inject allowed 
deque double ended queue list operations push pop inject eject allowed 
simple persistent catenable lists structures may may allow catenation 
catenation allowed push inject redundant special cases catenation convenient treat separate operations easier implement general catenation 
say data structure purely functional built manipulated lisp functions car cons cdr 
structure consists set immutable nodes atom node containing pointers nodes cycles pointers 
nodes build structures contain xed number elds reducing structures elds node adding additional nodes straightforward 
various nodes structure represent lists 
obtain results extend pure functionality allowing memoization function evaluated node second time function evaluated node value simply retrieved previous computation 
constructions constant number memoized functions 
implement memoization having node point results applying memoized function 
initially pointer unde ned 
rst function evaluation lls appropriate pointer indicate result 
subsequent evaluations merely follow pointer result takes time 
consider substantial extension pure functionality allow operation replacing node structure node representing list 
replacement performed imperative setting replacing elds node instance lisp 
replacement viewed generalization memoization 
structures node replaced twice means structures implemented write memory 
easy convert algorithm overwrites eld xed constant number times write algorithm constant factor loss eciency 
overwriting memoization saves small constant factor running time storage space slightly simpli es amortized analysis 
perform amortized analysis standard potential framework 
assign con guration data structure totality nodes currently existing potential 
de ne amortized cost operation actual cost plus net increase potential caused performing operation 
applications potential empty structure zero potential non negative 
follows sequence operations starting empty structure total actual cost operations bounded sum amortized costs 
see survey complete discussion amortized analysis 

deques 
section describe implementation persistent deques constant amortized time bound operation 
structure analogous kaplan tarjan structure simpler 
result illustrates technique doing amortized analysis persistent data structure 
section comment relation structure proposed previously existing solutions 

representation 
subsequent sections say data structure set stores elements representation recursive 
built bounded size deques called bu ers containing ele kaplan okasaki ments 
bu ers kinds pre xes suxes 
nonempty deque represented ordered triple consisting pre denoted pr possibly empty child deque ordered pairs denoted sux denoted sf 
pair consists elements child deque nonempty represented way 
de ne set descendants fc deque standard way provided exist 
order elements deque de ned recursively consistent order triple bu er pair child deque 
order elements deque rst elements pr elements pair nally elements sf 
general representation deque unique sequence elements may represented triples di er sizes pre xes suxes contents representations descendant deques 
refer deque mean particular representation clear context 
pointer representation representation obvious node representing deque contains pointers pr sf 
note pointer structure essentially linked list descendants contains pointer 
operations 
implementing deque operations straightforward maintaining size bounds bu ers 
speci cally push deque easy pre size pop deque easy pre empty symmetric statements hold inject eject 
deal bu er ow ow proactive fashion rst xing bu er operation performed violate size bounds doing operation 
details follows 
de ne bu er green contains elements red contains zero 
de ne memoized functions deque gp constructs representation list green pre gs constructs representation list green sux 
apply gp gs respectively list pre sux red green 
speci cally gp pre empty child deque nonempty symmetrically gs 
give implementations push pop gp implementations inject eject gs symmetric 
denote deque pre child deque sux 
mentioned section implement memoization gp gs having node point nodes resulting applying gp gs initially pointers unde ned 
push jpr gp push pr form return sf 
pop pr empty gp pr nonempty pop pr return pair sf 
empty pop sf return pair 
gp jpr elements pr 
pre containing push 
return sf 
pr empty pop pre containing followed return sf 

analysis 
amortized analysis method relies memoization gp gs 
call node representing deque secondary returned simple persistent catenable lists call gp gs primary 
secondary node constructed call gp gs respectively way access call gp gs respectively secondary node returned result push pop inject eject operation 
means gp gs called primary nodes 
nodes representing deques states node rr bu ers red gr exactly bu ers red gg bu ers green 
subdivide rr gr states rr node rr gp gs applied rr exactly gp gs applied rr gp gs applied gr node gr gp gs applied gr 
discussion secondary node gr gg 
de ne rr rr gr numbers primary nodes states rr rr gr respectively 
de ne potential collection nodes representing deques rr rr gr 
call push terminal results call gp turn calls push 
similarly call pop terminal results call gp turn calls pop 
charge time spent call gp exclusive inner call push pop push pop calls gp 
call push results sequence recursive calls push calls gp bottommost terminal rest nonterminal 
nonterminal push ects converts primary rr node rr creates new primary gr node result push new secondary gr node result call gp converts primary rr node rr creates new primary gr node new secondary gr node converts primary gr node gr creates new primary gg node new secondary gg node 
case total potential drops paying time needed push excluding recursive call 
terminal push takes time creates new nodes increases potential 
conclude push takes amortized time 
analogous arguments apply pop inject eject giving theorem theorem 
operations push pop inject eject de ned takes amortized time 

implementation overwriting 
memoized implementation described primary rr node give rise secondary gr nodes representing list primary gr node give rise secondary gg node representing list 
redundant representations exist 
gr representation dominates rr representation performing deque operations gg representation dominates gr representation 
allows improve eciency implementation overwriting place memoization gp called node overwrites contents node results gp computation similarly gs 
representation list exists time evolves rr gr gg alternative paths depending gp gs called rst 
node needs elds pre child deque sux extra gp gs 
overwriting save constant factor running time storage space simpli es amortized analysis follows 
de ne rr gr number nodes states rr gr respectively 
secondary nodes 
de ne potential collection nodes rr gr 
nonterminal push ects converts rr kaplan okasaki node gr creates new gr node converts gr node gg creates new gg node 
case reduces potential paying time required push excluding recursive call 
terminal push takes time increase potential 
conclude push takes amortized time 
similar arguments apply pop inject eject 

related 
structure just described kaplan tarjan structure section simpli es ways 
skeleton structure sequence descendants stack kaplan tarjan structure skeleton partitioned stack stacks order support worst case constant time operations redundant binary counting mechanism 
second recursive changes structure nodes green sided sided original structure stack stacks mechanism requires coordination keep sides structure related states 
third maximum bu er size reduced 
special case steque maximum size sux reduced 
special case queue pre sux reduced maximum size 
alternative older approach uses incremental obtain persistent deques worst case constant time operations 
see discussion approach 
incremental approach yields arguably simpler structure structure generalizes allow catenation knows implement eciently incremental 
structure extended support access insertion deletion positions away list log amortized time applying ideas 

catenable 
section show extend ideas support catenation 
speci cally describe data structure catenable achieves amortized time bound push pop inject 
data structure recursive decomposition lists section 
pointer structure need simpler analysis amortized framework outlined section section 

representation 
structure similar structure section slightly di erent de nitions component parts 
section bu ers kinds pre xes suxes 
pre contains elements sux contains elements 
nonempty steque represented sux sf ordered triple consisting pre pr child steque pairs sux sf contrast section pair de ned ordered pair containing pre possibly empty steque pairs observe de nition adds additional kind recursion pairs store structure section 
extra kind recursion allows ecient catenation 
order elements steque consistent order triple bu er pair steque pair child steque 
section di erent representations steque containing list elements speaking steque mean particular representation 
pointer structure representation straightforward 
triple represented node containing pointers pre child steque sux 
pair represented node containing pointers pre simple persistent catenable lists steque 

operations 
implementation steque operations implementation deque operations section 
call pre red contains elements green 
call sux red contains elements green 
pre sux steque considered color sux 
de ne memoized functions gp gs produce green pre green sux representations steque respectively 
called corresponding bu er red green 
de ne push pop inject call gp gs necessary obtain green bu er 
de nitions represent steque pre child steque sux 
push case steque represented triple 
jpr gp push pr return sf 
case steque represented sux 
create pre containing rst elements sf create sux containing element sf return 
create sux pushing sf return 
inject case steque represented triple 
gs inject sf return pr 
case steque represented sux 
create sux containing return sf 
create sux injecting sf return 
case represented triples 
bu ers sf pr obtain calculate follows jpj inject 
jpj 
create new pre xes containing rst elements containing remaining elements 
inject inject 
case return pr sf 
case represented sux 
push inject elements sux steque steque 
note push produce valid second arguments pre xes length 
normally allowed may exist transiently pop 
steque immediately passed push discarded 
order de ne pop gp gs operations de ne pop operation simply pops steque argument making sure result valid steque 
pop represented triple pop pr return pair sf 
consists sux pop sf return pair jdj jdj 
pop case steque represented sux jpr 
return pop 
case steque represented triple jpr 
rst element pr second 
push sf form kaplan okasaki return 
form rst elements sf form element sf return 
case steque represented triple jpr 
return pop gp 
gp jpr create new pre xes splitting pr equally 
push 
return sf 
jpr proceed follows 
inspect rst pair 
jpj empty pop pop 
inspect case contains elements 
pop rst elements form inject elements pr obtain push 
return sf 
case contains elements 
push elements pr obtain nonempty empty 
return sf 
gs steque represented triple contain rst elements sf element sf 
inject 
return pr 

analysis 
analysis method similar analysis section 
de ne primary secondary nodes node states potential function exactly section potential function rr rr gr rr rr gr numbers primary nodes states rr rr gr respectively 
section charge cost call gp gs excluding cost recursive call push pop inject push pop inject calls gp gs 
amortized costs push inject argument identical analyze push section 
operation calls push inject constant number times creates single new node amortized cost 
analyze pop assume call pop recurs depth intervening calls gp 
argument analogous push rst calls pays decreasing potential 
terminal call pop result call push amortized cost 
follows amortized cost pop giving theorem theorem 
operations push pop inject de ned takes amortized time 
improve time space eciency steque data structure constant factors overwriting place memoization exactly described section 
simplify amortized analysis exactly described section 

related 
structure section analogous kaplan tarjan structure section structure section simpli es follows 
bu ers constant bounded size structure section uses bu ers structure section uses stacks bu ers 
bu ers turn represented section methods mentioned 
contrast structure section entirely selfcontained 
second skeleton structure just stack simple persistent catenable lists stack stacks 
third changes bu ers green applied sided need driven way repairs simultaneously sides structure carefully chosen locations 
okasaki devised di erent somewhat simpler implementation con persistent catenable achieves amortized bound operation 
solution obtains eciency implicitly form path reversal addition lazy evaluation memoization 
structure extends double ended case shall see section okasaki structure extends case open problem 

catenable deques 
section show extend ideas support list operations 
speci cally describe data structure catenable deques achieves amortized time bound push pop inject eject 
structure analogous structure okasaki simpli ed constant size bu ers 

representation 
kinds bu ers pre xes suxes 
nonempty deque represented sux sf tuple consists pre pr left deque triples ld middle md right deque triples rd sux sf 
triple consists rst middle bu er deque triples middle bu er 
middle bu ers triple nonempty triple contains nonempty deque nonempty 
bu ers triples pre sux tuple contains elements sux sux representation contains elements middle tuple contains exactly elements nonempty middle bu er triple contains elements 
order elements deque consistent order tuple bu er triple recursive deque 
pointer structure straightforward nodes representing tuples triples containing pointer eld 

operations 
call pre sux tuple red contains elements green 
call sux sux representation red contains elements green 
pre sux deque considered color sux 
introduce functions functions gp gs sections produce green pre green sux representations deque respectively called corresponding bu er red green 
give implementations push pop gp implementations inject eject gs symmetric push pop gp respectively 
denote deque pre left deque middle right deque sux 
push case deque represented tuple 
jpr gp return push pr ld md rd sf 
case deque represented sux 
sf return sux deque sux push sf 
push sf form elements 
create new pre rst middle sux 
return 
section implementation pop uses pop 
pop case deque represented sux jpr 
return pop 
kaplan okasaki case jpr ld rd 
return pop gp 
case jpr ld rd 
rst element pr 
create new sux containing elements pr md sf return pair consisting deque represented 
form pr popping injecting rst element md form md popping rst element injecting rst element sf form sf popping rst element return 
gp jpr create new pre xes containing rst elements jpr return push ld md rd sf 
jpr ld rd proceed follows 
case ld 
inspect rst triple ld 
rst nonempty middle bu er contains elements contains nonempty deque pop ld pop ld 
assume nonempty consists nonempty middle bu er 
apply appropriate subcases 
case jxj 
form pr popping rst element injecting pr 
return push md rd sf 
case jxj 
inject elements pr form empty return md rd sf 
nonempty push return md rd sf 
case ld rd 
inspect rst triple rd 
rst nonempty middle bu er contains elements contains nonempty deque pop rd pop rd 
assume nonempty consists nonempty middle bu er 
apply appropriate subcases 
case jxj 
form pr popping element injecting pr form popping element injecting rst element form popping rst element form return push sf 
case jxj 
inject elements md pr form empty push 
return sf 
case represented tuples 
rst element pr element sf 
create new middle containing followed partition elements sf fxg bu ers containing elements order possibly empty 
ld inject ld md rd 
ld inject ld ld ld similarly partition elements pr fyg pre xes containing elements order possibly empty 
rd push ld md rd 
rd push rd rd rd return pr ld rd sf 
case represented sux 
push inject elements sux deque deque 

analysis 
analyze structure de nitions potential function sections 
amortized costs push inject pop argument analogous section simple persistent catenable lists 
amortized cost eject argument symmetric pop 
obtain theorem theorem 
operations push pop inject eject de ned takes amortized time 
just sections improve time space constant factors simplify analysis overwriting place memoization 
overwriting preferred implementation functional programming language supports memoization easily allow overwriting 

related 
structure section analogous structures chapter section simpli es follows 
bu ers constant size deques 
second skeleton structure binary tree tree extension redundant digital numbering system 
amortized analysis uses standard potential function method complicated debit mechanism 
related structure section represents purely functional real time deques pairs triples tuples similar simpler structure section 
straightforward modify structure pairs triples tuples 

results open questions 
universe elements deques constructed total order extend structures described support additional heap order order speci cally support additional operation nding minimum element deque deleting preserving constant amortized time bound operation including nding minimum 
merely store bu er deque pair triple minimum element 
related see 
support ip operation deques 
ip operation reverses linear order elements deque ith front ith back vice versa 
deques section implement ip maintaining reversal bit ip operation 
reversal bit set push inject pop eject inject push eject pop 
support catenation ip reversal bits levels 
de nition section allow deque represented pre extend various operations handle possibility 
interpretation reversal bits cumulative 
deque deque inside regarded reversed odd number reversal bits set path actual pointers structure node node performing catenation reversal bit deques push bits ipping bit deque ipping bits deques points swapping appropriate bu ers deques 
pre sux exchange roles left deque right deque order elements pre sux reversed 
push downs reversal bits assembling new deques overwriting old ones 
devised alternative implementation catenable deques sizes pre xes suxes 
pop eject operations avoiding creating new structure green pre sux respectively representing original deque performing pop eject respectively 
complicated potential function kaplan okasaki ones earlier sections show implementation runs amortized time operation 
direction research nd way simplify structures 
speci cally consider alternative representation catenable deques uses single recursive 
nonempty deque represented triple consists pre pr possibly empty child deque triples sux sf 
triple consists nonempty pre deque triples nonempty sux just nonempty pre sux 
bu ers triples operations push pop inject eject implementations similar implementations section 
major di erence implementation structure requires call pop 
speci cally deques 
pops obtain triple new deque injects sf obtain pushes pr obtain nal result pre pr child deque sux sf 
open question algorithm runs constant amortized time operation constant upper lower bounds bu er sizes 
research direction design con persistent representation sorted lists accesses updates positions take log time catenation takes time 
best structure far developed problem doubly logarithmic catenation time purely functional time bounds worst case 
acknowledgment 
michael goldwasser detailed reading jason discussions led implementations memoization 
buchsbaum tarjan data structural bootstrapping linear path compression catenable heap ordered double ended queues siam computing pp 

buchsbaum tarjan con deques data structural bootstrapping algorithms pp 

dietz fully persistent arrays proceedings workshop algorithms data structures wads springer pp 

lncs 
driscoll sleator tarjan fully persistent lists catenation journal acm pp 

driscoll sleator tarjan making data structures persistent computer system science pp 

tarjan deques heap order information processing letters pp 

hood ecient implementation high level programming language constructs phd thesis tr dept computer science cornell university ithaca ny 
kaplan purely functional lists phd thesis department computer science princeton university princeton nj 
kaplan okasaki tarjan simple con persistent catenable lists extended proc 
scandinavian workshop algorithm theory swat springerverlag pp 

kaplan tarjan purely functional real time deques catenation assoc 
comput 
mach 
appear 
persistent lists catenation recursive slow proceedings th annual acm symposium theory computing preliminary version acm press pp 

simple persistent catenable lists purely functional representations catenable sorted lists proceedings th annual acm symposium theory computing acm press pp 

kosaraju optimal ram implementation catenable min double ended queues proc 
th acm siam symposium discrete algorithms pp 

okasaki amortization lazy evaluation persistence lists catenation lazy linking proc 
th symposium foundations computer science ieee pp 

simple ecient purely functional queues deques functional progamming pp 

purely functional data structures phd thesis school computer science carnegie mellon university pittsburgh pa 
tarjan amortized computational complexity siam algebraic discrete methods pp 

tarjan leeuwen worst case analysis set union algorithms journal acm pp 

