technische hochschule rich swiss federal institute technology zurich david burkhard stiller design distributed content management middleware tik report nr 
january institut technische informatik und computer engineering networks laboratory david burkhard stiller design distributed content management middleware january version tik report nr 
computer engineering networks laboratory swiss federal institute technology eth zurich institut technische informatik und technische hochschule rich eth zentrum ch rich switzerland design distributed content management middleware david burkhard stiller computer engineering networks laboratory tik swiss federal institute technology eth zurich switzerland information systems laboratory iis university federal armed forces munich germany stiller tik ee ethz ch 
emerging need content management systems cms enabling collaborative development administration distribution large amounts content particular web content increasing number different types formats content accessible internet 
systems currently client server architecture content storage management performed centrally dedicated server 
centralized systems simplify management respect data consistency security accountability usually lack scalability reliability 
pure peer peer network architectures assumption central server exists relied peer needs participate provisioning core system functionality provided single server 
cms scales better available system resources increase linearly number participating peers 
reliability system high degree system redundancy increased effort 
compared centralized approach conventional cms tasks versioning access control accounting complicated distributed environment potentially replicas content 
proposes completely distributed content management system support access control accounting account key aspects nature distributed systems 
keywords content management peer peer access control accounting content distribution collaboration entire amount digital information world represents huge distributed loosely connected information system growing fast daily basis 
lot information available content world wide web accessed internet 
maintenance huge amount distributed content difficult task challenging small part system information single 
content management systems cms determine valuable means simplify creation maintenance content webdav web pages cvs programming code 
major set tasks systems versioning control access control transparent data storage 
means concurrent versioning mechanisms enable collaborative 
years set new frameworks developed focusing specifically web content management wcm python java cocoon 
powerful wcm frameworks enable fast deployment simple maintenance large web sites supporting versioning access control workflow management cm functionalities 
systems entirely client server architecture data storage access control management tasks performed central server accessed clients 
works small static amount content clients need hardware resources determined 
large highly fluctuating demand resources scale anymore 
reason central server fails entire system available anymore 
pure peer peer network absence central server content management provisioning functionality distributed replicated peers 
approach number benefits enables deployment suitable load balancing mechanisms removes potential bottleneck central server 
content system functionality replicated peers higher system reliability grows 
addition content management system scalable robust load caused participating peer compensated resources provided peer 
hand approach results set challenges respect key aspects distributed replicated content distributed content management solution deal 
major problems identified replication consistency search access control accounting 
distributed search replication currently widely investigated access control accounting crucial mechanisms respect digital rights management content charging infancy systems 
proposes distributed content management system dealing maintenance distribution high value content networks 
high value content requires deployment suitable protection charging mechanisms 
system focusses specific requirements tackles challenges systems mentioned 
approach proposed services architecture currently developed project 
remainder organized follows section details discusses requirements proposed system different content management scenarios 
section introduces generic content management architecture presenting content model components major functionality 
furthermore sketches adopted services architecture summarizes key design issues 
section offers design implementation proposed distributed content management system evaluation basis specific scenario discussed section 
scenarios requirements content management systems different purposes referred content management scenarios 
scenarios different requirements functionalities levels strength need provided system 
requirements affiliated properties differentiate types content content management scenarios 
content properties popularity 
content range popular unpopular 
people interested specific content popular latest album famous musician example popular content emails sent unpopular 
popularity content number impacts content management systems 
popular content acquired frequently cause heavy loads provisioning infrastructure 
strong need content replication appropriate load balancing scheduling mechanisms able distribute load caches replicas content fair manner 
scalability provisioning infrastructure important requirement especially size popularity specific content varies heavily 
topicality 
content remain unchanged long time necessarily negative changed frequently 
extreme case content generated dynamically user profile interaction content personalization 
topicality crucial specific scenario 
cases content changes quite frequently line newspaper may tragedy gets slightly older version content 
important able access latest version collaboration scenario 
required level consistency potential replicas content strong influence appropriate versioning control mechanisms content management systems 
quality 
content sensitive respect quality aspects content distribution service latency bandwidth jitter 
depending sensitivities content management system faces different qos requirements lead allocation resources content provisioning distribution 
content approach deals resource provisioning multiple levels service 
value 
content large small value 
value content depends people valuation content depending interests reception quality 
usually value content represented monetary price 
describes content valuation model dynamically determines optimal price content customer behavior 
content value strong impact content management system 
content charged needs accounting support protected appropriately means access control suitable digital rights enforcement mechanisms 
free content necessarily 
need charging accounting access control necessary monitoring protection purposes 
security 
content may strong need protection different levels security 
large value content needs protected unauthorized access 
holds true content needs kept secret reasons 
different security properties may apply read write form access content 
reliability 
content sensible terms reliability service availability content persistency 
may tolerated personal homepage available time 
scenarios availability persistency close required 
content replicated appropriate consistency mechanisms required 
cms scenarios life cycle content usually experiences different phases addressing particular aspects 
depicts main phases observed scenarios collaboration management distribution 
collaboration distribution phases content life cycle indicated content life cycle represented closed loop previously distributed content influence new collaboration scenarios 
general cms deal diverse requirements derived content properties phases 
clear observation determines single cms rarely covers phases 
usually exist individual solutions covering parts phases 
complete support content specialized interoperate applying standardized scheme content exchange 
set different content management scenarios described selected represent content life cycle phases 
shown table different scenarios evaluated content management 
properties outlined section 
specific requirements scenario elaborated separately 
table evaluation properties different cms scenarios collaborative content development corporate web content management multimedia content distribution popularity topicality quality value security reliability notations respectively relate importance content property scenario 
collaborative content development 
scenario focusses content creation process small group people 
cms help perform reliable archiving versioning content transparent users 
collaborative development bounded usually small group popularity content small sense 
topicality hand high creation phase content change frequently 
quality service qos aspects normally important issue scenario short latencies high bandwidth accelerate processes interest 
content value fact quite high selling normally issue accounting usually necessary stage 
addition security mechanisms importance access content needs restricted specific group people 
strong need distributed versioning archiving access control mechanisms exists 
corporate web content management 
scenario deals maintenance large corporate web portals 
cms helps administer structure design data web content separately 
supports reuse content definition workflows content editing publishing hides underlying complexity processes users 
scenario content popularity vary lot content distribution infrastructure needs flexible order able react variations current load 
content generated dynamically interaction users providers personalization content topicality important necessary keep content replicas globally consistent 
content charging usually issue scenario quality aspects important corporate identity rea 
sons accounting required monitoring purposes 
content protection important respect modification apart security mechanisms usually required 
reliability normally required determines optional add availability corporate web page important corporate identity 
need scalability qos minor need security accounting distributed versioning mechanisms 
multimedia content distribution 
scenario focus distribution large high quality high value multimedia content audio video streams 
cms support maintenance distribution content different ways 
popularity content normally high multimedia conference parties considered 
respect topicality content left source usually changed anymore 
important requirements compliance qos parameters high value marketed content accounting protection content access entire content distribution path 
scalability qos accounting security mechanisms required 
scenarios number existing systems 
webdav cvs examples collaborative content development scenario cocoon exemplify corporate web content management scenario 
multimedia content distribution technologies akamai nxt 
architecture models design real world cms scenarios requirements discussed building blocks content management architecture cma terms set generic models developed 
flexibility new cma model key mainly able address scenario requirements 
generic content management models independent underlying network architecture client server peer peer hybrid dedicated peer peer service architecture design distributed content management system section 
content management architecture key building blocks generic cma focused main models content model content management model 
content model describes passive part content structure format meta information content management model represents active part set mechanisms functions operate underlying content repository adding manipulating removing content 
content model accurate view generic cma necessary specify content literature different views definitions content content manage 
ment exist 
detailed description problem field 
definitions content considered user friendly information specific context 
contrast data represents computer friendly information encoded set bits bytes 
data usually little outside context content cms combines raw information determines semantic 
necessary context information provided usually meta data information describes context set property values keywords 
approach deals context exchange distributed environment 
fundamental distinction content data crucial cms mechanisms discussed detail section 
user perspective accounting may reasonable content level computers usually provide accounting data level 
essential find mechanism enabling mapping data level accounting records content level 
illustrate difference relation content data defines entity relationship model main building blocks multimedia content broken bits representing data multimedia content combination different types content text documents images audio video streams 
content type may encoded variety formats gif jpeg png images 
depending content type format different atomic data types may underlie content image pixels vectors 
case content bits bytes 
looking single data bit possible find type content represents 
multimedia content video text image audio text char pixel vector sample xor bit content data result content variety cms deal large number different encoding representation formats 
common solution problem today xml formats transformed formats demand 
combination building blocks discussed detail 
content data relationship downward 
different style sheets 
simplicity reasons loss generality assumed content formatted xml language 
furthermore assumed binary data encapsulated xml base encoding specified mime 
content embedded specific context precise boundary content 
difficult map content individual data files loosing context information 
store deliver content necessary divide content separate parts 
multimedia content combination different content types supports requirement 
proposed content model cf 
addresses problem 
describes structure content contains number embedded content objects 
content object atomic serve container content objects 
atomic content objects smallest possible pieces content content management system deal 
container objects may ordered designated sequence 
consider book number chapters intended read specific order 
alternatively content objects linked allows user navigate content 
content model content object atomic content object content object appear simultaneously different contexts may stored place represented shaded objects 
content objects necessarily mapped data files 
extreme case file size fixed page size book content objects data files may overlap 
content model represents structure content independent structure underlying storage network infrastructure 
content stored files databases data storage environments 
underlying network topology hidden content model 
irrelevant individual content objects stored centrally distributed 
similar hierarchical model content aware management 
content management model content management described set functionality interfaces need provided behalf users create maintain distribute content content base repository able host type content reliable efficient way 
link sequence 
model generic cma cf 
assumes implicitly components cms distributed 
user access cms means user application web browser interacts cms interface deals audiovisual representation content 
content management system content base cms functionality cms interface cma model user generalized cms considered content management middleware sense provides standardized interface abstracting away complexity system 
approach detailed content storage content base hidden user enables user application implemented independently specific underlying platform 
list key cms interface methods functionality components options content bases outlined 
cms interface methods 
api specification aims standardized semantic basic methods describing access content user 
list methods intended high level interface description abstracting away implementation technologies java rmi specific protocol 
syntax methods follows common form methodname parameters 
id content userid enables user upload content local content repository cms content base 
case local content repository physically part cms content base appear distributed cms denote ability user select specific content sharing users cms 
result user get back identifier hash code url uniquely identifies content key accessing 
presents content addressing scheme uses sha hashes urns 
content id userid enables user download read content cms content base 
content streamed download 
sophisticated cms interface methods necessary improved cms functionality covered scope 
user application 
ed files 
download necessarily mean content permanently stored locally just cached temporarily rendering 
distributed cms benefit local replicas immediately accessed third party users 
boolean id userid enables user remove content cms content base 
determines reversed method method 
necessarily mean content really deleted just shared cms 
actual deletion may performed locally operating system additional cms method 
boolean return value indicates action performed 
boolean id patch userid enables user change content applying patch differences content previously uploaded cms content base 
boolean return value indicates result action 
id metadata userid enables user search content matching specific meta data description 
method allows different types search basic keyword lookup sophisticated best matching search 
furthermore browsing index list categories supported cms interface 
result user gets list content identifiers match search query 
cms functionality components 
set functionality required provided cms 
specialized cms focus specific cms scenario exemplified section may support subset components depending requirements 
cms functionality components dependencies illustrated 
process initiation resource allocation measurements content scheduling res 
allocation events logging accounting events versioning replication authorized request user information accounting information events content metadata authentication access control security pricing charging indexing metadata mgmt cms functionality components access request billing monitoring price negotiation search request 
logging accounting support functionality includes metering mediation types transactions method invocations including usage functionality components 
combines information user information collected authentication component perform logging charging provide monitoring support necessary 
accounting support detailed section 
pricing charging support pricing charging functionality comprises valuation pricing content charge calculation billing mechanisms 
pricing component sets disseminates price 
interacts user application negotiate dynamic price user 
settled tariff charge calculation combine accounting information specified price calculate content charge 
scheduling resource allocation support scheduling needed process cms method invocations perform allocation resources fair manner 
different scheduling methods place round robin scheduling priority scheduling shortest job scheduling techniques earliest deadline mechanisms support real time applications audio video streaming 
authentication access control security support functionality includes set mechanisms meeting various types security requirements privacy access protection integrity authenticity non repudiation 
different levels security supported public anonymous private authenticated 
particular access control requires authentication users implemented shared secret authorize access content information 
mechanisms detailed section 
furthermore suitable encryption signing mechanisms adopted meet security requirements 
versioning replication support versioning keeps track different versions content modified users 
addition enables provisioning personalized content content different languages different quality levels different formats 
distributed environment replication versioning grows important ensure modifications content performed consistently potential replicas content 
indexing meta data management support indexing manages list available content previously uploaded may shared cms 
list allocated centrally distributed 
functionality support attachment meta information content extract automatically content receive user additional interfaces 
options attaching meta information content discussed just 
addition optional management functionality supported cms mass operations workflow management 
cms content base 
content base efficiently reliably store content way transparent user 
particular content stored centrally distributed depending requirements specific application scenario 

storage options discussed 
major problem attaching meta information content performed differently option 
file oriented content stored files local distributed file system 
meta information supported file system provided file meta information tags needs stored separately 
object oriented content encapsulated object stored object oriented database 
meta information attached directly objects 
relational content stored data dimensional tables assembled dynamically request logic expressions 
meta information stored separate fields table 
apart options approaches discussed index sequential files covered 
peer peer services architecture aim cma away underlying infrastructure network topology 
design distributed content management system cf 
section service oriented architecture 
developed project 
describes different models model network model peer model service model covering relevant aspects services architecture 
network model considers transparent connections different peers service model illustrates peers network provide services 
approach service architecture 
peer model peer model describes internal structure peer composed layers shown 
peer provides interfaces allowing networked peers interact 
list briefly outlines major characteristics different layers 
external interface remote advanced services external interface remote core functionality external interface remote advanced services advanced services resource encapsulation services processing memory power storage local resources hardware software network links content applications peer model core functionality 

local resources peer limited number hardware software resources 
hardware resources processing power memory storage network links copied transmitted 
contrast software resources content applications duplicated transmitted network 
assumed types resources offered peers 
important note software resources draw hardware resources storage distribution 
resource encapsulation services resolve duality resources services resource encapsulation services encapsulate access local resources provisioning standardized interfaces 
drawing directly local operating system functionality resource encapsulation services provide access local resources local remote advanced services 
advanced services advanced services provide just standard interface local resources 
typically involve resources provide advanced service 
consider image comparison service pictures comparing yielding degree similarity output 
service builds local resources image content storage resources application providing algorithm comparison 
extreme case resources come resource encapsulation services different peers 
core functionality layer provides functionality needed peer network services 
charge basic functionality access control accounting service management protocols distributed functionality 
particular includes functionality supports market management system pricing charging 
core functionality modules may access cooperate corresponding modules remote peers 
fine design implementation design implements generic content management model introduced section 
architecture design network infrastructure cf 

peers participating system offer services simultaneously services offered peers 
dimensional illustration represents peers slices hollow cylinder 
peer running parts cms middleware may time middleware means user application 
middleware user application connected link representing underlying network 
looking single peer front design exactly reproduces dimensional cma model shown cms functionality interfaces peer part cms middleware jointly provided peers 
order interact peer provide set core functionality interfaces needs peers 
apart peers provide additional functionality offered services peers 
content managed cms middleware stored distributed content base spans entirety peers 
specific content object pro vided single peer peers 
cms middleware replicas content distribute parts parallel 
cms middleware network distributed content management system design cms middleware assumptions exists authentication infrastructure able setup trust relationships peers authenticate providers users cms middleware encrypt content need 
exists shared space distributed hash table database may store lookup content meta data user group information accounting information shared data 
currently approaches distributed hash tables available search systems 
tapestry pastry chord content addressable networks 
suitable mechanisms voting support reputation management place enabling enforcement necessarily guaranteeing compliance predefined rules content exchanged peers 
cms middleware breakdown cms middleware draws peer model 
different layers peer cf 
cms middleware described deployed peers 
different components cms middleware illustrated 
parts middleware labeled italics adopted underlying architecture 
addition cms middleware introduces kind services basic content encapsulation services advanced multipart content services 
content encapsulation services 
collection raw data identified atomic content object text document image video cf 
section wrapped instance content encapsulation service 
aim service represent content object may reside different types data sources file systems relational object oriented databases 
data remains data source referenced service pointer actual location 
content requested peer data de referenced appropriately formatted distributed 
ua ua ua ua ua user application 
multipart content services 
content objects serve container collection content objects web page containing images type multimedia content represented instance multipart content service 
purpose service represent structure content 
multipart content services draw content encapsulation services may access local resources directly increase performance flexibility middleware functionality provided local file system 
cms middleware local resources service api content resource encapsulation services local content base encapsulation content multipart service api service advanced services content core functionality cms middleware breakdown types services implement service api enables user application peer interact services 
requests service dispatchers activate corresponding services content id hand request 
service api inherits methods corresponding basic service type resource encapsulation service advanced service respectively addition implements cms interface methods section 
perform necessary cms functionality indexing versioning control access control accounting charging services set core functionality modules 
interaction services core functionality described detail access control accounting specifically focussed 
cms middleware introduces new data types 
access rules 
purpose access rule specify conditions access specific content allowed denied 
presents different security models content access control 
services may access right information decide access request cf 
section performed 
conditions represented expressions including user information security quality level accounting information previous requests payment information time information necessary data 
condition expressions may service rules management service support accounting support security support local cf api rules database service descr 
database accounting database charging support 
result conditions 
service restrict access content depending circumstances request 
information condition gathered dynamically different core functionality modules provided request parameter user information content id sent module looks decrypts authenticates respective information 
accounting rules 
aim accounting rules specify conditions service log access events perform measurements transaction attach specific information response token 
mojo nation approach deals decentralized accounting networks 
conditions accounting rule may basically information access rules 
addition accounting rule indicate values measured contains expressions specifying measurements aggregated 
depending evaluation result rule expression service may create accounting record 
access accounting rules created maintained rules management module 
rules storage local distributed database accessible peers 
alternatively rules stored service transmitted request content attached meta information 
accounting rule access rule set conditions rules combined increase performance rule evaluations 
approach deals attachment rules services 
different solutions available dealing access control accounting network data level 
powerful traffic filter deployed linux systems perform access control logging netramet useful tool enables account kind traffic data 
approaches adopted perform access control accounting application content level 
accounting records 
accounting records created services may contain accounting information specified accounting rule content id user id delivery time quality level information usage local resources 
records transmitted accounting support module may store local distributed database 
charging support module accounting records perform settlement content accessed 
service descriptions 
content encapsulation services multipart content services create service description specifying necessary content meta information 
service descriptions maintained service support module uses descriptions reply specific search index requests versioning control replication management 
alternatively search descriptions stored distributed hash table accessed peer 
search versioning control replication detailed point 

evaluation proposed design analyzed evaluated typical cms scenario covering relevant aspects scenarios section 
example depicts set different peers operate cms middleware mw section 
respective local content bases applied user applications ua may different peer long support supported mw 
example set different content objects considered atomic objects third container object developed 
scenario reveals operations cf 
local content base peer mw ua mw ua local content base peer local content base mw network ua example scenario 
collaboration management peer start collaboration content 
peer creates locally version atomic content objects 
ua peer uses local mw interface content available peer accounting rules attached objects access rule objects reveals peer allowed get modify content 
applies container object shared peer peer accesses container object local content base embedded atomic objects retrieved peer peer modify shared objects versioning module synchronizes modifications respective object peer 

distribution content developed peer settled designate peer authorized distributor content 
access rules changed peer assigned right get modify content 
new accounting rule determine obligation account get ua peer mw peer local content base ua user application mw middleware 
content requests 
appropriate service description accessible search peer 

re distribution peer accessed service description peer shown 
peer sells content peer behalf peer access content peer depend conditions regarding payment information previous accounting information 
transaction accounting rule triggers generation accounting records peer 
settlement shown basis accounting records generated peer possible calculate charges bill customers share revenues peer mentioned earlier assumed mechanisms place may store reliably eventually prove sensitive data 
design distributed content management system generic content management cma 
proposed cms middleware implements cma completely distributed fashion centralized components 
approach flexible supports different types cms scenarios content experience life cycle 
requirements gained detailed analysis different cms scenarios addressed particular access control accounting focussed investigated 
generic cma discusses detail content model management functionality independent underlying infrastructure storage delivery 
considerations taken clear distinction content data cms interface methods valid environments 
comprehensive list cms functionality components tackles requirements current content management solutions delineates key issues design options 
proposed implementation generic cma service oriented architecture reveals feasibility concepts platform currently developed 
introducing set new data types particular access rules accounting rules key requirements met set valid assumptions 
design evaluated specific scenario covering relevant aspects cms scenario 
detail accounting charging billing issues content level 
search replication currently widely investigated networks research accounting charging infancy 
performed partially framework eu ist project market management peer peer services ist eth rich funded swiss und wissenschaft 
bern 
authors acknowledge various discussions implementation help 
furthermore go discussed worked cms characterizations 
akamai turbo charging dynamic web sites akamai white akamai technologies www akamai com 
balakrishnan kaashoek karger morris stoica chord scalable peerto peer lookup service internet applications acm sigcomm san diego california august pp 

beck hofmann enabling internet deliver content oriented services th international workshop web caching content distribution wcw boston massachusetts june 
content management bible john wiley sons isbn november 
peer peer architecture distributed knowledge management rd international symposium multi agent systems large complex systems businesses erfurt germany october 
brownlee netramet network traffic meter version www auckland ac nz net netramet february 

schuster wilhelm content management systeme und 
fraunhofer institut und organisation 
extensions content addressable web onion networks 
cheng enhanced proxy caching content management knowledge information systems vol 
march pp 

cocoon xml publishing framework version apache software foundation xml apache org cocoon 
cvs concurrent versions system version www org 
freed borenstein multipurpose internet mail extensions mime part format internet message bodies rfc november 
emergence distributed content management peer peer content networks white january 
stiller architecture service oriented peerto peer system praxis der informations und pik special issue peer peer systems appear 
ford solo internet public key infrastructure certificate crl profile rfc january 
hwang liddy stanton charging control transaction accounting mechanisms information resource transaction layer middleware services lncs vol 
rich switzerland 

jagannathan almeroth pricing resource provisioning delivering content demand multiple levels service lncs vol 
rich switzerland 
jagannathan nayak almeroth hofmann model discovering customer value content acm sigkdd edmonton alberta canada july 
project jxta jxta content management system cms jxta org 
consortium market management peer peer services eu ist project www org april 
project mojo nation peer driven content distribution technology www net february 
project linux subsystem version www org 
nxt building content network white 
ratnasamy francis handley karp shenker scalable content addressable network acm sigcomm san diego california august pp 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems ifip acm international conference distributed systems platforms middleware heidelberg germany november pp 

stiller peer peer services architecture deliverable project january 
webdav web distributed authoring versioning extensions protocol www webdav org february 
ibrahim content management document access control th international conference applications prolog prolog association japan tokyo japan october pp 

zhao kubiatowicz joseph tapestry infrastructure fault tolerant widearea location routing technical report ucb csb computer science division berkeley california april 
open source application server version www org 

