virtual memory primitives user programs memory management units traditionally operating systems implement disk paged vir tual memory 
operating systems allow user pro grams specify protection level inaccessible read 
read write pages allow user programs handle protection violations 
mechanisms robust efficient matched needs applications 
survey user level algorithms page protection techniques analyze com mon characteristics 
attempt answer ques tion hat virtual memory primitives op erating system provide user processes today operating systems provide traditional purpose virtual memory crease size address space visible user pro grams allowing frequently accessed subset address space resident physical ory 

virtual memory purposes 
operating systems share pages tween processes instruction spaces read guaranteed re entrant portions memory zeroed demand copy write 
fact 
large class tricks operating sys tems perform page protection hardware 
modern operating systems allow user programs perform tricks allowing user programs provide handlers protection violations 
unix example allows user process specify particular subroutine executed segmentation fault signal generated 
pro gram accesses memory legal virtual address range user friendly error message produced user provided signal handler segmentation fault core dumped permission copy fee part material granted provided tha copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm andrew 
li department science princeton university simple example user mode fault handler dangerous may lead operating system hardware designers believe user mode fa ult handlers need 
entered efficiently cer case graceful error shutdown ex ample 
interesting ions user mode fault handlers 
applications exercise page protection fault handling mecha nisms quite understood operating em implementors 
describes algorithms page protection techniques 
cases algo rithms substitute conventional paging hardware special microcode times 
shared memory multiprocessors algorithms page protection hardware achieve medium grained synchronization low overhead order avoid synchronization instruction sequences noticable overhead 
benchmarked number systems analyze today operating systems support user level page protection techniques 
algo rithms draw lessons page protection costs 
utility memory mapping mechanisms 
translation buffer page sizes aspects op erating system implementation 
virtual memory primitives algorithm describe require virtual memory services inr trap prot prot dirty map handle page fault traps user decrease accessibility page decrease accessibility pages increase accessibility page return list pages previous call 
map physical page rent virtual addresses different levels protection address space 
algorithms may efficient smaller pagesize normally disk pag ing 
distinguish decreasing accessibility page decreasing batch pages specific reason 
cost changing protection pages simultaneously may cost changing protection page 
algorithms describe protect pages accessible large batches operating system implementation efficiently decrease accessibility page decrease accessibility large batch small cost page suffice algo rithms 
distinction single vs multiple pages algorithms describe pages multi thread algorithms require thread access particular page memory fault page 
solutions problem described simple efficient solution map page virtual address address page access ible address faults 
efficiency reasons 
different virtual addresses page table expensive page table con text switching required threads 
user program keep track dirty pages trap list dirty sepa rate primitive may efficient operating system provide service directly 
virtual memory applications section sample applications virtual memory place software tests special hardware 
microcode 
page protection hardware efficiently test simple predicates ad dresses require extra instructions fetch store sub 
fetches stores com mon operations 
sur ey algorithms may attempt draw general user programs require operating system hardware concurrent garbage collection concurrent 
real time copying garbage collection algorithm page fault mechanism achieve medium grain synchronization collector threads 
paging mechanism provides synchronization coarse efficient fine latency vc algorithm baker sequential real time copying collector algorithm 
baker algorithm divides memory heap regions space space 
collection objects space space empty 
starting registers global roots collector traces graph objects reach able roots copying reachable object space 
pointer object space forwarded making point space copy old object 
course space objects copied space pointer forwarded objects garbage 
soon registers forwarded mutator thread resume execution 
reachable objects copied incrementally space mutator allocates new objects new 
time mutator allocates new object invokes collector copy objects space 
baker algorithm maintains invariant rout sees space pointers reg 
objects new area contain space new objects initialized registers 
objects scanned area contain space point ers onl 
objects area contain space space pointers 
satisfy invariant mutator sees space pointers registers pointer fetched object checked see 
points space 
space object copied space pointer updated pointer returned mutator 
checking requires hard ware support implemented extra 
instructions performed ery fet cll 
tile tile collector alternate operate truly concurrently simultaneously try copy ol ject different places 
checking ery pointer fetched mem ory concurrent collector uses virtual memory page protections detect space memory refer ences synchronize collector mutator ds 
synchronize mutators collectors algorithm sets virtual memory protection un scanned area pages access mutator tries access object get page access trap 
collector fields trap scans objects page copying space objects forwarding pointers necessary 
ect page mutator faulting instruction 
mutator page appears contained space pointers mutator fetch space pointers registers 
collector executes concurrently mu scanning pages area un scanned 
pages concurrently 
fewer page access traps 
doesn thing extra collector compilers 
processors extra effort 
requires trap 
prot map 
traps required detect fetches area protection pages required entire space inaccessible flip done required page scanned 
user ode handler process page proportional page size 
may appropriate pa tency 
need le page garbage collector scan page 
lt ives multiple discussed section virtual memory access protect ion paging mechanism shared network 
ter wit bout shared ries 
tion networks 
essential idea shared virtual paging control single writer reader coherence page 
shows architecture hl syst 
comput er node consists processor 
nodes connected fast passing network mapping virtual shared system presents processors large coherent shared address space 
nj 
processor access location 

shared address space large address space provided hy nimi processor ike address space coherent times 
va ue returned read operation lle alue written bj write operation address 
sj space partitioned pages 
pages read onl copies re physical 
processors 
page written reside 
processor physical 
pro cessor wants write page residing processors 
get date copy page hen tell processors copies 
mapping views local hig cache si ni space associated processors traditional ir tual shared exists 
cause page fault tile page containing location processor current physical 
en hap pens retrieves page processor 
uses trap 
prot 
npr ot trap needs access prm client threads map 
pa appropriate 
concurrent access protection page fault successful 
concurrent real 
algorithm share ory runs concurrently target pro gram interrupts tile target program 
fixed transparent cl ed achieves efficiency hj paging allow opera tile running 
threads program stopped 
writ able main space sa ed including heap 

individual thread 

state saved thread restarted 
threads restarted 
inst eacl saving writ ahl main disk 
algorithm avoids long wait bj tl access protection page fault 
entire address space set read point threads pointed restarted copying thread se 
scans address space 
pages separate virtual address space goes 
cop ing finishes copying page sets access rights write hen user ke read refer ences read pages 
run fast 
thread program writes page copied write memory access fault occur 
point copying thread imme copies page sets access page read write restarts faulting thread 
benchmark programs mea sure performance fire fly multiprocessors 
measurements show checkpoint executed concur rently target program thread interrupted second time 
method applies incremental point saving pages changed checkpoint 
protecting pages read algorithm protect ed pages previous checkpoint 
feldman brown dn ea er sion debugging system reversible execu tions proposed system call dirty 
algorithm uses trap prot prot dirty medium pagesize may appropriate 
generational garbage collection important application memory protection generational garbage collection 
efficient gorithm depends properties dynamically allocated records lisp programming lan guages 
younger records die soon older records 
record survived long time survive new record part tem intermediate value calculation 

records tend point older records lisp functional programming lan guages act allocating record initializes point existing records 
property indicates garbage collec tor effort concentrated younger records property provides way achieve 
allocated records kept distinct areas gi mem ory called generations 
records generation similar age records generation gi older ban records generation gi 
ob pointers gi gj 
collector usually collect youngest generation highest proportion garbage 
perform collection gen eration collector needs know pointers generation pointers machine registers global variables stack 
pointers older generations property 
way older generation point younger assignment existing record 
detect assignments modification heap object examined see violates property 
checking done spe cial hardware compilers 
case instructions required 
fortunately non initializing assignments rare lisp similar languages overhead instruction sequence checking special hardware order total execu tion time 
virtual memory hardware detect assignments old objects 
dirty available collector ex pages derive pointers older gener ations younger generations process 
absence service collector page protection mechanism older generations write protected store cause trap 
user trap handler save address trapping page list garbage collector page unprotected allow store instruction proceed 
garbage collection time collector need scan pages trap list possible pointers youngest generation 
ari ants algorithm exhibited quite formance heaps memories get larger scheme begins dominate techniques 
technique uses trap features 
just dirty 
addition time user mode handler process page indepen dent page size eventual time garbage collector scan page proportional page size may appropriate pagesize 
persistent stores store dynamic allocation heap persists program invocation 
execution program may traverse data structures persistent store just core heap 
may modify objects persistent store point newly allocated objects may commit modifications persistent store 
may abort case net effect persistent store 
executions persistent store kept sta ble storage device disk database disappear 
important traversals pointers sistent store just fast fetches stores main memory ideally data structures persistent store distinguishable compiled code program data structures core 
accomplished virtual memory persistent store memory mapped disk file pointer traversal persistent store just pointer traversal core page faults new parts store examined 
object persistent store modified permanent image altered 
core image modified commit dirty pages possibly including newl creat ed pages written back disk 
reduce number new pages appropriate garbage collection commit time 
database storage management system may provide things 
locking objects trans actions abort checkpointing ery 
integration virtual memory techniques database implementations long studied 
compiled programs traverse data heaps quickly easily access op eration just compiled fetch instruction travers data conventional database slower operation done procedure call ac cess procedures ensure synchronization bil ity transactions 
persistent stores augmented cleanly handle concurrency locking sys tems called ed data bases quickly traversed instructions pro ide synchronization locking efficiency access improved garbage collector group related objects page treat small objects differently large objects 
schemes requires trap file mapping cop writ available simulated prot un prot map 
extending persistent store grow large contains example objects 
addressed bit pointers 
disk drives optical disks certainly hold large databases conventional processors bit ad dresses 
run program persistent store 
fewer ob jects accessed 
solution problem modify tent store mechanism objects core bit addresses objects disk bit addresses 
disk page twice long core page 
page brought disk core bit disk pointers translated bit core pointers translation table 
bit core pointers time page fault may occur fault handler brings page disk translating short pointers 
translation table entries ob jects accessed single execution bit pointers suffice 
point ers core may point accessed pages page allocated core entry translation table showing bit pointer disk page holds contents 
idea having short pointers core long pointers disk translation table onl subset objects session originated loom system 
page fault mechanism implement 
algorithm uses trap prot multi threaded environment 
smaller page size 
data paging typical linked data structure 
words point nearby objects words nil 
words contain integers pointers contain small integers zero 
short information theoretic entropy average word small furthermore garbage collector put objects point nearby locations 
reducing en word little bits 
data compression algorithm page bit words compressible quarter page 
paging pages 
disk com pressed put back main memory 

virtual pages needed take time un compress fetch disk 
course 
compressed pages sent disk long period 
course 
data compression paging done operating system 
user process 
garbage collector move objects minimize entropy 
better results obtained user process control compression done algorithm requires trap prot prot careful buffering trap 
necessary determine pages done occasionally protecting pages see referenced 
help op erating system hardware 
heap overflow detection stack process thread requires protections overflow accesses 
known practical technique systems mark pages top stack invalid access 
memory access pages cause page fault 
operating system catch fault inform user program stack overflow 
imple stack pages allocated operating system response page fault allocate physical pages 
mark ble resume execution notifying user process 
technique requires trap 
faults quite rare processes don stack space efficiency concern 
technique detect heap flow garbage collected system 
ordinarily heap overflow system detect compare conditional branch performed alloca tion 
having user process allocate new records region memory terminated guard page compare conditional branch eliminated 
hen memory reached page fault trap garbage collector 
arranged re memory pro tection required collection allocation area re 
technique requires prot trap 
efficiency trap concern 
language allocate new cell frequently ev ery instructions 
generational garbage collector size allocation region may quite small order youngest generation fit entirely data cache kbyte allocation region hold list cells example 
frequently allocating system keeps activation records heap tiny proportion data live garbage collection time small 

instructions executed heap overflow 
instructions overhead 
compare branch 
trap takes cycles handle typical see section technique reduces overhead worthwhile savings 
trap take longer technique efficient 
techniques reducing heap limit check overhead combining limit checks consecutive allocations unrolled loop application virtual memory interesting discussed 
vm primitive performance algorithms described fall categories 
category algorithms protect pages large batches 
page fault trap page 
sec ond category algorithms protect page page individually 
prot trap operating system operations extremely efficient hut slow 
performed measurements user mode virtual memory performance 
sum prot 
trap measured benchmark program access random protected page fault handler protect page ect faulting page 
process repeated times obtain accu rate timing 
second measurement sum trap 
benchmark program measures protect pages access page random sequence fault handler ect faulting page 
timing programs write page eliminate transient effects filling cache tlb 
compared performance 
sun os 
mach platforms execution benchmarks 
calibration 
show time single instruction add measured instruction loop containing adds compare 
branch 
data show time trap handler change ory protections useful eap defect ion 
results shown table 
benchmark operating sys tem throughput benchmark disk speeds measuring performance cpv handled virtual memory services user level programs 
lve tried mapping physical page different virtual addresses process 
shared memory operations sunos ultrix mach vm 
sunos mach permit ultrix permit attach shared memory object different addresses process 
clearly wide variations formance operating systems hardware 
indicates may consider able room improvement sys tems 
furthermore versions operating sys tems correctly flush translation buffer mprotect call 
indicating operating systems implementors don take feature seriously 
important operating system services efficient 
argument specific vacuous efficiency disk paging page fault usually implies millisecond wait disk spin right sector trap trap ine add trap prot prot map pagesize sun sunos lg sun sunos sun mach xp sun mach exc gig sunos mach xp mach exc dec llt ri de mach xp dec mach exe pl ax ipsc nx table benchmark data 
elapsed time microseconds operation 
mach measured exception port mechanism external pager interface xp 
time trap operating system overhead plus user mode part trap handler provided standard library 
prot pro tn benchmarks show time page 
map system supports mapping page different addresses see section 
page size reported operating system 
implementation changes memory protection sunos incorrectly fails flush tlb 
estimated 
fault overhead hardly noticed contributor fault handling la tency 
surveyed fault handled entirely cpu 
example 
implemented garbage collector executes instructions word space 
pagesize bytes words mips machine computation time handle fault approximately ends 
operating system fault handling page protection overhead microseconds aver age operating system clearly bottle neck 
program exhibits locality garbage collection faults operating system overhead matter 
real time programs satisfy strict 
constraints latency occasional slow fault cause prob lems 
example client program interrupted millisecond fault ha computation time microseconds doesn leave room operating system overhead microseconds 
issue gets complicated consider multiple consecutive faults see analysis 
order compare virtual memory primitives dif ferent architectures normalized ments processor speed 
shows number sun sunos sun sunos sun mach xp sun mach exc sunos sunos mach xp mach exc dec ultrix dec mach xp dec mach xp ax ultrix nx ill prot trap black bars show results pages protected large batches prot white bars additional time taken pages protected time prot 
adds processor ila fe done time takes protect page fault ect page 
benchmark shows wide range implementing virtual memory primitives 
intel machine running operating sys tem simple operating system ipsc hypercube best bench 
performance better worst mach 
clearly inherent reason prin slow 
hardware oper ating system designers treat ory protection tradeoffs design process 
system design issues learn important lessons hardware operating system design survey virtual applications 
applications ir tual memory similar ways clear hl support needed just important unnecessary 
tlb consistency en ory ble large batches 
accessible page 
true con garbage collection 
gcn 

concurrent persistent stor er riding 
thing especially multiprocessor translation lookaside buffer tlb consis tency problem 
hen page accessible dated information tlbs harmless 
leading spurious easily tlb tlb fault 
page accessible 
dated information tlbs lead illegal accesses page 
prevent 
necessary flush page tlb reside 
clone software interrupting processors requesting flush page tlb 
hardware various bus es 
software expensive processors 
solution shoot batch cost architect es 
tlb entry provide access 
operating st em fault handler flush tlb line faulting page 
user mode fault handler page accessible stale tlb entry cause second fault 
flushing tlb entry faulting page add significantly fault handling overhead 
ect ures mips software handling tlb misses 
extra 
soft vare covering 
pages ne ously greater cost single page cost page overhead interrupting processes notify thenl pages 
described protect pages batches take advantage batched batching suggested structure described solve traditional disk paging 
pages accessible disk paging paged order free physical pages re virtual pages 
operating ain large reserve unused physical pages paging batches replenish ize cost entire bat cli 
software solutions reasonably need hardware assist 
batching hardware necessary 
optimal page size algorithms described page faults handled entirely cpu 
fault handling time exclusive overhead small constant times page size page fault occurs paging cal memories disks 
delay tens disk rotates head moves 
computational ol milliseconds page fault handler noticed processes ready execute 
reason including ng characteristics dynamic pages trad quite large 
fault handling overhead high 
user handled faults processed entire user algorithms cpu 
inherent latency 
halve time fault 
sive trap time 
suffices halve page size 
algorithms described perform best different page sizes 
effect varying page size accomplished hardware small page size 
mp system translation buffer cache thing 
byte line size archi tecture suited algorithms described 
prot oper ations small pages disk paging algorithm carefully implemented handle case page referenced put reserve hut shot case page may dirty lb removed reserve shout 
contiguous multi page blocks nom common ax 
small pages particularly impor tant trap change page protections quickly 
overhead independent page size ac tual computation typically takes time proportional page size 
access protected pages algorithms run multiprocessor need way user mode service routine access page client threads access 
algorithms con gc collection address abd ity shared virtual memory data compression 
pag ing 
ways achieve user mode access protected pages garbage collec tion algorithm illustrate multiple mapping page different ad dresses different levels protection address space 
garbage collector ac cess pages space nonstandard ad dress mut see space protected 
system call provided copy memory protected area 
collector call times page copying records space space prior scanning page space just scanning making page sible 
solution desirable efficient copying 
operating system permits shared pages processes collector run differ ent heavyweight process mutator different page table 
problem tech nique requires heavyweight context switches garbage collection page trap 
multiprocessor may suffice rpc processor hat right context 
option attractive 
garbage collector run inside operating syst em kernel 
probably efficient appropriate place garbage collector lead unreliable ker nels 
programming language differ ent runtime data format garbage collector understand 
advocate computer architectures physically addressed caches multiple virtual address mapping address space clean effi cient solution 
require heavyweight context switches data structure copies running things kernel 
small disadvantage physical page require different entries page tables increasing physical memory requirements depending ratio page table entry size page size 
virtually addressed cache multiple virtual address mapping approach potential cache consistency updates mapping may reside cache mapping contains stale data 
problem easily solved context concurrent garbage collection algorithm 
garbage collector scanning page tor access page mutator add page cache lines filled 
collector scanned page flush cache lines page presumably cache flush system call 
collector page 
danger consistency 
ask 
implementations machines particularly clean synchronous signal handling facility instruction causes page fault invokes signal handler changing state processor subsequent instructions execute signal handler access machine registers completely synchronously change memory map machine registers restart faulting instruct ion 
howe er highly pipelined machine may outstanding page faults instructions faulting may writ results registers fault instructions resumed restarted 
hen user programs rel synchronous behaviour 
difficult get run pipelined machines modern systems ser programs actively memory man functions allow ing explicitly manipulate memory pings 

serves courier invitation hel algorithms described incompatible fast pipelined machines serious problem 
fortunately algorithms described sufficiently asynchronous 
fix faulting page resume execu tion examining cpu state time fault 
instructions may begun completed course independent cont ent faulting page 
fact behaviour algorithms machine point view behaviour traditional disk pager get fault provide physical page page sible page table resume 
exception generalization heap detection fault initiates garbage collection methods trap prot prot maps dirty pa concurrent checkpoint generational persistent store extending data compression paging heap overflow table usages virtual memory system services ding data compression paging remove inactive pages hatching technique described section 
virtual memory detection explicit memory protection primitives long usable boundary accessible inaccessible memory vanilla unix 
dirty page bookkeeping simulated trap un prot 
modifies registers forwarding point new locations heap records resumes execu tion 
register containing pointer word adjusted point allocation space 
previously faulting instruc tion re executed time won fault storing different location 
behaviour unacceptable highly pipelined machine hardware undoing subsequent instructions addressing mode side effects com 
fact motorola page faults detect heap overflow reliable 
exception heap overflow detection algorithms pose problem hardware ordinary disk paging invitation hell returned sender operating system sure provide adequate support hardware capable semi synchronous trap handlers resume faulting operations correctly 
primitives virtual memory primitives oper ating systems provide 
persistent store transactions useful pin 
page core written back backing store transaction complete 
mach external pager interface provides facility lacking primitives de scribe operating system tell client pages paged 
client choose destroy pages written disk 
particularly useful data compression paging extending 
system garbage collection client know certain region contains garbage safely destroyed 
general external pager interface avoids problem general operating system pager writes pages disk needlessly cat ing user mode fault handler doing 
virtual memory just tool large address spaces protecting user process 
evolved user level component hardware operating system interf ace 
surveyed algorithms rely virtual memory primitives primitives paid attention past 
design ing analyzing performance new machines new operating systems page protection fault handling efficiency considered pa rameters design space page size inl portant parameter 
conversely algorithms configuration tlb hardware sor may particularly important 
table shows usages requirements gorithms 
algorithms protect pages time prot protect pages large batches 
easier implement efficiently algorithms require access protected pages run concurrently 
algorithm memory protection keep track modified pages dirty service provided efficiently primitive 
algorithms run effi ciently smaller page size commonly pagesize 
algorithms virtual memory share traits 


memory accessible large batches accessible page time important implications tlb consistency gorithms 
fault handling done entirely cpu size page relatively small constant propor tionality implications preferred page size 
pa ge fault age accessible 
frequency faults inversely related locality client program keep algorithms 
mode service routines need access pages protect edf mode client routines 
service routines don need client cpu state 
algorithms described heap overflow detection share 
programs access small proportion address space medium size span time 
traditional disk paging dif 
cient 
example 
concurrent garbage col lection algorithm scan copy amount data 
regardless tor access pattern mutator locality reduces fault handling overhead 
write barrier gener collection algorithm concurrent persistent store algorithms takes advantage local ity small subset objects accounts 
take advantage special kind partitioned locality processor 
pattern 
believe algorithms depend locality scale 
memories get larger computers get faster programs tend smaller proportion address space overhead algo rithms continue decrease 
important hardware operating system designers vir tual memory mechanisms required algorithms robust efficient 
rick rashid 
david tarditi greg morrisett porting various versions benchmark program mach running mach machines larry rogers running sunos 
rafael alonso 
brian bershad chris clifton adam mary fernandez john reppy aud carl staelin helpful suggestions early drafts 
andrew il 
appel supported part nsf ccr 
li supported part nsf ccr intel supercomputer systems sion 
mike accetta robert baron bolosky 
david golub richard tevanian michael oung 
mach new kernel foundation de velopment 
proc 
summer july 
andrew appel 
garbage collection faster stack allocation 
information processing letters 
andrew 
appel 
simple generational garbage col lection fast allocation 
practice 
andrew appel 
john ellis li 
real time concurrent collection stock multiprocessors 
sig pla notices proc 


prog 
lang 
design 

atkinson ken chisholm 
paul cockshott richard marsh 
algorithms persistent heap 
practice ce 
baker 
list processing real time serial computer 
communications chf 

david black richard rashid 
david golub charles hill 
robert 
brown 
translation buffer consistency software approach 
proc 
int conj support pro gramming languages operating systems pages 

david 
vmp multiprocessor initial ex refinements performance evaluation 
proceedings lj th annual symposium com puter architecture 

clark green 
empirical study list structure lisp 
ieee tran 
re eng se 
douglas clark 
pipelining performance processor 
proc 
nd nt 
onf 
tec tural support prog 
lang 
operating systems 
pages 
brian cook 
garbage collectors oberon 
un thesis princeton sity 

eric cooper 
personal communication 
george copeland michael franklin gerhard 
uniform object 
management 
database technology edbt pages 
springer verlag 
kai li jeffrey james plank 
concurrent real time checkpoint parallel programs 
cox fowler 
implementation coherent memory abstraction numa sor experiences wit platinum 
proceedings twelfth symposium systems principles pages december 
peter denning 
working sets past 
ieee trans 
engineering 
se 
jeffrey 
virtual memory management transaction processing systems 
phd thesis carnegie mellon university february 
feldman brown 
igor system program debugging reversible execution 
acm ar notices workshop distributed debug ging january 
fitzgerald rashid 
integration vir tual memory management interprocess communi cation accent 
cm transactions computer sys tems may 
ralph johnson paul wilson 
personal commu nication 
glenn krasner 
smalltalk bits history words advice 
addison ma 

kai li paul hudak 
memory coherence shared virtual memory systems 
cm transactions com puter systems november 
second acm symposium principles practice parallel programming pages seattle washington march 
henry lieberman carl hewitt 
time garbage collector lifetimes objects 
cations cm 
raymond lorie 
physical integrity large seg mented database 
acm 
database 
david moon 
garbage collection large lisp system 
cm symposium lisp functional pages 
mike dell 
putting unix fast computers 
proc 
summer onf pages 

john ousterhout 
aren operating systems get ting faster fast hardware 
proc 
summer onf 
pages 
karin petersen 
personal communication 
paul pierce 
arx 
operating system pages 
intel 
robert shaw 
improving garbage collector perfor mance virtual memory 
technical report csl tr stanford university 
michael stonebraker 
virtual memory transaction management 
operating systems review april 
yq patricia teller 
translation lookaside buffer consis tency 
ieee computer 
charles tha cker lawrence stewart edwin sat 
firefly multiprocessor workstation 
ieee transactions computers au 
david ungar 
generation scavenging non disruptive high performance storage reclamation algorithm 
sig plan notices proc 
acm sigsoft sigplan soft ware eng 

practical soft ent environments 
david ungar 
design 
evaluation high perform system 
mit press cambridge mass 
paul wilson personal communication 
benjamin zorn 
comparative performance evaluation garbage collection algorithms 
phd thesis sity california berkeley november 
