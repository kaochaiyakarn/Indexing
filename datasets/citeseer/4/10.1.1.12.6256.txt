weighted voting replicated data david gifford stanford university xerox alto research center new replicated data 
copy replicated file number votes 

transaction collects read quorum votes read file write quorum votes write file rw total votes assigned file 
ensures non null intersection read quorum write quorum 
numbers jt possible determine copies current 
tim reliability performance characteristics replicated file controlled appropriately file 
algorithm serial consistency admits temporary copies natural way copies votes bas implemented context application system called violet 
key words phrases voting replicated data quorum file system file suite representative weak representative transaction locking computer network cr jl ported supported part xerox fannie john hertz 
author xerox pain alto research center 
permission copy fee part material granted provided copies distributed direct commercial 
cm copyright notice title publication date appear 
notice permission association computing machinery 
copy republish 
requires foe specific permission 
acm 
distributed computer systems stimulating interest keeping copies information different nodes computer network 
replication data allows information located close point statically locating copies high areas dynamically creating temporary copies dictated demand 
replication data increases availability dam allowing nodes service requests information parallel masking partial system failures 
cases cost maintaining copies offset performance communication cost reliability benefits replicated data affords 
new algorithm maintenance replicated files 
algorithm briefly description copy replicated file assigned number votes 
transaction collects read quorum votes read file write quorum votes write file greater total number votes assigned file 
ensures non null intersection read quorum write quorum 
subset representatives file votes total ar read quorum gathered guaranteed hay current copy 
version numbers possible determine copies current algorithm number desirable continues correctly inaccessible copies 
consists small amount extra machinery runs top file system 
voting occurs evident complicated message coordination mechanisms needed 
provides serial consistency 
words appears transaction mt current vernon data provided manipulating voting structure replicated de system administrator alter file performance reliability extra copies fi 
created including temporary copies users local disks incorporated framework 
remainder section section describes related differs previous solutions 
interface basic structure introduced section 
offered section including temporary copies new locking technique 
violet system contains implementation performance discussed section 
final tion brief 
demonstrates algorithm ma serial ideas illustrated mesa language developed xerox palo alto research center 
mesa suited task ue contains integrated support prm condition variables 
simplify nonessential details omitted fn mesa 
examples 

related previous algorithms maintaining replicated data fall mo es 
insist object primary site assumes responsibility update 
distributed ings 
technique simple relatively inflexible 
employ distinguished sites objects ate complex primary site algorithms 
copies object date sending updates communication system buffer machine crashes 
thomas proposal requires majority copies includes voting share notion voting directly compare algorithm provide different services 
notably guarantee serial consistency queries readonly 
thomas algorithm 
insist majority object copies updated 
algorithm employ weighted limits flexibility 
thomas algorithm complex addresses consistency ns replication issues 
separated resulting easier reason 
structure allows inclusion temporary copies 

basic algorithm concepts necessary algorithm modeled stable file system 
section build algorithm replicated data assuming existence system 
exposition uses kinds objects files containers 
files arrays bytes 
addressed read write operations described 
containers ate storage repositories files intended represent storage devices disk drives 
objects introduced unique names 
objects assigned name different machines 
concern programs acquire names assume names containers ides interest hand 
file army bytes cl ted 
de 
re written 
create 
file idi 
file rb ldl 
bead file 
write file gm 
id count 
keep discussion simple assume file system primitives operate remote local files alike 
accomplished encoding file location container unique identifier maintaining location hints remote files 
details considered 
transac ions define scope concurrency control failure recovery 
transaction group related file operations bracketed transaction call commit call hides concurrency making appear file operations tht activity system property known serial 
transaction hides undesirable events recovered detected disk read error server crash 
transaction guarantees write operations performed 
furthermore transaction committed effects resilient hardware failures ns server crash 
process single current transaction 
application transactions create processes 
forked rec join parent transaction calling 
file may unavailable server resides communication failure 
read operation directed file unavailable corresponding file 
read call return 
multiple processes algorithm allow proceed case 
outstanding uncompleted reads occurred affect ability transaction commit 
transaction system guarantees serial consistency reads completed transaction committed 
likewise ifa write operation directed file unavailable corresponding 
write call return 
transaction attempts commit unfinished writes remain uncommitted writes complete 
possible user want abort transaction progress 
transaction abort initiated user ns shown discard transaction writes terminate transaction 
possible file system spontaneously abort transaction server crash communication failure lock conflict 
concludes model set primitive objects operations 
model abstracts confederation cooperating computers structure uniform naming distributed file system 
shall see sections abstractions introduced replication algorithm straightforward explain 
course believe model described realizable practical fact ideas necessary implementation received great deal attention 
gray provides nice discussion phase commit protocols locking synchronization primitives 
lampson sturgis describe implemented system properties model requires 
interface algorithm uses facilities described section provide abstraction called file suite 
file realized collection copies call representa ves democratic way update decisions reached 
file suite created description configuration supplied includes number representatives containers stored number votes accord configuration record 
array record como ff id pq ff tb 
pro ed ite suite 
stores configuration st bit storage 
structures stored depend algorithm implementation 

shows possible alternative 
suite cataloged directory entries preferably case unavailable 
representative prefix identifies representatives suite voting strength 
created file suite ordinary file 
file 
read file 
write 
file 
delete operations specified 
manipulate array bytes ref file suite 
file operations file suite operations part 
file suite appears ordinary respect differences arise file suite cnn performance reliability characteristics impossible file 
ible tailor reliability file suite manipulating voting configuration 
high performance suite results heavily weighting high performance representatives reliable suite results heavily weighting reliable representatives 
file suite reliable having equally weighted representatives 
completely decentralized su results equally weighting representatives completely centralized scheme results assigning votes representative 
algorithm falls described section general reliability performance suite established voting configuration 
relative reliability performance read write controlled adjusting decreases reliability performance writes increases 
decreases reliability performance reads increases 
choice depend read write ratio cost reading writing desired performance 
examples diverse mix properties created appropriately setting table wc assume probability representative unavailable 
example 
configured file high read write ratio single server 
multiple user environment 
enhance performance ot system reliability 
local network accessed milliseconds 
users chosen copies personal disks creating weak representatives representatives votes see section complete weak representatives 
allows copy disk resulting lower traffic shared server 
example file moderate rend write milo primarily front local network 
server local network assigned votes servers remote networks assigned vote apiece 
satisfied local server writes ess local server remote server 
system continue operate read mode local server tails 
users create additional weak representatives lower read latency 
example file high read write ratio system directory server environment 
users read server probability file unavailable small applied copies 
users create additional weak representatives local machines lower rend 
mom ro de 
ldi gin 
unknown 

set type ar boolean ym name version version number 

number representatives names version numbers 
voting strengths copied representative prefix data structure shown 
information obtained transaction access de suite order guarantee reflects configuration 
additional int 
speed ot representative omitted rom basic algorithm easier understand 
read file suite read quorum gathered ensure current representative included 
file suite accessed collecting quorum encounters delay operation collector gathers quorum described detail 
quorum current representative read 
read representative respond fastest 
prat file 
count 
buffer set mg mk emma buffer basic algorithm prose fragments mesa code 
prose meant complete explanation mesa code provided reader check understanding ideas 
mesa procedures shown part single monitor called 
separate instance suite 
entry procedures manipulate shared data lock monitor 
careful public non entry procedures monitor locked input output progress allowing process requests 
write file suite 
write quorum assembled representatives quorum current updates applied obsolete representative writes quorum done parallel 
write tran qn ion increments numbers write quorum 
subsequent writes directed quorum 
write done protection monitor shown mesa code 
procedure 
concurrent writes update portion fde undefined 
count count count 
bu possible representative file suite doe server crash 
simple solution problem shown procedures abort rend write take specified time 
restart suite bed quorum sizes minimum number votes collected read write operations proceed 
possible increase performance file suite artificially expanding quo 
representatives 
ain complexity procedures boy approach 
file suite ut accessed version number inquiries sent information results col determine ue fie suite current number read quorum established file suite entertain request representatives contain current voting rules algorithm stabilize correct rules read quorum established shown section 
representative version number read return 
prohibit user transac committing described section 
collector file suite nther quorum representatives 
normally collector selects considers quorum respond fastest returns immediately caller 
problems arise 
possible rend quorum representatives reported version 
case tile collector cnn wait report 
second potential problem read quorum reported numbers 
hot ti ere current write quorum 
iis enn occur reported version numbers 
case collector initiate background process copy contents suite obsolete representatives reported 
qal copy current 
contents file suite obsolete representative 
note copy reading effect call votes rend proceed 
minimize lock conflicts tile process run transaction 
background process signifies completion breaking parent 
yam nq vom th 
quorum lt qt votes 
fob ii thn vom yam th ip ti prat nq ij un user decides transaction system spontaneously aborts user suite longer defined state 
version number holding longer serially consistent operations discarded new inquiries writes vernon number rum reset prat iw unknown suite il votes lsp transaction commit module instance deleted 

refinements weak representatives incorporate temporary copies algorithm introducing representatives votes called rp jmf 
representative change quorums file suite introduced time 
included quorum placed hash speed storage device improve performance file suite 
weak representative votes bears responsibility long term dam 
write quorum representatives current data 
error detected accessing weak representative acceptable means recover invalidate setting version number unknown 
allows weak representatives stored outside ot stable file system 
simplification insisting weak representatives 
insure users share weak representatives exclusive simplified recovery weak representatives allow store general de system outlined section 

stored user personal computer ver simple mechanism 
ar crash user personal sufficient invalidate weak locked 
lock disadvantage comparison thomas locks set stable file system serial consistency reduces concurrency system 
example 
su guarantee consistency types locks read write 
locks set dam items implicitly response file operations 
compatibility locks specified write lock read write transaction suspended attempts set lock incompatible 
matrix corresponds familiar rule writer permitted access file simultaneously 
locking rule potentially introduce long periods time information unavailable 
example user controls length transaction hold write lock long period time 
may naturally occur user thinks keyboard 
insure user file transaction timed users waiting fr file locked 
transaction times leaves files unchanged aborted 
mechanism insures cyclic lock dependencies deadlocks resolved aborting transaction 
tune outs provide adequate solution environment section 
property serial consistency transaction writes appear occur transaction commit time 
take advantage property increase concurrency system 
writes appear occur issued fact buffered commit time stable file system 
read write receive write data 
user writes datum nn write lock set intention write 
commit time write locks converted commit locks writing takes place 
new lock compatibility max read write commit lk read write commit revised locking matrix data unavailable predictably short periods time commit processing 
results increased concurrency discuss section 
may cause abortion transaction 
chose multiple write locks incompatible eventually transactions probably commit 
incompatible 
chose postpone inevitable 
lower degrees assumed algorithm capable providing serial consistency 
lower degrees consistency possible allow liberties taken example setting 
ds notion give latest version find don care isn fresh 
certain applications characteristics name lookup lower degrees consistency 
behavior lower degrees precludes widespread 
gray explored properties various degrees consistency detail 
degree consistency corresponds serial consistency 
algorithm run top file system ensures degree degree consistency algorithm guarantee consistency sees fact prove 
size replicated objects size object replicated chosen match needs intended application 
example data base manager choose replicate relations tuples indexes 
replicated object requires version number 
algorithm depends file version number remaining unchanged transaction smallest unit locked file 
broken read locks sable file tem break read locks resolve conflicts aborting entire transaction positive effects result 
fewer tran aborted 
second 
necessary version number remain transaction 
change broken read lock mechanism informs algorithm 
unit longer file smallest unit supported sable file system 
votes focus file suite changes 
possible update file suite voting configuration optimum performance 
refinement proposed section adopted updating suite voting configuration conflicts suite 
section inquiry process protects changes reading suite voting structure protection transaction 
change voting structure file suite necessary ensure write quorum new rules current 
change effected updating prefixes set representatives union current write quorum new voting rules ite quorum 
claim regardless order representatives examined voting rules read quorum 
imagine transaction 
incorrectly obsolete generation voting rules 
current 
set voting rules 
established rules written write quorum 

transaction examined representative contained contained representative contain contained inter generation voting rules 
version number mechanism replaced thee generations 
assumed transaction find generation 
contradiction 
committing 
reduce amount communication commit time significantly 
updating representatives background cl possible operate servers update obsolete representatives examining replicated container initiating appropriate transfers 
done surplus communication capacity 

replicating procedure outlined section user specifies collection containers create file suite 
flexibility complicate operation system 
imagine user creates file suite containers user creates file suite containers container fails possible users continue access suites possible users proceed depending voting configuration 
short system operator know failure container implies 
replicated provide solution problem 
mz configuration cmm ul replicated user exactly unreplicated 
passed replicated container 
create creates file suite single file 
user unaware replication te 
call containers compose replicated container bose approach benefits easy determine implications container service 
allows system operated effectively 
voting structures tailored characteristics system configuration knowledgeable system backup archiving replicated containers replicated mounted unit 
easily identified 

releasing read lock transaction holds commit time ensure lock force 
section procedure sends representatives suite determine status 
read lock obtained representative available 
enhancement algorithm release read locks representatives part quorum implementation violet system implemented algorithm context simple decentralized data management system called violet 
violet distributed calendar system provides simple relational views personal public calendars 
picture violet display user interface 
user interacts violet selecting items command menu bottom viol designed operate environment shown 
user computer bit map display pointing device network interface 
local network segments operate av megabits second connected form 
implementation file suites parallels code fragments section creates manipulates uniformly weighted representatives 
file suite managed monitored module consisting pages mesa code 
employing directory suggested file suite name violet list representatives compose sot tion stable file system implemented 
di system composed cooperating servers 
provide decentralized transactional file system 
interface di closely parallels model section 
interface read latency byte page local local network user milliseconds 
server located remote network accessed kb data connection read latency byte page milliseconds 
comparison read latency user local disk replication accomplished violet simulated virtual memory shown 
paes local remote file suites buffered level 
implemented proposal section violet exhibited undesirable behavior 
imagine users viewing calendar considerable length time longer minimum amount time file system guarantees ior viewing data 
user decides update view 
soon user writes view llr transaction 
user denied access data user machine requests access screen 
user holds write lock thinks keyboard 
user eventually times user lock breaking transaction 
screens old int net pro 
problem solved implementing section proposal 
performance sets cost figures algorithm 
set costs number reads writes inherent 
second set number messages round delay times result implementation uses dis 
consideration source delay 
optimized local network figures ore dfs es messages single request due protocol uses duplicate 
addition dfs uses phase commit protocol phase protocol logically shown 
worst case behavior 
assumed representative stored separate server representative add server refer cost existing inquiries line represents cost version number reads 
coordinator workers participants commit 
round delay time numb el sin transaction read add ser 
subsequent read subsequent write ran fdt new algorithm replicated data offers benefits provided previous solutions 
weighted voting allows file suites synthesized desired properties including presence temporary copies 
separation consistency zs level user names buffers file transactions containers process stable file volatile file internal structure violet replication resulted conceptually simple approach guarantees serial consistency way relatively easy implement 
facilities mesa hove implement complex concurrent control structure 
invite language designers attempting provide concurrent implementing algorithm language idea weighting votes undoubtedly applications outside replication algorithms 
example decision nodes different probabilities correct weighting nodes responses improve probability correct decision reached 
advisors 
butler lampson susan hard questions encouragement course 
james gray 
hector garcia 
lawrence stewart howard stt 
provided helpful comments discussions 

notions consistency cks system ce 
pp 

gifford violet 
decentralized system 

rocquencourt france 
nv 
available cst report xerox pal alto 

lm redell 
experience wire mes 
appear jn alto uy runt 

stk 
demonstrate algorithm 
coupled consistency stable files guarantees consistency file suites showing fie suite obeys tc tc 

replication algorithm guarantees tc 
tc 
proof 
tc assumed writes stable files transaction appear occur atomically 
file suites writes transformed stable file writes 
desired result follows 
tc imagine algorithm tc 
implies file suite reads fresh commit time 
implies fde suite read repeated 
yield results originally 
key algorithm guarantee datum appear write quorum 
read quorum write quorum non null ction 
version number reads fresh 
tc stable file system guarantees representative reads re fresh 
contradiction 
appendix consistency stable allowed section 
relatively demonstrate fde suites consistency need file suites conditions 
serial consistency processing said uninterrupted activities take place progress processing implies acts may processed 
act said appear ocr concurrent processing act result uninterrupted processing produced 
follows mechanism guarantee atomically 
fresh read 
issued result ly 
axioms conditions guarantee tci atom ity writes writes transaction appear occur atomically transaction fc atomicity reads commit instant writes occur transaction reads fresh 

transaction obeys tc 
tc appears occur 
proof contradiction 
operations comprising occur atomically 
tc atomicity writes 
read appear occur commit time 
implies produced different results commit time 
tc nm permit 
directory entry olfactory entry representative version er suite size file vote 
file file vote 
file suite prefix representative client data rep file suite file votes client representative file suite file container vote example file prefix client data rep file suite file container votes prefix client data file suite file container votes system nb nid li network stall 
system network internetwork environment re sl violet calendar system january ld sunday monday wednesday prof dive gifford ward mit csl csl commons csl commons ef ucla csl commons ry thursday parc cif light nt tio friday prof conf ne room bast hilary ind resonant intense light saturday week set view 
