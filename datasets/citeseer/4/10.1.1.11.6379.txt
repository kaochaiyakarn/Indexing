automata logic xml frank neven university frank neven luc ac 
survey developments broad area automata logic motivated advent xml 
particular consider unranked tree automata tree walking automata automata infinite alphabets 
focus connection logic questions imposed xml 
codd databases modeled order relational structures database queries mappings relational structures relational structures 
surprising intimate connection database theory finite model theory 
argued vianu finite model theory provides backbone database query languages turn database theory provides scenario finite model theory 
precisely database theory induces specific measure relevance finite model theory questions provides research issues risen independently 
today technology trends require model data longer tabular 
world wide web consortium adopted standard data exchange format web called extended markup language xml data represented labeled ordered attributed trees table 
new data model requires new tools new techniques 
trees studied depth theoretical computer scientists surprise techniques contribute foundational xml research 
fact browsing icdt pods proceedings apparent new component added popular logic databases connection tree automata theory 
cross fertilization logic databases xml imposes new challenges area automata logic area provide new tools techniques benefit xml research 
logic serve source inspiration pattern languages query languages benchmark expressiveness languages application automata xml roughly divided categories icdt pods abbreviations international conference database theory symposium principles database systems respectively 
links provide information alpha luc ac icdt www acm org sigmod pods 
formal model computation means evaluating query pattern languages formalism describing schema algorithmic toolbox 
survey automata formalisms xml research unranked tree automata tree walking automata automata infinite alphabets 
automata new application xml formalism ignore attributes text values xml documents simply take finite labeled unranked trees abstraction xml formalism deals attributes text values 
models discuss relationship xml survey results demonstrate new research directions 
current presentation meant exhaustive choice topics heavily biased author research 
furthermore discuss xml research issues directly motivate automata 
general discussion database theory xml suggest survey papers abiteboul vianu book abiteboul buneman suciu 
give proofs purpose ones discuss merely arouse interest demonstrate underlying ideas 
mention automata database research vardi instance automata statically analyze datalog programs 
organized follows 
section discuss xml 
section provide necessary background definitions concerning trees logic 
section consider unranked tree automata 
brief unranked trees trees node finite arbitrary number children 
section focus computation tree walking 
section consider automata infinite alphabets 
conclude section 
basics xml fairly short xml 
brief xml data exchange format enormous success due flexibility simplicity data format easily translated xml transparent manner 
purpose important observation xml documents faithfully represented labeled attributed ordered trees 
detailed information xml web instance reilly xml book 
illustrate xml means example 
consider xml document displays information crew members spaceship 
html building blocks xml elements delimited start 
start tag crew element instance form corresponding closing tag indicating element text including tags constitutes crew element 
elements arbitrarily nested inside elements element spock instance subelement outer crew element 
elements attributes 
name value pairs separated equality sign 
value attribute atomic 
nested 
attribute appears start tag element belongs 
instance indicates value name attribute particular element enterprise 
human automata spock logic fig 

example xml document 
xml document viewed tree natural way outermost element root element subelements children 
attribute element simply attribute corresponding node 
tree instance corresponds xml document 
unique best way encode xml documents trees 
possibility encode attributes child nodes element belong 
stick encoding 
name enterprise crew id name species human job automata crew id name spock species job logic fig 

tree representation xml document usually interested documents containing arbitrary elements documents satisfy specific constraints 
way define schema means dtds document type definitions 
dtds basically extended context free grammars 
context free grammars regular expressions right hand sides 
give example dtd describing data type spaceship 
dtd specifies outer element crew element name species second subelement respectively rank job third subelement 
denote disjunction concatenation respectively 
pcdata indicates element subelements consists text 
attlist determines attribute belongs element 
attributes specified dtd single string value 
dtds means representing schema xml 
briefly come back section 
fig 

dtd describing structure document 
attributes link nodes 
instance id di erent place document refer instance id attribute special meaning xml discuss important 
indicated xml documents faithfully represented trees 
respect inner nodes correspond elements leaf nodes contain general arbitrary text 
sections exception section consider structure xml documents ignore attributes text leaf nodes 
xml documents trees finite alphabet alphabet question instance determined dtd 
trees unranked nodes arbitrary number children dtd instance allows unbounded number crew elements 
ranked trees trees number children node bounded fixed constant thoroughly investigated past years unranked counterparts neglected 
section recall definition unranked tree automata consider basic properties 
introduce necessary notation section 
trees logic trees rest fix finite alphabet element names 
set trees denoted inductively defined follows tree ii 

tree 
note bound number children node tree trees unranked 
tree set nodes denoted dom subset defined follows 
dom iu 
dom 
represents root vj represents th child lab denote label say tree mean tree 
define formalization dtds 
definition 
dtd tuple function maps symbols regular expressions start symbol 
sequel just say 
tree satisfies lab dom children lab lab un lab 
note children belong lab 
example 
example consider dtd describing xml document crew crew name species rank job name species rank job recall moment interested structure xml documents 
name species rank job mapped 
section consider text attribute values 
logic view trees logical structures sense mathematical logic 
relational vocabulary binary unary relation symbols 
domain viewed structure equals set nodes dom 
edge relation equals set pairs dom 
relation specifies ordering children node equals set pairs dom 
set nodes labeled 
consider order fo monadic second order logic mso structures 
brief mso fo extended quantification set variables 
refer unfamiliar reader books ebbinghaus flum chapter thomas 
section consider transitive closure logic 
example 
example consider mso formula defining set trees labeled node labeled descendant desc 
desc abbreviation formula formula desc says set contains closed edge relation contains defines pairs descendant unranked tree automata research unranked trees context xml initiated murata wood early pair takahashi 
considered language theoretic properties nondeterminism wayness tree grammars 
quite number applications initial ideas risen 
discuss applications section 
sections focus non deterministic tree automata connection binary tree automata expressiveness complexity 
definition definition 
nondeterministic tree automaton nta tuple finite set states set final states function regular string language fig 

tree accepting run automaton example 
run tree labeling dom dom children vn lab 
note children criterion reduces lab 
run accepting tree accepted accepting run 
set accepted trees denoted 
call set trees regular recognized nta 
illustrate definition example 
example 
consider alphabet 
suppose ease exposition trees form appear leaves appear leaves 
positive boolean circuits 
define automaton accepting exactly circuits evaluating 
define intuitively works follows assigns labeled labeled leaves assigns labeled node children assigns labeled node children 
accepts root labeled 
give example tree accepting run 
automaton accepting dtd example defined follows crew name rank job species name job species rank crew crew crew name species rank job 
mentioned empty 
connection ranked trees start develop theory regular unranked trees sense reflect relationship regular binary trees 
unranked trees uniformly encoded binary trees 
just mention possible encoding 
see illustration 
intuitively child node remains child node encoding explicitly encoded left child 
remaining children right descendants child 
right child left child inserted 
additionally left child inserted right child 
enc dec fig 

unranked tree binary encoding 
encodings enc dec obtains proposition represent transition functions nfas 
proposition 

unranked nta binary tree automaton enc 
size polynomial size 
binary tree automaton unranked nta dec 
size polynomial size proposition allows transfer closure properties class ranked tree automata class unranked tree automata 
expressiveness complexity enc dec mso definable proposition implies famous wright characterization ranked tree automata easily carries unranked trees 
corollary 
set trees regular mso formula 
proposition provides tool transferring results ranked unranked trees deal issues specific unranked tree automata 
complexity decision problems instance depends formalism represent regular string languages transition function 
ways represent regular string languages logical formulas automata various forms control grammars regular expressions proposition er immediate help 
dwell bit issue 
denotes classes representations regular languages 
nta denotes set regular languages represented elements translation binary unranked automata mentioned proposition polynomial nta nfa 
reason class seen default unranked tree automata 
class complexity membership problem quite tractable 
size automaton 
mean size automaton accepting size language 
proposition 
nta nfa 
testing done time 
tree automata obtain upper bounds complexity problems related xml needs turn succinct formalisms 
instance pspace upper bound complexity typechecking problem structural recursion obtained reduction emptiness problem nta afa 
afa stands class way alternating string automata 
respect sense explore various possibilities mention initial results 
consider known decision problems emptiness nta decide containment nta decide equivalence nta decide proposition 

emptiness nfa ptime 

emptiness afa pspace 

containment afa exptime 

equivalence afa exptime 
theorem optimal fixed arity trees emptiness containment ptime hard exptime hard respectively 
emptiness dfas known hard pspace 
applications unranked tree automata serve xml research di erent ways 
basis schema languages validating schema 
murata consider tree automata schema definition language 
fact schema language relax competitor xml schema directly inspired unranked tree automata 
xduce type system pierce hosoya specialized dtds papakonstantinou vianu correspond precisely unranked tree languages 
lee mani murata provide comparison xml schema languages formal language theory 

evaluation mechanism pattern languages 
researchers defined pattern languages unranked trees implemented unranked tree automata neumann seidl develop calculus expressing structural contextual conditions forests 
show formalism implemented push forest automata 
special cases unranked tree automata 
murata defines extension path expressions regular expressions unranked trees 
klein wood consider caterpillar expressions 
regular expressions addition labels specify movement tree 
neven schwentick define guarded fragment etl mso combined complexity tractable general mso 
expressiveness complexity results etl partly obtained techniques unranked tree automata 

algorithmic toolbox 
instance miklau suciu binary tree automata obtain algorithm xpath containment 
mentioned martens neven obtain upper bounds complexity type checking reduction emptiness test unranked tree automata 
unranked tree automata toolbox hardly developed 
helpful general results complexity unranked tree automata terms complexity regular languages representing transition functions 

new paradigm 
unranked tree automata regular string languages deal 
simple ective paradigm application formalisms 
neven schwentick define query automata 
way deterministic unranked tree automata select nodes tree 
query automata correspond exactly unary queries definable monadic second order logic 
result gottlob koch correspond unary queries definable monadic datalog 
extension boolean attribute grammars considered unranked trees defined 
express precisely unary queries mso 
translation region algebra considered consens milo attribute grammars drastically improves complexity optimization forest concatenation unranked trees 
problems 
refer interested reader detailed overview pattern languages tree automata 
tree walking automata focus computation tree walking 
known paradigm formal language theory studied context attribute grammars tree transformations 
paradigm materialized xml research various ways 
instance tree walking provided caterpillar expressions klein wood 
milo suciu vianu defined tree walking tree transducer model pebbles model xml transformations 
vianu considered automata context xml streaming 
argued neven stripped xslt essentially tree walking tree transducer registers look ahead 
embark issue registers look ahead section 
section consider ordinary tree walking automata 
admittedly application tree walking xml direct unranked tree automata 
hope thorough understanding tree walking paradigm leads insight operation expressiveness languages xslt 
definition give definition tree walking automata recall way deterministic finite state machines strings devices walk directions string changing state direction depending current state current symbol current position left right delimiter 
automaton accepts final state reached point 
analogously tree walking automaton finite state device walking tree 
control node input tree 
label node state position tree child root leaf automaton changes state moves neighboring nodes parent child left right sibling 
automaton accepts tree enters final state 
simplify definition way automata strings usually delimits strings start symbols respectively 
trees extra symbols 
instance tree bcd tree definition 
twa tuple finite set states initial state final state finite set rules form stay intuitively transitions applied state node labeled 
changes state moves direction stay mean go left sibling go parent go right sibling go child stay put respectively 
assume transition possible final state 
formally configuration tree tuple current state dom current node 
define transition relation define partial move function stay follows 
node stay equals left sibling right sibling parent child respectively exist 
define step transition relation follows transition lab denote transitive closure 
accepts input tree 
say deterministic rule denote class deterministic 
illustrate definition example 
example 
construct automaton accepting tree defined xpath expression 
xpath xml pattern language employed instance xslt 
get specifics syntax 
pattern selects trees labeled node labeled descendant 
twa root give rules explaining operation automaton 
nondeterministically searches transitions stay stay 
moves tree finds suitable 
moves search root 
walks root accepts root root stay 
expressiveness research focused ranked unranked ones defined 
ranked defined just unranked ones 
di erence fixed trees rank considered inputs 
particular tree rank node fewer children 
unranked tree automata transfer results ranked unranked case 
enc dec encoding decoding discussed section 
proposition 
unranked twa ranked twa enc 
size linear size 
ranked twa unranked twa dec 
size linear size follows results language accepted ranked regular 
proposition proposition follows unranked define regular tree languages 
essentially known 
basic questions remain unanswered 
capture regular tree languages 

expressive 

closed complement 
believed answer questions negative 
proposition proposition shown negative answer class unranked tree implies negative answer class ranked trees converse obvious 
negative answer question proved ranked visit subtree mild generalization thereof 
engelfriet supply tree languages possible candidates separate 
showed domains partial attributed tree transducers correspond tree walking automata universal acceptance mode 
lower bounds expressiveness obtained 
denote class alternating 
proposition useful characterization regular unranked tree languages 
immediately follows result fact proposition holds alternation 
proposition 
unranked tree language accepted regular 
algorithmic toolbox 
upper bound non circularity test extended attribute grammars obtained reduction emptiness test 
theorem 
emptiness containment equivalence problem exptime complete 
finish robustness 
striking di erence ranked unranked tree automata check label parent current node remembering child number state moving moving back correct child 
seemingly unranked automata achieve child number unbounded 
reason ranked evaluate boolean circuits fixed fan unranked probably evaluate boolean circuits unbounded fan 
proof solve question 
solution move unranked twa depend label current node label parent 
question remains right model unranked trees 
logical characterization section logical characterization ranked 
add unary predicate depth vocabulary trees 
trees depth contain vertices depth multiple characterize tree walking automata transitive closure logic formulas tc logic special form 
refer reader unfamiliar tc logic 
consider tc formulas normal form refrain defining tc logic full generality 
tc formula normal form expression form tc fo formula may predicate depth addition semantics defined follows tree tc pair transitive closure relation 
deterministic transitive closure logic formulas dtc analogously defined normal form capture deterministic tree walking automata 
particular dtc pair transitive closure relation 
expresses disregard vertices multiple successors 
example consider formula leaf 
leaf shorthand expressing leaf 
trees dtc path containing root leaf non leaf vertex path precisely labeled child 
contrast tc path root leaf carrying 
theorem 
ranked tree language accepted nondeterministic automaton definable tc formula normal form 

ranked tree language accepted deterministic tree walking automaton definable dtc formula normal form 
simulation tc logic easy extension proof characterized way string automata means tc formulas normal form 
direction holds unranked trees 
show twa evaluate tc formula normal form theorem see 
result intuitively says graphs bounded degree fo sentence holds depends number pairwise disjoint spheres isomorphism type fixed radius 
furthermore exact number relevant certain fixed threshold depending formula 
unranked trees bounded degree unclear result extended unranked trees 
result implies lower bound tc formulas normal form lower bound non deterministic tree walking automata 
open depth predicates necessary 
unfortunately proving lower bounds mentioned logics easier original problem ehrenfeucht games dtc tc quite involved 
engelfriet showed tree walking automata pebbles correspond exactly transitive closure logic restrictions 
allowing pebbles simulate nested tc operators 
tree walking data values previous sections primarily focused tree structure xml documents 
abstraction ignores important aspect xml presence data values attached leaves trees attributes comparison tests performed xml queries 
data values big di erence cases di erence decidability undecidability see 
connection logic automata proved fruitful foundational xml research important extend automata logic formalisms trees data values 
trees logic revisited take radical view dealing text 
move text occurring leaves attributes 
instance xml document represented 
approach leads awkward xml documents remains valid representation 
fig 

example xml document text moved attributes 
add attributes trees 
assume infinite domain 
finite set attributes definition 
attributed tree pair dom function defining attribute nodes course real xml documents usually element types set attributes 
obviously just convenience restriction 
xml documents contain elements mixed content 
instance consider xml document problem 
special text label attribute text represent document tree 
say tree mean attributed tree 
logics extended vocabulary val 
val function dom logic hand logics accompanying metafinite structures gradel gurevich 
atomic formula form val val val formulas obvious semantics 
fo obtained closing atomic formulas boolean connectives order quantification dom 
example consider fo sentence val val val expressing value attribute equal attribute 
stress quantification possible 
get mso extending fo set quantification dom 
emphasize di erence logics previous section denote logics fo mso respectively 
tree walking automata extended registers deal data values tree walking automaton equipped finite number registers 
automaton store data values registers check attribute value current node equal content register 
essentially model francez studied string automata infinite alphabets 
way xslt deals data values 
xslt counterpart registers variables passed templates 
assume attribute delimiter contains says descendant definition 
register tuple finite set states initial state final state 
initial register assignment finite set rules form 
boolean combination atomic formulas form 
define 
intuitively transitions applied state node carrying satisfies assignment interpreting content register value attribute 
right hand side stay intuitively means change state move direction 
intuitively means change state replace content register value attribute assume transition possible final state 
assume automaton moves input tree 
tree configuration tuple dom 
current node current state register content 
initial configuration 
configuration accepting 
rule applies configuration lab holds interpretation induced addition interpreted val 
assume automata deterministic appear left hand sides configuration apply 
define step transition relation follows transition applies form form val denote transitive closure 
accepts input tree accepting configuration 
example 
consider tree walking automaton checks node attribute root 
assume 
automaton starts putting value attribute root register subsequently depth traversal tree accepts encounters node value register 
define qf register automaton qf contains rules true true true stay true true true true true stay expressiveness expressiveness register behaves strange way hand compute properties mso hand compute fo definable properties 
bit awkward database theory order logic generally accepted minimum expressiveness query language mso due correspondence various automata stands regularity robustness 
interestingly proof communication complexity 
technique inspired proof abiteboul van den bussche separating temporal query languages etl ts fo 
particular show query etl special sort databases evaluated communication protocol constant number messages case ts fo 
simulate register need powerful protocol number messages depends number di erent data values input idea essentially 
sketch argument 
theorem 

mso define properties computable register 
register compute properties definable fo proof 
sketch separate register fo strings opposed trees 
communication complexity input string divided pre determined manner parties generally referred ii send messages protocol 
language accepted protocol string parties decide execution protocol string belongs language 
parties unlimited computation power part string 
protocol restricts way parties communicate typically restricting form number messages 
consider strings form encode sets sets symbols suitable way 
instance string attribute values symbols respectively encodes set 
language represent set sets definable fo show language accepted register note automaton working strings form simulated protocol way ii party simulates automaton computation tries cross delimiter right 
point sends state data values 
currently registers 
ii gets full information configuration automaton position symbol fixed 
ii sends turn current configuration process continues parties detects final state 
kind protocol simulate behavior 
need message configuration 
suppose restrict di erent data values strings di erent messages needed 
number registers state set 
call sequence messages dialogue 
need consider dialogues length message sent direction 
di erent dialogues input strings consisting di erent symbols 
value exponential sets sets di erent symbols 
large di erent strings accepted protocol dialogue 
means accepted 
protocol define implies register accepts neven schwentick vianu consider register automata trees strings 
separation results hold strings definitely hold trees 
addition authors studied automata various control mechanisms non determinism alternation way twoway 
fact communication complexity technique sketched extended show alternating register automata compute fo definable properties 
alternative registers authors consider pebbles dealing data values 
automaton equipped finite number pebbles restricted stack discipline 
pebble lifted pebble placed 
automaton test equality comparing attribute values symbols 
turns pebble automata behave better register automata expressiveness lies fo mso strong weak 
subcomputations relational storage consider extension register model closer xslt 
precise extended ways registers store arbitrary relations opposed single values ii subcomputations started 
transition rule form fo formula relational storage 
instance relational storage contains set formula transition applied current symbol current state contains value 
right hand side determine kinds actions 
move direction state 
change relational storage state fo formula relational storage attribute values current node number register 
intended meaning content register replaced relation defined 
subcomputation atp states number register fo formula tree extended predicates 
logic fo functions abstraction xpath 
current node intuitively register replaced result atp starts subcomputations nodes 
dom computations started state current relational store final state contents register returned content register union results subcomputations 
main thread resumes computation define model formally illustrate means example 
example 
assume 
define automaton accepts tree labeled node leaf descendants attribute 
leaf descendants mean nodes labeled parents nodes 
define register automaton register set 

consists rules true atp true stay true atp stay true true xx 
automaton works follows subcomputation initiated selects labeled descendants root subcomputations return state reached tree accepted labeled node selects leaves recall delimited trees returned set singleton subcomputation accepts subcomputation gets stuck main computation rejects sure leaf returns value attribute computations initiated accept leaf attribute 
note formula defines set containing value attribute current node 
model quite powerful additions su ce capture fo theorem 
automata extended look ahead relational storage capture fo proof theorem communication complexity 
protocol longer memory case proof theorem parties need stack process incoming messages 
weakness register automata leave node usually relocate node 
strong contrast fixed attribute node value attribute unique nodes tree unique ids available show various restrictions capture natural complexity classes theorem 
presence unique ids 
extended single valued registers capture logspace 
extended single valued registers subcomputations capture ptime 
extended relational storage capture pspace 
extended relational storage subcomputations capture exptime 
characterizations obtained mentioned standard complexity classes turing machine model directly operating attributed trees 
shown standard model recognize class tree languages 
proofs results combinations known techniques complexity finite model theory formal languages provide quite complete picture expressiveness query languages tree walking 
surprising extended single valued registers subcomputations abstraction xslt defined captures fact precisely ptime 
discussion considered automata models regained interest advent xml 
main focus connection logic questions motivated xml 
hope convinced reader xml poses new challenges automata logic connection 
fact application automata theory xml research just started 
unranked tree automata applications apart klein murata wood systematic study undertaken 
especially development algorithmic properties deserves attention 
known tree walking automata techniques available 
solving questions section interesting starting point 
questions open quite time appear di cult 
connection tc logic theorem learns twa nta problem easier instance open question full unary tc logic mso trees equally expressive 
mystery way addition pebbles formalism increases expressiveness 
core xpath instance easily expressed pebbles 
unclear needed needed 
tree walking automata registers serve abstraction transformation languages xslt 
characterizing expressiveness meaningful 
algorithmic toolbox register automata worthless decision problems undecidable 
context streaming typechecking presence interesting find expressive formalism emptiness remain decidable 
results obtained communication complexity 
illustrated proof theorem proof consists parts showing formalism simulated protocol protocol express property 
case step straightforward involved especially 
interesting come general criteria simulation lemma derived automatically proving simulation lemma hand new model 
acknowledgment thomas schwentick comments previous version 

abiteboul 
semistructured data practice theory 
proc 
th ieee symposium logic computer science lics pages 

abiteboul buneman suciu 
data web relations semistructured data xml 
morgan kaufmann 

abiteboul van den bussche 
temporal connectives versus explicit timestamps query temporal databases 
journal computer system sciences 

aho ullman 
translations context free grammar 
inform 
control 

alon milo neven suciu vianu 
xml data values typechecking revisited 
proc 
th symposium principles database systems pods pages 

neven 
formal model expressive fragment xslt 
information systems 

engelfriet 
comparison tree transductions defined monadic second order logic attribute grammars 
journal computer system sciences 

klein murata wood 
regular tree regular hedge languages unranked alphabets version april 
technical report hongkong university science technology 

klein wood 
caterpillars context specification technique 
markup languages 

clark 
xml path language xpath 
www org tr xpath 

codd 
relational model large shared 
communications acm 

comon dauchet gilleron tison 
tree automata techniques applications 
available www grappa univ lille fr tata 

consens milo 
algebras querying text regions expressive power optimization 
journal computer system sciences 

world wide web consortium 
extensible markup language xml 
www 
org xml 

world wide web consortium 
xml schema 
www org xml schema 

jourdan 
attribute grammars definition systems bibliography volume lecture notes computer science 
springer 


tree acceptors applications 
journal computer system sciences 


ebbinghaus flum 
finite model theory 
springer 

engelfriet 
tree walking pebble automata 
maurer rozenberg editors forever contributions theoretical computer science honor salomaa pages 
springer verlag 

engelfriet 
private communication 


engelfriet 
van best 
trips trees 
acta cybernetica 

frick 
complexity order monadic second order logic revisited 
proc 
th ieee symposium logic computer science lics 


domains partial attributed tree transducers 
information processing letters 


tree languages 
rozenberg salomaa editors handbook formal languages volume chapter pages 
springer 

gottlob koch 
monadic datalog power languages web information extraction 
proc 
th symposium principles database systems pods pages 
acm press 

gradel gurevich 
metafinite model theory 
information computation 

hosoya pierce 
regular expression pattern matching xml 
proceedings th symposium principles programming languages popl pages 
acm press 


communication complexity parallel computing 
texts theoretical computer science eatcs series 
springer verlag 

immerman 
descriptive complexity 
springer 

francez 
finite memory automata 
theoretical computer science 

lee mani murata 
reasoning xml schema languages formal language theor 
technical report ibm almaden research center 
log 

martens neven 
typechecking top uniform unranked tree transducers 
manuscript 

miklau suciu 
containment equivalence xpath fragment 
proc 
th symposium principles database systems pods pages 

milo suciu vianu 
type checking xml transformers 
proceedings nineteenth acm symposium principles database systems pages 
acm press 

murata 
data model document transformation assembly 
munson nicholas wood editors proceedings workshop principles digital document processing volume lecture notes computer science pages 

murata 
extended path expressions xml 
proc 
th symposium principles database systems pods pages 
acm press 

neumann seidl 
locating matches tree patterns forests 
arvind ramanujam editors foundations software technology theoretical computer science lecture notes computer science pages 
springer 

neven 
extensions attribute grammars structured document queries 
connor mendelzon editors research issues structured semistructured database programming dbpl volume lecture notes computer science pages 
springer 

neven 
power walking querying tree structured data 
proc 
th symposium principles database systems pods pages 
acm press 

neven schwentick 
expressive cient pattern languages treestructured data 
proc 
th symposium principles database systems pods pages 

neven schwentick 
power tree walking automata 
montanari welzl editors international colloquium automata languages programming icalp volume lecture notes computer science pages 
springer 

neven schwentick 
automata logic pattern languages tree structured data 
unpublished 

neven schwentick 
query automata finite trees 
theoretical computer science 

neven schwentick vianu 
regular languages infinite alphabets 
sgall editors mathematical foundations computer science mfcs volume lecture notes computer science pages 
springer 

neven van den bussche 
expressiveness structured document query languages attribute grammars 
journal acm 

pair 
definition etude des 
information control 

papakonstantinou vianu 
dtd inference views xml data 
proc 
th symposium principles database systems pods pages 
acm press 


logische 
doctor thesis institut ur informatik 
math universit kiel 

ray 
learning xml 
reilly 

schwentick 
diving trees 
proceedings th mathematical foundations computer science mfcs pages 

vianu 
validating streaming xml documents 
proc 
th symposium principles database systems pods pages 
acm press 

seidl 
deciding equivalence finite tree automata 
siam journal computing 


alternating tree automata 
theoretical computer science 

suciu 
typechecking semistructured data 
proceedings th workshop data bases programming languages dbpl 

takahashi 
generalizations regular sets application study context free languages 
information control 

thatcher wright 
generalized finite automata theory application decision problem second order logic 
mathematical systems theory 

thomas 
languages automata logic 
rozenberg salomaa editors handbook formal languages volume chapter pages 
springer 

van den bussche 
applications alfred tarski ideas database theory 
fribourg editor computer science logic csl volume lecture notes computer science pages 
springer 

vardi 
automata theory database theoreticians 
proceedings eighth acm symposium principles database systems pages 
acm press 

vianu 
databases finite model theory 
immerman ph 
kolaitis editors descriptive complexity finite models volume ams dimacs series discrete mathematics theoretical computer science pages 
american mathematical society 

vianu 
web odyssey codd xml 
proc 
th symposium principles database systems pods pages 
