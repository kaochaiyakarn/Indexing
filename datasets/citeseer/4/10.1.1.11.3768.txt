integrated experimental environment distributed systems networks brian white jay lepreau leigh stoller robert ricci mac mike hibler chad barb school computing university utah www flux utah edu www netbed org experimental environments traditionally support network distributed systems research network emulators network simulators live networks 
continued multiple approaches highlights value inadequacy 
netbed descendant emulab provides experimentation facility integrates approaches allowing researchers configure access networks composed emulated simulated wide area nodes links 
netbed primary goals ease control realism achieved consistent virtualization abstraction 
providing operating system services resource allocation scheduling virtualizing heterogeneous resources netbed acts virtual machine network experimentation 
presents netbed design implementation demonstrates ability improve experimental automation efficiency 
turn lead new methods experimentation including automated parameter space studies emulation straightforward comparisons simulated emulated wide area scenarios 
diverse requirements network distributed systems research met single experimental environment 
competing approaches remain popular covers different point space defined levels ease control realism 
discrete event simulation live network experimentation represent extremes 
simulation presents controlled repeatable environment 
level abstraction may high capture low level effects impact interrupts heavy load 
live networks achieve realism repeatability ability modify monitor internal router behavior 
emulation hybrid approach subjects real applications protocols operating systems synthetic network environment 
single node wan emulators dummynet introduce artificial delays losses bandwidth constraints controlled manner require tedious manual configuration 
netbed complements existing experimental environments 
spans simulation emulation live network experimentation integrating common framework 
integration brings control ease usually associated simulation emulation live network experimentation sacrificing realism 
gives users individual benefits simulation emulation live network experimentation configured controlled consistent manner 
integration facilitates interaction comparison validation domains 
netbed software system provides time space shared platform research education development distributed systems networks 
leverages local nodes allocated clusters temporarily dedicated individual users emulation refers emulated nodes 
netbed employs geographically distributed nodes simultaneously shared users frequently refers resources wide area nodes 
researchers access resources specifying virtual topology graphically ns script causing netbed automatically configure physical topology 
experiment defined configuration run time dynamics traffic generation specified general purpose ns interface 
realizing virtual topology netbed virtualizes host names ip addresses links nodes 
virtual nodes may instantiated large set local nodes smaller set distributed nodes ns simulation 
virtual links may map directly links may matched similar wide area links may emulated interposing dummynet nodes regulate bandwidth latency loss queuing behavior 
netbed framework provides integrated abstractions services name spaces common environments mapping domain specific mechanisms internal names 
netbed operating services include node link allocation naming scheduling idle experiment preemption experiment swapping disk image loading 
services analogy experiment unix process natural 
metaphor illustrates life cycle experiment netbed role automating controlling procedure 
ns specification serves program text netbed compiles synthesize hardware realization virtual topology 
specification parsed intermediate representation stored database allocated loaded hardware 
experiment execution netbed provides interfaces tools experiment control interaction 
netbed may preempt swap experiment 
netbed gives experimenters run time control node link characteristics ability interpose traffic shaping monitoring nodes view system virtual machine heterogeneous node link topology allocation control 
traditional virtual machines target architecture instruction set netbed abstracts network 
analogy merely cosmetic experiments derive key benefits netbed design automation time space efficiency 
experiment creation involves large number steps including example configuring network interfaces routing tables installing operating systems exporting file trees administering user accounts 
netbed removes tedium manual configuration automation 
netbed designed efficient physical resources enhance experimenter productivity 
manages shared physical resources provide greatest possible utilization ensuring inter experiment isolation 
netbed performs experiment creation termination minutes enabling interactive style 
attention efficiency disk reloading resource allocation experiment creation maximizes time spent executing experiments minimizes effort expended configuring 
contributions introduces notion virtual machine controlled network experimentation shows integrates heterogeneous resources 
outlines key obstacles virtual machine efficiency overcome 
shows netbed automation efficiency services inspire qualitatively new methods experimentation 
provides data validating netbed emulation capabilities 
section continues outlining heterogeneous resources managed netbed 
section outlines life cycle experiment virtual machine analogy describe system design section shows benefits approach 
section details challenges overcome netbed experiment services including mapping virtual physical resources disk loading efficiency 
section validates emulation facilities 
section illustrates unique experimental techniques facilitated netbed 
related addressed section section concludes 
resources original name emulab suggests netbed conceived emulation platform 
flexible design evolved support diverse set physical node link types 
resources virtualized sense may allocated controlled largely independently physical realization 
local area resources netbed software currently controls clusters university utah comprised pcs university kentucky containing pcs 
sites configured nearly identical fashion 
nodes function edge node traffic generator router 
machine mb ethernet interfaces dedicated control data acquisition network arbitrary experiments 
node local memory disk provide ample room computation logging monitoring data 
local nodes connected high switches function programmable patch panel 
support arbitrary isolated topologies provide security netbed users employ virtual lans 
switch technology restricts traffic subnet defined members 
verified empirically switches provide inter performance isolation face traffic control operations creation deletion modification 
netbed local nodes wealth available bandwidth configured switched lan topologies 
coupled rapid automated configuration operating systems netbed attractive platform kernel development research networks 
root privileges remotely accessible consoles remote power cycling help kernel development convenient 
emulated resources netbed uses dummynet emulate wide area links local area environment 
dummynet node automatically inserted physical nodes enforces queue bandwidth limitations introducing delays packet loss 
dummynet nodes act ethernet bridges transparent experimental traffic 
distributed resources netbed integrates mit owned testbed nodes ron research nodes contributed organizations run special cd unix configuration 
resources today provide netbed approximately nodes different sites world including nodes connected internet dsl cable modems 
nodes valuable experimenters performing internet measurement require characteristics live network 
experimenters may request random set nodes specific nodes nodes having specific class network connection cable modem nodes connected specified latencies bandwidths loss rates 
case netbed provides best effort mapping user specified virtual topology physical distributed nodes 
distributed nodes support netbed key features including account establishment automated traffic generation subject particular policies mechanisms 
example distributed nodes typically network interface physically separate control network 
due scarcity policy limitation mechanism distributed nodes currently shared multiple experiments may node simultaneously 
netbed provides isolation experiments freebsd jail mechanism provides primitive form virtual machine restricts root privileges 
modifications jail provide access raw sockets preventing processes spoofing ip addresses 
multiplexing supported providing currently fixed number virtual machines node 
extending mechanism provide fair sharing cpu memory network resources subject 
netbed provides flexibility specifying interconnections distributed nodes 
default nodes retain full access internet 
links specified nodes netbed sets ip tunnels distributed nodes private ip addresses 
conjunction netbed automated routing setup creates overlay network configured experimenter specifications 
tunnels allow transparent communication distributed nodes experimental interfaces local nodes networks contain internet emulated links 
distributed nodes may treated local nodes respect traffic generation routes ip addresses 
simulated resources netbed integrates simulation ns emulation facility nse allowing simulated nodes links traffic interact application traffic 
simulation abstracts detail provide scalability limits physical resources virtual simulated nodes multiplexed physical node 
control switch router switch mgmt web db snmp power serial links pc pc nse nse pc virtual pc virtual pc virtual pc pc pc pc pc distributed nodes nse pc programmable internet netbed architecture netbed deployment ns brings wealth simulation infrastructure emulated distributed experiments including ns rich diverse protocol suite varied statistical models support wireless devices 
nse simulate large scale network emulation 
close interaction simulation live protocols presents opportunity validate ns abstractions 
planned extensions plans underway integrate additional virtual resource types constructing wan emulator intel ixp network processor provides improved features performance dummynet 
second plan control configure modelnet netbed existing interfaces 
experiment life cycle experiment netbed central operational entity 
represents network configuration including links node state including operating system images database entries including event sequences 
intended duration experiment ranges minutes days months years distributed nodes 
section follows life cycle experiment illustrate netbed operation develop role virtual machine network experimentation 
netbed virtual machine architected interacting state machines monitored state management daemon 
primary state machine represents experiment subsidiary state machines handle node allocation configuration disk reloading 
state daemon catches illegal tardy state transitions 
example node hangs rebooting state daemon times attempts alternate reboot mechanism 
approach copes reasonably reliability challenges large scale distributed systems composed unstable commodity hardware reliability needed 
accessing netbed minimize administrative overhead netbed employs hierarchical structure authorization new project leader faculty member senior student submits simple web form 
project approved netbed staff accountability ability authorize project members delegated project leader 
web interface serves universally accessible portal netbed experimenter may create terminate experiment view corresponding virtual topology configure node properties 
experiment creation experimenters may log directly allocated nodes depicted serves centralized point control 
node fileserver stores operating system images exports home project directories local nodes nfs distributed nodes sfs secure file system 
secure server critical systems including web server database switch management 
specification just program text concrete specification run time process ns script written tcl configures netbed experiment 
choice facilitates validation comparison ns specified topologies traffic generation events reproduced emulated wide area environment 
large community researchers familiar ns provides graceful transition simulation opportunity leverage existing scripts 
tcl general purpose programming language researcher empowered looping constructs conditionals arbitrary functions drive experiment configuration execution 
emulated nodes links enjoy full implementation transparency 
default links specified ns experiment file realized interposed dummynet nodes 
incorporate distributed nodes experimenter need specify appropriate node type 
example requests internet connected node specifying pc inet hardware type 
simulated topology embedded emulated topology wrapping standard ns syntax block netbed specific construct 
constant bit rate traffic flow identified standard ns syntax automatically instantiates traffic sources sinks tg tool set 
simulated ftp telnet flows rendered ns emulation facility nse 
mechanism injects traffic generated models tcplib telnet distribution live network 
cross traffic important studying protocol behavior face congestion 
netbed defines small set ns extensions including set ns new simulator create simulator source tb compat tcl add netbed commands ns static netbed computes routes set source ns node define new nodes set router ns node set dest ns node connect source router router dest ns duplex link source router mb ms red ns duplex link router dest mb ms droptail tb set node os source std set os local node tb set hardware dest pc inet request distributed node ns run run netbed ns file showing linear topology routing distributed node procedures configure node operating system specify hardware type 
procedures required netbed supplies default behavior absence 
stub library defines null procedures script may executed netbed ns 
program objects netbed specific ns extension provides rudimentary remote execution facility 
program object associated ns node script attaches arbitrary applications corresponding local node 
may independently controlled experiment execution 
program objects currently available distributed nodes finish securing distributed event system 
experimenters unfamiliar ns syntax may create topologies graphically java gui generates ns configuration file 
alternatively standard topology generator gt itm brite may generate ns script 
highlights primary benefits integration application tools intended experimental domain case simulation 
parsing traditional compiler separated front back ends interactions mediated intermediate representation 
aids portability front reused back ends supporting different hardware architectures 
netbed targets multiple heterogeneous physical resources simultaneously uses analogous split phase style compilation 
database serves shared repository front tcl ns parser resource specific back mechanisms 
single experiment may incorporate simulated emulated wide area links requiring excessive resource specific knowledge specification language front parser 
netbed parser recognizes subset ns relevant topology traffic generation 
written tcl operates overriding interposing standard ns procedures tcl primitives 
netbed executes experi ment configuration script context new definitions 
unrecognized ns commands output warning ns syntax configuring links traffic endpoints triggers overloaded procedures 
ns specified event generation performed time storing events database 
ns specified events static large limit number 
overloaded netbed specific procedures populate database stores information hardware users experiments 
database presents consistent abstraction heterogeneous resources higher layers netbed experimenters 
example front database representations distributed emulated nodes differ type tag 
database provides single name space experimental entities 
cases experimenters interact commands tools naming conventions regardless implementation 
example nodes type may host traffic generators despite fact traffic may flow links simulated ns emulated dummynet internet distributed nodes 
global resource allocation global resource allocation phase responsible binding abstractions created previous stages physical entities 
corresponds resource allocation performed back compilation name binding 
simplicity resources currently allocated demand reserved experimenters advance 
netbed uses general combinatorial optimization techniques perform resource allocation 
algorithms map target configuration stored database available physical resources 
mapping respects interconnections virtual topology including latency bandwidth loss rates 
explained sections separate algorithms local distributed nodes due differing constraints 
mapping program local nodes assign uses simulated annealing program uses genetic algorithm distributed resources 
output assign netbed reserves nodes links updates database resource mappings user supplied parameters 
experiment follow principle conservative resource allocation impractical experiments local nodes 
currently gbps inter switch bandwidth theoretically consumed single experiments preventing experiments mapping successfully 
traffic monitoring shown practice experiments rarely allocated inter switch bandwidth 
adopted policy reserving bottleneck links continuously monitoring high bandwidth 
far occurred 
occasionally need dynamically change node membership experiment 
happen example node fails replaced nodes longer needed change application demands 
netbed supports dynamic addition removal nodes active experiment graft added nodes lan connected topologies 
ensure consistent naming instantiations ns configuration netbed virtualizes ip addresses host names 
level indirection necessary configuration mapped physical resources re creation 
experimenters free manually assign ip addresses task left netbed 
netbed deterministically names nodes links consistency experiment creations 
node self configuration node configuration driven nodes entirely controlled state stored centrally database 
accomplished manner reminiscent unix dynamic linking loading 
traditional dynamic linker responsible establishing proper context process loading invoking 
netbed applies strategy node level achieve distributed self configuration includes obtaining host name loading disk image executing experiment startup scripts 
intelligent node state management crucial realizing robustness security goals 
nodes kept free persistent configuration state memory local disks considered volatile soft state 
allows experiment swapped resources reclaimed 
experimenters wish retain local disk modifications kernel revisions easily save image disk persistent store 
image stored database hard state 
experiment swapped netbed stores virtual topology host name general setup database 
swap hard state equivalent set physical resources brings node fully known state 
local nodes netbed ensures clean disk image installed node experiment swap creation 
parallel netbed attempts reboot nodes increasingly aggressive techniques 
issues reboot command ssh nodes fail boot timely manner sent secure authenticated ping death fail power cycled 
nodes boot intel network bootstrap protocol 
node bios con loads level kernel directed database 
level kernel fast disk image loader memory file system operating system typically larger second level bootstrap program 
second level loader contacts database determine step booting disk partition downloading oskit kernel 
multi phase approach permits flexible configuration customization os runs node 
system waits nodes come back 
node come timely manner attempt fails entire experiment swap fails 
improve resilience nodes obvious avenue 
entirely straightforward due topological constraints heterogeneous node types 
distributed nodes analogous disk loading mechanism 
time distributed node reboots cd rom negotiates necessary securely apply software updates reload disk network 
distributed node netbed instantiates new jail known initial state analogous known initial state local node disk loading booting 
addition jail powered terminating rebooted restarting 
node jail booted initialization sequence invokes node configuration script uses program called testbed master control client securely communicate daemon fronts database 
script node obtains initializes hostname experimental network ip addresses routes software packages user accounts configuration information 
local nodes nfs mount appropriate project tree users home directories fileserver wide area sfs 
experiment control traditional operating systems provide signals rudimentary form control local processes 
users start resume processes experimenters want start resume traffic generators network monitors 
support dynamic experiment control netbed uses event system extend notion signals sets nodes links 
facility closely mirrors style event schedulers network simulators 
just simulation allows experimenters manipulate link characteristics prescribed times experimenters dynamically change latencies bandwidths loss rates emulated links 
example bring link named link seconds experiment creation script specify ns link 
event system built top elvin publish subscribe system supports federation 
static events extracted database fed elvin experiment creation time 
dynamic events may created library interfaces command line tool 
current clients event system include traffic generators wan emulator control agent general remote execution facility netbed management programs 
event system extensively local nodes sparingly distributed nodes due current insecure deployment 
known solutions exist secure system exploring number including elvin security keys limit exchange subscriptions events specific producers consumers 
event system controls high level abstractions defined ns configuration file including links nodes program objects 
experimenters restricted high level interfaces tools netbed limit granularity control 
extent allowed local policy netbed provides lowlevel open access resources including root privileges local nodes jail restricted root privileges distributed nodes 
course privileges experimenters unwittingly corrupt resources 
netbed ability quickly restore experiment hard state database reload disk images easy recover accidents 
root access local nodes proven especially valued aspect control enables experiments requiring kernel modifications access raw sockets 
maintain security isolation face root access netbed prevents mac ip spoofing local nodes switch mechanisms 
privileged access mediated jail shared distributed nodes issues concern process jail access raw sockets bind assigned ip address 
gives experimenters access tools tcpdump traceroute exposing 
local nodes currently serial console lines power controllers multiple network interfaces dedicated experiment provide additional control mechanisms 
local node connected separate control network isolated networks experimental traffic 
separate network provides important features reliable control cleaner experimental data greater security 
program requires display mouse attached directly node netbed penalize remote experimenters minor exceptions remote users control nodes desk side machines 
exam ple node consoles virtualized experimenter need logged server physically hosts serial console lines 
consoles securely accessed unix windows machine local telnet session connected transparent application level ssl tunnel 
find kernel developers tried prefer remote netbed machines desk side test boxes 
preemption scheduling traditional operating systems preempt schedule processes better system throughput cpu utilization 
netbed manages shared community resources efficient utilization priority 
local nodes currently conservative allocation policy virtual node mapped separate physical node 
netbed preempt idle experiments local nodes reacquire physical resources satisfy runnable experiments 
distributed nodes typically run virtual node jail currently subject preemption 
policy idle distributed virtual node consumes single jail entire physical node additional os resource accounting mechanisms needed accurately detect idle virtual nodes 
local nodes idle despite assigned experiments 
determining idleness netbed difficult indicators standard clusters sufficiently sensitive activity may constitute simple infrequent network probes 
netbed idle detection system currently monitors metrics traffic experimental networks pseudo terminal devices cpu load averages 
avoid users manually confirm idle indications swapping experiments 
tuning idle detection heuristics netbed experienced false positives appears find truly idle experiments 
current swapping mechanism preserves hard state users experiments dependent soft state may manually disable preemption 
planned disk state saving netbed able safely preempt experiments 
experimenter interaction required netbed fully automate experimentation process scheduling batch experiments execute resources available 
batch processing allows experimenter iterate large problem space manual interaction 
helps accommodate large experiments may find sufficient resources low usage inconvenient times 
peak scheduling improves netbed utilization 
improving network experimentation netbed provides benefits emulation simulation wide area experimentation simple sum services 
netbed common set tools abstractions important practical benefits experimentation including automated efficient realization virtual topologies efficient resources time space sharing increased fault tolerance resource virtualization 
savings afforded automated mapping virtual topology physical devices removes significant experimentation barrier 
user experiments show learning task manually configuring node dumbbell network student significant linux system administration experience took hours accomplish netbed accomplished minutes 
factor improvement subsequent programmatic control links nodes encourage experiments previously time labor intensive consider 
efficient scarce expensive infrastructure important sophisticated testbed system markedly improve utilization 
example analysis months netbed historical logs gave quantitative estimates value time sharing swapping idle experiments space sharing isolating multiple active experiments 
behavior users facility management change features estimate revealing 
netbed ability time share local utah nodes testbed nodes required provide equivalent service 
similarly years required 
order magnitude improvements 
netbed virtualizes node names ip addresses equivalent nodes interchangeably 
example experiment swapped need execute set physical nodes 
nodes exhibiting properties interconnection characteristics suitable candidates 
flexibility allocate equivalence class provides fault tolerance 
node link fails experimenter need wait node link partition available may re map experiment equivalent set machines 
feature valuable node link failures anticipated large scale clusters wide area networks 
key services evaluation ns popularity power result flexibility gives experimenters efficiently change parameters network scenarios 
netbed aims bring similar level control ease emulated number nodes steps waiting nodes boot issuing node reboots resource reservation resource mapping time create experiment disk loading 
times shown cumulative difference adjacent lines represents time step 
wide area experimentation automation efficiency 
section describe main challenges netbed efficiency evaluate netbed meets performance challenges 
challenges include experiment creation swapping disk loading mapping virtual resources local distributed physical resources multiplexing simulated nodes 
experiment creation swapping subsection quantifies time spent experiment creation comprised parsing global resource allocation local self configuration described section 
results apply local resources distributed nodes typically shared resources netbed routinely reboot re install disk images experiment creation 
shown figures disk loading node rebooting dominate experiment creation time 
configuration distributed nodes lightweight examined 
top line shows total time create typical experiments 
duration experiment creation essentially equal swap duration time expenses unique experiment creation insignificant compared cost mechanisms shared node rebooting 
single node experiment takes seconds 
majority time spent rebooting node waiting finish booting 
experiment sizes grow creation time remains linear marginal cost node approximately seconds 
process netbed exploits parallelism possible 
example takes non negligible time setup contribute creation time occurs parallel longer node reboot stage 
breaks costs timeconsuming stages experiment creation order steps occur 
bottom line represents time number nodes experiment creation disk loading experiment creation disk loading time create experiment disk loading 
time disk loading shown comparison note axis scale different 
taken assign map physical resources 
line reservation resources turns dominated reassigning serial console lines logs 
line issuing reboots nodes 
rebooted parallel second pause nodes stress network resources lose control related udp packets typically manifested nodes failing boot 
slowest step netbed waits nodes come back 
pc bios biggest culprit average time spent bios seconds nodes experiment 
netbed nodes spend seconds bios order achieve consistency large scales limited experiments numerous nodes 
shows additional expense automatic disk loading performed experimenter requests custom disk image 
default dual boot freebsd linux disk images prove sufficient experimenters majority experiments incur cost 
added time comes transferring writing new disk image significant amount comes rebooting node twice enter disk loader newly loaded operating system 
absolute time experiment creation higher loading disks similarly scalable marginal cost node comparable 
mapping local resources netbed local assignment phase realize user specified node types features link characteristics topologies respect limitations available bandwidth 
netbed ensures physical hardware support emulated traffic flows roms udp fixed timeout change forced problem 
nodes switches mbit links virtual topology trivial node partitioning problem introducing bottlenecks accompanying experimental artifacts 
map desired virtual topology physical topology shown right netbed pick physical realization groups switch switch configuration attempt send excess traffic inter switch link 
testbed mapping problem problem trivial node example general case np hard reduction multiway separator problem minimum degree graph partitioning problem 
conjunction aggressive abstraction techniques reduce search space assign uses simulated annealing randomized heuristic algorithm map virtual nodes links local nodes 
addition satisfying individual experiment requirements algorithm attempts minimize required inter switch bandwidth number involved switches order promote efficient utilization cluster 
netbed kept detailed logs experiment submitted june 
analyzed months data covering experiments 
shows reliable indicator difficulty mapping problem measured runtime assign number virtual nodes user requests 
added general notion resource equivalence classes assign december strikingly bimodal distribution demonstrates resulting improvements 
grouping nodes equivalence classes greatly reduces search space assign need search small number equivalence classes large number nodes 
new version takes seconds largest topologies seconds experiments 
mapping distributed resources distributed case different constraints 
underlying physical nodes treated fully connected internet 
second distributed nodes fairly characterized nature mile link cable modem commodity internet internet 
netbed assigns corresponding intuitive subtypes distributed nodes pc cable pc inet 
typing lets experimenters request virtual number virtual nodes old assign new assign performance scaling assign nodes type subtype specify particular topology connecting 
netbed generic resource assignment code identical local distributed resources handles common situation 
experimenters may want precisely matched resources particular virtual topology 
netbed allows request virtual topology wide area links specific latency loss bandwidth characteristics 
may assign weights attributes perceived importance 
highly configurable local links netbed cluster connections distributed nodes traverse internet uncontrollable links 
challenge map virtual nodes physical resources requested links best match actual characteristics corresponding internode internet paths 
netbed database updated frequently measured latency loss nxn paths occasionally updated bandwidth measurements 
mapping variation np hard quadratic assignment problem 
provide efficient best effort solution netbed implemented genetic algorithm 
possible solutions scored closely match desired link characteristics 
solution normalized sum errors squared latency loss rate bandwidth 
geometric mean errors results score 
evolves answer propagating solutions error 
conducted experiments test performance 
mapped wide variety virtual topologies set physical distributed nodes 
varied number requested nodes number requested links examining pairs set cross section experiment complexities 
pairs ran hundreds tests automatically generated number edges nodes nodes nodes nodes nodes nodes nodes average time find solution variety experimental topology complexities node edge counts 
gies 
shows average time find solution complexity 
interestingly mappings nodes faster mappings nodes 
results show modestly sized experiments algorithm contribute noticeably total experiment setup time prohibitively slow experiments involving available nodes 
second experiment explored scalability mapping range virtual topologies synthetic set distributed nodes 
experiments requesting virtual nodes sparse topologies mapped minutes 
larger denser topologies nodes approximately edges node mapping time ranged minutes hours 
expect improve results order magnitude techniques stringent clever termination conditions standard optimization techniques particular parallelizing algorithm practical shared memory multiprocessor cluster 
expect major additional improvement come binning nodes links groups similar characteristics dramatically reducing search space 
disk reloading important feature testbed control ability reload contents node local disks automatically 
ensures node integrity allows custom os configurations 
common approaches achieving goal load complete disk images file system incrementally synchronize target hierarchy copy rsync unison 
reasons preferring disk imaging 
efficient terms network bandwidth images synchronization approach slower 
rsync takes longer compare file timestamps typical image inodes mb data netbed disk loader takes copy allocated blocks 
comparing hashes file contents takes longer 
approaches rely solely file timestamps security reasons falsified timestamps allow modified files corrupt experiment 
approaches working file system corrupt target file systems install custom os unknown file systems 
bulk disk imaging scalable multicast approaches 
third approach content hashes blocks lbfs may worth investigating 
policy policy disk reloading presents tension latency typical experiment creation netbed throughput netbed system complexity node robustness experiments security 
policies evolved time driven tools pressure resources experience 
node new experiment requires clean disk 
disk reloading remains timeconsuming aspect experiment creation swap reduced seconds 
netbed current policy reloads node disk default image containing freebsd linux 
works users request oses sufficient free nodes disks reloaded background immediately available swap 
troubling effect occurs common case single experimenter creating tearing similar experiments quick succession frequently happens batch queue 
nodes available typically wasted minutes reloading time user requests similar number nodes experiment 
avoid anomaly currently pace reloading freed nodes reloading 
security reasons allow un reloaded node assigned experiment project node previous experiment 
approach robustness vulnerabilities disk soft state reinitialized may changed previous experiment rare 
users specify alternate disk image partition 
case background disk reloading wasted default image overwritten user custom 
automated analysis historical ongoing experiment creation swap patterns promising way attack challenge 
process procedure disk reloading follows initial steps described section bios loads initial bootstrap turn loads small memory file system freebsd system run disk loader client 
client contacts instance disk loader server downloading writing disk image 
completion node reboots newly installed image 
currently provide small set images containing various versions linux freebsd soon add windows xp 
custom disk images boot unsupported os load newer older version supported os install specialized version existing image multiple nodes 
netbed disk loader termed flying disk uses main techniques improve performance netbed loader took minutes image 
carefully overlaps block decompression device second uses domain specific compression algorithm uses file system information identify parts disk need saved compresses portions standard zlib compression 
third uses custom reliable multicast protocol deliver compressed images clients dramatically reducing required server bandwidth improving scalability 
result standard freebsd image requires seconds load single node 
scales nodes loaded simultaneously average seconds node nodes completing seconds 
performance compares favorably commercial tools initial tests able load standard linux image single node time taken norton ghost 
compression algorithm exploits fact disks contain large swap partitions empty file systems looks partition types file system freeblock lists find 
example standard freebsd images gb partition unused reduces mb image compression versus mb naive zlib compression 
addition saving network bandwidth transferring file file system specific compression enables decompression program optionally skip zero free file system blocks writing disk image 
turned important done standard compression implemented multicast mechanism writing disk bottleneck 
aforementioned freebsd disk image wrote mb actual decompressed data full gb 
scaling simulated resources experiments leverage simulation multiplex simulated nodes single physical node obtain greater scalability 
simulator interacts physical world nse keep pace real time 
ability dependent rate events need processed number nodes links se 
achieving greater scale improvements contributed fixes nse 
describe simple study achieves greater scale simulation 
instance nse simulated mb constant bit rate udp flows pairs nodes mb links ms latencies 
measure nse ability keep pace real time live traffic similar link instantiated inside nse simulation forward live tcp traffic physical netbed nodes rate mb 
mhz pc able scale number simulated flows simulated links simulated nodes maintaining full throughput live tcp connection 
additional simulated links throughput dropped 
measured nse tcp model simulated links performance dropped simulated links due higher event rate acknowledgment traffic return path 
complex hybrid topologies exposed unanticipated routing behavior 
incorrect routing arises nse simulation running host relies kernel routing tables 
solution required netbed global system perspective computes routes unix policy routing mechanisms control packet routes 
validation testing section validates netbed emulation capabilities micro macro benchmarks 
netbed complex evolving distributed system requires continual testing validation 
section outlines testing methodology intended ensure netbed continued accuracy 
wan emulator validation concerns shelf pcs general purpose operating system emulation machines able keep pace emulated links operating full speed second delays bandwidths packet loss rates emulated accurately 
emulation nodes netbed run freebsd kernel dummynet polling device drivers 
run kernels clock frequency hz allow delay granularity polling drivers reduce interrupt load provide improved precision 
capacity test generated streams udp round trip traffic nodes interposed emulator node 
emulator node showed adverse effects byte packets configuration easily saturated mb link 
byte packets nodes exchanged packets mb second connected directly versus packets delay packet observed dummynet adjusted dummynet observed nse adjusted nse ms size rtt stdev err rtt err rtt stdev err rtt err table accuracy dummynet nse delay maximum packet rate function packet size link delay 
ms measurement represents base overhead link 
adjusted rtt observed value minus base overhead 
bandwidth packet observed dummynet observed nse kbps size bw kbps err bw kbps err table accuracy dummynet nse bandwidth function link bandwidth packet size 
mb joined emulator node 
round trip measurements packet rates twice numbers reported 
bound accuracy precision emulation nodes performed series experiments representative range delay bandwidth packet loss rate values coupled high packet rates large small packets 
establishing maximum emulation rates large small packets ran series tests packet rates various delay bandwidth loss rate values measuring accuracy precision 
delay results table 
ms rows represent base overhead associated interposition emulation node 
results indicate experimentation confirmed emulation node overhead proportional packet size 
indicated observed column small packets show noticeable error delays ms large packets suffer delays ms 
tolerable wide area emulation improve accuracy adjusting delays compensate emulation overhead 
approximation scaled delays base overhead shown ms case 
adjusted results shown adjusted column accurate precise 
measure bandwidth limiting capabilities emulation node way traffic 
sender node sent packets emulation node consumer node calculated bandwidth 
results summa packet loss packet observed dummynet observed nse rate size loss rate err loss rate err table accuracy dummynet nse packet loss rate function link loss rate packet size 
table 
setup measured packet loss rates observed consumer 
results summarized table 
nse validation section uses methodology section validate observed latencies bandwidths loss rates induced ns emulation facility nse expected values 
nse runs freebsd kernel hz 
simulation configured nodes duplex link connecting 
physical node running nse interposes traffic generating physical nodes 
setup mimics section differing packet rate 
maximum stable packet rate packets second determined range packet rates link delays byte byte packets 
note actual capacity twice value due duplex link 
capacity performed experiments measure delay bandwidth loss rates representative values 
results summarized tables 
netbed integration nse mature support dummynet 
reflected larger relative error rates nse bandwidth loss rates respect dummynet 
integrating nse uncovered number problems solved continue gain experience nse expect situation improve 
live internet emulated tics stddev retransmits tics stddev retransmits fast slow table median tic rates packet retransmission counts achieved doom clients live internet emulated links 
numbers repeated nodes uniformly fast links intermixed slower links 
validation wide area network section validates netbed emulation mechanisms wide area network compares macrobenchmarks run set live internet nodes corresponding emulation 
example demonstrates transparency netbed heterogeneous resource specification ability provide best fit mapping requested wide area links live internet links 
distributed multiplayer game benchmark evaluates derivative doom network configurations making repeated runs 
scenarios synthetic clients communicate simple protocol 
target rate times second client sends unicast packets clients doing receiving packets prior period 
specified desired latency bandwidth links comprising fully connected graph clients 
configuration specified node type obtain wide area virtual nodes 
sense virtual means nodes may multiplexed single physical distributed node 
netbed distributed mapping service genetic algorithm described section best matching fit distributed nodes available virtual node slots 
second configuration link specification mapping live internet requested emulation local nodes links 
making switch entirely different experimental environment required changing line tcl loop set node type 
third fourth configurations analogous configurations requested substantially slower links 
results similar emulation live internet table 
key metrics doom tic rate packet retransmission 
tic rate example affected primarily latency represents rate progress system higher tic rate indicates faster progress 
packet retransmission rates governed bandwidth packet loss rate typically handful retransmitted packets trial 
wide area database replication researchers johns hopkins university studying group communication mechanisms wide area replication databases 
course research compared results wide area network obtained emulating observed delay bandwidth characteristics netbed 
application level measurements communication characteristics matched 
netbed offered advantages netbed control able study system wide effects caused varying network characteristics 
second able obtain set nodes consistent type 
testing netbed presents unusual testing challenges inherently coupled physical artifacts software state cloned 
full test regression runs impossible 
second mission provide public evaluation platform arbitrary programs 
mission simultaneously puts premium accuracy precision presenting fundamentally workload 
combined reasons mean netbed run continuously software radically evolves 
countered procedures 
created separate node netbed 
independent netbed instance important federation 
second integrated support testing netbed software suite 
addition normal operating mode software supports test mode operations normally affect hardware prevented 
allows duplicate installations netbed databases software including web interfaces daemons run tests software requiring exclusive access hardware 
incorporated full test mode reserve hardware master netbed database hardware conjunction duplicate database software 
enables test environment affect hardware ignored main netbed system 
feature possible database driven node specific redirection alternate daemons databases 
third developed comprehensive regression test suite run nightly optionally compile time 
currently systematically test software bugs 
monitor netbed accuracy adding additional point tests tests 
new experimental techniques section novel experimental opportunities possible netbed 
case study capitalizes netbed ns compatibility automate comparison emulated simulated results 
systems leveraged similar synergy simulation live experimentation required adoption nonstandard programming interface 
second case study shows importance automation 
tcp dynamics network simulators ns proven invaluable studying tcp behavioral dynamics 
abstractions way protocols simplified window ack behavior simulation validated empirically 
ironically potential bugs unspecified design parameters mean real implementations necessarily define valid behavior 
fortunately notion deviant behavior allows experimenter simultaneously gain confidence validity simulation correctness implementation 
case study leverages existing simulation experiments drive emulated scenarios 
approach existing corpus test scenarios amenable live experimentation 
corner cases known results applied regression tests real network stacks evaluate conformance 
ns maintainers run nightly regression tests 
netbed ability parse ns scripts means scripts validate ns behavior emulation 
tests may drive regression testing kernel implementation comparison implementations 
section presents preliminary results show feasibility automating process 
study low level fine grained tcp dynamics shows netbed flexibility modulating virtual network various scales 
framework executes test script ns parses output trace files determine generate traffic packets dropped links suffer losses 
configures network topology netbed event system passes list target drop packets correct dummynet node extended dummynet drop packets ordinal packet number 
event system framework starts program object record packet traces invokes traffic generators 
shows simple test ns validation suite drops single packet tcp new reno stream 
ns freebsd senders detect triple duplicate ack perform fast retransmit immediately 
behave similarly experiments freebsd achieves mean throughput bps standard deviation ns achieved bps 
contrast discovered freebsd retransmit triggered timer expiration greatly degrades throughput 
behavior freebsd caused uninitialized variable 
thorough application full suite tcp tests may uncover additional subtle bugs exceedingly difficult detect reproduce netbed finegrained control 
framework simulation allows experimenter effortlessly explore large parameter space 
netbed programmatic ns interface loop configuration space exercising distributed event system affect link characteristics experimenter similar power emulation 
kotz techniques evaluating file system computational grids 
performance highly dependent link bandwidth latency packet loss rate 
authors netbed batch system evaluate possible combination bandwidths latencies application parameter settings different configurations set nodes performing total different tests hours averaging minutes 
related efforts network emulation modelnet new network emulation system focused scalability 
uses small gigabit cluster running extended version dummynet able accurately emulate impressively large number moderate speed links 
core routes packets applications running additional edge nodes 
applications multiplexed edge nodes resource isolation 
modelnet shares netbed automatic configuration physical resources including tools take target topology specified high level format map modelnet mechanisms provides added capability optionally distilling topology trade accuracy scalability 
modelnet emphasizes scalability highperformance implementation emulated links 
contrasts emphasis complete accuracy conservative resource allocation exposure resources including link emulation mechanisms manipulation experimenters integration disparate techniques common framework 
modelnet core contributions complementary netbed intend integrate modelnet netbed 
combination bring netbed rich user interface ease modelnet adding scalable new mechanism available netbed common abstractions 
time seconds sequence number bytes time seconds time seconds new reno drop test ns freebsd freebsd different axis scale link emulation technique trace modulation observed characteristics wireless network 
interposing trace modulation dummynet bring wireless emulation netbed 
large number single node network emulation efforts 
include nist net rice support evaluating os optimizations 
category represented orchestra fault injection system 
exceptions single node emulators tailored specific research application 
network emulators planned built specific projects 
earliest largest particular configuration workstations usc study tcp vegas 
cite emulator effort bell labs apparently started build general emulator 
distributed network testbeds access vision originated idea set small testbeds distributed dozens sites 
access vision overlapped netbed shared emphasis completely replaceable node software operational model web accessible master control host 
access intend provide emulation facility intend offer integration 
recognize need identified real wide area links experimenters 
planetlab new effort plans provide researchers large number centrally administered geographically distributed pcs modest number clusters 
testbed currently initial phase arbitrary research provide transition avenue production deployment overlay network services 
netbed planetlab plans emphasize design apis services shared higher level services 
netbed distributed node support similar planned planetlab phase 
different primary goal planetlab notion service slice planetlab nodes similar netbed experiment netbed experiments arbitrary duration 
experiment richer contains flexible notions topology swapping hard state soft state optional shared persistent storage 
netbed planetlab current testbed management centralized 
plans emphasize management order facilitate research management plans emphasize federation order achieve greater scalability route overlay service deployment 
fact jointly exploring providing access planetlab netbed interface 
network simulators network simulators successfully isolate protocol dynamics may expense accuracy 
results simulators may valid indicators deployed performance 
brakmo peterson highlight differences simulated implemented tcp protocols 
kernel simulator avoids inaccuracies actual protocol code integrating click elements ns 
systems rely non standard protocol implementations 
cluster management virtualization cluster hardware software emulab classic netbed cluster emulation portion public production october relevant far network experimentation 
flexible efficient allocation hardware software resources shared persistent storage ability isolate virtual sub clusters emulab overlaps low level facilities computing utility efforts ibm hp utility data centers duke cluster demand 
netbed flexible interfaces needed mechanisms including dynamically adding removing nodes experiment support reconfiguration service level agreements sub cluster management systems 
acting virtual machine network experimentation netbed virtualizes integrates simulated emulated distributed nodes links 
rich user interface efficiency automation netbed enables qualitatively new kinds experimentation mechanisms 
ahn evaluation tcp vegas emulation experiment 
proc 
sigcomm pages aug 
allman caldwell ostermann 
ohio network emulator 
technical report tr ohio university computer science aug 
amir amir stanton 
practical wide area database replication 
technical report johns hopkins university 
andersen balakrishnan kaashoek morris 
resilient overlay networks 
proc 
th sosp oct 
anderson 
case access high performance communication computation environment wide area distributed systems networking applications research 
www cs washington edu homes tom access 
brakmo peterson 
experiences network simulation 
proc 
acm sigmetrics may 
collaborative advanced internet research network 
www isi edu 
dawson testing fault tolerant real time distributed systems protocol fault injection 
proc 
ftcs 
engler chen hallem chou chelf 
bugs deviant behavior general approach inferring errors systems code 
proc 
th sosp oct 
fall 
network emulation vint ns simulator 
proc 
ieee iscc 
floyd paxson 
difficulties simulating internet 
ieee acm transactions networking august 
ford back benson lepreau lin shivers 
flux oskit substrate os language research 
proc 
th sosp pages oct 
garey johnson 
computers intractability guide theory np completeness 
freeman 
symantec ghost 
www symantec com ghost 
heidemann effects detail wireless network simulation 
www isi edu papers heidemann html 

fast simulated re annealing 
journal mathematical computer modelling 
www com asa ps gz 
ixp 
www intel com design network products ixp htm 

kamp watson 
confining omnipotent root 
proc 
nd intl 
sane conference may 
acknowledgments chris dave andersen kirk webb discussion design code dave mit ron testbed nodes russ christensen alastair reid tim stack patel running experiments eric eide editing helped build emulab cluster john robert morris anonymous reviewers comments jim griffioen bring cluster ron results nicolas suggesting validating tcp dynamics mark clarifications freebsd tcp users 
grateful sponsors especially nsf ani ani cisco systems darpa air force 
maxemchuk schulzrinne 
bell laboratories network emulator 
technical report bl tm bell labs sept 
mazieres kaminsky kaashoek witchel 
separating key management file system security 
proc 
sosp december 
mckenney lee denny 
traffic generator software release notes 
sri international usc isi postel center experimental networking 
www postel org tg 
moore chase 
cluster demand 
technical report cs duke university dept computer science may 
muthitacharoen chen mazieres 
low bandwidth network file system 
proc 
th sosp oct 
network simulator ns validation tests 
www isi edu nsnam ns ns tests html 
neufeld jain grunwald 
bridging network simulation deployment 
proc 

nist internetworking technology group 
nist net home page 
www nist gov itg 
noble trace mobile network emulation 
proc 
sigcomm sept 
project 
www research ibm com 
kotz 
parallel file system computational grids 
proc 
ieee acm international symposium cluster computing grid may 
kotz 
emulab network testbed evaluate framework computational grids 
technical report dartmouth may 
ftp ftp cs dartmouth edu pub emulab tr pdf 
pai druschel zwaenepoel 
io lite unified buffering caching system 
proc 
rd osdi feb 
partition image 
www org 
peterson anderson culler roscoe 
blueprint introducing disruptive technology internet 
proc 
hotnets princeton nj oct 
execution environment specification version 
ftp download intel com ial wfm pdf 
technology 

www org 
rizzo 
dummynet forward error correction 
proc 
usenix annual technical conf june 
rsync 
rsync samba org 
segall arnold boot henderson phelps 
content routing elvin 
proc 
auug june 
tanese 
distributed genetic algorithm 
proc 
icga 
morgan kaufmann 
vint project 
ns manual apr 
www isi edu nsnam ns ns documentation html 
unison 
www cis upenn edu unison 
vahdat walsh mahadevan chase becker 
scalability accuracy largescale network emulator 
proc 
th osdi dec 
