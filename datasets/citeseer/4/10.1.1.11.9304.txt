general model authenticated data structures chip martel glen prem devanbu michael gertz april kwong stuart stubblebine department computer science stubblebine research labs university california davis ca usa cs ucdavis edu stuart stubblebine com technical report cse uc davis department computer science december query answers line databases easily corrupted hackers malicious database publishers 
important provide mechanisms allow clients trust results line queries 
authentic publication novel approach allows untrusted publishers securely answer queries clients behalf trusted line data owners 
publishers validate answers compact hard forge veri cation objects vos clients check eciently 
approach provides greater scalability adding publishers better security line publishers don need trusted 
authentic publication attractive important vos small eciently computable veri able 
led researchers develop di erent data representations ecient vo computation 
develop new data model called search dags 
model develop generalized algorithm construction vos 
show vos constructed secure compact 
addition ecient compute verify 
demonstrate approach captures existing simple structures binary trees multi dimensional range trees tries skip lists shown search dags requisite security compactness eciency results immediately follow general theorems concerning search dags 
going search dags prove security complex data models ecient multi dimensional range searches 
allows compact vos computed size log typical range queries query answer size database size show ecient schemes construct vos 
system disk blocks size answer sided range queries compute vos log operations linear size data structures 
supported nsf ccr contact author phone fax email martel cs ucdavis edu large complex networked systems aws allow malicious outsiders hack 
mature reliable systems hard con gure administer properly 
rarely sure large information system internet secure 
current state security trustworthiness online publishing sources suspect 
provide increased assurance integrity high impact information nancial medical defense securely internet 
authentic publication client trusts database owner creator untrusted third party publisher query processing 
owner remain safely line simply provide database periodically publishers answer queries owner behalf 
client submits query publisher responds answer veri cation object vo 
client uses vo digest values provided securely owner check answer correct see 
schemes provide crucial guarantee answer query correct client accepts incorrect client detect accompanying vo incorrect attacker speci collisions collision intractable hash function 
settings trusted certi er constructs securely distributes digest values 
owner clients 
publishers query result verification object database query digest authentic publication scheme untrusted publisher reduces risks operating secure line system attacker gains control speci publisher able fool clients simply nd publisher 
allows graceful scaling adding additional publishers meet increasing demand clients 
note secrets scheme adversary trying fool client assumed know data hash function digest values 
information compromised 
note approach currently practical data relatively static 
vos satisfy critical requirements 
secure infeasible publisher forge acceptable vo wrong answer 
second vos compact reduce transmission overhead 
eciently constructible publisher eciently veri able client 
vos construct cryptographic structures collision intractable hash functions forgery dicult 
importance nding veri cation schemes broad range queries led development secure schemes variety data structures 
original structures focused membership queries binary search trees skip lists 
interested handling richer set multi attribute queries return patches versions netscape released july 
range trees prior area binary search tree structure 
additional data structures support ecient answers types queries 
include queries strings genetic xml documents images 
supporting queries eciently may require authentic versions variety data structures 
data structures get complex hard develop authenticated versions structures 
introduce simple general data model call search dag directed acyclic graph prove security theorem vos search dags 
search dag model uses new approach veri cation general include traditional authentic data models 
particular model hybrid data structures combinations trees arrays linked lists constraint information associated structure ranges values contained subtree 
security theorem prove security authenticated versions complex data structures 
brie summarize results 
main results 
main results 

general model ecient authenticated data structures 
introduce search dag model characterizes broad class data structures 
describe general method create ecient authenticated versions data structure class 
prove data model viewed searching dag supports authentic publication typically vos size construction time linear search time underlying data model 
current approaches authentic publication binary trees trees skip lists placed conveniently search dag framework 

ecient vo construction 
publishers large data sets may need ecient structures trees 
show vo constructed performance 

new authenticated data structures 
develop improved authenticated data important class multi dimensional range queries request points dimensional rectangle 
models multi attribute queries 
addition answers multi dimensional range queries important supporting constraint query languages queries class hierarchies object oriented databases 
answers range sided queries rectangles direction going nity important special cases handle 
range queries points answers size search dags answer dimensional range queries vo size construction time log 
sided range queries search dags create authenticated version complex data structure described get vos size log disk block size 
vo sided queries computed log operations linear size data structures 
summary applied general search dag model ecient data structures 
case resulting vo construction algorithms exhibit asymptotic time space behavior original non authentic data structures produce compact vos 
security results vos immediately follow general security theorem 
results lead believe approach applicable wide range data structures 
related 
idea data authentication considered timestamping 
proposed techniques original merkle re nements naor nissim certi cate revocation 
goodrich showed skip lists provide compact simple vos settings 
devanbu stubblebine showed create authenticated versions stacks queues 
introduced general idea authentic data publication showed securely answer range queries 
extended authentic publication xml documents authenticated tries :10.1.1.13.2575:10.1.1.16.2936
papers share common theme leveraging trust provided digest values trusted party multiple hashes goal protecting integrity content ecient veri cation 
veri cation approach general explicit implicit constraint information 
allows create authentic versions complex data structures 
extend improve prior results provide general framework computation example range query return points 
compact vos di erent data structures 
necula describes alternate approach code bundles programs logical proofs relevant properties 
note similar logic approach proof carrying answers case lead general impractical proofs large databases 
approach relies cryptography 
structure 
section introduce basic security properties veri cation objects vos example show eciently compute compact vos range queries 
section describe search dag model prove security eciency 
section show existing secure structures easily modeled search dags apply search dags trees tries 
section extend framework multi dimensional range queries focusing general case specialized queries sided queries ecient computation schemes fractional cascading 
summarize results outline 
background dimensional range queries outline principles data publication scheme illustrate membership range queries 
show traditional approach setting new scheme 
authentic publication protocols involve parties owner creates responsible content publisher handles line query processing client submits queries publisher 
client relies owner create accurate data trust publisher 
authenticity schemes rely primarily collision intractable hash functions protocols typically involve steps 
owner computes digest content data structure containing data 
distributed securely clients public key signature scheme 
owner sends data publisher 
queries received client publisher sends back answer veri cation object vo 
vo client recompute verify exactly owner 
seek guarantee important security property de nition authentic publication protocol involving client publisher owner secure digest computed owner vo answer computed publisher client recompute digest answer just owner publisher engineered collision hash function formal de nition section 
background describe binary search trees queries ordered set data items build binary search tree leaves associated values 
compute digest tree value leaf associated shown 
internal node value hash values children 
construction due merkle called merkle hash tree authors solve problems related authentic publication 
root digest value distributed securely owner client 
data distributed publisher build binary tree recompute hash values 
tree publisher prove data set providing vo 
proceed 
rst values user computes 
hashed get root digest 
vo proves tree 
better illustrate general data model want able represent structural information describe di erent approach tree verifying answer 
assume internal node data value associated largest value left subtree vertex searching value go left node right 
digest value internal node digest values left right children certi er responsible assuring correctness data distributing digest see gure 
type digest easy show value tree top approach 
example show tree give vo rst values hash root digest con rming correct split value 
know move right node digest value 
values hash con rming correct split value know move left 
hashes left child digest value con rming correct leaf value tree search ends leaf value 
general digest tree allows publisher give client vo lets client simulate proper search tree nd correct leaf values 
similarly client asks values range straightforward give vo simulates search values tree fall range 
vo triple values node visited search range searches easily veri ed standard merkle tree 
computation digest values including split values new approach may ecient hash values gives additional exibility multi dimensional searches may want search reaching leaves 
type top vo vo transparent 
general model query veri cation authentic data publication setting owner determines important part query veri cation structure logical view supports query veri cation 
section introduce general model data verifying answers queries data 
general capture existing data structures search procedures allows general constraint information data structures 
allows model complex data structures prior authenticated structures 
de ning search dag model search dag consists directed acyclic graph dag associated deterministic search procedure de ne precisely shortly 
unique source node degree zero 
owner de nes data associated denoted 
data contain information successors information relevant search procedure constraint information data query answers 
sink nodes graph degree zero 
assume non sink node successors speci ed order refer third successor 
owner responsible de ning deterministic search procedure takes query searches nd appropriate associated data returns correct answer begins searching reading outputting node visited successor 
reads data associated determine node visit 
continues manner visiting successors previously visited nodes completes search outputs done actual answer query output reject reads invalid inconsistent data item bad query 
convenience veri cation procedure assume vertex output form means visit kth successor jth node visited 
says visit nd successor third node visited search 
query correct answer de ned output run owner dag lets de ne setting broad class queries having specify speci semantics 
note settings client know properties binary search tree able search explicit procedure typically non sink nodes associated data guides search sink nodes associated data underlying data set example binary search tree tree described section split value stored internal node tree data values stored leaves 
search dag describe general way digest dag create vo answer query vo verify answer 
search dag automatically authenticated data structure 
show version retains eciency original search dag 
dag owner computes digest value source collision intractable hash function digest function applied node simple recursive de nition sink node successors order describe general authentic publication scheme high level 
owner chooses appropriate search dag data set gives copy publisher secure protocol owner sends client digest value root hash hash function search procedure assume need sent may need resent periodically re ect updates owner data set 
show verify answers 
veri cation objects veri cation procedure de ned correct answers queries digest dag 
show untrusted publisher provide vo query de ned search procedure describe structure vo client veri cation process 
straightforward veri cation procedure clarity number implementations possible adhere basic model 
start describing correct vo query denote vo 
nodes visited run input owner dag 
successors correct vo values kn vector ended called step vo 
example type vo section binary search trees 
case client veri es rst step correct hashing individual items step comparing result 
construction match input node visited kth successor rst output 
second step checked hashing second step values comparing result 
matches input reject 
outputs indicate node visited 
hash step compare result match input 
inputting produce answer halt 
correct vo sequence vectors integers vector line separated semicolons 
vo form immediately rejected 
syntactically correct vo described kn refer values ith step vo 
query syntactically correct vo veri cation process proceeds just described correct vo repeatedly hashing values step comparing result giving data value get node visit 
continue manner halts answer output veri cation successful computed value mismatches reject run steps reject 
essence proceeds just searching node additional veri cation data node processed 
security theorem veri cation procedure prove vo accepted veri cation process veri es extracts query data owner publisher able forge vo rst consider particular type bad vo trick veri cation procedure 
de nition syntactically correct vo forgery vo step ith step vo steps hash value note forgery necessary condition fooling veri cation sucient 
example attacker uses alternate step hash value correct step value may valid input rejected 
de nition correct vo query answer know user provided correct vo query accept return correct query data set prove main security theorem search dags 
theorem candidate vo vo forgery vo rejects proof prove length vo rst steps correct line incorrect rejects processing line theorem follows immediately 
proof induction starts hashing step comparing 
forgery vo values match step correct vector 
induction step assume rst steps correct 
show rejects processing step correct 
rst steps correct correct rst data values output denote step correct node visit 
compare hash step know correct value compare induction hypothesis forgery vo hash step match vector values step vo 
reject step correct 
security theorem applies search dags focus search dags created ecient search procedures 
prove eciency theorem important class search dags 
number nodes visited search answers time taken process starts search 
theorem consider search dag bounded degree data values associated nodes bounded size process data value time 
query build vos size constructed veri ed time 
proof vo steps size bounded assumptions degree step processed time veri cation construction time follows 
note boundedness assumptions apply normal search procedures binary search trees multi dimensional range trees skip lists 
section show easy cast model get vo schemes 
main advantages model complex data structures deal nal sections 
general method may lead basic verifying method known easy modify veri cation process exploit speci properties improve eciency 
common veri cation bottom starting values fringe search hashing get predecessor node value 
describe transformation deals high degree nodes 
ecient vos dictionaries range queries strings give simple examples data structures easily modeled search dags 
start structures support dictionary queries element data set 
structures support ecient insertions deletions new elements 
general results search dags give easy security proofs standard structures 
binary merkle tree classic way support authenticated dictionary de nes compact vo range query 
section described model binary search tree search dag 
trivial convert tree search dag wants support ecient updates 
skip lists provide attractive alternative trees goodrich tamassia showed create ecient vos skip list answers log size small constants ecient updates :10.1.1.15.9072
skip list easily viewed dag easy create authenticated skip list search dags 
obvious dag skip lists gives log access time update time 
splitting nodes bottom towers easy get search dag log update time 
scheme goodrich tamassia similar improved search dag get better constants bottom approach introducing commutative hash function 
ecient construction vo section illustrate way reduce node degrees complex data structures 
binary search trees bst skip lists main memory implementations large data sets requiring secondary storage poor performance 
classic way get performance tree 
easy cast tree search dag terms node data split values decide go 
unfortunately lead larger vos size log data sets size get similar size vo traditional bottom veri cation 
reduce size vo replacing tree node bst height log search tree determines tree node visit get pointer root bst corresponding tree node 
new search dag bst get smaller vos membership range queries 
easy store tree ecient manner bst corresponding tree node associated values stored disk blocks 
traversing binary tree uses asymptotic operations tree 
demonstrates general method may allow high degree search dag nodes replaced tree lower degree nodes 
emphasizes fact search dag logical view data need restrict publisher physical implementation 
consider range query data points disk blocks size follows theorems theorem range query answer points get binary vo size log constructed log operations multi way tree size 
proof vo size security follow theorems bst search dag 
results note store bst tree node disk blocks 
search looks disk blocks log levels bst look leaf disk blocks rst contain answer points 
describes static multi way tree ecient updates tree translate ecient updates bst version tree 
string applications data structures support fast string searches important settings 
trie special form sux tree applications including tries authenticate xml documents :10.1.1.13.2575
tree trie easily represented search dag 
long alphabet size constant theorems apply search dag 
tries allow nd pattern length time 
trie search dag build vo size constructed time 
course branching factor vo size really 
reduce vo size log replacing high degree nodes binary trees trees 
sux trees allow preprocess long string length time space 
nd pattern time nd occurances time 
uses string matching general computational biology particular 
sux tree trie want results authenticated tries 
sux tree compacted trie simple extension trie result blows space 
care possible create authenticated sux tree uses space search times vos size linear search time 
hidden multiplicative constant reduced log 
construction somewhat involved sux tree described fairly simply 
edge label non empty substring associated node edges lower nodes tree 
substrings associated edges node start distinct character 
nd occurrences follow path root node concatenated string labels equal pre nodes subtree rooted correspond starting points see gure 
space reduced compacted trie representing edge label implicitly position pairs start positions respectively substring gure 
search dag model provide authentication sux trees 
simplest way space version sux tree stores entire substring corresponding edge tree 
case logical search dag just tree edge transformed chain nodes character string see gure 
sux tree resulting naive search dag xed alphabet degree sux tree resulting search dag constant 
client happy model queries answered time publisher optimal vos size veri cation 
publisher needs storage opposed optimal sux trees 
publisher choose simply store compacted sux tree answer queries construct vos 
vo poses problem query produces string terminates early edge substring 
case publisher provide intermediate supporting value order keep vo size optimal 
length substring publisher calculate values time store space defeating point compacted tree 
diculties overcome better search dag 
compacted version sux tree gure compacted sux tree consists edge tree original string edge labels implicit pointers positions string 
get ecient search dag explicitly combine structures see gure 
search pattern original string referenced edge traversed 
search dag consists 
nodes compacted sux tree edges directed away root 

nodes character position original string string nodes edges position 
associated data string nodes just character position represents 

associated data internal node sux tree length substring outgoing edge 

data leaf sux tree position corresponding sux usual 

internal node sux tree link string node corresponding rst position substring associated outgoing edge note pointers replace edge labels compacted tree really implicit pointers 
search dag compressed sux tree 
pointers string nodes shown corresponding index data clarity 
search structure follows start nding outgoing edge root starts rst character gets pointer position length edge label 
check stopping match get mismatch characters match continue edge manner 
straightforward check dag 
see bounded degree note assume alphabet bounded edge single internal node sux tree starts di erent character 
constant amount data associated node edge original graph clear constant amount associated data node processed search constant time 
apply result search dags get result theorem pattern length string length occurences compute vos size constructed veri ed time 
multi dimensional range queries section introduce ecient authenticated schemes multi dimensional range queries 
general case range trees outlined section simple 
section discuss improved complex computation scheme fractional cascading 
vos sided queries special important type range queries detailed section 
cases get ecient authenticated structures search dags 
multi dimensional range trees database points dimensional rectangular queries form ask points points eciently multidimensional range trees time log 
section show eciently compute vos rectangular queries 
rst outline basic characteristics show convert search dag get compact vos 
discuss queries framework extends higher dimensions 
basic results largely duplicate results discuss details build improved results 
tree tree example range tree consider example shown consisting tree multiple trees represents points space 
tree sorts points coordinate 
interior node tree ancestor set points represented tree 
consider interior node tree gure ancestor points coordinates 
contains link root associated tree denoted 
tree contains points tree sorted coordinate 
likewise interior node tree pointer associated binary search tree points subtree higher dimension node dimensional contains pointer dimensional 
nodes nal tree tree pointers 
consider rectangular query form 
answer query rst de ne node tree canonical covering root ccr descendents satisfy range query descendents parent 
log ccrs log time 
ccr corresponding tree searched requisite range yielding log time range searches recall number answer points 
general dimensional range queries computed time log 
range trees require log storage space constructed time log 
convert search dag nodes arcs dag exactly 
internal node split value appropriate dimension figures associated data values 
leaf coordinates associated point 
sucient guide search nds ccr roots searches appropriate leaves associated trees 
trace search vo 
node degree bounded amount data 
theorem immediately get vo size construction time equal number nodes visited log 
construction extends easily dimension dimensions node tree points tree sorted coordinate 
theorem verify dimensional range query vo size log computed time 
improved multi dimensional range queries fractional cascading apply search dag model ecient range query structure 
fractional cascading reduces search time dimensional query factor log log 
review fractional cascading search dag model construct log size vos range queries 
rst nd log dimension ccrs ccr search associated tree 
search produce log piece vo 
fractional cascading node tree pointer associated array denoted containing points subtree rooted points sorted coordinate array contains pointers help speed search 
denote coordinate ith element 
illustrate setting gure left right children tree 
element pointer smallest index points analogous entry see pointers value go illustrate 
root path ccr ccr split tree fractional cascading scheme coordinates select pointers shown query rst range search tree nd split rst node answer points children covering roots ccr 
starred edges represent arcs search vertices subtree rooted satisfy range vertex ccr 
split leaf answer 
children split gure 
points subtree rooted seek smallest 
pointers associated directly indicate candidate range points arrays associated ccrs example follow pointers 
hit array associated ccr simply scan hit range element collect hit large 
cascading pointers allow scans searches provide additional eciency 
search tree tells nodes roots ccrs scans corresponding arrays 
search dag dag builds search dag previous section 
tree associated tree leaves tree hold coordinates longer sinks 
nodes leaves tree regular pointers corresponding elements fractional cascading array 
just identify ccr tree split node split search trees associated split children example lets nd correct places fractional cascade search value prior example 
smallest value large traverse arrays corresponding nodes tree ccrs 
array corresponding ccr search right encounter value outside query range 
physical implementation fractional cascading algorithm suggest nodes array successors element right child arrays logical view indicates quite case 
searching array right pointers lower arrays ignored 
purposes sequential array search exactly successor node right sink node 
tells search dag nodes elements arrays sequential search distinct nodes reached pointers higher arrays suggests simply keeping arrays supporting functions array search see gure 
refer array data sequential search array child pointers associated node tree 
note array elements just nodes search dag 
associated data eld nodes empty case search procedure information tree search determine successor arrays follow node reached 
arrays searched ccr nodes tree 
convert dag array element node 
nodes data values outgoing pointer right neighbor 
nodes data pointers children corresponding node 
search structures proceeds just normal fractional cascading search tree nd split ccrs go split tree nd correct position start fractional cascade follow pointers nd starting point linear search answer points ccr 
search dag fractional cascading scheme fractional cascades model tells digest values simply computed sinks search dag source give simple description function particular search dag 
structure array tells hash values right left 
values arrays computed array values just hash values successors 
entire array digested binary tree associated tree digested usual way addition digest associated structure node 
process accomplished construction time constant overhead 
construction easily generalizes higher dimensions note nal dimension trees single array produce di erent dag complicated digest function 
fractional cascades 
get constant degree search dag fractional cascading get immediately theorem theorem fractional cascading vo dimensional range query satisfying points size log computed veri ed time log 
sided range queries dimensional range trees discussed prior section disadvantages log space ecient applies fractional cascading 
drawbacks addressed consider restricted problem 
sided range queries de ned range sided range 
arge space ecient indexing scheme sided range queries 
linear storage log operations answer queries 
search dag model construct vo structure constant additional storage os 
start high level overview structure allows create ecient authenticated structure 
look structure detail decrease vo size 
arge divide points sets size set stored data blocks 
result blocks indexed values 
blocks set contain answer points determined constant os 
refer structure storing points asv structure 
search tree call base tree determine asv structures need examined 
base tree balanced tree branching factor node associated asv structure 
internal node key values direct search base tree 
arge show initial search base tree identify nodes associated asv structure contain answer points log operations 
search uses structural data nodes terminate search reaching base tree leaves 
focus indexing scheme ecient operations veri cation result stated terms os 
treat data structure search dag 
asv structure node degree index information 
successors data blocks sink nodes 
node base tree children successors index node associated asv structure 
data hash values associated node search dag accessed os eciency theorem applies theorem vos exist sided queries constructed log os 
approach vos size log 
properties asv structure carefully organize search obtain ecient search reduce size computational time vo log maintaining eciency 
reduce node degrees technique trees section 
details theorem appendix 
ecient methods compute compact secure vo fairly broad class data structures 
search dag model general allow ecient vos computed data structures 
hope general method take logical constraints data structure produce search procedure digest scheme 
major issue needs updating database 
data publication schemes assume fairly static data sets assumption reasonable excludes variety data publication scenarios 
data structures discuss admit ecient algorithms updates 
conversion data structure search dag leave update properties original data structure intact easy update search dag digest original data structure 
true structures fractional cascading search dag harder update due chain hash values 
similarly obvious search dag skip lists hard update easily xed 
authentic publication covers broad range secure query processing internet remains handle indexing structures types queries data models trust models data integration di erent owners 
arge vitter 
dimensional optimal range search indexing proc 
th symposium principles database systems pods 
berg kreveld overmars schwarzkopf 
computational geometry 
springer new york 
goodrich tamassia 
data structures algorithms java john wiley sons 
goodrich tamassia 
ecient authenticated dictionaries skip lists commutative hashing preprint goodrich tamassia 
implementations authenticated dictionary skip lists commutative hashing 
appear discex ii chazelle guibas 
fractional cascading data structuring technique 
algorithmica 
devanbu stubblebine 
stack queue integrity hostile platforms ieee transactions software engineering 
devanbu gertz martel stubblebine 
authentic third party data publication th ifip working conference database security 
devanbu gertz kwong martel stubblebine :10.1.1.13.2575
flexible authentication xml documents 
th acm conference computer communications security 
gus eld 
algorithms strings trees sequences 
cambridge university press 
haber stornetta 
timestamp digital document cryptology 
kanellakis ramaswamy vitter 
indexing data models constraints classes 
journal computer system sciences pp 

merkle 
certi ed digital signature 
advances cryptology crypto lecture notes computer science vol 
springer 
naor nissim 
certi cate revocation certi cate update 
proceedings th usenix security symposium 
necula 
proof carrying code 
th acm sigplan sigact symposium principles programming languages 
pugh :10.1.1.15.9072
skip lists probabilistic alternative balanced trees cacm 
yung 
amortized signature exible second usenix workshop electronic commerce proceedings tygar 
open problems electronic commerce proceedings th symposium principles database systems pods 
appendix sided range queries section describe details theorem followed ecient search dag sided queries 
ecient result theorem fairly straightforward application search dag model 
improved version relies details asv structures 
reduce size vo construction time maintaining space eciency 
approach continues build arge vitter scheme 
applying model eciency describe search dag achieving ecient vos detail main 
rst describe details arge data structures 
start describing base tree multi way tree branching factor divides points coordinate 
simplicity assume internal node exactly children 
internal node set points associated set nodes asv structures descendents base tree 
divide equal size sets sb coordinates 
remove points set largest value highest points 
points put asv structure associated remaining points sets associated child highest points removed set associated rst child 
associate node range leftmost rightmost point height point 
description fairly clear search points satisfy sided query points 
visiting base tree node associated asv structure visit child range overlaps height node fails satisfy answer points 
describe search dag detail 
node base tree node search dag data associated index values determine children search range height values 
successors children base tree single node data index information associated asv structure 
part search dag associated asv structure node containing index values node data blocks associated data data points details section 
data block nodes successors index node data block nodes sinks 
fringe path need hash values verify fringe block nodes unvisited node visited internal node visited fringe node unvisited fringe node lowest visited fringe node base tree fringe paths search base tree just original data structure 
asv structure examined go index node data determine successors answer data 
details place give proof theorem repeated main text theorem vos exist sided queries constructed log os 
proof node visited search dag corresponds directly operation original data structure 
store non sink node digest values successors 
node data successors vo data node stored blocks constructed veri ed number os nodes visited 
ecient search vo search dag described ecient construct node visited put values vo 
vo may large log satisfying answer points 
quite large want reduce overhead 
show need discuss data structure bit detail 
note time get answer points visited node ok put values vo get answer points 
arge show get amortized answer points node visited call fringe nodes see gure 
nodes base tree extreme right left path nodes visited may partially overlap range 
improved search dag reduce size fringe node accesses 
part fairly easy 
base tree basically multi way tree convert base tree node binary tree height log just trees 
binary base tree constant degree sequence fringe nodes length log log log reducing degree nodes asv structures requires detailed knowledge indexing scheme 
set points stored asv structure nd critical values associate sequence blocks data points asv structure ordered coordinates contains point asv structure blocks non overlapping ranges coordinates consecutive blocks points height greater 
note point may data block data block may sequence total constant space store points 
note total number blocks 
block data points asv structure associated range min max range query form access block points range overlaps min max 
note range really saying block sequence arge worry performance nd correct data blocks scanning index values 
speed searching asv index levels binary search trees bst 
rst level bst values blocks associated leaves 
associated leaf sequence blocks associated 
amortized argument visited node isn fringe node points satisfy query range point high points removed node put parent asv structure answer points charged visit 
data points node asv index nodes blocks point trees block trees sequence tree nodes sequences associated associated values min values 
root point trees 
search dag asv structure partially shown second level sequence bsts sequence min values blocks sequence associated leaves 
search blocks overlap query range 
third level point bsts block points search points block 
leaves tree actual data points sorted coordinate sinks search dag 
note logically point trees blocks points asv structure distinct trees structure dag tree 
see gure 
access asv structure rst search top tree nd smallest gives root correct sequence tree blocks range search tree nd blocks overlap range query 
get actual points data block range search 
theorem answer sided query log os build vo size logn linear size data structures 
proof recall reduce degree base tree nodes converting node binary tree 
pack binary trees digest values disk blocks 
similarly top level binary asv structure tree sequence point tree disk blocks digest values 
simulate search arge search dag performance 
vo size need analyze fringe nodes non fringe node examined search corresponds contribution points query answer non fringe nodes contribute total vo size 
indicated logn size vo describe fringe path search base tree 
look vo size avs structures associated fringe nodes 
fringe node lowest node visited left right fringe path points asv structure access associated asv structure fringe node search trees give type performance range query range log size vos number points satisfying range 
log fringe structures accessed get logn total size 
nal issue deal fringe node bottom search points nodes labeled gure 
asv structures accessed left right path may contribute size nal vo 

