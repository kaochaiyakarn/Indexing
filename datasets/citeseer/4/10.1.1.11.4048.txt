schemeunit schemeql little languages noel welsh house curtain road london ec bs uk noel net francisco universidad nacional aut de mexico city mexico acm org ian glover cambridge positioning systems hills road cambridge uk ian net little languages implemented scheme schemeunit language writing unit tests schemeql language manipulating relational databases 
discuss design implementation show features functional languages general scheme particular contribute ease implementation languages 
keywords scheme little language sql unit testing schemeql 
domain speci language little language powerful technique increasing programmer productivity 
domain speci languages done functional languages :10.1.1.128.1440
di erent regard 
contribution focus interface languages show features functional languages general scheme particular improve user experience 
describe little languages unit testing relational database manipulation 
languages authors real applications code available schematics sourceforge net 
schemeunit framework unit testing concerns testing individual elements program isolation 
schemeunit framework de ning organizing executing unit tests written plt dialect scheme 
drawn inspiration strands existing practice interactive environments development unit testing frameworks growth extreme programming 
interactive environment natural write code little test little cycle evaluating de nitions permission digital hard copies republish post servers redistribute lists part granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy redistribute requires prior specific permission 
third workshop scheme functional programming 
october pittsburgh pennsylvania usa 
copyright noel welsh francisco ian glover immediately testing read eval print loop repl 
take simplicity immediacy cycle model 
codifying practices preserve test cases running time interpreter allowing tests run code changes 
unit testing core practices extreme programming software development methodology 
unit testing new extreme programming extreme programming emphasis unit testing spurred development software frameworks unit tests 
original unit testing framework written smalltalk 
unit testing frameworks written languages 
draw inspiration frameworks nd enlightening compare expressivity frameworks schemeunit 
particular compare schemeunit junit extremely popular unit testing framework java language downloaded times time writing 
start discussion clarifying goals schemeunit 
describe framework design show goals uenced design 
follow comparison schemeunit junit illustrates expressivity scheme leads cleaner implementation better user experience 
nish discussion related 
goals goals schemeunit 
firstly want remain close possible code little test little cycle described 
secondly want support main testing patterns encounter practice 
want support user extensions testing framework 
shall example simple interactive testing illustrate design 
suppose user testing invariance write read 
code may execute de ne data list output le test dat lambda write data input le test dat lambda equal 
data read delete le test dat programmer checks test inspecting result equal 
data read expression 
result test succeeded 
shall show example coded framework take simplicity example goal 
core design test core type framework 
test test case single action test test suite collection tests 
test test case test suite test case name action test suite name tests tests listof test hierarchical arrangements tests suites helps programmer organize maintain tests 
represent test action closure 
ways spring mind signal test success failure 
indicate success returning non value failure returning 
return datatype indicating success failure additional information 
throw exception failure return normally success rst method advantage simplicity disadvantage lose information cause failure discard immediately 
methods equivalent terms information return encode arbitrary information return value exception 
reasons choosing third option second 
firstly wish catch exceptions anyway prevent unexpected error ones testing halting testing framework 
secondly second method testing sequence expressions necessary continuation passing style propagate test failure occurs intermediate expression 
case simulating exceptions 
simplicity implementation choose throw exception signal error 
divide types exception catch catch result tested failure call failures catch due untested failures call errors 
provide run test case function takes test case returns test result run test case test case test result test result test failure test case failure exn test error test case error exn test success test case result functions fold test fold test results easy walk tests 
fold test test collector seed test seed fold test results result collector seed test seed seed test collector 
test result collector 
test result testing patterns example core framework test case assert binary predicate actual expected write read invariance lambda data list dynamic wind lambda output le test dat lambda write data lambda input le test dat lambda actual read equal 
actual data raise exn test assertion string append write read invariance failed format actual actual format expected data lambda delete le test dat clearly lost simplicity original repl 
adding common testing patterns schemeunit show regain simplicity 
assertions checking actual output expected output common test pattern 
borrow idea assertion functions junit 
assert function tests condition raising failure exception condition false 
failure exception contains location failed assertion actual expected parameters optional user speci ed message string 
core functionality provided single function assert binary predicate actual expected message know experience pays provide assertions common cases schemeunit provides library assertions assert binary predicate actual expected message assert equal 
actual expected message assert eqv 
actual expected message assert eq 
actual expected message assert true actual message assert false actual message assert pred unary predicate actual message assert exn exn predicate thunk message fail message assertions de ned de ne assertion macro de ne assertion name param expr de ne assertion macro expands de nition macro function takes parameters optional message string 
result expressions assertion raises failure exception containing information 
de ne assertion macro exported users de ne domain speci assertions par provided 
hope time accumulate libraries specialized assertions 
state management note example test uses state requires initialization cleanup code 
fairly common easier user specify actions 
borrowing junit call code setup teardown actions augment test case optionally include 
test case name action setup teardown interface enhancements macros add repetitive lambda statements action setup teardown expressions 
wrap call action calls setup teardown macro requiring test framework action 
example data list test case write read invariance input le test dat lambda assert equal 
read data output le test dat lambda write data delete le test dat code identical original example typed repl 
achieved ease goal done supporting testing patterns allowing user extensions testing framework 
macros get location information plt scheme 
de ne function variant occasionally uses higher order assertions 
function variant appended name 
schemeunit graphical interface interfaces provide textual graphical interfaces schemeunit 
example run shows user interface action 
test suite test text ui test suite example suite test case succeed assert equal 
test case fail assert equal 
test case cause error assert equal 
gives output error cause error error type exn application divide zero occurred message division zero failure fail assert equal 
failed top level inputs success es error failure graphical interface development 
complete provide source level highlighting allow navigation error location drscheme 
example current graphical interface shown 
schemeunit versus junit instructive compare schemeunit popular junit test framework doing serves illustrate expressive advantage schemeunit 
discussion centers basic example telephone class 
java code public class extends testcase public static void main string args junit run suite public static suite return new class public string super public void throws exception build complete phone number number new bad string number public void throws exception build phone number area code number new null bad string number gg translation schemeunit syntax require lib test ss schemeunit lib text ui ss schemeunit test text ui test suite telephone number tests test case simple format assert equal 
format number number bad string test case area code assert equal 
format number number void bad string points note example 
amount typing required short example 
java code far verbose notably setup code 
largely result type declarations noise keywords return new required java 
eyes scheme code elegant recognize subjective judgment 
junit relies extensively re ection 
test cases de ned pre xing method name test 
elegant solution problem java rst class representation functions lead problems junit uses custom class loader interact unpredictably java code extensive re ection java remote method calls 
testing dicult environments 
problem scheme 
junit setup teardown methods similarly identi ed name discovered re ection 
rst class functions reduce complexity schemeunit framework 
general structuring test suites value name simpler exible system 
fewer new conventions user remember tests manipulated related spawned large increasing number testing frameworks schemeunit 
shall brie consider particularly relevant schemeunit 
implementation haskell language addition family 
broad similarities schemeunit 
signal failure exceptions provide number convenience assertion functions 
recognizes importance interface de nes operators test speci cation easier 
combination lazy evaluation operators achieves similar ect macros 
brie illustrate equivalent code schemeunit test 
tests addition test de ne tests test suite tests test case addition assert lift common lisp curl lisp dialect implementations framework 
broadly similar schemeunit 
lift stateful features ease interactive development tests 
de ning test lift implicitly creates test suite tests created automatically added 
tests categorized name stored global collection 
tests override existing tests name removed remove test function 
direct translation junit curl earlier comments junit apply 
fort framework implemented caml takes di erent approach family 
test results take values including unexpected success expected failure untested unresolved addition usual pass fail 
test results returned normal function return mechanism envisage diculty constructing single test case containing multiple test expressions 
multitude test results interesting idea encounter situation necessary 
lacking clear need favor simplicity stick result types 
extreme programming community evolved design pattern community surprise testing patterns developed 
intend analyze patterns see schemeunit provide direct support 
advanced approach generate tests speci cations 
approach naturally leads model checkers acl spin prove correctness 
powerful approach quite leap simple system 
schemeunit targets unit tests 
wish target functional system testing testing nonfunctional requirements performance 
aim extend schemeunit support domain speci functionality web site testing 

schemeql query language international standard database language sql sql just sql declarative language manipulating data database manager systems dbms 
sql standard interface relational databases implemented major minor dbmss 
schemeql integrates database manipulation language scheme language ering alternative raw sql 
nowadays database programmers know sql schemeql designed er gentle slope existing sql knowledge higher level abstractions offered schemeql 
start discussing limitation embedded sql alternative desirable 
describe design implementation schemeql 
follow extended example shows schemeql builds sql provides extended functionality programming schemeql easier sql 
nish discussion related 
limitations embedded sql traditional approach mixing sql language embed sql text strings 
supposedly modern languages java continue tradition 
disadvantages approach sql statements checked execution time 
easy grammatical type errors embedding sql 
example forgetting include space concatenating strings common error 
similarly write sql statement uses sql constructs aren allowed uses wrong type arguments sql functions 
errors cause execution time exceptions may ect users compilation time exceptions caught dealt programmer 
sql statements manipulated host language statements 
crude text processing compose re ne sql statements 
code quality programmer productivity su er embedded sql sql statements rst class members programming language existing tools language constructs avoiding problems 
schemeql design better sql schemeql embeds scheme little language creating manipulating sql queries 
schemeql allows complex structured statements treated rst class citizens considerably raising level abstraction programmer 
schemeql grammar closely spirit sql grammar 
eases implementation sql complex mix relational algebra relational calculus importantly allows programmer existing knowledge basic sql constructions programming scheme 
furthermore making schemeql set syntactic extensions procedures concentrate design little language retaining power real programming language scheme steps little languages 
sql statements divided main groups selection select modi cation insert update delete data de nition create table selection aka projection statements produce result set 
modi cation statements return natural number representing number rows ected execution statement 
data de nition statements interesting side ects creating new table view database 
schemeql logical division di erences result sets represented cursors lazy stream rows basically allows programmer row time having mapping sql statements scheme procedures set procedures mimic single sql statement 
simpli es construction combination re nement statements 
instance full power sql select statement achieved appropriate combination schemeql forms 
basic selection schemeql follows grammar selection query query literal query query string symbol passed verbatim dbms 
string symbol number string symbol string symbol literal string symbol alias 
dbms defined binary operator value suitable comparison important note query forms schemeql matter implicitly 
query means select table tables returned application scheme procedure scheme variable 
selection schemeql times query procedure provide functionality programmer may want selecting data database reason complex sql select statement 
ering complex form schemeql provides set forms procedures specialized compose handle selections 
forms query distinct group order having limit union intersect di erence 
distinct 
group 
forms asc desc syntax rest forms just minor variations 
reader may wonder schemeql selection exactly 
selection schemeql internal scheme structure holds information provided far perform selection continue specializing 
query param query struct called schemeql compilation time allows perform basic static checking information provided perform selection 
schemeql execute called selection performed result set called cursor schemeql returned 
schemeql execute schemeql struct conn cursor schemeql execution time 
scenario repeats data modi cation data de nition forms schemeql 
want immediately execute form schemeql provides useful shorthands forms combine generation internal structures execution 
forms direct query conn param cursor query current connection param cursor query cc param cursor conn open connection dbms created call schemeql form connect database param exactly parameters valid query 
schemeql cursors sql result sets seen tuples form table 
schemeql cursors pairs values row promise row list representing rst tuple result set promise cursor holding promise forced return rest tuples result set 
cursor row promise row listof library cursors provided part schemeql 
programmers basic procedures cursors cursor car cursor returns rst tuple cursor 
cursor cdr cursor returns rest cursor cursor similar original element cursor car position returned cursor 
cursor null 
cursor cursor empty cursor 
cursor map proc cursor returns cursor rst element application proc rst element cursor second element holds promise apply proc rest cursor 
cursor list cursor returns list containing rst rows cursor 
nite cursor list cursor returns list containing elements cursor 
worth noting cursors sql completely di erent concept retrieve small number rows time larger query 
schemeql provides support procedures open cursor receives query optional information create di erent kinds cursors initial size set starting row 
procedures result open cursor roll cursor changes orientation cursor close cursor closes cursor 
important feature way handling sql cursors resulting set tuples represented kinds de ned open database connectivity odbc forward static keyset driven dynamic 
schemeql cursor handled way result regular queries 
go detail space reasons 
rest sql usual sql functionality part schemeql 
transactions instance handled di erent ways 
rst transac tion exp form executes expressions order exception occurs commits block sends rollback dbms pass exception 
transaction form tries set transaction isolation level highest possible ideally serializable level 
second way allows programmer select isolation level required represented procedures transaction transaction 
transaction form switches manual commit mode sets isolation level highest supported dbms requested 
transaction commits rolls back transaction block depending argument supplied programmer 
transaction form scheme lead common error opening transaction executing block expressions closing transaction 
schemeql supports basic user table management connection management allows simultaneous connections di erent databases 
non standard useful regularly employed sql extensions create database database supported sql standard procedure depends internally extensions 
schemeql implementation schemeql layered takes full advantage knowledge particular dbms 
provides safety check sql statement sent dbms addition schemeql error detection er hierarchical approach error handling 
schemeql highly portable library odbc de facto standard database connectivity widely supported noted odbc drivers di erent levels conformance 
regard schemeql ers speci crucial bene ts 
firstly hides tedious ugly details odbc conformance levels scheme programmer 
secondly importantly removes complexity standard odbc manipulation probably biggest drawback odbc compared dbms drivers 
odbc library plt scheme 
information www plt scheme org software time writing major releases supports 
portability reasons schemeql allows di erent dbms drivers 
odbc drivers known extensive error checking possible database speci driver outperforming generic odbc driver 
sql support basic error checking facilities independent driver 
schemeql action examples database structure 
suppose software tables snippet employees database 
personnel salaries id name lid noel ian francisco simon james brian dennis id salary languages id lang scheme haskell java start common sort query select statement statement get names programmers select name personnel schemeql query exactly structure sql equivalent query name personnel suppose wish get ids employees program scheme 
sql write select personnel id personnel languages personnel lid languages id languages lang scheme schemeql write query personnel id personnel languages personnel lid languages id languages lang scheme queries similar structure 
suppose want get java programmers 
immediately see opportunity code reuse parameterize queries language 
trivial schemeql abstraction facilities provided scheme de ne programmers language query personnel id personnel languages personnel lid languages id languages lang language remember schemeql 
way standard sql individual dbmss may provide parameterized queries 
embedded sql append strings de ne programmers language string append select id personnel languages personnel lid languages lid languages lang language note method error prone easy example forget include space strings done languages keyword 
suppose want get ids programmers earning 
intersection programmers know programmers earning 
sql write select id personnel languages personnel lid languages lid languages lang intersect select id salaries salary schemeql form sets separately perform intersection programmers programmers high earners query id salaries salary intersect programmers high earners notice reused programmers function de ned composed query parts 
sql 

impressed productivity functional programmers decide re java programmers extra money give raise ne scheme programmers nd haskell programmers productive lazy 
coincidentally give opportunity show query composition cursor handling schemeql 
de ne sets interest getting raise haskell programmers just stay getting opportunity explore interests 
de ne programmers scheme de ne programmers haskell de ne red query id personnel schemeql execute di erence union programmer red removed salaries table cursor map lambda programmer id car programmer delete cc salaries id id result cursor red give scheme programmers raise cursor map lambda id update cc salaries salary literal salary id car id result cursor schemeql execute operations performed pure sql query results input modi cation statements 
give equivalent statements perform actions 
action requires repetition number similar statements imperative programmers give example 
select personnel id personnel select personnel id personnel languages personnel lid languages lid languages lang scheme union select personnel id personnel languages personnel lid languages lid languages lang haskell delete salaries id select personnel id personnel intersect select personnel id personnel languages personnel lid languages lid languages lang scheme update salaries set salary salary id related haskell db compiler embedded haskell dynamically generates sql queries developed instance general design pattern embedding client server style services haskell detailed 
bene ts technique ers programmers need know language allows language extensions form libraries possible impose speci typing rules integration domain speci libraries cgi mail possible nally approach ers strategic advantage empowers programmers language infrastructure module type systems 
schemeql bene ts static typing 
implementation haskell db uses activex data objects ado connect dbms 
regard haskell db limited windows platform 
schemeql share limitation uses interact odbc driver 
approach de ne limited domain speci language translated sql 
approach expand database query language full programming language 
approach bene ts requires underlying dbms change 
clear structured data 
extensible markup language xml considered universal format structured documents data web 
xml arises need ecient query languages exploit structured data 
xml query working group aiming create set query facilities extract data xml viewing xml les databases 
unfortunately direct point comparison xml current database technology 
remain interesting topics research years come 
language schemeql able enter xml realm question answer 
immediate adding support speci dbms drivers sql dialects oracle postgresql 
attempt standardize schemeql syntax scheme request implementation 

schemeunit schemeql schemeunit schemeql designed gentle slope philosophy start familiar base build additional functionality independent components base 
schemeunit evident way test code mimics code little test little cycle adds facilities organize rerun tests 
schemeql starting point sql select statement query macro modeled 
combinators intersect di erence introduced ways modifying basic query 
schemeunit schemeql take advantage scheme macro facilities cleaner interface user 
languages macros avoid lambda statements 
schemeunit creation test cases 
schemeql cursor creation 
macros purposes schemeunit allow de ne assertion macro schemeql provide implicit forms 
simple uses macros go long way improving user experience 
schemeunit extensively test schemeql 

language user interface just graphical interface deserves attention language designer gui get designer 
described schemeunit little language writing tests scheme illustrated features functional languages general scheme particular simplify interface 
comparison code little test little cycle junit framework shown schemeunit achieves level simplicity sacri cing expressive power 
schemeql little language database interaction shown feasible alternative embedded sql 
building programmer knowledge sql extending modular combinators achieve tighter integration scheme language better modular parameterization sql statements improved expressibility abstraction 
plt scheme host language little languages gives certain number extra free advantages usable drscheme programming environment syntax sensitive editor syntax checker stepper interaction libraries plugins 
little languages consists entirely tree structure expressions editor features inherited 
users needs add keywords little languages drscheme indented appropriately 
modi cation needed syntax checker stepper transparently procedures macros 
host language available users program load enable certain number libraries plugins embedded little languages needed extra fuss 
extra advantage exploiting validity checking available component drscheme hard expand constructions little languages type de nitions 
note language evaluation qualitative experiences languages question 
aware quantitative evaluation research contribute better understanding language design 

acknowledgments indebted individuals ryan created graphical interface schemeunit contributed greatly design 
paul shriram krishnamurthi matt mj ray anonymous reviewers ered comments draft versions 

adrian 

www org docs html 
beck 
kent beck guide better smalltalk chapter 
sigs library 
cambridge university press 
www com htm 
beck 
extreme programming explained 
addison wesley 
beck gamma 
test infected programmers love writing tests 
java report july 


sourceforge net 
cheon leavens 
simple practical approach unit testing jml junit way 
technical report department computer science iowa state university november 
clarke 
evaluating new programming language 
editor proceeding th workshop psychology programming interest group volume april 
clements graunke krishnamurthi felleisen 
little languages programming environments 
proceedings monterey workshop 

fort framework caml regression testing 
www sourceforge net projects fort 
feathers 
self unit testing pattern 
www com resources articles pdf 
findler clements flanagan krishnamurthi felleisen 
drscheme programming environment scheme 
journal functional programming 
fisher cattell hamilton white 
jdbc api tutorial second edition universal data access java platform 
java series 
addison wesley longman 
graham 
lisp 
prentice hall 


sourceforge net 
holzmann 
model checker spin 
ieee transactions software engineering may 
kranz seed ward 
curl gentle slope language web 
world wide web journal ii 
www com 
database language sql 
international organisation standardization iso 
je 
software downloads 
www com software html 
kaufmann moore editors 
computer aided reasoning acl case studies 
kluwer academic publishers june 
king 
lift lisp framework testing 
technical report university massachusetts 
krishnamurthi mason sperber 
scheme request implementation 
sr org 
leijen meijer 
domain speci embedded compilers 
nd usenix conference domain speci languages dsl 
usenix october 
freeman craig 
endo testing unit testing mock objects 
editors extreme programming examined 
addison wesley 
marchiori 
xml query 
www org xml query 

test infect enterprise javabeans 
javaworld may 
quin 
extensible markup language xml 
www org xml 
sanders 
odbc developer guide 
mcgraw hill 
shivers 
universal scripting framework lambda ultimate little language 
ja ar yap editors concurrency parallelism programming networking security volume lecture notes computer science pages 
springer 
buneman naqvi 
structural recursion query language 
proceedings rd international workshop database programming languages 
db cis upenn edu publications 

