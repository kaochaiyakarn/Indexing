modeling web interactions paul graunke northeastern university robert bruce findler university chicago shriram krishnamurthi brown university matthias felleisen northeastern university 
programmers confront design interactive web programs 
web interactions take place web browsers 
browsers consumers navigate various stages dialog confuse sophisticated corporate web sites 
turn web services fault frustrating ways 
transition web scripts web services lends problems immediacy 
address programming problem develop foundational model web interactions formally describe classes errors 
model suggests techniques detecting classes errors 
class incrementally checked record type system effectively eliminates errors 
class introduce dynamic safety check catches mistakes relative programmers simple annotations 
past decade web interactive medium 
far half web transactions interactive 
rapid growth suggests web page developers programmers mastered mechanics interactive web content consumers encounter costly program errors utilize new services 
short designing interactive web programs poses interesting complex problems 
understand problems briefly recall web programs 
web browser submits request path points web program server invokes program request number protocols cgi java servlets microsoft asp net 
waits program terminate turns program output response browser display 
put differently individual web program simply consumes request produces web page response 
appropriate call programs scripts considering read inputs write output 
simplicity design multi stage web dialogs difficult 
multi stage interactive web programs consist scripts handling request 
scripts communicate external media participants dialog remember earlier parts conversation 
surprisingly forcing scripts communicate way causes problems considering communications rely oft unstated easily violated invariants 
second web browser consumer side dialog introduces complications 
primary purpose web browser empower consumers navigate web hyperlinked nodes graph 
consumer naturally wants power explore dialogs web 
example consumer may wish backtrack earlier stage dialog clone page choices explore different possibilities parallel bookmark interaction come back 
programmer extremely careful invariants govern communication scripts interactive web program 
appears invariant purely sequential dialog context may dialog medium allows navigation actions 
contributions problem designing reliable interactive web programs 
develop simple formal model web interactions 
model explain problems concisely 
second develop type system solves problems provable manner relative model 
third checks performed statically suggest runtime checks supplement type system 
sample problem illustrate web programming problems commercial example 
contains snapshots actual interaction sells travel services vendors 
naturally invites comparison shopping 
particular customer may enter origin destination airports look flights cities receive list flight choices conduct actions 
open link new window option study details flight leaves pm 
consumer browser windows open 

switching back choices window consumer inspect different option flight leaving am 
consumer perform side side comparison options browser windows 

comparing flight details customer decides take flight 
consumer switches back window pm flight 
window form consumer submits request pm flight 
point consumer expects reservation system respond page confirming pm flight 
page says click link reserve pm flight chooses am flight 
customer doesn pay close attention may reserving wrong flight 
problem dramatically illustrates case 
sadly isolated error 
exists services hotel reservations site 
furthermore plain consumers related problems vendor sites including apple continental airlines hertz car microsoft register com 
clearly error occurs repeatedly organizations suggest time programming fault systemic problem 
believe time develop foundational model 
review related attempts overcoming programming problems 
screenshots produced june problems persist october 
choices flight flight problem clone submit submit commit choice switch windows switch windows legend click submit switch windows fig 

interactions prior bigwig project descendant bell lab mawl project provides radical solution problem 
main purpose project provide domain specific language composing interactive web sessions 
language runtime system enforces informal model session pair communicating threads 
example clicking back button takes consumer back dialog 
runtime system prevents damage overly especially compared approaches dealing web dialogs 
john hughes christian queinnec paul graham independently deep insight browser navigation actions correspond firstclass continuations program :10.1.1.29.4575
particular show interaction consumer corresponds manipulation continuation 
underlying language server support manipulations program doesn terminate interact consumer captures continuation suspends evaluation 
time consumer submits response computation resumes proper continuation 
put differently communication scripts internalized program subjected safety mechanisms language 
prior explored implications queinnec ways 
built web server enables web programs interact directly consumers 
programming world eliminates web design problems natural manner 
second realized solution doesn apply languages mechanisms explored automatic generation robust web programs functional compilation techniques 
idea works principle recognized full fledged implementation requires re engineered library system runtime environment targeted language say perl 
thiemann started hughes ideas provides monad library constructing web dialogs 
principle solution corresponds second approach monads take care compilation web scripts suitable continuation form 
working haskell thiemann haskell type system check natural communication invariants various portions web program 
haskell problem thiemann accommodate effects interactions file systems data bases unnatural manner 
specifically interaction cgi scripts re executed current point interaction 
monad approach avoids re execution effects indicative problems thiemann approach 
second solution thiemann approach won easily apply languages 
modeling web study problems designing interactive web programs formulate model characteristics 
consists single server single client wish study problems simple sequential web dialogs 
second deals exclusively dynamically generated web pages called forms mirror html sub language requests 
third model allows consumer switch web pages arbitrarily show suffices represent problem similar errors 
model abstracted programming language experiment alternatives calculus forms basic data 
model lacks properties orthogonal goals 
model ignores client side storage cookies primarily addresses customization storage optimizations 
server side storage suffices goals 
second web programmers address concurrency locking possibly relying server serializes session requests relying database 
distributing server software multiple machines complicates concurrency 
third monitoring restarting servers improves fault tolerance 
model addresses introduces security concerns existing solutions ensuring authentication privacy apply 
server client describes components model 
web configuration consists single server single client 
server consists storage dispatcher see 
contains table associates urls programs evaluator applies programs table submitted form 
programs closed terms specified language 
url 
programs form url id int string zee string id www drscheme org www plt scheme org url fig 

web client consists current web form set previously visited web forms 
set previously visited forms starts singleton set home page 
grows consumer visits additional pages 
model assumes consumer freely non deterministically replace current page previously visited page 
current page element previously visited pages consumer return page 
claim model consumer represents interesting browser navigation actions including conceived current browser implementors 
model web page minimal representation 
page simply form 
contains url form submitted set form fields 
field names value consumer may edit 
illustrates pieces model interact 
server client may run different machines connected network 
client sends current form web server read write dispatcher evaluator programs submit submit web client current form switch forms fig 

web picture server 
server applies program form produces response possibly accessing store process 
response replaces current form client appears client set visited forms 
fill form hs form ii 
hs form form ii switch hs hf ii 
hs hf ii wheref submit hh pi hf ii 
hh pi hf ff ii dp fig 

transitions specify behavior rewriting rules relate web configurations 
contains rules determine behavior client server far web programs concerned 
fill form rule allows client edit values fields current form 
switch rule brings different web form foreground 
practice happens number ways switching active browser windows revisiting cached page back forward buttons selecting bookmark 
submit rule dispatches current form url run program table resulting new current client form updated server storage 
actual dispatching evaluation specific chosen programming language introduce 
functional web programming specifies programming language 
extends call byvalue calculus integers strings web forms records program 
programming language connects web model ways syntax forms syntax terms dispatch function returning non cached page falls submit rule 
form construct creates web forms 
id construct extracts value form field name id specify semantics reduction semantics 
reductions select 
bottom half specifies dispatching 
shows processes submitted form form uses url form extract program table second applies program form reduces application value form store remains 
syntax id form url id id id semantics form url id id id id body body select form url nk vk language web connection dp dp form url id form prog url prog form url id form fig 

web programming language stateful web programming point scripts model communicate forms 
practice web scripts communicate forms external storage files session objects 
model stateful communications extend read write primitives 
presents language extensions 
primitives empower programs read flat values write flat values store locations 
reduction relation natural extension relation extended relation relates pairs terms stores just terms 
consequently dispatcher starts reduction invoked program current store 
uses modified store form web configuration 
server model remains sequential include concurrency 
problems web model web interactions represent common web programming problems concisely 
problem web script expects different kind form syntax 
read id write id semantics write id read id id id dom language web connection id dp form url id form prog url prog form url id form fig 

language extensions storage delivered 
dub problem script communication problem 
second problem reveals weakness hypertext transfer protocol 
due lack update method information client web pages obsolete consumer 
dub problem observer problem indicating protocol permit proper implementation observer pattern 
communication problem standard web programs terminate interact consumer non trivial interactive software consists small web programs 
software needs interact times client consists scripts scripts communicate properly successors 
worse client arbitrarily resubmit pages programmer assume scripts execution sequence 
difficulties unusual execution sequences splitting web programs pieces introduce errors 
consider example 
server table contains programs start ss ss 
start ss program prompts user name directs information ss 
second program attempts verify properties consumer 
doing assumes input form contains name phone fields attempts extract 
attempt extract non existent phone field results runtime error 
diagram illustrates problem graphically 
programmers mistakenly encode assumptions store mistake easily java servlet asp net session objects safety errors concerning form field accesses 
programmers aware problem employ extensive dynamic testing find mistakes 
section type system discovers problems statically allows programmers develop complex interactive web programs incremental manner 
programmer may recognize opportunities aggregating programs 
possible multiplexer technique merges scripts single file uses dispatcher find proper subroutine 
problems remain 
plt scheme org cgi start ss 
form plt scheme org cgi ss name name plt scheme org cgi ss 
form plt scheme org cgi done ss confirm name name confirm phone phone start phone submit response submit name form start ss form ss name fill form form ss name ed fig 

collaborating programs observer problem model view controller mvc architecture change model notifies views update display 
web programs enjoy privilege provide update push method 
browser receives page outdated model changes server may due additional form submissions consumer 
observer problem due confusion environments stores form server side storage 
clearly program reserves flights needs 
unfortunately programmers don understand difference may place information store really belongs web form 
shows reformulation problem see section 
programs pick flight asks customer preferred flight time 
second program confirm flight writes selected flight time external storage asking user confirm flight time 
third program receipt flight reads selected flight storage charges customer ticket 
easy see program models problem section 
submitting requests confirm flight program results pages displaying different flight times client flight time resides server external storage 
submitting outdated form longer matches storage produces mistake 
type checking communication trying extract field form fails form contain named field 
prevent errors languages employ type system safety checks 
web model shows straightforward type checking doesn programs consist separate scripts loosely connected forms storage 
checking scripts infeasible 
pick flight 
empty form form confirm flight departure time hh mm confirm flight 
form write flight form departure time form receipt flight confirm time read flight receipt flight 
confirmed form buy flight read flight form action itinerary read flight fig 

stateful web programs scripts developed deployed incremental manner may reside different web servers written different programming languages 
provide incremental type system web applications 
server receives request unknown url installs program table handle request 
installing new program server type checks program internal consistency 
addition server derives constraints new program imposes web programs 
refer second step external consistency checking 
step fails program rejected resulting error 
practice programmer may register programs application typed checked deployed 
type system internal consistency checking heavily borrows calculi records 
defines type system 
addition usual function type primitive types int string type language includes types web forms 
similar record types form types contain names types form fields intended usage flat types 
overload type environment map variables store locations types 
initial type environment maps locations external storage flat types 
typed differs requiring types function arguments 
typed 
type system serves basis external consistency checking 
traverses program generates constraints external programs 
type judgment shown includes set constraints 
constraint url form id insists program associated url consumes web forms type form id 
type rules handle constraints straightforward manner 
checking atomic expressions yields empty set constraints 
checking expressions contain subexpressions simply propagates constraints checking subexpressions 
expressions generate constraints form expressions 
expression form url id constructs form value type similar record type 
form expression indirectly connects program associated url form consumer submit 
type checker looked environment fixed check individual program programmers may add extra locations new programs 
types type type type form id type type type string int type judgments type form id type derivation rules string string fg int fg fg form ida idx id idx form url id form id form id read fg write fig 

internal types webl program associated url immediately compared form type function argument type suffice 
allow independent development connected web programs 
type checking form expression generates constraint url form id checked 
extends definition server state set constraints 
function install program adds new program server table url program okay 
program type check generated constraints consistent constraints server 
set constraints consistent iff set function urls types 
constrain function ensures program typed extends existing set constraints include constraints generated type checking type annotations type checking constraint generation constraint checking place system provides levels guarantees 
theorem shows individual web scripts respond appropriately typed requests getting stuck 
theorem 
type set constraints second theorem shows server apply web programs forms wrong type long server starts state 
state theorem need explain means server state typed relaxing restriction allow forms contain extra unanticipated fields 
server extension additional functions install program url install program hh ci hh constrain url ci consistent constrain url consistent boolean consistent url form id url form id id id constrain url constrain url form form 
form fig 

constraint checking submitted form typed 
server typed programs function types map forms forms constraints consistent server typechecks iff consistent url dom url form id 
form id url url url form id form typed respect server refers program server accepts type form 
form typechecks form url id iff types fg url form id theorem 
server typechecks form typechecks hs hf ii hs hf ii 
submit hs hf ii 
server set constraints closed resulting configuration guarantees success submission 
theorem 
hh hf ii 
submit hs hf ii server typecheck form typechecks constraint url form id url dom server typecheck form typechecks 
alternative web programming languages necessary instantiate model functional programming language 
language canonical imperative loop language basic data type web documents 
furthermore language provides internal type system derives checks information web documents 
type system stronger allowing programmers complex mechanisms composing web documents 
project analysis differ respect ultimate goal 
primary goal accommodate existing web browser mechanisms 
contrast runtime system disables back button 
second wish accommodate open world scripts asp net perl python collaborate 
theorems show type checks language server accommodate just kind openness 
project provide model provide foundation investigating web interactions general 
separating constraints collaborating programs type checking individual programs lends system flexibility 
set forms produced easily computed examining program return type 
languages local type checking constraint generation may connected 
extending constraint checking dynamically typed languages requires type inference system capable determining types possible forms program produce 
notifying outdated observers script creates form reflects server current state 
due shortcomings form lose currency server state 
submitting form may consumer perspective result incomprehensible erroneous behavior 
way avoid errors reload pages periodically 
pages generated scripts reloading implies re executing scripts 
course re execution avoid duplication effects state server precisely thiemann enables 
unfortunately solution doesn general number reasons discussed section prior 
alternative general method modify server detects submitted form reflect server state 
roughly speaking corresponds execution safety check array indexing list destructuring 
date test fails server informs consumer situation prevents erroneous computation causing damage 
analogy safety checks server signals exception informs consumer earliest opportunity went wrong 
believe approach general independent scripting language dynamic checking appropriate compromise kinds situations depend dynamic configurations statically predictable properties 
check submitted form server perform additional bookkeeping 
specifically determining outdated requires notion time server keep track time 
time number processed submissions 
external storage changes maps locations flat values timestamp write id time addition server maintains carrier set storage locations read written execution script 
sends page consumer server adds current time stamp set locations extra hidden field page 
additional bookkeeping server check request date 
request arrives server extracts carrier set page wash cgi program problem demonstrated built wash cgi 
downloaded october compiled complaint ghc reserved wrong flight run 
unfortunately program long include margin 
creation time 
timestamps attached locations carrier set date submitted form may inconsistent current server storage form carrier set cs time stamp submitted server current state date locations cs time stamp larger clearly nave test produces false positives 
example script may modify server state compute page counter set advertisements information irrelevant consumer 
form date irrelevant storage locations consumer clearly receive warning 
allow programs specify reading writing location server state relevant irrelevant action consumer perspective 
assuming language implementors change web server reduce carrier set collects script execution number warnings issues 
introduces formal model sequential interactive web programs 
model describe classes errors occur consumers interact programs natural capabilities web browsers 
analysis pinpoints classes problems scripting languages servers 
remedy situation languages scripting come type checkers compute shape expected forms input side shape forms scripts may produce 
languages allow scripts specify actions server state relevant consumer 
furthermore servers modified integrate type information scripts 
particular servers submit forms script form typed date 
short formal model helps understand problems components web change avoid interactions 
implemented prototype results hope report experiments improved server servlet language near 

atkins ball bruns cox 
mawl domain specific language form services 
software engineering 

brabrand mller sandholm schwartzbach 
language developing interactive web services 
unpublished manuscript 

brabrand mller sandholm schwartzbach 
runtime system interactive web services 
journal computer networks pages 



www com tutorials 

cardelli type systems 
handbook computer science engineering 
crc press 

java servlet specification version october 
java sun com products servlet 

allen 
transport layer security protocol january 
www ietf org rfc rfc txt 

felleisen hieb 
revised report syntactic theories sequential control state 
theoretical computer science 
original version technical report rice university june 

freier kocher 
secure socket layer november 
ietf draft wp netscape com eng ssl ssl toc html 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

graham beating averages 
www com avg html 

graunke findler krishnamurthi felleisen 
automatically restructuring programs web 
ieee international conference automated software engineering pages 

graunke krishnamurthi van der felleisen 
programming web high level programming languages 
european symposium programming pages 

hughes generalising monads arrows 
science computer programming may 

microsoft 
www microsoft com net 

ncsa 
common gateway interface 
ncsa uiuc edu cgi 

pierce types programming languages 
mit press 

queinnec influence browsers evaluators continuations program web servers 
acm sigplan international conference functional programming pages 

remy typechecking records variants natural extension ml 
acm symposium principles programming languages pages 

sandholm schwartzbach 
type system dynamic web documents 
symposium principles programming languages pages 

thiemann wash cgi server side web scripting sessions typed compositional forms 
practical applications declarative languages pages 
