static dynamic visualisation software architectures component systems john grundy warwick mugridge john hosking department computer science university waikato private bag hamilton new zealand cs waikato ac nz department computer science university auckland private bag auckland new zealand rick john cs auckland ac nz component software architectures increasingly adopted solutions various software engineering problems 
describe component software architecture supporting case tool developing 
tool supports static dynamic visualisation component systems user configuration systems user extension visualisations 
describe application tool development component design environments focusing visualisations developed specifying process modelling tool 

component software architectures common software developers realise greater potential improved reusability robustness user configuration conventional software systems 
example domains include user interfaces databases client server architectures design tools visualisation tools 
central idea component software architectures composition software systems discrete usually highly reusable components units data functionality connected produce complete software package 
event propagation components facilitate addition conventional procedure method invocation 
components plugged running systems enhance components easily replaced appropriate 
contrast conventional software systems usually require recompilation doing enhancements 
software components build design tools software development systems data modelling tools process modelling environments 
chose components approach allows reuse significant aspects tools multiple view management repository management cooperative support variety user interface components 
component architecture tools easier integration third party tools 
developers building componentbased tools require supporting design notations static visualisation tools dynamic visualisation querying tools assist 
visualisation tools may include techniques employed conventional software additional capabilities visualising component interconnection schemes event propagation handling allowing dynamic modification component structures required 
describe example component software architecture design environment built 
describe jcomposer tool supports static specification visualisation systems developed architecture describe illustrate complementary tool utilising similar visual notation dynamic component system visualisation 
comparison jcomposer related approaches 

component architectures component systems comprised units data functionality called components linked build complete software product 
difference component systems conventional software systems function libraries class frameworks component systems allow components plugged runtime interchanged components 
supports user configuration systems components versatile potentially robust building block approach system architectures 
component component component relationship component listen changes sent comp listen comp receives changes listen changes sent change descriptions sent comp change effected 
jviews component architecture 
jviews component software architecture developing support construction component design environments 
jviews exploits extends java beans api java 
basic structure jviews component system illustrated 
components rectangles linked relationship components ovals simple links solid lines 
component undergoes state change sends change description object describing change interested linked components relationship components 
interested components choose listen state change occurs listen components receive change description objects 
change descriptions stored implement wide range system functionality including undo redo diagrams attribute recalculation constraint enforcement versioning collaborative editing 
jviews environments support multiple views artefacts view relationships repository components view components 
view components rendered graphical textual forms provide appropriate editing functionality 
shows examples jviews environments 
view left hand side jcomposer jviews implemented case meta case tool 
new jviews systems specified jcomposer adaption notation jviews implementations tools generated 
view shown right hand side serendipity ii process modelling environment 
serendipity ii process model view shows stages software process enactment event flows stages start stages simple process model 
designing implementing componentbased system developers need specify visualise components systems name attributes methods 
users able selectively show hide define modify delete components basic characteristics 
inter component structure components wired build software system methods component utilise methods 

example jcomposer jcomposer generated environment 
flow events components characteristic component systems strongly event nature 
includes seeing component generated events propagated nature events 
way events propagated component handled acted receiving component 
may coded low level programming language specified higherlevel constructs 
similar issues arise trying visualise running component systems 
visualisation running systems desired users developers order determine systems locate correct errors possibly extend running system adding removing modifying components 
users systems want able visualise running component states attribute values component structural interconnections 
users may want ability modify running component states including able create link new components 
event propagation running components monitor behave 
event handling running components able modify limited ways dynamically change behaviour system 
queries component structures system running component instances visualised query structures 
experiences component software architectures indicated utilising similar notations visualise static dynamic aspects systems preferred users visualisations 
sections show addressed issues component systems utilising jviews software architecture 

static structure visualisation order facilitate specification static visualisation jviews software architectures developed visual architecture description language adl jviews architecture 
adl evolved earlier event software architectures unification ideas domain component systems 
illustrates basic components adl specifying views different aspects serendipity ii environment 
jcomposer uses notation introduced jviews rectangles represent components ovals relationship components lines name arity represent intercomponent links 
links indicate aggregation component instances component 
component specifications contain name superclass attributes methods component 
user jcomposer selectively hide show component attributes methods 

specifying navigating static component structures jcomposer 
front view shown uses notation describe basic serendipity ii repository components including base layer repository component process model stage components hashtable relationship linking stages repository component event flow components link stages process model 
static visualisations created users jcomposer interactively adding component relationship specifications views expanding existing components jcomposer repository views 
pop menus facilitate navigation views specifying component information adding modifying deleting attributes methods creating new views 
important part jviews componentbased systems general propagation events components 
jviews uses structural intercomponent links relationship components event propagation paths 
specified links fashion links annotated user requests indicate kind event propagation 
jviews allows connected components listen events propagating component allows components listen propagated events receiving component 
call event listening handling respectively 

event propagation 
additional link characteristics visualised jcomposer views appropriate annotation link labels shown 
indicate event dependency components lb listen la listen hb handle ha handle agg aggregate annotations 
tried extra iconic annotations event adl unwieldy 
users may visualise intercomponent event dependency aggregation annotations specify behaviour tool design jcomposer dialogue box 
dialogue box configure dependencies repository component base stages relationship component 
example repository component sent events hashtable component occur hashtable aggregates linked base stages repository la agg annotation 
hashtable relationship sent base stage component events check base stages unique ids stages ids changed hashtable key updated 
event flow component sent base stage events generating base stage component enact base stage linked link 

static event handling visualisation addition visualising static component system structure event propagation need visualise received events handled receiving components 
component systems tools require low level programmatic coding behaviour 
experience low level handling received events difficult visualise manner assists users developers component systems understand behaviour 
developed complementary visual notation jcomposer jviews systems uses simple visual filter action model event processing 
language consists reusable filter components pattern match events sequences events interest action components receiving event carry specified processing 
language earlier event handling language developed predecessor 
completely replace need textually coded event responses allow novice experienced users jviews systems readily visualise understand event handling 
shows language statically specify event handler serendipity ii process modelling tool construction 
user connected action components shaded ovals hashtable base event flow components 
action component listens changes hashtable change events flowing top entry point action defined right hand view 
change addition new base stage change base stage id hashtable key corresponding filters square icons checking theis passes event nonunique filter 

visualising event handling jcomposer filters actions 
queries hashtable ensure new base stage component id unique 
change rejected passing event actions 
id unique event passed change ok exit point 
action attached component handles events sent enactment flow component base stage components 
action determines base stage completed base stage linked enactment flow component link 
lowlevel filters actions functionality programmed java may reused visual filter action language places system required 

dynamic structure visualisation component system implemented jviews need visualise running components 
example developer system may wish observe system debugging purposes user may wish query tool repository locate particular components user may wish extend functionality environment 
developed tool jviews system allows users system visualise running jviews component structures 
uses similar notation static jcomposer adl illustrated previous sections 
shows serendipity ii process model view left hand view visualised right hand view 
dynamic visualisation view component shown top view components process stages event flow links 
attributes components displayed parent child links event flow arrow stage icons 
slightly modified form jcomposer notation component ids shown place component name type component class shown place superclass name 
links shown ovals relationship components jcomposer 
links may approach allows show dynamic link instances allows users interact links 
relationship filter action components visualised jcomposer notation oval rectangle shaded oval respectively component icon attribute values viewed 

visualising components 
construct dynamic visualisations user specifies initial jviews component want added new existing view pop menu item jviews view 
component initially visualised showing id class name user interact visualisation pop menu specify attribute values show links expand simple automatic layout algorithm places visualised components users interactive move components produce visualisations best fit cognitive model system 
composition layout dynamic visualisations saved templates reused visualise different component instances structure 
users reload saved visualisation structure indicate running component want visualised component replaced 
components visualisation updated reflect actual running state newly visualised system 
links components longer match actual running components drawn pale grey 
dynamic visualisations change component attribute values change visualised components links deleted 
users specify want links highlighted change descriptions propagated components visualised aid debugging understanding event flow jviews system 

user enhancement jviews system 
users extend visualised component structures creating linking components visualisation 
permits user enhancement environments utilising similar notation jcomposer 
example shows visualisation serendipity model 
user specified additional filter action component instances interactively adding visualised jviews components interactively expanded view 
component visualisation interactively added way attempts create new instance component 
components joined links interactively user attempts establish relationships running visualised components 
new filters actions user created specify process stage icon modified user informed highlighting icon view 
change description modification event generated indicating change stored version record component 
provide dialogue box viewing history changes 
user interact newly created components manner ones expanded view visualise views connect components 
ability users jviews environments dynamically modify state running system dynamic tool especially add additional event handling behaviour greatly enhances power users tailor systems individual needs 
similar notation static visualisations jcomposer allows users models running system familiar 

dynamic structure querying dynamic visualisations previous section produced tight user control users incrementally extend visualisation jviews component popup menus direct manipulation gain satisfactory visualisation group running component structures 
users may specify multiple visualisations containing common structures required 
approach useful localised component structures poor large collections components repositories serendipity ii jcomposer style tools 
allow users better construct appropriate visualisations situations incorporated visual query component 
shows visual query applied serendipity ii repository select process model stages output event flow named finished 
notation formulate query constructed direct manipulation 
showing particular dynamic component link instances query run link component link icons component instances links serendipity ii repository query constraints 
example user specified want base stage component linked event flow named finished 
users specify optional links match conditions attribute names shown result 
queries run locates components match specified query 
displayed great components links may match query 
exact copy query visualisation display query result 
component matching component specification query visualised matching components added pop menu item component icon query result 
component specification linked component visualised matching component subquery visualised components matched added pop menus 
user may successively select differently matched component instances component icon query result viewing different subquery results 
illustrated 
base stage matches query visualised query result linking query view icons matching component instances 
base stage matched user select matches popup menu item 
instances event flow component base stage linked event flow link change user selects different base stage 

dynamic component query 

discussion systems developed attempt provide static dynamic visualisations event component systems 
example visualage java provide limited java beans component static visualisation capabilities support generation java beans classes 
similarly provides tool specifying generating clock components 
tools generally provide range different kinds component visualisations jcomposer filters actions relationship components 
dynamic visualisation component systems allow users configure systems 
examples include met 
systems allow users compose systems combining components appropriate manner 
provide visual event handling configuration 
visual query languages developed database case tool repository inspection 
examples include graphical querying er models case tool repository querying 
approaches visual querying usually attempt fully formulate queries visually results conventional textual manner 
took approach allowing users notation queries component structures queried visually attribute constraints done textually 
convenient users cumbersome fully visual query languages 
visual query structure results query users provides easily navigated visualisation matching software components textual output 
alternative visualise matching software components resulting potentially large component interconnection graphs 
various approaches exist visualise output queries useful application domain 
event software system visualisation techniques include zhang dataflow languages prograph 
simple annotation techniques jcomposer cumbersome cluttered visual annotations 
visualisation running component event propagation currently simplistic straightforwardly enhanced filters actions 

summary described variety novel static dynamic visualisation techniques component software systems 
developers systems need facilities statically specify components component interconnections event handling systems 
jcomposer tool provides systems utilising jviews component software architecture 
provides dynamic visualisation capabilities systems including component inspection component interconnection visualisation event handling enhancement visual querying jviews component structures 
enhancing jcomposer additional notation example distinguishing reused built scratch components inherited user specified component interconnections allowing change description events visually displayed diagrams 
adding method calling links notation allow intercomponent method calls distinguished event propagation 
enhancements allow developers easily understand complex aspects component systems significant numbers reused components disparate change descriptions propagated 
investigating improved automatic layout algorithms views large graph structure visualisation vr techniques assist understanding large component software 
bird open systems see query language proc 
th conference software engineering environments ieee cs press netherlands 
consens visualising querying software structures proc 
th international conference software engineering ieee cs press australia may 
cox giles prograph step programming textual conditioning ieee computer society press proc 
ieee workshop visual languages pp 

elmasri rusinkiewicz embley graphical data manipulation language extended entity relationship model computer vol 

eades feng drawing large graphs clustering proc 
software visualisation department computer science university australia dec 
graham morton visual programming componentbased software architecture journal visual languages computing july 
grundy hosking visual language supporting design tool abstraction proc 
ieee symposium visual languages ieee cs press germany september pp 

grundy hosking mugridge coordinating collaborative integrated information systems engineering environment proc 
th workshop generation case tools crete may 
grundy hosking mugridge unified event software architecture proc 
sigsoft workshops acm press october pp 

grundy mugridge hosking java toolkit construction multi view editing systems proc 
second component users conference munich germany july 
grundy hosking mugridge visualising event software systems issues experiences proceedings dept computer science university australia december 
grundy hosking serendipity integrated environment support process modelling enactment coordination automated software engineering vol 
grundy hosking mugridge support user specification workflows coordination tool integration journal user computing vol 
may 
lotus tm www lotus com 
java beans specification sun www javasoft com beans 
ibm visual age java tm ibm www software ibm com ad 
liu visual interface querying case repository proc 
ieee symposium visual languages ieee cs press pp 

netscape visual javascript tm www netscape com products 
stankovic graphical composition passing programs proc 
workshop software visualisation department computer science university australia dec 
yang fry logical design methodology relational databases extended entity relationship model computing surveys vol 

wagner ackerman black box reuse frameworks visual programming proc 
st component users conference sigs books 
visual approach developing understanding analyzing parallel programs proc 
ieee symposium visual languages ieee cs press pp 

zhang zhang visual programming environment distributed systems proc 
ieee symposium visual languages ieee cs press germany 
borland tm borland www borland com 
