plan driven ubiquitous computing author institute 
goal human centered ubiquitous computing hide details computing environment allowing users concentrate goals direct management devices 
describes system operates level goals plans individual resources 
adaptively selects plan library plan best achieve user goal light preferences current resource availability 
plan resources selected monitors execution plan dispatching subtasks ready executed 
ubiquitous computing ubicomp research produced resource discovery mechanisms programming environments middleware user interfaces simplify creation applications adapt different resources available various computing environments :10.1.1.15.7105
despite advances research addressed ubicomp application sensors actuators computing devices available order help user carry task 
consequently ubicomp applications operate myopic mode lacks ability proactively assist user task inform user unfamiliar task gracefully fail explain rationale behavior resources unavailable 
david tennenhouse similar observation reflecting advances computing power ubiquitous computing possible 
due vast number devices available people speed devices operate tennenhouse proposes need new abstractions better manage behavior devices attempt help everyday lives 
need ubicomp applications smarter way assist users describe plan driven execution model ubiquitous computing describe system implementation supports model 
earlier area proposed task driven model ubiquitous computing approaches treated task merely set applications progress task modeled application state :10.1.1.119.381
fundamental problem approach focused wrong item applications tools carry task don necessarily represent task 
author choose look task focus user goals 
task user goal mind accomplished completing task step task may require tool complete contributes attaining goal 
demonstrate equipping ubicomp applications explicit plan representation user task representation includes steps involved task resources needed task causal data flow relations steps provides ubicomp applications degree proactivity current applications possess 
particular plan driven ubiquitous computing provide benefits higher level abstraction designing ubicomp applications 
perspective application developers working plan representation task allows decoupling application behavior actual implementation behavior 
example plans abstraction aggregate resource requests 
higher level abstraction communicating intent 
users applications goal want achieve individual actions perform 
application produce plan achieve goal plan guide interaction user 
automatic configuration environments 
knowing user plans application reserve necessary resources configure devices user may soon need 
better informed systems 
explicit representation particular task application guide users steps task unfamiliar 
multiple things task user tend system help direct user focus task requires attention 
self adaptive systems 
application detects component failure representation user plan suggest alternate course action achieve intended goal 
situations variety intelligent environments ies ranging kiosks personal offices meeting rooms 
differing physical settings unique sets equipment driven common software base 
particularly appealing away details specific devices focusing common goals bring facilities plans achieve goals characteristics resources needed populate plan 
system describe allows happen doing applied techniques ai literature techniques rational decision making area ubiquitous computing 
scenarios plan driven ubiquitous computing illustrate value plan directed execution helpful look provides assistance everyday activities 
scenarios simple common ones show plan directed execution model naturally model direct behavior 
room lighting office lit variety different mechanisms 
extremely bright halogen corner provide warmer light fluorescent mounted ceiling 
large window movable open great deal natural light outside 
adjusting lighting day just issue simple commands darker room control different devices suit 
normally prefers natural sunlight outside room recognizes isn point adjusting dim necessary 
hot summer months room tries added heat just things uncomfortable 
times prefers keep closed privacy office automatically adjust lighting preferences considerations 
informal meetings steve just received reminder undergraduate students scheduled time today discuss research progress 
student enters steve issues command office room gets properly configured session 
discussion consist brainstorming new ideas room turns microphones record flow discussion enables device captures drawings text written large whiteboard desk 
room sure environment lighting suitably bright begins record meeting begins 
meeting environment turns microphone whiteboard devices stores captured information review 
steve occasionally sets room kinds informal meetings 
example student going practicing presentation room dims lighting turns projector uses audio video recording student review problem areas talk 
private personal discussions room ensures recording takes place closes shades privacy 
author scenarios describe interaction users point view course 
meant display utility plan system 
users think terms goal state system darker set room meeting having delve sub tasks necessary achieve state 
account current contextual situation selecting appropriate series steps accomplish goal executing plan execution model simplifies user life considerably 
system architecture paradigm request goal achieved set preferences saying properties important requester speed important privacy 
preferences guide selection plan capable achieving goal find allocation resources needed plan 
generally unreasonable expect user willing explicitly state preferences necessary inform system decision making internal components system goal requests behalf provide complete set preferences 
important sources information relieve user burden set default preferences goal request employed lacking information 
second context plays extremely important role particular task context provides strong leverage determining preferences 
example fact faculty member meeting student sets preference privacy task reading preferred lighting level moderate 
accumulating knowledge base task context preference rules infer individual preferences assembled preference statement 
paradigm context guides selection preferences preferences guides selection plans resources 
presents architectural overview system implements paradigm 
system consists main components plan selector chooses plan best achieves user goal resource manager assigns resources plans plan executor plan monitor carry plan 
plan carried plan executor may consult resource manager conditions may change plan running requiring new resource assignment plan sections describe formal representation plan examine detail pieces plan execution system 
plan monitor resource database plan executor resource manager plan driven ubiquitous computing plan selector plan library fig 

system plan selector chooses best plan achieve user goal plan library 
resource manager assigns resources plan resources resource database 
plan passed plan executor carried 
plan monitor informs plan executor progress plan plans representation user tasks plan decomposition task set partially ordered steps 
step set pre conditions met step performed set post conditions hold step performed 
partial ordering steps plan defined set data flow links causal links ordering constraints 
data flow link step represents material physical information produced causal link represented joins post condition step pre condition step interpreted step achieves precondition required step 
ordering constraint steps denoted represents fact step precedes necessarily immediately step ordering constraints represent control flow plan prevent race conditions performing step effect performing step pre condition enabling step 
step plan may require set resources subject certain constraints 
example plan step require computer display device subject constraint mechanism available pipe computer output display display video switch 
resource capable meeting plan needs example remote screen network service resource pipes computer output display device 
general choice resources bound late light actual operating conditions execution time 
addition plan may include hierarchical substructure 
substeps plan may contain explicit internal plans may statement goal requiring selection plan capable realizing goal 
resource allocation decision may bound late allowing current conditions influence choice 
author plan individual steps plan set annotations 
annotation information relevant carrying plan plan steps require special attention fail recommended orderings steps modulo partial ordering imposed plans causal ordering links instructions service estimated service qualities provided carrying plan plan may accomplish task high degree privacy slow manner 
plans represented graphically directed acyclic graph 
plan prepare steve office student meeting 
light room start audio recording start whiteboard capture verify room ready meeting hold meeting fig 

sample plan whiteboard capture audio recording process meeting record system middleware layer written java represent plans user progress plans 
addition capturing basic plan features described allows plans defined hierarchically plans modified carried 
features allow plans reused plans allow steps late bound plan beneficial defer choice specific plan action execution time 
plan selection reason adopting plan directed viewpoint facilitate adaptation change conditions intelligent environment operates 
particular set resources available assumed constant equipment breaks new facilities installed software system migrated new physical facility tasks may desired resource 
deal raising level abstraction users components system interact 
centering requests specific resource specific type resource interface centers requester goals 
typical goals information plan driven ubiquitous computing change illumination level space 
system job find plan capable satisfying goal currently available resources 
observations particular goal may relevant plans room lit opening turning light information printer display verbally voice synthesizer 
plan requires set resources satisfying certain constraints 
plan display information printer requires printer connection printer ink 
plan displays information projector requires projector display surface 
resources dynamically varying degree availability printer may busy projector display surface may white board drawing 
plans satisfy goal may deliver different qualities service 
printing printer certainly slower display usually readable 
qualities service delivered plan may may relevant user moment 
fact printer slow doesn matter purpose skim information times speed may matter crucially 
user generally agent posting goal set preferences different qualities service prefer speed privacy request preference image quality 
observations led design centers cost benefit tradeoffs possible ways satisfy goal select approach best meets user preferences quality service minimizes highly contested resources 
achieve follows see dynamically assign resource cost reflecting availability value consumable resources ink task 
secondly transform user service preferences numerical utility function measures particular plan satisfies stated preferences 
third maintain library plans capable achieving type goal 
plan annotated meta data describing types resources required constraints ensemble resources 
plan annotated meta data describes qualities service delivered set resources 
meta data dynamic procedural character represented backward chaining rules pattern directed reasoning system 
goal request set preferences qualities service system considers plan capable achieving goal 
plan considers set resources capable meeting plan resource author user user utility function service quality parameters plan selector goal plan plan plan resource resource resource fig 

plan selection mechanism resource cost function constraints 
plan resource set calculates cost resources utility qualities service delivered 
chooses executes plan maximizes ratio utility delivered resources consumed 
key step process transforming set user preferences service qualities single numerical utility function 
consider admittedly simple goal illuminating room 
service qualities include lighting natural artificial lighting bright moderate soft privacy maintained opening shades impacts privacy 
conveyed lisp notation define goal illuminate privacy private public source natural artificial quality bright moderate soft user preferences expressed collection individual statements compares set features 
example individual quality preference statement state natural light privacy twice bright artificial light 
written source natural privacy private quality bright source artificial plan driven ubiquitous computing statement taken things equal user preferences set individual preferences 
example represent fact user prefers natural light twice artificial moderate intensity times bright intensity natural lighting times privacy source natural source artificial quality moderate quality bright source natural privacy private convert set service quality preferences utility function rely techniques developed doyle 
basic idea transform assertions graph node graph represents particular assignment values preference variables 
arc drawn nodes related preference statement 
arcs added assign value node assigning value node outgoing arcs 
nodes value iterating outgoing arcs maximizing product arc weight value target node arc utility function simply looks node corresponding set preference variables returns node variable 
attached plan set meta data saying kinds resources required quality service parameters bound 
example symbols treated logic variables bound unification prolog 
read saying plan provides natural light privacy 
requires controller works daytime providing lighting level equal amount daylight define plan light daylight goal illuminate features source natural privacy public quality amount daylight resources controller resource constraints type controller controller context time day daytime daylighting amount daylight similar definitions plans room lamps plans daylight lamps 
shows trace reasoning process followed preferences request cloudy day determined call weather service author lights please privacy required privacy required default method light daylight features privacy public source natural quality moderate resources controller cost utility tradeoff method light features privacy public source natural quality bright resources controller lights controller cost utility tradeoff best method light daylight features privacy public source natural quality moderate value resources controller fig 

reasoning process finding lighting plan resource management suggested previous sections plan executor need directly specify precise devices plan execution 
rely resource management capability described gajos allows plans specify needs terms resource descriptions 
resource description system example requesting projector display processed resource management system find possible projector displays perform arbitration determine existing displays appropriate 
requester desires provide contextual information room currently meeting mode resource manager assist arbitration 
approach allows easily support user preferences example user prefers particular projector room multiple displays easily adjust changing conditions run time having define separate plans individual resource 
plan designers concentrate defining necessary steps accomplish goal result usable wide variety situations 
designers forced create multitude plans enumerate capabilities just environment desires just user 
resource management framework system allows user select resource manager suits needs 
resource managers range complexity simple name table lookup way high level management tools perform sophisticated needs matching re allocate resources fly 
planning system plan driven ubiquitous computing sense simpler lightweight approach incorporate user favored resources contextual information requiring great deal processing time arbitration mechanism handled plan selector longer term issues re allocation resources handled diagnosis recovery routines initiated plan monitor 
planning system aim resource management quickly identify appropriate set resources respect user preferences selection process 
purpose developed new resource management module utilizing house semantic network knowledge base 
semantic network resource module allows selection favored resources dependent highly contextual situations inside environment knowledge representation 
allows handle user preferences different dimension quality service 
just times user want specify prefers speed quality times want say location really want display considerations biased plan selector quality service evaluation fetch resources suggestions user contextual preferences 
example users describe situations office steve usually uses projector having meeting uses second setting different preference resources see returning projector preference resource matches current situation accurately 
preferences requestor steve request projector result projector conditions steve office preferences requestor steve request projector result projector conditions steve office office mode meeting fig 

example preferences described lisp format sake readability 
conditions described preference matched request time current layout semantic network allowing tailor resource list returned current data 
example plan selector plan executor requests resource description projector steve behalf finds preferences network requester request name 
take ensuing list filter preference doesn match current conditions ordering number conditions matched 
return author possible results requester example plan selection phase just top ranked result field 
resource manager plan selection see section assist determining best plan user goals 
execution phase determine appropriate resources current room state conditions room may change plan running example user may altered preferred lighting setup want room new preferences immediately 
plan execution monitoring specific plan chosen execute resources assigned plan carries plan 
plan applications need provide functionalities plan executor carries steps plan plan monitor watches progress plan 
plan executor interprets plan step annotations step may dispatches necessary information software components complete step 
steps ready dispatched preconditions met ordering constraints satisfied 
implementation steps carry consist generic resource description display name method offered service show list arguments pass method name presentation 
executor calls method specific resource assigned plan 
interpreting plan determining steps ready dispatch necessary consider fact person application may performing particular task noted annotation step may complete successfully regardless responsible performing step 
reasons necessary plan monitoring component 
user performing task plan monitor able determine finished task 
number approaches making determination perceptual techniques observe infer user done step adopting turn discourse modeling approaches indicate user done step 
moment adopt simpler approach plan monitoring listen explicit user cues indicate completed task button press vocal statement done support monitoring failure plans steps test state world expected bounds 
case control passed diagnosis recovery unit remedy problem 
application plan model task carried user model diagnosis natural approach diagnose failures 
diagnosis recovery scope current discuss section 
discussion plan driven ubiquitous computing described system guides intelligent environment behavior plan driven execution model 
idea supporting user different stages plan computation similar idea traditional workflow number key differences 
main difference workflow task structure static rigidly dictates person 
plan driven execution model allows greater degree dynamism plan execution time account user context expressed current preferences knowledge resource management system 
late binding steps plan pre post conditions plan diagnosis recovery features provided typical flow systems 
issue diagnosis recovery area came experiences building system 
currently system support sort plan step including perform sort monitoring function plan monitor handle case steps indicate gone 
implementations plan monitor incorporate model diagnosis technique takes advantage plan representation tasks determine proper way recovering errors encountered plan execution 
improving mechanism plan monitor determines person completed step area 
addition explicit cues currently provided user indicate done step implementations plan monitor infer perceptual cues stereo cameras activity maps activities occurring complete 
done conjunction research group combining bottom approach top methodology 
noted section plan selection mechanism may considering number plans may require set resources evaluate possibilities regard quality service provided combination 
naturally raises question plan selection phase require great deal time reach 
current number plans fairly small resource selection tailored resources available environment problem 
possible imagine complex planning systems exploring resources environments time 
attempting develop heuristics able quickly pare number combinations need evaluated keep situation intractable 
developing complex plan achieve certain goal useful design plan terms sub goals knit complex structure 
probably useful simply specify subgoal plan executor launch new process develop select sub plan fly 
problem approach author generate sub optimal planning subplan resource requirements impact plan selector utility function creating plan 
re examining ways handling gracefully having plan selector create simple bounded estimates sub plan utility estimates generating plan 
generating utility functions take advantage bounded estimates propagate plan hierarchy useful approach 
revisiting scenarios seen plans selected populated resources enacted monitored 
briefly return motivating scenarios see techniques contribute 
lighting just issue simple command darker 
request darker translated goal request set preferences 
current state room lighting command taken mean levels illumination higher current preferable current lower levels 
default preferences specify natural lighting preferable artificial default says summer lighting desirable artificial lighting 
individual components preference assembled compiled utility function evaluate various plans 
plan considered resource manager consulted returns specific combinations lamps consistent usual preferences 
plan uses overhead lights selected handed executive enactment 
agents called plan terminates successfully failed example worked diagnosis recovery service invoked come different plan 
informal meeting students enter steve issues command room gets properly configured session 
discussion consist brainstorming 
room turns information capture devices 
meeting environment turns capture devices stores captured information 

personal discussions room ensures recording takes place closes see context infer set preferences 
particular task meeting important plan includes information capture private meeting case preferences reversed 
preference guide plan selection just lighting example 
case plan complex involving major sub steps setup space conduct meeting restore space prior state process distribute captured information 
plan monitor easily determine setup phase completed responsible conducting activities stage rely human input tell meeting 
phases plan driven ubiquitous computing execute serially phases clean process information may execute parallel plan constraints ordering contend common resources 
related mentioned section high level notion task introduced ubiquitous computing formal notion plan missing 
wang introduces notion task driven computing means directing aura infrastructure configure devices user maintain sense continuity moves place 
model tasks modeled collection services service descriptions find appropriate resources provide services 
emphasis view task driven computing supporting mobile user works general task worked applications editing watching video canonical examples 
service oriented view task sufficient 
notion task somewhat limited office scenarios providing required services done assist user 
domains tasks far richer connotation includes description specific steps done dependencies steps 
domains ubicomp applications far greater potential assist users performing mundane plan steps warning user doing run counter task 
building ubicomp applications plan driven execution model allows added user benefit domains service oriented view tasks 
christensen idea task driven computing model describing early prototype activity centered computing infrastructure support hospital workers 
similar aura system tasks treated firstclass objects serve abstractions applications state data related activity 
novel aspect system rule expert system infers user activity context 
initial experiences system promising raise issues 
issues system provide additional value users currently system provides support follow applications mainly data access support non composite activities 
plan model activities provide insight additional support provided easier compose simpler activities complex ones 
open agent architecture oaa facilitator agent coordinates interaction agents 
oaa facilitator agent performs task management recursively decomposing task subgoals prolog backward chaining manner 
facilitator routes subgoals agents achieve 
similar approach resolving goal selecting set plans albeit lower level unclear oaa facilitator dispatches tasks agents 
primary author intent oaa create distributed agent architecture dispatching mechanism considers user preferences considering agent assignments 
shown ubiquitous computing infrastructure highly adaptive reasonably standard ai planning rational decision making techniques 
paradigm goal plan driven user provides high level request goal achieved set preferences saying properties important requester 
preferences inferred knowledge system informed task context default settings 
preferences guide selection plan capable achieving goal find allocate resources needed plan 
plan selected best meets user needs enacted plan executive dispatches subtasks enabled monitors execution checking things proceed intended 
described breakdowns encountered model diagnosis characterize failure help plan recovery 
combination explicit plan representations dynamic decision making allows system respond variations execution environment adaptive manner 

adjie winoto schwartz balakrishnan lilley 
design implementation intentional naming system 
th acm symposium operating systems principles sosp kiawah island sc december 

ken arnold bryan sullivan robert scheifler jim waldo ann wollrath 
jini specification 
addison wesley reading ma 

henrik christensen jakob 
supporting human activities exploring activity centered computing 
ubicomp pages sweden 

michael coen phillips nimrod luke stephen peters peter finin 
meeting computational needs intelligent environments metaglue system 
nixon gerard simon dobson editors st international workshop managing interactions smart environments pages dublin ireland december 
springer verlag 

david konrad neal trevor darrell 
activity maps location aware computing 
ieee workshop applications computer vision orlando florida december 
ieee 

anind dey gregory abowd daniel salber 
conceptual framework toolkit supporting rapid prototyping context aware applications 
human computer interaction 

krzysztof gajos 
resource manager multi agent systems smart spaces 
proceedings 
plan driven ubiquitous computing 
krzysztof gajos luke howard shrobe 
design principles resource management systems intelligent spaces 
proceedings nd international workshop self adaptive software budapest hungary 

david garlan dan siewiorek peter steenkiste 
project aura distraction free pervasive computing 
ieee pervasive computing april june 

jeffrey hightower barry brumitt gaetano borriello 
location stack layered model location ubiquitous computing 
proceedings th ieee workshop mobile computing systems applications wmcsa pages ny june 
ieee computer society press 

kim gary look jo sousa 
supporting plan user assistance 
technical report irs tr intel research lab seattle 

david martin adam cheyer douglas moran 
open agent architecture framework building distributed software systems 
applied artificial intelligence january march 

michael jon doyle 
efficient utility functions ceteris paribus preferences 
proceedings eighteenth national conference artificial intelligence pages edmonton alberta canada july 
aaai 

brad myers robert malkin michael alex waibel ben robert miller jie yang matthias edgar jie zhu hong peck dave kong jeffrey nichols bill scherlis 
modal multi machine user interfaces 
ieee fourth international conference multimodal interfaces pages pittsburgh pa october 

stephen peters shrobe 
semantic networks knowledge representation intelligent environment 
percom st annual ieee international conference pervasive computing communications ft worth tx usa march 
ieee 

shankar brian lee armando fox pat hanrahan terry winograd 
service framework ubiquitous computing environments 
ubicomp atlanta georgia september 

manuel rom christopher hess renato anand ranganathan roy campbell klara nahrstedt 
gaia middleware infrastructure enable active spaces 
ieee pervasive computing october december 

howard shrobe 
computational vulnerability analysis information survivability 
proceedings eighteenth national conference artificial intelligence pages edmonton alberta canada july 
aaai 

david tennenhouse 
proactive computing 
communications acm may 

wang david garlan 
task driven computing 
technical report cmu cs carnegie mellon university may 
adm cs cmu edu cs html 
