dealing software testing estimation distribution algorithms preliminary research jose lozano roberto luis testing major phase software life cycle 
important problems testing raises automatic generation input cases applied software test 
alternative tackling problem evolutionary testing eld aims creating software test cases combinatorial optimization search methods 
evolutionary testing approach automatic generation test cases 
developed alternative estimation distribution algorithms optimization tool 
results obtained performed experiments show set heuristic search methods promising choice dealing problem 
keywords test case generation evolutionary testing estimation distribution algorithms testing constitutes primary way verify correct behaviour produced software usually half project resources dedicated 
tasks related software testing generation input cases applied programme test especially di cult 
reason twofold 
hand produced input adequate test type requirements 
fact organizations test cases generated manually results high expenditure resources 
automatic generation test cases desirable turned main working lines software testing 
test data generation strategy structural testing 
structural testing methods aim creating test inputs ful ll structural adequacy criterion 
adequacy criteria come de ned entities revealed programme source code 
example entities branches ow control take conditional statement de ne branch coverage criterion programme branch intelligent systems group www sc ehu es isg department computer science arti cial intelligence university basque country 
mail si ehu es team mail es exercised 
order know level completion attained set test cases coverage measure provides percentage exercised structural entities 
approaches obtaining test cases structural testing dynamic test data generation 
alternative instrumented version programme constructed 
input executed instrumentation brings information concerning exercised structural entities 
information assess closeness inputs cover desired entities guide search new inputs executed 
eld interest researchers evolutionary testing 
aim evolutionary testing seek test cases formulating optimization problem process 
problem solved employing modern combinatorial optimization techniques 
describe evolutionary testing approach automatic generation test cases show encouraging results conducted experiments 
proposed method deals branch coverage adequacy criterion step process selection branch exercise search input reaching branch 
search step carried estimation distribution algorithms edas 
edas set evolutionary algorithms replace classical crossover mutation operators estimation probability distribution associated selected individuals sampling distribution create population 
rest organized follows 
section reviews evolutionary testing 
section iii general edas 
developed approach described section iv 
experiments carried results shown 
obtained included 
ii 
evolutionary testing evolutionary testing software test data generation making modern heuristic combinatorial optimization techniques 
typical examples techniques simulated annealing tabu search genetic algorithms gas 
manner heuristic technique takes part remains open eld date concentrated mainly structural test data generation whilst usual heuristic optimization method ga bulk existing works system described 
iterative process conforms dynamic test data generation strategy 
step entity selected actual goal function associated 
function formulated executed input exercises goal value minimum value proportional closeness measure obtained information instrumented programme 
simple function minimization technique applied nd input covering goal entity 
evolutionary testing approaches idea previous system come motivated fact space de ned inputs goal generally large complex 
simple local search methods perform poorly spaces easily fall local optima sophisticated search techniques suitable alternative 
repeat stopping criterion met select entity exercise obtain input minimizing function fig 

test case generation scheme 
developed works consist basically achieving adequacy criterion scheme shown 
di erent strategies exist selection common trend determine objective entity help graph re ects structural characteristics programme 
case branch coverage control ow graph commonly 
type graph vertex represents code basic block maximal sequence statements executed arc control programme able ow execution block crossing block 
graph branches come de ned vertex outdegree 
objective branch selected optimization problem tackled precise search space formed programme inputs function ir nd obviously function take minimum value input reaches objective entity 
branch coverage created strategy 
expression conditional statement cond code op denoting comparison operator value executed input determined function cond reached ax bx cond reached objective attained highest computable value ax bx appropriate representation values taken execution ax bx distance measure ax bx previously de ned constant 
commonly numerical ax bx values ax bx jax bx case complex data types binary representation values obtained instance ax bx hamming distance 
case compound expression objective function constructed partial functions subexpression 
subexpressions respective functions input value logical expression logical expression calculated value known propagating negation inside associating di erent logical expressions value obtained 
type objective function ga branch coverage 
simulated annealing proposed 
function smoothed account level proximity inputs reaching conditional statement branch objective gas search method 
iii 
estimation distribution algorithms eda approach comprises set emerging population evolutionary algo rithms 
contrast classical evolutionary computation heuristics gas eda approach crossover mutation operators 
individuals forming population generation obtained sampling probability distribution previously estimated selected individuals 
probability distribution responsible main characteristics edas explicitly describes relationships variables de ning individuals 
concepts refer discrete domains variables individuals discrete 
extended description including continuous domains refer 
context evolutionary algorithms individual genes considered instantiation xn dimensional random variable xn 
population th generation selected individuals se constitute data set cases xn 
joint probability distribution come denoted 
edas estimate se probability individual selected individuals 
pseudocode eda 
selection step carried existing strategies evolutionary computation truncation selection 
individuals selected treated data base joint probability distribution estimated 
gure distribution th generation represented xjd se 
simulated create individuals population means probabilistic logic sampling 
steps repeated previously de ned stopping criterion met 
key point edas estimated 
computation parameters factorized probability model limits possible dependencies variables xn leads approximations assuming di erent levels complexity models 
alternatives range variables mutually independent restrictions variable interdependencies 
problem solve strongly limited model re ect possibly existing dependency variables estimation fast easy 
hand restrictive model able show dependencies variables generate individuals randomly repeat stopping criterion met se select individuals xjd se estimate probability individual se sample individuals fig 

pseudocode eda 
computational cost may expensive 
complexity probability model eda instances classi ed univariate bivariate multivariate 
univariate edas assume dimensional joint probability distribution decomposed product univariate independent probability distributions examples type eda univariate marginal distribution algorithm umda population incremental learning pbil 
case umda estimated relative frequencies data set se contrast pbil obtains updating means hebbian inspired rule requires extra parameter 
bivariate eda approaches second order statistics order estimate joint probability distribution apart probability values structure re ects dependencies learnt 
factorization done models category form jx variable depends 
case bivariate eda mutual information maximization input clustering mimic restricts variables depend 
algorithm searches minimizing kullback leibler divergence respect empirical probability distribution associated se case bivariate eda tree adaptation combining optimizers mutual information trees comit algorithm 
tree estimated maximum weight spanning tree mwst algorithm construction tree structure 
multivariate edas express joint probability distribution statistics order greater obviously require elicitation structure 
factorization follows jpa pa instantiations pa set variables depends 
estimation bayesian network algorithm example multivariate eda 
bayesian network bn learnt se estimate 
bn pair directed acyclic graph representing dependencies variables set conditional probability values needed de ne joint probability distribution 
method learn structure associated bayesian network leads di erent versions bic pen pc examples structures di erent edas observed 
mimic tree fig 

example structures edas 
iv 
estimation distribution algorithms applied evolutionary testing alternative propose conforms general scheme 
system deals branch coverage programmes 
code branch take di erent states covered treated uncovered untreated 
stopping criterion full coverage achievement treatment objective branch 
optimization phase phase tries solve optimization problem raised section ii means eda 
individual string representing input tness value taken function implementation done described section ii 
information needed calculate tness value obtained performed instrumentation programme 
instrumentation returns values taken expressions conditional statements execution input represented individual 
set individuals associated branch 
set seed population eda branch selected objective 
notion seeding exploited works :10.1.1.55.6736
objective branch xed individual evaluated branch 
branch exercised state marked covered input stored tness individual better worst individual set associated branch replaced set new better individual 
branch previously treated state marked untreated 
shows evaluation algorithm individual value function associated branch input represented 
translate individual input execute instrumented programme repeat uncovered branch find tness worst individual set associated substitute set associated mark covered mark treated objective fitness return fitness fig 

pseudocode evaluation algorithm 
eda nishes minimum input covering objective branch maximum number generations reached 
rst case state objective branch marked covered second treated uncovered 
eda approach applied multivariate edas adequate problem simpler alternatives existence variable interdependencies appears evident 
generally input parameters act programme variables turn interact affecting variables leading nonlinear combinations determine branches followed control ow 
branch selection phase selection phase follows proposed 
control ow graph identify branches initialization stage help deciding branch select process 
candidate objective branches untreated state 
branch objective best mean tness individuals associated set 
case tie breadth rst search carried tied branches selection lowest level control ow graph 
pseudocode selection algorithm observed 
best objective tie false repeat untreated branch average tness individuals associated best best objective best tie true tie true objective breadth rst search branches best value return objective fig 

pseudocode selection algorithm 
idea face optimization problem promising population seed available moment 
noted possible branch treated candidate objective optimization phase new individual introduced set 
reason mean tness set better optimization promising population seed 
execution example illustration developed approach explain steps hypothetical system execution source code shown 
gure presents function written programming language returns solution exists quadratic equation 
input consists integer parameters representing equation coe cients 
int quad int int int double int sqrt printf integer solution printf integral solution int quad int int probe init probe probe dist double probe probe dist probe probe int sqrt probe probe probe probe dist probe probe printf integral solution printf integer solution fig 

example function control ow graph instrumented version output le 
firstly control ow graph obtained instrumented version programme constructed shown 
execution instrumented code output le contains line traversed basic block numbered control ow graph previous block conditional statement values sub expression calculated strategy section ii 
seen gure instrumentation uses arti cially created probe functions 
call probe init initializes output le required memory vector 
probe dist function calculates appropriate distance measurement second third parameters stores result position memory vector rst parameter 
example distance absolute value di erence parameters numerical 
probe function writes output le new line containing basic block number parameter sub expression value memory vector 
example output le 
system startup programme branches detected control ow graph bound population individuals created uniform distribution 
done test case generation iterative process begins 
assume branch de ned arc selected objective round 
coverage objective pursued eda minimization function block reached jd block reached block reached highest computable value value taken internal variable code execution represent integer parameter bits individual string length 
evaluation individual string translated programme input instrumented programme execution 
suppose obtained input instrumentation results 
tness individual value input 
exercised branch line block result jd value 
individual evaluated performed execution discarded output le calculate function value branch distinct objective 
value improves tness worst individual set associated branch worst individual replaced actual branch marked untreated 
eda run objective branch maximum number generations reached minimum 
rst case objective branch marked treated uncovered second covered 
eda nishes iteration process begins 
experimental results order observe approach performs practice generated test cases versions classical programme 
programme widely software testing experimentation 
input composed numerical parameters representing length segment 
aim detect triangle type associated input 
version programme parameters integers experiments took values interval 
oating point parameters interval 
versions distinct implementations integer parameters interval chosen :10.1.1.55.6736
important note di erent implementations algorithm lead distinct code structures ect results test case generation 
order idea programme characteristics table re ects values structural complexity measures 
care taken measures necessarily represent complexity programme regard branch coverage 
branch number column shows number branches number objectives 
nesting depth column points maximum nesting level branches code maximum number conditional statements ful lled order cover branch 
myers interval column lower bound number conditional statements plus upper bound number expressions conditional statements plus refering compound expressions 
table experimental programmes characteristics 
programme branches nesting myers edas examples section iii applied experiments pbil parameter set case instances bic pen adopted 
generation half population selected strategy 
new individuals simulated means probabilistic logic sampling population created elitist way 
maximum number generations set 
tables ii show results experiments di erent population sizes 
cell values executions 
rst row provides average number generated test inputs process second average coverage measure highest coverage achieved executions 
table ii results 
pop 
edas size umda pbil mimic tree bic table iii results 
pop 
edas size umda pbil mimic tree bic observed cases average coverage surpasses population big reached 
hardest programme test case generator 
number generated inputs lower works ga optimization method chosen :10.1.1.55.6736
edas perform great success constitute major di erence respect works 
considering input parameter intervals best results obtained versions near inputs generated 
regard di erent parameter intervals chosen gray codi cation approximately inputs created 
binary codi cation parameter interval decrease number table iv results 
pop 
edas size umda pbil mimic tree bic table results 
pop 
edas size umda pbil mimic tree bic generated inputs obtained 
results improved taken account dealt condition decision coverage harder criterion involving branch coverage :10.1.1.55.6736
results conform attained application edas problems 
edas quality solution similar attained gas number required generations lower 
tables show generally smaller populations umda provides better results 
population size grows multivariate edas improve average coverage coverage reached number generated inputs remarkably lower rest edas 
indicates required conditions met obtain optimum far fewer generations alternatives 
results serve reinforcement suggestion section iv adequacy multivariate edas dealing problem 
vi 
new approach automatic generation test cases described 
approach edas searching test inputs ful branch coverage criterion 
obtained results experiments edas powerful option tackling problem 
attained coverage number generated inputs signi cantly lower works 
precisely multivariate edas promising alternative 
capacity expressing dependencies problem variables key point dependencies usually exist trying coverage particular branch 
method orientated study approach test case generation manages di erent lengths interval values associated input parameter 
interesting issue small interval decrease search space size simplify problem 
supported basque government ministry science technology ue tic respectively 
supported department education universities research basque government programme formation researchers 
authors wish joachim wegener help provided 
baluja population incremental learning method integrating genetic search function optimization competitive learning technical report cmu cs carnegie mellon university 
baluja davies combining multiple optimization optimal dependency trees technical report cmu cs carnegie mellon university 
beizer software testing techniques van nostrand new york 
castillo expert systems probabilistic network models springer verlag new york 
chow liu approximating discrete probability distributions dependence trees ieee transactions information theory 
de bonet isbell viola mimic finding optima estimating probability densities advances neural information processing systems 
goldberg genetic algorithms search optimization machine learning addison wesley 
glover laguna tabu search kluwer academic publishers 
harman hu hierons baresel sthamer improving evolutionary testing flag removal proceedings genetic evolutionary computation conference gecco pages new york 
henrion propagating uncertainty bayesian networks probabilistic logic sampling uncertainty arti cial intelligence pages northholland amsterdam 
sierra feature subset selection bayesian networks optimization arti cial intelligence 
jones sthamer automatic structural testing genetic algorithms software engineering journal 
kirkpatrick vecchi optimization simulated annealing science 
korel automated software test data generation ieee transactions software engineering 
lozano pea combinatorial optimization learning simulation bayesian networks proceedings sixteenth conference uncertainty arti cial intelligence pages stanford 
lozano estimation distribution algorithms 
new tool evolutionary computation kluwer academic publishers 
mcgraw michael schatz generating software test data evolution technical report rst sterling virginia usa :10.1.1.55.6736
equation response selection prediction evolutionary computation 
sthamer automatic generation software test data genetic algorithms phd thesis university wales great britain 
tracey clark mander mcdermid automated framework structural test data generation proceedings th ieee conference automated software engineering pages hawaii usa 
wegener baresel sthamer evolutionary test environment automatic structural testing information software technology 
