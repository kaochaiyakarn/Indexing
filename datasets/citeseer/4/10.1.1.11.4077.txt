model test generation processor verification yossi lichtenstein yossi ibm israel science technology haifa israel yossi vnet ibm com simple expert system techniques invaluable developing new test program generator design verification hardware processors 
new generator uses formal declarative model processor architecture allows generation test programs variety processors duplication effort 
heuristic knowledge base representing knowledge testing techniques allows generation tests 
knowledge base captures information kept experts formally documented 
furthermore complexity changeability non visibility architectural details testing knowledge previous test generation systems reduced new data bases 
search backtracking mechanism comprises generator allows generation complex test programs 
ibm invested dollars developing model test generation system 
architectures modelled system 
include cisc processor floating point unit computer vector floating point unit implementations powerpc architecture 
silicon realizations designs shown comply architectural specification 
designs testing 
indications new technology reduces verification period decreases time market verification high risc processor required calendar months contrast fifteen months needed verifying simpler processor previous test generation technology 
goal processor verification ensure equivalence processor architectural specification 
goal achieved formal proof exhaustive simulation 
state art formal techniques complexity processors render formal approach incomplete large industrial applications 
exhaustive simulation impossible test space enormous 
practice design verification carried simulating relatively small subset selected test programs 
run design simulation model results compared output predicted architecture simulation model 
systems generate tests processor verification chandra iyengar typically sustain high degree complexity changeability 
complexity processor architectures hundreds instructions dozens functional units groves informal description reflected generation system 
furthermore design verification gets way architecture evolving typical test generation system undergoes frequent changes 
architecture testing knowledge modelled procedurally generation system visibility low 
worsens effects complexity changeability 
new approach test generation design verification proposed 
termed modelbased test generation heart formal model architecture 
complexity changeability invisibility tackled separating logic control specifically separating architectural model architecture independent generation process 
complexity system reduced separation architecture visible formal declarative model likewise changeability problem eased considerably new modelling approach 
model test generation approach allows incorporation complex testing knowledge 
knowledge base conjunction architectural model includes heuristics represent testing engineers expertise 
knowledge base employed generate probing test cases allows experts add knowledge local relatively simple way 
rest organized follows 
previous techniques automatic test generation design verification summarized section test program generation 
describe problematic aspects generation systems motivation modelbased approach analyze manually written tests section knowledge acquisition 
model generation scheme described stages basics section basic modelling generation complete model section modelling generation 
actual model test generation system described section system results usage conclude section results 
test program generation processor design verification usually carried simulating relatively small subset compared exhaustive set selected tests 
tests run design simulation model results compared output predicted architecture specification 
behavioral simulator represents architecture normally written software development purposes prior having actual hardware 
approach processor verification consists steps 
selection generation tests 
second step comparison results predicted levels simulation models 
simulators provided selected tests stimuli simulators final states compared 
design verification manually written tests cost effective 
typically thirds design effort dedicated verification powers schnabel 
furthermore tests simple test engineers find difficult define complex situations 
automation test program generation increased productivity years provided better quality 
productive writing tests manually early automatic test program generation limited tran lee 
standard approach pseudo random selection instructions data predefined static tables 
yields restricted space test programs 
alternative approaches tie simulation generation gain complex tests 
generation process interleaved instruction execution intermediate processor state generation process decisions dynamically 
generation employs pseudo random selection bias boundary exception conditions 
simple example generation data add instruction biased exercise frequently condition sum zero exception overflow 
biasing similar partitioning input domain suggested weyuker ostrand generation directed select inputs tests partitions particular small input classes 
ibm random test program generation example dynamic biased pseudo random generation processor design verification 
successful experience similar systems reported papers 
example chandra iyengar verifying different ibm processors 
example static test generator augmented dynamic model demons verifying dec cpu anderson 
typical generation system comprises instruction level architectural simulator instruction generator includes biasing capabilities models special functional units storage control unit user interface software allows users direct test generation 
motivation development random test program generators described previous section prone usual software development difficulties 
brooks brooks essential difficulties may identified test generation projects complexity changeability invisibility 
complexity computer architectures complex 
typical architecture includes hundreds instructions dozens resources main memory generalpurpose registers special purpose registers complex functional units floating point address translation external interrupt mechanism 
architectures defined informally english typical description pages long 
furthermore procedures test architectures source complexity 
usually intricate procedural descriptions involve resource initializations instruction sequences 
changeability design verification starts architecture evolving 
changes architecture specifications quite frequent usually described informally consequences generation system difficult identify 
furthermore changes generators due evolving testing knowledge accumulated validation process 
new testing needs rise frequently consequence previous testing results uncovering design errors 
invisibility architecture testing knowledge modelled generation systems 
architecture modelled simulation generation blocks generator 
testing knowledge embedded generation procedures systems 
modelling procedural tightly inter connected 
visibility low 
approach tackle complexity changeability invisibility separating knowledge control kowalski 
knowledge includes formal description architecture heuristic procedural representation testing knowledge reside external database 
control architecture independent gen eration process may viewed interpreter architectural model 
complexity problem lessened strong separation database control 
furthermore keeping architectural simulator separate generator removes major source system complexity 
invisibility decreased formal declarative modelling architecture 
confining changes database considerably alleviates changeability problem 
fact architecture represented external data base gives proposed approach name model test generation 
best knowledge system model techniques design verification 
modelbased approaches domains particular diagnosis davis reiter de kleer williams differences emphasized model describes architecture include structure implementation identified principles generation domain 
external data base contains heuristic knowledge base representing testing knowledge 
opens generation system users accumulative experience enables tool follow progress testing process 
furthermore allows migration testing knowledge architecture design 
knowledge acquisition hand written test programs analyzed basis design system 
experienced test engineers asked summarize hundreds test programs 
provided descriptions high level verification goals detailed verification tasks dozen groups test programs realizing verification tasks 
detailed analysis data lichtenstein observations analysis 
verification tasks described terms domains 
operation domain operands instructions sequences instructions 
second hardware domain set hardware facilities include resources register sets memory functional units address translation cache pipeline 
tasks specify instances operation domain associate elements operation domain resources events related functional units 
verification tasks described indicate necessary model resources instructions 
addition verification tasks terms address operand terms related different aspects computation carried instruction 
instruction modelled semantically syntactically 
major deviation previous generation systems emphasized syntax instructions 
tasks important attributes operation domain 
particular length address data essential operands exceptions condition codes special results pertinent instructions 
notion data type data values operand take implied 
furthermore aspects verification tasks complex procedural concluded modeled procedural open knowledge base 
test programs classified interdependencies embedded 
dependencies ordered increasing complexity follows operand inter operand inter instruction 
turn ordered short long sequences 
basic modelling generation test programs sequences instruction instances architecture resources 
section describes example model instructions explains basic generation scheme 
section completes modelling details brings full generation procedure 
full modelling scheme relation processor modelling compilation techniques appear lichtenstein 
appendix gives somewhat formal description syntax semantics instruction model 
memory register resources described isps barbacci memory declaration includes memory name size memory cells range addresses 
example main memory may addressable bytes mainmemory 
word registers second example may array sixteen bytes storage units word register 
instructions modeled trees semantic level processor architecture 
instruction described tree format semantic procedure root operands sub operands internal nodes length address data expressions leaves 
expressions instruction format alphabet represent static relations operands 
relations change execution instruction 
central automatic generation tests modelled declaratively 
address expressions denote immediate fields registers memory storage various addressing modes 
length expressions denote size storage operand 
data expressions just literals denoting data types 
declarative modelling full semantics automatic generation complex practical 
approach employed gives power generate useful revealing test programs whilst keeping complexity generator model reasonable 
time needed generation kept acceptable limits 
example add word instruction tree add word simplest instructions typical cisc architecture 
informally meaning instruction add second operand place sum operand location instruction tree depicted subsequent list 
resources assumed main memory base registers word registers 
operand instruction operand add word ffl instruction semantic procedure add word format aw opcode ffl operand represents register source target sub operand register signed binary 
ffl second operand represents memory storage base register displacement comprising source operand sub operand contents register value signed binary 
sub operand field displacement data type 
sub operand register address data type 
illustrate inter operand relationships complexity instructions relatively complex cisc instruction appendix move character long 
generation instruction tree describes set 
length address data expressions model replaced length address data instances form instruction instance 
replacement consistent relations described expressions 
fields resources shared sub operands values selected identical 
section describes consistent instances process generating instruction trees 
generation scheme traverses instruction tree depth order 
root internal nodes action taken 
leaves length address data instances set previous selections randomly selected semantics corresponding expressions 
scheme ensures consistency generated instruction instances 
level detail generation scheme identical prolog interpretation instruction tree 
example add word instruction instance instruction tree add word instruction tree traversed depth order node labels denote generation order 
instance add word instruction depicted 
ea add word instance instruction instance sets syntax semantic entities add word instruction 
syntax format instance aw 
semantic domain includes contents word register number contents base register number contents main memory word ea 
modelling generation declarative architectural model lacks ability describe complex aspects architecture incorporate testing knowledge 
furthermore basic generation scheme clarify consistency kept selecting length address data instances 
modelling heuristic procedural knowledge base relation instruction trees full generation details described 
testing knowledge generation validation functions generation validation functions basic blocks generation scheme 
functions implement generate test strategy alongside traversal instruction trees 
testing knowledge model procedural declarative 
believe complexity diversity testing knowledge declarative modelling difficult impossible 
classes examples testing knowledge simplified ease exposition 
generation functions generation scheme traversing instruction tree 
node traversed generation functions associated invoked 
outputs functions generate instances current sub tree 
generation functions serve various purposes ffl modelling condition codes inter operand verification tasks instruction execution may result setting condition code bits 
effect part instruction specification modelled semantic procedure 
condition codes partition input domain instruction 
common testing knowledge input partitioning generation function may bias data operands exercise condition codes 
program exceptions modeled manner 
ffl modelling program exceptions inter operand program exceptions exceptional conditions raised instruction execution 
modelled semantic procedure may viewed input partitioning 
ffl modelling procedural aspects resources modelling resources registers memory ranges simplistic actual architecture 
particular address translation cache mechanisms common computer architectures 
generation functions incorporate inputs test mechanisms test programs 
ffl data type special values operand domain typed data instances may partitioned 
common require representatives data type partitions tested 
ffl modelling design implementation various aspects hardware design usually taken consideration verification process 
aspects considered part architecture testing considered essential 
validation functions generation scheme 
generating sub instance tree validation functions associated corresponding sub instruction tree invoked 
returns reject answer generation results subtree retracted sub tree traversed 
validation functions serve different purposes imposing restrictions modeled length address data expressions instruction instances 
preventing instruction instances causing program exceptions 
validating typed data instances 
generation validation functions building blocks heuristic knowledge base provide open system section motivation 
fact generation functions allowed produce simple data types length instance data instance enables knowledge engineer express testing knowledge natural local manner 
ability generate sets instances associate functions instructions operands sub operands gives functions desired expressiveness 
generation functions allowed create full instruction instances complex written users 
simplicity allows openness possible model evolving testing knowledge 
example add word generation functions add word instruction tree augmented generation functions 
illustrate various objectives may achieved generation functions example generation functions add word ffl modelling condition codes execution add word sets condition code sum zero sum zero sum greater zero 
function generate sum zero aw associated root instruction tree 
generates random possible data instances appropriate sub operands sum zero 
ffl modelling program exceptions add word may cause effective address overflow exception happens contents base register points memory segment address formed addition register displacement points different segment 
generation function generate effective address overflow associated second operand 
generates data instances appropriate sub operands cause effective address overflow 
ffl modelling procedural aspects resources address instance may resident cache hit 
likewise address length instances sub operand instance may render significant byte hit function generate hit includes knowledge cache mechanism associated memory address second operand 
generates address length instances randomly exercise hit combinations 
ffl data type special values function generate unsigned binary extremes associated unsigned binary data leaves 
generates data instances selected randomly values near values ffl modelling design information generation function associated root may test carry look ahead mechanism ward halstead 
produces data instances unsigned binary leaves result different carry patterns look ahead boundaries 
example case half word adders data values ffff exercise carry passed adders 
function check half word adders represents knowledge implementation arithmetic logic unit 
generation test generation divided procedures generate test generate 
uses dynamic generation process see section test program generation elaboration depth traversal backtracking 
resource manager exists background generation process 
manages processor state essential dynamic generate test algorithm 
essential generate test initialize minimal processor state number instructions select instruction denote model instruction tree gen instance generate instruction tree empty simulate instance semantic procedure instance executable write test file increment number instructions retract instance restore processor previous state retry limit exceeded go gen abort return success generate test invoke node generation functions add outputs kept outputs node internal node immediate descendants generate descendant kept outputs reject returned restore kept outputs retry limit exceeded generate descendant kept outputs return reject return accept node leaf select node kept outputs output select randomly instance node expression semantics instance satisfy expression return reject return accept invoke node validation functions returns reject return reject return accept generate node kept outputs resolving address expressions 
generation validation functions query resource manager allocation contents resources 
information select resources validate instruction tree expressions 
system model test generator developed techniques described 
described system comprises architectural model simulator architecture independent generator user interface 
generator userinterface implemented spanning lines code 
detailed description system lichtenstein 
test programs user interface test generator architecture simulator architecture model testing knowledge system components interrelations architectural model contains specification instructions resources data types defined appendix heuristic knowledge base includes generation validation functions implemented section modelling generation 
types data stored frames data base classes instructions operands fields resources data types functions defined 
skeleton class hierarchy 
population data base carried knowledge engineer familiar specific architecture 
knowledge engineer uses informal architecture books written english source architecture model 
testing knowledge written knowledge engineer testing experts familiar modelling scheme 
motif user interface offers extensive control generation process 
apart ability determine number instructions test initialize resources user direct generation levels global local specific 
levels characterized scope control offer 
global selections pertain generation process local selections apply instance instruction generated fi instruction domain operand data type address length resource alignment sub operands generation functions generation functions field mnemonics data type exception validation functions generation functions data domain length alignment bounds values validation functions generation functions address scalar resource domain size register name type array bounds bit bounds synonyms memory address ranges functions domain prototype source code generation input parameters output parameters validation instruction opcode format operands cond codes exceptions restrictions root class hierarchy skeleton nally specific level selections bear particular instances generated instructions 
generator interprets user directives selection generation functions values input parameters 
manner user controls generation functions invoked generate procedure section modelling generation 
example global selections window 
great importance attributed efficiency automatic test generation 
modifications applied instruction generator order efficient 
constraint solvers introduced avoid superfluous backtracking due violation relations values leaves instruction tree specified length address expressions solver activated appropriate internal nodes instruction tree simultaneously assigns values leaves relations violated 
results ibm invested dollars developing model test generation system 
investment went testing knowledge acquisition development rest put developing test generator 
indications new technology reduces verification period decreases time market 
particular verification high risc processor required calendar months contrast fifteen months needed verifying simpler processor previous test generation technology 
test generation system model global selections window processor architectures verify implementations 
table summarizes current verification experience 
processor column indicates architecture type powerpc state art architecture reduced instruction set computer risc 
powerpc processors implement super set architecture plus signs indicate complexity design 
processors floating point units fpu cisc stands complex instruction set computer 
defects stage columns indicate actual results 
number design defects rough measure complexity design verification 
ultimate measure success number silicon realizations needed achieve fully functional processor 
verification processes completed silicon realizations fully functional 
complex processors practical impossibility manual test production 
considered major achievement automatic test generation 
architectures modelled differ instructions repertoire structure inter operand relations resources functional units 
architecture consists hundreds instructions specified architecture book requires costly intricate verification scheme 
complex architecture modelled date includes instructions lines procedures representing testing knowledge resides megabyte database 
diversity architectures modelled necessitated changes modelling described 
example length address expression languages expanded class containing sequences instructions introduced express pre post conditions generation certain instruction instances validation functions activated simulating generated instruction instance 
ba table results system processor defects stage powerpc silicon fully functional powerpc silicon tested powerpc silicon fully functional powerpc verification process vector fpu preliminary verification fpu modelling cisc modelling sic modelling technique coped different architectures testing knowledge 
particular generate test technique embodied generation validation functions useful handling subtle architectural features keeping explicit modelling complex 
complex test programs corresponding verification tasks described acquisition generated architectures modelled 
verification tasks instruction operand levels representative data instances different operand lengths program exceptions fulfilled generation functions 
register memory allocation policies produce complex dependencies instructions 
functions conjunction allocation policies generate long instruction streams accomplishes inter instruction verification tasks 
testing knowledge base specify testing expertise previously informal difficult reuse 
example verification powerpc design suite testing knowledge defined 
included generation functions validation functions totalling lines code 
subsequent powerpc processors table verified knowledge 
example testing expertise ansi ieee standard binary floating point arithmetic ansi 
accumulated verification different implementations spanning years 
expertise incorporated knowledge base generate tests current implementations standard 
examples data base serves knowledge repository capturing expertise organization making formal reusable 
major weakness new technology performance 
previous generator produces instructions second workstation 
model test generator produces instructions second similar conditions 
feel slow factor compensated better quality tests discussed 
analysis return investment new technology performed 
preliminary results indicate reduces verification costs 
provides defect distributions designs processor level verification phase 
verification process previous test generation technology processor utilized new generator processor 
number design defects plotted number billions simulation cycles correspond number size generated tests 
processor high risc processor number table processor risc system earlier processors 
verification processor required times simulation cycles needed processor 
simulation period reduced fifteen months processor months processor 
factors translate cost simulation huge number cycles requires hundreds computers running continuously design testing teams long periods expensive 
numbers graph may indicate possibility employ testing knowledge gives tests better quality fewer simulation cycles needed uncover design defects 
verification processor close generation system modelling testing knowledge 
relied heavily random test generation giga cycles simulation 
contrast possibility direct generation user defined testing knowledge emphasized quality verification processor 
conclude indications new test generation technology may obtain higher quality reduce time market 
acknowledgments wish rochester haifa teams participating model test generation project 
particular wish andy supervising cooperation dave goodman charlotte metzger bill oswald moshe gil moshe 
defect distribution appendix instruction trees set unique literals identifiers assumed literals resource field data type names denote field values 
definitions field triplet name values register name literal referred field name values set literals register reserved literal register name 
format finite set field names 
formats alphabets languages representing possible addresses lengths operands defined follows definitions address expression format described syntactically grammar address expression field field name value field name register field name specific register register name integer contents address expression address expression address expression restrictions field name field name field name values register register field name values register register 
register name resource name 
semantic domain address expressions consists memory addresses 
rule denotes data resides directly corresponding field known immediate field 
rules denotes values corresponding fields rule denotes field values interpreted memory addresses 
rule denotes field values interpreted registers 
rule denotes specific register word register number denoted specific register word register 
rule denotes contents address indicated inner 
semantics rule standard 
definition length expression format described syntactically grammar length expression integer maximum integer value field name contents address expression length expression length expression length expression length expression field name field name values register register semantic domain length expressions consists positive integers 
meaning rules standard 
rule denotes length smaller equal integer 
rule denotes values corresponding field 
rule denotes contents addresses denoted address expression 
definition data expression literal denoting data type 
semantic domain data expressions strings data 
data type describes set data strings length fixed variable limits structure 
address length data expressions collectively model basic semantic entity model 
sub operands grouped operands 
formats semantic procedures operands form instruction model 
definition sub operand format triplet holding length expression address expression data expression 
operand format finite set sub operands semantic procedure procedure manipulates architecture resources represents operation performed instruction 
instruction tree triplet holding format semantic procedure finite set operands input generation process instruction tree output set instruction instances definitions field instance field name values register literal values 
format instance format field inst inst field definitions address instance address expression ae resource address semantics ae 
length instance length expression le integer semantics le 
data instance data expression de data data type denoted de 
definitions sub operand instance le ae de triplet li ai di li length instance le ai address instance ae di data instance de 
operand instance operand sub inst inst consistent sub operand instance sub instruction instance instruction tree format semantics operands pair format inst operand insts format inst instance format operand insts consistent instances operands 
appendix move character long instruction tree effect instruction place contents second operand storage location 
second operand shorter data third operand appended fill storage operand 
addresses lengths second operands storage locations 
indirection structures pointed base registers displacement fields 
instruction operation may interrupted address length representing partial operation recorded indirection structures 
resources assumed main memory 
ffl instruction semantic procedure move 
format opcode 
ffl operand sub operand contents contents register value contents contents register value unsigned binary 
sub operand contents register value indirection data type 
sub operand field displacement data type 
sub operand register address data type 
ffl second operand similar ffl third operand sub operand field unsigned binary 
note length address sub operand related contents data second sub operand 
address second sub operand related data remaining sub operands 
move character long exemplifies cisc instruction structure relatively complex data obeys nonstandard data types indirection data type execution may long interruptible 
bar david dorfman 
verification ibm risc system dynamic biased pseudo random test program generator 
ibm systems journal 
anderson 
logical verification cpu chip design 
international conference computer design iccd 
ansi 

ansi ieee standard binary floating point arithmetic 
barbacci 
processor specification 
siewiorek bell newell eds computer structures principles examples 
mcgraw hill 

automatic generation microprocessor test programs 
acm ieee th design automation conference proceedings 
brooks 
silver bullet essence accidents software engineering 
ieee computer 
chandra iyengar 
constraint solving test case generation technique high level design verification 
ieee international conference computer design iccd 
davis 
diagnostic reasoning structure behavior 
artificial intelligence 
de kleer williams 
diagnosing multiple faults 
artificial intelligence 
kowalski 
logic problem solving 
north holland 
lichtenstein 
model test generation processor design verification 
technical report tr ibm israel 
groves 
ibm risc system processor architecture 
ibm journal research development 
powers schnabel 
development complex 
ibm research development journal 
reiter 
theory diagnosis principles 
artificial intelligence 

assembler language programming ibm system family 
addison wesley 
tran lee 
vlsi design verification strategy 
ibm journal research development 
ward halstead 
computation structures 
mit press 
weyuker ostrand 
theories program testing application revealing subdomains 
ieee transactions software engineering 
