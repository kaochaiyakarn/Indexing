jan chomicki gunter saake ron van der meyden logics emerging applications databases springer berlin heidelberg newyork barcelona budapest hong kong london milan paris santa clara singapore tokyo contents list contributors 
ix query answering inconsistent databases 
bertossi jan chomicki 
consistent query answers 
query transformation 
specifying database repairs 
computational complexity 
aggregation queries 
related 
open problems ongoing 
acknowledgments 

index 
preface come golden words editor place firstname surname month year firstname surname list contributors bertossi school computer science carleton university ottawa canada bertossi scs carleton ca jan chomicki dept computer science engineering university buffalo state university new york buffalo ny usa chomicki cse buffalo edu hasan arizona state university department computer science engineering tempe az usa asu edu thomas eiter technische universit wien institut informationssysteme vienna austria eiter kr tuwien ac michael fink technische universit wien institut informationssysteme vienna austria michael kr tuwien ac institute cnr pisa italy cnuce cnr michael kifer stony brook university department computer science stony brook ny usa kifer cs edu nils klarlund att labs research park avenue florham park nj usa klarlund research att com giuseppe institute cnr cs italy cnr john jules ch 
meyer utrecht university institute information computing sciences intelligent systems group box tb utrecht netherlands jj cs ruu nl mukherjee stony brook university department computer science stony brook ny viii usa cs edu technische universit wien institut informationssysteme vienna austria kr tuwien ac thomas schwentick universit marburg fachbereich mathematik und informatik marburg germany tick informatik uni marburg de middle east technical university department computer engineering ankara turkey edu tr dan university washington computer science engineering box seattle wa usa suciu cs washington edu david toman school computer science university waterloo university avenue west waterloo canada david uwaterloo ca hans tompits technische universit wien institut informationssysteme vienna austria tompits kr tuwien ac jef university institut informatique avenue du de mars belgium jef ac yang stony brook university department computer science stony brook ny usa cs edu query answering inconsistent databases bertossi jan chomicki school computer science carleton university ottawa canada bertossi scs carleton ca dept computer science engineering university buffalo state university new york buffalo ny chomicki cse buffalo edu 
chapter summarize research querying inconsistent databases conducting years 
formal framework concepts repair consistent query answer 
describe different approaches issue computing consistent query answers query transformation logic programming inference annotated logics specialized algorithms 
characterize computational complexity problem 
discuss related research artificial intelligence databases logic programming 
chapter address issue obtaining consistent information inconsistent databases databases violate integrity constraints 
basic assumption departs everyday practice database management systems 
typically database management system checks satisfaction integrity constraints backs updates violate 
day database applications consider variety scenarios data necessarily consistent integration autonomous data sources 
sources may separately satisfy constraints integrated constraints may hold 
instance consider different conflicting addresses person taxpayer voter registration databases 
databases separately satisfies functional dependency associates single address person violate dependency 
sources autonomous simply fixed satisfy dependency removing conflicting tuples 
unenforced integrity constraints 
integrity constraints capture important part semantics application may fail enforced variety reasons 
data source may legacy system support notion integrity checking altogether 
integrity checking may costly reason dropping integrity constraints database schema 
dbms may support limited class constraints 
temporary inconsistencies 
may case consistency database temporarily violated updates transactions leo bertossi jan chomicki expected restore 
phenomenon common databases increasingly involved variety longrunning activities workflows 
conflict resolution 
removing tuples database restore consistency leads information loss may undesirable 
example may want keep multiple addresses person clear correct 
general process conflict resolution may complex costly non deterministic 
real time decision making applications may time resolve conflicts relevant query 
formalize notion consistent information obtained possibly inconsistent database response user query propose notion consistent query answer 
consistent answer intuitively true regardless way database fixed remove constraint violations 
answer consistency serves indication reliability 
different ways fixing inconsistent database formalized notion repair 
repair database consistent minimally differs original database 
summarize results obtained far area collaborators 
studied consistent query answers order scalar aggregation queries 
considered specification repairs logic formalisms 
relate results similar undertaken knowledge representation logic programming databases philosophical logic 
pointed studying specific instance logical inconsistency problem case data inconsistent integrity constraints 
address issue deal inconsistent sets formulas general 
standard relational databases negative information represented implicitly closed world assumption inconsistencies appear presence integrity constraints 
classical logical inference presence inconsistency problem database context database systems typically support full fledged order inference 
important able distinguish query answers affected inconsistency 
chapter structured follows 
section define notions repair consistent query answer context order queries 
section corresponding computational methodology query transformation 
section show declaratively specify database repairs logic programming annotated logics 
section discuss computational complexity issues 
section show context aggregation queries definition slightly modified discuss corresponding computational mechanisms 
section discuss related approaches handling inconsistent information 
section open problems 
consistent query answers inconsistent databases basic assumption inconsistent database necessarily going repaired way fully restores consistency 
database queried distinguish information database participates integrity violations 
typically small part database inconsistent 
need precise notion consistent correct information inconsistent database 
specifically problem consists 
giving precise definition consistent answer query inconsistent database 
finding computational mechanisms obtaining consistent information inconsistent database 
studying computational complexity problem 
example 
consider relational database instance employee name salary page page smith stowe instance violates functional dependency name salary tuples 
inconsistent database 
consistent information 
example tuples participate integrity violation 
order characterize consistent information notice possible ways repair database minimal way deletions insertions tuples allowed 
give rise different repairs employee name salary employee name salary page page smith smith stowe stowe see certain information stowe persists repairs participate violation fd 
hand information 
page persist repairs participates violation pieces information repairs know employee name page 
information obtained simply discard tuples participating violation 
leo bertossi jan chomicki assume fixed relational database schema consisting finite set relations 
fixed disjoint infinite database domains uninterpreted constants numbers 
assume elements domains different names different 
database instances seen finite order structures schema share domains attribute relation typed instances contain elements single attribute 
instance finite finite active domain subset 
usual allow standard built predicates infinite fixed extensions 
domain equality built predicate 
elements build order language integrity constraints integrity constraints typed closed order formulas 
assume dealing single set integrity constraints ic consistent set logical formulas 
sequel denote relation symbols 
pm tuples variables constants 
xm formula referring built predicates 
represent ground tuple relation fact 
practically important integrity constraints called simply dependencies chapter expressed sentences form pi xi pi xi 
xn xi 
chapter discuss classes integrity constraints special cases 
universal integrity constraints sentences 
xn 
pi xi 
denial constraints sentences 
xm 
pi xi 
xm 
pi xi 
xn 
special case universal constraints 

binary constraints universal constraints occurrences database relations 

functional dependencies fds sentences inconsistent databases 

special case binary denial constraints 
familiar formulation fd set attributes corresponding set attributes corresponding 

referential integrity constraints called inclusion dependencies inds sentences 
xi sequences distinct variables contained database relations 
written resp 
set attributes resp 
corresponding 
clear context omit write dependency simply ind written existential quantifiers called full 
denial constraints particular fds inds common integrity constraints occurring database practice 
fact commercial systems typically restrict fds key dependencies inds foreign key constraints 
set fds inds ic relation attributes key minimal set attributes ic entails fd case say fd ic key dependency ind ic foreign key constraint 
additionally primary key kinds dependencies termed primary 
seen fd example 
fds inds example 
show examples denial constraints 
example 
consider relation emp attributes name salary manager name primary key 
constraint employee salary greater manager denial constraint emp emp 
similarly single tuple constraints check constraints sql special case denial constraints 
example constraint employee salary expressed emp 
leo bertossi jan chomicki definition 
database instance set integrity constraints ic say consistent ic standard modeltheoretic sense inconsistent 
reiter characterized relational databases order theories axiomatizing unique names domain closure closed world assumptions 
theory categorical sense admits original database seen order structure model 
consequence satisfaction model replaced order logical entailment 
context database consistent respect set integrity constraints entails theory set integrity constraints 
alternative notion database consistency database consistent union theory consisting atoms database set integrity constraints consistent usual logical sense 
notions consistent relational database just definition turn equivalent relational databases may differ open knowledge bases see discussion 
example 
consider binary relation ab functional dependency instance consisting tuples inconsistent definition 
set formulas defined inconsistent standard logic sense 
repairs database instance set facts set ground atomic formulas relation name ground tuple 
distance data base instances defined symmetric difference 
definition 
database instance repair database instance set integrity constraints ic 
schema domain 
satisfies ic 
distance minimal set containment instances satisfying conditions 
inconsistent databases note denial constraints repairs instance subsets see example 
general constraints repairs may contain tuples belong instance removing violations referential integrity constraints done deleting inserting tuples 
example 
consider database relations personnel ssn name manager ssn 
functional dependencies ssn name name ssn inclusion dependency manager ssn ssn 
relations instances personnel ssn name smith jones smith manager ssn instances violate ind violate fds 
consider fds repairs obtained removing third tuple personnel removing tuples relation 
second repair violates ind fixed removing tuple manager 
consider constraints repairs obtained deletion personnel ssn name smith jones personnel ssn name smith manager ssn manager ssn additionally infinitely repairs obtained combination deletions insertions form personnel ssn name smith manager ssn arbitrary string different smith 
definition reflects assumption information database may incorrect incomplete 
assumption warranted leo bertossi jan chomicki information integration approaches :10.1.1.48.4048
hand restricting repairs subsets original database assumption information database complete necessarily correct 
assumption appropriate context data warehousing dirty data coming sources cleaned order part warehouse 
variation notion repair assumes different notion minimality minimizing symmetric difference may minimize cardinality 
discuss issue section 
dimension repair concept introduced proposed repairs obtained modifying selected tuple components 
queries consistent query answers queries formulas language integrity constraints 
query closed sentence free variables 
closed query quantifiers called ground 
conjunctive queries queries form 
xm 
pm xm 
xm 
xm conjunction built predicate atoms 
conjunctive query repeated relation symbols called simple 
definition standard definition 
tuple answer query iff formula replaced true query instance want consistent answers tuples unaffected violations integrity constraints definition 
tuple consistent answer query database instance set integrity constraints ic iff answer query repair ic sentence consistently true ic true repair ic symbols ic repair ic example 
example continued holds 
employee stowe 
employee page employee page 
employee page inconsistent databases notice definition approach leads stronger notion inference inconsistent databases approach simply discarding conflicting data 
approach inferences example possible 
universal integrity constraints number repairs finite database finite 
referential integrity constraints may lead infinitely repairs example 
having infinitely repairs problem approaches computing consistent query answers construct representation repairs approaches logic programming section 
slightly different notion repair allowing tuples nulls inserted database 
reflects common sql database practice 
approach entity integrity constraint inherent relational data model prevents null values appearing primary key 
example 
consider example 
infinitely repairs replaced single repair personnel ssn name null smith manager ssn ssn attribute designated primary key name attribute remains key 
avoid dealing infinitely repairs restricting repairs subsets original instance 
different notion repair definition notion consistent query answer changes 
general restricted repairs stronger consistent query answers illustrated example 
example 
consider database schema consisting relations ab 
integrity constraints fd ind assume database instance 
repair subset 
hand definition repair 
case consistently true original instance second case 
note consistently true 
treated symmetrically point view consistent query answering 
intuitively difference 
think person name leo bertossi jan chomicki address list valid addresses 
restricted notion repair single valid address returned consistent answer 
sequel notion repair definition clearly indicating cases different notion applied 
computing far semantic definition consistent query answer possibly inconsistent database notion database repair 
retrieving computation database repairs feasible 
fds number repairs may large 
example 
consider functional dependency family relation instances rn tuples represented columns repairs rn develop various methods computing explicitly computing repairs 
methods split categories 
query transformation 
query set integrity constraints ic construct query database instance set answers equal set consistent answers ic approach proposed order queries :10.1.1.12.3324
case transformed query order straightforward translation sql evaluated relational database engine 
note construction repairs entirely avoided 
implementation extended version method described 

compact representation repairs 
set integrity constraints ic database instance construct space efficient representation repairs ic representation answer queries 
different representations considered context 
repairs answer sets logic program 
compact representation program obtain consistent answers runs program 

repairs distinguished minimal models theory written annotated predicate logic 
inconsistent databases 
repairs maximal independent sets hypergraph nodes database tuples edges consist sets tuples participating violation denial constraint 
approach applied quantifier free order queries aggregation queries 

interaction database instance integrity constraints represented analytical tableau closed due mutual inconsistency database integrity constraints 
implicit openings tableau repairs 
implementation issues consistent query answering analytic tableaux non monotonic reasoning discussed 
sections describe approaches 
query transformation consider order queries universal integrity constraints 
query rewrite preserving original database instance 
query transformed qualifying appropriate information derived interaction query integrity constraints 
forces satisfaction integrity constraints possible discriminate tuples answer set 
technique inspired semantic query optimization 
precisely query new query computed iterating operator transforms query conjoining database literal appearing corresponding residue fixed point reached 
residue 
residue database literal forces satisfaction integrity constraints tuples satisfying literal 
residues literal obtained resolving literal integrity constraints 
example 
consider integrity constraints ic query 
residue wrt constraint satisfied residue true constraint satisfied 
similarly residue wrt second constraint 
consequence query asks transformed query 
literal residues wrt integrity constraints integrity constraints constrain 
want query rewrite query new query pose ordinary query 
expect ground tuple ic 
leo bertossi jan chomicki explain conditions equivalence holds 
example 
example continued fd written xyz 
employee employee 
query employee expect obtain consistent answers smith stowe page page 
residue obtained resolving query fd employee 
note get residue resolving query second literal constraint 
rewritten query follows employee employee returns exactly smith stowe answers consistent answers original query 
general needs iterated may need consider residues residues 
consequence depending integrity constraints original query may need iterate infinite fixed point obtained 
example necessary literal employee appended residue residue wrt 
iteration 
example 
example continued sets residues relevant literals literals residues literal residue 
query transformed 
apply appended residues obtaining 

inconsistent databases obtain reached fixed point 
important properties transformation approach soundness completeness termination 
soundness means answer consistent answer completeness means consistent answer answer 
termination means valid formula 
defines general sufficient conditions soundness transformation approach encompassing essentially integrity constraints occur practice 
completeness harder achieve 
proves completeness transformation approach queries conjunctions literals binary generic integrity constraints 
constraint generic ground database literal logical consequence 
example may query binary integrity constraints ic 
disjunctive existential queries may lose completeness 
example 
example pose ground disjunctive query employee page employee page straightforward application operator produces rewritten query employee page employee page employee page employee page 
answer truth value false original database instance definition consistent answer consistently true instance 
termination guaranteed syntactically syntactically 
shows property holds kind queries iff set integrity constraints ic acyclic ic acyclic exists function 
pn 
pn leo bertossi jan chomicki constraint li xi ic li lj 
level mapping similar mappings associated stratified hierarchical logic programs complementary literals get values independently 
set denial constraints fds acyclic 
example termination syntactically guaranteed query ic 
provides non syntactic sufficient criteria termination transformation approach 
particular termination multivalued dependencies obtained 
implementation operator 
implementation done top xsb deductive database system tabling techniques possible keep track previously computed residues subsumption :10.1.1.48.4048
way redundant computation residues avoided termination detected wider class integrity constraints :10.1.1.12.3324
xsb allows real interaction ibm db dbms 
query transformation approach limitations 
methodology designed handle universal integrity constraints existential quantifiers necessary specifying referential integrity constraints 
furthermore shown transformation approach fails sound complete disjunctive existentially quantified queries 
failure partially explained complexity theoretic reasons 
restricted classes constraints queries adding existential quantifier leads npcompleteness 
issue discussed depth section 
specifying database repairs far model theoretic definition computational methodology obtain answers classes queries integrity constraints 
missing logical specification database repairs instance satisfying property queries tuples spec ic new suitable consequence relation 
specification consistently answer query asking spec 
example shows non monotonic 
example 
database containing table employee name salary page smith stowe inconsistent databases consistent wrt fd example 
consequence set query employee page smith stowe 
add tuple page database set query reduced smith stowe 
specification spec may provide new ways computing shed light computational complexity problem 
logic programs show specify database repairs inconsistent database means logic program 
order pose answer firstorder query stratified logic program plus new goal query atom obtained standard methodology query evaluated program 
essential part program observation database repaired data persists tuples 
precisely default positive implicit negative data persist repairs tuples added removed restore consistency database 
order capture idea may logic programs exceptions case containing default rules capturing persistence data exception rules stating certain changes integrity database restored 
exception rules higher priority default rules 
semantics answer sets answer set semantics extended disjunctive logic programs :10.1.1.49.9332
logic program exceptions eventually translated extended disjunctive normal logic program answer set semantics 
give example transformed version default rules replaced persistence rules leo bertossi jan chomicki program answer set semantics 
addition disjunction program kinds negation classical negation negation 
example 
consider full inclusion dependency inconsistent database instance 
program specifies repairs contains new predicates corresponding repaired versions resp sets rules 
persistence rules 
defaults say data persists original tables repaired versions 

triggering exception 
rule needed step repair states order locally repair constraint deleting inserting 

stabilizing exceptions 
rules say eventually constraint satisfied repairs 
kind exception rules important interacting integrity constraints local repairs 

database facts 
instantiate rules possible ways underlying domain obtain ground program set ground literals answer set minimal model bm bm ck ci 
complementary literals trivial answer set containing ground literals 
example answer sets program correspond expected database repairs 
indicates underlined literal deleted database second inserted database 
proved class binary integrity constraints defined section exists correspondence answer sets database repairs 
consequence take spec appropriate extended disjunctive logic program notion logical consequence true wrt answer sets program skeptical answer set semantics 
inconsistent databases correspondence results just mentioned obtain method compute database repairs implementation answer set semantics extended disjunctive logic programs 
compute needs way obtain atoms true answer set logic program 
experiments deductive database system dlv reported 
possible extend methodology include referential integrity constraints containing existentially quantified variables 
logic programming approach general applies arbitrary order queries 
systems computing answer sets typically grounding logic program 
database context may lead huge ground programs impractical 
logic programs repairing databases computing wrt arbitrary universal constraints independently introduced 
discussed section 
annotated logics explained section logical specification database repairs 
specification contain information database integrity constraints pieces information mutually inconsistent database satisfy integrity constraints 
including classical order theory lead inconsistent theory reasoning 
consequence want order theory depart classical logic moving non classical logic reasoning presence classical inconsistencies necessarily collapse 
show generate consistent order theory non classical semantics 
annotated predicate calculus apc 
apc database atoms annotated truth values taken truth value lattice 
common annotations true false contradictory unknown 
lattice capture preference integrity constraints conflict data integrity constraints database repaired 
new truth values lattice database values td fd annotate atoms original database resp 
outside 
constraint values tc fc annotate depending sign database literals appearing disjunctive normal form integrity constraints 
built atoms appearing integrity constraints annotated classical annotations advisory values ta fa solve conflicts database integrity constraints favor integrity constraints data subject leo bertossi jan chomicki changes 
represented lattice 
intuitively ground atom annotated td fc gets value fa upper bound values lattice meaning advice false suggested integrity constraints 
facts advisory truth values fa ta derived removed resp 
inserted database order satisfy integrity constraints 
fa ta fc td fd tc fig 

truth value lattice lattice top element reached upper bound lub pair contradictory annotations 
annotations td fc example considered definitely contradictory lub compatible passing lub fa 
conflict data constraint annotation pass lubs database integrity constraints ic appropriate annotations taken lattice embedded single consistent apc theory th ic 
show embedding means example 
example 
example continued integrity constraint employee employee translated employee fc employee fc 
database facts annotated employee page employee page td 
introduce annotated axioms representing unique names assumption closed world assumption 
inconsistent databases way generate annotated order theory th ic 
mentioned navigation lattice adequate definition apc formula satisfaction help solve conflicts database integrity constraints 
notion formula satisfaction herbrand interpretation containing annotated ground atoms defined classical order logic atomic formulas 
definition formulas iff shown database correspondence repairs ic models th ic true minimal set atoms annotated ta fa corresponding fact minimal set database atoms changed 
consequence specification spec postulated section simply th ic corresponding non monotonic notion consequence truth ta fa minimal annotated models theory 
approach produces th ic set advisory clauses processed specialized algorithms 
approach applicable queries conjunctions disjunctions positive literals universal constraints 
logic programs annotation constants method obtain disjunctive logic program ann ic th ic :10.1.1.13.1032
program having stable model semantics specifies database repairs 
program annotations additional predicate arguments standard annotated logic program standard results techniques apply 
give example 
example 
consider database integrity constraints ic example 
logic program effect repairing database 
single local repair steps obtained deriving annotations ta fa 
done constraint considered isolation may interacting integrity constraints repair process may take steps stabilize point 
order achieve need additional auxiliary annotations new special constants language 
annotation example groups annotations td ta atom rules 


new derived annotation provide feedback bodies rules produce local single repair steps propagation changes triggered rule 

annotations just read literals inside resp 
outside repair 
achieved means rules 
interpret models database repairs 
program ann ic leo bertossi jan chomicki 
fa 
ta 
td 
fa 
ta 
td 

fa ta 

td 

td 
td 

ta fa 
ta fa 

ta 
td fa 
fa 
td ta 
ta 
td fa 
fa 
td ta 
rule 
rule dependent integrity constraints 
says repair constraint inconsistency detected 
integrity constraints interacting constraint having passed annotations allow system keep repairing constraint violated due repair different constraint 
rules 
contain database atoms 
rules 
capture closed world assumption 
rules 
denial constraints coherence 
coherent models contain atoms annotated ta fa 
stable models defined exactly answer sets example considering sets ground atoms programs annotations classical negation 
program example stable models td ta td fa saying underlined atoms inserted database second deleted 
correspondence stable models programs ann ic repairs wrt ic established 
consistent answers obtained running query program repair program ann ic skeptical stable model semantics 
programs annotations obtained simpler section sense contain change triggering rule constraint rule 
example natural extension arbitrary universal constraints approach section may produce programs number rules exponential number disjuncts inconsistent databases disjunctive normal forms universal integrity constraints 
method capture repairs referential integrity constraints notion repair allowing tuples nulls discussed section :10.1.1.13.1032
approach general considered far applies arbitrary order queries arbitrary universal referential integrity constraints exception cases may lead violations entity integrity constraint example :10.1.1.13.1032
cases optimizations program possible 
example program just gave head cycle free 
consequence transformed non disjunctive normal program reducing complexity evaluation np :10.1.1.21.1201
repair program annotations head cycle free limitations imposed intrinsic computational complexity problem consistent query answering 
computational complexity summarize results computational complexity consistent query answers 
adopt data complexity assumption measures complexity problem function number tuples database instance 
query integrity constraints considered fixed 
query transformation approach cases terminates provides direct way establish ptime computability consistent query answers 
original query order transformed version 
way obtain ptime precisely ac procedure computing transform query evaluate original database 
note transformation query done independently database instance affect data complexity 
example example query transformed similarly query example order query evaluated ptime despite presence exponential number repairs 
query transformation approach sound complete terminating restricted classes queries constraints 
specifically results imply binary denial constraints full inclusion dependencies consistent answers computed ptime queries conjunctions literals 
logic programming approaches described section asymptotic complexity properties complete classes logic programs :10.1.1.21.1201
open question far boundary tractable intractable pushed context 
earlier version containing results shows complexity computing depends type constraints considered number size query 
new classes consistent query answers ptime identified leo bertossi jan chomicki ground quantifier free queries arbitrary denial constraints closed simple repeated relation symbols conjunctive queries functional dependencies fd relation ground quantifier free closed simple conjunctive queries key functional dependencies foreign key constraints key relation 
additionally analyzes data complexity repair checking problem testing database repair 
assumption repairs subsets original instance 
shown repair checking ptime classes constraints arbitrary fds acyclic inds 
results obtained tight sense relaxing restrictions leads np hard problems 
course preclude possibility introducing additional orthogonal restrictions lead ptime cases 
complete picture shown arbitrary sets fds inds repair checking np complete consistent query answers complete 
outline proof result listed done technique different query transformation 
introduce notion conflict hypergraph serve succinct representation repairs instance 
definition 
conflict hypergraph gf hypergraph set vertices set facts instance set edges consists sets 
pl tl 
pl tl constraint 
xl 

pl xl 
xl 
pl tl violate constraint means exists substitution 
xl tl 
tl false 
independent set hypergraph mean subset set vertices contain edge 
clearly repair corresponds maximal independent set gf prove set denial constraints ground quantifier free query data complexity checking consistently true instance ptime 
assume sentence cnf form 
disjunction ground literals 
true repair clauses true repair 
provide polynomial algorithm check ground clause consistently true 
inconsistent databases easier think checking ground clause true consistent answer 
means checking exists repair true form 
pm tm pm tm 
pn tn tj tuples constants 
wlog assume facts set 
pn tn mutually distinct 
algorithm selects tj edge ej gf tj ej 
additionally global condition needs satisfied edge gf 
tm ej tj 
tj selection succeeds repair true built adding new tuples set maximal independent 
algorithm needs nondeterministic steps number independent size database dependent nondeterministic steps selects possibility set size polynomial size database 
equivalent ptime deterministic algorithm 
aggregation queries far considered order queries databases aggregation queries important 
fact aggregation essential scenarios data warehousing inconsistencies occur keeping inconsistent data may useful 
aggregation queries computing maximum minimum value attribute relation expressed order queries 
case due syntax resulting order query handled query transformation methodology described earlier 
consider restricted scenario integrity constraints limited functional dependencies aggregation queries consist single applications standard sql aggregation operators min max count count sum avg 
case shown computing consistent query answers aggregation queries challenging problem 
example 
consider instance employee example 
inconsistent fd name salary 
employee name salary page page smith stowe leo bertossi jan chomicki repairs employee name salary employee name salary page page smith smith stowe stowe pose query select min salary employee get consistent answer min salary returns repair 
ask select max salary employee maximum comes tuple participates violation fd 
max salary returns different value repair 
consistent answer sense definition 
give new slightly weakened definition consistent answer aggregation query addresses difficulty 
definition 
consistent answer aggregation query respect database instance set integrity constraints minimal interval repair scalar value query belongs 
left right endpoints interval greatest lower bound glb upper bound lub resp answers definition example interval consistent answer query select max salary employee glb answer lub answer resp 
notice consistent query answer interval represents succinct form superset values aggregation query take possible repairs database wrt set fds 
representation interval polynomially sized numeric values endpoints represented binary 
example 
lines example consider functional dependency family relation instances sn rn inconsistent databases aggregation query sum takes exponentially values exponentially repairs database 
explicit representation possible values aggregation function exponentially large 
violate nf assumption 
hand interval representation polynomial size 
consider complexity problem computing lub answers 
complexity results terms data complexity 
classifying problems consistent answering different aggregation queries terms complexity finding polynomial time algorithms tractable cases useful graph representation set repairs 
dealing functional dependencies specialize notion conflict hypergraph definition conflict graph edges contain vertices 
example 
consider schema ab set functional dependencies inconsistent instance schema 
conflict graph gf maximal independent sets correspond possible repairs database 
contains complete classification tractable intractable cases problem computing consistent query answers sense definition aggregation queries 
results summarized follows aggregate operators count problem ptime set integrity constraints contains non trivial fd count problem np complete non trivial fd encode hitting set problem non trivial fd problem checking glb answer query resp 
problem checking lub answer query np complete 
aggregate operators min max count sum single fd glb lub answers computed sql queries sense analogue query transformation approach order queries discussed earlier 
avg ptime algorithm iterative formulated sql 
leo bertossi jan chomicki example 
continuing example greatest lower bound answer query select max salary employee computed sql query select max select min salary employee group name 
special properties conflict graphs restricted cases identified paving way tractable cases 
example fds relation schema boyce codd normal form conflict graphs claw free perfect computing lub answers count queries done ptime 
intractability results appropriate find approximations consistent answers aggregation queries 
unfortunately maximal independent set bad approximation properties 
related discuss related dealing inconsistency artificial intelligence databases logic programming 
attempt characterize various approaches common dimensions including semantics underlying notion inconsistency 
notions repair consistent query answer supported sense 
scope classes databases integrity constraints queries handled 
computational mechanisms consistent information obtained presence inconsistency 
computational complexity 
able delineate scope different approaches observe order propositional order reduced propositional 
approaches far order 
reduced propositional case universal integrity constraints ground queries constraints grounded constants database query 
general classes queries constraints referential integrity constraints reduction apply 
inconsistent databases approaches require grounding query transformation section preferable efficiency point view 
specific dimension computational mechanisms consideration support locality inconsistency 
locality context means consistency violations irrelevant query ignored process obtaining consistent answers query 
clearly locality desirable supported approaches 
query transformation approach section supports locality violations occurring relations mentioned transformed query irrelevant evaluation query ignored 
approaches form specification repairs section support locality require resolution violations construction answer sets minimal models 
algorithm described section constructing conflict hypergraph instance resolve conflicts detect 
ptime algorithms mentioned section support locality 
possible refine non local approaches mentioned way obtain locality 
belief revision update semantically approach consistency handling corresponds approaches followed belief revision update community 
database repairs definition coincide revised models defined winslett 
notion minimality 
comparing framework belief revision empty domain theory model database instance revision set integrity constraints 
revision database instance integrity constraints produces new database instances repairs original database 
scenario adopted belief revision papers general papers typically assume formula equivalently set models undergoing revision domain theory nonempty 
hand research belief revision typically limited propositional case 
implicit notion revision satisfies postulates introduced katsuno mendelzon 
dalal postulated different notion revision minimizing cardinality set changes opposed minimizing set changes set inclusion 
shown capture repairs dalal notion revision means logic programs consistent query answering :10.1.1.13.2821
belief revision community adopted notion inference called counterfactual inference corresponds notion formula consistently true 
counterfactual inference ramsey test conditionals formula counterfactual consequence set beliefs closest context revised way leo bertossi jan chomicki true true 
case database set integrity constraints query 
winslett approach mainly propositional preliminary extension order ground case 
papers concentrate computation models revised theory repairs case 
inference query answering addressed 
complexity belief revision counterfactual inference exhaustively classified eiter gottlob 
deals propositional case 
outlined reduce cases consistent query answering propositional case grounding 
grounding integrity constraints results update formula unbounded size depends size database 
prevents transfer ptime upper bounds framework 
similarly lower bounds require different kinds formulas 
classic updating logical theories fagin focuses semantics updates address computational issues 
proposed framework limited propositional case 
interesting proposes notion repair minimality giving priority minimizing deletions minimizing insertions 
approaches pursued belief revision community non local sense having resolve inconsistencies database irrelevant query 
reasoning presence inconsistency approaches inconsistency handling literature proposed logic community prominent family paraconsistent logics 
logics protect reasoning presence classical inconsistencies triviality property inconsistent theory entails formula 
applicability context inconsistent databases limited 
typically address issue special role integrity constraints truth inference process 
second paraconsistent logic monotonic fail capture nonmonotonicity inherent notion consistent query answer example 
third nonlocal 
discuss paraconsistency approaches closest 
bry knowledge author consider notion consistent query answer inconsistent databases 
defined consistent query answers provability minimal logic 
proposed inference method nonmonotonic fails capture minimal change bry notion consistent query answer weaker 
bry approach entirely proof theoretic provide computational mech collections papers see 
inconsistent databases anism obtain consistent answers order queries 
formalisms limited propositional inference 
distinguish integrity constraints database facts 
data database violates integrity constraint constraint longer inferred acceptable database context 
example 
assume integrity constraint database contains facts approach lin inferred minimal change captured correctly longer inferred involved inconsistency 
papers kifer avron studied problem making inferences possibly inconsistent propositional order knowledge base 
basic idea infer classical consequences maximal consistent subsets knowledge base consistent models knowledge base order models defined basis atom annotations drawing values lattice bi lattice 
provides non monotonic consequence relation special role integrity constraints truth captured 
computational mechanisms answering order aggregation queries proposed computational complexity issues addressed 
section described approach kifer adapted task computing consistent query answers 
logical framework valued logic distinguish consistent inconsistent controversial information 
database instance finite set tuples tuple associated value safe false need stored controversial 
integrity constraints expressed order language valued semantics 
repair instance satisfying set integrity constraints ic minimal instances satisfying ic defined follows 
distance sum tuples values associated respectively 
distance equal distance furthermore algorithm computing repairs introduced 
algorithm tableau proof system valued logic framework 
related approach introduces executable specifications repairs abductive logic programming :10.1.1.13.7065
approaches notion analogous consistent query answers proposed complexity analysis provided 
pradhan introduced logic reasoning presence conflicts different kinds logical semantical domain dependent declared domain specification logical theory normal logic program 
logic leo bertossi jan chomicki non classical valued semantics allows inferring conflict free sets consequences 
example conflicts declared classical logical conflicts logical contradiction set consequences 
deductive evaluation mechanism developed ground queries strong consequences specification hold conflict free models 
furthermore shown represent set conflicts inconsistency deductive database wrt set integrity constraints 
interesting approach integrity constraints database taken restrict possible answers get database capture semantics domain restrict states database 
view quite compatible approach motivation :10.1.1.12.3324
general deductive system strong consequences explicitly applied specialized consistent conflict free query answering databases 
complexity issues addressed 
related treatments inconsistency developed areas knowledge representation formal specifications software engineering 
databases approaches discussed subsection applicable relational databases order queries integrity constraints 
treat integrity constraints views deductive database 
way queries answered views way resulting answers satisfy integrity constraints answers satisfy filtered 
approach closest transformation approach section supports locality 
approach deductive resolution direct query answering method similar approaches query answering deductive databases presence integrity constraints 
queries restricted conjunctions literals 
computational complexity issues addressed 
studies problem consistent query answering context universal constraints 
contrast definition considers repairs obtained modifying individual tuple components 
notice modification tuple component necessarily simulated deletion followed insertion minimal set inclusion 
proposes represent repairs instance single tableau 
tableau answers conjunctive queries efficiently obtained 
clear computational complexity constructing tableau tableau polynomial size 
franconi discuss repairs updating individual values context data cleaning application 
aim compute inconsistent databases possible repairs case particular kind databases storing census data consistent query answering 
issues addressed consist detecting solving conflicts inside database conflicts answers questionnaires intended declarative semantics opposed conflicts data integrity constraints 
specific case data cleaning 
widely recognized database integration integrated data may inconsistent integrity constraints 
typical theoretical solution problem database inconsistency context augment data model represent disjunctive information 
different disjuncts correspond different ways resolving inconsistency 
example explains need solution kind 
example 
consider functional dependency person single salary example 
violated tuples 
tuples may coming different data source satisfies dependency 
tuples replaced disjunction employee page employee page integrated database 
functional dependency longer violated 
solve kind problem agarwal introduced notion flexible relation non nf relation contains tuples sets non key values set standing elements 
approach limited primary key functional dependencies subsequently generalized key functional dependencies dung 
context baral proposed disjunctive datalog lin mendelzon tables objects 
agarwal introduced flexible relational algebra query flexible relations dung introduced flexible relational calculus proper subset calculus translated flexible relational algebra 
remaining papers discuss query language issues relying existing approaches query disjunctive datalog tables objects 
important differences approaches 
rely construction single disjunctive instance deletion conflicting tuples 
integrity constraints solely conflict resolution 
conflicts need resolved approaches non local 
approach underlying databases incorporated integrated toto changes 
need introducing disjunctive information 
integrity constraints querying 
second approaches generalize arbitrary functional dependencies kinds integrity constraints 
imielinski provide comprehensive characterization computational complexity evaluating leo bertossi jan chomicki conjunctive queries databases objects 
results carry framework limited cases discussed 
motro addressed issue integrating data possibly mutually inconsistent sources fashion different closer approach 
proposed notion sound query answers answers query result source 
functional dependencies single literal queries sound answer motro sense consistent answer sense 
converse true tuple appears single source sound answer consistent answer conflict tuple 
general denial constraints may sound answers consistent 
computational mechanism proposed consists simply intersection query answers individual sources local 
complexity analysis provided 
gertz described techniques model diagnosis detecting causes inconsistencies databases computing corresponding repairs :10.1.1.25.9572
didn address issue query answering presence inconsistency 
introduced deductive approach modal logic allows limiting impact inconsistent information related query 
logic tells apart sure doubtful information 
original inconsistent deductive database includes integrity constraints new database consisting modal formulas constructed 
modalities sure doubtful formulas 
idea derive sure answers deductive system query processing consists constructing proof appropriate modal logic 
integrity constraints considered level reliability data consequence considered doubtful 
complexity analysis provided 
logic programming greco independently developed logic programming approach inconsistency handling databases alternative sections 
approach disjunctive logic programs stable model semantics specify sets changes lead database repairs sense 
authors general solution compact schema generating repair programs universal integrity constraints 
application schema leads rules heads involve essentially possible disjunctions database literals occur constraint 
single constraint produce exponentially clauses 
approach generalized non binary constraints lines 
contrast approach lead exponential blowup :10.1.1.13.1032
approach concentrated mainly producing sets changes repaired inconsistent databases databases explicitly 
particular persistence rules generated program 
consequence program directly obtain consistent query answers 
additional contribution notion repair constraints specify preferences certain kinds repairs deletion insertion 
approach database repairs logic programming semantics consists revision programs proposed marek truszczynski 
rules programs explicitly declare enforce satisfaction integrity constraint explicitly stating integrity constraints 
ak 
bm intended procedural meaning inserting database atom 
ak 
bm database 
declarative stable model semantics revision programs providing computational mechanism 
preferences certain kinds repair actions captured including corresponding rules revision program omitting rules lead forms repairs 
notion analogous consistent query answers proposed 
proposals language constructs specifying nondeterministic queries related approach witness choice :10.1.1.3.3631:10.1.1.28.7172
essentially idea construct maximal subset relation satisfies set functional dependencies 
usually subset approach yields nondeterministic queries natural way 
clearly maximal consistent subsets choice models correspond repairs definition 
stratified datalog choice combines enforcing functional dependencies inference stratified datalog programs 
answering queries choice models queries corresponds notion computation consistent query answers order queries definition :10.1.1.28.7172
problem shown np complete tractable cases identified 
sources complexity case presence intensional relations defined datalog rules 
relations absent approach 
procedure proposed runs exponential time exponentially repairs example 
conjunctions literals considered queries 
arbitrary order aggregation queries studied 
approach generalized functional dependencies 
blair subrahmanian introduced paraconsistent logic programming 
paraconsistent logic programs non classical semantics inspired paraconsistent order semantics 
kifer subrahmanian discussed annotated logic programs lattice non classical semantics 
atoms clauses annotations may contain variables functions providing stronger representation formalism 
implementation annotated logic programs query answering mechanisms discussed 
subrahmanian generalized annotated leo bertossi jan chomicki programs order amalgamating databases resolving potential conflicts integrated data 
purpose product lattices underlying database constructed semantic basis integrated database 
conflict resolutions preferences captured means function annotations 
approaches paraconsistent logic programming discussed 
works define notions analogous repairs consistent query answers 
open problems ongoing flexible repairs existing notions consistent answer notion database repair 
database repairs inconsistent database instance new instances satisfy integrity constraints differ original instance minimal set database tuples minimality understood set inclusion 
section mentioned alternative notions repair 
particular situations may natural consider flexible repairs allow modifications individual tuple components 
alternatives independently repairs defined consider flexibility wrt class repairs 
example considering answer consistent true majority database repairs true preferred repairs predefined notion preference 
majority approaches consistency studied context data integration 
issue preferences certain changes repairs remains investigated 
direction 
data integration assume collection materialized data sources 
sn global virtual database integrates data 
sn 
local view approach look data sources si views global schema query generate query plan extracts information sources :10.1.1.127.3070:10.1.1.38.7636
global view approach global database defined view data sources 
assumes certain integrity constraints hold global system integrity constraints generation query plan situations integrity constraints query plan generated :10.1.1.43.8860
problem sure global integrity constraints hold 
presence consistent data sources global system integrates may inconsistent databases inconsistent 
global integrity constraints maintained easily violated 
consequence data integration natural scenario apply methodologies 
retrieve consistent information global system 
new interesting issues appear consistent answer context 
going base notion notion repair repair 
notice global instances repair 
consistent answers retrieved global systems 
kind query plans need 
issues addressed local view approach global view approach :10.1.1.48.4048:10.1.1.18.8312
problems important achievement line research integrate mechanisms retrieval consistent query answers full fledged dbms 
system possible specify sql soft integrity constraints constraints explicitly maintained pose usual sql queries 
consistent answers queries obtained enhanced sql engine 
note different users having different perceptions specify different soft constraints 
far developed notions consistent answer repair context relational databases 
interesting extend notions corresponding computational mechanisms forms databases semi structured deductive spatio temporal acknowledgments dedicated memory ray reiter pioneering logical foundations databases laid foundation influenced research efforts area including 
contributions researchers gratefully acknowledged marcelo arenas pablo alexander alvaro cortes claudio gutierrez xin michael kifer jerzy francisco orchard vijay raghavan jeremy 
anonymous reviewers detailed helpful comments 
research supported joint nsf int nsf iis carleton university start nserc 

abiteboul hull vianu 
foundations databases 
addison wesley 
leo bertossi jan chomicki 
agarwal keller wiederhold saraswat 
flexible relation approach integrating data multiple possibly inconsistent databases 
ieee international conference data engineering 

arenas bertossi chomicki 
consistent query answers inconsistent databases 
acm symposium principles database systems pages 

arenas bertossi chomicki 
specifying querying database repairs logic programs exceptions 
international conference flexible query answering systems pages 
springer verlag 

arenas bertossi chomicki 
scalar aggregation fd inconsistent databases 
international conference database theory pages 
springer verlag lncs 

arenas bertossi chomicki 
answer sets consistent query answering inconsistent databases 
technical report arxiv cs db arxiv org print archive july 
revision journal publication 

arenas bertossi chomicki raghavan 
scalar aggregation inconsistent databases 
theoretical computer science 
special issue selected papers icdt appear 

arenas bertossi kifer 
applications annotated predicate calculus querying inconsistent databases 
international conference computational logic pages 
springer verlag lncs 

avron 
model theoretic approach recovering consistent data inconsistent knowledge bases 
journal automated reasoning 

denecker van bruynooghe 
repairing inconsistent databases model theoretic approach 
decker 

inverardi 
integrity constraints views deductive databases 
conrad 
klein 
schewe editors international workshop foundations models languages data objects pages september 

balzer 
tolerating inconsistency 
international conference software engineering pages 
ieee computer society press 

baral kraus minker subrahmanian 
combining knowledge bases consisting order theories 
computational intelligence 

bertossi 
repairing databases annotated predicate logic 
benferhat giunchiglia editors ninth international workshop non monotonic reasoning nmr special session changing integrating information theory practice pages 

bertossi 
logic programs querying inconsistent databases 
international symposium practical aspects declarative languages 
springer verlag 
appear 

ben eliyahu dechter 
propositional semantics disjunctive logic programs 
annals mathematics artificial intelligence 

bertossi chomicki editors 
working notes ijcai workshop inconsistency data knowledge 
aaai press 

bertossi chomicki cortes gutierrez 
consistent answers integrated data sources 
international conference flexible query answering systems copenhagen denmark october 
springer verlag 
inconsistent databases 
bertossi 
analytic tableaux database repairs foundations 
international symposium foundations information knowledge systems pages 
springer verlag lncs 

bertossi 
database repairs analytic tableaux 
technical report arxiv cs db arxiv org print archive november 

blair subrahmanian 
paraconsistent logic programming 
theoretical computer science 

dt le 
graph classes survey 
siam 

bry 
query answering information systems integrity constraints 
ifip wg working conference integrity control information systems 
chapman hall 

bertossi 
querying inconsistent databases algorithms implementation 
international conference computational logic pages 
springer verlag lncs 

chakravarthy minker 
logic approach semantic query optimization 
acm transactions database systems 

chandra merlin 
optimal implementation conjunctive queries relational databases 
acm sigact symposium theory computing pages 


querying inconsistent database 
proceedings artificial intelligence methodology systems applications 
north holland 

chomicki 
minimal change integrity maintenance tuple deletions 
technical report cs db arxiv org print archive december 

chomicki 
computational complexity consistent query answers 
technical report arxiv cs db arxiv org print archive april 

chou winslett 
model belief revision system 
journal automated reasoning 

da costa 

paraconsistent logic historical perspective 
logique analyse 

dalal 
investigations theory knowledge base revision 
national conference artificial intelligence st paul minnesota august 

damasio pereira 
survey paraconsistent semantics extended logic programs 
gabbay smets pages 

eiter gottlob voronkov 
complexity expressive power logic programming 
acm computing surveys 

de amo carnielli marcos 
logical framework integrating inconsistent information multiple databases 
international symposium foundations information knowledge systems pages 

decker editors 
iclp workshop paraconsistent computational logic pcl july 

phan minh dung 
integrating data possibly inconsistent databases 
international conference cooperative information systems brussels belgium 

duschka genesereth levy 
recursive query plans data integration 
journal logic programming 
leo bertossi jan chomicki 
eiter faber leone pfeifer 
declarative problem solving dlv 
minker editor logic artificial intelligence pages 
kluwer 

eiter gottlob 
complexity propositional knowledge base revision updates counterfactuals 
artificial intelligence 

fagin ullman vardi 
semantics updates databases 
acm symposium principles database systems 

franconi palma leone scarcello 
census data repair challenging application disjunctive logic programming 
international conference logic programming artificial intelligence reasoning pages 
springer verlag lncs 

gabbay smets editors 
handbook defeasible reasoning uncertain information volume 
kluwer 

galhardas florescu shasha simon 

declarative data cleaning language model algorithms 
international conference large data bases pages 

rdenfors 
knowledge flux 
bradford books 

rdenfors rott 
belief revision 
gabbay hogger robinson editors handbook logic artificial intelligence logic programming volume pages 
oxford university press 

garey johnson 
computers intractability guide theory np completeness 
freeman 

gelfond lifschitz 
classical negation logic programs disjunctive databases 
new generation computing 

gertz 
extensible framework repairing constraint violations 
conrad 
klein 
schewe editors international workshop foundations models languages data objects pages september 

gertz 
diagnosis repair constraint violations database systems 
phd thesis universit hannover 

greco zaniolo 
programming nondeterminism deductive databases 
annals mathematics artificial intelligence 

pedreschi 
datalog non deterministic choice computes ndb ptime 
journal logic programming 

godfrey minker 
integrity constraints semantics applications 
chomicki saake editors logics databases information systems chapter 
kluwer academic publishers boston 

grahne mendelzon 
tableau techniques querying information sources global schemas 
international conference database theory pages 
springer verlag lncs 

minker 
logic approach data integration 
theory practice logic programming 

greco greco 
logic programming approach integration repairing querying inconsistent databases 
international conference logic programming pages 
springer verlag lncs 
inconsistent databases 
greco zaniolo 
datalog queries stratified negation choice international conference database theory pages 
springer verlag 

greco 
querying inconsistent databases 
international conference logic programming artificial intelligence reasoning pages 
springer verlag lncs 


query rewriting views presence functional inclusion dependencies 
information systems 

hochbaum 
approximating covering packing problems set cover vertex cover independent set related problems 
hochbaum editor approximation algorithms np hard problems 
pws publishing 

hunter 
paraconsistent logics 
gabbay smets pages 

ski naqvi 
incomplete objects data model design planning applications 
acm sigmod international conference management data pages denver colorado may 

ski van der meyden 
complexity tailored design new design methodology databases incomplete information 
journal computer system sciences 

kakas kowalski toni 
abductive logic programming 
journal logic computation 

kanellakis 
elements relational database theory 
jan van leeuwen editor handbook theoretical computer science volume chapter pages 
elsevier mit press 

katsuno mendelzon 
propositional knowledge base revision minimal change 
artificial intelligence 

kifer 
logic reasoning inconsistency 
journal automated reasoning 

kifer subrahmanian 
theory generalized annotated logic programming applications 
journal logic programming 

kowalski sadri 
logic programs exceptions 
new generation computing 

kowalski sadri 
integrity checking deductive databases 
international conference large data bases pages 
morgan kaufmann publishers 

leach lu 
query processing annotated logic programming theory implementation 
journal intelligent information systems 

lenzerini rosati 
source inconsistency incompleteness data integration 
workshop nonmonotonic reasoning nmr toulouse france 

lenzerini 
data integration theoretical perspective 
acm symposium principles database systems 
invited talk 

leone scarcello 
disjunctive stable models unfounded sets fixpoint semantics computation 
information computation 

levy 
combining artificial intelligence databases data integration 
artificial intelligence today pages 
springer verlag lncs 
leo bertossi jan chomicki 
levy rajaraman ordille 
query answering algorithms information agents 
national conference artificial intelligence pages 

levy rajaraman ordille 
querying heterogeneous information sources source descriptions 
international conference large data bases pages 

lin 
semantics reasoning consistently presence inconsistency 
artificial intelligence 

lin mendelzon 
merging databases constraints 
international journal cooperative information systems 

lloyd 
foundations logic programming 
springer verlag nd edition 


resolving contradictions plausible semantics inconsistent systems 
journal automated reasoning 

marek truszczynski 
revision programming 
theoretical computer science 

motro 
multiplex formal model multidatabases implementation 
international workshop generation information technology systems pages 
springer verlag lncs 

nuseibeh easterbrook russo leveraging inconsistency software development 
ieee computer 

pradhan 
semantics normal logic programs contested information 
ieee symposium logic computer science pages 

pradhan 
reasoning conflicting information artificial intelligence database theory 
phd thesis department computer science university maryland 

reiter 
logical reconstruction relational database theory 
brodie mylopoulos schmidt editors conceptual modeling pages 
springer verlag 

reiter 
integrity constraints 
international conference theoretical aspects rationality knowledge pages 

reiter 
database know 
acm symposium principles database systems pages 

sadri kowalski 
theorem proving approach database integrity 
minker editor foundations deductive databases logic programming pages 
morgan kaufmann publishers 

sagonas swift warren 
xsb efficient deductive database engine 
acm sigmod international conference management data pages 

subrahmanian 
amalgamating knowledge bases 
acm transactions database systems 

ullman 
information integration logical views 
international conference database theory pages 
springer verlag lncs 

vardi 
complexity relational query languages 
acm symposium theory computing pages 


condensed representation database repairs consistent query answering 
international conference database theory 

winslett 
reasoning action possible models approach 
national conference artificial intelligence 
index annotated logic answer set belief revision choice operator computational complexity conflict hypergraph conjunctive query simple consistency consistent query answer counterfactual inference data complexity data integration database disjunctive fds foreign key functional dependencies inclusion dependencies inds inference counterfactual integrity constraints binary denial referential universal key lattice truth value logic annotated paraconsistent logic program disjunctive paraconsistent query aggregation closed conjunctive order ground query transformation ramsey test repair specification revision programs 
