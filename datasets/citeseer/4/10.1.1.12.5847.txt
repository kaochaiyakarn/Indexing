appears proceedings st conference file storage technologies fast monterey ca january 
framework evaluating storage system security erik riedel mahesh ram swaminathan hewlett packard laboratories palo alto california riedel hpl hp com variety ways ensure security data integrity data depending set anticipated attacks level security desired data owners level inconvenience users willing tolerate 
current storage systems secure data encrypting data wire encrypting data disk 
systems different currently comparing 
propose framework types systems evaluated security performance axes 
particular show existing systems merely different trade offs single continuum set related security primitives 
trace time sharing unix server medium sized workgroup quantify costs associated secure storage systems 
show encrypt disk systems offer increased security improved performance encrypt wire traced environment 
focus storage security protecting communication clients servers untrusted networked world gobioff kent mazieres 
particular focus protecting data integrity preventing unauthorized modification commands data modification requests transit replaying requests 
systems address issue privacy confidentiality data transfer preventing leaking data transit snooping network 
comprehensive treatment topic network attached secure disks nasd gobioff uses capabilities provided users file manager separate storage servers 
barrier wide acceptance nasd scheme performance cost encryption integrity checking needed clients servers 
order reduce cost nasd proposes scheme pre computed checksums secure hashes gobioff pre calculates stores checksums long lived data 
nasd provide comparable scheme optimize privacy require pre computed encryption 
data stored server encrypted form necessary encrypt transfer network 
difficulty scheme encryption nasd done session keys generated client server interaction pre computation requires longer lived keys 
client point view schemes identical receives encrypted data pay cost checksumming decrypting 
point view adversary equivalent data sees encrypted unintelligible 
difference server bear encryption cost time new session key chosen take advantage data stored encrypted form 
similarly written data encrypted leaves client stored encrypted server eliminates decryption 
storing data encrypted form originally proposed blaze cryptographic file system cfs expanded systems blaze zadok hughes different purpose protect data untrusted servers 
data stored server encrypted form protected leaking server know key need encrypt data sent network 
encryption done original creator file updated subsequent writers server performs encryption decryption 
secure checksums needed ensure integrity communication privacy ensured repeated byte encryption 
order data users decrypt long term key obtained priori 
support sharing system encrypts data disk problem simply key distribution users obtain long term keys 
done centralized server nasd file manager nis server 
alternatively distributed scheme data owners provide keys eventual users directly done system cfs removes cen 
desired privacy arguments requires encryption message headers bulk file data 
point attack 
variant key distribution scheme proposed sfs mazieres fu expanded file system fu 
system miller combines aspects cfs disk encryption sfs secure communication authentication single encrypt disk system 
secure storage systems proposed described individually systematic way compare contrast 
remedy situation presenting agnostic framework describe features systems level security offer 
secure storage system implement core set functions may vary detailed design choices 
choices affect level security system provides performance system achieves 
similar study done establish framework evaluating digital certificate revocation mechanisms 
addition security performance third factor consider building secure system level inconvenience users willing tolerate 
users type separate password document open individually choose access rights file create soon circumvent best intentions system designers 
precise metrics gauge impact effect established treat issue indirectly 
framework show quantitatively compare performance previously proposed systems overhead users security guarantees systems offer 
trace non secure unix file system estimate required various secure schemes 
evaluation independent actual system implementations provides general way evaluating security estimating cost 
analysis shows encrypt systems secure provide better performance encrypt wire systems 
rest organized follows 
section defines framework storage system security identifies range attacks suggests core set security primitives 
section describes system designs proposed fit framework choices impact security improve performance 
section evaluates decisions axes traced workload unix time sharing server concretely quantify security costs day day usage 
conclude section 
framework storage security section commonalities known secure storage systems general framework 
framework consists components players attacks security primitives granularity protection user inconvenience 
elaborate 
players define players rest 
list covers possible players consider protecting stored data 
player listed set legitimate actions perform 
action player treated attack 
owners create destroy data render data un readable readers delegate read write permission players revoke user privilege read write owned data 
readers read data permission read delegated owners 
writers modify data permission write delegated owners 
wire transfers data players 
storage servers store return data request 
instance file servers nfs disks nasd disk arrays iscsi 
group servers authenticate players authorize access membership groups defined owners 
instance group servers nasd nis server nfs 
servers allow traversal namespaces provide support lookup directories files directories 
define adversary entity attempts perform functions authorized 
notice definition adversary includes legitimate players attempting perform actions authorized 
definitions functionalities differentiate players actual systems choose aggregate multiple players single entity 
instance nasd combines functionality group server namespace server single metadata server 
intentionally omitted key escrow agent list players main purpose reveal keys identifies necessary add basic level security storage system 
point important note framework intended allow evaluation security particular system 
requires careful analysis system component particular combination components 
secure system strong weakest link 
framework replacement analysis simply seeks allow high level comparison different schemes purposely leaving secondary details unexamined 
attacks broadly kinds data players handle short lived data communicated agreed session long lived data metadata persistent storage 
existing systems network security addressed compromise short lived data protocols communicate 
addition securing data wire storage systems secure long lived data servers 
requirements give rise set attacks 
attacks may mounted data metadata explicitly specified adversary wire instance attack mounted nasd protocol communicate files clients 
adversary servers instance adversary updating file nfs file server 
revoked user servers instance revoked reader longer part system continue read files 
adversary colluding storage server instance cfs encrypted directory deleted unix file system 
adversary colluding group server instance adversary gaining access data nasd file manager 
adversary colluding readers writers instance reader passing copy file adversary 
attack involving collusion readers writers difficult prevent substantial complexity support outside system listed completeness 
consider 
attacks broken kinds effect data leak attacks adversary gains access data 
change attacks adversary valid modifications data modifications readers detect invalid 
destroy attacks adversary invalid modifications stored data 
invalid modification change data detectable incorrect owner readers 
table provides summary attacks occur practice 
data summarizes survey cios system managers showing percentage respondents reporting particular attack 
table shows primary types attacks list real world attacks touches 
intent motivate importance attacks listed including may considered crucial past revocation 
core security primitives secure storage systems proposed research commercial systems implement myriad security features enable players securely perform functions 
details schemes differ core companies ill revoked reporting jw user service telecom eavesdropping active system penetration laptop theft theft proprietary information unauthorized access insiders sabotage virus denial service table 
frequency cost attacks 
frequency various attacks mapping framework 
numbers reported survey system managers taken spring categories showing significant increases previous years power 
cost column gives self estimated businesses 
note respondents claimed experienced monetary damage due attacks reported able estimate extent means numbers shown low estimates 
industry estimates total companies worldwide attacks run billions dollars 
boxes marked show primary damage caused particular attack damage possible cases 
intent exhaustively enumerate damage motivate attacks framework important threat give rough idea relative importance 
set security primitives abstracted types authentication authorization securing data wire securing data disk key distribution revocation 
show section systems necessarily provide support choices directly affect performance system security guarantees provided 
rest section elaborate primitives important choices implementing 
authentication purpose authentication establish identity particular player order authorize actions 
storage systems may implement authentication general ways distributed authentication owners explicitly authenticate player authorize access data cfs server public keys sfs 
centralized authentication owners delegate responsibility authentication authorization group server accomplished checks done file server nfs file manager nasd 
general mechanisms achieve mutual authentication public key infrastructure pki centralized scheme kerberos steiner password scheme 
quite similar 
need trusted third party differ party consulted 
requires shared secret difficult main tain distributed environment 
usual concern authentication owners readers writers storage servers group servers may concern authenticating servers users prevent improper service 
important consideration consider primary security requirement analysis authorization purpose authorization allow owner data delegate partial access data player 
user authenticated identity checked known set permissions determined data owners 
authorization done general ways mediated servers receive actions perform behalf readers writers owners nfs afs 
owner handled owners provide readers writers keys authorize perform actions capabilities nasd server keys sfs 
securing data wire protocols ensuring reliable secure passing messages studied 
standard protocols proposed including ssl protect web traffic ssh protect remote terminals ipsec protect internet traffic generally kent 
variant system storage nasd gobioff similar scheme self certifying file system mazieres ipsec proposed security mechanism iscsi 
ensure data integrity wire scheme involving keyed checksums macs needed irrespective design chosen 
mac tie checksum particular player checksum tie mac particular set data 
timestamped mac protects replay server impersonation man middle attacks gobioff 
increasing deployment protocols ssl ipsec hardware solutions available offload heavyweight cryptographic operations client server processors 
hardware may support entire protocol form simply provide accelerated primitives different ways various systems 
concerns raw encryption checksum speed removed parameters number key changes requirements key storage bottlenecks 
securing data disk reasons may want encrypt data disk server inherently untrusted server compromised stolen disk laptop 
guarantee data metadata compromised stored encrypted disk 
accomplish encryption types ciphers may symmetric cipher single private key system des aes schneier perform bulk data encryption decryption privacy option nasd 
asymmetric cipher system pair keys rsa schneier generally authentication bootstrap shared keys symmetric cipher authentication protocols ipsec 
computing asymmetric ciphers slower symmetric ciphers operations sparingly key exchange protect stored symmetric keys 
key distribution secure storage system relies encryption protect data piece data associated keys symmetric asymmetric depending structure system required access 
keys may ways directly encrypt data keys writers encrypt readers decrypt data directly edges system cfs 
prove authorization possession keys readers writers prove requisite authorization capabilities nasd 
keys prove authorization requires server trusted accurately perform necessary checks 
direct encryption ensures readers writers able access data create valid new data 
complicates revocation readers writers keys simply delegated capabilities 
key distribution keys system shared access files requires mechanism distribute keys readers writers 
current systems implement key distribution ways group server centralized group server maintains keys files access control lists 
user particular list server provides key corresponding file nfs afs 
owner handled file owners provide readers writers keys perform actions 
typically complicates key revocation readers writers cache keys variants cfs 
revocation traditionally revocation discussed context centralized services certificate authorities cas removes association physical identity player particular key 
context secure storage extended player access privileges particular piece data revoked 
player revoked user leaves particular workgroup keys player access changed 
systems data stored encrypted require data re encrypted may done follows aggressive re encryption immediately revocation re write data new key 
copies data distributed old key past remain readable 
lazy re encryption delay re encryption file time updated fu read 
saves encryption rarely accessed files leaves data vulnerable longer 
periodic re encryption change keys rewrite data periodically limit window vulnerability gobioff 
distinction aggressive lazy re encryption general consideration secure storage 
user access particular data time may anyway copied protecting changes important 
granularity protection provide secure storage system bears additional overhead cryptographic operations discussed key management 
limit key overhead various systems implement different optimizations including aggregation players groups simplify authorization trading security short lived keys ease management long term keys 
group membership purpose group membership compactly represent permissions particular set data simply verifying membership player group authorizing access group permissions 
ways decide group membership distributed group membership owners explicitly determine authorized share data distribute necessary keys cfs 
centralized group membership owners delegate authorization group server distributes keys nfs nis nasd 
access control lists variant group membership explicitly enumerate players acls stored essentially provide group membership function howard hughes 
granularity keys keys encrypt decrypt particular set data may short term long term 
short term keys reduce vulnerability window decreasing amount data encrypted key long term keys easier manage fewer exchanged 
short term keys typically duration player session nasd iscsi 
long lived keys typically sessions multiple players cfs sfs 
long term keys granularity data associated single key greatly impacts number keys required choices include key file user group file group 
additional concerns arise considering longlived keys digital signatures documents years maniatis backup tapes boneh 
user inconvenience addition security performance critical consider level inconvenience users willing tolerate sloppy circumvent intent system convenient single login password tokens derived 
inconvenient access multiple passwords different services passwords re entered frequently changed regularly 
inconvenient resources protected low level password document opened application invocation 
forcing users remember long lists passwords leads poor password choices sloppy password practices post notes adams 
problem exacerbated users handle keys explicitly encryption choices 
password issues may addressed widespread smart cards 
difficulty removes main aspect active user involvement maintaining security 
users aware security way assume system 
parameters trade offs understood security data may hinge usability issues 
secure storage systems section cast previously proposed designs secure storage framework described section 
appropriate highlight trust assumptions design mention specific extensions proposed 
intent evaluate system common set criteria 
reason concentrate aspects address primary functions secure storage system 
mean additional functions characteristics individual designs important 
security system evaluated holistically system secure weakest link 
vein assume issues operating system trust dealt separately 
discussion readers writers owners thought smallest possible trusted core surrounding user dalton 
necessary may smart card protected device handles encryption key storage 
comparison table summarizes characteristics systems section attacks system addresses 
cfs similar systems widely known discussion security storage systems cryptographic file system cfs blaze 
cfs directory protected encrypted secret key 
underlying data stored single file host file system attached cleartext directory mount point 
allows host file system treat encrypted data file 
normal utilities backup function alteration access cleartext data 
system implemented user level nfs loopback mount files decrypted accessed 
cfs designed secure local file system lacks features sharing encrypted files users 
way share protected file directly hand keys protected directories users 
cfs protect attacks bits disk compromised computer stolen 
key characteristics cfs players owners readers writers indistinguishable 
host file system acts storage server group server authorizing file access 
namespace traversal handled readers writers 
trust assumptions storage server untrusted access keys protecting leak modify attacks involving collusion storage server 
storage server trusted prevent destruction data 
security primitives owners handle authentication distributing keys encrypted directories files 
authorization read done passing keys readers writers 
host file system verifies authorization writers overwrite existing data validity modifications assured having proper key 
writers encrypt data symmetric cipher storing disk 
provision protect data wire cfs essentially local system 
cfs designed local file system distribution keys done directly owners 
revocation requires immediate re encryption data revoked user collude storage server attack data 
granularity local file system aggregates users groups authorize access explicit decision aggregating keys encrypt data 
long lived keys directory basis 
cryptfs zadok extends cfs efficient building stackable file system user level server 
attempts system resilient attacks due corruption individual users session ids user ids index key table usernames 
uses store single key directory keys encrypts file data file names directory structures metadata left un encrypted 
implementation differences varying key granularity cryptfs cfs identical respect framework 
systems described local file system 
mounts remote file system protection communication remote server 
consider simple local case 
generation cfs blaze includes key escrow system 
necessary recover keys obtained owner instance owner left organization 
reiher uses alternative method handling problem splitting keys members group collude regenerate key missing owner 
systems assume untrusted servers keys known owners readers writers trusted system 
key escrow system cfs depends trusting key database trusting servers 
distributes trust group owners trusted single database 
systems encrypt data entire devices transparently decrypt data accessed 
include secure drive secure filesystem gutmann na 
systems similar cfs perform authentication authorization rely operating system primitives 
sfs secure storage systems assume servers part trusted infrastructure concentrate guaranteeing users accessing servers properly authenticated 
secure file system sfs mazieres addresses problem mutually server revoked user cfs similar sfs sfs ro nasd ipsec lun security afs fsv windows efs oceanstore table 
summary security guarantees provided different systems 
means system prevents particular attack instance prevents attacks leak data stealing storage server encrypts media 
means system fails handle particular attack 
dash means attack applicable system 
uses lazy revocation re encrypts data update allows data leak updated making qualified 
subverting group server open additional vulnerabilities adversary acting 
single replica reader reader colluding single storage server cause reader see invalid modifications 
request busy replica re directed replicas combined attack replicas mounted 
servers users 
authentication server necessary prevent adversary spoofing server instance servers part public infrastructure 
important tenet sfs independent key distribution authentication mechanisms 
characteristics sfs players owners readers writers differentiated 
storage server functions group server authenticating users 
trust assumptions storage server trusted data vulnerable leak modify attacks adversary colluding server 
security primitives servers users perform mutual authentication 
servers authenticated self certifying pathnames files 
self certifying pathnames similar mount points traditional nfs public key server embedded 
group server uses nfs style user authorization 
session key protect communication server users 
distributed mechanism obtain server keys self certifying pathnames 
revocation servers requires readers check centralized revocation list revoked servers 
granularity traditional unix style aggregation users groups helps simplify authorization 
uses session key protect communication sfs ro sfs extended sfs ro fu support storage retrieval encrypted read data 
provides solution securely distribute widely accessed data application binary kits internet individually insecure mirrors storage servers 
sfs ro characteristics players sfs writers owners modify data created 
trust assumptions storage server trusted data vulnerable leak modify adversary collusion server 
security primitives sfs data stored encrypted disk 
data signed encrypted owners stored 
readers verify integrity data verifying signature 
granularity data encrypted disk need encrypt transmission 
system fu builds sfs develop general purpose file system secure disks snap miller combines functions cfs sfs 
particular systems keep files encrypted disk include ability share update encrypted data 
differ areas characteristics players owners readers writers differentiated specific authorization schemes writes 
uses separate storage servers group server distributes 
snap relies public private key pairs groups group server distribute stores directly storage servers 
trust assumptions storage server trusted data vulnerable leak modify attacks adversary collusion server 
storage server holds file encryption keys encrypted 
readers writers hold keys preventing attacks collusion group server 
separate key pairs groups group server vulnerable 
revoked users continue decrypt files files updated point encrypted new key lazy revocation 
revoked users update destroy data 
security primitives servers check user authentication authorization 
systems keyed stored data detect modify attacks 
data disk encrypted users written 
systems symmetric keys making possible modify attacks readers collude storage servers write data 
session key checksums protect communication server users 
keys distributed group servers individual user public private keys required public key infrastructure 
implements lazy revocation files re encrypted updated suggests similar scheme 
optimizations different keys encrypt different files group kept locked group key users need key group 
long term keys encrypt files 
systems block level encryption kb blocks kb allow updates individual parts larger files 
extension sfs assumes untrusted servers seeks detect attacks server integrity stored data mazieres 
instance detect server provides different versions file different users 
nasd network attached secure disks nasd gobioff proposes distributed network intelligent disks shared group server handles metadata directory traversals 
access data objects disks authorized group server hands capability user 
disk group server share key appropriate capability disk services request 
data stored clear disks communication encrypted 
nasd characteristics players owners readers writers differentiated 
group server namespace server integrated single metadata server file manager clearly distinct storage servers 
trust assumptions messages wire encrypted 
data stored clear storage servers nasd vulnerable attacks collusion storage server 
authentication authorization data metadata server nasd vulnerable attacks collusion metadata server 
security primitives metadata server authenticates authorizes clients handing capabilities verified storage server 
data encrypted wire integrity guaranteed mac checksums 
centralized metadata server revocation fast 
trust assumptions owners delegate capability distribution metadata servers 
storage metadata server assumed trusted data stored clear 
granularity checksums keyed macs ensure integrity requests data transfer clients servers 
introduces scheme pre computed checksums stored data reduce computation generating checksums individual request 
nasd time suggests individual disk drives directly participate security protocols 
requires minimum strong checksums keyed macs integrity optionally encryption decryption privacy 
iscsi iscsi draft ietf standard connect hosts scsi devices tcp transport 
devices may internet security major concern 
draft proposal klein implement security protocol iscsi authenticate hosts protect integrity commands wire 
main characteristics proposal players notion individual users readers writers owners host operate 
protocol leaves issue authenticating authorizing individual users host 
group namespace server storage server 
trust assumptions storage servers hosts mutually authenticated data protected server making vulnerable attacks involving collusion server 
security primitives servers hosts authenticate public private key mechanism 
server explicitly differentiate reads writes 
data commands encrypted wire ipsec kent 
key authentication distributed external mechanism 
revocation achieved changing access control list 
granularity session keys negotiated login basis 
lun security disk arrays aggregate individual disks array logical units accessed host systems host bus adapter 
lun security proposes control access particular different 
facilitated unique ids world wide unique numbers identify 
host operating system device driver trusted forge spoof ids 
lun security implemented host hp network switch storage controller hp 
true gen eral solutions players notion individual users 
designate read permission hosts 
group namespace server 
trust assumptions players trusted identify correctly 
network servers trusted 
security primitives typically players identified world wide number authentication 
authorization performed maintaining access control list follows hosts setting set storage controllers host may contact wire controlling port mapping network switches storage server setting list allowed access lun 
encryption performed wire disk 
revocation achieved changing access control list 
afs afs howard distributed file systems specifically addressed security issues 
afs assumes untrusted users uses kerberos cate users servers 
session users obtain tokens kerberos server authorizes access storage servers 
afs servers verify tokens appropriate authorization group information maintained group server 
secure version rpc protect communication questions raised regarding gobioff 
key characteristics afs players afs servers act storage servers group servers authentication performed separate kerberos server 
readers writers owners differentiated access control lists storage server 
trust assumptions apart users network players assumed trusted 
afs vulnerable leak modify destroy attacks collusion servers 
user group information changed revoked user continues access files group user token expires 
security primitives kerberos authentication 
servers maintain directory access control lists authorize accesses 
underlying unix file permissions applied locally 
afs encrypt disk rpc messages secured 
revocation done changing access control list making appropriate changes kerberos server 
security primitives authentication centralized authorization distributed storage servers 
unix users groups simplify authorization rules 
convenience single password login kerberos tokens cached hours default set shorter hour administrative accounts longer days long running applications 
nfs number proposals build secure networked file system providing security layer top nfs 
include proposals secure rpc taylor tunnelling nfs ssh ssl protect data wire 
security assumptions implications systems closely match afs nasd 
specification explicitly addresses problem securing rpc mechanism 
currently proposes security mechanisms kerberos public key infra structure 
essentially set secure communi cation channel enable mutual authentication 
interestingly mechanisms low infrastructure public key mechanism exploits fact client authentication proceed establishing secure channel reduce overhead 
scheme server needs public private pair authenticates server sets secure channel 
greatly expands acls access control similar afs acls 
windows efs encrypting file system efs windows integrated supports securing data similar cfs microsoft 
facilitate file sharing efs uses hold key encrypted file 
contains file encryption key protected public private key 
efs supports key escrow including key recovery agent users allowed access file 
efs encrypts decrypts data just prior disk external network security solution required secure data wire remote server 
characteristics windows efs follows players owners readers writers differentiated 
operating system functions group storage namespace server 
security primitives windows primitives authenticating authorizing writes 
data stored encrypted disk 
data sent clear wire 
auser private key get file encryption key 
external mechanism exist distribute users public keys 
revocation requires re encrypting files new encryption key re encrypting 
revocation achieved changing access control list trust assumptions efs vulnerable attacks wire external secure network solution 
efs secures leak modify attacks mounted collusion server 
private key key recovery agent compromised files system protected server authentication authorization primitives 
optimizations user groups native windows file access control lists 
files encrypted long term key 
survivable storage addressing destroy attacks collusion storage servers requires survivable storage mechanism recover total loss storage server keeping multiple copies data 
projects currently underway attempt address security longterm protection wider scale space time existing system 
considers storage data integrity maintained face destruction compromise number replicas wylie oceanstore considers world wide set encrypted replicas kubiatowicz 
mechanism protecting data unauthorized modifications versioning storage servers data reverted state intrusion proposed strunk 
powerful system protect types destroy attacks combination schemes carnegie mellon proposed file system top storage 
evaluation section explores costs implementing various design choices discussed impact choices security 
purpose presenting data compare relative costs systems discussed section trace real system 
allows evaluate expensive operations encryption key distribution key generation practice 
basis evaluation day trace file system accesses done medium sized workgroup way hf ux time sharing server attached disk arrays total gb storage hours requests data moved gb gb active users user accounts active files total files file systems table 
overview file system trace evaluation 
day trace covers period late thursday saturday 
hour subset covers am pm trace day 
space 
trace collected instrumenting kernel log file system calls syscall interface 
file buffer cache numbers shown pessimistic system attempts optimize server messages key usage repeated access 
table provides overview trace 
implementing systems environment users order perform controlled experiment prohibitively expensive 
analysis trace estimate system behave compare relative operation costs 
requires inferences design various systems specified highlight assumptions affect comparison 
security primitives table shows total number cryptographic operations required particular security primitives depending granularity implemented 
clearly illustrates difference disk encryption systems 
nasd server bears cost checksums encryption assuming privacy security level 
cost reduced somewhat pre computed checksums encryption cost remains high 
session key computed client server interaction file sent multiple clients encrypted time 
cfs hand data encrypted clients sent server 
provides level privacy data wire requires checksums signatures server shown 
granularity protection primary comparison encrypt disk systems level protection complexity key management keys aggregated objects 
table gives counts total number keys high level classes designs session keys file keys group keys 
table shows number keys user basis representative users system hour trace period 
representative usernames listed include busiest users terms key key distribution system substantial numbers files 
columns consider session keys encrypt wire systems 
middle columns consider file keys logical extreme 
columns consider group key scheme 
table shows number keys user need obtain trace period keys created permission group files files owner group unix permissions bits share single key 
see number keys messages messages bandwidth mb req mb min table 
number cryptographic operations server design 
total number cryptographic operations performed server course day trace busiest minute interval trace 
message signatures calculated request checksums read write requests 
checksums encryptions decryptions byte cost key exchanges distributions 
pre computed checksums write operations incur server checksumming 
peak load terms messages interval filled entirely stat requests peak load terms bytes smaller number read write requests 
main cost difference seen privacy rows 
wire systems server client required encrypt disk systems require server 
granularity chosen keys large effect number messages required key setup key distribution group server shown rows 
values peak load column give total streaming message performance required server client processors hardware engine offload cryptography 
final columns specify systems bear costs means system uses indicated cryptographic operation 
newly newly open cse ted table 
key readers writers 
number keys needed encryption done session basis different definitions session session request session open close pair single session file system logical volume nasd sfs iscsi file basis cfs group basis 
total number file keys username separated total keys number keys owned user number obtained owner number new keys created 
row contains totals thirteen additional usernames active hour trace 
rows usernames wilkes frank bin appear table users active hour trace columns read entire row 
keys groups distributed owned table 
key distribution owners 
assuming system uses file keys keys particular owner send users 
owned columns show totals files groups exist file system distributed columns show number keys sent hour trace 
row contains totals approximately additional usernames system 
required group scheme orders magnitude lower file scheme orders magnitude session schemes 
considering complexity owners opposed readers writers table looks number keys managed data owners group keys 
table shows total number keys needed owner 
owned column gives count files entire file system owned user 
distributed numbers show number keys owner distribute time trace readers oo 
file keys file keys grp keys grp keys oo oo oo 
file rs 
group keys 
data table table graphically users 
keys dramatically reduces number keys readers writers number keys distributed owners 
average user mean rows tables 
writers files responsible 
see numbers system requiring direct user involvement key distribution prohibitively cumbersome imagine writing keys possible list course hours desk 
columns right promising 
show number keys required move key permission group scheme 
case separate key file key class files described 
produces manageable list roughly keys owner distributed hour period done manually maximum security 
graphical representation difference shown potential benefit group keys clear 
order magnitude keys required group scheme 
file gb aggressive revocation group gb file gb lazy revocation group gb encrypt wire session gb table 
cost revocation design 
note explosion number files revoked group system 
aggressive revocation assumes affected files re encrypted immediately 
lazy revocation assumes files re encrypted time read written values show data re encrypted days 
number increase time eventually closing window vulnerable data reaching aggressive values 
note aggressive group scheme performs total encryption encrypt wire scheme constantly changing keys 
final columns specify systems bear costs means system uses indicated mechanism 
note numbers table skewed high analysis assumes users keys cached trace starts 
practice longer trace number keys distributed day lower consider entire day trace total number group keys distributed average roughly double numbers shown hours 
option directory keys cfs 
numbers shown fall roughly file group keys 
cost revocation downside long term keys encryption additional cost revocation 
user leaves group organization access removed stored data encrypted keys revoked user access re encrypted prevent unauthorized access 
table gives details cost revocation user leaves group 
system uses key group files ownership permissions additional revocation results user changes permissions file chmod unix revocation rea son rare trace covered table 
simulate revocation day trace follows 
choose single user revoked period track keys obtained user day trace 
aggressive file re encryption number files re encrypted simply files revoked user accessed past days 
system file keys total amount data re encrypted 
system group keys cost includes re encryption files file groups user access 
lazy revocation systems assume file data re 
believe frequency revocation days reasonable 
turnover rate silicon valley companies late averaged year means group people person leave days 
encrypted read written system 
data re encrypted re written file accessed read write 
values shown lazy revocation portion table 
lazy revocation scenario table volume data re encrypted nearly done encrypt wire scheme server encrypt decrypt lines table 
gives evidence duality encrypt wire encrypt disk schemes 
encrypt wire systems data encrypted decrypted time crosses network 
encrypt disk systems data encrypted requires server 
revocation encrypt disk system requires extensive re encryption 
lazy revocation re encryption occurs file read written done comparable encrypt wire system 
remaining difference encrypt disk needs perform encryption revocation encrypt wire repeats encryption decryption time file transferred 
cost differential systems come relative frequency revocations total amount data particular revocation affects 
developed common framework core functions required secure storage system 
reviewed previously proposed systems storage security mapped set components design choices 
integrity network communication secure storage system provide variant signed message checksums strongly tie particular data particular players 
privacy confidentiality shown main classes systems previously described similar encrypt wire solely protects communication servers users encrypt disk perform encryption decryption user endpoints untrusted servers 
systems provide form pre computed encryption optimizing encryption done systems 
shown encrypt disk systems lazy re encryption comparable encryption decryption costs encrypt wire systems completely different approaches glance 
quantified costs various systems trace unix timesharing server shown choice granularity keys greatly affects complexity encryption load orders magnitude 
quantified number design choices affect security performance owner key distribution precomputed encryption file groups lazy re encryption 
briefly mentioned survivable storage systems analyzed performance 
experience describing framework helped focus thinking build comprehensive secure storage system allows users trade level security system performance concrete sensible way 
follow design choices sequel report system currently developing 
users ssp allowing trace behavior report 
qian wang jay wylie reading earlier drafts asking questions hadn considered 
anonymous reviewers shepherd erez zadok support encouragement attention detail including discussion section forgotten 
adams adams sasse 
users enemy users compromise security mechanisms take remedial measures 
cacm december 
biham biham shamir differential cryptanalysis des cryptosystems advances cryptology crypto august 
blaze blaze 
cryptographic file system unix 
proceedings lst acm communications computing security 
blaze blaze key management encrypting file system summer usenix june 
boneh boneh lipton 
backup system 
usenix security symposium july 
communications systems advancing security storage area networks 
white june 
del 
design implementation transparent cryptographic file system unix 
technical report university 
del 
design implementation transparent cryptographic file system unix 
freenix june 

accelerating high speed encryption bottleneck 
edn august 
dalton dalton choo 
trusted linux operating system approach 
cacm feburary 
fu fu 
group sharing random access cryptographic storage file systems 
thesis june 
fu fu kaashoek mazieres 
fast secure distributed read file system 
osd october 

secure nfs 
www 
quick 
com 
au products 
html october 
gobioff gobioff nagle gibson 
integrity performance network attached storage 
technical report cmu cs december 
gobioff gobioff nagle gibson 
embedded security network attached storage 
technical report cmu cs june 
gobioff gobioff 
security high performance commodity subsystem 
ph thesis cmu cs july 
gutmann gutmann 
secure filesystem sfs 
www 
cs 
auckland 
ac 
nz sfs september 
howard howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm tocs february 
hp hewlett packard 
hp secure manager xp 
www 
hp com go storage march 
hp hewlett packard 
hp storage allocator 
www 

hp com october 
hughes hughes 
universal access smart card secure file system 
atlanta linux showcase october 
kent kent 
security architecture internet protocol rfc november 
klein klein 
internet draft iscsi security protocol 
www 
eng 
tau 
ac 
il klein ietf security oo 
txt july kubiatowicz kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
asplos december 

evaluating certificate status information mechanisms 
ccs 
maniatis maniatis baker 
enabling archival storage signed documents 
fast january 
mazieres mazieres kaminsky kaashoek witchel 
separating key management file system security 
sosp december 
mazieres mazieres shasha 
don trust file server 
hotos may 
microsoft microsoft 
encrypting file system windows 
www 
microsoft 
com windows security encrypt asp july 
miller miller long freeman reed 
strong security distributed file systems 
fast january 
na network associates 
www 
org products 
barker burr 
report development advanced encryption standard aes 
national institute standards technology october 
power power csi fbi computer crime security survey computer security issues trends vii computer security institute spring 
reiher reiher cook crocker 
secure service widespread file sharing 
workshop network distributed system security 
smith meth hafner ore von klein 
ps internet draft iscsi 
www 
ietf 
org draft ips iscsi 
txt september 
callaghan robinson beame 
nfs version protocol 
rfc december 
steiner steiner neuman schiller 
kerberos authentication service open network systems 
winter usenix 
strunk strunk goodson soules ganger self securing storage protecting data compromised systems 
osd october 


www 
stack 
nl remailers 
html may 
taylor taylor goldberg 
secure rpc secure networking sun environment 
summer usenix june 
tygar 
johnny encrypt usability evaluation pgp 
usenix security symposium august 
wylie wylie strunk ganger khosla 
survivable information storage systems 
eee computer august 
zadok zadok 
cryptfs stackable vnode level encryption file system 
technical report cucs 

