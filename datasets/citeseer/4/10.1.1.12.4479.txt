brock university department computer science searching search algorithms experiments meta search brian ross technical report cs december submitted publication 
brock university department computer science st ontario canada www ca searching search algorithms experiments meta search brian ross brock university department computer science st canada conventional approach solving optimization search problems apply variety search algorithms problem hand order discover technique adapted search space explored 
investigates alternative approach search algorithms automatically synthesized particular optimization problem instances 
language composed potentially useful basic search primitives derived 
search language genetic programming derive search algorithms 
genetic programming system evaluates fitness search algorithm applying binary encoded optimization problem traveling salesman measuring relative performance algorithm finding solution problem 
shown evolved search algorithms display consistent characteristics respect corresponding problem instance applied 
example problem instances best suited hill climbing better adapted conventional genetic algorithms 
expected search algorithm derived strongly dependent scale representation problem explored amount computational effort allotted search search primitives available algorithm 
additionally insights gained issues genetic algorithm search 
novel memetic crossover operator evolved course research 
key words meta search heuristics genetic algorithms genetic programming pacs email address ca brian ross 
url www ca brian ross 
preprint submitted elsevier science december important practical contribution artificial intelligence research computer science notion search 
introductory ai textbook devote number chapters search techniques general search notions blind heuristic search advanced paradigms minimax evolutionary algorithms tabu simulated annealing neural network training 
challenge search solve problem find effective strategy particular problem hand 
different search algorithms tend show different performance characteristics different problems 
selection appropriate algorithm fine tuning parameters depends experience problem analyzed 
proposes novel approach finding effective search strategy problem instance 
genetic programming evolve search algorithms specific instances optimization problems 
instance meta evolution top meta level evolving search algorithms ii level search algorithm applied problem instance search solution problem 
meta level search algorithm language composed various primitives useful search algorithm context 
primitives include operators selection alteration replacement members search set 
candidate search algorithm executed level optimization problem 
search algorithm repeatedly applied problem solution acceptable quality maximum number iterations reached 
genetic programming procedure evaluates fitness search algorithm inspecting best solution set level candidate solutions 
number motivations research 
firstly plethora search algorithms literature instances computer programs 
practical way describe search technique contrast code programming language 
example hill climber beam search random search genetic algorithm definable appropriate programming code 
interesting consider search algorithms automatically synthesized 
importantly effective algorithms synthesized particular instances search problems 
level meta search differs meta heuristics entire algorithm sought parameter vector search heuristics 
motivation gain insight interrelationships methods search algorithms relate problems applied 
success search strategies solving problem strongly dependent ability search exploit regularities problem hand 
search algorithms evolved usually examining primitive structures correspond characteristics problem applied 
background issues regarding search meta search discussed section 
section describes experimental design research 
variation travelling salesman problem described genetic programming system outlined detail 
summary main experiments undertaken 
results experiments reported section analysis section 
section summarizes 
background search intrinsic means computers find solutions problems 
problems small search spaces search effective way obtain solution especially known search algorithm 
means avoid writing new algorithm specially designed problem concern 
search useful means finding solutions problems lacking efficient algorithmic solutions 
np complete problems fall category 
search solve intractable complex problems cases find acceptable quality solutions better possible enumeration 
conventional approach solving search optimization problem apply suite search algorithms parameterizations perform comparative empirical analysis results 
intuitively particular search algorithm shows considerably better results search algorithm said naturally adapted fitness landscape defined search space problem comparison alternative search techniques tested 
need exploring variety search techniques problem stems basic fact problems interest search difficult 
free lunch nfl theorem wolpert macready states space search problems search algorithm superior random search enumeration 
similar results shown optimization problems 
nfl theorem theoretically irrefutable counter argument implications space search problems little interest 
real world problems concern people structure regularities define challenging search spaces 
restating nfl theorem evolutionary computation culberson points implications computational complexity theory stronger nfl theorem 
np complete intractable problems structures totally defined 
structure exploited search known algorithm solving np complete problems 
intractable problems famous travelling salesman problem applied test problems search algorithms soft computing techniques 
solution problems forthcoming instances interested obtaining reasonable solutions known cases 
motivation soft computing field heuristic methods finding approximate solutions difficult problems 
search algorithms extremely practical finding answers difficult intractable problems 
challenge finding search algorithm problem hand 
meta heuristics search attempt automate discovery useful search algorithm paradigms parameterizations 
genetic algorithms approach include search parameters search problem representation search mechanism find useful parameter configuration problem 
called self adaptation genetic algorithm 
typical example fogarty mutation rates adapt run 
liang yao newton discuss self adaptation step sizes algorithms 
nakamura applying genetic algorithm np complete job shop scheduling problem 
algorithm different heuristic strategies resolving deadlocks scheduling solutions encoded chromosome 
strategies subject evolution effects rest problem representation 
show better performance obtained permitting search algorithm discover appropriate deadlock heuristic 
meta search meta evolution studied context genetic programming usually regards evolving new variation operators 
teller uses evolution generate reproduction operators main program population evolving parallel 
angeline iba de garis self adaptation evolve crossover operators adapt programs run 
edmonds investigates evolution variation operators crossover 
papers meta evolution variation operators adapts particular problem hand conducive better performance compared generic operators 
ambitious example meta search spector robinson 
apply genetic programming stack language programs ability access process 
goal research investigate evolutionary behaviour evolved 
experiment remainder uses terminology describe search algorithms evolved genetic programming system 
wish generic terms describe search algorithms order remove apparent terminological bias describing algorithms evolved genetic programming 
search space universe solutions problem interest 
individual single point search space currently known search algorithm 
synonyms include state point candidate solution hypothesis 
representation denotation search space particular problem interest 
individuals encoded representation problem 
representation called chromosome genotype genetic algorithms 
search set finite set individuals currently investigation search algorithm 
search set called population genetic algorithms 
variation operator operator individual encoded representation creates variation individual 
synonyms include state operators reproduction operators 
score measurement relative merit quality individual 
score obtained applying problem domain specific objective function evaluation function individual 
score called fitness evolutionary computation 
convenience borrow genetic algorithm terms parents offspring discussing crossover variation operators 
travelling salesman problem np complete travelling salesman problem tsp test problem experiments 
informally described follows graph nodes edges minimum distance path starts initial node visits node returns initial node 
tsp variant uses conventions nodes lay grid ii nodes maximally fig 

tsp grid erroneous path solution path 
connected 
edge node node graph iii distance horizontally vertically adjacent nodes 
shows grid non optimal erroneous path solution path length 
city grid numeric label grid 
tsp traditional lab rat heuristic search experiments excellent problem studying relationship problem representation search performance 
known binary representations tsp 
representations grid follows representations similar 
direct representation uses bit string 
contiguous bit field denotes city label 
path decoded reading city label fields left right bit string 
indexed representation uses bit string 
contiguous bit field denotes index jump interval 
path decoded follows 
list unvisited cities composed 
list pointer list set city list 
jump index read left string 
starting list pointer city list pointer city top list added path removed unvisited list 
index read city current list pointer added path removed list 
time list pointer goes list set start 
continues cities visited 
respect genetic algorithms indexed representation performs better direct 
reason direct representation albeit simple guarantee denotation legal tsp path 
list city labels representation contain duplicate cities illegal definition tsp 
duplicate city select replace growth variation select sel rand sel best sel worst sel tourn best sel tourn worst replace rep rand rep best rep worst rep tourn best rep tourn worst growth add rand add best add worst add tourn best add tourn worst variation crossover crossover mutate score iter num pop size op erc op min max fig 

search language grammar corresponding city missing path 
illegal paths arise random population generation reproduction crossover mutation 
solution repair path random generation reproduction 
choose leave illegal paths penalize evaluation 
indirect representation denotes legal paths 
case genetic algorithm crossover operator works better indexed representation due fact better preserves transfers information content parents offspring 
search algorithm language simple search language introduced 
language intended variety basic search algorithms derived 
sense general language possible useful algorithms derivable search strategies 
attempting comprehensive possible search algorithms 
discussing specifics language assumptions search environment clarified 
experiments individuals binary strings denoting tsp paths described section 
search programs search set individuals finite set cardinality search explore 
assumed search set known minimum maximum size bounds 
search program executed perform single alteration search set replace individual add individual 
alternatively search program merely return individual expression alteration search set 
case set size maximum bound add individual set ii set size reached maximum replace random individual set expression 
table shows full grammar search language 
subsets grammar experiments 
grammar terms arguments terminals functions 
expressions evaluated eager left right execution arguments 
select operators select individual current search set individuals 
select operators include selecting random individual strongest individual weakest individual individuals current score distance solution 
selection includes tournament selection operators 
sel tourn best performs selection randomly selecting individuals search set keeping best score 
size calculated floating point argument expression mantissa modulo wheren computed value numeric argument expression 
returns integer 
sel tourn worst similar weakest individual tournament selected 
replacement operators take individual expression replace existing search set member 
growth operators try add individual expression argument current selection set long set smaller maximum bound 
set reached maximum size growth operators revert replacement operators 
semantics individuals selected replaced select operators 
search set alteration replacement growth permitted single iterated execution program 
replacement growth operator executed normal execution order program designated single alteration operation program earlier replacement growth operations ignored 
addition actual expression added replaces population member final expression discovered program iteration 
program crossover rep worst sel best rep tourn best sel best rep tourn best operator interpreted replacement operator expression 
individual replace search set result top level crossover expression 
variation operators basic operators exploring search space 
essentially state operators create new state position search space 
borrow types variation operators genetic algorithm technology 
mutate operators create random variations individual expression 
mutate operator flips bit argument expression probability example probability chance bit flipped 
probability computed argument computing absolute value fraction component mantissa similar bit probability getting random value 
words probability bit mutation half mutate 
crossover operators create single new individual individuals parents 
crossover operator performs single point crossover finds random position path representation swap portion crossover point parents create offspring 
note potential offspring retained returned result 
crossover performs point crossover random crossover points swap individual substrings 
performs point crossover 
random bit mask length path representation generated mask bits determine bits swapped 
remaining portion language creating numeric expressions 
score operator returns objective score argument expression 
iter num current iteration number search execution set size size current search set 
standard mathematical comparison operators included 
erc terminals ephemeral random constants 
randomly initialized numeric constants retain values lifetime genetic programming run 
example programs 
program shows possible random search strategy select random individual flip half bits replace random individual 
second program shows style hill climbing select best individual search set randomly flip random search rep rand mutate sel rand hill climbing rep worst rep best mutate sel best annealing rep worst rep best mutate iter num sel best genetic algorithm rep tourn worst search mutate crossover sel tourn best sel tourn best rep best sel worst fig 

example search programs bits replace worst individual search set result 
note replacement operator rep best executed earlier ignored 
annealing program shows mutation reduced iteration steps increase 
genetic algorithm generic 
offspring created crossover parents selected score proportional selection 
result slight mutation result replaces weak individual search set 
final example shows nonsensical algorithm possible search language 
search weakest individual search space currently visited 
evaluation search algorithms candidate search program evaluated follows 
random initial search space problem interest randomly generated 
performed genetic programming generation search algorithms evaluated initial search set 
program iterated problem set maximum iteration limit 
score best tsp path search set fitness search algorithm 
note alternate strategy mean score entire search set unwise search programs try repeatedly clone fittest tsp paths search set attempt boost fitness 
score tsp path depends direct indexed representation 
direct representation computes length path bit string subtracts minimum path grid respectively 
adds penalty missing cities path adding grids grids missing city 
indexed representation path length minus minimum path length score 
preliminary experiments showed single search algorithm performance varies dramatically different search runs 
nature heuristic search means different initial locations search space may produce different results entirely due random chance 
fixed problem instance randomly initialized data sets program run may produce different results run additionally algorithm produce varying results executed single data set different runs due stochastic nature operators algorithm mutate sel tourn best 
accurate evaluations search algorithm performance requires statistically significant sized test sets 
unfortunately simpler tsp problems investigate impractical genetic programming context 
genetic programming run requires evaluation thousands programs prolonged evaluation programs genetic programming search lengthy perform 
help address problem perform thorough analysis best search algorithm genetic programming generation 
best algorithm genetic programming generation tested additional random tsp search sets mean score resulting scores original program score calculated 
best solution genetic programming run designated search algorithm received best average score entire run 
genetic programming details system experiments 
genetic programming system implements tree genetic programming 
strong typing defining individual numeric types search language 
gp parameter value evolution paradigm generational max generations population size runs experiment initialization ramped half half initial tree depth max tree depth crossover rate mutation rate tournament size crossover tournament size mutation probability internal mutation probability external mutation table common genetic program parameters table shows genetic programming parameters experiments 
parameters standard literature 
initial genetic programming population generated ramped half half tree generation 
half trees generated grow trees terminal nonterminal randomly selected root subtree remaining half full trees nonterminals selected long tree depth limit exceeded 
tree generation tree depths staggered ramped depths 
result population random expressions having varied distribution tree shapes 
probability applying crossover 
applied parents selected tournament size 
mutation probability tree leaves mutated 
table shows search problem variations investigated 
general sets experiments undertaken 
experiment set restrict variation operators single point crossover mutation 
growth operators search set kept constant size 
experiment set restricts growth operators keeps search set size 
full set variation operators possible 
experiment tries various maximum iteration limits different tsp sizes 
experiment set focusses effect growth operators 
experiments initial search set size 
table search experiments results common parameters replacement tsp representations direct indexed tsp sizes restricted variation growth variation ops crossover mutate growth terminals set size iteration limit search set size unrestricted variation growth variation growth terminals set size iteration limits search set size unrestricted variation growth variation growth terminals iteration limit search set size min max primary interest experiments analyze characteristics evolved search algorithms different tsp variations 
order perform analysis search algorithms post processing results table summary algorithms best soln hill memetic experiment fitness climbing annealing ga crossover direct direct indexed indexed direct direct direct direct indexed indexed indexed indexed direct undertaken direct indexed indexed best individual run identified average score separate tsp data sets see section 
solutions step simplified hand editing remove dead code program bloat 
frequency counts program operators obtained simplified programs 
overview results table 
summary identifies broad categories search algorithms identified results runs experiment 
broad categories classify search algorithms hill climbing mutation operators exclusively expressly best individual search set sel best 
annealing similar hill climbing mutation rate diminishes search proceeds 
rate usually inversely proportion itera tion step search set size terms growth experiments 
similar reduction mutation rates simulated annealing 
ga crossover operators possibly combination mutation 
single search set searches steady state genetic algorithm 
memetic crossover crossover operators possibly combination mutation 
multiple crossovers search set akin memetic search number individuals search set contribute information individual created 
repeated new information multiple individuals crossover statistical effect introducing instances useful new information simultaneously correcting erroneous poor information obtained 
classification labels fairly loosely example annealing reduction mutation rate simulated annealing searches 
note possibly specialized variants general algorithm categories analyzed tabulated 
general trends table clearly seen 
expected scores tsp grids lower difficult grids 
indexed representations outperform direct representation 
experiment set permitting search algorithms higher iteration limits results better performance 
definite patterns evident distribution evolved algorithms 
experiments indexed representations biased search strategies ga memetic direct representations favour mutation search strategies hill climbing annealing 
due fact indexed representations retain structure direct representation prone noise error 
implies mutation productive direct representation crossover productive indexed paths 
non growth experiments tended avoid ga style search exception direct 
growth experiments favoured ga style search experiments 
interesting note mutation exclusive variation operator hill climbing annealing uses selection best individual search set 
mutation algorithms evolved tournament random selection search state explore 
hand programs favoured crossover tended tournament selection 
mutation experiment rates usually low 
exception high rates table variation operator distribution experiment runs direct indexed incidence program incidence program experiment operator avg freq avg freq mut mut cross cross mut mut cross cross mut mut cross cross effect flipping path representation preserving inherent information 
experiment runs usually required significant mutation rates necessary order grow search set initial set single individual 
analysis distribution variation operators experiment runs table 
operators listed include variation operators 
mut annealing mutation operations add tourn worst crossover crossover crossover sel tourn best mutate set size set size crossover sel best sel worst sel rand sel tourn best iter num sel best fig 

example annealing search solution experiment growth indexed mutation rates decrease search proceeds 
incidence average measure answers question operator program 
thought operator density measure averaged solutions experiment 
program frequency column refers proportion solutions operator 
multiplying incidence average program frequency values gives total frequency operator entire set runs experiment 
looking table result indexed representations point crossover frequently point point crossover 
due fact point crossover overly destructive information structures encoded indexed path representations 
opposite holds direct representation 
noisier error prone representation paths point crossover behaves mutation operator 
especially evident direct case runs strongly favour mutation 
observation mutation indexed runs plays minor role compared crossover operators negligible indexed runs 
crossover prevalent iteration direct runs iteration direct 
suggests crossover variation opportunity explore useful patterns iterations permitted search 
growth runs performed order see general styles search evolve search sets consisting single random individual 
annealing style mutation negligible grid prevalent 
crossover fairly rare direct solutions 
indexed solutions showed fairly distribution full set variation operators 
example simplified solution index run shown 
program uses cross section different variation operators including annealing mutation second expression 
note high rate mutation 
variety selection operators 
discussion parameter value search set size runs experiment replacement tournament worst tournament size mutation rate annealing rate iteration table common run parameters fig 

fitness performance comparison seen section different styles search algorithms consistently derived different search problems 
verify search algorithms obtained sensible problems runs done select sample experiments hand coded search strategies 
common parameters runs shown table 
cross searches memetic crossover structure crossover variation max evolved tsp operator iteration selection score algorithms direct mut best mut best cross best tourn hill climb mut tourn annealing mut tourn cross tourn indexed mut best mut best cross best tourn memetic mut tourn mut tourn cross tourn direct mut best cross best tourn cross mut best tourn memetic mut tourn cross tourn cross mut tourn indexed cross tourn table run results crossover crossover crossover crossover crossover crossover cross tourn memetic tourn selection operator 
cross mut uses expression crossover crossover mutate crossover crossover crossover mutate crossover crossover note applying crossover individual obtained sel best results variation individual 
runs combined sel best sel tourn best order obtain possibility creating variation 
results runs shown table 
score column refers average objective scores best solution runs 
single best result experiment marked star 
evolved algorithms column information table 
runs confirm style search algorithm evolved consistent relative performance search algorithm compared possibilities 
table highlights pertinent points search strategies tested 
firstly crossover style variation operators perform hill climbing selection sel best 
crossover requires variability parent structures best done probabilistic selection done tournament selection random selection seen evolved algorithms 
mixture mutation crossover ideal regard seen better performance mixed crossover mutation runs direct experiment 
evident evolved algorithms crossover mutation 
indexed runs highlight fact memetic crossover powerful reproduction operator simple parent crossover 
furthermore contrary intuition memetic crossover equivalent point crossover 
ability memetic crossover combine representation information wide variety individuals search set decidedly powerful strategy 
seen performance graph obtained averaging best scores obtained generation runs 
note computational overhead involved memetic crossover may issue determining practicality 
research shows search strategies automatically derivable search problems algorithmic level 
search algorithms variety structured unstructured tsp problems varying complexity evolved genetic programming 
analyses showed algorithms obtained consistent empirical performance known search strategies problems 
number aspects research continued investigation 
issue degree bias caused search language 
language introduced section limited scope robustness intended denote large variety search paradigms 
fixed search set grow greatly restricts kinds algorithms possible 
lack advanced data structures stacks limiting 
way expand generality search language 
particular primitives written enable tabu style search 
bias implementation language set primitives implemented borrowed primarily genetic algorithms 
enormous variety variation operators literature 
general language include larger set operators 
ideally details operators evolvable done 
genetic programming paradigm contributed bias styles algorithms obtained 
program bloat intron dead code prevalent runs 
largely result way replacement growth operators implemented 
example final replacement operator actual effect iteration step earlier operators grown affecting result 
sensible algorithms evolved able restrict bloat result better performance search algorithms 
bloat favour certain search operators 
expression rep tourn worst survive reproductive alteration rep worst 
tournament size term expression grow large protect parent node destruction 
rep worst term genetic insurance policy 
necessity search problems explored experiments limited complexity 
results obtained sections limited factors search set size maximum iteration limit grid size 
experimental decisions create search horizon results obtained valid extent search accordingly undertaken 
point important analysis relative performance various search algorithms table influenced experimental parameterizations 
example chosen maximum iteration limit search set weak choice parameters vanilla genetic algorithm run equivalent mere generations 
typically population run generations 
long term performance characteristics hill climbing annealing memetic crossover search extended search experiment differ dramatically 
likewise different styles search algorithms evolve changes parameters influential 
contributes body meta heuristics 
inspired research spector robinson evolution experiments 
lay foundation evolving evolutionary operators behaviours push language general purpose stack language 
evolving evolutionary search basic language ambitious goal evolution search algorithms higher level search primitives 
interesting consider level abstraction levels meta evolution produce novel powerful search paradigms heretofore unknown literature 
example general purpose search language permit synthesis complex problem specific search strategies coalesce function variation operations 
imagine giving search language operators details problem representation structure permitting operators compute finer resolution measurement partial fitness 
information derive effective search strategies possible fitness evaluated monolithic value entire candidate solution done 
research supported nserc operating 
angeline 
self adaptive crossover operators genetic programming 
angeline kinnear editors advances genetic programming ii pages 
mit press 
culberson 
futility blind search algorithmic view free lunch 
evolutionary computation 
edmonds 
meta genetic programming evolving operators variation 

fogarty 
varying probability mutation genetic algorithm 
shaffer editor proceedings third international conference genetic algorithms pages 
morgan kaufmann 
garey johnson 
computers intractability 
freeman new york 

traveling salesman problem variations 
kluwer academic publishers 
iba de garis 
extending genetic programming guidance 
angeline kinnear editors advances genetic programming ii pages 
mit press 
koza 
genetic programming programming computers means natural selection 
mit press 

studies theory design space memetic algorithms 
phd thesis faculty computing engineering mathematical sciences university west england bristol 
liang yao newton 
adapting self adaptive parameters evolutionary algorithms 
applied intelligence november december 
michalewicz fogel 
solve modern heuristics 
springer verlag 
montana 
strongly typed genetic programming 
evolutionary computation 
nakamura 
evolutionary scheduling scheme approach job shop scheduling problem 
ieice trans 
fundamentals june 
russell norvig 
artificial intelligence modern approach 
prentice hall 
spector robinson 
genetic programming evolution push programming language 
genetic programming evolvable machines march 
tamaki kita shimizu nishikawa 
comparison study genetic codings traveling salesman problem 
proceedings ieee conference evolutionary computation pages 
ieee press june 
teller 
evolving programmers evolution intelligent recombination operators 
angeline kinnear editors advances genetic programming ii pages 
mit press 
wallis 
comparative study search techniques applied minimum distance problem bch codes 
proceedings th iasted international conference artificial intelligence soft computing pages banff alberta july 
winston 
artificial intelligence 
addison wesley 
wolpert macready 
free lunch theorems search 
technical report sfi tr santa fe institute february 
wolpert macready 
free lunch theorems optimization 
ieee transactions evolutionary computation 
zongker punch 
lil gp user manual 
dept computer science michigan state university 

