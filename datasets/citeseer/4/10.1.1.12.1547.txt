multiple counterexample guided iterative abstraction refinement industrial evaluation marcelo haim moshe vardi 
computer science department technion haifa israel cs technion ac il formal property verification intel haifa israel haim intel com department computer science rice university vardi cs rice edu 
describe completely automated framework iterative abstraction refinement fully integrated formal verification environment 
environment consists basic software tools forecast bdd model checker sat bounded model checker mce technology multiple counterexample analysis 
framework initial abstraction chosen relative property verification 
abstraction model checked forecast case failure counterexample returned 
framework includes counterexample analyzer module applies techniques bounded model checking check counterexample holds concrete model 
extended concrete counterexample 
important capability provided separate tool addresses major problems verification manual abstraction 
counterexample spurious novel refinement heuristic mce guide refinement 
part model refined chosen refinement algorithm computes new abstraction includes logic possible adding new variables striking balance refining abstraction keeping size manageable 
demonstrate effectiveness framework challenging intel designs amenable bdd model checking approaches 
significant developments area formal design verification discovery algorithmic methods verifying properties finite state systems 
temporal logic model checking verify correctness finite state system respect desired temporal property checking labeled state transition graph models system satisfies temporal logic formula specifies property 
advent symbolic techniques model checking tools enjoyed substantial growing years showing ability supported part nsf ccr ccr iis iis eia bsf intel 
discover subtle flaws result extremely improbable events 
tools viewed academic interest routinely industrial applications 
model checking limited respect size designs handle due called state explosion problem refers exponential complexity model checking respect number state variables model 
fundamental techniques dealing state explosion problem abstraction concrete model abstracted simpler model smaller state space hopefully retains essential features concrete model :10.1.1.116.9247
model typically concrete model allows behaviors allowed concrete model 
respect universal properties properties defined terms universal quantification traces model checking model sound model satisfies property concrete model 
model false negatives possible get spurious counterexamples extended allowed behaviors concrete model 
consequently automation model checking abstraction requires fair amount manual labor 
decide concrete model 
model checker shows model satisfies property verification concrete model done 
model checker returns counterexample respect model 
analyze counterexample see real spurious 
counterexample real extended counterexample concrete model returned verification engineer debugging 
counterexample spurious refine model order bring closer concrete model spurious counterexample eliminated 
labor intensive process reduces dramatically productivity verification engineer 
result usefulness model checking formal verification large industrial designs seriously hampered 
decade consistent effort automate process model checking abstraction offering algorithmic support iterative abstraction refinement 
consists basic steps design model analyze counterexample refine abstraction see 
starting sangiovanni vincentelli researchers described ways steps automated see related 
describe completely automated prototype framework iterative abstraction refinement integrated formal verification environment consisting basic software tools forecast bdd model checker sat bounded model checker mce technology analysis 
model automatically cut prune design logic turning chosen circuit nodes necessarily latches free unconstrained inputs pruning logic drives initial abstraction chosen relative property verification 
framework applies bounded model checking techniques analyze counterexample 
key insight counterexample bounded length enables reduce problem bounded model checking problem 
clarke model checking finished 
start initial abstraction passed 
real 
analysis refinement hints spurious fig 

framework automated abstraction iterative counterexample guided refinement proposed similar sat techniques address problem 
addition integral part automatic refinement framework capability solution crucial support manual abstraction methods provided standalone utility 
summary task check counterexample holds concrete model 
extended concrete counterexample verification engineer debugging 
analysis step indicates counterexample spurious abstraction loose refined 
freed nodes un freed adding new logic model 
increases model logical complexity raises computational complexity model checking 
tradeoff eliminating spurious behaviors increasing size model 
main contributions novel heuristic choose nodes un freed 
shows multiple counterexample mce technology supports analysis counterexamples simultaneously 
show heuristic guide refinement process selecting un freeing nodes relevant eliminating spurious counterexamples 
second main contribution show nodes un freed chosen refine model including logic possible adding new variables freed nodes 
iterative refinement frameworks perform refinement latch level 
real life designs replacing latch new latches transitive fan cause sudden addition huge amounts logic 
desirable able prune intermediate nodes 
describe heuristic analyzes logic un freed nodes fan latches find balance refining abstraction keeping model size manageable 
rest structured follows section describes related published literature 
section introduces model checking environment tool operates way initial abstraction chosen 
sections describe respectively counterexample analysis module refinement algorithm 
section evaluate effectiveness prototype set challenging intel designs amenable bdd model checking approaches 
follow concluding remarks section 
related cone influence coi reduction common abstraction technique today core component model checking tools 
coi property consists variables affect property directly indirectly dependencies variables model 
variables coi influence validity specification removed model 
coi reduction exact abstraction sense model satisfies property concrete model 
aggressive abstractions ones consider go step eliminating parts coi believed irrelevant property checked 
doing create model introduce spurious behaviors concrete 
significant effort invested automating process resulting various iterative refinement frameworks 
discuss works 
early framework localization reduction kurshan defined context regular language containment implemented cospan 
reduction keeps nodes latches intermediate nodes topologically close node dependency graph property verified nodes abstracted away non deterministic assignments 
refinement counterexample guided step adding additional nodes dependency graph 
unfortunately details effective implementation provided check spurious counterexamples selection small set nodes eliminate counterexamples 
sangiovanni vincentelli similar iterative framework checking language emptiness communicating automata 
check spurious counterexamples synthesize automaton error trace intersect automaton concrete model 
resulting language emptiness problem submitted bdd model checker 
experience shows bdd methods little chance coping size concrete model 
contrast sat solutions counterexample analysis scale better model size 
avoid compiling error trace automaton avoid introducing auxiliary variables 
reduction bounded model checking translates error trace new constraints added sat instance 
clarke counterexample guided refinement actl model checking 
abstraction exploits control structure hdl hardware description language design dependency graph 
provides finer control allowing degrees abstraction variable 
relying syntactic information hampers application technique gate level designs 
check spurious counterexamples bdd reachability analysis performed concrete model constrained information provided error trace 
suffers scalability problem mentioned 
issue addressed analysis reconstruction counterexamples performed intermediate model midway concrete model 
intermediate model refined incremental way 
bdd approaches approach limited capacity examples reported exceed variables 
today widely accepted sat atpg appropriate analysis spurious counterexamples 
approach taken sat task 
suggests new refinement heuristics integer linear programming machine learning 
heuristics try find minimal set variables separates set dead states set bad states 
purpose needs sample sufficiently states sets 
worst case sample exponential number states sampling quite expensive 
iterative refinement tool described employ different verification engines 
hybrid bdd atpg engine model checking sequential atpg detecting spurious counterexamples combination valued simulation sequential atpg obtain refinement hints 
strongly believe additional engines addition bdd ones way overcome limitations bdd model checking 
distinguishing feature approach fine control successive refinements size growth 
stems critical aspects refinement attempt eliminate single error trace price 
experience shows tends push refinement wrong direction adding logic necessary 
refinement analyzes simultaneously error traces length adds small number nodes root cause spurious counterexamples 
second limit pruning level latches prune level intermediate nodes design 
strategy critical coping nodes large fan cone avoiding bring cone nodes 
carefully choosing nodes pruned get fine control growth successive refinements size 
min cut technique apply achieve effect flow problem generate circuit technique quite standard specific purpose choosing pruning model new 
min cut computed counterexample analysis phase said latches chosen pruning 
similar technique tool checking unreachability coverage states optimization automatic test pattern generation 
known details published tool min cut refinement best knowledge computed completely different flow problem 
model checking environment initial abstraction set hardware design verified high level hardware description language compiled logical model model abstraction refinement process takes place 
logical models operate consist set boolean variables represent system states boolean formula representing set initial states collection tr boolean formulas representing transition constraints collection formulas representing fairness constraints 
formulas variables formulas tr variables fx assignment variables denote corresponding assignment variables fair trace model infinite sequence assignments variables satisfies tr satisfies infinitely satisfies 
set specification assumptions intel language linear time temporal logic augmented regular expressions clocks resets 
temporal assumption temporal assertion requirement check model satisfies check implemented automata theoretic approach 
compiled logical models respective buchi automata 
models conjoined logical model design verification model checker tests combined model language emptiness 
abstraction method chose consists selecting certain nodes combined model turning free inputs 
constraints tr typically form turn free input removing tr constraints left side 
call operation freeing done part logic drives stops influencing variables define property allowing coi reduction prune part logic model 
freed nodes define frontier separates concrete model logic included current model logic pruned 
initial abstraction step automatic generation initial model frontier 
specification assumption logic probably relevant property checked pruning cause spurious counterexamples 
part model generated compiler relatively small 
initial model obtained freeing nodes original design logic model connected generated logic see 
model checking model usually takes little time property assumption circuit model frontier free nodes new unused nodes model fig 

initial abstraction finds spurious counterexamples property directly implied provided assumption regardless design verified 
model checking forecast intel bdd model checker searches counterexample trace represented prefix fair cycle fairness constraint satisfied state 
focus safety properties prefix trace needed 
case counterexample forecast provides trace analyzed determine real see section 
forecast provides multiple counterexample mce information refinement module see section 
note forecast run usual reductions optimizations cone influence reduction dynamic variable reordering means order logic variables bdds evolves model checking session 
run final variable order saved file incorporated model checker iteration part initial variable ordering 
iteration model includes variables appear preceding ones incorporating previously computed variable order obtain smaller bdds 
counterexample analysis automatic abstractions manual abstractions result false negatives 
efficiency framework supports abstractions highly depends ability detect counterexamples resulting verification session spurious 
section describe counterexample analysis method called determining counterexample real extended concrete model 
case extends counterexample concrete 
benefits determining spurious failures case valid failure reports easing debugging counterexamples provided concrete counterexamples include assignments concrete model inputs 
built sat bounded model checking technology 
inputs concrete model counterexample 
counterexample analysis problem translated bounded model checking problem length 
bounded model checking concrete model unrolled steps propositional formula generated 
formula describes paths initial state transition path tr construction path straightforward principle nontrivial computational task size concrete model formula may hundreds thousands propositional variables 
bounded model checking tool implements unrolling efficiently 
translated propositional formula way phase boolean formula describing th phase 
phase restricts variables corresponding model nodes values take corresponding phase 
define orm phase sat engine looks satisfying assignment formula path orm case satisfying assignment report counterexample real provide extended counterexample terms concrete model signals 
satisfying assignment exist conclude concrete model display counterexample agreeing signals model report counterexample spurious 
refinement algorithm rationale abstractions freeing pruning refining abstraction means moving frontier freed nodes defining bigger model 
involves main steps choosing nodes frontier un freed adding cone influence back model ii choosing nodes newly added logic freed keep model small 
new abstraction un freed nodes values constrained added logic fewer behaviors possible 
refinement iterations terminate apply backtracking 
goal iterative refinement process find abstraction display spurious counterexamples 
may counterexamples may reveal real 
achieve goal fewer iterations refinement step add logic possible 
search goal carried capacity limits model checking phase add logic best chance eventually eliminate spurious counterexamples 
spurious counterexample computationally difficult find minimal set nodes need un freed eliminate 
approach greedily add nodes model spurious counterexample hand eliminated 
greedy approach may quite suboptimal lead significant growth model 
approach add large chunk logic refinement step guarantee elimination spurious counterexample 
may cause sudden addition logic model 
eliminating spurious counterexample hand single refinement step necessarily best way refining abstraction 
section presents new heuristic iteration guides refinement hinting nodes frontier un freed eliminate spurious counterexamples length 
reasons just described prefer limit amount logic added single iteration decide refinement steps fresh hints guiding heuristic 
tradeoff adding logic single iteration limiting model size rest section 
choosing nodes frontier un freed counterexample guided refinement frameworks spurious counterexamples analyzed looking hints elements abstraction cause spurious counterexamples 
case hints need suggest nodes frontier un freed 
tool refinement module implements new technique obtaining hints 
new heuristic exploits multiple counterexample mce information provided multi valued counterexample annotation bdd symbolic model checker forecast 
multi valued annotation counterexample represents counterexamples length 
mce information facilitates simultaneous elimination spurious counterexamples refinement steps 
new heuristic specially suited attaining goal defined section 
multi valued counterexample annotation traditional symbolic model checkers provide single counterexample output failing verification 
specially difficult diagnose verification failure reported single counterexample trace 
hand verification engineer data signal values counterexample trace 
hand little data counterexample possible ones 
forecast addresses counterexample diagnosis problem providing mce information form multi valued counterexample annotation concise intuitive counterexample data representation 
annotation counterexample trace enhanced classification signal values trace types strong indicates counterexamples value signal phase trace respectively 
conditional indicates value signal phase counterexample value different counterexample illustrating failure 
irrelevant indicates value signal phase probably unrelated verification failure 
single multi valued annotated counterexample provides information possible counterexamples length 
mce obtain hints refining abstractions strong values provide insight pertinent signals causing counterexample 
example value signal certain phase counterexample strong zero means correcting design value signal phase gets rid counterexamples length counterexample hand 
error rectification problem reduced determining cause strong valued signal take different value 
assign unique fixed weight value types strong values get higher weight 
multi valued annotated spurious counterexample compute node average weight values assigned trace 
nodes highest average weight chosen refinement 
decision nodes current frontier un freed iteration involves tradeoff described section 
choosing node highest average weight yields cautious refinement process longer 
experimentation examination list frontier nodes sorted decreasing weight suggest results obtained un freeing nodes time 
section elaborate experimental results lead decision number nodes un free iteration 
frontier free nodes nodes current model latches new unused nodes current model unoptimized upper frontier optimized upper frontier pushed non latches single new fan 
latches new variables fan removed 
lower frontier chosen frontier replacing chosen node new latches transitive fan 
lowest minimal separating frontier upper lower frontiers 
replacing chosen node new nodes immediate fan 
fig 

choosing new frontier choosing new frontier iterative abstraction refinement frameworks abstractions consist pruning model latches registers chosen part frontier 
choosing latches un freed new latches replace frontier transitive fan appear current model 
experiments real life examples showed refinement policy causes cases sudden increase model size bigger controlled refinement process usually causing lots irrelevant logic taken current model slowing model checking phase reaching capacity limit 
keep growth rate number variables control realized crucial able add node free nodes frontier restricting freeing latches 
cautious approach replace node frontier nodes immediate fan new ones appear previous model 
yields slow refinement process 
sequel refer frontier upper frontier call frontier passes latches input signals transitive fan lower frontier see 
obviously tradeoff discussion section upper frontier lower frontier 
desirable allow model grow possible minimizing number variables bdds typically minimizes size bdds describing sets reachable states 
addition intermediate nodes increases number constraints may turn increase time cost computing image sets 
upper lower frontiers latches number variables added depends number nodes chosen frontier turned free inputs 
means seek smallest frontier minimal size constraints transition relation 
straightforward optimizations applied upper frontier pushed downwards adding variables saving 
optimizations illustrated performed repeatedly upper frontier longer applicable single new fan propagation moment nodes fan node frontier divided sets appear current model call new nodes 
node frontier latch single new fan node replaced frontier adding variables model 
latches new fan variables node frontier latch new variables latches primary inputs part current model transitive fan un freed removed frontier 
adds model new logic drives latch adding variables model 
optimization saves refinement iterations spent un freeing kind latches 
frontier looking separate upper lower frontiers sense path fan relation connecting node lower frontier node upper include node belonging frontier 
means looking minimal cut part model optimized upper frontier lower frontier 
computation minimal cut standard procedure circuit analysis implemented translating part model frontiers simple flow problem fan relation executing maxflow algorithm applying maxflow min cut theorem derive minimal cut maximal flow 
minimal cuts exist prefer lowest takes intermediate logic possible model 
results report iterative refinement prototype performs experiments carried intel designs 
verification test cases model checker answers true falsification test cases real counterexample reported 
selected test cases way capacity forecast bdd iterations variables concrete forecast cpu time secs vs model iteration total real real real real real real real real real real table 
results real life test cases capacity bdd symbolic model checking 
real real verification cases real falsification case 
model checker complete timeout bound hours coi reduction 
table records test case number iterations required reach definite result pass fail number variables latches inputs concrete model model iteration coi reduction forecast cpu time iteration total forecast cpu time 
significant problem industrial size projects ensuring properties satisfied snapshot design development satisfied versions 
context conventional testing checked regression testing 
saving set nodes belong frontier defining abstraction generated bdd variable order provide support regression verification attempts repeat verification result design modified changes affect parts model pruned nodes frontier freed 
regression verification purposes expect running time quite close forecast cpu time iteration 
shown table forecast cpu times iterations negligible seconds comparison original timeout bound hours 
applied prototype designs real real real real real 
results reported table demonstrate points robustness designs versions designs real real real real table 
seen reported number variables concrete models designs larger earlier versions variables 
growth pose significant hurdle bdd model checker 
contrast growth marked impact prototype 
regression discussed regression verification starting point abstraction variable order obtained refinement iteration 
see impact variable order reuse ran iteration refinement order obtained prior iterations order case forecast supplied initial order static analysis 
seen designs real un freed iterations variables forecast time secs iterations nodes concrete vs iteration removed model reused order reuse real real real real real timeout hrs 
table 
results real life verification test cases capacity forecast number nodes un freed iteration 
forecast time shown iteration rerun reusing initial variable order information 
real order reuse dramatic impact performance 
mce hints assess power mce hints ran prototype different settings un freeing iteration variables 
seen table going reduced number iterations consequently total running time significantly going effect 
checked iteration spurious counterexample eliminated reported fraction iterations happened 
seen table significant effect occurred transition un freed variables 
note transition typically increase number variables final abstraction 
experience shows design balance point counterexample elimination abstraction growth rate 
point depends design property design major contributor state explosion 
applied iterative refinement flow distinct real life test cases comparing results lower frontier vs min cut frontier 
results reported table clearly demonstrate advantages min cut optimization run time iterative refinement flow significantly reduced 
tests achieved reduction run time 
case test run complete applying min cut optimization timing hours 
applying min cut verification completed seconds 
min cut optimizations un freeing latches time adds redundant logic negative impact quality abstraction run time min cut applied frontier mincut mincut iterations latches inputs time iterations latches inputs time test test test test test test test test test test test test table 
comparison refining lower frontier vs mincut frontier pass non latch elements addition logic un freed frontier node conservative 
able un free frontier nodes iteration 
result number iterations reduced seen table 
min cut technique may reduce significantly number latches final abstractions reduced number inputs significantly seen test 
concluding remarks automatic generation abstractions iterative refinement successful method expands applicability current model checking tools 
contributes area ways describe automatic counterexample analysis tool integrated sat bounded model checker 
detecting spurious counterexamples iterative refinement framework tool isolation analyzing results manual abstractions 
useful ability provide concrete version real counterexamples 
second departs way counterexamples guide refinement process refinement step need necessarily eliminate spurious counterexample hand 
refinement done spurious counterexamples eventually eliminated 
doing choose relevant logic order avoid reaching capacity limits model checker successful abstraction 
novel heuristic multiple counterexample mce technology specifically addresses goal 
mce heuristic hints nodes frontier relevant counterexamples length hand 
third refinement algorithm achieves fine control models size growth allowing frontier include intermediate logic nodes applying optimizations aimed minimizing number added variables maximizing constraints added model 
experiments show success approach real life test cases capacity state art bdd model checker provide insight various tool configuration parameters tuned set test cases 
possible avenue combine hints different sources deciding nodes un freed 
possible direction development allow refinement process backtrack try refinement directions capacity limits model checker reached 

fix gerth ginsburg haim vardi 
temporal logic new temporal property specification language 
tools algorithms construction analysis systems tacas lncs 
springer verlag 

sangiovanni vincentelli 
iterative approach language containment 
cav lncs pages 
springer verlag 

geist 
symbolic localization reduction reconstruction layering backtracking 
brinksma larsen editors cav volume lncs pages 
springer verlag 

biere cimatti clarke zhu 
symbolic model checking bdds 
tools algorithms construction analysis systems tacas volume lncs pages 
springer verlag 

leonard 
finding bugs alpha microprocessors satisfiability solvers 
cav volume lncs pages 
springer verlag 

bollobas 
graph theory 
springer verlag 

burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation june 

clarke gupta 
sat abstraction refinement ilp machine learning techniques 
brinksma larsen editors cav volume lncs pages 
springer verlag 

clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems january 

clarke grumberg jha lu veith 
counterexample guided abstraction refinement 
cav volume lncs pages 
springer verlag 

clarke grumberg long 
model checking abstraction 
acm transactions programming languages systems september 

clarke grumberg peled 
model checking 
mit press 

fix giunchiglia vardi 
benefits bounded model checking industrial setting 
cav volume lncs pages 
springer verlag 


efficient debugging formal verification environment 
margaria editor correct hardware design verification methods volume lncs pages 
springer verlag 

ford fulkerson 
maximal flow network 
canadian journal mathematics 

ziv vardi fix 
prioritized traversal efficient reachability analysis verication falsification 
cav volume lncs pages 
springer verlag 

govindaraju dill 
counterexample guided choice projections approximate symbolic model checking 
iccad 

somenzi 
synthesis verification algorithms 
kluwer 

hardin har el kurshan 
cospan 
cav volume lncs pages 
springer verlag 

hardin kurshan mcmillan reeds sloane 
efficient regression verification 
iee proc 
pages 

ho taylor long 
smart simulation collaborative formal simulation engines 
iccad pages 

jang moon 
iterative abstraction ctl model checking 

krishnamurthy 
improved min cut algorithm partitioning vlsi networks 
ieee transactions computers 

kupferman vardi 
model checking safety properties 
formal methods system design 

kurshan 
computer aided verification coordinating processes 
princeton univ press 

lee pardo jang somenzi 
tearing abstraction ctl model checking 
iccad pages 

lichtenstein pnueli 
checking finite state concurrent programs satisfy linear specification 
proc 
th acm symp 
principles programming languages pages 

lind nielsen andersen 
stepwise ctl model checking state event systems 
cav volume lncs pages 
springer verlag 

manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag january 

kurshan 
syntactic program transformations automatic abstraction 
cav volume lncs pages 
springer verlag 

pardo 
automatic abstraction techniques propositional calculus model checking 
cav volume lncs pages 
springer verlag 

pardo 
incremental ctl model checking bdd subsetting 
design automation conference pages 

sifakis 
specification verification concurrent systems cesar 
proc 
th international symp 
programming volume lncs pages 
springer verlag 


dynamic variable ordering ordered binary decision diagrams 
iccad pages 
ieee computer society press 


proving safety properties integrating static analysis theorem proving abstraction 
cleaveland editor tacas volume lncs pages 
springer verlag 

vardi 
automata theoretic approach linear temporal logic 
moller birtwistle editors logics concurrency structure versus automata volume lncs pages 
springer verlag 

vardi wolper 
automata theoretic approach automatic program verification 
st symp 
logic computer science pages cambridge june 

wang ho long zhu ma 
formal property verification abstraction refinement formal simulation hybrid engines 
design automation conference pages 
