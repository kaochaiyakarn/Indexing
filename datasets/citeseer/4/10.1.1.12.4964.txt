ecient concept generation anne berry jean paul bordat alain generating concepts de ned binary relation set properties set objects important current problems encountered data mining 
new algorithm generates concept exactly graph theoretic results 
process time complexity jp jm maximal chain concept lattice denotes number non crosses relation uses data structure small polynomial size 
improves current best time algorithms problem require jpj space jp time concept alternately polynomial space jp time concept 
algorithm extra cost compute edges lattice just eciently generate frequent sets 
context data base management data mining problems data bases represented binary relation set properties set objects 
tools analyzing data contained base compute possible combinations elements relation maximal rectangles 
rectangles called concepts organized hierarchical structure called concept lattice 
theory studied mathematicians far back nineteenth century see popular developed wille team remains important current trends research data mining arti cial intelligence concept lattices elds varied discovery association rules data bases generation frequent item sets machine learning reorganization object hierarchies :10.1.1.10.9317
main drawback approach concept lattice general exponential size 
consequence primary importance able generate concepts eciently part lattice explored 
concept generation rise steady ow research past years 
rst algorithms published eld due chein algorithm generates successive layers lattice de ning possible candidates combinations concepts previous layer exponential worst time complexity generated concept see 
bordat algorithm improvement runs concept jpj breadth fashion interesting features algorithm computes edges lattice 
time complexity improved raynaud concept 
algorithms require exponential space store computed concepts 
bat 
ere cedex france 
mail berry fr fr lirmm rue ada montpellier france :10.1.1.10.9317
mail bordat lirmm fr 
concepts need stored encountered space problem easier running time concept higher best algorithm due ganter runs time concept interesting notion order avoids scanning possible subsets properties avoiding re computing concept times 
address issue eciently computing concepts encountering exactly polynomial space 
contribution algorithm runs nm time maximal chain denotes number non crosses relation requires small polynomial space nm 
greatly improves comparable complexity requiring exponential space signi cantly improves ganter time concept 
furthermore number concepts tends exponential relation dense case order complexity maximal chain 
algorithm introduce presents similarities 
uses concept generate concepts just lattice called cover working step sub relation 
new features added concept inherits information previously processed concepts order avoid generating concept breakthrough concept generation 
di erence recursive depth search lattice enables store polynomial number bytes concept lattice may exponentially large small height 
fashion compute cover concept di erent 
approach experience graphs 
bordat bipartite graph handle relation 
berry proposed di erent encoding bipartite graph established correspondence concepts lattice minimal separators graph :10.1.1.10.9317
algorithmically interesting past decade research done minimal separators eciently solve various graph problems chordal embedding particular papers deal ecient enumeration minimal separators :10.1.1.10.9317
pointed underlying bipartite graph results emerging theory minimal separation current best algorithms generating concepts easily matched terms time space :10.1.1.10.9317
graph properties improve 
explicitly results minimal separation underly approach reader referred full explanation relationship :10.1.1.10.9317
order compute atoms concept lattice graph notion domination vertices vertex said dominate vertex neighborhood includes neighborhood property vertices set share neighborhood dominated vertex encoding graph gr de nes atom concept lattice :10.1.1.10.9317
main complexity improvement follows information necessary determine domination relationships vertices inherited moves lattice path bottom top called maximal chain 
enables avoid recomputing domination information time new concept encountered depth process 
presenting algorithm give formal de nitions general algorithmic process 
data structure domination table illustrate processes involved small example 
preliminaries lattices nite set properties nite set objects binary relation de ned subset cartesian product element refer cross relation non cross 
denote jpj denote number non crosses 
concept called maximal rectangle closed set sub product called intent concept called extent 
concepts ordered inclusion intents de ne lattice called concept lattice galois lattice 
lattice represented hasse diagram transitivity re exivity arcs omitted 
concepts referred elements lattice 
lattice smallest element called bottom element greatest element called top element 
path bottom top called maximal chain lattice 
relation full line crosses easy compute concepts concepts sub relation line removed :10.1.1.10.9317
rest discuss relations lines crosses 
say concept successor concept intermediate concept set successors element called cover element 
successors bottom element called atoms 
concept descendant concept notions predecessor ancestor de ned dually 
example binary relation associated concept lattice shown 
set properties fa hg set objects :10.1.1.10.9317
graphs relation de ned underlying encoding graph gr graph vertex set cliques vertex vertex xy edge gr denote gr subgraph gr induced vertex set external neighborhoods denote fy oj gg fy pj gg current subgraph gr example :10.1.1.10.9317
order compute cover concept need graph notions 
de nition vertex said dominate vertex say domination strict dominates 
important notion maximal clique modules 
de nition set properties said form maximal clique module gr vertex dominates vertex call 
gr de ne partition essentially behaves single vertex vertices share external neighborhood denoted 
extend de nition say dominates 
theorem concept covers concept gr non dominating :10.1.1.10.9317
example gr partition fa hg fbg fcg fdg feg ffg fgg fhg 
feg dominates fdg ffg dominates fgg fgg dominates fa hg fbg fcg dominated dominating 
non dominating gr fa hg fbg fcg fdg 
algorithmic process theorem recursively compute cover element starting bottom element :10.1.1.10.9317
process generate concept exactly times number predecessors 
stated goal generate concept exactly 
ordering concepts de ned inclusion concept descendant veri es algorithm works depth rst fashion generate concept concepts containing intent de ned recursive call brother concept uses containing vertex concept generated previously 
careful store information brother concept brother ancestor concept avoid computing concept 
general algorithmic process concept compute set nd non dominating gr nd de nes concept covering compute set new nd containing processed vertex new de nes new concept covering new recursively apply process new concept intent add vertices set processed vertices 
bottleneck complexity process computing set non dominating resulting worst time analysis heavily depend achieved 
straightforward way compute non dominating repeatedly nd minimum degree compute dominate remove vertex set :10.1.1.10.9317
algorithm mcs yield compatible ordering linear time computing dominating cost time globally process obtain set non dominating time non dominating generated add worst time complexity nm concept 
experimentally algorithm implemented explained runs rapidly extra information processed vertices especially step added set processed vertices dominate added 
order improve worse time behaviour propose sophisticated approach computing non dominated described 
updating domination information order eciently answer requests set non dominating domination table containing information current graph 
information inherited maximal chain maintaining table course depth traversal maximal chain avoids recomputing entire domination information step algorithm 
inheritance mechanism involved moving lattice say concept represented underlying graph gr second concept covering rst represented underlying graph gr things happen 
set properties disappear 

set objects disappear 
example moving bottom element element ah new subgraph de ned fa hg properties disappear objects :10.1.1.10.9317
vertex de ned dominating vertex graph gr yi edge xi edge 
equivalently non cross non cross idea maintain galois sub hierarchies list table pair properties objects prevent dominating means object appear list 
corresponding lists example table table see dominate objects disappeared :10.1.1.10.9317
table contains nm bits slot elements list contains correspond distinct neighbors gr row contains lists 
example edges gr updating table means pair removing list objects disappear graph moving concept successors 
concerned number vertices vertex dominates graph cardinalities sucient data structure non dominating number vertices dominates exactly jxj 
domination table contains numbers joj representing size list vertex dominates vertex 
order rapid access information keep table scanning gives number vertices number vertices dominates 
non dominating arbitrary jm query non dominating answered ecient time table example tables process constructing initial domination table table initialized containing zero values add tables pre updated step describe domination relationships new graph recursive call post updated back original form :10.1.1.10.9317
global time required pre updating maximal chain lattice exceed number bits contained pre updating cost nm 
clearly post updating costs exactly 
updating algorithm section 
algorithm algorithm initially called concepts empty marked set :10.1.1.10.9317
tables constructed gr described previous section 
algorithm concepts input concept set marked vertices output encountered direct successors initialization gr compute partition vertex belongs denoted 
marked marked marked 
compute set nd non dominating nd jm nd nd 
desirable generate cover nd print 
generate unprocessed descendants nd marked print generating frequent sets test size small take nd marked 
update pre concepts marked update post marked marked 
algorithm update input variable set pre post 
output tables modi ed current values choose representative 
update table simulating deletion property set pre jxj jxj 
update tables simulating deletion objects 
pre post 
complexity analysis step algorithm concepts requires computing graph done time algorithm hsu ma table nding set non dominating requires time comparing marked costs time concept processed global time 
discussed section algorithm update globally costs nm maximal chain 
global time complexity concept plus nm maximal chain 
space complexity recursive queue contains concepts size marked size contains nm bits global space complexity nm 
example step execution starts bottom element :10.1.1.10.9317
gr non dominating fa hg fbg fcg fdg 
cover ah :10.1.1.10.9317
set marked processed vertices empty 
ah chosen processed 
step concept ah chosen processed table accordingly pre updated objects disappear pairs cartesian products fb ff gg fd fb gg fc dg fb gg cause corresponding numbers decremented :10.1.1.10.9317
new tables obtained graph gr fb 
fb gg fcg fd ffg fb gg 
concept generated 
step processed 
non dominating fcg ffg 
concepts generated chosen processed 
step processed :10.1.1.10.9317
non dominating fc top element abcdefgh generated 
step abcdefgh processed graph obtained empty new concept generated 
step step recursively calls marked ffg 
non dominating fd fg marked new concept generated 
step step recursively calls marked fa hg 
non dominating fbg fdg 
concepts bc cd generated 
bc chosen processed 
step bc processed marked fa hg 
non dominating fd fa hg marked fd generate new concept bcde 
step bcde processed marked fa hg 
non dominating fa hg marked new concept generated 
step step recursively calls cd marked fa hg fa hg inherited concept ah brother father fbg inherited brother concept bc 
fb 
marked new concept generated 
step step recursively calls marked fa hg 
non dominating fa hg fcg 
marked new concept generated 
step step recursively calls marked fa hg :10.1.1.10.9317
non dominating fcg feg 
marked concept de generated :10.1.1.10.9317
step de processed marked fa hg :10.1.1.10.9317
non dominating fb cg 
marked new concept generated 
recursive queue empty algorithm terminates 
cd ah de abcdefgh bc bcde ah abh ah ach ah concept lattice relation concepts numbered pre order sample recursive execution inherited sets processed vertices appear brackets :10.1.1.10.9317
edges depth tree labeled non dominating compute new concept 
propose new algorithmic approach concept generation enables improve existing algorithms problem 
complexity analysis probably streamlined nm maximal chain rough overestimation cost updating process 
promising approach improve complexity problem property correspondence maximal chains lattice minimal triangulations underlying bipartite graph apply see linear time triangulations free claw free graphs superclass bipartite graphs :10.1.1.10.9317

ordre classi cation 

berry 
wide range ecient algorithm minimal triangulation 
proceedings th annual acm siam symposium discrete algorithms soda baltimore pp 
jan 
berry 
bordat 
generating minimal separators graph 
international journal foundations computer science :10.1.1.10.9317
berry :10.1.1.10.9317
representing concept lattice graph 
proceedings discrete maths data mining workshop nd siam conference data mining sdm arlington va april submitted discrete applied mathematics 
berry 
maintaining class membership information 
appear proceedings lecture notes computer science sept 
birkho lattice theory 
american mathematical society rd edition 

bordat 
calcul du treillis de galois une correspondance 
math ematiques informatique sciences :10.1.1.10.9317
chein 
algorithme de recherche de sous matrices eres une matrice 
bull 
math 

ganter 
basic algorithms concept analysis 
preprint technische hochschule darmstadt :10.1.1.10.9317
ganter wille 
formal concept analysis 
springer 
gu 
construction du treillis de galois une relation 
math ematiques informatique sciences :10.1.1.10.9317

hsu 
ma 
substitution decomposition chordal graphs applications 
siam journal computing :10.1.1.10.9317
leblanc 
galois lattice framework specify building class hierarchies algorithms 
theoretical informatics applications :10.1.1.10.9317
:10.1.1.10.9317
listing minimal separators graph 
siam journal computing 

structural machine learning galois lattices graphs 
proc 
int 
conf 
machine learning icml morgan kaufmann ed 

minimal triangulations classes free graphs 
satellite workshop wg prague 

lattice framework tool feature extraction 
ecml :10.1.1.10.9317
raynaud 
fast algorithm building lattices 
ipl :10.1.1.10.9317
parra er 
minimal separators graph chordal triangulation 
proceedings nd international colloquium automata languages programming icalp lecture notes computer science :10.1.1.10.9317
shen 
separators simple cutsets 
asian computer science conference thailand december lecture notes computer science :10.1.1.10.9317
sheng liang 
ecient enumeration minimal separators graph 
theoretical computer science 
tarjan yannakakis 
simple linear time algorithms test graphs 
siam journal computing :10.1.1.10.9317
missaoui godin 
framework incremental generation frequent closed item sets 
proceedings discrete maths data mining workshop nd siam conference data mining sdm arlington va april 
zaki parthasarathy ogihara li :10.1.1.10.9317
new algorithms fast discovery association rules 
proceedings rd international conference database systems advanced applications april 

