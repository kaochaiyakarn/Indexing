abductive approach analysing event requirements specifications russo rob miller nuseibeh jeff kramer imperial college science technology medicine london sw bt ar jk ic ac uk university college london london wc bt rsm ucl ac uk open university walton hall milton keynes mk aa nuseibeh open ac uk 
logic logic programming approach analysing event requirements specifications terms system reaction events safety properties 
approach uses variant kowalski sergot event calculus represent specifications declaratively abductive reasoning mechanism analysing safety properties 
system description safety property abductive mechanism able identify complete set counterexamples exist property terms symbolic current states associated event transitions 
case study automobile cruise control system specified scr framework illustrate approach 
technique described implemented existing tools abductive logic programming 
requirements specification analysis critical activity software development 
specification errors undetected lead system failures general expensive correct defects detected development process 
describes formal approach detection analysis errors associated logic programming tool desirable characteristics 
tool able verify properties detect errors requirements specifications partially completed partial knowledge domain available 
particular approach rely complete description initial state system making applicable systems embedded complex environments initial conditions completely predicted 
second tool provides pinpoint diagnostic information detected errors violated safety properties debugging aid engineer 
practical terms integration characteristics distinguishes approach formal techniques model checking theorem proving :10.1.1.47.2696
focus event requirements specifications 
regard specifications composed system descriptions expressed terms required reactions events inputs changes environmental conditions global system invariants 
simplicity restrict attention single state invariants safety properties speculate approach adapted types property 
approach uses event calculus ec declaratively model eventbased requirements specifications 
choice ec motivated practical formal needs gives advantages 
contrast pure state transition representations ec ontology includes explicit time structure independent sequence events consideration 
characteristic straightforward model event systems number input events may occur simultaneously system behavior may circumstances non deterministic see 
second ec ontology close existing types event requirements specifications allow mapped automatically logical representation 
allows approach tool back existing requirements engineering representational methods 
semantics front specification language individual specifications represented ec 
third prove general property particular class ec representations employed allows reason reduced state representation see section substantially improving efficiency tool 
fourth build substantial body existing applying abductive reasoning techniques ec representations 
brings second corner stone approach abduction 
abduction proved suitable automating knowledge software development 
approach employs abduction refutation mode verify global system invariants respect event system descriptions 
system description invariant abduction able identify complete set counterexamples exist system invariant counterexample terms current system state associated event transition 
failure find counterexample establishes validity invariant respect system description 
terminology counterexample explanation observation negation invariant arbitrary symbolic time point 
particular form counterexamples ideal diagnoses modify specification appropriately altering event system description set global system invariants 
abductive decision procedure employed approach desirable features 
terminates contrast conventional theorem proving techniques 
rely complete description initial state contrast model checking approaches 
ec representation supports reasoning specifications state spaces may infinite 
feature mainly procedure goal property driven 
section describes general approach 
followed illustrative case study involving analysis scr tabular specification 
conclude remarks related 
approach stated regard requirements specifications composed system descriptions global system invariants 
analysis task concerned discover system description satisfies system invariants 
express collection system invariants logical sentences 
event system description set rules system invariant ii need evaluate ii generate appropriate diagnostic information 
event calculus representation employed allows abductive reasoning mechanism combine tasks single automated decision procedure 
abduction verification abduction commonly defined problem finding set hypotheses explanation plan specified form added formal specification allows observation goal sentence inferred causing contradictions 
logical terms domain description sentence goal abduction attempts identify set assertions consistent 
set consist abducible sentences definition abducible generally domain specific 
required minimal 
computational view abductive procedures procedures find usually composed phases abductive phase consistency phase interleave 
abducible generated phase temporarily added set abducibles generated 
addition permanent second phase confirms entire new set abducibles consistent specification 
furthermore abducibles system description satisfy set integrity constraints 
general re checking consistency satisfaction constraints computationally expensive particular form ec specifications theoretical result regarding plan consistency allows avoid pitfalls 
abductive approach problem proving invariant ii ii translated equivalent problem showing possible consistently extend assertions particular events occurred way extended description entails ii 
words set ii 
equivalence problems dependent particular event calculus representation see 
solve problem attempting generate complete abductive decision procedure refer process abduction refutation mode 
procedure finds assertions act counterexample 
shall see form counterexamples ideal diagnostic information utilised change description invariants 
counterexamples approach generates describe particular events occurring particular contexts classes current states 
relevant contexts satisfy invariants 
ensured considering invariants integrity constraints symbolic current state prunes set possible counterexamples 
detailed description particular abductive proof procedure approach 
event calculus event calculus logic formalism representing reasoning dynamic systems 
ontology includes explicit structure time independent sequence events actions consideration 
shall see characteristic straightforward model wide class event driven systems including non deterministic events may occur simultaneously state space infinite 
approach far tested specifications deterministic systems case study described section 
currently investigating applicability lts style specifications may concurrent non deterministic systems 
approach adapts simple classical logic form ec ontology consists set time points isomorphic non negative integers ii set time varying properties called fluents iii set event types actions 
logic correspondingly sorted includes predicates happens initiates terminates holdsat auxiliary predicates defined terms 
happens indicates event action occurs time point initiates resp 
terminates means event occur cause fluent true resp 
false immediately 
holdsat indicates fluent true example happens happens indicates events occur simultaneously time point 
system descriptions axiomatisations ec description includes core collection domain independent axioms describe general principles deciding fluents hold hold particular time points 
addition specification includes collection domain dependent sentences describing particular effects events actions predicates initiates terminates may include sentences stating particular time points instances events occur predicate happens 
convenient introduce auxiliary predicates clipped 
clipped means event occurs times terminates fluent clipped def happens ec terminates axioms variables assumed universally quantified maximum scope stated 
similarly means event occurs times initiates fluent def happens ec initiates armed notational shorthand state general commonsense principles constitute domain independent component ec fluents initiated event occurrences continue hold events occur terminate holdsat happens initiates ec clipped ii fluents terminated event occurrences continue hold events occur initiate holdsat happens terminates ec iii fluents change status occurrence initiating terminating events holdsat holdsat clipped holdsat holdsat ec ec illustrate effects particular events may described domain dependent part specification initiates terminates describe electric circuit consisting single light bulb switches connected series 
need fluents actions 
describe facts switch turns light provided switch switch connected simultaneously ii switch simultaneously causes light come iii switch causes light go irrespective state switch initiates holdsat holdsat happens initiates holdsat holdsat happens terminates holdsat terminates holdsat fact example need total sentences describe effects particular events combinations events light sentences describe effects switches 
readability sentences written separately completions transformations sets sentences describing initiates terminates included specification see details 
completions avoids frame problem allows assume effects events explicitly described 
applications appropriate include similar completions sets sentences describing events occur predicate happens 
wish prove properties systems possible scenarios irrespective events occur 
descriptions leave happens undefined allow models arbitrary interpretations happens 
way effectively simulate branching time structure covers possible series events 
words leaving happens undefined effectively consider model possible path state transition graph 
efficient abduction event calculus wish take ec description test system invariants 
language ec expressions involving holdsat universally quantified time holdsat holdsat 
potentially computationally expensive prove sentences standard deductive abductive theorem proving 
overcome problem reduced inference task simpler stated theorem 
theorem 
ec event calculus description time points interpreted natural numbers invariant 
time structure consisting points sc sn sc sn 
ec ec ec sc sn 
proof induction see 
show invariant ec sufficient consider symbolic time point sc immediate successor sn current assume invariant true sc demonstrate truth follows sn 
theorem applicable complete information initial state system available 
utilisation reduces computational costs considerably context ec allows re write ec axioms ground time point terms 
example ec holdsat sn holdsat sc clipped sc sn ec representation event requirements specification provided automatic translation approach applies existing abductive tools analyse specification 
reduced time structure described approach proves assertions form ec sc sn showing complete abductive procedure fails produce set holdsat happens facts grounded sc ec sc sn 
procedure valid particular form ec descriptions reasonable assumption finite number events occur instant 
theorem allows confirm provided true true 
hand abductive procedure produces set explicit indicator specification problem 
case study gives example generation diagnostic information violation invariants 
particular form ec system descriptions allows reduce computational costs largely avoiding consistency checking normally associated abduction 
ensures internally consistent finite collection happens literals consistent related description 
necessary check consistency candidate holdsat literals system invariants done efficiently types expression grounded sc 
logic programming implementation page limitations prevent describing detail implementation abductive tool 
implemented prolog simplified version abductive logic program module described 
logic program conversion classical logic event calculus specification achieved method described overcomes potential mismatch negation failure implementation classical negation specification 
able formally prove correctness prolog tool respect theoretical framework described fully documented 
abduction described refutation mode proof relies demonstrating soundness completeness prolog abductive computation classical logic description abduction context ec axiomatisation described 
proof completeness builds generalised stable model semantics abduction valid defined class deterministic ec domain descriptions 
case study section describe example application approach analysing software cost reduction scr specifications 
show tool analyses particular scr style system invariants called mode invariants respect event system descriptions expressed scr mode transition tables 
scr approach proven useful expressing requirements wide range large scale real world applications established method specifying analysing event systems :10.1.1.17.6363
scr specifications scr method parnas variable model describes required system behavior set mathematical relations monitored controlled variables input output data items :10.1.1.35.227
monitored variables environmental entities influence system behavior controlled variables environmental entities system controls 
simplicity case study uses boolean variables 
non boolean variables reduced boolean variables predicates defined values 
scr facilitates description natural constraints system behavior imposed physical laws defines system requirements terms relations monitored controlled variables expressed tabular notation 
predicates representing monitored controlled variables called conditions defined single system states 
event occurs system component monitored controlled variable changes value 
full scr specifications include mode transition event condition tables describe required system behavior assertions define properties environment invariants specify properties required hold system see :10.1.1.17.6363
case study concerns simple scr specification consisting just single mode transition table list system invariants 
mode transition tables mode classes abstractions system state space respect monitored variables 
mode class seen state machine defined monitored variables states modes transitions called mode transitions triggered changes monitored variables 
mode transition tables represent mode classes respective transitions tabular format 
mode transition table case study taken table 
automobile cruise control system 
note table reflects basic properties monitored variables 
example transitions inactive cruise take account environmental property state cruise control lever exactly positions activate deactivate resume 
example activate changes true deactivate resume changes false 
detailed description case study see 
mode transition events occur monitored variables change values 
events types condition changes false true changes true false 
called triggered condition 
example automobile cruise control system event ignited denotes engine automobile changed ignited ignited 
event occurrences depend truth falsity conditions 
case called conditioned events 
example table mode transition defined second row caused occurrence conditioned event ignited condition running false 
different semantics conditioned events expressible event calculus approach 
case study adopted interpretation 
event conditional means false current mode changed true new mode true current mode stays true new mode 
interpretation similar event conditional changing truth value true false 
mode transition table row transition current mode indicated left column table new mode specified right column 
central part table defines events cause transition 
triggered event entries equal 
monitored variables conditions occurrence event entry equal 
monitored variables irrelevant transition entry 
current mode ignited running toofast brake activate deactivate resume new mode inactive inactive cruise cruise inactive override override inactive cruise table mode transition table automobile cruise control system scr mode transition tables seen shorthand larger tables respects 
entry condition table shorthand possible condition entries 
means transition current new mode specified table dashes effect shorthand different transitions current new modes different combinations entries dashed monitored variables 
instance transition table inactive cruise shorthand different transitions inactive cruise respectively entries condition toofast 
second tables concise non specification transitions identical modes 
table basically describes function defines current mode combination condition values mode system 
mode may may equal current mode 
function uniquely captures system requirements 
specifying real system behavior transitions current modes different explicitly represented scr tables 
transitions current modes identical implicit omitted hidden table 
may regard meaning real scr mode transition tables full extended long 
mode transition tables utilise dashes include row hidden sense described possible combination current mode condition entries 
implicit hidden rows dashes need taken account analysing invariants respect real concise version scr mode transition table 
case study shows causes mismatch scr tables system invariants may obscure system behaviors violate invariants 
mode invariants mode invariants unchanging properties specification assertions system regarding mode classes satisfied system specification 
case study automobile cruise control system example invariant cruise ignited running brake 
means system mode cruise conditions ignited running true brake false 
scr notation mode invariants formulae form mode value certain mode class logical proposition conditions associated mode transition table 
mode transition table mode class satisfy mode invariants related mode class 
abductive analysis invariants translation illustrate abductive ec approach analysing mode invariants scr mode transition tables 
translation conditions modes represented fluents refer condition fluents mode fluents respectively 
reality different types external real word events may affect condition scr tables differences away essentially identify types events condition change true change false event 
ec translation independent event constants functions fluents events condition fluent axioms initiates terminates translation tables ec axioms rules modular single initiates single terminates rule generated row 
row procedure generating initiates rule follows 
initiates literal left hand side rule new mode far right row fluent argument event reading left event argument 
right hand side rule includes holdsat literal current mode pair holdsat happens literals non dash condition entry row 
specifically entry condition pair holdsat happens holdsat happens holdsat happens holdsat happens 
terminates rule generated exactly way current mode fluent argument terminates literal 
example seventh row table translated follows initiates running inactive holdsat cruise holdsat ignited happens ignited holdsat running happens running terminates running cruise holdsat cruise holdsat ignited happens ignited holdsat running happens running clearly axiom pair captures intended meaning individual rows described section 
semantics table completions collections initiates terminates rules 
completions standard ec reflect implicit information scr table combinations condition values explicitly identified mode transitions 
discussed section may regard scr tables containing hidden rows engineer list current new mode identical 
violations system invariants just caused hidden rows real rows table 
translation utilises completions abductive tool able identify problems hidden real rows 
ec translation supplies semantics mode transition tables independent parts scr specification 
particular translation include information initial state abductive tool rely information check system invariants 
technique applicable systems complete information initial configuration environment available 
abductive tool need defaults fill missing initial values conditions 
information initial state may represented holdsat system invariants may checked initial state separately 
abductive procedure purposes discussion suppose table translated ec specification ec 
system invariants particular case translated universally quantified sentences 

general constraints add additional constraint simply states exclusive system exactly mode time 
term stand 

case study invariants reading exclusive holdsat holdsat inactive holdsat cruise holdsat override holdsat holdsat ignited holdsat inactive holdsat ignited holdsat running holdsat activate holdsat cruise holdsat ignited holdsat running holdsat brake holdsat override holdsat ignited holdsat running stated previously theorem allows tool reduced version ec specification uses time structure consisting just points sc sn sc sn 
recap abductive procedure attempts find system behaviors counterexamples system invariants generating consistent set holdsat happens facts positive negative literals grounded sc ec sc sn 
check specification particular invariant ii attempting ec sc ii sn 
abductive procedure complete failure find ensures table satisfies invariant 
hand tool generates effectively pointer particular row table problematic 
example checking table tool produces holdsat ignited sc holdsat running sc holdsat toofast sc holdsat brake sc holdsat cruise sc happens ignited sc happens running sc happens toofast sc happens brake sc clearly identifies hidden rows table brake event merely results system staying mode cruise 
requirements engineer choice alter new mode hidden row invariant satisfied case obvious choice change new mode cruise override previously hidden row explicit table weaken delete system invariant case violated add extra invariant forbids combination holdsat literals add holdsat cruise holdsat toofast 
example illustrates types choices change available violation invariant detected 
choices highly domain specific appropriate engineer tool select 
selected change implemented tool run process repeated inconsistencies identified 
related case study illustrates characteristics approach mentioned 
able detect violations invariants scr specification include information initial state 
counterexamples generated acted pointers rows mode transition tables individual invariants problematic 
avoids high computational overheads choice logical representation theoretical results allow reduce reasoning task applying tool 
believe approach widely applicable 
particular investigating analysing lts specifications 
variety techniques developed analysing requirements specifications 
range structured inspections formal techniques model checking theorem proving logic approaches :10.1.1.47.2696
techniques model checking facilitate automated analysis requirements specifications generation counterexamples errors detected :10.1.1.131.928
contrast approach presuppose complete descriptions initial state system compute successor states 
need apply abstraction techniques reduce size state space handle finite state systems 
example context scr illustrates explicit state model checkers spin symbolic model checkers smv detect safety violations scr specifications 
type model checking verifies system invariants means state exploration 
problems related state explosion dealt sound complete abstraction techniques reduce number variables just relevant invariant tested 
goal driven nature abductive ec effect abduction focuses reasoning goals relevant invariant ec ensures reasoning level relevant variables fluents manipulation entire states 
essential differences approach type model checking system deals specifications information initial state incomplete ii reports problems terms individual mode transitions correspond directly rows tables terms particular paths state space 
approach certain cases reporting potential errors report problems associated system states reality unreachable possible initial state information specifications 
feature result overly robust incorrect specifications 
desired reapply abductive procedure information initial state full time structure test reachability 
theorem proving provides alternative way analysing requirements specifications infinite state systems 
contrast approach provide useful diagnostic information verification fails computations may terminate 
uses hybrid approach combination specialised decision procedures model checking overcoming limitations described 
approach induction prove safety critical properties scr specifications states identified counterexamples may reachable 
logic approaches particularly relevant 
describes goal driven approach requirement engineering obstacles parts specification lead negated goal 
approach comparable notion goals similar notion invariants notion obstacles analogous notion abducibles 
underlying goal regression technique completely analogous abductive decision procedure 
uses backward reasoning classical unification abductive phase decision procedure checking consistency satisfaction domain dependent constraints performed obstacle generated 
identification obstacles automated 
procedure effectively support automated identification obstacles framework 
demonstrated applicability abductive reasoning software engineering general 
menzies proposed abductive techniques knowledge software engineering providing inference procedure knowledge level modeling support prediction explanation planning 
satoh proposed abduction handling evolution requirements specification showing minimal revised specifications efficiently computed logic programming abductive decision procedures 
aim test approach larger complex specifications example systems infinite states including non determinism 
mentioned section ec allows representation types specifications experimentation needed 
bharadwaj cugola grimm heitmeyer kakas labaw van lamsweerde dse group ic 
supported epsrc projects mise gr gr 



software requirements aircraft 
naval research laboratory 

anderson 

model checking large software specifications 
acm proc 
th int 
symp 
foundation software engineering 

gannon 

state model checking event driven system requirements 
ieee transaction software engineering 

bharadwaj heitmeyer 

model checking complete requirements specifications abstraction 
technical report 
nrl nrl 

bharadwaj sims 

salsa combining solvers bdds automated invariant checking 
tools algorithms construction analysis systems lecture notes cs springer 

clarke wing 

formal methods state art directions 
acm computing survey 

easterbrook callahan 

formal methods verification validation partial specifications 
journal systems software 

graham 

software inspection 
addison wesley 

heitmeyer labaw 

consistency checking requirements specifications 
proc 
nd int 
symp 
requirements engineering york 

heitmeyer jeffords labaw 

automated consistency checking requirements specifications 
acm transaction software engineering methodology 

heitmeyer 

abstraction model checking detect safety violations requirements specifications 
ieee transaction software engineering 

holzmann 

model checker spin 
ieee transaction software engineering 

kakas mancarella 

generalised stable models semantics abduction 
ecai stockholm pages 

kakas michael 

integrating abductive constraint logic programming 
proc 
th int 
conf 
logic programming tokyo 

kakas miller 

simple declarative language describing narratives actions 
journal logic programming special issue reasoning actions events 

kakas kowalski toni 

role abduction logic programming 
hogger robinson gabbay eds handbook logic artificial intelligence logic programming 
oup 

kowalski sergot 

logic calculus events 
new generation computing 

magee kramer 

concurrency state models java programs 
john wiley 



symbolic model checking 
kluwer academic 

menzies 

applications abduction knowledge level modeling 
international journal human computer studies 

miller 
deductive abductive planning event calculus 

nd aisb workshop practical reasoning rationality manchester 
miller shanahan 

event calculus classical logic 
linkoping electronic articles computer information science 

miller 

specifying mode logic guidance system core scr 
proceedings nd workshop formal methods software practice 

owre 

formal verification fault tolerant architecture prolegomena design pvs 
ieee transactions 

parnas madey 

functional documentation computer systems 
technical report 
crl mcmaster university 

russo miller nuseibeh kramer 

abductive approach analysing event specifications 
technical report imperial college 

satoh 

computing minimal revised logical specification abduction 
proc 
int 
workshop principles software evolution 

van lamsweerde darimont letier 

managing conflicts goal driven requirement engineering 
ieee transactions 
