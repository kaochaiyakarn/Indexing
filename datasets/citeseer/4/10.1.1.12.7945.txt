uniform version model software con guration management conradi bernhard westfechtel norwegian university science technology ntnu trondheim norway conradi idt ntnu lehrstuhl fur informatik iii rwth aachen aachen bernhard informatik rwth aachen de 
rich variety models software con guration management scm proposed years understanding basic concepts interrelations growing accordingly 
propose uniform version model common base discuss view current scm systems 
version models software con guration management studied long time 
version model de nes data usually objects versioned version identi cation organization operations retrieving existing versions constructing new versions 
provided comprehensive overview version models realized commercial systems research prototypes 
summarize essential de nitions taxonomy describe compare existing version models section 
subsequently approaches aimed de ning uniform version model section discuss view current scm systems section 
section contains 
basic de nitions taxonomy items versions version identi ers version represents state evolving item characterized pair ps vs ps vs denote state product space point version space respectively 
item covers les usually textual le directories objects objectoriented databases entities relationships attributes eer databases versioned item item put version control scm repository serving versioned database implying previous states individually saved immutable 
state time maintained unversioned item changes done overwriting 
versioning requires sameness criterion way decide versions belong item 
decision performed help unique identi er oid case software objects 
versioned item version uniquely identi able version identi er vid 
scm systems automatically generate unique version numbers er additional symbolic user de ned names serving primary keys 
version identi ed expression query local global selection attributes general attributes variables 
selection attribute characterizes logical functional change 
revisions variants type evolution versions traditionally classi ed revisions variants 
sequential versions evolve time dimension called revisions created bugs older versions enhance 
parallel existing time denoted variants 
deltas fragments visibilities versions item share common properties represented unversioned attributes relationships 
common properties constant oids contribute sameness criteria 
common properties shared versions depend speci version model actual data schema 
versions di er respect speci properties represented nonshared versioned attributes 
di erence versions denoted delta serves identify changes save space 
generally partial function 
denotes large set potential versions item 
version constructed applying sequence changes deltas cn base version cn cn order applying changes may important 
directed delta records ect sequence modify operations applied version yields version 
case embedded deltas fragments deltas stored interleaved manner 
selective deltas linearly ordered fragment tagged boolean expression selection attributes regulating visibility fragment 
characterizes reasons nature change 
state change versioning version models focus explicit states revisions variants versioned items called state 
delta change di erence versions ji vj vi 
archetypical scm systems models sccs rcs adele di erent delta implementations 
change models generalizations conditional compilation 
variability item expressed ordered set selective deltas delta pre xed visibility vis 
delta describes certain changes applied base version possibly empty 
version implicit created set selected changes vj visibilities contain global selection attributes encoding correspond change identi ers 
typical scm systems epos change oriented versioning cov model nora ice version model 
cov ice di er mainly logic express visibility expressions similar 
sccs allows selective deltas record possible extra merge changes combining changes 
model change set version model deltas di erent items grouped global deltas record implementation change request 
di erent change sets may freely combined 
typical scm system ering change sets aide de camp 
mention operation version models version characterized speci sequence change operations 
pursue 
note models free composition changes con guration level treating versioned item delta 
individual item level rely merges possibly tool supported 
version sets extensional intensional versioning item container called version group set versions 
functionality control heavily uenced way de ned 
case extensional versioning de ned enumerating members fv vng extensional versioning supports retrieval previously constructed versions 
new combined versions created explicit merging 
version vi identi ed unique number vid 
external user retrieves version vi performs changes retrieved version nally submits changed version new immutable version vi 
note version vi retrieved time 
intensional versioning supports exible automatic construction consistent versions large version space 
term potential versions emphasizes certain version may explicitly constructed 
intensional versioning version set de ned composite predicate query vd user de ned version description additional internal constraints boolean expressions space selection attributes ai 
examples attributes os attribute determine operating system boolean fix attribute indicate certain bug included 
vd typically query tuple attribute values attribute bindings vid 
example vd unix describes unix version supporting window system 
de nes set constraint satis ed members example mutual exclusion sun vax variant 
version sum spot merge visible fragments ones matching vd comparison di erence extensional intensional versioning may illustrated comparing sccs rcs conditional compilation supported programming language :10.1.1.44.9066
sccs rcs store reconstruct versions text les extensional versioning 
hand preprocessor conditional compilation construct text le typically source program values preprocessor variables intensional versioning 
include text fragments conditions tagged expressions evaluate true 
note intensional versioning extensional versioning meaningfully 
see discussion section 
version rules intensional versioning driven version rules may stored versioned database submitted part query 
constraint mandatory rule satis ed 
violation constraint indicates inconsistency sun vax variant selected simultaneously optional rule applied may satis ed released module versions preferred 
default preference applied unique selection performed latest version main branch ina version graph may selected default 
preferences defaults may supplement user vd extra attribute bindings going external partially bound vd evd fully bound 
rule part versioned database check possibly elaborate initial evd serving deductive database evd version rules messages 
number possible change combinations exponential resolution version rules may np complete 
rule base may evolving entity characterize new changes allow merges new combinations old changes prohibit previous combinations due bad experiences 
support new revise extend domains dynamic schema 
simple revisions 
rule base may su ce allowing re generation old versions con gurations corresponding rule base 
scm systems stored rule base mention adele allows incremental expansion high level vds 
high level applied epos partly cvs rcs 
version space represent version space version set organized version graph nodes edges correspond groups versions relationships respectively 
versioned item local version graph items uniform global version graph 
example rcs clearcase aversion graph organized branches consists sequence revisions 
variants represented branches limited extent 
alternatively may arrange versions dimensional space dimension corresponds variant selection attribute typically boolean enumerated type 
example multi dimensional variation may represented way varying window system operating system dbms note version graphs grids closely related 
unconstrained grid point corresponds version 
adding constraints may exclude inconsistent unreal combinations 
example consider dimensional grid dimension corresponds change may applied omitted 
revision chains built constraints form 
applied previous change applied 
variants correspond mutually exclusive changes expressed values enumerated type 
means may applied 
granularity component product versioning user normally selects versions software objects coarse grained items treated atomic objects scm system 
hand scm system may operate ner granularity text lines syntactical tokens ectively store compare construct versions software objects 
user point view distinguish component product versioning case component versioning versions single components maintained assembled composite con gurations 
called composition model 
relations version spaces di erent components de ned version rules 
contrast product versioning establishes total view software product entire database 
done arranging versions items uniform global version space see cov 
addition version model general items product model underlying repository product model select items constitute complete consistent con guration structure may versioned 
graphs satisfy need model 
models require uni version view database see relationship connect object 
scm repository workspace repository database requested versions explicitly checked uni versioned external usually le workspace 
embeds traditional check modify check cycle 
scm systems er virtual le system vd dynamically serves access lter repository accesses called transparent versioning 
eliminates need explicit workspace repository er advanced transaction mechanism 
examples virtual le systems dsee clearcase successor research scm systems 
consider virtual le systems 
revisions versions version description version set variants state versioning change versioning extensional versioning intensional versioning versioned objects deltas embedded deltas directed deltas version graph product versioning component versioning fig 

taxonomy version space version rules grid constraints preferences defaults summary de nitions summarized taxonomy shown 
note cases displayed alternatives mutually exclusive 
particular version model may support revisions variants state change versioning extensional intensional versioning di erent classes version rules 
uniform version model summary problems existing version models model archetypical version model 
main advantage naturalness 
version space set local version graphs revisions variants 
simple understand 
main disadvantage explicit explosion variants represent combinations changes automatic merging may alleviate 
di cult consistently combine versions di erent objects structurally di erent version graphs version rules may help 
model advanced 
main advantage compactness underlying delta mechanism generality applies data items 
main disadvantage complexity 
get comprehensive view possible versions combinations including represent time 
nd way ectively limit combinatorial explosion possible versions available version rules 
need high level graphical user interface high translate constraints visible version graph display global transaction graph capture history 
immutability secured extra constraints saying changes allowed certain vd selection new selection attribute needed 
models clear version possesses individual object existence 
versions explicit rst class entities play roles relationships 
versions rst class objects merely implicit ghost objects 
versioned relationships di erent versions item di erent items couple change request transition 
say problems disappear uni version view versioned database see section 
illustrates proposed versioning models wrt 
freedom combining changes 
sccs models scm systems represent models 
dimension expressions mean visibilities expressions selection attributes enumerated type 
see degree increases bottom summarized 
version models edit dove cope commented 
partial checkpoints cope forward backward deltas bjorn gulla entire copies deltas rcs sccs dsee adele dove embedded deltas non atomic deltas selective delta inclusion sccs dimension expressions global delta naming aide de camp edit epos nora fig 

version models text versioning 
uni ed version model prelude understanding basic concepts underlying version models growing years 
general agreement version model scm emerge 
feasible come basic version mechanism associated tool kit de ning customized version models 
means provision common base layer plus knobs adjust basic version model 
conceive basic version model bottom visible accessible top 
main version models combined 
compact solution general text versioning conditional compilation variants rcs revisions variant le 
solution applied kinds text les requirements code les test data documentation les product model project plans process model 
intuitive sense powerful 
expressible case 
instance mention high level cvs top simpler rcs 
feature partial deltas embedded selective dimension 
global check deltas deltas expres delta points sions naming cope rcs sccs dove edit aide de camp cov epos ice nora fig 

di erent version models adapted 
uni ed version model architecture looking version engine ering basic delta mechanism support version rules graphs 
version engine able support version model 
top product data model speci domain exible transaction model 
top need check facilities uni version workspaces possibly le system 
totality constitutes versioned scm repository 
external tools editors compilers scm support tools enter display edit general version product information 
applications general software tools scm uni version workspace virtual le system transaction support model product model data model version model version version rules version graphs engine basic delta storage fig 

architecture version engine part scm repository 
total architecture shown 
discuss layers basic delta storage version rule graph product model layer 
version model basic 
version models founded deltas lowest level 
directed embedded deltas suitable candidates high level layers 
example directed deltas models respectively rcs pie 
intriguing explore classic sccs provide basic deltas textual data 
sequel assume selective deltas tagged general visibility expressions basic version layer rephrased terms directed deltas 
visibilities compactly coded internal visibility numbers unique visibility expression 
experience epos indicates space time demands selective deltas vs rcs directed deltas similar cases space demand twice unversioned text le check time dominated time 
assume user de ned global versioning attributes associated version rules structure constrain version space 
attributes enumerated type cf 
features ice 
epos uses extended boolean options domain true enumerated types simulated top 
version rules er continuum combinations ranging wild merges constrained version graphs 
np complete evaluation version rules may problem experience epos indicate linear growth expression lengths number relevant versions 
product model recommend global product versioning section 
contrasts composition model su ers complexities version selections unrelated version graphs di erent components 
global version selection achieved selection attributes global scope attribute os denotes operating system software product change fix may ect multiple components 
hand try apply scoping rules block structured languages cf 
product speci options 
uni ed version model details propose 
common representation versioned items follows unversioned attributes oid 


versioned attributes status 
attr set alternative visa attr set alternative visa contents sequence visi oid unversioned obvious meaning 
system de ned unversioned item attributes normally include name 
user de ned unversioned attributes 
internal version description regulating status attribute 
attribute domain illegal raw edited approved compiled tested released frozen 
recorded legal cf 
constraints implies status set raw saying version choice delta combination occurred 
visa visa visi visibility expressions global selection attributes see 
contain transaction identi er tid serving global change identi er traceability 
visibilities tag versioned attribute values textual deltas 
attr attr user de ned versioned attributes di erent 
contents special user de ned versioned attribute textual type containing sequence selective deltas 

aversion schema global selection attributes types meta data 
linear revision chain marked timestamp re ect new attributes revised domains 
vis external evd internal expressions attributes 

version rule base meta data 
corresponding revision chain rule bases 
rule base revision contain timestamp rules categories selection attributes ai 
rule type example comment constraints revision rule combination variant rule gives version graph 
inconsistency marks illegal combination 
immutability write back changes see 
preferences defaults changes tid 
aggregates express macros product speci options 
fig 

version rule base 
transaction support 
transaction recorded unversioned 
transaction log information timestamp previous tid tid eid ambition description place person general comments change request id previous tid starting point transaction serves de ne transaction graph 
mentioned rule base map high level incomplete external evd low level complete internal relevant selection attributes bound 
timestamp default time select corresponding possibly previous version schema rule base 
fragments having tid younger timestamp discarded 
current lter applied repository read accesses causing subset visibilities vis true 
write accesses apply ambition denote change scope updates ambition ambition marked immutable cf 
cov 
operation fragment delta visibility vis performed ambition update rules apply see 
change operation old visibility new visibility deletion vis vis insertion modi cation vis vis new vis old fig 

cov rules update visibilities serial deltas 
digression track changes version may included versions di cult problems wrt 
visibilities version rules 
current change done point version space propagated entire plane space 
conditional compilation versions edited time 
edit user insert merge current changes set versions time 
concurrent editors allow functionality 
cov combinatorial change constraints expressed partly prescribed update rules local visibilities partly global 
update visibilities shown resort tids express detailed merge rules local changes 
ice ambition write equal read 
propagation done pairwise merges set relevant combinations models 
may ne realize desired merges patch underlying version model global version constraints needed 
case wide propagation unbound features user faced similar problems conditional compilation single version read view 

external workspace 
established explicit check virtual le system 
done transaction context see point 

versioning assistant 
needed generally maintain meta information selection attributes rules 
set ambitions check check 
display product models version rules graphs transaction graphs 
scenarios example version graph assume global selection attributes os vax sun lang eng example version graph sun eng vax eng corresponding version rules shown constraints simpli ed 
variant rules generated vax sun eng revision rules eng possible evolutions reconcile merge independent sequential changes allow 
example visibility impact changes consider cov inspired example selection attributes 
consider sets changes respectively characterized true true 
perform merge transaction allowing result visible settings 
set fa true true trueg ambition fa true true 
omitting attribute vd vis means attribute left unset 
comment old visibility new delta new visibility new delta int real real 
old int int merge int check state art fig 

cov style update 
approach proposed section realized extent epos nora research prototypes scm systems 
share structures left 
deltas located bottom version rules version graphs expressed top underlying version rules 
support evolution meta data version schema version rule base limited 
bottom delta layer neutral way applications decide structure version space domains selection attributes actual version rules graphs 
top base layers version models may implemented 
version change combinations regulated version rules 
contrast scm systems adele dsee clearcase exhibit layer structure right deltas implement version graphs top version rules employed compose con gurations components 
topmost layers switched compared 
note intensional versioning applied top extensional versioning points version model version model version graphs version rules version rules version graphs deltas deltas fig 

layers granularity composition software object 
change systems epos operate ner granularity combining changes 
implementing change versioning top state versioning performed di cult vice versa 
top composition model granularity coarse see 
furthermore changes tied versions applied originally 
deltas restrictive manner reconstruction members version graph tagged arbitrarily complex expressions np completeness issue 
letting version engine architecture section incorporated standard dbms 
presently scm systems commercial dbms basic repository clearcase oodbms rdbms 
rdbms version lter visibilities expressed normal read view sio prototype scm system 
data model version model entangled cad systems versioning support 
propose version model orthogonal actual data model transaction model letting tagged deltas serve basic storage fragments index sequential le system 
uniform version model support extensional intensional versioning revisions variants state change versioning di erent classes version rules constraints preferences defaults 
proposed uniform model featuring common representation versioned items dynamic schema dynamic version rules versioned repository workspaces transactions versioning assistant 
furthermore brie discussed alternative architectures realized di erent scm systems 
contrast proposal katz positions version graphs version rules 
furthermore change versioning covered 
feiler distinguishes models checkout checkin composition long transaction change set 
feiler attempt de ne uniform base model 
furthermore classi cation orthogonal composition model checkout checkin model alternatives built top 
furthermore long transactions combination approach specifying con guration 
implementation experimentation needed validate ideas 
go epos group trondheim group aachen 

archer conway schneider 
user recovery reversal interactive systems 
acm transactions programming languages systems jan 

berliner 
cvs ii parallelizing software development 
proceedings winter usenix conference washington winter 

bernard lacroix 
con guration management 
goos hartmanis editors proceedings st european software engineering conference lncs pages stra burg sept 
springer verlag 

brown 
editing techniques multi version objects 
phd thesis university southern california computer science department los angeles ca aug 
tr 

conradi westfechtel 
version models software con guration management 
technical report aib rwth aachen aachen germany 
submitted publication 

estublier 
adele con guration manager 
tichy pages 

feiler 
con guration management models commercial environments 
technical report cmu sei tr software engineering institute carnegie mellon university pittsburgh mar 

goldstein bobrow 
layered approach software design 
technical report csl xerox parc palo alto california 

gulla 
user support facilities software con guration management 
phd thesis ntnu trondheim forthcoming 

gulla 
karlsson yeh 
change oriented version descriptions epos 
software engineering journal nov 

katz 
uni ed framework version modeling engineering databases 
acm computing surveys dec 

kernighan ritchie 
language 
prentice hall englewood cli new jersey 


cm challenge con guration management works 
tichy pages 

lie conradi karlsson 
change oriented versioning 
ghezzi mcdermid editors proceedings nd european software engineering conference lncs pages coventry uk sept 
springer verlag 


heterogeneous con guration management dsee 
feiler editor proceedings rd international workshop software con guration management pages trondheim norway june 


system activity con guration management 
sommerville pages 


versioning software engineering database change oriented way 
phd thesis nth trondheim norway aug 

phd thesis nth 


managing version space 
sommerville pages 


larsen gulla conradi 
karlsson 
uniform versioning change oriented model 
feldman editor proceedings th international workshop software con guration management preprint pages baltimore maryland may 


source code control system 
ieee transactions software engineering dec 

bernstein kruskal 
creation maintenance multiple versions 
winkler editor proceedings international workshop con guration control pages germany 
teubner verlag 

software maintenance development systems massachusetts 
camp product overview 

sommerville editor 
proceedings th international workshop software con guration management lncs 
springer verlag 

tichy editor 
con guration management 
john wiley sons new york 

tichy 
data model programming support environments 
proceedings ifip wg working conference tools information system design development pages new orleans louisiana jan 
north holland 

tichy 
rcs system version control 
software practice experience july 

zeller snelting 
handling version sets feature logic 
proceedings th european software engineering conference lncs pages barcelona spain sept 
springer verlag 
article processed latex macro package llncs style 
