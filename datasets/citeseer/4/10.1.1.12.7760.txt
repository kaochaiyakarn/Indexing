support vector machine manual saunders stitson weston department computer science royal holloway university london mail fc saunders stitson dcs rhbnc ac uk bottou speech image processing services research lab mail research att com scholkopf smola gmd mail fbs gmd de october support vector machine svm new type learning machine 
svm general architecture applied pattern recognition regression estimation problems 
researchers involved development svm gammerman rhul vapnik rhul lecun rhul bottou saunders rhul scholkopf gmd smola gmd stitson rhul vovk rhul watkins rhul weston rhul major vapnik nature statistical learning theory springer 
getting started support vector machine svm program allows user carry pattern recognition regression estimation support vector techniques data 
questions answered documentation mail dcs rhbnc ac uk programs release rhul sv machine comes set programs sv transform sv ascii bin bin ascii 
pi sv main svm program pi program generating parameter sets svm pi load saved svm classify new data set pi transform sv special svm program image recognition implements virtual support vectors bs 
pi program convert sn format format pi ascii bin program convert ascii format binary format pi bin ascii program convert binary format ascii format rest document describe programs 
find svms see bibliography 
describe svms 
program describe program specifies parameters needed svm 
support vector machine task necessary specify set parameters 
parameters include information interested pattern recognition regression estimation kernel scaling done data generates parameter files svm program file generated user asked interactively 
run command line load parameter file 
save parameter file 
parameter file optional obviously included time run created parameter file 
parameter file similar want specifying file part command line program start parameters set relevant values allowing couple changes save file different name 
second option specify name file want save parameters 
done selecting menu option 
save parameter file argument assumed wish save file name load parameter file argument 
traversing menu system uses simple text menu system 
menus organized tree structure traversed typing number desired option followed return 
option labelled exit menu branch tree 
choosing option traverses level tree 
top tree exits program 
top level menu menu gives option displaying entering saving parameters 
menu appears choose enter parameters option process identical specifying parameters interactively running svm 
menu looks sv machine parameters 
enter parameters 
load parameters 
save parameters 
save parameters 

show parameters 
exit options straight forward 
option displays chosen parameters option allows parameters entered 
describe branches menu tree choosing option enter parameters detail 
enter parameters choose enter parameters faced list current parameter settings menu 
example shown sv machine parameters kernel specified alphas unbounded input values scaled 
training data posh chunked 
training data chunked 
number parameter sets optimizer sv zero threshold margin threshold objective zero tolerance 
set sv machine type 
set kernel type 
set general parameters 
set kernel specific parameters 
set expert parameters 
exit please enter choice menu options allow users specify different aspects support vector machine wish dealt turn 
setting sv machine type option chosen menu appears type sv machine pattern recognition regression estimation multiclass pattern recognition please enter machine type entering prompt pressing return toplevel parameter menu 
look line sv machine parameters type sv machine selected displayed 
selecting sv machine type user decide kernel 
setting kernel type option sv machine parameters menu allows kernel type chosen 
detailed description kernel types see appendix 
menu look type kernel simple dot product vapnik polynomial vovk polynomial vovk infinite polynomial radial basis function layer neural network infinite dimensional linear splines full polynomial scaling weak mode regularized fourier semi local polynomial radial basis strong mode regularized fourier anova generic kernel generic kernel kernel functions free parameters values set option set kernel specific parameters sv machine parameters menu branch tree menu 
example polynomial kernel vapnik polynomial control free parameter degree polynomial 
implementing new kernel functions options special convenience kernel functions included experienced users wish implement kernel functions 
kernel functions written class inherits functionality base class 
wish add new kernel adding new class having change various interface routines makefiles simply change function kernel generic 
kernel generic 
choose kernel menu options re compilation 
generic kernels potential free parameters labelled val val set usual way set kernel specific parameters menu option 
setting general parameters option svm parameter menu allows user set free parameters svm pattern recognition case size upper bound lagrangian variables box constraints regression estimation choice ffl ffl insensitive loss function 
various miscellaneous options grouped scaling strategy chunking strategy multi class pattern recognition strategy 
menu different options depending type sv machine chosen pattern recognition regression estimation multi class pattern recognition 
pattern recognition svm options general parameters 
bound alphas 
scaling 
chunking 
exit regression svm options general parameters 
bound alphas 
scaling 
chunking 
epsilon accuracy 
exit multi class svm options general parameters 
bound alphas 
scaling 
chunking 
multi class method 
multi class continuous classes 
exit setting bound alphas options sets upper bound support vector coefficients alphas 
free parameter controls trade minimizing loss function satisfying constraints minimizing regularizer 
lower value weight regularizer 
set infinity constraints satisfied 
typing equivalent setting infinity 
pattern recognition case means training vectors classified correctly linearly separable feature space 
choosing value needs care 
data separated error may obtain better results choosing simpler decisions functions avoid fitting lowering value generally problem specific dependent amount noise data 
rule thumb choose value slightly lower largest coefficient alpha value attained training 
choosing value higher largest coefficient obviously effect box constraint violated 
choosing value low say close constrain solution simple decision function 
plotting graph error rate testing set choice parameter typically give bowl shape best value middle 
inexperienced users wish get intuitive grasp choose try playing value toy problems rhul sv applet svm cs rhbnc ac uk 
scaling included support vector engine convenience function pre scales data training 
programs automatically scale data back output error measures allowing quick way pre process data suitably ensure dot products results chosen kernel function give reasonable values 
serious problems recommended pre processing function useful tool 
scaling done globally values scaled factor locally individual attribute scaled independent factor 
guideline may wish think way attributes type pixel values scale globally different types age height weight scale locally 
select scaling option program asks want scale data asks attributes scaled factor 
answering corresponds global scaling corresponds local scaling 
asked specify lower upper bounds scaled data 
scaling data important 
incorrect scaling program appear working fact training suffering lack precision values dot products feature space 
secondly certain kernels require parameters certain ranges example linear spline kernel requires attributes positive weak mode regularized fourier kernel requires jx gamma 
full description requirements kernel function see appendix 
chunking option chooses type optimizer training strategy 
note choice strategy effect learning ability svm speed training 
chunking selected optimizer invoked training points 
chunking option number training points small points 
optimizer requires half matrix number training points number points large probably just run memory don slow 
large number data points training consider optimization problem solving sequence sub problems call chunking 
types chunking method implemented posh chunking chunking respect spice girls follow algorithms described papers ofg ofg respectively 
chunking requires enter chunk size 
represents number training points added chunk iteration 
typical value parameter 
posh chunking requires enter working set size pivoting size 
working set size number vectors sub problem fixed chunking variable 
typical value 
pivoting size maximum number vectors moved sub problem replaced fixed vectors 
typical value 
setting ffl ffl defines ffl insensitive loss function 
stipulates far training examples allowed deviate learnt function 
tends zero constraints soft 
setting multiclass method selects multi class method 
classes method trains machines classifying class rest 
method trains gamma machines classifying class class 
setting multiclass continuous classes setting designed speed training multi class svm 
know classes sequence continuous integers enter speed things 
choose option case machine behaviour undefined 
doubt leave setting 
setting kernel specific parameters menu option allows enter free parameters specific kernel chosen 
kernel free parameters prompted enter program just go back main parameter menu 
setting expert parameters expert parameter menu options expert parameters usually ok 
optimizer minos loqo bottou 
sv zero threshold 
sv margin threshold 
objective function zero tolerance 
exit inexperienced user advised alter values 
optimizer optimizers currently rhul sv package 
solve optimization problems required learn decision functions 
pi minos commercial optimization package written department operations research stanford university 
pi loqo implementation interior point method loqo van written alex smola gmd berlin 
pi bottou implementation conjugate gradient method written leon bottou research labs 
loqo bottou optimizers provided distribution package commercial package 
stubs provided minos user acquire license minos user minos place minos fortran code directory minos change minos setting makefile include re 
loqo optimizer currently implemented regression estimation problems 
sv zero threshold value indicates cut point double precision lagrange multiplier considered zero words numbers counted support vectors 
theory support vectors vectors non zero coefficient practice optimizers deal numbers precision default values considered zero 
note different optimizers different problems change 
sv zero threshold low result large number support vectors increased training time 
sv margin threshold value represents virtual margin posh chunking algorithm 
idea training vectors added chunk wrong side virtual margin real margin virtual margin distance gamma value default gamma decision hyperplane 
remove problem slight losses precision cause vectors cycle correctly incorrectly classified chunking algorithm 
objective function zero tolerance chunking algorithms terminate objective function improve solving optimization sub problem 
prevent precision problems objective continually improved extremely small amounts caused precision problems optimizer algorithm terminating improvement larger value relevant 
sv svm run command line syntax sv training file 
test file 
parameter file 
sv machine file description file format see appendix simple see sv docs intro sv user tex 
specifying parameter file optional 
parameter file specified user set menus allow user define set parameters 
menus exactly enter parameters program see section 
parameter file included learnt decision function saved file name choice 
reloaded program section test new data stage 
calculating decision rule training set test examples evaluated program outputs list statistics 
want test test set specify dev null empty file second parameter 
specify file training testing set 
output program depend user sv machine pattern recognition regression estimation multi class classification 
output optimizer followed list examples training set support vectors performance statistics involving error training testing sets 
support vector listed value lagrange multiplier alpha value deviation margin 
output sv program sv machine parameters pattern recognition full polynomial alphas unbounded apply multi class svm 
sv input values globally scaled 
training data posh chunked 
training data chunked 
number svm degree polynomial 
kernel scale factor 
kernel threshold 
positive svs negative svs svs positive negative 
max alpha size objective training set total samples positive samples errors negative samples errors test set total samples positive samples errors negative samples errors lagrangian multipliers support vector 
alpha deviation finished checking support vector accuracy 
total deviation 
svs average deviation minimum alpha maximum alpha svm program uses different type optimizer construct rule depending selected setting parameters 
loqo optimizer default error optimization stated 
minos gives output form dec optimal solution case optimizer signals optimal solution 
data scaled badly data inseparable bound alphas infinite error may occur 
ensure scaling options set correctly may change bound alpha values value 
section informs user support vectors lists example numbers examples support vectors 
section indicates largest alpha value lagrangian multiplier value threshold decision function 
apply multi class svm 
followed information svm performed training set test set 
case pattern recognition shown output indicates number positive negative samples number misclassified training test set 
instance example examples training set classified correctly 
running svm program perform regression estimation various measures error displayed 
user average absolute error training set 
totals averages displayed absolute squared error training set 
multiclass machine table displayed giving number errors individual classes 
contains information normal pattern recognition svm slightly different form 
adding columns gives total number examples class 
diagonal number correct classifications 
performance statistics list values alphas lagrange multipliers support vector deviation far away support vector boundary margin 
deviation printed vector exactly distance margin 
statistics indicating minimum maximum alpha values useful setting scaling data sv zero threshold 
program load sv machine trained order classify new test data 
program run command line syntax sv machine file 
test file 
classification test data performed exactly sv program section 
transform sv modified version sv program implements scholkopf sch ideas transformation invariance images 
training data binary classified images pattern recognition performed 
general idea images moved pixel sideways 
program initially trains svm creates new training set including support vectors transformations directions 
set train second machine potentially may generalize better machine 
running program works just sv program asked dimensions images background intensity 
sets statistics 
set usual set sv program produces 
second consists error rate newly created training set original training set test set 
included rhul sv machine distribution utility program converts sn data file format pattern recognition problems data file format 
details exact format sn files see sv docs sn format txt 
description file format see appendix simple see sv docs intro sv user tex 
utility program called way sn data file 
sn truth data file 
output data file 
argument name data file sn format binary ascii packed second sn data file containing truth values classifications vectors described data file 
third argument name output file 
program menu options single class versus classes classes option takes data truth files creates binary classified data file 
examples single class specify labeled positive examples classes negative examples 
useful multi class pattern recognition data wish learn rest classifier 
option just saves class data classes data file multi class sv machine 
asked wish output binary ascii 
binary offers faster loading times smaller file sizes ascii useful debugging analyzing data editor 
sv programs automatically detect format binary ascii data files 
ascii bin bin ascii programs simple 
convert binary ascii input files take command line arguments ascii bin input file 
output file 
bin ascii input file 
output file 
program generating data want look appendix describing data format 
information line version support vector machine developed department 
web site graphical interface allows plot points see decision boundary produced 
page provides links svm sites 
web address page svm cs rhbnc ac uk questions mail dcs rhbnc ac uk gammerman vapnik vovk watkins royal holloway muller gmd lecun haffner simard support project 
sv kernels sv kernels list kernel functions rhul sv machine pi 
simple dot product delta pi 
simple polynomial kernel delta user defined 
taken vap pi 
vovk real polynomial gamma delta gamma delta user defined gamma 
delta 
private communications vovk pi 
vovk real infinite polynomial gamma delta gamma 
delta 
private communications vovk pi 
radial basis function exp gamma yj fl user defined 
taken vap pi 
layer neural network tanh delta gamma user defined 
taken vap pi 
linear splines infinite number points dimensional case min gamma min min multi dimensional case taken vgs pi 
full polynomial kernel gamma delta delta user defined 
vap generalized pi 
regularized fourier weaker mode regularization dimensional case fl cosh gammax fl sinh fl jx gamma fl user defined 
multi dimensional case vgs pi 
semi local kernel delta exp gamma jj oe oe user defined weight global local approximation 
private communications vapnik pi 
regularized fourier stronger mode regularization dimensional case gamma fl gamma fl cos gamma fl jx gamma fl user defined 
multi dimensional case vgs pi 
anova exp gammafl gamma degree fl user defined 
private communications vapnik pi 
generic kernel kernel intended experiments just modify appropriate function kernel generic parameters val val val val val 
pi 
generic kernel kernel intended experiments just modify appropriate function kernel generic parameters val val val val val 
input file format input file format just brief description input file format training testing data 
detailed description section 
ascii input input files consist simple header actual data 
saving files additional data added header safely ignored 
simplest input files pure ascii contain numbers 
number specifies number examples file second number specifies attributes example 
third number determines extended header 
set want extended header section 
followed data 
example turn attributes classification value 
say examples dimensional input space classification follows function theta input file look binary input possible create binary input files worried loss accuracy 
describe simplified version corresponds ascii file 
binary input files start magic number consists bytes 
followed int double variables saved write void int size function function write int file descriptor void int size 
header consists number examples int attributes example int int int int int 
rest file simply consists examples 
attributes example classification doubles 
sample list sample list ascii file binary file 
ascii file portable binary file may 
sample list file contains numbers 
numbers indicate exact format followed data 
sample list load formats saves format 
ascii version pre number int sample list file contains number examples file 
second number int sample list file contains dimensionality input space number attributes 
third number int sample list file determines format file 
case number set indicate ascii version pre rest file simply consists examples 
input values example classification 
say examples dimensional input space classification follows function theta input file look ascii version numbers meaning version pre number examples number attributes version 
fourth number int indicates dimensionality classification examples 
fifth number indicates data pre scaled 
useful data scaled way data note number referred version number 
ascii pre format number 
version ascii file format number decreases ascii version number set ascii version number value 
sample list scaled 
sixth number indicates classifications scaled 
seventh number indicates lower bound scaled data 
eighth number indicates upper bound scaled data 
follows list thresholds scaling double 
elements dimensions input space plus number dimensions classification 
follows list scaling factors double 
elements previous list 
exact explanation scale factors threshold calculated see section scaling 
note scale factors factors previously applied data 
applied data loading 
rest file simply consists examples 
input values example classification 
say examples dimensional input space classification follows function theta data scaled put list 
original data points version example 
input file look ascii version numbers meaning version pre number examples number attributes version 
fourth number int indicates dimensionality classification examples 
fifth number indicates data individual epsilon values example 
relevant regression 
sixth number indicates data pre scaled 
useful data scaled way data scaled 
scale factors saved scaling 
seventh number indicates classifications scaled 
eighth number indicates lower bound scaled data 
ninth number indicates upper bound scaled data 
follows list thresholds scaling double 
elements dimensions input space plus number dimensions classification 
follows list scaling factors double 
elements previous list 
exact explanation scale factors threshold calculated see section scaling 
note scale factors factors previously applied data 
applied data loading 
rest file simply consists examples 
input values example classification 
say examples dimensional input space classification follows function theta data scaled put list 
original data points version example 
input file look binary version binary sample list files start magic number consists bytes 
followed int double variables saved write void int size function 
format exactly follows ascii version number examples int number attributes int version int dimensionality classification examples int individual epsilon values example int 
sixth number int indicates data 
data scaled appear seventh number int indicates classifications scaled 
eighth number indicates lower bound scaled data double 
ninth number indicates upper bound scaled data double 
follows list thresholds scaling double 
elements dimensions input space plus number dimensions classification 
follows list scaling factors double 
elements previous sample list list 
exact explanation scale factors threshold calculated see section scaling 
note scale factors factors previously applied data 
applied data loading 
scaling scale factors appear 
followed examples ascii version saved doubles 
scaling scaling values unmanageable optimizer sv machine 
values reduce numerical accuracy extent solution anymore 
scaling set numbers works follows lower upper bound lb ub scaling occur 
find maximum minimum value max min calculate scaling factor ub max calculate threshold lb gamma min scale samples theta bs burges scholkopf 
improving accuracy speed support vector machines 
neural information processing systems 
ofg osuna freund girosi 
improved training algorithm support vector machines 

ofg osuna freund girosi 
training support vector machines application face detection 
cvpr 
sch scholkopf 
support vector learning 
oldenbourg verlag munich 
van vanderbei 
loqo interior point code quadratic programming 
vap vladimir vapnik 
nature statistical learning theory 
springer new york 
vladimir vapnik 
statistical learning theory 
wiley forthcoming 
vgs vladimir vapnik steven alex smola 
support vector method function approximation regression estimation signal processing 
