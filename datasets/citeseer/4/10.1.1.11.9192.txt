multiple pattern matching lzw compressed text takeda shinohara miyazaki arikawa takeda kyushu ac jp department informatics fukuoka japan address problem searching lzw compressed text directly new algorithm finding multiple patterns aho corasick pattern matching machine 
new algorithm finds occurrences multiple patterns algorithm proposed amir benson farach finds occurrence single pattern 
new algorithm runs time space length compressed text length total length patterns number occurrences patterns 
implemented simple version algorithm showed approximately twice faster decompression followed search aho corasick machine 
years remarkable explosion machine readable text data 
text data stored compressed forms 
need fast pattern matching technique searching compressed text directly 
researchers tackled problem 
vishkin addressed run length compression amir landau amir benson addressed twodimensional version :10.1.1.53.88
farach thorup addressed lz compression 
amir benson farach addressed lzw compression 
karpinski miyazaki addressed straight line programs 
fast pattern matching text compressed need algorithms faster decompression followed simple search 
studies done mainly theoretical viewpoints 
concerning practical aspect problem manber pointed 
clear example practice compressed faster regular decompression followed fast search 
supported part aid scientific research ministry education science sports culture japan 
shall question 
amir benson farach series algorithms having various time space complexities 
pattern matching attractive time space algorithm length compressed text length pattern 
viewed functions simulate move kmp automaton 
view enables simplify improve extend algorithm multiple pattern matching problem 
give new algorithm finding multiple patterns lzw compressed text 
new algorithm simulates move aho corasick pattern matching machine 
algorithm finds occurrence single pattern new algorithm simultaneously recognizes occurrences multiple patterns 
new algorithm runs time space length compressed text total length patterns number occurrences patterns 
reporting positions occurrences patterns 
experimental result shows new algorithm approximately twice faster lzw decompression followed search aho corasick machine 
algorithm shown viewpoint 
preliminaries section briefly sketches lzw compression aho corasick pattern matching machine 
lzw compression lzw compressed text sequence integers 
indicates node numbered dictionary trie 
node dictionary trie represents string spelled path root 
set strings represented nodes dictionary trie denoted called dictionary 
dictionary trie adaptively incrementally built compressing text 
shows dictionary trie text assuming alphabet fa cg 
example integer compressed text represents string bc 
identify string integer representing confusion occurs 
dictionary trie removed compression completed 
recovered compressed text 
decoding phase original text obtained aid recovered dictionary trie 
decoding process takes linear time proportional length original text 
original text required dictionary trie built time length compressed text 
ab ab ba aba bc abab original text compressed text dictionary trie 
ac machine aho corasick pattern matching machine ac machine short finite state machine simultaneously locates occurrences multiple patterns single pass text 
construction ac machine takes linear time proportional sum lengths patterns 
alphabet 
ae finite set patterns 
set states initial state 
specified functions goto function failure function output function shows ac machine patterns bbg fa cg 
aba bb aba bb bb bb aho corasick machine bbg 
solid broken arrows represent goto failure functions respectively 
underlined strings adjacent states mean outputs 
define state transition function ffi ffi fail extend ffi function ffi ffi ua ffi ffi empty string 
basic idea want build pattern matching machine runs lzw compressed text simulates behaviors ac machine original text 
integer compressed text new machine state transition corresponds consecutive state transitions ac machine caused string new state transition function 
function limitation ffi domain function simulate state transitions ac machine 
ac machine simulated may pass states outputs step new machine 
new machine mealy type sequential machine output function defined output fhi ij juj ffi output stores outputs emitted ac machine state transitions state reading string note domain functions output set grows incrementally reading compressed text 
data structures required functions fall classes depend patterns independently algorithm consists parts preprocessing patterns scanning compressed text 
functions output partially constructed preprocessing phase updated incrementally text scanning phase 
pattern matching algorithm lzw compressed text summarized 
shows move new machine compressed text 
shown function realized answer time function output realized answer linear time proportional size answer time space length compressed text total length patterns 
algorithm runs time space number occurrences patterns 
sections discuss realizations functions 
input 
set patterns lzw compressed text output 
positions original text pattern ends 
method 
preprocessing phase construct gst functions text scanning phase state hd output state report occurrence pattern ends position state state ju update dictionary trie output 
pattern matching algorithm 
original text ab ab ba aba bc abab compressed text state 










output machine 
realization state transition function section discusses realization state transition function defined 
introduce notations 
string written xyz strings called prefix factor suffix respectively 
prefix set prefixes string prefix prefix set strings define suffix factor similar way 
noted correspondence states ac machine prefixes patterns 
example initial state corresponds empty string state corresponds string abab 
pattern prefix state representing 
prefix 
realize function data structures generalized suffix trie 
generalized suffix trie set strings gst short trie represents set suffixes strings 
extension table function blanks indicate undefined 
state ab ba bb bc ca aba abb abc bab bca abab babb suffix trie single string 
note gst corresponds string factor 
node gst said explicit represents suffix pattern degree 
construction ac machine takes time space construction gst takes time space total length patterns 
consider realization 
lemma characterizes state transition function ffi ac machine 
modified version lemma 
lemma prefix ffi 
string longest string set suffix qu definition ae finite set patterns define occ fq prefix qu prefix set occ means set states prefix string occurs 
example occ occ bab occ aa ac machine bbg 
definition longest string suffix occ 
string 
factor implies undefined sufficient consider values factor 
table shows function ac machine bbg 
note values stored states ac machine 
example ab suffix occ ab string ab represented state longer represented state 
lemma proved lemma extension idea multiple pattern problem 
lemma 
suffix occ ffi 
values ffi computed incrementally constructing dictionary trie compressed text stored nodes 
computation follows suppose values ffi computed existing nodes dictionary trie 
suppose create new node add new edge labelled node representing new node represents string ua 
value ffi ua obtained ffi ffi performing state transition ac machine stored new node 
requires time 
function represented table size jqj total length patterns 
table size reduced 
definition factor occ occ ux string said maximal va 
example ab fc cag ba fba bab bbg 
lemma factor 

note set may contain maximal element 
denote maximal elements 
function returns string string realized answer time stored nodes gst 
computed time space 
see maximal element factor represented explicit node gst 
number explicit nodes gst size set fu factor 
function defined factor represented size table function mentioned value corresponds state ac machine node trie 
see trie node ancestor node distance nodes juj juj 
assuming function ancestor returns ancestor node distance value obtained ancestor juj juj function ancestor realized answer constructed time get value function ancestor juj juj factor ffi 
construction table stores values constructed time space manner basically algorithm proposed amir benson farach 
theorem 
theorem state transition function defined realized answer time jdj time space 
realization output function section discusses realization function output defined follows definition output output fhi ij juj suffix string partition set output sets lemma 
lemma longest prefix suffix 
fhi ij uj jj output output 
set represented functions prev prev longest proper prefix string suffix 
functions computed incrementally constructing dictionary trie stored nodes representation requires time space 
store values output suffix suffix 
definition suffix 
sequence states juj said state sequence 
ffi ffi juj definition define function suffix suffix au ffi table shows function ac machine bbg 
repeated calls function get state sequence 

enumerate elements output fhi ij enumeration takes linear time proportional length string need subsequence state sequence states non empty outputs 
define function follows 
definition state sequence 
suffix 
define juj smallest integer 
function constructed time space 
get desired subsequence linear time proportional length 
theorem 
theorem output function output linear time proportional size answer jdj time space 
table function asterisks indicate pairs 
state aba ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca ba babb abb bb bca ca cpu time second method method method occurrence rate running time 
experimental results toevaluate algorithm practical viewpoint implemented methods language sun sparcstation 
method decompression temporary file followed search 
method method ac machine runs decompressed substring compressed text creating temporary file 
method simple version proposed algorithm technique reducing size applied 
method differs method create temporary file clear method faster method 
ignoring preprocessing time running time method method length original text length compressed text 
best lzw compression gives lzw compression typical english texts normally gives 
constant factor hidden notation plays key role competition 
experiment brown corpus text searched 
original size mb compressed size mb 
measured cpu time search various sets patterns 
excluded preprocessing phase ignore total length patterns sufficiently smaller text length running time varies depending number pattern occurrences 
define occurrence rate ratio number pattern occurrences original text length relation cpu time occurrence rate shown 
method defeats method method 
emphasized method approximately times faster method 
aho corasick 
efficient string matching aid bibliographic search 
comm 
acm 
amir benson 
efficient dimensional compressed matching 
proc 
data compression conference page 
amir benson 
dimensional periodicity application 
proc 
rd symposium discrete algorithms page 
amir benson farach 
sleeping files lie pattern matching files 
journal computer system sciences 
amir landau vishkin :10.1.1.53.88
efficient pattern matching scaling 
journal algorithms 
vishkin 
matching patterns string subject multilinear transformations 
proc 
international workshop sequences combinatorics compression security transmission 
farach thorup 
string matching lempel ziv compressed strings 
th acm stoc pages 
karpinski rytter 
efficient algorithms lempel ziv encoding 
proc 
th scandinavian workshop algorithm theory vol ume lecture notes computer science pages 
springer verlag 
karpinski rytter shinohara 
efficient pattern matching algorithm strings short descriptions 
nordic journal computing 
knuth morris pratt 
fast pattern matching strings 
siam comput 
manber 
text compression scheme allows fast searching directly compressed file 
proc 
combinatorial pattern matching volume lecture notes computer science pages 
springer verlag 
miyazaki shinohara takeda 
improved pattern matching algorithm strings terms straight line programs 
proc 
combinatorial pattern matching volume lecture notes computer science pages 
springer verlag 
welch 
technique high performance data compression 
ieee comput june 
ziv lempel 
universal algorithm sequential data compression 
ieee trans 
inform 
theory may 
