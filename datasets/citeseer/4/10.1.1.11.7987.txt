inheritance dynamic behavior uml van der aalst eindhoven university technology faculty technology management department information technology box nl mb eindhoven netherlands 
aalst tm tue nl 
key issues object oriented modeling design inheritance 
allows definition subclasses inherit features superclass 
inheritance defined static properties classes attributes operations 
general agreement meaning inheritance considering dynamic behavior objects captured life cycles 
studies inheritance behavior context uml 
theoretical framework applied tested process algebraic setting acp petri net setting wf nets 
framework inheritance rules defined construct subclasses super classes 
rules corresponding techniques tools applied uml activity diagrams uml statechart diagrams uml sequence diagrams 
turns combination blocking hiding actions captures number important patterns constructing behavioral subclasses choice sequential composition parallel composition iteration 
practical insights firm theoretical foundation show framework stepping stone extending uml inheritance behavior 
unified modeling language uml accepted software industry standard object oriented framework specifying constructing visualizing documenting software intensive systems 
main goals object oriented design reuse system components 
key concept achieve goal concept inheritance 
inheritance mechanism allows designer specify class subclass inherits features class superclass 
possible specify subclass features superclass addition may features 
concept inheritance usually defined static structure class consisting set operations methods attributes 
mentioned class describe dynamic behavior object 
term object life cycle refer behavior 
current version uml version supports types diagrams class diagrams object diagrams case diagrams sequence diagrams collaboration diagrams statechart diagrams activity diagrams component diagrams deployment diagrams 
types diagrams sequence diagrams collaboration diagrams statechart diagrams activity diagrams capture part behavior modeled system 
sequence diagrams collaboration diagrams typically model examples interactions objects scenarios 
activity diagrams emphasize flow control activity activity statechart diagrams emphasize potential states transitions states 
statechart diagrams activity diagrams specify dynamics various aspects system ranging life cycle single object complex interactions societies objects 
activity diagrams typically address dynamics system including interactions objects 
statechart diagrams typically model object life cycle 
note uml joins inspired earlier message sequence diagrams sequence diagrams statecharts statechart diagrams petri nets activity diagrams 
looking informal definition inheritance uml states mechanism specific elements incorporate structure behavior defined general elements 
class diagrams describing purely structural aspects class equipped concrete notion inheritance 
implicitly assumed behavior objects subclass extension behavior objects superclass 
clearly sufficient realize full potential inheritance 
ultimate quest extend diagram type uml suitable notions inheritance 
purpose theoretical results stepping stone 
results provide notions behavioral inheritance inheritance preserving transformation rules transfer rules advanced notions greatest common divisor gcd set behavioral models 
sequence diagram object life cycle wf net petri net setting collaboration diagram transition system statechart diagram activity diagram acp term process algebraic setting uml diagrams intermediate semantic domains fig 

mapping uml behavior diagrams semantic domains 
core semantic domain follow approach proposed trying give full formal semantics uml focus selected parts uml map parts called semantic domain 
semantic domain formal language allowing precise definition inheritance equipped analysis techniques verify process subclass process 
theoretical results semantic domains 
illustrated 
core semantic domain formed transition systems branching bisimilarity equivalence relation 
mapping specific models petri net process algebraic setting transition systems 
explore mapping uml behavior diagrams semantic domains order incorporate inheritance behavior uml 
direct mapping sequence collaboration statechart activity diagrams core semantic domain transition systems allows full flexibility 
indirect mapping intermediate semantic domains wf nets object life cycles petri net setting acp terms process algebraic setting allows powerful analysis techniques cf 
structure theory petri nets invariants equational theory acp 
uml behavior diagrams closely related intermediate semantic domains 
consider example relation activity diagrams petri nets 
note goal provide precise semantics uml 
topic relevant debated times outside scope 
remainder organized follows 
theoretical results introduced 
notions inheritance applied sequence diagrams section statechart diagrams section activity diagrams section 
conclude provide pointers related summarize main results 
inheritance behaviour goal section introduce notions inheritance highlight results theoretical results 
results developed petri net setting cf 
developed setting cf 

main ideas generic applied behavior diagrams uml sequence diagrams activity diagrams collaboration diagrams statechart diagrams 
intuition results demonstrate applicability sequence diagrams activity diagrams statechart diagrams 
informal notions inheritance diagrams sequence diagrams activity diagrams statechart diagrams specify behavior object system 
elementary way modeling behavior called labeled transition system 
consider core semantic domain cf 

labeled transition system set states plus transition relation states 
transition labeled action 
shows simple transition system representing order processing system states 
transitions labeled different action 
transition labeled accept order moves system state state 
simplicity assume transition system initial state final state 
note transition system multiple initial final states transformed transition system initial final state 
reject order receive accept ship close order order order order fig 

labeled transition system specifying order processing system 
states transitions actions transition system confused meaning notions uml 
context interpretation concepts depends uml diagrams considered 
example uml statechart diagram composite state consisting multiple concurrent substates composite state may correspond states corresponding labeled transition system possible combinations states concurrent substates 
uml sequence diagram sending message stimulus corresponds execution transition having appropriate action label 
uml activity diagram action states correspond actions corresponding labeled transition system 
section terms state transition action context labeled transition system 
subsequent sections put concepts context uml diagrams specifying behavior 
distinguish visible actions invisible actions 
comparing behavior labeled transition systems visible actions considered 
distinction visible invisible actions fairly standard process theory see pointers 
possible distinguish individual invisible actions referred silent actions actions labeled 
labeled transition systems considered equivalent observable behaviors coincide abstracting actions detect differences 
formal point view branching bisimulation equivalence relation 
avoid getting formal definitions 
refer details 
focus inheritance dynamic behavior 
translated labeled transition systems translates question labeled transition system subclass labeled transition system 
possible answers question 
important note ask question viewpoint environment 
assume labeled transition systems 
answer follows 
possible distinguish external behavior actions executed subclass 
intuitively basic form inheritance conforms blocking actions new 
remainder labeled transition system said inherit protocol resulting fundamental form inheritance referred protocol inheritance 
note protocol inheritance specifies lower bound behavior offered sequence actions invocable superclass invoked subclass 
referred invocation consistency 
second answer question follows 
possible distinguish external behavior arbitrary actions executed effects actions considered subclass 
second basic form inheritance behavior conforms hiding effect actions new 
transition system inherits projection transition system actions resulting form inheritance called projection inheritance 
note projection inheritance considered upper bound behavior offered sequence actions observable subclass correspond observable sequence superclass abstraction 
referred observation consistency 
illustrate basic notions inheritance consider labeled transition system specifying order processing system shown 
suppose superclass named shows labeled transition system named subclass respect protocol inheritance block new actions observable behavior coincides observable behavior action subcontract order executed original behavior preserved 
note subsequent figures new actions action appearing highlighted 
note subclass respect projection inheritance 
hide new actions occurrence sequence receive order directly followed close order executing reject order accept order ship order 
clearly behavior possible subcontract order receive confirmation reject order ship order receive accept ship close order order order order fig 

subclass respect protocol inheritance 
labeled transition system shown subclass respect projection inheritance 
new action send invoice executed parallel ship order 
assuming interleaving semantics 
send invoice renamed action accept order followed ship order turn followed close order 
observable behavior coincides observable behavior abstracting send invoice subclass respect projection inheritance 
note subclass respect protocol inheritance 
send invoice blocked process gets stuck executing ship order 
receive order reject order accept order send invoice ship order ship order send invoice close order fig 

subclass respect projection inheritance 
essentially ways combine basic notions inheritance stronger weaker notions inheritance 
protocol projection inheritance restrictive form inheritance combines basic notions time 
subclass respect protocol projection inheritance subclass respect protocol inheritance projection inheritance 
life cycle inheritance liberal form inheritance set new actions partitioned hidden blocked observable behavior subclass equals behavior superclass 
note protocol projection inheritance implies lifecycle inheritance 
question answer reject order receive accept ship close order order order order fig 

subclass respect protocol projection inheritance 
shown subclass respect protocol projection inheritance blocking hiding new actions results observable behavior action question blocked new behavior activated 
actions question answer renamed presence observed 
labeled transition system shown subclass respect life cycle inheritance 
blocking new action subcontract order hiding action send invoice resulting observable behavior coincides note subcontract order receive order receive confirmation reject order accept order send invoice ship order ship order ship order send invoice close order fig 

subclass respect life cycle inheritance 
subclass respect notions inheritance 
notions block hide new actions life cycle inheritance individual new action blocked hidden 
note subclass respect projection inheritance 
subclass respect protocol inheritance 
summarize identified notions inheritance fundamental mechanisms hiding blocking 
restrictive notion inheritance protocol projection inheritance 
transition systems subclass respect protocol projection inheritance 
life cycle inheritance liberal form inheritance transition systems subclass respect life cycle inheritance 
inheritance preserving transformation rules results notions inheritance developed set tools woflan obtained powerful theoretical results 
theoretical results section highlight 
petri net process algebraic setting developed comprehensive set inheritance preserving transformation rules cf 
table 
detailed description rules scope 
give informal description inheritance preserving transformation rules pp pt pj pj 
transformation rule pp add loops loop eventually returns state initiated 
loops contain new invisible actions protocol projection inheritance notions inheritance preserved 
constructed rule automatically follows subclass protocol projection inheritance 
pt preserves protocol inheritance adds alternative behavior 
constructed rule 
pj pj preserve projection inheritance 
pj insert new actions existing actions 
pj add parallel behavior 
constructed rule pj 
rules pp pt pj pj correspond design constructs practice iteration choice sequential composition parallel composition 
designer sticks rules inheritance guaranteed 
noted precise formulation rules depends modeling language straightforward may added parts introduce deadlocks terminate properly 
inheritance preserving transformation rules formulated terms object life cycles wf nets petri net modeling languages cf 
terms acp process algebraic language cf 

process algebraic setting additional rules pj lc lc lc formulated 
name adds preserves pp loops containing new behavior notions inheritance pt new alternatives starting new action protocol life cycle inheritance pj new actions inserted existing ones projection life cycle inheritance pj new actions parallel existing ones projection life cycle inheritance table 
overview inheritance preserving transformation rules 
inheritance preserving transformation rules developed comprehensive set transfer rules 
transfer rules migrate instances subclass superclass vice versa 
suppose subclass constructed rules pp pt pj pj 
state possible transfer instance object class life cycle specified transition system transfer instantaneous needed introduce syntactic errors deadlocks livelocks improper termination semantic errors double execution actions unnecessary skipping actions 
possible transfer instances subclass superclass problems 
note transfer rules derived transformation rules introduced earlier 
transfer rules move case subclass transfer rules move case superclass see specification transfer rules petri net setting 
inheritance relations provides ordering labeled transition systems define concepts gcd greatest common divisor processes 
concept gcd introduced detailed analysis concept 
inheritance relations lattice trade uniqueness existence 
weak notion gcd existence guaranteed may multiple gcd stronger notion existence longer guaranteed gcd exists unique 
tradeoff define notion maximal common divisor mcd 
mcd smallest superclass life cycle inheritance 
set labeled transition systems related inheritance subclass superclass relationships generally quite easy find gcd 
case computation gcd involved typically multiple candidates mcd 
similarly results hold lcm common multiple mcm minimal common multiple :10.1.1.43.4850
results illustrate strong theoretical foundation inheritance dynamic behavior 
unfortunately application limited workflow domain 
want demonstrate results stepping stone extending behavior diagrams uml sequence diagrams activity diagrams collaboration diagrams statechart diagrams inheritance 
checking inheritance illustrate applicability inheritance concepts refer workflow analysis tool woflan 
woflan petri nets aims verification workflow processes 
checking deadlocks design errors woflan supports notions inheritance 
workflow models woflan able check model subclass model 
current version assumes models expressed terms petri nets 
developed translations concrete systems cosa cosa solutions thiel ag staffware staffware plc protos pallas athena alternative modeling techniques workflow graphs event driven process chains 
inheritance checker relatively independent modeling language results restricted workflow processes apply behavioral model 
practical results demonstrate practical potential results context uml 
sequence diagrams diagram type consider uml sequence diagram 
sequence diagram dimensions vertical dimension represents time horizontal dimension represents different instances 
sequence diagrams typically describe specific scenarios interaction objects 
uml allows variations iteration conditional timed behavior assume sequence diagram restricted lifelines messages communications type procedure call asynchronous return activation concurrent branching 
assumptions fairly straightforward map sequence diagram labeled transition system core semantic domain petri net intermediate semantic domain 
fact assumptions sequence diagram corresponds called marked graph petri net places multiple inputs outputs 
observation indicates projection inheritance relevant diagram type 
choices sense block behavior cause deadlocks 
result projection inheritance preserving transformation rules relevant 
consider sequence diagrams shown 
right hand side diagram subclass left hand side diagram projection inheritance 
ways verify 
map sequence diagrams contractor subcontractor request accept send return send bill pj pj contractor subcontractor request accept send return send bill inform order complete worker prepare bill fig 

subclass sequence diagram constructed rules pj pj 
semantics domains shown check inheritance corresponding domain 
second apply projection inheritance preserving transformation rules pj pj described section 
pj add action prepare bill pj add lifeline worker actions inform order complete 
note assumed correspondence messages actions 
communications type procedure call activation concurrent branching 
translation pj pj sequence diagrams easily deal concepts 
collaboration diagrams closely related sequence diagrams 
essence provide different view identical structures 
results obtained inheritance sequence diagrams easily transferred collaboration diagrams 
statechart diagrams contrast sequence diagrams statechart diagrams typically specify scenarios 
model life cycle object 
david harel ongoing discussion semantics statecharts 
clearly semantics mapped core semantic domain transition systems implicitly notions inheritance described section 
partial mapping csp similar semantic mapping acp mapping object behavior diagrams 
providing mapping statechart diagrams semantic domain provide examples demonstrate inheritance notions related transformation rules 
switch switch start cycle sw rg sw gy blinking red green yellow cycle tl sw yr pp pt switch start cycle sw rg sw gy blink blinking red green yellow switch cycle sw yr fig 

subclass statechart diagram constructed rules pp pt 
shows statechart diagrams 
right hand side diagram subclass left hand side diagram protocol inheritance 
sequence actions possible left hand side diagram possible right hand side diagram 
superclass statechart diagram models dutch traffic light state blinking composite state tl 
composite state decomposed substates red green yellow 
subclass statechart diagram extends superclass ways 
self transition blink added 
second composite state extended allow traffic light fails 
state light corresponds malfunctioning traffic light shut 
extension involving transition blink realized applying pp protocol projection inheritance preserving transformation rule introduces loops blocked hidden 
extension involving state light realized applying pt protocol inheritance preserving transformation rule introduces alternatives blocked 
example illustrating application framework statechart diagrams 
right hand side diagram subclass left hand side diagram projection inheritance 
subclass statechart diagram right extends superclass left ways 
traffic light phases including state red yellow 
second composite state tl concurrent regions corresponding original traffic light additional phase corresponding mechanism count number cars 
new mechanism additional phase obtain original traffic light 
easy verify right hand side diagram subclass left hand side diagram projection inheritance 
possible demonstrate applying projection inheritance preserving transformation fail fail fail light tl switch switch start cycle sw rg sw gy blinking red green yellow cycle tl sw yr pj pj switch switch start cycle sw sw rg sw gy blinking red red yellow green yellow cycle sw yr count cars fig 

subclass statechart diagram constructed rules pj pj 
new car rules pj pj mentioned section 
pj insert additional state red yellow pj add concurrent region counting cars 
activity diagrams activity diagram variation state machine states represent performance actions transitions triggered completion actions 
activity diagrams typically modeling behavior transcends life cycle single object 
supports notations workflow modeling 
compared classical statecharts activity diagrams allow actions states states decisions merges denoted diamond shape object flows concurrent transitions model synchronization forks 
note influence behavior activity diagram 
semantics activity diagrams discussion 
clearly ideas adopted petri nets proposal uml token passing main mechanism specify semantics activity diagrams 
wf nets semantic domain map activity diagrams 
concurrent transitions mapped petri net transitions decisions merges mapped places actions states mapped petri net transitions object flows mapped places transitions mapped transitions places example illustrate application inheritance notions 
consider activity diagrams shown 
right hand side diagram subclass left hand side diagram life cycle inheritance 
note tl reject order receive order accept order ship order close order pt pj reject order receive order accept order ship order close order send invoice fig 

subclass activity diagram constructed rules pt pj 
subcontract order receive confirmation ship order right hand side diagram subclass notions inheritance action send invoice needs hidden action subcontract order needs blocked notions applies 
note left hand side diagram corresponds labeled transition system shown 
right hand side diagram corresponds labeled transition system shown 
subclass activity diagram right extends superclass left ways send invoice added projection inheritance preserving transformation rule pj alternative sequence starting subcontract order added protocol inheritance preserving transformation rule pt 
section verification tool woflan mentioned 
straightforward mapping activity diagrams wf nets woflan check right hand side activity diagram subclass lefthand side diagram life cycle inheritance 
shows case 
interested reader download woflan www tm tue nl woflan 
related literature object oriented design theoretical foundations contains studies related research described 
abstraction setting suggested inheritance relation behavior 
research inheritance behavior related concepts behavioral subtyping 
variety inheritance relations reported literature surprising considers example large number semantics exist concurrent systems see example 
elaborate overview fig 

woflan shows right hand side activity diagram subclass left hand side diagram life cycle inheritance 
approaches refer 
authors mention need inheritance behavior context uml cases application concrete uml diagrams missing 
consider example 
authors provide rigorous framework behavioral inheritance lift framework level statechart activity diagrams 
authors focus specifically inheritance statecharts 
inheritance statechart diagrams investigated csp semantic domain 
object behavior diagrams semantic domain 
encouraging see similar notions inheritance invocation consistency corresponds protocol inheritance observation consistency corresponds projection inheritance 
note allow additional notions inheritance protocol projection inheritance life cycle inheritance provide inheritance preserving transformation transfer rules extend sequence activity diagrams 
investigated applicability theoretical results behavioral inheritance uml diagrams dealing behavior 
theoretical results developed context specific models concurrency petri nets process algebra common core illustrated labeled transition systems core semantic domain 
demonstrated core lifted level concrete uml diagrams 
particular applied inheritance notions corresponding transformation rules sequence diagrams activity diagrams statechart diagrams 
pragmatic approach aiming full expressive power uml 
full uml standard simply contains features defined sufficiently allow ultimate quest defining inheritance sequence diagrams activity diagrams statechart diagrams defined object diagrams 
examples show theoretical results lifted level concrete uml diagrams 

van der aalst basten 
life cycle inheritance petri net approach 
az ma balbo editors application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

van der aalst basten 
identifying commonalities differences object life cycles behavioral inheritance 
editors application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

van der aalst basten 
inheritance workflows approach tackling problems related change 
theoretical computer science 

america 
designing object oriented programming language behavioral subtyping 
de bakker de roever rozenberg editors foundation object oriented languages volume lecture notes computer science pages 
springer verlag berlin 

basten 
terms nets system design petri nets process algebra 
phd thesis eindhoven university technology eindhoven netherlands december 

basten van der aalst 
inheritance behavior 
journal logic algebraic programming 

breu hofmann klein rumpe 
precise semantics object oriented modeling techniques 
aksit matsuoka editors th european conference object oriented programming ecoop volume lecture notes computer science pages 
springer verlag berlin 

engels heckel ster 
rule specification behavioral consistency uml meta model 
editors th international conference unified modeling language uml volume lecture notes computer science pages 
springer verlag berlin 

wieringa 
comparing petri nets activity diagram variants workflow modelling quest reactive petri nets 
ehrig reisig rozenberg editors petri net technologies communication systems lecture notes computer science 
springer verlag berlin 

van glabbeek 
linear time branching time spectrum ii semantics sequential systems silent moves 
best editor proceedings concur volume lecture notes computer science pages 
springer verlag berlin 

object management group 
omg unified modeling language version 
omg www omg com uml 

object management group 
omg unified modeling language proposal revised submission omg ad ad version 
omg www omg com uml 

harel 
statecharts visual formalism complex systems 
science computer programming 

harel kupferman 
behavioral inheritance state objects 
technical report mcs weizmann institute science israel 

kappel 
inheritance object behavior consistent extension object life cycles 
eder editors proceedings second international east west database workshop pages 
springer verlag berlin 

martens reisig 
inter operability workflow applications local criteria global soundness 
van der aalst desel oberweis editors business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 

liskov wing 
behavioral notion subtyping 
acm transactions programming languages systems november 

nierstrasz 
regular types active objects 
acm sigplan notices october 
special issue containing proceedings th 
annual conference object oriented programming systems languages applications oopsla washington dc 

reisig rozenberg editors 
lectures petri nets basic models volume lecture notes computer science 
springer verlag berlin 

rudolph grabowski 
tutorial message sequence charts 
computer networks isdn systems 

rumbaugh jacobson booch 
unified modeling language manual 
addison wesley reading ma usa 


design behavior consistent specialization object life cycles uml 
papazoglou spaccapietra tari editors advances object oriented data modelling pages 
mit press 


behavior consistent inheritance uml 
alberto laender editor proceedings th international conference conceptual modeling er volume lecture notes computer science pages 
springer verlag berlin 

verbeek basten van der aalst 
diagnosing workflow processes woflan 
computer journal 


subtyping patterns active objects 
editors proceedings ter workshop des gi groom grundlagen objekt modellierung volume germany 
university 

wieringa 
algebraic foundations dynamic conceptual models 
phd thesis free university amsterdam netherlands 
