user interface modelling uml paulo pinheiro da silva norman paton department computer science university manchester oxford road manchester pl uk norm cs man ac uk 
unified modeling language uml natural candidate user interface ui modelling standard notation object oriented modelling applications 
means clear model uis uml 
presents user interface modelling case study uml 
case study identifies aspects uis modelled uml notation set uml constructors may model uis 
modelling problems indicate weaknesses uml modelling uis constructors exploited indicate strengths 
identification strengths weaknesses formulation strategy extending uml provide greater support user interface design 
uml standard language object oriented modelling software applications 
user interface significant part applications modelled uml 
fact uml natural candidate notation ui modelling 
means clear model user interfaces uml 
easy identify user interface elements user tasks presentations supported uml application models 
reports projects specifically applying uml modelling ui 
modelling problems appear design ui case study described chapter completely addressed uml design methods uml specification 
proposals models support design ui elements different notations 
instance research concerning design user tasks ainsworth johnson 
proposals designing uis declarative models described griffiths szekely 
best invent new modelling constructs ui existing ones effectively 
able constructs ui rest application 
single notation useful consolidating complete design object oriented user interface 
research area kovacevic identification ui aspects described uml clear 
aim summarised description comprehensive ui modelling case study uml 
case study purpose identifying common ui modelling problems uml set uml constructors diagrams may application developers design uis 
modelling problems identify aspects uis covered uml 
set constructors identify aspects uis covered uml 
case study produces insight ease uml model uis 
provides elements may develop strategy extending uml order provide better support user interface design 
case study intentionally describe method ui design 
methods considered way find alternative modelling approaches view overcoming difficulties identified 
idea solve identified ui modelling problems uml 
case study considers form user interfaces 
fact important categories application user interfaces database system uis web application uis mainly 
restricting scope form user interfaces means user interfaces applications case diagram 
games word processors simulators scope study 
despite ui models introduced case study ui model baseline development comprehensive ui models uml 
case study considers modelling visual components widgets important modelling widgets ui designers 
case study discusses widgets may application widgets modelled 
case study library system library case study identify user interface modelling problems 
library system case study considered simple catch real problems faced modelling user interfaces 
library system simple compared real systems 
proved sufficiently complex allow range problems identified area user interface modelling 
case diagram shows actors library system cases 
actors librarians 
actor generalisation librarian borrower 
librarians library system manage book catalogue loan records 
librarians need inform library system books checked checked system able manage loan records 
cases associated librarian created 
connect system list books borrowed library user search books author title year combination 
cases associated searchbook 
considered case login system just check password 
browse book catalogue specifying condition 
case associated 
search browse operations repeated result search browse operation 
library system guarantee registered users login system 
system guarantee perform services associated librarians perform services associated librarians 
books selected users searching browsing book catalogue 
book selected users check availability 
case modelled extension searchbook 
book selected operations user check status 
cases similar features behaviour 
instance search book cases books specified 
new case called created model shared behaviour 
unidirectional associations created model extends relationship search book 
similarly common behaviour searchbook 
case diagram system specification entirely described obtained design domain model represented class diagram shown 
class diagram composed entity classes person librarian borrower book loan 
entity classes correspond librarian borrower actors respectively 
existence instance book means book entry library catalogue 
manage stock library system class represents copy versions books library 
possible books library catalogue stock newly ordered books delivered books damaged 
books inserted library catalogue ordered 
case associated librarian created 
instance loan created process modelled case destroyed process modelled case 
loan object indicates essentially day domain model 
book returned 
entity stereotype control stereotype boundary stereotype 
introduced ivar object oriented software engineering incorporated uml 
entity stereotype identifies classes class instances model things objects exist right 
control stereotype identifies classes class instances perform system behaviour 
boundary stereotype identifies classes class instances handle interaction system users systems 
case study description provides context ui design 
task modelling case shows borrower browse books 
logged perform function 
uml terminology means actor borrower case previously case 
fact situation slightly complex 
fact borrower mean logged system 
happen example borrower tried login failed 
case diagram shows case extends searchbook cases doesn explain extension happens 
problem described case diagrams designed requirements analysis provide control flow information related tasks 
activity diagram shows borrower interact user interface library system 
notice activities thing cases activity log means connect case system user successfully logged system 
activity diagram shows logging system user needs select options search book browse books quit interaction application 
furthermore user check status book book selected activity select book 
select book check book status log select function search quit search book browse book select select browse book selected search book select search option specify specify specify book details search domain search precision perform search view results select option partial view task model 
applying activity diagrams control user interface navigation resembles traditional hierarchical task analysis hta widely describe user task models 
activities cases tasks exactly thing similar characteristics 
cases example considered high level tasks activities similar tasks 
relationship cases activities uml particularly clear 
fact cases provide features associated user requirements goals pre conditions post conditions may help design activity diagrams 
single activity diagram model task flow control activities decomposed 
fact activities atomic means interrupted time execute 
decomposing facility activity search book explained precisely additional activity diagram shown 
tasks require information domain model information provided users 
instance general activity diagram selected book passed activity select book activity check book status 
data flow activity diagrams modelled object flows 
activity select book identified object class book passed activity check book status 
data items acquired interaction diagrams associated case 
object flow technique provided activity diagrams avoids necessity checking interaction diagrams discover tasks access information 
presentation modelling need model ui presentation arises naturally modelling application 
simple scenarios modelling part ui presentation essential 
stage need detailed model ui presentation know kind components compose ui components may grouped 
need know operations ui elements 
need presentation model 
modelling user successfully logging library system exemplify presentation model 
shows sequence diagram scenario case 
case diagram associated actor 
object initiates interaction sending message instance library system acts library system 
sequence diagram case 
practically speaking request connection message example double click library system icon windows envi library system ronment 
system immediately creates boundary object class executes operation called 
login password creation object modelled object sending message create new object 
created object presents user connection user interface ok cancel requesting login name password 
user interface form shown 
uml di display 
uml specify notation designing ui presentations 
fact claiming uml ui mock notation lead early commitment terms ui layout component selection 
argue uml needs notation describe better structure user interfaces class object diagrams 
fact notation early ui design support task design activity diagrams 
explanation sequence diagram requires auxiliary definitions provided 
presentation structure presentation model shown top level container apm components apm containers apm 
fact containers provide grouping mechanism structural elements ui presentation 
generic component represented apm 
specialised categories 
apm stereotype identifies presentation model classes 
category related components just provide visual information labels 
category related components receive system events propagated system operations buttons 
category related components receive system events normally model user options concerning navigation ui menus 
presentation model 
bodart vanderdonckt provide precise discussion categorisation components 
class diagram shown framework describe conceptual user interface 
object diagram class diagram provides conceptual description user interface 
conceptually described model shown 
links labelled compose 
links instances labelled integrate 
presentation behaviour model 
set operations defined class getdata 
stage design process operations provide basic understanding possible set operations implemented way boundary objects 
normally self delegation message draws form output device 
automatically performed boundary objects created 
getdata collects information provided user interaction doing required transformation information provided suitable parameters system operations 
messages model low level system operations interaction system user boundary objects 
generated due system events raised aggregated components boundary objects 
operation informs boundary objects system user submitting information system indicates system user wants abort interaction form submitting information 
presentation model returning sequence diagram library system creates boundary object class executes method 
method draws form user 
interacting ui user sends message object 
message event associated ok button shown specified presentation modelling 
object performs getdata operation picks data provided user 
collecting data object sends system operation message control object passing login name password parameters 
object prepares query submitted database management system 
objects class person provided name database database instantiates person 
control object sends message entity person object checking provided password 
password correct object creates object destroys 
sequence diagram restricted scenario user successfully logs system 
unsuccessful attempts log system scenario modelled described section 
activities section presentation models weakly connected flow objects activity diagrams 
activity diagrams explain data flow ui underlying application 
believe defined relationship activities instances facilitate design tasks presentation 
instance activities involve user interactions supported boundary objects 
difficult identify boundary objects activity identify activities boundary objects 
concrete presentation modelling presentation models describe components compose boundary class 
don provide description layout 
describe events user interface components relate operations control classes 
concrete presentation models required ui design process 
concrete presentation structure layout concrete presentation point view presentation model design pattern specification ui presentation model 
pattern called presentation framework 
fact design pattern approach gamma incorporated uml provides way describe different environments accommodated diagrams elements presentation model sequence diagram 
concrete presentation models environment dependent described terms environment classes components 
environment terminology classes object oriented programming language components 
going java show ui classes may related environment classes 
cpm stereotype identify environment classes 
shows concrete presentation model presentation framework java awt components 
presentation framework represented collaboration symbol uml different roles 
presentation framework pattern provides clear description presentation classes replaced concrete presentation classes respecting relationships presentation model 
fact shows cpm frame bound apm cpm container bound apm cpm label bound apm cpm bound apm cpm button bound apm 
concrete presentation models 
presentation framework pattern extended allow components bound 
extension provide declarative notation modelling mapping concrete components 
concrete presentation model provides required model case study 
additionally concrete presentation model provides description presentation layout specified 
instance class acting container instance aggregated 
categories layout object added concrete presentation model adding subclasses 
modelling ui presentation layout entirely explained 
concrete presentation model relies semantics environment 
case concrete presentation model java provides algorithms embedded methods templates model layouts presentation model ui 
concrete presentation model presentation framework cause large parts design environment dependent providing model flexible established relationship apm classes component classes 
instance components model java awt components 
swing components replace awt components naturally breaking presentation model 
presents concrete presentation model 
model object diagram links compose integrate links introduced section organise link relates instances frame playing role respective instances 
link mandatory instance frame 
shows panels containers model non top level containers 
possible subclasses bound classes considered part concrete presentation model 
concrete presentation model 
concrete presentation behaviour know model structure concrete presentation model need model presentation behaviour 
recalling number components behaviour associated 
example ok object class button event associated triggered user presses button 
hand object class label event associated needs handled application 
problem concerning presentation behaviour modelling identify uml diagrams possible events associated boundary objects 
application model boundary object instance frame operations events associated 
inspecting application model seen message described sequence diagram 
modelled 
fact message sent actor boundary object represents event associated ui component 
possible way model presentation behaviour producing interaction diagram ui event 
case modelled scenario successful logging user system 
need model scenario cancel button pressed 
shows sequence diagram case user presses button cancel 
cancel button pressing event represented button pressed message sent user graphical component cancel button 
fact button pressed message concrete presentation model event specifies kind event component button trigger message 
message sent object interrupting interaction user library system 
second sequence diagram case 
modelling interaction diagram ui event strategy single case scenario user interact boundary objects single boundary object tens hundreds events associated 
strategy handle combinations events minimum number interaction diagrams describe possible events 
problem bad 
components encapsulate part application behaviour 
complex components may reduce number events boundary object needs handle 
event modelling described booch events things happen 
things happen application keys buttons pressed mouse moved messages sent network calling things happen events 
object oriented user interface inputs outputs streams events 
shows general event model user actions synchronisation events sent object oriented user interface input events 
application user interface reacts input events generating output events visual feedback 
visual feedback normal feedback abnormal feedback 
abnormal visual feedback error messages associated difficulties encountered enactment user task 
user actions synchronisation events object oriented user interface event model 
normal feedback abnormal feedback user actions system events normal visual feedback events discussed 
instance users interact boundary objects control objects send receive messages boundary objects entity objects entity objects send receive messages control objects 
aim section discuss strategy modelling user interface features related exceptions special kind event created unexpected happened system 
significant amount functionality interactive applications may involve catering unexpected 
synchronisation events generated inside application guarantee data displayed user interfaces synchronised data application 
abnormal visual feedback happen synchronisation events synchronisation events generated system actions 
modelled independently 
sections discuss special events turn 
modelling exception handling exceptions defined meyer run time events may cause routine call fail 
routine call fails terminates execution state satisfying routine contract 
definitions complex require definitions routine contract definition complex 
identifying fail exception obvious tasks 
despite formal definition exceptions akin object oriented programming languages java :10.1.1.26.9545
terms user interfaces important aspect exceptions entirely solved exception handlers leading application provide visual feedback users going wrong going expected 
fact activated exception handlers try solve problems identified exceptions notifying users 
unfortunately exception handlers solve kind problem 
user notified unsolved exceptions involved choosing solution problem 
problem model aspects user interface related exception handling 
structural aspects ui exception handlers application model situations exceptions exception handlers 
example designer choose display error message form due exception raised execution database query 
uml notation exceptions modelled stereotyped send dependency class operation exception handler class 
shows send dependency links operation control class exception database fail class 
booch proposes hierarchy exception handlers identified exception stereotype 
usually non caught exceptions sent higher level exception handlers hierarchy caught exception handler reach top level handler hierarchy 
exception handled exception handled exception exception 
exceptions generated class classes generally methods routines contracts broken 
despite fact exception handlers act control classes modelled exactly control classes 
catch exceptions events classes category 
case exception classes introduced 
relationship ui exception handler 
operations classes called method class methods exception classes 
roles exception classes act control classes boundary classes exceptions happen 
situations exception classes control boundary class 
instance exception handler requires decision quit retry user original boundary object components deal interaction new boundary object created provide communication exception handlers users 
terms user interface important know boundary classes related hierarchy exceptions 
objects exception classes act objects control classes 
boundary classes aggregated exception classes 
exception acts control class handling boundary class 
handles stereotype identify relationship boundary classes controllers 
behavioural aspects ui exception handlers exceptions affect task model user interface modify flow control activity activity user interaction 
instance activity perform search raise database exception query performed 
select search option specify specify specify book details search domain search precision perform search view results select option non solved handle retry quit exceptions task model 
modelling possible modifications flow control task model straightforward task uml activity diagrams provide branching notation 
outgoing transitions re routed different activities depending boolean guard expressions 
shows activity diagram extended model exception handling 
branch activity perform search rendered diamond re routes flow control exceptions happen execution perform search 
guard non solved re routes flow control activity called handle solved handler 
flow control follows usual route identified keyword 
synchronisation event modelling calling synchronous uis uis displayed data frequently updated boundary objects visible 
asynchronous uis 
user interfaces especially graphical uis usually implemented asynchronous messages 
additional problem concerning synchronous uis model asynchronous messages 
general idea solving problem refresh boundary objects updated data frequently required 
generation events produce ui updating possible approach modelling synchronous ui 
case generated event called synchronisation event 
natural candidates synchronisation event generation entity objects location updated data 
synchronisation events generated boundary control objects need query entity objects get updated data generated synchronisation event 
considering case synchronisation events generated entity objects 
possible approach modelling synchronous events generated entity objects class diagram shown 
boundary control signals entity send update signal status model synchronous 
uml features previously discussed model synchronous uis classes rendered heavy lines classes rendered signal compartment time constraint dependency relationship signal stereotype 
need explain features explaining model 
heavy lines mean instances classes active objects 
fact instances active behaviour receive events generated instances 
constraint update send dependency means instances generate event time updated 
constraint means instances active mechanism identifying state updates 
signal stereotype means instances classes signalling system event type happening 
meaning event context objects class pushing updated status stock items classes listening kind event 
signals compartment identifies instances class listeners events 
means instances listeners notified time event generated 
returning class diagram notice time update happens instances generate synchronisation event current status stock item 
events listened instances sends messages instances boundary class updating displayed data 
attribute inside signal works identification mechanism preventing objects displaying status different stock items 
modelling approach especially suitable systems synchronous uis essential 
fact complexity pushing mechanism inside entity objects 
instance complex entity objects operations change state 
approach state monitored updates necessary identify state modification objects inside methods 
complexity pushing mechanism entity objects displayed boundary objects 
event sent object signature 
single synchronisation event notify listeners 
putting packaging application shows package diagram provides overview system 
package diagram shows dependencies components system 
package diagram library system 
classes class instances grouped packages follows 
user interface package composed boundary classes objects 
presentation model package composed apm classes shown 
control package composed control classes 
classes sequence diagrams 
domain model package composed entity classes 
class diagram classes forms domain model 
environment package composed classes build user interface 
environment object oriented programming language java smalltalk components activex java beans composite set components object oriented programming languages :10.1.1.26.9545
environment concerns mainly visual part user interface responsible important user interface behaviours especially considering complex components 
concrete presentation model package composed classes environment package bound apm classes presentation framework pattern 
discussed user interface modelling library system case study 
application system modelled unified modeling language proved useful modelling user interfaces 
fact uml rich set constructors complete model architectural aspects form user interfaces 
ui modelling may straightforward process expected desired 
modelling problems identified case study uml describe clearly relationship cases activities see section 
cases provide aspects user requirements goals pre conditions postconditions may help design activity diagrams 
uml notation describe presentations see section 
fact believe uml needs notation order support design ui presentations 
uml provide relationship classes providing presentation activities 
fact difficult identify ui related activity involves user interaction described section 
additionally case study provides illustrative example uml constructors terms diagrams modelling user interface 
summary uml diagrams table constructors diagrams 
user interface element uml resource domain model class diagram task model activity diagram presentation model concrete class diagram design patterns interaction sequence diagram object diagram event ui related exception handler class diagram activity diagram event ui synchronisation class diagram table summary uml diagrams model ui elements 
statecharts constructors activity diagrams 
considering design widgets 
reason interested inter object transitions activity diagrams intra object transitions statecharts modelling widgets 
lessons learned modelling library system design user interface complex process requires complete comprehension elements compose user interface 
uis general elements clearly required design 
elements user interface dependencies shown 
design process consider ui modelling integral 
room discussion model user interfaces uml 
ways representing user interfaces uml 
study presents approach 

author sponsored nacional de cient cnpq brazil 
bodart vanderdonckt 
widget standardisation interaction objects 
advances applied ergonomics pages istanbul west lafayette may 
usa publishing 
booch rumbaugh jacobson 
unified modeling language user guide 
addison wesley reading ma 
cattell barry bartels eastman jordan springer wade 
object database standard odmg 
morgan kaufmann san francisco ca 
collins 
designing object oriented user interfaces 
benjamin cummings redwood city ca 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley reading ma 
gosling joy steele 
java language specification 
addison wesley reading ma 
green 
survey dialogues models 
acm transaction graphics july 
griffiths barclay paton gray kennedy cooper goble west smyth 
teallach model user interface development environment object databases 
proceedings pages edinburgh uk september 
ieee press 
griffiths forrester paton kennedy barclay cooper goble gray 
exploiting model techniques user interfaces database 
proceedings pages italy may 
object management group 
omg unified modeling language specification june 
version 
harel 
executable object modeling statecharts 
ieee computer 
jacobson jonsson 
object oriented software engineering case driven approach 
addison wesley reading ma 
johnson 
human computer interaction psychology task analysis software engineering 
mcgraw hill uk 
ainsworth 
guide task analysis 
taylor francis london uk 
kovacevic 
uml user interface modeling 
proceedings uml international workshop pages france june 

meyer 
object oriented software construction 
prentice hall upper saddle river nj second edition 
myers rosson 
survey user interface programming 
proceedings sigchi pages 
stroustrup :10.1.1.26.9545
programming language 
addison wesley reading ma third edition 
szekely 
retrospective challenges model bases interface development 
computer aided design user interfaces pages xxi namur belgium 
namur university press 
