adaptive query processing survey norman paton alvaro department computer science university manchester oxford road manchester pl uk norm alvaro cs man ac uk 
wide area database systems may running unpredictable volatile environments computational grids di cult produce cient database query plans information available solely compile time 
solution problem exploit information available query runtime adapt query plan changing conditions execution 
presents survey adaptive query processing techniques examining opportunities er modify plan dynamically classifying categories problem focus objectives nature feedback collect environment frequency adapt implementation environment component responsible adaptation decisions 
distributed environment statistical information available data sources may minimal availability load physical resources prone changes 
consequently traditional query optimisation lead poor performance especially long running query evaluations query optimiser may compile time necessary statistics selectivity estimates knowledge runtime bindings query knowledge available system resources required produce optimal query plan qp 
addition traditional predict availability resources 
adaptive dynamic query processing addresses adapting qp changing environmental conditions runtime 
current research adaptive query processing follows main directions 
approach responds changes evaluation environment modifying execution plan runtime changing operators order evaluated 
approach involves development operators deal flexibly unpredictable conditions adapt behaviour collecting consideration information available query runtime query evaluation proceeding changes wider execution environment 
query processing system defined adaptive receives information environment determines behaviour information iterative manner feedback loop environment behaviour query processing system 
survey assume narrower definition sense restrict attention cases feedback loop produces ects execution query 
ects feedback loop deferred subsequent queries running benefit adaptive technique employed 
appealing novel data management tasks systems processing potentially long running queries multiple semi autonomous sources wide area networks unpredictable data transfer rates 
broadly speaking need adaptive query processing emerging query engines scaled federated cope highly unpredictable volatile environments 
databases integrated grid need greater 
remainder structured follows 
section describes classification criteria potential attributes 
sections existing adaptive operators algorithms respectively followed discussion general observations section 
section concludes 
related presents relevant survey 
mentioned examines systems may produce di erent query plans time response changes environment survey focuses query processing techniques adapt changing conditions execution time 
uses limited set classification criteria 
extends set proposing dimensions systems may di er 
previous surveys query optimisation include techniques dynamic flavour sense qp produce compile time completely fixed techniques covered definition adaptivity earlier :10.1.1.24.4154
scope survey query evaluator database management system dbms comprises main sub components query optimiser qo execution engine 
query optimiser generates input execution engine 
query submitted optimiser chooses logically equivalent transformations query form algebraic expressions 
logical query plans represented logical operator trees 
interesting characteristics logical plans regard query optimisation location project select operators operator order tree shape 
physical operator plan derived logical selection algorithms implement operators logical plan 
order produce physical plan decisions indices employ pipelining blocking operators taken 
general logical plan corresponds physical plans 
cost models heuristics predict cheapest plan execution 
parallel distributed dbmss partitioning scheduling issues arise optimisation 
query plan divided di erent sets operators called partitions order harness greatest possible extent benefits parallelism 
query optimiser responsible deciding number location kind partitions scheduled 
existing techniques di er dimensions impacts di erent kinds qp share common goals focus applicable di erent environments 
may collect di erent feedback adapt di erent frequency 
dimensions discussed sections provide basis survey summarised table 
modifications query plan modifications query plan may occur levels logical physical 
modifications logical level ll field table may fall categories reformulation remainder query plan denoted table rem techniques produce totally di erent logical subplan remainder query introducing new logical operators changing operator order altering tree shape 
operator reordering denoted table op techniques change order pre defined logical operators 
categories rem op mutually disjoint extent ects techniques category superset second 
ects denoted table methods modify query runtime modify logical plan 
survey aspects modifications query plan physical level may brought techniques considered ects physical query plan re partitioning re scheduling 
impact dynamic techniques physical query plan pp field table kinds usage adaptive operators order drive adaptivity 
cases extended variants sort sort hash hash pipelining joins pj parallel operators parl order enhance query evaluator capability adapt dynamically certain changes environment 
example special physical operators adapt changes memory availability changes happen operator execution 
operator replacement takes place particular physical operator replaced logically equivalent runtime order produce optimised qp 
example hash join may replaced index join index joining attribute available runtime 
restrictions choices relevant category marked relevant field table 
ects technique ect physical plan 
denoted 
techniques applied parallel distributed environments deal query re partitioning par rescheduling partitions sch 
example ects partitioning allows partitions joined split runtime 
designed way explicitly modify partitioning qp running parallel distributed environment relevant value table 
techniques invoke query optimiser query execution way may modify partitioning provided applied parallel distributed setting denoted table 
scheduling query plan modified operation execution moved node number execution nodes changes execution relative input rates nodes adjusted order achieve optimal performance 
wide area systems desirable capability replace source fails postpone decisions node execute operations runtime 
amount data allocated participating node controlled order achieve load balance 
cases scheduling ected 
semantics relevant field table partitioning characteristics adaptive query processing techniques methods vary significantly attempt adapt 
main di erent areas focus shown focus field fluctuations memory mem fl 
systems category try adapt memory shortages availability excess memory 
memory shortages happen due competition higher priority transactions example 
case running query plans may forced release resources hold 
hand executing transactions may additional resources available queries complete free bu ers 
user preferences user pr 
adapting user preferences includes cases users interested obtaining partial results query quickly 
order meet needs system produces results incrementally available user tradeo time successive updates running queries amount partial actual results di er update 
user classify elements output terms importance case query evaluator adapts behaviour order produce important results earlier 
data arrival rates dar 
techniques adapt data arrival rates apply parallel distributed systems response times remote data sources predictable 
actual statistics ac stats data sources available initially 
cases possible compile time gather accurate statistics data sources 
solution problem collect statistical information runtime ensuring valid current circumstances adapt query execution 
techniques adopt policy may change query plan actual statistics available 
fluctuations performance fl 
problems performance fluctuation arise parallel systems 
systems performance degrade single node experiences poor data layout disks high memory cpu load competing data streams 
changes environment combine elements categories 
techniques comprehensive adapt kinds changes environment computer resources memory processor availability data characteristics operator costs selectivities data arrival rates 
aim adaptive techniques may di er 
specifically may aim minimising total response time trt single evaluation 
important note techniques specific operators order achieve adaptivity 
adaptive operators perform better static ones changes environment 
parameters query known compile time change execution static qp may result better response times 
minimising initial response time irt 
systems interested minimising time useful information returned user preferences 
systems optimised produce important results early stages execution 
maximising throughput thr system 
techniques aim minimising total response time evaluation set independent operations 
apparently interplay techniques categories 
operation evaluated share exactly objective 
possible ways techniques described survey interfere 
characteristic techniques nature feedback fn collect environment order examine scope adaptation qp 
di erent kinds feedback include memory availability mem av potential input user user priority ratings di erent parts result rate updates partial results input availability av relevant operators may inputs blocked need check delayed inputs available workload data rates dr rates tuples produced statistical information stats covered categories size relation approximate number frequency di erent values attribute availability indices layout data disk lists replicated databases frequency feedback collection ffc possible values inter operator inter intra operator intra frequency 
techniques category collect may act feedback execution di erent physical operators qp 
collection triggered certain physical operators evaluated special events arrival partial results local data sources multidatabase environments 
techniques adapting intra operator frequency feedback collected evaluation physical operators 
check points added operator execution purpose 
general feedback collected block tuples processed 
limit block consists single tuple resulting potentially di erent plan tuple 
techniques di er designed uniprocessor parallel distributed environments shown env field table 
mean technique initially developed single processor platform applied parallel distributed setting indicate developers may taken consideration specific problems arise settings 
example qp optimal distributed environment statistical information network cost replicated data sources available nodes required commonly available statistics underpin models uniprocessor systems 
statistics typically include selectivities histograms indices 
main di erence distributed parallel dbmss constructed collection independent semi autonomous processing sites connected network spread large geographic area tightly coupled systems controlling multiple processors location usually machine room :10.1.1.24.4154
responsibility adaptivity decisions ad may assigned di erently 
decisions taken physical operators physical operators implemented way adapt behaviour runtime invoked dbms component optimiser locally query optimiser dbms component takes action runtime ensure remainder query plan evaluated optimal manner globally applies parallel distributed systems global view state participating nodes may required order adapt 
criterion survey technique realised physical operator concrete algorithm system 
case technique represented physical query plan single physical operator 
technique classified algorithm implies extension specific manipulation operators qp order achieve adaptivity 
system comprises autonomous techniques integrated computational entity 
adaptive query operators section describes query operators capability adjust behaviour changing conditions information available runtime 
adaptive operators continuously collect evaluate feedback environment 
act autonomously order adapt changes limited ects executing qp perform radical changes 
additionally basically developed uni processor environments consider partitioning scheduling issues 
memory adaptive sorting hash join introduces techniques enable external sorting adapt fluctuations memory availability 
external sorting requires bu ers run ciently memory management significantly ects performance 
adaptation strategy introduced dynamic splitting adjusts bu er usage external sorts reduce performance penalty resulting memory shortages take advantage excess memory 
achieves splitting merge step external sorts number sub steps case memory shortage combining sub steps larger steps su cient bu ers available 
alternative strategies paging suspension non adaptive yield poor results 
adopting memory adaptive physical operators sort operations avoids potential utilisation memory resources memory reserved prior execution estimates fact memory required thrashing memory reserved prior execution fact memory required reduces time needed query evaluation 
technique complementary existing optimised strategies split phase external sorts 
way new memory adaptive variants merge sort operators developed 
join execution amount memory changes lifetime family memory adaptive hash joins called partially preemptible hash joins technique ll pp par sch focus ffc real 
memory adaptive sorting sort mem fl trt mem av intra memory adaptive merge sort sort mem fl thr mem av intra hash mem fl trt mem av intra ripple pj user pr irt user intra xjoin pj dar user pr trt irt av intra dynamic reordering sort user pr irt user intra mid query re optimisation rem ac stats inter eddies op trt stats intra rivers parl fl trt dr intra mind op ac stats inter query scrambling rem dar trt av inter pipeline scheduler op pj user pr irt dr user intra rem pj dar mem fl trt dr mem av intra conquest rem trt stats inter tukwila rem pj trt irt stats inter telegraph op parl trt stats dr intra op ac stats inter table :10.1.1.34.8546
properties existing adaptive query processing techniques proposed 
initially source relations split held memory 
memory insu cient partition held memory flushes hash table disk deallocates bu er pages 
cient variant utilising additional memory partitions inner relation fetched memory outer relation scanned partitioned 
method reduces consequently total response time query 
adapt rapid memory fluctuations outperforms non memory adaptive hybrid hash joins employ strategies paging suspension 
operators producing partial results quickly applications online aggregation useful user important results produced earlier 
pipelining algorithms implementation join sort operations 
kind operators block ones produce output received processed inputs 
ripple joins family physical pipelining join operators maximise flow statistical information processing 
generalise block nested loops sense roles inner outer relation continually interchanged processing hash joins 
ripple joins adapt behaviour processing statistical properties data user preferences accuracy partial result time updates running aggregate 
user preferences adaptively set rate retrieve tuples input ripple join 
ratio rates reevaluated block tuples processed 
xjoin variant ripple joins 
operator low memory requirements due partitioning inputs operators active parallel 
apart producing initial results quickly xjoin optimised hide intermittent delays data arrival slow bursty remote sources reactively scheduling background processing 
xjoin executes stages initially builds hash tables source 
stage tuple may reside disk memory inserted hash table input arrival immediately probe hash table input 
result tuple produced soon match 
second stage activated stage blocks producing tuples delays 
tuples disk produce part result expected amount tuples generated certain activation threshold 
stage clean stage stages may partially produce final result 
order prevent creation duplicates special lists storing specific time stamps 
obtain process important data earlier sort re ordering operator proposed 
pipelining dynamic user controllable reorder operator takes unordered set data produces nearly sorted result user preferences change runtime attempt ensure interesting items processed best ort operator 
mechanism tries allocate interesting items possible main memory bu ers 
consumers request item decides item process uses pull model 
operator uses phase prefetch spool technique phase tuples scanned uninteresting data auxiliary space input fully consumed 
second phase data auxiliary space read 
algorithms systems adaptive query processing extensions adaptive operators memory adaptive sorting complementary discussed section 
method focuses improving throughput allowing sorts run concurrently focuses improving query response time 
depends sort size distribution general limiting number sorts running concurrently improve throughput response time 
method proposed enables sorts adapt actual input size changes available memory space 
purpose memory adjustment possible stages sort operation regarding memory usage identified prioritised 
operations may placed wait queue insu cient memory system 
priority ratings assigned wait queues 
memory available sorts queue highest priority processed 
detailed memory adjustment policy responsible deciding sort wait proceed current workspace 
decided wait decisions queue enter stay current queue move 
impact physical query plan adapts intra operator frequency 
method quicker delivery initial results pipelined query plans extends ripple joins xjoin capability re order join operators qp 
scheduling operators dynamic pipeline scheduler splits independent units execution called streams schedules streams 
reduces initial response time query may result increases total execution time 
dynamic pipeline scheduler consists algorithms 
rate pipeline scheduling algorithm result tuples importance 
algorithm maximises result output rate scheduling flow data pipelined operators 
characteristics operators cost productivity dynamically changed due blocked inputs finished operators 
productivity di ers selectivity selectivity describes tuples eventually produced productivity describes tuples produced point execution 
importance tuple regulation algorithm result tuples di erent degrees importance user algorithm allocates resources important tuples 
importance rated algorithm dynamic collection query statistics necessary 
algorithm needs combined technique enables collection necessary statistics runtime 
scheduling policy modified fly light changes system behaviour 
ideally output rates recomputed time tuple processed stream fact scheduler invoked order avoid large overheads 
algorithms adapt data arrival rates light data arrival delays common approach minimise idle time performing useful operations attenuating ect delays 
query scrambling generic architecture discussed representative examples area 
query scrambling focuses problems incurred delays receiving tuples remote data source 
system performs useful hope problem eventually resolved requested data arrive near expected rate 
phase changes execution order avoid idling beneficial specific procedure second introduces new operations qp risky 
query scrambling trade potential benefit modifying qp fly risk increasing total response time reducing 
deal problem unpredictable data arrival rates additionally problem memory limitation context data integration systems 
general hierarchical dynamic query processing architecture proposed 
planning execution phases interleaved order respond timely manner delays 
query plan adjusted data arrival rate memory consumption 
sub optimal query plan operator ordering modified plan re optimised introducing new operators altering tree shape 
general operators may incur large cpu idle times pushed tree 
scheduling operators soon possible increases possibility available schedule concurrently experience delays 
bushy trees preferred er best opportunities minimise size intermediate results 
case partial overhead remains low 
query response time reduced running concurrently query fragments selection ordering heuristics partial mentioned 
may increase total response time benefit indicator bmi benefit threshold 
bmi gives approximate indication profitability minimum acceptable value 
algorithms defer optimisation decisions runtime ensure optimality query evaluation algorithms may wait collected statistics derived generation intermediate results far 
kabra dewitt introduced algorithm detects sub optimality runtime fly collection query statistics improves performance resources memory modifying qp 
method aims combat problem constructing inaccurate initial statistical estimates data sources 
new operator called statistics collector operator 
re optimisation algorithm heuristics relies heavily intermediate data 
statistics collector insertion algorithm inserts statistics collector operators ensuring slow query specific fraction assigns potential inaccuracy level low medium high various estimates 
overhead taken consideration statistics ect remainder qp collected 
mind system uses similar approach address problem perform combination operations partial results global query returned local dbmss multidatabase system 
due fact useful statistics results di cult static optimiser estimate decisions execute operations data reside remote sources deferred arrival actual partial results 
decisions selectivities cost involved 
streaming data relational data model allowing stream manipulated sql queries 
query execution runtime components embedded data streams employed 
components called 
detection changes data stream behaviour accomplished statistical sampling algorithm runs periodically gathers statistical information selectivities operators equi depth histogram 
information system reorder select operators fly 
telegraph project telegraph project combines river eddies yield adaptive dataflow system :10.1.1.34.8546
unpredictable dataflows routed computing resources network resulting steady manageable stream useful information 
dataflow engine execution environment moves large amounts data number operators running arbitrary number machines 
engine database query processing system 
eddies reshape dataflow graphs tuple receive maximise performance rivers responsible load balance multiple nodes 
specifically eddies query processing mechanism continuously tuple reorders operators fly order adapt dynamically changes computing resources memory data characteristics operator costs operator selectivities rates tuples arrive inputs provided operators pipelined :10.1.1.34.8546
current focuses uniprocessor environments eddies exploited large federated databases 
order insert eddies query plan joins allow frequent cient 
joins frequent moments symmetry adaptive non existent synchronisation barriers minimal ordering constraints 
moment symmetry state orders inputs binary operator changed modifying state operator 
synchronisation barrier occurs input binary operator waits input produces specific tuple 
joins appropriate eddies include ripple joins pipelined hash join xjoin index joins ripple join family cient 
river dataflow programming environment substrate clusters computers provide maximum performance face performance heterogeneity 
intra operator parallelism data partitioned processed system nodes 
main innovations river distributed queues dq graduated declustering gd enable system provide data partitioning adapts changes production consumption nodes 
responsible naturally balancing load consumers running di erent rates 
gd full bandwidth balanced production ect available bandwidth utilised times producers data set complete near simultaneously 
gd transparent programmers resulting new ready physical operators need added operator interface manually 
adaptive query processing high performance systems engines integral part high performance data mining data integration systems conquest tukwila respectively 
conquest query processing system enables dynamic query optimisation parallel environment long running queries triggering approach response runtime changes 
changes relate system parameters new processors available may withdrawn data characteristics relevant query statistics bu er queue empty selectivity higher initially estimated 
changes re computation cost estimates necessary 
capabilities conquest modifying qp strong especially terms partition scheduling limited unary operators scans 
systems modify remainder qp techniques order capture restore intermediate state operators executions 
partial exception conquest system may require bu ered records reconfiguring operators 
tukwila project data integration system queries posed multiple autonomous heterogeneous sources 
tukwila attempts address challenges generating executing plans ciently little knowledge variable network conditions 
adaptivity system lies fact interleaves planning execution uses adaptive operators 
coordination achieved event condition action rules 
possible actions include operator reordering operator replacement re optimisation remainder qp 
tukwila system integrates adaptive techniques proposed 
re optimisation pipelined units execution 
boundaries units pipeline broken partial results 
main di erence points dynamically chosen optimiser system runs memory 
tukwila adaptive operators adjust behaviour data transfer rates memory requirements 
collector operator activated data source fails switch alternative data source 
discussion general results evaluation prototypes techniques attain goal decreasing response time query presence changes parameters consider delivering useful results early possible 
trade potential benefits adapting current conditions fly high frequency risk incurring large overheads 
techniques extensive capabilities terms modifications induce running plan expensive risky 
applying techniques certain steps need taken validation cost model ensure adaptation beneficial 
techniques applicable parallel distributed settings adaptivity decisions global level relying heavily intermediate results 
happens parallel distributed settings network costs resource availability need taken consideration adapting changes data transfer rates resources may detrimental ects 
hand complex adaptive strategies ect logical plan query generally intended single processor environments common satisfactorily accurate statistics obtained compile time 
surprisingly little attention paid changes pool available processors data sources great impact long running queries wide area systems 
result techniques proposed far parallel distributed dbmss alter partitioning scheduling policies dynamically runtime 
summary memory fluctuations main strategy dynamically adjust usage memory bu ers 
light data arrival delays common approach minimise idle time performing useful operations hide delays 
problem inaccurate cost statistical estimates addressed collecting actual statistics fly comparing estimates order decide opportunity query re optimisation 
techniques attempt adapt various changes wide area environment follow triggered approach 
action rules events raised operator execution block completed processing insu cient memory environmental changes new processor available 
online aggregation queries time provide user useful information quickly important time query completion adaptive pipelining operators need adopted 
non traditional operators required cases query needs adapt intra operator frequency 
survey existing adaptive query processing techniques classified compared 
opportunities ered techniques modify query plan fly identified 
addition adaptive systems classified problem focus objectives nature feedback collect environment frequency adapt 
areas interest include implementation environment component responsible adaptation decisions 
survey reveals inadequacy existing techniques adapt environments pool resources subject changes 
particular provides evidence need research computing infrastructures resource availability allocation costing definition decidable compile time 
consequently promising area development concrete cost models evaluate expected benefits improved query plan decision quality compensate cost collecting evaluating feedback environment execution time 
supported distributed information management programme engineering physical science research council gr 
pleased acknowledge support 

franklin tomasic 
dynamic query operator scheduling wide area remote access 
distributed parallel databases 

franklin tomasic urhan 
scrambling query plans cope unexpected delays 
proc 
fourth international conference parallel distributed information systems pages 
ieee computer society 

arpaci dusseau anderson culler hellerstein patterson yelick 
cluster river making fast case common 
proceedings sixth workshop input output parallel distributed systems pages atlanta ga 
acm press 

avnur hellerstein 
continuous query optimization 
technical report csd university california berkeley 

avnur hellerstein 
eddies continuously adaptive query processing 
proc 
acm sigmod pages 

fabret mohan valduriez 
dynamic query processing architecture data integration systems 
ieee data engineering bulletin 

fabret mohan valduriez 
dynamic query scheduling data integration systems 
proc 
icde pages 

foster kesselman 
grid blueprint new computing infrastructure 
morgan kaufmann publishers 

haas hellerstein 
ripple joins online aggregation 
proc 
acm sigmod pages 


overview parallel query optimization relational databases 
th international workshop database expert systems application dexa 
ieee computer society 

hellerstein franklin chandrasekaran deshpande hildrum madden raman shah 
adaptive query processing technology evolution 
ieee data engineering bulletin 

ioannidis 
query optimization 
acm computing surveys 

ives florescu friedman levy weld 
adaptive query execution system data integration 
proc 
acm sigmod pages 

ives levy weld florescu friedman 
adaptive query processing internet applications 
ieee data engineering bulletin 

kabra dewitt 
cient mid query re optimization sub optimal query execution plans 
proc 
acm sigmod pages 

ng wang muntz 
dynamic reconfiguration sub optimal parallel query execution plans 
technical report csd ucla 

ng wang muntz 
dynamic query re optimization 
proc 
th international conference statistical scientific database management pages 
ieee computer society 

dogac 
dynamic query optimization multidatabases 
data engineering bulletin 

pang carey livny 
memory adaptive external sorting 
vldb journal pages 

pang carey livny 
partially preemptible hash joins 
proc 
acm sigmod pages 

schwan 
managing large data flows dynamic embedded queries 
ieee international high performance distributed computing hpdc pages 

schwan 
optimizations enabled relational data model view querying data streams 
ieee international parallel distributed processing symposium ipdps 

raman raman hellerstein 
online dynamic reordering 
vldb journal pages 

urhan franklin 
xjoin reactively scheduled pipelined join operator 
ieee data engineering bulletin 

urhan franklin 
dynamic pipeline scheduling improving interactive query performance 
vldb journal pages 

urhan franklin laurent 
cost query scrambling initial delays 
proc 
acm sigmod pages 

zhang larson 
dynamic memory adjustment external mergesort 
vldb journal pages 
