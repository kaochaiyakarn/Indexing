dynamic region inference david pereira john aycock department computer science university calgary university drive calgary alberta canada cpsc ucalgary ca tr garbage collection scheme counting region inference standard counting algorithm handles cycles correctly 
algorithm fundamental operations region inference performed dynamically 
assistance required programmer compiler making algorithm particularly suited dynamically typed languages scripting languages 
provide detailed algorithm demonstrate implemented eciently 
counting garbage collection strategy provides immediate reclamation unreachable objects distributes garbage collection delays entire execution program 
attractive method garbage collection especially scripting languages interactive applications 
basic idea counting keep count number object object count zero referenced object reclaimed 
object count incremented created 
likewise object deleted object count decremented 
method fatal aw inability collect cycles objects 
shows creation unreachable cycle 
approach counting concept regions 
region subset set objects running program 
regions usually de ned explicitly programmer inferred automatically compiler 
importantly region treated single unit garbage collector creation isolated cycle 
objects depicted circles surrounding counts 
vital statistics count associated entire region object 
objects region usually deallocated en masse 
new region counting garbage collection method 
algorithm di ers region approaches infers regions run time designed primarily languages smalltalk python traditionally counting systems type systems amenable methods static region inference 
method handles cycles correctly 
related attempts remedy failure cyclic counting speci general 
friedman wise discovered technique speci functional languages 
bobrow created technique objects assigned groups programmer count kept entire group 
distinguishing internal pointers object group objects group external intra group cycles handled internal contribute region count 
group count drops zero entire group reclaimed 
method handle inter group cycles requires programmer intervention 
declare advance information concerning pointers cells structure 
page techniques general 
divided major categories weak pointer algorithms partial mark sweep algorithms static region inference 
weak pointer algorithms di erentiate cycle closing pointers non pointers 
famous weak pointer algorithm 
fatal error algorithm premature reclamation objects corrected 
corrected algorithm guaranteed terminate proved correct 
algorithm complicated time complexity exponential worst case 
christopher designed simple partial mark sweep algorithm mark sweep collector invoked reclaim cycles missed counting 
lins created hybrid counting mark sweep algorithm worst case algorithm martinez 
bacon designed variant lin algorithm ibm jalape java virtual machine 
improved lins contains ecient general counting algorithm 
contrast algorithm algorithms require varying amounts mark sweep collection performed part core functionality 
static region inference great success functional languages ml 
techniques applied non functional languages 
algorithm consider object set program comprised distinct types object 
aggregate objects contain objects 
lists tuples dictionaries scripting languages category 

non aggregate objects refer objects 
integer string objects non aggregate objects instance 

machine registers contain single aggregate non aggregate object referenced 
name implies map registers native code register virtual machine 
algorithm region collection aggregate objects 
furthermore maximal collection objects aggregate object reachable object region member region 
initially aggregate object trivially region 
larger regions built inter region created aggregate objects involved region regions belong merged 
aspect dynamic region inference call region merging 
important note method region merging creation result creation cycle intra region counted see section 
result non zero counts insulate member cycle collection classical counting algorithms produced 
opposite operation region splitting conceivable may deleted region degenerates unconnected components 
case region splitting performed break region new regions 
region merging region splitting form dynamic region inference algorithm 
requirements algorithm distinction machine registers aggregate non aggregate objects required objects distinguished 
statically typed language done compile time 
dynamically typed language objects annotated information distinction run time 
code shall assume dynamic case purposes exposition predicate distinction 
region information table rit store vital statistics region program rit entry corresponds region 
count eld rc kept region rit 
addition rit entry contains pointer members rst member region 
object requires set ancillary data elds algorithm 
singly linked list threaded members region eld aggregate object possible nd members region 
region member contains back link appropriate entry rit called region 
non aggregate objects belong region non aggregate object carries count 
note aggregate objects region value region elds 
invariant test aggregate objects members region 
update source destination represent creation object source object destination source destination necessarily distinct 
delete source destination represent deletion 
procedures mutators object graph change reachability objects root set set predetermined objects 
objects reached root set deemed garbage 
mutator operations section describe functionality mutators update delete implement 
rst give conceptual pseudocode version algorithms implementation details follow 
creation de nition update requires source register aggregate object destination aggregate non aggregate object 
important case source destination aggregate objects 
case check ascertain objects region 
di erent regions regions merged shown 
alternatives region containing source merged region containing destination vice versa 
implementation section shown eciency rc size members rc size members objects di erent regions 
creation results region merging 
solid arrows dashed arrows back links dotted arrows links list threaded objects region 
merging improved making choice properly 
shall call region members added parent region region child region 
merging process consists steps 
count child region added count parent region 
parent region child region di erent regions disjoint count parent region merging equal sum counts parent region child region prior merging 

region elds members child region changed eagerly point rit entry parent region 

list members child region appended list members parent region 

rit entry child region recycled longer required 
source register destination aggregate object count region containing destination incremented 
source register aggregate object destination non aggregate normal counting performed 
pseudocode creation region merging shown 
deletion delete de nition requires source register aggregate object destination aggregate non aggregate object 
pseudocode shown 
update source destination select source destination case aggregate aggregate source region destination region source region destination region case register aggregate increment destination region rc case register non aggregate case aggregate non aggregate increment destination rc rc rc member member region append members members pseudocode creation region merging 
function places rit entry free list table entries 
delete source destination select source destination case aggregate aggregate operations required 
case register aggregate decrement destination region rc destination region rc destination case register non aggregate case aggregate non aggregate decrement destination rc destination rc destination pseudocode deletion 
code function deallocates objects region places rit entry region free list 
function deallocates single non aggregate object 
rc size members rc size members region splitting 
region composed shaded objects count splitting memory occupied objects reclaimed 
practice entry rit 
important case source destination aggregate objects 
case source object destination objects belong region initial creation merged objects region 
internal pointer deleted operations required 
source register aggregate object destination non aggregate normal counting performed 
source register destination aggregate object count region containing destination decremented 
count region zero result operation entire region reclaimed 
region splitting deletion intra region may cause region degenerate unconnected components 
naturally components region reachable deallocate components 
objects components members region deallocated entire region reclaimed 
potentially delay reclamation program unreachable data 
region splitting illustrated alleviate 
region splitting incremental procedure single candidate region selected region information table split possible 
region splitting need done absolutely necessary triggered memory allocator 
example amount memory allocated program exceeds certain prede ned threshold region splitting performed reclaim memory occupied unreachable objects 
split region components computed 
region partitioned equivalence classes objects class reachable 
new region created component 
original region contained total count external members counts individual members known calculated 
calculate pointers heap register set forms root set objects region 
traversing register set count new region calculated 
approach shown notation reg denote register dereferencing 
implementation implementation builds conceptual algorithm ways 
rst modi cation optimizes merging regions 
regions required merged region eld member child region needs set point rit entry parent region 
requires region member list child region traversed 
desirable child region fewer objects 
implement eld size containing number members region kept rit entry 
second modi cation optimize check ascertain objects region 
conceptually update delete contain tests determine categories source destination objects 
aggregate objects test ascertain members region 
sequence tests folded 
key observation usage machine registers identi able code generator statically typed language virtual machine instructions dynamically typed language split code delete variants source register source register source aggregate object 
variant optimized 
aggregate source variant possibilities source destination objects aggregate aggregate aggregate non aggregate 
tests required 
dummy region eld added non aggregate object set point rc eld check eliminated objects region region elds value 
note cost improvement extra eld non aggregate object exchange space eciency layout data structures decrease amount code performs update delete operations 
region region region split create new region component component component calculate total count region register register aggregate register region increment register region rc free unreferenced regions region region rc region component newregion newregion members newregion rc object component object region newregion append object newregion members return newregion pseudocode region splitting 
partitions graph objects region components 
employs union nd algorithm known class algorithm 
empty list denoted 
region information table region information table array xed length records structure field name size description rc unsigned integer number external member objects region 
size unsigned integer number member objects region 
members machine pointer rst item region member list 
free list threaded rit facilitate rapid allocation deallocation entries 
noted size eld large represent number objects region error occur parent child chosen incorrectly 
purpose smaller eld saturating count 
object layout aggregate objects field name size description region machine pointer points containing region rit entry 
machine pointer points object region 
recall rc rst eld rit entry 
region eld aggregate object points directly rc set calculations required access commonly eld 
non aggregate objects field name size description region machine pointer points rc eld 
rc unsigned integer object count 
addition optimizing check ascertain objects region region eld non aggregate objects uses 
dummy region eld points rc eld non aggregates non aggregate objects easily distinguished aggregate objects region elds point rit 

region eld facilitates factoring count information non aggregate object auxiliary table 
counts single location memory objects counts change 

rst eld rit entry count eld region elds aggregate non aggregate objects point directly counts enabling count non aggregate object count entire region aggregate object accessed modi ed code 
example increment count object code increment region rc works regardless aggregate non aggregate object 
region splitting implementation split region components union nd algorithm union rank path compression 
requires extra elds node pointer parent integer rank 
region elds re store ancillary data 
members region value region eld eld contents need preserved splitting 
object eld di erent value 
address object region temporarily placed array splitting objects eld re 
counting garbage collection algorithm dynamic inference regions algorithms require assistance compiler programmer handles cycles correctly 
algorithm especially suited dynamically typed languages scripting languages employ counting garbage collection schemes 
david bacon dick attanasio han lee stephen smith 
java ee breaks nonintrusive multiprocessor garbage collector 
pldi 
daniel bobrow 
managing re entrant structures counts 
acm transactions programming languages systems july 
david 
cyclic counting combinator machines 
jean pierre jouannaud editor record conference functional programming computer architecture volume lecture notes computer science nancy france september 
springerverlag 
christopher 
count garbage collection 
software practice experience june 
thomas cormen charles leiserson ronald rivest 
algorithms 
mit press mcgraw hill 
daniel friedman david wise 
counting manage circular environments mutual recursion 
information processing letters january 
david gay alex aiken 
language support regions 
pldi 
rafael lins 
cyclic counting lazy mark scan 
information processing letters 
computing laboratory technical report university kent july 
rafael lins 
ecient algorithm cyclic counting 
information processing letters 
martinez rafael lins 
cyclic counting local mark scan 
information processing letters 
harold 
counter method 
communications acm september 
van eekelen plasmeijer 
cyclic counting algorithm proof 
technical report computing science department university nijmegen 
proceedings sigplan conference programming languages design implementation acm sigplan notices snowbird utah june 
acm press 
conference record rst annual acm symposium principles programming languages acm sigplan notices 
acm press january 
jon 
implementation analysis counting algorithms 
master thesis university college london 
mads tofte 
brief regions 
richard jones editor ismm proceedings international symposium memory management volume acm sigplan notices pages vancouver october 
acm press 
mads tofte lars birkedal 
region inference algorithm 
acm transactions programming languages systems july 
mads tofte jean pierre talpin 
region memory management 
information computation february 
earlier version 

