retargeting compiled simulators digital signal processors machine description language stefan andreas ho mann heinrich meyr integrated signal processing systems rwth aachen ho mann meyr ert rwth aachen de presents methodology retarget technique compiled simulation digital signal processors dsps modeling language lisa 
past principle compiled simulation means speeding simulators implemented speci dsp architectures 
new approach discusses methods integrating compiled simulation techniques retargetable simulation tools 
principle implementation discussed results ti tms dsp 
integrating complete systems consisting hardware software components single chip raises new challenges area veri cation 
target hardware typically available late design cycle complete system veri ed means simulation 
time simulation speed critical veri cation systems important issue simulator design 
principle compiled simulation take advantage priori knowledge move frequent operations simulation run time compile time goal providing highest possible simulation speed 
compiled simulation programmable dsp architectures introduced speed instruction set simulation programmable dsp architectures extended cycle accurate models pipelined processors 
far approaches addressing particular requirements compiled simulation dsps targeted speci processor architecture handwritten simulation compiler 
task building custom simulator new architectures extremely error prone tedious 
lengthy process matching simulator model processor architecture 
orts reduced signi cantly retargetable simulator generated machine descriptions 
explores general principles compiled simulation applied approach 
furthermore implementation machine description language lisa :10.1.1.49.7123:10.1.1.112.5788
description cient simulation tools generated 
related hardware description languages hdls vhdl verilog widely model simulate processors mainly goal developing hardware 
models instruction level processor simulation number disadvantages 
cover hardware implementation details needed performance evaluation software veri cation 
description detailed hardware structures signi cant impact simulation speed 
machine description language nml developed tu berlin adopted projects 
retargetable assemblers disassemblers generated dsp processors possible produce cycle accurate simulators pipelined processor architectures 
main reason simple underlying instruction sequencer support pipeline operations 
processors complex execution schemes texas instruments tms described instruction set level numerous combinations parallel sequential instructions fetch packet 
restrictions apply approach isdl isvery similar nml 
cycle accurate models pipelined processor architectures require pipeline accurate behavioral description pure semantics 
approach language expression incorporates particular mechanisms description memory hierarchies 
results published indicate applicability cycle accurate simulation purposes 
language derived earlier lisa extended support multiple pipelines 
results provided realized simulators language 
summarize review approaches support cycle accurate simulation fast processor simulators compiled techniques 
interest supporting technique issue realizing cycle accurate processor models motivated language lisa approach :10.1.1.49.7123:10.1.1.112.5788
compiled simulation objective compiled simulation reduce simulation time 
general cient run time reduction achieved accelerating frequent operations 
technique accelerating operations priori knowledge translation target program code simulation code host 
principle compiled simulation dsps corresponds ideas successfully implemented simulation synchronous vlsi circuits 
compiled simulators dsps realized speci processor architectures 
re orts implementation compiled techniques extremely di cult techniques implemented called simulation compiler highly architecture dependent 
step instruction decoding determines instructions operands modes respective instruction word 
pipeline structures modern dsps simulation operations consumes signi cant simulation time 
take example texas instruments tms dsp instructions execute pipeline stage cycle fetching dispatching decoding require pipeline stages cycles 
step operation sequencing determines sequence operations executed instruction application program 
step implemented compiled simulator generating dimensional table see gure 
dimension table represents instructions dsp program contains pointers functions contribute transition function drives simulator control step 
simulation table 
operation instantiation simulation loop unfolding unfolds simulation loop drives simulation state instantiates respective simulation code instruction application program 
implemented compiled simulator generating individual behavioral code instruction dsp program 
extremes fully compiled fully interpretive simulation partial implementation compiled principle possible implementing steps 
higher levels compiled simulation achieved investing substantially design ort exploiting highly architecture speci properties 
levels compiled simulation particular interest levels call static scheduling dynamic scheduling simulation 
case dynamic scheduling task selecting operations overlapping instructions pipeline scheduled run time simulation 
static scheduling schedules operations compile time 
model requirements simulation compiler general requirements retargetable simulators generated machine descriptions compiled simulation requires speci information target processor architecture perform steps simulation compiler 
decoding decoding step instruction type operands execution modes determined 
operands may come di erent sources registers le immediate indirect di erent types signed unsigned xed point oating point word lengths 
execution modes condition codes may specify operation 
decoding performed extracting information respective instruction word 
dsps typically feature extensive non orthogonal instruction set coding decoding complex rises considerable issues formal capture decoding mechanisms machine description language 
approaches nml avoid problem capturing non orthogonal coding behavioral model 
representation hardly allows distinguish simulation run time operations compile time operations operations performed simulation compilation 
lisa distinction types operations means particular switch case statements discussed 
operation sequencing order perform operation sequencing precedence operations composing instruction inter instruction precedence determined 
complexity task rapidly grows depth mechanisms instruction pipeline 
processor model provide detailed information pipeline structure mechanisms order enable step 
lisa language detailed pipeline model enables description pipeline structures intra instruction precedence operations 
shows intra instruction precedence relations operations simple stage pipeline stages id ex wb 
intra instruction precedence 
operation instantiation inter instruction precedence operations derived overlapping instructions pipeline case control hazards occur 
depicts intra inter instruction precedence relations operations 
simulation compiler compose operations overlapping instructions form transition function drives simulation state 
operations shown vertical columns gure 
due control hazards jumps branches exceptions program execution may follow di erent paths causes multiple possible combinations operations pipeline 
reason simulation compiler generate code possible combinations 
run time simulation appropriate path selected 
precedence instructions pipeline 
lisa language lisa descriptions composed resource declarations hand operations hand 
declared resources build storage objects hardware architecture registers memories pipelines capture state system model limited availability resources operation access 
operations basic objects lisa 
represent designer view behavior structure instruction set programmable architecture 
operation de nitions collect description different properties sections operation behavior behavior section instruction set information timing 
operations formed header line operation body 
header line consists keyword operation identifying name operation name operation sections 
details lisa language please refer 
formal description nonorthogonal coding fields lisa non orthogonal coding expressed additional conditional statements structure processor model 
purpose new conditional statements express coding dependencies di erent operations 
syntax programming languages form switch case statements 
discuss example 
displays coding simpli ed instruction word 
instructions add sub mul execution controlled coding eld mode selects non orthogonal coding elds 
short long operands speci arithmetic 
instructions ld sto mode eld di erent purpose 
possible lisa code add instruction shown example 
operation add declare mode mode short behavior dest lo src lo src lo behavior dest lo src lo src lo carry dest lo dest lo dest hi src hi src hi carry example formal expression non orthogonality 
statement encloses alternative sections respective behavioral description operation add 
formal representation lets simulation compiler distinguish cases generate speci simulation code 
implementation results order evaluate applicability ciency compiled simulation retargetable environment implemented rst steps section compiletime decoding operation sequencing experimental tool suite 
shown lisa compiler takes processor model translates data base 
information data base accessible simulation compiler generator produces source code processor speci 
simulation compiler translates application target processor simulation table part nal simulator 
chosen texas instruments tms dsp processor experimental analysis obtainable simulation speed 
tms described lisa cycle model 
retargetable compiled simulation tools 
architecture processor pipelines consisting eleven pipeline stages complex lisa description including memory interface realized designer weeks 
complete translation model lisa compiler simulation compiler generator takes seconds sparc ultra workstation 
comparison custom compiled simulator complex tms stage pipeline designer spent months 
simulator benchmarks order evaluate simulation speed generated compiled simulator ti sim version part ti software development tools 
benchmarks typical dsp algorithms fir lter adpcm codec gsm speech encoder 
measurements sparc ultra 
compilation time object code compiled simulation measured applications 
required time respective application size shown gure 
compilation speed calculated relating number compiled instructions compilation time 
simulation compilation speed 
applications measured compilation speed ranges instructions gsm coder nearly requires internal memory space dsp 
simulation speed quanti ed running application respective simulator relating simulation time processed number cycles 
simulator ti achieved cycles generated simulator runs speeds cycles accuracy level 
corresponds factors faster simulation shown gure 
speed lisa simulator vs ti sim 
new approach applying compiled simulation retargetable processor simulation environments 
compiled technique technology enables fast simulation programmable dsp architectures 
compiled simulation implemented speci processor architectures 
retargetable compiled simulation machine description language puts speci requirements instruction set model 
complete instruction coding described formally enable high degree compiled simulation 
processor description language lisa able provide models 
case study compiled simulation techniques implemented model texas instruments tms dsp 
generated compiled simulator lisa description runs times higher simulation speed commercially available instruction set simulator ti loss accuracy 
focus modeling real life processor architectures retargetable compiled simulators provide third step compilation operation instantiation 
issue integration software simulators hw sw simulation environments 
furthermore goal ongoing language design address retargetable compiler back ends 
generation software tools processor descriptions hardware software codesign proc 
design automation conference dac jun 
hardware software simulation proc 
acm ieee design automation conference dac 
tjiang meyr compiled simulation programmable dsp architectures proc 
ieee workshop vlsi signal processing sakai osaka pp 
oct 
meyr fast simulation ti tms dsp proc 
int 
conf 
signal processing application technology san diego pp 
sep 
barbacci instruction set processor speci cations isps notation application ieee transactions computers vol 
pp 
jan 
automatic generation dsp program development tools machine description formalism proc 
icassp minneapolis 
meyr lisa machine description language generic machine model hw sw design proceedings ieee workshop vlsi signal processing san francisco oct 
ho mann meyr lisa machine description language cycle accurate models programmable dsp architectures proceedings design automation conference dac new orleans june 
generation hardware machine models instruction set descriptions proc 
ieee workshop vlsi signal processing 
devadas isdl instruction set description language retargetability proc 
design automation conference dac jun 
expression language architecture exploration compiler simulator retargetability proc 
conference design automation test europe date mar 
processor description language supporting retargetable multi pipeline dsp program development tools proc 
int 
symposium system synthesis isss dec 
hss high speed simulator ieee trans 
cad vol 
cad pp 
july 

