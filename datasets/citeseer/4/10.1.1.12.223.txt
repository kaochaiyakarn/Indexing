reasoning actions chrs finite domain constraints michael thielscher department computer science dresden university technology dresden germany mit inf 
tu dresden de clp approach reasoning actions presence incomplete states 
constraints expressing negative disjunctive state knowledge processed set special constraint handling rules 
turn rules reduce standard finite domain constraints handling variable arguments single state components 
correctness approach proved general action theory fluent calculus 
constraint solver kernel high level programming language agents reason plan 
systematic experiments shown constraint solver exhibits excellent computational behavior scales 
challenging promising goals artificial intelligence research design autonomous agents including robots explore partially known environments able act sensibly incom plete information 
attain goal paradigm cognitive robotics endow agents high level cognitive capabilities reasoning planning exploring environment agents need reason interpret sensor information memorize draw inferences combined sensor data 
acting incomplete information agents employ reasoning facilities ensure acting cautiously plan ahead actions specific goal mind 
intelligent agents form mental model environment constantly update reflect changes effected sensor information acquired 
having agents maintain internal world model necessary want choose actions basis current status sensors account previously observed done 
ability reason sensor information necessary properties environment indirectly observed require agent combine observations different stages 
cognitive capability planning allows agent calculate effect different action sequences order help choosing appropriate current circumstances 
standard programming languages java provide general reasoning facilities agents logic programming constitutes ideal paradigm designing agents capable reasoning actions 
examples existing lp systems deriving general action theories golog situation calculus robot control language developed event calculus :10.1.1.54.7045
disadvantage systems knowledge current state represented indirectly initial conditions actions agent performed point 
consequence evaluating conditions agent program necessitates trace back entire history actions requires increasing computational effort agent proceeds 
studies shown concept fails scale long term agent control 
explicit state representation fundamental concept flu ent calculus established versatile action representation formalism offers alternative theory formal underpinnings high level agent programming method 
clp approach reasoning implements fluent calculus 
incomplete states represented open lists lists variable tail 
requires encode negative disjunctive state knowledge constraints 
set declarative rules called constraint han rules chrs combining simplifying constraints 
turn rules reduce standard finite domain constraints handling variable arguments single state components 
declarative interpretation chrs verified foundational axioms fluent calculus 
accompanying constraint solver kernel high level programming language flux fluent executor allows design intelligent agents reason plan basis fluent calculus 
powerful constraint solver underlying flux kernel provides general reasoning facilities agent programmer focus designing complex high level behavior 
studies shown constraint solver exhibits excellent computational behavior scales 
organized follows section recapitulate basic notions notations fluent calculus underlying theory clp approach reasoning actions 
section set chrs constraints expressing negative disjunctive state knowledge prove correctness wrt 
foundational axioms fluent calculus 
section embed constraint solver logic program reasoning actions verified underlying semantics fluent calculus 
section give summary studies showing computational merits approach 
conclude section 
layout sample office floor scenario offices occupied 
right hand side depicted locations cleaning robot senses light 
constraint solver general flux system example agent program accompanying papers available download web site org 
reasoning states fluent calculus example agent dynamic environment consider cleaning robot evening empty waste bins rooms floor office building 
robot shall disturb working late 
robot equipped light sensor activated robot adjacent room occupied able tell direction light comes 
instance problem depicted fig 

task program cleaning robot empty bins possible risking burst occupied office 
problem illustrates challenges raised incomplete state knowledge agents ensure decisions cautious need interpret logically combine sensor information acquired time 
fluent calculus axiomatic theory actions provides formal underpinnings agents reason actions 
mally sorted predicate logic language standard sorts actions situations situation calculus states 
cleaning robot domain example flu ents mappings sort fluent representing robot facing representing robot faces direction denoting resp north east south west cleaned rep waste bin emptied occupied representing occupied 
standard assumption uniqueness names denoted una faces cleaned occupied states built atomic states conjunction standard function state state state standard constant state denoting empty state 
example term facing represents state robot square facing north may hold summarized variable sub state fundamental notion fluent hold state 
fluent said hold state decomposed states singleton conversely hold decomposed way 
notational convenience introduce macro holds abbreviation corresponding equality formula holds der fundamental notion hold states requires special theory equality state terms 
foundational axioms fluent calculus serve purpose 
definition assume signature includes sorts fluent state fluent sub sort state functions sorts 
foundational axioms state fluent calculus 
associativity commutativity idempotence unit element oz zo 
empty state axiom holds 
irreducibility decomposition holds fl holds holds holds 
state equivalence existence states holds holds vf holds second order predicate variable sort fluent 
ee formulas sumed universally quantified 
variables sorts fluent state action sit shall denoted letters respectively 
notation 
axioms essentially characterize union operation empty set fluents 
associativity allows omit parentheses nested applications axiom says states equal contain fluents second order axiom guarantees existence state combination fluents 
foundational axioms reason incomplete state specifications acquired sensor information 
example consider definition means cleaning robot sense light square state holds occupied holds occupied holds occupied holds occupied suppose initially known robot home square outside boundaries office floor occupied 
suppose robot fig 
starts cleaning sensing light square 
current state known facing cleaned cleaned cleaned oz axioms holds occupied holds occupied 
holds occupied vx holds occupied holds occupied vy holds occupied holds occupied holds occupied holds occupied foundational axioms decomposition irreducibility uniqueness names imply holds occupied holds occupied hand imply holds occupied holds occupied holds occupied holds occupied foundational axioms decomposition irreducibility uniqueness names imply holds occupied holds occupied holds occupied holds occupied follows holds occupied holds occupied disjunction reduced stage robot know light comes matter 
suppose cautious robot goes back turns west continues cleaning knows unoccupied 
sensing light fig 
new state known satisfy facing cleaned cleaned cleaned cleaned plus 
holds occupied decomposition irreducibility uniqueness names imply holds occupied holds occupied 
say known light comes unoccupied 
solving state constraints axioms fluent calculus develop provably correct clp approach reasoning incomplete state specifications 
incomplete states encoded open lists form fk constraints expressing negative disjunctive state knowledge constraint holds holds fn semantics holds holds variables vl holds auxiliary constraint duplicate free stipulate list contains multiple occurrences order reflect foundational axiom idempotence fluent calculus 
example clause encodes specification state section zeta zeta zeta cleaned cleaned cleaned holds holds holds holds holds holds occupied holds occupied light perception zeta false light perception zeta false light perception zeta true duplicate free zeta 
meaning perceiving light clause 
light perception percept xe xw yn ys percept false holds occupied xe holds occupied yn holds occupied xw holds occupied ys percept true occupied xe occupied yn occupied xw occupied ys 
employ standard constraint domain finite domains includes arithmetic constraints rational numbers equality ordering predicates standard functions range constraints written 
logical combinations conjunction disjunction respectively 
approach called constraint handling rules support declarative programming constraint solvers 
general chr form hm gk bn 
head hi constraints guard gk prolog literals body bn constraints 
empty guard omitted empty body denoted true 
declarative interpretation chr formula el 

bt 
variables guard head variables additionally occur body 
procedural interpretation chr transition constraint store head matched elements constraint store guard derived constraints head replaced constraints body 
handling negation fig 
depicts part constraint solver contains chrs auxiliary clauses negation constraints auxiliary constraint multiple occurrences 
rules proved correct wrt 
foundational axioms fluent calculus 
holds true 
holds neq holds 
holds true 
holds neq holds 
holds holds instance true 
duplicate free true 
duplicate free holds duplicate free 
neq neq exists 
neq neq forall 
neq fx fy fx 
fy 
neq call true 
neq 
neq xix neq forall var 
chrs negation multiple occurrences 
notation abbreviation consider auxiliary clauses define finite domain constraint expresses inequality fluent terms 
cases distinguished depending variables term existentially universally quantified 
case define notion schematic fluent denotes variable arguments observation implies resulting finite domain constraint correct 
observation consider fluent calculus signature set yr functions sort fluent 
fl rl rm tn fluents xk rk rm schematic fluent 
una una 
una flf 
rn tn una vx rk 
rs chrs negation constraints justified foundational axioms fluent calculus proposition shows 
proposition state entails 
holds 
holds holds 
likewise schematic fluent state entails 
os 
os os 
proof 
follows empty state 

prove holds holds follows foundational axioms 
oz holds 
holds holds 
proof second part similar 
correctness chr removes subsumed negative constraints obvious holds implies holds fe schematic fluent fluents fe fo fe 
chrs auxiliary constraint multiple occurrences correct empty list contains duplicate elements non empty list contains duplicates iff head mot occur tail tail free duplicates 
handling disjunction fig 
depicts second part constraint solver contains chrs auxiliary clauses disjunctive constraint 
internally dis junctive constraint may contain fluents atoms form eq equal length 
semantics general disjunction holds fluent ff eq chrs fig 
simplify singleton disjunctions rule justified observation concerning finite domain constraint generated auxiliary clauses rn tn iff ai ri ti 
third chr simplifies pure equational disjunction finite main constraint 
correctness follows directly 
fourth chr simplifies disjunction applied empty state 
justified holds eq eq call 
holds 
member eq eq call 
member eq 
holds member 
holds member instance 

member fi 

vl eq iw fi 
append 
eq 
eq xix eq 
eq 
eq eq leq dl eq eq eq 
member ix 
member member 
chrs disjunctive constraint 
chrs constitute unit resolution steps 
justified rio oas oas oas chrs fig 
propagate disjunctive constraint non variable state 
rules auxiliary constraint intended semantics vor 
example consider constraint iz processed yields eq eq rules justified proposition 
proposition consider fluent calculus signature set functions sort fluent 
foundational state uniqueness names una entail 
kr kr kri 
holds ff oz kr kr 
ai proof item obvious 
items follow foundational axioms decomposition irreducibility 
completes constraint solver 
example running specification section results zeta zeta 
zeta facing cleaned cleaned cleaned constraint occupied occupied adding information light system able infer occupied zeta zeta light percept ion zeta false 
zeta facing cleaned cleaned cleaned occupied constraint holds occupied reasoning actions section embed constraint solver logic program reasoning effects actions fluent calculus 
gen previous approaches fluent calculus provides solution fundamental frame problem presence incomplete states 
solution rigorously axiomatic characterizations addition removal finitely fluents incompletely specified states 
definition introduces macro equation intended meaning state state minus fluents finite holds 
holds fx holds zl 
holds 
holds fx holds zl zp 
minus 
minus zp zx holds zl minus fs zp 
plus 
plus zp holds zx holds zx plus fs zp 
update zl minus zl plus 
foundational clauses reasoning actions 
state compound macro zl means state state zl minus plus def de holds fl finitely fluent terms connected 
crucial item second defines removal single flu ent case distinction equals zl applies case holds plus equals applies case 
fig 
depicts set clauses encode solution frame problem basis constraint solver fluent calculus 
pro gram predicate update zl incom plete state updated positive negative effects resp 
clauses fig 
encode macro 
correct ness definition follows foundational axioms decomposition irreducibility 
ternary holds encodes holds proposition shows definition correct wrt 
foundational axioms fluent calculus macro definition fluent removal assumption lists free duplicates 
proposition axioms holds zl entail rol proof suppose fl holds zl holds macro expansion implies holds holds foundational axiom state equivalence follows suppose hand fl decomposition ity imply holds holds 
holds zt iff holds zt 
likewise az iff fl iff holds zt 
clauses removal addition finitely fluents fig 
straightforward holds inconsistent specification equals subtraction definition ternary holds predicate 
likewise holds inconsistent specification list head tail represents holds foundational axiom idempotence 
example recall specification state section consider update zeta update zo cleaned occupied 
zl facing cleaned cleaned cleaned lz constraints holds occupied accompanying shown clp ap proach reasoning actions kernel high level programming method allows design cognitive agents reason actions plan 
agents concept state mental model world conditioning behavior planning ahead actions specific goal mind 
move agents constantly update world model order reflect changes effected 
maintaining internal state definition called state update axioms action turn appeals definition update developed 
extensive reasoning facilities provided constraint solver flux allows implement complex strategies concise modular agent programs 
computational behavior experiments shown flux underlying constraint solver exhibit excellent computational behavior problems toy size 
accompanying report results special variant flux complete states applied robot control program combinatorial mail delivery problem 
experiments showed flux compute effects hundreds actions second 
notably average time inferring effects action remains constant course program shows flux scales effortlessly arbitrarily long sequences actions 
result compared golog curve computation cost suggests polynomial increase time 
computational behavior flux presence incomplete states analyzed agent program office cleaning domain robot systematically explores partially known environment acts cautiously incomplete information 
incomplete states pose harder problem flux proved scale impressively phase agent builds knowledge environment acting curve shows linear increase average action computation cost 
second phase agent acts incomplete knowledge average time making decisions inferring effects actions remains constant shows general flux scales effortlessly long sequences actions 
results analysis behavior golog shown paradigm state representation necessary programs scale control agents robots extended periods time maintaining explicit state term execution program directly evaluated stage 
contrast implicit representation situation term golog leads increasing computational effort program proceeds 
summary clp approach reasoning actions presence incomplete states constraint handling rules finite domain constraints 
constraint solver logic program state update verified action theory fluent calculus 
systematic experiments shown constraint solver exhibits excellent computational behavior scales 
result particularly remarkable agent needs constantly perform theorem proving tasks conditioning behavior knows environment 
linear performance achieved due careful design state constraints supported approach restricted expressiveness theorem proving computationally feasible 
gradually extend language constraints expressing exclusive disjunction loosing computational merits approach 
bibel 
deductive solution plan generation 
new generation computing 

theory practice constraint handling rules 
journal logic programming 

new deductive approach plan ning 
new generation computing 
kowalski 
logic calculus events 
new generation computing 
levesque lin marcu ray reiter scherl 
logical approach high level robot programming progress report 
control physical world intelligent agents papers aaai fall symposium pages 
levesque reiter lin scherl 
golog logic programming language dynamic domains 
journal logic programming 
mccarthy 
situations actions causal laws 
stanford arti intelligence project memo stanford university ca 
reiter 
logic action 
mit press 
solving frame problem mathematical tion common sense law inertia 
mit press 

high level robot control logic 
proceedings international workshop agent theories archi languages atal volume lncs pages 
springer 
thielscher 
situation calculus fluent calculus state date axioms solution inferential frame problem 
artificial intelligence 
thielscher 
modeling actions ramifications nondeterministic concurrent continuous domains case study 
proceedings aaai pages austin tx july 
mit press 
thielscher 
programming reasoning planning agents flux 
proceedings international conference principles knowledge representation reasoning kr toulouse france april 
morgan kaufmann 
thielscher 
pushing envelope programming reasoning agents 

submitted 

