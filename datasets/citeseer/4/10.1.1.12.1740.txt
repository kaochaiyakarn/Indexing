scalable tcp improving performance highspeed wide area networks submitted workshop purposes discussion 
original submitted december journal publication 
tom kelly cern university cambridge cam ac uk december tcp congestion control perform badly highspeed wide area networks slow response large congestion windows 
challenge alternative protocol better utilize networks high bandwidth delay products simple robust manner interacting badly existing traffic 
scalable tcp simple sender side alteration tcp congestion window update algorithm 
offers robust mechanism improve performance highspeed wide area networks traditional tcp receivers 
scalable tcp designed incrementally deployable behaves identically traditional tcp stacks small windows sufficient 
performance scheme evaluated experimental results gathered scalable tcp implementation linux operating system gigabit network 
results gathered suggest deployment scalable tcp negligible impact existing network traffic time improving bulk transfer performance highspeed wide area networks 
communication network experience periods traffic offered exceeds available transmission capacity periods network said congested 
tcp congestion control introduced relieve congestion collapse occurred internet 
result congestion control resources shared flows periods congestion 
sharing leads similar throughput flows similar round trip times avoids starving individual flows 
tcp proved remarkably successful sharing bandwidth utilizing available capacity range dynamic traffic loads 
tcp flow control algorithm uses window acknowledgment scheme provide reliable data transfer network brief description complete 
sending host maintains congestion window cwnd places upper bound number segments may sent network awaiting acknowledgment receiver 
receiving data packet receiver schedules cumulative acknowledgment covers received packets sent sender 
receiver advertises sender receive window rwnd size available socket receive buffer connection 
sender allowed minimum cwnd rwnd packets network awaiting acknowledgment 
receive window provides flow control receiving application receiving application process data speed sent division cern geneva switzerland 
laboratory communication engineering cambridge university engineering department street cambridge cb pz united kingdom 
throughput window packet time loss recovery supporting loss rate mbps pkts mbps pkts mbps pkts mins gbps pkts mins gbps pkts hrs mins table characteristics ms tcp connection traditional congestion control 
window advertisements receiver rwnd shrink socket receive buffer fills 
congestion window intended provide flow control periods network congested 
packet loss detected timeout unacknowledged packet receipt duplicate acknowledgments selective acknowledgment sack reports sent receiver 
packet loss signal congestion assumed caused buffer overflow due offered traffic exceeding available capacity path connection 
tcp senders update congestion window response acknowledgments received packets detection congestion 
acknowledgment received round trip time congestion detected cwnd cwnd cwnd detection congestion round trip time cwnd cwnd process increasing decreasing cwnd allows tcp aggressively utilize available bandwidth path 
agility congestion window adjustment algorithm studied considering time taken reach sending rate detection transient congestion event 
suppose connection round trip time ms packet size bytes 
available bandwidth gbps corresponds congestion window 
immediately detection congestion event cwnd set equivalent sending mbps 
reach sending rate gbps take round trip times minutes 
highspeed wide area networks recovery time longer time transient congestion periods 
lead low utilization network uncongested extended periods 
altering congestion window adjustment algorithm agility large windows dramatically improved 
consider congestion control algorithm 
acknowledgment received round trip time congestion detected cwnd cwnd detection congestion round trip time cwnd cwnd cwnd time taken source algorithm double sending rate round trip times rate window update algorithm scalable tcp implementing termed scalable tcp 
previous case gbps connection round trip time ms scalable algorithm recover original rate transient seconds 
suggests explicit congestion notification ecn routers allows congestion signaled sender acknowledgments receiver loss packets 
algorithm better utilize bandwidth highspeed wide area network experiences transient congestion 
studies design implementation presents early results performance scalable tcp modification tcp congestion control 
section describes problems associated tcp congestion control highspeed wide area networks presents context scalable tcp beneficial 
section considers analytical properties generalized scalable tcp algorithm motivates choice parameters 
section presents results experiments performed scalable tcp implementation linux operating system highspeed testbed 
section considers scheme differs related improving performance congestion control high speed networks 
section summarizes achieved gives directions 
motivation context motivated poor performance tcp bulk transfers highspeed wide area networks 
networks speeds greater mbps round trip times ms 
communities networks need distribute substantial amounts data 
example large datasets collected high energy physics bioinformatics communities require global distribution data analyzed effectively 
define supporting loss rate connection maximum packet loss rate congestion control algorithm tolerate sustain level throughput 
packet loss recovery time rate connection length time required congestion control algorithm return initial sending rate detection packet loss 
traditional tcp connections unable achieve high throughput highspeed wide area networks due long packet loss recovery times need low supporting loss rates 
table shows properties traditional tcp connection round trip time ms segment size bytes 
packet loss rate comparable occur long haul fiber links network devices systems places limit throughput transient congestion due load fluctuations considered 
constraint loss rate problematic connection round trip time ms mbps 
furthermore packet loss recovery time mbps connection round trip time ms comparable inter page think times user web requests 
recovery time minutes detrimental efficient utilization network periods transient congestion round trip time ms effect occur rates mbps 
considers simple change congestion control algorithm sufficient improve highspeed wide area network operation 
scalable tcp evolution existing congestion control algorithm improves performance high available long haul routes 
designed easily implemented current tcp stacks incrementally deployable needing modifications network devices 
scalable tcp builds highspeed tcp proposal previous engineering stable congestion controls :10.1.1.18.4538
analysis design analysis standard fluid limit approximations notation conventions 
source destination pair network identified route dropping probability route denoted pr 
tr denote sender congestion window round trip time connection route generalized scalable tcp window update algorithm responds acknowledgment received round trip time congestion detected update rate pkts rtt rate pkts rtt time rtt time rtt traditional tcp scaling properties 
rate pkts rtt rate pkts rtt log log log log bc time rtt bc time rtt scalable tcp scaling properties 
constant 
detection congestion round trip time congestion window altered constant 
figures illustrate congestion window dynamics single connection traditional tcp scalable tcp dedicated link capacity 
packet loss recovery times traditional tcp connection proportional connection window size round trip time 
scalable tcp connection packet loss recovery times proportional connection round trip time invariance link sizes allows scalable tcp outperform traditional tcp highspeed wide area networks 
scaling property applies choice constants implementation deployment constraints determine constants 
motivated considering scalable tcp impact legacy traffic bandwidth allocation properties flow rate variance convergence properties control theoretic stability 
response curve bandwidth allocation congestion window update algorithm relates congestion window size signaling rate response curve 
generalized scalable tcp algorithm response curve approximated small drop rates pr traditional tcp response curve approximated small drop rates derived considering congestion window size equilibrium differential equation model cwnd expectation stochastic model cwnd 
pr window size pkts loss rate standard tcp scalable tcp response curves traditional tcp scalable tcp 
response curves different forms multiplicative function pr schemes average windows value loss rates pr 
needed suitable evolutionary approach allows connections better bandwidth wide area networks available 
argument follows introduced 
traditional tcp connections effectively large windows practice limited amount socket receive send buffer memory available tend windows greater certain size call legacy window size 
associate window size legacy loss rate pl maximum packet loss rate needed support windows larger 
suppose scalable tcp uses traditional congestion window update algorithm cwnd scalable tcp congestion window update algorithm cwnd 
sharing properties scalable tcp considered states 
levels congestion drop rates higher pl scalable tcp connections traditional tcp algorithm receive share traditional tcp stack 
levels congestion drop rates pl legacy connections window 
scalable tcp connections receive larger windows legacy connections legacy connections starved bandwidth 
choice value policy decision 
traditional tcp connections window scalable tcp connections round trip time receive twice bandwidth 
suggests concerns scalable tcp receiving higher bandwidth traditional tcp connections windows greater arise window size large concerns tcp packet loss recovery times 
purposes assume packets corresponds kb byte segments legacy loss rate pl response curves traditional tcp scalable tcp plotted 
ensure continuous decreasing response curve scalable tcp response curve pass point pl giving constraint pl pl number free variables reduced choosing fixes intrinsic problem scalable tcp algorithm small window regime previous studies suggest may benefits doing context ecn ip networks 
scalable tcp connections receive smaller share bandwidth react slowly congestion may alter dynamics existing traffic 
effects evolution incremental deployment difficult avoided design 
instantaneous rate variation instantaneous rate tcp connection probes mean value giving share available capacity 
size stochastic rate variation scalable tcp congestion window update algorithm studied previously 
coefficient variance instantaneous sending rate cov xr cov tr provided pr 
suggests chosen small possible reduce instantaneous rate variation agrees intuitive arguments packet loss recovery times shown 
appears sensible algorithm rate variation larger traditional tcp satisfy scalable tcp algorithm responds congestion events round trip time 
necessary window expansion contraction cycle lasts longer round trip time 
packet loss recovery time scalable tcp noting free variable constraint pl constraint trivially satisfied satisfied 
pl convergence convergence speed significance elastic rate protocol adapt changing network conditions reasonable timescales 
ideally convergence happen instantaneously 
packet loss signaling channel need provide compatibility legacy traffic minimal cost network devices goal difficult 
suppose time sudden overload shock occurs pr increases 
source reduce sending rate receiving feedback factor log tr log fact overestimate time needed 
overload causes loss delay lead lower sending rate acknowledgments receiver needed release packets network self clocking robust mechanism reacts round trip time overload events 
traditional tcp congestion control corresponds choice fairly rapid convergence speed face overload 
response sudden increase available capacity route pr time taken source increase sending rate factor log tr log contrast traditional tcp connection require round trip times respond increase available capacity 
scalable tcp algorithm responds effectively changes available capacity window sizes large 
convergence properties suggest chosen large possible fastest convergence 
conflicts desire keep instantaneous rate variation small requires small equation 
responses considered context ecn implementation 
results provide approximation large windows low drop probabilities constraint equation 
ecn implementations reacting congestion notification necessarily suffer limitation 
proportional equation large gives large coefficient variation rate packet loss recovery time time halve rate time double rate tr tr tr tr tr tr tr tr tr tr tr tr table properties scalable tcp connection variety parameter settings general round trip time ms 
table shows properties scalable tcp connection general round trip time equal ms choices compatible legacy window packets 
setting policy choice determined system properties deemed important 
appear variability choosing large 
slow convergence times suggest choosing desirable 
selected offers balance rate fluctuation convergence time 
choosing optimal parameter range appears marginal difference theoretical dynamics algorithm experimentation implementations real workloads help refine choice 
stability shown heterogeneous round trip times arbitrary network topologies generalised scalable tcp algorithm locally stable equilibrium provided pj yj yj yj equilibrium rate link pj probability loss link arrival rate set links 
example assuming poisson packet arrivals scheme stable fifo network buffers provisioned size network buffers configured system stable control theoretic sense 
control theoretic approach design stable scalable tcp ecn :10.1.1.18.4538
improvements enhancements possible adaptive queue management aqm schemes network devices scope 
experiments scalable tcp implemented network stack linux operating system 
kernel implements sophisticated tcp stack supporting relevant standards tcp extensions high performance sack sack 
stack implements packet retransmission timeout checking detect lost packets reordering detection sack rate halving burst limiting 
scalable tcp patch adds congestion window algorithm changes scalings kernel buffers removal special case small packet handling sense differential equations sending rates locally stable respect feedback loop controlling 
traffic models considered results qualitatively similar see examples :10.1.1.18.4538
provides enhancements window scaling timestamping protection wrapped sequence numbers 
similar tcp vegas quickly detect losses duplicate :10.1.1.41.8565
scalable tcp patch experiments downloaded www lce 
eng cam ac uk scalable 
number flows geneva gbps ms gbps gbps chicago testbed topology experiments 
tcp tcp gigabit kernel modifications scalable tcp table number gigabyte transfers completed seconds 
driver debug counters 
scaling kernel buffers increases send receive queues lie kernel device driver 
needed scheduling remained constant interface speeds increased 
device driver linux copies small packets buffer conserve memory 
order optimize speed space efficiency driver interrupt handling routine changed extra copy 
changes simple significantly improved tcp throughput termed gigabit kernel modifications 
order adjust effect delayed acknowledgments set 
implementation byte counting updates congestion window proportion exact number bytes acknowledged remove need adjust delayed acknowledgments 
testbed consists high performance pcs dp dual ghz xeon processors gigabytes memory 
sk gigabit ethernet cards mhz bit pci bus provided connectivity testbed network 
servers located cern geneva servers chicago 
clusters connected cisco xx routers gbps packet link geneva chicago 
pcs connected routers gigabit ethernet ports 
topology shown 
round trip time ping geneva chicago ms 
experiments follow interface geneva chicago fifo queue packets 
gigabit ethernet interfaces routers factory default setting packet fifo queue 
bandwidth delay product available buffers path trend decrease available buffering delay continue due cost implementing highspeed memory systems network devices 
sender side test cases compared tcp unaltered linux kernel tcp linux kernel gigabit kernel modifications scalable tcp linux kernel gigabit kernel modifications 
receivers unaltered linux kernel cases 
experiments designed explore performance scalable tcp bulk data transfer wide area scientific networks 
transmit side queue limited device variable 
receive side queue size set variable net core max backlog 
increased respectively hold increased number packets arrive period operating system process immediately 
component probability density function parameters mean think times sec pareto objects page pareto request file sizes bytes pareto inter object times sec pareto table summary distributions parameters web user tcp connection model 
type bulk transfer users web traffic transferred bulk transfers gb tcp gb tcp buffer scaling gb scalable tcp gb gigabyte transfers completed table performance concurrent web users bulk transfer users seconds 
basic performance tests server receiver pairs tcp flows distributed evenly machines 
receiver chicago requested file size gigabytes associated server geneva 
server responded transferring gigabytes data memory back receiver chicago 
completion gigabyte transfer connection completed request initiated 
intended capture slow start termination dynamics 
cases tcp socket send receive buffers set mb allowed single flow full bandwith available 
table shows results experiments 
significant throughput improvement observed simply scaling internal linux kernel buffers removing copying small packets receive path device driver 
scalable tcp congestion control algorithm increased throughput observed traditional tcp gigabit kernel modifications 
scalable tcp flows machines maximal performance possible saturated gbps link accounting required ip tcp header overhead incurred packets size bytes 
linux kernel gigabit kernel modifications get maximal gbps performance flows 
standard linux kernel achieved maximal performance flows 
performance web traffic tests attempted measure impact web traffic large bulk transfer users 
particular assessed scalable tcp detrimental effect existing tcp users 
tests receiver server pairs generated traffic equivalent active web users 
machine pairs generated transfer requests gigabytes size way basic throughput test transfers progress machines time 
parameters web traffic model table parameters measured generate self similar traffic 
web traffic repeatable sense sample paths user think times embedded pages inter object times combined ip tcp header timestamp option maximal capacity stated interface capacity 
traffic completely representative web traffic observed real networks round trip time available experimental purposes 
page sizes user test 
repeatability allowed web traffic run isolation additional traffic measure impact bulk traffic web transfers 
table displays results experiments mixing traffic types 
tests web traffic experience noticeable change throughput 
offers evidence suggest design scalable tcp provided solution negligible impact existing traffic 
standard linux kernel modifications achieved maximal possible system throughput time period 
applying gigabit kernel modifications improved traditional tcp performance achieved maximal possible throughput 
bulk transfers scalable tcp algorithm boosted total traffic transferred maximum possible throughput 
related authors case tcp vegas similar variants highspeed networks 
argument proceeds observing tcp vegas uses network buffer delay implicit congestion signal opposed drops 
network buffer delay controlled signaling mechanism possible run network high utilizations 
approach may prove successful challenging implement 
succeed tcp vegas implementations needed run robustly environments noise affects delay estimates noise arise heterogeneous network buffering schemes operating system scheduling network firewall processing cross traffic control buffer delay traditional tcp udp streams 
mechanisms logical connection behave multiple tcp connections improve performance high bandwidth wide area networks transport layer application layer opening multiple connections 
results displayed table show pragmatic solution improve throughput 
difficult tune way consistently provides performance causing detrimental effect existing network traffic congestion occurs 
builds highspeed tcp proposal uses arguments achieve sharing legacy applications 
scalable tcp simpler implement parameterized highspeed tcp algorithm due constants window update algorithm 
shares analysis design methods engineer ecn tcp variants 
scalable tcp presents simple change congestion window update algorithm improves throughput highspeed wide area networks 
performance improvement dramatic senders scalable tcp algorithm bulk transfer networks improvement attributable algorithm 
scheme promises interoperate legacy traffic results experiments conducted web traffic traditional tcp stacks parallel scalable tcp flows performing bulk transfers showed negligible impact web traffic transferred 
surprising result experiments performed simple optimizations kernel device drivers improve traditional tcp performance compared standard kernel 
needed consider impact heterogeneous round trip times 
may requirement correct bias tcp connections smaller round trip times methods scalable ecn variants provide starting point modifications :10.1.1.18.4538
additional consider complex workload models capture needs applications may run highspeed wide area networks 
acknowledgments jean philippe martin offered valuable comments early drafts useful coding advice 
helpful discussions design scalable tcp glenn sally floyd frank kelly 
go testbed support teams cern caltech 
funded ist programme european union ist project royal commission exhibition labs research 
allman 
tcp byte counting refinements 
acm computer communication review july 
brakmo peterson :10.1.1.41.8565
tcp vegas congestion avoidance global internet 
ieee journal selected areas communications october 
choe low 
stabilized vegas 
proc 
th annual allerton conference communication control computing monticello il october 
crowcroft 
differentiated internet services weighted proportional fair sharing tcp 
computer communication review july 
feldmann gilbert huang willinger 
dynamics ip traffic study role variability impact control 
sigcomm boston ma august 
floyd 
highspeed tcp large congestion windows 
internet draft draft floyd txt august 
progress 
floyd mahdavi mathis podolsky 
extension selective sack option tcp 
internet rfc july 
floyd ramakrishnan black 
addition explicit congestion notification ecn ip 
internet rfc september 
jacobson 
congestion avoidance control 
sigcomm 
updated version available ftp ftp ee lbl gov papers ps jacobson braden borman 
tcp extensions high performance 
internet rfc may 
kelly :10.1.1.18.4538
engineering stable scalable tcp variant 
technical report cued infeng tr laboratory communication engineering cambridge university june 
mathis mahdavi floyd romanow 
tcp selective acknowledgment options 
internet rfc october 
misra ott 
performance sensitivity fairness ecn aware modified tcp 
networking networking technologies services protocols performance computer networks mobile wireless communications second international ifip tc networking conference proceedings 
padhye firoiu towsley kurose 
modeling tcp reno performance simple model empirical validation 
ieee acm transactions networking april 
stevens 
tcp ip illustrated volume protocols 
addison wesley 

stability networks operating tcp congestion control 
proc 
th ifac world congress automatic control barcelona spain july 
feng 
case tcp vegas high performance computational grids 
proc 
th ieee international symposium high performance distributed computing hpdc san francisco ca august 

