metalogical approach foundational certified code karl crary sarkar carnegie mellon university foundational certified code systems seek prove untrusted programs safe relative safety policies terms actual machine architectures 
previous orts employed structure proofs expressed logic express safety policy 
propose alternative structure safety proofs expressed twelf metalogic eliminating proofs extra layer encoding needed previous accounts 
metalogical approach constructed complete foundational account safety fully expressive typed assembly language 
proliferation low cost computing hardware ubiquity internet created situation huge amount computing power idle principle accessible developers 
goal exploiting idle computational resources existed years seti home handful projects successfully profitable idle computational resources internet 
paradigm called grid computing elicited serious interest academics industry general means conducting low cost supercomputing 
despite increasing interest grid computing remaining obstacle growth understandable reluctance computer owners download execute software developers know trust may heard 
limited practical grid computing small number potential users able obtain trust thousands computer owners know 
concert project cmu seeking overcome obstacle developing system dissemination software 
concert framework machine owner installs steward program ensures safety downloaded software 
new grid application obtained execution parts concert framework determine takes place application expressed form certified code executable code accompanied certificate proving code safe 
steward verifies certificate valid permitting code executed 
important aspect certified code system makeup system trusted elements elements correct system properly verifier type checker runtime library 
form trusted element common early certified code systems trusted type system 
systems relied type system similar artifact ensure safety code recipients required trust type system su ced purpose 
cases type system backed published proof safety proof carried level distance real machine architecture 
interest development certified code systems include type system system trusted elements account appel felty hamid 
systems dubbed foundational constitute improvement remove substantial trusted element 
removing trusted elements desirable reasons trusted element faulty eliminating improves security 
particularly compelling software elements example bernard lee eliminate verification condition generator trusted elements pcc system appel seek minimize number lines code lf proof checker 
valuable complex elements trustworthy time mature 
foreseeable remain substantial artifacts trusted elements 
second important trusted element participant stuck eliminating improves flexibility extensibility 
second issue particularly relevant trusted type systems 
type systems certified code impose limitations programs pass 
aim enable establishment decentralized grid computing fabric available wide array participants 
purpose implausible imagine single type system su ce potential grid applications 
necessary basic steward extended new type systems untrusted sources possible single type system hardwired steward 
consequently foundational certified code system essential purposes 
presents foundational certified code system developed part concert 
high level system shares structures foundational orts trusted elements include proof checker safety policy incorporates formalization ma chine semantics 
untrusted elements argument particular program safe include type system proof program passes type system proof programs passing type system safe 
case main development type system safety proof 
closer analysis reveals important methodological differences 
account appel felty collaborators essentially denotational semantic model types domain category theory terms concrete machine instructions safety policy 
contrast account hamid operational safety conventional type preservation progress lemmas 
systems similar safety policy entire proof single logic higher order logic encoded lf calculus inductive constructions 
approach 
system takes di erent logical perspective metalogic 
safety policy define logic expresses operational semantics architecture limited safe operations 
consequently program performing unsafe operation stuck 
main body safety policy 
specialized intel ia architecture adaptable architectures 

code supplier invited provide second logic defining safety condition 
safety condition identify single program practice type system accepting programs 

final component safety policy statement metatheorem program safety condition holds machine loaded eventually runs state transitions state follows construction operational semantics performs unsafe operation 

code supplier responsibility fill proof safety metatheorem verified meta proof checker 

code supplier provides derivation establishing program interest satisfies safety condition 
derivation typically computed automatically type checker 
high level structure entirely unsurprising safety policy precisely standard statement type safety architecture level 
di erence code supplier proof provided metalogic logic define safety policy 
importance di erence largely pragmatic 
twelf metalogical framework may conveniently directly derivations logic avoiding extra layer encoding needed previous accounts foundational certified code 
result able develop entire system including foundational safety proof expressive typed assembly language called talt tal half 
popularly known architecture 
natural numbers remainder structured follows section discuss express logics metatheorems meta proofs twelf 
section system architecture semantics safety policy 
section outline meta proof talt satisfies policy 
concluding remarks appear section 
twelf metalogic brief tutorial twelf express logics meta reasoning 
ideas underlying methodology originated pfenning developed variety papers twelf predecessor elf 
assume familiarity logic programming methodology encoding logics lf syntactic classes judgements types syntactic objects derivations terms 
simple logic running example simple logic natural numbers 
sole syntax logic natural numbers expressed unary sole judgement states sum numbers third number 
logic standard mathematical notation 
syntax logic expressed twelf definitions nat type 
nat 
nat nat 
sum judgement expressed twelf definition sum nat nat nat type 
inference rules sum expressed sum sum sum sum declarations defining logic construct logical derivations composing constants represent inference rules 
example judgement written type sum derivation judgement term type sum sum implicit arguments note twelf implicit arguments express rules sum sum convenient form 
explicit form implicit argument sum example explicit resulting type nat sum nat twelf rendering universal quantifier nat sum need explicitly provide argument form implicit argument twelf uses type reconstruction unification determine value place sum 
explicit form derivation written compactly sum sum operational interpretation twelf signature collection twelf declarations 
twelf signature interpreted ways 
interpretation took previous section signature defines logics 
alternatively adopt operational interpretation signature viewed logic program 
operational interpretation user presents system query form judgement twelf type containing existentially quantified variables 
twelf conducts depth proof search attempting find values variables judgement derivable type inhabited 
example query twelf replies sum solving 

case course solutions 
aside note twelf interpretation free variables queries di erent declarations query taken existentially quantified declaration sum taken implicit argument universally quantified 
may convenient view twelf logic program typed prolog program 
provided sets aside twelf higher order features may obtain prolog program twelf signature extracting inference rules deleting names rewriting prolog syntax 
example sample signature corresponds prolog program sum 
sum sum 
meta proofs interesting fact sum predicate ground fully specified inputs positions query returns ground prolog prolog twelf permits nested implication 
operationally means twelf prolog introduce statically scoped variables may participate proof search 
twelf logic programming language corresponds closely prolog richer type system prolog impure features 
result third position 
fact returns exactly important purposes 
sum total relation positions third 
totality sum means interpreted metatheorem asserting existence certain logical objects certain conditions 
case theorem proved uninteresting states natural numbers exists third natural number write logic programs corresponding interesting metatheorems 
example sum ident nat sum type 
sum ident sum ident sum 
sum ident sum ident sum sum sum sum type 
sum sum sum sum 
sum sum sum sum total relation position second corresponds metatheorem 
sum ident states natural number exists derivation second sum states exists derivation exists derivation 
names logical inference rules significant wish metalogic 
provided plan prove meta meta theorems names give cases metatheorem significant twelf error reporting 
save space eliding replacing symbol 
sum ident sum lemmas may prove mildly interesting metatheorem sum commute sum sum type 
sum commute sum sum sum commute sum sum sum commute total position second 
logic proof clear added number type annotations 
necessary twelf check proof useful human readers 
meta proof checking far informal justification totality course twelf able check relation total order determine valid metatheorem 
type checking ensures relation fails run time type error leaves ways relation fail total mode failure termination failure coverage failure 
illustrate form failure invalid proof false meta proposition sum zero sum zero nat sum type 
mode failure relation returns non ground fully specified result passes non ground argument input lemma 
example non proof sum zero typed actual 
return value entirely unspecified non ground 
slightly sophisticated version sum zero similar passes non ground value input lemma 
termination failure relation may loop forever 
corresponds invalid induction 
example sum zero coverage failure cases theorem covered 
example incomplete proof sum zero sum 
correctly proves meta proposition case zero leaves nonzero case fails 
twelf checks totality relations assistance programmer 
programmer states relation inputs outputs mode declaration mode sum ident 
mode sum 
mode sum commute 
modes indicate inputs modes indicate outputs variable names insignificant 
mode declaration essential reading relation metatheorem henceforth include mode declaration metatheorem statement 
second programmer directs twelf verify relation total provides information help induction argument show termination 
omit declarations interest brevity 
reader may distinguish metatheorems ordinary relations presence mode declaration 
safety policy main body safety operational semantics concrete architecture 
chosen intel ia architecture architecture greatest number potential grid participants 
begun fairly small number instructions new instruction easy add superstructure built 
operational semantics includes safe operations unsafe operations example store jump address simply omitted semantics 
means transition exists machine state unsafe operation performed 
usual parlance states stuck 
second minor component safety policy definition possible initial states machine loaded program 
components define safety policy program safe stuck state reachable initial state follows state reachable unsafe operation performed unsafe operation performed 
code formalizing concludes safety policy section 
important issue complicating operational semantics 
cases impossible determine outcome operation 
may happen outcome fundamentally input operation operation complex full specification feasible garbage collection 
cases semantics assume possible transition taken require safe 
obvious implementation relation defining semantics non functional allow relate state multiple states 
simple approach reasons 
purpose developing safety proofs convenient deterministic functional relation see 
second notion safety necessary state possibly perform unsafe operation transitions su cient simply omit unsafe transition happen natural crafting relation 
designing relation manner subtle leads possibility insidious errors safety policy undermine entire system 
force transition relation deterministic adding imaginary oracle state 
outcome operation determined semantics simply consults oracle 
possible outcomes covered mechanism definition initial program states provides possible finite oracle safety violation happens finite amount time 
abstraction main form data manipulated operational semantics consists literal bytes 
additionally semantics deals forms data 
main example data pointers 
feasible formalize entire behavior allocation garbage collection boehm demers weiser conservative collector impossible determine concrete value allocated pointer 
break memory sections 
section contiguous area memory distinct sections appear unknown order memory possibly intervening gaps 
pointer viewed pair section identifier set section 
note set need fall bounds section quite possible construct ill formed pointers 
semantics includes forms data 
special distinguished pointer global set table grid applications access facilities allocation provided runtime 
special don know value represent various data sum pointers 
data notions numbers semantics 
natural numbers section 
binary contains bit binary numbers 
define data types bw nat 
byte width bits ww nat 
word width bytes nat 
word width bits section type 
sect nat section 
address type 
addr section binary address 
byte type 
act binary bw byte 
actual dk byte 
don know boa address nat byte 
byte address nat byte 
byte got addr 
string nat type 
string 
byte string string 
forms byte discussed 
order terms bytes words pointer forms include index pointer 
pointer represented sequence bytes boa 
boa 
common data type semantics string contains strings bytes constructed cons nil 
convenient type strings indicate string length may define words string ww 
care length string may say string twelf wildcard 
state state architecture consists memory register file flag register containing ia condition codes program counter oracle 
memory consists mapping section identifiers strings 
section section identifiers values form sect natural number 
may represent memory list strings obtain sect extracting nth element list memory type 
memory 
string memory memory 
memory memory 
curious choice name cons constant justified making infix word may written byte byte byte byte important distinction wildcard implicit arguments implicit arguments universally quantified wildcards existentially quantified 
implicit arguments may unify constants wildcards may unify including implicit arguments 
section may invalidated garbage collected 
sections looked position placeholder invalid sections 
register file similar memory fixed length contains words arbitrary strings registers invalid nat 
regs nat type 
regs nil regs 
regs cons string ww regs regs 
full register file type regs 
due space considerations omit definitions flag register type flags oracle type oracle 
program counter simple address 
components assembled machine state state type 
state memory regs flags address program counter oracle state 
operations halt execution program considered safe 
simple example program finishes exits interesting examples processor exceptions runtime trap stack overflow divide zero 
say operations transition stopped state stopped state 
transition relation transition relation defined rules 
ordinary case semantics fetches instruction executes auxiliary relation transition transition state state type 
transition transition st st stopped state simply transitions trans stopped transition stopped stopped 
instruction fetching performed loading string current program counter decoding obtain instruction 
process unsurprising fairly involved due complexity ia instruction encoding 
main done relation transition st st says executing state st results state st 
give case way example include general purpose registers including esp 
register handled specially segment registers omitted assume set segment providing flat address space 
floating point simd features ia models currently unsupported 
trans add transition ii add st st ia add instruction takes arguments ective address destination result summands operand providing summand 
ective address register memory location operand case ective address immediate value 
perform add load values obtaining words 
add summands obtaining result result flags rf carry zero flags 
store back result flags flag register obtaining state st 
compute address instruction store program counter obtaining final state st 
garbage collection garbage collection causes important complication semantics 
space considerations preclude full discussion approach garbage collection briefly summarize approach 
crary define notion unreachability 
roughly speaking set section identifiers unreachable state state contains pointers sections sections consequently collection leaves dangling pointers 
note state typically unreachable sets particular empty set unreachable 
definition crafted manner predict objects collected conservative collector 
oracle cover possible actions collector take 
semantics garbage collects selecting unreachable set oracle possibilities exist invalidating section set 
done part operation invoke garbage collection allocation 
safe programs prepared possibility gc operations 
safety policy state safety policy need additional type definition input programs 
view program simply list actual bytes giving definition type 

binary bw 
stands actual string operator takes role cons nil 
relation initial state st relates program possible initial states 
initial state obtained placing program memory choosing arbitrary size stack filling stack flags junk values registers appropriate initial values setting program counter program choosing arbitrary value oracle 
state safety policy 
say program reach state st st reachable zero transitions initial state reachable state type 
reachable reachable st reachable reachable st second declare define predicate programs type 
code supplier responsible filling definition 
declare prove safety metatheorem safety reachable st transition st st type 
mode safety 
metatheorem says exists derivation passes code supplier safety condition exists derivation reachable st reach state st exists derivation transition st st st stuck 
code supplier responsible filling proof safety doing establishes soundness safety condition 
complete safety policy consists lines twelf code including comments 
safety proof hamid foundational safety talt broken stages type theoretic portion concrete type free portion 
stage stage define talt type system give operational semantics terms low level machine 
prove type safety semantics 
development stage detail crary repeat summarize top level results 
final results crary safety theorems progress type 
mode progress 
preservation type 
mode preservation 
collect ok collect type 
mode collect ok 
standard safety results progress states machine state typed takes step preservation states typed steps typed 
third collect ok asserts fact garbage collection typed garbage collects deleting reachable set sections recall section typed 
concrete stage complete foundational safety proof combining safety theorems simulation argument showing operational semantics maps correctly concrete architecture 
simulation argument entirely type free type theoretic issues dealt proofs fairly involved due myriad technicalities concrete architecture 
attempt technicalities give high level structure proof 
define relation implements st states concrete state st implements state second define multi step transition relation transitions st st states st transitions st exactly steps transitions nat state state type 
transitions transitions st st transitions transitions st st simulation main lemma concrete stage simulation simulate implements st transitions st st collect implements st type 
mode simulate 
lemma read follows st implements steps exists st st transitions st steps garbage collects st implements 
cases transition st st takes just step talt supports instruction expand multiple instructions 
cases garbage collection invoked identical 
determinism main lemma concrete stage determinism state eq state state type 
state eq state eq st st determinism transition st st transition st st state eq st st type 
relation state eq st st holds exactly st st identical 
lemma read follows st transitions st st transitions st st st identical 
safety say concrete state st ok st transitions zero steps st implements typed state ok state type 
ok ok st prove concrete progress preservation ok relevant notion lemma ok st transition st st type 
mode 
proof st okay steps st steps 
result immediate 
st st implements st progress simulate st takes step 
lemma ok st transition st st ok st type 
mode 
proof st ok steps st implements typed state steps 
suppose 
transition st st transitions st st 
determinism st st st ok st ok suppose 
st implements welltyped state progress preservation 
simulate transitions st st collect implements st 
collect ok typed st ok determinism st st st ok machine checkable proofs safety safety appear appendix remains define safety condition programs initial state st st implements typed state 
di cult details depend definition implements 
resulting lemma lemma initial ok initial state st implements st type 
mode initial ok 
may prove state reachable program ok lemma safety reachable st ok st type 
mode safety 
proof case reachable suppose initial state st initial ok st implements typed state 
st transitions zero steps st ok 
case reachable suppose reachable st transition st st induction st ok st ok safety immediate consequence safety 
completes proof 
complete safety proof second stage talt consists lines twelf code including comments 
takes approximately seconds check twelf pentium gigabyte ram 
metalogical approach advocate may conveniently derivations logics including type systems safety policies 
enables relatively rapid development foundational certified code 
costs metalogical approach things stand today 
twelf metalogic limited reasoning reasoning involving propositions form 
xm 
yn quantifier free 
skolemization propositions cast form rarely obstacle 
proof techniques notably logical relations cast form employed 
twelf developers exploring ways relax restriction available time 
second checking validity meta proof involves just type checking required checking validity proof logic proof checker twelf metalogic larger complicated checkers simpler logics appel 
result expected take longer develop degree trust system 
believe benefits metalogical approach compelling 
addition practical benefit rapid development metalogic holds promise making easier draw connections certified code systems 
example show safety policy expressed metalogic implies doing possible unify lines development certified code systems 
plan explore 
andrew appel amy felty 
semantic model types machine instructions code 
seventh acm symposium principles programming languages pages boston january 
andrew appel michael aaron stump roberto 
trustworthy proof checker 
technical report tr department computer science princeton university april 
andrew bernard peter lee 
temporal logic proof carrying code 
eighteenth international conference automated deduction volume lecture notes artificial intelligence pages copenhagen denmark july 
springer verlag 
hans 
boehm mark weiser 
garbage collection uncooperative environment 
software practice experience september 
rajkumar buyya mark baker editors 
international workshop grid computing volume lecture notes computer science bangalore india december 
springer verlag 
bor evan chang karl crary margaret robert harper jason tom murphy vii frank pfenning 
grid computing concert 
third international workshop grid computing volume lecture notes computer science pages baltimore maryland november 
christopher colby peter lee george necula fred blau 
certifying compiler java 
sigplan conference programming language design implementation pages vancouver british columbia june 
karl crary 
foundational typed assembly language 
thirtieth acm symposium principles programming languages pages new orleans louisiana january 
hamid zhong shao trifonov stefan ni 
syntactic approach foundational proof carrying code 
seventeenth ieee symposium logic computer science pages copenhagen denmark july 
robert harper 
simplified account polymorphic 
information processing letters 
follow note information processing letters 
robert harper furio honsell gordon plotkin 
framework defining logics 
journal acm january 
intel 
ia intel architecture software developer manual 
order numbers 
craig lee editor 
second international workshop grid computing volume lecture notes computer science denver colorado november 
springer verlag 
tim lindholm frank yellin 
java virtual machine specification 
addison wesley 
greg morrisett karl crary neal glew dan grossman richard samuels frederick smith david walker stephanie weirich steve zdancewic 
talx realistic typed assembly language 
second workshop compiler support system software atlanta may 
greg morrisett karl crary neal glew david walker 
stack typed assembly language 
journal functional programming january 
greg morrisett david walker karl crary neal glew 
system typed assembly language 
acm transactions programming languages systems may 
earlier version appeared symposium principles programming languages 
george necula 
proof carrying code 
fourth acm symposium principles programming languages pages paris january 
george necula peter lee 
safe kernel extensions run time checking 
second symposium operating systems design implementation pages seattle october 
george necula 
compiling proofs 
phd thesis carnegie mellon university school computer science pittsburgh pennsylvania september 
editor 
third international workshop grid computing volume lecture notes computer science baltimore maryland november 
springer verlag 
christine paulin mohring 
inductive definitions system coq rules properties 
international conference typed lambda calculi applications volume lecture notes computer science 
springer verlag 
frank pfenning 
logic programming lf logical framework 
gerard huet gordon plotkin editors logical frameworks pages 
cambridge university press 
frank pfenning 
implementing meta theory deductive systems 
eleventh international conference automated deduction volume lecture notes computer science pages saratoga springs new york june 
springer verlag 
frank pfenning carsten 
system description twelf meta logic framework deductive systems 
sixteenth international conference automated deduction volume lecture notes computer science pages trento italy july 
springer verlag 
frank pfenning carsten 
twelf user guide version 
available electronically www cs cmu edu twelf 
brigitte frank pfenning 
termination reduction checking logical framework 
workshop automation proofs mathematical induction june 
frank pfenning 
mode termination checking higher order logic programs 
european symposium programming volume lecture notes computer science pages linkoping sweden april 
springer verlag 
carsten 
automating meta theory deductive systems 
phd thesis carnegie mellon university school computer science pittsburgh pennsylvania october 
seti home 
ssl berkeley edu november 
tool interface standards committee 
executable linking format elf specification may 
com ftp manuals tools elf pdf 
andrew wright matthias felleisen 
syntactic approach type soundness 
information computation 
twelf proofs ok resp state eq st st ok st ok st type 
mode ok resp 
ok resp state eq ok st transition st st type 
mode 
ok transitions ok transitions 
ok st transition st st ok st type 
mode 
ok transitions ok transitions safety reachable st ok st type 
mode safety 
safety reachable ok transitions safety reachable safety reachable st transition st st type 
mode safety 
safety 
