model driven security process oriented systems david basin eth zurich zurich switzerland basin inf ethz ch torsten university freiburg freiburg germany informatik uni freiburg de model driven architecture approach increasing quality complex software systems creating highlevel system models automatically generating system architectures models 
show paradigm specialized call model driven security 
specialization designer builds system model security requirements automatically generates complete con gured security infrastructure 
propose modular approach constructing modeling languages supporting process combines languages modeling system design languages modeling security 
application constructing systems process models combine uml process design language security modeling language formalizing access control requirements 
models combined language automatically generate security architectures distributed applications 
categories subject descriptors management computing information systems security protection software en supported german fr und arbeit number mm ms 
authors responsible content publication 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
june como italy 
copyright acm 
design tools techniques computer aided software engineering object oriented design methods software engineering requirements speci cations languages methodologies tools general terms design languages security keywords model driven architecture metamodeling rbac security engineering uml 
processes security critical sense security requirements central part process requirements security mechanisms required realization 
examples range authorization military engagement enterprise purchase process coordination sequence user interface masks displayed user 
examples security policy quite complex may comprised collection requirements associated di erent points execution checked enforced points 
view process abstractly characterized system modes states policy de ned enforced sequence states run process 
policy may stipulate process evolves time state transitions allowed transitions permitted depend information available di erent states enterprise purchase process policy implemented various steps nuclear launch requiring authorization chain command 
considerations motivate questions address 
model designs security policies process oriented setting 
transition designs policies secure systems 
partial answer questions approach model driven architecture mda supports system development employing model centric generative development process 
mda creating design models tool support automatically generate substantial parts systems models 
context process modeling mda realized building automata oriented state chart model system case tool automatically generate process controller state transition system model 
contribution extend partial answer complete answer specializing mda model driven security 
approach building secure systems integrate security models uml process models automatically generate executable systems fully con gured security infrastructures integrated models 
closes gap process models security models gap software engineering security engineering 
means security tightly integrated system design fact increasing security maintainability resulting system 
respect security modeling language secureuml show integrate uml process models 
secureuml uml language modeling access control requirements generalizes access control rbac de ned 
secureuml provides language formalizing security policies protected resources leaves open nature resources components processes tasks process show combine generic security policy language process modeling language de ning dialect identi es process elements states actions processes protected resources 
result right start process execute parts process depends modeled access control policy 
result modeling language capable formalizing new kind model security design models integrate security design requirements 
chosen rbac uml foundations established popular standards supported platforms tools 
combining formalisms enables developers formalize access control context di erent kinds system models intuitive graphical uml notation 
respect show translate security design models implementations controller objects multi tier applications augmented access control infrastructure enforcing modeled access control policy 
java servlet architecture target platform generation evaluated approach prototype generator implemented 
related 
sandhu showed rbac serve access control model ow systems huang proposed ow authorization model 
focus processes tasks protected resources provides model dynamically assigning privileges subjects execution tasks 
contrast modeling language supports authorization constraints permissions 
bertino ferrari jaeger emphasized need authorization constraints role user assignments 
contrast authorization constraints de ned secureuml applicability permission depend system state attribute values object properties caller 
related uml security modeling 
epstein sandhu showed uml model rbac policies 
similarities theirs focus static aspects rbac model di erences di erent uml notation document application constraints preconditions plain english ocl 
show uml state machine elements incorporated de nition access control policy 
proposed uml extension called specifying secure systems 
allows annotate di erent uml diagrams security requirements validated formal veri cation techniques 
contrast focus specifying access control requirements class state chart diagrams develop tool support automatically generate systems obeying requirements 
introduced modeling language secureuml 
current simpli ed generalized formalism introduced concept dialects 
major di erence uses class diagrams system modeling language generates security infrastructures distributed components conforming enterprise javabeans standard current focus process modeling generate process controllers 
works complementary suggest wide scope secureuml idea model driven security 
organization 
section give brief overview relevant aspects uml introduce uml process design language 
de ne secureuml section integrate process design language de ning secureuml dialect section 
give example policy section explain generation secure web applications java servlet modeled policies section 
section report experience draw 

unified uml structural aspects systems de ned terms classes formalizing set objects common services properties behavior 
services described methods properties attributes associations behavior characterized state machine attached particular class 
additional constraints expressions object constraint language ocl 
uml serve foundation building domain speci languages de ning stereotypes introduce new language primitives subtyping uml core types tagged values represent new properties primitives 
model elements assigned types labeling assemble order special offers back buy add remove finish ordering items list sum currency control flow structure control ow ordering process corresponding stereotype 
give example domain speci language 
uml metamodeling language uml diagrams formalize syntax modeling language 
de ne secureuml way allows object oriented concepts language de nition 
example process design language give example process design language stereotyped classes de ne process types process type state machine describes corresponding behavior 
shows model ordering process online book club 
process type ordering shown upper left corner gure uml class stereotype process 
ordering attributes store ordered items total cost 
control ow process de ned state machine shown box labeled control flow 
rectangles circles represent states arrows represent transitions 
transitions may labeled name triggering event separated slash name action executed state transition 
example state club members browse club catalog add items order remove 
state accesses special ers restricted gold members users current order state additional data processed delivery address 
proceeds running example show requirement restricted access resource action role user permission secureuml metamodel requirements stated formal access control policy access control infrastructures generated enforce policy 
secureuml introduce provide foundation expressing policy 

secureuml de ne syntax semantics secureuml 
secureuml create visual models uml endow notation icons strings geometric gures 
distinguish kinds syntax call underlying syntax syntax notation concrete syntax 
give examples concrete syntax section 
syntax presents metamodel de nes syntax secureuml 
types user role permission relations directly adopted proposed rbac standard 
focus additions 
logical predicate attached permission association permission validity function system state dependent current time date attribute values 
consider informal policy section stating ordinary book club members may access special ers current order policy formalized giving permission role member state restricted authorization constraint attribute sum ordering process 
constraint ocl expression system model determines vocabulary classes methods extended additional symbol caller represents name user behalf action performed 
types resource action roughly correspond terms operation object formalize generic resource model serves foundation integrating secureuml system modeling languages 
resource base class model elements system modeling language represent protected resources processes process design language 
resource ers actions action belongs exactly resource denoted composite aggregation 
directly assign actions permission relation associating permissions resource action pairs 
di erentiate categories actions formalized action subtypes 
atomic actions low level actions mapped directly actions target platform action execute method 
contrast composite actions high level actions may direct counterparts target platform 
composite actions ordered group actions provide rich modeling vocabulary 
see semantics permission de ned composite action right perform action implies right perform transitively contained subactions 
semantics yields simple basis de ning useful high level actions 
suppose security pol di erent names prevent confusion similar terms object oriented community 
icy role permission read entity 
action hierarchy unambiguously formalize stipulating permission includes permission read value entity attribute execute side ect free method entity 
reason introducing action hierarchies simplify development generation rules su cient de ne rules atomic actions 
concrete resource types actions action hierarchy de ned part secureuml dialect integrates secureuml system development language 
section dialect combines secureuml process design language 
semantics secureuml formalizes access control decisions depend static assignments users permissions roles satisfaction authorization constraints current system state 
tricky bit de ning semantics formalizing satisfaction constraint relative system state varies time 
accomplish represent system state time point rst order structure 
authorization constraint expressed formula rst order logic signature determined system model 
question user allowed perform action cast logical decision problem ac formalizing access granted ac satis ed 
formula ac built constraints assigned permissions depends static assignments users permissions roles designated access control con guration 
basic elements access control con guration sets users roles permissions actions containing entries model element corresponding metamodel types user role permission action 
sets relations ua users roles pa roles permissions aa permissions actions contain tuples instance corresponding associations syntax secureuml 
abbreviate names associations additionally de ne partial order roles partial order actions sets roles actions respectively write superior roles actions left bigger side symbol 
role re exive transitive closure aggregation association role actions de ned analogously aggregation association 
system model uml model process modeling language de ne signature set sorts set typed function symbols including constants set typed predicate symbols 
contains sort class system model additionally sort users represents users system de ned access control con guration 
contains function symbol attribute side ect free method model return boolean value constant symbol self class class system model denoting object currently accessed 
additionally constant symbol caller denoting user behalf action performed time point contains predicate symbol side ect free method system model returns boolean value 
access control con guration de ne ac rst de ning auxiliary function users actions permissions fp permissions roles ua roles roles pa actions aa actions ag determines permissions user action 
introduce function constraint permissions maps permissions associated constraints translated rst order language associating formulae true unconstrained permissions 
setting de ne time user allowed capital letters 
due space restrictions omit translation rules ocl rst order logic 
statemachine process behavior resource state states transition effect target incoming source outgoing secureuml dialect process design resource type action subactions process activate recursive activate process activate recursive process states activate state activate recursive activate state execute actions outgoing transitions activate execute table actions action hierarchies dialect perform action ac ac constraint means access granted user permission corresponding formula constraint valid time note disjunction empty set results formula false 

dialect process design previously noted secureuml general leaves open nature protected resources 
general scheme combining secureuml system design language formalize dialect identi es primitives system modeling language secureuml resources assigns atomic composite actions action hierarchy 
combine secureuml proposed process design language de ne dialect interpret process type elements state machine hierarchy protected resources additionally de ne appropriate resource actions action hierarchy 
syntax dialect de ned metamodel shown 
elements process state protected resources denoted de ning types primitives subtypes base type resource secureuml metamodel see section 
stipulate actions ered resource types structure action hierarchy shown table de ning ocl invariants resource types 
example de ne process actions activate activate recursive composite action activate recursive process recursively includes actions listed states process 
action hierarchies general support de nition natural concise security policies 
example activate recursive permission process role privilege perform actions process 
alternatively right execute single state machine action de ned action execute 

example policy section explain uml notation illustrate semantics secureuml running example 
example uml model formalize security policy members club place orders members having activate recursive ordering activate activate recursive ordering items list sum currency member activate recursive self sum access control policy ordering process gold status special ers ordinary members may access special ers ordered items start declaring roles member represented classes stereotype 
role de ne member 
de ne permissions formalizing requirement informal policy description 
suggests permission represented association class stereotype permission connecting role uml class representing protected resource designated root resource permission 
attribute association class represents assignment action permission action identi ed resource name action name 
action name attribute type activate 
resource name stored tagged value identi er root resource 
format depends referenced resource type determined stereotype attribute 
example attribute stereotype stateaction identi er denotes action corresponding state process ordering 
stereotypes action de ned part dialect process design language stereotypes stateaction respectively label actions processes states actions 
rst requirement example policy formalized note sake simplicity omit additional arrangements handle case total sum ordinary items falls adding special items 
permission role member right perform actions activate ordering activate recursive state 
permission right activate state role member doing formalizes second requirement policy 
third requirement formalized permission augmented authorization constraint 
permission role member right perform activate recursive state 
constraint self sum restricts permission cases order expression de ned tagged value permission class show gure text box attached class 
example semantics illustrate semantics analyzing access control decisions users alice bob trying perform action activate state 
partial example access control con guration users roles permissions actions activate ua bob member alice actions denoted name resource name separated dot 
pa member aa roles member actions activate signature derived system model processes constant symbol self processes sort processes denotes currently accessed process sum processes real represents value attribute sum process instance 
predicate symbol real represents standard order real numbers 
suppose alice wants perform action explained time corresponding structure signature interpretation caller alice processes alice process bob self processes process alice sum process alice process bob formula satis ed structure order alice access built de nition section 
constraint self sum permission translated formula sum self processes real language de ned signature formula permission true 
access decision formalized true sum self processes real satis ed 
alternatively suppose bob tries perform action time corresponding structure di ers interpretation constant symbols self processes caller referring process bob bob respectively 
bob permission action sum self processes real required access 
bob items sum order constraint satis ed access denied 

generation implemented prototype generator construction secure web applications mda tool 
tool provides transformation function converting uml classes state machines controller classes web applications executed java servlet environment 
task extend function generate security infrastructure secureuml model elements 
java servlet popular technology developing web applications provides rich environment programming dynamic web pages 
technology supports rbac url authorization scheme enforces access control request arrives outside web server 
ill suited modern web applications built multiple servlets acting central entry point application 
entry point servlet acts dispatcher receives requests forwards depending application state servlets execute business logic 
standard authorization mechanism provides protection dispatcher 
overcome weakness generate access control infrastructures exploit programmatic access control mechanism servlets provide role assignments user retrieved servlet 
augmented transformation function generation rule produces java assertions adds preconditions methods process activation state activation action execution 
assertions form ap pr constraint forward unauthorized jsp rule similar equation de nes ac section permission represents alternative authorization execute action 
consider permissions users action determined function ap permission rst check user assigned roles pr denotes set roles assigned permission 
servlets support role inheritance transitive closure roles associated permission determined association 
constraint assigned permission evaluated 
request forwarded error page term forward unauthorized jsp access denied 
example assertion generated activate permission request permission request member request forward unauthorized jsp role check performed method role request object constraint translated java expressions accesses attributes side ect free methods controller 
example ocl constraint self sum translated java expression shown 
comparing code generated example section shows declarative semantics models preserved operational semantics java generation function 
user alice granted unrestricted access state rst part assertion right user bob depends return value method obtain current value controller attribute sum 

analysis carried number small medium scale experiments specifying controllers applications online shopping banking 
experiments show combination uml process models vocabulary rbac authorization constraints action hierarchies expressive naturally concisely describe complex security policies 
proposal provides concrete example close gap design models process models security models 
generative approach taken closes gap system design implementation 
doing number advantages 
guarantees conformance implementation model 
second eases system maintenance process security policy clearly formally documented evolution changes easily model level automatically propagated implementation 
nally enhances portability models technology independent migration new technologies realized changing generation rules models 
simple matter develop transformation functions translating models secure executable systems technologies ow management systems web application platforms 
promising areas 
natural step increase expressiveness secureuml design modeling language integrated 
example adding primitives modeling security aspects digital signatures auditing course generating corresponding infrastructures 
example supporting comprehensive process design language 
idea joining languages dialect sketched section provides way tackling problems independently combining solutions 
promising direction leverage fact security design models de ned semantics 
possible carry automatic property checking security design models detect correct design errors verify correctness model transformation process 


huang 
authorization model ows 
proceedings fifth european symposium research computer security rome italy volume lncs pages 
springer 
bertino ferrari 
approach speci cation enforcement authorization constraints ow management systems 
acm transactions information systems security february 
epstein sandhu 
uml approach role engineering 
proceedings th acm workshop role access control pages 
sandhu gavrila kuhn 
proposed nist standard role access control 
acm transactions information system security 
frankel 
model driven architecture tm applying mda tm enterprise computing 
john wiley sons 
hubert 
convergent architecture building model driven ee systems uml 
john wiley sons 
hunter 
java servlet programming nd edition 
reilly associates 
jaeger 
increasing importance constraints 
proceedings th acm workshop role access control pages 

extending uml secure systems development 
uml uni ed modeling language 
model engineering languages concepts tools 
th international conference dresden germany september october proceedings volume lncs pages 
springer 
sandhu editors 
secure role ow models volume ifip conference proceedings 
kluwer 
basin 
secureuml uml modeling language model driven security 
uml uni ed modeling language 
model engineering languages concepts tools 
th international conference dresden germany september october proceedings volume lncs pages 
springer 

enterprise javabeans rd edition 
reilly associates 
rumbaugh jacobson booch 
uni ed modeling language manual 
addison wesley 
