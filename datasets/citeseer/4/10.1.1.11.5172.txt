object teams improving modularity crosscutting collaborations stephan herrmann technical university berlin stephan cs tu berlin de 
investigate module concepts capturing multi object collaborations effectively implement crosscutting concerns reusable independently developed modules posteriori integration existing systems 
new kind collaboration module called object teams proposed combines best features existing approaches enhances concepts expressing crosscutting relations independent collaborations facilitates posteriori integration collaborations existing systems 
proposals modules larger classes emerged decade 
addition components defined standard component models corba component model enterprise java beans scope module proposals supporting called collaboration design 
approaches kind build insight design object oriented applications organized dimensions structural abstractions object types collaborations abstractions involved see fig 

generally speaking object involved collaborations single collaboration spanning objects participating object play class class class ing particular role collaboration 
definition object encapsulated collaboration role role role class standard object oriented languages provide appropri collaboration role role ate module construct capturing collaborations 
approaches imple collaboration role role mentation support collaboration fig 

dimensions classes collaborations design seek fill gap 
collaborations spanning classes evident collaboration modules crosscutting respect basic modular structure system dictated structure data 
observation motivated investigate usefulness techniques composing modules proposed context aspect oriented programming aop 
concerns considered crosscutting modular structure capturing concern encapsulated module cuts modules introduced concern 
interest supporting independent development reusable crosscutting concerns subsequently integrated existing system 
argue providing starting points existing module constructs fully meets needs 
proposals solves different subset problems road reusable collaboration modules 
combining different language extensions normally option seek develop integrated programming language uniform programming model provides powerful toolkit wide range issues relating definition composition collaboration modules 
example scenario illustrate features needed propose new kind collaboration module called object teams combines best features existing approaches enhances concepts expressing crosscutting relations independent collaborations posteriori integration collaborations existing systems 
object teams related handful approaches 
presenting object teams improvement particular approach mean randomly choosing starting point presentation 
avoid expecting reader detailed knowledge particular approach chosen neutral presentation introduces step step concepts comprise object teams model sect 

sect 
gives preliminary comparison approaches collaboration modules 
sect 
discusses related field aop 
sect 
gives summary looks current status development indicates areas 
object teams model minimal model flight booking system 
core model assumed exist containing classes passenger flight segment 
segments constituent parts flight 
passenger book complete flights different flights may share common segments cf 
fig 

step step introduce model bonus programme passengers collect credits booking flights 
restrict discus sion collection credits cov class passenger void book flight flight 
class flight segment segments 
methods omitted 
class segment void book passenger pass 
int 
fig 

features flight booking package ering collected credits spent 
unanticipated non invasive modular bonus programme elaborate concepts object teams 
picture intended system sketched fig 
uses uml extension ufa 
subscriber subscribe subscriber bonus subscriber passenger bonus subscriber adapt adapt fig 

module structure overview intended system collaborations confined objects passenger book flight 
flight segments segment key concept object teams kind module combines properties classes packages 
object team instantiable aggregation confined objects called roles 
bonus example team comprises objects persons participating bonus programme arbitrary items acquisition rewarded credit subscriber 
group objects reified compound object called team instance represents team contains participating roles 
aggregating role objects team instance may features 
example team instance accumulate credits earned due bonus item team level attribute accumulator 
level methods put take encapsulate access attribute 
looking fig 
lines define team level features 
lines show access team instance outer instance contained roles 
equivalent java style accessing outer instance instance inner class 
team class bonus int accumulator void put int credits accumulator credits int take int tmp accumulator accumulator return tmp class subscriber role class int void collect bonus take class role class int int implement default policy return void bonus put fig 

team definition bonus programme inheritance introduced example defining hierarchy teams bonus 
definition fig 
kept general 
contains details flight booking 
moving team concrete may example overridden include rounding operation airline policy team class extends bonus class subscriber reused modification class implicitly inherits bonus int int credit return credit team specialization may refine contained role classes 
add special syntax establishing role inheritance simply name equality 
implicit inheritance follows specific rules fully detailed 
super call implicit inheritance denoted avoiding ambiguity respect regular explicit inheritance 
team details defined model advanced bonus programme specially qualified members 
modeled specializations team consistent refinement involved classes 
polymorphism applies instances bonus vip contained role objects 
consistent refinement role types may refer may introduce covariance 
prohibiting substitution roles different teams types ensure covariant redefinitions introduce hole type system 
confined externalized role objects 
generally role instance confined enclosing team role objects escape enclosing scope ensured type system object teams 
exception rule variable outside team definition may instance bound type declaration final bonus new item item variable item declared type belonging 
instance defines team understanding 
final immutable statically ensured passed back team originates 
reader confused 
implementation method new mechanism sect 

way role passed outside team 
application code externalized role object aware teams declare variables roles members team team instance 
fig 
presents example technique implement action class graphical user interface clear collected credits subscriber object currently displayed user interface 
role base objects relation class extends action final context context subscriber subscriber final subscriber context subscriber void subscriber fig 

externalizing role gui focusing consistency objects team graph formed links team refinement team composed existing package application 
introduces distinction role base objects 
concerning relationship obligations met 
firstly ensure role base object 
role object exist base object 
secondly take new view substitutability categories objects 
possible supply object required vice versa 
dynamic composition 
ensure flexible composition bind team base package object inheritance known delegation 
role base relationship declared cf 
fig 
line 
merge types inheritance create subclass owing implicit inheritance require new class name role segment virtue role base link instances classes 
link ensures dynamism established removed runtime 
flexible multiplicity enabled number roles may refer base object 
object inheritance provides desirable flexibility careful break type system 
want clean interface role base object plus fulfilment guarantee regarding interface declare methods role acquire base object need guarantee instance providing interface associated 
declarative completeness posteriori integration 
straightforward approach declaring interface role base explicit typed link 
object teams hide link client programs 
clause gives information relation role class base class cf 
fig 
line 
responsibility runtime system ensure role object valid base object linked 
classes decoupled making explicit expected interface team 
require methods expected team declared methods 
refining team provide options realizing method may implemented place regular method refined role class declarative mapping existing method base class 
second option depends declaration restricts type associated base object 
fig 
gives example binding 
lines declare calls delegated base object type segment method class 
bindings key posteriori integration team partially implemented ontology 
refining team missing details filled names base classes provide required functionality 
team class bonus class int 
methods may 
team class extends bonus class segment 
details omitted 
fig 

role binding mismatches bridged techniques cover different inheritance structures see discussion similar setting class names method names parameter lists 
note model method acquired object inheritance declared binding clause 
prevents accidental name clashes occur classes developed independently combined 
hand explicit method acquisition practical succinct style binding declarations 
order distinguish kind method binding technique introduced sect 
coin notion callout binding signify role object binds method available locally calling associated base object 
levels type safety identified 
team type checked statically complete isolation 
refining team defines bindings base classes type checked interfaces packages integrated precisely expected interface team provided interface base package 
third level adds dynamic dimension ensured role object times bound proper base object type declared keyword 
elaborate paragraphs 
substitutability implicit translation 
objects flight segment classes mentioned may participate teams planning booking travel packages 
illustrate teams operate specific selective view world different focuses type instance level 
research programming views taught think different views means mapping functions 
introduce new kind substitutability implicit translation 
translations defined called lifting lowering 
lowering forwarding method call invoked base object 
lowering simply means stripping role base 
method executed knowledge role 
note contrasts normal object inheritance crucial maintain original self delegated calls 
address issue overriding role base links sect 

lifting required example segment instance appear team 
purpose wrapped decorated role 
important represented role instance team 
translation cache known role objects implicit control team instance 
translations performed transparently runtime system 
subtype polymorphism translation polymorphism exploited programmer similar way 
runtime system takes care difference 
substitutability role objects expected base object surprising 
polymorphism languages object inheritance 
reverse achieved lifting translation 
say base object fit playing role relation defined role base classes 
lifting translation object teams runtime uses ensure roles exist valid base object 
created role object may alter link base object 
lowering hand ensures role object escapes enclosing team instance explicitly externalized roles 
summarize role base relationship implicit lifting lowering mechanisms access role base link 
client code may explicitly modify link 
mechanisms concert ensure role consistent base object 
comparing proposals collaboration modules features far roughly correspond capabilities approaches composition refinement collaborations 
comprehensive discussion 
comparison terms major issues discussed far table 
object teams fulfil listed criteria 
object confinement borrowed concept family polymorphism object teams provide option flexibility 
approaches confine inner objects scope outer instance different teams may partially share objects lowering common part lifting different role 
member family born context entire lifetime 
contrast team membership dynamic issue 
role wraps intrinsic object independent team 
previous proposals employing role objects suffer explicit schizophrenia role base object 
object identity quite dubious concept setting 
object teams non issue comparing role base object meaningless exist disjoint worlds 
mixin layers dynamic view connectors pluggable composite adapters family polymorphism delegation layers collaboration refinement declarative method binding confined objects object inheritance dynamic composition multiple instance binding lifting lowering contrast notable similarities shown table features sections supported cited approaches 
callin binding weaving existing code introducing implicit lowering base calls role object implies apply forwarding mechanism true delegation late binding self 
precludes overriding base methods role 
desirable override base method role class consider overriding name equality inappropriate role base relationship independent development role base modules easily produce methods names intention overriding 
maintain separation name spaces support explicit overriding special case advice weaving style aspect oriented programming 
order emphasize difference callout binding style introduced new style binding called callin denoted reverse arrow bound role instructs base class call role 
binding styles callout callin seen perspective role object interacts external base object 
enable role class override base methods apply style aspect oriented language aspectj 
regard kind overriding insertion new code existing classes 
tradition clos aspectj allow new code inserted original method 
replacing original version possible aspectj 
example callin binding modify method book class segment shown fig 
line 
effect binding invocation book segment entails call instance obtained current call target lifting class 
replace style default keyword explicit control executing original version 
thinking role relation inheritance relation invoking original version equivalent super call 
employ similar syntax base super 
object teams support different styles inheritance regular inheritance extends implicit role inheritance name role base relationship 
multiple inheritance mechanisms avoid ambiguities precedence explicit declaration overriding 
style keyword invoking parent version super 
base calls limited methods bound replace callin methods marked callin allowing base call 
fig 
shows callin method lines binding line 
variant method collect fig 
bound callin effect 
callout bindings affect application team explicitly invoked callin bindings team class extends bonus class segment book class subscriber passenger callin void collect base collect invoke original version bonus take collect book overriding replace fig 

binding bonus flight booking system offer chance insert triggers application team specific behavior added 
example lucky triggers suffice weaving team base class passenger segment single method responsible booking action 
unique hook quantification style aop denote join point set methods advice woven 
scope discuss expressiveness declarations join points preliminary comparisons suggest object teams sublanguage join point definition suffices compared aspectj sacrificing goals 
adjusting signatures level adaptation covered object teams parameter lists 
posteriori integration fully supported possible bind methods different signatures 
model allows full signature parameter names included binding specification 
method binding may followed list parameter mappings void void void void note kinds binding may ignore provided parameters times appearing origin side arrow 
case callin binding ignored parameters discarded hidden binding 
illustrate consider invocation 
invocation cause overriding callin method executed mapped 
body call original automatically translated back retrieving hidden value binding context 
similar considerations hold return values bound methods 
parameter result mappings may contain simple calculations int int result result represents function result order illustrate direction data flow result values mapped arrow reverse method binding 
cases origin side arrow may expression target side parameter name 
context selection binding collaborations callout behavior defined conventionally modular style 
introducing callin weaving blend behavior different views 
concept introduced concerned selecting team definition take effect point program execution 
default declare team ineffective respect callin bindings activated 
activation may take place explicitly implicitly 
team may activated explicitly invoking special team instance 
turns callin bindings team corresponding deactivate call 
shorthand calls exists new block construct book effect execution block callin bindings instance effective 
obvious advice book triggered nested calls arbitrary nesting level book trigger callin bindings 
desired behavior complete method collect invoked overrides book passenger cf 
fig 

method collect passes control base method book 
invocation arbitrary number segments may booked segment role callin binding 
fig 
deposits corresponding credits attribute accumulator enclosing team instance 
method book class passenger finishes callin method collect gain control transfer credits team instance subscriber object 
note collaboration partially controlled objects class modified bonus programme 
situations require implicit activation team order maintain consistent system state 
calling team level method team activated method role objects may manipulated requires context active 
way example consider method class void passenger subscriber 
note lifting declared case parameter required method body object seen 
similar vein externalized role instance cf 
sect 
may trigger context activation 
invoking method role context active ensure activation 
illustrate feature continue scenario action class fig 

button included graphical user interface associated situation interface external team abundant specializes classes library swing refers instance externalized role team 
said button pressed user calls externalized role enclosing team activated order set appropriate context execution role methods 
result callout calls occur corresponding team active 
method bound callout template method hooks overridden callin expected behavior hooks call back team automatically ensured 
experiments lac shown certain class problems known jumping aspects problem avoided re entrance team explicitly disabled temporarily deactivating team callout 
fine tuned support activation lifting provided built class team implicit super class teams 
static weaving 
team active permanently modify application may declared static 
means team instances created 
features team static features 
secondly importantly callin code static team unconditionally woven application 
team fig 
adds role passenger object statically line 
callin checks context registered passenger 
positive case original version called appropriate activation context line called unmodified line 
team obsolete explicit activation previous page 
completely operational modular implementation bonus programme modification base package main program 
fig 
illustrates subscription differentiated inheritance hierarchy 
remarks method initial experience programming model object teams suggests activation dynamic teams typically realized static team 
way concern activation class concern easily implemented language 
approach flexible keyword approach aspectj cf :10.1.1.21.5662:10.1.1.21.5662

time provides better support reuse mere design patterns implemented reusable way 
team generalized attaching arbitrary contexts arbitrary base objects 
simple succinct bindings general team definition context activation woven arbitrary join points 
static team class class passenger team null callin void null base invoke context base invoke unmodified book static void passenger team fig 

static entry trigger mechanism 
predecessor current model aspectual components strict distinction definition collaboration connector binds application 
technically distinction needed fact observed situations partial team definitions partial bindings helpful 
allow implementation team mixed binding details 
style programming object teams team implementing collaboration define module specialization team acts connector binds classes methods roles base 
summary features object teams provide high expressiveness wide range design styles 
ideas findings different publications language prototypes influenced genesis object teams 
combining positive properties programming languages care taken bloat language different concepts easily outweigh intended improvements 
consider object teams comparably lean model 
order support claim summarize features object teams sections 
list features visible developers language 
second focus features implemented compiler runtime system 
concepts far need learned developers role objects dependent objects reside enclosing team instance need base instance 
callout bindings declare forwarding role instance base object 
callin bindings declare overriding team definition may alter behavior base classes 
team activation turns callin bindings 
features deduced directly integrating concepts standard object oriented principles 
inheritance applied team definitions super calls dimensions inheritance 
implementation methods provided class inheritance callout binding 
taken care compiler runtime system base classes team definitions statically type checked modular way 
bindings allowed type safe manner 
includes type safe adjustments method signatures 
lifting lowering translations implicitly inserted data flows enter leave team 
teams implicitly activated control flow enters team 
related object teams aim implementing collaboration designs 
roots adaptive plug play components pca aspectual components 
influenced hyper respect separation concern definition concern composition capabilities demand restructuring 
influence aspectj concerns technique weaving existing code :10.1.1.21.5662:10.1.1.21.5662:10.1.1.21.5662
virtual classes gbeta especially family polymorphism shaped type system object teams 
delegation layers added new look combining collaboration design family polymorphism delegation 
clear object teams share properties mentioned approaches 
comparison approaches collaboration modules 
final discussion focus differences approaches field aspect oriented software development 
sublanguage specifying joint points aspectj sophisticated giving rise criticism language bloat :10.1.1.21.5662:10.1.1.21.5662
hand object teams provide better decoupling modularization flexibility 
team role binding completely unaware base package able base behavior methods bound callout 
capability callout binding missing aspectj 
aspectj provide modules comparable teams 
aspectj program control instantiating activating aspects run time 
aspectj requires source code classes aspects woven 
object teams implemented byte code weaving load time 
concerns hyper equally independent base aspect distinction 
concerns merged compile time 
contrast teams class entities persist run time mentioned capability multiple instantiation activation 
integration hyper concerns specified declarative composition rules 
object team connector uses callout callin binding regular method implementation 
customized combination different versions merged method achieved super base calls 
direct ancestry proposals object teams advances aspectual components misleadingly subsume callin callout methods expected methods distinguish collaborations connectors 
object teams explicit callin callout distinction imperative different rules hold kinds methods bindings 
contrast collaboration connector distinction just matter style may blurred applications loss safety structure 
aspectual components clear dynamic issues regarding instantiation activation collaborations lack notions lifting lowering 
adaptive plug play components pca regarded kind object teams callin binding team activation 
feature declarative bindings 
pca notably implementation jade support multiple customizes clauses correspond implicit inheritance object teams 
explicit variant customizes yields proliferation class names allows compose collaborations step 
lac published implementation aspectual components model 
lac seen direct predecessor object teams details orthogonality standard object oriented concepts teams settled cited workshop 
status development investigated module concepts capturing collaborations effectively implement crosscutting concerns reusable independently developed modules posteriori integrated existing systems 
proposed new kind collaboration module called object teams combines best features existing approaches enhances concepts expressing crosscutting relations independent collaborations facilitates posteriori integration collaborations existing systems 
prototype implementation predecessor model object teams called lac exists 
transition predecessor model implemented lac object teams terminology concepts consolidated 
object teams improve orthogonality standard object oriented techniques specific enhancements 
results greater flexibility terms combining various mechanisms smaller number new features keywords learned programmers 
compiler object teams extension java currently development shows feasibility techniques 
due usable real application fall cf 
web site 
case studies assessing usefulness object teams progress 
looked application specific domain 
application typical problems yielded encouraging results research including development various supporting tools needed final assessment regarding real world usefulness object teams 
possible contributions mira mezini including ideas put forward intensive discussions issues 
local colleagues students contributed object teams discussions implementations jan wloka christof binder christine matthias florian hacker carsten pfeiffer marco 


de de 
jumping aspects 
position workshop aspects dimensions concerns ecoop june 

souza wills 
objects components frameworks uml catalysis approach 
addison 

ernst 
family polymorphism 
proc 
ecoop number lncs pages 
springer verlag 

harrison ossher 
subject oriented programming critique pure objects 
proc 
oopsla pages 
acm 

haupt 
jade entwurf und implementierung eines zur als erweiterung der programmiersprache java 
diploma thesis universit siegen www st informatik tu darmstadt de projects jade december 

herrmann mezini 
case study multidimensional separation concerns software engineering environments 
proc 
oopsla 
acm 

herrmann mezini 
combining composition styles evolvable language lac 
proc 
workshop nd icse 

stephan herrmann 
composable designs ufa 
workshop aspect oriented modeling uml st intl 
conference aspect oriented software development 

kiczales hugunin kersten palm 
overview aspectj 
proc 
th ecoop number lncs pages 
springer verlag 

kiczales lamping mendhekar maeda lopes loingtier irwin 
aspect oriented programming 
proceedings ecoop number lncs pages 

lieberherr lorenz mezini 
programming aspectual components 
technical report northeastern university apr 

mezini lieberherr 
adaptive plug play components evolutionary software development 
proc 
oopsla volume sigplan notices pages 
acm 

mezini lieberherr 
software architecture component technology state art research practice chapter component integration pluggable composite adapters 
aksit ed 
software architecture component technology state art research practice 
kluwer academic publishers 

object teams home page 
www org 

ostermann 
dynamically composable collaborations delegation layers 
proc 
ecoop lncs 
springer verlag 


working objects software engineering method 
prentice hall 

smaragdakis batory 
implementing layered designs mixin layers 
proc 
ecoop number lncs pages 
springer verlag 

tarr ossher 
hyper user installation manual www research ibm com hyperspace 
ibm 

notkin 
role components implement collaboration design 
proc 
oopsla volume acm sigplan notices 
