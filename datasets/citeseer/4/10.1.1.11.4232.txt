refactoring browser uml marko thorsten sturm ag vogt str 
hamburg sturm 
de 
refactoring corner stone number agile processes extreme programming xp 
tools automatic support appear usually referred refactoring browsers 
extensions editors ides operate code 
discusses idea refactoring extended uml models presents refactoring browser integrated uml modelling tool 
refactorings static architecture dynamic behaviour 
refactorings gained wide attention especially xp agile process community 
idea formalized opdyke brant popular beck described depth fowler 
refactorings techniques recipes improve inner structure software changing outward behaviour 
xp agile processes propose develop software iterative steps wearing different hats 
desired behaviour implemented second structure code improved changing behaviour 
way making changes easier code structure simpler developer agile 
refactorings describe changed modification done altering semantics problems look doing 
refactoring browser help automate described steps warn possible conflicts 
refactorings usually discussed context program code 
refactoring browsers knowledge operate code 
surprisingly number refactorings explained uml notations 
led question refactorings directly defined level models code refactoring browsers implemented context uml case tools ides 
describes outcome research discusses results 
section discuss refactorings sense level models additional refactorings sense code level help model level 
section describes refactorings implemented tool 
section gives example refactorings refactoring browser applied section rounds 
refactorings uml roundtrip engineering reached level maturity uml models program code perceived different representations artifact simply called software 
environment mind concept refactoring generalized improving structure software just code representation 
refactorings natural apply code representation level 
refactoring extract method intended separate code blocks long method bodies methods naturally applies code 
rename class move method identical effect applied program code uml model 
extract interface fit better uml representation 
defining kinds refactorings models providing refactoring browser uml tools beneficial graphically oriented developers 
refactorings thought context code new refactorings benefits tool support applied models 
focuses refactorings apply structure information software apparent code 
conflict detection detection possible conflicts crucial part process refactoring 
martin fowler encourages unit tests prevent unwanted side effects slipping working code 
leaves user find side effects acceptable specific situation 
focus automatic detection conflicts 
may introduce lots potential problems code applied incorrectly 
proposed refactorings discussed closely examined determine conflicts caused 
preconditions defined single refactoring mapped appropriate messages 
currently selected model elements tested meet preconditions selected refactoring 
way list broken preconditions created refactoring corresponding messages user conflicts 
conflicts grouped warnings errors 
warnings indicate refactoring cause side effect leaving model formed state 
example renaming method overrides superclasses method may behaviour preserving cases major unwanted design change 
resulting code case remain 
errors hand indicate operation cause damage model break consistency 
uml refactorings detect conflicts intended refactoring alter model behaviour 
mainly report major model changes 
come conflicts user able override refactoring browser suggestions 
enables refactorings row restoring model behaviour 
static structure refactorings uml class diagrams design visualize static architecture software system 
clear refactorings known code oriented refactoring directly applied class diagrams 
code linear representation may display dependencies structure uml dimensional graphical representation 
improvements architectural structure may simpler spot class diagram code editor 
possible refactoring identified consequences application may overviewed better uml 
due mesh dependencies object oriented software structures refactorings renaming deletion moving methods classes attributes effects just local change 
problems caused inheritance polymorphism 
renaming method example effect method deeper inheritance hierarchy overridden new name overridden anymore old name 
refactorings change structure replacement inheritance delegation extraction common interface set classes apparent model level 
important note uml consists just class diagram 
class diagrams probably important certainly part uml 
refactorings described literature far apply static structure effects apparent class diagram 
class diagram able express dynamic behaviour business process business requirements 
power uml express dynamic behaviour diagrams gives better overview especially complex behavioral aspects focussing just important part software 
having trace call sequence scenario cause switching number classes code editor complete scenario expressed sequence collaboration diagram 
view aspects belong software spreading 
combination mature roundtrip engineering features models refactoring software combines power agile processes expressiveness uml 
refactorings possible types diagrams defined uml want restrict activity diagrams state charts class diagrams 
state machine refactorings state diagrams express protocol set operations class 
defines order operations called orders calls allowed 
refactoring protocol means changing way protocol changing protocol 
merge states form set states single 
inner transitions states removed external transitions redirected new state internal transitions actions moved new state 
warnings generated selected states transitions states outside group entry action located virtual initial state selected group 
decompose sequential composite state helps moving contained elements composite states level removing 
entry moved appropriate states transactions leaving reaching composite state redirected copied necessary 
warnings issued exit exit actions detected activity removed 
refactoring mainly conjunction form composite state 
form composite state creates new composite state moves selected states 
common transitions extracted border new state appropriate default completion states linked initial state completion transition 
warnings generated default state candidate default state completion state equally suitable 
concurrent composite state creates product automaton concurrent state removes contained elements concur rent state 
mainly conjunction merge states simplify complex models preserving behaviour 
refactoring applicable formed concurrent states checks initial states region targeted fork directly 
activity graph refactorings activity graphs describe ways running processes 
focussed stepwise execution activities flow objects 
refactoring graph means changing execution order activities way objects moving process changing result 
actions concurrent creates fork join moves sequential groups actions enabling concurrent execution 
refactoring detects modification leads formed model checking errors transitions groups proposer factoring fig 

user interface refactoring browser states having transition path state group 
warnings issued group writes variable accessed group 
concurrent actions removes pair fork join links enclosed groups action states 
warnings generated commonly variables concurrent algorithm sequentialized detection suite checks transitions 
refactoring browser uml refactorings described implemented refactoring browser uml 
implementation aspects description developed interface described section 
uml graphical notation uml tools usually just specialized drawing tools 
code editors usually simply advanced text editors uml editors semantically rich internal rep resentation repository tools standardized uml meta model 
refactorings uml models exploit operate meta model structure 
implementation uml refactoring browser straight forward code predefined meta structure may exist 
implementation described done part tool po uml originates open source project argouml 
repository directly generated uml meta model 
refactor ings implemented controllers model 
tool implements refactorings described state machines activity graphs 
static structure refactorings implemented level method signatures 
refactorings covering method bodies implemented due missing notation uml 
user interface code refactoring browsers simply implemented context menus 
chosen differently implemented pane seen time diagram navigation pane 
consists compartments 
compartment refactorings proposed current selection 
example method selected proposes refactoring method 
time superclass selected proposer suggests refactoring move method 
selecting refactoring displays short description refactoring effects dialog entering parameters new name application deduced methods 
third section shows possible conflicts problems occur refactoring executed 
holds button execute refactoring undo 
static structure refactorings challenging part check possible conflicts 
displayed apply including concrete source problem 
conflicts warnings errors 
errors determine concrete problems break consistency model refactoring executed 
warnings give hints possible problems occuring side effects renaming method superclass overwritten subclass 
refactorings errors executed 
user choose overrule warnings errors execute refactoring anyway 
useful refactorings restore consistency model designated behaviour 
example small examples show refactorings uml model help improving design usage refactoring browser helps avoiding refactoring pitfalls addressing possible conflicts 
scenario taken default example shipped poseidon uml 
client person string fig 

client structure imaginary called selling digital products internet 
handling orders customer relations modeled sample uml model 
context example limited modeling verification new customer 
shows potential refactorings structure behaviour modeled software 
static structure refactoring client address fig 

client structure refactoring part uml model modeling customer 
classes person operation returning string representation person postal address customer associations 
names ends associations see fig 

factoring delete method nar qi help tt non 
method ci cli nt fig 

errors client structure refactoring having multiple associations class customer association name equal class name looks name class perfect 
refactoring rename class name class changed address better reflect usage see fig 

simple refactoring conflicts expected occur 
deleting operation class customer causes error 
class longer override operation person 

please note errors red warnings pre sented blue 
click short name conflict error warning shows detailed description reasons raising see fig 

state machine refactoring requested entry fig 

address verification activity verification new customer delivery address started requesting appropriate address validating received information 
address starts state verified steps verification process requested retrieved returns verified moves verified depending result verification see fig 

states requested retrieved sequential merging change logic process 
refactoring merge states merges new state named requested 
better reflect purpose changed name verifying second step refactoring browser see fig 

state requested entry action exit action 
having exit action causes conflict refactoring 
displayed refactoring browser short explanation 
exit action appropriate merged state exit action state selected sequence 
user rethink ot verified verified try fig 

address verification refactoring wants execute refactoring solve conflict 
case ignore conflict exit action merged state 
fig 

conflicts address verification refactoring activity graph refactoring complete process verification new customer expressed activity diagram 
verification starts verifying address followed verifying delivery address see fig 

verified data completely independent defined sequence cause delayed verification delivery address 
parts verification process dependencies refactoring actions concurrent improve model see fig 

fig 

client verification activity verify email verify delivery fig 

client verification refactoring action states verify verify delivery address variable called verification refactoring browser detects conflict 
value variable concurrent action state changing 
variable verification incremented ignore conflict continue refactoring 
probleme fig 

conflicts client verification refactoring example shows room improvement refactorings static structure model behaviour expressed state activity diagrams 
find tool highly valuable start day today modelling currently limitations 
described refactorings change model affect generated code 
combination elaborated code generators described 
helps increasing degree automation development phases focussed models code 
long modeling method bodies covered uml specification purely model refactoring approaches provide full power refactorings described 
plan combine refactoring tool models refactoring tool operating code 
refactoring reflected model parts code covered model 
definition errors warnings single refactoring challenging task 
currently defined uml standardization best practices 
development sort methodology cookbook leverage maturity usefulness 
usage meta models code constantly evolving 
upcoming try fill current gap java metadata interface uml standardization 
refactor ing tools reflect melting uml code refactorings model refactorings overcome mentioned limitations 
tenets refactoring repeated testing ensure break implemented behaviour 
certainly difficult models 
models taken point executable testable 
especially state diagrams effectively transformed code 
helps visualize running system improves automated testing test reached states documentation 
refactoring disciplined process improving structure program code changing behaviour generalized applied uml models 
known refactorings directly transferred implemented case tools 
finding possible refactorings static structure may simpler dimensional graphical representation 
addition new refactorings activity graphs state machines 
combining refactoring level uml models roundtrip engineering allows uml agile development processes 
described fully implemented prototype 
developed plug uml case tool poseidon uml distributed 
developed cooperation university hamburg parties 
community argouml open source project 
ag 
poseidon uml 
www 

corn 
kent beck 
extreme programming explained embracing change 
addison wesley 
marko thorsten sturm 
tools support model driven software engineering 
evans editor proceedings practical uml rigorous development methods 
workshop uml conference 
gesellschaft informatik 
john brant don roberts 
refactoring browser 
st www 
cs 
uiuc 
edu brant ref html argouml community 
argouml object oriented design tool cognitive support 
www 
argouml 
org 
marko extreme modeling 
editors extreme programming examined page ff 
addison wesley 
martin fowler 
refactoring home page 
www 
ref 
org 
martin fowler 
refactoring improving design existing code 
addison wesley 

refactoring uml 
master thesis university hamburg ag 
object management group 
unified modeling language 
www 
omg 
org uml 
william opdyke 
refactoring object oriented frameworks 
phd thesis university illinois urbana champaign 
java community process 
java metadata interface 
www jcp 
org jsr detail jsp 
