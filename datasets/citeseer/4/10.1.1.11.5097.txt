distributed nature cooperative seriously carla simone kjeld schmidt dept computer sciences university torino corso torino italy 
email simone di center tele information technical university denmark dk lyngby denmark 
email schmidt cti dtu dk evolve process local adaptations 
challenge provide cscw environment cscw facilities effective viable inherently distributed nature cooperative matched radically distributed environment 
basis scenario derived field studies describes cscw environment supports distributed construction malleable linkable coordination mechanisms 
cooperative constituted mutual interdependence activities 
involving multiple actors cooperative inherently distributed 
agent knowing powerful 
actors act interact basis partial knowledge ac partially autonomous 
myriad interdependent distributed activities articulated prevent cooperative effort apt expression 
coordinated aligned meshed obvious fundamental way facilitate mutual awareness actors instance having actors working room providing multi media emulation shared space 
task interdependencies order complexity provision facilities mutual awareness ad hoc interactions insufficient 
means required task interdependencies tractable 
call means coordination mechanisms 
coordination mechanism simply put coordinative protocol accompanying artifact instance standard operating procedure supported certain form 
coordination mechanism offers precomputation task interdependencies instrumental reducing space possibilities facing competent actor situation 
distributed nature cooperative coordination mechanisms 
merely local temporary closures assist actors managing overwhelming complexity 
distributed way supports construction computational coordination mechanisms robust view distributed nature cooperative 

real world scenario consider team software designers engaged developing large software system 
design task poses major challenge established routines conventions handling cooperative design effort size ensuring individual designers contributions inte 
order manage complexity project software designers devised introduced number procedures conventions related artifacts help coordinate cooperative effort 
sake simplicity limit scenario artifacts associated procedures conventions context software testing 
project schedule 
project schedule introduced artifact capture display relationships actors responsibilities tasks deadlines 
mainly related particular notion platform period software designers coding integrating bits pieces 
platform period designers appointed platform master implies responsible updating information changes software ensuring software tested corrected released 
software released platform development platform master updates project schedule revised plans tasks period 
directory 
directory structure software module repository provides classification scheme enabling distributed storage retrieval tested software scenario field studies foss electric denmark 
field studies different aspects major design effort project investigated 
field study findings reported 
proceedings th euromicro workshop parallel distributed processing madrid january ieee computer society press los alamitos calif pp 
modules 
addition provides common standardized conceptualization essential aspects field software architecture 
designers relate communicating coordinating ties 
bug report form 
bug report form developed handle process software testing artifact simple form 
new bug detected involved testing software new bug report form initiated filled preliminary description diagnosis problem 
designer responsible diagnosing classifying reported bugs determines presumably module implication designer responsible module specifies platform integration period bug corrected classifies bug perceived severity seen software reliability perspective 
designer responsible fixing problems reporting back platform master designer responsible software module integration verification period 
binder 
bug forms filed public repository binder organized status bugs 
forms collected binder successively re classified re filed decisions designers messages concerning specific bugs results verification reported corrections platform integration period time time software designers experience situations need modify protocol devised adopted provide adequate coordination 
modifications may merely local temporary 
example tester occasionally inform software designer directly detected bug filling bug report form initiating new instance protocol 
hand actors may want change protocol 
software designers may example introduce role project manager protocol 
obvious description different protocols interact sense information event notifications generated locally propagate protocols order meet integration objectives solve critical situations 

analysis assemblage protocols described scenario course modelled integrated workflow 
utterly misleading view distributed nature cooperative 
protocols devised serve specific purposes setting 
address narrow set coordinative activities 
local temporary closures 
course protocols intersect various points need aligned actors course 
anyway protocols interlaced loosely coupled 
protocol constructed relatively independently 
designing protocol specific purpose actors need overview totality processes setting large 
fact settings scenario anybody overview 
protocols designed introduced serve limited purposes array interlaced protocols arrangement large designed maintained distributed manner 
evolves process local actions interactions 
furthermore specific crucial relationship protocol artifact absent concept workflows 
protocol objectified artifact gives certain permanence protocol 
conveys protocol situation independent manner 
artifact serves intermediary actors mediates information state changes protocol executed 
case bug report example state artifact changes changing state protocol 
case workflow form transferred actor change location transfers particular actor specific responsibility specific action particular bug 
step execution protocol form annotated updated form retains conveys change state protocol actors 
change state protocol induced actor tester reporting bug example conveyed actors means visible durable change artifact 
far artifact said provide shared space popular cscw term albeit important restrictions highly restricted space structure reflects salient features protocol shared locally context particular protocol 
close relationship protocol artifact local control execution evolution protocol feasible 
protocol artifact delimits scope protocol tangible way 
artifact facilitates distributed incremental evolution entire population protocols 
due artifact facilitates restricted focused mutual awareness actors inter alia enables decide deviate protocol face contingencies 
short artifact plays crucial role protocol representing salient features mediating state protocol artifact protocol hand glove 

computational coordination mechanisms defined computational coordination mechanism software device artifact aspects protocol coordination mechanism incorporated computational form changes state protocol induced actor conveyed computational artifact actors accordance protocol 
versatility terms composition able construct different ways interaction artifact protocol 
versatility terms interaction mechanisms support different kinds linking 
support distributed control executions evolution mechanisms including local control propagation changes 
ariadne environment designed meet requirements 
computational coordination mechanism meet requirements 
ariadne environment firstly coordination mechanisms malleable 
actors able define protocol new computational coordination mechanism scenario 
possible actors redefine making lasting modification able meet changing organizational requirements instance order introduce new role bug report protocol 
furthermore actors able control execution protocol local temporary modifications behavior cope unforeseen contingencies 
example scenario observed tester occasionally inform software designer directly detected bug filling bug report form initiating new instance protocol 
feasible circumvent protocol ensure reporting bugs corrections 
accordingly order actors able define specify control execution mechanism protocol visible actors semantic level articulation accessible expressed terms meaningful competent members cooperative arrangement 
allow incomplete initial specification protocol possible specify behavior computational coordination mecha nism incrementally executed 
furthermore evolution coordination mechanisms continual adaptation distributed effort 
cscw environment support local modifications protocol accordingly local control propagation changes 
computational coordination mechanism constructed way linked coordination mechanisms wider setting 
short able construct computational coordination mechanisms meet requirements need highly versatile environment versatility terms control strategies procedures vs classification schemes explicit prescriptions vs implicit constraints 
versatility terms protocol modelling document flow control flow communication flow artifacts different nature pose quite different modeling problems various protocols 
ariadne environment specifically dedicated construction maintenance execution mutual linking computational coordination mechanisms governing cooperative activities respect target applications 
ariadne contains notation system symbols rules application primitives necessary notation 

notation modeling coordination mechanisms protocols required versatility achieved identification categories flexibly composed set predefined relational structures 
crucial point determine categories semantic levels articulation means coordinative protocols expressed 
proposed set categories derived studies protocols designed actors everyday activities shown 
purpose developing ariadne necessary assume identified set categories articulation complete definite preclude notation evolving time 
role categories subscribe policies organizational context responsible resource responsible responsible allocated categorizes nominal human resource allocated task interaction conceptual structure assigned assumed realizes realized defines classifies actor action monitors state field done belongs actual committed actor initiates initiated activity interaction action deployed resource 
elemental categories articulation model cross relations 
scope describe categories 
understood intuitively 
category termed conceptual structures denotes various constructs needed express conceptualizations field definitions classifications members cooperative ensemble adopted able refer objects processes common field orderly fashion 
categories articulation elements basic building blocks available ariadne 
notation represents properties categories cross attributes element described detail 
opposed notations constructing protocols workflow systems cscw applications general ariadne propose particular approach representation protocols 
available designer wide spectrum possibilities 
allows user combine categories required protocol construction means general relational structures representing various relations causal hierarchical instrumental categories 
structures graphs means model non deterministic behavior relations partial orders represent distributed behavior 
possibility typically protocol described combination elemental protocols associated roles interacting active artifact category called interaction 
notice avoid relational structures exploit communication capabilities categories notation 
typically case activation responsibilities policies tasks roles resources protocols naturally described terms constraints 
support fundamental role artifacts coordination mechanisms discussed previous sections notation furthermore contains specific features allowing designer define called active artifact 
active artifact defined data structure artifact communication capabilities active sense actively participates coordination characterized primitives available 
programming environment user interface basic elements formal structures categories articulation grammars primitives mechanisms primitives instances computational coordination mechanisms types mutual awareness context field cooperative arrangement 
layered structure ariadne context levels hierarchical going level level identical refinement information handled level different nature 
fact level possible define modify grammar determining expressive power language defining class computational coordination mechanisms level 
space possibility grammars defined level determined set categories articulation set formal structures 
level possible define modify mechanism chosen grammar permanent changes existing protocol part evolutionary design 
level possible instantiate activate mechanism particular situation incremental fashion 
primitives level allow management local changes 
distinction level level notation recognized cscw applications level unique 
fundamental rationale level provides ariadne versatility required cope immense variety artifacts protocols interactions 
ariadne impose preconceived modeling approach 
ariadne allows designers adopt particular combination categories articulation get desired expressive power 
distributed behavior components protocols 
arrows right hand side denote illustrated scenario categories required construction particular mechanism 
way achieving versatility allow designer select elements needed construct intended mechanism particular protocol 
depending characteristics protocol individual preferences designer may want adopt specific approach example approach focusing flow resources tasks roles flow control tasks communication patterns roles 

primitives ariadne ariadne environment structured logical levels called see central part connections mechanism field cooperative arrangement context 
definition specification protocol related particular objects field arrangement types level instances level 
ariadne explicitly requires specify clear interface computational coordination mechanisms context 
hand interface plays crucial role borderline realm articulation constructed adapted ariadne realm objects processes articulated 
distinction implicit underestimated cscw literature put evidence framework called coordination languages models 

ariadne 
linking coordination mechanisms sake illustration suppose designer scenario shows building single distributed mechanisms crucial aspect considered express flexible composition coordination mechanisms order support cooperation groups people locally supported particular coordination mechanisms 
versatility modelling solved providing high degree flexibility definition grammars versatility composition solved identification basic modes coordination mechanisms shall see components interoperate 
fact modes allow standardization interface outside world element notation enhancing compositionality 
comparative analysis field study findings led identification basic modes means components mech linked communication 
inscription mode mechanism provides information current state mechanism conversely mechanism obtains information current state mechanism 
inscription compulsory voluntary convey mandatory syn request just awareness 
subscription mode mechanism behavior mechanisms part behavior example activating coordination mechanism 
prescription mode mechanism writes definition target mechanism behavior 
fact prescription mode mechanism change nominal definition mechanism definition protocol actual specification ex ample enforcing special state execution 
subscription inscription modes apply mechanism components categories artifacts protocols express interactions 
example resource accessed subscription mode activate policies governing usage 
compulsory inscription mode typically expresses reading writing artifact protocols order acquire visible imperative information 
voluntary inscription mode typically components artifacts create awareness internal changes protocols 
conversely prescription mode applies actors roles coordination mechanisms prescription security reasons requires responsible actor software designers scenario wants construct various coordination mechanisms scenario ariadne 
bug form binder mechanisms contain protocols characterized number involved roles behave recurrent control flow platform integration convention protocols synchronized way verification tasks prescribed instances bug report form mechanism start parallel 
available grammars designer decides grammar able express distributed behaviors terms clusters formally partial orders tasks interactions associated roles 
start exploit grammar describe behavior involved roles interactions express communication bug report form arti fact 
features grammar describing artifacts designer defines data structure suitable representing information form 
addition fills section expressing communication capabilities account bug report form mechanism flow control governing behavior involved roles mediated related artifact pattern role updates artifact recognizes event triggers enact ment behavior pertinent roles 
grammar construct binder mechanism pose similar modeling requirements 
binder artifact deserves comments coordination mechanisms requires trivial integration artifact protocols bug report form mechanisms 
words merely data structure structure coordination mechanisms created bug form 
order model situation grammar allows data structure artifact represented list frames slot containing identification bug report form value link related coordination mechanism 
binder master organize list different criteria depending view severity timing deemed suitable current stage project simply represented sending message order activate suitable function 
delegate action protocols 
suppose designer construct interaction element explicitly devoted express communication protocols mechanisms contains attribute carrying values trigger different behaviors semantics rationale 
project schedule mechanism 
contains just role schedule master behavior aptly described exchange documents roles order define modify plan activities interaction project schedule artifact order monitor execution single activity 
designer thinks suitable way describe protocol represent flow suitable documents involved roles 
previous grammar adequate 
fortunately defined desired grammar constituted non deterministic graph nodes arcs labeled roles information resources respectively 
information resources specialized different types planning documents example proposal modification assignment 
interactions schedule master role project schedule artifact exploit feature grammar fact roles defined terms tasks responsible attributed activities needed accomplishment case just interaction artifact 
constructed similar way bug report form artifact 
addition scenario shows classification schema directory 
sense similar binder mechanism software module represented node schema 
main difference directory artifact described graph representing relationships modules instance hypertext view 
case need synchronizing behavior binder bug report form mechanisms need provide access classification scheme order evolving indexing tool 
sum coordination mechanisms may pose different modeling requirements turn may require different grammars 
scope illustration describe grammars detail 
point different grammars required order implement scenario 
grammars show peculiarities hardly collected unified grammar reducing usability 
coming back illustration notation mechanisms constructed point 
specifically links described scenario represented interactions mechanisms case binder bug report form mechanisms communication capability language associates artifacts elements involved protocols roles information resources case directory mechanism 
linked coordination mechanisms available users level activate manipulate suitable primitives 
address issue modifications mechanisms temporary lasting 
firstly consider situation tester wants take problem directly designer temporarily circumventing standard diagnosis procedure 
modification realized application level primitive allows user enforce certain state activated protocol 
case enforcement affects behavior tester exits bug report protocol interaction designer affects behavior designer started communication coming unexpected source affects behavior binder master started intermediate state different default initial state 
local change may course global effect sense various components distributed protocol reach coherent new global state 
coherence new global state responsibility involved actors 
order reach agreement new global state resume default behavior protocol may different communication channels 
point notation allows import effects agreement running computational mechanism 
consider situation design team wants introduce new role bug report protocol role project manager 
modification lasting performed level primitive allows manipulation components constituting mechanisms space possibility grammar definition 
specifically new role project manager added bug report mechanism actor authorized 
action new role expressed capability communicate bug report artifact 
definition role expressed specification new task attributed described sketched construction mechanisms definition artifact expressed inserting appropriate capability mediating communication designers project manager binder master event recognition triggers 
modification affect instantiations bug report form mechanism 

ariadne view internal complexity notation caused number components flexible composition appropriate define machine terms operational semantics ariadne specified 
machine multilayered architecture agents called communication language called interoperability language consists small set primitives express interoperability modes described previously 
words aspects notation categories attributes relations primitives various levels mapped aggregations agents interacting means interoperability language 
approach guarantees modularity implied requirements malleability 
matches inherent cooperative environment coordination taken emergent property arising behavior individual compo nent level aggregation 
successfully tested demonstrator especially check robustness basic requirements full version presently implemented java 
implementation behavior components constituting notation represented inter nally labelled petri nets order provide advanced support malleability 
major conceptual problems arise implementation hand need realizing reflective capabilities imposed requirement malleability non reflective programming environment hand need managing implications local modifications architecture radically distributed 
fact effective support management propagation changes requires theoretical distributed systems modelling checking takes account organizational solutions problem devised actors charge modifications real world 
acknowledgments development framework outlined supported esprit basic research action comic danish natural science research council 
especially indebted peter carstensen monica 
written kjeld schmidt ris national laboratory denmark 

douglas simon kaplan flexibility control dynamic workflows worlds environment 
eds 
conference organizational computing systems milpitas california august acm press new boston mass november acm press new york pp 


ellis information control nets proceedings acm conference simulation measurement modeling boulder colorado august 

fuchs uta wolfgang prinz supporting cooperative awareness local event mechanisms system schmidt eds ecscw 
proceedings fourth european conference computer supported cooperative september stockholm sweden kluwer academic publishers dordrecht pp 


glance daniele pareschi generalized process structure grammars gpsg flexible representations ackerman ed 
cscw 
proceedings conference computer supported cooperative boston mass november acm press new york pp 


medina mora terry winograd rodrigo flores fernando flores action workflow approach workflow management technology turner kraut eds cscw 
proceedings conference computer supported cooperative toronto canada october november acm press new york pp 


norman donald cognitive artifacts carroll ed 
designing interaction 
psychology human computer interface cambridge university press cambridge pp 


schmidt kjeld carla simone coordination mechanisms conceptual foundation cscw systems design computer supported cooperative 
journal collaborative computing vol 
pp 

york pp 


shepherd allan niels mayer allan 
carstensen peter carsten rensen social systematic mechanisms supporting coordination design computer supported cooperative 
journal collaborative computing vol 

strudel extensible electronic conversation toolkit cscw 
proceedings conference computer supported cooperative los angeles calif october acm press new york pp 

pp 


simone carla monica kjeld schmidt peter 
ciancarini paolo chris hankin eds coordination 
international conference coordination languages models springer verlag berlin 
lncs 

de michelis giorgio grasso situating conversations language action perspective milan conversation model malone ed 
cscw 
proceedings conference computer supported cooperative chapel hill north carolina october acm press new york pp 


monica carla simone kjeld schmidt coordination mechanisms multi agent perspective coop 
second international conference design cooperative systems antibes juan les pins france june inria sophia antipolis france 

dourish paul jim holmes allan maclean alex mediating representation action workflow systems ackerman ed 
cscw 
proceedings conference computer supported cooperative carstensen multi agent approach design coordination mechanisms lesser ed 
proceedings international conference multi agent systems san francisco calif usa june aaai press menlo park calif 

maxwell matsumoto irwin business process environment supporting collaborative planning collaborative computing vol 
march pp 


mitchell complexity 
emerging science edge order chaos simon schuster paperback ed penguin books 
