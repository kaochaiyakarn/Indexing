universal technique fast flexible instruction set architecture simulation achim gunnar braun oliver rainer leupers heinrich meyr integrated signal processing systems aachen germany iss rwth aachen de decade instruction set simulators essential development tool design new programmable architectures 
consequently simulator performance key factor design efficiency 
extremely poor performance commonly interpretive simulators research fast compiled instruction set simulation started years ago 
due restrictiveness compiled technique able push commercial products 
presents new retargetable simulation technique combines performance traditional compiled simulators flexibility interpretive simulation 
technique limited class architectures applications utilized architecture exploration user software development 
flow applicability called just intime cache compiled simulation jit ccs technique demonstrated means state art real world architectures 
categories subject descriptors simulation modeling simulation support systems simulation modeling model validation analysis programming languages design languages lisa general modeling computer architecture general terms design languages performance keywords retargetable simulation compiled simulation instruction set architectures permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
dac june new orleans louisiana usa 
copyright acm 
andreas hoffmann sand hill circle menlo park ca andreas hoffmann com 
instruction set simulators integral part today processor software design process 
important role architecture exploration early system verification pre silicon software development phase 
growing complexity new programmable architectures negative impact simulation performance 
account moore law research high performance simulation technique simulators started 
called compiled simulation technique rooted domain rtl level hardware simulation applied successfully instruction set simulators 
fast compiled simulation technique able succeed commercial tools 
due fact speed paid restrictions assumptions contradicting requirement today applications architectures 
major restriction utilization compiled simulators requirement static program code 
limits compiled technique small class digital signal processors dsp 
contrast typical dsp applications signal processing algorithms micro controller architectures usually run operating system os 
significant characteristic operating systems run time dynamic program code conflicts limitation compiled simulators 
dsp architectures realtime operating systems increasingly gaining importance 
presents simulation technique meets requirements high simulation speed maximum flexibility 
called just time cache compiled simulation jit ccs technique utilized architecture design user software development 
technique integrated retargetable lisa processor design platform 
generator back lisa processor compiler developed automatically constructs jit ccs simulator lisa machine description 
section presents related concerning compiled simulation result caching techniques 
restrictions existing simulation techniques consequences applicability worked section 
subsequently section describes flow just time cache compiled simulation technique 
benchmark results various state art architectures section 
related research instruction set architecture simulation active research topic early days programmable architecture design 
scope embra project high performance simulator mips processor developed 
objective similar providing highest flexibility maximum performance 
similar simulators performance gain achieved dynamic binary translation result caching 
embra non retargetable simulator restricted simulation mips architecture 
retargetable fast simulators machine description language published scope facile project 
simulator generated facile description utilizes fast forwarding technique achieve reasonably high performance 
fast forwarding similar compiled simulation uses result caching processor actions indexed processor configuration code 
previously cached actions replayed directly repeated occurrence configuration 
due assumption program code run time static dynamic program code simulated 
furthermore results applicability facile vliw irregular dsp architectures published 
retargetable tool suite allows cycle bit true modelling pipelined processors expres sion language 
previous publications shown suitability modelling real world architectures dsp texas instruments tms results available performance generated simulators 
retargetable compiled simulators architecture description languages developed sim nml isdl mimola projects 
due simplicity underlying instruction sequencer possible realize processor models complex pipeline control mechanisms texas instruments tms cycle accurate level 
retargetable approach machine descriptions ansi published engel 
results single proprietary dsp architecture available far 
compiled simulation approaches qualified limitations result compiled principle 
summary approaches combines retargetability flexibility high simulation performance time 
lisa language proven capable retargeting fast compiled instruction set simulators various real world dsp architectures 
overcome flexibility restrictions compiled simulators novel simulation technique sections 

processor simulation broad spectrum today instruction set simulation techniques starts flexible slowest interpretive technique 
compared interpretive technique higher simulation speed achieved compiled simulation gain paid loss flexibility 
section critically compares existing flexibility refers ability address kinds architectures applications 
instruction word fetch decode execute program memory run time interpretive simulation workflow program file instruction behavior simulation compiler compiled simulation compile time run time compiled simulation workflow execute simulation techniques 
especially impact tradeoff flexibility performance suitability different application domains discussed 
interpretive simulation interpretive simulator basically virtual machine implemented software interprets loaded object code perform appropriate actions host shown 
similar operation hardware instruction word fetched decoded executed runtime simulation loop enables highest degree simulation accuracy flexibility 
straightforward mapping hardware behavior software simulator major disadvantages 
real hardware instruction decoding time consuming process software simulator 
compared operation functional units easily transformed equivalent instructions host decoder characterized control flow 
especially today vliw architectures decoding overhead dominates 
compiled simulation objective compiled simulation improve simulation performance 
considering instruction set simulation efficient run time reduction achieved shifting time consuming operations simulator run time additional step simulation compile time 
step performed tool called simulation compiler see 
depending architectural application characteristics degree compilation varies 
compiled simulators common application decoded compile time 
results decoding phase simulation compiler subsequently selects sequences appropriate host operations required simulate application 
time consuming instruction scheduling performed run time dynamically scheduled statically scheduled compiled simulators move instruction scheduling compilation phase 
compiled simulators rely assumption complete program code known simulation starts furthermore run time static 
importance flexibility application domains excluded utilization compiled simulators 
overview domains details discussed paragraphs 
integration compiled simulators embedded system environments possible prime requirement predictable program code fulfilled external program memories 
furthermore applications run time dynamic program code provided operating systems os addressed compiled simulators 
run time changes program code considered simulation compiler 
today embedded systems consists multiple processor cores peripherals underlying os indispensable 
compiled simulators allow isolated simulation applications sufficient verification complete hw sw system 
considering application domain system integration external memories operating systems boot loading multiple instruction sets large applications compiled simulation restriction program code predictable runtime 
dynamic program code allowed run time switch different instruction sets considered simulation 
compiled simulation qualified enormous memory usage 
compiled simulation restrictions novel architectural features especially domain low power architectures multiple instruction sets widely reduce power memory consumption 
architectures switch compressed instruction set runtime 
instance arm core family provides socalled thumb instruction set 
dynamic switching considered simulation compiler selection depends run time values predictable 
compiled simulation large applications requires enormous amount memory approx 
depending architecture compared interpretive techniques 
long host memory big high memory consumption noteworthy decrease performance 
due fact program execution concentrates small local parts code cache effects noticeable 
course multi processor simulation embedded systems processor arrays memory efficiency simulator increasingly important 
summarizing arguments enormous performance gain compiled simulators restrictiveness 
implies application areas dominated slow interpretive technique 
driven increasing complexity applications architectures systems urgent requirement high performance simulation technique arises 
technique provide maximum degree flexibility high performance 

jit cache compiled simulation just time cache compiled simulation jit ccs technique developed intention combine full flexibility interpretive simulators speed compiled principle 
basic idea integrate simulation compiler simulator 
compilation instruction takes place context compilation refer invoking compiler run time 
compilation process discussed section 
simulator run time just time instruction going executed 
subsequently extracted information stored simulation cache direct reuse repeated execution program address 
simulator recognizes program code previously executed address changed initiates re compilation 
method offers full flexibility interpretive technique 
investigated performance compiled simulation achieved 
paragraph discusses theoretically achievable performance gives comparison compiled technique 
performance total compiled simulation time tapp cs total instruction execution time tex total product instruction execution count average execution time instruction tex insn 
forthe just time compiled simulation total simulation time tapp js additionally total compilation time tcomp total 
assumption program code constant total compilation time depends instruction count application average time compiling single instruction tcomp insn 
tapp cs tex total tapp js tex total tcomp total tex total tex insn tcomp total tcomp insn equations instruction throughput pcs pjs simulation techniques deduced 
pcs pjs tex insn tex insn tcomp insn insn shown growing number instruction executions performance just time compiled simulator converges performance compiled simulator 
lim pjs pcs number repeatedly executed instructions needed convergence compiled simulation speed corresponds conditions provided real world applications 
due fact programs behave rule execution time spent code 
instance proportion corresponds loop iterated times 
valid assumption tcomp insn insn compiled simulation performance achieved 
validity assumptions proved section 
just time simulation compiler complete design jit ccs integration simulation compiler simulator 
fact run time compilation instructions requires new concept simulation compiler 
separation simulation compiler simulator conditions fulfilled traditional compiled simulators instruction decode time critical influence simulation performance 
furthermore simulation compiler allowed generate code subsequently compiled compiler build compiled simulator 
obviously true integrated simulation compiler 
especially run time call compiler practical 
order explain flow just time simulation compiler important characteristics lisa processor model introduced 
lisa model mixed structural behavioral description processor 
structural part keeps definition processor resources registers memories pipelines 
processor instruction set including instruction coding assembly syntax functional behavior timing contained socalled lisa operations 
single processor instruction composed multiple lisa operations 
example shows excerpt lisa processor description simple add instruction 
definition program memory register resources examples lisa operations 
operation add implements binary coding assembly syntax functional behavior processor instruction add 
instruction set information operand registers src src referenced inferior lisa operation register 
operation register describes binary coding assembly syntax single register processor register file 
respective resource returned functional behavior operation add 
resource program memory byte prog mem register word operation add declare group dst src src register coding src src dst syntax add dst src src behavior dst src src operation register declare label index coding index bx syntax index expression index structure lisa processor models enables procedure 
behavioral code lisa operations pre compiled functions part simulator 
jit simulation compiler selects appropriate operations required simulate instruction basis coding information 
selected functions subsequently stored simulation cache 
utilized simulator execute instructions behavior 
simulation cache just time simulation compiler stores compiled data called simulation cache 
simulation cache indexed non ambiguous instruction address 
simplification purpose cache size considered unlimited 
time instruction going executed just time simulation compiler looks cache entry corresponds current program address 
previously cached data accelerate simulation validity verified 
start start program counter ea jit simulation compiler 
compile instruction register addr jit interface simulator address key 
lookup ea 
request 
return entry data jit jit compilation unit add cmp addr simulation cache data ea index program memory add cmp jne jit ccs workflow cache entry contains key instruction word compared simulator instruction register contents 
instruction word change detected re compilation initiated run time 
processors multi word instructions parallel instructions vliw bundle require key instruction register 
illustrates workflow jit ccs 
simulator going execute instruction address 
compiled data instruction address requested 
simulation cache management looks address simulation cache indicates address compiled 
jit compiler invoked stores data instruction word ea cache 
eventually table entry returned simulator 
workflow jit compiled simulator shows major disadvantage compiled simulation technique requirement fixed predictable program code apply jit compiled simulator 
important parameter considered application size 
size program code assumed run time dynamic 
cache run time static size usually smaller application size replacement strategy needed 
furthermore unique mapping function defined describes assignment program memory addresses cache addresses hash function 
cache key initially identify changed program code additionally employed detect cache collisions 
collisions result fact multiple program memory addresses share single entry cache 
important concern minimization cache administration overhead 
instruction compile time tcomp insn defines penalty cache overhead cache administration significantly smaller 
fulfill constraint simple level cache direct address mapping chosen see 
program memory address corresponds exactly entry cache 
cache collision occurs respective entry directly overwritten new instruction 
direct address mapping assures minimum cache rate spatially coherent code 
loops time critical parts program directly benefit characteristic loop kernel fits cache 
convergence jit ccs just time cache compiled simulator instruction throughput performance program memory address simulation cache index index direct mapping compiled simulator significantly characterized simulation cache rate shown equation disregarding cache administration 
results section demonstrate small caches sufficient store time critical loop application achieve performance approximation traditional compiled technique 
tex insn tcomp insn pipelined processor models previous explanations jit ccs assumed cache address overwritten directly simulator control step 
perfectly true instruction accurate simulators complete instruction processed control step assumption maintainable case cycle bases simulation pipelined architectures 
lifetime instruction pipeline longer predictable 
cache entries instructions currently processed pipeline protected overwritten 
achieved maintaining look table keeps instruction addresses currently 
number vliw instructions pipeline time exceed number pipeline stages size look table defined number stages 
concerning cache access cases considered 
cache hit 
cache cache address 
cache cache address 
case cache hit instruction taken directly compiled simulation cache 
second case instruction cache corresponding cache entry may overwritten compiled data 
furthermore instruction address registered look table 
table entries written circular manner displace instructions left pipeline 
third case cache occurs determined cached instruction replaced remains pipeline 
solution set associative cache due occurrence case simulator switches interpretive mode particular instruction 
illustrates procedure 
instruction mov address going decoded 
cache address generated corresponding entry looked cache 
cache collision detected cache entry keeps instruction jmp address 
entry overwritten pipeline protection table checked jmp instruction 
case instruction mov cache compiled interpreted updating cache 
fetch add start start decode mov cache 
addr 
generation generation protection table empty empty execute lookup collision entry protected jmp simulation cache jmp cache address currently protected jmp displaced 
interprete mov cache collision scenario 
results applicability efficiency retargetable just time cache compiled simulation technique evaluated basis various lisa processor models 
simulation results advanced risc machines arm st microelectronics st lisa models section 
processor models developed previous generated tools verified accurately vendor tools 
section instruction throughput jit ccs compared performance interpretive traditional compiled technique generated lisa descriptions 
applications selected benchmark fulfill requirements traditional compiled simulation technique constant program code 
furthermore investigated performance jit simulator influenced cache size 
performance results different generated simulators obtained mhz athlon pc mb ram running microsoft windows operating system 
generated simulator code compiled microsoft visual compiler optimizations turned 
shows benchmark results instruction accurate simulators arm running jpeg codec 
dark grey bars visualize simulation performance different simulators mips instructions second 
leftmost bars show performance compiled interpretive simulation techniques 
remaining dark grey bars correspond jit ccs performance different cache sizes 
light grey bars visualize relative cache rate examined cache configurations 
clearly recognizable jit ccs simulation performance improving growing cache size 
effect clear looking continuously decreasing cache rate 
examining results seen compiled simulation performance achieved entries size cache 
cache allocates mb host memory 
compared compiled simulator requires approx 
mb instructions application jit ccs memory efficient 
considering big applications operating systems obvious memory consumption compiled simulators serious problem 
contrast compiled simulators jit ccs characterized user defined performance vs memory trade 
due execution locality programs jit ccs perfor memory consumption compiled simulation proportional application size 
performance mips compiled interpretive arm instruction accurate jit ccs jpeg codec cache size records simulator performance arm jpg mance saturation achieved rapidly resulting manageable small simulation caches 
voluminous jpeg performance mips arm instruction accurate jit ccs adpcm codec compiled interpretive cache size records simulator performance arm adpcm codec large instructions loop kernels typical dsp applications adpcm codec require smaller caches 
biggest loop adpcm codec compiled arm spans instructions 
benchmark results adpcm codec reflect characteristic 
cache size entries sufficient achieve compiled simulation performance 
investigation applications shown reasonable big cache size approx 
absolutely sufficient approximation compiled performance 
applies instruction accurate jit ccs st architecture 
shows simulation results adpcm codec machine 
compared arm benchmark results extremely poor performance interpretive simulator conspicuous 
due complex instruction decoder influences performance jit ccs small caches 
st processor vliw architecture possible parallel instruction combinations 
bit instruction word vliw allows multiple combinations parallel instructions extensions immediate values 
distributed performance mips st instruction accurate jit ccs adpcm codec compiled interpretive cache size records simulator performance st adpcm cache rate cache rate cache rate op codes instruction decoding process software simulator dominates actual behavioral execution 
cache size entries required store parallel instructions vliw instruction word 

novel instruction set simulation technique addressing retargetability flexibility high performance time 
results various real world architectures proven applicability high simulation speed technique 
concentrate modelling real world architectures verifying simulation methodology 
simulation current research aims retargeting hll compilers generation hdl descriptions lisa processor model 

ganesh khare dutt nicolau 
expression language architecture exploration compiler simulator retargetability 
proc 
conference design automation test europe 
hoffmann braun meyr 
novel methodology design application specific instruction set processors asip machine description language 
ieee transactions computer aided design 
schnarr larus 
fast order processor simulation memoization 
proc 
th int 
conf 
architectural support programming languages operating systems 
schnarr hill larus 
facile language compiler high performance processor simulators 
proc 
int 
conf 
programming language design implementation 
witchel rosenblum 
embra fast flexible machine simulation 
proc measurement modeling computer systems 
engel 
generic tool set application specific processor architectures 
proc 
int 
workshop hw sw codesign 
braun hoffmann meyr 
static scheduling techniques retargeting high speed compiled simulators embedded processors machine description 
proc 
symposium system synthesis 
devadas 
isdl instruction set description language retargetability 
proc 
design automation conference 
reddy desai dunlop harcourt 
generation software tools processor descriptions hardware software codesign 
proc automation conference 
mills fowler 
compiled instruction set simulation 
software practice experience 
leupers landwehr 
generation interpretive compiled instruction set simulators 
proc 
asia south pacific design automation conference 
