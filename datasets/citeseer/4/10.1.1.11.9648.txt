umli unified modeling language interactive applications paulo pinheiro da silva norman paton department computer science university manchester oxford road manchester pl england uk 
mail norm cs man ac uk user interfaces uis essential components software systems significantly affect effectiveness installed applications 
addition uis represent significant proportion code delivered development activity 
despite modelling languages tools support contract elaboration ui developers application developers 
unified modeling language uml widely accepted application developers ui designers 
reason introduces notation unified modelling language interactive applications umli extends uml provide greater support ui design 
ui elements elicited cases scenarios design activities ui presentations 
diagram notation modelling user interface presentations introduced 
activity diagram notation extended describe collaboration interaction domain objects 
case study umli notation method 
uml industry standard language object oriented software design 
examples industrial academic projects demonstrating effectiveness uml software design 
successful projects silent terms ui design 
projects may describe architectural aspects ui design tend omit important aspects interface design better supported specialist interface design environments 
despite difficulty modelling uis uml apparent domain application modelling ui modelling may occur simultaneously 
instance tasks domain objects interdependent may modelled simultaneously need support 
task modelling aspects considered ui design 
tasks interaction objects widgets interdependent 
considering difficulty designing user interfaces domain objects simultaneously believe uml improved order provide greater support ui design :10.1.1.11.8530
introduces umli notation aims minimal extension uml notation integrated design applications user interfaces 
umli aims preserve semantics existing uml constructors notation built new constructors uml extension mechanisms 
non intrusive approach umli verified describes umli notation introduced designed uml meta model 
umli notation influenced model user interface development environment mb uide technology 
fact mb uides provide context declarative models constructed related part user interface design process 
believe mb uide technology offers insights description user interfaces adapted uml technology 
instance mb uide technology provides techniques specifying static dynamic aspects user interfaces declarative models 
declarative models partially mapped uml models possible identify ui aspects covered uml models :10.1.1.11.8530
scope umli restricted form user interfaces 
form uis widely data intensive applications database system applications web applications umli considered baseline non form ui modelling 
case modifications required umli specifying wider range ui presentations tasks 
introduce umli notation structured follows 
mb uide declarative user interface models terms umli diagrams section 
presentation modelling introduced section 
activity modelling integrates case presentation domain models section 
umli method introduced section case study umli notation description method 
section 
declarative user interface models modelling notation supports collaboration ui developers application developers able describe ui application time 
ui developer point view modelling notation able accommodate description users requirements appropriate levels abstraction 
notation able describe task specifications users perform application order achieve goals 
user requirement model required describe tasks 
ui sketches drawn users ui developers help elicitation additional user requirements 
presentation model early design ideas required describe ui sketches 
design process ui developers refine presentation models concrete presentation models widgets selected customised placement layout decided 
application developer point view modelling notation integrates ui application design support modelling application objects actions integrated way 
fact identification user application actions relate structured set tasks set tasks support supported application objects challenging activity application designers 
task model required describe structured set tasks 
task model entirely distinct user requirement model 
task model considered structured detailed view user requirement model 
application objects interfaces relevant ui design 
fact interfaces connection points ui underlying application 
application object interfaces compose application model 
integrated ui application development environment application model naturally produced result application design 
umli aims show specific set uml constructors diagrams possible build declarative ui models 
results previous mb uide projects provide experience declarative ui models inter related models provide declarative description user interfaces 
instance links explained terms state objects teallach 
link supported techniques tri dent generate concrete presentations 
terms mb uide technology common sense models describing ui 
umli aim new user interface modelling proposal reuse models techniques proposed mb uides context uml 
umli declarative user interface models 
user interface diagram user interface presentations visual part user interfaces modelled object diagrams composed interaction objects shown 
interaction objects called widgets visual components 
selection grouping interaction objects essential tasks modelling ui presentations 
usually difficult perform tasks due large number interaction objects different functionalities provided graphical environments 
uml environment selection grouping interaction objects tends complex ui design environments uml provide graphical distinction domain interaction objects 
uml treats interaction objects way objects :10.1.1.11.8530
instance easy see results contained 
considering presentation modelling difficulties section introduces umli user interface diagram specialised object diagram conceptual modelling user interface presentation 
presentation model modelled object diagram uml 
presentation alternatively modelled umli user interface diagram 
user interface diagram notation presentation modelled user interface diagram 
user interface diagram composed constructors specify role interaction object ui presentation 
rendered dashed cubes 
top level interaction objects contained interaction object top level windows 
called presentation units interaction objects time 
interaction object visible disabled means user see object interact 
containers rendered dashed cylinders 
group interaction objects 
containers provide grouping mechanism designing ui presentations 
rendered downward triangles 
responsible receiving information users 
rendered upward triangles 
responsible sending visual information users 
editors rendered diamonds 
interaction objects simultaneously 
rendered pair semi overlapped triangles pointing right 
responsible receiving information users form events 
graphically containers editors placed 
additionally overlapping borders interaction objects allowed 
case internal lines containers terms dimensional representations ignored 
concrete presentation complexity user interface presentation modelling reduced working restricted set interaction objects specified user interface diagram notation 
presentation modelling approach proposed umli user interface diagram possible form presentations respect presentation pattern app 
user interface presentation described interaction object acting 
app shows relationships interaction objects 
see app environment independent 
fact ui presentation described user interface diagram implemented object oriented programming language toolkits 
widgets bound app order generate concrete presentation model 
way widget classified container editor 
binding widgets app described uml :10.1.1.11.8530
widget binding efficient yield final user interface implementation 
fact umli ui modelling implementation 
believe integrating ui builders umli case tools specialised constructors editor classes indicate concrete interaction objects widgets bound classes 
constructor adaptation similar gamma see page 
presentation pattern produce environments uis modelled developed systematic way 
instance ui builder facilities may required adjusting ui presentation layout interaction object colour size font 
activity diagram modelling uml interaction diagrams sequence collaboration diagrams modelling objects collaborate 
interaction diagrams limited terms workflow modelling inherently sequential 
concurrent repeatable workflows especially workflows affected users decisions difficult model interpret interaction diagrams 
workflows easily modelled interpreted activity diagrams 
fact statechart constructors provide graphical representation concurrent branching workflows 
natural model object collaboration activity diagrams 
improving ability describe object collaboration common interaction behaviour umli activity diagrams provide greater support ui design uml activity diagrams 
section explains activities modelled cases activity diagrams simplified order describe common interactive behaviours interaction objects related activity diagrams 
cases case scenarios case diagrams normally identify application functionalities 
case diagrams may identify interaction activities 
instance communicates association case actor indicates actor interacting case 
example case identify interaction activity association borrower communicates association 
case identifies functionality supported application 
case diagram case component cases 
case scenarios elicitation actions 
actions identified scanning scenario descriptions looking verbs 
actions may classified editors 
example shows scenario searchbook case 
interaction objects identified scenario providing receives book title author year information specify specifies query details displays presents results query 
umli start elicitation interaction objects transformation actions interaction objects requirements analysis 
action transformations possible interaction objects umli ones 
elicitation interaction objects early describe important provides initial description presentations 
user interface diagrams initially composed interaction objects elicited scenarios 
john looking book 
check book library catalogue providing title authors year combination information 
additionally john specify wants exact approximate match search entire catalogue result previous query 
query submitted system displays details matching books 
scenario searchbook case 
cases activities umli assumes set activity diagrams describe possible user interactions set describe possible application workflows application entry points 
transitions activity diagrams inter object transitions transitions interaction domain objects describe interaction behaviours 
assumption activity diagrams belong set activity diagrams informally classified interaction activity diagrams 
activities interaction activity diagrams informally classified interaction activities 
difficulty classification uml specify constructor modelling application entry points 
process identifying activity diagram interactions start unclear 
initial interaction state constructor identifying application entry points activity diagrams introduced umli 
constructor rendered solid square uml initial pseudo state state 
top level interaction activity diagram contain initial interaction state 
shows top level interaction activity diagram library application 
modelling activity diagram cases umli 
cases communicate directly actors considered candidate interaction activities umli 
define top level interaction activity activity related candidate interaction activity 
relationship top level interaction activity candidate interaction activity described realisation relationship activity diagrams describe details behaviour candidate interaction activities 
diagram umli activity diagram notation explained section 
clearly see diagram top level interaction activity realises candidate interaction activity 
instance searchbook activity realises searchbook candidate interaction activity modelled case diagram 
terms ui design interaction objects elicited scenarios primitive interaction objects contained see app 
interaction objects contained associated top level interaction activities example 
interaction objects elicited scenarios initially contained related toplevel interaction presents object flow described section 
way ui elements imported case diagrams activity diagrams 
example interaction objects elicited initially contained 
selection states statechart constructors modelling transitions powerful combined ways producing different compound transitions 
fact simple transitions suitable relating activities executed sequentially 
combination transitions forks joins suitable relating activities executed parallel 
combination transitions branches suitable modelling situation activities executed choice behaviour 
designing interactive applications situations constructors held low level leading complex models 
behaviours common interactive application behaviours usually result complex models 
order independent behaviour 
activities called selectable activities activated order demand users interacting application 
selectable activity executed performance order independent behaviour 
users responsible selecting execution order selectable activities 
order independent behaviour composed selectable activities 
object execution history selectable activity required achieving behaviour 
optional behaviour 
users execute selectable activity number times including 
case users explicitly specify finishing activity 
order independent behaviour optional behaviour composed selectable activities 
repeatable behaviour 
order independent optional behaviours repeatable behaviour associated activity 
associated activity repeatable behaviour 
specific number times associated activity executed specified 
case diagram number identified value optional behaviour selectable activity selectable activity executed unspecified number times 
uml modelling common interaction application behaviours 
order independent behaviour modelled 
optional behaviour modelled 
repeatable behaviour modelled 
optional order independent repeatable behaviours common interactive systems umli proposes simplified notation 
notation modelling order independent behaviour 
see order independent selector rendered circle plus signal connected activities return transitions rendered solid lines single arrow selection state double arrow selectable activity 
order independent selector identifies order independent selection state 
double arrow return transitions identify selectable activities selection state 
distinction selection state selectable activities required selection states selectable activities 
furthermore return transition equivalent pair statechart transitions single transition connecting selection state selectable activity non guarded transition connecting selectable activity selection state previously modelled 
fact order independent selection state notation considered macro notation behaviour described 
umli modelling order independent selection state optional selection state repeatable selection state 
notations modelling optional repeatable behaviours similar terms structure order independent selection state 
main difference notation selection states symbols selectors 
optional selector identifies optional selection state rendered circle overlaying minus signal 
repeatable selector identifies repeatable selection state rendered circle overlaying times signal 
repeatable selector additionally requires rep constraint shown specifying number times associated activity repeated 
value rep constraint parameter 
notations figures considered macro notations notation modelling behaviours figures 
interaction object behaviour objects related activities object flows 
object flows basically indicating objects related activity objects generated related activities 
object flows describe behaviour related objects associated activities 
activities action states object flows connected describe behaviour related objects describe methods may invoked objects 
complete decomposition activities action states may required achieve object behaviour description 
context interaction objects common functions need modelled detail understood 
fact umli provides specialised object flows interaction objects describe common functions interaction object related activity 
object flows modelled stereotyped object flows explained follows 
interacts object flow relates primitive interaction object action state primitive activity 
object flow indicates action state involved object flow responsible interaction user application 
interaction user invoking object operation visualising result object operation 
action states activity examples assigning values attributes domain object 
results example visualising result searchbook 
observed operations specified app conjunction interaction objects 
setvalue operation setting values going users 
getvalue op umli considers repeatable selection state selection state users possibility cancelling repeatable state iteration 
eration passing value obtained users domain objects 
searchbook activity 
presents object flow relates activity 
specifies visible activity active 
invocation operation entirely transparent developers 
contents visible searchbook activity active 
confirms object flow relates selection state 
specifies selection state finished normally 
event associated search responsible finishing execution related selection state normally 
optional selection state confirms object flow directly indirectly related 
optional selection state activity search directly related 
optional selection state relies search indirectly related 
fact confirming optional selection state user confirming optional selection state 
cancels object flow relates composite activity selection state 
specifies activity selection state finished normally 
flow control re routed previous state 
cancel object responsible identifying user cancelling searchbook activity 
activate object flow relates activity 
way associated activity triggered activity waits event effectively start activated 
event triggers activity app 
umli method case study umli method composed steps 
steps intended describe comprehensive method modelling ui integrated way underlying application 
example steps adapted incorporated traditional uml modelling methods catalysis 
case study describing library application umli method :10.1.1.11.8530
results case study examples umli notation previous sections 
step user requirement modelling 
cases identify application functionalities 
cases may decomposed cases 
scenarios provide description functionalities provided cases 
cases identified application functionalities 
scenarios textual description case goals 
instance scenario textual description searchbook case 
scenarios elicitation sub goals modelled cases 
cases sub goals case related uses dependency 
uses dependencies creates hierarchy cases 
instance searchbook sub goal 
step interaction object elicitation 
scenarios cases may interaction object elicitation 
scenarios elicitation interaction objects described section 
case elicited interaction objects related associated case 
relating interaction objects directly cases prevent elicitation interaction object scenarios related case 
considering different levels abstraction cases described step identified case study interaction objects cases may useful exporting activity diagrams 
umli method suggests interaction objects elicited cases 
step candidate interaction activity identification 
candidate interaction activities cases communicate directly actors described section 
step interaction activity modelling 
top level interaction activity diagram designed identified candidate interaction activities 
top level interaction activity diagram contain initial interaction state 
shows top level interactive activity diagram library case study 
top level interaction activities may occasionally grouped interaction activities 
top level interaction activities grouped activity 
fact created gather top level interaction activities top level interaction activity diagram 
top level interaction activities activity remain responsible modelling major functionalities application 
process moving candidate interaction activities top level interaction activities described section 
step interaction activity refining 
activity diagrams refined decomposing activities action states specifying object flows 
activities decomposed sub activities 
activity decomposition continue action states leaf activities reached 
instance presents decomposition searchbook activity introduced 
interacts object flows relating interaction objects action states indicates step 
step user interface modelling 
user interface diagrams refined support activity diagrams 
user interface modelling happen simultaneously step order provide activity diagrams interaction objects required describing action states 
mechanisms allow ui designers refine conceptual ui presentation model 
inclusion complementary interaction objects allows designers improve user interaction application 
grouping mechanism allows ui designers create groups interaction objects containers 
step expected conceptual model user interface 
interaction objects required modelling user interface identified grouped containers 
interaction objects identified related domain objects action states umli flow objects 
step concrete presentation modelling 
concrete interaction objects bound interaction objects 
concrete presentation modelling begins binding concrete interaction objects widgets interaction objects specified app 
app flexible map widgets interaction object 
step concrete presentation refinement 
user interface builders refining user interface presentations 
widget binding modelling concrete user interface presentation 
ergonomic rules ui design guidelines automate generation user interface presentation 
concrete presentation model customised manually example direct manipulation 
umli uml extension modelling interactive applications 
umli extensive activity diagrams design interactive applications 
established links case diagrams activity diagrams explain user requirements identified requirements analysis described application design 
umli user interface diagram introduced modelling user interface presentations simplifies modelling visual components widgets 
additionally umli activity diagram notation provides way modelling relationship visual components user interface domain objects 
selection states activity diagrams provides simplification modelling interactive systems 
reasoning creation new umli constructor constraint 
umli notation entirely modelled accordance umli meta model specifications 
demonstrates umli respecting principle non intrusive extension uml umli meta model replace functionalities uml constructor 
case study indicates umli may appropriate approach order improve uml support ui design 
fact uis case study modelled fewer simpler diagrams standard uml diagrams described :10.1.1.11.8530
umli meta model modify semantics uml metamodel umli going implemented plug feature argo uml case tool 
implementation umli allow umli evaluations complex case studies 

author sponsored nacional de cient cnpq brazil 
bodart provot vanderdonckt 
systematic building software architectures trident methodological guide 
design specification verification interactive systems pages vienna 
springer 
pinheiro da silva 
semantics unified modeling language interactive applications 
preparation 
pinheiro da silva paton :10.1.1.11.8530
user interface modelling uml 
proceedings th european japanese conference information modelling knowledge representation finland may 
ios press 
appear 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley reading ma 
griffiths barclay paton gray kennedy cooper goble west smyth 
teallach model user interface development environment object databases 
proceedings pages edinburgh uk september 
ieee press 
johnson 
human computer interaction psychology task analysis software engineering 
mcgraw hill uk 
kovacevic 
uml user interface modeling 
proceedings uml pages france june 

myers 
user interface software tools 
acm transactions computer human interaction march 
object management group 
omg unified modeling language specification june 
version 
rosson 
integrating development task object models 
communications acm january 
szekely 
retrospective challenges model bases interface development 
computer aided design user interfaces pages xxi namur belgium 
namur university press 
tam puerta 
tel tool eliciting user task models domain experts 
proceedings intelligent user interfaces pages san francisco ca january 
acm press 
