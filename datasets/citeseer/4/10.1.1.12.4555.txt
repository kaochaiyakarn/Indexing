mixin modules computational effects ancona moggi zucca disi univ genova genova italy email davide moggi zucca disi unige 
define calculus investigating interactions mixin modules computational effects combining purely functional mixin calculus cms monadic metalanguage supporting separate notions simplification local rewrite rules computation global evaluation able modify store 
distinction important smoothly integrating cms rules local rules dealing imperative features 
calculus mixins contain mutually recursive computational components explicitly computed means new mixin operator semantics defined terms haskell recursive monadic binding 
mainly focus operational aspects adopt simple type system haskell detect dynamic errors related bad recursive declarations involving effects 
calculus serves formal basis defining semantics imperative programming languages supporting class mixins preserving cms equational reasoning 
mixin modules simply mixins modules supporting parameterization cross module recursion overriding late binding features altogether mixin module systems valuable tool promoting software reuse incremental programming az 
consequence proposals extending existing languages mixins exist prototype implementations extensions see ff ff hl problems solved order fully smoothly integrate mixins features real language 
instance presence store manipulation primitives expressions inside mixins side effects possibility raises semantic issues side effects evaluation order components inside mixin deterministic retaining cross module recursion computations inside mixin evaluated times 
unfortunately formalizations defined far az az mt wv consider issues model mixins purely functional settings 
propose monadic mixin calculus called cms studying interaction notions mixin store 
precisely calculus serve formal basis defining semantics imperative programming languages supporting mixins allowing equational reasoning 
approach consists combining purely functional mixin calculus cms az az monadic metalanguage mf equipped haskell recursive monadic binding el el supporting separate notions simplification computation corresponding local rewriting side effects global evaluation steps able modify store 
distinction important smoothly integrating cms rules supported project napoli eu project dart ist thematic network ii ist local rules dealing imperative features furthermore simplification congruence cms equations related selection hold cms 
cms mixin contain usual cms definitions computational definitions form monadic type 
simplification rules standard operators mixins coincide cms 
selecting components mixin transformed record 
transformation mixin deferred components record triggered doall primitive consists evaluating computational definitions xi ei order declared binding value returned ei xi immediately available subsequent computations ej mutual recursion informal semantics ei depend variable xj provided computation ei successfully performed knowing value ej bound xj 
formally semantics doall expressed terms recursive monadic binding similar defined el el standard recursive binding 
emphasis operational aspects adopt simple type system haskell detect dynamic errors related bad recursive declarations instance doall set new typed term evaluates dynamic error 
refined type systems dependencies analysis bou hl considered cms order avoid kind dynamic errors 
rest organized follows 
section illustrate main features original cms calculus introduce new cms calculus examples 
section formally define syntax calculus type system relations simplification computation 
prove standard technical results including bisimulation result simplification affect computation steps progress property combined relation 
section discuss related section summarize contribution draw research directions 
overview calculus section give overview cms calculus means examples written user friendly syntax 
cms cms basic mixin module consists defined local components bound expression deferred components declared defined 
example 
instance mix import deferred export defined local local denotes mixin deferred defined local component denote arbitrary expressions possibly containing free variables deferred components associated component name variable component names external referencing deferred defined components expressions variables accessing deferred local components inside mixins details separation variables component names see ler hl az 
local components visible outside mutually recursive 
note deferred defined local components declared order particular definitions defined local components interleaved 
construct cms provides operations mixins sum freeze delete inherited cms doall 
example 
mixins combined sum operation performs union deferred components sense components name shared disjoint union defined local components mixins 
defined components disjoint clashes allowed type system disjoint union local components performed renaming variables 
mix import export local module simplifies mix import export local export local sum operation supports cross module recursion module definition needed provided definition needed provided 
cms component selection permitted module deferred components defined components selected deferred components defined ones 
example 
freeze operation connects deferred defined components having name inside mixin words resolving external names deferred component local 
instance mix import export local deferred component effectively bound corresponding defined component freezing obtaining simplified expression mix local export local example 
delete operation hiding defined components mix import export local simplifies mix import local far calculus similar pure functional calculus cms defined az primitive operations expressing variety convenient constructs supporting cross module recursion overriding late binding 
instance mix export corresponds declare new mixin obtained overriding component deferred defined definition component depends new definition late binding 
refer az details 
addition cms operations constructs cms provides new kind mixin component called computational new mixin operation doall deal computational components usual primitives store monadic constructs mdo recursive ret embedding values computations 
example 
consider mixin definition cm mix local lc new export mdo get lc set lc val get lc local component lc defined component val defined called computational 
evaluation computational components lc val performed means doall operation see provided deferred components case furthermore selection defined components cm possible lc val evaluated 
note computational associated expression contains effects doall operation compute see 
computation new returns fresh location containing expression get lc returns expression stored location denoted lc set lc updates store assigning returns note new set lc lazy sense evaluate expression consider expression doall cm evaluation returns record containing defined components val 
explained evaluated val computed follows 
require evaluation computational components respect declaration order expression associated lc computed defining val value variable lc computed immediately available computational component val 
hand component defined computed associated computation treated value monadic type evaluated mdo construct 
location generated evaluation component lc doall cm evaluates record mdo get set val component reevaluated times instance expression mdo lc get lc increments contents evaluates 
note order computational components matters non computational components cm 
example 
computational components mutually recursive mixin 
cm mix export loc loc local new new expression doall cm evaluates record loc loc locations pointing 
possible new need evaluate hand evaluation doall mix local set new causes error bad recursive declarations 
case error avoided swapping reordering computational components changes semantics 
cms monadic mixin language defining cms introduce notations conventions 
finite sequences denotes concatenation 
fin means partial function finite domain written dom 
write ai bi partial function mapping ai bi ai different ai aj implies 
operations partial functions undefined partial function compatible dom dom 
denotes union compatible partial functions denotes update partial function undefined denotes reflexive transitive closure binary relation set terms fv set free variables set fv finite partial function set variables var denotes parallel substitution variables dom modulo conversion 
syntax cms definition parametric infinite set name component names records mixins infinite set var variables infinite set locations terms recursive monadic bindings mixin bindings ret mdo doall new get set injective dom dv dv dv dv dn dn name fin var fin var fin name 
productions side conditions auxiliary functions dv dn return set variables component names defined sequence definitions respectively 
lack space straightforward definitions dv dn fv omitted see long version 
terms include records partial function order record components irrelevant selection record component recursive bindings recursive monadic bindings mdo el operations allocation new dereferencing get assignment set basic mixins deferred components operations sum freezing deletion component see az 
basic difference record mixin deferred components may local recursive definitions computational components 
operation doall denotes computation forces evaluation computational components eliminates local definitions returns record 
computations may side effects order bindings matters 
types defined 
ref name fin set types includes computational types types record types mixin types 
table gives typing rules deriving judgments form mean typed term type var fin type assignment fin signature locations 
type system enjoys usual properties weakening substitution 
www disi unige person conferences mdo mixin var ret ret mdo ref new get record select ref get set doall dom dv dom dom new ref ref set ref sum freeze delete dom dom doall img dom dn dom dv dom compatible dom dom dom table 
type system simplification define confluent relation terms syntactic categories called simplification induces congruence terms 
need define deterministic simplification strategy computational effects case amount store changes insensitive simplification see theorem 
simplification compatible relation induced rewrite rules table 
provided dom provided formed dn dn dv dv dom dv injection compatible fv dom dv fv dom dv doall mdo ret dom xx xx freshly chosen defined induction follows xx table 
simplification rules mixin sum deferred components shared components disjoint union performed recall example section 
note dn dn conditions satisfied appropriate conversion 
condition avoids capture free variables 
example deferred component frozen defined deferred component deleted local component inserted means defined defined furthermore transformed computational evaluated defined component simply removed example 
rule expresses doall terms mdo computational components evaluated order mixin recall example record value returned containing non computational computational defined components mixin substitution non computational local components needed order avoid variables escape scope construct local variables mutually recursive 
note computational defined component transformed xx xx freshly chosen variable evaluated 
simplification enjoys church rosser subject reduction properties 
proposition cr 
relation confluent 
simplicity transformation applied really needed computational 
proof 
simplification rules left linear non overlapping 
proposition sr 

proof 
case analysis simplification rules 
computation define configurations id conf represent snapshots execution program computation relation see table describes program execution evolves 
configurations give operational semantics ensures correct sequencing computational effects adopting established technique specifying operational semantics programming languages see wf 
stores fin map locations content 
evaluation contexts ec mdo terms computational type 
configuration conf ec snapshot execution program current store program fragment consideration evaluation context bad terms terms stuck depend variable doall get set computational redexes terms enable computation need simplification bad term raise run time error 
mdo ret new get set definition 
sets cv fv captured free variables cv fv cv mdo cv dv fv mdo fv fv cv mdo rules monadic binding deserve explanations 
rule deals special case empty binding rule starts computation binding empty expression binding evaluated renaming needed order avoid clashes due nested monadic bindings rule completes computation binding variables variable computed substituted value construct mutual recursion store body mdo evaluated continuing computation considering binding variable similar 
confluent simplification relation terms extends obvious way confluent relation denoted stores evaluation contexts computational redexes configurations 
complete program corresponds closed term occurrences locations evaluation starts initial configuration 
properties ensure closed configurations reachable steps initial 
completion step done ret done recursive monadic binding steps mdo mdo mdo variables dv renamed avoid clashes cv ret mdo ret mdo imperative steps new ret dom get ret provided set ret provided dom error step caused bad term err err lemma 
mdo table 
computation relation 
dom dom cv cv fv fv fv fv fv fv 

fv cv fv fv cv fv dom dom 
bad terms computational redexes closed simplification 
lemma 

program fragment consideration computational redex irrelevant simplification done step computation 
theorem bisimulation 

id implies id 
id id 
id implies id 
id id id id range conf done err 
id id proof 
see mf 
type safety go proof type safety cms 
result standard adjustments subject reduction progress properties order stress different role simplification computation define formedness evaluation contexts table configurations 
mdo mdo table 
formed evaluation contexts definition formed configurations 
dom dom dom cv el imply el exists derivable exists derivable see table 
formation rules table deriving ensure assigns type captured variables dom cv free variables capture variable twice 
proposition sr 



exist compatible 
dom dv theorem progress 
cases holds 

proof 
see long version available web 
related notion mixin module firstly introduced bracha phd thesis bra generalization notion mixin class see instance bc 
semantics mixin language bra early denotational semantics inheritance coo red defined translation untyped calculus equipped fixpoint operator rich set record operators 
furthermore imperative features marginally considered implicitly technique developed hen extending semantics inheritance coo red object oriented languages state 
pioneer proposals extending existing languages system mixin modules considered ds ff ff go direction imperative features considered recursion problems solved separating initialization component definition 
calculi notion mixin modules appeared az az wv mt defined purely functional setting 
hl considered cms calculus called cms refined type system order avoid bad recursion call value setting 
separate compilation schema cms investigated means translation call value calculus extended non standard rec construct inspired calculus defined bou 
cms calculus boudol serve semantic basis programming languages supporting mixins introduce non standard constructs recursion produce terms having undefined semantics 
imperative features calculus bou allow recursion presence side effects 
instance cms term mdo new ret defined semantics corresponding translated term rec ref boudol calculus typed evaluation term gets stuck 
advantage approach separation concerns possible monadic metalanguage allows retain equational reasoning cms 
hand refined type systems adopted hl bou able statically detect bad recursive declarations 
mentioned definition mdo construct cms inspired semantics recursive monadic bindings haskell el elm elm el 
semantics partly related elm notion heap calculus implicit rec construct interested approach furthermore recursive el perform incremental binding happens semantics values bound corresponding variables computations recursive monadic binding evaluated 
defined cms monadic mixin calculus mixin modules contain components kinds defined bound expression deferred declared defined computational bound computation performed module component selection 
mixin modules combined sum freeze restrict operators cms doall operator triggers computations mixin module 
provided simple type system language simplification relation defined local rewrite rules side effects satisfying cr sr properties computation relation models global evaluation able modify store satisfying sr property 
stated bisimulation result simplification affect computation steps progress property combined relation errors due bad recursive declarations dynamically detected preferred keep simple type system 
envisage possibilities deserve investigation direction defining refined type systems 
dynamic errors due bad recursive declarations mentioned detected introducing type system similar hl bou keeping explicit trace dependencies evaluation computational components 
different side type system distinguishing modules possibly containing computational components variables computational components variables allow selection cms mixins cms directly embedded cms 
concerns applications cms considered powerful kernel calculus allowing express side variety different operators combination software modules including linking parameterized modules ml functors overriding sense object oriented languages see az details side different choices evaluation computations 
particular mention relevant scenarios application modeling object oriented features including difference computations performed instantiating class field initializers computations evaluated time selected methods possibility expressing different policies dynamic linking verification 
az ancona zucca 
primitive calculus module systems 
nadathur editor principles practice declarative programming number lecture notes computer science pages 
springer verlag 
az ancona zucca 
calculus module systems 
journal functional programming march 
bc bracha cook 
mixin inheritance 
proc 
joint acm conf 
object oriented programming systems languages applications european conference object oriented programming october 
bou boudol 
recursive record semantics objects revisited 
appear journal functional programming 
bra bracha 
programming language jigsaw mixins modularity multiple inheritance 
phd thesis department comp 
sci univ utah 
coo cook 
denotational semantics inheritance 
phd thesis dept computer science brown university 
ds duggan 
mixin modules 
intl 
conf 
functional programming philadelphia may 
acm press 
el erk launchbury 
recursive monadic bindings 
intl 
conf 
functional programming pages 
el erk launchbury 
recursive haskell 
haskell workshop pages 
elm erk launchbury moran 
semantics 

elm erk launchbury moran 
semantics value recursion monadic input output 
journal theoretical informatics applications 
ff findler flatt 
modular object oriented programming units mixins 
intl 
conf 
functional programming september 
ff flatt felleisen 
units cool modules hot languages 
pldi acm conf 
programming language design implementation pages 
hen 
denotational semantics object oriented programming language explicit wrappers 
formal aspects computing 
hl harper lillibridge 
type theoretic approach higher order modules sharing 
conference record popl st acm sigplan sigact symposium principles programming languages pages 
hl hirschowitz leroy 
mixin modules call value setting 
le tayer editor esop programming languages systems number lecture notes computer science pages 
springer verlag 
ler leroy 
manifest types modules separate compilation 
proc 
st acm symp 
principles programming languages pages 
acm press 
mf moggi 
monadic multi stage metalanguage 
gordon editor foundations software science computational structures fossacs volume lncs pages 
springer verlag 
mt turbak 
calculus link time compilation 
smolka editor esop programming languages systems number lecture notes computer science pages berlin 
springer verlag 
red reddy 
objects closures semantics object oriented languages 
proc 
acm conf 
lisp functional programming pages 
wf andrew wright matthias felleisen 
syntactic approach type soundness 
information computation 
wv wells 
equational reasoning linking class primitive modules 
smolka editor esop programming languages systems number lecture notes computer science pages berlin 
springer verlag 

