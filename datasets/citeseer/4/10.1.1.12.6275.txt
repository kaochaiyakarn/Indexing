journal computational biology volume number mary ann pp 
linear time algorithm computing inversion distance signed permutations experimental study david bader bernard moret mi yan hannenhalli pevzner gave rst polynomial time algorithm computing inversion distance signed permutations part larger task determining shortest sequence inversions needed transform permutation 
algorithm restricted distance calculation proceeds stages rst stage overlap graph induced permutation decomposed connected components second stage certain graph structures hurdles identi ed 
berman hannenhalli avoided explicit computation overlap graph gave na algorithm union find structure nd connected components inverse ackerman function 
practical purposes constant larger algorithm fastest practical algorithm date 
new linear time algorithm computing connected components ef cient berman hannenhalli theory practice 
algorithm uses stack easy implement 
give results computational experiments large range permutation pairs produced simulated evolution experiments show speed factor computation connected components factor distance computation 
key words signed permutation sorting reversals inversion distance overlap graph cycle graph overlap forest 

organisms single chromosome contain single chromosome evolution largely independent evolution nuclear genome 
particular strand single chromosome linear circular infer ordering directionality genes representing chromosome ordering oriented genes 
cases evolutionary process operates single chromosome organisms consists inversions portions chromosome nding led biologists department electrical computer engineering university new mexico albuquerque nm 
department computer science university new mexico albuquerque nm 
bader reconstruct gene orders measure evolutionary distance genomes inversion distance smallest number inversions needed transform signed permutation palmer palmer jansen 
inversion distance closely related transposition distance dif cult computational problems studied intensively years bafna pevzner bafna pevzner bafna pevzner berman hannenhalli hannenhalli pevzner kaplan shamir tarjan :10.1.1.48.2276:10.1.1.54.4172
finding inversion distance unsigned permutations np hard signed ones done polynomial time hannenhalli pevzner :10.1.1.54.4172
fastest published algorithm computation inversion distance signed permutations berman hannenhalli uses union find data structure runs time inverse ackerman function 
kst algorithm kaplan shamir tarjan reduces time needed compute shortest sequence inversions uses algorithm computing length sequence 
implementations web designed compute shortest sequence inversions length due hannenhalli hannenhalli url implements rst algorithm hannenhalli pevzner runs quadratic time computing distances java applet written shamir student shamir implements kst algorithm kaplan shamir tarjan uses explicit representation overlap graph takes quadratic time :10.1.1.54.4172
simple practical worst case linear time algorithm compute connected components overlap graph results simple linear time algorithm computing inversion distance signed permutations 
provide ample experimental evidence linear time algorithm ef cient practice theory coded algorithm berman hannenhalli best principles algorithm engineering mcgeoch moret shapiro ensure implementations ef cient possible compared running times large range instances generated simulated evolution 
implementations web naturally far slower 
organized follows 
recalling de nitions brie review past sorting reversals introduce concepts need algorithm including fundamental theorem possible 
describe analyze algorithm discuss experimental setup comment results brie mention application distance computation genome phylogeny study 

inversions signed permutations assume xed set genes fg gng 
genome ordering circular linear genes gene orientation positive gi negative gi 
ordering gn linear circular considered equivalent obtained considering complementary strand order gn gn 
genome signed ordering linear circular gn 
indices produces genome linear ordering gi gj gj gi gj gn apply inversion circular linear genome simply rotating circular ordering indices proper relationship recall consider rotations complete circular ordering circular genome equivalent 
inversion distance genomes signed permutations set minimum number inversions applied genome order produce 
measure easily seen true metric 
computing shortest sequence inversions gives rise distance known sorting reversals shall shortly see regarded sorting problem 
computing inversion distance 
previous bafna pevzner introduced cycle graph permutation providing basic data structure inversion distance computations 
hannenhalli pevzner developed basic theory expressing inversion distance easily computable terms number breakpoints minus number cycles plus number hurdles plus correction factor fortress bafna pevzner hurdles easily detectable connected component analysis 
gave rst polynomial time algorithm sorting signed permutations reversals hannenhalli pevzner proposed implementation algorithm hannenhalli url runs quadratic time restricted distance computation :10.1.1.54.4172:10.1.1.54.4172
algorithm requires computation connected components overlap graph bottleneck distance computation 
berman hannenhalli exploited combinatorial properties cycle graph give algorithm compute connected components leading implementation sorting algorithm 
refer approach uf approach 
algorithms nding connected components interval graphs class graphs include specialized overlap graphs sorting reversals run linear time known range minima lowest common ancestor data structures algorithms addition complex hard implement suffer high overhead high fact uf approach remain faster solution practice 

overlap graph forest signed permutation ng transform unsigned permutation ng substituting ordered pair positive element negative elements extend set setting 
convention assume signed permutations compute distance turned manner unsigned permutations permuted transformation rst permutation linear ordering manipulations affect distance value 
reason transforming permutation viewed sorting want nd inversions needed produce identity permutation 
represent extended unsigned permutation edge colored graph cycle graph permutation 
graph nc vertices join vertices gray edge vertices edge illustrated fig 

resulting graph consists disjoint cycles fig 

signed permutation various representations 
bader edges alternate colors remove cycles cycles correspond portions permutation sorted intersect cycles 
say gray edges overlap intervals overlap contains 
similarly say cycles overlap exist overlapping gray edges 
de nition 
overlap graph permutation vertex cycle cycle graph edge vertices correspond overlapping cycles 
illustrates concept 
extent cycle interval cg cg 
extent set cycles fc min id ci max id ci fig 
extent cycle cycle set fa fg 
algorithm builds overlap graph run linear time graph quadratic size 
goal construct overlap forest vertices belong tree forest exactly belong connected component overlap graph 
overlap forest composition trees unique structure arbitrary exactly tree connected component overlap graph linear size 

linear time algorithm connected components algorithm computing connected components scans permutation twice 
rst scan sets trivial forest node tree labeled cycle 
second scan carries iterative re nement rst forest adding edges merging trees forest union find algorithm attempt maintain trees certain shape parameters 
recall node overlap graph forest corresponds cycle cycle graph 
extent node overlap forest extent set nodes subtree rooted trivial forest set rst scan assume algorithm processed elements permutation producing forest fj 
construct fj fj follows 
cycle containing element permutation 
cycle root single node tree overlaps cycle arc compute combined extent tree rooted say tree rooted active stage lies properly extent shall store extent active trees stack 
summarizes algorithm constructing overlap forest algorithm top denotes top element stack 
conversion forest trees connected component labels accomplished linear time simple sweep array advantage fact parent appear array 
lemma 
iteration step algorithm tree rooted top active lies cycle top exists tree rooted top overlaps proof 
top active pushed stack current iteration top reached top extent top 
contained top extent top top 
lies cycle begins top top edge cycle overlaps top 
theorem 
algorithm produces forest tree composed exactly nodes form connected component 
computing inversion distance fig 

constructing interleaving forest linear time 
proof 
suf ces show iteration trees forest correspond exactly connected components determined permutation values scanned point 
prove invariant induction number applications step algorithm 
base case trivial tree single node nodes belong connected component processed element permutation 
assume invariant holds st iteration lie cycle prove nodes tree containing form set nodes connected component containing trees connected components unaffected obey invariant 
prove node tree containing connected component remarked earlier changes overlap graph connected components step clear forest remains unchanged invariant preserved 
hand step edge top added forest top holds 
edge join subtree rooted rooted top single subtree 
lemma know top holds exist tree rooted top overlap edge belong overlap graph connecting component containing containing top merging single connected component maintains invariant 
prove node connected component tree containing gray edges cycles respectively edge belong overlap graph built rst entries permutation 
case algorithm ensures edge belong overlap forest 
follows 
obviously step algorithm takes linear time entire algorithm runs worst case linear time 
bader 
experiments 
programs implementation due hannenhalli slow implements original method hannenhalli pevzner faster berman hannenhalli 
kst applet slow explicitly constructs overlap graph written java dif cult compare code 
reasons wrote implementation berman hannenhalli algorithm just part handling distance computation view ef ciency 
ef cient implementation compare linear time algorithm ensured implementations truly comparable share code hurdles breakpoints written person algorithmic engineering techniques 

experimental setup ran experiments signed permutations length order verify rate growth function number genes cover full range biological applications 
generated groups signed permutations identity permutation evolutionary model nadeau taylor model randomly chosen inversions applied permutation node generate permutations labeling children repeating process nodes assigned permutation 
expected number inversions edge xed advance re ecting assumptions evolutionary rate model 
evolutionary rates inversions edge generated groups leaf trees groups genomes selected lengths 
generated groups random permutations uniform distribution length provide extreme test case 
test suites computed distances genomes group times tight loop order provide accurate timing values single computation averaged values groups computed standard deviation 
computed inversion distances expected twice evolutionary rate tree edges pair genomes 
linear algorithm exhibited consistent behavior standard deviations exceeding mean uf algorithm showed variation 
ran tests mhz pentium ii kb data cache kb instruction cache kb cache running half codes compiled linux gnu gcc compiler options 
code runs systems machines solaris microsoft observed behavior 

experimental results results plots 
rst fig 
show actual running time linear time algorithm computation inversion distance permutations function size permutation plot computation connected components complete distance computation 
plot shows curve various evolutionary rates random permutations 
added third plot showing average inversion distance close correlation distance running time 
small permutation sizes data cache holds data cache misses permutation size grows hit rate direct mapped cache steadily decreases permutations size larger execution slowed speed cache ratio 
point clear rate growth linear predicted 
clear high rate evolution need test number connected components inversion distance nearly indistinguishable random permutations see side plot fig 
plots inversion distance function permutation size 
speed remarkable typical genome gene fragments data instance distance computations carried second slow workstation 
second plots fig 
compare speed linear time algorithm uf approach 
plot speed ratios ratio running time uf approach linear time computing inversion distance fig 

running time linear time algorithms function size signed permutation 
algorithm 
rst plot addresses connected components part computation second captures complete distance computation 
approaches different amount memory give rise different pattern addressing different cache con icts ratios permutations size vary quite bit size increases re ecting transition speed cache cache different permutation sizes algorithms 
point ratios stabilize clearly demonstrate gain algorithm gain increases increasing permutation size increasing evolutionary rate 

concluding remarks new simple practical linear time algorithm computing inversion distance signed permutations detailed experimental study comparing running time algorithm berman hannenhalli 
code available web page www cs unm edu moret grappa terms gnu public license gpl tested linux including parallel version freebsd solaris windows nt 
code includes inversion distance part larger context provides means reconstructing gene order data 
inversion distance computation lieu surrogate breakpoint distance previous researchers attempt speed computation bader fig 

speedup linear time algorithms uf approach function size signed permutation 
blanchette sankoff blanchette slowed reconstruction algorithm enabling extend breakpoint analysis reported moret similar inversion phylogeny 
acknowledgments david bader supported part nsf career itr deb doe csri 
bernard moret supported part nsf itr 
mi yan acknowledges support unm albuquerque high performance computing center 
bafna pevzner 
sorting permutations transpositions 
proc 
th ann 
symposium discrete algorithms acm press new york 
bafna pevzner 
genome rearrangements sorting reversals 
proc 
th ann 
ieee symposium foundations computer science ieee press 
computing inversion distance bafna pevzner 
genome rearrangements sorting reversals 
siam computing 
bafna pevzner 
sorting transpositions 
siam discrete math 

berman hannenhalli 
fast sorting reversal 
hirschberg myers eds proc 
th ann 
symposium combinatorial pattern matching laguna beach ca lecture notes computer science springer verlag new york 
blanchette sankoff 
breakpoint 

miyano takagi eds genome informatics 
university academy press tokyo 

sorting reversals dif cult 
proc 
st conf 
computational molecular biology santa fe nm 
acm press new york 

sorting permutations reversals eulerian cycle decompositions 
siam discrete mathematics 
jansen moret wang 
new fast heuristic computing breakpoint phylogeny phylogenetic analysis group highly rearranged genomes 
proc 
th int 
conf 
intelligent systems molecular biology san diego ca aaai 
hannenhalli url 
software computing inversion distances signed gene orders 
department mathematics 
university southern california 
www usc edu plain people hannenhalli html 
hannenhalli pevzner 
transforming polynomial algorithm sorting signed permutations reversals 
proc 
th ann 
symposium theory computing las vegas nv 
acm press new york 
kaplan shamir tarjan 
faster simpler algorithm sorting signed permutations reversals 
siam computing 
appeared proc 
th ann 
symposium discrete algorithms new orleans la acm press new york 
shamir 
genome rearrangement algorithm applet algorithm sorting signed permutations reversals 
www math tau ac il gr 
mcgeoch 
experimental method algorithm simulation 
informs computing 
moret shapiro 
algorithms experiments new old methodology 
universal comp 
sci 

url www org algorithms experiments 
moret bader yan 
new implementation detailed study breakpoint analysis 
proc 
th paci symposium biocomputing hawaii world scienti nadeau taylor 
lengths chromosome segments conserved divergence man mouse 
proc 
natl 
acad 
sci usa 
palmer 
dna systematics review methods data analysis 
am 
botany 
palmer 
mitochondrial genome evolution land plants 
herrmann ed cell 
springer verlag new york 
jansen 
dna evidence ancient evolutionary split vascular land plants 
science 
sankoff blanchette 
multiple genome rearrangement breakpoint phylogeny 
comp 
biol 


computational molecular biology 
pws boston 
address correspondence david bader university new mexico department electrical computer engineering albuquerque nm mail unm edu 
