measuring robustness resource allocation ali anthony howard jay siegel jong kim purdue university colorado state university school electrical department electrical computer engineering computer engineering west lafayette usa department computer science purdue edu fort collins usa hj aam colostate edu january submitted ieee transactions parallel distributed systems corresponding author ali parallel distributed systems may operate environment undergoes changes causing certain system performance features degrade 
systems need robustness guarantee limited degradation despite fluctuations behavior com ponent parts environment 
research investigates robustness allocation resources tasks parallel distributed systems 
main contributions mathematical description metric robustness resource allocation respect desired system performance features multiple perturbations multiple system environmental conditions procedure deriving robustness metric arbitrary system 
illustration procedure employed derive robustness metrics example distributed systems 
metric help researchers evalu ate resource allocation robustness uncertainties specified perturbation parameters 
keywords robustness robustness metric resource allocation resource management sys tems parallel distributed systems 
research supported darpa ito quorum program office naval research 
colorado state university george endowment 
equipment donated intel microsoft 
parallel distributed systems may operate environment certain system performance features degrade due unpredictable circumstances sudden machine failures higher expected system load inaccuracies estimation system pa rameters 
important question arises system design extent departure assumed circumstances cause formance feature unacceptably degraded 
robust system 
answering question needs clearly define robustness 
robustness defined different ways different researchers 
robustness degree system function correctly presence inputs different assumed 
general sense states robust system continues operate correctly wide range operational conditions 
robustness guarantees maintenance certain desired system characteristics despite fluctuations behavior component parts environment 
concept robustness research similar 
emphasizes robustness defined set system features set perturbations applied system 
research investigates robustness resource allocation parallel distributed systems accordingly customizes definition robustness 
parallel distributed computing coordinated different types machines networks interfaces meet requirements widely varying application mixtures maximize system performance cost effectiveness 
important research problem determine mapping matching applications resources ordering execution maximize robustness desired system features inaccuracies estimated system parameters changes environment 
research addresses design robustness metric mappings 
mapping defined robust respect specified system performance features perturbations specified system parameters degradation features limited perturbations occur 
example mapping declared robust respect satisfying throughput requirement perturbations system load system configured mapping continue operate throughput violation system load increases 
immediate question degree robustness 
example system load increase throughput violation occurs 
research addresses question related formulating mathematical description metric evaluates robustness mapping respect certain system performance features multiple perturbations multiple system components environmental conditions 
addition outlines step procedure deriving robustness metric arbitrary system 
illustration step procedure employed derive robustness metrics example distributed systems 
robustness metric step procedure derivation main contributions 
rest organized follows 
sampling related section 
section describes step derivation procedure mentioned 
defines generalized robustness metric 
derivations metric example parallel distributed systems section 
section extends definition robustness metric section multiple specified perturbation parameters 
section presents experiments highlight usefulness robustness metric 
section concludes 
related number robustness measures studied literature measures developed specific systems :10.1.1.2.6710
efforts presents general mathematical formulation robustness metric applied variety parallel distributed systems step derivation procedure 
mapping set communicating applications set machines develops metric robustness makespan uncertainties estimated execution times applications 
discusses detail effect uncertainties value makespan robustness metric find robust mappings 
model assumptions theorems properties robustness proven 
robustness metric formulated errors estimation application execution times intended general contrast 
additionally formulation assumes specific bound perturbation parameter considered study 
particular assumed execution time application times estimated value applications 
bound assumed 
study explores slack techniques producing robust mappings job shop environment 
central idea provide task extra time defined slack execute level uncertainty absorbed having re map 
study develop robustness metric implicitly uses slack achieve robustness 
ballista project explores robustness commercial shelf software failures resulting invalid inputs various software procedure calls 
failure causes software package crash unexpected parameters procedure calls 
research quantifies robustness software procedure terms failure rate percentage test input cases cause failures occur 
ballista project extensively explores robustness different operating systems 
robustness makespan set applications completion time entire set 
metric developed project specific software systems 
research investigates artificial immune system approach producing robust schedules dynamic jobshop scheduling problem 
study considers pair schedules robust large similarity similarity measure defined schedules indicating switch schedule performed minimal disruption rescheduling required 
defines measure similarity mappings develop robustness measure mapping state parameters robustness sought 
neighborhood measure robustness defined job shop environ ment 
schedule performance metric robustness schedule defined weighted sum values set schedules obtained interchanging consecutive operations machine 
clearly defines robustness measure mapping specific job shop environment 
explicitly state perturbations system robust 
develops mathematical definition robustness makespan machine breakdowns job shop environment 
authors assume certain random distribution machine breakdowns certain rescheduling policy event breakdown 
assumptions robustness schedule defined weighted sum expected value makespan rescheduled system expected value schedule delay difference original value makespan 
analytical determination schedule delay hard disruption considered authors propose surrogate measures robustness claimed strongly correlated expected value expected schedule delay 
research uses genetic algorithm produce robust schedules job shop environment 
schedule performance metric robust fitness value schedule weighted average values set schedules obtained adding small noise 
size set schedules determined arbitrarily 
noise modifies randomly changing ready times fraction tasks 
explicitly state perturbations system robust 
measures robustness developed research efforts discussed applicable specific systems 
presents general formulation robustness metric applied variety parallel distributed systems multiple perturbation parameters 
generalized robustness metric key contribution design general ical methodology deriving range uncertainty system parameters desired level quality service qos guaranteed 
central achieving goal development general mathematically precise definition robustness applied wide variety scenarios wide variety application specific mea sures performance wide variety system parameters behavior uncertain values affect system performance 
proposes general step procedure deriving robustness metric desired computing environment 
informally steps identify qos performance features importance acceptable variation feature values result uncertainties system parameters 
consider example qos performance feature makespan total time takes complete execution set applications resource allocation assignment machines applications acceptable variation makespan calculated resource allocation estimated execution times applications machines assigned uncertainties system parameters inaccuracies estimates execution times 
ii 
identify system environment parameters values may impact qos performance features selected step called perturbation parameters similar hazards performance features required robust respect perturbation parameters 
makespan example resource allocation associated predicted makespan estimated application execution times 
desired makespan robust stay estimated value respect uncertainties estimated execution times 
iii 
determine exact impact perturbation parameter performance fea ture 
makespan example sum actual execution times applications assigned machine time machine completes appli cations 
note implies actual time machine finishes applications acceptable variation 
iv 
step determine smallest collective variation values perturbation parameters identified step ii cause performance features identified step violate acceptable variation 
degree robustness resource allocation 
makespan example quantification total amount inaccuracy execution times estimates allowable actual makespan exceeds estimated value 
step procedure deriving robustness metric referred procedure abbreviation stands identifying performance features perturbation parameters impact perturbation parameters performance features analysis determine robustness 
specific examples illustrating application procedure sample systems section 
step procedure described formally 

describe quantitatively requirement system robust 
robustness requirement determine system performance features limited variation ensure robustness requirement met 
mathematically set system features 
element quantitatively describe tolerable variation max tuple gives bounds tolerable min variation system feature makespan example time th machine finishes assigned applications corresponding min max estimated makespan value 
determine system environment perturbation parameters ro system features described item sought 
mathematically set system environment parameters 
assumed elements vectors 
th element 
makespan example vector composed actual application execution times th element actual execution time th application machine assigned 

identify impact perturbation parameters item system performance features item 
mathematically determine relationship fij relates expression fij function maps makespan example finishing time machine mi fij sum execution times applications assigned machine mi 
note expression assumes affects independently 
case multiple perturbation parameters affect simultaneously examined section 
rest discussion developed assuming element 

determine boundary values values satisfying boundary relationships fij min fij max 
discrete variable boundary values correspond closest values bracket boundary relationship 
see subsection example 
relationships separate region robust operation non robust operation 
find smallest perturbation causes exceed bounds min max imposed robustness requirement 
specifically orig value system originally assumed operate 
due inaccuracies estimated parameters changes environment value variable differ assumed value 
change occur different directions depending relative differences individual components 
assuming information available relative differences values possible 
illustrates concept single feature element perturbation vector curve shown plots set boundary points fij max set boundary points fij min axis 
mapping 
points axis region enclosed axes curve gives values system robust respect vector xn norm euclidean norm vector defined point curve marked feature euclidean distance orig orig smallest distances orig point curve 
important interpretation value orig gives largest euclidean distance variable change direction assumed value orig performance feature exceeding tolerable variation 
distance orig called robustness radius mathematically min fij max fij min orig 
defines robustness metric robustness mapping respect performance feature perturbation parameter init orig fij max possible directions increase perturbation parameter direction smallest increase 
curve plots set points fij max 
set boundary points fij min points axis axis 
metric definition extended easily 
simply minimum robustness radii 
mathematically robustness mapping respect performance feature set perturbation parameter min derivations robustness metric example systems independent application allocation system example derivation robustness metric system maps set independent applications set machines 
system required makespan robust errors application execution time estimates 
brief description system model 
applications assumed independent communications applications needed 
set applications mapped set machines minimize makespan defined finishing time machine finishes 
machine executes single application time multi tasking order applications assigned 
cij estimated time compute application ai machine mj 
assumed cij values known mapping determined values 
addition fj time mj finishes executing applications mapped 
assume unknown inaccuracies values expected requiring mapping robust 
specifically required mapping actual makespan value calculated considering effects errors may times nominal value orig nominal value makespan value calculated assuming values accurate 
step procedure section system performance features limited variation ensure makespan robustness finishing times machines 
fj 
step procedure perturbation parameter needs defined 
orig value application ai machine mapped 
ci equal actual computation time value orig plus estimation error 
addition vector ci values 
similarly orig orig orig orig 
vector perturbation parameter analysis 
accordance step procedure fj expressed function fj ai mapped mj ci 
note finishing time machine depends actual execution times applications mapped machine independent finishing times machines 
step procedure set boundary relationships corresponding equation fj orig application system corresponds 
similarly cor respond respectively 
terms orig fj orig correspond orig fij max respectively 
boundary relationship fj orig corresponds boundary relationship fij max equation robustness radius fj fj min fj orig orig euclidean distance vector actual execution times vector estimated execution times larger fj finishing time machine mj times nominal makespan value 
note right hand side equation interpreted perpendicular distance point orig hyperplane described equation orig fj 
point plane distance formula equation reduces fj orig fj orig number applications mapped mj robustness metric equation min fj fj min fj min fj orig orig euclidean distance vector actual execution times vector estimated execution times larger actual makespan times nominal makespan value 
observations respect equation 
observations specific system necessarily apply example systems discussed 
value minimizes orig 
point actual execution times applications estimated times applications mapped machine finishes finishing times independent minimization constrained finishing time machine machine finishes 
point errors applications mapped machine finishes 
weight application determining finishing time equation 
note calculation robustness metric assumptions distribution estimation errors 
addition note units time 
hiper system second example derivation robustness metric hiper system maps set continuously executing communicating applications set machines 
required system robust respect certain qos attributes unforeseen increases system load hiper system model developed summarized 
system consists heterogeneous sets sensors applications machines actuators 
machine capable multi tasking executing applications mapped round robin fashion 
similarly network link multi tasked data transfers link 
sensor produces data periodically certain rate resulting data streams input applications 
applications process data send output applications actuators 
applications data transfers modelled directed acyclic graph shown 
path path path dag model applications circles data transfers arrows 
diamonds rectangles denote sensors actuators respectively 
dashed lines enclose path formed applications 
shows number paths enclosed dashed lines formed applications 
path chain producer consumer pairs starts sensor driving sensor ends actuator trigger path multiple input application update path 
set paths pk list applications comprise th path 
note application may multiple paths 
subsection set applications 
path sensors constitute interface system external world 
max imum periodic data output rate sensor called output data rate 
minimum throughput constraint states computation communication time application pk required larger reciprocal output data rate driving sensor pk 
application ai pk ai set output data rate driving sensor pk 
addition ij computation time application ai mapped machine mj 
ip time send data application ai application ap 
analysis carried specific mapping machine application mapped known 
assumed ai mapped mj machine subscript ij omitted ensuing analysis clarity intent show relationship execution times ai various possible machines 
maximum latency constraint states path pk time taken instant driving sensor outputs data set instant actuator multiple input application fed path receives result computation data set greater value max lk actual opposed maximum allowed value latency pk 
quantity lk adding computation communication times applications pk including sensor actuator communications 
ai set successor applications ai 
lk ai pk ap pk ap ai ti ip 
desired mapping system robust respect satis faction qos attributes latency throughput constraints 
step procedure section system performance features limited variation latency values paths computation communication time values applications 
set ip ap ai lk system expected operate uncertain outputs sensors requiring mapping robust unpredictable increases sensor outputs 
output th sensor set sensors defined number objects data set sensor 
system workload vector composed load values sensors 
orig initial value orig initial value th member orig step perturbation parameter identified 
step procedure requires impact system performance features identified 
computation times different applications communication times different data transfers different complexities respect 
assume dependence ip known estimated ip re expressed functions ip respectively 
equation express lk function 
step procedure set boundary relationships corresponding equation ai ip ai ap ai lk max 
equation find robustness radius 
specifically min ax orig min xy ax orig xy min lk max orig lk robustness radius equation largest increase euclidean distance load direction combination sensor load values assumed value cause throughput violation computation application ax 
robustness radii equations similar values communications application ax latency path pk respectively 
robustness metric equation min 
system largest increase load direction assumed value cause latency throughput violation application path 
note units objects data set 
addition note discrete variable treated continuous variable section number possible discrete values take infinite 
fractional values take floor right hand side equation 
different method handling discrete perturbation parameter discussed subsection 
research assumes optimization problems equations solved find respective global minima 
note optimization problem form min subject constraint convex functions easily solved find global minimum 
norms convex functions optimization problem posed equation reduces convex optimization problem xy convex func tions 
commonly encountered complexity functions convex 
notable exception log 
example functions convex domain positive real numbers px log addition positive multiples convex functions sums convex functions convex functions 
note xy functions convex assumed heuristic techniques find near optimal solutions 
system machine failures require remapping research efforts flexibility mapping closely tied robustness described quality mapping allow changed easily mapping comparable performance system failures occur 
section briefly sketches step procedure derive robustness metric systems mapping changes necessary due dynamic events 
example derivation analysis assumed re mapping invoked permanent simultaneous failure number machines system due power failure section building 
system robust required total number applications need re assigned re asgn total number applications value objective function average application response time times value orig original mapping 
assume loss generality smaller values desirable 
assumed specific re mapping algorithm may original mapping algorithm 
re mapping algorithm re assign applications originally mapped failed machines machines re assign applications necessary 
subsection sets applications machines respectively 
step procedure re asgn 
step requires perturbation parameter identified 
vector indicates identities machines failed 
specifically fj mj fails 
vector orig corresponds original value step asks identifying impact re asgn impact depends re mapping algorithm determined mapping produced re mapping algorithm 
re asgn re expressed functions re asgn respectively 
step set boundary values needs identified 
discrete variable 
boundary relationships developed continuous fij min fij max apply possible value lie boundaries min max needs determine pairs values values pair bracket boundary min max 
pair boundary value taken value falls robust region 
perturbation parameter value machines fail scenario represented include machines fail scenario represented exactly machine 
re asgn set boundary values set inner bracket values number applications need re assigned maximum tolerable number 
mathematically re asgn re asgn set boundary values written orig orig equation find robustness radius 
specifically re asgn min re asgn re asgn orig min orig orig orig 
equations term orig equals square root number machines fail 
square robustness radius equation largest number machines fail combination causing number applications re assigned exceed 
similarly square robustness radius equation largest number machines fail combination causing objective function re mapped system degrade 
robustness metric equation min re asgn 
subsection assumed discrete optimization problems posed equations solved optimal near optimal solutions combinatorial optimization techniques 
example norm defined xr vector xn appropriate norm robustness metric 
case natural think robustness terms maximum allowable number machines fail square root maximum allowable number machines fail 
case norm assumed discrete optimization problems posed equations solved optimal near optimal solutions norm 
robustness multiple perturbation parameters section developed analysis determining robustness metric system single perturbation parameter 
section analysis extended include multiple perturbation parameters 
multiple perturbation parameters considered concatenating pa rameter single parameter discussed section 
specifically section develops expression robustness radius single performance feature multiple perturbation parameters 
robustness metric determined minimum robustness radii 
vector elements vector concatenation operator 
weighted concatenation vectors 
weighting constant may assigned system administrator sensitivity system performance feature explained detail 
vector analogous vector discussed section 
parallel discussion section needs identify set boundary values fi function maps 
note fi independent single system feature considered set fi min fi max orig assumed value addition analogous element set boundary values euclidean distance orig orig smallest distances orig point boundary set 
alternatively value orig gives largest euclidean distance variable move direction assumed value orig exceeding tolerable limits parallel discussion section distance orig called robustness radius mathematically min fi min fi max orig 
extending robustness mapping respect perfor mance feature set perturbation parameter set min sensitivity weighting procedure calculation discussed 
typically different dimensions measured different units seconds objects data set bytes concatenation vectors converted single dimension 
additionally magnitudes indicate relative sensitivities different way accomplish goals set 
definition 
note smaller value larger 
desirable small value robustness indicates big sensitivity changes relative weight large 
note units units fact renders dimensionless 
experiments experiments section seek establish utility robustness metric distinguishing mappings perform similarly terms commonly metric makespan 
different systems considered independent task allocation system discussed subsection hiper system outlined subsection 
experiments performed system machines applications 
total mappings generated assigning randomly chosen machine application mapping evaluated robustness metric commonly metric 
independent application allocation system system subsection values generated sampling gamma distribution 
mean arbitrarily set task heterogeneity set machine heterogeneity set heterogeneity set numbers standard deviation divided mean 
see description method generating random numbers mean heterogeneity values 
mappings evaluated robustness makespan load balance index defined ratio finishing time machine finishes makespan 
larger value load balance index balanced load largest value 
tolerance set actual makespan times nominal value 
context robustness value mapping means mapping endure combination errors makespan increasing times nominal value long euclidean norm errors larger seconds 
shows robustness mapping makespan 
seen sharp differences exist robustness mappings similar values makespan 
similar drawn robustness load balance index plot 
highlight fact robustness metric differentiate mappings perform similarly respect popular performance metrics 
seen mappings clustered groups mappings group robustness increases linearly makespan 
explained equation 
machine determines makespan mj number applications mapped machine mj 
orig largest number applications mapped machine determines robustness mapping smallest robustness radius equation 
consider set mappings orig max mj mj mapping set 
mappings robustness directly proportional orig equation 
distinct straight line corresponds 
explanation outlying points follows 
union set mappings orig max mj mj 
outlying points belong set 
note outlying points lie line specified 
mapping corresponds outlying point machine determines robustness orig machine robustness radius smaller robustness radius orig 
robustness seconds makespan seconds robustness objects data set robustness seconds slack load balance index plots robustness makespan load balance index slack randomly generated mappings 
plots correspond system subsection plot corresponds system subsection 
plot generally value makespan mappings significantly different values robustness 
true load balance index plot slack plot 
hiper system model subsection experiments performed system consisted paths latency constraints paths uniformly sampled range 
system sensors rates actuators 
experiments simplifying assumptions 
computation time function ij assumed form route th sensor application ai 
sampled gamma distribution mean task machine heterogeneity values 
simplicity presentation results communication times set zero 
assumptions simplify experiments part formulation robustness metric 
salient point example utility robustness metric seen simple complexity functions 
mappings evaluated robustness slack context robustness value mapping means mapping endure combination sensor loads latency throughput violation long euclidean norm increases sensor loads assumed values larger slack studies performance measure mapping parallel distributed systems mapping larger slack considered better 
study slack defined mathematically follows 
fractional value qos attribute value attribute percentage maximum allowed value 
percentage slack qos attribute fractional value subtracted 
system wide percentage slack minimum value percentage slack taken qos constraints expressed mathematically min min pk lk lmax max min ai max ap ai ip ai shows robustness mapping slack 
seen mappings larger slack robust general sharp differences exist robustness mappings similar values slack 
particular examine mappings shown table 
slack values approximately robustness times better mapping considering robustness increases sensor loads 
slack measure increase sensor load system tolerate may cause system designers grossly systems capability 
results show slack defined indicator robustness system objects data set processed system qos violation occurred 
seen set mappings slack values ranging approximately approximately mappings robustness value approximately 
mappings virtually indistinguishable respect objects data set processed system qos violation occurred 
experiments section illustrate simple computing environments commonly measure availability computing resources reliable measure system ability maintain desired qos presence uncertainty explicit measure robustness manner specified procedure 
table shows actual sensor load values throughput latency constraint reached mapping 
computation time functions ij experiment table 
table system subsection mappings perform similarly terms slack values significantly different robustness values 
initial sensor load values 
final sensor load values throughput latency constraint reached mapping table 
computation time function ij application machine mapped shown 
ij functions number outside parenthesis multi tasking factor equals mj mj number applications mapped mj 
function inside parenthesis gives complexity execution time function may different application mapped different machines 
mapping mapping objects data set objects data set robustness euclidean distance euclidean distance slack application assignments computation time functions mathematical description new metric robustness resource allocation respect desired system performance features multiple perturbations various system environmental conditions 
addition research describes step procedure procedure methodically derive robustness metric variety parallel distributed resource allocation systems 
illustration procedure employed derive robustness metrics example distributed systems 
experiments conducted research example parallel distributed systems illustrate utility robustness metric distinguishing mappings perform similarly 
acknowledgments authors ali martin nagel tani valuable comments 
preliminary version portions th int parallel distributed processing symposium april 
ali 
kim yu siegel prasanna greedy heuristics resource allocation dynamic distributed real time heterogeneous computing systems int conf 
parallel distributed processing techniques applications pdpta vol 
ii june pp 

ali siegel maheswaran hensgen ali representing task machine heterogeneities heterogeneous computing systems science engineering vol 
nov pp 
invited 
berry uncertainty scheduling probability problem reduction abstractions user iee computing control division colloquium advanced software technologies scheduling digest apr 
ni robust scheduling metaprograms scheduling vol 
sep pp 

boyd vandenberghe convex optimization appear available www stanford edu class ee index html book 
braun siegel beck ni maheswaran robertson yao hensgen freund comparison eleven static heuristics mapping class independent tasks heterogeneous distributed computing systems parallel distributed computing vol 
june pp 

carlson doyle complexity robustness proceedings nat academy science pnas vol 
feb pp 

davenport beck slack techniques robust schedules th european conf 
planning ecp sep pp 

high performance robust computer systems 
phd thesis department electrical computer engineering carnegie mellon university 
yu prasanna ali 
kim siegel metric mixed integer programming approach resource allocation dynamic real time systems th int parallel distributed processing symposium ipdps apr 
ginsberg parkes roy robustness th nat conf 
artificial intelligence american association artificial intelligence aaai july pp 

gribble robustness complex systems th workshop hot topics op erating systems hotos viii may pp 

hart ross nelson producing robust schedules artificial immune system int conf 
evolutionary computing may pp 

harrison high performance distributed computing program hiper engineering testbed report technical report naval surface warfare center dahlgren va nov 
jensen hansen robust solutions job shop problems congress evolutionary computation july pp 

jen stable robust 
difference complexity appear 
jen definitions santa fe institute robustness site rs discuss santafe edu robustness posted 
jensen improving robustness flexibility tardiness total job shops robustness measures applied soft computing vol 
june pp 

leon wu storer robustness measures robust scheduling job shops iee transactions vol 
sep pp 

maheswaran ali siegel hensgen freund dynamic mapping class independent tasks heterogeneous computing systems parallel distributed computing vol 
nov pp 

nemhauser wolsey integer combinatorial optimization john wiley sons new york ny 
rensen genetic algorithm robust schedules th int shop project management scheduling pms apr pp 

simmons calculus analytic geometry second edition mcgraw hill new york ny 
wang siegel roychowdhury task matching scheduling heterogeneous computing environments genetic algorithm approach parallel distributed computing vol 
nov pp 


