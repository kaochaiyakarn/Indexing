model checking generate tests requirements specifications angelo heitmeyer politecnico di milano milano italy angelo polimi code naval research laboratory washington dc heitmeyer itd nrl navy mil 
formal methods scr software cost reduction requirements method proposed improving quality software specifications 
improved specifications valuable ultimate objective software development produce software satisfies requirements 
evaluate correctness software implementation apply black box testing determine implementation sequence system inputs produces correct system outputs 
describes specification method constructing suite test sequences test sequence sequence inputs outputs testing software implementation 
test sequences derived tabular scr requirements spec ification containing diverse data types integer boolean types 
prom functions defined scr specification method forms collection predicates called branches cover possible software behaviors described specification 
predicates method derives suite test sequences model checker ability construct counterexamples 
presents results applying method specifications includ ing sizable component contractor specification real system 
decade numerous formal methods proposed im prove software quality decrease cost software development 
methods scr software cost reduction method user friendly tabular notation offers automated techniques de errors software requirements specifications including automated consistency checker detect missing cases application independent errors simulator symbolically execute specification ensure captures users intent model checker detect violations critical application properties :10.1.1.17.6363
groups nasa rockwell aviation group nrl scr techniques detect serious errors requirements specifications real world systems 
exposing defects requirements specification techniques help user improve specification quality 
improved specification provides solid foundation phases software development process 
high quality requirements specifications clearly valuable mate objective software development process produce high quality software software satisfies requirements 
weed software errors research funded office naval research 
help convince customers software performance acceptable software needs tested 
enormous problem software test ing especially safety critical systems extremely costly time consuming 
estimated current testing methods consume software development effort 
benefit formal method high quality specification pro duces play valuable role software testing 
example specification may automatically construct suite test sequences 
test sequences automatically check implementation software errors 
eliminating human effort needed build apply test sequences approach reduce enormous cost significant time human effort associated current testing methods 
describes original method generating test sequences operational scr requirements specification containing mixed variable types integers booleans enumerated types 
approach test se quence sequence system inputs associated outputs 
requirements specification generate valid sequence inputs oracle determines set outputs associated input obtain valid sequence inputs input sequence constrained satisfy input model assumptions inputs part requirements specification 
method generating test sequences cov ers set possible input sequences organizing equivalence classes generating test sequences equivalence class 
section reviews scr method section describes objectives effective suite test sequences 
showing test sequences derived system properties section presents original method generating test sequences operational requirements specifications branch coverage criterion method applies 
section describes tool developed uses model checkers automatically generate test sequences presents results applying tool specifications 
section reviews related section presents summary plans 
background scr requirements method scr method formulated specify requirements op flight program ofp navy aircraft 
industrial organizations including bell laboratories ontario hydro lockheed scr specify requirements practical systems 
largest application date occurred lockheed en scr tables document complete requirements lockheed ofp program containing lines ada 
applications scr weak tool support 
provide powerful robust tools customized scr method developed scr toolset includes consistency checker simulator model checker mentioned 
provide formal underpinnings tools formulated mal model defines semantics scr requirements specifications :10.1.1.17.6363
scr requirements specification describes system environment nondeterministic required system behavior usually deterministic 
scr model represents environmental quantities system monitors controls monitored controlled variables 
environment nondeterministically produces sequence input events input event signals change monitored quantity 
system represented model state machine begins execution initial state responds input event turn changing state possibly producing output events output event change controlled quantity 
assumption model state transition exactly monitored variable changes value 
concisely capture system behavior scr specifications may include types auxiliary variables mode classes values modes terms 
mode classes terms capture historical information 
scr model system represented tuple set states initial state set set input events transform describing allowed state transitions :10.1.1.17.6363
usually transform deterministic function maps input event current state new state 
construct compose smaller functions derived kinds tables scr requirements specifications event tables condition tables 
tables describe values dependent controlled variable mode class term 
scr model requires entries table satisfy certain properties 
properties guarantee tables describe total functions 
scr state function maps variable specification type correct value condition predicate defined system state event predicate defined pair system states implying value state variable changed 
variable changes value say event occurs 
expression represents conditioned event defined dsf lc unprimed conditions evaluated current state primed condition evaluated state 
attributes suite test sequences practical method supported techniques techniques invoked mere push button 
example ton technique automated consistency checking 
goal software testing technique automatic possible 
ap proach software testing focuses conformance testing black box testing determines implementation exhibits behavior described specification 
approach divides testing phases 
phase operational requirements specification automatically con struct suite test sequences 
second phase test driver feeds inputs test sequences software implementation com compares outputs produced implementation outputs predicted test sequence reporting discrepancies sets outputs 
clearly discrepancies sets outputs expose cases software implementation violates requirements specification 
challenge software testing methods produce effective suite test sequences 
lo believe effective suite test sequences satisfies conflicting objectives number test sequences suite small 
similarly number test data length input sequence test sequence small 
test suite cover errors implementation may contain 
evaluate different possible behaviors software possible 
approach test sequence complete scenario starts legal initial state contains state transition valid system input coupled set valid system outputs 
assumptions constrain system inputs system outputs computed system inputs described scr requirements specification 
generating test sequences model checker normally model checker analyze finite state representation system property violations 
model checker analyzes reachable states detects violations property holds 
contrast model checker finds reachable state violates property returns coun sequence reachable states valid initial state property violation 
model checking verification detect specification errors construct test sequences 
base method ideas 
model checker oracle compute expected outputs 
second model checker ability generate counterexamples construct test se quences 
force model checker construct desired test sequences set properties called properties 
section describes trap properties derived system proper ties provided designers customers 
section describes original extension method derives trap properties systematically au operational scr requirements specification 
deriving trap properties manner ensures test sequences cover possible behaviors described specification 
demonstrate method different model checkers different model checkers construct test sequences 
example section uses symbolic model checker smv example section uses explicit state model checker spin 
translate scr specification language spin language smv translation method described 
spin specification smv specification obtained scr specification translation method semantically equiv 
section describes coverage criterion form branch coverage 
generating test sequences properties introduce method illustrate model checker smv may obtain test sequence system property scr requirements specification 
consider system called safety injection system se simplified version control system safety injection nuclear plant monitors water pressure injects reactor core pressure falls threshold 
system operator may override safety injection turning block switch may reset system blockage setting reset switch 
specify sis requirements scr represent sis inputs monitored variables waterpres block reset single sis output controlled variable saf ection 
specification includes auxiliary variables mode class pressure version waterpres term overridden indicates safety injection den 
important component sis specification input model waterpres constrains waterpres change psi state 
input model describes possible changes waterpres defined represents value waterpres state represents value state 
example constant low defines threshold determines waterpres unsafe region 
suppose verified operational scr specification sis satisfies safety property called defined waterpres low block 
property states waterpres drops constant low block reset saf 
property operational scr specification sis construct test sequence follows 
operational specification translated smv language manner described 
goal verify translate ctl temporal logic smv 
goal verify construct test sequence translate negation premise ctl ag ex waterpres low waterpres low block reset ag 
represents ex represents represents negation 
negation premise false scr specification running smv detects violation 
demonstrate violation smv produces coun trace input events starts valid initial state ends violation ctl property detected 
trace provides basis desired test sequence 
ctl property example trap property 
table illustrates test sequence constructed coun produced smv detects violation trap property sis specification 
table initial values waterpres block reset pressure shown step represents initial state 
due lack space table omits term overridden 
clarify variable values change state table shows variable values change step omits values remain 
note changes waterpres state exceed psi satisfy constraints input model 
abbreviation psi represents pounds square inch 
step monitored var 
controlled var 
value value waterpres block reset waterpres waterpres waterpres io block waterpres mode class value pressure toolow pressure permitted 
pressure toolow table 
test sequence constructed smv counterexample 
inputs lead violation trap property form input sequence test sequence 
table shows change sis output produced input sequence change step value 
test sequence length shown table may represented concisely represent input variables reset waterpres block represents single output variable saf indicates output variable changes 
clearly checking software behavior test sequence test software satisfies property addition changes output values test sequence may include changes values auxiliary variables 
example test sequence extended include changes mode class pressure changes see table permitted step toolow step 
method test critical aspects system behavior weaknesses 
method assumes customers designers formulated set system properties 
unfortunately ing properties normal step requirements specification properties may available 
second important incom test sequences 
large set properties available generating test sets questions remain completely test sequences cover possible system behaviors 
method assumes correctness operational specification properties 
experience scr specifications scr tools achieving high quality scr specification feasible 
contrast verifying specifications satisfy set properties problematic 
progress model checkers theorem provers verify properties mal verification suffers theoretical problems problems decidability practical problems time space necessary proofs 
example initial state unique may omitted test sequence 
generating test sequences operational specification section describes original method constructing test sequences depend set system properties 
method automatically trans operational requirements specification scr notation lan guage model checker automatically systematically generates test sequences 
section describes test sequences generated event table generated condition table 
table 
event table defining mode class pressure 
generating test sequences event table 
illustrate method consider event table sis specification see table defines value mode class pressure 
mode class modes toolow permitted high 
time system modes 
drop water pressure constant low causes system enter mode toolow increase pressure larger constant permit causes system enter mode high 
shows function derived table definition 
clause indicates events explicitly named table change value variable defined 
set test sequences complete need construct test sequences cases described explicitly table change cases 
fi pressure waterpres lou pressure permitted el pressure permitted waterpres permit pressure high pressure permitted qt waterpres low pressure toolow pressure high ot waterpres permit pressure permitted pressure pressure fig 

function defining pressure single clause 
produce interesting suite test sequences change cases replace definition mode class pressure equivalent definition associates clause possible value pressure 
changes cases labeled 
case value pressure change 
case monitored variable waterpres changes way satisfies constraints fi cl pressure cl ot waterpres low pressure permitted cl pressure pressure fi pressure permitted cl qt waterpres permit pressure high cl qt waterpres low pressure toolow pressure pressure fi pressure high waterpres permit pressure permitted pressure pressure fi fig 

function defining pressure clause mode 
case waterpres change monitored variable example block reset changes 
approach ci labels branch equivalence class state transitions 
branches cover interesting state transitions change value variable table defines 
approach construct test sequences branch 
example branch labeled cl test sequences constructed satisfy hypothesis property pressure qt waterpres lou pressure permitted 
translate tabular format promela language spin apply translation method described 
shows translation promela branches labeled cl 
promela allow expressions containing current primed values variables promela variables assigned scr variable 
variable suffix represents primed variable 
translate event event table promela statement 
event row table labeled cl translated statement lines promela code 
addition translate clause corresponding statement promela 
eke clause branch labeled translated corresponding statement sixth line promela code 
label different cases promela code introduce integer variable var names variable defined table 
indicate case corresponding ci assign value manner ensure branch assigns dif henceforth uses terms branch case interchangeably 
auxiliary variable unnecessary solely ity generality 
method works just new variables 
example may promela goto statement similar alternatives 

fi pressure toolow low waterpres low permitted fi 
promela code cases ci 
ferent value 
shows branches branch labeled second 
spin construct test sequences branch 
define trap property violates predicate case statement 
construct test sequence corresponds construct negation insert promela assert statement assert 
trace violating trap property trace satisfies case branch associated 
spin analyzes sis specification trap property produces expected counterexample 
counterexample method derives test sequence length shown table 
required states test sequence satisfy predicate labeled cl 
sequence concludes states state waterpres low pressure toolow implied waterpres step state waterpres low pressure permitted implied waterpres equals step 
required input model value waterpres state exceeds psi 
problem test sequence excessive length 
section discusses problem shows shorter test sequence may built smv 
step monitored var 
controlled var 
step monitored var 
controlled var 
value value 
value value table 
test sequence derived spin counterexample case cl fig 

mode conditions toolow overridden overridden permitted high true false table 
condition table defining 
generating test sequences condition table 
test sets gener ated condition tables similar manner 
example consider con dition table table defines controlled variable saf 
table states pressure toolow overridden true pressure permitted high safety injection pressure toolow overridden false safety injection entry false rightmost column means safety injection pressure permitted high 
table generates cases cl cd shown 
condition tables explicitly define total functions contain implicit change cases need generate additional branches containing clauses 
note modes second row table generate different cases 
fi branch coverage pressure toolow overridden true cl overridden false fi pressure permitted pressure high cd fig 
function defining 
associated method described section precise defined notion test coverage 
method assures branch coverage observing rules 
condition table condition equivalent false tested 

event table event tested 

event table mode change case tested 
example applying rule condition table table generates minimum test sequences conditions shown pressure toolow modes permitted high guarantee 
third rule addresses change cases important es high assurance systems high confidence needed variable changes change change change 
coverage provided third rule weak input events change dependent variable 
achieve greater cov erage modified method generate test sequences satisfying stronger rule 
event table mode change monitored variable change value variable table defines tested 
example consider change case cz 
function defining mode class pressure see 
case method generate test sequences corresponding change monitored variables block reset waterpres 
course waterpres change value constant low 
similarly test sequences constructed change cases 
event table method construct test sequences 
obtain coverage event table defining pressure modes toolow permitted high cover state space 
event tables modes mentioned explicitly modes event changes value variable table defines 
situations change cases involve missing modes covered appending additional clause function definition derived table 
tool automatically generating test sequences developed tool java uses model checker construct suite test sequences scr requirements specification 
achieve tool automatically translates scr specification language smv spin constructs different cases executes model checker case analyzes results derives test sequences writes test sequence file 
case processes tool checks case covered existing test sequences 
proceeds case 
tool runs model checker transforms counterexample generated model checker test sequence 
processes cases tool finds new test sequence covers cases associated previously computed test sequence tl 
situation test sequence tl discarded longer useful 
software errors occur data boundaries designed tool option causes extra test sequences constructed data boundaries 
turning comparison split option causes tool split branch contain ing relation integers branches containing containing similarly option splits branch containing ii branches containing second containing 
option selected tool generate test sequences test relation 
specif 

total test seq test seq 
exec 
time total steps vars branches spin smv spin smv spin smv spin smv small sis large sis cruise cont 
table 
automatic generation test sequences spin smv 
experimental results section describes results applying tool specifications small sis specification described section larger sis specification small cruise control specification hi specification mathematically sound abstraction large contractor specification real system 
larger sis identical small sis low permit waterpres ranges changes psi step 
purpose applying test generation tool specification evaluate method large realistic specification 
specification sizable component contractor specification real valued variables replaced integer variables model checking original contractor specification infeasible state space infinite 
reduced specification quite large containing variables monitored variables auxiliary variables controlled variable 
processing specifications comparison split option 
generating test sequences smaller specifications applied rule section obtain wider coverage 
due large size specification consequently long execution time anticipated generating test sequences applied rule weaker 
tables summarize results experiments 
table 
vars gives total number variables specification 
branches total number branches total test seq 
gives total number test sequences generated useful test seq 
number test sequences remaining weaker test sequences covered test sequences discarded exec 
time indicates total seconds required construct test sequences total steps describes total number input events tool processed constructing test sequences 
spin smv table shows number unreachable cases tool encountered see lengths useful test sets generated specification 
spin vs smv approaches model checking significantly different spin smv produced different results test sequences generated efficiency large examples 
table shows main problem spin test sequences generated specification contain versions discrete versions real valued variables translating variable real valued variables tedious straightforward 
developed plan implement algorithm automatically transforms test sequence concrete test sequence 
specif 
spin generated test sequences san generated test sequences useful unreach 
lengths useful unreach 
lengths small sis large sis gm cruise cont 

table 
unreachable cases test sequence lengths specifications 
length test sequences generates 
spin depth search state machine model produces long counterexamples long test sequences 
applied spin switch finds shortest counterexample approach rarely test sequence shortest possible length 
led experiment smv produces shortest possible counterexamples search breadth 
illustrate results generating test sequences counterexample generation smv recon sider branch labeled cl see section 
table shows test sequence length tool derived counterexample generated smv 
clearly test sequence cheaper way test software imple mentation se behavior described case cl test sequence length shown table 
step monitored var 
controlled var 
value value waterpres waterpres waterpres table 
test sequence derived smv counterexample case cl fig 

specifications produced results smv construct test sequences dramatically reduced length test se quences 
smv produced test sequences spin 
example analyzing smaller sis specification see table smv produced useful test sequences ranging length spin generated useful test sequences lengths 
tables show smv generate shorter ples addition small examples smv faster spin 
large examples smv required long computation times spin gen faster covered entire specification fewer long test sequences 
case smv ran memory generated test sequences indicated table 
contrast spin generated test sequences specification 
reason difference lies different approaches model check ing taken spin smv 
spin uses explicit state enumeration verify prop erties computes set reachable states enumeration running model smv represents reachable states symbolically bdd formula 
number reachable states requirements specifications usually far fewer number possible states bdd formula computed smv enormous includes constraints input variables spin better smv large scr specifications especially finding state property false 
unreachable states generating test sequences smaller specifications tool exposed cases involved states see table 
example tool unreachable state se specifications 
model checker tried find trace mode pressure transition toolow high 
specifications transition impossible constraints changes waterpres values constants low permit 
similarly unreachable cases shown table cruise control specification involve impossible transitions example transition changes mode class remains easily shown impossible invariants 
large specifications model checker runs memory time finds counterexample 
situation method detect case unreachable simply complex analyzed model checker available memory 
situation occurs tool identifies case method failed cover designer consider problem necessary build test sequence hand 
situation occurred tool model checking specification spin ran memory generated test sequences unreachable cases listed table 
suspicion test sequences involve impossible transitions 
large size specification probably caused spin run memory traces cases 
role abstraction specification variables complicated larger sis specification spin required fewer input events generating test sequences specification gener ating test sequences larger sis specification 
view reason abstraction applied effectively specification contrast abstraction applied sis specification 
processing specifications spin usually changes input variable specification input variables times 
eliminating uninteresting input variables abstraction possible decrease length test sequences spin produces 
effective model checking model checking may verify properties specifications enormous state space finite state models practical software specifications leads state explosion problem model checker runs memory time analyze complete state space 
occurs partial order methods reducing state space applied 
model checking usually effective detecting errors generating coun verification 
model checker effective way 
related groups formulated formal framework test ing criteria test oracles formally defined 
approach programmers model specify programs construct test sequences 
groups guidelines constructing test sequences describe concrete method automatically generating test sequences 
groups model checker generate test cases complete output values 
callahan colleagues process representing specification examine traces generated process simulating program 
manner detect analyze discrepancies software implementation specification set properties 
spin oracle compute system outputs process representing specification 
engels describe spin generate test sequences 
assume designer defined testing purpose analogous trap properties 
major weakness reliance method manual translation specification spin requires skill ingenuity 
methods properties construct test sequences suffer weaknesses property methods described section 
black proposed novel approach mutations uses smv generate test sequences 
applying mutations specification properties obtain large set test sequences describe correct system executions describing incorrect system executions 
method correct software implementation pass tests describe correct executions fail tests incorrect executions 
method lacks systematic treatment change cases provided method 
blackburn describe different method generating test sequences scr specifications model checker 
method tool called vec derives set test vectors scr specifications 
vector oriented approach test sequence simply pair system inputs outputs 
method proven useful testing software modules black box software testing problematic provide valid sequence inputs leading pair state vectors 
summary plans described original method automatic generation test sequences operational requirements specification model checker 
method desirable features uses operational requirements specification construct valid sequence system inputs compute expected system outputs input sequence 
generates suite test sequences cover state transitions generating test sequences cases explicitly described specification cases implicit specification change cases 
sequences test critical input sequences change system state specified event tables change system state 
condition condition table tested 
may applied explicit state model checker spin symbolic model checker smv 
illustrate utility approach showed tool implements method generate test sequences small examples large component contractor specification real world system 
early re sults demonstrate method potential efficiency practical utility 
number important issues remain 
plan experiment abstraction address state explosion problem encountered smv long input sequences produced spin 
effectiveness combining mathematically sound automated abstraction methods model checking detecting specification errors optimistic abstraction prove effective making automatic test sequence generation large specifications practical 
second study alternative methods selecting test sequences branch 
current method usually constructs single test sequence branch function definition 
important question select collection test sequences adequate testing behavior specified branch 
alternative prove useful large number variable values exist large ranges numerical values statistical method select test sequences 
alternative select test sequences systematically case splitting 
determine particular test sequences select method weyuker colleagues may useful 
plan suite test sequences tool generates scr requirements specification test real software implementation 
acknowledgments grateful archer jeffords anonymous referees constructive comments earlier versions 

black 
model checking generate tests specifications 
proc 
nd ieee intern 
conf 
formal engineering meth ods brisbane australia december 

beizer 
software testing techniques 
van nostrand reinhold 

bharadwaj heitmeyer 
model checking complete requirements specifi cations abstraction 
automated software eng 
january 

blackburn fontaine 
automatic generation test vectors scr style specifications 
proc 
th annual conf 
computer assurance compass gaithersburg md june 

callahan schneider easterbrook 
specification testing model checking 
proc 
spin workshop rutgers university august 
tech 
report nasa 


courtois david parnas 
documentation safety critical software 
proc 
th id conf 
softw 
eng 
icse baltimore md 

easterbrook callahan 
formal methods verification validation partial specifications case study 
journal systems software 

engels 
test generation intelligent networks model checking 
proc 
tacas pages 
springer 
brinksma editor lncs 

kirby jr shah sutton 
experience applying core method lockheed oj 
proc 
th annual conf 
computer assurance compass gaithersburg md june 

fujiwara 
test selection finite state models 
ieee dans 
softw 
eng june 

havelund shankar 
experiments theorem proving model checking protocol verification 
proc 
formal methods europe fme pages 
springer verlag march 
lncs 

heitmeyer kirby labaw archer bharadwaj 
abstraction model checking detect safety violations requirements specifications 
ieee 

eng november 

heitmeyer kirby jr labaw 
tools formal specification cation validation requirements 
proc 
th annual conf 
computer assurance compass gaithersburg md june 

heitmeyer jeffords labaw 
automated consistency checking requirements specifications 
acm trans 
software eng 
methodology april june 

parnas shore 
software requirements aircraft 
technical report naval research lab wash dc 

holzmann 
model checker spin 
ieee 
software engineering may 


functional approach program testing analysis 
ieee 
softw 
eng october 

jeffords heitmeyer 
automatic generation state invariants re specifications 
proc 
sixth acm sigsoft symp 
foundations software engineering november 

mandrioli 
generating test cases real time systems logic specifications 
acm 
computer systems 

mcmillan 
symbolic model checking 
kluwer academic publishers engle wood cliffs nj 

miller 
specifying mode logic flight guidance system core scr 
proc 
nd acm workshop formal methods software prac tice 

richardson aha malley 
specification test oracles reactive systems 
proc 
th intern 
conf 
software eng pages 
springer may 

stocks carrington 
framework specification testing 
ieee ans 
softw 
eng november 

weyuker singh 
automatically generating test data boolean specification 
ieee trans 
softw 
eng may 
