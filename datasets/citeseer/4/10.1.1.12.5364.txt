empirical differences cots middleware scheduling strategies christopher gill fred kuhns ron cytron douglas schmidt cs wustl edu schmidt uci edu department computer science electrical computer engineering washington university st louis university california irvine submitted th international symposium distributed objects applications irvine ca october november 
proportion complex distributed real time embedded dre systems commercial shelf cots hardware software increasing significantly response difficulty expense building dre systems entirely scratch 
previous showed applying different scheduling strategies middleware allow solutions provide assurance optimization real time constraints important classes mission critical dre systems 
empirical studies help developers cots dre systems crucial distinctions strategies appear similar policy run time effects may differ practice 
provides contributions study realtime quality service qos assurance performance cots dre systems 
examine detail hybrid static dynamic scheduling strategies behave similarly policy fact produce different results conditions utilization meeting real time assurances 
second offer recommendations results developers dre systems boeing bold stroke platform adaptive software flight demonstration program experiments conducted 
contributions address highlight importance issues real time scheduling cots environments careful mapping scheduling policies implementation mechanisms benchmarking analysis actual systems representative operational environments 
keywords dynamic scheduling algorithms analysis real time assurance optimization distributed realtime embedded systems mission critical systems quality service issues middleware apis 
supported part boeing darpa ito darpa contract afrl contracts 
motivation distributed real time embedded systems distributed real time embedded dre systems increasingly widespread important 
examples dre systems include autonomous agent teams multirobot environment mapping manufacturing process automation high performance assembly lines defense systems avionics mission computing systems 
types dre systems achieve capabilities managing connections data transfer distinct endsystems offering predictable efficient control system resources operating computing memory resource limitations imposed stringent weight cost power constraints 
designing dre systems offer strong assurances real time predictability parsimonious limited computing resources hard building time budget harder 
studying real time policies mechanisms commercial offthe shelf cots systems empirically essential ensure mission critical dre systems built maintained cost effective manner 
previous quantified benefits applying multiple scheduling paradigms cots middleware support quality service qos demands dre systems possess mix hard soft real time requirements avionics mission computing systems mission critical distributed audio video processing real time robotic systems 
previous showed strategy plausible system policy best choice strategy apply may obvious 
distinguish policy scheduling strategy ordering operations schedules mechanisms implement policy prioritized threads queues timers 
presents additional empirical results analysis multi paradigm cots middleware offer insights canonical choice hybrid static dynamic scheduling strategies 
suggest guidelines choosing strategies examined research posit model hypotheses test model investigation issues 
research conducted context real world mission critical dre application research operational flight program ofp designed technology transfer production avionics mission computing systems 
viewed case study application scheduling strategies middleware dre systems 
results presents apply class dre systems cross cuts application domains manage critical non critical real time requirements 
context real time corba middleware dre systems historically custom developed ad hoc inflexible manner 
operational systems built way development process failed address challenges adequately reducing total ownership costs providing portable qos management tailoring resource provisioning assure critical system requirements met worst case recovering resources appropriately improve non critical performance average case 
years technologies converged address challenges distributed object computing doc middleware 
doc middleware systems software resides applications underlying operating systems network protocol stacks hardware 
offers clients portable language independent location transparent invocation methods target object implementations 
doc middleware simplifies application development loading tedious error prone aspects distributed computing application developers middleware developers 
real time corba 
real time corba doc middleware standard adds capabilities support predictability remote operations original corba specification 
improves system predictability bounds avoids priority inversions supporting management system resources 
implement real time corba effectively object request broker orb provide run time support automate dre features connection management marshaling demultiplexing language os independence resource scheduling load balancing error handling fault tolerance security 
generation orbs provide features optimizations support dre systems stringent qos requirements 
ace orb tao 
meet stringent qos requirements dre systems researchers washington university st louis university california irvine developed second generation orb called tao open source implementation real time corba supports efficient predictable flexible dre computing 
prior tao explored dimensions high performance real time orb design performance including scalable event processing request demultiplexing subsystem protocol integration connection architectures asynchronous synchronous concurrent request processing adaptive load balancing meta programming mechanisms idl stub skeleton optimizations 
multi paradigm scheduling framework 
increase responsiveness varying operational environments extended prior research static dynamic scheduling real time corba incorporating scheduling framework called tao real time event service 
addresses challenge single scheduling paradigm performs best environments enabling configuration empirical evaluation multiple scheduling paradigms including static scheduling strategies rate monotonic scheduling rms dynamic scheduling strategies earliest deadline edf minimum laxity mlf hybrid static dynamic scheduling strategies maximum urgency muf rms mlf 
focuses hybrid static dynamic muf rms mlf strategies demonstrated preferable cots middleware total system load infeasible critical subset load feasible 
specifically muf rms mlf able partition critical non critical resource utilization static mechanisms thread priorities cots systems dynamically schedule single operations partitions 
results illustrate framework provide adaptability product families operating systems importantly environmental conditions preserving rigorous scheduling guarantees testability offered prior statically scheduled corba operations multi paradigm scheduling 
japanese word meaning literally breath implying timing coordination 
term short lived computation performed time event pushed component operation 
performance differences similar strategies crucial question developers mission critical dre systems differences policy alternative scheduling strategies sufficient distinguish strategy sequence alternative strategies practice set system environmental conditions 
presents empirical evidence policy sufficient 
careful prototyping modeling analysis optimization actual behavior enforcement mechanisms necessary ensure choices 
described motivated empirical results multi paradigm scheduling 
results revealed differences performance scheduling strategies rms mlf muf expected perform similarly conditions experiment 
specifically terms policy rms mlf muf strategies expected show meaningful differences actual real time performance 
reasoning 
experimental conditions described section sequence resource requests critical non critical operations identical experiments rms mlf muf scheduling strategies 

pseudo random sequence jitter added critical non critical operations identical rms mlf muf 

rms mlf muf monotonically prioritize critical requests ahead non critical ones availability cpu non critical processing function time identical 

rms mlf muf strategies laxity order non critical requests lowest priority queue order non critical requests serviced identical strategies 
clearly policy insufficient explain results saw 
results indicate need consider policy model extended account variations performance due properties mechanisms implement policies 
presents new analysis data obtained earlier experiments identifies newly discovered correlations data 
offer plausible model observed behavior rms mlf muf scheduling strategies suggest additional hypotheses experiments verify model 
organization remainder organized follows section describes application middleware os hardware configurations comprise open experimentation platform empirical studies section summarizes experimental design factors relevant performance differences scheduling strategies previous section presents new findings analysis data section summarizes observations recommendations results identifies plausible model variability scheduling strategies suggests hypotheses experiments section compares research related section offers concluding remarks 
open experimentation platform focuses experiments conducted adaptive software flight demonstration program mission critical system representative important class dre systems operational flight program ofp avionics mission computing system 
ofp manages sensors operator displays navigates aircraft course controls board equipment 
avionics system experiments consisted ofp components hosted bold stroke domain specific middleware infrastructure turn built distribution middleware capabilities common middleware services provided tao real time corba orb 
nt desktop dy unix workstation dy ofp component bold stroke infrastructure event channel motorola ofp component tao orb core ofp component dy map display processing event channel ofp processing ethernet ofp component bold stroke infrastructure event channel vxworks rtos vxworks rtos vxworks rtos vme backplane bus open experimentation platform hardware software illustrates os hardware middleware application layers open experimentation plat form cots os hardware 
cots hardware operating system experiments described section consisted commercial vme chassis commercial processor cards desktop computer running windows nt data gathering visualization portable unix workstation load executable programs boards vme chassis file server digital map display 
cots processor cards dy dy performed map display function 
dy card memory mapped display processor dy card hosted application component ran map display algorithms 
ofp system distributed remaining processor cards 
system card mhz powerpc motorola card ran experimental system vxworks real time operating system 
second system card mhz powerpc dy card 
card contained mil std mux bus interface card ethernet interface vme chassis 
external communication bus connected sensors actuators called remote terminals aircraft vme backplane diagnostic debug systems went card 
card controlled timing frame sequencing display updates operation rates motorola card depended 
doc middleware 
cots distributed object computing middleware demonstration tao implementation real time corba 
tao real time event channel publish subscribe service mediates communication components acting proxies remote terminals interact physical environment operations process data 
sensor proxies flush relevant data bold stroke replication service propagates data endsystems 
sensor proxies push events realtime event channel processing operations 
operation deadlines experimental system correspond points time respective output values delivered flushed replication service 
framework provides scheduling dispatching services tao real time event channel 
responsible isolating critical processing non critical processing making remaining cpu time available non critical processing 
provides services platform studies conducted supported adaptive software flight demonstration program hosted boeing phantom works open systems architecture organization 
administered embedded systems branch information directorate air force research labs afrl wright patterson air force base dayton ohio 
portions tao orb bold stroke open experimentation platform developed support darpa ito 
scheduling strategy configured assign priorities operations specify queueing discipline priority level 
configuring tao realtime event channel specified set priorities queue disciplines middleware services described enforce mission computing system real time qos assurances performance 
bold stroke domain specific middleware 
open experimentation platform bold stroke domain specific middleware 
bold stroke uses cots hardware middleware produce component architecture military avionics mission computing capabilities navigation data link management weapons control 
driving objective bold stroke support reusable product line applications leading highly configurable application component model supporting reusable middleware services replication persistence services 
bold stroke developed deployed doc middleware components services tao realtime orb tao real time event channel framework 
bold stroke uses tao real time event channel atop tao orb communicate components endsystem distributed different endsystems 
scheduler maintains information required priority preserving dispatching experimental framework described section performed dispatching queues tao real time event channel 
ofp application 
ofp application basis multi paradigm scheduling experiments provides avionics mission computing capabilities av aircraft 
distributed ofp implemented boeing av open systems core avionics requirements airframe boeing bold stroke domain specific middleware 
major ofp components implemented periodically invoked operations executed event consumers 
operation belongs equivalence classes hard real time hrt critical operations critical operations hrt class failure meet deadline potentially significant consequences correctness application 
soft real time srt non critical operations deadline success non critical srt operations desirable strictly mandatory 
pre defined rates execution system hz hz hz hz hz 
operation ran rates 
open experimentation platform new hz srt functions added ofp including routes steering components digital map display 
relevant experimental characteristics section outlines experimental factors relevant analysis modeling observed performance differences maximum urgency muf rate monotonic scheduling rms minimum laxity mlf representative environmental conditions varying load load jitter open experimentation platform described section 
remainder section describes new hypotheses investigated variables controlled variables measured studies 
hypotheses hypotheses explored studies shown table 
table notes conducted analysis evaluate hypothesis 
hypothesis analysis efficiency effectiveness scheduling strategy sensitive environmental factors load load jitter 
performance differences similar scheduling strategies may correlate strongly mechanism level factors policy level factors 
performance differences show meaningful correlation plausible model mechanism level behavior 
examine efficiency effectiveness widely varying load load jitter conditions 
examine performance similar strategies conditions behavior expected similar policy 
compare fine grain differences performance data differences mechanisms plausible responses variations environmental conditions load load jitter 
table hypotheses studied analysis approaches test hypotheses study empirical differences similar rms mlf muf hybrid static dynamic scheduling strategies examined detailed operation dispatching success failure data collected experimentation platform described section 
data came identical trials canonical scheduling strategies rms purely static strategy assigns priorities rate order manages requests priority level fifo order 
examined rms performance comparison gives insight bounds sensitivity increasing load load jitter 
muf hybrid static dynamic strategy assigns static priorities operation criticality schedules static priority minimum laxity 
rms mlf hybrid static dynamic strategy schedules critical operations rate non critical operations lower priority laxity 
selected strategies analysis earlier showed applicable ofp application requirements support hard real time hrt soft real time srt operations range load load jitter conditions 
controlled variables manage effects varying load load jitter diverse operating environments asked run generation dre systems satisfy resource demands 
vary longer time scales series stable epochs operation 
produce different degrees jitter invocation demands shorter time scales epoch 
model variation load load jitter imposed types demands experiments analysis added operations sequence twelve epochs operation representing distinct operating region numbered shown 
section summarize experimental non critical load operating regions tics operating regions characterize observed differences rms mlf muf scheduling strategies 
discussed section experimental characteristics relevant examine differences performance rms mlf muf scheduling strategies sequence resource requests critical non critical operations pseudo random sequence jitter added critical non critical operations relative ordering critical non critical request partitions ordering non critical operations 
consider characteristics turn sequence resource requests 
resource requests rates hz hz hz hz 
phasing application operations organized reduce contention cpu provide regular windows low contention cpu extract collected data interfering experiment 
shows resulting framing operations executing ofp 
second key hz hz hz data framing operation requests metrics data extraction points addition fixed ofp operations active operating region introduced chains additional hz srt navigation route leg updates operating region 
computing route legs implemented route segment successfully completed requesting segment length chain 
varied length request chain move lowest highest fundamental non critical load 
incrementally region region keeping fundamental critical load constant operating regions 
kept non critical load region region ensure compared effects different levels jitter change fundamental load case 
key observation regarding analysis rms mlf muf scheduling strategies framing sequence shown sequence load 
load critical non critical operations offered strategy meaningfully compare performance differences strategies 
pseudo random jitter sequence 
examine effects varying levels load jitter similar fundamental route leg segment navigation route computed operation invocation 
loads similar levels jitter varying non critical loads added additional hrt event consumer second dy card rates hz hz hz hrt 
experiments additional operations acted surrogates workload variation normally associated distributed production ofp variable environment 
cpu utilization additional hrt event consumers randomized range operating region range variation cycling regions 
msec lowest mean lowest variance 
msec medium low mean medium variance 
msec highest mean medium variance 
msec medium high mean highest variance table summarizes hrt execution variability added operating region 
total variability lowest regions higher regions higher regions highest regions 
range variability lowest regions comparable odd numbered regions highest regions 
regions variable hrt execution msec msec msec msec table load jitter operating region key observation analysis execution time variability range implemented pseudo random sequence initialized seed strategy 
load load jitter identical rms mlf muf strategies 
relative ordering request partitions 
policy rms mlf muf scheduling strategies partition critical operations non critical operations schedule operations critical partition preference operations non critical partition 
policies implemented thread priorities preemptive multi tasking real time os vxworks described section 
relative ordering request partitions rms mlf muf 
ordering non critical operations 
policy rms mlf muf place non critical operations lowest priority queue managed operation laxity 
values relevant operation characteristics execution time operation strategy 
non critical operations handled way rms mlf muf strategies 
measured variables section showed policy level rms mlf muf strategies indistinguishable controlled variables experiment 
examine measured variables experiment distinguish behavior rms mlf muf strategies 
offer insights possible reasons differences section 
measure response strategy varying load load jitter described section instrumented application middleware lightweight high resolution time stamps characterize system behavior 
focus missed operation deadlines 
missed operation deadlines offer kinds information 
assess real time effectiveness scheduling strategy measuring number category deadlines 
definition real time effectiveness differs conventional notions throughput sample srt operations counted deadline hrt operation deadlines missed entire sample 
higher total number srt deadlines missing hrt deadlines higher level performance strategy 
second assess real time efficiency scheduling strategies examining fraction srt operation deadlines 
efficiency define simply srt effectiveness divided total number srt operations load 
higher fraction srt operation deadlines missing hrt deadlines higher efficiency strategy 
general measured efficiency important offered load significance srt hrt operations exceed feasible utilization bound cpu seen operating regions 
effectiveness measure sufficient distinguish behaviors scheduling strategies 
distribution efficiency values shown section provides insight finer grained behavior strategy 
aggregate information profile response strategy offered load load jitter operating region 
empirical results results new analysis trials described section open experimental platform described section 
specifically systematically examine hypotheses described table note observations support hypothesis case 
empirically evaluate differences rms mlf muf strategies practice 
process uncover insights relevant developers mission critical dre systems 
efficiency effectiveness srt operation dispatching hypothesis 
efficiency effectiveness scheduling strategy sensitive environmental factors load load jitter 
overview analysis 
evaluate hypothesis examine efficiency effectiveness strategy varied changing load load jitter 
addition rms mlf muf similar hybrid static dynamic strategies examine behavior canonical rms static strategy purposes comparison 
synopsis results 
shows relative sensitivity rms rms mlf muf variations load load average srt deadlines hrt missed rms muf rms mlf operating region relative performance rms rms mlf muf jitter expected occur variations generation dre system environment 
vertical axis shows average weighted srt performance function different operating regions described section shown horizontal axis 
sample value zero assigned hrt deadlines missed sample value number srt deadlines 
average taken values operating region strategy 
rms strategy showed increasing performance operating regions 
rapidly decreased operating region minimal performance operating regions 
rms mlf muf strategies showed cyclic patterns performance operating regions cycle spanning operating regions 
addition srt performance differences indicated note rms offered best srt formance operating regions operating region rms showed samples missed hrt deadlines operating regions rms showed missed hrt deadlines sample 
note muf performed slightly better rms mlf operating region muf single sample single missed hrt deadline late operating region 
analysis results 
shows strong correlation performance scheduling strategies environmental factors 
interestingly results discussed correlate different factors rms rms mlf muf correlate factor rms mlf muf 
particular rms performance correlated strongly varying total load observable correlation variations load jitter 
rms mlf muf performance showed strong correlation load jitter weak correlation amplitude performance cycle variations system load 
difference performance rms mlf muf varied meaningfully function additional jitter resource request execution times offered load load jitter resource requests kept strategies operating region experiments 
summary 
results support hypothesis efficiency effectiveness scheduling strategy sensitive environmental factors refine hypothesis respect factors relevant strategies studied 
program collaborated dre system developers identify canonical scheduling strategies important environmental factors examine sensitivities realistic operating environments 
furthermore results identify strategies performed best different environmental conditions 
section extend observations observations mission critical cots dre systems general ensure environmental factors adequately addressed selecting middleware scheduling strategies 
mechanism level correlation hypothesis 
performance differences similar scheduling strategies may correlate strongly mechanism level factors policy level factors 
overview analysis 
evaluate hypothesis examine differences mechanism level factors correlated differences performance strategy 
focus extent strategy meets non critical deadlines different conditions load load jitter policy differences distinguish strategies 
argued section meaningful correlation policy rms mlf muf observed performance differences experimental conditions described section 
focus meaningful correlation established differences mechanisms implement rms mlf muf observed performance 
synopsis results 
shows weighted fraction srt deadlines sample operating region 
note main characteristics operating region number samples range muf rms mlf fraction srt deadlines weighted srt fraction operating region 
operating regions total load feasible threshold critical load remains feasible 
illustrates important similarities performance rms mlf muf strategies conditions 
strategies achieved high levels srt deadline success missed hrt deadlines 

distribution values similar reasonably bounded case 
muf showed slightly variation srt performance values consistently exhibited slightly lower levels success rms mlf 
shows weighted fraction srt deadlines sample operating region 
operating region slightly higher total load region importantly additional medium low msec level load jitter 
conditions strategies showed lower average levels srt deadline success wider range values 
interestingly ranges values similar muf showed continuous distribution values rms mlf 
interestingly muf slightly lower minimum maximum values performance average better rms mlf 
note single sample muf missed hrt deadline time spent operating region 
number samples range muf rms mlf missed hrt deadline fraction srt deadlines weighted srt fraction operating region analysis results 
graphs level distribution srt performance values distinguish strategies ways map mechanism level differences 
muf ordering hrt operations dynamic queue necessarily adds overhead compared best case performance multiple fifo queues different thread priorities rms mlf manages hrt operations 
discussed previously policy differences absence factors indicate type similar performance seen albeit downward shift muf values due mechanism level dynamic scheduling overhead 
consider pacing operation dispatch requests conditions little load jitter handling requests priority order 
factors offer evidence fact see best case mechanism level performance rms mlf strategy hz frame highest priority operations run completion highest priority forth 
see evidence performance differences indicates pulses preemption overhead contributing higher overhead average rms mlf 
note especially reasonably periodic bi modal distribution rms mlf performance values 
suggests medium low level load jitter operating region resulted non optimal arrival patterns lower priority requests arriving immediately higher priority request 
practice systems architected avoid realizing worst case request arrival patterns result critical instant 
degree succeeds affected variations job arrival processing times 
summary 
results support hypothesis performance differences similar scheduling strategies may correlate strongly mechanism level factors policy level factors 
focused attention implementation mechanisms scheduling strategies operating environment 
doing correlated different mechanism level responses environmental factors real time 
benchmarking canonical scheduling strategies operating environment essential evaluate middleware scheduling implementation 
section describes recommendations developers generation dre systems observations 
correlation plausible model hypothesis 
performance differences show meaningful correlation plausible model mechanism level behavior 
overview analysis 
evaluate hypothesis compare fine grain differences performance data differences mechanisms plausible responses variations environmental conditions load load jitter 
particular examine weighted srt performance operating regions represents canonical case load load jitter conditions 
synopsis results 
shows weighted fraction srt deadlines sample operating region 
similar relationship high jitter low jitter number samples range muf rms mlf fraction srt deadlines weighted srt fraction operating region performance strategies shown operating regions 
muf values offset slightly downward region distributions values narrow albeit lower levels region 
shows weighted fraction srt deadlines sample operating region 
similar relationship medium low medium high jitter performance strategies shown operating region 
muf values distributed continuously rms mlf 
analysis results 
graphs shown section performance differences strategies correlate strongly expected response number samples range muf rms mlf fraction srt deadlines weighted srt fraction operating region mechanism level factors load load jitter conditions operating region 
specifically appears phasing effect pacing hrt operations due jitter responsible results rms mlf suffering little preemption overhead zero jitter regions higher preemption overhead regions medium low medium high jitter low preemption overhead high jitter regions 
summary 
results support hypothesis performance differences show meaningful correlation plausible model mechanism level behavior 
observations suggest intermediate levels jitter introduced experiments described section led greater overhead rms mlf mechanisms 
attribute effect greater preemption context switching overhead result form phasing arrival hrt dispatch requests jitter increased decreased away medium levels rms mlf showed distribution srt deadline success values 
section offer recommendations experiences establishing empirical basis constructing model identify key elements model suggest hypotheses experiments validate model 
lessons learned research key observations recommendations empirical results section 
observations recommendations apply particular avionics mission computing application studied larger family mission critical dre systems 
describe validate model scheduling variability observations 
summary lessons learned noted section cots operating systems middleware highly desirable building maintaining mission critical dre systems cost effective manner 
cots software simply applied applications specialized processing requirements careful empirical study implications specific policies mechanisms employed systems 
particular real time applications stringent requirements may vary environmental stimuli system load operator intervention 
fundamental difficulties providing predictable behavior complex systems moderate heavy loads compound problem 
individual policies mechanisms scheduling strategies studied may exhibit differing overheads sensitivities environmental conditions 
judicial cots building blocks armed core underlying mechanisms possible build highperformance real time applications 
research identified key areas developers improve system behavior predictability observation 
efficiency effectiveness scheduling strategy sensitive environmental factors 
recommendation 
middleware researchers dre system developers collaborate ensure environmental sensitivities particular scheduling strategies characterized realistic operating environments factors particular dre system particular operating environment choose scheduling strategies system 
observation 
performance differences similar scheduling strategies may correlate strongly mechanism level factors policy level factors 
recommendation 
middleware researchers focus attention mechanism level implementation details scheduling strategies cots environments offer robust real time assurances control trade offs optimization 
developers cots dre systems benchmark scheduling strategies operationally meaningful environments evaluate extent particular middleware implementation addressed issues 
observation 
performance differences rms mlf muf strategies show meaningful correlation plausible model mechanism level behavior 
specifically results suggest preemption queue overhead effects important factors modeling performance differences strategies 
recommendation 
middleware researchers developers cots mission critical dre systems collaborate construct extend empirically evaluate detailed models mechanism level scheduling dispatching behavior cots hardware software environments 
models evaluated rigorously terms critical assurances non critical performance 
particular preferred models emerge effort additional attention paid refining cross validating models applications domains unifying models possible attain coherent picture cots real time qos management 
larger scale effort turn lead higher quality models techniques managing real time qos mission critical cots dre systems 
experimental results section results validated ability scheduling frameworks adapt strategies changing load operation mode 
raised issues related sensitivity mechanisms operational environment 
common practice designing real time systems select strategy worst case analysis 
results show necessarily optimal desirable 
practice different policies implementation exhibit varying overheads sensitivities environmental conditions 
example theory expect partitioning hrt srt operations scheduling priority protect critical operations ensuring meet deadlines 
case shown missed critical deadline operating region muf see section 
suspect feasible schedule critical tasks non preemptive dispatching strategy critical operations provided muf implementation result lower overhead overhead preemption necessary queue depths large structured environment 
appears true operating regions heavy loads breaks 
observations lead identification key aspects system contribute variability results operation scheduling parameters preemption model thread priorities request arrival queueing discipline ordering thread priority level mechanism overhead response factors 
propose factors basis mechanism level model variability different scheduling strategies evaluate 
specifically examine hypotheses regarding muf rms mlf strategies experiment hypothesis validate middleware scheduling model hypothesis 
overhead differences middleware os shown account observed latency differences strategies 
validate hypothesis devising experiments measure compare key sources overhead queue depths queue ordering cost thread context switch cost degree preemption middleware os experimental conditions comparable 
hypothesis 
question thread preemption context switching overhead overhead ordering operations dynamic queue greater distinct set load load jitter conditions shown account performance differences rms mlf muf strategies conditions 
validate hypothesis devising experiments measure compare complete preemption timeline operations measured middleware os overhead factors comparable experimental conditions described section 
related distributed real time embedded dre computing emerging field study 
increasing number research efforts focusing quality service qos properties timeliness integrating qos management policies mechanisms real time scheduling standards middleware real time corba 
pioneering efforts extend field providing meta capabilities configuration flexibility reflection ultimately adaptation meeting strict qos assurances 
section describes representative related framework 
avionics platform research 
branches research qos managed system infrastructure prevalent reusable feature avionics computing systems avionics domain platform research 
standardized avionics platforms avionics application software standard interface apex integrated modular avionics ima provide qos assurances systems avionics domain 
examines question support operations soft real time constraints possibly long running variable length computations canonical avionics specific platforms ima 
open systems avionics research 
sharp address challenge retaining key qos assurances avionics systems achieving improvements modularity reuse cycle times cost families flight software applications 
bold stroke avionics domain specific middleware described section emerged evolved 
research flexible adaptive real time scheduling dispatching conducted context bold stroke infrastructure contributed evolution 
corba related qos middleware research 
growing body related corba qos middleware 
focus related corba middleware research efforts address scheduling forms adaptive qos management 
standard specifications 
omg real time corba specification includes interfaces optional scheduling service implemented readily flexible scheduling dispatching capabilities 
plan release implementation service built framework 
emerging cots middleware standards dynamic scheduling real time common object request broker architecture corba non corba real time specification generalize possible range scheduler implementations specifying particular scheduling approach 
offers natural basis reuse policies mechanisms implementing schedulers associated dispatching infrastructures standards 
bbn quo 
quality objects quo distributed object middleware developed bbn technologies 
quo corba provides support agile applications running wide area networks run time performance tuning configuration specification qos regions behavior alternatives reconfiguration strategies allows quo run time adaptively trigger reconfiguration system conditions change represented transitions operating regions feedback software distribution boundaries control loop client applications server objects request levels service notified changes service 
integrated quo framework described 
ucsb realize 
realize project ucsb developed approach object migration replication improve performance soft real time distributed systems 
approach constitutes higher level adaptive control soft real time qos management complementary 
particular system developer apply realize provide soft real time load balancing endsystems framework integrate scheduling dispatching critical non critical load 
uci 
time triggered message triggered objects project university california irvine supports integrated design distributed oo systems real time simulators operating environments 
model provides structured timing semantics distributed real time object oriented applications extending conventional invocation semantics object methods corba operations include invocation operations system times invocation time bounded execution conventional operations 
tao complementary technologies extend generalize tao existing time invocation capabilities tao provides configurable dependable connection infrastructure needed service 
non corba qos research 
addition corba related qos middleware research related qos research conducted outside corba utah crm 
lepreau propose cpu resource manager crm middleware service managing processor allocation scheduling abstractions provided commodity shelf cots operating systems 
examine different kinds qos reservations propose unifying low level middleware abstraction layer shield developers accidental complexities produced variations scheduling abstractions operating system level 
approach focuses encapsulation scheduling dispatching policies providing flexible infrastructure allow arbitrary composition heuristics 
enclosing known set common abstractions aim provide flexible support diverse possibly unanticipated combinations scheduling requirements mechanisms policies middleware 
uci red linux scheduling framework 
wang university california irvine proposed general scheduling framework unify distinct kinds scheduling approaches priority time share 
decompose scheduling behavior policy allocator mechanism dispatching components similar scheduling service framework 
implemented dispatching portion framework real time extensions linux kernel called red linux 
red linux approach scheduling relies special purpose extensions os kernel framework relies commonly available os features preemptive thread priorities 
dispatching mechanisms augment standards corba middleware perform effectively wide range commonly available real time general purpose os platforms 
feedback control scheduling 
important areas related pioneering research feedback control real time scheduling fcs conducted stankovic lu university virginia 
apply control theory real time scheduling soft real time systems reduce number missed deadlines run time 
consider fcs highly complementary efforts model distinguish empirical study strategies real time assurance performance optimization 
primary difference fcs focus controlling single performance metric deadline performance soft real time tasks 
research aimed primarily distributed systems classes operations deadlines highest class assured soft real time performance optimized 
example fcs specifies ratio function comparable fraction srt deadlines described section measure fraction srt deadlines missed 
predicate raw measure soft real time performance critical deadlines missed sample obtain performance metric considers multiple criticality levels 
concluding remarks new increasingly non deterministic types processing video imaging targeted transition existing mission critical distributed real time embedded dre systems 
showed ability manage variations execution load load jitter alternative scheduling strategies increases applicability techniques dre systems built cots software architectures 
extended results analysis offers exact guidance choice scheduling strategies developers mission critical dre systems 
particular new empirical evidence observed performance differences rms mlf muf strategies due mechanism level effects face load jitter policy level differences capabilities scheduling strategies 
acknowledgments gratefully acknowledge support direction afrl program manager kenneth boeing bold stroke principal investigators bryan david sharp 
addition greg contributions research 
gill cytron schmidt middleware scheduling optimization techniques distributed real time embedded systems proceedings th workshop object oriented real time dependable systems san diego ca ieee jan 
gill schmidt cytron multi paradigm scheduling distributed real time embedded computing ieee proceedings special issue modeling design embedded software oct 
gill levine schmidt design performance real time corba scheduling service real time systems international journal time critical computing systems special issue real time middleware vol 
mar 
loyall gill schantz zinky pal shapiro rodrigues karr comparing contrasting adaptive middleware support wide area embedded distributed object applications proceedings st international conference distributed computing systems icdcs pp 
ieee apr 
karr rodrigues krishnamurthy pyarali schmidt application quo quality service framework distributed video application proceedings rd international symposium distributed objects applications rome italy omg sept 
stewart khosla real time scheduling sensor control systems real time programming ramamritham eds ny pergamon press 
schantz schmidt middleware distributed systems evolving common structure network centric applications encyclopedia software engineering eds new york wiley sons 
henning advanced corba programming 
reading ma addison wesley 
object management group common object request broker architecture specification revision dec 
schmidt levine design performance real time object request brokers computer communications vol 
pp 
apr 
harrison levine schmidt design performance real time corba event service proceedings oopsla atlanta ga pp 
acm oct 
gokhale schmidt measuring optimizing corba latency scalability high speed networks transactions computing vol 

kuhns schmidt ryan levine supporting high performance qos enabled orb middleware cluster computing journal networks software applications vol 

ryan kuhns schmidt parsons design performance pluggable protocols framework real time distributed object computing middleware proceedings middleware conference acm ifip apr 
schmidt flores gokhale software architectures reducing priority inversion non determinism real time object request brokers journal real time systems special issue real time computing age web internet vol 

ryan schmidt parsons design performance scalable orb architecture corba asynchronous messaging proceedings middleware conference acm ifip apr 
ryan schmidt kuhns parsons pyarali levine evaluating policies mechanisms support distributed real time applications corba concurrency computing practice experience vol 
pp 

ryan schmidt efficient adaptive load balancing service corba ieee distributed systems online vol 
mar 
wang schmidt evaluating meta programming mechanisms orb middleware ieee communication magazine special issue evolving communications software techniques technologies vol 
oct 
gokhale schmidt optimizing corba iiop protocol engine minimal footprint multimedia systems journal selected areas communications special issue service enabling platforms networked multimedia systems vol 
sept 
liu layland scheduling algorithms multiprogramming hard real time environment jacm vol 
pp 
jan 

chung 
liu 
lin scheduling periodic jobs allow imprecise results ieee transactions computers vol 
pp 
sept 
sharp reducing avionics software cost component product line development proceedings th annual software technology conference apr 
sharp freeing product line architectures execution dependencies proceedings th annual software technology conference apr 

air force research labs adaptive software flight demonstration delivery order contract boeing number 
wind river systems vxworks www wrs com products html vxworks html 
open systems core avionics requirement oscar www acq osd mil pdf oscar pdf 
incorporated annapolis maryland usa document avionics application software standard draft jan 
soft computations integrated avionics systems proceedings ieee national aerospace electronics conference oct 
object management group real time corba joint revised submission omg document orbos ed mar 
object management group dynamic scheduling real time corba joint final submission orbos ed apr 
gosling hardin turnbull real time specification java 
addison wesley 
zinky bakken schantz architectural support quality service corba objects theory practice object systems vol 
pp 

melliar smith moser dynamic migration algorithms distributed object systems st ieee international conference distributed computing systems icdcs phoenix az ieee apr 
melliar smith moser dynamic scheduling distributed method invocations st ieee real time systems symposium orlando fl ieee nov 
kim object structures real time systems simulators ieee computer pp 
aug 
lepreau case middleware manage diverse soft real time schedulers proceedings international workshop multimedia middleware canada oct 

wang 
lin implementing general real time scheduling framework red linux real time kernel ieee real time systems symposium pp 
ieee dec 
lu stankovic tao son feedback control real time scheduling framework modeling algorithms journal real time systems special issue control theoretical approaches real time computing appear 
lu feedback control real time scheduling 
phd thesis university virginia charlottesville va may 
stankovic abdelzaher tao son lu feedback control scheduling distributed systems nd ieee real time systems symposium rtss london uk dec 
lu stankovic abdelzaher tao son performance specifications metrics adaptive real time systems st ieee real time systems symposium rtss orlando fl dec 
lu stankovic tao son design evaluation feedback control edf scheduling algorithm th ieee real time systems symposium rtss phoenix az dec 
stankovic lu son tao case feedback control real time scheduling th euromicro conference real time systems york uk june 
