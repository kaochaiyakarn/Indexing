workflow patterns expressive power petri net workflow languages van der aalst ter hofstede department technology management eindhoven university technology box nl mb eindhoven netherlands 
aalst tm tue nl queensland university technology school information systems box brisbane qld australia 
qut edu au 
contemporary workflow management systems driven explicit process models completely specified workflow design required order enact workflow process 
creating workflow design complicated time consuming process hampered limitations workflow language 
identify differences various languages collected fairly complete set workflow patterns 
patterns evaluated workflow products detected considerable differences expressive power 
languages petri nets perform better comes state workflow patterns 
patterns involving multiple instances complex synchronizations non local withdrawals easy map high level petri nets 
patterns pose interesting modeling problems developing petri net language yawl workflow language 
workflow technology continues subjected going development traditional application areas business process modeling business process coordination emergent areas component frameworks inter workflow business business interaction 
addressing broad ambitious reach large number workflow products mainly workflow management systems wfms commercially available see large variety languages concepts different paradigms see 
current provisions compared newer concepts languages embarked striking little standards glossaries available central 
reasons attributed lack consensus constitutes workflow specification variety ways business processes described 
absence universal organizational theory standard business process modeling concepts contended explains ultimately justifies major differences workflow languages fostering horses courses diversity workflow languages 
comparison different workflow products winds dissemination products critique workflow language capabilities bigger picture differences workflow specifications highlighted technology typically platform dependent issues 
workflow specifications understood broad sense number different perspectives see 
control flow perspective process perspective describes activities execution ordering different constructors permit flow execution control sequence choice parallelism join synchronization 
activities elementary form atomic units compound form modularize execution order set activities 
data perspective layers business processing data control perspective 
business documents objects flow activities local variables workflow qualify effect pre post conditions activity execution 
resource perspective provides organizational structure anchor workflow form human device roles responsible executing activities 
operational perspective describes elementary actions executed activities actions map underlying applications 
typically business workflow data passed applications activity application interfaces allowing manipulation data applications 
clearly control flow perspective provides essential insight workflow specification effectiveness 
data flow perspective rests organizational operational perspectives ancillary 
workflow specifications extended meet newer processing requirements control flow constructors require fundamental insight analysis 
currently workflow languages support basic constructs sequence iteration splits xor joins xor see 
interpretation basic constructs uniform unclear complex requirements supported 
vendors afforded opportunity recommend implementation level hacks database triggers application event handling 
result current capabilities workflow languages insight complex requirements business processes advanced 
indicate requirements workflow languages workflow patterns 
described pattern abstraction concrete form keeps recurring specific contexts 
gamma catalogued systematically design patterns describe smallest recurring interactions object oriented systems 
design patterns provided independence implementation technology time independence essential requirements domain attempting address see 
collected set workflow patterns patterns compare functionality workflow management systems cosa visual workflow fort conductor lotus domino workflow meteor mobile mqseries workflow staffware workflow flow inconcert sap workflow eastman flower 
result evaluation reveals expressive power contemporary systems leaves desired systems support different patterns 
note term expressiveness traditional formal sense 
abstracts capacity constraints workflow language turing complete 
sense compare languages mal notions expressiveness 
intuitive notion expressiveness takes modeling effort account 
intuitive notion referred suitability 
see discussion distinction formal expressiveness suitability 
observation expressive power available workflow management systems leaves desired triggered question high level petri nets petri nets extended color time hierarchy workflow language 
petri nets sixties extended color time improve expressiveness 
high level petri nets tools design cpn university aarhus www daimi au dk www com incorporate extensions support modeling analysis complex systems 
reasons petri nets workflow language 
formal semantics despite graphical nature 

state just event 

abundance analysis techniques 
unfortunately straightforward application high level petri nets yield desired result 
problems relevant modeling workflow processes 
high level petri net possible colored tokens 
possible identify multiple instances subprocess specific support patterns involving multiple instances burden keeping track splitting joining carried designer 

flows need joined clear synchronization needed flows active join needed 
advanced synchronization patterns difficult model terms high level petri net local transition rule join xor join 

firing transition local tokens input places affecting output places 
events workflow may effect local error tokens need removed various places knowing tokens reside 
modeled cancellation pattern global timeout mechanism terms petri nets knows cumbersome model called vacuum cleaner removing tokens selected parts net 
discuss problems supporting workflow patterns highlevel petri nets 
briefly introduce workflow language development yawl workflow language 
yawl petri nets extended additional features facilitate modeling complex workflows 
workflow patterns working collecting comprehensive set workflow patterns 
results available workflow patterns basic control flow patterns pattern sequence pattern parallel split pattern synchronization pattern exclusive choice pattern simple merge structural patterns pattern arbitrary cycles pattern implicit termination state patterns pattern deferred choice pattern interleaved parallel routing pattern milestone advanced branching synchronization patterns pattern multi choice pattern synchronizing merge pattern multi merge pattern discriminator cancellation patterns pattern cancel activity pattern cancel case patterns involving multiple instances pattern multiple instances synchronization pattern multiple instances priori design time knowledge pattern multiple instances priori runtime knowledge pattern multiple instances priori runtime knowledge fig 

overview relevant patterns 
www site 
patterns range simple patterns sequential routing pattern complex patterns involving complex synchronizations discriminator pattern pattern 
restrict relevant patterns 
patterns classified categories 
basic control flow patterns 
basic constructs workflow languages model sequential parallel conditional routing 

advanced branching synchronization patterns 
patterns transcend basic patterns allow advanced types splitting joining behavior 
example synchronizing merge pattern behaves xor join depending context 

structural patterns 
programming languages block structure clearly identifies entry exit points quite natural 
graphical languages allowing parallelism requirement considered restrictive 
identified patterns allow rigid structure 

patterns involving multiple instances 
context single case workflow instance parts process need instantiated multiple times context insurance claim multiple witness statements need processed 

state patterns 
typical workflow systems focus activities events states 
limits expressiveness workflow language possible state dependent patterns milestone pattern pattern 

cancellation patterns 
occurrence event customer canceling order may lead cancellation activities 
scenarios events cause withdrawal case 
shows overview patterns grouped categories 
detailed discussion patterns outside scope 
interested reader referred 
patterns evaluate workflow systems cosa ley gmbh visual workflow fort conductor sun lotus domino workflow ibm lotus meteor uga lsdis mobile mq series workflow ibm staffware staffware plc workflow flow fujitsu inconcert tibco hp sap workflow sap eastman eastman flower pallas athena 
tables summarize results comparison workflow management systems terms selected patterns 
product pattern combination checked possible realize workflow pattern tool 
product directly supports pattern constructs rated 
pattern directly supported rated 
solution results spaghetti diagrams coding considered giving direct support rated 
pattern product staffware cosa inconcert eastman flower domino meteor mobile seq par spl synch ex ch simple choice sync multi disc arb impl mi mi dt mi rt mi def int par table 
main results staffware cosa inconcert eastman flower lotus domino workflow meteor mobile 
pattern product mqseries fort vis 
wf 
flow sap seq par spl synch ex ch simple choice sync multi disc arb impl mi mi dt mi rt mi def int par table 
main results mqseries fort conductor visual flow sap workflow 
please apply results summarized tables care 
organization selecting workflow management system focus patterns relevant workflow processes hand 
support advanced patterns limited focus patterns needed 
second fact pattern directly supported product imply possible support construct 
comparison clear tool supports selected patterns 
fact tools support relatively small subset advanced patterns patterns 
specifically limited support discriminator generalization join state patterns cosa synchronization multiple instances flower cancellation activities cases worth noting 
goal providing tables advocate specific tools 
illustrate existing tools languages truly different languages provide partial support patterns appearing real life workflow processes 
observations main motivation look expressiveness high level petri nets section come new language section 
limitations petri nets fact workflow management systems problems dealing workflow patterns interesting see established process modeling techniques petri nets cope patterns 
table listed appendix shows evaluation high level petri nets respect patterns 
ignore column yawl time 
term high level petri nets refer petri nets extended color data time hierarchy 
examples languages colored petri nets described combination petri nets specification described 
languages tools design cpn university aarhus www daimi au dk www com 
languages tools differences comes example language data transformations arc inscriptions clear common denominator 
refer high level petri nets refer common denominator 
avoid confusion terminology defined possible 
important note table shown appendix criteria tables workflow systems direct support 
compared existing languages high level petri nets quite expressive 
recall term expressiveness formal sense 
high level petri nets turing complete define terms algorithm 
imply modeling effort acceptable 
comparing table appendix tables see high level nets contrast workflow languages problems dealing state patterns 
direct consequence fact petri nets places represent states explicitly 
high level petri nets outperform existing languages result completely satisfactory 
indicated see serious limitations comes patterns involving multiple instances advanced synchronization patterns cancellation patterns 
remainder section discuss limitations detail 
patterns involving multiple instances suppose context workflow processing insurance claims subprocess processing witness statements 
insurance claim may involve zero witness statements 
clearly number witness statements known design time 
fact witness statement processed witnesses may pop 
means case part process needs instantiated variable number times number instances required known run time 
required pattern model situation pattern multiple instances priori runtime knowledge 
example pattern process handling journal submissions 
processing journal submissions multiple reviews needed 
editor journal may decide ask variable number reviewers depending nature controversial reviewers selected 
reviewing takes place editor may decide involve reviewers 
example reviewers responsive brief conflicting reviews editor may add additional reviewer 
examples multiple instances include orders involving multiple items customer orders books electronic bookstore process multiple quotations possible model variable number instances executed parallel high level petri net 
designer model keep track things case identities number instances running 
time multiple cases processed 
suppose active cases 
join tokens referring case synchronized 
inside part process instantiated times child cases part instantiated multiple times say child cases 
inside part instantiated multiple times may parallelism may multiple tokens referring child case 
normal join tokens referring child case synchronized 
part instantiated multiple times child cases having parent synchronized case continue child case part processed 
synchronization child cases child cases clearly separated 
complicate matters construct multiple instances may nested resulting child child cases synchronized right way 
clearly workflow language put burden keeping track instances synchronizing right level workflow designer 
keeping track identities synchronizing right level important know child cases need synchronized 
particular relevance number instances change instances processed witness points witness causing additional witness statement 
high level petri net handled introducing counter keeping track number active instances 
active instances left child cases synchronized 
clearly acceptable put burden modeling counter workflow designer 
advanced synchronization patterns consider workflow process booking business trip 
business trip may involve booking flights booking hotels booking rental car suppose booking flights hotels cars occur parallel elements optional 
means trip may involve flight trip may involve flight rental car possible hotel rental car flight 
process booking elements separate description may complex 
process optional flows need synchronized activities related payment executed booking elements flight hotel car processed 
problem clear need synchronized 
trip involving flight wait completion booking flight 
business trip involving elements flows synchronized 
situation synchronization xor join full synchronization join partial synchronization join needed referred pattern synchronizing merge 
interesting note synchronizing merge directly supported inconcert eastman domino workflow mqseries workflow 
systems designer specify type join automatically handled system 
high level petri net construct join transition xor join place 
possible model synchronizing merge various ways 
possible pass information split node join node 
example business trip involves flight hotel join node informed synchronize flows corresponding elements 
done putting token input place synchronization transition corresponding element car rental 
second possible activate branch boolean token 
value token true branch executed 
value false token passed branch activities skipped 
third possible build completely new scheduler terms highlevel petri nets 
scheduler interprets workflow processes uses synchronization rule fire transition input places marked current marking possible put tokens input places solution problem lifted level 
clearly solutions satisfactory 
workflow designer add additional logic workflow design case extend model accommodate true false tokens case model scheduler lift model level case 
interesting see problem synchronizing merge handled existing systems literature 
context mqseries workflow technique dead path elimination 
means initially input arc state unevaluated 
long input arcs state activity enabled 
state input arc changed true moment preceding activity executed 
avoid deadlocks input arc set false moment clear fire 
propagating false signals deadlock possible resulting semantics matches pattern 
solution mqseries workflow similar having true false tokens case described 
idea having true false tokens address complex synchronizations raised 
bipolar synchronization schemes primarily aimed avoiding constructs synchronizing merge nodes pure xor splits joins partial synchronization supported investigated 
context event driven process chains epc cf 
problem dealing synchronizing merge pops 
epc model allows socalled connectors joins synchronize flows active 
semantics connectors debated 
explicit modeling advocated case 
advocate weak correctness notion relaxed soundness intelligent scheduler case 
propose approach boolean tokens case 
rump proposes intelligent scheduler decide connector synchronize case 
different join semantics proposed connector wait come corresponds synchronizing merge pattern wait come ignore corresponds discriminator pattern wait execute time corresponds multi merge pattern 
extensive literature synchronization problems epc workflow systems illustrates patterns synchronizing merge relevant far trivial 
cancellation patterns workflow modeling languages including high level nets local rules directly relating input activity output 
situations local rules suffice 
events local rules quite problematic 
consider example processing customs declarations 
customs declaration processed person filed declaration supply additional information notify customs changes container cargo indicated declaration 
changes may lead withdrawal case specific parts process process 
cancellations simple example high level petri nets 
reason change additional declaration come time time frame may affect running scheduled activities 
local nature petri net transitions changes difficult handle 
known process tokens reside change additional declaration received trivial remove tokens 
inhibitor arcs allow testing place contains token 
quite bookkeeping required remove tokens arbitrary set places 
consider example parallel branches places 
remove tokens parallel branch consider possible states 
modeling vacuum cleaner construct remove tokens possible results spaghetti diagram 
difficult deal cancellation patterns cancel activity pattern cancel case pattern 
section discussed serious limitations high level petri nets comes patterns involving multiple instances advanced synchronization patterns cancellation patterns 
stress high level petri nets able express routing patterns 
modeling effort considerable patterns needed frequently burden keeping track things left workflow designer 
yawl workflow language joint effort eindhoven university technology queensland university technology currently working new workflow language petri nets 
goal joint effort overcome limitations mentioned previous section adding additional constructs 
detailed description language scope 
language development 
goal section briefly sketch features language named yawl workflow language 
condition input condition output condition split task xor split task split task 
fig 

symbols yawl 
atomic task composite task multiple instances atomic task multiple instances composite task join task xor join task join task remove tokens shows modeling elements yawl 
yawl extends class workflow nets described multiple instances composite tasks joins removal tokens directly connected transitions :10.1.1.30.3125
workflow specification yawl set extended workflow nets ewf nets form hierarchy tree structure 
tasks atomic tasks composite tasks 
composite task refers unique ewf net lower level hierarchy 
atomic tasks form leaves tree structure 
ewf net composite task referring 
ewf net named top level workflow forms root tree structure 
ewf net consists tasks composite atomic conditions interpreted places 
ewf net unique input condition unique output condition see 
contrast petri nets possible connect transition objects composite atomic tasks directly place object conditions 
semantics construct interpreted hidden condition implicit condition added direct connection 
note yawl term task activity remain consistent earlier workflow nets :10.1.1.30.3125
task composite atomic multiple instances indicated 
possible specify lower bound upper bound number instances created initiating task 
possible indicate task terminates moment certain threshold instances completed 
moment threshold reached running instances terminated task completes 
threshold specified task completes instances completed 
fourth parameter indicating number instances fixed creating instance 
value parameter fixed creation instances added var possible add additional instances instances processed 
note extending petri nets construct parameters lower bound upper bound threshold fixed var directly support patterns involving multiple instances cf 
section addition discriminator pattern pattern assumption multiple instances task 
fact support general join 
adopt notation described xor splits joins shown :10.1.1.30.3125
introduce splits joins corresponding respectively pattern multi choice pattern synchronizing merge cf 
section 
introduce notation remove tokens places independent fact tokens 
shows denoted dashed circles lines 
enabling task depend tokens dashed area 
moment task executes tokens area removed 
clearly extension useful cancellation patterns cf 
section 
independently extensions proposed purpose modeling dynamic workflows 
indicated earlier yawl development goal introduce language detail 
restrict simply applying yawl examples previous section 
example patterns involving multiple instances shows workflow specifications dealing multiple witness statements parallel 
workflow specification starts instances composite task process witness statement completing initial task register witness 
instances completed task archive executed 
second workflow specification shown starts arbitrary number instances composite task allows creation new instances 
third workflow specification starts instances composite task process witness statement finishes completed completed 
examples illustrate yawl allows direct specification patterns 
example advanced synchronization patterns explained section join interpreted ways 
shows possible interpretations booking business trip example 
workflow specification starts split register enables tasks flight hotel car 
task pay executed time tasks register witnesses inf fixed process witness statements archive workflow processing witness statements possibility add witnesses registration pattern 
register witnesses workflow processing arbitrary number witnesses possibility add new batches witnesses pattern 
register witnesses inf var process witness statements fixed process witness statements archive archive workflow processing witness statements threshold witnesses extension pattern 
fig 

examples illustrating way yawl deals multiple instances 
register flight hotel task pay executed time preceding task completes pattern 
register car flight hotel car pay pay task pay executed started tasks completed pattern 
register flight hotel task pay executed task completed pattern 
fig 

examples illustrating way yawl deals advanced synchronization patterns 
car pay flight hotel car completes 
construct corresponds multi merge pattern 
second workflow specification shown similar combines individual payments payment 
waits tasks enabled register completes 
note flight booked synchronization 
trip contains elements task pay delayed completed 
construct corresponds synchronizing merge pattern 
third workflow specification enables tasks flight hotel car pays task completed 
payment running tasks canceled 
construct sense context added illustrate discriminator supported pattern assuming running threads canceled moment completes 
example cancellation patterns illustrates way yawl supports cancellation patterns patterns 
workflow specification shows cancel activity pattern removes tokens input places task activity 
second workflow speci cancel activity activity cancel activity pattern 
cancel case pattern 
fig 

examples illustrating way yawl deals cancellation patterns 
fication task removing tokens putting token output condition realizing cancel case pattern 
examples section illustrate yawl solves problems indicated section 
table appendix shows yawl supports patterns evaluate contemporary workflow systems 
implicit termination multiple output conditions supported force designer think termination properties workflow 
fairly easy extend yawl pattern simply connect output conditions join having new unique output condition 
implicit termination hides design errors possible detect deadlocks 
support pattern 
workflow patterns described previous publications provide functional requirements workflow languages 
unfortunately existing workflow languages offer partial support patterns 
compared workflow languages commercial tools high level petri nets acceptable 
comes patterns involving multiple instances advanced synchronization cancellation high level petri nets offer little support 
working expressive petri net language supporting patterns 
hope modeling problems collected stimulate researchers working high level petri nets develop mechanisms tools methods providing support 

van der aalst 
chapter reasons petri net workflow management system 
wakayama navathe yates editors information process integration enterprises rethinking documents volume kluwer international series engineering computer science pages 
kluwer academic publishers boston massachusetts 

van der aalst 
application petri nets workflow management 
journal circuits systems computers 

van der aalst 
formalization verification event driven process chains 
information software technology 

van der aalst van hee 
workflow management models methods systems 
mit press cambridge ma 

van der aalst ter hofstede kiepuszewski barros 
advanced workflow patterns 
scheuermann editors th international conference cooperative information systems coopis volume lecture notes computer science pages 
springer verlag berlin 

van der aalst ter hofstede kiepuszewski barros 
workflow patterns 
beta working series wp eindhoven university technology eindhoven 

van der aalst ter hofstede kiepuszewski barros 
workflow patterns 
technical report eindhoven university technology eindhoven 
www tm tue nl research patterns 

van der aalst 
bij workflow systemen de plank mis 


pallas athena 
flower user manual 
pallas athena bv netherlands 


top petri net approach dynamic workflow modeling progress 
university new south wales sydney 


relaxed soundness business processes 
dittrich norrie editors proceedings th international conference advanced information systems engineering caise volume lecture notes computer science pages 
springer verlag berlin 

ellis nutt 
modelling enactment workflow systems 
ajmone marsan editor application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 


visual design guide 
costa mesa ca usa 

fort 
fort conductor process development guide 
fort software oakland ca usa 

fowler 
analysis patterns reusable object models 
addison wesley reading massachusetts 

fujitsu 
flow developers guide 
fujitsu software san jose ca usa 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
professional computing series 
addison wesley reading ma usa 

thiagarajan 
theory bipolar synchronization schemes 
theoretical computer science 

georgakopoulos hornick sheth 
overview workflow management process modeling workflow automation infrastructure 
distributed parallel databases 

van hee 
information system engineering formal approach 
cambridge university press 

hp 
hp process design guide 
hewlett packard palo alto ca usa 

ibm 
ibm mqseries workflow getting started 
ibm entwicklung gmbh germany 

jablonski bussler 
workflow management modeling concepts architecture implementation 
international thomson computer press london uk 

jensen 
coloured petri nets high level language system design analysis 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer verlag berlin 

jensen 
coloured petri nets 
basic concepts analysis methods practical 
eatcs monographs theoretical computer science 
springer verlag berlin 

keller ttgens scheer 
auf der epk 
ver des wirtschaftsinformatik heft german university saarland saarbr cken 

kiepuszewski 
expressiveness suitability languages control flow modelling workflows 
phd thesis queensland university technology brisbane australia 


workflow imperative 
van nostrand reinhold new york 

schneider 
petri net certification event driven process chains 
desel silva editors application theory petri nets volume lecture notes computer science pages 
springer verlag berlin 

lawrence editor 
workflow handbook workflow management coalition 
john wiley sons new york 

leymann roller 
production workflow concepts techniques 
prentice hall ptr upper saddle river new jersey usa 

ajmone marsan balbo conte 
class generalised stochastic petri nets performance evaluation multiprocessor systems 
acm transactions computer systems may 

ajmone marsan balbo conte modelling generalized stochastic petri nets 
wiley series parallel computing 
wiley new york 

nielsen 
lotus domino workflow sg 
ibm usa 

petri 
kommunikation mit 
phd thesis institut mathematik bonn 

riehle 
understanding patterns software development 
theory practice object systems 


modified epcs formal semantics 
technical report university koblenz landau koblenz germany 

rump 
analyse 
technischer bericht institut german university oldenburg oldenburg 

sap 
wf sap business workflow 
sap ag germany 

sch workflow management process organisations volume lecture notes computer science 
springer verlag berlin 

sheth kochut miller 
large scale distributed information systems lsdis laboratory meteor project page 
lsdis cs uga edu proj meteor meteor html 

eastman software 
tool user guide 
eastman software ma usa 

software ley 
cosa user manual 
software ley gmbh germany 

staffware 
staffware user manual 
staffware plc united kingdom 

tibco 
tib inconcert process designer user guide 
tibco software palo alto ca usa 


component workflow engine concepts 
san francisco ca usa 

wfmc 
workflow management coalition terminology glossary wfmc tc 
technical report workflow management coalition brussels 

workflow patterns home page 
www tm tue nl research patterns 
comparison high level petri nets yawl patterns table shown appendix indicates pattern high level petri nets yawl offers direct support indicated partial direct support indicated direct support indicated 
pattern high level petri nets yawl seq par spl synch ex ch simple choice sync multi disc arb impl mi mi dt mi rt mi def int par synchronizing merge supported designer keep track number parallel threads decide merge synchronize flows cf 
section 
ii discriminator supported designer needs keep track number threads running number threads completed reset construct explicitly removing tokens corresponding iteration cf 
section 
iii implicit termination supported designer keep track running threads decide case completed 
iv implicit termination supported designer forced identify unique final node 
model multiple nodes transformed net unique node simply synchronizing merge 
added yawl force designer think successful completion case 
requirement allows detection unsuccessful completion deadlocks 
multiple instances synchronization supported high level petri nets cf 
section 
vi supported cf 
section 
vii cancel activity partially supported remove tokens input place transition additional bookkeeping required multiple input places places may empty cf 
section 
viii cancel activity supported needs model vacuum clearer remove tokens may may reside specific places cf 
section 
