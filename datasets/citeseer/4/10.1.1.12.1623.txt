adaptive constraint engine susan epstein eugene freuder richard wallace anton bruce samuels department computer science hunter college graduate school city university new york new york ny usa susan epstein hunter cuny edu cork constraint computation centre university college cork cork ireland freuder ucc ucc 
adaptive constraint engine ace seeks automate application constraint programming expertise extraction domain specific expertise 
aegis forr architecture learning problemsolving ace learns search order heuristics problem solving experience 
describes ace approach new experimental results specific problem classes 
ace test bed csp research discovery environment new algorithms 

adaptive constraint engine ace program learns experience better constraint programmer 
constraint satisfaction problem csp involves set variables domain values variable set constraints specify combinations values allowed 
solution problem assigns value variable satisfies constraints 
binary csp underlying constraint graph variable represented vertex possible labels domain values 
edge constraint graph appears vertices constraints values corresponding vertices 
may think edge labeled permissible pairs values endpoints 
degree variable number edges underlying constraint graph 
currently ace learns search order heuristics 
supply ace set primitive methods characterize variables constraint graph maximum domain size minimum domain size maximum degree minimum degree 
primitives embedded procedures called advisors collaborate search order decisions 
example advisor recommend choose variable maximum domain size recommends choose variable minimum domain size solves problems ace learns advisors value weight advice 
ace relies underlying advisor architecture called forr right reasons proved successful domains 
earlier forr construct gc graph coloring program 
extend approach general csp incorporate advances ace combine primitive advisors learn new advisors 
ace demonstrates learning simple training instances transfer difficult test problems 
ace learn different heuristics different search stages early middle late 
ace employs new weight learning algorithm 
ace demonstrated rediscover classic heuristics new discoveries equal greater value 
specifically ace discovered maximizing product degree forward degree early stage search simply minimizing domain size effective reducing size search tree minimizing ratio domain size degree search 
demonstrate lessons learned ace applied conventional context 
general ace provides powerful testbed exploring nature search process greater ease subtlety heretofore available 
section provides overview forr 
subsequent sections describe ace experimental design results ability transfer ace discoveries traditional context 
final discussion includes analysis results plans 

forr forr problem solving learning architecture development expertise multiple heuristics 
decision forr combines output set procedures called advisors advisor represents general principle may support expert behavior 
approach supported evidence people integrate variety strategies accomplish problem solving 
forr application constructed particular set related tasks called domain path finding mazes game playing 
forr program develops expertise repeated solution attempts problem class set problems domain contests game trips different starting points maze 
forr applications produce expert level results learning problems class 
learning relatively fast forr application begins pre specified domain specific knowledge advisors 
forr partitions advisors hierarchy tiers correctness nature response 
forr program begins set prespecified advisors intended problem class independent relevant classes domain 
advisor represents domain specific principle support expert behavior 
advisor represented time limited procedure input current problem state legal actions state 
advisor output set comments indicate particular principle evaluates actions 
comment form strength action advisor strength indicates degree support opposition integer :10.1.1.37.7424
comments may vary strength advisor may comment action current state 
execution forr application develops expertise new problem class learns weights described section reflect reliability utility advisors particular set problems 
far ace learns problem solving attempts examples solved 
description cover full scope forr architecture aspects ace currently uses 
interested reader find details 

ace ace forr program csp domain 
ace problem class set problems produced generator particular set specifications described section 
class problems randomly generated 
decision making ace problem solving state ace partially fully solved csp 
state description pairs variable assigned value domain possible values value selected 
ace represents solution csp sequence steps generated algorithm variable assigned value select unassigned variable select value domain assign unassigned neighbor remove values domain inconsistent unassigned variable empty domain retract value assignment perspective csp variables requires decision steps solution variable selections alternated value selections 
error free solution path contain exactly steps 
framework key decision making processes involved propagation retraction variable selection value selection 
ace set procedures address process 
propagation done forward checking domains neighbors constraint graph newly valued variable recalculated constraints newly valued variable maintained arc consistency mac process extended repeatedly unassigned variable domain changes 
retraction currently done backtracking returns node closer root search tree retracts value assignment caused empty domain removes value legal values variable may subsequently assume current state 
necessary additional variables automatically unvalued 
propagation method plus backtracking ace complete capable finding solution 
procedures variable selection value selection represented ace advisors 
ace advisors domain heuristics forr advisor hierarchy promotes efficiency accuracy 
tier isolates rationales expected correct merely heuristic 
forr application begins decision making list tier advisors 
tier advisor comments positively action subsequent advisors consulted opportunity comment action executed 
tier advisor comments negatively action action eliminated consideration subsequent advisor may support 
set possible actions reduced single action action executed 
ace tier advisors victory 
variable remains unvalued legal value victory assigns value 
iteration variable selection limits choice variables degree large number values remaining propagation 
correct graph coloring general csp currently addressing notion timing approach similar section typically forr tier identify action control passes tier 
tier advisors plan recommend sequences actions single action 
ace incorporate tier advisors focus current 
tier tier produces decision control passes tier decisions 
tier advisors heuristic consulted parallel 
decision computed weighted combination comments process called table 
concerns underlying ace tier advisors 
concerns computed dynamically noted 
sources relevant 
concern definition variable selection degree number neighbors constraint graph static domain number remaining possible values forward degree number unvalued neighbors backward degree number valued neighbors domain degree ratio domain size degree constraints number constraint pairs variable edges edge degree preference higher lower degree endpoint static reverse edges edge degree preference lower higher degree endpoint static dynamic edges edge degree preference higher lower degree endpoint dynamic reverse edges edge degree preference lower higher degree endpoint value selection common value number variables assigned value options value number constraints selected variable include value conflicts value resulting domain size neighbors domain value minimal resulting domain size neighbors secondary options value number constraints neighbors secondary value number values nearly neighbors weighted domain size value domain size neighbors breaking ties frequency point domain size value weighted function domain size neighbors variant idea product domain value product domain sizes neighbors voting described section 
action receives support voting executed ties broken random 
ace uses heuristics search problem space functions np hard 
solution produces complete 
ace tier advisors encapsulates single primitive naive approach selecting variable selecting value 
generate identified basic properties concerns formulated procedure minimize concern maximize 
concern gives rise advisors 
concerns gleaned literature common csp lore naively hypothesized 
example traditional concern degree variable number neighbors constraint graph 
variable selection tier advisor max degree supports selection unvalued variables decreasing degree order comment strengths 
max degree popular csp solvers implemented dual min degree comments variables increasing degree order 
example concern time na value selection chosen variable common value number variables assigned value 
min common value supports selection values frequently max common value dual 
full complement concerns generate ace tier advisors detailed table 
edge degree sum degrees endpoints edge nearly neighbor variable distance constraint graph variable assigned value 
concerns generate advisors correspond naturally properties constraint graph search tree associated general csp skeptical reader concerned consciously biased set advisors 
respond forr learn advisors appropriately ability incorporate expertise forr architecture specifying appropriate advisors feature bug 
voting weight learning ace forr program begins problem class independent tier advisors may equal significance reliability particular problem class 
forr equipped variety weight learning algorithms 
forr permits user partition task stages weight learning algorithm learn weights stage solution process 
number definition stage pre specified user 
premise weight learning forr past reliability advisor predictive reliability 
weight learning algorithm called experiments 
digression weight learning learns problem class specific weights tier advisors specifically designed encourage short solution paths 
problem solved successfully examines trace solution 
extracts training instances pairs form state decision 
intuition suggested diagrams search solution 
solid path underlying perfect search path includes exactly correct decision steps represented black circles 
decisions maximally reinforced 
remainder search consists subtrees rooted solid path roots represented white circles eventually retracted 
decision root digression error produces constrained unsolvable sub problem discouraged 
decisions root digression address constrained problem reinforced inverse proportion number steps required discover problem solution 
pre specified tier advisors equally significant 
comments correct advisor gradually influence voting incorrect advisor soon overwhelmed 
learns weight advisor algorithm training instance state decision state advisor produces comments root digression supports increase decrease supports decrease increase uses discount factor introduce advisor gradually decision process 
ace decision tier chooses action greatest support follows di number opinions generated 
argmax iw key correct decision error underlying perfect path digression solution fig 

search tree csp seen di di 

weight advisor cij opinion consulted advisor choice note advisor consulted comment computation 
advisors consulted learning earned weight greater consulted testing 
baseline advisor comments randomly generated strength randomly chosen actions time 
fits ace correct decisions learning extent tier advisor reflects expertise 
example example shows ace decisions 
represents constraint graph variables domain 
assigned value immediate neighbors domains reduced 
forward checking ace continue remove values variables distant possible values 
ace select variable value 
number possible values greater respective degrees advisor eliminate possibilities 
remaining unvalued variables forwarded variable selection advisors tier 
example min degree support selection variable strength selection variable strength 
simple example max degree counter comments exactly 
larger constraint graph dual pairs advisors typically address different choices 
similarly max forward degree support selection variable unvalued neighbors strength variable unvalued neighbor strength 
ace tallies comments tier advisors multiplying comment strength weight advisor produced comment selects variable support 

experimental design results fig 
partially valued problem variables 
edges labeled permissible value pairs alphabetical order breaks voting ties random ace non deterministic 
performance typically judged set runs 
run consists learning phase testing phase 
learning phase program learns weights attempts solve problems specified class 
testing phase turned program tries solve set additional problems class 
ace get stuck blind successes learn new runs fresh opportunities success 
conservative argue reasonably utilize best result multiple runs 
experiments reported ace 
assume selection heuristics consistently reliable solution problem specified distinct weight learning stages determined percentage vari table 
performance version ace forward checking averaged runs different training environments 
problems variables maximum domain size tightness density 
power percentage backtrack free solutions 
time seconds solved problem 
included number steps longest solution testing percentage learning problems unsolved due step limit 
learning longest testing unsolved learning step limit power time checks solution problems ables far assigned values early fewer middle late 
different graph coloring employed single stage 
stated ace mac propagation permitted task steps problem 
task step selection variable selection value retraction value variable 
discussed earlier csp variables requires steps 
data averaged runs learning phase problems followed testing phase problems 
problems produced random problem generator available www cs unh edu ccc code html 
guarantee particular set problems distinct large size problem classes probability testing problem training problem extremely small 
generator defines edge density percentage possible edges minimal necessary connect constraint graph vertices tightness percentage possible value pairs forbidden constraints 
generating problems fixed size number variables maximum domain size tightness increasing density eventually difficult find problems solutions 
example variables domain size tightness problems generated density attempts generated density 
focus attention densities problems solution readily generated 
reported guaranteed solution ace constrained problems 
evaluated ace solutions computation time seconds number retractions backtracks number constraint checks 
constraint check confirmation value domain unassigned variable possible current assigned values 
cited differences significant confidence level 
step limited learning learning phase run training instances successful problem solving experience described section 
ace learning moment unsupervised outside expert offering suggestions corrections 
quality training instances unpredictable may examples may simply lucky choices 
function expert ace needs experience sorts decision situations expert confront 
way enhance quality training instances consider short solution traces 
ace abandon problem fixed number steps solved 
experiment described sought identify best approach 
forward checking primitive version ace included concerns table room improvement program performance 
limited program steps learning permitted solution testing 
results appear table power percentage backtrack free solutions 
size variables domain size leaves room inefficient solutions na solvers sparse problems density tightness expect expert solve quickly 
perfect solution problem include steps 
step limit ace solve learn nearly third learning problems 
performance learning remaining thirds offered noteworthy improvement time number constraint checks higher values 
program steps solve learning problems quality testing performance consistently improved 
settled step learning limit problems variables efficient development appears provide examples higher lower limits 
testing program run solved problem 
value learning set problems time full version ace larger domain size tightness 
densities variables variables examined 
comparison problems problem class table 
ace performance averaged runs 
problems maximum domain size tightness 
power percentage backtrack free solutions 
variables density approach power time retractions checks traditional ace learning ace learning traditional ace learning ace learning traditional ace learning tested ace weight learning traditional minimizes ratio variable domain size degree selects values random 
traditional simply reduces ace single tier advisor 
results table show weight learning substantially improved performance difficult sets problems 
learning ace solved test problems fewer constraint checks time 
ace requires elapsed time traditional decision calculation complex compute opinions advisors combine current weights tally results 
resultant decisions correct table 
number runs ace tier advisor active early middle late stage testing problem sets table 
particularly consistent advisors appear bold significant dual appear italics infrequently relevant appear parentheses 
advisor variable concerns max backward degree min backward degree max constraints max degree min domain min domain degree max dynamic edges max dynamic reverse edges max forward degree min forward degree max reverse edges value concerns max common value min common value max conflicts value min conflicts value max domain value min domain value max options value min options value max point domain size value min point domain size value max product domain value min product domain value max secondary options value min secondary options value max secondary value min secondary value max weighted domain size value min weighted domain size value retracted 
recall advisor active testing weight demonstrated consistently performs better random advice 
class advisors ace relied testing appear table number runs weight stage qualified testing 
weights advisors table construed algorithm variable selection value selection problem class 
note concern represented table advisors absent 
table advisor dual max min weighted domain size value relevant stage extremity concern value significant 
advisors max constraints relevant single stage 
max dynamic edges relevant early late problem solving middle 
max degree appear consistently relevant 
active advisors display greater consistency early stage problem solving 
appear heuristics consistently reliable stages variable selection value selection 
interesting compare ace learned weights performance predicted literature concerns 
min domain degree confirmed valuable problem solving stages 
min point domain size value confirmed early middle stage solving relevant half time late stage solving 
contrary prediction constraints concern functions early period maximum minimum 
may turn peculiarity class problems ace advantages automates process adapting heuristic processing specific problem classes 
learning new advisors language express forr learn new tier advisors 
min domain degree led wonder efficacy arithmetic combinations concerns 
formulated arithmetic variable language advisor concern product quotient pair concerns 
sums differences proved weaker early testing eliminated 
expression language form function function attitude stage stage early middle late defined section functions pair distinct concerns table attitude maximize function function minimize function function maximize function function minimize function function 
learn new advisors language forr monitors possible expression perform problem solving 
weight learning expression opportunity comment training instances underlying perfect search path tier advisor 
expression forr tallies attitude frequency number times discriminates accuracy number times correct stage 
problem solving expression language potential active spawned inactive 
initially expressions potential monitored possible inclusion decision making 
tasks forr table 
performance variety programs ability learn tier advisors 
mdd program min domain degree advisor 
ace program domain degree concern 
learning advisors approach version ace described text 
approach concerns power time retractions checks mdd ace ace mdd learn advisors variable expression status 
fail discriminate comment eventually inactive speed subsequent computation 
potential expressions attitude accurate time promoted active status 
active expressions provide input language summary advisor combines comments structure 
active expression tallied accurate spawned transformed individual advisor expression longer participates summary advisor computation 
summary advisor spawned advisors subject discount factor discussed section enter decision process gradually 
permits ace maintain performance level introduces new advisors 
experiment learning new advisors formulated simple language concerns domain degree forward degree backward degree 
described earlier expression combined pair concerns domain degree considered computations minimize product maximize product minimize quotient maximize quotient 
removed domain degree concern ace list table ace ace learn variables maximum domain size tightness density 
comparison tested ace mdd program min domain degree advisor 
results table startling 
ace outperformed mdd expected ace suggesting min domain degree heuristic necessary contribution despite high weight 
statistically significant difference ace ace metric 
furthermore ace permitted learn new advisors language capable expressing min domain degree line table expression min domain degree active runs 
run exactly expression active time maximize product degree forward degree early stage single learned advisor learning advisors version ace performed just ace ace 
learning transfer confirmed outside ace fairly hard problems new maximize product degree forward degree heuristic top search tree subsequent min domain degree comparable domain size 
accomplish incorporated new heuristic csp algorithm table 
performance results nodes problem mac conventional heuristics product heuristic learned ace 
data averaged runs code separate ace 
problems variables domain size density tightness 
conventional heuristic enhanced heuristic min domain md mdd md degree preorder coded conventional manner tested reasonably difficult variable problems 
results table significant reasons 
demonstrate lessons learned ace transferred conventional algorithmic context 
lessons learned easy problems relevant hard problems 
conventional understanding search order heuristics may overly simplistic 
initial tests ran conventional heuristics min domain md min domain degree mdd md ordering variables descending degree 
repeated tests time replacing conventional heuristic min degree forward degree top fifth search tree 
admittedly odd tests averaged rounded search tree size top tree appears dominant cases nodes get visited albeit different order 
approach search tree somewhat reduced processing time slightly increases due dynamic calculation forward degree 
general importance processing top search tree surprising ace allows progress turning folklore top search tree important bottom science engineering 
fact domain size conventional variable ordering ignored critical top search tree surprising blush 
reflection perfect sense domain size critical top tree propagation search choices chance effect domain size reduction forward degree critical top tree going relatively large help determine amount propagation 
ace inspire pose help evaluate hypotheses 

discussion traditional csp heuristic variable ordering uses secondary heuristics break ties combines heuristics crude mathematical combinations 
attempts automate construction constraint solvers including lauri re pioneering far tried select single method tried invent special purpose algorithm 
contrast ace permits order advice flexible subtle manner 
experiments variety problems ace regularly identifies heuristics previously considered essential constraint researchers general csp context min domain max degree min domain degree max backward degree 
particular ordinary csp ace confirmed importance minimal domain size employed individually constraint researchers general csp context variable ordering heuristic 
ace indicates early stage fewer variables valued min domain necessarily productive 
advisor learning ace permits thorough empirical investigation individual heuristics combinations 
ace ability confirm conventional wisdom provide analysis 
emphasis maximizing backward degree example puzzling realizes problems sparse maximizing backward degree may push significant number degree variables search forward checking ensured instantiated backtracking 
raises puzzle minimizing backward degree prominently late stage realizes risk switching early 
maximizing backward degree right thing including time maximum backward degree occurs 
begins clever ace course clever really operative word currently popular emergent may appropriate 
general ace able rediscover useful heuristics explore sophisticated combinations timing patterns applying heuristics individual experimenter easily consider 
manner ace support research 
domain degree section example 
build ace tune forr learning parameters 
discount factor traditional forr initial advisor weight constants employed learning new advisors discussed section 
proportion comments devised comments single standard forr 
stage designations set arbitrarily new previous forr non csp applications stages early stage 
current research plans include extension constrained problems concrete classes csp investigating variety propagation retraction methods actively solicit empirically validated suggestions new advisors csp community 
furthermore working stage designation flexible incorporate weight learning algorithms planning advisors tier 
summary ace intended comprehensive architecture acquiring controlling collaborative adaptive constraint solving methods 
establish taxonomy advisors problem dependent general languages express ways combine effectively 
ace eventually able acquire expertise uncover new techniques discover useful new solvers specific classes csp short ace csp solver partner csp research 
francesca rossi alessandro sperduti suggestions led 
anonymous referees constructive suggestions 
eugene freuder supported principal investigator award science foundation ireland 

epstein right reasons forr architecture learning skill domain 
cognitive science 
epstein skilled person comparison human computer game playing 
proceedings seventeenth annual conference cognitive science society 
lawrence erlbaum associates pittsburgh 
epstein heuristic reasoning reactivity search 
proceedings fourteenth international joint conference artificial intelligence 
morgan kaufmann montreal 
epstein prior knowledge strengthens learning control search weak theory domains 
international journal intelligent systems 
epstein freuder collaborative learning constraint solving 
walsh 
ed principles practice constraint programming cp 
vol 

springer verlag seattle wa 
biswas goldman fisher assessing design activity complex cmos circuit design 
nichols chipman brennan 
eds cognitively diagnostic assessment 
vol 
lawrence erlbaum hillsdale nj 
crowley siegler flexible strategy young children tic tac toe 
cognitive science 
epstein pragmatic navigation reactivity heuristics search 
artificial intelligence 
inferring labelling heuristics csp application domains 
proceedings ki 
springer verlag 
frost dechter look ahead value ordering constraint satisfaction problems 
proceedings ijcai 
montreal 

mac combined heuristics reasons fc cbj 
hard problems 
freuder 
ed principles practice constraint programming cp lncs 
vol 
springer verlag 
epstein gelfand lock learning game specific spatially oriented heuristics 
constraints 
tsang walsh adaptive constraint satisfaction quickest principle 
proceedings th european conference ai 
budapest hungary 
caseau laburthe silverstein meta heuristic factory vehicle routing problems 
principles practice constraint programming cp 
vol 
lncs 
springer berlin 
minton automatically configuring constraint satisfaction programs case study 
constraints 
smith kids knowledge software development system 
lowry 
eds automating software design 
vol 
aaai press 
lauri re alice language program solving combinatorial problems 
artificial intelligence 
