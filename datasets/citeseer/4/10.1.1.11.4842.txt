fast regular expression usc edu matching fpgas viktor prasanna prasanna usc edu department ee systems university southern california los angeles ca presents efficient method finding matches regular expression text fpgas 
match regular expression length serial machine requires memory takes time text character 
proposed approach requires space processes text character time clock cycle 
improvement due nondeterministic finite automaton nfa perform matching 
far authors aware practical nondeterministic state machine programmable logic 
furthermore presents simple fast algorithm quickly constructs nfa regular expression 
fast nfa construction crucial nfa structure depends regular expression known runtime 
implementations algorithm conventional fpgas self reconfigurable gate array described 
evaluate performance nfa logic mapped virtex xcv fpga 
performance gnu grep matching regular expressions evaluated mhz pentium iii machine 
proposed approach faster best case grep performance cases 
orders magnitude faster worst case grep performance 
logic largest nfa considered fit clbs dfa storage grep worst case consumed megabytes 
exploiting reconfigurability fpgas significant performance improvements obtained modes computation applications 
describes fpgas fast regular expression matching 
problem find strings input text match regular expression 
primary application regular expression matching text search programs grep 
important applications include lexical analysis dna sequence matching 
research performed part project 
supported darpa adaptive computing systems program contract 
dabt monitored fort 
approach proposed constructs non deterministic finite automaton nfa uses process text characters 
time space requirements nfa construction algorithm respectively linear length regular expression 
nfa process text character clock cycle 
process text character constant time serial machine requires construction deterministic finite automaton dfa 
dfa construction worst case requires time space exponential length regular expression 
proposed approach significantly reduces time space requirements exploiting reconfigurability fine grained parallelism fpgas 
previous string matching fpgas primarily focused searching specific string 
attempts regular expression matching fpgas dfas suffer form inefficiencies serial ma chine implementations 
section reviews finite automata fa regular expression theory 
section describes development nfa construction algorithm implementation existing fpgas 
section describes self reconfigurable gate array implementation nfa construction algorithm 
performance evaluation results section section 
background informally review regular expressions nfas dfas regular expression matching fas nfa construction regular expression 
please see de tails 
regular expressions regular expression pattern matches strings characters 
individual characters considered regular expressions match 
follows 
rl regular expressions rl ir fir rl rl regular expressions flit matches string matched rl matches string matched rl rest rl matches string composed zero strings matched rl syntax tree alb cd 
rl matches strings fl 
regular expression matches empty string 
example regular expression alb cd matches strings composed sequence zero characters terminate characters cd 
shows syntax tree representation expression 
additional denote con catenation syntax tree representation 
nfa dfa informally nfa directed graph node state edge labeled single character state designated initial state states accepting final states 
dfa nfa edges labeled state outgoing edge labeled character 
fa nfa dfa processes input string accepts rejects 
string accepted string characters match labels path fa leads initial state accepting state 
regular expression matching fas regular expression possible construct nfa fi om accepts strings matched regular expression 
nfa process input text perform regular expression matching 
serial machine nfa constructed regular expression length time nfa takes memory 
nfa processes single text character time 
total time required search text length mn memory required 
alternate approach faster searching construct dfa fi om regular expression takes time memory 
dfa process text character time 
approach requires time memory 
text searching programs grep employ approach optimization techniques cases significantly reduces dfa construction time memory 
cases dfa construction time memory exponential 
contrast proposed fpga approach takes time memory construct nfa process text character clock cycle 
total time required total memory required cases 
section reviews proce dure nfa construction fi om regular expression 
procedure proposed approach described section 
nfa construction regular expression review construction nfa matches strings regular expression 
nfas smaller regular expressions construct nfas bigger regular expressions applying rules 
nfa matches single character constructed shown 
nfas match regular expressions flit rl constructed shown respectively 
nfas regular expressions rl respectively 
nfa initial state final state nfa rl fl 
parsing regular expression constituent subexpressions applying rules recursively nfa constructed matches strings regular expression 
example shows nfa constructed rules aib cd 
nfa construction fp gas showing section arbitrary nfa implemented logic 
section describe simple logic structures implement nfas shown single character rl rl 
section presents algorithm reads regular expression uses logic structures implement nfa matches strings regular expression 
implementation algorithm conventional fpgas discussed section 
nfa implementation logic standard techniques implementing dfas logic 
way memory stores dfa states typically binary encoded form 
mem ory look state clock cycle difficult extend technique efficiently implement nfa 
technique hot encoding scheme 
flip flop associated state time exactly flip flop stores signifying current active state 
combinational logic associated flip flop ensures bit active flip flop transferred clock cycle nfas single character rl rl 
nfa alb cd 
flip flop input dfa determines 
extend technique enable direct implementation nfas logic 
mentioned section differences nfa dfa state nfa outgoing edge label 
implementation simply translates allowing particular flip flop output connected input flip flop 
implementation trivial enables multiple transitions multiple active flip flops clock cycle 
differences nfa edges labeled empty string dfa 
edge transfers status source state destination state waiting character processed 
implementation efficiently achieved connecting input opposed output source flip flop input destination flip flop 
shows simple nfa shows implementation techniques described 
logic structures nfa implemen tation observations help understand logic structures described stated transition translates connection input source flip flop input destination flip flop 
transitions source flip flop transitions flip flop implemented eliminated 
seen fi om transitions accept states nfas construct bigger nfas 
observation flip flops corresponding accept states nfas implemented eliminated 
shows logic structure implements nfa shown matches single character 
flip flop corresponding accept state eliminated observation 
output flip flop stores input character matches character stored inside comparator 
shows efficient implementation comparator 
shows logic implements nfa flit shown 
initial final state flip flops eliminated observations respectively 
logic required gate combine outputs 
shows implementation nfa shown 
shows edges required 
logic consists just wires 
shows logic implements nfa rl shown 
case flit initial final state flip flops eliminated 
gate combine inputs initial state 
gate combines inputs generate accept output 
logic structures combined construct nfa regular expression 
complete con input simple nfa 
implementation logic 
struction nfa ports top level logic structure need connected follows 
port connected flip flop representing final state nfa 
nfa processes text characters flip flop character signify regular expression match character 
nfa typically processes single string indicates match occurs 
require nfa match strings position input text 
theoretical point view regular expression needs prefixed regular expression interest aj characters input text 
practice efficiently implemented simply setting port top level logic structure permanently high 
example shows implementation logic structures nfa shown 
text character logic structures single character rl rl 
lut lut comparator ascii character 
output input lut lut 
nfa construction algorithm shows algorithm 
accepts regular expression form easily obtained postorder traversal syntax tree regular expression 
example form regular expression ab cd 
postfix form eliminates need simplifies algorithm 
algorithm uses stack data structure relies placement routing subroutines 
place char place place 
place respectively place logic structures character 
return pointer placed structure 
route route create bidirectional connections logic structures pointers supplied arguments connects output il input ol output input similarly route creates connections ports lines algorithm create connections ports logic structure symbol regular expression 
port connected input flip flop port connected permanently high signal 
text character implementation nfa cd 
dashed boxes indicate logic structures 
assuming placement routing subroutines take constant time algorithm executes time length regular expression 
constructed nfa process character clock cycle time 
able process character time serial machine dfa constructed input regular expression 
doing takes time 
practice optimized dfa construction techniques quite fast cases require exponential time worst case 
contrast proposed approach fast time cases 
area nfa constructed proposed approach depend placement routing subroutines 
section show implementation construct nfa area 
hand serial machine dfa takes memory 
optimized techniques reduce exponential memory requirement 
contrast proposed approach requires cases 
fpga implementation discuss implementation nfa construction algorithm fpga architecture 
crucial fact keep mind nfa mapping time needs small possible 
nfa mapping time composed time required construct nfa generate configuration bits nfa logic configure fpga generated bits 
reducing time important nfa constructed runtime user inputs regular expression 
nfa mapping time part execution time minimized 
nfa construction algorithm implemented program reads regular expression outputs nfa logic form hdl description technology mapped netlist placed routed netlist directly form configuration bits 
interests minimizing nfa mapping time direct generation configuration bits preferable synthesis placement routing steps bypassed 
doing practical reasons 
bitstream formats commercial fpgas proprietary 
formats known error generating configuration bits potentially permanently damage chip 
preferred approach implement nfa construction algorithm program outputs nfa logic placed routed netlist vendor tools generating configuration bits 
xilinx fpgas approach write program java generating configuration bits 
details placement logic structures routing please see section describes algorithm implementation architecture 
implementation architectures done similar lines 
switch regexp case char place char regexp push case place pop pl pl pop route push case place pop pl pl pop route push case pop place pop pl pl push route input high route output ff nfa construction algorithm 
section presents performance evaluation results approach xilinx virtex fpga architecture 
seen results nfa logic quite fast nfa mapping time forms significant portion execution time 
nfa construction describe sections nfa mapping time reduced self reconfiguration 
self reconfiguration nfa construction algorithm implemented configured logic device 
logic reads input regular expression directly generates configuration bits nfa logic configures device external intervention 
components nfa mapping time nfa construction configuration bits generation device configuration significantly reduced self reconfiguration 
start description device 
self reconfigurable gate array cases configuration fpga compile time runtime performed externally 
greater performance gains high degree flexibility obtained device generate configuration bits runtime modify configuration ability device call self reconfiguration 
multicontext device name implies designed support efficient 
key device features allow single cycle context switching single cycle random access configuration memory 
features self reconfiguration performed quickly shown simple example 
problem configure gate compile time don know logic cell array gate configured location known runtime 
configure gate compile time configure contexts logic turn configure gate shown 
runtime coordinates logic cell configured gate sent 
logic configured device reads coordinates 
computes address configuration memory locations corresponding logic cell bits written locations control functionality logic cell 
configured logic writes bits configure logic cell gate configuration memory locations 
switches context gate configured 
please see detailed description device capabilities including row column routing self reconfiguration 
nfa construction shows algorithm reads regular expression constructs corresponding nfa 
algorithm shown operates similar manner basic difference algorithm explicitly places routes nfa logic 
shows simplified block diagram datapath control logic implements algorithm 
placement routing performed algorithm explained 
clearer understanding please see step step nfa construction algorithm fox alb cd shown 
perform placement routing necessary specify logic cell particular logic structure configured 
counters row col registers coll row purpose 
note stack pushes pops row column pair single operation 
algorithm places nfa logic binary tree similar syntax tree regular expression 
leaf nodes logic structures characters placed row row 
column specified column counter col incremented time placed 
placement row simplifies broadcasting text characters comparators 
logic structures form non leaf logic con configuring switch gate interface gate gate configuration bits gate 
ct active context context active context illustration self reconfiguration 
memory regexp control rw iv cl row oo 
row coll stack ll datapath control logic nfa construction algorithm 
nodes placed separate row 
row specified row counter incremented time placed 
note logic structure child nodes preceding row 
placing logic structure column child node connections child nodes require row column routing operations respectively 
logic structure child node preceding row 
connection established simply placing logic structure column 
numbers line indicate number clock cycles required complete operation line 
counter increments occur parallel operations take zero clock cycles 
described row column routing operation takes clock cycles 
operations create bidirectional connections 
takes clock cycles switch context routing logic back current context 
routing operation takes clock cycles 
time placement operations composed time configure logic structure logic cell bit clock cycle clock cycles context switching 
time character logic structure includes clock cycles required configure comparator shown 
algorithm configures logic structures chat clock cycles respec tively 
numbers estimate nfa construction time section 
performance evaluation section compare performance fpga implementations proposed approach performance unix text search program grep 
comparison criteria space needed memory software area fpga time required fa construction text character processing 
compare performance regular expression match approaches alb alb alb alb occurrences alb henceforth written alb alb 
matches sequence th character right dfa constructed expression states 
vary study performance variation regular expression length 
software performance software performance evaluation carried machine mhz iii xeon processor gb ram running linux red hat 
regular expression matching program gnu grep version distributed os 
times reported user regexp line row col io ol stack regexp line row row coll col regexp line row stack regexp line row row col ol stack regexp line row row col stack regexp line row row coll col ol stack text nfa construction alb cd postfix form ab cd 
shows nfa construction immediately algorithm statement indicated line executed 
row col switch regexp case char place char regexp col push col col case case case pop colt pop row col place row route row col coll route col row row push row row pop colt pop row col place 
row route row col coll route col row row push row row pop row col place row col push row row pop row col route input high row col 
route output ff row col nfa construction algorithm 
text file cpu maximum size bytes time memory mb mb mb mb mb mb mb mb mb mb mb mb table results text search complete dfa con struction worst case 
space cpu times memory reported maximum memory invocation grep 
gnu grep uses clever techniques reduce time space requirements 
essentially constructs dfa regular expression lazy manner parts dfa constructed required process input text characters 
fox instance characters regular expression occurs text dfa constructed 
force grep construct entire dfa input text contain patterns exercise possible dfa transitions 
fox example regular expression alb alb create file containing lines aaa aab aba abb 
text file cpu maximum time size bytes time memory character kb kb kb kb kb kb kb kb ns kb ns kb ns kb ns kb table results text search minimal dfa con struction best case 
files created regular expressions ranging 
program grep invoked regular expression corresponding file supplied input text 
results summarized table demonstrate exponential blowup time memory occur dfa regular expression 
increased time required memory consumed quickly reach unacceptable levels 
clear discussion times obtained composed worst case dfa construction time complete dfa constructed plus time required search text characters 
determine time memory requirements best case dfa construction transition computed 
repeating experiment text files sizes file containing repetitions single pattern patterns 
table shows results obtained 
assumption dfa construction takes negligible time justified constant time text character cases 
grep invocations amount memory 
lln general alb alb number lines text file line characters th character newline resulting file size bytes 
dfa construction size time kb kb mb mb mb mb mb mb mb mb mb mb table software performance results dfa construc tion worst case 
best case requires negligible time memory 
time text character ns 
configuration fpga nfa bit generation configuration construction ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms ms table nfa construction times 
obtain dfa construction time memory requirements subtracting values table fi om corresponding values table 
time required process text character estimated equal time character 
table summarizes software performance results 
fpga performance fpga performance results obtained xilinx foundation tools running mhz pentium iii target device virtex xcv fpga smallest virtex fpgas 
clb array 
nfa construction virtex architecture algorithm shown 
basic difference utilizing richer interconnect virtex logic structures placed single row logic cells 
required routing rows columns performed row column 
doing simplifies speeds row route col route operations 
obtain nfa size nfa construction time time text character alb alb ranging fi om follows 
logic structures shown described vhdl 
vhdl descriptions regular expression written synthesized 
nfa simulation performed verify proper operation 
floor plan editor manually place nfa algorithm described 
routed determine nfa size time required process text character 
nfa construction time described section consists times required nfa construction algorithm configuration bit generation fpga configuration 
small logic cell consists lut flip flop corre sponds fourth virtex clb 
amount computation required nfa construction algorithm assume execution time quite small compared time required tasks 
nfa construction time estimated sum configuration bit generation fpga configuration times shown table 
table summarizes results 
nfa construction time text area time character clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns clbs ms ns table nfa area nfa construction time time text character fpga implementation 
performance comparison fa size space requirement memory software area fpga determined fa size 
software best case scenario dfa requires small constant amount memory 
shown table exponential blowup dfa size con sume hun eds megabytes worst case 
contrast proposed approach area nfa constructed fpga grows qua regular expression length cases 
space requirements reduced compared worst case software requirements somewhat larger best case requirements 
practice nfas long regular expressions fit small amount logic 
example expres sion alb alb length fit xcv see row table 
nfas longer regular expressions constructed bigger devices 
fa construction time case software dfa construction time best case scenario negligible 
increases exponentially regular expression length worst case 
shown table dfa construction take hours mhz microprocessor 
contrast proposed approach nfa constructed fpga tenth second cases 
construction time orders magnitude lower worst case software time slightly higher best case software time 
time text character explained section constructed dfas nfas process text character constant amount time 
described section time case soft ware ns 
times text character proposed approach vary length regular expression shown table 
times significantly lower time required software running mhz microprocessor 
time required increases regular expression length increase roughly linear 
assuming linear increase holds time required fpga process text character lower time required software regular expressions hun eds characters length 
example finding matches alb alb mb file grep take ms ms consuming kb mb memory depending contents text file 
comparison fpga implementation take ms occupy clbs 
example grep require ms time kb mb memory 
fpga imple mentation need ms time clbs 
summarize text files certain size fpga implementation performs better software regular expression 
improvement orders magnitude time space requirements 
smaller files cases fpga performance may slightly slower software 
happens cases dfa construction time smaller nfa construc tion time text file short faster fpga processing difference 
speedups obtained cases described reduce nfa construction time ms performance architecture discussed section de scribed verilog synthesized standard cell library process 
placement routing design progress 
determine nfa size estimate nfa construction time 
time required process text character precise nfa construction time reported design complete 
nfa nfa construction size time ys ys ys ys ys ys ys ys ys ys ys ys table nfa size nfa construction times implementation 
nfa construction algorithm number clock cycles required process character regular expression described section 
determine number clock cycles required construct nfa alb alb 
available timing information conservatively estimate clock period nfa construction logic shown fig ns 
product clock period number clock cycles provides nfa construction times summarized table 
table shows nfa logic size 
compared nfa construction times fpga implementation times orders magnitude smaller 
due self reconfiguration enables device generate configuration bits config ure 
faster nfa construction speed proposed approach compared software regular expression small text files 
expect demonstrate design complete 
shown perform regular expression matching fpgas 
proposed approach takes time space find matches regular expression length text length contrast fastest serial machine algorithm requires time space 
key techniques proposed approach efficient nfa dfa serial machines regular expression matching fast construction nfa 
theoretical definitions dfa nfa described nfa directly implemented logic extending technique dfa implementation 
theoretical techniques nfa composition developed simple fast algorithm constructs efficient nfa implemen tation regular expression 
believe proposed approach explored parallel machines reconfigurability fine grained parallelism fpga devices essential nfa implementation construction techniques 
important contribution show nfa construction performed quickly self reconfiguration 
developed implementation nfa construction algorithm configured logic construct nfa shown detailed performance comparisons software fpga implementations justify space time performance claims 
implementation results shown cases fpga implementation faster grep regular expression matching 
improvement orders magnitude time space requirements 
fpga implementation slightly slower small files due time required nfa construction 
shown time reduced orders magnitude constructing nfa self reconfiguration 
observed software regular expression techniques help avoid worst case memory time requirements cases 
matter techniques dfa cases cause exponential blowup time memory required 
demonstrated proposed approach overcomes problem 
aho 
handbook theoretical computer science volume algorithms complexity chapter 
mit press elsevier 

state machine design techniques verilog vhdl 
synopsys journal highlevel design pages september 
www synopsys com news pubs 
gunther milne narasimhan 
assessing document relevance run time reconfigurable machines 
arnold pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
john hopcroft jeffery ullman 
automata theory languages computation 
addison wesley 
mei prasanna 
string matching multicontext fpgas self reconfiguration 
fpga 
proceedings cm sigda seventh international symposium field programmable gate arrays pages feb 
mei prasanna 
self reconfigurable gate array architecture 
fpga 
proceedings acm sigda seventh inter national symposium field programmable gate arrays aug 
tau chen brown dehon 
fu st generation dpga implementation 
third canadian workshop field programmable devices pages may 
steve dean carberry anders johnson jennifer wong 
time multiplexed fpga 
arnold pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
xilinx 
www xilinx cm index htm authors fpga performance evaluation 
