resolution logic programming algebraic domains negation defaults pascal hitzler artificial intelligence institute department computer science dresden university technology dresden germany inf tu dresden de www wv inf tu dresden de pascal technical report wv rounds 
zhang proposed study form disjunctive logic programming generalized algebraic domains rz :10.1.1.42.1080
system allows reasoning information hierarchically structured forms suitable domain 
extend framework include reasoning negative information implicit explicit absence bits information 
investigations naturally lead form default reasoning strongly related logic programming answer sets stable models created interest artificial intelligence researchers concerned knowledge representation reasoning 
contents preliminaries clausal logic algebraic domains resolution algebraic domains atomic domains 
domains negation 
logic programming algebraic domains inference negative information 
implicit explicit knowledge 
rz rounds zhang propose study form clausal logic generalized algebraic domains 
essence propose interpret finite sets compact elements clauses develop theory links corresponding logical notions topological notions domain 
things establish sound complete resolution rule form disjunctive logic programming domains material implication 
corresponding semantic operator turns scott continuous 
technical report extend paradigm include reasoning negation 
motivated gain expressiveness negation artificial intelligence paradigms related knowledge representation nonmonotonic reasoning 
fact follow approaches negation coming classical logic second default logic 
classical propositional logic negation understood involution propositional variables 
domain theoretic point view adopt corresponds restrictions domains allow domains provide involution understood negation 
second approach ideas default logic treats negation meta logical supplement negation item believed reason believe item 
theory logic programming point view strongly related treatment negation failure research theory logic programming nonmonotonic reasoning lately led development applications form nonmonotonic reasoning systems known answer set programming cf 
lif mt accounts 
structured follows 
section review fundamental definitions rounds zhang clausal logic algebraic domains laid rz :10.1.1.42.1080
section study form resolution framework proposed rz :10.1.1.42.1080
particular provide system consisting rules sound complete respect resolution simpler easier 
remainder section devoted establishing sufficient conditions allow carry main result resolution classical logic algebraic domains cf 
theorem 
turns need impose severe restrictions domain order establish way providing normal forms clauses proofs studied section involution understood classical negation studied section 
section move study logic programming algebraic domains proposed rz :10.1.1.42.1080
negation studied section implicitly domain proceed chapter adjoin form default negation programming paradigm 
exposition naturally lead establishing form founded semantics programs notion stable models strongly related counterparts classical logic programming paradigm 
emphasis technical report propose definitions constructions deep results taken care include just examples results justify constructions 

william rounds anthony seda guo qiang zhang helpful discussions general subject matter 
preliminaries clausal logic algebraic domains partially ordered set pair nonempty set antisymmetric transitive relation subset partially ordered set directed ideal directed downward closed set 
complete partial order cpo short partially ordered set element called bottom element directed set upper bound supremum element said compact finite directed exists set compact elements cpo written 
algebraic cpo cpo directed supremum compact elements 
set said scott open just open upward closed directed 
scott topology topology open sets scott open sets 
open set compact open compact scott topology 
coherent algebraic cpo algebraic cpo intersection compact open sets compact open 
topological notions sequel 
just note coherency algebraic cpo implies set minimal upper bounds finite number compact elements finite 
cn compact elements set mub 
cn minimal upper bounds elements finite 
note mub element assumed coherent cpo 
call spaces domains 
joh element called atom atomic element 
set atoms domain denoted 
definition coherent algebraic cpo set compact elements 
clause finite subset 
denote set clauses ove 
clause write exists contains element theory set clauses may empty 
element model theory written equivalently clause contains element clause called logical consequence theory written implies write note holds theories say say logically equivalent written order avoid confusion denote empty clause empty theory 
theory closed implies clauses called consistent equivalently main technical result rz shows set consistent closed theories ordered inclusion isomorphic collection non empty scott compact saturated subsets ordered reverse inclusion :10.1.1.42.1080
result rests hofmann mislove theorem refer reader rz details 
follows corollary theory logically closed ideal clause logical consequence theory logical consequence finite subset compactness theorem clausal logic algebraic domains 
example rz running example 
consider kleene strong valued logic propositional case usual knowledge ordering set truth values induces pointwise ordering space interpretations partial truth assignments countably infinite set propositional variables language consideration 
partially ordered set coherent algebraic cpo compact elements interpretations map finite number propositional variables denote compact elements strings pqr indicates mapped mapped note upward closed formula 
clause formula disjunctive normal form pqr pq translates note compact element uniquely expressed supremum finite number atomic elements set atomic elements 
furthermore exists bijective function extends naturally scott continuous involution 
pn 
pn 
clause domain called atomic clause finite subset 
atomic clauses correspond propositional clauses usual sense 
note general resolution algebraic domains rz sound complete resolution rule called clausal hyperresolution follows 
xn clause set clause mub 
denotes set minimal upper bounds ai finite set compact elements algebraic coherence clause 

xn ai xi mub 
xi ai rule sound sense xi admissible choice ai antecedent xi ai 
completeness necessary adjoin clausal hyperresolution rule special rule allows inference clause empty clause 
indicate rule follows 
spec ideal respect smyth preorder exists cf 
fit discussion context logic programming semantics plo domain theoretic context 
fact consistently complete 
hr addition theory clause stands finite number applications clausal hyperresolution rule special rule furthermore rz shows binary hyperresolution spec complete system consisting binary clausal hyperresolution rule mub bhr special rule sound complete 
set 
inconsistent mub 

clausal hyperresolution generalizes usual notion resolution rule 
note special rule spec understood instance ext see footnote 
note resolution ext red see footnote complete 
order see refer example 
pq 
way produce ext red 
easy show induction derived ext red contains suffices 
desire give sound complete system simple possible 
consider rule call simplified hyperresolution 
easy see instance hr general 
mub shr theorem system consisting shr ext red complete 
proof order show completeness derive bhr shr ext red 

furthermore clause mub mub 
bn 
bi exists yi yi bi 
shr derive mub slight technical problem proof rz lemma states implies non empty clause clause notation working valued propositional setting example note pq pq pq result holds 
note special instances clausal hyperresolution rule follows called reduction rule extension rule 
red rule follows hr rule follows 
suppose non empty clause clause second rule extend obtain rule remove obtaining ext repeated application ext red obtain 
yn 
ext repeatedly add remaining elements argumentation similar 
completes proof 
note rule weaker preconditions red suffices call weakening rule red derived follows 
particular derive equal contained hand derived red ext follows 
show assume extension rule reduction rule applied yielding required 
technical result inspired cz theorem 
proposition clauses 
xn 
xn 


xn 
proof assume 
xn ai xi arbitrarily chosen 
ai xi 
ext 

xn conversely assume 


xn 
xn xi 

ai xi ai 
choose ai ai 
assumption obtain call system consisting rules red ext shr rad system resolution algebraic domains 
theories write clauses write respectively respectively symbol denotes derivation single application rules rad 
slight abuse notation theories allow write clause 
interpret rad rules setting example 
know clauses correspond formulas disjunctive normal form dnf theories sets dnf formulas 
weakening rule acts single clauses replaces conjunction contained dnf formula conjunction contains subset propositional variables contained original conjunction 
extension rule disjunctively extends dnf formula conjunction propositional variables 

simplified hyperresolution rule takes dnf formulas deletes conjunction forms disjunction resulting formulas conjunction deleted items 
resolved 
interpretation rad system comes standard intuition underlying domain theory 
elements domain interpreted pieces information represents contains information compact elements understood items computationally accessible 
point view rad gives calculus reasoning disjunctive information computation clause finite set computationally accessible information items disjunctive knowledge items 
rules rad yield system deriving knowledge disjunctive information 
weakening rule states replace item contains information 
extension rule states extend knowledge disjunctively bits information 
rules decrease knowledge 
simplified hyperresolution rule states disjunctively merge collections disjunctive information strengthening knowledge replacing items collections item contains pieces information deleting original items 
atomic domains simplify proof search resolution requiring stronger conditions domain 
guided example 
definition atomic domain coherent algebraic cpo property set finite 
domain example example atomic domain 
remainder section atomic domain 
seek represent clause finite set atomic clauses logically equivalent 
define follows 

bn bi ai 
lemma 
clause 


proof mub obtain hr assertion follows soundness rad 
lemma clause proof 

bn bi ai bi ai repeated application weakening rule 
conversely define compact element set clauses 
notation lemma clause lemma obtain sets clauses 




consequently lemma clause theory 

proof suppose 
lemma 
conversely suppose 
theorem clause theory 

proof follows immediately lemma completeness rad 
view theorem suffices study theories atomic clauses obtain stronger result follows provides kind normal forms derivations 
theory define 
theorem atomic domain theory clause tn derivation rad 
exists derivation atomic extension rule multiple atomic shift rule tn axt 
xn mub 

xk bi xi 
bk xi ai furthermore clauses occuring derivation atomic 
mas 
proof clauses 
distinguish cases assertion follows easily induction 
reduction rule 
note atomic shift rule special instance multiple atomic shift rule 
mub ash ash follows mas 
bk 

xn 
say 
xi loss generality assume 





mub derive 


atomic shift rule 

extension rule 

atomic extension rule derive atomic extension rule suffices 

simplified hyperresolution rule 
mub 
furthermore mub 
mk 
mi 
note 




yi 
yi 
mub mub 
mk multiple atomic shift rule obtain ai yi 
mub 
mj 

yi ai yi 
yi 
obtain 
yi ai suffices atomic extension rule 
note atomic extension rule special case extension rule multiple atomic shift rule obtained subsequent application hyperresolution rule mub 
multiple instances reduction rule rules sound 
note theorem hold mas replaced binary version mub 
xk bi xi 
bk bas 
order see consider atomic elements mutually consistent supremum sup ai aj aij common upper bound 
empty clause derived theory axt bas 
easy show induction clause derived applications axt bas contains elements 
domains negation introduce investigate notion negation domains motivated classical negation example 
definition atomic domain called atomic domain negation exists involutive scott continuous negation function properties maps 
ii iii finite subset supremum 
example example atomic domain negation 
proposition atomic domain negation 

proof 
consistent 
ii definition obtain pair elements consistent iii supremum exists 
monotonicity obtain monotonicity know upper bound consequently required 
result allows replace search derivations proof search classical form resolution 
theorem atomic domain negation 
theory atomic clause 

proof assume follows easily repeated application resolution rule 
conversely assume 
assume exists show exists hypothesis obtain weakening rule atomic domains negation establish sound complete proof principle 
theorem theory clause 
consider 
atomic clause attempt show axt mas 
succeeds conversely exists derivation mentioned rules 
proof theorem derivation carried mentioned rules obtain 
theorem obtain 
lemma yields obtain application lemma noting conversely lemmata 
theorem yields theorem obtain derivation done designated rules 
logic programming algebraic domains lead rz move study disjunctive logic programming algebraic domains :10.1.1.42.1080
aim extend paradigm kind default negation 
definition disjunctive logic program set rules form clauses element said model rule clause logical consequence model satisfies write cons set clauses logical consequences theory write cons set clauses logical consequences note notions logical consequence substantially different theories programs 
propagation rule denoted cp program studied rz :10.1.1.42.1080

xn ai xi 
mub 
xi ai applying rule say xi ai cp consequence theory 
xn operator notion cp consequence acts logically closed theories 
logically closed theory program define tp cons cp consequence rz shown tp scott continuous function space logically closed theories fixed point fix tp 
shown fix tp cons simpler operator suffices unary program resolution operator theories defined cons min min denotes set minimal elements obtain rz section tp fixed points cons 
technical result investigations concerning propagation easier 
proposition disjunctive logic program 
set rules rule uq particular cons cons 
proof assertion follows immediately observation exists 
rule called hyperresolution rule determined rz :10.1.1.42.1080
prefer notion propagation opinion resolution talking programs better thought process yields antecedent consequent 
shortly investigate propagation rule atomic domains negation 
domain rule clausal denote set clauses 
program clausal denote union clausal 
call clausal respectively clausal clausal form respectively proposition atomic domain negation 
cons cons clausal 
proof logical consequence clausal 
show suffices show model clause clausal clausal assume chosen arbitrarily model required 
note notation example program pq model model clausal pq 
general program clausal form share models 
furthermore pq logical consequence clausal general program clausal form share logical consequences 
example program 
case cons clausal cons 
see case atomic domains negation propagation differs implication 
inference negative information notation example consider program consisting rules 
program fact propositional version known numbers program fit hs 
pn pn recall cons cons obtain cons fix tp cons 
understand logic program classical sense major approaches declarative semantics clark completion semantics cla known supported model semantics fitting semantics fit called kripke kleene semantics perfect model semantics prz stable model semantics gl called answer set semantics motivated default logic founded semantics grs agree pn pn intended model :10.1.1.24.6050
refer sub concise survey issues 
way justifying model intended obtain consequence natural naive sense program inclined dismiss possibility hold inconsistent knowledge 
infer meaning dismissed possible consequence 
follows way justify consequence program 
common practice nonmonotonic reasoning semantics conclude identify allowing conclude 
attempt lift line reasoning general setting logic programs algebraic domains 
place notion negation available general setting try inconsistency 
perspective refering numbers program dismiss possible consequence observation derived 
conclude way justify consequence program obtain absence possible 
general algebraic domains notion negation may compact elements inconsistent 
case domain justify derive absence provability kind default unclear general case elements inconsistent taken 
absence involutive notion negation distinguish kinds negation follows 
assume believe items compact elements domain collection items consistent 
say compact element refuted contradiction inconsistent compact element belongs believe compact element refuted default believed refuted contradiction 
call compact element refuted refuted contradiction refuted default 
review numbers program 
refuted contradiction refuted default leading assuming interpreted statement refuted 
relies entirely existence involutive negation able identify refuted 
algebraic domains able involutive negation facilitated definition 
definition coherent algebraic domain 
extended clause finite set 
cn nn 
ni clause ci 
call 
dn extended precondition 
dn 
dn 
notation omit 
note abbreviated case may omitted 
extended clause 
cn nn ni called trivially extended clause 
trivially extended rule form clause trivially extended clause 
extended disjunctive program consists set extended rules 
note extended disjunctive program consists trivially extended rules identified non extended disjunctive logic program 
example extended program suitable representation numbers program 
notation example 
pn pn abbreviated form program may written pn pn seek reasonable notion logical consequence extended program 
consider candidate theory forms belief 
remove program pn pn logical consequence consider pn refuted default 
remove extended preconditions 
remaining program longer extended call obtain set logical consequences fix tp general different set elements refuted default different set elements refuted default means searching theory fix tp words define operator dp theories sets clauses dp fix tp searching fixed points operator dp fact easy see desired theory cons fixed point dp unique fixed point see satisfactory 
reader familiar stable model semantics logic programming gl may recognize constructions example original approach stable models 
carried logic programs disjunctions consequents rules containing kinds negation classical negation default negation 
programs called extended disjunctive logic programs refer gl stable model semantics programs lift logic programming coherent algebraic domains 
definition coherent algebraic domain extended disjunctive program theory 
define non extended program obtained applying transformations delete logical consequence 
delete extended preconditions 
define gelfond lifschitz operator default operator dp function theories dp fix tp stable model fixed point dp theory dp fix tp obtain immediately definition stable models logically closed 
dp maps logically closed theories logically closed theories 
order justify terminology explain model extended disjunctive program definition consider pair theories call interpretation extended precondition 
write 
extended clause write extended precondition pair called model extended rule implies interpretation called consistent cons cons 
called ideal cons cons 
identify theory ideal interpretation cons cons 
point view fixed points default operator models easily verified 
technical result analogous proposition 
proposition extended disjunctive program 
set rules rule stable models 
proof theory 
proposition programs set logical consequences suffices 
proposition shows suffices consider consisting rules single extended preconditions antecedent 
convenience call programs singular 
proposition logically closed theories dp dp dp antitonic 
particular monotonic respect set inclusion set logically closed theories 
proof proposition assume loss generality singular 
definition immediately obtain theories consequently cons cons dp dp 
operator general scott continuous consider program consisting rules notation example 
calculate obtain pn pn pn pn dp cons cons pn dp cons dp cons pn dp cons gn dp ln cons pk 
ln ln dp gn cons 
shows ln cons dp cons cons scott continuous 
general fails scott continuous proposition shows monotonic dp antitonic 
known tarski greatest fixed point theorem obtain fixed point lp lfp fixed point gp gfp 
lemma lp dp gp gp dp lp 
proof obtain dp lp dp lp dp lp dp lp fixed point lp dp lp gp similarly lp dp gp gp lp gp get proposition lp dp gp dp lp gp similarly dp lp gp obtain dp gp lp lp dp gp dp gp lp gp gp dp lp 
proposition lp gp consistent model proof consistency follows lp gp remains show lp gp lp dp lp model assume loss generality singular assume extended rule lp gp 
rule gp lp fix tp gp dp gp lp fix tp gp dp gp required 
call lp gp founded model borrowing terminology nonmonotonic reasoning sub 
theorem stable model lp dp lp 
furthermore lp dp lp program founded model ideal unique stable model lp proof fixed point dp fixed point suffices lemma 
considering program notice dp fixed point theorem obtain dp unique stable model similar considerations hold numbers program example 
implicit explicit knowledge extended disjunctive logic programming algebraic domains enables represent knowledge variety ways 
causal dependence may encoded structure domain implicitly explicitly rules logic program 
likewise negative information may encoded implicitly domain facilitating inconsistency explicitly default negation 
give example new representation classical problem 
example want represent knowledge tweety penguin 
bob bird 
birds fly penguins 
birds fly opposite shown 
don fly 
penguins birds 
choose represent implicitly domain remaining statements program 
describe domain consider set items stands tweety stands bob stands penguin bird fly fly 
define set subsets satisfy conditions contain 
ii contain 
iii contain 
iv contain 
holds ii iii 
consider domain reflexive transitive closure 
note sets containing inconsistent sets containing 
consider extended disjunctive program interpretation cons 
reader easily verify stable model particular notice model tweety fly bob 
analyse knowledge represented example 
sentences certainly represented clauses program satisfactorily represented structure underlying domain 
regard background knowledge obtain conceptually clean way distinguishing background domain knowledge explicit knowledge program rules 
likewise negative knowledge treated 
flying flying opposite properties hold single object time 
knowledge encoded structure domain making inconsistent 
need endow domain explicit negation function section provide alternative opinion concise way treating example 
default negation explicitly program tradition default logic represent rules normally hold may exceptions 
introduced reasoning negation domain theory form logic programming coherent algebraic domains 
possible lines investigation open observations want name just 
logic domains 
past apparent extended disjunctive logic programming appropriate semantics provides powerful tool knowledge representation reasoning see 
lif mt 
reasonable expect established research area concerned relationships interplay logic domain theory profit extensions lines 
generalized approaches founded stable semantics lead way 
approach fortunate restriction algebraic domains disposed mainly interval domain fails algebraic 
domain theory logic programming 
classical logic programming implemented example prolog negation unsatisfactory theoretical point view probably remain argued negation generally implemented systems clean declarative concept 
investigations logic programming algebraic domains may stage lead clean programming paradigm including negation may powerful applicable modern prolog systems 
achieved unclear steps lines performed 
line research may concerned machine learning paradigm known inductive logic programming ilp see mdr lacks broad theoretical foundation 
paradigm connected domain theory proper unclear particular subsumption lattice features prominently ilp fails domain 
seen example logic programming algebraic domains provides natural way conceptually clean distinction background knowledge programs 
domain theory ilp paradigm attempt encode background knowledge domain learn program rules 
theoretical foundations answer set programming deductive databases 
broad base theoretical answer set programming lif mt deductive databases min domain theoretic foundations knowledge studied paradigms apart investigations concerning fixed point semantics hs hit 
extended disjunctive logic programming report may provide important link 
cla clark 
negation failure 
gallaire minker editors logic data bases pages 
plenum press new york 
cz coquand 
zhang 
sequents frames completeness 
th international workshop computer science logic germany august volume lecture notes computer science pages 
springer 
denecker marek 
approximating operators stable operators founded fixpoints applications non monotonic reasoning 
minker editor logic artificial intelligence chapter pages 
kluwer academic publishers boston 
fit fitting 
kripke kleene semantics general logic programs 
journal logic programming 
fit fitting 
metric methods examples theorem 
journal logic programming 
gl gelfond lifschitz 
stable model semantics logic programming 
kowalski bowen editors logic programming 
proceedings th international conference symposium logic programming pages 
mit press 
gl gelfond lifschitz 
classical negation logic programs disjunctive databases 
new generation computing 
grs van gelder ross schlipf 
founded semantics general logic programs 
journal acm 
hit hitzler 
generalized metrics topology logic programming semantics 
phd thesis department mathematics national university ireland university college cork 
hs hitzler seda 
issues concerning fixed points computational logic quasi metrics multivalued mappings knaster tarski theorem 
proceedings th summer conference topology applications special session topology computer science new york volume topology proceedings pages 
hs hitzler seda 
generalized metrics uniquely determined logic programs 
theoretical computer science 
appear 
joh johnstone 
stone spaces 
number cambridge studies advanced mathematics 
cambridge university press 

new method proving existence answer sets disjunctive logic programs metric fixed point theorem multivalued mappings 
baral gelfond editors proceedings workshop logic programming incomplete information vancouver canada pages 
rounds 
zhang 
experimenting power default reasoning 
proceedings aaai national conference artificial intelligence 
lif lifschitz 
answer set planning 
de schreye editor logic programming 
proceedings international conference logic programming pages cambridge massachusetts 
mit press 
mdr muggleton de raedt 
inductive logic programming theory applications 
journal logic programming 
min minker 
logic databases past 
ai magazine 
mt marek truszczy ski 
stable models alternative logic programming paradigm 
apt marek truszczy ski warren editors logic programming paradigm year pages 
springer berlin 

cheng de wolf 
foundations inductive logic programming volume lecture notes artificial intelligence 
springer berlin 
plo plotkin 
universal domain 
journal computer system sciences 
prz przymusinski 
declarative semantics deductive databases logic programs 
minker editor foundations deductive databases logic programming pages 
morgan kaufmann los altos ca 
rz rounds 
zhang 
clausal logic logic programming algebraic domains 
information computation 
sub subrahmanian 
nonmonotonic logic programming 
ieee transactions knowledge data engineering january february 

