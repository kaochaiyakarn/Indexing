secureuml uml modeling language model driven security torsten david basin rgen institute computer science university freiburg germany basin informatik uni freiburg de 
modeling language model driven development secure distributed systems unified modeling language uml 
approach role access control additional support specifying authorization constraints 
show uml specify information related access control design application information automatically generate complete access control infrastructures 
approach improve productivity development secure distributed systems quality resulting systems 
security plays central role development functioning large scale distributed software systems electronic commerce 
analysis today software development processes reveals careful engineering security system design neglected 
security features typically built application ad hoc manner integrated system administration phase 
reasons 
security horizontal aspect software development affects nearly component application integration software development process understood 
second lack tools supporting security engineering 
third integration security system hand difficult errors arise due lack experience individual developers 
developers generally security experts need concrete guidelines constructing secure applications 
post hoc low level integration security negative impact quality resulting applications 
methodology modeling access control policies integration model driven software development process show methodology help avoid kinds problems mentioned 
methodology secureuml modeling language designed integrate information relevant access control application models defined unified modeling language uml 
supported german und technologie number mm ms 
authors responsible content publication 
integration security engineering model driven software development approach advantages 
security requirements formulated integrated system designs high level abstraction 
way possible develop security aware applications designed goal preventing violations security policy 
example database query designed users retrieve data records allowed access 
furthermore model information detect correct design errors verify correctness mapping requirements realization design 
access control infrastructures generated secureuml models prevent errors realization access control policies enable technology independent development secure systems 
described part ongoing research develop complete approach developing secure commerce systems 
secureuml currently focuses access control research extend scope language cover security aspects digital signatures 
prerequisite approach taken existence modeling language extensible syntax sufficiently precise semantics case tool support 
uml fulfills requirements 
show modeling language specifying access control policies defined extension uml 
visual notation possibility define designs high abstraction level uml suited designing secure systems 
secureuml enables developers strong security background develop secure systems 
language extended model role access control rbac 
rbac established access control model widely recognized advantages explained supported large number software platforms 
rbac lacks general support expressing access control conditions refer state system state protected resource parameter values date time 
cover cases introduce concept authorization constraints 
authorization constraint precondition granting access operation 
define constraints object constraint language ocl 
secureuml offers significant design flexibility combines simplicity graphical notation rbac power logical constraints models 
simple policies expressed role permissions complicated requirements specified adding authorization constraints 
resulting combination quite powerful example possible base access decisions dynamically changing data time support concepts object ownership 
proof concept implemented prototypical generator component architecture enterprise javabeans ejb 
prototype demonstrates possible generate security infrastructures access control secureuml models including role definitions method permissions user role assignments authorization constraint implementations 
proceed follows section explain foundations 
includes underlying access control model rbac component architecture ejb unified modeling language concept model driven software development 
give overview secureuml section explain metamodel notation sections 
section draw discuss related 
background role access control role access control rbac underlying security model modeling language 
rbac model access control users privileges decoupled roles 
decoupling conceptually useful leads significantly access control policy descriptions 
rh role hierarchy ua user pa permission prms users assignment roles assignment ops obs fig 

role access control shows data model foundation modeling language 
standard rbac proposed 
model consists data types users users roles roles objects obs operations ops permissions prms 
user defined person software agent 
role job function organization 
combines privileges needed fulfill respective job function 
privileges expressed terms permissions assigned role entries relation permission assignment 
permission represents authorization execute operation protected objects resources 
object context system resource set resources protected security mechanism 
operation action protected object initiated system entity 
types operations depend type protected objects 
file system example permissions read write execute files 
assignment roles users defined relation user assignment 
relation role hierarchy defines inheritance relationship roles 
relation inherits implies permissions role permissions role 
rbac suited foundation modeling access control reasons 
concept role permissions close domain vocabulary define security organizations 
ease expression requirements relevant access control analysis promote realization design 
roles decouple design application access control policy simplify presentation omit comprehensive model users groups 
administration 
opens possibility developing application access control policies context model driven process 
note modern software platforms support rbac model 
possible directly generate access control infrastructures platforms application models expressed secureuml 
enterprise javabeans enterprise javabeans ejb example component architecture prototype 
ejb widely industry developing distributed systems 
industry standard strong security support implemented large number application servers 
due lack space describe basic concepts ejb focusing access control 
information refer ejb standard defined 
access control model ejb rbac protected resources methods accessible interfaces ejb 
access control policy mainly realized declarative access control 
means access control policy configured called deployment descriptors ejb component 
security subsystem ejb environment responsible enforcing policy behalf components 
example shows definition permission authorizes execute component account 
method permission role name role name method ejb name account ejb name method intf remote method intf method name withdraw method name method method permission illustrated example permissions defined level particular methods 
general realistic applications information needed specify comprehensive access control policy quite voluminous 
inherent danger inadmissible simplifications due shortcuts taken developers 
suppose security policy role permission access methods ejb 
correct realization define method permission element method element methods 
save time developer define just method permission granting role full access methods ejb 
cause security holes inconsistencies security policy realization 
see modeling security policies higher abstraction level automatic generation corresponding deployment descriptors promising solution problem 
addition declarative access control ejb offers possibility implementing access control decisions business logic components 
mechanism called programmatic access control 
unified modeling language unified modeling language uml foundation reasons uml de facto standard object oriented modeling 
modeling tools support uml great number developers familiar language 
enables users develop access control policies intuitive graphical notation 
uml offers possibility extending modeling language defined extensibility constructs packaged called uml profile 
stereotypes define new types model elements tagged values introduce additional attributes metamodel types 
uml provides metamodel logical language object constraint language ocl define constraints model elements 
secureuml metamodel defines authorization constraints special kind uml constraint uses ocl expression language 
way able utilize existing tools concepts definition analysis constraints context access control 
model driven software development model driven software development approach software systems defined models constructed part automatically models 
system modeled different levels abstraction different perspectives 
syntax model defined metamodel 
systems model driven software development seen new generation visual programming languages 
metamodel defines syntax modeling languages model plays role source code generator replaces compiler 
approach possible generate automatically large amounts source code artifacts deployment descriptors files relatively concise models 
improves productivity development process quality resulting systems 
large step platform independent design systems 
object management group omg working standard architecture model driven software development called model driven architecture mda 
language conforms upcoming standard described 
define model proposal shown uml class diagram 
model implementation instance metamodel concrete syntax notation fig 

model model driven systems platform types relationships meaning model represents software system appropriate level abstraction certain perspective 
implementations generated model 
metamodel defines syntax class models 
metamodel refers particular platform called platform 
platform execution environment software systems java platform 
semantics metamodel defined transformation rules map language construct constructs platform uml class transformed java class 
notations metamodel 
notation defines concrete format represent models instances respective metamodel 
textual graphical notations 
uml profile example graphical notation uml tool 
secureuml overview section give overview goals structure secureuml 
explain metamodel notation detail sections 
secureuml modeling language defines vocabulary annotating models information relevant access control 
model rbac defined section additional support specifying authorization constraints 
secureuml defines vocabulary expressing different aspects access control roles role permissions user role assignments 
due general access control model extensibility secureuml suited business analysis design models different technologies 
goal language part modeling language called host language cover access control aspects 
way different models different abstraction levels annotated access control information syntax compatible semantics 
structure modeling language conforms model systems defined section 
metamodel defines syntax language structure model representation independent particular notation 
notation enrich class models uml defined uml profile 
semantics language defined informal transformation rules referring standard model section role model transformed single entry set roles 
usage standard model rbac enables give secureuml general semantics independent particular technology 
language included host language semantics refined 
refinement means specification language semantics precise adapted vocabulary security platform host language role model transformed single deployment descriptor element type security role 
informal imperative declarative techniques refinement 
resulting language called secureuml dialect 
suppose example want secureuml annotate platform dependent design models generate executable systems 
case semantics refined imperative generation rules define transformation syntactical elements model constructs target platform 
context possible parameterize language meet needs particular environment called resource type model see 
secureuml metamodel user role inheritance permission inheritance classification context containment fig 

secureuml metamodel contains modelelement uml secureuml metamodel shown defined extension uml metamodel 
concepts rbac represented directly metamodel types 
introduce new metamodel types user role permission relations types 
due design goal section protected resources represented different way 
defining dedicated metamodel type represent allow uml model element take role protected resource 
additionally introduce type represents user defined set model elements define permissions authorization constraints 
permission relation object connecting role modelelement 
semantics permission defined elements classify permission see association 
action type represents class security relevant operations particular type protected resource 
method security relevant action execute attribute examples 
modeling language corresponding action type class actions 
action types may represent conceptual classes operations higher abstraction level 
class may contain methods attributes attach permission class action 
action type represent permission invoke side effect free methods read values attributes class 
action types give developer vocabulary express permissions level close domain vocabulary 
set action types available language freely defined elements 
defines action types available particular metamodel type 
connection metamodel type represented attribute holds name type stereotype 
set resource types action types definition semantics particular platform define resource type model platform 
part access control policy application 
expresses precondition imposed call operation particular resource usually depends dynamic state resource current call environment 
suppose want define access control condition stating access method class calendar limited business hours 
achieve goal authorization constraint created expression refers resource local time 
operational view violation constraint result exception signaling denial access 
authorization constraint derived uml core type constraint 
constraint attached directly indirectly permission particular model element representing protected resource uml profile secureuml illustrate uml profile example ejb 
define simple modeling language ejb host language small scheduler application expressed language 
show host language enhanced resource type model ejb explain semantics secureuml language constructs refined semantics projection ejb 
example secureuml dialect ejb ejb modeling language ejb components modeled uml classes stereotype ejb see 
ejb class may contain methods attributes 
method model causes generation business method stub ejb component 
attributes mapped member holding state attribute access methods get set 
ejb standard requires ejb component implement default methods accessible clients instance finder method finds instances primary key methods delete instances 
methods ejb implementation omitted model generated automatically 
show example access control information expressed invisible methods 
define resource types corresponding action types ejb components methods attributes 
shown defined class stereotype class stereotype action types belonging resource type embedded type nested classes 
semantics action types context usage example 
standard uml association constraint modelelement attach constraints 
create update ejb read delete fig 

resource type definition ejb components resource type model included design model defined ejb language 
way action types directly referenced permission model 
scheduler example example application shown consists components calendar 
calendar may contain entries representing appointment start date location 
entry owned user name stored attribute owner 
additional constructs shown diagram express access control information 
cover secureuml constructs subsections 
change permission role user role superuser constraint ownership call current principal name owner name string update permission permission read permission update delete context ejb calendar name string ejb entry location string start date date owner string fig 

example secure scheduler constraint time time roles role represented uml class stereotype role 
example modeled 
projection ejb role model element transformed role definition deployment descriptor shown example code security role role name user role name security role inheritance relationship roles represented standard uml generalization relationship 
relation results entry relation role hierarchy general semantics 
example role superuser derived role user 
direct representation role hierarchy ejb permissions generated super role generated sub roles 
permissions permission drawn association class stereotype permission 
simplest case association bound type representing protected resources 
action type classify permission referenced type attribute permission class 
name attribute interpreted 
number referenced action types unlimited action types compatible type model element referenced permission 
necessary type information defined corresponding resource type 
assigned action type represents set permissions terms platform 
multiple action types assigned model permission union sets taken 
example shown defines permission access action 
transformation ejb security platform means method permissions side effect free methods referenced ejb generated 
standard finder methods read methods attributes methods explicitly marked side effect free 
example method permission entries generated deployment descriptor 
method permission role name user role name method ejb name entry ejb name method intf home method intf method name method name method 
method permission standard uml attribute purpose 
example model marked query 
example demonstrates expressiveness action types possibility expressing permissions invisible methods 
finder method represented model corresponding permission generated method belongs class side effect free methods selected action 
syntactically impossible address single attributes methods construct complement action types resource views 
realization metamodel type defines subset features particular type 
target permissions authorization constraints 
resource view modeled uml class stereotype 
context type referenced dependency stereotype context 
feature context type contained set defined resource view feature contained resource view model element signature 
example see resource view single 
defines permission role user attribute action type change 
generated ejb infrastructure result method permission granting role user permission execute set method method string 
authorization constraints authorization constraint defined uml constraint stereotype constraint shown 
anticipate authorization constraint cases imposed methods type 
notation optimized cases 
authorization constraints expressed ocl context element expression omitted computed follows 
authorization constraint bound type uml dependency 
terms metamodel means subset methods type restricted constraint 
call affected methods constraint 
uml notation transformed internal view creating single ocl constraint affected method including corresponding context element method see 
authorization constraints access application model respective platform model 
platform model defines api access information execution environment 
defined types access current time date information security system principal name roles caller 
types defined default model part application model 
generation authorization constraint expressions calls api substituted api calls concrete platform 
authorization constraints directly bound class resource view uml dependency 
case speak class bound constraint 
authorization constraint represents preconditions method generated type subset methods defined resource view 
application authorization 
restricts access omit platform model due space restrictions 
attributes methods ejb component entry legal business hours 
expression time time transformed standard ocl preconditions affected method shown methods context entry pre time time authorization constraint bound permission 
form authorization constraints designated permission bound constraint 
constraint defines additional restrictions permission 
logically role permission constraint conjoined 
resulting condition precondition methods affected role permission 
shows example constraint bound permission 
want restrict access update methods entry objects respective owners 
define role action attach 
action limits permission set methods attributes methods side effect free 
constraint ownership uses platform model access name current caller compares value 
call current principal name owner permission authorization constraint transformed combined precondition 
context entry string void pre call current principal user call current principal name owner role permission transformed ocl expression validating role platform model conjoined expression constraint ownership 
analysis model system generation useful construct predicate protected resource formalizing access control conditions defined permissions authorization constraints particular protected resource 
access control predicate defined ocl precondition built rule permission expressions disjunctively combined 
resulting term conjoined class bound authorization constraints affecting particular method 
example shows complete access control precondition method entry affected permissions authorization 
context entry void pre call current principal superuser call current principal user call current principal name owner time time user role assignments user smith fig 

user role assignment role user users represented classes stereotype user shown 
assignment role user defined dependency relationship stereotype 
note ejb specification prescribe standard format assigning roles users ejb product uses proprietary syntax 
give example product bea weblogic server 
security role assignment role name user role name principal name smith principal name security role assignment discussion secureuml modeling language designed integrating specification access control application models 
language builds access control model rbac additional support specifying authorization constraints 
shown secureuml context model driven software development process generate access control infrastructures 
way productivity development quality resulting systems improved 
validated concepts prototypical generator ejb 
prototype possible generate ejb applications full configured role access control including role definitions method permissions user role assignments authorization constraints 
tm tool modeling generation mda compliant development environment component systems rational rose tm template generator tm see implement generation rules 
prototype developed case studies banking scheduling application example 
experiments shown expressing access control policies uml manner concise precise 
information necessary realize policy ejb infrastructure lower level abstraction significantly detailed 
example generated access control policy scheduling application consists lines deployment descriptor source lines java code 
particular concept action types contributes problem solution 
permissions expressed intuitive vocabulary role granted read access component 
furthermore permissions adapted dynamically changes object model due filter effect action types 
reduces comparison explicit sets resource views possibility inconsistencies application model access control policy model 
want emphasize due general access control model secureuml suited defining access control policies security architecture supporting role programmatic access control 
language adapted particular security architecture defining corresponding resource type model identifies model element types representing protected resource architecture actions relevant access control 
resource type model semantics language refined terms target architecture 
shown approach example ejb security architecture 
shows ocl suited formalizing authorization constraints 
ocl expressions refer application model types allow considerable flexibility defining constraints 
ocl order language constraints incorporated formal analysis uml models see 
related area security modeling uml epstein sandhu propose uml notation access control 
contrast approach cover generation secure systems models 
apart similarities differences notation 
particular concept set handler similar resource view 
contrast complement resource views action types 
define dynamic filters sets operations 
epstein sandhu furthermore propose define constraints single roles operations informal notation 
formal constraints expressed ocl bound set operations permissions 
proposes concept specifying requirements confidentiality integrity analysis models uml 
underlying security models multi level security mandatory access control 
contrast focuses design phase builds rbac security model 
area models rbac jaeger proposes constraints rbac restrict assignment relationship roles users 
mechanism realize concept separation duty 
constraints defined 
authorization constraints complementary concept restricting execution operation system state dependent way 
furthermore authorization constraint proposed uml modeling construct extension rbac model general 
currently approach focuses static design models relatively close implementation 
worth considering efficiency development process secure applications improved annotating models higher level abstraction analysis annotating dynamic models state machines 
critical questions concerning development process open roles permissions identified 
current prototype demonstrate platform independence concepts 
focus modeling security requirements design information dynamic uml models 
furthermore development process secure systems starting initial analysis complete secure system design investigated 
context examine possibility propagating security requirements analysis design models ways verify compatibility requirements design information different levels 

bea systems programming weblogic enterprise javabeans 
docs bea com wls docs pdf ejb pdf 

brucker wolff 
proposal formal ocl semantics isabelle hol 
mu oz editors tphols lncs 
springer verlag 

epstein sandhu 
uml approach role engineering 
proceedings fourth acm workshop role access control pages 
acm press 

sandhu gavrila kuhn 
proposed nist standard role access control 
acm transactions information system security 

interactive objects software gmbh 
extensibility guide 
www 
io software com support docu extensibility guide pdf 

jaeger 
increasing importance constraints 
proceedings fourth acm workshop role access control pages 
acm press 


development secure systems 
hussmann editor fundamental approaches software engineering th international conference proceedings lncs pages 
springer 

koch uhl weise 
model driven architecture 
technical report interactive objects software gmbh cgi omg org cgi bin doc pdf 

object management group 
omg unified modeling language specification version 
www omg org technology documents formal uml htm 

sandhu coyne feinstein 
role access control models 
ieee computer 

sun microsystems enterprise javabeans specification version 
java sun com ejb docs html 
