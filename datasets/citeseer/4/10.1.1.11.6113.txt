infrastructure active spaces manuel rom christopher hess anand ranganathan pradeep bhaskar viswanathan renato roy campbell dennis department computer science university illinois urbana champaign west spring eld avenue urbana il usa roy cs uiuc edu choices cs uiuc edu gaia report 
uiucdcs eng may research supported national science foundation nsf 
infrastructure active spaces envision world mobile users unobtrusive ubiquitous computing environment couples computational model digital media virtual representations physical world 
hundreds embedded computers support information computational needs user 
users applications computing devices move 
location users devices drives applications resource management 
users anytime access information network computational resources 
world applications ective resources support activities users simple ecient construct 
changes physical environment alter computational model information space users 
similarly changes computational model information space may alter physical environment 
call environment active space 
propose systems software infrastructure functions way traditional operating system 
managing resources computer manages computational resources physical space 
describe systems software architecture results experimental implementation called contents gaia enabling active spaces architecture uni ed object bus 
gaia kernel 
naming service 
event manager 
discovery service 
space repository 
security service 
data object service 
application model traditional mvc 
model presentation adapter controller coordinator 
active space coordination related acknowledgments resources ubiquitous computing environments encompass spectrum computation communication devices seamlessly augment human thought activity digital information processing analysis provide observed imagined world automated enhanced behavioral context users 
large numbers inexpensive computing devices provide new functionality enhance user productivity ease everyday tasks 
home oce public spaces ubiquitous computers unobtrusively augment recreational activities information technology optimizes environment people needs 
call environments active spaces 
power computer infrastructure coordinate digital physical entities contributing factors translation information physical properties computers ability transform data cooperative computational environment results embedding devices network 
impact internet factor computational capabilities active space long term bene current information technology revolution 
bene achieved devising new form operating system enables applications built run active spaces 
operating system manage resources physical space devices user applications 
addresses fundamental issues design system 
power computer tool enhance thought action encourages broad application human activities endeavors enterprises 
smart cities buildings homes vehicles contain hundreds thousands devices services join thousands users hierarchy ubiquitous networks ranging personal body area networks global internet 
ubiquitous network enormous opportunities information appliance software gather organize analyze data provide sophisticated services enhance improve human activities experience learning knowledge 
active space scale support behavioral contexts diverse groups mobile users 
particular active space support application programs written users 
direct analogy building computing environment users run applications dedicated machine propose computing environment physical room operating theater building city form operating system organizes environment simplify management resources coding applications identi cation authentication users provision services reuse software er portability exibility 
active oce home classroom operating theater building city application appropriate libraries run ubiquitous infrastructure 
home oce application movable physical location overlaying actual physical devices geometry home oce 
users able interact oce home physically 
active space permit virtualization resources user may access home laptop conference 
entering active space require user login users authenticated user spaces secure 
result ort uniquely user centric application oriented computational environment 
realize vision developed operating system physical spaces creates active space 
foundation system provides network communication allows entities communicate 
foundation lies kernel consists essential services required applications operate context physical space 
order build applications developed application model addresses shortcomings models designed current desktop environments 
remainder continues follows 
section gives overview software infrastructure section gives detailed description architecture including communication mechanism core kernel services 
section describes application model section explains coordinate components system exible scripting language 
section covers related section ers concluding remarks 
gaia enabling active spaces approaches interacting ubiquitous computing environments customized particular scenarios targeted speci type application 
propose general model called gaia exports coordinates resources contained physical space de ning generic computational environment gro 
model requires revolutionary form operating system manages heterogeneous computational resources exports uniformly facilitating control physical spaces development applications run context space 
gaia converts physical spaces ubiquitous computing devices contain programmable computing system active space 
describe supporting infrastructure build applications exploit ubiquitous communicating devices embedded physical space 
argue active spaces analogous traditional computing systems just computer viewed object composed input output devices resources peripherals active space 
heterogeneity mobility sheer number devices system vastly complex 
applications may choice number input devices mouse pen nger output devices monitor pda screen wall mounted display speakers 
operating system space able locate appropriate device detect new devices spontaneously added system adapt content data formats compatible output devices 
traditional operating systems manage tasks common applications management necessary physical spaces 
research focused study issues related design implementation operating system called applications running system require development novel application model de nes rules build applications run context space 
support construction applications active spaces adapt traditional controller mvc architecture meet requirements ubiquitous computing 
traditional mvc model composed software components 
expand notion include hardware physical entities context information dynamic application construction 
models may ambient room conditions human vital signs person schedule views may projection screens phone lights audio speakers controllers may mouse keyboard hand motion person entering room voice 
di erent views may registered model render data may attached detached di erent times multiple controllers may applications may choose appropriate environmental conditions change 
infrastructure manage dependencies seamlessly adapt device types characteristics 
architecture component meta operating system middleware operating system runs top existing operating systems windows solaris 
illustrates main components lowest level uni ed object bus provides tools homogeneously manipulate heterogeneous components running system 
bus foundation remaining components rely 
gaia kernel includes essential services implement core functionality system including discovery repository events naming data storage manipulation security 
gaia services include additional services qos enhance functionality support applications 
gaia application model de nes standard framework creating ubiquitous applications run context space 
active space execution environment comprises user level operating system 
consists services applications run context particular active space part sections describe components detail 
unified object bus gaia kernel gaia services gaia application model active space execution environment gaia composed communication substrate kernel additional services application model 
uni ed object bus active spaces highly heterogeneous de nition 
include variety hardware devices diverse software protocols 
order export space programmable entity heterogeneity hidden 
programmers ered common interface manipulate components system regardless speci properties details hosting device 
uni ed object bus responsible providing tools manipulate lifecycle components running active space component instantiation component inspection component deletion component naming 
manipulate di erent component types corba scripts java beans provides open architecture seamlessly incorporate new component models 
components integrated called uni ed components programmers manipulate common interface regardless speci type component 
de nes basic abstractions include uni ed component component container component manager 
uni ed components basic elements 
components follow common naming scheme dynamically manipulated created deleted inspected regardless execution location shipped system 
components assume particular implementation 
de ne speci component lifecycle 
possible existing component models add additional functionality components follow lifecycle protocol de ned 
result components manipulated uni ed components 
component manager exports interface manipulate lifecycle components creation activation naming destruction 
encapsulates functionality integrate di erent component models component manager integrated component model 
component container provides execution environment components 
exports functionality manage dependencies components contains default instance component manager allows manipulating components belong container 
device capable hosting execution components 
export functionality create delete component containers creating components particular component containers 
gaia kernel gaia kernel core contains minimum required services bootstrap arbitrary space 
naming service component system entity abstracted distributed object 
requires mechanism name objects export names browsed resolved interested party 
components registered naming service stores value tuples 
active space associated naming space kernel services user level objects speci space registered 
space runs instance naming service possible federate export common namespace containing object di erent active spaces enabling inter space collaborations 
event manager event manager distribute information components maintaining loose coupling 
event manager channel abstraction channels simplify management events classifying di erent categories allow creation event hierarchies 
example uses discovery channel notify space entities entering leaving space 
channel error channel components post events information speci error conditions 
applications register speci event channels noti ed information changes environment 
dynamic nature active spaces communications model bene cial situations components may explicit knowledge 
model insulate applications component failures 
events means applications communicate 
relies dual communication model combines events peer peer interaction 
events helpful speci situations distributing information consumers suppliers known priori scenarios require direct communication mechanism 
example consider group components part application explicitly know 
situation ecient peer peer mechanism way components need go third party communicate 
dual model possible hybrid solutions components combine models speci requirements 
discovery service active spaces dynamic constantly ux 
services applications devices entities frequently introduced removed space 
dynamic nature increased failures inevitable distributed system necessary keep track currently active entities 
discovery service responsible tracking software components people physical entities space 
information currently active components required diagnostics self healing activities stabilize system handling component failures 
information people physical entities active space context information ects behavior active applications services 
discovery service composed sub services presence service service shown 
presence service keeps track software entities currently active space service responsible user physical entity detection 
services employ leasing mechanism determine particular entity active 
software components responsible sending heartbeats pre established rate renew leases 
presence service utilizes event manager receive information regarding presence entities 
information distilled service decide entity enters leaves space notify components occurrence 
discovery channel presence channel presence recognizer detector software component channels discover entity presence inform applications status entities 
users physical entities direct members digital world implies negotiate leases behalf 
physical entities sensed specialized devices provide required information decide located particular space 
presence service interprets data obtained di erent sensors decides physical entity space 
physical entity presence service automatically lease behalf entity sending heartbeats 
due diversity sensing technologies presence service able incorporate new sensing technologies 
support inclusion new technologies service constructed framework allows incorporation new sensor interpreters 
current implementation components interpret data active badges 
working creation components incorporate data received cameras 
note ability seamlessly incorporate new sensing technologies system robust accurate 
possible combine information di erent sensors locate single physical entity 
space repository space repository responsible storing information entities devices services applications users currently active context space 
space repository exports interface allows searching speci entities constraints speci query language 
entity associated description speci ed xml registered space repository 
entity descriptions include elds type component generic description name type data entity manipulate object 
space repository listens events generated discovery service order keep information stores date 
learning presence new entity space repository contacts entity requests associated xml description stores relevant information 
way entity inactive space repository receives event automatically removes component 
mechanism allows applications discover types devices currently available space 
security service security concerns gaia include authentication access control secure dynamic loading components secure tracking location privacy 
addition general access control authentication issues user may desire location activity kept private 
apart traditional login password mechanism active spaces authenticate recognize users di erent ways 
involve voice recognition retinal scan ngerprint matching active badges cards 
gaia employs authentication service issues credentials user identity veri cation 
credentials enable access control service provide discretionary mandatory role access control 
credentials authentication delegation authority trusted untrusted services 
employ types credentials generic credentials delegation authority trusted programs restricted credentials delegation authority untrusted programs non credentials simple authentication 
credential stores information user space identity users space roles attributes delegation restrictions timestamp 
credentials signed authentication service key shares access control service 
gaia provides mechanism enforce di erent kinds access control gil 
provides administrative role access control discretionary access control 
role access control applied resources system 
discretionary access control provided users secure private resources 
data object service traditional distributed le systems generally designed homogeneous environments simply transfer contiguous bytes data local node 
heterogeneous dynamic nature active space environments deems static con gurations traditional distributed le systems inappropriate 
gaia applications access data data object service dos dynamically typed le system supports content adaptation customized data access location awareness 
active space applications assumptions regarding devices preferences users bbg 
system able adapt dynamic conditions 
adaptation data grouping achieved containers 
containers encapsulate data type speci knowledge parse data sources indexed components 
type aware containers may linked create chains may perform sequence data transformation 
application simply speci es type wishes access source system transparently converts data source desired type 
addition indexing facilitates customized data access random access type mechanism signify alternate data groupings 
example device may wish access pages text characters 
containers provide higher level semantics presenting data form meaningful applications 
consideration physical location user 
user may de ne personal storage incorporated space physically 
essence user personal le system may follow move spaces 
personal storage may reside remote desktop machines mobile special purpose devices 
storage automatically available applications running space need manually transfer les 
implicitly linking storage user simpli es data management way applications access data 
envision variety small mobile devices mp players cameras export data generic way allow storage available devices placing storage servers 
application model gaia application model provides standard mechanism build applications ubiquitous computing scenarios proposes new way applications ubiquitous computing paradigm 
application model traditional model view controller mvc paradigm augmented extensions account dynamic nature ubiquitous computing environments 
traditional mvc mvc kp de nes modular design models behavior interactive applications clearly encapsulating model application domain model visualization model view mechanisms interact model controller 
modular architecture simpli es task modifying extending applications reusing speci components 
model views attached responsible displaying data particular way 
bene separation model view model rendered di erent ways 
model explicitly knows assigned views responsible updating change model state detected 
nal element required controller allows users interact application model assigned views 
controller stores model view pair input sensor mouse keyboard pen captures input events generated users 
result input event left mouse key pressed depends associated view actions derived control mechanism automatically sent views associated model 
model presentation adapter controller coordinator concepts de ned traditional mvc valid interactive application regardless speci environment applications run 
application model representation model users perceive mechanisms modify state model 
existing implementations mvc customized traditional application environments dicult reuse context active spaces 
model presentation adapter controller coordinator application model maps mvc pattern active space environments 
new model takes account issues variety interaction device contextual properties associated user space application runs automatic model view data type adaptation mobility view model controller applications running behalf user space context particular device 
de nes model way applications active space environments built 
user perspective ubiquitous application model de nes model customizing applications 
applications run physical space inhabited users car oce users interact space single entity collection individual unrelated digital devices services 
traditional mvc presents state model users means views 
views responsible rendering state visual form 
model ubiquitous applications presenting model state user necessarily imply rendering 
model externalized possible way ects senses user 
user see model application possibly hear smell touch 
goals application model de ne framework way applications ubiquitous computing environments designed built assembled 
coordinator model adapter controller policies configuration rules presentation application model consists model presentation adaptor controller coordinator 
model ubiquitous applications de nes elements model presentation adapter controller coordinator 
model implementation application central structure normally consists data programmatic interface manipulate data 
presentation physical externalization model allows users perceive senses 
controller exports mechanisms modify state model 
standard mvc controller controller de ned coordinates input devices includes source physical digital context ect application 
adapter component responsible adapting format model data characteristics arbitrary output device essence providing impedance matching 
coordinator meta level application manager handles non application domain speci issues application structure adaptation policies 
coordinator stores components compose application policies regarding adaptation customization mobility application 
illustrates schematic diagram application model 
active space coordination gaia abstracts entities contained space distributed objects 
uses high level scripting tool called luaorb cci coordinate entities easily program con gure space 
luaorb interpreted language lua ifc ifc provides set abstractions connect available components order compose new services applications 
lua facilitates automating management con guration tasks allows rapid prototyping testing 
interpreter lua fast small memory footprint ideal resource constrained devices 
luaorb implements language bindings lua corba com java 
language bindings designed support dynamic component composition allow identi cation new component types integration instances dynamically assembled application 
luaorb ability directly communicate various component models allows easily interact components system 
lua glue dynamically assemble components gaia 
allows easily create con guration scripts customize behavior spaces prototype applications 
furthermore lua extensively capture events event manager discovery errors context information trigger speci actions certain conditions met 
richness lua syntax allows dynamically create arbitrary complex triggers 
easily create context translators listen speci events translate aggregate distill generate new events 
scripts de ne process particular events order package collection events give semantic meaning applications sda das 
addition take advantage interpretative character lua send scripts space recon guration purposes 
related years ubiquitous computing serious research topic 
seminal occurred xerox parc introduced tab sag low capacity networked terminal active badges mechanism tracking users 
microsoft easy living project mic focuses home environments states computing natural lighting 
main properties environments casual access extensibility 
infrastructure allows interfaces move user location 
project uses computer vision detect user location recognize gestures users uses information customize room accordingly 
di er fundamentally change way applications built moving away desktop paradigm allow applications run arbitrary devices 
hewlett packard developed cooltown proposes adding web presence physical spaces 
web paradigm extended physical spaces contain infrared beacons provide urls related physical space 
web browser standard application gui key aspects dynamic creation customized web pages contextual parameters 
project associates data physical locations helps information useful current location user 
contrast project attempting create generic computing environment 
mit oxygen project der envisions world embedded computers pervasive part everyday life 
speech vision movement drive interaction machines 
oxygen de nes key components 
networks interconnect devices enabling collaborative regions 
networks support di erent types protocols provide naming security mechanisms 
devices embedded physical spaces responsible turning spaces intelligent environments 
provide large amounts computation access di erent types sensors displays 
mobile points interaction capable recon guring 
communicate networks explicitly require 
oad computation communication 
projects similarities oxygen focuses human computer interactions gaia investigating application model data abstractions 
endeavour project kat berkeley focuses integrating sensors actuators position locators displays mobile handheld devices 
key component processing management information ows system 
university washington strives provide invisible computing transparent user interfaces universal connectivity intelligent services 
project investigating determining user interfaces user location movement data centric networking novel models distributed services 
land roomware research projects infrastructure digitally augments meeting rooms 
goal er environment easy exchange ideas digitally record results meetings search knowledge bases provide tools group collaboration focusing multimedia data exchange 
interactive workspaces stanford presents augmented meeting room promotes group 
room contains wall sized touch screen projectors arrays microphones speakers laptops pdas 
project identi es importance high level operating system coordinate entities contained room 
main software infrastructure event heap allows di erent devices interoperate strictness peer peer model 
infrastructure robust easy maintain 
projects interested interaction physical spaces collaborative groups 
similar interactive workspaces believe need supporting infrastructure operating system 
focus construction applications contrast focuses making existing applications operate workspaces support collaborative groups 
ninja project uc berkeley de nes architecture consisting main components bases units active proxies paths 
bases manifested cluster workstations provide scalability fault tolerance concurrency 
units comprise myriad devices may connected infrastructure 
active proxies provide adaptation content similar containers result previous research data distillation tacc fox model perform data transformations fgg 
component paths constructs ows data may transformed passing di erent components active proxies cmi 
ninja architecture investigating scalable robust ways build scalable internet services 
focusing physical spaces services required support applications spaces 
iceberg project uses ninja framework provide infrastructure integrated network communications 
infrastructure supports call establishment signaling 
main focuses support user device modality 
users switch devices system adapt properties device 
iceberg infrastructure messaging contrast gaia developed general computational environment 
vision ubiquitous computing technology drives interaction human activities associated physical spaces 
believe ubiquitous computing requires creation generic digital infrastructure assist users everyday tasks 
result combining physical space digital infrastructure call active space 
programmable entity populated dynamic group mobile users consisting physical devices digital services coordinated standard software infrastructure 
addition programmable react physical stimulus ect applications 
describe software infrastructure implementation enable active spaces 
infrastructure resembles traditional operating system manages heterogeneous computational resources exports uniformly facilitating control physical spaces development applications run context space nished prototype concentrating building applications take bene exported infrastructure 
initial results show design traditional desktop applications change accommodate dynamic nature active spaces wide variety computing devices 
studying build applications take full bene surroundings leveraging available services context computing devices exist space 
constructed application builder allows create distributed applications dynamically connecting available components 
built demonstrations ubiquitous applications take advantage infrastructure mp player slide presentation application high bandwidth hdtv video controller operates multiple displays 
gaia application model allows partition applications dynamically place application components adapt di erent device characteristics react contextual changes attach detach application components 
issues investigate related application development active space environments preliminary results show ering common infrastructure signi cantly reduce complexity task 
acknowledgments authors fabio kon discussions early design stages system 
cristina providing lua scripts system 
resources resources documentation gaia available choices cs uiuc edu gaia 
research team 
component network centric operating system millennium 
choices cs uiuc edu 
bbg banavar james beck eugene jonathan munson jeremy sussman 
challenges application model pervasive computing 
proceedings sixth acm ieee int 
conf 
mobile networking computing pages pp 

cci renato carlos roberto ierusalimschy 
dynamic component gluing di erent systems 
international symposium distributed objects applications doa pages edinburgh 
ieee press 
cmi chandrasekaran samuel madden 
ninja paths architecture composing services wide area networks 
ninja cs 
berkeley edu dist papers paths ps gz 
das anind dey gregory abowd daniel salber 
context infrastructure smart environments 
proceedings st international workshop managing interactions smart environments pages pp 

der michael 
computing 
scienti american 
hightower anderson borriello 
century challenges data centric networking invisible computing project university washington 
proceedings mobicom 
armando fox steven gribble eric brewer elan amir 
adapting network client variation demand dynamic distillation 
boston ma october 
fgg armando fox ian goldberg steven gribble david lee anthony eric brewer 
experience top gun proxy graphical web browser com palmpilot 
ifip international conference distributed systems open distributed processing lake district uk september 
armando fox brad pat hanrahan terry winograd 
integrating information appliances interactive workspace 
ieee computer graphics applications may june 
fox armando fox 
case tacc scalable servers transformation aggregation caching customization 
qualifying exam proposal 
gil gill 
dynamic policy driven role access control active spaces 
master thesis university illinois urbana champaign 
gro software research group 
gaia enabling active spaces 
choices cs uiuc 
edu gaia 
steven gribble matt welsh eric brewer david culler 
multispace evolutionary platform infrastructural services 
proceedings usenix annual technical conference monterey ca june 
steven gribble matt welsh rob von behren eric brewer david culler czerwinski gummadi hill katz mao ross zhao 
ninja architecture robust internet scale systems services 
special issue computer networks pervasive computing 
hewlett packard 
cooltown 
www cooltown hp com 
ifc roberto ierusalimschy luiz figueiredo 
lua extensible extension language 
software practice experience 
ifc roberto ierusalimschy luiz figueiredo 
manual programming language lua version 
rio de janeiro brazil 
available www lua org ftp ps gz 
ibutton home page 
ibutton steel computer chip everyday wear tear 
www ibutton com 
kat randy katz 
endeavour expedition charting fluid information utility 
endeavour cs berkeley edu proposal 
kp glenn krasner stephen pope 
description model view controller user interface paradigm smalltalk system 
parc place systems mountain view 
mic microsoft easyliving 
www research microsoft com easyliving 
raman randy katz anthony joseph 
personal mobility iceberg integrated communications network 
technical report ucb csd ucb eecs may 
sag bill schilit norman adams rich gold karin petersen david goldberg john ellis mark weiser 
parctab ubiquitous computing experiment roy want 
technical report xerox palo alto research center march 
technical report csl 
sda daniel salber anind dey gregory abowd 
context toolkit aiding development context enabled applications 
proceeding chi pittsburgh pa may 
acm press 
norbert streitz org torsten holmer 
roomware cooperative buildings integrated design architectural spaces information spaces 
proceedings international workshop cooperative buildings cobuild pages pp 
darmstadt germany february 
norbert streitz org torsten holmer shin ichi christian wolfgang peter seitz ralf steinmetz 
land interactive landscape creativity innovation 
proceedings acm conference human factors computing systems chi pages pp 
pittsburg pennsylvania may 
roy want andy hopper veronica falcao jonathan gibbons 
active badge location system 
acm transactions information systems 
xu klara 
multimedia service con guration reservation heterogeneous environments 
proceedings ieee international conference distributed computing systems icdcs april 
xu klara 
resource aware con guration ubiquitous multimedia service 
proceedings ieee international conference multimedia expo icme new york new york july august 

