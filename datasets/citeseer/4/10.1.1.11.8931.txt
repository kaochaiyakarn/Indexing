simulation dynamic grid replication strategies william bell david cameron luigi paul millar kurt stockinger university glasgow glasgow qq scotland itc irst sommarive povo trento italy cern european organization nuclear research geneva switzerland 
computational grids normally deal large computationally intensive problems small data sets 
contrast data grids deal large computational problems turn require evaluating mining large amounts data 
replication regarded major optimisation techniques providing fast data access 
replication algorithms studied 
achieved grid simulator 
provides modular framework optimisation strategies studied different grid configurations 
goal explore stability transient behaviour selected optimisation techniques 
grid community done providing basic infrastructure typical grid environment 
globus condor eu datagrid contributed substantially core grid middleware services software available basis application development 
little effort far optimise grid resources 
data grid user typically submits job grid 
order job executed kinds resources required computing storage network 
grid scheduling decisions job current state grid resources workload features computing elements location data network load 
file replication major technique improving data access 
file replicas multiple copies file spread grid 
access files types may logical file name lfn physical file name pfn 
lfn file independent file stored replicas exist 
pfn refers specific replica lfn located definite site 
lfn pfn replica grid 
job typically request lfn data access 
typically optimisation proceeds resolving lfn finding pfn accessed minimal time 
main optimisation criteria minimise access latencies 
complete optimisation achieved combined resource impact jobs minimised allowing jobs run fast possible 
order study complex nature typical grid environment evaluate various replica optimisation algorithms grid simulator called developed 
design concepts discussed preliminary results selected replication algorithms reported 
structured follows 
section describes design simulator 
various replication algorithms discussed section 
setting simulation configuration section section dedicated description simulation results 
section highlights related 
section concludes reports 
simulation design simulation package written java developed study effectiveness replica optimisation algorithms data grid environment 
architecture main design considerations model interactions individual grid components running data grid realistically possible 
simulation architecture eu datagrid project illustrated 
computing element replica manager replica optimiser storage element computing element user interface resource broker job execution site job execution site job execution site replica manager replica optimiser storage element fig 

simulated datagrid architecture 
computing element replica manager replica optimiser storage element simulation constructed assuming grid consists sites may provide computational data storage resources submitted jobs 
site consists zero computing elements zero storage elements 
computing elements run jobs data files stored storage elements resource broker controls scheduling jobs computing elements 
sites storage computing elements act network nodes routers 
movement data associated jobs sites performed component called replica manager 
replica manager decision create delete replicas controlled replica optimiser called 
heart replica optimisation algorithm properties discussed section 
internals simulation computing element represented thread 
job submission computing elements managed thread resource broker 
resource broker ensures computing element continuously runs jobs frequently attempting distribute jobs computing elements 
resource broker finds idle computing element selects job run policy computing element type jobs run run job 
computing element run single job time 
soon job finishes assigned resource broker 
explicit job scheduling algorithm computing elements process jobs duration simulation overloaded 
currently optimisation occurs job scheduled computing element 
complex scenario optimising job scheduling data access part 
job set files may request 
order files requested determined access pattern 
access patterns considered sequential set ordered forming list successive requests random files selected randomly set flat distribution unitary random walk set ordered successive files exactly element away previous file direction random gaussian random walk unitary random walk files selected gaussian distribution centred previous file 
file required job file lfn locate best replica replica optimiser function lfn element storage element replica may copied 
assumed computing element job running requested storage element located site 
checks replica catalogue copies file 
replica catalogue grid middleware service currently implemented simulation table corresponding 
examining available bandwidth sites replica file stored choose pfn accessed fastest decrease job running time 
simulated version partially fulfils functionality described 
blocking call may cause replication storage element located site job running 
replication completed pfn best available replica returned job 
replication occurred best replica located remote site accessed job remote replication time replication occurs file access time remote site dependent network characteristics duration connection 
time bandwidth available transfer limited lowest bandwidth transfer path 
transfers utilising common network element bandwidth element shared transfer receives equal share 
optimisation algorithms replica optimisation algorithms core replica optimiser 
duration submitted job lfn requested calling 
optimisation algorithms implement may copy requested file remote site storage element site requesting computing element 
storage capacity site full file deleted replication succeed 
strategy decide file deleted differentiates optimisation algorithms 
briefly simple algorithms sophisticated greater detail 
algorithms implemented 
simple algorithms replication algorithm replicates file 
distribution initial file replicas decided simulation change execution 
algorithm returns pfn largest expected bandwidth 
network load varies simulation optimal pfn may change 
unconditional replication oldest file deleted algorithm replicates file site job executing 
space accommodate replication oldest file storage element deleted 
unconditional replication accessed file deleted algorithms behaves previous method accessed file past time interval deleted 
economic approach section presents replication strategy economic model grid resource optimisation 
general description economic approach 
economic model propose includes actors autonomous goal seeking entities resources grid 
optimisation achieved interaction actors model goals maximising profits minimising costs data resource management 
data files represent goods market 
purchased computing elements jobs storage elements order investment improve revenues 
sold storage elements computing elements storage elements 
computing elements try minimise file purchase cost storage elements goal maximising profits 
economic model utilised solve distinct problems deciding replication occur selection file creating space new replica 
job running computing element requests file optimisation tries locate cheapest copy grid starting auction 
storage elements file locally may reply bidding price indicates file transfer cost 
site file locally may initiate auction establish replication satisfy file request 
mechanisms realises global optimisation mentioned 
currently auction protocol integrated 
discussion simpler protocol described section 
mechanism deciding replication occur implemented 
described section 
replication decision economic model replica optimiser needs informed decision replicating file local storage element 
decision replication associated file transfer file deletion result reduced expected file access cost local computing element 
order decision replica optimiser keeps track file requests receives uses history input evaluation function 
function defined returns predicted number times file requested requests past requests history 
new file request received replica optimiser say file prediction function calculated file storage 
file storage element value value replication occurs 
valuable file selected deletion new replica created storage element 
multiple files storage element share minimum value file having earliest access time deleted 
evaluation function defined equation pi argument 
assuming requests files containing similar data clustered spatial time locality request history described random walk space integer file identifiers random walk identifier requested file obtained current identifier addition step value probability distribution 
assuming binomial distribution steps probability receiving request file step random walk equation pi id 
id mean value binomial distribution maximum value step 
probable number times file requested requests 
time interval describes far back history goes determines number previous requests considered prediction function 
assume arrival rate requests constant 
decided obtained interval intend prediction 
value equation depends value mean value obtained values step random walk 
particular calculated weighted average steps weights decrease past time 
simulation configuration grid configuration study optimisation algorithms carried model eu datagrid testbed sites associated network geometry illustrated 
model site allocated storage resources proportional actual hardware allocations 
testbed site excluding cern assigned computing storage element 
cern allocated storage element hold master files assigned computing element 
routers previously stated described creating site computing storage elements 
size storage elements testbed site table 
assume mapping file names identifiers preserve file content similarity 
ral imperial college testbed site router lyon cern milano torino catania padova bologna fig 

eu datagrid testbed sites approximate network geometry 
numbers indicate bandwidth sites 
site name bologna catania cern imperial college lyon storage element gbytes site name milano padova ral torino storage element gbytes table 
list resources allocated testbed sites results generated 
job configuration initially files placed cern storage element 
jobs cdf case described 
job types overlap set files job accessed 
total size file accessed job type estimated summarised table 
set files assumed composed gbyte files 
distribution jobs site performs 
simulation modelled distribution site ran equal number jobs type preferred job type ran twice 
job type chosen site storage considerations replication algorithms effective local storage site able hold files preferred job type 
data sample total size gbytes central high pt inclusive electrons inclusive high photons bb table 
estimated sizes cdf secondary data sets 
fig 

histogram job duration left progression job duration course simulation right 
results left histogram shows typical spread job duration single job type selected computing element course simulation run 
large spike near zero due job requesting files available local site 
time consuming file transfers need take place 
longer durations due job requesting files local site 
spread due network load vary time affecting file transfer times 
variation job duration simulation shown right histogram job type computing element 
clearly large variation job duration due factors mentioned general trend jobs executed quickly time indicating movement optimal replica configuration 
tests conducted simulating jobs algorithms fig 

integrated running times jobs access pattern replica optimisation algorithm 

replication 
unconditional replication oldest file deleted 
unconditional replication accessed file deleted 
economic model replication algorithm file access patterns defined section tested 

sequential 
random 
unitary random walk 
gaussian random walk shows total time complete jobs access patterns optimisation algorithms 
optimisation jobs take longer simplest optimisation algorithm files job transferred cern time job run 
algorithms replication conducted show marked reduction time execute jobs 
surprising replication file requests jobs come cern 
optimisation algorithms implement replication show similar performance random unitary random walk gaussian random walk 
sequential access patterns running time faster economic model optimiser 
results expected economic model assumes sequential access pattern 
adjusted match observed distribution needed 
related great interest modelling data grid environments 
simulator modelling complex data access patterns concurrent users distributed system 
studies mainly conducted setting scientific experiments lhc resulted creation eu datagrid project 
simulation tool designing evaluating grid middleware applications network services computational grids 
currently simulator take data management issues consideration 
grid simulators approach proposed automatically creating replicas typical decentralised peer peer network :10.1.1.15.9060
goal create certain number replicas site order guarantee minimal availability requirements 
various replication caching strategies simulated grid environment discussed 
economic model job scheduling introduced grid credits assigned users proportional level priority 
model optimisation achieved scheduling stage job 
approach differs including optimal replica selection automated replica creation addition scheduling stage optimisation 
combined scheduling replication algorithms studied 
replication algorithms proposed assumption popular files site popular sites 
replication site triggered popularity file overcomes threshold destination site chosen randomly selecting loaded site 
take complementary approach 
replication algorithms grid sites need data locally assumption computational grids areas called data hot spots particular sets data highly requested 
algorithms designed move data files data hot spots 
described design grid simulator 
particular allows analysis various replication algorithms 
goal evaluate impact algorithm choice throughput typical grid jobs 
chosen traditional cache management algorithms oldest file deletion accessed file deletion compared novel algorithm economic model 
analysis grid scenarios various loads 
results obtained suggest economic model performs traditional methods 
addition specific realistic cases economic model shows marked performance improvements 
extending simulator including auction protocol proposed 
motivated additional functionality automatic replication third party sites allowing file migration accurately match demand 
want erwin heinz stockinger valuable discussions preparation 

condor project 
www cs wisc edu condor 

replica optimiser simulation 
grid web cern ch grid data management optimisation 

datagrid project 
www eu datagrid org 

globus project 
www globus org 

aida matsuoka 
performance evaluation model scheduling global computing system 
international journal high performance applications 

bell cameron millar stockinger 
design query optimisation service 
technical report cern 
wp data management eu datagrid project 
cern ch document 

buyya stockinger giddy abramson 
economic models management resources peer peer grid computing 
commercial applications high performance computing spie international symposium convergence information technologies communications denver colorado usa august 

stockinger 
preliminary evaluation revenue prediction functions economically effective file replication june 

serafini stockinger 
economy optimisation file access replication data grid 
international workshop agent cluster grid computing international symposium cluster computing grid ccgrid berlin germany may 
ieee computer society press 
appears irst technical report istituto di cultura december 

casanova berman wolski 
apples parameter sweep template user level middleware grid 
proc 
super computing dallas texas usa november 

huffman cdf uk project 
cdf internal note 



multi threaded discrete event simulation distributed computing systems 
proc 
computing high energy physics chep padova italy february 

eu datagrid project 
datagrid architecture 

ranganathan iamnitchi foster 
improving data availability dynamic model driven replication large peer peer communities 
global peer peer computing large scale distributed systems workshop berlin germany may 

foster 
identifying dynamic replication strategies high performance data grid 
proc 
international grid computing workshop denver colorado usa november 

foster 
decoupling computation data scheduling distributed data intensive applications 
international symposium high performance distributed computing edinburgh scotland july 
appear 

song liu bhagwan zhang chien 
scientific tool modeling computational grids 
scientific programming 
