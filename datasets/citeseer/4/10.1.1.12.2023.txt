usability open source software david nichols michael twidale open source communities successfully developed great deal software computer users proprietary applications 
usability open source software regarded reason limited distribution 
review existing evidence usability open source software discuss characteristics open source development influence usability 
describe existing human computer interaction techniques leverage distributed networked communities developers users address issues usability 
contents open source usability problem 
usability open source software development potential approaches improving oss usability discussion open source communities successfully developed great deal software 
software technically sophisticated users software development part larger computing infrastructure 
open source software growing average user computer user directly interacts proprietary software 
reasons situation perception open source software usable 
examines open source development process influences usability suggests usability improvement methods appropriate software development internet 
interpretation topic meeting different paradigms open source developer user uses software contributes development user centred design movement attempts bridge gap programmers users specific techniques usability engineering participatory design ethnography rationale user centred design approach human computer interaction hci emphasises software developers easily design typical users 
glance suggests open source developer communities easily live goal replacing proprietary software desktop users raymond 
discuss situation complex variety potential approaches attitudinal practical technological 
review existing evidence usability open source software oss 
outline ways characteristics open source development influence software 
describe existing hci techniques leverage distributed networked communities address issues usability 
open source usability problem 
open source software gained reputation reliability efficiency functionality surprised people software engineering world 
internet facilitated coordination volunteer developers world produce open source solutions market leaders sector apache web server 
users applications relatively technically sophisticated average desktop user standard commercial proprietary software lerner tirole 
explanations situation inertia interoperability interacting existing data user support organisational purchasing decisions concerned possible explanation potential users open source software poorer usability 
usability typically described terms characteristics ease learning efficiency memorability error frequency severity subjective satisfaction nielsen 
usability separate utility software perform function characteristics reliability cost 
software compilers source code editors developers appear represent significant usability problem oss 
discussion concentrate software word processors mail clients web browsers aimed predominantly average user 
usability problems open source software significant interactive software problems 
issue software produced open source development process compare approaches 
unfortunately easy arrange controlled experiment compare alternative engineering approaches possible compare similar tasks existing software programs produced different development environments 
study aware comparison eklund 
microsoft excel particular comparison problematic proprietary past 
differences programs may influence comparisons development time development resources maturity software prior existence similar software factors characteristic differences open source commercial development large number differences difficult determine fair comparison 
ultimately user testing software eklund 
acid test 
shown mozilla project mozilla may take years open source project reach comparability premature negative comparisons taken indicative approach 
additionally public nature open source development means early versions visible distribution embryonic commercial software usually restricted 
scarcity published usability studies open source software addition eklund 
aware studies gnome smith athena athena greenstone nichols 
characteristics open source projects emphasize continual incremental development lend traditional formal experimental studies culture may play part discuss section 
formal studies open source usability suggestions open source software usability significant issue raymond manes nichols thomas desktop application design primarily technical problem outcome hardly doubt 
isn problem ergonomic design interface psychology hackers historically poor 
hackers designing interfaces hackers tend poor modeling thought processes population write interfaces random user aunt pay buy 
raymond traditionally users oss experts early adopters nearly synonymous development pool 
oss enters commercial mainstream new emphasis placed usability interface design corel explicitly targeting general desktop linux distributions 
users attracted available source code choose oss products basis cost quality brand support 
feller fitzgerald raymond stating central message user centred design norman draper developers need specific external help cater average user 
hci community developed tools techniques purpose usability inspection methods interface guidelines testing methods participatory design inter disciplinary teams 
nielsen 
increasing attention paid usability open source circles suggests may passing similar phase proprietary software 
users software heterogeneous technically experienced software producers started adopt user centred methods ensure products successfully adopted new users 
whilst users continue problems software applications hci specialists employed companies greatly improved users experiences 
user base oss widens include non developers projects need apply hci techniques wish software desktop average user 
evidence benson open source projects adopting techniques previous proprietary explicit user interface guidelines application developers benson 
difficult give definitive answer question open source usability problem 
existence problem necessarily mean oss interfaces bad oss doomed hard interfaces just recognition interfaces ought better 
opinions commentators actions companies sun involvement gnome strongly suggestive problem academic literature feller fitzgerald largely silent issue 
nichols 
main exceptions 
order suggest hci approaches mesh practical social characteristics open source developers users necessary examine aspects development process may negative impact usability 
usability open source software development just don boring stuff stupid people 
sterling understand usability current oss need examine current software development process 
user centred design development activities reflected developed system 
drawing extensively main sources nichols thomas set features oss development process appear contribute problem poor usability 
addition features shared commercial sector help explain oss usability worse proprietary systems better 
list features intended complete serve starting point addressing issues 
note significant difficulties proving hypotheses correct 
developers typical users key point nielsen shared commercial systems developers 
teaching computer science students usability issues experience chiefly helping try see systems eyes people peers 
fact advanced oss products developers users esoteric products interfaces unusable technically skilled group users perfectly adequate intended elite audience 
may certain pride creation sophisticated product powerful challenging learn interface 
mastery product difficult membership elite distinguish called 
comments product web browser target people oss contributors consider clueless 
designing products technical users traditional usability problems arise 
greenstone study nichols common command line conventions successful command giving feedback confused users 
terms man unix command line referring help system regexp regular expression gnome interface typical examples developer terminology users smith 
oss approach fails user usability wrong kind looking failing see usability issues 
ways relatively new problem oss usability reflects earlier problem commercial systems development initially bulk applications designed computing experts computing experts time increasing proportion systems development aimed non experts usability problems prominent 
transition non expert applications oss products similar trajectory just years 
key difference approaches commercial software development recognised problems employ specific hci experts re balance historic team compositions consequent development priorities favour users 
volunteer led software development ability hire missing skill sets ensure user centred design expertise development team 
additionally commercial development easier ensure hci experts sufficient authority promote interests users 
usability experts get involved oss projects anecdotal evidence suggests people usability experience involved oss projects lessons learned mozilla project mozilla ensure ui user interface designers engage open source community 
open source draws origins strength hacker culture reilly 
culture extremely hackers comfortably spanning nations organisations time zones internet 
may non hackers 
usability design draws variety different intellectual cultures including limited psychology sociology graphic design theatre studies 
multidisciplinary design teams effective require particular skills initiate sustain 
result existing oss teams may just lack skills solve usability problems skills bring outsiders help 
stereotypes low hacker social skills taken sustaining distributed multidisciplinary design teams trivial 
furthermore skills attitudes necessary successful productive member oss project may relatively rare 
large candidate set hacker programmers interested getting involved oss projects various methods winnowing best skill sets giving progressively control responsibility 
may applies potential usability participants implying substantial number potential usability needed order proceed winnowing process 
true adds usability expertise shortage problem 
possible explanations minimal non participation hci usability people oss projects far fewer usability experts hackers just go 
usability experts interested oss approach way hackers 
usability experts feel welcomed oss projects 
inertia traditionally projects haven needed usability experts 
current situation technically adept programmers usability experts oss projects just historical artifact 
critical mass usability experts involved incentives peer recruitment opportunities operate 
incentives oss better improvement functionality usability oss developers just interested designing better interfaces 
open source projects voluntary developers topics interest may include features novice users 
importance incentives oss participation recognised feller fitzgerald ou 
include gaining respect peers intrinsic challenge tackling hard problem 
adding functionality optimising code provide opportunities showing hacker hackers 
oss participants perceive improvements usability high status challenging just interesting choose area 
voluntary nature participation aspects choosing participate choosing usually large number problems project 
competing challenges usability problems may get crowded 
extreme version case choice entire oss project may biased systems side applications side 
widely known successful oss projects initiated technical need addressed available proprietary oss technology 
raymond refers motivation scratching personal raymond 
clearly technically adept initiators oss projects personal need advanced applications development toolkits systems infrastructure improvements application happens meet needs technically sophisticated user 
developer perspective solving usability problem rewarding experience solution involve programming challenge new technology algorithms 
benefits solving usability problem slight change behavior software cause dramatic improvement user perspective 
change behavior subtle fit typical types contributions developers adding features bug fixes 
eklund personal motivation creates significant difference open source commercial software development 
commercial systems development usually solving needs group users 
incentive money selling software customers customers prepared pay precisely development skills 
capturing requirements software customers acknowledged difficult problem software engineering consequently techniques developed attempt address 
contrast oss projects lack formal requirements capture processes formal specifications scacchi :10.1.1.117.5406
rely understood requirements initially individuals tight knit communities 
supported informalisms illustrated evolving oss project code embodies articulate requirements 
relation usability implies oss certain ironic ways closed source software css 
personal implies designing software needs 
explicit requirements consequently necessary 
oss shared minded community individual tool refined improved benefit community 
contrast css project may designing community different characteristics strong incentive devote resources certain aspects usability particularly initial learnability order maximise sales varian 
usability problems harder specify distribute functionality problems functionality problems easier specify evaluate modularize certain usability problems 
attributes simplify decentralized problem solving 
usability problems harder describe may entire screen interaction user experience 
incremental patches interface bugs may far effective incremental patches functionality bugs 
fixing problem may require major entire interface clearly small contribution ongoing design 
involving designer interface design particularly autonomously lead design inconsistency lower usability 
similarly improving interface aspect part application may require careful consideration consequences change design consistency 
contrasted incremental fixing functionality high quality modularised application 
point modularisation effects local 
substantial highly desirable refactoring occur ongoing project remaining invisible users 
interface changes global scope consistency effects 
modularity oss projects contributes effectiveness approach reilly enabling side step brooks law 
different parts swapped replaced superior modules incorporated version 
major success criterion usability consistency design 
slight variations interface modules different versions modules confuse user experience 
inevitably public nature means interfaces amenable permits certain kinds incremental distributed improvement 
note oss projects successfully address certain categories usability problems 
popular approach oss interface design creation alternate interface layouts dramatically affect appearance application little change nature underlying interaction dynamics 
related approach software language interface culture specific icons translated 
approaches amenable modular oss approach attempt address deeper interaction problems redesign sets interaction sequences break easily manageable project 
reason difference addressing deeper interaction problems implications interface lead requirements changes different elements functionality 
major category oss usability success software chiefly gnu linux installation 
technically adept difficulties installing early versions gnu linux 
debian project debian initiated way create better distribution installation easier projects companies continued trend 
projects solve usability problem manner compatible traditional oss development 
effectively complex set manual operations automated creating black box user wish explore 
course open source project black box changeable skill investigate 
design usability really ought take place advance coding ways surprising oss development successful breaks established rules conventional software engineering 
run projects meant plan carefully advance capturing requirements clearly specifying done coding 
contrast oss appears involve coding early possible relying constant review refine improve emergent design nascent developer community needs runnable testable play raymond 
similarly scacchi study didn find examples formal requirements elicitation analysis specification activity kind suggested software engineering textbooks 
notes skipping design stage mozilla resulted design requirements occurring bug reports distribution early versions 
approach certain kinds applications may clear plan shared vision project coordinator main participants 
interface design works best involved coding occurs 
collective advance planning coding opportunity factor interface issues early design 
oss planning usually done project initiator larger group involved 
speculate oss project members may share strong sense vision intended functionality allows bypassing traditional software engineering advance planning weaker shared vision intended interface 
initiator happens possess significant interaction design skills important aspects usability get overlooked late 
issues raise say css frequently gets right 
want consider potential barriers existing oss practice addressed 
open source projects lack resources undertake high quality usability oss projects voluntary small budgets 
employing outside experts technical authors graphic designers possible 
noted earlier may currently barriers bring skills oss development team 
usability laboratories detailed large scale experiments just economically viable oss projects 
discussion desktop environment kde usability kde usability mailing list considered asking usability laboratories donations time run studies state art equipment 
usability activity open source projects associated involvement companies benson 
investing large proprietary software developers 
oss usability resources increased alternative approaches investigated see open source usability continue constrained resource limitations 
commercial software establishes state art oss play catch regardless commercial software provides usability overwhelming prominence user applications creates distinct inertia respect innovative interface design 
order compete adoption oss applications appear follow interface ideas brand leaders 
star office spreadsheet component calc tested microsoft excel eklund deliberately developed provide similar interface order transfer learning easier 
result follow interface design ideas excel regardless improved 
overriding reason conservatism case perceived need compete existing css users switch open source direct equivalents 
possibility current typical oss developers may extremely supportive functionality innovation just lack interest interface design innovation 
underlying code commercial system proprietary hidden requiring oss rival form reverse engineering develop 
activity inspire significant innovation extension 
contrast system interface visible pre existing solution dampen innovation just copy subject minor modifications due concerns copyright 
expect absence factors open source projects creative risk development radically new combinations functionality interface suffer short financial pressures 
oss greater tendency software bloat commercial software kinds commercial software criticised code consuming greater amounts memory numbers processor cycles successive software version releases 
commercial pressure increase functionality existing owners purchase latest upgrade 
naturally growth functionality seriously degrade usability increasing number options bewildering serving obscure tiny subset features user wishes employ 
similar pressures open source development due different causes 
interests incentives developers strong incentive add functionality incentive delete functionality especially person developed functionality question 
worse peer esteem crucial incentive participation deletion functionality interest benefiting user creates strong participation considered worse having code replaced code peers deemed superior 
project maintainer order keep volunteer participants happy keep functionality confusing receipt similar additional functionalities keep creating options user software configure application best fits needs 
way contributors possible gain clear credit directly contributing application 
suggested tendency barrel design compromise needs study 
process release early release lead acceptance certain clumsy features 
people invest time effort learning create workarounds cope 
new improved version released better interface temptation early adopters application refuse adapt new interface 
easier learn old learning old version sunk investment understandably may unwilling re learn modify workarounds 
temptation project maintainer keep multiple legacy interfaces coordinated latest version 
older users creates opportunities development keeps contributions older interfaces latest version adds complexity final product 
oss development inclined promote power simplicity software bloat widely agreed negative attribute 
decision add multiple alternative options system may seen positive compromise 
speculate freedom choice may considered desirable attribute design aesthetic oss developers 
result application configuration options allowing sophisticated tailoring expert users bewildering novice 
provision different desktop clocks gnome smith manifestation tendency growth preferences interfaces oss programs thomas 
tendency oss applications grow complexity reducing usability novices tendency remain invisible developers novices power sophisticated applications 
expert developers rarely encounter default settings multiplicity options give attention careful selection novices live defaults 
course commercial applications grow complexity factors moderate growth including cost developing extra features pressures growing awareness usability issues 
potential approaches improving oss usability factors aim account current relatively poor state usability open source products 
factors contribute better usability may currently outweighed negative factors current projects 
key positive factor users involved oss projects 
involvement elaborating requirements testing writing documentation reporting bugs requesting new features clearly accord advocacy hci experts shneiderman features common participatory design 
challenge enable encourage far greater participation users hci experts conform traditional stereotype 
describe areas see potential improving usability processes oss development 
commercial approaches method take successful oss project powerful functionality involve companies development better interface 
noticeable positive hci point view developments smith benson oss development parallel involvement large companies design experience considerably resources typical volunteer led open source project 
hci methods basically proprietary software leverage distributed community gives open source software perceived edge aspects development 
imply way achieve high level user usability wrap open source project commercially developed interface 
certainly approach apple os serves prime example lesser extent commercial releases gnu linux aimed slightly technologically sophisticated market 
netscape mozilla model mutually informed development offers model 
notes conflicts interest mutual misunderstandings commercial partner oss developers direction interface development aligns interests 
technological approaches approach dealing lack human hci expertise automate evaluation interfaces 
ivory hearst comprehensive review automated usability evaluation techniques note advantages automation including cost reduction increased consistency reduced need human evaluators 
example sherlock tool shneiderman automated checking visual textual consistency application simple methods concordance text application interface metrics widget density 
applications interfaces easily separated rest code mozilla candidates approaches 
interesting approach understanding user behaviour expectation agents hilbert redmiles allow developers easily explicitly place design expectations part application 
user unexpected triggers expectation agent program state information collected sent back developers 
extension instrumentation applications focussed user activity order user fills form values program variables 
extensive instrumentation closed source developers key element program improvement selby 
academic involvement noticeable described earlier emerged higher education athena eklund nichols 
cases classes students involved hci participated organised studies oss 
type activity effectively gift software developers main aim pedagogical 
desirability skills testing conceptual understanding authentic problems exercises obvious 
model proposed individual group class volunteer support oss model involving aspects combination usability analysis design user studies workplace studies design requirements controlled experiments formal analysis design sketches prototypes actual code suggestions 
order support kinds participation certain changes may needed oss support software noted 
involving users mozilla bug database bugzilla received bug reports time writing 
overwhelmingly bugs reports concern functionality usability contributed technically sophisticated users developers reports lots users unusual usual rule thumb users idea newsgroups time mozilla users file bug 
mean don really hear users effort reach 
generally speaking members open source community passive members 
example percent people apache passive users 
reason users non participation act contributing perceived costly compared benefits 
time effort register bugzilla pre requisite bug reporting understand web interface considerable 
language culture embodied tool barriers participation users 
contrast crash reporting tools mozilla microsoft windows xp simple require registration 
furthermore tools part application require user separately enter information web site 
suggest integrated user reported usability incidents strong candidate addressing usability issues oss projects 
users reporting occasions problems whilst application 
existing hci research hartson castillo castillo thompson shown small scale user reporting effective identifying usability problems 
reporting tools part application easy free technical vocabulary return objective program state information addition user comments hilbert redmiles 
combination objective subjective data necessary causal inferences users interactions remote usability techniques 
addition user initiated reports applications prompt users contribute behaviour ivory hearst :10.1.1.71.7271

note hard predict additional functionalities affect main usage system 
method involve users create packaged remote usability tests performed time 
results collated user computer sent back developers 


describe approach usability testing web sites separate browser window guide user sequence tasks main window 
scholtz describes similar method web sites main browser window effectively part application 
comparisons laboratory remote studies web sites indicate users task completion rates similar larger number remote participants compensates lack direct user observation jacques 
approaches allow users contribute usability activities learning technical vocabulary 
map oss approach allow participation contributor expertise leverage strengths community distributed networked environment 
techniques lose control laboratory usability studies gain authenticity firmly grounded user environment thomas kellogg jacques thomas 
promote user involvement possible easily track consequences report test result user contributed 
public nature bugzilla bug discussions achieves developers simpler version needed average users overwhelmed low level detail 
shneiderman suggests users financially rewarded contributions discounts software purchases 
open source context user expect information reports contributed fixing bug reflected new version software 
creating usability discussion infrastructure functional bugs tool bugzilla works supporting developers presents complex interfaces potential contributors 
wish tools hci people may need alternative lightweight interface abstracts away low level details 
particular systems built top code management systems easily overly focussed textual elements 
user reports usability test results received need structured analysed discussed acted 
usability discussion graphical nature better supported sketching annotation functionality noticeable mozilla bug discussions include textual representations ascii art proposed interface elements 
hartson castillo review various graphical approaches bug reporting including video screenshots supplement predominant text methods 
example application optionally include screenshot bug report resulting image annotated part online discussion 
may minor changes key lesson usability research details matter small amount extra effort deter users participating nielsen 
fragmenting usability analysis design envisage various new kinds lightweight usability participation contrasted substantial experimental analysis contributions outlined academic commercial involvement 
user volunteer description idiosyncratic experiences software 
person experience usability submit analysis 
furthermore contributor run user study sample size report 
surprising usability information extracted small number studies nielsen 
way oss development succeeds fragmenting development task manageable sub units usability testing fragmented involving people worldwide doing single user study combining results analysis 
coordinating parallel small studies require tailored software support opens new way undertaking usability maps distributed nature oss development 
remote usability hartson scholtz strongly suggests necessary distribution feasible needed coordinating interpreting results 
involving experts key point involving hci experts consideration incentives participation 
noted issues critical mass peers importance usability issues oss community design trade offs productively discussed 
relatively minor issue lowering costs participation caused problems articulating usability predominantly textual medium various solutions proposed 
speculate usability experts participation oss project problematic cases proposed designs improvements clash traditional functionality centric development 
resolved 
clear articulation underlying usability analysis kind design rationale may help 
absence explanations danger lone usability expert marginalized 
kind role usability expert advocate user 
involve analysing user contributions creating condensed version filtered expert theoretical understanding address concerns developers reports biased unrepresentative 
expert engages design debate behalf users attempting rectify problem traditional oss development scratching personal developers intended users 
creating incentives promote involvement users consequences evolving design usability experts interactions recorded easily traceable 
education way commercial software development organisations learn usability important issue consider significant impact sales product open source projects need convinced worth effort learning putting practice usability development techniques 
incentive greater sales usually relevant approaches making usability case need 
suggests developers prefer programs hackers find gaining motivating factor developing applications 
creating technological infrastructure easier usability experts users participate insufficient equivalent social infrastructure 
new entrants oss projects need feel welcomed valued lack technical skills traditional hackers 
clueless online arguments need curtailed eliminated moved designated technology specific areas 
merely tolerating greater diversification development team interesting explore consequences certain oss projects actively soliciting help groups 
various multidisciplinary endeavours including integrating psychologists commercial interface design computer supported cooperative projects care needs taken enabling participants able talk productively crabtree 
discussion want imply oss development completely ignored importance usability 
activities smith suggest open source community increasing awareness usability issues 
identified certain barriers usability explored addressed 
approaches outlined directly mirror problems identified earlier try automated evaluation shortage human expertise encourage various kinds user usability expert participation rebalance development community favour average users 
traditional oss development scratching personal usability aware concerned 
deeper investigation issues outlined take various forms 
great advantages oss development process large extent visible recorded 
study archives projects particularly strong interface design component gnome kde mozilla enable verification claims hypotheses uncovering richer understanding nature current usability discussions development 
example questions include hci experts successfully participate oss projects certain types usability issues disproportionately discussions development effort distinguishes oss projects especially innovative functionality interface designs 
approaches outlined previous section need investigation experimentation see feasibly oss projects disrupting factors traditional functionality centric oss development effective 
approaches necessarily restricted oss applied proprietary software 
ideas derived discount usability engineering participatory design originated developing better proprietary software 
may appropriate open source development map strengths volunteer developer community open discussion 
hci research concentrated pre release activities inform design relatively little post release techniques hartson castillo 
noteworthy participatory design field right usage usually quickly passed hci textbooks 
oss development case need merely play catch greater user focus commercial world potentially innovate exploring involve users subsequent redesign 
calls literature shneiderman lieberman fry fischer users actively involved software development standard user centred design activities usability testing prototype evaluation fieldwork observation 
noticeable comments ignore involvement happening oss projects 
raymond comments debugging parallelizable add usability reporting analysis testing 
certain aspects usability design appear easily 
believe issues focus research development understanding operated successful projects designing testing technological organisational mechanisms enhance parallelisation 
particular seek examine issues identified historical nature flow particular ancestry open source development necessarily connected oss development model 
improvements usability open source software necessarily mean software displace proprietary software desktop factors involved inertia support legislation legacy systems improved usability necessary condition spread 
believe detailed discussion issues literature 
lieberman fry foresee interacting buggy software cooperative problem solving activity user system developer 
open source developers true expanding situation potentially include users system mark significant change software development practices 
techniques hci easily cheaply adopted open source developers 
additionally approaches provide particularly fit distributed networked community users developers 
open source projects provide simple framework users contribute non technical information software developers leverage promote participatory users 
raymond proposed bugs shallow 
seeing usability bugs traditional open source community may comprise wrong kind 
may encouraging greater involvement usability experts users case user experience reports usability issues shallow 
engaging typical users development process oss projects create networked development community usability done functionality reliability 
authors david nichols lecturer department computer science university waikato hamilton new zealand 
mail dmn cs waikato ac nz direct comments dmn cs waikato ac nz michael twidale associate professor graduate school library information science university illinois urbana champaign 
mail twidale uiuc edu people valuable discussions comments topic damon chaplin dave ian murdock havoc pennington walt scacchi matthew thomas stuart yeates writing group uiuc hci group department computer science university waikato people commented slashdot 
notes 
raymond steele 

feller fitzgerald 

feller fitzgerald 

feller fitzgerald 

feller fitzgerald 

nielsen 

feller fitzgerald raymond 

bugzilla comment bugzilla mozilla org show bug cgi id 

shneiderman 
athena 
usability testing athena user interface mit information systems web mit edu usability aui accessed november 
brian 
open source business strategy stone editors 
open sources voices open source revolution 
sebastopol calif reilly associates pp 
www com catalog book brian html accessed november 
benson adam elman seth colin robertson 
gnome human interface guidelines gnome usability project developer gnome org projects gup hig accessed october 

kde usability steps kde usability project usability kde org activity testing accessed november 
jos castillo rex hartson deborah hix 
remote usability evaluation users report critical incidents 
proceedings conference human factors computing chi summary 
new york acm press pp 

andy crabtree david nichols jon brien mark rouncefield michael twidale 
informed ethnography information system design journal american society information science volume number pp 

michael richard selby 
microsoft secrets world powerful software creates technology shapes markets manages people 
new york free press 
debian 
debian gnu linux www debian org accessed november 
susanne eklund michal feldman mary sinha 
improving usability open source software usability testing calc open source meets usability workshop conference human factors computer systems chi minneapolis www sims berkeley edu sinha opensource html accessed november 
joseph feller brian fitzgerald 
understanding open source software development 
london addison wesley 
joseph feller brian fitzgerald 
framework analysis open source software development paradigm orlikowski weill ang editors 
proceedings st annual international conference information systems brisbane queensland australia pp 

gerhard fischer 
seeding evolutionary growth reseeding constructing capturing evolving knowledge domain oriented design environments automated software engineering volume number pp 

nancy anna marie benson seth smith 
getting know open source development meets usability extended abstracts conference human factors computer systems chi 
new york acm press pp 

alexander ou 
working free 
motivations participating open source projects proceedings th annual hawaii international conference system sciences 
new york ieee computer society press pp 

rex hartson jos castillo 
remote evaluation post deployment usability improvement proceedings conference advanced visual interfaces avi 
new york acm press pp 

rex hartson jos castillo john kelso wayne neale 
remote evaluation network extension usability laboratory proceedings conference human factors computing systems chi 
new york acm press pp 

david hilbert david redmiles 
large scale collection usage data inform design hirose editor 
human computer interaction interact proceedings eighth ifip conference human computer interaction tokyo japan pp 

david hilbert david redmiles 
extracting usability information user interface events acm computing surveys volume number pp 

melody ivory marti hearst 
state art automated usability evaluation user interfaces acm computing surveys volume number pp 

richard jacques herman 
remote vs local usability evaluation web sites vanderdonckt blandford editors 
proceedings joint bcs conference human computer interaction ihm hci volume 
toulouse editions pp 

kde usability 
kde usability project usability kde org accessed november 
morten lars editors 
computers design context 
cambridge mass mit press 
josh lerner jean tirole 
simple economics open source journal industrial economics volume number pp 

henry lieberman christopher fry 
software 
communications acm volume number pp 

rohit ben shneiderman 
visual text consistency checking tools graphical user interfaces ieee transactions software engineering volume number pp 

stephen manes 
linux gets forbes june pp 

mozilla 
mozilla project www mozilla org accessed november 
yamamoto ye 
evolution patterns open source software systems communities proceedings workshop principles software evolution international conference software engineering 
new york acm press pp 

david nichols kirsten thomson stuart yeates 
usability open source software development kemp phillips haynes editors 
proceedings symposium computer human interaction 
north new zealand sigchi new zealand pp 

seth 
gnome hackers care usability gnome usability project developer gnome org projects gup articles care accessed november 
jacob nielsen 
usability engineering 
boston academic press 
donald norman stephen draper editors 
user centered system design new perspectives human computer interaction 
hillsdale lawrence erlbaum associates 
tim reilly 
lessons open source software development communications acm volume number pp 

eric raymond 
revenge hackers stone editors 
open sources voices open source revolution 
sebastopol calif reilly associates pp 
www com catalog book raymond html accessed november 
eric raymond 
cathedral bazaar monday volume number march firstmonday org issues issue raymond accessed november 
eric raymond guy steele 
new hacker dictionary 
cambridge mass mit press 
walt scacchi :10.1.1.117.5406
understanding requirements developing open source software systems iee proceedings software volume number pp 

jean scholtz 
adaptation traditional usability testing methods remote testing proceedings th annual hawaii international conference system sciences 
new york ieee computer society press 
jean scholtz 
case study developing remote rapid automated usability testing methodology line books proceedings nd annual hawaii international conference system sciences 
new york ieee computer society press 
ben shneiderman 
leonardo laptop human needs new computing technologies 
cambridge mass mit press 
michael alan benson 
overlooking usability testing methods 
comparison lab beta forum tests behaviour information technology volume numbers pp 

smith dave andrea nancy nils pedersen benson 
gnome usability study report sun gnome human computer interaction hci sun microsystems developer gnome org projects gup ut report report main html accessed november 
bruce sterling 
contrarian position open source reilly open source convention san diego hotel marina july san diego calif www com pub network sterling html accessed november 
john thomas wendy kellogg 
minimizing ecological gaps interface design ieee software volume number pp 

matthew thomas 
free software usability tends mpt com discuss accessed november 
peter thomas robert 
new usability acm transactions computer human interaction volume number pp 

jennifer thompson robert 
web collection critical incidents remote usability evaluation proceedings th congress international ergonomics association th annual meeting human factors ergonomics society iea santa monica human factors ergonomics society volume pp 

peter 
shall dance 
lessons learned netscape open source ui development open source meets usability workshop conference human factors computer systems chi minneapolis www chi peter txt accessed november 
tom stan fleischman michelle carrie margaret 
empirical comparison lab remote usability testing web sites usability professionals association conference july orlando fla hal varian 
economic incentives software design computational economics volume numbers pp 

marco carla freitas jos de lima 
remote usability testing case study scott editors 
proceedings conference computer human interaction special interest group ergonomics society australia new south wales australia pp 

editorial history received december accepted december 
copyright monday copyright david nichols copyright michael twidale usability open source software david nichols michael twidale monday volume number january url firstmonday org issues issue nichols index html 
