simple fault tolerant distributed hash table moni naor udi wieder introduce distributed hash table dht logarithmic degree logarithmic dilation 
show lookup algorithms 
message complexity log robust random deletion nodes 
second parallel time log message complexity log robust spam induced random subset nodes 
construction competitive parameters compared dht 
main merits simplicity flexibility fresh ideas introduced design 
easy modify add sophisticated protocols dynamic caching erasure correcting codes 
propose simple easy implement distributed hash table 
construction offers logarithmic linkage load dilation 
operate highly dynamic environment robust random deletions random spam generating nodes sense high probability nodes locate data items 
commonly methods modelling occurrence faults 
random fault model node faulty probability independently nodes 
worst case model adversary knows state system chooses faulty subset nodes 
models describe behavior faulty nodes 
fail model faulty node deleted system 
spam generating model faulty node may produce arbitrary false versions data item requested 
third model byzantine model weizmann institute science 
rehovot israel 
wisdom weizmann ac il restrictions behavior faulty nodes 
random fault model want nodes access data items necessary degree log data item stored log nodes high probability nodes disconnected system 
related peer peer systems known robust random deletions :10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673
stoica prove chord system resilient random faults fail model :10.1.1.105.3673
chord spam resistant significant change design 
fiat propose content addressable network robust deletion spam worst case scenario adversary choose nodes fail 
clearly model small fraction non failed nodes denied accessing data items 
solution handles difficult model disadvantages 
clear system preserve qualities nodes join leave dynamically 
secondly message complexity large log linkage needed log 
importantly construction complicated 
complex constructions algorithms increase likelihood errors implementation offer easier opportunities adversary diverge designated protocol 
fiat solve problem describe spam resistant lookup 
necessary item replicated log times log involved storage 
upper shows edges point lower shows mapping segment smaller ones 
overlapping distance halving dht describe construction discretization continuous graph denoted vertex set denoted defined real interval 
edge set defined functions def def abbreviates left abbreviates right 
note degree point degree 
may enhance notation write meaning image interval 
properties set useful notations 
points define ja bj 
denote sequence binary digits denote prefix length point define manner words point reached walk starts proceeds represents represents proof lemma omitted 
lemma 
point 
binary sequence 
coefficient binary representation zero 
similarly coefficient 
meaning lemma binary representation represents direction single degree edge entering walking backwards single degree edge direction th edge left right determined th bit binary representation claim justifies name distance halving claim distance halving property 
binary strings holds 
claim 
binary representation holds proof 
walk starts follows binary representation prefix length reaches lemma know walk exists 
lemma holds discrete graph show construct discrete graph node graph associated segment def 
segments properties property set points evenly distributed specifically desire interval length log contains log points point fixed change long network 
property ii point chosen length segment log 
important notice may overlap 
point updated nodes join leave system 
precise manner chosen updated described section 
edge set defined follows 
pair vertices edge connected overlap 
edges anti parallel 
convenient thing undirected graph 
point said covered 
observe 
point covered log nodes means data item stored log processors 

node degree log 
join leave goal designing join leave operations sure properties ii remain valid 
node wishes join system 
chooses random 
calculates estimation log 
sets mod 
updates appropriate neighbors definition construction 

neighbors may decide update estimation log change value 
node wishes leave system detected neighbors update routing tables check estimation log change 
change value accordingly 
lemma straight forward lemma 
points chosen randomly uniformly independently interval probability interval length log contain log points 
node chooses value uniformly random property holds 
observe node estimation log accurate multiplicative factor property ii holds 
procedure calculating simple 
assume predecessor proven may chosen hashing case important hash function distribute values evenly 
high probability log log log log log conclude node easily estimate log multiplicative factor :10.1.1.17.4065
call estimation log multiplicative estimation log implies polynomial estimation additional idea 
interval exactly logn different values 
lemma 
high probability number estimates logn multiplicative factor 
proof follows directly lemma 
node system updates value holds accurate estimation log times 
property ii holds times 
mapping data items nodes mapping data items nodes done manner constructions distributed hash tables chord viceroy :10.1.1.17.4065:10.1.1.140.3129:10.1.1.105.3673
data items mapped interval hash function 
node hold data items mapped points 
consistent hashing suggested chord :10.1.1.105.3673
note nodes holding data item connected form clique 
node storing data item located nodes storing data item quickly located 
means accessing different copies data item parallel simple efficient 
suggests storing data erasure correcting code instance digital suggested byers avoid need replication :10.1.1.21.9363
data stored small subset nodes suffice reconstruct date item 
weatherspoon kubiatowicz suggest erasure correcting code may improve significantly bandwidth storage system :10.1.1.121.9064
term high probability means probability lookup operation lookup procedure emulates walk continuous graph assume processor wishes locate data item hash function data item stored processor covers point binary representation claim states interval 
conclude log log log holds 
minimum integer 
call path canonical path 
gives rise natural lookup algorithm 
canonical path exists definition edge covered covered edge exists means canonical path emulated simple lookup point covered log nodes 
means node wishes pass message node covering point log different neighbors cover simple lookup chooses nodes random sends message 
theorem 
simple lookup properties 
length lookup path log 
message complexity log 

chosen random set nodes chosen random probability processor participates lookup log proof sketch proof statement immediate 
show correctness statement prove fix processor probability processor participates th step routing log 
summing yields result 
statement proved induction theorem 
node deleted independently fixed probability sufficiently low depends entirely parameters chosen constructing high probability surviving node locate data item 
proof 
prove claim claim 
small point covered node 
proof 
assume convenience 
point interval covered set log nodes 
call set pr nodes deleted log sufficiently small probability smaller applying union bound yields probability greater point covered node 
important notice arbitrary value possible adjust values point covered sufficiently nodes claim follows 
edge exists edge nodes cover canonical path emulated simple lookup succeeds 
stress deletions lookup takes log time log messages 
furthermore average load induced node increase significantly 
spam resistant lookup assume failed node may generate arbitrarily false data items 
wish show node find correct data items just simple lookup spam resistant lookup emulates canonical path main difference node wishes pass message node covering point pass message log nodes covering time step node receives log messages node covering previous point path 
node sends message sent majority nodes previous step 
theorem 
spam resistant lookup properties 
high probability surviving nodes obtain correct data items 

lookup takes parallel time log message sent nodes covering canonical path 

lookup requires log messages total 
proof 
statements follow directly definitions spam resistant lookup 
statement follows claim 
node fails probability sufficiently small depends entirely parameters chosen constructing holds high probability point covered majority non failed processors 
proof claim similar claim 
proof theorem straight forward 
follows induction length length path 
point canonical covered majority nodes node path receive majority authentic message 
follows high probability nodes find true data items 
easy proofs theorems demonstrate advantage designing algorithms migrating proving robustness straight forward argument 
remarks simplicity construction implies easy modify add protocols 
show simple protocol performs dynamic caching popular data items relieving hot spots system 
addition mentioned earlier implementation erasure correcting codes simple worthy 
main challenge ahead prove robustness worst case scenario adversary chooses nodes fail 
believe slight variation construction route messages successfully worst case model 
known constructions including handle case adversary controls nodes prior insertion 
means adversary may control actual construction network cause faults capability 
robustness adversary require cryptographic means 
john byers michael luby michael mitzenmacher :10.1.1.21.9363
digital fountain approach reliable distribution bulk data 
sigcomm pages 
fiat 
censorship resistant peer peer content addressable networks 
symposium discrete algorithms soda 
david karger eric lehman frank thomson leighton rina panigrahy matthew levine daniel lewin 
consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
acm symposium theory computing pages may 
malkhi naor :10.1.1.17.4065
viceroy scalable dynamic emulation butterfly 
podc 
ratnasamy francis handley karp shenker :10.1.1.140.3129
scalable content addressable network 
proc acm sigcomm pages san diego ca 
jared amos fiat steve gribble anna karlin stefan saroiu 
dynamically fault tolerant content addressable networks 
international workshop peer topeer systems mit faculty club cambridge ma usa 
stoica morris karger kaashoek balakrishnan :10.1.1.105.3673
chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm conference pages 
hakim weatherspoon john kubiatowicz :10.1.1.121.9064
erasure coding vs replication quantitative comparison 
international workshop peer peer systems mit faculty club cambridge ma usa 
zhao kubiatowicz :10.1.1.111.1818
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd university california berkeley computer science department 

