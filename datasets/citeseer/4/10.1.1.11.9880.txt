approximate range selection queries peer peer systems gupta agrawal amr el abbadi architecture data sharing peer peer system data shared form database relations 
general peer peer systems try locate data objects simple user queries 
peer peer users generally tend submit broad queries order find data interest develop data sharing architecture computing approximate answers complex queries finding data ranges similar user query 
represents step solving general range lookup problem systems exact lookup operations 
years significant interest peer peer data sharing systems 
research concentrated sharing file objects music video files 
general users wish participate peer peer system register machines part peer peer system 
user machine peer node system 
users peer submit query string name file looking 
system finds peer copy requested object directs querying peer peer provide requested object 
design challenges arise context building systems 
application level problem locate peer stores requested object 
system level problem permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings cidr conference university california santa barbara ca usa agrawal amr cs ucsb edu route query requesting peer peer object stored 
critical issue locate peer provide requested object 
solution problem building centralized index napster 
napster model due centralized design able handle design challenges easily 
particular peer registered system knows identity centralized index node 
index node directory objects currently available 
centralized index scale central point failure 
completely distributed approach peer build index files queries flooded peer peer network gnutella 
approach peer needs maintain information data object lookups information neighboring peers request routing 
request peer flooded neighboring peers 
approach advantage peer nodes maintain local information system central point failure 
flooding network user query results significant network system overhead approach scalable 
approach falls napster gnutella building superpeer network kazaa smaller peers connect superpeer builds index objects shared set peers 
addition superpeer keeps information neighboring superpeers system 
peer submit query superpeer superpeer lookup index see peer territory provide object 
forwards query neighboring superpeers network 
literature systems classifies approaches unstructured systems 
interesting approach indexing available data objects system build distributed hash table dht :10.1.1.140.3129:10.1.1.105.3673
chord hashes objects ring formed peers system :10.1.1.105.3673
peers maintain routing information peers logarithmically increasing distance ring 
querying peer hashes name requested object uses routing information forward query appropriate peer 
hashes objects dimensional coordinate space parts space owned peers 
peers maintain routing information neighbors coordinate space 
peer asks object object name hashed peer holding desired hash key located advantage structure hash space 
query forwarded peer neighbors peer send requested object querying peer 
advantages schemes completely distributed highly scalable 
flood network direct request peer holds relevant information 
approaches classified highly structured systems 
architectures confined support file sharing applications internet 
basic functionality supported architectures provide exact match query facility 
implementations significantly different systems support hash table interface put key value get key 
general systems highly scalable lookups resolved logn dn small overlay routing hops overlay network peers 
fundamental limitation systems support exact match lookups 
systems provide scalable storage efficient retrieval exact match queries database researchers begun ponder systems designed provide complex query facilities top dht systems 
particular gribble position titled peer peer databases vice versa outline complexities need overcome exploit systems database query processing 
similarly harren explore issue supporting complex queries dht networks 
harren report implementation database join operation performing hash join relations dht 
leave question developing range predicate selection current dhts open problem 
reported similar spirit harren interested supporting database query processing networks 
specifically address problem executing selection operation database relation information cached different peers system 
main motivation selection operation typically involved leaves query plan fundamental operation retrieve data database 
assuming data partitions relation extensively replicated peers due prior queries retrieve desired data partition system fetching base relation data source 
motivation approach users ask broad queries interested results expect perfect answers 
architecture peerto peer system shares data form relational objects 
simplest form peers cache horizontal partitions various relations 
peer submit query form sql statement 
system tries locate peers relevant partitions submitted query 
scheme locality sensitive hashing locate partitions relations relevant query 
main contributions architecture relational data sharing peer peer system hashing mechanism locate data partitions relevant query 
constitutes initial step enable general query processing data sharing architectures 
data sharing systems consider system consisting peers connected connections tcp ip network 
peers form data sharing system shared data form database tuples relations 
assume global schema known peers system 
sources data part peer peer system peers system known peers 
access base relations may general undesirable due load connectivity reasons 
addition sources peers allowed cache horizontal partitions relations 
peers allowed submit sql queries system 
pose restriction queries selects relation attribute time 
peer converts query plan selects moved leaves possible 
known algebraic optimization technique 
plan peer request locate relevant relation partitions system help answer query 
located peers caching relevant partitions send data requesting peer compute remaining query locally available data 
illustrate behavior system consider example 
assume relations exist global schema patient patient id name age diagnosis patient id diagnosis physician id prescription id physician physician id name age specialization prescription prescription id date prescription comments 
suppose peer wishes find prescriptions provided patients diagnosed age jan dec 
formally sql query written select prescription prescription patient diagnosis prescription age diagnosis patient patient id diagnosis patient id date diagnosis prescription id prescription prescription id date age diagnosis prescription patient diagnosis possible query plan system overview possible plan query shown 
peer ask system locate partitions relations patient diagnosis prescription match selection conditions 
see 
node labeled peer query initiated 
produces plan hashes desired partitions locate peers provide relevant data patient tuples age diagnosis tuples prescriptions date 
peer obtained data peers desired partitions perform join operations project desired attribute 
general problem answering sql query depends critically efficient retrieval selected partitions desired relations system 
focus problem extend approach general queries 
locating relevant partitions problem locating relevant data partition relation formulated follows relation selection range start attribute relation find peer caches partition relation help compute desired selection 
motivation start considering simpler problem distributing retrieving specific tuples relation requested key 
distributed hash tables dht chord purpose :10.1.1.105.3673
particular consider query form select patient age 
case consider key age value 
time query specific parameter setting age posed query routed source retrieve set tuples patient age 
dht store partition patient peer system 
subsequent queries age immediately map peer need overload source site 
approach easily extended support exact matches ranges selection queries predicates 
consider query select patient age 
case specific range key hash qualifying tuples 
query posed exactly age range cached partition peer retrieved going source relation 
approach simple supports lookup exact matches 
requested query partition start exist may partition start easily satisfied query 
particular query asking patients ages hash peer benefit stored partition query specifies range attribute relation 
refer resulting set tuples defined range data partition 
new query similar previous 
fact entire answer set contained cached partition 
centralized system data partitions location problem finding data partition contains query selection range solved building index stored data partition ranges 
system data partitions distributed various peers wide area network problem complicated addition finding right data partition need find partition unfortunately problem discovering partitions system contain selection range extremely hard solve exactly 
general problem determining containment query set views npcomplete 
furthermore users ask broad queries order find data interest expect exact answers queries 
approach problem trying develop techniques provide approximate answers 
approach dhts similar ranges hashed peer high probability potentially benefit previously cached partitions 
solution locality sensitive hashing introduced motwani indyk nearest neighbor problem 
existence hash functions shown linial 
take slightly different definition locality sensitive hashing 
adapted definitions 
locality sensitive hashing sets values domain family hash functions said locality preserving sim sim measure similarity sets represent range sets query matched answer respectively similarity measure defined containment sim charikar shows similarity measure sim admits locality sensitive hash family corresponding distance function sim satisfies triangle inequality turns similarity measure containment sets defined satisfy triangle inequality 
locality sensitive hash functions exist containment similarity measure 
hand jaccard set similarity measure key integer integer key iteration integer integer key iteration integer integer iteration iterations permutation operation sim sim satisfy triangle inequality exists locality sensitive hash function family similarity measure min wise independent permutations 
min wise independent permutations hashing scheme min wise independent permutations follows 
domain consider random permutation assume elements totally ordered 
range set hash function defined min property satisfied hash function family jaccard set similarity measure 
integer permutation operation performed described 
assume dealing sets bit integers 
take bit key exactly random bits set 
integer set move bits corresponding position key upper half lower half order 
operation illustrated bit number key 
choose bit key exactly random bits set 
permute bits bit integer key bit halves 
illustrated 
pair bits permuted see 
keys permutation function representable bit integers 
permutation operation produces integer final output 
hash function applies permutation operation integer range takes minimum resulting integers 
system architecture selection operation relation wish locate peers cached relation partitions nearby match selection range query 
flooding network query going various distributed indices superpeer network want hashing locate peers relevant data partitions 
distributed hash table needs maintained peers system 
nearby matches data partitions located locality sensitive hashing hash data partitions 
call integer value produced hash function identifier 
appropriate family locality sensitive hash functions map data partitions bit identifier space 
identifiers identify buckets distributed hash table 
property locality sensitive hashing similar data partitions hash nearby identifiers 
problem store distributed hash table peers system 
general approach locating relevant partitions selection query summarized follows 
query range hashed identifier space appropriate locality sensitive hash lsh family 

peers system mapped identifier space randomly distributed hash function sha 

chord map data partition identifiers peer node identifiers provide lookup routing facility :10.1.1.105.3673
illustrates distributed hash table created 
identifier space bit space organized ring 
peer nodes hashed hash function sha ip address identifier space 
range specifying data partition hashed identifier space locality sensitive hashing 
properties locality sensitive hashing lsh similar ranges hashed identifier high probability 
domain data partitions larger number peer nodes system chord consistently map multiple data partitions peer node :10.1.1.105.3673
mapping chord circular structure 
data partition identifier mapped peer node identifier greater equal circular identifier space 
peer responsible hash buckets corresponding identifiers identifier predecessor node excluding 
locate identifier peer chord maintains information peers identifier ring logarithmically increasing distances 
information peer holding requested identifier located logn lookups number peers system 
peer located bucket corresponding requested identifier searched similar range 
lsh structure distributed hash table discuss detail data partitions corresponding range selections hashed identifier space 
selection query range consider range set values identifier computed range age set values 

min wise independent permutation hash function derive identifier set 
properties hash functions know identifier maps similar identifier corresponds range partition probability sim sim jaccard set similarity measure 
probabilistic approach hash similar ranges identifier high probability low probability collision dissimilar ranges 
done approach suggested 
consider group 
hk hash functions selected uniformly random family hash functions 
probability sets hash value hash functions lets say groups 
gl sha hash functions 
probability agree group gi probability agree groups probability agree groups groups randomly selected hash functions obtain hash values sets tuples identified selection range store peers responsible obtained hash values 
depending values parameters high probability peers data partition contains data relevant desired range 
denote range selection relation partition 
rough sketch procedure followed 
querying peer group hash functions identifier identifier done done identifier send request peer holding identifier desired partition 
done get replies peers 
select best match replies got 
match exact store computed partition peers holding computed identifiers 
procedure identifiers computed range set peers holding identifiers contacted 
different peers holding identifiers 
contacted peer checks list partitions associated identifier finds best match query partition list sends best match requesting peer 
requesting peer choose best match replies gets contact peer partition data partition 
experimental results section analyze performance proposed range selection systems terms quality matched partitions obtained terms scalability system 
performance hash functions shown section groups hash functions find matching partitions query range probability similarity queried range matched partition measured jaccard set similarity measure 
experiments chose values parameters respectively values function reasonably estimate step function step 
min wise independent permutations section computationally expensive 
explored family linear permutations ax mod 
addition linear permutations tried family approximate min wise independent permutations just iteration 
min wise independent permutations 
approximate family representable single bit integer key computationally expensive 
avg 
time hashing range msec linear approx 
min wise independent min wise independent size query range execution times hash function families 
shows execution times milliseconds mhz pentium hash functions query range sets sizes varying 
average linear permutations times faster min wise independent permutations 
approximate min wise independent permutations times faster min wise independent permutations 
set integer ranges integers query selection ranges 
range sets generated uniformly random repetitions 
start empty system cache query range stored 
measured similarity matched data partition query range similarity measure jaccard set similarity measure 
figures presents results hash function families described warmup period queries removed 
axis graphs represents similarity range query partition range matching partition 
similarity data partitions tuples common percentage queries percentage queries similarity matched partition range min wise independent permutations similarity matched partition range performance linear permutations identical 
axis percentage total queried partitions match similarity measure 
see queried partitions matching partition similarity 
queried ranges contain repetitions identical matches low 
see queries find matches 
min wise independent permutations hash functions try imitate ideal step function step similarity 
quite queries find matches may exist similar 
furthermore query ranges uniformly distributed new query ranges stored similar data partitions 
shows quality matches obtained approximate min wise independent permutations 
approximate min wise independent permutations find matches queries 
min wise independent permutations try find matches queries performance hash functions percentage queries similarity matched partition range approximate min wise independent permutations matches may 
faster compute min wise independent permutations need perform iteration complete permutation operation described section 
linear permutations easily representable efficiently computable 
graph shows quality matches obtained 
find identical match exists 
system evolves probability identical queries asked earlier goes higher linear permutations tend produce better results 
recall previous section measured performance hash function families terms jaccard similarity measure user perspective interested useful match answering query 
measure usefulness matched data partition recall measure desired answer matched partition 
shows recall matched data partitions hash function families 
xaxis graph portion desired answer obtained matched partition 
axis percentage queries answered upto portion 
min wise independent permutations able answer queries completely 
approximate min wise independent permutations answer queries completely 
linear permutations answer queries completely 
approximate min wise independent permutations linear permutations lead better containment results min wise independent permutations strict finding data partitions similar 
match broader partitions percentage queries part query answered min wise independent approx 
min wise independent linear recall hash function families 
contain desired answer 
looser matching property linear permutations results poorer recall quality rest queries compared hash families 
general min wise independent permutations approximate min wise independent permutations similar recall 
answer queries queries get half answers 
saw earlier section containment similarity measure sim define locality sensitive hash function families satisfy triangle inequality 
hashed selection range identifier hash family defined jaccard set similarity measure containment similarity find best match hash bucket 
shows recall containment matching conjunction approximate min wise independent permutations 
schemes approximate min wise independent permutations hashing selection ranges 
containment similarity measure percentage queries completely answered improves approximately queries approximately queries recall better realistic similarity measure 
remaining mismatch principle hashing actual measure shows improved performance jaccard similarity measure 
users ask broad queries expect exact answers system user part answer able find fast know selection ranges answer corresponds 
user satisfied answer choice go source rest answer 
explored option submitting padded query 
going source system evaluates user query selection ranges expanded 
shows re percentage queries part query answered containment similarity jaccard similarity recall containment similarity matching call selection ranges expanded edges approximate min wise independent permutations hash functions 
query padding little queries answered completely 
represents doubling queries completely answered compared padding jaccard similarity measure compare 
padding cost 
approximately queries benefit show improved performance padding rest queries extended range results lesser recall padding 
shows tradeoff getting complete containment queries versus total recall queries 
padding beneficial padding 
explore dynamically adjusting padding better performance 
percentage queries part query answered padding containment padding containment recall query padding system scalability analyze scalability system simulation distributed system 
purpose simulation experiments modified simulator chord manner :10.1.1.105.3673
find operations simulations take query range 
partitions node path length hops st th percentiles 
peer nodes load distribution system stores partitions 

peer nodes 
partitions node load balancing system 
st th percentiles path length function 
nodes set document id hash range set bit identifiers approximate min wise independent permutations 
peer nodes holding identifiers discovered chord lookup algorithm :10.1.1.105.3673
peers look corresponding buckets identifiers hold find best match query range set jaccard set similarity measure 
match exact new query range stored peers 
explicit insert operations simulation system starts partitions stored 
analyzing scalability system number peer nodes grow consider system stores partitions 
unique partitions stored different identifiers computed different sets hash functions 
number peers system vary 
path lengths lookup operations probability distribution function st th percentiles 
partitions stored load distribution node system 
path length hops prob 
distribution function path length node network shows mean st th percentiles number partitions stored node system number peer nodes system increases 
load distribution gets linearly better increase number peers 
shows mean st th percentiles number partitions stored node node system number total partitions stored system varies 
mean values load distribution grow increasing number partitions th percentiles show sublinear increase 
path length measure number hops overlay network required route query destination peer 
ran simulations varying number peers system storing partitions 
shows mean st th percentiles path lengths systems number peers varying 
mean path lengths order log number peers system 
shows probability distribution function path lengths node network 
lookups high probability path length 
general results consistent results exact match queries :10.1.1.105.3673
locality sensitive hashing hashes similar ranges nearby identifiers 
ring structure formed peers chord identifier buckets falling peers get stored successor peer :10.1.1.105.3673
potentially build index partitions get stored various buckets peer 
need find similar match query selection range search index locating peer holds identifier selection range just looking ranges bucket identifier 
interestingly approach recall best just peer system partitions stored peer lookup searching index peer 
number peers system grows partitions get distributed peers search looking smaller index 
worst case peer hold buckets identifier case look partitions bucket recall results section 
architecture peer peer data sharing system shares data form database relations 
peers system cache horizontal partitions relations queries executing system 
novel approach locating relevant data partitions peer peer system locality sensitive hashing 
benefit approach finds exact partitions system exist help locate partitions nearly match ones required query 
address problem locating horizontal partitions obtained multiattribute selections 
investigate caching general query results system addition horizontal partitions relations 
furthermore problem planning query peer peer system available statistics system worth exploring 
acknowledgments chord research group mit providing chord simulator conducting experiments 
gupta sup ported ibm cooperative fellowship 
research supported nsf iis eia eia iis 
andrei broder moses charikar alan frieze michael mitzenmacher 
min wise independent permutations extended 
proceedings thirtieth annual acm symposium theory computing pages 
acm press 
moses charikar 
similarity estimation techniques rounding algorithms 
proceedings th acm symposium theory computing pages 
acm press 
fips 
secure hash standard 
department commerce nist national technical information service springfield va april 
gnutella 
gnutella wego com 
steven gribble alon halevy zachary ives maya dan suciu 
peer peer databases vice versa 
proceedings fourth international workshop web databases webdb santa barbara california usa may 
matthew harren joseph hellerstein ryan huebsch boon loo scott shenker ion stoica 
complex queries dht peer topeer networks 
proceedings international workshop peer peer systems 
piotr indyk rajeev motwani 
approximate nearest neighbors removing curse dimensionality 
proceedings thirtieth annual acm symposium theory computing pages 
acm press 
kazaa 
www kazaa com 
alon levy alberto mendelzon yehoshua sagiv divesh srivastava 
answering queries views extended 
proceedings fourteenth acm sigact sigmod sigart symposium principles database systems pages 
acm press 
nathan linial ori 
non expansive hashing 
proceedings eighth annual acm symposium theory computing pages 
acm press 
qin lv sylvia ratnasamy scott shenker 
heterogeneity gnutella scalable 
proceedings international workshop peer peer systems 
napster 
www napster com 
sylvia ratnasamy paul francis mark handley richard karp scott shenker 
scalable content addressable network 
proceedings conference applications technologies architectures protocols computer communications pages 
acm press 
ion stoica robert morris david karger frans kaashoek hari balakrishnan :10.1.1.105.3673
chord scalable peer peer lookup service internet applications 
proceedings conference applications technologies architectures protocols computer communications pages 
acm press 
ullman 
principles database knowledge base systems volume 
computer science press 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report tech 
rep ucb csd university california berkeley 
