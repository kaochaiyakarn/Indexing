trie data structures sequence assembly extended ting chen steven skiena department computer science state university new york stony brook ny cs sunysb edu january trie data structures strings proven wide variety text searching biological applications 
distinct string data structures developed including suffix trees suffix arrays motivated tradeoffs construction time space search time virtual memory performance complexity implementation 
consider different applications string data structures fragment assembly dna sequences unification factoring optimizing logic programs 
biological application experimental results performance different data structures fast fragment assembly 
product dr william group national laboratory build assembler sequencing genome bacterium causes disease 
logic programming application demonstrate surprisingly complexity optimizing unification factoring datalog programs considerably higher general prolog programs 
product xsb logic programming group stony brook 
applications quite different common theme runs 
require space efficient data structures strings 
sequence assembly requires fast substring search large sets strings 
unification factoring requires minimum size tries capable representing fixed set strings 
unification factoring suggests new direction reducing size trie suffix tree data structures string applications 
specific results fragment assembly include ffl fast sequence assembler exact match overlap detection proves capable assembling clones project minutes sparc 
comparison group previous assembler program takes approximately fifteen hours data 
assembler proves fast eliminate need incremental fragment assembly original problem began supported onr award yip nsf ccr 

times certainly comparable state art assemblers assembler assembled fragments bacterium hours 
ffl careful experimental study impact exact match length accuracy overlap detection demonstrates wide range sequencing error rates including realized group exact match suffices accurate assembly 
study compares overlap unprocessed fragments generated program overlap graph induced final assembly clean data biologists 
exact matching program misses edges kb data compared exhaustive pairwise smith waterman computation times long 
ffl experimental comparison data structures fast overlap detection suffix trees suffix arrays augmented suffix arrays shows augmented suffix arrays clear winner data structures construction traversal time space 
unification logic program performed constructing trie arguments rule heads performing depth search trie specific goal 
time complexity operation function number edges trie 
open goal contains distinct variables arguments matches 
unifying open goal set clause heads symbol clause heads bound variable 
doing depth traversal minimum edge trie minimize number operations performed unifying goal clause heads 
set rule heads arguments trie range size delta depending length common prefixes rule heads 
rule heads compilation time exploit freedom reorder character positions trie order reduce size 
root node representing argument trie choose represent third argument 
consider example consisting strings aaa baa cbb dbb 
trie constructed original string position order uses total edges shown 
permuting character order obtain trie edges 
note different permutations may various paths trie assume internal node level contains specification probe position 
problem unification factoring freedom build minimize size trie set rule heads 
context unification suggests new idea reducing space needed trie data structures line string search applications reason compare characters left order entire string sits random access memory 
root leaf path trie defines full string permutation characters 
encoding unambiguous internal node contains index character position probed 
note potential enormous space reduction tries highly structured strings 
example consider trie binary strings characters long 
lg characters ith string represent written binary gamma lg characters character 
building conventional search trie strings gamma lg gamma edges quadratic space 
permuting character different tries set strings 
order probe position lg yields linear size trie gamma lg gamma edges 
investigate approximation algorithms minimizing size permuted order tries 
unfortunately main result negative hard approximate savings construction polynomial factor 
believe heuristics constructing data structures interesting behavior practice 
organized follow 
section provides problem fragment assembly dna sequencing 
section presents ideas assembler experimental results performance 
section provides unification factoring logic programming section presents applicable results 
overlap detection fragment assembly fragment assembly problem characterized finding shortest common super string set fragments certain assumed error rate ffl 
common approach problem divide assembly stages overlap detection layout generation consensus sequence construction :10.1.1.52.6330
overlap detection fragment compared fragments similar substrings define possible overlaps 
may exist conflicts overlap relations resolved layout stage determines orientation fragment belongs upper lower strand molecule selects subset overlaps reflect relations physical maps genome determine ordering 
consensus stage builds multiple alignment regions fragments overlap generates single consensus dna sequence 
result overlap detection generate overlap graph vertices correspond fragments edges pairs fragments overlap 
edge weights measuring confidence detected overlaps 
overlap detection time consuming part typical assembly programs 
fragments overlap candidates consider 
smith waterman dynamic programming algorithm takes time detect length fragments truly overlap 
small size sequencing projects say cosmid level program complexity durable hours 
genome level sequencing projects faster algorithms needed 
problem fragment assembly received considerable attention see detailed survey :10.1.1.52.6330
myers shown assumption maximum error rate ffl edit distance fragments solved time aligning suffixes incrementally 
fragments total length nl overlap detection done time ffln 
error rate ffl low algorithm times faster complete dynamic programming 
large shotgun sequencing project complete genome base pairs bacterium assembler assembles fragments hours 
builds table base pairs oligonucleotide subsequences generate list potential fragment overlaps 
uses fast initial comparison fragments similar blast eliminate false overlaps list applying smith waterman dynamic programming algorithm 
phrap compares pairwise fragments efficient implementation algorithm called swat claimed times faster blast 
swat uses recursion word packing similarities fragments stores alignment information significant matches 
matching words scores fragments constrained bands smith waterman matrix 
fact real sequencing projects true overlaps typical shotgun sequencing strategy uses roughly times genome coverage 
average fragment physically overlap constant number fragments 
approach avoiding quadratic behavior filter comparisons search exact matches certain length say threshold quickly reject non overlapping pairs fragments 
potential danger sequencing errors may render exact matching unreliable overlap detection 
main contributions careful experimental analysis accuracy exact match filtering real simulated data 
investigate tradeoff exact match length accuracy achieved 
larger value real overlaps faster candidates find true overlaps 
sequencing error rate various laboratory laboratory base error rates typical 
fragments base pairs higher error rate middle bps 
fragments physical locations genome overlap region nucleotides error rate yields average errors region 
high probability exist exact match length 
find exact matching works higher error rates 
evaluated suffix tree suffix array data structures overlap detection 
suffix array shows significant advantage suffix tree space speed 
review data structures 
text string member alphabet sigma seek preprocess pattern sigma set fi gamma pg efficiently 
ffl suffix trees compressed trie suffixes xn sample suffix tree string shown 
edges tree representing substring implemented ab aab aab ab suffix array suffixes suffix tree suffix array suffix tree suffix array 
pair pointers total size data structure linear 
suffix trees built time length text 
memory requirement approximately bytes problem large texts sequencing projects permit searching string jpj time 
ffl suffix array basically sorted list suffixes coupled size longest common prefixes adjacent elements suffix array string searches answered quickly binary search 
suffix arrays built expected time length text 
memory requirement bytes support searching string jpj lg time 
second consideration avoid expense full smith waterman computation linear super linear heuristic compare fragments fasta blast 
fasta similar approach implementation 
exact matching fast sequence assembly algorithms fast overlap detection rely proper suffix array data structures 
due space concerns omit discussions implementation details extended focusing experimental results program 
evaluated overlap detection datasets 
edited shotgun sequencing data kb cosmid consisting fragments total length base pairs 

raw shotgun sequencing data cosmid total length base pairs errors 

simulated shotgun fragments cosmid containing fragments base pairs errors 

fragments errors 

fragments errors 

fragments errors 
overlap length actual overlaps error error error error overlap length actual overlaps error error error error number overlaps overlap length actual overlaps error error error error accuracy errors 

shotgun sequencing data full sequencing project national laboratory 
consists fragments totaling base pairs unknown error rate estimated 
test sets generated shotgun simulation program randomly splices cosmid dna sequence shot gun fragments totaling times coverage randomly generate errors fragments 
shows actual overlaps detected exact matching length different error rates 
curve plot number actual overlaps different length thresholds curves top bottom correspond number overlaps different data sets errors respectively 
sequencing error rate rarely true overlaps errors misses overlaps length opposed 
suggests high error rate fragments 
smaller match lengths perform better 
low error rates 
significant difference range ks select length gives best running time 
fortunately sequencing data seen falls low error rates freedom tradeoff 
table shows candidate overlaps detected represent true overlaps 
small match length reserve true overlaps contain false overlaps large identifies false overlaps misses true overlaps 
general number true overlaps candidates reflects potential accuracy match search number false overlaps candidates measures amount identify 
ideally seek value candidates true true overlaps missed 
comparing table achieve best performance 
addition simulated fragments run program raw abi machine sequencing data vector trimming 
program picks candidates length exact match evaluates quality overlaps bounded dynamic programming retain matches errors 
overlaps constructed simple verification strategy sequence exist sequences overlapping overlapped regions overlapped 
procedure reconstruct overlaps length common substrings 
compared accuracy reconstructed data performing full smith waterman pairs sequences 
table fn false negative gives number overlaps missed comparing true overlaps length tp false positive represents amount overlaps claim overlaps 
table shows overwhelming majority overlaps reconstructed large exact matches 
overlaps claim filtering reconstruction correct 
false positive errors 
error error error error true true true overlaps true cands cands cands cands table accuracy overlap detection sequence simulated errors 
fp candidates fn candidates fn filtering fn reconstruct time dp table quality mer overlap detection raw kb sequence comparing true overlaps length 
space bytes base pairs suffix trees data set fragments base pairs dynamic vector suffix arrays edited raw simulated errors simulated errors simulated errors simulated error bnl project construction time suffix trees data set fragments base pairs dynamic vector suffix arrays edited raw simulated errors simulated errors simulated errors simulated errors bnl project traversing time suffix trees data set fragments base pairs dynamic vector suffix arrays edited raw simulated errors simulated errors simulated errors simulated errors bnl project table comparing suffix tree suffix array time space performance sequence data sets promising reconstruct overlaps run smith waterman pairs fragments 
example reconstruct overlaps overlaps comparing overlaps fully dynamic programming dp 
successfully reconstruct overlaps missed 
considering dynamic programming requiring hours job achieve accuracy minute simple transitive relation strategy significant 
table summarizes timing space experiments datasets running sparc workstation mb ram 
length dna fragment ranges base pairs 
program run twice timings averaged compensate system load 
traversing time data structure important proportional time exhaustive search exact matches 
fragment represents dna sequences reverse complement 
actual number text symbols double base pairs bps 
total time involves building suffix array detecting overlaps bounded dynamic programming filtering 
final result program weighted adjacency alignment graph dna sequence 
accuracy program shown section 
table shows dynamic suffix trees save half space vector suffix trees constructions time competitive 
reason slower traversing edges node decoded children visited 
suffix array efficient space beat suffix trees big sequencing project dna human genome 
construction time suffix arrays better suffix trees 
exception data edited fragments share long common substrings computation harder 
advantage suffix array fast traversing 
traversing time measures expense perform exact matching 
linear structure easier faster 
unification factoring unification basic computational mechanism prolog logic programming languages 
prolog program consists ordered list rules rule consists head associated action rule head matches unifies current computation 
execution prolog program starts specifying goal say constant variables 
system systematically matches head goal head rules unified goal 
unification means binding variables constants possible match 
example consider set rule heads 
goal match rules bound match extra characters 
goal match third rule variable bound second third position 
unification factoring logic programming considered dawson give dynamic programming algorithm optimizing trie size strings imposed left right order case prolog programs 
experimental results showed unification factoring substantially sped typical prolog programs 
datalog programs 
prolog programs variables problem minimizing trie size shown np complete 
lin showed augmented version trie minimization problem harder 
consider question approximation algorithms unification factoring 
producing small size trie set strings 
prove surprising negative result impossible approximate minimum size trie polynomial factor np way prove new variant subgraph isomorphism 
results unification factoring relate problem unification factoring edge maximum complete bipartite subgraph problem 
complete bipartite subgraph defines disjoint sets vertices ae edge maximum complete bipartite subgraph contains maximum number bipartite edges 

largest product jv delta jv edges permitted incident vertices contribute number bipartite edges 
vertex complete bipartite subgraph shown hard approximate polynomial factor lund yannakakis simon 
resolve problem approximating vertex maximum complete bipartite subgraphs 
note vertex maximum complete bipartite subgraph easy approximate factor simply selecting highest degree vertex graph neighborhood 
section prove results subgraph problem 
section demonstrate hardness unification factoring 
proofs omitted space reasons appear full version 
edge maximum complete bipartite subgraph consider transformation arbitrary graph bipartite graph contain pair vertices vertex edge contain edges 
contain edges lemma clique vertices complete bipartite subgraph edges 
lemma complete bipartite subgraph edges exist clique vertices lemma problem finding clique size graph containing clique size np hard 
minimum size trie trivial trie set strings length uses mn edges define savings sv trie number edges saved trivial trie 
sv mn gamma jt optimal trie maximizes amount savings 
theorem finding maximum complete bipartite subgraph undirected graph approximated factor number total vertices maximum savings trie approximated log factor number strings trie instance 
proof consider reduction input graph set strings 
vertex construct string length jv jth character unique symbol ff 
set strings consist fs 
consider complete bipartite subgraph defined disjoint sets vertices fv fv subgraph contains bipartite edges kl 
subgraph defines trie kl saves character positions path root trie 
strings share value probed characters common strings clustered height total saves suffix tree sv sv delta gamma gamma gamma kl assume loss generality 
sv opt consider trie sv saves 
claim construct complete bipartite subgraph containing sv log edges 
trie set savings trie result single path root probe position set strings broken singletons containing position 
string belongs singleton set saves credited 
total amount savings sv gamma gamma delta log means exists complete bipartite subgraph sv log edges trie sv saves 
details appear full version 
subgraph linear time algorithm approximate maximum saves trie log factor approximate maximum complete bipartite subgraph factor sv opt sv delta log delta log delta log delta giving result 
acknowledgments bill rest group interesting discussions primer walking sequencing 
iv ramakrishnan introducing unification factoring steve dawson ko ramakrishnan terry swift useful discussions 
altschul gish miller myers lipman 
basic local alignment search tool 
mol 
biol 
clark munro 
efficient suffix trees secondary storage 
proc 
seventh acm symp 
discrete algorithms soda pages 
dawson ramakrishnan ramakrishnan sagonas swift warren 
unification factoring efficient execution logic programs 
nd acm symposium principles programming languages popl pages 
dawson ramakrishnan swift 
principles practice unification factoring 
appear acm trans 
programming languages toplas 
engle burks 
artificially generated data sets testing dna fragment assembly algorithms 
genomics 
green 
documentation phrap 
genome center university washington 
kececioglu myers 
exact approximate algorithms sequence reconstruction problem 
algorithmica 

lin 
optimizing tries ordered pattern matching complete 
proc 
th ieee structures complexity theory conference pages 
lund yannakakis 
approximation maximum subgraph problems 
proc 
th icalp pages 
manber myers 
suffix arrays new method line string searches 
siam computing 
myers :10.1.1.52.6330
simplifying accurately formulating fragment assembly 
comp 
biol 
pearson lipman 
improved tools biological sequence comparison 
proc 
natl 
acad 
sci pages 
simon 
approximate solutions combinatorial optimization problems 
siam discrete math 
sutton white 
assembler new tool assembling large shotgun sequencing projects 
genome science technology 
waterman 
computational biology 
chapman hall london uk 

