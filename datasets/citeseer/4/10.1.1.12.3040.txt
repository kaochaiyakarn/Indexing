differential program analysis task analyzing related programs determine behavioral difference 
goal find input programs produce different outputs illustrating behavioral difference programs 
general problem undecidable unsound incomplete analysis necessary 
combination static dynamic techniques may able produce useful results typical programs conducting search differentiating inputs guided heuristics 
defines problem describing necessary kind analysis presents preliminary results illustrating potential technique 

notkin argued program analysis lies analyzing multiple versions program 
allows amortize cost analysis development cycle direct analysis efforts differences may allow kinds analysis intractable 
agree strategy argue analyzing versions program find behavioral difference important problem just reduce cost analysis finding behavioral differences useful goal aid understanding maintaining program recognizing unintended side effects modifications 
making change program correct known error add new feature consequences change fully understood 
change may unintended side effects anticipated programmer may fail accomplish intended goal 
change may effect 
order prevent unintended side effects verify changes intended effect helpful automated differential program analysis joel david evans department computer science university virginia cs virginia edu evans analysis showing actual effect modification program behavior 
programs frequently maintained people far removed original development process 
intended purpose modifications program history clear documented 
actual effect program behavior presence particular part program may unknown particular line may crucial may effect 
analysis shows difference behavior caused presence absence particular element assist maintainers understanding program 
testing dynamic analysis programs benefit sort analysis 
change program important tested 
new tests may need added regression test suite test modification adequately 
dynamic analysis tools depend quality test suite program may produce incorrect results tests exist exercise particular modification 
needed set automated techniques analyze effect modifications 
differential program analysis general term describe analyses focus differences similar programs 
sections follow outline analysis needs propose heuristics techniques analysis preliminary results showing promise technique 

problem definition goal differential program analysis generate test case demonstrates difference behavior programs 
assume behavioral difference small relative input space programs produce identical output nearly inputs 
interesting analyze changes affect result input program require different kind analysis 
goal find behavioral differences analyze known ones 
difference existing techniques zeller delta debugging method analyze difference 
concentrate analyzing versions program 
structural difference programs small relative size program lines code procedures program different 
develop techniques take advantage similarities programs existing techniques analyze programs independently compare results 
goals include finding unanticipated sideeffects changes assume existing regression test suite able find interesting behavioral differences 
regression testing finds differences behavior anticipated designers testers specifically checked 
regression test selection useful technique reducing cost testing reveal new differences tested suite 
able analyze undocumented programs may test suites 
assume generator capable producing differentiating test case reasonable exhaustive search input space 
necessary generated inputs valid search eliminate inputs programs consider errors 
difference behavior small relative input space generator produce right inputs analysis problem performing directed search find inputs reveal behavioral differences 

approach kind analysis requires solving subproblems find inputs reach syntactic difference generate differences state programs propagate differences output 
programs produce output input point execute different instructions 
order find test cases result different output reach syntactic changes program 
subproblem undecidable incomplete solutions proposed search techniques simulated annealing genetic algorithms techniques fitness functions generate test inputs reach particular parts program 
symbolic execution constraint solving possible approach 
syntactic changes program reached necessary difference state result difference propagated programs far result different output 
possible modification produce changes intermediate values producing difference result 
narrowing input space inputs reach modification sufficient necessary search space find inputs result actual differences output 
tracey show simulated annealing evolve test inputs cause program reach specified point code 
accomplished determining branches program take reach point interest developing fitness function evaluates close program correct branches 
branches program take condition branch transformed expression measures close program branch expressions combined form fitness function evolve test inputs cause program reach desired point 
order apply technique finding differences programs new fitness functions constructed compare behavior programs guide search input reveal differences 
order direct search input produces actual behavioral difference way measure close particular input achieving goal goal reached 
inputs produce difference output inputs may produce different intermediate values measurable differences execution may important cues finding inputs produce behavioral difference 
propose heuristics may useful guiding search inputs produce actual differences output 
note boundary conditions programs indicate decisions programs making differences behavior lie boundary conditions 
selecting test cases exercise boundary conditions programs promising way find differences 
focusing attention boundaries exist program particularly interesting decisions lead paths programs reaching paths may reveal different behavior 
heuristic takes advantage known similarities programs focus difference potential useful approaches analyze programs separately 
evolve test sets evolving single test cases additional heuristics 
select test sets maximize total number paths executed coverage metrics 
modify coverage metrics include paths reach syntactic difference programs takes advantage similarities programs 
evolving test sets allows compare ways programs map input space paths program 
program maps inputs path program maps inputs different paths reveals programs divide input space output 
selecting test sets produce isomorphic mappings inputs paths way may lead revealing behavioral differences indicate regions input space programs handle input way 
addition heuristics ongoing xie notkin examines comparing program spectra combined various heuristics identify possible faults modified programs cases actual differences output result 
program spectra signatures program behavior distribution paths taken procedures executed values modified program characterize program execution 
harrold investigate effectiveness various program spectra identifying differences programs 
studies focus identifying differences execution occur regression tests program guiding search inputs produce actual behavioral differences 
heuristics identified may useful constructing fitness functions useful purpose 
differentiating test case necessarily mean behavioral difference exists 
useful way measuring thorough search conducted provide measure confidence programs behavior 
done estimating relevant search space tested coverage modified parts programs 
mutation analysis evaluate effectiveness test suite identify differences original modified programs 
may necessary develop new coverage metrics take account special problem covering differences code 

preliminary results developed small system explore techniques described 
system uses lines java code capable evolving test cases show behavioral differences small programs 
programs instrumented hand compute fitness functions automated 
illustrate system simple example 
short procedure classifies triangle comparing lengths sides returns value indicating lengths form triangle triangle equilateral isosceles scalene largest angle right obtuse int classify int int int int kind unknown return invalid triangle kind right triangle kind acute triangle kind obtuse triangle kind equilateral triangle kind isosceles triangle kind scalene triangle return kind 
triangle classification procedure acute 
different version procedure shown lacks shown box 
procedure simple easily see effect modification inspecting cases incorrectly classify isosceles triangle scalene example triangle sides classified scalene sides length 
example demonstrate automated tool generate test cases demonstrate difference boundary condition heuristic 
idea heuristic test executions near boundary conditions program reveal differences 
develop test cases instrumenting program compute measure nearness boundaries measure guide search differentiating test cases 
decision point program conditional expression converted expression measuring far program making opposite decision similar technique tracey select inputs reach particular point program 
minimum values measure close program different path particular test case 
fitness function guide genetic algorithm guided search unguided search number trial executions millions 
probability finding difference vs number trial executions evolve test cases cause program reach boundary conditions 
preliminary results show technique works triangle classification example guided search able find differentiating test case significantly fewer test executions random unguided search 
graph shows percent time guided search able identify difference trial executions fewer unguided search required trial executions having probability finding 
technique works particularly admittedly contrived example behavioral difference lies boundary conditions programs complicated control flow complicated relationship input control flow sufficient 
ways technique improved 
currently exploring focusing decisions program order guide search looking boundary conditions 
examining static analysis determine decisions important decisions reach changed portion program 

summary modern development process version control systems cvs online repositories source forge available related versions programs 
take advantage opportunity analyze related versions programs better understand 
important develop techniques analyze versions program reduce cost testing analysis reveal important facts differences programs 
kind information useful avoiding unintended side effects understanding development history undocumented programs identifying actual effects particular parts program 
hard problems solved achieve goals differential program analysis undergone rapid progress global search techniques evolve inputs reach particular parts programs program spectra compare related versions program 
optimistic near point techniques combined ways enable useful revealing analyses differences similar programs 
harrold jones li liang sinha spoon 
regression test selection java software 
proceedings acm conference object oriented programming systems languages applications oopsla 
harrold rothermel wu yi 
empirical investigation relationship spectra differences regression faults 
software testing verification reliability 
michael mcgraw schatz walton 
genetic algorithms dynamic test data generation 
technical report rst sterling va may 
notkin 
keynote longitudinal program analysis 
workshop program analysis software tools engineering paste page charleston sc november 
harrold peck 
test data generation genetic algorithms 
journal software testing verification reliability 
tracey clark mander 
way forward unifying dynamic test case generation optimisation approach 
internation workshop dependable computing applications pages 
ifip january 
voas miller 
software testability new verification 
ieee software may 
xie notkin 
checking inside black box regression fault exposure localization value spectra differences 
fse poster session november 
zeller 
simplifying isolating failure inducing input 
ieee transactions software engineering february 
