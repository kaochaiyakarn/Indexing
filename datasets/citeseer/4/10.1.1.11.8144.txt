relative overhead piggybacking causal message logging protocols bhatia keith marzullo dept computer science eng 
university california san diego lorenzo alvisi dept computer sciences university texas austin message logging protocols ensure crashed processes choices re executing nondeterministic events recovery 
causal message logging protocols achieve piggybacking results choices called determinants ambient message traffic 
doing protocols create orphan processes introduce blocking failure free executions 
survive failures ensure determinants stored processes 
causal logging protocols differ kind information piggyback processes 
information send better process able estimate global properties determinants turn results fewer needless piggybacking determinants 
attempts quantify tradeoff cost sending information benefit doing 
keywords fault tolerance message logging causal logging rollback recovery 
message logging protocols ensure crashed processes choices re executing research supported afosr 
lorenzo alvisi supported part national science foundation career award ccr research infrastructure award cda research award ccr 
nondeterministic events recovery 
causal message logging protocols achieve piggybacking results choices called determinants ambient message traffic 
doing protocols create orphan processes introduce blocking failure free executions 
survive failures causal logging protocols ensure determinants stored processes 
determinant stored sites stable need piggybacked 
set processes stored copy determinant event piggybacking soon jc unfortunately global variable estimated locally process 
process estimate 
ensure availability determinant recovery local estimates conservative 
increase accuracy information may need piggybacked 
example suppose system processes wish include processes causal path leading execution current state information piggybacked messages 
amount information may dwarf overhead imposed simply redundantly piggybacking general appears tradeoff piggyback load estimate high accuracy piggyback load generated redundant piggybacks inaccurate estimate 
attempt study tradeoff 
define different techniques estimating log set processes hold logging information message techniques methods encoding estimate jlog log choice include estimates log jlog order restrict domain ignore effect checkpointing consider systems consist processes 
examine causal logging protocols dimensional space communication patterns captures properties communication networks application properties 

protocols assume general asynchronous distributed computing model processes communicate exchanging point point messages communication channels reliable fifo 
processes fail independently crashing 
assume non determinism system order messages delivered 
process recovery suffices record information necessary reproduce original message delivery order 
message information consists process sender sent ordinal value ssn process receiver delivered ordinal value rsn ssn means th message sent sender rsn means th message delivered receiver 
information called determinant denoted process stores volatile memory sends message process piggybacks believes may unstable believes may copy jlog log 
continues piggyback way stable 
simplest protocols det time 
run processes fp tg 
sender sends extra information aside unstable determinants 
shows simple run 
communication graph contains chain starting process process point message stable determinant stored processes fq tg 
det process knows stable 
process point infer log fq tg 
infer information determinant sent message piggybacked 
addition determinants sending process add information message help receiver better estimates global value log 
include local estimate jlog protocol jlogj estimate log log jlogj adds cost log bits determinant piggyback 
example jlogj enables process determine stable point general knowledge actual processes log optimization difficult 
right point example process estimates jlog knowing 
point process act conservatively assume process knew 
log adds bits determinant help greatly reduce number unnecessary piggybacking adding knowledge sender forced conservative estimates 
protocols described far send information unstable determinants 
sender knows determinant stable keeps knowledge 
extend protocols described send complementary information unstable determinants 
det extended adding constant size stability vector message determinant 
jlogj extended adding constant size stability matrix sm message encodes jlog information 
log extended log adding constant size dependency matrix dm message 
row dm weak dependency vector vector clock described 
full causal past encoded dependency matrix subsumes stability matrix stability vector 

bbl communications model relative piggyback overhead various protocols depends strongly actual communication pattern 
communication pattern turn dependent application communication library network characteristics physical hardware 
order develop guidelines protocols general parameterized communications model call bbl model 
generate different communications patterns parameter space compare relative performance causal message logging protocols function coordinates space 
communications model similar models proposed example 
model posits processes communicating pointto point messages 
messages underlying communication system reliable enforces fifo order 
application parameterized dimensions message count burstiness latency 
message count total number messages sent system burstiness measure computation communication ratio process measure spatial distribution messages latency measure speed underlying communication system 
quantities specified average values 
process model cycles stages operation communication stage process sends messages computation stage messages received acknowledged 
burstiness parameter determines average number messages sent communication stage 
burstiness real number higher number messages sent predefined maximum 
communication stage actual number messages sent random variable restricted uniform distribution mean burstiness theta maximum burstiness 
experiments maximum burstiness 
message recipients selected randomly set neighbor processes fixed run 
size neighbors set determined parameter real number 
process size neighbors set random variable restricted uniform distribution mean theta gamma 
latency parameter determines fast average acknowledgment returned sender 
latency real number higher value slower acknowledgment 
delay measured terms number communication events occur acknowledgment event 
message sent number events acknowledgment arrives random variable mean latency theta maximum latency 
experiments maximum latency 
communication graphs set parameters generated round robin algorithm starting process determines number messages send burstiness 
message burst process chosen random neighbors set 
messages sent 
procedure repeated process chosen round robin order 
loop continues desired number messages sent 
protocol minimum maximum average det jlogj log jlogj log det table 
number determinants piggybacked protocol 
exploring bbl space generated different bbl communication patterns varying parameters 
pattern processes roughly messages 
burstiness latency vary different values 
addition parameter setting different random communication patterns generated 
word size experiments bits 
fbl protocols run communication pattern value 
total runs executed 
chose small values real systems processes probability having failures time small 
included allows compare protocols manetho causal protocol sends information det designed tolerate total failures 

importance stable measured piggybacking load imposed protocols 
results summarized tables indicate information stable determinants greatly reduces unnecessary piggybacking 
unfortunately experiments show cost sending information high 
poor performance terms bandwidth understandable plus protocols send large fixed size minimum maximum average det jlogj log jlogj log det table 
average communication overhead run protocol bits protocol burstiness latency jlogj log det table 
linear regression coefficients rays message 
log example size matrix theta theta 
protocol log sending information determinant able handicap average log lowest bandwidth requirements 
det somewhat surprise represents compromise 
sends length vector summarize stability information total bandwidth competitive simpler protocols 

sensitivity parameters statistics package performed linear regression analysis remaining protocols determine effects different factors total communication overhead 
results summarized table 
noted coefficients adjusted reflect fact range times range parameters 
statistic regressions jlogj log det respectively indicating reasonable fit 
regression results indicate speed underlying communication system strong positive influence communication overhead 
intuitively reasonable 
increases redundancy needed system determinants piggybacked 
det sensitive increases amount redundancy saturates system information determinants stable important 

understanding relative performance protocols understand relative strengths weaknesses remaining protocols function application properties generated data cubes raw data collected 
data cube unit cube application properties axis burstiness latency 
point cube represents set applications corresponding properties 
runs generated fall points forming theta theta grid data cube 
grid point calculate average performance protocols point marker represent protocol uses bandwidth 
grey level marker represents difference performance best second best protocol normalized values darker mark greater difference 
shows relative performance jlogj log det cubes remaining values 
cube shows areas applications space protocols excels 
general log fairly especially middle application space 
low communication graphs resemble linear chains number unnecessarily piggybacked determinants bounded low 
process communicating process unnecessarily send determinant 
case jlogj just log consumes bandwidth 
latency high determinants burstiness latency burstiness 
performance jlogj sphere log square det triangle disseminated widely system 
case having better estimates log drastic effect 
see equally important factor containing dissemination determinants send information determinants stable 
region application space latency burstiness high det best protocol 
increases advantage det decreases virtually disappears processes store copy determinant containing dissemination pointless 
jlogj winner high 
compared relative performance jlogj log det manetho 
independent value manetho forwards copies determinants processes performs relatively poorly low 
increases manetho circumstances jlogj excels low 
large manetho latency burstiness high 
region applications send lots messages burst network slow acknowledge messages lot redundant determinants sent 
applications advantage building ac estimates log best policy send minimum amount information precisely manetho 
explores basic tradeoff benefit having information cost obtaining information context message logging protocols synthetic application setting 
bbl application model attempts model scientific applications parameterized dimensions burstiness latency 
running total simulations varying parameters protocol options conclude full causal information greatly reduces bandwidth overhead causal logging cost sending information high recommend 
conclude jlogj better choice det somewhat surprising contrary initial intuition 
det piggybacks fewer bits time jlogj little worse occasionally beats det significant amount 
property fixed ahead time value small jlogj large log say latency large det best choice small choose protocol little knowledge communication properties log reasonable choice log wins 
manetho appears best choice large number failures masked low burstiness latency high 
tolerate large number failures log best choice 
applications bbl model sensitive latency lesser degree 
particular sensitive speed acknowledgments 
sensitivity greater increases 
noted results valid bbl application model 
communication patterns generated ways lead different results 
recommendations change larger values studied cases 
grows expect det jlogj relatively better rest especially det sufficiently large believe jlogj best choice small det manetho best choice large experiments needed verify intuition 
alvisi marzullo 
tradeoffs implementing causal message logging protocols 
proceedings th acm symposium principles distributed computing pages june 
philadelphia pa alvisi marzullo 
message logging pessimistic optimistic causal optimal 
ieee transactions software engineering 
bhatia marzullo alvisi 
relative overhead piggybacking causal message logging protocols 
technical report ucsd cse january 
srinivasan vaidya das 
communications characterization methodology parallel applications 
proceedings third international symposium high performance computer architecture pages february 
san antonio tx 
elnozahy johnson wang 
survey rollback recovery protocols message passing systems 
technical report cmu cs september 
elnozahy zwaenepoel 
manetho transparent rollback recovery low overhead limited rollback fast output commit 
ieee transactions computers may 
schwarz mattern 
detecting causal relationships distributed computations search holy grail 
distributed computing 
