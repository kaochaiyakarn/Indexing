byzantine generals problem leslie lamport robert shostak marshall pease sri international reliable computer systems handle malfunctioning components give conflicting information different parts system 
situation expressed abstractly terms group generals byzantine army troops enemy city 
communicating messenger generals agree common battle plan 
may traitors try confuse 
problem find algorithm ensure loyal generals reach agreement 
shown oral messages problem solvable thirds generals loyal single traitor confound loyal generals 
unforgeable written messages problem solvable number generals possible traitors 
applications solutions reliable computer systems discussed 
categories subject descriptors 
computer communication networks distributed systems network operating systems operating systems communications management network communication operating systems reliability fault tolerance general terms algorithms reliability additional key words phrases interactive consistency 
reliable computer system able cope failure components 
failed component may exhibit type behavior overlooked sending conflicting information different parts system 
problem coping type failure expressed abstractly byzantine generals problem 
devote major part discussion problem conclude indicating solutions implementing reliable computer system 
imagine divisions byzantine army outside enemy city division commanded general 
generals communicate messenger 
observing enemy decide common plan action 
generals research supported part national aeronautics space administration contract nas mod 
ballistic missile defense systems command contract army research office contract daag 
authors address computer science laboratory sri international ravenswood avenue menlo park ca 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm acm transactions programming languages systems vol 
july pages 
byzantine generals problem may traitors trying prevent loyal generals reaching agreement 
generals algorithm guarantee loyal generals decide plan action 
loyal generals algorithm says traitors may wish 
algorithm guarantee condition regardless traitors 
loyal generals reach agreement agree reasonable plan 
want insure small number traitors cause loyal generals adopt bad plan 
condition hard formalize requires saying precisely bad plan attempt 
consider generals reach decision 
general observes enemy communicates obser 
information communicated ith general 
general uses method combining values single plan action number generals 
condition achieved having generals method combining infor mation condition achieved robust method 
example decision attack retreat con general opinion option best final decision majority vote 
small number traitors affect decision loyal generals equally divided possibilities case decision called bad 
approach may way satisfy conditions know 
assumes method generals communicate values 
obvious method ith general send messenger general 
satisfying condition requires loyal general obtain values general may send different values different generals 
condition satisfied true 
loyal general obtain information 

condition implies general necessarily value obtained directly ith general ith general may send different values different generals 
means careful meeting condition introduce possibility generals value different sent ith general ith general loyal 
allow happen condition met 
example permit traitors cause generals base decision values retreat retreat loyal general sent value attack 
requirement 
ith general loyal value sends loyal general value 
acm transactions programming languages systems vol 
july 
lamport shostak pease rewrite condition condition ith general loyal 
loyal generals value 
conditions conditions single value sent ith general 
restrict consideration problem single general sends value 
phrase terms commanding general sending order lieutenants obtaining problem 
byzantine generals problem 
commanding general send order lieutenant generals ic 
loyal lieutenants obey order 
ic 
commanding general loyal loyal lieutenant obeys order sends 
conditions ic ic called interactive consistency conditions 
note commander loyal ic follows ic 
com mander need loyal 
solve original problem ith general sends value solution byzantine generals problem send order value generals acting lieutenants 

impossibility results byzantine generals problem deceptively simple 
difficulty indicated surprising fact generals send oral messages solution thirds generals loyal 
particular generals solution presence single traitor 
oral message contents completely control sender sender transmit possible message 
message corresponds type message computers normally send 
section consider signed written messages true 
show oral messages solution generals handle single traitor 
simplicity consider case possible decisions attack retreat 
examine scenario pictured commander loyal sends attack order lieutenant traitor reports lieutenant received retreat order 
ic satisfied lieutenant obey order attack 
consider scenario shown commander traitor sends attack order lieutenant retreat order lieutenant 
lieutenant know traitor tell message commander sent lieutenant 
scenarios pictures appear exactly lieutenant 
traitor lies consistently way lieutenant distinguish situations obey attack order 
lieutenant receives attack order commander obey 
acm transactions programming languages systems vol 
july 
byzantine generals problem said retreat fig 

lieutenant traitor 
said retreat fig 

commander traitor 
similar argument shows lieutenant receives retreat order commander obey lieutenant tells commander said attack 
scenario lieutenant obey retreat order lieutenant obeys attack order violating condition ic 
solution exists generals works presence single traitor 
argument may appear convincing strongly advise reader suspicious reasoning 
result correct seen equally plausible proofs invalid results 
know area computer science mathematics informal reasoning lead errors study type algorithm 
rigorous proof impossibility general solution handle single traitor refer reader 
result show solution fewer generals cope proof contradiction assume precisely solution exists generals problem trivial generals 
acm transactions programming languages systems vol 
july 
lamport shostak pease solution group fewer construct general solution byzantine generals problem works traitor know impossible 
avoid confusion algorithms call generals assumed solution generals constructed solution byzantine generals 
starting algorithm allows fewer generals cope traitors construct solution allows byzantine generals handle single traitor 
general solution obtained having byzantine generals simulate approximately third generals general simulating generals 
byzantine com mander simulates commander plus lieutenants byzantine lieutenants simulates lieutenants 
byzantine general traitor simulates generals traitors 
assumed solution guarantees ic ic hold generals 
ic lieutenants simulated loyal lieutenant obey order order obey 
easy check conditions ic ic generals solution imply corresponding conditions byzantine generals constructed required impossible solution 
think difficulty solving byzantine generals problem stems requirement reaching exact agreement 
demonstrate case showing reaching approximate agreement just hard reaching exact agreement 
assume trying agree precise battle plan generals agree approximate time attack 
precisely assume commander orders time attack require conditions hold ic 
loyal lieutenants attack minutes 
ic 
commanding general loyal loyal lieutenant attacks minutes time commander order 
assume orders processed day attack time order received irrelevant attack time order matters 
byzantine generals problem problem unsolvable thirds generals loyal 
prove showing solution generals coped traitor construct general solution byzantine generals problem worked presence traitor 
suppose commander wishes send attack retreat order 
orders attack sending attack time orders retreat sending attack time assumed algorithm 
lieutenant uses procedure obtain order 
receiving attack time commander lieutenant time earlier attack 
time retreat 
continue step 
acm transactions programming languages systems vol 
july 
byzantine generals problem ask lieutenant decision reached step 
lieutenant reached decision decision 
retreat 
follows ic commander loyal loyal lieutenant obtain correct order step ic satisfied 
commander loyal ic follows ic need prove ic assumption commander traitor 
traitor means lieutenants loyal 
follows ici lieutenant decides attack step decide retreat step 
come decision step defer decision step 
case easy see arrive decision ic satisfied 
constructed general solution byzantine generals problem handles traitor impossible 
general algorithm maintains ici ic presence traitor 
method having general simulate prove solution fewer rn generals cope traitors 
proof similar original byzantine generals problem left reader 

solution oral messages showed solution byzantine generals problem oral messages cope rn traitors generals 
give solution works generals 
specify exactly mean oral messages 
general supposed execute algorithm involves sending messages generals assume loyal general correctly executes algorithm 
definition oral message embodied assumptions generals message system 
message sent delivered correctly 

receiver message knows sent 

absence message detected 
assumptions prevent traitor interfering communi cation generals interfere messages send confuse introducing spurious messages 
assumption foil traitor tries prevent decision simply sending messages 
practical implementation assumptions discussed section 
algorithms section require general able send messages directly general 
section describe algorithms requirement 
commander may decide send order 
ants obey order need default order obey case 
retreat default order 
acm transactions languages systems vol 
july 
lamport shostak pease inductively define oral message algorithms om nonnegative integers commander sends order lieutenants 
show om solves byzantine generals problem generals presence traitors 
find convenient describe algorithm terms lieutenants obtaining value obeying order 
algorithm assumes function majority property majority values vi equal majority vl 
equals 
assumes sequence functions 
natural choices value majority 
majority value vi exists value retreat 
median vi assuming come ordered set 
algorithm requires aforementioned property majority 
algorithm om 
commander sends value lieutenant 
lieutenant uses value receives commander uses value retreat receives value 
algorithm om 
commander sends value lieutenant 
vi value lieutenant receives commander retreat re value 
lieutenant acts commander algorithm om send value vi lieutenants 
vj value lieutenant received lieutenant step algorithm om retreat received value 
lieutenant uses value majority vl 
understand algorithm works consider case 
illustrates messages received lieutenant commander sends value lieutenant traitor 
step om commander sends lieutenants 
second step lieutenant sends value lieutenant trivial algorithm om 
second step lieutenant sends lieutenant value step lieutenant obtains correct value majority 
see happens commander traitor 
shows values received lieutenants commander sends arbitrary values lieutenants 
lieutenant obtains obtain value majority step regardless values equal 
recursive algorithm om invokes separate executions algorithm om invokes executions om means lieutenant sends separate messages lieutenant 
way distinguish different messages 
reader verify ambiguity removed lieutenant prefixes number value vi sends step 
recursion unfolds algorithm om called 
times send value prefixed sequence lieutenants numbers 
acm transactions programming languages systems vol 
july 
jd lamport shostak pease prove correctness algorithm om arbitrary prove lemma 
lemma 
algorithm om satisfies ic generals traitors 
proof 
proof induction ic specifies happen commander loyal 
easy see trivial algorithm om works commander loyal lemma true 
assume true prove step loyal commander sends value lieutenants 
step loyal lieutenant applies om generals 
hypothesis apply induction hypothesis conclude loyal lieutenant gets vj loyal lieutenant traitors majority lieutenants loyal 
loyal lieutenant vi majority values obtains majority 
step proving ic 
theorem asserts algorithm om solves byzantine generals problem 
theorem 
algorithm om satisfies conditions ic ic generals traitors 
proof 
proof induction traitors easy see om satisfies ic ic 
assume theorem true om prove om 
consider case commander loyal 
equal lemma see om satisfies ic 
ic follows ic commander loyal need verify ic case commander traitor 
traitors commander lieutenants traitors 
generals lieutenants 
may apply induction hypothesis conclude om satisfies conditions ic ic 
loyal lieutenants get value vj step 
follows ic lieutenants lieutenant ic 
loyal lieutenants get vector values vl 
vn obtain value major ity vl 
vn step proving ic 

solution signed messages saw scenario figures traitors ability lie byzantine generals problem difficult 
problem easier solve restrict ability 
way allow generals send unforgeable signed messages 
precisely add acm transactions programming languages systems vol 
july 
assumption byzantine generals problem loyal general signature forged alteration contents signed messages detected 
verify authenticity general signature 
note assumptions general signature 
particular allow signature forged traitor permitting collusion traitors 
introduced signed messages previous argument generals required cope traitor longer holds 
fact general solution exist 
give algorithm copes traitors number generals 
problem vacuous fewer generals 
algorithm commander sends signed order lieutenants 
lieutenant adds signature order sends lieutenants add signatures send 
means lieutenant effectively receive signed message copies sign send copies 
matter copies obtained single message message consist stack identical messages signed distributed required 
algorithm assumes function choice applied set orders obtain single 
requirements function 
set consists single element choice 
choice retreat empty set 
note possible definition choice median element assuming ordering elements 
algorithm denote value signed general denotes value signed value signed general commander 
algorithm lieutenant maintains set vi set properly signed orders received far 
commander loyal set contain single element 
confuse vi set orders received set messages received 
may different messages order 
algorithm sm rn 
initially vi 
commander signs sends value lieutenant 
lieutenant receives message form commander received order lets equal ii sends message lieutenant 
acm transactions programming languages systems vol 
july 
lamport shostak pease attack retreat fig 

algorithm sm commander traitor 
lieutenant receives message form jl 
jk set vi adds vi ii sends message jl 
jk lieutenant jl jk 
lieutenant receive messages obeys order choice vi 
note step lieutenant ignores message containing order set vi 
specified lieutenant determines step receive messages 
induction easily shows sequence lieutenants jl jk lieutenant receive message form jl 
jk step 
require lieutenant jk send message send message reporting send message easy decide messages received 
assumption lieutenant determine lieutenant jk sends messages 
alternatively time determine messages arrive 
time discussed section 
note step lieutenant ignores messages proper form value followed string signatures 
packets identical messages avoid having copy messages means throws away packet consist sufficient number identical properly signed messages 
copies message signed lieutenants 
illustrates algorithm sm case generals commander traitor 
commander sends attack order lieutenant retreat order 
lieutenants receive orders step step ffi attack retreat obey order choice attack retreat 
observe situation lieutenants know commander traitor signature acm transactions programming languages systems vol 
july 
byzantine generals problem appears different orders states generated signatures 
algorithm sm lieutenant signs name acknowledge receipt order 
ruth lieutenant add signature order signature relayed recipient superfluous 
precisely assumption unnecessary 
particular lieutenants need sign messages sm 
prove correctness algorithm 
theorem 
algorithm sm solves byzantine generals problem traitors 
proof 
prove ic 
commander loyal sends signed order lieutenant step 
loyal lieutenant receive order step 
lieutenant forge message form loyal lieutenant receive additional order step 
loyal lieutenant set vi obtained step consists single order obey step property choice function 
proves ic 
ic follows ic commander loyal prove ic need consider case commander traitor 
loyal lieutenants obey order step sets orders vi vj receive step 
prove ic suffices prove puts order vi step put order step 
show receives properly signed message containing order 
receives order step sends step ii receives 
adds order vi step receive message form jl 

fl received order consider cases 
case sends message jl 
jk receive order 
commander traitor lieutenants traitors 
lieutenants jl 
jm loyal 
loyal lieutenant sent value received receive value 
completes proof 

missing communication paths far assumed general send messages directly general 
remove assumption 
suppose physical barriers place restrictions send messages 
consider generals form nodes simple finite undirected graph arc nodes indicates generals send messages simple graph arc joining nodes arc connects distinct nodes 
acm transactions programming languages systems vol 
july 
lamport shostak pease fig 

regular graph 
fig 

graph regular 
directly 
extend algorithms om sm assumed completely connected general graphs 
extend oral message algorithm om need definition generals said neighbors joined arc definition 
set nodes il ip said regular set neighbors node ij neighbor ii general different exist paths yj ij passing different paths yi node common 
graph said regular node regular set neighbors consisting ofp distinct nodes 
shows example simple regular graph 
shows example graph regular central node regular set neighbors containing nodes 
extend om algorithm solves byzantine generals problem presence rn traitors graph generals regular 
note regular graph contain nodes 
integers define algorithm om follows graph generals isp regular 
om defined regular 
definition uses induction algorithm om rn 
choose regular set neighbors commander consisting ofp lieutenants 
commander sends value lieutenant 
vi value lieutenant receives commander retreat receives value 
lieutenant sends vi lieutenant follows sending value path yi existence guaranteed part ii definition 
rn acting commander algorithm om graph generals obtained removing original commander acm transactions programming languages systems vol 
july 
byzantine generals problem vi value lieutenant received lieutenant step retreat received value 
lieutenant uses value majority vi vi il ip 
note removing single node regular graph leaves regular graph 
apply algorithm om step 
prove om solves byzantine generals problem traitors 
proof similar proof algorithm om just sketched 
begins extension lemma 
lemma 
algorithm om satisfies ic traitors 
proof 
observe lieutenant obtains value majority vp vi value sent commander path disjoint path send values 
traitors half paths composed entirely loyal lieutenants 
commander loyal majority values vi equal value sent implies ic satisfied 
assume lemma 
commander loyal lieutenants gets correct value 
majority loyal induction hypothesis sends correct value loyal lieutenant 
loyal lieutenant gets majority correct values obtaining correct value step 
correctness algorithm om immediate consequence result 
theorem 
algorithm om solves byzantine generals problem traitors 
proof 
lemma letting see om satisfies ic 
commander loyal ic follows ic need prove ic assumption commander traitor 
prove loyal lieutenant gets set values vi step 
follows lieutenants including loyal paths pass commander 
simple induction argument applied implies thatp 
extension algorithm om requires graph regular strong connectivity hypothesis 
fact generals minimum number required regularity means complete connectivity algorithm om reduces algorithm om 
con trast algorithm sm easily extended allow weakest possible connec tivity hypothesis 
consider connectivity needed byzantine generals problem solvable 
ic requires loyal lieutenant obey loyal commander 
clearly impossible commander communicate lieutenant 
particular message algorithm dolev requires connectivity 
acm transactions programming languages systems vol 
july 
lamport shostak pease commander lieutenant relayed traitors way guarantee lieutenant gets commander order 
similarly ic guaranteed lieutenants communicate intermediaries 
weakest connectivity hypothesis byzantine generals prob lem solvable subgraph formed loyal generals connected 
show hypothesis algorithm sm solution number generals regardless number traitors 
course modify algorithm generals send messages sent 
precisely step commander sends signed order neighboring lieutenants step lieutenant sends message neighboring lieutenant jr prove general result diameter graph smallest number nodes connected path containing arcs 
theorem 
traitors subgraph loyal generals diameter algorithm sm modification solves byzantine generals problem 
proof 
proof quite similar theorem just sketched 
prove ic observe hypothesis path loyal commander lieutenant going fewer loyal lieutenants 
lieutenants correctly relay order reaches assumption prevents traitor forging different order 
prove ic assume commander traitor show order received loyal lieutenant received loyal lieutenant suppose receives order jk signed send neighbor received order relayed steps 
signers loyal sent neighbors relayed loyal generals reach steps 
corollary 
graph loyal generals connected sm modified solves byzantine generals problem generals 
proof 
diameter graph loyal generals 
diameter connected graph number nodes loyal generals fewer traitors 
result follows theorem letting 
theorem assumes subgraph loyal generals connected 
proof easily extended show case traitors algorithm sm properties 
loyal generals connected path length passing loyal generals obey order 

commander loyal loyal lieutenant connected path length passing loyal generals obey order 
acm transactions programming languages systems vol 
july 

reliable systems byzantine generals problem intrinsically reliable circuit components way know implement reliable computer system different processors compute result perform majority vote outputs obtain single value 
voting may performed system externally users output 
true implementing reliable computer redundant circuitry protect failure individual chips ballistic missile defense system redundant computing sites protect destruction individual sites nuclear attack 
difference size replicated processor 
majority voting achieve reliability assumption nonfaulty processors produce output 
true long input 
single input datum comes single physical component example circuit reliable computer radar site missile defense system component give different values different processors 
different processors get different values nonfaulty input unit read value changing 
example processors read clock advancing may get old time new time 
prevented synchronizing reads advancing clock 
order majority voting yield reliable system conditions satisfied 
nonfaulty processors input value produce output 

input unit nonfaulty nonfaulty processes value provides input produce correct output 
just interactive consistency conditions ic ic commander unit generating input lieutenants proces sors loyal means nonfaulty 
tempting try circumvent problem hardware solution 
example try insure processors obtain input value having read wire 
faulty input unit send marginal signal wire signal interpreted processors 
way guarantee different processors get value possibly faulty input device having processors communicate solve byzantine generals problem 
course faulty input device may provide meaningless input values 
byzantine generals solution guarantee processors input value 
input important separate input devices providing redundant values 
example redundant radars redundant processing sites missile defense system 
redundant inputs achieve reliability necessary insure nonfaulty processors redundant data produce output 
acm transactions programming languages systems vol 
july 
lamport shostak pease case input device nonfaulty gives different values read value changing want nonfaulty processors obtain reasonable input value 
shown functions majority choice taken median functions algorithms property value obtained nonfaulty processors lies range values provided input unit 
nonfaulty processors obtain reasonable value long input unit produces reasonable range values 
solutions stated terms byzantine generals terms computing systems 
examine solutions applied reliable computing systems 
course problem implementing general algorithm processor 
problems lie implementing message passing system meets assumptions assumptions algorithm sm 
consider assumptions order 

assumption states message sent nonfaulty processor delivered correctly 
real systems communication lines fail 
oral message algorithms om om failure communication line joining processors indistinguishable failure proces sors 
guarantee algorithms presence failures processor communication line failures 
course failure communication lines attached processor equivalent single processor failure 
assume failed communication line result forgery signed message assumption see quite reasonable signed message algorithm sm insensitive communication line failure 
precisely theorem remains valid communication line failure 
failed communication line effect simply removing communication line lowers ity processor graph 

assumption states processor determine originator message received 
necessary faulty processor able impersonate nonfaulty 
practice means interprocess communication fixed lines message switching network 
switching network faulty network nodes considered byzantine generals problem appears 
note assumption needed assumed messages signed impersonation processor imply forging messages 

assumption requires absence message detected 
absence message detected failure arrive fixed length time words time conven tion 
time satisfy requires assumptions 
fixed maximum time needed generation transmission message 

sender receiver clocks synchronized fixed maximum error 
need assumption fairly obvious receiver know acm transactions programming languages systems vol 
july 
byzantine generals problem long needs wait message arrive 
generation time long takes processor send message receiving input necessary generate 
need second assumption obvious 
shown assumption equivalent necessary solve byzantine generals problem 
precisely suppose allow algorithms generals take action circumstances 
fixed initial time generals 

receipt message 

randomly chosen length time elapsed 
general set timer random value act timer goes 
yields general class algorithms envision allow construction synchronized clocks 
shown algorithm solve byzantine generals problem messages trans arbitrarily quickly upper bound message sion delay 
solution possible restrict traitors incorrect behavior permitted failure send message 
proof result scope pa 
note placing lower upper bound transmission delay processors implement clocks sending messages back forth 
assumptions easy detect messages 
maximum message generation transmission delay assume nonfaulty processors clocks differ time 
message nonfaulty process generate time clock arrive destination time receiver clock 
receiver received message time may assume sent 
arrives sender faulty correctness algorithms depend message sent 
time input processor sends value calculate time clock processor wait message 
example algorithm sm processor wait time message having signatures time clock commander starts executing algorithm 
clocks run precisely rate matter accurately processors clocks synchronized initially eventually drift arbitrarily far apart periodically 
problem keeping processors clocks synchronized fixed amount processors faulty 
difficult problem byzantine generals problem 
solutions clock ion problem exist closely related byzantine generals solutions 
described 

assumption requires processors able sign messages way nonfaulty processor signature forged 
signature piece redundant information si generated process data item message signed consists pair si 
meet parts acm transactions programming languages systems vol 
july 
lamport shostak pease function si properties processor nonfaulty faulty processor generate si 
process determine ifx equals si 
property guaranteed si just data item faulty processor generate data item 
probability violation small wish making system reliable wish 
done depends type faults expect encounter 
cases interest 
random malfunction 
making si suitably randomizing function probability random malfunction processor generates correct signature essentially equal probability doing random choice procedure reciprocal number possible signatures 
method doing 
assume messages encoded positive integers power 
si equal ki mod ki randomly chosen odd number letting unique number ki ki mod process check si testing mod processor ki memory probability generating correct signature ki single nonzero message probability doing random choice 
note processor obtain ki simple procedure larger probability faulty processor forging signature substituting ki trying compute sj 

malicious intelligence 
faulty processor guided malicious intelligence example perfectly processor operated human trying disrupt system construction signature function si cryptography problem 
refer reader discussion problem solved 
note easy generate signature si process seen signature 
important message signed twice 
means sm repeatedly distribute sequence values sequence numbers appended values guarantee uniqueness 

solutions byzantine generals problem various hypotheses shown implementing reliable computer systems 
solutions expensive amount time number messages required 
algorithms om sm require message paths length 
words lieutenant may wait messages originated commander relayed lieutenants 
fischer lynch shown true solution cope traitors solutions optimal respect 
algorithms graph completely connected require acm transactions programming languages systems vol 
july 
byzantine generals problem message paths length rn diameter subgraph loyal generals 
suspect optimal 
algorithms om sm involve sending 
messages 
number separate messages required certainly reduced combining messages 
may possible reduce amount information transferred studied detail 
expect large number messages required 
achieving reliability face arbitrary malfunctioning difficult problem solution inherently expensive 
way reduce cost assumptions type failure may occur 
example assumed computer may fail respond respond incorrectly 
extremely high reliability required assumptions full expense byzantine generals solution required 

diffie hellman new directions cryptography 
ieee trans 
inf 
theory nov 

dolev byzantine generals strike 
algorithms jan 

pease shostak lamport reaching agreement presence faults 
acm apr 

rivest shamir adleman method obtaining digital signatures public key cryptosystems 

acm feb 
received april revised november accepted november acm transactions programming languages systems vol 
july 
