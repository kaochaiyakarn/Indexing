user interface declarative models development environments survey paulo pinheiro da silva department computer science university manchester oxford road manchester pl england uk 
mail cs man ac uk model user interface development environments mb uides provide context user interface declarative models constructed related part user interface design process 
provides review mb uide technologies 
framework describing elements mb uide 
representative collection mb uides selected described terms framework compared analysed information available literature 
framework mb uide technology relates provides description terms mb uide papers 
model user interface development technology aims provide environment developers design implement user interfaces uis professional systematic way easily traditional ui development tools 
achieve aim uis described declarative models 
major advantages derive declarative user interface models uims 
provide description ui ui descriptions provided ui development tools facilitate creation methods design implement ui systematic way offer capabilities model user interfaces different levels abstraction incrementally refine models re ui specifications 
provide infrastructure required automate tasks related ui design implementation processes :10.1.1.48.5184
major disadvantage uims complexity models notations hard learn 
expected appropriate environment help overcome uim complexity providing features graphical editors assistants design critics support ui designers 
fact development model user interface development environments mb uides challenging essential problems related technology completely solved 
hard demonstrate uims describe relevant aspects ui required generate running user interfaces 
fact examples running user interfaces generated declarative uims 
problem best integrate uis underlying applications introduced papers entirely addressed running user interfaces generated mb uides 
consensus set models suitable set describing user interfaces 
consensus aspects user interfaces modelled 
decade research model user interface technologies achieving level maturity lead effective development quality uis integrated applications 
potential benefits technologies provide ui developers survey provides review technologies summarising related information available literature 
relevant aspects fourteen mb uides table compared analysed 
details specific mb uides implemented specific notations tools 
mb uide local adept queen mary westfield college uk ame augsburg germany fuse technische universit nchen germany genius university stuttgart germany humanoid university southern california usa janus ruhr universit bochum germany ibm watson research center usa mastermind university southern california georgia inst :10.1.1.51.2878
tech usa mecano stanford university usa modi stanford university usa universit rostock germany teallach manchester glasgow napier uk trident notre dame de la belgium uide george washington university usa table surveyed md uides 
structured follows 
section describes mb uide evolution presents research efforts 
section introduces framework comparing analysing architectural components uims 
section describes ui development process mb uide 
section presents user interfaces described declarative models 
design guidelines introduced section 
section describes design environment tools model generate animate model user interfaces 
section 
background literature contains papers describing mb uides uims 
generation mb uide appeared improvements earlier user interface management systems uimss sought execute user interfaces represented declarative way 
main aim mb uides generation provide proper way execute ui uim 
examples generation mb uides cousin humanoid mike uide 
uims generation mb uides provide high level abstraction description ui 
instance user interface aspects layouts widget customisation appeared early ui design process 
new generation mb uides appeared providing mechanisms describing uis higher level abstraction 
examples second generation mb uides adept ame diane fuse mastermind mecano mobi teallach trident 
mb uides second generation developers able specify generate execute user interfaces 
second generation mb uide diverse set aims previous 
mb uides considering computer aided software engineering case tools notations omt development environment 
aiming achieve complete ui development 
papers describing mb uides compare features mb uides showing differences 
focused introducing new approach introducing mb uide technology 
papers provide overviews mb uide technology vanderdonckt griffiths provide comparisons mb uides szekely provides excellent insight mb uide user interface model framework user interfaces convey output applications input application users 
reason uis cope complexity applications users 
terms mb uide architectures problem application complexity user interaction complexity reflected parts mb uides usually models describing different aspects ui 
models referred component models models 
table presents models considered framework presenting aspects user interface described model 
component model abbrev 
function application model am describes properties application relevant ui 
task dialogue model tdm describes tasks users able perform application tasks related 
presentation model apm provides conceptual description structure behaviour visual parts user interface 
ui described terms objects 
concrete presentation model cpm describes details visual parts user interfaces 
explained ui composed terms widgets 
table component models user interface 
purpose framework provide comparison different uims points considered task models dialogue models classified single model called task dialogue model 
task models dialogue models describe possible tasks users perform interaction application different levels abstraction 
reason classifying uims 
possible constructors task dialogue models may similar roles 
user models supported uims adept mecano 
user models important model user interface technologies provide way model user interface preferences specific users groups users 
challenging aspect ui addressed mb uides especially clearly described literature 
uims user model appears user model replaced design guidelines 
fact design guidelines usually contain user preferences considered model group users 
platform models environment models contemplated framework reasons user models contemplated 
models composed constructors 
table shows constructors considered framework 
table shows possible distribution constructors component models concise description constructor abbreviations 
distribution constructors component models table helps clarify function framework 
definitions application model constructors partially extracted uml 
definitions task model constructors partially extracted johnson 
definitions concrete interaction objects partially extracted bodart vanderdonckt 
comp 
constructor abbrev 
function model am class class object type defined terms attributes operations relationships 
attribute attr property thing modelled objects class 
operation oper service provided object specific class 
relationship relat connection classes 
tdm task task activity changes state specific objects leading achievement goal 
tasks defined different levels abstraction means task sub task class 
goal goal state achieved execution task 
action action behaviour executed 
actions concrete tasks 
sequencing seq temporal order sub tasks actions respect carrying related high level tasks 
task pre condition pre conditions terms object states respected execution task action 
task post condition post conditions terms object states respected execution task action 
apm view view collection aio logically grouped deal inputs outputs task 
interaction aio user interface object graphical object representation independent environment 
cpm window window visible manipulable representation view 
concrete interaction cio visible manipulable user interface object object input output information related user interactive tasks 
layout lay algorithm provides placement cios windows 
table user interface model constructors 
point considered terms constructors mb uides need constructors framework 
constructors distributed different manner proposed table 
user interface development mb uide ui development process normally incremental process mb uide 
user interface design implementation easily repeated times required refine ui specification code 
reality mb uides flexible terms code refinement 
considering ui development process distinct subprocesses identified 
ui design results creation uim 
second ui implementation results executable ui 
section presents overview possible ui design processes mb uide 
section presents parts ui design process automated 
section presents overview ui implementation process 
user interface design process mb uide ui design process creating refining uim 
stated section agreement set models best describing uis declarative manner 
terms ui design lack agreement best method ui modelling 
modelling tools provided mb uides editing models modelling assistants provided support ui developers 
modelling tools usually provide graphical environment may facilitate complex constructing uims 
expected modelling tools prevent ui developers worrying details models notation focusing attention design ui 
additionally mb uides modelling assistants perform functions model checking provide feedback developers design process 
developer modelling tools modelling assistants user interface model application model task dialogue model presentation model concrete presentation model design tool concrete design tool user interface design mb uide 
design knowledge presentation guidelines mb uides textual uims optionally may require special editor assistant 
may excellent approach expert developers build refine models text editor 
fact mb uides textual uims offer model editors assistants give freedom developers model development environment provided 
problem mb uides textual models may offer special facilities model management 
case cost constructing uim descriptions higher benefits provided environments specially non expert developers 
mb uides existing graphical editors case tools traditional diagram describing user interface development process mb uides szekely griffiths 
model editors 
case problem tools accept modifications accommodate specific requirements editing uims 
uims describe uis different levels abstraction expected design process incremental 
uis initially described model gradually transformed concrete model 
considering iterative design process developers edit models modelling tools check model design assistants uim reaches point relevant details modelled uim 
developers time return mb uide refine model implementation ui 
problem case ui modified mb uide modifications described uim obviously regenerated new version ui 
automated tasks user interface design process papers claim real advantage model ui technologies support provide automate ui design 
powerful characteristic uims describe uis different levels abstraction 
shows ui design automation fits development activity 
design tool generate presentation model application models task dialogue models design knowledge database supply information required ui design process 
additionally concrete design tool generate concrete presentation model presentation model design guideline database 
design guidelines part user interface model part mb uide 
research related ui development concerns look feel aspects ui 
reason known guidelines concerning presentation ui 
hand research efforts analyse model tasks human computer interaction 
guidelines provided studies established proper design knowledge database 
part automated ui design process related task dialogue model affected lack established task modelling guidelines 
time automated design facilitated ui developers creates new problem ui developers interfere automated process design uis different characteristics provided design knowledge design guideline databases :10.1.1.48.5184
user interface implementation process illustrates approaches generating executing user interface context mb uide 
approach shown source code user interface generated toolkit class library 
approach mb uide generates source code user interface generates skeleton application 
second approach shown ui executed uims runtime system linked application 
uims input file generator required case convert uim uims input file format 
third approach shown application interpret uim directly due mb uide runtime system linked application 
user interface model mainstream application source code user interface model mainstream application source code user interface model source code generator toolkit class library uims input file generator uims runtime system mb uide runtime system toolkit ready file compiler linker uims ui specification file compiler linker application application mainstream application compiler source code linker application approaches implementing user interface mb uide 
ui implemented approach advantage entirely coded inside application providing natural integration ui application 
ui produced implementation approach static uis produced implementation approaches able reconfigured easily runtime 
ui implemented third implementation approach tends performance worse uis implemented second approaches expensive interpret uim runtime 
implementation tools classified categories defined follows 
ui generators tools application independent uim 
case source code generators uims generators ui generators 
instance mb uides execute ui directly uim ui generators 
ui runtime systems tools execute user interface application running 
case application implementation approach uims runtime system mb uide runtime systems ui runtime systems 
ui runtime systems essential tools mb uides 
relevant observation concerns mb uide terminology 
term ui generation refer process generating input file ui runtime system described refer process generating concrete presentation model presentation models application models task dialogue models 
term ui generation refer process 
declarative models uim certainly important element mb uide 
fact ui designed terms uim generated uim executed uim 
important understand uims composed terms models constructors 
important know notations represent models 
models table presents models mb uides terms framework 
terms table literature identify models 
application model user interface model 
fact mb uide technology appeared initially improvement user interface management systems uims clear distinction user interface mainstream application required 
presentation model application model considered declarative models 
mb uides presentation model mastermind mecano 
mb uides humanoid teallach clear distinction concrete presentation models 
case designers normally flexibility gradually refine presentation description model concrete model 
mb uide application model task dialogue model adept problem domain task model ame application model ood fuse problem domain model task model humanoid application semantics design manipulation sequencing action side effects janus problem domain data pool control specification dialog mastermind application model task model mecano domain model user task model dialogue model problem domain model task model navigation dialogue teallach domain model task model trident application model task model mb uide presentation model concrete presentation model adept user interface model prototype interface ame ooa prototype fuse logical ui ui humanoid presentation presentation janus surveyed surveyed frame specification dialog style specification mastermind presentation model mecano presentation model processing dialogue processing dialogue teallach presentation model presentation model trident surveyed presentation model table mb uide component models 
declarative models consider task dialogue model describe possible interactions users applications presentation application models 
mb uides describe interactions dialogue level humanoid mastermind 
mb uides especially developed adept describe interactions task level dialogue level 
mb uides mecano describe possible interactions dialogue task levels 
constructors having identified models need identify model constructors 
models table presents model constructors terminology available literature specific proposals 
column constructor refers abbreviation constructors introduced framework table 
constructors table specific system identified literature 
model notations section indicated models different proposals semantics individual models different contexts touched 
table shows different notations models mb uide constructor name adept task task goal goal seq ordering operator sequencing aio user interface object cio uio ame class ooa class attr slot ooa attributes oper ooa operation relat relation type action behaviour aio aio window ood class cio cio lay layout method humanoid class object type attr slot oper command task data flow constraints goal goal act behaviour seq guard slots constraints triggers pre sequential pre condition post action side effect aio template window display cio display interaction technique lay layout janus class class attr attribute oper operation relat association aggregation cio interaction object window dialog widow table mb uide constructors 
mb uide constructor name class data table attr field view frame aio dialog object event event act action window root unit cio unit lay style attribute mastermind class interface attr attribute oper method task task goal goal sequ connection type window presentation cio presentation part lay guides grids conditionals teallach class class attr attribute oper operation task task seq task temporal relation view free container aio aio window window cio cio different proposals 
notice table uis entirely described models single notation 
general notations developed specifically mb uide 
completely new style rules extensions notations mastermind mdl extension corba idl 
single notation useful describe models collaborate 
specially due requirement graphical notations ui models tend different notations 
example janus trident teallach adept models notation 
feasible provide categorisation uims terms notations tend specific mb uide 
instance mb uides hierarchical task notation model task dialogue models notation may precisely formalised teallach 
standard notations appears aim 
instance mas notation corba idl ame apply omt component models notations available describing parts application 
fact omt analysis design mainstream application corba idl implementation mainstream application 
comprehensive explanation semantics notations outside scope survey 
required find notations provided table mb uide notation models adept task knowledge structures tks tdm lotos tdm communicating sequential process csp tdm apm ame ooa ood am omt am fuse algebraic specification am hta tdm um hierarchic interaction graph template hti apm cpm humanoid uses single notation specified models janus janus definition language extended am corba idl odmg odl style rule models mastermind mdl extended corba idl models mecano mimic extended models mobi mimic see mecano notation models specialised hta tdm omt am um dialogue graph specialised petri net tdm teallach hierarchical tree state objects tdm hierarchical tree am apm cpm trident entity relationship attribute era am activity chaining graph acg tdm apm cpm model integration table model notations 
models integrated unusual literature unclear precise nature integration 
puerta eisenstein said lack understanding uim integration denoting problem mapping problem 
strategy finding models integrated compilation relationships constructors different component models 
table shows inter model relationships relating relationship constructors multiplicity 
multiplicity brackets described uml notation 
additionally table shows graphically models related mb uides 
presentation model considered set composed apm cpm relationships apm cpm 
strategy analyse table identification ams relate presentation models 
approaches relating ams presentation models 
frequent approach creating direct relationships models humanoid janus mecano 
second approach tdm 
case relationships am tdm tdm presentation model mastermind teallach 
ame adept instance relationships apm tdm relationships provide link am directly linked apm 
case link am tdm am presentation model 
ame humanoid janus mecano mb uide inter model relationship constructor constructor adept action aio ame class aio class window attr aio window aio action aio genius view window aio cio humanoid class cio aio cio janus window class aio attr view attr class aio aio cio mastermind task oper task cio root task window mecano window class aio attr teallach task class task aio task view window aio aio cio trident window view aio cio cpm ame genius humanoid trident am apm ame janus mecano adept ame teallach mastermind tdm mastermind teallach table discrete graphical representation inter model relationships 
environments mb uides composed tools users perform tasks required design generate user interface described section 
mb uide architecture explained terms tools 
fact development environments provide monolithic tool developers perform tasks 
environments provide distinct tools developers perform specific tasks leading complete development ui 
third kind environment developers perform part tasks tools especially developed mb uide case tools part tasks tools especially developed mb uide 
section analyses mb uide architectures comparison tools 
design environment ui models generally complex leading modelling process complex task 
modelling tools usually provided help designer model user interface 
table produces classification environment tools tool classification 
important observe mb uides composed tools responsible function classified category 
mb uide modelling editors modelling assistant adept task model editor interface generator aui editor object browser ame code generator ode editor layout generator fuse fire fluid genius model editing tool model refinement tool humanoid janus paradigm plus oo case tool surveyed oo case tool specified mastermind application modeling suite dialog critics task modeling suite presentation modeling suite teallach teallach code generator table design environment tools 
implementation environment ui implementation key activity mb uide 
generate ui mb uide depends uim environment considered 
discussed section mb uide implement run time interpreter uim generate code existing uims generate code uses specific toolkit 
basically alternatives considered generating user interface 
table summarises user interface generation tools mb uides 
see mb uides uims 
mb uides generate code specific toolkits ame fuse mastermind generate code teallach generates code java 
implement environment dialog manager fuse boss 
interesting approach ame mas provide ui prototyping uimss generate code 
way mb uides offer users benefits alternative approaches generating user interface 
mb uide ui generator ui runtime system adept interface builder interpreter ame ame code generator application code open interface code generator open interface uims specified kappa pc runtime system fuse boss surveyed genius surveyed runtime system humanoid humanoid runtime system janus code generator application code ui executed uim mastermind mastermind prototyping support amulet uims code generator application code specified isa dialog manager uims teallach java code generator application code swing toolkit table implementation environment tools 
implementation environment composed advisors documentation generators 
tools discussed survey 
mb uides seek provide setting collection complementary declarative models description ui functionalities 
survey compared models tools provided mb uides 
declarative models model constructors model notations comparative framework 
design implementation tools identified 
mb uide technology just stable products 
result practical experiences technology ibm produce ui visitor information system expo fuse siemens simulate isdn telephone 
aspects mb uide technology studied order increase acceptance mb uides level specialised ui development tools 
mapping models 
aspects uis relevant model uims understood 
fact surveyed mb uides provide way similar set ui aspects describe observed table 
unclear best model relationships constructors models describe uis observed table 
uim post editing problem 
automated generated drafts ui designs may manually refined order generate final designs 
manual refinements generated designs lost developers regenerate draft designs 
problem best cope refinements 
standard notations uims 
standard notation may useful order describe different uims common set constructors 
fact constructors may facilitate comparison reuse uims mb uides 
instance reuse uims may difficult days notations table 
reuse uims essential mb uides scalable real applications 

author norman paton anonymous reviewers valuable comments 
author sponsored nacional de cient cnpq brazil 
genera 

www genera 
ooa gui janus system 
proceedings interact pages london uk june 
chapman hall 
hofmann niemann 
janus application development environment generating user interface 
computer aided design user interfaces pages namur belgium 
namur university press 
bodart provot vanderdonckt 
systematic building software architectures trident methodological guide 
design specification verification interactive systems pages vienna 
springer 
bodart provot vanderdonckt 
model approach presentation continuum task analysis prototype 
proceedings dsv pages di june 
bodart vanderdonckt 
widget standardisation interaction objects 
advances applied ergonomics pages istanbul west lafayette may 
usa publishing 
brinksma 
iso specification language lotos 
computer network isdn systems 
booch rumbaugh jacobson 
unified modeling language user guide 
addison wesley reading ma 
browne vila rugaber 
formal methods human computer interaction chapter declarative descriptions model user interfaces mastermind 
springer verlag 
coad yourdon 
object oriented design 
prentice hall 
coutaz taylor 
workshop software engineering human computer interaction joint research issues 
proceedings software engineering human computer interaction volume lecture notes computer science pages berlin may 
springer verlag 
curtis 
wimp maturing user interface engineering 
acm interactions 

modelling generation graphical user interfaces approach 
designing specification verification interactive systems pages vienna 
springer 
foley 
history results bibliography user interface design environment uide early model systems user interface design implementation 
proceedings dsv pages vienna 
springer verlag 
foley kim kovacevic murray 
uide intelligent user interface design environment 
intelligent user interfaces pages 
addison wesley acm press 
griffiths barclay paton gray kennedy cooper goble west smyth 
teallach model user interface development environment object databases 
proceedings pages edinburgh uk september 
ieee press 
griffiths forrester paton kennedy barclay cooper goble gray 
exploiting model techniques user interfaces database 
proceedings visual database systems pages italy may 
chapman hall 
hayes szekely lerner 
design alternatives user interface management systems experience cousin 
proceedings sigchi pages 
addison wesley april 
hoare 
communicating sequential processes 
prentice hall 
jacob 
specification language direct manipulation user interfaces 
acm transactions graphics october 
janssen ziegler 
generating user interfaces data models dialogue net specifications 
proceedings inter chi pages new york ny 
acm press 
johnson 
human computer interaction psychology task analysis software engineering 
mcgraw hill uk 
johnson johnson wilson 
rapid prototyping user interfaces driven task models 
scenario design pages london uk 
john wiley 
kim foley 
don user interface presentation design assistant 
proceedings uist pages 
acm press october 
schreiber 
fuse system integrated user interface environment 
computer aided design user interfaces pages namur belgium 
namur university press 
luo szekely neches 
management interface design humanoid 
proceedings interchi pages april 
markopoulos wilson johnson 
adept task design environment 
proceedings th hawaii international conference system sciences pages 
ieee computer society press 

software life cycle automation interactive applications ame design environment 
computer aided design user interfaces pages namur belgium 
namur university press 
myers 
user interface software tools 
acm transactions computer human interaction march 
myers mcdaniel miller kyle 
amulet environment new models effective user interface software development 
ieee transactions software engineering june 
olsen 
programming language basis user interface management 
proceedings sigchi pages may 
puerta 
mecano project comprehensive integrated support model interface development 
computer aided design user interfaces pages namur belgium 
namur university press 
puerta eisenstein 
interactively mapping task models interfaces mobi 
design specification verification interactive systems pages uk june 
puerta eisenstein 
general computational framework fo model interface development systems 
proceedings iui los angeles ca january 
published 
puerta 
management interface design knowledge modi 
proceedings iui pages orlando fl january 
rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall englewood cliffs nj 

model user interface software tools current state declarative models 
technical report graphics visualization usability center georgia institute technology 
schreiber 
specification generation od user interfaces boss system 
proceedings volume lecture notes computer sciences pages berlin 
springer verlag 
schreiber 
boss system coupling visual programming model interface design 
proceedings dsv focus computer graphics pages berlin 
springer verlag 
shneiderman 
designing user interface strategies effective human computer interaction 
addison wesley reading ma second edition 
siegel 
corba fundamentals programming 
john wiley new york ny 
singh green 
high level user interface management system 
proceedings sigchi pages may 

automatic generation interactive systems declarative models 
phd thesis georgia institute technology december 
szekely 
template mapping application data interactive displays 
proceedings uist pages 
acm press october 
szekely 
retrospective challenges model bases interface development 
computer aided design user interfaces pages xxi namur belgium 
namur university press 
szekely luo neches 
facilitating exploration interface design alternatives humanoid model interface design 
proceedings sigchi pages may 
szekely sukaviriya castells 
declarative interface models user interface construction tools mastermind approach 
engineering human computer interaction pages london uk 
chapman hall 

diane method 
computer aided design user interfaces pages namur belgium 
namur university press 
vanderdonckt 
conception assist de la pr sentation une interface machine pour une application de gestion interactive 
phd thesis notre dame de la namur belgium july 
wiecha bennett gould green 
tool rapidly developing interactive applications 
acm transactions information systems july 
wiecha 
generating user interfaces principles style rules 
proceedings uist pages 
acm press october 
wilson johnson 
bridging generation gap tasks user interface designs 
computer aided design user interfaces pages namur belgium 
namur university press 
wirsing 
algebraic specification 
handbook theoretical computer science pages 
north holland 
