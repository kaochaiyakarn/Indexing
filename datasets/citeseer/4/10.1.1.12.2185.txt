understanding self healing service discovery systems national institute standards technology gaithersburg md nist gov service discovery systems aim provide consistent views distributed components varying network conditions 
achieve aim designers rely variety self healing strategies including architecture topology failure detection recovery techniques consistency maintenance mechanisms 
previous showed various combinations self healing strategies lead significant differences ability service discovery systems maintain consistency increasing network failure 
ask contribution individual self healing strategies quantified 
give results quantify effectiveness selected combinations architecture topology recovery techniques 
results suggest prove feasible quantify ability individual self healing strategies overcome various failures 
full understanding interactions self healing strategies provide designers distributed systems knowledge necessary build effective self healing systems minimum overhead 
categories subject descriptors concurrent programming distributed programming general terms algorithms measurement performance design reliability experimentation 
keywords architecture self healing systems self repairing systems service discovery 
mills national institute standards technology gaithersburg md nist gov 
growing deployment wireless communications implying greater user mobility coupled proliferation personal digital assistants information appliances software components quite sure network connectivity available software services components nearby state network neighborhood minutes 
extreme situations example military applications software components composing distributed system may find cooperating components disappear due physical cyber attacks due jamming communication channels movement nodes communications range 
volatile environments service discovery protocols enable distributed components rediscover lost components find components provide essential services needed accomplish critical tasks 
service discovery systems include self healing strategies mitigate detect recover failures 
service discovery protocols rely self healing strategies 
architecture defines logical components relationships compose system coupled topology specifies number placement components system combination mitigate effects failures increasing system redundancy 
failure detection techniques typically include monitoring periodic announcements bounded retries resulting exceptions allow components estimate uncertainty regarding state cooperating components regarding intervening network path 
recovery techniques include application level persistence soft state define actions component take address suspected failures 
consistency maintenance mechanisms include notification polling provide means maintain synchronized state distributed components propagating state changes remote components 
previous architectural models investigate behavior various service discovery systems increasing communication failure message loss 
investigations yielded quantitative measures effectiveness responsiveness efficiency alternate system designs 
considered various combinations architecture topology consistency maintenance mechanisms vary failure recovery techniques 
extend approach quantify contribution failure recovery techniques order provide complete picture actions individual self healing strategies service discovery systems 
focus investigation combinations failure detection recovery technique limiting variables include architecture topology combinations consistency maintenance mechanism 
examine system behavior increasing communication failure 
rapide models service discovery systems previous research 
models specifications jini networking technology universal plug play 
adapted self healing strategies specifications 
remainder organized sections 
section provide overview self healing strategies service discovery systems 
second section gives quantitative summary effectiveness various combinations self healing strategy maintain consistent state distributed components duration communication failures increases 
third section investigate quantify contribution failure detection recovery techniques system effectiveness 
discuss feasibility desirability gaining full understanding interactions self healing strategies adaptive distributed systems 

discovery systems self healing service discovery systems enable distributed software components discover determine discovered components meet specific requirements 
discovery protocols include consistency maintenance mechanisms disseminate changes component availability status maintain time bounds consistent view components network 
failure detection recovery techniques enable components detect react network changes restoring communications remote components locating alternate components 
number different designs proposed service discovery systems 
example team sun microsystems designed jini networking technology general service discovery mechanism atop java tm example group microsoft intel conceived universal plug play upnp provide plug play components distributed systems 
architecture topology analysis distinct discovery systems revealed designs underlying architectures party party 
party architecture consists components types service manager sm service user su 
shows party architecture deployed component topology sm sus 
party architecture adds third component type service cache manager scm 
architecture allows multiple scms mitigate effect failures passive self healing 
shows party architecture sm sus scms 
sm maintains database service descriptions sds sd encodes essential characteristics particular service 
su seeks sds maintained sms satisfy specific requirements 
employed scm operates intermediary matching advertised sds sms sd requirements provided sus 
animate party model incorporated behaviors upnp specification 
startup su sm seeks discover relevant components network neighborhood 
lazy discovery process sm periodically announces existence sds upnp multicast group 
receiving announcements sus matching requirements request copies desired sds sm 
su stores sd copies local cache 
alternatively su may engage aggressive discovery process transmitting sd requirements queries upnp multicast group 
service user aggressive discovery multicast group service manager service user upnp multicast group unicast links tcp udp remote method invocation unicast links service manager 
party service discovery architecture service users sus service manager sm 
optional nd optional scm nd scm lazy discovery multicast group service cache manager 
party service discovery architecture service users sus service manager sm service cache manager scm optional nd scm 
sm holding sd matching requirements may respond directly su 
su may request copy relevant sds caching locally 
maintain sd local cache su expects receive periodic announcements relevant sm specified interval known time live ttl receive replies ttl 
su may discard sd 
animate party model chose behaviors described jini specification 
jini discovery process focuses discovery sms sus intermediary scms exist network neighborhood 
initiation jini component enters aggressive discovery transmits probes aggressive discovery multicast group fixed interval specified period discovered sufficient number scms 
cessation aggressive discovery component enters lazy discovery listens announcements sent intervals scms 
discovery occurs sm deposits copy sd services discovered scm specified length time ttl 
maintain sd scm ttl sm refresh sd purged 
scms match sds provided sms su requirements forward matches sus 
consistency maintenance mechanisms initial discovery information propagation sds sus consistency maintenance mechanisms obtain updates sds discovered services 
consider basic mechanisms notification polling 
polling su periodically sends queries obtain date information previously discovered sd 
party architecture su issues query directly sm sd obtained receives response 
party architecture polling consists processes sm propagates updated sd scm sd originally cached su periodically queries relevant scms 
notification immediately update occurs sm sends events announce sd changed 
receive events sd su register purpose 
party architecture su requests registration sm 
request accepted retained ttl may refreshed subsequent requests su 
party architecture su registers scm receive updates 
scm event registrations ttl may refreshed 
sd updated sm propagates update scms deposited sd scm forwards event sus registered receive updates sd 
failure detection techniques hostile military emergency response environment faults may arise due enemy jamming interference congestion physical severing cables improperly configured routing tables multi path fading nodes move terrain 
consider communication failure 
node communication may fail fully transmit receive partially transmit receive 
outbound messages interface lost transmitter fails inbound messages lost receiver fails 
detect failures discovery systems combination techniques monitoring periodic announcements bounded retries resulting exceptions 
discovery protocols specify periodic transmission key messages 
listeners monitor messages way heartbeat monitored assess health patient 
example described jini upnp provide periodic announcements availability essential resources 
failure receive scheduled announcements may indicate announcing entity failed network path blocked 
situations software components send messages reliable communication protocols persistently resend unacknowledged messages bound issuing remote exception rex bound exceeded 
failure detection allows components employ recovery techniques 
recovery techniques discovery systems generally support recovery techniques soft state application level persistence 
periodic announcements convey soft information essential state receiver cache period time consistent expected announcement heart rate 
new heartbeat may convey updated state information receiver overwrites previously cached state state arriving latest announcement heartbeat 
heartbeat fails receiver discards cached state 
heartbeat resumes receiver recovers latest state 
example failure heartbeat messages sent jini sms refresh sds cached scms sd discarded 
occurs failure periodic refreshes notification registrations jini upnp 
similarly upnp sus may commence periodic queries failure sm refresh sd ttl causes su discard knowledge sm 
su desired sd related queries cease 
method employed initial aggressive discovery phase jini scms enter lazy discovery announce 
ensures rediscovery scm sms sus fault rectified 
failure detection leads rex discovery systems generally expect application software initiate recovery guided application level persistence policy 
models depending situation implement different persistence policies ignore rex retry operation period discard knowledge 
su ignore rex received response attempted poll query recurs periodically 
models party sms party scms ignore rex received result attempted notifications 
behavior described jini upnp specifications depends reliable lower layer protocols provide robustness events 
cases retry policy attempts recover transient failures resending message received rex nominal delay 
discard policy occurs repeated failure retry relies monitoring periodic soft state announcements recover persistent failures 
indicated party model su discards sm related sds failure receive announcements sm ttl 
jini specification states discovering entity may discard scm communicate 
party model sm su deletes scm receives attempting communicate scm interval 
discarding knowledge sm upnp scm jini operations involving node cease rediscovered monitoring periodic announcements lazy aggressive discovery 

effectiveness self healing previous investigated effectiveness selected self healing strategies attempting maintain synchronized state distributed components communication failure message loss 
compared combinations party architectures topologies shown figures different consistency maintenance mechanisms notification polling 
combination failure detection monitoring periodic announcements bounded retries recovery soft state application level persistence techniques see table 
measured effectiveness probability node achieves state synchronization increasing failure rates 
summarize findings effectiveness face communications failure 
shows effectiveness combination communication failure rate increases 
failure detection recovery technique heartbeat soft state bounded retries application level persistence policy lazy discovery aggressive discovery ignore rex retry rex discard knowledge party architecture upnp su pull query initial pull sm push event su initial pull query retry retries push event registration retry su purge sd failure receive sm announcement party architecture jini sm announces scm announces messages su issues su sm issue probes purging sd intervals startup su pull query scm push event sm depositing refreshing sd copy scm retry su push event registration refresh scm retry su sm purge scm continuous rex table 
summary self healing strategies included models 
previous papers provided qualitative explanations analysis execution traces regarding contributions self healing strategy measured differences effectiveness 
summarize main findings communications failure 
indicates rough similarity effectiveness combinations ranges significant differences 
attribute similarity effectiveness fact employ similar failure detection recovery techniques combinations 
graph contains form saw tooth behaviors 
example party notification suffers significant drop effectiveness failure rate 
occurs notifications rely underlying reliable communication protocols achieve robustness 
protocols fail case communication failure notifications lost 
application software relies detection failure periodic announcements heartbeat restoration initiation recovery actions 
unfortunately upnp announcement occurs frequently 
failure rate exists substantial likelihood communication failure corrected prior announcement 
cases aggressive discovery announcement interval initiated state contained notification remains lost 
failure rate increases coincidence announcement failure notification failure probable leading initiation announcements eventually recovers state contained lost notification 
jini suffer phenomenon reasons 
jini announcements occur interval 
second jini sms exhibit persistence attempting propagate sds scms 
selected cases persistence causes scm periodically retry notifications 
despite dominance failure detection recovery techniques results show certain combinations architecture topology consistency maintenance mechanism contribute differences effectiveness 
instance sd copy propagate link party case effectiveness links party case 
reason party architecture single scm prove vulnerable communication failures links operational 
suggests party architecture effective severe failures results support 
hand party architecture allows replication scms provides greater number paths information propagate 
suggests results agree party architecture dual scm provides superior effectiveness single scm party architecture 
results indicate dual scm party architecture yields effectiveness close party architecture 
regarding consistency maintenance mechanism conclude polling built persistence lead better effectiveness notification events issued action sender response rex 
results support analysis party architecture party architecture single scm 
notification appears slightly effective polling party architecture dual scm 
suspect may notifications require scm su link operational polling requires su scm link 
party notification party polling party single scm notification party single scm polling party dual scm notification party dual scm polling communications failure rate 
effectiveness various combinations architecture topology consistency maintenance mechanism failure rate increases 

dissecting recovery strategies dissect recovery strategies decided factor recovery techniques cases recovery soft state application persistence soft state application persistence 
believe finer degree factoring enable quantify contribution various self healing strategies system effectiveness 
expect factoring reveal interactions strategies help identify situations strategies redundant complementary conflicting 
explore failure recovery technique factored experiment related failure detection technique see table factored 
eliminating soft state implies related heartbeat ignored eliminating application level persistence implies related rex bounded retries ignored 
ideas applied approach investigate contribution recovery techniques various architecture topology combinations case consistency maintenance mechanism notification fault type communication failure 
update effectiveness update effectiveness recovery strategies application level soft state recovery strategy interface failure rate 
update effectiveness party notification soft state application persistence recovery shown separately 
recovery strategies application level persistence soft state recovery strategy interface failure rate 
update effectiveness party single scm notification soft state application persistence recovery shown separately 
shows effectiveness party notification communication failure increases 
curve representing recovery techniques taken 
remaining curves depict effectiveness selected recovery techniques disabled 
recovery employed effectiveness decreases nearly linearly failure rate increases dropping failure rate reaches 
soft state recovery enabled effectiveness improves significantly 
similarly application persistence enabled effectiveness improves significantly 
shows application persistence contributes system effectiveness lower failure rates recovery contributes higher failure rates 
notification communication failure recovery techniques appear complementary 
figures show contribution recovery techniques party single scm notification dual scm notification yield different picture 
update effectiveness recovery techniques disabled effectiveness decreases nearly linearly failure rate increases rate decrease party dual scm architecture appears lower party architecture effectiveness stays failure rate 
recovery strategies application level persistence soft state recovery strategy interface failure rate 
update effectiveness party notification dual scm soft state recovery shown separately 
suggests increased robustness dual scm topology slightly mitigates effects communication failures 
party single scm architecture recovery provides poorest level performance reflecting need propagate notification links alternative path provided second scm 
note recovery technique enabled variants architecture effectiveness improves level observed recovery techniques enabled 
result indicates party single dual scm notification recovery techniques soft state application persistence redundant 
results shown figures summarized computed summary statistics table 
party notification party notification single scm party notification dual scm recovery strategies application persistence soft state recovery strategy table 
summary statistics mean interface failure rates computed curve graphs shown 
preliminary results figs 
show desirability feasibility dissecting quantitative contributions system effectiveness various recovery strategies 
results show interactions redundancy complementarity various recovery techniques identified quantified 
emerging service discovery protocols provide foundation software components discover organize system adapt changes system topology 
capabilities effect distributed component systems 
architectural models characterize architecture topology consistency maintenance mechanism failure recovery strategy contribute self healing communication failure 
context communication failure notification consistency maintenance mechanism self healing properties attributable recovery techniques topology 
results suggest prove feasible quantify ability individual self healing strategies overcome various types failure 
full understanding interactions self healing strategies provide designers distributed systems knowledge necessary build effective self healing systems minimum overhead 

acknowledgments discussed funded part darpa auspices programs 

bieber carpenter service oriented component architecture self forming self healing network centric systems www org web site 
ken arnold jini specification addison wesley 
latest version available sun 
universal plug play device architecture version microsoft june 
luckham rapide language toolset simulation distributed systems partial ordering events anna stanford edu rapide august 
mills analyzing properties behavior service discovery protocols architecture approach proceedings working conference complex dynamic systems architecture brisbane australia december 
mills elder understanding consistency maintenance service discovery architectures communications failure accepted third annual workshop software performance rome italy july 
mills elder understanding consistency maintenance service discovery architectures response message loss accepted fourth annual international workshop active middleware services edinburgh scotland july 
