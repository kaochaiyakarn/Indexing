blue alternative approach active queue management wu chang feng dilip kandlur saha kang shin order stem increasing packet loss rates caused exponential increase network traffic ietf considering deployment active queue management techniques red 
active queue management potentially reduce packet loss rates internet shows current techniques ineffective preventing high loss rates 
inherent problem queue management algorithms queue lengths indicator severity congestion 
light observation fundamentally different active queue management algorithm called blue proposed 
blue uses packet loss link idle events manage congestion 
simulation controlled experiments blue shown perform significantly better red terms packet loss rates buffer size requirements network 
important avoid high packet loss rates internet 
packet dropped reaches destination resources consumed transit wasted 
extreme cases situation lead congestion collapse 
order stem increasing packet loss rates caused exponential increase network traffic ietf considering deployment explicit congestion notification ecn active queue management techniques red random early detection 
ecn necessary eliminating packet loss internet shows red conjunction ecn ineffective preventing packet loss 
basic idea red queue management detect incipient congestion early convey congestion notification hosts allowing reduce transmission rates queues network overflow packets dropped 
red maintains exponentially weighted moving average queue length uses detect congestion 
average queue length exceeds minimum threshold min th packets randomly dropped marked explicit congestion notification ecn bit 
average queue length exceeds maximum threshold packets dropped marked 
red certainly improvement traditional droptail queues shortcomings 
fundamental problems red known active queue management techniques rely queue lengths estimator congestion 
presence persistent queue indicates congestion length gives little information severity congestion number competing connections sharing link 
busy period single source transmitting rate greater bottleneck link capacity cause queue build just easily large number sources 
red algorithm relies queue lengths inherent problem determining severity congestion 
result red requires wide range parameters operate correctly different congestion scenarios 
red achieve ideal operating point sufficient amount buffer space correctly parameterized 
light observation proposes blue fundamentally different active queue management algorithm uses packet loss link utilization history manage congestion 
blue maintains single probability uses mark drop packets queued 
queue continually dropping packets due buffer overflow blue increments marking probability increasing rate sends back congestion notification 
conversely queue empty link idle blue decreases mark ing probability 
simulation experimentation demonstrates superiority blue red reducing packet losses operating smaller buffer 
rest organized follows 
section ii gives description red shows ineffective managing congestion 
section iii describes blue provides detailed analysis evaluation performance 
section iv concludes discussion 
ii 
background biggest problems tcp congestion control algorithm drop tail queues sources reduce transmission rates detecting packet loss due queue overflow 
considerable amount time may elapse packet drop router detection source large number packets may dropped senders continue send rate network support 
red alleviates problem detecting incipient congestion early delivering congestion notification hosts allowing reduce transmission rates queue overflow occurs 
order effective red queue configured sufficient amount buffer space accommodate applied load greater link capacity instant time congestion detected queue length trigger instant time applied load decreases bottleneck link response congestion notification 
red ensure congestion notification rate sufficiently suppresses transmitting sources link 
unfortunately large number tcp sources active aggregate traffic generated extremely bursty 
bursty traffic defeats active queue management techniques red queue lengths grow shrink rapidly red react 
shows simplified pictorial example red functions congestion scenario 
congestion scenario occurs large number tcp sources active small amount buffer space bottleneck link 
shows sufficient change aggregate tcp load due tcp opening congestion window causes transmission rates tcp sources exceed capacity bottleneck link 
mismatch load capacity causes queue build bottleneck 
average queue length exceeds min th congestion control mechanisms triggered 
point congestion notification sent back hosts rate dependent queue length marking probability max tcp receivers detect packet loss observe packets ecn bits set 
response duplicate tcp ecn signals sent back sources 
duplicate ecn signals way back sources signal congestion 
sources detect congestion adjust transmission rates 
decrease offered load bottleneck link observed 
note taken offered load link capacity 
depending aggressiveness aggregate tcp sources amount buffer space available bottleneck link large amount packet loss deterministic ecn marking may occur 
behavior leads eventual underutilization bottleneck link 
way solve problem large amount buffer space red gateways 
example suggested order red intermediate router requires buffer space amounts twice bandwidth delay product 
approach fact taken increasingly large number router vendors 
unfortunately networks large products large amounts buffer adds considerable delay delay jitter 
severely impacts ability run interactive applications 
addition abundance deployed routers limited memory resources solution undesirable 
shows ideal queue management algorithm works 
congested gateway delivers congestion notification rate keeps aggregate transmission rates tcp sources just clearing rate 
red achieve ideal operating point sufficiently large amount buffer space correctly parameterized 
sources sinks sources sinks sources sinks sending rate mbs queue increases sinks generate dupacks ecn sources sinks sending rate mbs queue increases dupacks ecn travel back sources sinks queue increases queue overflows max th triggered sources detect loss ecn sending rate sources sinks sources sending rate increases mbs sinks mbs sending rate mbs queue increases sending rate mbs ewma increases trigger red queue increases sending rate sustained packet loss ecn observed queue clears period underutilization imminent due sustained packet loss ecn fig 

red example mbs sinks sources sending rate mbs queue drops ecn marks exactly correct amount packets keep sending rate sources mbs sinks generate dupacks ecn fig 

ideal scenario iii 
blue order remedy shortcomings red section proposes evaluates fundamentally different queue management algorithm called blue 
simulation experimentation blue shown overcome red shortcomings 
red designed objective minimize packet loss queueing delay avoid global synchronization sources maintain high link utilization remove biases bursty sources 
section shows blue improves matches red performance aspects 
results show blue converges ideal operating point shown scenarios small buffers 
algorithm key idea blue perform queue management directly packet loss link utilization instantaneous average queue lengths 
contrast known active queue management schemes form queue occupancy congestion management 
blue maintains single probability uses mark drop packets packet loss len event update freeze time update link idle event update freeze time update fig 

blue algorithm enqueued 
queue continually dropping packets due buffer overflow blue increments increasing rate sends back congestion notification 
conversely queue empty link idle blue decreases marking probability 
effectively allows blue learn correct rate needs send back congestion notification 
shows blue algorithm 
note shows variation algorithm marking probability configuration table red configurations dated queue length exceeds certain value 
modification allows room left queue transient bursts allows queue control queuing delay size queue large 
marking probability blue uses parameters control quickly marking probability changes time 
freeze time 
parameter determines minimum time interval successive updates allows changes marking probability take effect value updated 
experiments chapter fix freeze time constant value randomized order avoid global synchronization 
parameters determine amount incremented queue overflows decremented link idle 
experiments set significantly larger 
link underutilization occur congestion management conservative aggressive packet loss occurs congestion management conservative 
weighting heavily packet loss blue quickly react substantial increase traffic load 
note myriad ways managed 
experiments study small range parameter settings experiments additional parameter settings algorithm variations performed difference quickly queue management algorithm adapts offered load 
blue extremely simple provides significant performance improvement compared red queue reasonably configured 
configuration freeze time ms ms ms ms table ii blue configurations packet loss rates red blue order evaluate performance blue number experiments run ns small network shown 
network pareto sources mean times seconds mean times seconds run leftmost nodes rightmost nodes 
addition sources enabled ecn support randomly started second simulation kb packets 
packet loss statistics measured seconds simulation seconds 
loss statistics measured red network identical conditions 
red queue min th max th set queue size respectively 
red congestion notification mechanism aggressive possible setting max 
experiments ideal setting max minimizes queueing delay packet loss rates red 
settings range red configurations studied vary value weight average queue length calculation red 
interesting note gets smaller impact queue length red congestion management algorithm gets smaller 
extremely small values red algorithm decoupled queue length acts blue 
table shows configurations red 
blue experiments set order magnitude larger 
values freeze time varied ms ms 
additional simulations wider range values performed showed similar results 
mbs mbs ms ms ms ms ms ms ms ms ms ms ms ms mbs mbs fig 

network topology buffer size ms delay buffer size ms delay percent link utilization loss rates sources link utilization sources buffer size ms delay buffer size ms delay percent link utilization loss rates sources link utilization sources fig 

packet loss rates red blue shows loss rates observed different queue sizes blue red connections 
experiments queue bottleneck link sized kb kb 
corresponds queueing delays range ms ms shown 
shows connections blue maintains zero loss rates queue sizes bandwidth delay product network 
contrast red suffers double digit loss rates amount buffer space decreases 
interesting point red loss graph shown shows significant dip loss rates buffering delay ms 
occurs special operating point red average queue length stays max th time 
points particular experiment buffering delay offered load match perfectly cause average queue length stay max th operating region red queue marks packet offered load aggressive keep queue full 
essentially allows red behave times blue marking probability queueing delay equivalent max th unique state operation immediately disrupted changes load round trip times 
buffering delay increased corresponding round trip times increase cause aggregate tcp behavior aggressive 
deterministic marking aggressive load causes fluctuations queue length increase packet loss rates red packets times 
buffering delay decreased corresponding round trip times decrease cause aggregate tcp behavior aggressive 
result packet loss accompanied deterministic marking 
combined leads fluctuations queue length 
load perfectly selected average queue length red remain max th queue avoid packet loss prevent queue fluctuations marking packet 
shows link utilization experiments 
shows link remains fully utilized red blue regardless parameter settings 
shows number connections increased blue significantly outperforms red 
order magnitude buffer space red match blue loss rates ms buffering bottleneck link 
interesting note blue marking probability remains duration experiments 
packet marked offered load cause significant amount packet loss 
reason case tcp sources invoke retransmission timeout receiving ecn signal congestion window 
section iii shows significantly influence performance red blue 
shows link utilization connection experiments 
regardless parameter settings red blue achieve full link utilization 
important consequence blue congestion control performed minimal amount buffer space 
reducing endto delay network 
addition smaller buffering requirements allow memory allocated high priority packets frees memory router functions storing large routing tables 
blue allows legacy routers perform limited memory resources 
understanding blue fully understand difference red blue algorithms compares queue length plots additional experiment configuration blue configuration red 
experiment workload infinite sources changed increasing number connections seconds 
shows red sustains continual packet loss experiment 
addition lower loads periods packet loss followed periods underutilization deterministic packet marking dropping eventually causes sources reduce transmission rates 
contrast shows blue manages marking rate intelligently queue length plot stable 
congestion notification rate causes periods sustained packet loss periods continual underutilization 
offered load rises connections blue sustain significant amount packet loss 
plots marking probability count red experiment 
note average queue length ave red contributes directly marking probability linear function ave max min th max th min th 
shown marking probability red fluctuates considerably 
contrast shows marking probability blue 
shows marking probability converges value results rate congestion notification prevents packet loss keeps link utilization high experiment 
fact situation blue prevent sustained packet loss packet marked time actual queue length kb time red blue fig 

queue length plots red blue time time red count blue fig 

marking behavior red blue offered load overwhelms bottleneck link 
described earlier occurs number sources increased 
reason packet loss occurs packet ecn marked sets experiments tcp implementation invoke rto ecn signal received congestion window 
adversely affects performance red blue experiment 
note comparison marking probabilities red blue gives insight red perform better 
placing low pass filter calculated marking probability red may possible red marking mechanism behave manner similar blue 
low packet loss rates low queueing delays high link utilization extremely important queue length marking probability plots allow explore effectiveness red blue preventing global synchronization removing biases bursty sources 
red attempts avoid global synchronization randomizing marking decision spacing marking 
unfortunately aggregate tcp load changes dramatically large amount connections impossible red achieve goal 
shows marking probability red changes considerably short periods time 
red fails mark packets evenly time remove synchronization sources 
shows marking probability blue remains steady 
result blue marks packets randomly evenly time 
consequently better job avoiding global synchronization 
goal red eliminate biases bursty sources network 
done limiting queue occupancy room left queue buffer transient bursts 
addition marking function red takes account packet marking time calculations order reduce probability consecutive packets belonging burst marked 
single marking probability blue achieves goal equally 
queue length plot blue shows queue occupancy remains actual capacity allowing room burst packets 
addition marking probability remains smooth large time scales probability consecutive packets smoothly transmitting source marked consecutive packets bursty source 
effect ecn timeouts previous experiments tcp sources support ecn perform retransmission timeout receipt ecn signal congestion window 
negatively impacts packet loss rates red blue high loads 
shows queue length plot red blue experiments section iii tcp sources enabled ecn timeouts 
shows deterministically marking packets max th red oscillates periods packet loss periods underutilization described section ii 
note contrast ecn timeouts tcp aggressive keep queue occupied load sufficiently high 
interesting point red effectively prevent packet loss setting max th value sufficiently far size queue 
experiment small amount loss occurs deterministic ecn marking happen time prevent packet loss 
ecn timeouts allows red avoid packet loss deterministic marking eventually causes underutilization bottleneck link 
shows queue length plot blue experiment 
contrast red blue avoids deterministic marking maintains marking probability allows achieve high link utilization avoiding sustained packet loss workloads 
shows corresponding marking behavior red blue experiment 
shows blue maintains steady marking rate changes workload changed 
hand red calculated marking probability fluctuates experiment 
queue fully occupied red drops packets causing subsequent period underutilization described section ii 
conversely queue empty red packets causing subsequent period high packet loss offered load increases link capacity 
shows ecn timeouts impact performance red blue 
shows loss rates link utilization connection experiments section iii 
shows blue maintains low packet loss rates high link utilization experiments 
shows ecn timeouts allows red reduce amount packet loss comparison 
red deterministically marks packets suffers poor link utilization correctly parameterized 
shows extremely small value configuration allows red approach performance blue 
described earlier small value effectively decouples congestion management queue length calculation making red queue management behave blue 
implementation order evaluate blue realistic setting implemented freebsd altq 
implementation experiments run testbed shown 
network node link labeled cpu model link bandwidth respectively 
note links shared ethernet segments 
acknowledgments reverse path collide interfere data packets forward path 
shows freebsd routers red blue queue management outgoing interfaces connect ethernet fast ethernet segments 
order time actual queue length kb time red blue fig 

queue length plots red blue ecn timeouts time time count red blue fig 

marking behavior ecn timeouts generate load system variable number netperf sessions run ibm pc xl ibm pc thinkpad 
router queue congested ethernet interface sized kb corresponds queueing delay ms 
experiments red configuration min th kb max th kb max 
experiments blue freeze time ms 
figures show throughput packet loss rates bottleneck link range workloads 
throughput measures rate packets forwarded congested interface packet loss rate measures ratio number packets dropped queue total number packets received queue 
experiment throughput packet loss rates measured second intervals averaged 
note tcp sources experiment implement ecn timeouts 
shows blue queue optimally configured red queue maintain relatively high levels throughput loads 
red periodically allows link underutilized throughput remains slightly blue 
shows red sustains increasingly high packet loss number connections increased 
aggregate tcp traffic aggressive number connections increases difficult red maintain buffer size ms delay buffer size ms delay percent link utilization loss rates sources link utilization sources buffer size ms delay buffer size ms delay percent link utilization loss rates sources link utilization sources fig 

performance red blue ecn timeouts mbs mhz mb mhz mb thinkpad ibm pc mhz mb ibm pc mhz mb mhz mb mhz mb mbs mbs fig 

experimental testbed low loss rates 
fluctuations queue lengths occur abruptly red algorithm oscillates periods sustained marking packet loss periods minimal marking link underutilization 
contrast blue maintains relatively small packet loss rates loads 
higher loads packet loss observed blue maintains marking probability approximately causing mark packet forwards 
iv 
demonstrated inherent weakness current active queue management algorithms queue occupancy algorithms 
order address problem fundamentally different queue management algorithm called blue designed evaluated 
blue uses number connections blue red number connections percent packet loss blue red throughput percent packet loss fig 

queue management performance packet loss link utilization history congested queue queue lengths manage congestion 
part going extensions blue considered 
particular mechanisms managing non responsive flows examined 
order stem increasing amount non responsive traffic scalable queuing traffic management algorithms deployed prevent congestion collapse 
addition development enhanced blue queue management algorithm similar enhanced red considered 
blue buffer requirements needed support differentiated services greatly reduced 
braden recommendations queue management congestion avoidance internet 
rfc april 
cho 
framework alternate queueing traffic management pc unix routers 
usenix annual technical conference june 
guerin 
protective buffer management policies 
ieee acm transactions networking june 
feng kandlur saha shin 
techniques eliminating packet loss congested tcp ip networks 
um cse tr october 
feng kandlur saha shin 
understanding tcp dynamics integrated services internet 
proc 
nossdav may 
feng kandlur saha shin 
red gateway 
proc 
ieee infocom march 
floyd jacobson 
traffic phase effects packet switched gateways 
internetworking research experience september 
floyd jacobson 
random early detection gateways congestion avoidance 
acm ieee transactions networking august 
jacobson 
congestion avoidance control 
proceedings acm sigcomm pages august 
netperf 
public netperf homepage www netperf org 
public netperf homepage 
ns lbnl network simulator 

ee lbl gov ns 

ramakrishnan floyd 
proposal add explicit congestion notification ecn ip 
rfc january 
song 
high performance tcp 
computer communication review october 
