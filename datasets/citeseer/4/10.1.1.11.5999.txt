revised draft appear perspectives computer science proceedings oxford microsoft symposium honour sir tony hoare held september published 
version dated august distributed meeting contained serious error 
intuitionistic reasoning shared mutable data structure john reynolds department computer science carnegie mellon university july drawing early burstall extend hoare approach proving correctness imperative programs deal programs perform destructive updates data structures containing pointer location 
key concept independent conjunction holds true depend distinct areas storage 
concept precise intuitionistic logic assertions kripke semantics possible worlds heaps mapping locations tuples values 
dichotomy functional imperative programming obscured variety programming techniques fit comfortably approach 
fact paradigms man land inhabited useful intuitively straightforward programs poorly served type systems program proving methodologies 
research sponsored national science foundation ccr 
particularly important programs data structure may contain pointer location program destructively updates contents locations 
class programs includes interesting practically important algorithms far hacker jungle 
surprisingly little research reasoning programs 
burstall gave correctness proofs imperative programs alter data structures novel kind assertion called distinct tree system approach extended kowaltowski 
cook oppen devised general approach extending hoare logic extremely complicated inference rules 
morris extended weakest precondition logic generalizing notion substitution 
late mason talcott investigated reasoning program equivalence lisp functional languages expression evaluation alter data structures side effect extended approach logic reasoning programs 
pitts stark studied operational reasoning ml language data altering expressions 
simple values stored locations structured values contain locations 
research builds earlier stark languages create local names 
builds burstall ideas fit nicely framework reasoning imperative programs devised time hoare earlier floyd naur 
burstall distinct tree system sequence assertions written delta delta delta notation described distinct region storage assignment single location change believe idea organizing assertions localize effect mutation may key scalability reasoning shared mutable data structure 
goal overcome limitations burstall 
formalism called triple described fragment data structure internal sharing 
technically triples morphisms categories called free theories lawvere 
sharing occurred pointers variables fragments fragment particular assertion describe structures fixed finite bound number shared locations 
subtler limitation specific notion composition triples 
roughly speaking composed identifying pointers coming going doubly linked list simple example violates limitations 
structure location shared description fragment representing arbitrary sequence permit unbounded internal sharing 
natural way composing fragments identify pointer coming going pointer coming going preliminary version flawed serious error inference rule cons operation unsound 
version discussed section repaired flaw substantially simplified development interpreting assertions intuitionistically kripke semantics heaps possible worlds 
similar intuitionistic semantics discovered independently hearn logic bunched implications 
syntax programming language simple imperative language originally axiomatized hoare additional commands manipulation list structures 
structures similar lisp restricted elimination property lists atoms extended permitting positive number values cons ed 
specifically lisp constructor cons generalized cons cons cons selectors car cdr contrast lisp constructors selectors permitted commands expressions 
reason restriction power kind proof system advocated hoare floyd dijkstra depends ability expression programming language assertion 
particular substituting expressions variables tautology give valid assertion 
constructors expressions side effects 
instance substitute cons tautology obtain cons cons hold going distinguish different locations contents 
selectors expressions interaction independent conjunction operator 
instance substitute tautology obtain false operands depend distinct regions storage 
permitting constructors selectors expressions introduce novel forms commands constructors create new list structures selectors evaluate mutate structures cons various denote expressions 
assignment symbol give commands familiar appearance informal meaning obvious 
formally assignment commands particular obey hoare axiom assignment 
hoare assertions include boolean expressions enriched quantifiers 
addition introduce form holds value location stored tuple containing values 
add independent conjunction operator assertion form denote assertions 
roughly speaking form true true depend distinct regions storage 
define forms specification original partial correctness triple introduced hoare write fpg fqg analogous total correctness specification write 
semantics meaning language specifications precise define value integer atom location integers atoms locations comprise disjoint countably infinite sets nil particular atom values integers atoms locations nil atoms formalize mutable list structures complicate usual notion state computation consists parts store maps finite set variables values heap maps finite set locations nonempty tuples values 
stores values finite set variables heaps values finite set locations heaps fin locations heaps states stores theta heaps state hj oei said complete domain heap component includes locations occur state dom integers atoms dom oe dom oe oe integers atoms dom oe define set hj oei hj oei states hj oei classes phrases programs specifications semantic function giving different kind meaning 
semantic functions indexed finite set variables include free variables argument semantic function 
write set ordinary expressions free variables belong similarly phrase classes 
ffl ordinary expressions gamma stores values ffl boolean expressions gamma stores ftrue falseg ffl commands gamma comm comm 
ffl assertions gamma assert assert stores heaps ftrue falseg ffl specifications gamma spec spec ftrue falseg notice ordinary boolean expressions depend heap 
reflects decision permit constructors selectors expressions 
assertions depend heap called pure commands depend change heap 
usual denotational semantics denote nonterminating execution command 
meaning expressions commands specifications standard 
note implicit quantification specifications extends store heap components complete states fp fp spec hj oei joe hj oei implies oe hj oe hj oei spec hj oei joe implies hj oei oe hj oe hj oei standard meaning assertions defined incomplete complete states kripke semantics possible worlds heaps ordered extension 
logic assertions intuitionistic classical 
boolean expression assertion pure meaning independent heap assert joe iff simplest impure assertion describes value heap single location assert joe iff dom oe oe ji operations conjunction disjunction quantification defined conventionally heap treated pointwise assert joe iff assert joe assert joe assert joe iff assert joe assert joe assert joe iff values assert oe assert joe iff values assert oe denotes store domain fxg maps maps variables 
analogous quantifiers range integers atoms locations left reader 
hand definitions implication negation involve implicit universal quantification extensions heap assert joe iff oe oe assert joe implies assert joe assert joe iff oe oe assert joe define independent conjunction operation 
idea depend distinct regions heap captured requiring hold restrictions heap disjoint domains assert joe iff oe oe oe oe oe oe dom oe dom oe empty assert joe assert joe able define independent conjunction simply meaning assertions states just complete states meaning obeys monotonicity law characteristic kripke semantics assert joe oe oe assert joe obtain property sacrificed law excluded middle 
instance store maps variable location belong domain heap oe assert joe assert joe assert joe false 
expects intuitionistic logic axiom schemata converses second third lines 
pure assertions contain behave classically 
insight operation independent conjunction provided simple example suppose store maps distinct locations consider heaps oe fhj ig oe fhj ig disjoint domains 
joe oe oe oe oe oe oe oe oe oe oe oe oe oe false general independent conjunction described axiom schemata pure free inference rule note analogous schemata valid 
inference rules specifications prohibiting expressions depending heap insure partial correctness rules hoare analogous rules see example chapter remain valid assertions containing 
need introduce additional rules new commands depend affect heap 
new commands terminate rules identical partial total correctness 
command examines tuple stored heap location value ith component tuple value operation similar assignment hope extend hoare assignment axiom describe 
axiom involves substitution insert expressions violating purity 
substitutions allowed preserve 
mimic effect substitution existential quantifiers suppose 
distinct variables occur free occur free denote result substituting gamma fpg command cons extends heap new location mapped tuple values 
new location value hoare assignment axiom introduce existential quantifier postcondition style floyd 
operation assert new location plays role part postcondition inherited precondition suppose variables distinct occur free 
denote result substituting expression assertion fpg cons happily rule simplified variable occur precondition right side command specified suppose variables occur free 
fpg cons fp rule command alters heap location value changing ith component tuple location value operator precondition separates assertion heap value assertions parts heap affected command suppose variables 
xm occur free expression xm xm importance intuitionistic logic illustrated instance simplified cons rule cons postcondition false instance unsound precondition false intuitionistic logic hold extensions heap current immediately execution cons operation including extension current immediately 
instance unsound classical logic preliminary version 
inductive definition predicates deal real programs small ones permit predicates defined induction sets data 
instance prove correctness program uses list representation able assert list representation say represents particular sequence values 
define representation function data set sequence values predicates 
specifically formal previous sections allow variables occur assertions programs called logical ghost variables range inductively defined sets allow functions sets predicates defined induction primitive recursion 
example consider representation sequences lists 
example essentially similar burstall write ffl denote empty sequence greek letters variables ranging sequences write delta indicate concatenation assume value sequence length 
list ffl list deltaff list ff inductive definition function list sequences predicates list ff asserts sequence ff represented list fragment location precisely asserts succession cons cells location containing successive elements ff components linked second components final link containing ff delta delta delta ff definition obvious list trivially show induction length ff list ff deltafi list ff list fi result obtain list ff deltab list ff definition list assertion list ff implies list fragment contains distinct cons cell element ff 
location cells case cyclic structure described 
instance ff nonempty list ff describes cycle length length ff 
nil assertion hold list deltaff hold 
fact list ff nil ff ffl nil ff ffl complex example goes burstall framework representation sequences doubly linked lists 
write dlist ff assert existence collection cons cells components give elements ff second components links forward list final link containing third components links backward list final link containing ff oe delta delta delta oe delta delta delta ff function defined inductively dlist ffl dlist deltaff dlist ff definition obvious dlist trivially show induction length ff dlist ff deltafi dlist ff dlist fi result obtain dlist ff deltab dlist ff singly linked case assertion dlist ff describes list fragment containing distinct cons cell element ff 
existence unique back links prevents list having cyclic tail isolated cyclic list described dlist ff ff nonempty 
distinguish empty nonempty lists derive dlist ff nil ff ffl nil nil ff ffl nil ff ffl ff ffl annotated specifications small program formal proof specification sense sequence tree instances inference rules usually large readable 
fortunately annotate specification intermediate assertions way proof mechanically straightforwardly derived annotations 
section give illustrative proof form annotated specification 
doing useful independently main subject define notion precisely partial correctness case 
basic idea goes back proof outlines concurrent computations owicki gries formalized schneider chapter 
formulation sequential programs permits omission intermediate assertions derived straightforwardly context 
call specification annotated derived inference rules 
rules easily derivable hoare rules rules section intermediate assertions occur certain rules 
presence intermediate assertions rules determinate specification instance rule premisses instance determined 
straightforward derive proof annotated specification specification hoare style proof albeit derived rules obtained erasing intermediate assertions 
course proof contain verification conditions implications assertions verified independently 
pragmatically supply intermediate assertions verification tractable 
rules deal assignment 
determinacy stems fact hoare assignment axiom precondition determined postcondition assignment command fp fpg fp fp fp fpg similar situation holds rule select assign command precondition determined postcondition command suppose 
distinct variables occur free occur free denote result substituting gamma fp fpg fp gamma fp fpg contrast remaining axioms heap dependent commands section property postcondition determined precondition heap dependent command 
insures determinacy suppose variables distinct occur free 
denote result substituting expression assertion fpg cons fp fp fpg cons fp suppose variables 
xm occur free expression xm xm fp xm fp xm fp rules skip commands fpg skip fp fp bg fp fp bg fp fpg fi fp fp bg fpg fpg od fp rules corresponding hoare rules sequencing strengthening preconditions weakening postconditions 
rules intermediate assertions appear fpg fp fp fp fpg fp fp fp fp fpg fp fp fpg fp fpg fp fp example illustrate formalism example annotated partial correctness specification program deleting zero valued elements doubly linked list 
execution program forward linkage list begins location backward linkage begins location single loop moves forward list 
loop deletion operation symmetric cell deleted 
just test variable points cell tested removed preceding list fragment forward linkage backward linkage nil list fragment forward linkage nil backward linkage nil ff oe delta delta delta oe delta delta delta ff oe oe fi oe delta delta delta oe delta delta delta nil fi current cell removed program tests preceding list fragment empty resets forward link point list fragment 
performs symmetric operation list fragment 
notation ff gamma denotes sequence obtained ff deleting occurrences zero 
fl nil nil ff fi ff dlist ff nil nil dlist fi nil nil ff deltafi fl ff gamma ffg nil ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ffg nil ff fi ff dlist ff nil dlist fi nil ff deltab deltafi fl ff gamma ffg ff fi ff dlist ff nil dlist fi nil ff deltab deltafi fl ff gamma ffg ff fi ff dlist ff nil dlist fi nil ff delta deltafi fl ff delta gamma ffg ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ffg nil ff fi ff ff ffl nil dlist fi nil ff deltafi fl ff gamma ffg ff fi ff ff ffl nil dlist fi nil ff deltafi fl ff gamma ffg ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ff ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ff fi ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ffg nil ff fi ff dlist ff nil fi ffl nil ff deltafi fl ff gamma ffg ff fi ff dlist ff nil fi ffl nil ff deltafi fl ff gamma ffg ff fi ff dlist ff nil dlist fi nil ff deltaa deltafi fl ff gamma ffg ff fi ff dlist ff nil dlist fi nil ff deltaa deltafi fl ff gamma ffg fi ff fi ff dlist ff deltab nil dlist fi nil ff deltab deltafi fl ff deltab gamma ff ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ffg fi ff fi ff dlist ff nil dlist fi nil ff deltafi fl ff gamma ffg od fl gamma nil nil directions described preliminary immediate need explore examples 
particular clear structure represented mutable data structures defined inductively example mutable data structures represent cyclic graphs 
may possible extend approach dynamic logic commands occur modal operators assertions 
necessitate giving meaning execution commands incomplete states 
command tries examine heap outside domain raise heap fault immediately enclosing assertion false 
easy prove ftrueg cons fx existentially quantified location disconnected data structures accessible computation eliminated garbage collection 
course view garbage collection program optimization effect observable computations example sound 
fact unobservable assertion 
straightforward impose development type system recursive data type declarations similar standard ml concept 
refined type systems permit specification fields mutable pointers required unique 
need move form higher order formalism akin object oriented programming mutable shared data structures contain closures 
obvious question connection syntactic control interference specification logic deal interference higher order heap free setting 
superficially quite different recurring possible world semantics suggestive 
author peter hearn insights helpful suggestions 
rodney burstall 
techniques proving correctness programs alter data structures 
bernard meltzer donald michie editors machine intelligence pages 
edinburgh university press edinburgh scotland 
kowaltowski 
correctness programs manipulating data structures 
memorandum erl university california berkeley california september 
stephen cook derek oppen 
assertion language data structures 
conference record second acm symposium principles programming languages pages new york 
acm 
derek oppen stephen cook 
proving assertions programs manipulate data structures 
proceedings seventh annual acm symposium theory computing pages new york 
acm 
joseph morris 
general axiom assignment assignment linked data structures proof waite algorithm 
broy gunther schmidt editors theoretical foundations programming methodology pages 
reidel dordrecht holland 
ian mason 
semantics destructive lisp 
csli lecture notes number 
center study language information menlo park ca 
ian mason 
verification programs destructively manipulate data 
science computer programming april 
ian mason carolyn talcott 
equivalence functional languages effects 
journal functional programming july 
furio honsell ian mason scott smith carolyn talcott 
variable typed logic effects 
information computation may 
ian mason 
order logic effects 
theoretical computer science october 
andrew pitts ian stark 
operational reasoning functions local state 
andrew gordon andrew pitts editors higher order operational techniques semantics pages 
cambridge university press 
ian stark 
names higher order functions 
ph 
dissertation university cambridge cambridge england december 
ian stark 
categorical models local names 
lisp symbolic computation february 
ian stark 
names equations relations practical ways reason new 
fundamenta informaticae 
hoare 
axiomatic basis computer programming 
communications acm october 
reprinted pages 
hoare 
proof program find 
communications acm january 
reprinted pages 
robert floyd 
assigning meanings programs 
schwartz editor mathematical aspects computer science volume proceedings symposia applied mathematics pages providence rhode island 
american mathematical society 
peter naur 
proof algorithms general snapshots 
bit 
william lawvere 
functorial semantics algebraic theories 
proceedings national academy sciences united states america july 
saul kripke 
semantical analysis intuitionistic logic john crossley michael dummett editors formal systems recursive functions studies logic foundations mathematics pages amsterdam 
north holland 
peter hearn 
private communication 
dated january 
peter hearn david pym 
logic bunched implications 
bulletin symbolic logic june 
john reynolds 
theories programming languages 
cambridge university press cambridge england 
susan owicki david gries 
axiomatic proof technique parallel programs acta informatica 
reprinted pages 
fred schneider 
concurrent programming 
springer verlag new york 
vaughan pratt 
semantical considerations floyd hoare logic 
th annual symposium foundations computer science pages long beach california 
ieee computer society 
john reynolds 
syntactic control interference 
conference record fifth annual acm symposium principles programming languages pages new york 
acm 
reprinted vol 
pages 
peter hearn john power makoto robert tennent 
syntactic control interference revisited 
electronic notes theoretical computer science 
reprinted vol 
pages 
reddy 
global state considered unnecessary object semantics 
lisp symbolic computation february 
reprinted vol 
pages 
john reynolds 
idealized algol specification logic 
eel editor tools notions program construction pages cambridge england 
cambridge university press 
reprinted vol 
pages 
robert tennent 
semantical analysis specification logic 
information computation april 
reprinted vol 
pages 
peter hearn robert tennent 
semantical analysis specification logic 
information computation november 
reprinted vol 
pages 
david gries editor 
programming methodology 
springer verlag new york 
peter hearn robert tennent editors 
algol languages 
birkhauser boston massachusetts 
volumes 

