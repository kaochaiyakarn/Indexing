proceedings genetic evolutionary computation conference gecco 
san francisco ca morgan kaufmann winner best award genetic algorithms efficient reinforcement learning evolving neural network topologies kenneth stanley department computer sciences university texas austin austin tx cs utexas edu risto miikkulainen department computer sciences university texas austin austin tx risto cs utexas edu neuroevolution currently strongest method pole balancing benchmark reinforcement learning tasks 
earlier studies suggested advantage evolving network topology connection weights leading neuroevolution systems evolve fixed networks 
evolving structure improve performance open question 
article introduce system neuroevolution augmenting topologies neat 
show structure evolved principled method crossover protecting structural innovation incremental growth minimal structure learning significantly faster stronger best fixed topology methods 
neat shows possible evolve populations increasingly large genomes achieving highly complex solutions difficult optimize 
tasks real world involve learning sparse reinforcement 
navigating maze search survivors controlling bank elevators making tactical decision game frequently immediate feedback available evaluate decisions 
difficult optimize complex systems hand learning sparse reinforcement substantial goal ai 
neuroevolution ne artificial evolution neural networks genetic algorithms shown great promise reinforcement learning tasks 
example difficult versions pole balancing problem standard benchmark reinforcement learning systems ne methods outperformed reinforcement learning techniques gruau moriarty miikkulainen :10.1.1.40.6026
ne systems tested pole balancing evolve connection weights networks fixed topology gomez miikkulainen moriarty miikkulainen saravanan fogel whitley wieland 
hand ne systems evolve network topologies connection weights simultaneously proposed angeline gruau yao :10.1.1.40.6026
major question ne topology weight evolving artificial neural networks enhance performance ne 
hand evolving topology weights search difficult 
evolving topologies save time having find right number hidden neurons particular problem gruau :10.1.1.40.6026
study topology evolving method called cellular encoding ce gruau compared fixed network method called enforced subpopulations esp double pole balancing task velocity inputs gomez miikkulainen 
esp priori knowledge correct number hidden nodes solving task time failed restarted new random number hidden nodes 
esp times faster ce 
words evolving structure improve performance study 
article aims demonstrate opposite done right evolving structure connection weights significantly enhance performance ne 
novel ne method called neuroevolution augmenting topologies neat designed take advantage structure way minimizing dimensionality search space connection weights 
structure evolved topologies minimized grown incrementally significant performance gains result 
node sensor node sensor node sensor node output node hidden weight enabled weight disabled weight enabled weight enabled weight weight weight enabled enabled enabled genome genotype node genes connect 
genes network phenotype genotype phenotype mapping example 
genotype depicted produces shown phenotype 
notice second gene disabled connection specifies nodes expressed phenotype 
evolving structure incrementally presents technical challenges genetic representation allows disparate topologies crossover meaningful way 
topological innovation needs generations optimize protected disappear population prematurely 
topologies minimized evolution need specially contrived fitness function measures complexity neat method consists solutions problems described 
method validated pole balancing tasks neat performs times faster cellular encoding times faster esp results show structure powerful resource ne appropriately utilized 
neuroevolution augmenting topologies neat neat designed address problems raised 
explaining genetic encoding neat continue describing components specifically address issue 
genetic encoding neat genetic encoding scheme designed allow corresponding genes easily lined genomes crossover mating 
genomes linear representations network connectivity 
genome includes list connection genes refers node genes connected 
connection gene specifies node node weight connection connection gene expressed enable bit innovation number allows finding corresponding genes explained 
mutation neat change connection weights dis dis dis dis dis mutate add connection mutate add node types structural mutation neat 
types adding connection adding node illustrated genes phenotypes 
top number genome innovation number gene 
innovation numbers historical markers identify original historical ancestor gene 
new genes assigned new increasingly higher numbers 
network structures 
connection weights mutate ne system connection perturbed generation 
structural mutations occur ways 
mutation expands size genome adding gene 
add connection mutation single new connection gene added connecting previously unconnected nodes 
add node mutation existing connection split new node placed old connection 
old connection disabled new connections added genome 
method adding nodes chosen order integrate new nodes immediately network 
mutation genomes neat gradually get larger 
genomes varying sizes result completely different connections positions 
ne cross sensible way 
section explains neat addresses problem 
tracking genes historical markings turns information evolution tells exactly genes match genes individuals topologically diverse population 
information historical origin gene population 
genes historical origin represent structure possibly different weights derived ancestral gene point past 
system needs know genes line keep track historical origin gene system 
disjoint excess excess parent parent parent offspring parent matching genomes different network topologies innovation numbers 
parent parent look different innovation numbers shown top gene tell genes match 
topological analysis new structure combines overlapping parts parents different parts created 
case parents equally fit genes inherited parents 
offspring inherit disjoint excess genes fit parent 
tracking historical origins requires little computation 
new gene appears structural mutation global innovation number incremented assigned gene 
innovation numbers represent chronology appearance gene system 
example say mutations occurred system 
new connection gene created mutation assigned number new connection genes added new node mutation assigned numbers 
genomes mate offspring inherit innovation numbers gene innovation numbers changed 
historical origin gene system known evolution 
historical markings give neat powerful new capability effectively avoiding problem competing conventions montana davis radcliffe schaffer 
system knows exactly genes match 
crossing genes genomes innovation numbers lined 
genes called matching genes 
genes match disjoint excess depending occur outside range parent innovation numbers 
represent structure genome 
composing offspring genes randomly chosen parent matching genes excess disjoint genes included fit parent equally fit parents 
way historical markings allow neat perform crossover linear genomes need expensive topological analysis 
adding new genes population sensibly mating genomes representing different structures system form population diverse topologies 
turns population maintain topological innovations 
smaller structures optimize faster larger structures adding nodes connections usually initially decreases fitness network augmented structures little hope surviving generation innovations represent crucial solving task long run 
solution protect innovation population explained section 
protecting innovation speciation speciation commonly applied multimodal function optimization coevolution modular systems main function preserve diversity mahfoud potter de jong 
borrow idea fields bring protects innovation 
speciation allows organisms compete primarily niches population large 
way topological innovations protected new niche time optimize structure competition niche 
idea divide population species similar topologies species 
task appears topology matching problem 
turns historical markings offer efficient solution 
number excess disjoint genes pair genomes natural measure compatibility 
disjoint genomes evolutionary history share compatible 
measure compatibility distance different structures neat simple linear combination number excess disjoint genes average weight differences matching genes 
coefficients allow adjust im factors factor number genes larger genome normalizes genome size set genomes small consist fewer genes 
distance measure allows compatibility threshold genomes compared species time genomes distance randomly chosen member species placed species 
genome placed species condition satisfied genome species 
measuring pair genomes linear number connections precisely expresses compatibility multidimensional topologies 
efficiency possible historical markings 
reproduction mechanism neat explicit fitness sharing goldberg richardson organisms species share fitness niche 
species afford big organisms perform 
species take entire population crucial evolution 
original fitnesses adjusted dividing number individuals species 
species grow shrink depending average adjusted fitness population average ij old new number individuals species ij adjusted fitness individual species mean adjusted fitness entire population 
best performing species randomly mated generate offspring replacing entire population species 
net effect population topological innovation protected 
final goal system perform search solution efficiently possible 
goal achieved minimizing dimensionality search space 
minimizing dimensionality incremental growth minimal structure typically start initial population random topologies angeline dasgupta mcgregor gruau zhang muhlenbein rare cases fitness entire population improve generations top species allowed reproduce search promising spaces :10.1.1.40.6026

way topological diversity introduced population outset 
clear diversity necessary useful 
population random topologies great deal unjustified structure single fitness evaluation 
way know structure necessary 
costly connections network contains higher number dimensions need searched optimize network 
random topologies algorithm may waste lot effort optimizing unnecessarily complex structures 
contrast neat biases search spaces starting uniform population networks zero hidden nodes inputs connect directly outputs 
new structure introduced incrementally structural mutations occur structures survive useful fitness evaluations 
words structural elaborations occur neat justified 
population starts minimally dimensionality search space minimized neat searching fewer dimensions fixed topology ne systems 
minimizing dimensionality gives neat performance advantage compared approaches discussed 
pole balancing experiments pole balancing benchmark task reinforcement learning tasks techniques employed neat difference 
potential applications robot navigation game playing open problems evaluation difficult 
focus pole balancing domain reinforcement learning benchmark years anderson barto gomez miikkulainen gruau michie chambers moriarty miikkulainen saravanan fogel watkins dayan whitley wieland easy compare methods :10.1.1.40.6026
surrogate real problems part pole balancing fact real task difficulty adjusted 
earlier comparisons done single pole version task easy modern methods 
demonstrate advantage evolving structure double pole balancing experiments 
poles connected moving cart hinge neural network apply force cart keep poles balanced long possible going boundaries track 
system state defined cart position velocity pole position angular velocity second pole position angular velocity 
control possible poles different lengths respond differently control inputs 
double pole balancing sufficiently challenging best current methods 
neuroevolution generally performs better task standard reinforcement learning value functions policy iteration learning vaps watkins dayan gomez miikkulainen 
question studied evolving structure lead greater ne performance 
comparisons versions double pole balancing task velocity inputs included velocity information 
task markovian allows comparing different systems 
away velocity information task difficult network estimate internal state lieu velocity requires recurrent connections 
double pole balancing velocity problem neat compared published results ne systems 
represent standard population approaches saravanan fogel wieland 
saravanan fogel evolutionary programming relies entirely mutation connection weights wieland mating mutation 
second systems sane moriarty miikkulainen esp gomez miikkulainen evolve populations neurons population network blueprints specifies build networks neurons assembled fixed topology networks evaluation 
sane maintains single population neurons 
esp improves sane maintaining separate population hidden neuron position complete network 
knowledge results esp best achieved far task 
double pole balancing velocity problem neat compared systems demonstrated able solve task cellular encoding ce gruau esp success ce attributed ability evolve structures 
esp fixed topology ne system able complete task times faster simply restarting random number hidden nodes got stuck 
experiments attempt show evolution structure lead better performance done right 
parameter settings set pole balancing experiments described wieland gomez 
runge kutta fourth order method implement dynamics system step size 
state variables scaled fed network 
networks output force seconds poles long 
initial position long pole short pole upright track meters long 
experiment population neat networks experiment population 
larger population reflects difficulty task 
esp evaluated networks generation ce population networks 
coefficients measuring compatibility experiments 


difference coefficient reflects size populations larger population room distinguishing species connection weights smaller population relies topology 
maximum fitness species improve generations networks species allowed reproduce 
top elite species reproduced random mate selection elite 
addition champion species networks copied generation unchanged elite individual chance mate elite individual species 
offspring inherited matching genes randomly parent disjoint excess genes better parent described section 
crossover schemes possible method effective cause excessive genomes 
chance connection weights offspring genome mutated case weight chance uniformly perturbed chance assigned new random value 
system tolerates frequent mutations speciation protects radically different weight configurations species 
smaller population probability adding new node probability new link 
larger population probability adding new link larger population room larger number species topological diversity 
modified sigmoidal transfer function nodes 
sigmoid allows fine tuning extreme activations 
optimized close linear steepest ascent activations 
method evaluations generations 
nets ev 
programming conventional ne sane esp neat table double pole balancing velocity information 
evolutionary programming results obtained saravanan 
conventional neuroevolution data reported wieland 
sane esp results reported gomez 
neat results averaged experiments 
results averages runs 
standard deviation neat evaluations evaluations 
standard deviations methods reported assume similar variances differences statistically significant neat esp double pole balancing velocities criteria success task keeping poles balanced time steps minutes simulated time 
pole considered balanced degrees vertical 
table shows neat takes fewest evaluations complete task difference neat esp statistically significant 
fixed topology ne systems evolved networks hidden nodes neat solutions hidden nodes 
clear neat minimization dimensionality working problem 
result important shows neat performs esp finding minimal solutions 
double pole balancing velocities gruau introduced special fitness function problem prevent system solving task simply moving cart back forth quickly keep poles air 
solution require computing missing velocities 
ce esp evaluated special fitness function neat uses task 
fitness penalizes oscillations 
sum fitness component functions functions defined time steps jx 
number time steps pole remains balanced total time steps 
denominator method evaluations generalization 
nets ce esp neat table double pole balancing velocity information 
ce cellular encoding gruau 
esp enforced subpopulations gomez 
results averages simulations 
standard deviation neat evaluations 
assuming similar variances ce esp differences number evaluations significant 
generalization results cases simulation significantly different 
represents sum offsets center rest cart long pole 
computed summing absolute value state variables representing cart long pole positions velocities 
minimizing offsets damping oscillations system maximize fitness 
fitness function swinging poles wildly penalized forcing system internally compute hidden state variables 
gruau criteria solution champion generation tested generalization sure robust 
test takes lot time fitness test applied champion 
addition balancing poles time steps winning controller balance poles different initial states times steps 
number successes called generalization performance solution 
order count solution network needs generalize initial states 
start state chosen giving state value values scaled respective range input variable 
generation neat performs generalization test champion highest performing species improved generation 
table shows neat fastest system challenging task 
neat takes times fewer evaluations gruau original benchmark showing way structure evolved significant impact performance 
neat times faster esp showing structure perform better evolution fixed topologies 
significant difference ability methods generalize 
discussion explaining performance neat faster esp difficult task difference easier task 
reason task velocities neat solution problem 
node angle long pole node angle short pole 
clever solution works derivative difference pole angles 
recurrent connection single hidden node determines poles falling away 
solution allows controlling system computing velocities pole separately 
evolving structure difficult discover subtle compact solutions 
esp needed restart average times solution neat needed restart 
restarts factored systems perform similar rates 
neat evolves different structures simultaneously different species representing space different dimensionality 
neat trying different ways solve problem get stuck 
shows sample solution network neat developed problem velocities 
solution clearly illustrates advantage incrementally evolving structure 
network compact elegant solution problem sharp contrast fully connected large networks evolved fixed topology methods 
shows minimal necessary structures difficult discover 
parallel drawn structure evolution neat incremental evolution fixed structures gomez miikkulainen wieland 
ne get stuck local optimum attempting solve difficult task directly 
solving easier version task population part fitness space closer solution harder task allowing avoid local optima 
way difficult task solved evolving networks incrementally challenging tasks 
adding structure solution analogous process 
network structure visualizing speciation 
fixed size population divided species shown horizontally newer species appearing right 
time evolution generations shown vertically 
color coding indicates fitness species lighter colors better 
species began close solution soon th generation 
time oldest species extinct 
addition optimized lower dimensional space 
structure added network placed complex space close solution 
process different incremental evolution adding structure automatic neat sequence progressively harder tasks designed experimenter challenging problem 
visualizing speciation understand innovation takes place neat important understand dynamics speciation 
species form course run 
new species arise 
species die 
large species get 
answer questions depicting speciation visually time 
depicts typical run double pole balancing velocities task 
run task took generations complete slightly average 
visualization successive generations shown top bottom 
species depicted horizontally generation width species proportional size corresponding generation 
species divided white lines new species arrive right hand side 
gray scale shading indicate fitness species 
species colored dark grey individuals standard deviation mean fitness run light grey standard deviations 
tiers identify promising species close solution 
possible follow species inception run 
shows species existed population th generation organisms sufficiently compatible grouped single species 
successive generations initial species dramatically order room new species eventually extinct st generation 
extinction shown white triangle generation expired generation 
initial species minimal structure unable compete newer innovative species 
second species appear population met similar fate th generation 
st generation structural mutation fourth species connected long pole angle sensor hidden node previously connected cart position sensor 
innovation allowed networks combine observations leading significant boost fitness brightening species 
innovative species subsequently expanded take population 
nearly simultaneously nd generation younger species useful connection time short pole velocity sensor long pole angle sensor leading subsequent expansion 
th generation species pivotal connection cart position established method comparing short pole velocity long pole angle 
innovation solve problem generation additional weight mutations 
final generation winning species generations old included neural networks population 
species come close solution survived run fell significantly st generation 
observation important visually demonstrates innovation protected 
winning species take entire population 
neat strengthens analogy gas natural evolution performing optimizing function evolution complexifying function allowing solutions incrementally complex time optimal 
potentially powerful extension explored 
potential application complexification continual coevolution 
companion stanley miikkulainen demonstrate neat add new structure existing solution achieving complex behavior maintaining previous capabilities 
arms race increasingly sophisticated solutions take place 
strategies evolved neat reached higher level sophistication evolved continued improve significantly generations 
direction extend neat tasks high number inputs outputs 
networks minimal initial structure may defined differently networks inputs outputs 
example fully connected layer network inputs outputs require connections 
hand network unit hidden layer require connections 
network simpler implying minimal starting topology domains include hidden nodes 
neat method potentially extended solution representations neural networks 
domain solutions represented different levels complexity search solutions minimal representation progressively augmented evolution proceeds 
example neat method may applied evolution hardware miller cellular automata mitchell genetic programs koza 
neat provides principled methodology implementing complexifying search minimal starting point structures 
main evolving structure connection weights style neat leads significant performance gains reinforcement learning 
neat exploits properties structure history utilized 
historical markings protection innovation speciation incremental growth minimal structure result system capable evolving solutions minimal complexity 
neat unique method genomes grow complexity necessary expensive topological analysis necessary crossover population 
forms promising foundation build reinforcement learning systems complex real world tasks 
acknowledgments research supported part nsf iis texas higher education coordinating board arp 
gomez providing pole balancing code 
anderson 

learning control inverted pendulum neural networks 
ieee control systems magazine 
angeline saunders pollack 

evolutionary algorithm constructs recurrent neural networks 
ieee transactions neural networks 
barto sutton anderson 

neuronlike adaptive elements solve difficult learning control problems 
ieee transactions systems man cybernetics smc 
dasgupta mcgregor 

designing applicationspecific neural networks structured genetic algorithm 
proceedings international conference combinations genetic algorithms neural networks 
goldberg richardson 

genetic algorithms sharing multimodal function optimization 
grefenstette editor proceedings second international conference genetic algorithms 
san francisco ca morgan kaufmann 
gomez miikkulainen 

incremental evolution complex general behavior 
adaptive behavior 
gomez miikkulainen 

solving non markovian control tasks neuroevolution 
proceedings th international joint conference artificial intelligence 
denver morgan kaufmann 
gomez miikkulainen 

learning robust nonlinear control neuroevolution 
technical report ai department computer sciences university texas austin 
gruau whitley 

comparison cellular encoding direct encoding genetic neural networks 
koza goldberg fogel riolo editors genetic programming proceedings annual conference 
cambridge ma mit press 
koza 

genetic programming programming computers means natural selection 
cambridge ma mit press 
mahfoud 

niching methods genetic algorithms 
phd thesis university illinois urbana champaign urbana il 
meuleau peshkin kim kaelbling 

learning finite state controllers partially observable environments 
proceedings fifteenth international conference uncertainty artificial intelligence 
michie chambers 

boxes experiment adaptive control 
dale michie editors machine intelligence 
edinburgh uk oliver boyd 
miller job 

principles evolutionary design digital circuits part journal genetic programming evolvable machines 
miller job 

principles evolutionary design digital circuits part ii 
journal genetic programming evolvable machines 
mitchell crutchfield das 

evolving cellular automata genetic algorithms review 
proceedings international conference evolutionary computation applications 
russian academy sciences 
montana davis 

training feedforward neural networks genetic algorithms 
proceedings th international joint conference artificial intelligence 
san francisco ca morgan kaufmann 
moriarty miikkulainen 

efficient reinforcement learning symbiotic evolution 
machine learning 
potter de jong 

evolving neural networks collaborative species 
proceedings summer computer simulation conference 
radcliffe 

genetic set recombination application neural network topology optimization 
neural computing applications 
saravanan fogel 

evolving neural control systems 
ieee expert 
schaffer whitley eshelman 

combinations genetic algorithms neural networks survey state art 
whitley schaffer editors proceedings international workshop combinations genetic algorithms neural networks 
ieee computer society press 
stanley miikkulainen 

continual coevolution complexification 
proceedings genetic evolutionary computation conference gecco san francisco ca morgan kaufmann 
watkins dayan 

learning 
machine learning 
whitley dominic das anderson 

genetic reinforcement learning problems 
machine learning 
wieland 

evolving neural network controllers unstable systems 
proceedings international joint conference neural networks seattle wa 
piscataway nj ieee 
wieland 

evolving controls unstable systems 
touretzky elman sejnowski hinton editors connectionist models proceedings summer school 
san francisco ca morgan kaufmann 
yao 

evolving artificial neural networks 
proceedings ieee 
zhang muhlenbein 

evolving optimal neural networks genetic algorithms occam razor 
complex systems 
