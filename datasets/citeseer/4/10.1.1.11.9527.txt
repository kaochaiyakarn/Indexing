proceedings eleventh conference uncertainty artificial intelligence august 
efficient decision theoretic planning techniques empirical analysis peter haddawy anhai doan department ee cs university wisconsin milwaukee milwaukee wi cs edu richard goodwin school computer science carnegie mellon university forbes ave pittsburgh pa rich cs cmu edu discusses techniques performing efficient decision theoretic planning 
give overview drips decisiontheoretic refinement planning system uses abstraction efficiently identify optimal plans 
techniques automatically generating search control information significantly improve planner performance 
evaluate efficiency drips search control rules complex medical planning problem compare performance branch bound decision tree algorithm 
framework decision theoretic planning uncertainty state world effects actions represented probabilities planner goals tradeoffs represented utility function outcomes 
representation objective find optimal near optimal plan 
finding optimal plan requires comparing expected utilities possible plans 
doing explicitly computationally prohibitive smallest domains 
due large space possible plans searched fact probabilistic plan evaluation entails high computational cost 
researchers taken various approaches dealing complexity 
approach focus solving part problem working probabilities categorical goals planning goal directed utility functions complete certainty approaches able gain efficiency exploiting structure arises due categorical goals deterministic actions restrictions form utility function 
second popular approach constrained highly structured problem representation exemplified discrete markov process planners model assumes finite state space limited class utility functions 
existing algorithms completely partially observable markov processes exponential running time terms number domain attributes applicable small domains 
third approach uses qualitative techniques filter classes obviously bad plans avoiding costly plan evaluation qualitative dominance proving highly efficient requires structure typically powerful identify optimal plan 
point resort quantitative reasoning expected utility order evaluate tradeoffs 
large domains expect qualitative techniques filter remaining space possible plans large exhaustively examine 
search space effectively developed drips decision theoretic refinement planning system obtains efficiency exploiting information provided abstraction hierarchy 
ability structure actions abstraction hierarchy requires domain contain actions grouped similarity imposes requirements concerning structure domain utility function 
abstraction planner eliminate suboptimal classes plans explicitly examining plans class 
decision theoretic planning problem characterized terms number parameters 
set states world may completely observable set actions plans constructed class utility functions plan time horizon consider plans 
allow state space infinite 
states partially observable 
assume finite set actions plans 
plan sequence actions 
restrict allowable forms utility function 
planning horizon assumed finite 
framework interested finding optimal plan 
rest organized follows 
warehouse time time fuel fuel tons delivered tons delivered tons truck warehouse time time fuel fuel tons delivered tons delivered tons truck sunny sunny warehouse warehouse warehouse warehouse time time fuel fuel tons delivered tons delivered tons truck action deliver tomato 
representational framework 
overview drips planner abstraction theory planner prune space plans 
section methods efficiently controlling plan elaboration pruning process 
empirically evaluate efficiency drips applying medical planning problem selecting optimal test treat strategy managing patients suspected having deep vein thrombosis lower extremities 
show drips significantly outperforms standard branch bound decision tree evaluation algorithm domain compare efficiency planner search control 
finish discussion research 
representation world model describe world terms chronicles chronicle complete specification world time 
take time continuous describe chronicles specifying values discrete continuous attributes various times example fuel 
express uncertainty concerning state world set probability distributions chronicles 
express set assigning probability intervals attribute value pairs various times 
action model action represented finite set tuples hc called branches set mutually exclusive exhaustive conditions probabilities effects 
intended meaning action condition satisfied action probability effect realized immediately action 
representation form utilized markov decision process action condition effect specified set propositional assignments painted hold block 
extend representation allowing metric assignments action conditions effects fuel fuel gamma allow branch probabilities represented intervals single numeric points 
relaxations substantially enhance expressiveness representation 
assume changes world limited effects explicitly described agent action descriptions 
shows example action description 
action deliver tomato describes activity delivering warehouse market 
action conditioned weather start location 
tuple example says weather sunny start location warehouse sunny warehouse probability action takes units time time time consumes units fuel fuel fuel gamma truck spoiled sun ton gamma delivered ton gamma delivered ton gamma action location truck warehouse warehouse 
notice propositional assignments warehouse represented format identical metric assignments 
decision theoretic refinement planning abstracting actions drips planner primarily uses types abstraction interaction abstraction sequential abstraction 
idea inter action abstraction group set analogous actions 
set characterized features common actions set 
plan action infer properties plan involving instances 
formally inter action abstraction set actions fa action represents disjunction actions set 
actions set called instantiations action considered alternative ways realizing action 
assumed mutually exclusive 
create inter abstraction set actions fa ang 
group branches action descriptions disjoint sets set contains branch action description 
set contains fewer branches add gamma jsj branches effect branches set condition false probability zero 
effect branch sentence entailed effects branches set 
condition disjunction conditions branches set 
probability specified range minimum probabilities branches set maximum probabilities branches set 
sequential abstraction essentially macro operator specifies effects sequence actions initial conditions effects achieved specifying changes occur intermediate steps due individual actions sequence 
information state world execution sequence actions abstracted away 
action sequence pairing branch branch create branch pairing 
condition branch conjunction conditions paired branches probability product probabilities paired branches effect composition effects 
implemented tools automatically create inter action abstractions sequential abstractions general theory action abstraction includes intra action sequential abstraction see drips planner planning problem described terms initial state distribution set action descriptions utility function 
space possible plans described abstraction decomposition network supplied user 
action sub actions may abstractions primitive actions 
decomposable action subplan executed sequence 
description actions created interaction abstraction descriptions decomposable actions created sequential abstraction 
example network shown 
plan simply sequence actions obtained net 
planning task find sequence actions represented network maximizes expected utility relative probability utility models 
drips finds optimal plan building plans comparing refining yield optimal plan 
begins set plans highest abstraction level subsequently refines plans general specific 
projecting plans results inferring probability intervals attribute ranges plan assigned expected utility interval includes expected utilities possible instances plan 
plan eliminated upper bound expected utility interval lower lower bound expected utility interval plan 
eliminating plan eliminates possible instantiations 
plans overlapping expected utility intervals planner refines plans instantiating actions 
successively instantiating plans narrow range expected utility allow plans pruned 
abstraction decomposition network evaluate plans level eliminate suboptimal plans refine remaining candidate plans optimal plans remain 
algorithm works follows 

create plan consisting single top level action put set plans 

plan left plans ffl choose plan refine replacing action instantiations decomposition creating set lower level plans fp pn ffl compute expected utility newly created plans 
ffl remove plans add fp pn ffl eliminate suboptimal plans plans 

return plans set optimal plans 
drips eliminates plans prove suboptimal run completion explores entire space possible plans guaranteed find optimal plan plans 
notice algorithm stopped time yield current set candidate plans 
feature exploited flexibly respond time constraints 
control strategies run time efficiency drips planner depends effectively controlling search space plans 
drips algorithm contains non deterministic choice points second step 
choice select plan set plans overlapping expected utility 
second choice select action plan expansion 
consider selection plan refined 
ways potentially optimal plan eliminated consideration upper bound plan lowered highest lower bound highest lower bound raised level upper bound plan 
notice plan maximal upper bound expected utility may contain optimal primitive plan plan expanded insure complete set optimal plans 
point search plan current maximal upper bound eventually need expanded 
strategy expanding non primitive plan maximum upper bound expected utility lead optimal solution length 
selection action expand problematic 
selecting actions expanded produce plans greater reductions range expected utility facilitates pruning leads efficient planning 
section discuss approaches selecting actions expansion 
approach uses simple heuristic second uses supplied priorities third uses sensitivity analysis 
default action selection method uses simple heuristic chooses action plan expansion picking specific initial action help differentiate set plans 
method domain independent requires additional effort part domain designer 
practice heuristic performs significantly better random action selection 
action heuristic informed heuristic take advantage structure domain guide search 
purposes heuristic strawman provide baseline compare performance action selection methods 
fixed priority action selection method allows domain designer assign priority action 
choice point action highest priority selected expansion 
ties broken selecting action highest priority 
method allows domain designer encode extra information domain server better informed heuristic 
default method cheap compute 
disadvantage method places extra burden domain designer set priorities 
method set priorities assign low priority actions similar instantiations higher priority actions dissimilar instantiations 
preferentially refining actions dissimilar instantiations lead overlap expected utility subplans 
observe performance planner example problems validate priority assignments 
sensitivity analysis third method selecting actions expansion uses sensitivity analysis select actions bounds expected utility sensitive 
sensitivity analysis uses structure actions domain utility function adapt search control specific plan expanded 
tailoring search control way produces informed heuristic lead search 
disadvantage method sensitivity analysis involves computational overhead 
added cost traded reduction amount search needed 
sensitivity analysis structural method select plans expansion 
plans selected expansion highest bound expected utility 
action expansion creates subplans upper bound expected utility subplans immediately selected expansion 
preferentially expanding actions cause larger changes upper bound expected utility reduce likelihood sub plans chosen expansion 
lead increased search efficiency 
rest section sensitivity analysis general utility model proposed expected utility plan sum utilities possible chronicles weighted probability chronicle eu delta 
utility chronicle weighted sum utility goal satisfaction ug residual utility ur ug ur 
utility functions ug ur form part problem description input planner 
sensitivity analysis requires additional functions give possible change upper bound utility functions result expanding action 
ug chronicle action plan function returns maximum change upper bound utility goal achievement chronicle action plan expanded 
second function ur chronicle action plan similarly returns maximum change upper bound residual utility 
ug ur functions derived ug ur functions respectively 
ug ur functions arbitrarily complex additional functions supplied domain designer 
cost cost cost cost cost cost cost cost disease disease test action test action representing tests different costs different false negative probabilities 
get idea involved creating ug ur functions consider test action 
test action possible instantiations account range cost range probability false negative 
suppose ur function ur gamma cost cost patient dies ur gamma cost 
chronicle passed ur determine branch action chronicle corresponds 
assignments cost branch give effect action plan 
example possible change ur value corre sponds difference costs tests 
third function chronicle action plan returns maximum change upper lower bound probability chronicle result expanding action 
function depends structure actions form utility function 
implemented domain independently planner 
medical example refining test action reduce range probability false negative 
sensitivity upper bound expected utility calculated combining functions 
equation gives upper bound utility ug gamma ug delta ur gamma ur ug ur represent current upper bounds ug ur respectively 
calculating effect probability complicated 
upper bound expected utility lowered decreasing upper bound probability high utility chronicles increasing lower bound probability low utility chronicles 
function give probability chronicle probability bounds adjusted subject condition sum probabilities 
sensitivity upper bound expected utility minus upper bound expected utility action expansion sensitivity eu gamma min ub delta selecting action expansion computation needed expand action evaluate subplans needs taken account 
final weighting action ratio sensitivity divided cost expanding action 
simplicity estimate cost counting number sub plans evaluated equal number instantiations action 
action highest weighting selected expansion 
empirical analysis comparing drips branch bound algorithms appropriate management patients suspected acute deep thrombosis lower extremities important complex clinical problem 
evaluate effectiveness drips constructed model diagnosis treatment data article compared various different management strategies encompass strategies described original model model incorporated tests maximum day waiting periods tests 
test procedures included contrast veno non invasive tests nit impedance ipg real time rus 
treatment consisted solely therapy included unconditional actions treat conditional actions treat thigh seen treat veno thigh 
utility function analysis defined sum costs tests treatment costs associated state patient plan 
portion abstraction decomposition network domain shown action manage abstraction actions tests treat veno tests nit tests tests tests tests 
number tests represents length longest allowed sequence tests 
actions decomposes sequence actions 
example nit tests decomposes nit treat nit 
nit instantiated ipg rus 
model management suspected encompassed concrete plans example complete plan instance tests action ipg wait nit veno nit treat veno 
ran drips variations utility function cases successfully identified optimal plan 
verified comparison decision tree evaluation algorithm 
results produced drips differed reported manuscript reviewing results discovered drips uncovered error original study evaluating model drips evaluated concrete plans total yielding pruning rate 
order demonstrate efficiency drips practice compared performance variations problem standard branch bound algorithm evaluating decision trees 
shows running time drips running time decision tree branch bound algorithm values cost ranging 
drips drips code domain available www www cs edu faculty haddawy 
noted network structure followed naturally understanding problem took little time produce producing action descriptions laborious task 
clinical planning problem finding optimal test treat strategy patients suspected having foot infection drips evaluated possible plans achieving pruning rate 
manage tests treat veno tests nit tests tests tests tests veno treat veno nit treat nit tests treat tests nit wait test treat veno nit nit ipg rus wait don wait wait wait nit veno nit nit nit ipg nit rus nit test test nit veno nit treat veno treat treat veno treat veno thigh treat veno treat veno nit treat treat veno treat nit veno treat treat treat abstraction decomposition network 
abstraction relations shown dashed lines decomposition relations shown solid lines 
actions shown bold decompositions abstractions displayed 
outperformed branch bound algorithm values 
extreme case running time drips branch bound algorithm 
examine efficiency approaches varies function problem size applied approach versions domain increasing size 
shows running times plan drips branch bound algorithm domains 
notice running time plan branch bound algorithm increases markedly function problem size running time plan drips decreases 
means domain drips algorithm scales effectively branch algorithm 
shows memory usage drips compares favorably branch bound algorithm suite problems 
extreme case drips uses memory branch bound algorithm 
explained fact time drips projects evaluates small constant number plans evaluating decision tree requires keeping track subtrees projected 
comparing control strategies comparisons drips algorithm decision tree algorithm previous section fixed priority control strategy 
section repeat tests compare different drips control strategies 
results shown 
small domain size search control little effect efficiency 
results smallest domain show strategies expand number plans running times comparable 
particular domain optimal strategy evaluates plans strategies perform nearly optimally 
larger domains search control critical 
results largest domain show wide divergence number plans evaluated running time 
larger domain pruning significantly reduce amount search needed effective search control leads better pruning 
larger versions domain fixed priority control strategy significantly better default action heuristic 
fixed priority control adds little overhead evaluates significantly fewer plans produce improved running time 
performance strategy significantly better utility functions high cost default strategy 
partly accounted fact domain designer assigned priorities significant actions 
cases priorities equal assigned fixed priority strategy falls back default strategy 
action heuristic utility functions high cost value better information increases cost making mistake high 
actions treatment plan tend tests creating plans different tests significantly differentiate expected number plans cpu time sec drips decision tree number plans memory consumption states drips decision tree cost thousands cpu time sec drips decision tree running times drips branchand bound decision tree evaluation algorithm various costs 
running times plan memory consumption drips branchand bound algorithm problems increasing size 
memory consumption values represent maximum number world states need stored time algorithm 
utilities lead better pruning 
sensitivity analysis control strategy significantly better default control strategy entire range utility functions large domains 
performance strategy constant strategy adapts search control changing utility function 
result sensitivity analysis strategy significantly better fixed priority strategy lower costs especially terms number plans evaluated 
higher costs fixed priority scheme expands plans lower overhead running time better 
running time sensitivity analysis strategy improved optimizing sensitivity analysis code doing partial sensitivity analysis 
example sensitivity calculated relative fraction chronicles 
speedup linear inverse fraction chronicles traded degradation quality search control 
discussion research efficiency approach depends largely domain regularities exploited build abstraction hierarchy 
applicability performance planner improved methods devised perform tight abstraction loss due abstraction quantified 
devising procedures loss estimates shown possible limited class domains complex domains expressive utility functions harder efficient abstraction procedures relatively abstraction hierarchy built exploiting simple regularities domain heuristics domain experts 
know example alternative actions differ value attribute say cost change value cost produces little change value utility function abstraction actions tight 
sensitivity analysis section simple domain utility regularities control plan elaboration 
currently working methods automatically generating abstractions drips planner 
method starts assigning weights domain attributes analyzing utility function primitive action descriptions 
clustering algorithm uses primitive action descriptions weights group similar actions 
significant contribution approach ability perform decision theoretic planning richer domains utility models markov approach 
existing algorithms markov models exponential running time number domain attributes exploit domain regularities interesting compare approach methods 
improve efficiency drips currently working technique exploits stochastic dominance eliminate suboptimal plans computing expected utilities 
relation called stochastic dominance established probability distributions random variables distributions satisfy certain constraints random variables representing domain attributes different time points typically related formulas action effect assignments transformations caused actions create dominance situations verified fairly easily knowing exact probability distributions random variables 
plans try locate joint probability distributions subset domain attributes obtained timepoint projecting respectively dominates dominance prove higher expected utility vice versa eliminated consideration 
cost cost cost cost running time msec running time msec number plans evaluated number plans evaluated action heuristics fixed priority sensitivity analysis results showing running time number plans evaluated versus cost small domain domain plans 
successfully applied technique variety domains reduce number plans applying drips algorithm 
example domain number reduced 
results detail reported 
boutilier dearden 
abstractions decision theoretic planning time constraints 
proceedings twelfth national conference artificial intelligence pages seattle july 
dean pack kaelbling kirman nicholson 
planning deadlines stochastic domains 
proceedings eleventh national conference artificial intelligence pages july 
doan haddawy 
generating macro operators decision theoretic planning 
working notes aaai spring symposium extending theories action stanford march 
doan haddawy 
decision theoretic refinement planning principles application 
technical report tr dept elect 
eng 
computer science university wisconsin milwaukee january 
available anonymous ftp pub techreports ftp cs edu 

knowledge acquisition decisiontheoretic planning 
proceedings pages il april 
goldman boddy 
epsilon safe planning 
proceedings tenth conference uncertainty artificial intelligence pages seattle july 
haddawy hanks 
utility models goaldirected decision theoretic planners 
technical report department computer science engineering university washington june 
available anonymous ftp ftp pub ai cs washington edu 
jt becker dm 
optimal management suspected lower extremity deep vein thrombosis evaluation cost assessment management strategies 
arch intern med 
ce kahn jr haddawy 
management suspected lower extremity deep thrombosis letter archives internal medicine february 
kushmerick hanks weld 
algorithm probabilistic commitment planning 
proceedings twelfth national conference artificial intelligence pages seattle 
wellman 
formulation tradeoffs planning uncertainty 
pitman london uk 

stochastic dominance approach decision making risk 
health lexington ma 
williamson hanks 
optimal planning goal directed utility model 
proceedings second international conference artificial intelligence planning systems pages chicago june 
