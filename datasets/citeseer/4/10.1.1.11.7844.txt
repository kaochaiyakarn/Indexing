kobayashi pierce eds fourth international symposium theoretical aspects computer software tacs lncs vol 
pp 

springer verlag berlin heidelberg nominal logic order theory names binding andrew pitts university cambridge computer laboratory cambridge cb fd uk andrew pitts cl cam ac uk 
formalises rst order logic common practices computer science representing reasoning syntactical structures involving named bound variables opposed nameless terms explicit substitutions higher order syntax 
introduces nominal logic version rst order sorted logic equality containing primitives renaming name swapping freshness names notion binding derived 
axioms express key properties primitives satis ed fm sets model syntax introduced :10.1.1.62.9845:10.1.1.62.9845
nominal logic serves vehicle making general points 
firstly nicer logical properties general forms renaming time providing sucient foundation theory structural induction recursion syntax modulo conversion 
secondly useful practice operational semantics explicit equivariance property assertions syntax validity invariant name swapping 
commonplace formal languages computer science mathematical logic away details concrete syntax terms strings symbols solely parse trees syntax language 
doing gives access extremely useful inter related tools de nition recursion structure parse trees proof induction structure 
conventional syntax formal language involves variable binding constructs 
situation common practice human opposed computer provers say thing 
say quotient collection parse trees suitable equivalence relation conversion identifying trees renaming bound variables try equivalence classes implicit possible dealing suitably chosen representatives 
suitable choices representatives understood name barendregt variable convention choose representative parse tree bound variables fresh mutually distinct distinct free variables current context 
informal research funded uk epsrc gr 
kobayashi pierce eds fourth international symposium theoretical aspects computer software tacs lncs vol 
pp 

springer verlag berlin heidelberg andrew pitts practice confusing equivalence class member class suciently fresh bound variables accompanied certain amount hygiene part human provers constructions proofs independent particular fresh names choose bound variables 
nearly veri cation independence properties omitted tedious detracts interesting business hand 
course introduces certain amount informality pencil proofs ignored business producing fully formalised proofs 
business content pencil think reason examine informal suciently fresh names put precise mathematical footing 
reason mind intuitive useful tools mentioned structural recursion de ning functions parse trees structural induction proving properties 
said barendregt variable convention allows equivalence classes parse trees just parse trees literally case comes structural recursion induction 
example dealing induction step variable binding construct happens step proved bound variable chosen suciently fresh arbitrary bound variable induction principle demands 
barendregt variable convention papers crack proof point preventing considering case arbitrary bound variable fresh crack 
easily side step problem suitable size function parse trees replace structural induction mathematical induction satisfying solution 
size function de ned structural recursion crucial fact equivalent parse trees size proved structural induction structural recursion induction anyway direct way 
better 
reported providing mathematical notion suciently fresh name remains close informal practice described enabling equivalence classes parse trees gain useful inductive recursive properties :10.1.1.62.9845:10.1.1.38.9383:10.1.1.38.9383
theory stems somewhat surprising observation concepts need conversion freshness variable binding 
de ned purely terms operation swapping pairs names 
particular freshness name object expressed terms name nite set names supports object sense swapping pair names nite set leaves object unchanged 
notion support weak second order involves existential quanti cation nite sets names 
development certain rst order properties freshness support predicate combination swapping operation :10.1.1.62.9845:10.1.1.62.9845
presents rst order theory names swapping freshness called nominal logic 
nominal logic equivariant predicates fundamental assumption underlying nominal logic predicates deal describing properties syntax equivariant ones sense validity invariant swapping transposing interchanging names 
names 
names entities may subject binding syntactical constructions consideration 
nominal logic sorts names ones may subjected swapping called atoms terminology refers back origins theory fraenkel mostowski permutation model set theory 
atoms turn quite di erent logical properties constants usual sense rst order logic constant subjected swapping 
note distinction atom constant issue binding substitution 
syntactic category variables usually meant entities may subject substitution represented nominal logic atoms constants depending circumstances constants situation variables bound substituted atoms 
interesting point useful 
distinction names names constants entirely terms properties swapping names prior discussion substitution properties 
emphasis swapping names apparently primitive notion renaming name 
answer fact swapping idempotent operation swap followed swap equivalent doing 
means class equivariant predicates validity invariant name swapping excellent logical properties contains equality predicate closed negation conjunction disjunction existential universal quanti cation formation greatest xed points monotone operators true renaming 
example validity negated equality atoms necessarily preserved renaming 
take equivariance account reason syntactical structures main messages 
care details nominal logic worth note fact name swapping equivariance property provide simple useful foundation discussing properties names binding syntax 
simple example illustrate point taken type theory 
example 
mckinna pollack note na approach named bound variables diculty proving weakening property type systems rule induction 
example consider usual typing relation assigning simple types terms untyped calculus 
take mean equivalence classes parse trees grammar andrew pitts ranges nite set variables 
typing relation takes form types grammar ranging nite collection type variables typing context nite partial function variables types 
typing relation inductively generated axioms rules structure parse tree 
reader familiar rules see chapter example note mentioned literature usually bother notational distinction trying prove weakening property typing relation dom natural try proceed rule induction show predicate dom de nes relation closed axioms rules inductively de ning typing relation contains relation 
induction step rule typing abstractions dom problematic prove dom dom prove holds dom problem doing case diculty induction step easily circumvented take equivariance account 
axioms rules de ning typing closed operations swapping pairs variables swapping pairs type variables need 
example instance rule swap pair variables hypotheses get valid instance rule 
follows swapping property axioms rules typing relation relation closed axioms rules closed nominal logic swapping operations 
assertion typing combining typing relation equivariant predicates dom usual logical connectives quanti ers equivariant 
particular predicate de ned equivariant 
know holds 
fresh variable 

indicates parse tree resulting swapping 
de nition dom 
partial functions typing contexts dom choice apply typing rule conclude 

equivalent parse trees holds 
hold completed induction step 
ut considerations section ingredients language describe syntax involving names binding language contain notion atom operations swapping atoms expressions general may need di erent sorts atoms example atoms variables atoms type variables example formulas language equivariant respect swapping operations 
atoms swapping novelties nominal logic 
third crucial step proof example chose fresh variable need give freshness relation atoms expressions sucient properties arguments go 
nominal logic syntax semantics syntax nominal logic sorted rst order logic equality augmented extra features 
collection sorts partitioned kinds sorts atoms sorts data 
sort atoms sort distinguished function symbol arity ect terms write term 
pronounce swap 
sort atoms sort distinguished relation symbol arity ect terms write formula pronounce fresh 
just ordinary rst order logic theory nominal logic speci ed signature sort function relation symbols collection non logical axioms rst order formulas involving equality swapping freshness symbols signature 
andrew pitts example terms mod equivalence version 
example theory nominal logic return 
sort atoms var sort data term function symbols var var term app term term term lam var term term subst term var term term axioms var term var app var term var lam var term lam app term var var term app var term lam var var var term app app var term lam lam 
var var term app var term lam term free variables term var subst var term var subst var var term var subst app app subst subst term var subst lam lam subst axioms say var app lam disjoint images cover term axioms give injectivity properties constructors 
particular axiom re ects fact equality terms sort term correspond equality equivalence classes parse trees grammar freshness fact variable occur freely parse tree 
axiom formalises structural induction principle equivalence classes cf 
theorem 
axioms amount structurally recursive de nition capture avoiding substitution terms cf 
example 
particular theory concrete model equivalence classes parse trees grammar 
explained general nominal logic nominal logic notions atom swapping freshness meaning independent particular object level syntax fm sets permutation model set theory :10.1.1.62.9845:10.1.1.62.9845
de nitions give simpli ed essentially equivalent presentation fm sets emphasises swapping general permutations atoms 
time mild generalisation mentioned sect :10.1.1.62.9845:10.1.1.62.9845
set atoms partitioned countably di erent kinds swap atoms kind 
de nition nominal sets 
fix countably nite family pairwise disjoint countably nite sets 
write union call elements atoms 
nominal set set jx equipped behaved notion swapping atoms elements set 
de nition means element jx pair atoms kind element 
called result swapping swapping operations required properties equational properties swapping jx pairs atoms equal sort 






similarly 
ii finite support property require jx involve nitely atoms sense exists nite subset property holds 
follows supp fa fa xg nite set atoms see proof proposition call support morphism nominal sets de nition function set jx set jy respects swapping operations sense holds jx atoms kind 
clearly composition functions identity functions morphisms 
andrew pitts nominal sets morphisms form category denote nom swapping permutations 
remarks readers familiar mathematical theory groups group actions 
standard result theory group permutations element set ng isomorphic group freely generated symbols subject identities id id id generator corresponding permutation transposing 
see example beispiel 
fact easily deduce group kind respecting nite permutations set atoms freely generated transpositions subject identities id id atoms de ned equation 
follows jx set equipped swapping operations satisfying equations operations extend uniquely action nite permutations elements jx jx satis es property ii de nition action extends uniquely kind respecting permutations nite elements jx nite support property action sense de nition 
observations form basis proof category nom de nition equivalent topos sect 
underlies universe fm sets :10.1.1.62.9845:10.1.1.62.9845
hard see products category nom simply cartesian product jx jy jg underlying sets de ning swapping operations componentwise clearly niteness property required de nition ii similarly terminal object nom element underlying set necessarily trivial swapping operations 
interpret sorted rst order signatures category nom sorts interpreted objects function symbols arity sn say morphisms 
relation symbols arity sn say subobjects 

nom sucient properties soundly interpret classical rst order logic equality equivalent topos concern 
nominal logic usual techniques categorical logic see sect 
brief overview 
fact readers unfamiliar techniques need just understand interpretation rst order logic category nominal sets just usual tarskian semantics rst order logic category sets time remaining world equivariant properties 
hard see subobjects object category nom bijection subsets jx underlying set equivariant sense atoms kind 
mentioned sect 
collection equivariant subsets closed usual operations rst order logic contains equality 
just remains explain interpretation nom distinctive syntax nominal logic atoms swapping freshness 
de nition 
intended interpretation atoms swapping freshness category nominal sets de nition 
atoms 
sort atoms nominal logic signature interpreted nominal set atoms de nition underlying set jan equipped swapping operations 

assume distinct sorts atoms interpreted distinct kinds atoms 
implicitly assuming signatures contain countably sorts 
swapping 
note virtue equation function 

determines morphism category nom morphism interpret distinguished function symbol swapping assuming nominal set atoms interpretation sort atoms interpretation 
freshness 
distinguished relation symbol arity freshness interpreted support relation supp atoms elements nominal sets 
nominal set atoms interpretation sort atoms interpretation sort terms formula satis ed interpretation supp supp equation 
hard see equivariant subset jx determines subobject nom 
andrew pitts nominal logic axioms simplicity hilbert style presentation nominal logic single rule modus ponens usual axiom schemes rst order logic equality plus axiom schemes swapping freshness fig 

properties swapping 



equivariance 









function symbol arity aa 
relation symbol arity properties freshness 
notes 
range sorts atoms ranges sorts nite lists sorts 

axiom 
indicates nite list arguments 
ranges 
axiom indicates nite conjunction formulas ranges list fig 

axiom schemes nominal logic freshness swapping result shows axioms fig 
validate fundamental assumption mentioned start sect 
properties expressible nominal logic invariant swapping atoms 
nominal logic proposition equivariance 
term formula free variables say 



denotes result simultaneously substituting 
ranges similarly 

proof 
property follows axioms induction structure term proceed induction structure formula standard properties rst order logic induction steps connectives quanti ers 
note virtue axiom equation holds 

base case equality follows usual axioms equality base case freshness predicate follows axiom relation symbols axiom case 
ut proposition soundness 
axioms fig 
satis ed nominal sets interpretation atoms swapping freshness sect 

proof 
satisfaction axioms guaranteed part definition swapping action nominal set atoms equation 
satisfaction axioms simple consequence de nition support equation 
axioms satis ed function relation symbols interpreted morphisms subobjects category nominal sets equivariance properties 
axiom satis ed support element nominal set nite subset xed countably nite set atoms 
ut forget axioms 
words axiom schemes fig 
complete intended interpretation category nominal sets 
axiom says supply atoms fresh support elements current context 
certainly consequence property ii de nition guarantees elements nominal sets nite support 
property ostensibly statement weak second order logic quanti es nite sets atoms 
expect rst order theory nominal logic completely axiomatise notion nite support 
example con rms expectation 
giving state useful property freshness nominal logic need 
proposition 
term free variables say recall stands nite conjunction formulas ranges andrew pitts proof 
axiom 
axiom 
holds choice 
axioms 
axiom 
axiom required 
ut corollary 
nominal logic theory contains closed term sort atoms inconsistent theory 
proof 
suppose sort atoms term free variables 
proposition axiom means contradiction 
ut example incompleteness 
consider nominal logic theory 
sort atoms sorts data function symbols axioms claim model theory category nominal sets satis es formula formula proved nominal logic axioms theory 
proof claim 
note model theory category nom interpretation closed terms de ned distinct elements nominal set 
see satis ed model suces show holds note nominal set atoms say 
suppose contrary nominal logic distinct atoms support supp nite subset nd satisfy supp 
supp fact terms free variables 
supp 
recalling de nition conclude 

contradicting assumption distinct 
see provable nominal logic suces nd model usual sense rst order logic axioms theory axioms fig 
satisfy 
get model modifying de nition uncountable set atoms sets equipped swapping actions elements countable support 
concretely get model uncountable set set real numbers say countable subset set set natural numbers say set functions functions countably supported 
interpretation function symbols respectively zero successor 
evaluation function 

interpretation swapping operation sort equation 

sort swapping trivial 

sort nd 

interpretation freshness predicate sort sort trivial holds sort holds de nitions check axioms satis ed 
satis ed inclusion gives element 
injective 
ut incompleteness appears axioms nominal logic sucient useful theory names name binding lines 
sections give evidence claim 
freshness quanti er proving nominal logic characteristic property fresh atoms cf 
proposition :10.1.1.38.9383
proposition 
suppose formula free variables sort atoms 
provable nominal logic 
andrew pitts proof 
holds proposition axiom 
axiom gives 
left right implication 
conversely suppose holds 
axiom nd satisfying 
ut property freshness crops frequently proofs syntax named bound variables see example choose fresh name certain property wider context revise choice accommodate nitely constraints need know chosen fresh name property 
reason convenient introduce notation tells property mentioning context free variables explicitly 
note holds list long contains free variables atom quanti ed 
de nition quanti er 
formula variable sort atoms de ne aa list free variables equal variable 
requirement occur free 
formulated nominal logic quanti er primitive freshness predicate de ned hard prove de nition axioms nominal logic aa 
holds 
taken primitive axioms derived proof rules mentioned 
chosen presentation primitive emphasise nominal logic just theory usual rst order logic 
evidence naturalness quanti er fact semantics sect 
coincides niteness quanti er aa holds nominal sets interpretation holds nitely atoms see development properties applications quanti er setting fm set theory 
example terms mod equivalence version 
simplify axioms theory example quanti er 
speci cally axiom explaining equality abstractions equivalent var term lam lam aa var 

nominal logic cf 
lemma axiom structural induction principle equivalence classes terms reformulated follows extra free variables implicit var var term app aa var term lam term axiom clause abstractions structurally recursive de nition capture avoiding substitution replaced term var aa var term subst lam lam subst result nominal logic version lemma introduce notation locally fresh atoms fm set theory 
discuss extending term language nominal logic sect 
proposition 
suppose term sort free variables sort atoms 
theorem nominal logic aa 
means exists unique 
usual encoding rstorder logic 
proof 
suppose aa 

put 
clearly property unique axiom 
see property suppose satis es want show done 
suppose axiom proposition 

axiom 

proposition axioms required 
ut binding example fact lam variable binding operation re ected axiom explains equality terms form lam swapping formulation conversion cf 
sect 

binders case case basis de nitional extension nominal logic new sort forming operation atom abstraction intended interpretation construction nominal sets 
andrew pitts de nition nominal set atom abstractions 
nominal set nominal set atoms cf 
de nition nominal set de ned follows 
underlying set set equivalence classes equivalence relation jx relates 
supp supp fa write equivalence class pair 
swapping action inherited product de nitions check requirements de nition satis ed particular support turns nite set supp fag cf 
proposition 
see notion atom abstraction treat syntax modulo equivalence inductively de ned sets useful associated structural induction recursion principles fraenkel mostowski permutation model set theory 
observe notion de nable nominal logic 
situation analogous fact cartesian products de nable ordinary rst order logic sorts rst order theory models interpretation isomorphic cartesian product interpretations theories example take function symbol pair axioms pair pair pair nominal logic similar de nability result atom abstraction sets 
sorts sort atoms function symbol abs axioms abs abs aa 

abs ensure semantics sect 
interpretation isomorphic nominal sets interpreting respectively 
gives extension nominal logic atom abstractions 
axiom ensures crucial equivariance properties proposition extended syntax freshness property proposition 
axiom chosen equivalent formulation avoiding freshness quanti er noted axiom determine meaning category nominal logic add syntax nominal logic follows 
sort atoms sort sort data called sort atom abstractions sort atoms sort distinguished function symbol arity ect terms write term pronounce 
add axioms nominal logic 




fig 

nominal logic atom abstractions nom isomorphism 
reason characterisation freshness atom abstractions theorem extended nominal logic axioms 
proposition 
distinct sorts atoms sort formulas provable nominal logic extended fig 

proof 
view axioms suces prove sorts atoms possibly equal 
axiom nd 
axioms 
axiom 
axioms axiom 
argue cases 
sorts cases axioms andrew pitts proposition holds extended syntax virtue axiom 
axiom nd 
axiom 

axiom 
axiom 
axiom 
get 

required 
ut example terms mod equivalence version 
reformulate example atom abstractions changing arity lam var term term 
time axiom replaced simple injectivity requirement axioms var term lam lam similarly disjointness axioms replaced var var term var lam var term term lam app exhaustion axiom term var var term app var term lam axioms alter straightforward ways take account new arity lam result needed section 
shows sorts dual nature elements embody notion abstraction bound variable body pair modulo renaming bound variable notion abstraction function albeit partial atoms individuals 
proposition 
formula provable nominal logic extended fig 


means exists unique 
usual encoding rstorder logic 
proof 
uniqueness part follows nominal logic corollary axioms 
existence part note proposition holds follows axiom proposition speci cally property 
ut choice informal arguments syntax says things choose fresh name 
axiom fig 
ensures comply directives nominal logic formalisation freshness 
important note nominal logic choices uniformly parameters general inconsistent axioms adding function symbols fresh satisfying fresh simplest possible example phenomenon 
proposition 
suppose sort atoms 
formula theorem nominal logic 
inconsistent assume function atom picks atom di erent words nominal logic theory function symbol axiom inconsistent 
proof 
formula immediate consequence axioms 
second part show theorem 
note axiom empty list parameters atom sort show 
proposition 
axiom get ut phenomenon re ection fact category nom nominal sets fails satisfy axiom choice see categorical treatment choice turn re ects fact design axiom choice reader deduce point author category theoretic bent assuming formulation rst order logic entails sorts non empty 
possibly empty sorts empty set uses 
andrew pitts fails hold fraenkel mostowski permutation model set theory :10.1.1.62.9845:10.1.1.62.9845
problem principles unique choice 
example nominal logic theory model nom satisfying sentence theory extended function symbol axiom modelled nom simply cartesian category subobject satisfying properties single valued total relation graph morphism 
unfortunately far common situation conditional unique existence graph partial function domain de nition seen examples propositions 
formula theorem nominal logic theory adding function symbol axiom result inconsistent theory 
represents total function terms hold deduce properties term may able results proposition deduce properties lead inconsistency especially happens sort atoms 
simplest possible example phenomenon empty list sorts false case formula trivially theorem function constant sort sort atoms get inconsistency corollary 
diculty introducing notations possibly partially de ned expressions masked untyped nature fm set theory :10.1.1.38.9383:10.1.1.38.9383
introduces term formers locally fresh atoms concretion atoms conditional unique existence formulas propositions 
new forms term de nite meaning certain preconditions met 
semantics total elements universe fm sets simply meaning preconditions met default element empty support empty set say 
hack available classical logic terms empty support 
term untyped masked programming language freshml sketched richer term language nominal logic freshml features unrestricted xed point recursion order turing powerful naturally contains partially de ned expressions 
nominal logic setting fm set theory 
sorted nominal logic theory guarantee sort possesses term empty support satisfying sorts atoms corollary shows sorts atoms possess terms consistent theory 
provide nominal logic richer term language incorporating things terms locally fresh atoms concretions atom abstractions atoms merge nominal logic novel treatment atoms freshness conventional treatment logic partial expressions sect 
vi 
related classify fully formal treatments names binding mathematical construct model notion abstraction names abstractions name term pairs 
tries directly parse trees alpha conversion examples approach 
drawback tedious details left implicit informal practice explicit details revisited case case basis object language 
parse trees containing de bruijn indices elegant complications side steps issue formalising informal practice named bound variables 
abstractions functions terms terms 
desire take care tedious details conversion substitution meta level leads naturally encodings object level syntax typed calculus 
approach higher order syntax supported existing systems machine assisted reasoning typed calculus 
lend principles structural recursion induction encoded object language particularly straightforward principles developed see 
abstractions functions names terms 
theory contexts reconciles elegance higher order syntax desire deal names object level relatively simple forms structural recursion induction 
axiomatizing suitable type names classical higher order logic 
theory contexts involves non occurrence predicate axioms quite similar freshness fm set theory nominal logic :10.1.1.62.9845:10.1.1.62.9845
non occurrence dependent object language notion freshness purely logical property independent particular object syntax 
applies axiomatization conversion terms higher order logic extension rst order logic binders studied 
furthermore total functions names model abstraction means theory contexts incompatible andrew pitts axiom unique choice cf 
sect 
forcing theory relational functional feel see 
hand theory contexts able take advantage existing machine assisted infrastructure coq quite easily gabbay hard adapt isabelle set theory package produce isabelle fm sets package chapter iii 
notion abstraction de nable nominal logic see sect 
captures rst third approaches mentioned de ned pairs name component anonymous swapping saw proposition atom abstractions behave functions albeit partial ones 
pros cons various views name abstraction say rst order nominal logic gives elementary explanation names binding mentioned general claim independence notions atoms swapping freshness atom abstraction particular object level syntax 
nominal logic gives rst order axiomatisation key concepts fm set theory atoms swapping freshness model syntax modulo conversion inductively de ned sets structural induction recursion properties remain close informal practice :10.1.1.62.9845:10.1.1.62.9845
seen rst order nominal logic give complete axiomatisation notion nite support underlies notion freshness fm sets 
rst order properties freshness predicate sucient develop useful theory 
axioms fig 
arose naturally gabbay implementation fm set theory isabelle system chapter iii practically useful properties nite support 
nominal logic just vehicle exhibiting properties clearly 
wants single expressive meta logic develop mathematics syntax fm set theory automated support isabelle certainly worth considering developing version classical higher order logic incorporating nominal logic 
care details nominal logic think simple important ideas underlying worth board practice operational semantics pencil machine assistance name swapping 
nicer logical properties renaming 
assertions syntax deal ones validity invariant swapping names 
takes na view abstractions name term pairs useful de ne conversion capture avoiding substitution terms name swapping take account equivariance inductive arguments 
gave small illustration example 
example provided cardelli modal logic spatial structure nominal logic concurrent systems related freshness quanti er sect 

see renaming treat naming aspects process calculi 

described draws joint gabbay described :10.1.1.62.9845:10.1.1.38.9383
gratefully acknowledge conversations fm sets members cambridge logic semantics group particularly mark michael keith wansbrough designing freshness relation quanti er symbols 
beeson 
foundations constructive mathematics 
ergebnisse der mathematik und ihrer 
springer verlag berlin 
cardelli 
spatial logic concurrency 
draft april 
cardelli gordon 
logical properties name restriction 
abramsky editor typed lambda calculus applications th international conference volume lecture notes computer science 
springer verlag berlin 
coq proof assistant 
institut national de recherche en informatique en automatique france 
coq inria fr de bruijn 
lambda calculus notation nameless dummies tool automatic formula manipulation application church rosser theorem 

math 
despeyroux pfenning sch 
primitive recursion higherorder syntax 
typed lambda calculus applications rd international conference volume lecture notes computer science pages 
springer verlag berlin 
dowek hardin kirchner 
completeness theorem extension rst order logic binders 
ambler crole editors mechanized reasoning languages variable binding merlin proceedings workshop held conjunction international joint conference automated reasoning siena june department computer science technical report pages 
university leicester 
freyd 
axiom choice 
journal pure applied algebra 
gabbay 
theory inductive de nitions equivalence semantics implementation programming language 
phd thesis cambridge university 
gabbay pitts :10.1.1.38.9383:10.1.1.38.9383
new approach syntax involving binders 
th annual symposium logic computer science pages 
ieee computer society press washington 
gabbay pitts :10.1.1.62.9845:10.1.1.62.9845
new approach syntax variable binding 
formal aspects computing 
special issue honour rod burstall 
appear 
gordon melham 
axioms alpha conversion 
theorem proving higher order logics th conference tphols volume lecture notes computer science pages 
springer verlag berlin 
andrew pitts gunter 
semantics programming languages structures techniques 
foundations computing 
mit press 
honda 
elementary structures process theory sets renaming 
mathematical structures computer science 
honsell miculan 
axiomatic approach metareasoning systems higher order syntax 
eighth international colloquium automata languages programming icalp crete greece july proceedings lecture notes computer science 
springerverlag heidelberg 
:10.1.1.38.9383
volume math 
wiss 
springer berlin 
:10.1.1.62.9845:10.1.1.62.9845
axiom choice 
barwise editor handbook mathematical logic pages 
north holland 
makkai reyes 
order categorical logic volume lecture notes mathematics 
springer verlag berlin 
mckinna pollack 
type theory lambda calculus formalised 
appear journal automated reasoning special issue formalised mathematical theories pfenning ed 
miculan 
developing meta theory lambda calculus theory contexts 
ambler crole editors mechanized reasoning languages variable binding merlin proceedings workshop held conjunction international joint conference automated reasoning siena june department computer science technical report pages 
university leicester 
paulson 
isabelle generic theorem prover volume lecture notes computer science 
springer verlag berlin 
pfenning elliott 
higher order syntax 
proc 
conference programming language design implementation pages 
acm press 
pitts 
categorical logic 
abramsky gabbay maibaum editors handbook logic computer science volume 
algebraic logical structures chapter 
oxford university press 
pitts gabbay 
metalanguage programming bound names modulo renaming 
backhouse oliveira editors mathematics program construction 
th international conference mpc ponte de lima portugal july 
proceedings volume lecture notes computer science pages 
springer verlag heidelberg 
sch 
automating meta theory deductive systems 
phd thesis carnegie mellon university 
scott 
identity existence intuitionistic logic 
fourman mulvey scott editors applications sheaves proceedings durham volume lecture notes mathematics pages 
springerverlag berlin 

formalised rst order con uence proof calculus sorted variable names 
middeldorp editor rewriting techniques applications th international conference rta utrecht netherlands may proceedings volume lecture notes computer science pages 
springer verlag heidelberg 
