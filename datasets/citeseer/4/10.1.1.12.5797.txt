experiments automata compression jan daciuk alfa informatica rijksuniversiteit groningen groningen netherlands mail daciuk rug nl 
compression methods nite state automata evaluated 
compression methods described literature 
impact size automata described 
ll gap presenting results experiments carried automata representing german dutch morphological dictionaries 
finite state automata various applications 
reasons provide compact representations sets strings 
size automaton measured bytes vary considerably depending storage method 
described primary interested automata compression 
provide sucient data uence particular methods size resulting automaton 
investigate 
deterministic acyclic automata experiments 
methods depend feature 
automata minimal rst step compression minimization 
starting point follows 
automaton stored sequence transitions 
states represented implicitly 
transition label pointer target state number transitions leaving target state transition counter nal marker 
transition counter determine boundaries states nding subtracting addresses states large vector addresses states get rid vector 
store nal marker signi cant bit transition counter 
non standard automata automata nal transitions see states transitions traditional ones 
storage methods results valid traditional automata 
compression techniques compression techniques fall main categories fig 

starting point storage method 
label marks nal transitions number outgoing transitions target state pointer target state 
automaton recognizes words say stay 
coding input data making parts automaton share space reducing size elements automaton 
techniques may contribute compression ways changing order transitions state sharing transitions possible reduce size pointers 
rst category depends kind data stored automaton 
techniques apply natural language dictionaries 
de ne deterministic nite state automaton nite set states initial state set nal states set transitions 
de ne function bytes returns number bytes needed store argument bytes dlog xe 
total savings percents achieved particular method starting point automaton 

sizeof number transitions ected compression method saving bytes ected transition sizeof size automaton bytes 
size automaton starting point representation jej 
bytes jej 
calculations assume additional bit ags require space taken pointer need enlarge 
coding input data section applies natural language morphological dictionaries 
entries dictionaries usually contain pieces information ected form base form categories associated ected form 
common systems developed university campinas represent information string base form coded 
standard coding consists character says characters deleted ected form rest match base form string characters appended result previous operation form base form 
solution works languages pre xes xes morphology french 
languages german dutch pre xes xes forms 
accommodate feature need additional codes 
rst says position pre second code length pre languages xes pre xes possible omit position code 
eliminating transition counters basic ways eliminate transition counters 
uses clever sparse matrix representation see 
apart eliminating transition counters gives shorter recognition times transitions longer checked accessed directly 
method excludes compression methods discuss 
method giving compression see state set transitions list transitions 
longer specify transition count provided transition bit ag indicating transition belonging particular state see 
bit stored space pointer target state nal marker 
combine method 
fig 

states seen lists transitions 
marker transition state 
sb jej sb bytes transition sharing look gure see exactly transition twice automaton 
part state di erent transitions time part state transition 
information state boundaries stored transitions belonging state share transitions states left 
precisely smaller state smaller number outgoing transitions stored bigger 
possible place transitions state part falls di erent state rest 
possible keep transition counters discuss 
fig 

transitions number gures occupy space 
version counters left lists right 
version uses lists transitions exactly transitions belonging state holds information state boundary 
boundary de ned pointer transitions lead state 
transitions smaller state transitions bigger state store inside right 
pointers fig 

ag sharing transitions 
version counters left lists right 
represents ag 
tomasz kowaltowski 
note states incoming outgoing transition forming chains states 
natural place states data structure 
call state placed directly current state 
observed add ag target state need pointer transitions pointing states 
case target state need place ags markers take space byte full pointer 
case target state state full pointer 
need additional bit pointer ag 
usually nd space 
implementation ag transition state 
representation example automaton looks gure 
maximum number transitions pointers equal number states automaton minus initial state 
reason transition leading state may placed immediately front automaton 
transitions states having outgoing transition arranged way transition leading state automaton may 
transition source state exactly outgoing transition target state exactly incoming transition transition pointer 
assuming jf gj np np jqj np bytes jej tails states section assumed entire states share space larger states 
list representation section share parts states 
states share transitions 
consider complicated example 
transition number holds fact identical transitions 
states reachable start state transitions 
transitions common states label 
second di erent labeled 
avoid confusion ag 

fig 

automaton recognizing words pay play say stay sharing transitions states 
pointer tail state 
implement tail sharing need things new ag call tail ag shown gure value implied additional pointer occurring tail ag set 
ag set rst transitions kept additional pointer points rst transition tail shared state 
need bit ag allocate place bytes transition pointers 
changing order transitions examples showed far told order transitions state 
techniques transition sharing depend order transitions 
automata construction algorithms may impose initial ordering may best 
kowaltowski 
propose sorting transitions increasing frequency labels 
propose change order state individually 
order transitions uences number states considered 
increase number pointers try change order transitions states compression 
increase transition sharing put possible set transitions starting biggest state register look states tails states match 
techniques techniques experimented 
include local pointers indirect pointers 
local pointers mentioned 
stipulate propose byte pointers states located close automaton full length pointers states 
ag needed di erentiate 
indirect pointers proposed patent granted august xerox 
putting pointers frequently referenced locations vector full length pointers replacing pointers transitions short indexes vector gain space 
experiments data experiments carried morphological dictionaries german dutch 
german morphological dictionary sabine lehmann contains entries 
automaton version coded suxes states formed chains transitions 
version coded suxes pre xes xes states formed chains transitions 
results table gives size automata built various options 
sg automata bigger expected space ag pointer 
nm sg sgi cd cdi smo sn snm sno sg sgi cd cdi sto sg sgi cd cdi table 
size automata built various options sabine lehmann german morphology celex dutch morphology bytes 
table sg means sabine lehmann german morphology coded suxes cd celex dutch coded pre xes xes shared transitions bit lists transitions pointers tails states changing order transitions 
case german morphology managed compress initial automaton fourfold 
coded xes pre xes compressed input data times 
gzip compressed input data coded xes pre xes bytes 
automata input data smaller compression dutch 
smallest automaton obtained compressed gzip 
best compression method german turned preparation input data 
gave savings 
dutch savings words pre xes xes constituted data case german 
predicted elimination transition counters gave average 
gure higher german dutch pointers counters took proportionally space transitions 
gure lower transition sharing distributing state states longer possible 
german pointers gave savings predicted range 
dutch 
savings bigger bit option 
surprisingly transition sharing ective sg sgi dutch works better sgi sg contains chains states 
compression tails states adds german dutch data additional bit ag crosses byte boundary 
changing order transitions gives small results 
managed speed takes fraction construction time 
acknowledgments express gratitude sabine lehmann making dictionary available 
baayen celex lexical database cd rom 
linguistic data consortium university pennsylvania philadelphia pa 
jan daciuk 
incremental construction finite state automata transducers natural language processing 
phd thesis technical university gda 
jan daciuk bruce watson richard watson 
incremental construction minimal acyclic nite state automata 
computational linguistics april 
george 
compressed storage sparse nite state transducers 
workshop implementing automata pre proceedings pages xix xix 

tomasz kowaltowski cl audio lucchesi jorge minimization binary automata 
south american string processing workshop 
tomasz kowaltowski cl audio lucchesi jorge finite automata ecient lexicon implementation 
technical report ic january 
sabine lehmann 
multext german morphology 
issco geneva september 
claudio tomasz kowaltowski 
applications nite automata representing large vocabularies 
software practice experience jan 
dominique 
ethodes algorithmes 
phd thesis institut blaise pascal paris france 

max 
finite state language processing chapter lexical analysis natural languages pages 
mit press 
max 
tutorial notes 
workshop implementing automata pre proceedings pages xix xix 

robert endre tarjan andrew chi chih yao 
storing sparse table 
communications acm november 
