portfolio approach algorithm selection kevin leyton brown eugene galen andrew jim mcfadden yoav shoham shoham cs stanford edu stanford university stanford ca algorithms better average rarely best algorithm problem 
case different algorithms perform different problem instances 
surprisingly phenomenon pronounced algorithms solving np hard problems runtimes algorithms highly variable instance instance 
algorithms exhibit high runtime variance faced problem deciding algorithm rice dubbed algorithm selection problem nearly decades followed issue algorithm selection failed receive widespread attention course excellent exist 
far common approach algorithm selection measure different algorithms performance problem distribution algorithm having lowest average runtime 
winner take approach driven advances algorithm design refinement resulted neglect algorithms average may offer excellent performance particular problem instances 
consideration algorithm selection literature dissatisfaction winner take approach led ask questions 
general techniques perform instance distribution algorithm selection 
second rejected notion winner take algorithm evaluation ought novel algorithms evaluated 
offer answers 
algorithms high average running times combined form algorithm portfolio low average running time algorithms easy inputs sufficiently uncorrelated 

new algorithm design focus problems current algorithm portfolio performs poorly 
readers familiar boosting paradigm machine learning recognize boosting uses similar ideas combining weak classifiers stronger ensemble iteratively training new classifiers data ensemble performs poorly 
algorithm portfolios previous demonstrated statistical regression learn surprisingly accurate models empirical hardness distributions problem instances 
short method proposed cplex portfolio optimal cplex portfolio optimal gl cass cplex time gl cass cplex time algorithm portfolio runtimes cplex optimal cplex selected 
domain knowledge select features problem instances indicative runtime 

generate set problem instances distribution collect runtime data algorithm instance 

regression learn real valued function features predicts runtime 
existing technique predicting runtime propose building portfolios multiple algorithms follows 
train model algorithm described 

instance compute feature values predict algorithm running time run algorithm predicted fastest wdp case study past case study data collected previous constructed models predicting running time cplex solver winner determination problem wdp np complete combinatorial optimization problem formally equivalent weighted set packing 
created models wdp algorithms gl lehmann simple branch bound algorithm cplex lp solver heuristic cass complex branch bound algorithm non lp heuristic 
data set consists instances fixed size goods nondominated bids sampled uniformly cats instance generator 
methodology relies machine learning split data training validation test sets 
report portfolio runtimes test set train evaluate models 
runtime data collected mhz pentium running linux 
wdp case study portfolios describe new results 
fig 
compares average runtimes algorithms portfolio 
note cplex chosen winner take algorithm selection 
optimal bar shows performance ideal portfolio algorithm selection performed perfectly overhead 
portfolio bar shows time taken compute features light portion time taken run selected algorithm dark portion 
despite fact cass gl slower cplex average portfolio outperforms cplex factor 
neglecting cost computing features portfolio selections take longer run optimal selections 
figs 
show frequency algorithm selected ideal portfolio portfolio 
illustrate quality algorithm selection relative value algorithms 
portfolio right choice mistakes occur algorithms similar running times 
mistakes costly explains portfolio choices running time close optimal 
results show portfolio methodology small number algorithms algorithm superior average performance 
focused algorithm design decided select algorithms portfolio instance basis necessary reexamine way design evaluate algorithms 
purpose designing new algorithms reduce time take solve problems designers aim produce new algorithms complement existing portfolio distribution reflecting problems encountered practice 
instances greatest potential improvement hard portfolio common 
full version describes technique rejection sampling automatically generate instances 
figures show techniques able automatically skew easiest cats instance distributions harder regions 
fact distributions generated instances respectively times harder previously seen 
average runtime new distributions greater observed maximum running time original distribution 
matching scheduling learned runtime models may create algorithm portfolios outperform constituent algorithms 
models induce harder benchmark distributions development evaluation new algorithms 
case study combinatorial auctions demonstrates portfolio composed cplex older generally slower algorithms outperforms cplex factor 
full version describe methodology detail show reduce time spent computing features substantially degrading portfolio performance demonstrate ways response variable transformations focus portfolios metrics average running time explain induce distributions characteristics hardness realism compare approach previous executes algorithms parallel uses classification regression considers problem mdp leyton brown shoham 
taming computational complexity combinatorial auctions optimal approximate approaches 
ijcai 
gomes selman 
algorithm portfolios 
artificial intelligence 
lehmann 
linear programming helps solving large multi unit combinatorial auctions 
technical report tr leibniz center research computer science april 
horvitz ruan gomes kautz selman chickering 
bayesian approach tackling hard computational problems 
uai 
lagoudakis littman 
algorithm selection reinforcement learning 
icml 
leyton brown shoham 
learning empirical hardness optimization problems case combinatorial auctions 
cp 
leyton brown pearson shoham 
universal test suite combinatorial auction algorithms 
acm ec 
rice 
algorithm selection problem 
advances computers 
schapire 
strength weak learnability 
machine learning 
