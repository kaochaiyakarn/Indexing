bridging gap case analysis class structure design formal concept analysis stephan wel wolfgang hesse early stages software development increasingly supported objectoriented analysis design ooa ood techniques 
methodologies suggest combine jacobson case analysis modelling techniques class object structure object behaviour process interaction 
choice definition objects classes domain space supported techniques left intuition analyst 
formal concept analysis fca mathematical theory offers support analysing visualising conceptual relationships lattice diagrams 
shown fca successfully applied bridge gap mentioned techniques starts analysis formal context cases relevant things involved cases 
produces lattice visualised line diagram design decision aid building appropriate class object structure 
structure prerequisite modelling steps modelling processes sequence diagrams 
article comprises outline covered ooa ood steps short basic notions fca presentation approach including demonstration example 
motivation goals decade large variety object oriented analysis design ooa ood techniques developed supported notations tools applied academic industrial software development projects 
traditional techniques typically relatively independent models represented different views system developed data view functional view treated separately process behavioural view 
designing constructing uniform system heterogeneous models resulted severe re structuring problems project failures 
object oriented software development techniques particularly ooa techniques promised solution unsatisfying situation 
share paradigm encompassing persistent class structure model built analysis stages modifications enhancements maintained system life cycle including operational stages 
model intended map mirror relevant ingredients application domain including relationships behaviour 
various methodologies paradigm published experienced including booch jacobson jcj modellierung mellor coad yourdon rumbaugh rbp martin odell 
moment certain convergence methods techniques expected evolving unified modeling language marketed rational 
integrating data functional aspects joint class structure model serving analysis design purposes big step fully supported object oriented development process 
model incomplete respects cover important aspects process modelling large object behaviour time leaves fundamental question define delimit classes objects intuition analyst 
oo methodologies answered open question including additional notations diagram types modelling uncovered aspects 
cases case diagrams introduced jacobson interaction event trace sequence diagrams jacobson rumbaugh uml state charts adopted harel uml 
fig 
listed considered methodologies including uml diagram techniques recommend 
fig 
oo methodologies techniques particular cases popular means analysing sample processes application domain 
course analysis normally yields valuable insights results concerning second mentioned questions find class object structure 
offer systematic procedure formalism support step consider crucial development process 
objects classes fall heaven just picking form basis subsequent modelling steps 
believe important step deserves attention formal support focus conceptual analysis application domain 
agree authors booch martin odell rumbaugh start concepts writing object oriented software development 
strong argument formal concept analysis fca class object definition steps object oriented analysis 
fca mathematical theory offers support analysing visualising conceptual relationships lattice diagrams 
propose fca order bridge gap case analysis steps imply determination class object structure production state charts sequence diagrams 
technique starts analysis formal context cases relevant things involved cases 
produces lattice visualised line diagram design decision aid building appropriate class object structure 
structure stable basis indicated analysis modelling steps 
case analysis class structure design sections approach detail 
closer examine covered ooa ood steps contributions known methodologies support steps section 
basic notions fca introduced exemplified section 
section application fca example demonstrated 
shown insights results analysis build refine class structure model domain 
article ends outlook general section 
object oriented system analysis cases class object structures early nineties jacobson introduced case analysis starting step primarily performed early stages system domain analysis 
jacobson case special behaviorally related sequence transactions user perform 
dialogue system jcj 
resulting case model part requirement model forms basis subsequent models including analysis model design model implementation model jcj 
jacobson states transformation cases objects forms important parts methodology jcj 
done partition functionalities 
systematic procedure guideline derive objects classes cases 

entity objects early obvious 
obvious entity objects identified problem domain object model 
harder find 
entities usually correspond concept real life outside system case 
jcj 
agree indicated transformation important believe support adequate 
earlier reported case study aimed determine class object candidates cases means formal concept analysis 
principle turned resulting concepts candidates classes class components attributes operations analyst choose classes decide ones treat classes class components 
revisiting example want shift focus different perspectives analyst adopt early analysis stages learn reading fca line diagrams different sides support choices decisions 
find quite interesting observation just non oo technique case analysis popular starting point oo analysis 
shows different perspectives vital thorough analysis practicable methods involve perspective changes example functional view represented case diagrams data view represented class structure diagrams 
sum observations case methodologies cases natural entry point system analysis help concentrate goals functional aspects application system 
modellierung step case class structure model implies change perspective functional data view implied earlier structured techniques 
propose postpone decision class candidates better insight functional data view achieved 
step examine full system functionality cases look involved things 
things candidates entity objects attributes 
data centred view complemented functionally decomposing uses cases level operations assigned classes 
steps supported fca particular resulting line diagrams illuminate obtained analysis results 
formal concept analysis short formal concept analysis fca starts set formal things german nde set formal features german 
original papers fca usually formal things formal features called formal objects formal attributes 
chosen terms avoid mix oo terminology 
term thing prefix formal denoting real world things 
formal things formal features connected binary relation called incidence relation 
relation indicates formal thing formal feature 
triple called formal context 
visualised table 
table gives example formal context 
example authors uml formal things proposed notation techniques formal features relation marks table 
formal context formal concepts built set formal things set common formal features set common formal things 
pair called formal concept formal concept called extent intent 
extent comprises formal things belong formal concept intent consists formal features formal things formal concept share 
just formalisation concept viewed philosophy understood martin odell cf 

set formal concepts formal context consider sub super concept relation formal concept called sub concept formal concept denoted condition holds condition equivalent 
ordering relation set formal concepts formal context forms complete lattice called concept lattice cf 

finite ordered set finite concept lattice visualised line diagram 
fig 
shows line diagram corresponding formal context fig 

nodes line diagram represent formal concepts 
sub super concept ordering relation directly visualised edges node connected lower neighbours respect sub super concept order 
paths descending node formal concept lead nodes representing sub concepts 
reason line diagram directed acyclic graph direction edges represented vertical arrangement start vertices 
case analysis class structure design formal thing formal concept ii dually formal feature ii formal concept 
minimal formal concept containing extent dually greatest formal concept comprising intent 
fact allows abbreviated notation line diagram 
formal thing annotated beneath node representing formal feature marked node representing 
information formal context preserved line diagram 
formal features belonging formal thing ascending paths node marked 
find formal things characterised formal feature proceed analogously descending paths 
fig 
line diagram corresponding fig 
example read fig 
node labelled case diagram represents formal concept uml jacobson case diagram sequence diagram class diagram statechart diagram super concept uml case diagram sequence diagram class diagram statechart diagram activity diagram collaboration diagram deployment diagram component diagram cf 
node labelled uml case diagram uml 
second concept lower neighbour 
structure line diagram contains information 
example considered methods class diagrams model static system structure statecharts model dynamic aspects 
coad yourdon authors sequence diagrams collaboration diagrams model dynamics 
authors uml gave little ideas jacobson lost object diagram state transition graph rumbaugh maintain data flow diagrams booch abandoned timing diagrams 
apart dropped concepts uml union modelling concepts authors activity diagrams added 
modellierung formal context concept lattice represent different views information 
usually line diagram concept lattice computed formal context investigation context data done help diagram 
computation correct diagram done automatically normally resulting diagram needs manual re arrangement order get nice shape 
vertical position node relative neighbours changed changing semantics diagram tools keep track 
horizontal arrangement absolute distances arbitrarily chosen 
view turns helpful implications 
implication sets formal features states formal thing having formal features formal features implication read line diagram way formal concept descending path infimum 
example fig 
see author proposes sequence diagrams data flow diagrams suggests collaboration diagrams 
sequence diagram data flow diagram collaboration diagram holds 
correspondingly implication sets formal things holds formal feature belongs formal things belongs formal things small example shows knowledge represented structured way means fca 
example business wine distribution centre example demonstrate formal concept analysis fca extract suitable class candidates case descriptions 
build basis class model sequence diagrams cases 
chosen example report 
student projects served demonstrating application uml techniques 
results elaborated students project cf 
basis article example 
applied fca students results 
case study describes development software system japan wines 

wine distribution centre orders wine delivers retail shops 
originally business described informal statements 
students extracted cases receive order process order order missing products create delivery instructions process delivery results process incoming deliveries determine inventory stock define maximal minimal stock quantity 
illuminate style case descriptions rephrase 
formulated analogous manner cf 

receive order centre receives orders customers phone 
received order recorded form 
order may consist detailed items 
detailed items refer single products 
detailed item recorded line form 
case analysis class structure design create delivery instructions centre produces delivery instruction ticket delivery truck gathering ordered items assigned ordered items file considering destinations total amount orders item 
order treat case descriptions fca perform indexing 
professional projects done help domain expert 
case list involved things 
things candidates objects classes attributes class model 
terms fca treat cases formal features real things formal things 
incidence relation points thing involved case 
case uses extends case things occurring considered involved 
correspondingly formal context implication formal features introduced 
performing indexing example got formal context fig 

formal context reflects indexing cases 
course result highly depends choices things developer 
things show low position fig 
formal context cases resulting line diagram relevant cases 
class class candidates 
consider potential attributes class candidates 
mentioned examined things usually position class 
case assume case deals attribute access class 
formal context implication class attributes class hold 
observation may associate right attributes class developer chosen 
different cases different attributes class may wide spread line diagram 
case preferred class candidates system detailed ordered item product lowest positions diagram 
cases 
attribute candidates stock quantity minimal maximal stock quantity class candidate product show just product 
sufficient examine just lowest level line diagram 
example class candidates interesting single cases show node corresponding case 
line diagram shows dependencies data functional view domain 
looking diagram supremum top side follow modellierung refinement cases representing system functionality 
considering diagram infimum bottom side yields data view 
fig 
line diagram system type line diagram gives valuable hints finding classes things chosen relevant gives ranking way associate attributes classes 
furthermore nodes sub super concept relationship considered class candidates relationship may interpreted inheritance uses relation resulting classes 
point examination class operations missing 
cases functionally decomposed step step level class operations reached 
resulting sub cases included analysis new formal features 
formal context extended correspondingly marking involved things 
furthermore detailed functional perspective may yield new relevant things associated sub cases 
keep formal context consistent implication sub case original case added cf 
treatment uses relationships cases 
new context new line diagram computed 
level class operations reached new line diagram shows data dependencies resulting operations 
general problem refinement processes decide refinement 
formulating criteria particularly difficult situation final classes needed decide sub case treated class operation 
fca gives support define criteria 
order find potential operations associated class candidates examine implications formal things 
case implication sets case analysis class structure design formal things suggests operations things things basis implications computed 
implications basis analysts form questions decide implication really holds application domain 
operation included refinement separates things operation considered refinement case 
example fig 
implication delivery instruction assigned ordered items file holds 
examination analysts shows implication correctly reflect real world situation 
case create delivery instructions refined leading sub cases create delivery instruction insert detailed ordered item attach delivery instructions 
attach delivery instructions create delivery instruction insert detailed ordered item fig 
case create delivery instructions refined refinement unnatural implication removed potential class operations 
line diagram contains data formal things operations formal features 
incidence relation reflects data operation 
lindig snelting examined situation looking modular structure existing systems cf 

module candidates considered formal concepts called blocks cf 

fca block relation formal context defined binary relation satisfying intent extent forms new formal context formal concepts correspond intervals named blocks original concept lattice 
block relations formal context automatically computed 
analogously lindig snelting aim find additional class candidates studying block relations 
object oriented analysis attributes operations grouped modellierung classes 
fca corresponds grouping formal things formal features formal concepts 
formal concept formal feature belongs formal thing vice versa 
case restrictive expect class attribute involved class operation 
block relations help generalise grouping 
formal context table formal concepts visible maximal filled rectangles 
block relation incompletely filled rectangles completed additional marks see condition 
filling done carefully grouping formal things concept extents formal features concept intents changed condition 
fig 
line diagram block relation context fig 
blocks original line diagram case analysis class structure design sample case find interesting class candidates way 
block relations turned helpful finding coarse structure packages components system 
example block relation formal context fig 
yielded line diagram fig 

corresponding blocks original concept lattice marked fig 

left block comprises deliveries right block concerned internal stock management 
central higher block describes component coordinates activities response orders retail shops 
tool support currently developing tool supporting sketched analysis method 
tool mathematical background hidden user 
structure line diagram may interpret knowing exact mathematical semantics 
user name describe cases 
tool allows pick words entered description mark involved things 
alternatively may type things independently choose list entered things 
tool stores data formal context invisible user computes line diagram corresponding concept lattice displays user 
fig 
case dialog fig 
shows dialog enter case data 
upper left list box shows cases entered edit box 
list case may selected entering details 
selected case shown middle boxes 
modellierung dialog elements referring case surrounded black line 
edit field description list boxes showing uses extends relationships things involved case 
right hand side list box entered things corresponding edit box 
fig 
user selected term waiting ordered items file case description 
may edit right edit box insert edited name list examined things time attach selected case 
extended cases may simply picked list cases 
way identified cases specified described section 
example tool computed line diagram case data fig 
automatically computed line diagram shown concept lattice just fig 

computation diagram tool uses formal concept analysis library developed frank vogt darmstadt described vogt modifications 
automatic drawing guarantee correctness diagram beauty 
second user responsible 
may drag diagram vertices single beneath text drop position likes 
tool allow destroy vertical order connected nodes 
case analysis class structure design article demonstrated formal concept analysis guide transformation steps case model class structure model early stages system analysis 
transformation profited line diagram fca enabled study application domain simultaneously perspectives combining data functional view 
experience approach play class candidates try different solutions associating classes class components particularly promising 
aware important difficult task requires detailed completely automated including negotiations thorough discourse domain experts software developers certain quality standards achieved 
shown formal concept analysis resulting line diagrams methods refine examine diagrams successfully applied visualise complex situations facilitate communication people involved 
tool developed allows user enter uses cases descriptions 
case descriptions may select words involved things 
words modified conform system wide conventions 
furthermore things entered independently case descriptions uses extends relationships cases may defined 
line diagram automatically computed described section 
mathematical structure shown user 
familiar mathematical background line diagram readable knowing lattices 
tool additional effort spent indexing cases formatting corresponding line diagrams soon compensated advantages transparent visualisation eased communication 
currently working method support comparison different line diagrams integrate views different analysts 
focussed particular aspect oo modelling particular fca task 
tasks oo analysis modelling field considered example process modelling clustering classes objects modelling states transitions 
broad application field fca related areas software design re engineering 
example successful applications fca reported structuring class models cf 
gmm modularization existing systems cf 

envision broad complementary support activities early stages software engineering formal concept analysis methods field traditionally reserved bare intuition involved experts 
booch jacobson rumbaugh uml notation guide rational software www rational com uml resources documentation notation index modellierung booch object oriented analysis design applications benjamin cummings coad yourdon object oriented analysis prentice hall wel hesse identifying candidate objects system analysis proc 
caise ifip rd int 
workshop evaluation modeling methods system analysis design pisa franke graf informatik uml eines universit marburg www mathematik uni marburg de hesse uml welcome html hesse nilsson oei rolland van stuart voss framework information system concepts report ftp ftp nl pub fri full zip ganter wille formal concept analysis mathematical foundation springer gmm godin mili mineau missaoui 
chau design class hierarchies concept galois lattices theory application object systems pp 
jcj jacobson jonsson object oriented software engineering case driven approach acm press addison wesley lindig snelting assessing modular structure legacy code mathematical concept analysis 
proc 
international conference software engineering icse boston usa pp 
martin odell object oriented analysis design prentice hall meyer object oriented software construction prentice hall rbp rumbaugh blaha premerlani eddy lorensen object oriented modelling design prentice hall englewood cliffs mellor object modeling world states yourdon press snelting tip reengineering class hierarchies concept analysis proc 
acm sigsoft symposium foundations software engineering pp 
vogt vogt formale mit und algorithmen springer 
