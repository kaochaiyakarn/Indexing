encryption cycles views cryptography laud university estonia cybernetica lab lai estonia cyber ee 
abadi rogaway started process bringing approaches formal computational cryptography 
shown impossible completely unify approaches typical forms principal di erences security definitions 
di erence security encryption cycles 
encryption cycle sequence keys key encrypted key encrypted 
formal treatment considered secure computational treatment insecure 
encryption cycles insecure formal model dolev yao model slightly strengthening attacker 
modified formal model classical computational model unifying results abadi rogaway hold unconditionally 
step bridging gap formal computational treatments cryptography cryptographic protocols 
cryptographic protocol sequence messages entities participating protocol rules specify messages constructed identities satisfy 
protocols designed aim achieve security objectives adversary system 
adversary read intercept analyse messages sent parties protocol construct send new messages 
di erent models describing adversary analyse construct messages evolved years 
called formal model messages considered formal expressions term algebra cryptographic operations modeled constructors terms adversaries abilities defined structure messages known 
prominent examples treatment cryptographic protocols 
model called computational model supported estonian science foundation messages considered bit strings cryptographic operations modeled probabilistic functions set bit strings adversary cient algorithm 
models computational arguably realistic messages encoded bit strings real life 
reality adversary cient algorithm 
hand formal model easier reason simple algebraic structure 
models evolved separately 
years ago results relating models started appear 
abadi rogaway shown formal expressions messages formal model look adversary distributions bit strings corresponding expressions look adversaries computational model 
abadi laud generalised results richer formal languages values formal expressions handling outputs programs :10.1.1.29.1076
interesting case results abadi rogaway abadi laud cover :10.1.1.29.1076
looking formal expressions may contain encryption cycles 
simplest encryption cycle key encryption available adversary 
formal model adversary knows just unable obtain computational model encryption primitive traditionally required secure attacks setup implies adversary obtain say adversary computational model obtained encryption key find key 
encryption cycles may longer example encryption cycle length 
secure formal model possibly insecure computational model 
basically possible approaches overcome discrepancy change formal computational model 
changing computational model involves giving stronger definitions security encryption primitive constructing primitives satisfying security definition 
done black 
construction satisfies security definition random oracle model existence random oracles security assumption 
changing formal model involves strengthening adversary able obtain longer encryption cycles involving 
strengthening adversary topic 
considering known encryption cycles avoided possible 
definition strengthened adversary provides tool avoiding 
define strengthened attacker formal model 
show formal expressions look attacker distributions bit strings corresponding expressions look adversaries computational model matter expressions contain encryption cycles 
show formal expressions contain encryption cycles look strengthened attacker look normal attacker 
structure 
sec 
give short overview done far bringing treatments cryptography 
sec 
introduces formal model sec 
define language formal expressions syntactic notions sec 
recall powerful attacker classical shape sec 
describe abilities attacker define equivalence relation formal expressions sec 
introduce modified attacker 
sec 
recalls computational model gives definition security encryption systems sec 
translation formal expressions families probability distributions bitstrings sec 

sec 
state prove main justification modifying attacker way sec 
formal equivalence implies indistinguishability interpretations 
sec 
show expressions encryption cycles new attacker stronger classical 
sec 
concludes 
related mentioned 
works considered similar sense attempt show equivalence certain class formally defined objects translates computational interpretations objects 
separate approach pfitzmann backes 
devised framework faithfully cryptographic primitives proofs protocols abstractions hold abstractions replaced actual primitives 
framework suitable abstracting integrity properties confidentiality properties include indistinguishability interpretations expressions 
abstractions generally complex elaborate formal expressions process algebras 
guttman related treatments cryptography certain class authentication protocols 
treatments formal treatment messages formal expressions bitstrings opinion called computational 
called statistical security definitions computational complexity statistical closeness 
relationship treatments usual correctness protocol formal model implies correctness statistical model 
mitchell related aspects cryptography devised computational semantics calculus process algebra formal treatment cryptographic protocols 
correctness proofs cryptographic protocols semantics corresponding computational security definitions 
proofs computational kind 
translation proofs formal computational world 
formal model formal model messages considered formal expressions elements free term algebra 
construction reflects put simpler messages 
set exp formal expressions defined inductively 
formal expressions keys consts sets assume intersection empty 
elements set keys represent keys formal expressions 
elements consts represent constants example booleans integers 
representation really informal formally elements keys consts structure 
definition 
set exp formal expressions smallest set containing elements keys exp consts exp exp term element exp exp keys term element exp set exp smallest useful set describing exchanged messages cryptographic protocols 
course protocols symmetric encryption cryptographic primitive described 
set exp easily extended include cryptographic primitives 
complicate arguments 
note elements keys intended model cryptographic keys formally just objects structure 
similarly term meant model encryption message modelled key modelled formally structure term consisting binary constructor denoted immediate subterms 
step going define formal expression encryption cycles 
property defined structure formal expression 
start definitions simple properties structure formal expressions 
definition 
exp expression subexpression denoted holds see generally subexpression define second notion specifically keys includes keys encryption 
definition 
keys exp say occurs holds occurs occurs occurs keys keys occurs 
formal expression defines binary relation encrypts set keys occuring keys occuring say encrypts exists expression exp example encrypts expression say encryption cycles relation encrypts cyclic 
attacker classical going describe equivalence relation formal expressions abadi rogaway 
mentioned formal expressions equivalent look attacker 
looking defining expression looks 
turn defining subexpressions attacker see expression 
entailment relation exp exp 
intuitively means attacker compute expression expression relation properties consts definition models attacker obtain expression prior knowledge keys expressions 
model attacker formal treatment cryptography 
example 
consider term 
attacker obtain term key subterm key subterm attacker obtain attacker obtain keys equivalence relation step define formal expression looks attacker 
look expression element set patterns extended expressions pat 
smallest set contains elements keys pat 
consts pat 
pat term element pat 
pat keys term element pat 
object denoted element pat 
intuitively denotes term attacker know key see element pat denotes expression may ciphertexts attacker decrypt subexpressions 
attacker knows keys set keys formal expression exp looks pat defined inductively structure follows keys consts assumes attacker obtain keys natural value set keys obtained define pattern keys pattern pattern defines expression looks attacker 
example pattern 
abadi rogaway define expressions equivalent denoted pattern pattern equal equivalent renaming denoted exists bijection set keys equivalent rename keys occuring equivalence natural elements keys considered bound names may subjected conversion 
theorem relating aspects cryptography holds encryption cycles computational interpretations indistinguishable shown 
attacker definition strengthening attacker involves changing entailment relation 
giving new definition equivalence formal expressions defined exactly sec 

fact going give just single relation family relations parametrised keys 
intuitively means attacker compute access oracles decrypt relations defined follows 
consts ii 
iii 
iv 

vi 
vii 
definition items ii iv definition 
item iii obvious monotonicity property 
item bit optimistic attacker point view corresponding item definition need key decrypt ciphertext access oracle decrypts item vi says way obtain access 
item vii breaks encryption cycles 
says key obtainable oracle decrypts key may obtainable oracle 
see examples encryption cycles 
example 
expression 

derived items ii 
derived item vii 
example 
expression 

derived items ii iv 
derived similarly 
derived item iii 
derived item vi 
derived item vii 
example 
expression 

derived items ii 
derived item iv 
derived item vii 
derived item vi 
derived item iv 
derived item vii 
derived item vi 
define formal expression looks attacker 
relation relation 
pattern ec keys similarly define ec pattern ec pattern ec ec bij 
keys ec sec 
show ec computational interpretations indistinguishable 
computational model section give overview constitutes symmetric encryption system security mean 
relate models associating family distributions bit strings formal expression 
content section original repeats sec 
sec 

general concepts introduced 
string denote set bit strings 
function negligible polynomials asymptotically smaller 
probability distribution string 
write denote variable sampled writing means variables sampled independently 
families probability distributions string 
say indistinguishable denoted probabilistic algorithm works polynomial time argument di erence probabilities pr pr negligible intuitively indistinguishability means looking computational model 
simple property indistinguishability transitivity proof statement see example sec 

encryption systems symmetric encryption system triple probabilistic algorithms inputs outputs bit strings 
key generation algorithm takes input security parameter encoded bit string returns key suitable domain key string 
encryption algorithm takes input key plaintext produces ciphertext 
decryption algorithm takes input key ciphertext produces underlying plaintext running times algorithms polynomial fixed member string 
encryption system type secure see discussions algorithms running polynomial time argument di erence probabilities pr ek pr ek negligible 
assume fixed type secure encryption system 
abadi rogaway shown construct systems 
alternative name property repetition concealing key concealing message length concealing algorithm sample initialise keys return convert algorithm initialise algorithm convert case keys return key consts return const return convert convert pair return convert ciphertext fig 

algorithm samples computational interpretation formal expressions models cryptography related associating family distributions bit strings formal expression formal expression serves program specifies algorithm sampling distributions works 
key const pair ciphertext fixed bit strings 
bit strings 

encoding tuple 
bit string 

just concatenation contains information recover 

words string string injective function 
th component family distributions defined stating sampled algorithm sample fig 

algorithm starts picking value key occurs expression values di erent keys picked independently 
value picked key denoted 
sampling algorithm proceeds recursively expression structure 
key mapped 
constant consts mapped representation bit string consts string mapping fixed 
mappings created mappings components natural way 
interpretations expressions tagged type outermost constructor 
tagging ensures bit strings produced sampling algorithm uniquely decomposed 
unique decomposition interpretations formal expressions similar expressions necessary proof theorem 
equivalence models equivalence relations formal expressions computational interpretations related theorem algorithm sample initialise keys return convert algorithm initialise algorithm convert case keys return key consts return const return convert convert pair return convert ciphertext return ciphertext fig 

algorithm samples theorem 
exp ec 
proof 
proof similar setup hybrid argument requires elaborate step sorting hidden keys expressions 
recoverable hidden keys expression defined recoverable keys hidden keys recoverable going extend interpretation expressions fig 
patterns 
going show pattern ec exp proof obviously bijections keys 
concluding proof need transitivity property indistinguishability 
extension computational interpretation language patterns redefining algorithm sample fig 

see exactly changes respect fig 

algorithm initialise generates extra key 
second algorithm convert uses extra key interpreting symbol 
step proof defining hybrids showing pattern ec indistinguishable 
starts suitably ordering keys hidden hybrids defined successively opening hidden keys way hybrid hidden keys covered equal pattern ec hybrid hidden keys visible equal keys topologically sorted relation encrypts order possibly resulting sort suitable 
sort hidden keys way allow relation encrypts cycles 
suitable orders exist 
cardinality hidden 
hidden 

define 
keys 

looking recoverable 

note minimal possible value exists 
show need define notions 
define partial order set 
order defined componentwise components ordered set inclusion 
second 
define fo 
fo min 
important property fo fo suppose exist 
fo follows item vii definition follows 
recoverable 
contradiction definition fo minimal condition satisfied 
suppose minimal hold smallest index hold 
exists 
fo construct follows 


keys keys keys equality holds 


shown 

follows construction definition smallest index satisfied 
fo equal hand contradicts minimality algorithm initialise recoverable return convert algorithm initialise algorithm convert case keys return key consts return const return convert convert pair return convert ciphertext return convert ciphertext return ciphertext fig 

algorithm breaks type security encryption system minimal 
fixes order hidden keys rest proof 
define patterns 
pat 
obviously pattern ec claim 
interpretations indistinguishable 
suppose algorithm nonnegligible families distributions 
consider algorithm fig 

claim oracle oracle second argument distributed oracles second argument distributed argue algorithm reaches state action undefined 
may happen variant keys chosen algorithm convert undefined note initialise necessarily define keys occur 
easy see follows definitions pattern contains keys property guarantees keys available 
key uses corresponds key fig 
key uses corresponds key fig 

key corresponds key fig 

assumption algorithm distinguish di erence negligible algorithm contradicts choice encryption system type secure system 
transitivity indistinguishability pattern ec 
gives justification definition added strength attacker defined equivalence relation ec formal expressions 
compare relation defined 
obviously sense consider expressions contain encryption cycles 
result holds showing relation ec precise 
proposition 
exp encryption cycles 
ec proof 
show exp encryption cycles exp holds holds 
equality follows pattern pattern ec 
direction holds holds trivial 
consider direction 
claim holds holds proved steps 
step show holds derived item vii definition derivation tree root labeled vertices labeled terms form exp keys edges correspond items definition note holds expressions occuring vertices show construct derivation tree labels vertices holds 
tree item vii definition key repeatedly construction remove occurrences item vii definition derivation trees 
label vertex tree tk subtree rooted vertex 
tree root labeled constructed follows 
immediate descendants 
deg 
labeled construct trees root vertices labeled construction depends item definition derive cases deg deg tree constructed new vertex labeling letting immediate descendants root vertices implication hold cases derived item definition case impossible encryption cycle derived item vi definition 
case just take derived item vii definition take second step proving claim holds holds show holds assume derived item vii definition exists derivation tree leaves labeled consider item derived 

derivation tree vertex labeled 
ii 
derivation tree vertex labeled 
iii 
derivation tree may additional axioms constructed 
iv 
derivation tree additional axioms consists root vertex labeled descendant root vertex derivation tree additional axioms 

derivation tree additional axioms consists root vertex labeled having descendants 
descendant root vertex derivation tree additional axioms second descendant vertex labeled having descendants 
vi 
derivation tree additional axioms consists derivation tree additional axioms modified replacing axioms derivation trees additional axioms shown holds exists derivation tree amended dolev yao model making sense realistic 
realistic mean closer computational model cryptography considered model real world 
amendment model complex suitable mechanical analysis 
micciancio warinschi refined formal equivalence computational interpretations equivalent formal messages indistinguishable encryption system type secure compared type security message length may revealed 
change language patterns replacing undecryptable ciphertext collection denoting undecryptable ciphertexts length obviously equivalence ec similarly refined 

martn abadi andrew gordon 
calculus cryptographic protocols spi calculus 
information computation january 

martn abadi jan 
formal eavesdropping computational interpretation 
naoki kobayashi benjamin pierce editors theoretical aspects computer software th international symposium tacs volume lncs pages sendai japan september 
springer verlag 

martn abadi phillip rogaway 
reconciling views cryptography computational soundness formal encryption 
jan van leeuwen watanabe hagiya peter mosses ito editors international conference ifip tcs volume lncs pages sendai japan august 
springer verlag 

michael backes 
cryptographically sound analysis security protocols 
phd thesis universitat des saarlandes 

mihir bellare anand desai phillip rogaway 
concrete security treatment symmetric encryption 
th annual symposium foundations computer science pages miami beach florida october 
ieee computer society press 

mihir bellare phillip rogaway 
random oracles practical paradigm designing cient protocols 
ccs proceedings st acm conference computer communications security pages fairfax virginia november 
acm press 

john black phillip rogaway thomas shrimpton 
encryption scheme security presence key dependent messages 
proceedings ninth annual workshop selected areas cryptography st john august 

michael burrows martn abadi roger needham 
logic authentication 
acm transactions computer systems february 

danny dolev andrew yao 
security public key protocols 
ieee transactions information theory march 

shafi goldwasser silvio micali 
probabilistic encryption 
journal computer system sciences april 

joshua guttman javier thayer zuck 
faithfulness protocol analysis message authentication 
proceedings th acm conference computer communications security pages philadelphia pa november 
acm press 

laud 
semantics program analysis computationally secure information flow 
sands pages 

laud 
computationally secure information flow 
phd thesis universitat des saarlandes 

patrick lincoln john mitchell mark mitchell andre scedrov 
probabilistic poly time framework protocol analysis 
ccs proceedings th acm conference computer communications security pages san francisco california november 
acm press 

patrick lincoln john mitchell mark mitchell andre scedrov 
probabilistic polynomial time equivalence security analysis 
wing jim woodcock jim davies editors fm formal methods world congress formal methods development computing systems volume lncs pages toulouse france september 
springer verlag 

daniele micciancio bogdan warinschi 
completeness theorems logic encrypted expressions 
workshop issues theory security wits portland oregon january 

john mitchell 
probabilistic polynomial time process calculus security protocol analysis 
sands pages 

birgit pfitzmann matthias michael waidner 
cryptographic security reactive systems 
steve schneider peter ryan editors workshop secure architectures information flow volume electronic notes theoretical computer science royal holloway university london 
elsevier science 

birgit pfitzmann michael waidner 
composition integrity preservation secure reactive systems 
ccs proceedings th acm conference computer communications security pages athens greece november 
acm press 

birgit pfitzmann michael waidner 
model asynchronous reactive systems application secure message transmission 
ieee symposium security privacy pages oakland california may 
ieee computer society press 

david sands editor 
programming languages systems th european symposium programming esop volume lncs genova italy april 
springer verlag 

andrew yao 
theory applications trapdoor functions extended rd annual symposium foundations computer science pages chicago illinois november 
ieee computer society press 
