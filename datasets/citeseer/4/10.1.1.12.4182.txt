new spec benchmark workload simulation computer architecture research aj david lilja ece umn edu lilja ece umn edu department electrical computer engineering minnesota supercomputing institute university minnesota minneapolis mn computer architects determine effectively finite computational resources running simulations evaluate new architectural ideas 
facilitate efficient simulations range benchmark programs developed input set spec cpu benchmark suite 
new workload allows computer architects obtain simulation results reasonable time existing simula tors 
workload derived standard spec cpu workload valid bench mark suite simulation research 
may run large numbers simulations find sweet spots evaluation parameter space 
small number promising design points subsequently may investigated detail full spec workload 
process developing datasets quantify differences terms function level execution patterns instruction mixes memory behaviors compared spec programs executed inputs 
find programs profiles match spec dataset program behavior closely 
programs inputs produce significantly different program behavior 
workload recognized spec distributed version higher spec cpu benchmark suite 
computer architects long benchmark programs representative real programs test computer designs 
benchmark suite standard performance evaluation commonly known spec example collection programs research community test rate current computer architecture designs 
benchmark programs spec benchmark suite developed current generation computer systems mind 
years computer technology advanced point benchmarks execute short time longer useful evaluating performance different systems 
current stateof art computer systems spec benchmark programs execute minute instance 
effort lead rapid progress computer systems spec chose dramatically increase manuscript submitted march 
manuscript accepted may 
final manuscript received may 
runtimes new spec benchmark pro grams compared runtimes spec benchmark programs 
addition new bench marks introduced suite extend applicability contemporary performance testing 
long runtimes beneficial testing performance native hardware 
evaluating new computer architectures detailed execution driven simulators computer architects decide run fewer long simulations seek smaller workloads run larger number simulations time available 
running spec benchmark programs input sets developed project resulting execution times shorter spec original inputs 
time savings allows architect simulate larger number configurations benchmark programs reasonably simulated complete spec inputs 
alternatively find small number promising design points subsequently investigated detail original spec inputs 
goal develop new benchmark workload adequately exercises new architectures simulated 
computer architecture community generally accepts spec benchmark suite evaluating aspects computer system document program behavior comparing profiles original spec profiles 
development began gathering function level execution instruction mix memory behavior profiles spec benchmarks executed original workload 
profiles gave target profiles produced executing inputs 
ii 
background motivation simplescalar example execution driven simulator commonly computer architecture research community 
simplescalar includes simulators provides different level detail statistical information sim hardware 
intricate computer architecture studies researchers sim detailed simulator simplescalar suite 
stage sim pipeline dozen statistics performance counters updated simulated instruction 
level simulation detail requires host machine cycles simulate target machine cycle 
mhz sun ultrasparc system similar spec cpu system simulated machine runs approximately instructions second 
speed 
benchmark full dataset instructions take sixteen months simulate 
uninterrupted simulation unrealistic computer architecture research 
considering combinatorial explosion occurs examining numerous benchmark programs variety hardware configurations time required simulation result years cpu time gather information simple study 
clearly need workload set simulation studies 
detailed computer architecture research typically requires statistics generated simulator sim 
need mind detailed simulator option 
various techniques proposed take represen samples execution combine statistical functional simulation 
case want full detail execution start finish benchmark program 
means best option find quantitatively defensible way reduce input datasets consequently runtimes spec benchmarks 
goal exactly match profiles obtained inputs 
attempt provide workload suitable producing reportable results studies 
process creating new workload analyze differences appropriate execution metrics produced new workload compared spec workload 
iii 
methodology spec provides standard datasets benchmark programs 
test dataset gives quick test benchmark desired architecture train dataset gives intermediate length run 
dataset intended give complete evaluation host computer system performance 
datasets similar desired new workload larger time scale 
began analysis compiling benchmarks simplescalar version gcc version sun ultrasparc running solaris 
modified version gcc builds binaries simulator pisa architecture 
compiled different optimization levels 
ran spec dataset test train re sire fast simple simulator determining instruction counts 
output sire fast gave indication size instruction count benchmark 
sim simulator run simplescalar architecture binaries gave instruction mix profile dataset 
flag gave breakdown instruction totals class loads stores unconditional branches conditional branches integer computation floating point computation traps flag gave count individual instruction executed 
effort characterize memory behavior spec benchmarks sire cache sim obtain rates level data cache 
ran simulations different level data cache sizes kbytes 
simulations byte block size way set associativity lru replacement policy 
proceeded gather function level execution profile dataset 
recompiled benchmarks sun ultrasparc version gcc gprof compiler flags insert profile counting routines 
compiled optimization levels 
ran benchmark native hardware obtain execution profile showing fraction total execution time spent function 
base profiles document program behavior spec dataset began reducing datasets benchmark 
method reducing dataset varied widely benchmark benchmark 
choice vary command line parameters shorten execution time 
benchmark command line parameters modifying command line parameters shorten execution time proceeded truncate take representative samples input files 
cases created entirely new input files 
specific reduction technique benchmark shown table run spec cpu bench marks multiple runs executable different command line arguments different input files 
programs treat different command lines separate sub benchmarks 
goal sets inputs provide simulation times minutes hours days executed detailed simulator sim 
reduction attempt sire fast determine resulting runtime measured dynamic instructions target ranges 
targets dynamic instructions short simulation dynamic instructions medium length simulation dynamic instructions full length reportable simulation 
table benchmarks included current input set distribution 
input reduction column documents methods develop workloads 
columns document function level execution profile instruction mix nearly identical spec workload determined chi squared test see text details 
programs num profile compared multiple workloads program 
benchmark type description input reduction method gzip graphic int compression modified command line new input file gzip log int compression modified command line truncated ref file gzip program int compression modified command line new input file gzip random int compression modified command line modified ref file gzip source int compression modified command line truncated ref file vpr place int fpga place route test vpr route int fpga place route test gcc int compiler train yin mesa float graphics modified command line modified test file art float image rec modified command line mcf float combinatorial opt modified ref file equake float seismic wave modified train file ammp float chemistry truncated ref file parser int word processing sampled ref file perlbmk int perl language ref 
vortex ht database modified train file bzip graphic lnt compression modified command line modified ref file bzip program ht compression modified command line new input file bzip source lnt compression modified command line sampled ref file ht place route sampled train file iv 
results results date document program behavior spec cpu programs portable simplescalar pisa instruction set shown table currently proceeding reduce input sets remainder spec cpu programs compaq alpha osf unix platform 
compared function level execution profiles instruction mix profiles profiles produced spec inputs chi squared goodness fit test 
column labeled table shows programs function level execution profiles matched programs executed inputs inputs 
particular column indicates differences execution profiles produced input sets larger expected due random fluctuations measured chi squared test percent confidence level 
column indicates chi squared test showed statistically signifi cant difference 
comparisons show function level profiles statistically close inputs benchmark configurations evaluated 
column shows mix dynamic instructions produced inputs significantly different produced inputs cases 
statistically comparing memory behavior workloads problematic typically interested variations parameter ratio parameter cache size varied 
consequently compare memory behavior produced workloads plotted rates function cache size workload comparing sort memory distribution parameter 
surprisingly comparisons show workload produces substantially smaller memory footprint workload 
differences memory behavior cause differences cache ratios important memory behaviors 
actual histograms comparing profiles dynamic instruction execution mixes plots cache behavior benchmark executed puts spec inputs available www 
arctic 
umn 
edu 
additionally full profiles input sets bench marks completed date available spec licensees ftp cd distribution spec cpu suite version 
differences profiles spec profiles mean simulations sensitive memory behavior instruction mix forth produce substantially different results inputs 
differences suggest care taken spec workloads study mediabench tpc workloads combination spec workloads 
treated separate workload 
develop new benchmark workloads simulation studies 
compare behavior spec cpu benchmark programs executed new workloads program behavior workloads examining fraction total execution time spent functions executed real system measured tool dynamic mix instruc tions measured sire profile simulator simplescalar suite simulators level cache rates measured sire cache simulator simplescalar 
metrics far complete provide appropriate points compare architectural level behavior simulations executed inputs compared executed inputs 
second contribution ex ecution profile cache results show possible obtain small datasets reasonably mimic behavior full datasets spec cpu benchmarks 
discovered developing input sets exactly proportional profiles full profiles difficult programs outright impossible 
inputs suitable conducting architectural studies detailed execution driven simulators 
workloads derived spec workloads unique entity 
may reporting results may narrow simulation parameter space running small number lengthy simulations spec workload 
simulation study results generated workload directly compared results generated spec workload 
workloads similar definitely 
vi 
supported part national science tion eia ccr nsf research experi ences undergraduates eec ccr minnesota supercomputing institute compaq alpha development group 
dedicated group undergraduate research assistants valuable contributions project 
extend nancy john flynn le matt holmes alberto baez nguyen amy josephson abdul knight mark nguyen mike morse jeremy ilya joseph peter holm 
todd austin eric larson dan ernst 
simplescalar infrastructure computer system modeling 
ieee computer pages february 
standard performance evaluation 
spec bench mark suites 
various benchmark suites available 
details available www spec org 

hybrid analytical statistical modeling efficiently exploring architecture workload design spaces 
international conference parallel architectures compilation techniques pact pages 
joel emer ahuja eric chi luk manne mukherjee patil steven wallace nathan roger toni juan 
performance model framework 
ieee computer pages february 
graham kessler mckusick 
gprof call graph execution profiler 
sigplan symposium compiler construction pages june 
john kevin 
minimal subset evaluation rapid warm simulated hardware state 
interna tional conference computer design iccd september 
john henning 
spec cpu measuring cpu performance new millennium 
ieee computer july 
christopher hughes vijay pai parthasarathy ran sarita adve 
simulating sharedmemory multiprocessors ilp processors 
ieee computer pages february 
aj john flynn nancy david lilja 
adapting spec benchmark suite simulation computer architecture research 
workload characterization emerging computer applications pages 
john ann marie maynard editors 
originally published workshop workload characterization international conference computer design iccd september 
david lilja 
measuring computer performance prac guide 
cambridge university press new york ny 
peter magnusson magnus jesper daniel johan fredrik larsson bengt werner 
full system simulation platform 
eee computer pages february 
smith 
modeling superscalar proces sors simulation 
international conference parallel architectures compilation techniques pact pages 
mark fred chong 
hls combining statistical symbolic simulation guide microprocessor designs 
international symposium computer architec ture isca pages 
