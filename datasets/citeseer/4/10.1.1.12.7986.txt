passive method estimating tcp packet loss presents passive loss monitoring method relies traffic monitoring core ingress router interface 
monitoring node captures packets tcp connections generated hosts 
seen sequence number pattern loss ratios estimated segments path divided monitor 
feature especially useful monitoring node placed border autonomous system egress point isp 
applied mobile internet access packet losses radio interface distinguished losses core network public internet 
packet loss estimation algorithm rigorously validated simulations testbed measurements 
additionally measurement results application example dial isp 
packet loss ratio important key performance indicators internet service provider isp 
especially important isp offers business grade services performance guarantees 
isps collect statistics packet losses routers information provides local view 
problem collecting statistics routers twofold 
hand summing hop counters necessarily yield loss 
hand isp control single segment autonomous system connection managing horizon limited 
tcp dominant protocol internet includes complex adaptive algorithm ensures reliable data transfer unreliable paths 
number papers published analyzing path characteristics loss affect tcp dynamics 
discusses inverse problem observing tcp dynamics infer loss properties path 
existing tool addresses similar problem measures number tcp retransmissions equal loss ratio 
method described isps efficiently monitor loss ratios individual tcp connections traffic aggregates 
passive monitor listens tcp packets data flow direction 
algorithm running monitor estimates packet loss ratios separately path segments separated monitoring point 
loss estimation performed tcp basis direction location problem deduced 
packet loss estimation algorithm provide operator valuable information loss ratio satisfies service level peter traffic analysis network performance laboratory ericsson research budapest hungary peter eth ericsson se agreements problem particular path isps domain problem particular path outside internet 
described method heuristics aim estimate probable sample path tcp communicating hosts 
explain heuristics detail examples 
heuristics lack general proof explore large portion practically relevant state space simulations 
addition algorithm evaluated testbed 
analyze precision algorithm performing thousands transactions configuration 
outcome analyses algorithm capable estimating packet loss ratio path segments independently position losses reasonably high precision 
analyses cover practical ranges loss ratios 
versions tcp different congestion control algorithms apply different rules cope packet losses 
comparative analysis 
precision algorithm acceptable tcp versions practice 
due space limitations results simulations discussed detail 
organized follows sketch naive loss estimation algorithm section ii 
identifying limitations improved algorithm section iii tries solve problems naive algorithm 
rigorous evaluation improved algorithm section iv 
demonstrate feasibility section reports measurement results operational isp network 
conclude section vi 
ii 
naive loss estimation algorithm monitoring point divides network segments loss loss network measurement point network server client data flow direction fig 

measurement scenario shown fig 

client network downloads file server network opening tcp connection 
packets flow measurement point lies border network network 
task estimate tcp packet loss ratio server client examining sequence numbers packets belonging tcp connection 
observing acknowledgment packets help estimating losses chose 
reason due asymmetric routing data packets traverse different paths 
identify basic simple rules detect losses 
classify packet losses location loss 
packet lost reaching measurement point network passing network 
fig 
shows sample tcp sequence number pattern seen measurement point illustrating characteristic effects packet losses 
packet loss measurement point detected point observing order tcp segment fills hole data sequence fig 
segment fills hole caused loss segment 
similarly repeated sequence number may signal packet lost passing measurement point 
seen fig 
retransmitted segment repeats sequence number lost segment 
observations initial naive algorithm constructed detects packet losses maintaining history sequence numbers seen comparing packet seen fills hole 
algorithm obviously simplistic heuristics guess packet losses correctly wide range practical cases 
order evaluate precision implemented algorithm tested packet traces obtained simulations 
simulation setup consisted just nodes server client monitor 
delay link rate set ms kbps segments respectively 
simulated newreno version tcp 
simulation client opened subsequent tcp connections download fixed length file server maximum window size set kbytes 
packets dropped independently equal probability path segments network network 
sequence number loss network time loss network fig 

detecting packet loss sequence number pattern fig 

simulation results naive algorithm relative error packet loss estimation algorithm calculated plotted loss probability ranging see fig 

simulation results show error loss ratio estimation measurement point higher large files 
additionally case estimating packet losses measurement point algorithm accurate small files 
extreme worst case relative error algorithm reached means absolute error approximately 
absolute values error high practical internet configurations packet losses possible monitor 
iii 
improved algorithm tcp packet loss estimation reason previously described simple algorithm numerous errors packet losses depending happen may result large variety sequence number patterns covered algorithm 
multiple losses window different versions tahoe reno implementations tcp increase complexity problem 
measurement point difficult cases impossible take possible sequence number sample paths consideration 
pursuing try identify scenarios play important role packet loss ratio estimation 
major effects explain inaccuracy algorithm 
spurious timeouts case sudden rise round trip time tcp sender may timeout packet loss occurred 
sender retransmits segment believed lost waits 
original segment arrives subsequent segments retransmitted 
loss estimation algorithm incorrectly assume repeated segments retransmissions lost packets 
effect explain significant error seen case packet loss estimation measurement point see fig 


mass losses entire window data lost reaching measurement point algorithm unable detect missing order segments point 
algorithm see hole filled recognize retransmissions 
effect happen window size small just opening connection timeout account error experienced small files see fig 


load balancing packet load balancing applied packets traverse different paths monitoring point may see packets 
holes erroneously interpreted indications losses monitoring point 

reordering packet reordering may happen monitoring point merging point load balancing paths 
case algorithm erroneously assumes holes sequence numbers indications packet losses monitoring point 
mentioned causes symptoms additional cases simple estimation algorithm fails detect losses precisely 
order improve algorithm essential realize interested determining exact number lost packets need calculate loss ratio 
idea choose subset packets determined relatively high probability packets lost 
call packets significant packets 
estimation unbiased packet losses happen independently loss ratio significant packets equal loss ratio packets 
algorithm decreased number packets significant packet set expected large estimating loss ratio 
set significant packets constructed disregarding packets loss detection uncertain 
algorithm significant packet packet holds particular data segment time 
words retransmissions data segment considered significant 
loss transmission detected quite high probability retransmissions seen measurement point loss retransmission hard recognize 
order cope problem losing entire window data exclude data segment tcp connection estimating packet loss measurement point 
reason transmission segments lost seen 
solution expected increase precision loss estimation measurement point 
improved algorithm making capable excluding effect spurious timeouts 
achieved continuously searching history segments believed lost row 
number consecutive segments lost exceeds pre defined threshold algorithm assumes spurious timeout occurred removes questioned segments significant packet set 
solution expected increase precision loss estimation measurement point 
monitoring point detects seen packets successfully ended tcp connection assumes load balancing applied flow removes packets significant set 
solves problem 
order deal problem reordering packets reordered removed significant set 
reliable detection reordering observing ip id field ip header consecutive packets 
different ways operating systems set field increase ip id value packet sent tcp connection windows nt linux freebsd versions solaris today 
observe decrease due reordering path 
iv 
analysis improved algorithm order check improvements influence precision algorithm carried simulations setup shown fig 

interested relative error estimation various parameter sets 
define relative error absolute difference estimated loss real loss divided real loss ratio algorithm heuristics prove applicability rigorous test performed covering large portion practically relevant parameter space 
fig 
example results seen 
row shows results loss estimation path segment second row shows 
column different version estimation algorithm 
basic algorithm described section ii 
second third improved algorithms spurious timeout detection respectively 
plots show heat map demonstrating dependence relative error file size packet loss probability 
darker colors stand higher errors 
seen relative error basic algorithm majority parameter space 
worth noting relative error loss ratio estimation high small loss ratios absolute error may low relative error stands absolute loss ratio difference loss probability 
look graphs left right see characteristic changes significant improvements estimation error estimation error naive algorithm significant set algorithm sfp rp stp stp step 
comparing graphs left middle graphs important change error loss estimation completely vanished large loss ratios retransmission problem rp area fig 

due significant set improved estimation considerable amount multiple mass losses 
note removing segment tcp connection significant set decreased estimation error short files 
error extremely short files loss detected file sizes exceeding maximum segment sizes mss 
short file problem sfp area fig 

largest error loss ratio estimation case large files small loss probabilities left middle graphs show improvement 
large error due retransmissions caused spurious timeouts 
loss ratio low higher probability congestion window open 
consequence spurious timeout occurs packets retransmitted increases estimation error spurious timeout problem stp area fig 

removing packets significant set indicate consecutive losses precision algorithm significantly improved 
observed right bottom graph 
interesting phenomenon error resulting spurious timeouts decreases large files 
explained fact spurious timeouts tend occur start tcp connection 
new connection opened tcp information round trip time fig 
simulation results different algorithms significant set algorithm spurious timeout detection retransmission timeout rto timer may calculated incorrectly 
fig 
shows sensitivity algorithm different levels asymmetry packet loss probabilities 
values range 
investigated file sizes kbytes kbytes estimation error negligible loss ratio 
results side shown 
loss estimation error higher file size larger loss probabilities differ significantly 
largest error measured extreme case loss ratio 
tests performed tcp versions tahoe newreno case correlated losses 
practically important configurations relative error loss state space 
testbed isp results built testbed analyze algorithm controlled real environment 
testbed consists linux pcs interconnected mbps ethernet hub 
server client hosts user configure link rate packet delay random packet loss 
modified shaper kernel module nist net program set desired parameters network segments monitoring host 
configuration tested simulations 
loss probabilities set gradually loss set fig 
relative error loss estimation path segment short left large right files 
results summarized table 
results indicate loss ratios estimated quite precisely testbed asymmetric cases 
table results testbed file size kbytes loss loss loss estimation estimation estimation estimation results isp network 
monitor placed egress point isp network 
loss estimation algorithm study effect upgrading isp internet access link rate 
fig 
downlink tcp loss ratio monitoring point shown period days network upgrade value represents minute average 
high estimated packet loss ratios outside isp domain fig 

loss probability dial isp network indicate congestion isp leased line 
seen average peak loss ratio decreased upgrade link 
average loss ratio changed peaks lowered 
vi 
proposed passive monitoring tcp packet loss estimation algorithm 
introduced notion significant packet set decreases estimation error including packets algorithm able determine high probability packet lost 
improve accuracy effects spurious timeouts mass losses load balancing packet reordering considered 
round rigorous simulations carried showed algorithm capable estimating packet loss ratio high precision practically relevant parameter space 
algorithm implemented tested testbed 
measurement results consistent simulations 
demonstrated applicability algorithm results operational isp network 
postel transmission control protocol rfc september 
zhang shenker clark observations dynamics congestion control algorithm effects way traffic proc 
acm sigcomm pp 
september 
fall floyd simulation comparison tahoe reno sack tcp computer communication review vol 
pp 
july 
paxson automated packet trace analysis tcp implementations proc 
acm sigcomm pp 
september 
mogul observing tcp dynamics real networks proc 
acm sigcomm pp 
august 
paxson internet packet dynamics proc 
acm sigcomm pp 
september 
tcp statistic tool floyd henderson newreno modification tcp fast recovery algorithm rfc april 
nist net network emulator home page ncsl nist gov itg 
