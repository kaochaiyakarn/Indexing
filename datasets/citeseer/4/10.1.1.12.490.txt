native code compilation erlang bit syntax gustafsson computing science dept uppsala university sweden csd uu se erlang bit syntax caters flexible pattern matching bit streams objects known binaries 
binaries nowadays heavily typical erlang applications protocol programming turn created need efficient support basic operations binaries 
effect describe scheme efficient native code compilation erlang bit syntax 
scheme relies partial translation avoiding code explosion improves performance programs manipulating binaries translating frequently occurring instances beam instructions native code intermediate translation instructions register transfer language 
performance evaluation shows hipe enabled erlang otp system obtained speedups significant 

functional programming languages traditionally manipulate objects numbers integers floats atoms sequences alphanumeric constants lists structures 
provide notation records allows abstraction form object oriented style program development 
erlang supports types objects includes datatype typically functional languages binaries 
mentioned binary datatype added erlang cater application needs binaries introduced erlang provide efficient container object code 
subsequently recognized binaries applications perform extensive networking tcp ip style gui systems importantly protocol programming typically developed telecommunication applications uses erlang 
recognizing importance binaries proposal binary datatype 
datatype powerful original binary introduced new bit syntax possible easily build match binaries 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
erlang workshop pittsburgh usa copyright acm 
sagonas computing science dept uppsala university sweden csd uu se revised version datatype introduced erlang otp system 
binaries extensively various libraries erlang otp user applications 
nowadays performance erlang programs crucially depends efficiency underlying operations support manipulation binaries 
beam virtual machine erlang otp maps operations virtual machine instructions implemented directly result performance quite 
till hipe native code compiler handle binary instructions specially treated built functions implemented straightforward calls corresponding beam functions 
result performance manipulating binaries hipe par beam system slightly due mode switch overhead involved calling function beam interpreter native code 
wanting improve situation embarked project directly compile erlang binaries native code 
approach took compilation scheme follow described 
documenting implementation included upcoming erlang otp release shed light internals erlang binaries implementation described hope information potentially useful functional programming implementors consider adding binaries language choice 
rest structured follows 
section begins reviewing erlang binary data object bit syntax supports flexible manipulation binaries 
section describe operations erlang bit syntax allows translated appropriate virtual machine instructions 
focus attention instructions efficiently support matching 
section translation virtual machine instructions register transfer language rtl 
translation steps virtual machine code translated intermediate code representation intermediate code translated rtl code 
section discusses scheme heap space binary matching operation requires 
evaluating performance implementation erlang protocol programming applications synthetic benchmarks quantifying parameters byte alignment influence efficiency generated code 

binaries binary datatype represents stream bits size evenly divisible 
basic operations performed binary creation new binary matching existing binary 
bit syntax bit syntax expression called bin allows erlang users construct binaries match binary patterns 
bin written syntax segment segment bin represents low level sequence bytes 
specifies segment binary 
segment represents arbitrary number contiguous bits bin 
segments placed order appear bit syntax expression 
segments segment expression general syntax value size size omitted default values specifications 
value field specified 
binary match value erlang term bound variable unbound variable wildcard variable 
size field integer variable bound integer 
dash separated list options specify type unit 
different forms type specifiers described table 
possibilities syntax segment expression value size type unit unit size specifier gives size segment measured units 
size segment bits called effective size size unit 
binary matching syntax matching binary binary variable bound binary segment segment binary fields expressions describe segment matched corresponding segment binary 
example value field segment contains unbound variable effective size segment variable bound bits binary 
bits interpreted governed segment 
example shown binaries generally displayed sequence comma separated unsigned bit integers inside erlang code binary binary binary results binding 
matches bits binary 
default values bits interpreted unsigned big endian integer 
matched rest bits binary 
bits interpreted binary type specifier chosen 
matches rest binary default size binary type specifier 
matching binary function head erlang case statement just matching operation 
example consider code shown case binary integer binary integer binary binary error 
binary match pattern branch case statement bits represented unsigned integer value 
case binary consisting rest bits binary returned statement 
case binary match second pattern binary larger bytes demands values matched binary pattern second branch 
bound integer consisting bit bit binary 
bits taken big endian order interpreted unsigned integer 
binary match pattern branches matched binary atom error returned 
examples matchings code shown 
binary matches types 
bit syntax allows different types specified integers floats binaries 
integer type default type size 
integers user specify see 
default specifications integer size unsigned big endian unit 
float type allows effective sizes bits 
user specify 
default specifications float size big endian format unit 
binary type allows effective sizes evenly divisible 
specifying modify binary matched 
default specifications binary size means binary matched completely 
size user default unit 
example show binaries default expansions 
binary default expands integer unsigned big unit float float big unit binary binary size binary size binary unit table binary type specifiers 
integer bit stream interpreted integer 
default setting 
float bit stream interpreted float 
sizes 
binary bit stream interpreted 
default unit size binary 
signed bit stream interpreted integer complement sign extension applies integers 
unsigned bit stream interpreted unsigned integer 
default setting 
big bytes picked big endian order 
applies floats integers default setting 
little bytes picked little endian order 
applies floats integers 
unit typically followed integer 
integer multiplied size term produce effective size 
typically ensure byte alignment binary match new binary size divisible regardless values runtime variables 
default setting integers floats binaries 

specifier decide order bytes picked forming integer float 
big means bytes picked big endian order little means bytes picked little endian order 
example unbound variables matching integer big results binding low bits matching integer little results binding appears high bits 

specifier introduced allow matching signed unsigned integers 
default value unsigned 
means bit stream interpreted unsigned integer 
signed specifier sure bit stream interpreted integer complement sign extension 
note signed unsigned specifiers allowed expressions meaning matching integers 
example unbound variables code integer unsigned integer signed results binding 
tail binary 
example segment binaries patterns case statement shows interesting binary type specifier size value matchings 
sense similar familiar list tail operator size size rest binary matched 
important know binary bit size evenly divisible 
applies wildcard variable value 
internal representation user binaries appear type current internal representation binaries erlang otp includes different types binaries heap binaries counted binaries binaries sub binaries 
heap binary variable sized object containing type tag size field data contained binary 
name implies type binary objects stored heap 
representation small sized binaries binaries smaller particular constant max heap bin size 
current process centric heap architecture erlang otp heap binaries costly send message binary copied heap receiving process 
counted binary object points heap counted data structure 
data structure contains binaries 
binaries process heap linked list garbage collection list traversed 
process holding pointer binary dies counter decreased 
counter reaches zero binary structure deallocated 
hand counter increased binary sent message 
type large binaries effective extremely cheap send message processes 
header resides heap sender needs copied heap receiver process 
sub binary heap object pointer binary object offset size field describe far binary binary starts bytes data consists respectively 
representation useful allows cheaply split binary smaller binaries 
cost sending sub binary part message depends type binary sub binary points 
points heap binary heap binary copied process sub binary 
sub binary points binary sub binary binary header copied 

virtual machine translation intermediate step efficient compilation bit syntax translation appropriate virtual machine instructions 
done translating different bit syntax expressions corresponding operations virtual machine 
beam virtual machine erlang otp follows approach 
type specifiers unit specifier encoded bit flags argument 
second bit set operation little endian third bit set operation signed 
simplify steps compilation process third flag shows operation guaranteed start byte boundary 
case bit set 
flags argument integer 
size argument taken directly size field bit syntax expression 
contain integer variable atom 
mentioned atom possible binary type specifier involved 
binary matching matching operation translated different beam instructions 
instruction initiate matching test match ended successfully instructions save load state matching instruction skip forward binary instructions read bits binary 
beam instructions specific binaries matching code 
example equal exact switch type instructions 
concern non instructions 
matching operation matching flow standard matching form 
means matching operations 
operation succeeds flow continues fails continues 
match bs test tail instruction succeeded flow reached associated bs start match 
beam state binary matching maintained global variables shown table 
address byte binary matching size bits binary matched number bits matched far erlang term heap binary points binary matched beam instructions binary matching void bs start match binary bin beam instruction encountering operator segment bin matching expression 
initializes state variables information contained bin 
wrong argument type void bs skip bits uint size unit unit uint flags beam instruction translation size type unit unit expression 
recall type binary size unsigned integer atom 
increase size unit size atom set 
size unit size evenly divisible wrong argument type int bs get integer uint size uint flags uint unit beam instruction translation int size integer specifier unit unit expression 
load size unit bits position turn bits integer 
flags argument specifies bits interpreted representing signed unsigned integer bytes taken big little endian order 
size unit wrong argument type float bs get float uint size uint flags uint unit beam instruction translation float size float specifier unit unit expression 
load size unit bits position turn bits float 
flags argument specifies bytes taken big little endian order 
size unit size unit equal wrong argument type binary bs get binary uint size uint flags uint unit beam instruction translation bin size binary specifier unit unit expression 
create sub binary size size unit divisible creation sub binary requires variable part state 
create new heap counted binary copy size unit bytes 
size atom case size unit interpreted 
flags change result operation contains byte boundary information 
size unit size evenly divisible size unit evenly divisible wrong argument type bs save saves current state giving label 
instruction fail 
bs restore reloads state label 
instruction fail 
bs test tail instruction increases checks resulting equal 
condition met match 
example integer signed float little unit binary binary gets compiled pseudo beam code names variables changed erlang names 
fl shows label flow continue instruction fails 
bs start match binary fl integer fl float fl binary fl bs test tail fl binary match succeeded 
code handle binary match failure look instructions operands 
recall bs get instructions operand size second flags third denotes unit 
get integer bs get float flags operand needs explained 
instructions guaranteed start byte boundary 
instruction starts binary starts bits bytes binary 
means low bit set flags operands 
signed type specifier sets third flags bit 
flags operand bs get integer 
similarly little type specifier sets second bit explains flags operand bs get float 
clear bs get binary starts bits bytes apply binaries flags operand case 
size specified third segment binary size defaults 
means unit operand irrelevant bs get binary case denote underscore 
example translation erlang code example shown 
branch case statement translated instructions labels 
segment binary consists bs get integer eq exact instructions second segment translated bs get binary instruction 
interesting note bs get integer instruction fails execution continue third branch label second 
happens fail conditions bs get integer instruction exactly bs skip bits instruction 
second branch start state match bs get integer instruction 
shown bs save bs restore instructions 

translation native code step scheme translate virtual machine instructions native code 
translating vm instructions intermediate code icode 
proceed translate icode rtl code 
instructions quite tedious translate possible argument value combinations 
design decision translate native code commonly occurring argument combinations vm instructions fall back calling interpreter functions bs start match binary bs save fl integer bs save fl eq exact bs restore fl binary fl bs test tail jump fl bs restore integer fl bs skip bits fl bs test tail jump fl bs restore binary error fl binary match succeeded return code handle binary match failure translation binary pattern matching 
cases 
translation scheme requires state match interpreter native code environment 
ensured saving state time call interpreter reload state call returned 
translation icode differences representations icode virtual machine level translation beam icode quite straightforward 
new instructions bs get binary bs skip bits added 
size argument atom 
unit argument multiplied size argument size integer 
result coded name operation 
new argument registers added 
represent state matching fifth contains address state structure interpreter 
arbitrary beam instruction translation icode shown 
instructions bs skip bits bs skip bits bs test tail influence state variables corresponding icode instructions get state variables arguments 
simplify notation refer state object called state variable state offset 
similarly state variables 
new memory management operation introduced icode 
placed just bs start match instruction 
operation discussed section 
translation rtl divide icode instructions groups group contains bs get instructions 
group contains icode instructions read binary manipulate control flow state 
contains bs start match bs skip bits bs skip bits bs save bs restore bs test tail instruc size integer bs operation size unit flags state address size atom bs operation flags state address size variable bs operation unit flags size state address translation beam instruction bs instruction size unit flags icode 
tions 
call members group non reading icode instructions 
consequently call members group reading icode instructions 
utilities written utility functions produce code common situations 
call pseudo rtl code creating 
gen size unit produces rtl code multiply unit place result 
unit typically multiplication trivial strength reduced shift 
problem content execution continue 
gen bs call instruction produces rtl code update state interpreter call function corresponding instruction update state registers call returned 
check size offset size produces rtl code add put result 
greater execution continues 
load bytes dst base offset produces rtl code loads consecutive bytes base offset adds offset 
bytes put little big endian order register dst depending value 
specifies loaded number interpreted signed unsigned 
integer 
load state address base size offset orig produces rtl code reload values state registers state interpreter 
sub binary dst size offset orig produces rtl code sub binary heap 
tag put position size size bytes sub binary put second position offset says bytes original binary sub binary starts placed third position orig pointer original binary placed fourth position 
tagged pointer position placed dst 
float dst produces rtl code float heap 
tag put position put second position placed third position 
tagged pointer position placed dst 
translation non reading icode instructions binary matching operation bs start match instruction 
translated rtl code call interpreter function initialize state 
call fails execution continues 
call succeeds code created load state executed load state interpreter rtl registers shown example 
bs skip bits bits state instruction translated rtl code contain calls 
translation depends 
utility gen size invoked produce code multiplies bits places result temporary 
variable bits placed directly temporary 
utility check size generates code test value temporary smaller equal difference state size state offset 
case temporary added state offset execution continues belonging operation 
case execution continue belonging operation 
bs skip bits flags state instruction simpler translate variable 
bit flags set operation fail state offset just set state size 
case runtime check performed see state offset low bits equal zero case state offset set state size execution continues 
execution continues 
bs save state instruction stores current value state offset address stored interpreter 
call corresponding function interpreter state reloaded code created load state utility 
bs restore state instruction call function interpreter reloads state code created load state utility 
bs test tail bits state instruction adds bits state offset puts result state offset 
state size state offset execution continues success label continues 
examples 
table show resulting pseudo rtl code icode instructions 
representation called pseudo rtl code produced utility functions represented name function 
state variables put rtl registers follows state address state offset state base state orig state size table translation non reading instructions rtl 
state bs start match bs skip bits state bs save state bs start match thenl eq fl eq fl sl offset bs skip bits state bs test tail state bs restore state gen size thenl fl thenl fl sl associated different icode operations assigned proper label numbers simply called sl fl 
translation reading icode instructions bs get binary instruction translated native code argument combinations 
hand example bs get binary instruction executed native code result ends 
bs get float code effective size bs get integer instruction executed native code effective size big endian 
cases decision runtime 
translation bs get binary flags state instruction depends low bit flags argument 
set runtime test check low bits state offset equal zero 
execution continue 
cases continue way subtracting state offset state size place result rtl temporary tmp right shifted get size new binary bytes 
offset bytes new sub binary obtained similar way state offset placed temporary tmp 
state size moved state offset 
binary utility return variable tmp tmp state orig arguments see table 
bs get binary size flags state instruction translated native code result sub binary 
depending translations slightly different 
utility gen size invoked produce code multiplies size place result temporary tmp 
size placed directly tmp 
check see value tmp evenly divisible 
case execution continues 
case low bit flags set runtime check performed see state offset evenly divisible 
case gen bs call invoked call interpreter evenly divisible result match sub binary 
check bits left perform match 
done check size utility state size argument state offset offset argument tmp size argument new temporary tmp asthe argument 
tmp state offset right shifted get size offset sub binary bytes 
binary utility return variable tmp state offset state orig arguments 
tmp moved state offset 
add eq bs get float size flags state instruction translated native code effective size binary byte aligned call interpreter function gen bs call 
effective size constructed bs get binary case result placed temporary tmp 
case check size done compile time 
low bit flags set check ensure state offset evenly divisible 
conditions met check size utility state size state offset arguments new temporary tmp argument 
state offset right shifted load bytes called tmp dst state base base state offset offset set unsigned set little big dictated second bit flags 
set 
state offset increased load bytes utility invoked arguments new temporary tmp tmp 
utility float called return variable tmp tmp arguments case little endian reverse order tmp tmp 
bs get int size flags state instruction complicated translate 
simplify presentation different cases considered 
write right shift means arithmetic right shift signed flag set logic right shift set 
requirement size smaller extremely arbitrary guarantees result stored tagged integer bit machine word 

case occurs size argument exists 
low bit set flags 
byte alignment translation check size utility size state size state offset new temporary tmp arguments see bits left binary 
state offset right shifted positions 
load bytes new temporary tmp state base base state offset offset set dictated third bit flags dictated second bit flags size 
tmp moved state offset 
remove extra bits tmp right shifted size mod positions 
tmp tagged result moved return register 
current tagging left shift positions 

case occurs size argument exists 
low bit set flags 
byte alignment third bit set flags 
big endian calculate minimal number bits need loaded masking bits state offset putting result tmp 
size added result placed tmp 
result larger call interpreter gen bs call 
check size checks instruction ok arguments case argument new temporary tmp 
runtime check performed decide bytes loaded 
different possibilities 
result tmp bytes loaded 
state offset right shifted load bytes load number bytes decided earlier 
bytes loaded tmp 
tmp moved state offset 
tmp number bytes loaded 
tmp left shifted time tmp positions 
tmp right shifted size positions result tmp placed return variable 

case occurs argument 
low bit set flags 
byte alignment third bit set flags 
big endian size put tmp 
tmp checked see larger 
case call emulator 
number bytes equal value tmp right shifted positions loaded tmp 
state offset increased tmp 
tmp right shifted tmp positions 
value tmp tagged moved return variable 
default case translated simply call corresponding interpreter function gen bs call 
examples 
different examples translation reading instructions pseudo rtl code shown table 
corresponding case bs get binary instruction guaranteed byte aligned 
different examples bs get binary instruction variable size argument 
examples bs get float instruction 
big endian variable size argument static size little endian 
different examples bs get integer instruction cases 
structure pseudo rtl code mapping different temporaries argument variables return value specific rtl registers shown tmp return value tmp argument variable tmp 
memory management translated instructions need space heap trigger garbage collection 
performing garbage collection middle binary matching operation problematic matching state contain pointers heap pointers currently considered roots beam garbage collector 
modifying code collector course option want minimize changes parts runtime system outside control hipe real option ensure room heap matching begins 
consider binary matching operation discussed section 
definition find graphs describe binary matches control flow graph entire function 
graphs special properties 
acyclic start node instruction basic block write heap 
property follows fact reading instructions fail labels 
instructions write heap defined maximum space needs 
example maximum need bs get float words 
bs get binary max heap bin size words bs get binary 
decrease maximal limits looking size flags arguments runtime argument 
situation slightly complicated bs get int instruction may need arbitrary amount heap space erlang contain arbitrary number words 
inevitable maximum heap need calculation needs done runtime case 
undesirable complicated calculations time binary matching starts 
avoid separate heap need instructions defined maximal heap needs heap need instructions 
calculation simple inductively defined assigning maximum heap need leaf node equal heap need node maximum heap need non leaf node calculated heap need node plus maximum heap need nodes successors 
maximal heap need match maximum heap need node containing bs start match instruction 
get conservative estimate estimate guaranteed larger equal actual value just sum individual heap needs instructions contribute 
conservative estimate follows fact match graph acyclic instruction executed 
perform addition runtime simple feat done added check performed see room heap perform match call garbage collector precede match 
matching begins garbage collection possible 

performance performance evaluation implementation divided parts part tests speed exe table translation reading instructions rtl 
bs get binary state bs get binary state eq fl sub srl srl sub binary eq fl check size thenl fl srl srl sub binary sl bs get binary state bs get float state gen size thenl fl gen size thenl fl eq eq fl eq eq check size thenl fl check size thenl fl srl srl load bytes unsigned big srl add sub binary load bytes unsigned big sl float gen bs call bs get binary gen bs call bs get float bs get float state bs get integer state check size thenl fl srl load bytes unsigned little add load bytes unsigned little float check size thenl fl srl load bytes signed big sra sll sl bs get integer state bs get integer state add le check size thenl fl srl le load bytes unsigned big sll load bytes unsigned big sll srl sl gen bs call bs get int cution telecom applications supplied ericsson depending compilation scheme 
second part quantifies alignment influences speed execution different translation schemes 
program small synthetic benchmark parses binary integers floats binaries uses different beam instructions handle binaries 
third part examines speed execution erlang program bit syntax compares 
performance tests conducted machine mhz pentium processor running linux 
gen size thenl fl lt check size thenl fl srl le load bytes unsigned big le load bytes unsigned big le load bytes unsigned big load bytes unsigned big sub srl sll sl gen bs call bs get int application performance evaluated performance code compiled scheme hipe comparing beam hipe version hipe included erlang otp compile bit syntax operations native code treats built functions 
benchmarks functions core protocol handling erlang applications supplied ericsson 
extract gtp message extract function takes table time performance extract decode benchmarks seconds 
beam hipe hipe extract decode table time performance synthetic benchmark seconds 
beam hipe aligned static size unaligned static size aligned variable size unaligned variable size binary containing gtp message input extracts information message header returns 
decode gtp message decode function takes binary containing gtp message input function translates entire message record 
execution times functions different compilation schemes shown table 
clear new compilation scheme outperforms old functions 
extract native code compilation significantly faster calling functions beam 
probably instructions extract program quite simple lot calculations inlined native code favors approach 
decode difference hipe beam 
reason small difference probably program contains quite complex binary instructions 
translated native code remaining ones translated complicated native code quite possibly significantly efficient corresponding machine code generated gnu compiler 
impact byte alignment devised small synthetic benchmark display properties new compilation scheme respect byte alignment 
program takes binary parses integers binaries float 
integers decide flow execution 
benchmark uses bs skip bits instructions 
program exists different versions 
operations operation byte aligned sizes arguments unit specifier guarantee byte alignment sizes arguments unit specifiers guarantee alignment 
run benchmark compiled hipe results table show scheme quite sensitive alignment operations 
contrast beam execution speed versions program slightly faster version 
hipe performance unaligned versions significantly lower aligned versions 
new scheme favors code respects byte alignment faster beam code structured way 
table time performance broadband benchmark seconds 
beam hipe broadband bif broadband bs bit syntax versus part evaluation compares performance erlang program uses bit syntax equivalent program built functions split binary binary list manipulate binaries 
program originally supplied ericsson translated program uses bit syntax 
program just decode program section takes binary parses record 
program implements broadband protocol 
refer different versions program broadband bs broadband bif 
different versions run hipe beam timings shown table 
results show speedup factor changing bit syntax compiling hipe reason translation manipulated binaries bit syntax quite straightforward 
automatically conserves byte boundary alignment operate bytes old manipulate binaries 
acknowledgments research supported part advanced software technology competence center matching funds ericsson development 

johansson pettersson sagonas 
hipe high performance erlang system 
proceedings acm sigplan conference principles practice declarative programming pages 
acm press sept 

bit syntax released version 
proceedings sixth international erlang otp user conference oct 
available www erlang se euc 
pettersson sagonas johansson 
hipe erlang compiler system description performance evaluation 
proceedings sixth international symposium functional logic programming lncs 
springer sept 

protocol programming erlang binaries 
proceedings fifth international erlang otp user conference oct 
available www erlang se euc 
