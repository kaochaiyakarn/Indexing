real time dynamic voltage scaling low power embedded operating systems padmanabhan kang shin real time computing laboratory department electrical engineering computer science university michigan ann arbor mi eecs umich edu years rapid wide spread nontraditional computing platforms especially mobile portable computing devices 
applications increasingly sophisticated processing power increases serious limitation devices available battery life 
dynamic voltage scaling dvs key technique exploiting hardware characteristics processors reduce energy dissipation lowering supply voltage operating frequency 
dvs algorithms shown able dramatic energy savings providing necessary peak computation power general purpose systems 
large class applications embedded real time systems cellular phones variable operating frequency interferes deadline guarantee mechanisms dvs context despite growing importance largely overlooked developed 
provide real time guarantees dvs consider deadlines periodicity real time tasks requiring integration real time scheduler 
class novel algorithms called real time dvs rt dvs modify os real time scheduler task management service provide significant energy savings maintaining real time deadline guarantees 
show simulations working prototype implementation rt dvs algorithms closely approach theoretical lower bound energy consumption easily reduce energy consumption embedded real time system 

computation communication steadily moving mobile portable platforms devices 
evident growth laptop computers pdas occurring embedded world 
continued miniaturization increasing computation power see growing power reported supported part office scientific research afosr 
appear sosp ful microprocessors running sophisticated intelligent control software vast array devices including digital cellular phones portable medical devices 
unfortunately inherent conflict design goals devices mobile systems designed maximize battery life intelligent devices need powerful processors consume energy simpler devices reducing battery life 
spite continuous advances semiconductor battery technologies allow microprocessors provide greater computation unit energy longer total battery life fundamental tradeoff performance battery life remains critically important 
significant research development efforts dynamic voltage scaling dvs :10.1.1.143.7417
dvs tries address tradeoff performance battery life account important characteristics current computer systems peak computing rate needed higher average throughput sustained processors cmos logic 
characteristic effectively means high performance needed small fraction time rest time low performance low power processor suffice 
achieve low performance simply lowering operating frequency processor full speed needed 
dvs goes scales operating voltage processor frequency 
possible static cmos logic vast majority microprocessors today voltage dependent maximum operating frequency reduced frequency processor operate lower supply voltage 
energy dissipated cycle cmos circuitry scales quadratically supply voltage dvs potentially provide large net energy savings frequency voltage scaling 
time constrained applications embedded systems cellular phones digital video cameras dvs presents serious problem 
real time embedded systems directly apply dvs algorithms known date changing operating frequency processor affect execution time tasks may violate timeliness guarantees 
novel algorithms incorporate dvs os scheduler task management services real time embedded system providing energy savings dvs preserving deadline guarantees 
sharp contrast average throughput mechanisms typical current dvs algorithms 
addition detailed simulations show energy conserving benefits algorithms actual implementation mechanisms demonstrating measurements working system 
best knowledge working implementations dvs implementation real time dvs rt dvs 
section details dvs real time scheduling new rt dvs algorithms 
section presents simulation results provides insight system parameters influence energy savings potential rt dvs 
section describes implementation rt dvs mechanisms working system measurements obtained 
section presents related puts larger perspective close directions section 
rt dvs provide energy saving dvs capability system requiring real time deadline guarantees developed class algorithms 
section consider dvs general discuss restrictions imposed embedded real time systems 
rt dvs algorithms developed time constrained environment 
dvs 
power requirements critical constraints mobile computing applications limiting devices restricted power dissipation shortened battery life increased size weight 
design portable mobile computing devices involves tradeoff characteristics 
example fixed size weight handheld computation device platform design system low speed low power processor provides long battery life poor performance system literally powerful processor handle computational loads requires frequent battery recharging 
simply reflects cost increasing performance technology faster processor higher energy costs unit computation 
discussion generally focus energy consumption processor portable computation device main reasons 
practical size weight device generally fixed battery technology available energy fixed 
means power consumption affects battery life device 
secondly focus particularly processor applications processor energy consuming component system 
definitely true small handheld devices pdas components large laptop computers components including large displays 
table shows measured power consumption typical laptop computer 
idle display accounts large fraction dissipated power maximum computational load processor subsystem dominates accounting nearly energy consumed 
result design problem generally boils tradeoff computational power processor system battery life 
avoid problem advantage feature common computing applications average computational throughput lower peak computational capacity needed adequate performance 
ideally processor screen cpu subsystem disk power idle spinning idle standby idle standby max 
load standby table power consumption measured hewlett packard laptop computer sized meet average computational demands low energy costs unit computation providing battery life 
relatively rare times peak computational load imposed higher computational throughput sophisticated processor configured meet high performance requirement higher energy cost unit computation 
high cost cycles applied computation energy consumption lower powerful processor time performance requirements met 
promising mechanism provides best low power high performance processors system dvs :10.1.1.143.7417
dvs relies special hardware particular programmable switching voltage regulator programmable clock generator high performance processor wide operating ranges provide best worlds capability 
order meet peak computational loads processor operated normal voltage frequency maximum frequency 
load lower operating frequency reduced meet computational requirements 
cmos technology virtually microprocessors today maximum operating frequency increases certain limits increased operating voltage processor run slower reduced operating voltage suffices 
second important characteristic energy consumed processor clock cycle scales quadratically operating voltage small change voltage significant impact energy consumption 
dynamically scaling voltage frequency processor computation load dvs provide performance meet peak computational demands average providing reduced power consumption including energy unit computation benefits typically available low performance processors 
real time issues time critical applications scaling processor frequency detrimental 
particularly real time embedded systems portable medical devices cellular phones tasks completed specified deadlines algorithms dvs known date applied 
dvs algorithms consider real time constraints solely average computational throughput 
typically simple feedback mechanism detecting amount idle time processor period time adjust frequency voltage just handle computational load 
simple follows load characteristics closely provide timeliness guarantees tasks may execution deadlines 
example embedded camcorder controller suppose program react change sensor reading ms deadline requires ms computation time processor running maximum operating frequency 
dvs algorithm reacts edf test 
cn pn return true return false rm test ft tn jp 
png dp 
dp return true return false select frequency lowest frequency ff fm jf 
fmg rm test fm edf test fm true 
static voltage scaling algorithm edf rm schedulers average throughput total load system low processor set operate low frequency say half maximum task requiring ms processor time meet ms deadline 
general average throughput dvs algorithms literature provide real time deadline guarantees 
order realize reduced energy consumption benefits dvs real time embedded system need new dvs algorithms tightly coupled actual real time scheduler operating system 
classic model real time system set tasks need executed periodically 
task associated period worst case computation time task released put runnable state periodically time units actual units seconds processor cycles meaningful quanta execution 
task needs complete execution deadline typically defined period release task 
long task uses cycles invocation real time scheduler guarantee tasks receive processor cycles complete invocation time 
course provide guarantees conditions placed allowed task sets expressed form schedulability tests 
real time scheduler guarantees tasks meet deadlines 
task set schedulable passes schedulability test 
task exceeds specified worst case computation bound 
dvs applied real time system ensure conditions hold 
develop algorithms integrate dvs mechanisms studied real time schedulers rate monotonic rm earliest deadline edf schedulers 
rm static priority scheduler assigns task priority period selects task shortest period ready run released execution 
edf dynamic priority scheduler sorts tasks deadlines gives highest priority released task explicit model aperiodic sporadic tasks handled periodic deferred server non realtime tasks provision processor time similar periodic server approach 
deadline misses ms ms ms frequency frequency frequency static edf uses static rm uses static rm fails static voltage scaling example task computing time period ms ms ms ms ms ms table example task set computing times specified maximum processor frequency imminent deadline 
classical treatments schedulers assume task deadline equals period task complete invocation scheduling preemption overheads negligible tasks independent task block waiting task 
design dvs real time systems maintain assumptions primary goal reduce energy consumption derive general scheduling mechanisms 
rest section algorithms perform dvs time constrained systems compromising deadline guarantees real time schedulers 
static voltage scaling propose simple mechanism providing voltage scaling maintaining real time schedulability 
mechanism select lowest possible operating frequency allow rm edf scheduler meet deadlines task set 
frequency set statically changed task set changed 
select appropriate frequency observe scaling operating frequency factor effectively results worst case computation time needed task scaled factor desired period deadline remains unaffected 
take known schedulability tests edf rm schedulers real time systems literature scaled values worst case computation needs tasks test schedulability particular frequency 
necessary sufficient schedulability test task set ideal edf scheduling requires sum worst case utilizations computation time divided period 
cn pn 
scaled computation time values obtain edf schedulability test frequency note account preemption overheads computing worst case preemption sequences task adding overhead worst case computation time 
ms frequency su example cycle conserving edf task invocation invocation ms ms ms ms ms ms table actual computation requirements example task set assuming execution max 
frequency scaling factor 
cn pn similarly start sufficient necessary condition schedulability rm scheduling obtain test scaled frequency see 
operating frequency selected lowest modified schedulability test succeeds 
voltage course changed match operating frequency 
assume operating frequencies corresponding voltage settings available particular hardware platform specified table provided software 
summarizes static voltage scaling edf rm scheduling operating frequencies fm 
fm illustrates mechanisms showing sample worst case execution traces statically scaled edf rm scheduling 
example uses task set table indicates task period worst case computation time assumes normalized discrete frequencies available 
illustrates difference edf rm deadline vs rate priority shows rm reduce frequency reduce voltage conserve energy aggressively edf version 
long available frequency task set passes schedulability test long tasks scaled computation time simple mechanism ensure frequency voltage scaling compromise timely execution tasks deadlines 
frequency voltage setting selected static respect particular task set changed task set changes 
result mechanism need tightly coupled task management functions real time operating system simplifying implementation 
hand algorithm may realize full potential energy savings frequency voltage scaling 
particular static voltage scaling algorithm deal situations task uses worst case requirement processor cycles usually case 
deal common situation need sophisticated rt dvs mechanisms 
cycle conserving rt dvs real time tasks specified worst case computation requirements generally worst case invocations 
take best advantage dvs mechanism reduce operating frequency voltage tasks worst case time increase frequency select frequency lowest freq 
ff fm jf 
fmg 
un fm task release set select frequency task completion set cc cc actual cycles invocation select frequency cycle conserving dvs edf schedulers meet worst case needs 
task released invocation know computation require conservative assumption need specified worst case processor time 
task completes compare actual processor cycles worst case specification 
unused cycles allotted task normally eventually wasted idling processor 
idling extra processor cycles devise dvs algorithms avoid wasting cycles reducing operating frequency 
somewhat similar slack time stealing surplus time run remaining tasks lower cpu frequency accomplish 
algorithms tightly coupled operating system task management services may need reduce frequency task completion increase frequency task release 
main challenge designing algorithms ensure deadline guarantees violated operating frequencies reduced 
edf scheduling mentioned earlier simple schedulability test long sum worst case task utilizations task set schedulable operating maximum frequency scaled factor task completes earlier worst case computation time reclaim excess time recomputing utilization actual computing time consumed task 
reduced value task released invocation 
illustrate task set available frequencies actual execution times table 
invocation tasks may specified worst case times actual value known system task completes execution 
scheduling point task release completion utilization recomputed actual time completed tasks specified worst case frequency set appropriately 
numerical values show total task utilizations computed information available point 
algorithm simple works follows 
suppose task completes current invocation cc cycles usually smaller worst case computation time task uses cc cycles current invocation treat task worst case computation bound cc reduced utilization specified task potentially find smaller scaling factor lower operating frequency task set remains schedulable 
trivially frequency ms frequency ms frequency ms time time time frequency ms frequency ms time time frequency ms time example cycle conserving rm initially statically scaled worst case rm schedule target determine minimum frequency complete rounding closest discrete setting requires frequency completes early recompute required frequency completes low frequency suffices complete remaining re released try match done execution trace time ms assume frequency set static scaling algorithm select frequency set sm max cycles deadline lowest freq 
ff fm jf 
fmg 
dn sm fm task release set left set sm max cycles deadline set sm fm allocate cycles select frequency task completion set left set select frequency task execution decrement left allocate cycles ft tn jp 
png tasks sorted period left set left set left set set cycle conserving dvs rm schedulers task set prior change schedulable edf schedulability test continue hold completed execution violate lowered maximum computing bound remainder time deadline 
task set continues meet conditions imposed real time scheduler guarantee timely execution result deadline guarantees provided edf scheduling continue hold released invocation 
point restore computation bound ensure violate temporarily lowered bound compromise deadline guarantees 
time may necessary increase operating frequency 
glance algorithm appear significantly reduce frequencies voltages energy expenditure 
multiple tasks may simultaneously reduced utilization state total savings significant 
schedulability test approach designing cycle conserving dvs algorithm rm scheduling rm schedulability test significantly complex number tasks scheduled take different approach 
observe assuming tasks require worst case computation times statically scaled rm mechanism discussed earlier maintain real time deadline guarantees 
assert long equal better progress tasks worst case statically scaled rm algorithm deadlines met regardless actual operating frequencies 
try avoid getting ahead worst case execution pattern way reduction execution cycles tasks applied reducing operating frequency voltage 
example illustrates accomplished 
initially start worst case schedule static scaling example uses maximum cpu frequency 
keep things simple look deadline system 
try spread accomplished deadline entire interval current time deadline 
provides minimum operating frequency value frequency settings discrete round closest available setting frequency 
executing frequency ms frequency ms frequency ms time reserved reserved reserved reserved reserved reserved time time frequency ms frequency ms frequency ms reserved reserved time time time example look ahead edf time plan defer execution deadline likewise try fit portion fit execute requiring frequency completes repeat calculations find new frequency setting repeating calculation completes indicates need execute edf conserving executes minimum frequency occurs invocation released execution trace time ms repeat exercise spreading remaining remaining time deadline results lower operating frequency completed earlier worst case specified computing time 
repeating scheduling point results final execution trace 
conceptually simple actual algorithm somewhat complex due number counters maintained 
algorithm need keep track worst case remaining cycles computation left task task released left set determine progress static voltage scaling rm mechanism worst case earliest deadline task system 
obtain sm number cycles deadline assuming operation statically scaled maximum frequencies respectively 
cycles allocated tasks rm priority order task receiving allocation left corresponding number cycles execute statically scaled rm scenario interval 
long execute cycles task completes task deadline keeping pace worst case scenario set execution speed sum values 
tasks execute left values decremented 
task completes left set frequency voltage changed 
pacing criteria select operating frequency algorithm guarantees task deadline tasks completed execution worst case statically scaled rm schedule completed meeting deadlines 
algorithms dynamically adjust frequency voltage reacting actual computational requirements real time tasks 
require frequency voltage switches task invocation release completion overheads hardware voltage change accounted worst case computation time allocations tasks 
see algorithms achieve significant energy savings affecting real time guarantees 
look ahead rt dvs final aggressive rt dvs algorithm introduce attempts achieve better energy savings look ahead technique determine computation need defer task execution 
cycle conserving approaches discussed assume worst case initially execute high frequency tasks complete reduce operating frequency voltage 
contrast look ahead scheme tries defer possible sets operating frequency meet minimum done ensure deadlines met 
course may require forced run high frequencies order complete deferred time 
hand tasks tend worst case computing time allocations peak execution rates deferred may needed heuristic allow system continue operating low frequency voltage completing tasks deadlines 
continuing example earlier illustrate lookahead rt dvs edf algorithm works 
goal defer earliest deadline system operate low frequency 
allocate time schedule worst case execution task starting task latest deadline spread deadline subject constraint reserving capacity invocations tasks 
repeat step entirely fit allocating reserving capacity invocations additional allotted 
note deferred moved simplicity considered 
allocated determine operating frequency 
completed specified worst case execution cycles repeat find lower operating frequency 
continuing method trying defer deadline system ultimately results execution trace shown 
select frequency lowest freq 
ff fm jf 
fmg fm task release set left defer task completion set left defer task execution decrement left defer set 
cn pn set ft tn jd 
note reverse edf order tasks set set max left dn set left dn set select frequency dn current time look ahead dvs edf schedulers actual algorithm look ahead rt dvs edf scheduling shown 
cycle conserving rt dvs algorithm rm keep track worst case remaining computation left current invocation task set task release decremented task executes set completion 
major step algorithm deferral function 
look interval task deadline try push deadline compute minimum number cycles execute interval order meet deadlines 
operating frequency set just fast execute cycles interval 
calculate look tasks reverse edf order latest deadline 
assuming worst case utilization tasks earlier deadlines effectively reserving time invocations calculate minimum number cycles task execute closest deadline dn order complete deadline 
cumulative utilization adjusted reflect actual utilization task time dn calculation repeated tasks assumed worst case utilization values earlier deadline tasks computed values deadline ones 
simply sum values calculated tasks reflects total number cycles execute dn order tasks meet deadlines 
algorithm aggressively reduces processor frequency voltage ensures sufficient cycles available task meet deadline reserving worst case requirements higher priority earlier deadline tasks 
summary rt dvs algorithms rt dvs algorithms far fairly easy incorporate real time operating system require significant processing costs 
dynamic schemes dvs method energy plain edf statically scaled rm statically scaled edf cycle conserving edf cycle conserving rm look ahead edf table normalized energy consumption example traces quire computation assuming scheduler provides edf sorted task list require significant processing scheduler 
significant overheads may come hardware voltage switching times 
algorithms switches occur task invocation period overheads easily accounted added worst case task computation times 
conclude series examples table shows normalized energy dissipated example task table set ms actual execution times table 
assume frequency settings need volts respectively idle cycles consume energy 
general evaluation algorithms done section 

simulations developed simulator evaluate potential energy savings voltage scaling real time scheduled system 
subsection describes simulator assumptions design 
show simulation results provide insight significant system parameters affecting rt dvs energy savings 
simulation methodology developed simulator operation hardware capable voltage frequency scaling real time scheduling 
simulator takes input task set specified period computation requirements task system parameters provides energy consumption system algorithms developed 
edf rm schedulers dvs support simulated comparison 
parameters supplied simulator include machine specification list frequencies corresponding voltages available simulated platform specification actual fraction worst case execution cycles tasks require invocation 
parameter constant indicates task specified worst case computation cycles invocation random function uniformly distributed random multiplier invocation simulation assumes constant amount energy required cycle operation voltage 
quantum scaled square operating voltage consistent energy dissipation cmos circuits 
energy consumed processor computed variations due differ dvs energy consumption edf rm edf numbers suffice 
task sets schedulable edf rm simulate verify task sets schedulable rm schedulable rm rt dvs mechanisms 
ent types instructions executed taken account 
simplification task execution modeling reduced counting cycles execution execution traces needed 
software controlled halt feature available processors reducing energy expenditure idle simulated specifying idle level parameter 
value gives ratio energy consumed cycle halted cycle normal operation value indicates cycle spent idling dissipates half energy cycle computation simplicity task execution idle halt cycles considered 
particular consider preemption task switch overheads time required switch operating frequency voltages 
loss generality simplifications 
preemption task switch overheads dvs effect relative power dissipation 
voltage switching overheads incur time penalty may affect schedulability task sets incur energy costs processor operate switching interval 
real time task sets specified pair numbers task indicating period worst case computation time 
task sets generated randomly follows 
task equal probability having short ms medium ms long ms period 
range task periods uniformly distributed 
simulates varied mix short long period tasks commonly real time systems 
computation requirements tasks assigned randomly similar range uniform distribution 
task computation requirements scaled constant chosen sum utilizations tasks task set reaches desired value 
method generating real time task sets previously development evaluation real time embedded microkernel 
averaged hundreds distinct task sets generated different total worst case utilization values simulations provide relationship energy consumption worst case utilization task set 
simulation results performed extensive simulations rt dvs algorithms determine important interesting system parameters affect energy consumption 
specified assume dvs capable platform provides relative operating frequencies corresponding voltages respectively 
simulations compare rt dvs algorithms non dvs system 
include theoretical lower bound energy dissipation 
lower bound reflects execution throughput consider timing issues task active 
computed total number task computation cycles simulation determining absolute minimum energy executed simulation time duration platform frequency voltage specification 
real algorithms better theoretical lower bound interesting see close mechanisms approach bound 
number tasks set simulations determine effects varying number tasks task sets 
shows energy consumption task sets tasks rt dvs algorithms unmodified edf 
simulations assume processor provides perfect halt function idling processor consume energy showing scheduling energy conserving features favorable light 
addition assume tasks consume worst case computation requirements invocation 
extremes difference statically scaled cycle conserving edf algorithms 
notice immediately rt dvs algorithms show potential large energy savings particularly task sets midrange worst case processor utilization values 
look ahead mechanism particular able follow theoretical lower bound closely 
total utilization greatly affects energy consumption number tasks little effect 
relative absolute positions curves different algorithms shift significantly number tasks varied 
varying number tasks little effect simulations single value 
varying idle level preceding simulations assumed perfect software controlled halt feature provided processor idle time consumes energy 
see imperfect halt feature affects power consumption performed simulations varying idle level factor ratio energy consumed cycle processor halted energy consumed normal execution cycle 
shows results idle level factors 
absolute energy consumed obviously increase idle state energy consumption increases insightful look relative energy consumption plotting values normalized respect unmodified edf energy consumption 
significant result perfect halt feature idle level non energy conserving schedulers shown best light large percentage improvement rt dvs algorithms 
obviously idle level increases energy consumption normal operation percentage savings voltage scaling improves 
relative performance energy aware schedulers significantly affected changing idle power consumption level dynamic algorithms benefit ones 
evident cycle conserving edf mechanism results diverge statically scaled edf results 
easily explained fact dynamic algorithms switch lowest frequency voltage idle static ones perfect idle difference idle cycle energy consumption approaches execution cycles dynamic algorithms perform relatively better 
remainder simulations assume idle level 
varying machine specifications previous simulations set available frequency voltage scaling settings 
investigate effects varying simulated machine specifications 
summarizes hardware voltage frequency settings tuple consists relative frequency corresponding processor voltage machine machine machine utilization tasks edf bound utilization tasks edf bound utilization tasks edf bound energy consumption tasks utilization tasks idle level edf bound utilization tasks idle level edf bound utilization tasks idle level edf bound normalized energy consumption idle level factors utilization tasks machine edf bound utilization tasks machine edf bound utilization tasks machine edf bound normalized energy consumption machine utilization tasks edf bound utilization tasks edf bound utilization tasks edf bound normalized energy consumption computation set fixed fraction worst case allocation utilization tasks uniform edf bound normalized energy consumption uniform distribution computation shows simulation results machines 
machine previous simulations frequency settings expected standard pc motherboard corresponding voltage levels arbitrarily selected 
machine differs additional frequency setting 
small change expect slight differences simulation results specifications 
significant change seen cycle conserving edf statically scaled edf identical 
extra operating point region near cross point algorithm benefits shifting cross point closer full utilization 
machine different reflects settings may available platform incorporating amd processor amd 
mechanism 
voltage levels speculated 
settings select plotted curves tend smoother 
relative voltage range smaller specification maximum savings machine specifications 
significant fact cycle conserving edf outperforms look ahead edf algorithm 
benefit large number settings allows closely match task set reduce energy expenditure 
fact closely approximate theoretical lower bound entire range utilizations 
hand sets frequency trying defer processing worst case require running full speed 
settings low frequency setting closely matched requiring high voltage high frequency processing hurting performance 
fewer settings frequency selected somewhat higher processing deferred lessening likelihood needing higher voltage frequency settings improving performance 
sense error due limited number frequency steps detrimental scheme beneficial 
results indicate energy savings various rt dvs algorithms depend greatly available voltage frequency settings platform 
varying computation time set experiments vary distribution actual computation required tasks invocation see rt dvs mechanisms take advantage task sets consume worst case computation times 
preceding simulations assumed tasks require worst case computation allocation 
shows simulation results tasks require constant worst case execution cycles invocation 
observe statically scaled mechanisms affected scale voltage frequency solely worst case computation times specified tasks 
results cycle conserving rm algorithm show significant change indicating job adapting tasks specified worst case computation times 
hand cycle conserving look ahead edf schemes show great reductions relative energy consumption actual computation performed decreases 
shows simulation results tasks uniform distribution worst case computation 
despite randomness introduced results appear identical setting computation constant half specified value invocation task 
sense average execution uniform distribution times worst case task 
actual distribution computation invocation critical factor energy conservation performance 
dynamic mechanisms average utilization determines relative energy consumption static scaling methods worst case utilization determining factor 
exception algorithm albeit dynamic results primarily reflect worst case utilization task set 

implementation section describes implementation real time scheduled system incorporating proposed dvs algorithms 
discuss architecture system measurements actual energy savings rt dvs algorithms 
hardware platform developed rt dvs mechanisms primarily embedded real time devices prototype system implemented pc architecture 
platform hewlett packard notebook computer amd processor maximum operating frequency mhz 
power consumption numbers measured laptop shown earlier table 
processor features amd extensions allow processor clock frequency voltage adjusted dynamically software control 
looked similar offering intel called controls voltage frequency hardware external processor 
possible adjust settings software control able determine proper output sequences needed control external hardware 
experience transmeta crusoe processor various embedded processors intel xscale supporting dvs 
processor specification allows system software select different frequencies built pll clock generator mhz mhz increments skipping limited maximum processor clock rate mhz 
processor control pins set voltage external regulator 
settings possible explicitly specified default setting rest left individual manufacturers 
hp chose incorporate voltage settings 
volt module periodic rt task module rt scheduler rt dvs scheduler hook user kernel level linux kernel rt task set dvs non rt level software architecture rt dvs implementation age frequency selectors independently set need function map frequency appropriate available voltage level 
specifications publicly available determined experimentally 
processor stable mhz needed setting higher frequencies 
stability checked set cpu intensive benchmarks mpg loop linux kernel compile verifying proper behavior 
note empirical study sample size actual frequency voltage mappings may vary machines model 
processor mandatory interval associated change voltage frequency transition processor halts execution 
mandatory halt duration meant ensure voltage supply clock time stabilize processor continues execution 
characteristics different hardware implementations external voltage regulators vary greatly duration programmable multiples cycles mhz system bus clock 
experience takes negligible time frequency changes occur 
cpu time stamp register basically cycle counter continues increment halt duration observed cycles occur transition mhz cycles transition mhz minimum interval indicates frequency cpu clock changes quickly halt time spent target frequency 
know actual time required voltage transition occur experiments halt duration value approximately ms resulted observable instability 
switching overheads system ms voltage changes frequency changes 
mentioned earlier account switching overhead computation requirements tasks transitions attributable task invocation 
software architecture implemented algorithms extension modules linux kernel 
real time operating system linux easily extended modules provides robust development environment familiar 
high level view software architecture shown 
approach taken implementation maximize flexibility ease optimize performance 
implementation serves proof concept ideal model 
implementing kernel level code linux kernel modules avoided code changes linux kernel modules able plug unmodified kernels 
digital oscilloscope current probe dc adapter battery removed laptop power measurement laptop implementation central module implementation provides support periodic real time tasks linux 
done attaching call back functions hooks inside linux scheduler timer tick handlers 
mechanism allows modules provide tight timing control override default unix scheduling policy real time tasks 
note module define real time scheduling policy dvs algorithm 
separate modules provide real time scheduling policy rt dvs algorithms 
rt scheduler dvs module loaded system time 
separating underlying periodic rt support scheduling dvs policies architecture allows dynamic switching policies shutting system running rt tasks 
course switch time policy modules realtime scheduler defined timeliness constraints running rt tasks may met 
kernel module implementation handles access 
mechanism adjust clock speed voltage 
provides clean high level interface setting appropriate bits processor special feature register desired frequency voltage level 
modules provide interface user level programs linux filesystem 
tasks ordinary file read write mechanisms interact modules 
particular task write required period maximum computing bound module periodic real time task released periodically scheduled policy module receive static priority non rt tasks system 
task uses writes indicate completion invocation time blocked release time 
long task keeps file handle open registered real time task kernel extensions 
high level filesystem interface efficient direct system calls convenient prototype implementation simply cat read modules obtain status information human readable form 

module provides interface 
allow user level non rt dvs demon implementing algorithms dvs literature manually deal operating frequency voltage simple unix shell commands 
measurements observations performed experiments rt dvs implementation measured actual energy consumption system 
shows setup measure energy consumption 
laptop battery removed system run external dc power adapter 
special current probe digital oscilloscope measure power consumed laptop product current voltage supplied 
basic methodology similar utilization tasks real platform edf power consumption actual platform slow digital oscilloscope show transient behavior provide true average power consumption long intervals 
long duration acquisition capability digital oscilloscope power measurements averaged second intervals 
shows actual power consumption measured rt dvs algorithms varying worst case cpu utilization set tasks consume worst case computation allocated invocation 
measurements reflect total system power just cpu energy dissipation 
result constant irreducible power drain system board consumption display turned measurements additional constant measurement 
overhead rt dvs mechanisms show significant reduction power consumption providing deadline guarantees real time system 
shows simulation identical parameters including voltage level machine specification measurements 
simulation reflects processor energy consumption include energy overheads rest system 
clear addition constant overheads actual measurements results nearly identical 
validates simulation results showing results seen earlier really hold real systems despite simplifying assumptions simulator 
simulations accurate may useful predicting performance rt dvs implementations 
note interesting phenomena considered implementing system rt dvs 
noticed invocation task may overrun specified computing time bound 
occurs invocation caused cold processor operating system state 
particular task begins execution cache misses translation look aside buffer tlb misses page faults occur system may due copy write page allocation mechanism linux 
processing overheads count task execution time may cause exceed bound 
subsequent invocations state warm problem disappears 
due large difference worst case average case performance general purpose platforms explains real time systems tend specialized platforms decrease eliminate variations performance 
utilization tasks simulated platform edf power consumption simulated platform second important observation dynamic addition task task set may cause transient missed deadlines careful 
particularly aggressive rt dvs schemes system may closely matched current task set load may sufficient processor cycles remaining task deadlines handle new task 
solution problem immediately insert task task set dvs decisions new system characteristics defer initial release new task current invocations existing tasks completed 
ensures effects past dvs decisions old task set expired time new task released 

related large number publications describing dvs techniques 
algorithms loosely coupled underlying os scheduling task management systems relying average processor utilization perform voltage frequency scaling 
basically matching operating frequency weighted average current processor load conversely idle time simple feedback mechanism 
mechanisms result close adaptation workload large energy savings unsuitable real time systems 
dvs research shown methods maintaining interactive performance general purpose applications voltage frequency scaling 
done prediction episodic interaction applying soft deadlines estimating task distributions 
methods show results maintaining short response times human interactive multimedia applications intended stricter timeliness constraints real time systems 
dvs produced algorithms closely tied scheduler claiming real time capability 
take simplistic view real time tasks account single execution deadline task 
handle sporadic tasks execute just 
handle important canonical model realtime systems uses periodic real time tasks 
furthermore clear new tasks entering system handled timely manner especially tasks single shot system may sufficient computing resources having adapted closely current task set 
best knowledge papers deal dvs true real time system perspective 
uses combined offline online scheduling technique 
worst case execution time wcet schedule provides ideal operating frequency voltage schedule assuming tasks require worst case computation time calculated offline 
online scheduler reduces frequency voltage tasks requested computing quota provide deadline guarantees ensuring invocations complete wcet schedule 
complicated algorithms deal effectively dynamic task sets 
second progress presents mechanisms rt dvs 
mechanism attempts calculate best feasible schedule computationally expensive process done offline 
heuristic edf tests schedulability scheduling point 
details online mechanism 
assumption common period tasks somewhat unrealistic polynomial transformation produce common periods may need schedule arbitrarily long planning cycle algorithm 
third looks dvs application side 
presents mechanism application monitors progress execution compares profiled worst case execution adjusts processor frequency voltage accordingly 
compiler inserts monitoring mechanism various points application 
clear determine locations points task application mechanism scale systems multiple concurrent tasks applications 
rt dvs combines offline analysis online slack time stealing dynamic probability voltage scaling 
offline analysis provides minimum operating rates task worst case execution time 
conjunction probability distribution actual computation time change frequency voltage violating deadlines 
excess time run remaining tasks lower cpu frequencies 
papers papers dealing dvs simulations algorithms 
contrast fairly simple online mechanisms rt dvs common models assumptions contexts real time systems 
implemented demonstrated rt dvs real working system 
describes working dvs implementation modified strongarm embedded system board evaluate dvs scheduler 
addition dvs research regarding energy conserving issues including application adaptation communication oriented energy conservation 
issues orthogonal dvs complementary rt dvs mechanisms 

directions novel algorithms realtime dynamic voltage scaling coupled underlying os task management mechanisms real time scheduler achieve significant energy savings simultaneously preserving timeliness guarantees real time scheduling 
extensive simulation results showing significant parameters affecting energy conservation rt dvs mechanisms extent cpu power dissipation reduced 
particular shown number tasks energy efficiency idle cycles greatly affect relative savings rt dvs mechanisms voltage frequency settings available underlying hardware task set cpu utilizations profoundly affect performance algorithms 
furthermore look ahead cycle conserving mechanisms achieve close theoretical lower bound energy 
implemented algorithms actual measurements validated significant energy savings realized rt dvs real systems 
additionally simulations predict accurately energy consumption characteristics real systems 
measurements indicate energy savings achieved including irreducible system energy overheads task sets high values worst average case utilizations 
expand deterministic absolute real time paradigm 
particular investigate dvs probabilistic statistical deadline guarantees 
explore integration mechanisms including application energy adaptation energy adaptive communication real time best effort 
additionally developed portable devices rt dvs applicable widely general real time systems 
energy savings works extending battery life portable applications reduce heat generated real time embedded controllers various factory home automation products reduce cooling requirements costs large scale multiprocessor supercomputers 

advanced micro devices 
mobile amd processor data sheet june 
publication 
brodersen energy efficient cmos microprocessor design 
proceedings th annual hawaii international conference system sciences 
volume architecture los alamitos ca usa jan mudge shriver eds ieee computer society press pp 

ellis case higher level power management 
proceedings th ieee workshop hot topics operating systems hotos viii rio rico az mar pp 

reinhardt mudge automatic performance setting dynamic voltage scaling 
proceedings th conference mobile computing networking mobicom rome italy july 
flinn satyanarayanan energy aware adaptation mobile applications 
proceedings th acm symposium operating system principles kiawah island sc dec acm press pp 

flinn satyanarayanan tool profiling energy usage mobile applications 
proceedings second ieee workshop mobile computing systems applications new orleans la feb pp 

chan comparing algorithms dynamic speed setting low power cpu 
proceedings st conference mobile computing networking mobicom mar 
hard real time scheduling low energy stochastic data dvs processors 
proceedings international symposium low power electronics design islped huntington beach ca aug 
intel 
developer intel com design 
intel 
mobile intel pentium iii processor bga packages 
order number 
kravets krishnan power management techniques mobile communication 
proceedings th annual acm ieee international conference mobile computing networking mobicom new york oct acm press pp 

krishna lee 
voltage clock scaling techniques low power hard real time systems 
proceedings ieee real time technology applications symposium washington may pp 

krishna shin real time systems 
mcgraw hill 
lehoczky sha ding rate monotonic scheduling algorithm exact characterization average case behavior 
proceedings ieee real time systems symposium pp 

lehoczky algorithms scheduling hard aperiodic tasks fixed priority systems slack stealing 
proceedings ieee real time systems symposium 
lehoczky sha enhanced aperiodic responsiveness hard real time environments 
proc 
th ieee real time systems symposium los alamitos ca dec pp 

leung whitehead complexity fixed priority scheduling periodic real time tasks 
performance evaluation dec 
liu layland scheduling algorithms multiprogramming hard real time environment 
acm jan 
lorch smith improving dynamic voltage scaling algorithms pace 
proceedings acm sigmetrics conference cambridge ma june pp 

lorch smith apple macintosh energy consumption 
ieee micro nov 
melhem compiler assisted dynamic power aware scheduling real time applications 
workshop compilers operating systems low power philadelphia pa oct 
pering brodersen energy efficient voltage scheduling real time operating systems 
proceedings th ieee real time technology applications symposium progress session denver june 
pering brodersen simulation evaluation dynamic voltage scaling algorithms 
proceedings international symposium low power electronics design islped monterey ca aug pp 

pering brodersen voltage scheduling microprocessor system 
proceedings international symposium low power electronics design islped italy july 
langendoen sips dynamic voltage scaling low power microprocessor 
proceedings th conference mobile computing networking mobicom rome italy july 
langendoen sips energy priority scheduling variable voltage processors 
proceedings international symposium low power electronics design islped huntington beach ca aug 
stankovic deadline scheduling real time systems 
kluwer academic publishers 
swaminathan real time task scheduling energy aware embedded systems 
proceedings ieee real time systems symp 
progress session orlando fl nov 
transmeta 
www transmeta com 
weiser welch demers shenker scheduling reduced cpu energy :10.1.1.143.7417
proceedings symposium operating systems design implementation osdi monterey ca nov pp 

shin emeralds small memory real time microkernel 
proceedings th acm symposium operating system principles kiawah island sc dec acm press pp 


