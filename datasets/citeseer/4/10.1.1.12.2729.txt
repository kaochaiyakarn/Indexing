applying model management classical meta data problems model management new approach meta data management offers higher level programming interface current techniques 
main abstractions models schemas interface definitions mappings models 
treats abstractions bulk objects offers operators match merge diff compose apply 
extends earlier treatments operators applies classical meta data management problems schema integration schema evolution round trip engineering 
information system problems involve design integration maintenance complex application artifacts application programs databases web sites workflow scripts formatted messages user interfaces 
engineers perform tools manipulate formal descriptions models artifacts object diagrams interface definitions database schemas web site layouts control flow diagrams xml schemas form definitions 
manipulation usually involves designing transformations models turn requires explicit representation mappings describe models related 
examples mapping class definitions relational schemas generate object wrappers mapping xml schemas drive message translation mapping data sources mediated schema drive heterogeneous data integration mapping database schema release guide data migration view evolution mapping entity relationship er model sql schema navigate database permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings cidr conference philip bernstein microsoft research microsoft way redmond wa microsoft com design implementation mapping source makefiles target makefiles drive transformation scripts programming environment mapping interfaces real time devices interfaces required system management environment enable communicate device 
conventional usage classify meta data management applications involve manipulating descriptions data data 
today approach implementing applications translate models object oriented representation manipulate models mappings representation 
manipulation includes designing mappings models generating model model mapping modifying model mapping interpreting mapping generating code mapping 
database query languages offer little help kind manipulation 
programmed object time primitives 
proposed avoid object time programming treating models mappings abstractions manipulated model time mapping time operators :10.1.1.133.2520
believe implementation abstractions operators called model management system offer order improvement programmer productivity meta data applications 
approach meant generic sense single implementation applicable data models examples 
possible modeling concepts virtually modeling environments uml extended er eer xml schema 
implementation uses representation models includes concepts applicable environments 
published approaches list meta data problems 
borrow approaches abstracting algorithms small set operators generalizing applications extent data models 
hope offer powerful database platform applications available today 
model management system models mappings syntactic structures 
expressed type system additional semantics constraint language query language 
despite limited expressiveness model management operators powerful avoid object time programming meta data applications 
precisely limited expressiveness semantics implementation operators tractable 
complete solution meta data problems require semantic processing typically manipulation formulas mathematical system logic state machines 
cope model management offers extension mechanism exploit power inferencing engine mathematical system 
diving details offer short preview see model management consists yield programmer productivity improvements 
summarize main model management operators match takes models input returns mapping compose takes mapping models mapping models returns mapping diff takes model mapping model returns sub model participate mapping takes model returns new model typically different data model mapping merge takes models mapping returns union mappings second see operators consider example suppose mapping map data source data warehouse sw want map second source sw similar 
see 
sw name schemas databases 
call match obtain mapping map shows 
second call compose map map obtain mapping map sw maps sw objects correspond objects 
map objects sw call diff map find sub model mapped map sw map identify corresponding objects 
call operators generate warehouse schema merge sw 
details omitted see similar operator sequences 
main purpose define semantics operators detail sketchy example concrete additional ex map 
map 
map 
map sw model management help generate data warehouse loading script amples demonstrate model management credible approach solving problems type 
overview model management complete proposal date 
past papers short vision example applying model management data warehouse loading scenario application merge mediated schemas initial mathematical semantics model management 
studied match operator developed separate research area :10.1.1.16.700
offers new contributions program full description model management operators 
new details operators diff compose new proposed operator 
applications model management known meta data problems schema integration schema evolution round trip engineering 
regard particularly important offer detailed demonstration model management help solve wide range meta data problems 
organized follows section describes main structures model management models mappings 
section describes operators models mappings 
section presents walkthroughs solutions schema integration schema evolution round trip engineering 
section gives thoughts implementing model management 
section discusses related 
section 
models mappings map sw 
map match 
map compose map map 
map diff map models purposes exact choice model representation important 
technical requirements representation models definitions mappings model management operators depend 
model contain set objects identity 
model needs set content defined objects set 
requiring objects identity define mapping models terms mappings objects combinations objects 
second want expressiveness representation models comparable eer models 
objects attributes properties related generalization relationships aggregation part relationships associations relationships special semantics 
may built types constraints min max cardinality set valued properties 
third model object structure needs support usual object time operations create delete object read write property add remove relationship 
fourth expect objects properties relationships types 
meta levels picture 
conventional meta data terminology instances models meta model consists type definitions objects models meta meta model representation language models meta models expressed 
avoid term data model ambiguous meta data world 
contexts means meta meta model relational database system relational data model meta meta model 
contexts means meta model example model management system relational schema personnel schema model instance relational meta model says relational schema consists table definitions columns definitions model meta model represented meta meta model eer model 
goal model management generic possible rich representation desirable model imported data model little semantics lost 
ensure model management operators implementable compromises inevitable expressiveness tractability 
simplify discussion define model set objects properties relationships associations 
assume model identified root object includes exactly set objects reachable root paths relationships 
implementation expect richer model comparable eer models 
mappings models morphism binary relation objects models 
set pairs respectively 
mapping models model map morphisms map map 
object mapping map relate set objects set objects objects related morphisms 
example mapping models emp employee relationships represented solid lines morphisms dashed lines 
effect mapping reifies concept relationship models 
representing relationship set pairs objects mapping repre emp emp name morphism emp example mapping sents set objects relate objects models 
experience reification needed satisfactory expressiveness 
example mapping represented relationship presumably include pairs name firstname name lastname loses structure shows firstname lastname components name 
addition enabling structural expressiveness reifying mapping allows attach custom semantics 
having property called expression object mapping expression variables include objects directly indirectly 
example associate expression object says name equals concatenation name lastname 
say nature expressions section 
despite benefits reifying mappings models expect value specializing model management operators operate directly morphisms mappings 
specialization outside scope 
operators discussed models mappings morphisms separately mappings contain 
model management algebra employee firstname lastname match operator match takes models input returns mapping 
mapping identifies combinations objects input models equal similar externally provided definition equality similarity 
cases definition quite simple 
example equality objects may equality identifiers names 
cases quite complex subjective 
example equality database schema objects databases independently developed different enterprises may depend different terminologies name objects 
range definitions equality leads versions match operator elementary match complex match 
elementary match simple definition equality 
simple definition yield accurate mapping model known incremental modification model 
complex match complex definitions equality 
need set expression property mapping objects distinguish sets objects equal similar 
similar mean related express exactly 
example object says emp equal object says name similar combination firstname lastname 
human mapping designer update object expression property say name equals concatenation firstname lastname 
emp emp name employee firstname lastname mapping output complex match practice complex match algorithm returns mapping design environment help human designer develop mapping 
potentially benefits technology variety fields graph isomorphism identify structural similarity large models natural language processing identify similarity names analyze text documentation model domain specific thesauri machine learning data mining similarity data instances infer equality model objects 
survey approaches complex match 
diff intuitively difference models set objects model correspond object model 
part computing difference determining objects correspond 
main function match 
repeating semantics part diff operator compute difference relative mapping may computed invocation match 
mapping map models operator diff map returns objects referenced map morphism map 
problems definition diff require changing bit 
root map object root result diff map include object 
inconvenient hard align result diff subsequent operations 
see examples section 
alter definition diff require result includes object referenced map root 
second recall model set objects reachable paths relationships root 
result diff may equal subset objects objects may connected diff result root 
result diff model 
example consider diff employee models mapping 
firstname lastname referenced morphism employee result 
name result firstname lastname connected root employee result model 
undesirable objects subsequently processed operators expect model input 
ensure result diff wellformed model object result require result include objects path relationships object referenced map root objects referenced map morphism called support objects added support structural integrity model 
example name support object result diff employee 
emp emp name employee name firstname lastname diff employee includes firstname lastname name having decision third problem model returned diff distinguish support objects objects meant result diff participate map 
simply mark support objects result 
introduces structure marked model 
avoid complication existing structures represent result model mapping 
result diff pair map includes copy object referenced map root set objects referenced map morphism map support objects path relationships object required relationship objects association objects object object outside 
employee name result diff employee employee map connects root connects object corresponding object 
example employee result diff employee employee shown 
merge merge operation returns copy objects input models objects input models equal collapsed single object output 
stating precisely models mapping map merge map returns model includes copy objects map object map declares objects equal equal objects dropped properties relationships added root map declare roots equal 
relationships map copied corresponding objects 
example emp result merge emp employee models mappings 
merge returns mappings map map relate object objects derived 
output merge triple map map 
example shows map pings merge result input models merge emp employee 
emp firstname lastname emp name emp employee name firstname lastname emp emp name firstname lastname result merge applied effect collapsing objects single object cause output merge violate basic constraints models satisfy 
example suppose map declares objects equal suppose type integer type image 
type merged object integer image 
constraint models object allowed type manifests constraint violation repaired part merge postprocessing step 
solution specific problem appears 
general discussion constraint violations merge results appears 
compose composition operator represented creates mapping combining mappings 
map relates models map relates composition map map map mapping relates map map map 
explain semantics composition mathematical function terminology object map refer objects domain range 
domain range 
similarly object map domain range 
principle composition driven left mapping map right mapping map 
restrict attention right compositions examples section 
right composition structure map determines structure output mapping 
employee employee firstname lastname merge result emp mappings input models emp employee emp emp name firstname lastname compute composition object map identify object map range domain means range supply object domain 
example ranges map supply object domain map 
suppose objects map supply domain supplies object domain 
range domain range domain generate output object map range range domain domain example range range supply domain 
range range domain 
object generate output object map shown range range domain domain domain 
map mappings map map composed problem map may set objects map supply domain 
example supply domain 
defining composition set choose 
choosing 
compose map union objects map range domain example 
semantics supports application scenarios section 
decision define right composition map map map constructively follows 
copy create copy map map 
note map morphisms map domains ranges 

precompute input object map input set objects map range domain 

define domains map range domain set input domain domain input map needed support object descendants satisfies delete set domain range 
step defines domain object map 
input set objects map range intersects domain 
union ranges input contains domain union domains input domain 
composition deleted support object required maintain wellformed ness map domain range cleared compose objects map 
useful keep object map map input set cover domain 
called right outer composition objects right operand map retained 
semantics right composition step replaced set domain definition composition allows flexible choice inputs 
complex required examples section omit 
apply operator apply takes model arbitrary function inputs applies object model 
cases modifies model example modifying certain properties relationships object 
purpose apply reduce need application programs object time navigation model 
variations operator different traversal strategies pre order postorder relationships proviso visit object twice event cycles 
copy operator copy takes model input returns copy model 
returned model includes relationships input model including connect objects objects outside model 
variation copy special interest 
takes model mapping input mapping incident model 
returns copy model mapping output 
essence treats input model mapping single model creating copy 
see need consider complicated get effect copying model mapping independently 
variations copy discussed :10.1.1.133.2520
applications model management usually involve generation model meta model model meta model 
examples generation sql schema er diagram interface definitions uml model html links web site map 
model generator usually meta model specific 
example behavior er sql generator depends source target er sql models respectively 
expect model generation generic meta operator 
common structure model generators worth abstracting 
generation step produce output model mapping input model output model 
allows operators propagate changes model 
example application developer modifies sql schema helps know modified objects relate er model er model consistent revised sql schema 
scenario developed detail section 
second common structure model generators simply traverse input model predetermined order apply generate output model objects type input object visiting 
example sql generator generate table definition entity type column definition attribute type foreign key relationship type 
effect generator case statement case statement variable type object visited 
case statement encapsulated function executed operator apply 
case statement driven object types go step automating model generation tagging meta model object type definition desired generation behavior model objects type proposed 
model generation encapsulated model management operator call 
enumerate goal capture model manipulation possible model time operators times iterative object time code needed 
simplify application programming case offer operator called enumerate takes model input returns cursor output 
operator applied cursor returns object model input enumerate null hits cursor 
apply enumerate may offer variations different traversal orderings 
data manipulation operators models object structures manipulated usual object time operators read attribute traverse relationship create object update attribute add remove relationship addition bulk database operators interest select return subset model satisfies qualification formula 
returned subset includes additional support objects diff 
diff returns mapping returned model input model identify non support objects 
delete deletes objects model reachable paths relationships models 
semantics model management operators defined section purely syntactic 
treat models mappings graph structures schemas templates instances 
syntactic orientation enables model mapping manipulation operators relatively generic 
applications useful models mappings ultimately regarded templates instances 
semantics 
semantic gap model management applications needs filled 
gap partially filled making model described sections expressive extending behavior operators exploit extra expressiveness 
knowing association relationships meta meta model extended include data types keys way introduce semantics expression property mapping object recall expression variables objects referenced models related 
exploit expressions model management operators generate mappings extended produce expressions mapping objects generate 
example compose combines objects input mappings output mapping object generate expression expressions input mapping objects 
similarly diff merge 
expression language meta model specific relational data model conjunctive queries 
extensions model management operators deal expressions meta performed meta expression manipulation engine 
example expression language extension compose call engine generate expression output mapping object creates 
example walkthroughs extensions sql queries 
general purpose interface model management operators expression manipulation engines worked 
approach adding semantics mappings develop design tool purpose clio 
application scenarios section discuss common meta data management problems involve manipulation models mappings schema integration schema evolution round trip engineering 
describe problem terms models mappings show model management operators solve 
schema integration problem create schema represents information expressed database schemas mappings see 
schema integration literature offers algorithms doing :10.1.1.16.700
consist main activities identifying overlapping information identified overlaps guide merge resolving conflict situations information represented differently merge 
main differentiator algorithms conflict resolution approaches 
map schema integration problem schema regarded model express activities model management operators follows 
map match 
step identifies equal similar objects 
match creating mapping independently developed schemas best done complex match operator elementary match 

map map merge map 
mapping created previous step merge produces integrated schema desired mappings 
example result match emp employee 
notice similar emp additional object address employee additional object phone mapped objects model 
emp emp name address map result matching emp employee shows result merging emp employee respect 
mappings emp emp emp employee omitted avoid cluttering 
says emp objects equal collapsed single object emp 
objects different names merge chose name left object emp details nail complete specification merge semantics 
address phone referenced simply copied output 
says name employee firstname lastname phone similar firstname lastname objects partially integrated object labeled placeholder expression relates name firstname lastname 
emp emp address phone name firstname lastname result merging emp employee sub structure rooted represents conflict input schemas 
schema integration algorithm needs rules cope conflicts 
case consult knowledge base explains name concatenated name name 
knowledge replace sub structure rooted firstname lastname subsume name nested structure name subobjects firstname lastname 
probably preferable data model allows nested structures xml schema 
probably necessary nested structures supported sql 
resolution strategy depends capabilities knowledge base expressiveness output data model 
activity captured generic model management operators 
expressed application specific function 
application specific conflict resolution functions apply operator help executing conflict resolution rule objects output merge 
rule tests object marked applies action object substructure knowledge base lookup plus meta merge 
avoids need applicationspecific code include logic navigate model 
finish job mappings map map returned merge translated view definitions 
models mappings longer regarded syntactic structures 
need semantics 
creating view definitions requires semantic reasoning manipulation expressions explain semantics mappings 
section explained broad outline said details scope 
schema evolution schema evolution problem arises change database schema breaks views defined 
stated precisely base schema set view schemas mapping map maps objects objects 
see 
example relational schemas expect object map contain relational view definition tells derive view relation relations morphisms refer objects mentioned view definition 
new version problem define new version consistent mapping map 
schema evolution problem solve problem model management operators follows 
map match 
returns mapping identifies unchanged relative 
know incremental modification done elementary match 
complex match required 

map map map 
right composition 
intuitively mapping object map describes part map unaffected change 
mapping object map survives composition object map object connected connected object map 
transformed map replacing object corresponding objects 
map map map map map map result schema evolution solution objects may orphans sense incident map 
orphan arises maps map object corresponding object map 
way deal orphans eliminate 
doing corrupt map copy delete orphans copy 
map map 
copy copy map map 

map diff map 
identify orphans 

enumerate map delete domain 
enumerates orphans deletes 
notice treating map model 
map point successfully completed task 
alternative steps selective deleting view objects knowledge syntax semantics mapping expressions 
example suppose schemas views relational data model missing attribute populate attribute view 
previous approach view defined object map entire view orphan deleted 
drop attribute view dropping entire view relation contains 
get effect replace step right outer composition objects map copied map connect objects counterpart 
write function encapsulates semantic knowledge necessary strip parts view definition replace steps apply map 
gives way exploiting non generic model semantics working framework model management algebra 
round trip engineering consider design tool generates compiled version high level specification er modeling tool generates sql ddl uml modeling tool generates interfaces 
developer modifies generated version specification sql ddl modified generated version longer consistent specification 
repairing specification called round trip engineering tool forward engineers specification generated version modified generated version reverse engineered back specification 
stating scenario precisely specification generated model derived mapping map modified version 
problem produce revised specification consistent mapping map 
see 
notice diagrammatically isomorphic schema evolution problem exactly replacing replacing 
map map original spec generated schema modified generated schema modified spec round trip engineering problem schema evolution start matching composing resulting mapping map doing deep copy mapping produced compose 
map match 
returns mapping identifies unchanged relative 
incremental modification elementary match suffice 
see 

map map map 
mapping map includes copy object map incident objects 

map map 
copy copy map map 
steps eliminate specification objects correspond generated objects 
retain objects replacing composition step outer composition 
remaining steps section proceed modification 
need reverse engineer new objects introduced merge 
way see 
map diff map 
produces model includes objects participate mapping map exactly new objects plus support objects needed keep formed 
mapping map maps object corresponding object 
map map map map map map map map step map map map step result round trip engineering solution example suppose sql schemas introduced new column table model management representation schema object child object new connected map result diff 
keep connected child result diff support object connected map 

map 
case customized reverse engineer object object desired form integration 
example sql schema si er models maps sql map map map map map deep copy objects map new objects reverse eng spec merge modi fied spec map column er attribute table entity type relationship type depending key structure table need merge single model half desired result 
half map coming soon 
need create mapping connects objects represent thing 
continuing example step introduces new column table desired mapping connect reverse engineered object entity type original object entity type generate place 
contrast reverse engineered object map object new object introduced 
create desired mapping match followed compositions merge follows see 
map match 
matches object corresponding copy 
map map connects objects including support objects 

map map map 
right composition creates mapping map objects corresponding objects 
map incident objects object map generates map object connects 

map map map 
mapping objects map map connect object mapping objects compose corresponding objects related map 
inner compose returns objects connect 

map map merge map 
merges reverse engineered objects came new objects introduced producing desired model cf 

need produce desired mapping map 
union merge map map map map 
see want recall contains objects map map 
mapping map connects objects map original objects copies 
object connects mapping object map map 
start need compute compositions 
map map map 
map map map need union map map 
catch object connected objects map map 
continuing example table object mapped reverse engineered 
objects mappings union compositions probably desired 
getting rid duplicates bit effort 
way merge mappings 
need match map map steps find duplicates mappings models merge mappings match result 
steps shown 
map match map map 
objects map map match connect exactly objects 
matching condition needs regard morphisms map map parts map model morphisms available relationships map model 
simple match criterion elementary match suffices 

map merge map map map 
morphisms map map merged ordinary relationships 
map connects map map merge collapses single object 
object copy mapping connections 
map re done 
cf 

implementation envision implementation models mappings model management operators persistent objectoriented system 
technology trends system best choice xml database system suitable 
system consists layers models mappings layer supports model mapping abstractions implemented objectoriented structure disk heavily cached fast navigation 
representation models extensible system specialized expressive meta meta models 
semistructured models imported expressive representations loss information 
layer supports models need usual object time operations objects models plus model submodel model rooted object model 
copy deep shallow supported 
mappings returns model morphisms 
return morphisms mapping 
morphisms accessible updatable normal relationships 
algebraic operators layer implements match merge diff compose apply enumerate 
extension mechanism handling semantics expression manipulation engine discussed section 
model driven generator user interface advanced drawing tool tag meta model objects descriptions objects behavior table definition blue rectangle column definition line table rectangle 
generic tools models mappings browser editor catalog import export scripting 
related model management approach new existing literature meta data management offers algorithms generalized model management examples studied challenges model management operators 
literature large cite highlight areas obvious synergy worth exploring 
mentioned earlier schema matching see survey schema integration example source algorithms match merge adding semantics mappings 
include data translation differencing eer style representations expressive power may help select best representation models mappings 
described model management new approach manipulating models schemas mappings bulk objects operators match merge diff compose apply copy enumerate 
showed apply operators classical meta data management problems schema integration schema evolution round trip engineering 
believe example solutions strongly suggest implementation model management provide major programming productivity gains wide variety meta data management problems 
course claim compelling implementation needed 
successful implementation prototype new category database system products 
addition implementation areas needed fully realize potential approach 
pressing ones choosing representation captures constructs models mappings interest tractable model management operators 
detailed semantics model management operators 
substantial match 
merge compose developed 
mathematical semantics model management 
beginnings category theoretic approach appears left 
analysis speak completeness set operators help define boundary useful model management computations 
mechanisms needed fill gap models mappings syntactic structures semantics treat models templates instances mappings transformations instances 
various theories conjunctive queries helpful 
trying apply model management especially challenging meta data management problems identify limits approach opportunities extend 
broad agenda take years research groups develop 
lot believe potential benefits approach agenda worth pursuing 
acknowledgments ideas benefited greatly ongoing collaborations alon halevy ren miller rachel pottinger rahm 
people discussions stimulated extend sharpen ideas especially claypool jayant madhavan sergey melnik peter mork john mylopoulos rosenthal elke rundensteiner sane val tannen 

bernstein model theory generic schema management proc 
dbpl springer verlag lncs 

atzeni paolo riccardo torlone management multiple models extensible database design tool 
edbt 
banerjee jay won kim kim henry korth semantics implementation schema evolution object oriented databases 
sigmod conference 
beeri milo schemas integration translation structured semi structured data 
icdt 

bernstein generic model management database infrastructure schema manipulation 
springer verlag lncs coopis 

bernstein philip alon halevy rachel pottinger 
vision management complex models 
sigmod record 

bernstein philip rahm data warehouse scenarios model management 
er 

biskup 
formal view integration method 
sigmod 

buneman davidson 
theoretical aspects schema merging 
edbt 

cattell barry eastman jordan russell velez editors object database standard odmg 
morgan kaufmann publishers 

chawathe sudarshan hector garcia molina meaningful change detection structured data 
sigmod 

claypool jin rundensteiner schema evolution extensible re usable flexible framework 
cikm 

claypool rundensteiner zhang su kuno lee mitchell solution support multiple data models mappings maintenance 
sigmod 
hull richard roger king semantic database modeling survey applications research issues 
acm computing surveys 
larson james navathe elmasri 
theory attribute equivalence databases application schema integration 
trans 
soft 
eng 
april 

madhavan bernstein domingos halevy representing reasoning mappings domain models 
th national conference artificial intelligence aaai 

miller haas hern ndez schema mapping query discovery 
vldb 

miller ioannidis raghu ramakrishnan schema equivalence heterogeneous systems bridging theory practice 
information systems 
myers nd difference algorithm variations 
algorithmica 

mylopoulos john alexander borgida matthias jarke manolis koubarakis telos representing knowledge information systems 
tois 

popa val tannen equational chase path conjunctive queries constraints views 
icdt 

pottinger rachel philip bernstein 
creating mediated schema initial correspondences 
ieee data engineering bulletin sept 

rahm philip bernstein 
survey approaches automatic schema matching 
vldb 

shu nan barron taylor ghosh vincent lum express data extraction processing amd restructuring system 
tods 

spaccapietra stefano christine parent 
view integration step forward solving structural conflicts 
tkde april 


wang shasha 
chang zhang patel structural matching discovery document databases 
sigmod 
yan ling ling ren miller laura haas ronald fagin data driven understanding refinement schema mappings 
sigmod 
