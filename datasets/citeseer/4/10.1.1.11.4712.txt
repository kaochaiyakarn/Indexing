engineering jade agents gaia methodology mora tis dept computer science university cyprus box cy nicosia cyprus ac cy singular software th october thessaloniki greece si gr agent oriented software engineering aose fields agent domain continuous growing interest 
reason possibility easily specify implement agent systems great importance recognition add value agent technology application fields 
attempt direction proposing kind roadmap combine gaia methodology agentoriented analysis design jade fipa compliant agent development framework analysis design implementation multi agent systems 
objective realized presentation analysis design implementation phases limited version system currently develop context ist image project 

years growth interest potential agent technology context software engineering 
led proposal development environments build agent systems see example zeus retsina software frameworks develop agent applications compliance fipa specifications see example fipa os jade 
development environments software frameworks demanded system analysis design methodologies languages procedures support 
consequence proposed methodology zeus parallel proposed promising agent oriented software development methodologies gaia auml tropos mase :10.1.1.10.2242
aspect oriented programming methodology design implementation agent role models 
despite possibilities provided methodologies believe progress agent technologies realize full potential concerning full covering software life cycle proposal standards support agent interoperability 
attempt gaia order engineer multi agent system mas implemented jade framework 
mora tis share experience conceive develop mas combining gaia jade context ist image project people interested development real life agent systems 
gaia methodology applied high level design 
way go gaia model system design model 
system implementation done object oriented techniques 
aim describe kind roadmap implementing gaia model jade framework 
provide additional modeling techniques slight modifications gaia original specification obviously altering philosophy concepts 
organized way 
sections briefly gaia methodology jade framework 
section provide sample gaia model 
section provide methodology converting gaia model jade implementation 
propose models useful detailed design phase 
discuss aose 

gaia overview gaia methodology attempt define complete general methodology specifically tailored analysis design mass gaia general methodology supports levels individual agent structure agent society mas development process 
mass gaia viewed composed number autonomous interactive agents live organized society agent plays specific roles 
gaia defines structure mas terms role model 
model identifies roles agents play mas interaction protocols different roles 
objective gaia analysis process identification roles modeling interactions roles 
roles consist attributes responsibilities permissions activities protocols 
responsibilities key attribute related role determine functionality 
responsibilities types liveness properties role add system safety properties role prevent disallow bad happens system 
liveness describes tasks agent fulfill certain environmental conditions safety ensures acceptable state affairs maintained execution cycle 
order realize responsibilities role set permissions 
permissions represent role allowed particular information resources allowed access 
activities tasks agent performs interacting agents 
protocols specific patterns interaction seller role support different auction protocols 
gaia formal operators templates representing roles attributes schemas representation interactions various roles system 
operators liveness expressions formulas interpretations table 
note liveness formulas activities written underlined 
table 
gaia operators liveness formulas engineering jade agents gaia methodology operator interpretation followed occurs occurs times occurs times occurs infinitely optional interleaved gaia design process step map roles agent types create right number agent instances type 
agent type aggregation agent roles 
second step determine services model needed fulfill role agents 
service viewed function agent derived list protocols activities responsibilities liveness properties role 
step create acquaintance model representation communication different agents 
acquaintance model define actual messages exchanged agents simple graph represents communication pathways different agent types 

jade overview jade software development framework fully implemented java language aiming development multi agent systems applications comply fipa standards intelligent agents 
jade provides standard agent technologies offers developer number features order simplify development process distributed agent platform 
agent platform distributed hosts executes java virtual machine 
fipa compliant agent platform includes agent management system directory facilitator agent communication channel 
efficient transport acl messages agents 
agent communication performed message passing fipa acl language represent messages 
agent equipped incoming message box message polling blocking non blocking optional timeout 
jade provides methods message filtering 
developer apply advanced filters various fields incoming message sender performative ontology 
fipa specifies set standard interaction protocols fipa request standard templates build agent conversations 
mora tis conversation agents jade distinguishes role agent starts conversation initiator role agent engages conversation started agent responder 
structure protocols initiator sends message responder subsequently reply sending refuse message indicating inability achieve rational effect communicative act agree message indicating agreement perform communicative act 
responder performs action send inform message 
failure message indicates action successful 
jade provides ready behaviour classes roles fipa specified interaction protocols 
fipa interaction protocols share structure jade provides responder classes single homogeneous implementation interaction protocols mentioned 
classes provide methods handling possible protocol states 
jade agent tasks agent intentions implemented behaviours 
behaviours logical execution threads composed various ways achieve complex execution patterns initialized suspended spawned time 
agent core keeps task list contains active behaviours 
jade uses thread agent thread behaviour limit number threads running agent platform 
scheduler hidden developer carries round robin policy behaviours available queue 
behaviour release execution control blocking mechanisms permanently remove queue run time 
behaviour performs designated operation executing core method action 
behaviour root class behaviour hierarchy defines core methods sets basis behaviour scheduling allows state transitions starting blocking restarting 
children base class 
classes descend represent atomic simple tasks executed number times specified developer 
classes descending support handling multiple behaviours policy 
actual agent tasks executed behaviour defined behaviour inside children behaviours 
class executes children behaviours finite state machine fsm behaviours belongs branch hierarchy 
child represents activity performed state fsm transitions states defined developer 
state behaviour possible embed state machines 
class responsibility maintaining transitions states selects state execution 
children registered final states 
terminates completion children 

gaia model order better understand proposal gaia jade combined conceive implement multi agent system mas limited version system currently implemented framework ist image project 
show system analyzed designed implemented 
system defined requirements engineering jade agents gaia methodology user request route place 
select variety routes produced geographical information system gis 
mas maintains user profile filter routes produced gis send user suit 
profiling criteria regarding preferred transport type private car public transport bicycle foot preferred transport characteristics shortest route fastest route cheapest route 
system keeps track selected user routes aiming receive traffic events closed roads check affect user route case inform user 
adapt service user habits needs 
sections mas analyzed designed implemented 

analysis phase analysis phase led identification roles role called handles traffic events role called wraps gis role called serves user social type role called taken agents 
gaia roles model system table 
table 
gaia roles model role description acts monitor 
new traffic event detected forwards personal assistants 
protocols activities 
permissions read line traffic database read acquaintances data structure 
responsibilities liveness 
safety successful connection line traffic database established 
role description wraps geographical information system gis 
query gis routes point 
protocols activities 
permissions read gis 
responsibilities liveness 


safety successful connection gis established 
mora tis role description acts behalf profiled user 
user wants go gets available routes determines routes best match user profile 
routes user 
adapt learning capabilities user habits learning user selections 
receives information traffic events checks events affect user route case informs user 
protocols activities 
permissions create read update user profile data structure read acquaintances data structure 
responsibilities liveness 







safety true role description requests agents perform specific services df 
gets acquainted specific agents 
protocols activities 
permissions create read update acquaintances data structure 
responsibilities liveness 



safety true noted role involved mas operation 
directory facilitator df fipa role supported jade 
role concerns operational level mas application gaia representation supplied role 
interactions protocols defined gaia methodology activities 
activities denoting registration df querying agents specific types registered specific services activities df services provided directly jade framework provided result interaction agents method invocations 
gaia interaction model denotes action returns request roles initiate request corresponding responders 
table holds necessary information model 
table 
gaia interactions model engineering jade agents gaia methodology protocol initiator receiver responding action purpose parameters 
design phase introduce agent agents 
possible content services name associated initiator agent 
inform assistant new traffic event occurred 
assistant agent requests set routes place 
response includes different routes different characteristics shortest fastest cheapest different transportation private car public transport foot 
phase agent model achieved services acquaintance models 
personal assistant legend fig 

gaia agent model agent types roles events handler travel guide zero agent type instances mora tis agent model creates agent types aggregating roles 
emerging agent type represented role combines aggregated roles attributes activities protocols responsibilities permissions 
agents model system include agent types personal assistant agent type fulfills roles events handler agent type fulfills roles travel guide agent type fulfills role 
travel guide agent personal assistants users system zero events handlers 
agent model graphically 
services model system table 
table 
gaia services model service obtain route get notified relevant user route traffic event inputs origin destination outputs set routes description event pre condition personalized assistant agent instantiated associated user post condition user selects route personalized assistant agent instantiated associated user 
user selected route 
traffic event relevant user route happened define acquaintances model 
model propose slight modification compared original definition gaia 
table 
gaia acquaintances model personal assistant travel guide events handler personal assistant travel guide events handler legend interacts read occurrences rows personal assistant agent type interacts travel guide events handler agent types 
acquainted agent type acquaintances data structure read occurrences rows personal assistant agent type knows travel guide agent types 
engineering jade agents gaia methodology believe modification takes better account idea agent interact agent just responding request having necessarily knowledge information 
analyst needs specify agent interacts agent acquainted knows 
personal assistants acquainted interact travel guides just interact events handlers 
events handlers acquainted interact personal assistants travel guides aware agents interact service requests personal assistants 
scheme illustrated table 
point design system complete limit gaia reached 
effort done order obtain design 
design process system ready implementation 

developing jade agents gaia model moving gaia model implementation jade framework assumptions definitions 
consider liveness part role behaviour usually having name role correspondence jade terminology 
simple complex behaviour represents role 
behaviour considered top level behaviour role 
behaviour may contain behaviours jade behaviours model 
contained behaviours called lower level behaviours 
role system instance top behaviour 
behaviour lower level behaviours 
operators gaia liveness formulas meaning 
means lower level behaviour added behavior contains gaia liveness formula removed agent scheduler behavior added removed 
behaviours connected symbol denotes execute concurrently 
concurrency jade agent behaviours simulated 
noted thread executes agent behaviour actions scheduled round robin policy 

detailed design important design issues covered trying implement gaia model jade framework 
acl messages ontologies protocols content data structures algorithms software components 
acl messages defined respect fipa acl message structure specification jade acl message class fields 
acl messages 
obvious failure refuse acl messages defined global cases action failed supported denied 
mora tis acl message acl message sender personal assistant agent sender travel guide agent receiver travel guide agent receiver personal assistant agent fipa performative request fipa performative inform protocol protocol language sl language sl ontology ontology content ontology action content ontology concept routes fig 

acl messages definition designer mas easily implement agents internal structures methods pre defined 
data structures ai tools defined stage 
system structures methods clarified point acquaintances structure contain information agents 
information include names types services addresses see jade address name quite 
role maintains structure see permissions field role definition table 
user profile structure information known user organized 
questions answered point 
role maintains structure see permissions field role definition table 
route structure route attributes associated route 
structure needed roles instantiates objects information gets gis activity filters route structure objects user profile activity 
traffic event structure traffic event attributes associated associated route 
roles structure 
instantiates objects information gets external sources activity checks traffic event structure object user active route activity 
learning method learned user going stored machine learning algorithm different goals indicate different algorithms 
learning method activity role 
components technologies enable communication external systems 
systems line traffic database gis 
gis services available web services suitable soap simple object access engineering jade agents gaia methodology protocol client developed xml parser translate soap message content ontology concept java object 

jade implementation point mas designer full plan implement system 
case framework jade purpose paragraph precisely explain gaia model translated jade implementation 
procedure quite straightforward 
gaia liveness formulas translated jade behaviours 
activities protocols translated jade behaviours action methods part finite state machine fsm behaviours simple methods behaviours 
jade behaviours useful model 
behaviours start execution message arrives receive message action method simple behaviours spawning additional behaviour purpose continuous polling message box complex behaviours 
behaviours start message graphical user interface gui gui event receiver method implemented agent starts corresponding behaviour 
behaviours start querying data source calculation explicitly added upper level behaviour 
example role adds behaviours 
difference set finished executing continue executing forever agent killed 
safety properties gaia roles model taken account designing jade behaviours 
behaviours role order execute properly require safety conditions true 
behaviour responsible monitoring safety condition role 
safety condition false functionality behaviours depend safety condition suspended monitoring behaviour initializes procedure reestablish validity safety conditions 
procedure instance addition agent scheduler specific behaviour address task restoring validity safety conditions 
general procedure depends nature implemented system safety conditions 
safety conditions restored suspended functionalities reactivated 
case safety requirement role establishment communication gis 
behaviour responsible monitoring validity safety requirement 
connection fails established behaviour sends agent gui event results connection failure message responding personal assistant agent failure acl message 
system administrator act order restore gis communication 
behaviours lowest level implemented queries database gets new event prepares acl message sends personal assistant agents 
mora tis waits receives specific acl message queries gis sends back original sender responding acl message 
waits receives specific acl message verifies interest specific user sends appropriate event gui 
complex behaviour states 
state gets user request added agent scheduler consequence request sends acl message travel guide agent 
waits response 
alternatively getting user request add behaviour 
gets response second state infers routes forwarded user forwards terminates execution 
user selects route gui gui event catcher method agent starts behaviour sets immediately third state employs learning algorithm order gain knowledge user action 
registers agent df gets needed agents df sends appropriate acl messages agents agent wants notify appearance 
execution tasks behaviour removes 
waits receives specific acl message updates acquaintance data structure new contact services new contact provides 
architecture paradigm contains functionality top level behaviour agents tasks embedded lower level behaviors 
top level behaviours represent actions performed setup phase agent initialize acquaintances data structure add behaviours 
register df add behaviour 
initialize acquaintances data structure get initial user profile add behaviours 
summarizing steps followed order easily translate gaia model jade implementation 
define acl messages gaia protocols interactions models 

design needed data structures software modules going agents gaia roles agents models 

decide implementation safety conditions role 

define jade behaviours 
start implementing lowest levels various behaviour class antecedents provided jade 
gaia model useful phase roles model 
behaviours activated receipt specific message type add receiver behaviour receive message appropriate message filtering template start action 
gaia activities execute sequence actions require interaction agents interleaving protocols aggregated activity behaviour method action 
reusability clarity programming tasks allocation reasons believe developer engineering jade agents gaia methodology opt implement separate methods actions fsm behaviour 

keep mind gaia roles translated jade behaviours reusable pieces code 
system code behaviours personal assistant events handler agents 

setup method agent class invoke methods gaia activities executed top behaviour 
initialize agent data structures 
add behaviours lower level agent scheduler 

discussion analysis design implementation phases limited version system developed context ist image project 
said share experience combine gaia methodology jade development environment order implement real multi agent system 
gaia methodology easy agent orient software development methodology presently covers phases analysis design 
hand jade fipa specifications compliant agent development environment gives facilities easy fast implementation 
aim reveal mapping may exists basic concepts proposed gaia agents specification agents interactions provided jade agents implementation propose kind roadmap agents developers 
presently introduced slight modification gaia acquaintances model main image project examine proposed modifications gaia jade help efficient combination 
gratefully acknowledge information society technologies ist programme specifically research technological development rtd intelligent mobility agent complex geographic environments image ist project contributing funding 

agent uml www auml org 
caire trucco jade programmer guide 
jade sharon cselt projects jade 
ndumu zeus technical manual 
intelligent systems research group bt labs 
british telecommunications 
mora tis 
ndumu zeus methodology documentation part role modelling guide 
intelligent systems research group bt labs 
british telecommunications 
wood developing multiagent systems 
castelfranchi lesperance 
eds intelligent agents vii 
agent theories architectures languages th international workshop atal boston ma usa july 
lecture notes computer science 
vol 
springer verlag berlin 
fipa specification xc fipa acl message structure specification www fipa org 
fipa os component toolkit enabling rapid development fipa compliant agents fipa os sourceforge net 
giunchiglia mylopoulos tropos software development methodology processes models diagrams aamas 
kendall role model designs implementations aspect oriented programming 
proceedings conference object oriented programming systems languages applications oopsla 
systems integrated toolkit constructing intelligent software agents 
revision 
www com 
sycara paolucci van retsina mas infrastructure 
accepted journal autonomous agents multi agent systems 
wood overview multiagent systems engineering methodology 
aose international workshop agent oriented software engineering 
limerick ireland 
wooldridge jennings kinny gaia methodology agent oriented analysis design 
journal autonomous agents multi agent systems vol 


