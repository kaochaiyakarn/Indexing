appear kr www 
cs utexas edu users papers knowledge patterns peter clark john thompson knowledge systems boeing mathematics computing technology ms po box seattle wa peter clark john thompson boeing com bruce porter computer science dept university texas austin tx porter cs utexas edu building knowledge base frequently repeats similar versions general theories multiple specific theories 
example building botany knowledge base porter em theory production representations mitosis growth botanical processes 
typically general theory incorporated specific ones inheritance mechanism 
works poorly situations general theory applies specific theory way selected portion general theory applicable 
address problem knowledge engineering technique explicit representation knowledge patterns general templates denoting recurring theory schemata transformation symbol renaming importing specific theories 
technique provides considerable flexibility 
knowledge pattern may transformed multiple ways resulting theory imported part 
describe application built technique critique strengths weaknesses 
conclude technique enables better modularize reuse general theories 
limitations inheritance consider fragment hypothetical knowledge base computers expressed prolog basic facts instance class computers isa computer 
speed 
ram size 
hb disk space 
hb expansion slots 
available ram space total ram minus occupied ram available ram computer isa comput er computer ram size computer occupied ram computer aiss 
number free expansion slots total number slots minus number filled free slots computer isa computer computer expansion slots computer occupied slots computer 
clauses syntactically different instantiate general axiom explicate free space isa class capacity occupied space sisc variables start upper case letters universally quantified denotes reverse implication denotes conjunction denotes arithmetic computation 
isa denotes instance class part general container theory axiom relates container free space capacity occupied space 
clauses available ram free slots instantiations axiom just computer modeled container data expansion cards respectively 
general theory containers represented explicitly application domain computers implicit 
clearly prefer explicitly represent theory reuse axioms needed 
typically done inheritance 
knowledge engineer encodes explicit theory containers high level node taxonomy axioms automatically added specific theories nodes lower taxonomy 
axiom container theory free space container isa container container capacity container occupied space container 
inheritance import axiom computer theory assert computers containers ram size special case terminology frame systems capacity rela tion computers containers 
subclass computer container 
measure capacity capacity isa computer ram size 
problematic second notion computers containers original axioms computers containers expansion cards 
map notion computer theory way adding axiom number slots measure capacity isa computer expansion slots 
resulting representation captures com puter capacities memory capacity slot assume general inheritance axiom isa isa subclass 
capacity loses constraints rela tions 
consequently memory capacity may compute number free expansion slots slot capacity may compute available ram 
illustrates general container theory overlaid computer multiple ways inheritance fails keep overlays distinct 
problem avoided various ways 
insist general theory container applied specific theory obvious principled justification restriction 
revise represen tation computer computer memory contains data similarly computer expansion slots contain cards 
solves current problem general problem remains 
example may want model computer memory container senses transistors files information processes restriction prohibits 
pseudo solution parameterize container theory adding argument container axioms denote type thing contained distinguish different applications container theory 
changes italicized axioms free space content type capacity occupied free space container isa container container capacity container occupied space container 
yam size denotes computer ram capacity 
capacity ram isa computer ram size 
solves current problem expense parsimony general solution 
mul tiple parameters may needed distinguish different applications general theory specific 
example need add second parameter container dimension say distinguish physical containment computer contains megabytes data metaphysical containment computer contains valuable information 
complicates container axioms parameters may needed 
second limitation inheritance copies ax general theory specific fashion 
selected part theory transferred 
continue example general container theory may include relations container wall porosity plus axioms involving relations 
relations counterpart computer theory relations axioms transferred 
problems arise inheritance misused buggy 
say computer container mean computer aspect memory modeled container 
inheritance de signed transfer axioms isa relation modeled relation 
knowledge engineers relations probably inheritance approach available 
leads endless needless debates placement concepts taxonomies 
example container placed taxonomy respect object substance process 
thought container way pursue route drawn debating modeling decisions issues objective reality 
recurrent problem earlier botany knowledge base porter general theories models connector interface sit high tax 
issue arises 
example product placed just individual cyc cycorp place just mahesh nirenburg 
knowledge patterns approach handling situations conceptually simple architecturally significant enables better modularize knowledge base 
define pattern order theory axioms part target knowledge base incorporated renaming non logical sym 
theory acquires status pattern way having intrinsic property 
knowledge engineer implements pattern explicit self contained theory 
example container theory include axiom free space container isa container container capacity container occupied space container second terminology category theory pierce knowledge engineer defines mor intended application pattern target knowledge base 
morphism consistent mapping pattern non logical sym signature terms knowledge base specifying pattern transformed 
knowledge base loaded morphed copies pattern imported morphism 
example morphisms pattern container computer capacity ram size free space available ram occupied space occupied ram isa isa container computer capacity expansion slots free space free slots occupied space occupied slots isa isa reason mapping symbol line morphisms explained paragraph 
morphisms applied copies container pattern created corresponding ways described computers modeled containers 
may symbols pattern counterpart target knowledge base thickness container wall computer example 
event knowledge engineer omits symbols morphism morphing procedure maps new unique symbol generated lisp gensym function example 
restricts scope symbols morphed copy pattern target knowledge base 
symbols included im ported theory invisible precisely hidden axioms knowledge base 
note simply delete axioms mention symbols axioms im ported theory may depend 
selection examples inconsistent mappings map ping symbol twice ii mapping function signature specified mapping conflicts signature defined target kb source pattern target signature specific axioms may removed contribute assertions symbols imported 
dependency analysis algorithm principle identify remove dead code 
just predicates functions require corresponds burstall goguen derive operation burstall goguen build theories 
approach knowledge patterns similar theories morphisms formal specification software goguen srinivas williamson part goal motivate simplify apply context knowledge engineering 
authors shown category theory applied algebraic theories provides formal basis approach 
apply logic burstall goguen burstall goguen show order logic theory understood sorted theory comprising set sorts set op sorts set laws operators satisfy introducing truth values sort argument operators constants true false 
expressing predicates operators produce truth value result 
defining boolean connectives operations boolean boolean boolean 
replacing universally quantified variables sorts implicitly universally quantified 
drawing williamson define signatures specifications theories patterns morphisms terms sorted logic algebra follows 
consists 

set sort symbols 
triple operators set constant symbols set function symbols set predicate symbols specification corresponding notion theory pattern consists 

signature sis 
set axioms sis morphism context category consistent mapping signature sort symbols sort symbols operator symbols operator symbols 
specifications signature morphism sig specification morphism specifications iff va az axiom az translated follows 
case unsorted order logic pattern corresponds specification variables single sort morphism corresponds specifica tion morphism 
statement trivially holds approach deals special case theory definition translation 
patterns building knowledge base encountered limitations inheritance developed approach knowledge patterns building kb phase prototype knowledge system training perform space payload experiment called phase physics hard spheres experiment 
phase involves projecting laser beam various suspensions tiny spheres liquids study transitions solid liquid glass gas states micro gravity 
kb phase trains astronaut ways 
provides simple interactive simulator astronaut step normal procedure experiment 
second intro duces simulated faults train astronaut re cover problems 
supports exploratory learning astronaut browse concepts knowledge base ask questions interface 
tasks underlying knowledge base infer properties current experimental state valid actions answers user questions 
prototype built small demonstrator service provide input boeing nasa space station training program 
details kb phase clark question answering technology described clark 
interest underlying knowledgebase assembled component theories written scratch 
kb phase includes rep domain specific objects electrical circuits processes information flow derived general theories 
example think electrical circuit terms simple model distribution producers battery distribute product electricity consumers light 
capture reusable way formulated general model distribution independent self contained pattern shown upper half 
defined morphism creates model electrical circuits shown lower half 
general theory distribution built turn extending general theory synopsis name dog summary core theory directed acyclic graphs 
uses dog dag directed acyclic graph ns description component provides basic axiomatization dags fundamental structure modeling real world phenomena 
dag node directly linked zero nodes 
node reaches downstream nodes reachable upstream nodes 
signature node dag node reaches reachable isa 
axioms vx isa node isa node vx vx reaches vx reaches reaches vx reachable vx reachable reachable vx isa dag node isa node theory dag synopsis name dog summary extension dag theory nodes blocked preventing reachability 
uses dog distribution network blocked node description node may blocked unblocked 
node unblocked reaches downstream node path unblocked nodes connecting 
signature dog plus blocked unblocked unblocked directly reaches unblocked unblocked reaches unblocked reachable axioms dog theory axioms plus vx isa node blocked unblocked vx blocked vx blocked unblocked directly reaches vx unblocked directly reaches unblocked reaches vx unblocked directly reaches unblocked reaches unblocked reaches vx blocked directly reachable frm vx unblocked directly reachable unblocked reachable vx directly reachable rm unblocked reachable rom unblocked reachable rom component theories dag dag kb phase 
theory synopsis name distribution network summary simple theory producers intermediaries consumers 
uses dag electrical circuit distribution network description distribution network consists classes nodes producer consumer intermediary type item transported denoted transport material type water examples include electrical circuits hydraulic circuits traffic 
model flow transport material type producers consumers providing intermediary blocked 
consumer intermediary supplied unblocked path supplier 
elements network transport network transport material type 
signature dag plus producer consumer intermediary transport supplied product type consumes type 
axioms dag theory axioms plus vx isa producer isa node vx isa consumer isa node vx isa intermediary isa node vx isa consumer isa producer unblocked reaches supplied vx isa producer product type transport material type vx isa consumer consumes type transport material type synopsis theory electrical circuit name electrical circuit summary top level concepts reasoning electrical circuits 
uses distribution network morphism dag electrical circuit producer electrical power supply node electrical device consumer electrical appliance wired intermediary electrical connector wired blocked open supplied powered unblocked closed unblocked reachable rom circuit consumes type consumes type transport material type electricity product type product type isa isa description model electrical power supply provides electricity electrical appliances electrical connectors 
electrical connectors switch may open closed 
appliance powered open connection power supply 
signature morphed version distribution network mapping 
axioms morphed version distribution network axioms vx isa electrical supply product type electricity vx isa electrical appliance isa electrical power supply circuit component theories distribution networks electrical circuits kb phase 
defined morphism 
dag dag ground facts circuit diagram spatial component theories kb phase 
box denotes theory set rules describing phenomenon arcs denote inclusion relations thick arcs involving morphing source 
theory directed acyclic graphs turn built extending general theory dags 
application including theories implemented frame language km clark porter 
separating theories modular entities available reuse 
application modeled information flow optical circuit laser camera amplifier disk morphed pat tern describing processing network turn defined alternative extension basic dag theory reusing theory 
similarly general pattern state object occurs times kb phase switches lights open closed covers pattern explicit morphed knowledge base required 
patterns inter relationships shown 
related important areas pattern related differing type reusable knowledge encode way encode 
software engineering considerable formal methods software specification construction composition theories category theory applied algebraic specifications mathematical basis goguen srinivas 
specware example software development environment approach capable synthesizing software semi automatically 
described section viewed motivating simplifying applying similar ideas task knowledge engineering 
reusable problem solving methods psms particular kads wielinga generic tasks addresses modularity reuse context procedural knowledge 
psms observation task specific method decomposed primitive reusable sub methods working library primitives may accelerate building system understandable maintainable 
psms shares general goal identify explicit recurring generalizations differs respects 
psms patterns procedural inference targetting basic domain knowledge models procedures may operate 
logic procedural interpretation distinction comes blurred 
second mechanics usage differ implementations psms thought parameterized procedures applied ing role parameters domain concepts hypotheses role diagnosis psm applied medical diagnosis filled disease types contrast patterns closer schemata procedures applied morphing 
research compositional methods constructing knowledge bases falkenhainer forbus clark porter noy hafner explored factoring domain knowledge component theories analagous factoring procedural knowledge psms 
component theory describes relation ships set objects participants applied analagous way psms instantiating participants domain concepts 
knowledge patterns develop idea ways 
provide generalization capturing structure theories 
second method application differs morphing axioms linking participants domain concepts 
permits pattern applied multiple different ways object discussed section 
compositional modeling explored automated run time selection appropriate components falkenhainer forbus rickel porter important issue addressed 
design patterns object oriented programming gamma descriptions com mon useful organizations objects classes help create specific object oriented designs 
try capture recurring abstractions contrast approaches described earlier pri mary intent architectural guidance software designer computational devices directly 
result need semi formally spec ified require method auto matic application 
menzies gives excellent discussion relationship object oriented patterns problem solving methods 
area related programming languages template programming methods code template syntactic substitution sym ada generics templates corresponding syntactic implementation pattern morphing associated semantics 
analogical reasoning closely related similarly seeks theory base provide extra knowledge domain target establishing mapping tween 
analogy mainly focussed identifying appropriate mappings base target falkenhainer task addressed beneficial ex 
addition alternative way applying patterns transform domain specific problem vocabulary pattern solve transform solution back transforming pattern vocabulary domain 
phase kb example query electrical circuit transformed query distribution network isomorphic electrical circuit solved answer transformed back electrical circuit 
alternative approach similar form solution analogy pattern distribution network takes role base domain facts electrical circuit target falkenhainer 
similar delegation object oriented programming tar get delegates problem base solves passes solution back gamma 
variant approach patterns allow run time flexibility complex implement computationally expensive run time 
microtheories contexts buvac blair related microtheory context thought pat tern lifting axioms provide mapping predicates microtheory target kb incorporate 
typically solve different problem break ing large kb set smaller simpler maintainable pieces making recur ring axiom patterns explicit account mapping microtheory multiple times different ways target kb 
reasoning lifting axioms computationally expensive simplest cases 
discussion representational tasks inheritance provides straightforward way encoding relationships domain specific concepts additional machinery patterns necessary 
specifically case single obvious way specific concept instantiates general general properties concepts general theory transfer domain specific ones 
psychological category structures provides support claim smith medin computationally simple understand 
argued section inheritance inappropriate general theory applied multiple ways wish restrict properties transfer domainspecific concepts 
pattern approach addresses issue multiple theory applications morphisms application selectively transfer information hiding rela tions correlates target kb section 
addition relatively intuitive ecient easy 
approach limits 
allow system run time modeling decisions general theories morphed knowledge base loaded 
second address issue finding relevant knowledge patterns place deciding appropriate boundaries pat terns left knowledge engineer 
address issue finding appropriate mappings patterns domain left knowledge engineer 
mentioned earlier primary focus research related field analogical reasoning falkenhainer 
note patterns essential prerequisite building knowledge system 
phase application example simply defined phase electrical circuit implemented axioms behavior electrical circuits answered circuit questions electrical vo 
completely reasonable approach single task system achieve reuse multifunctional system systems preferable extract general abstractions described 
patterns enable better reason ing help reuse 
summary highlighted need difficulty capturing applying general theo ries modular units kb 
described approach doing capturing theories patterns incorporating morphing described application system assembled way 
significance approach allows better modularize knowledge base isolate gen eral theories self contained units reuse 
allows control vary way theories mapped application domain better separates computational general theory domain phenomena considered reflect 
addition approach technically simple particular implementation language 
long term hope help foster construction reusable theory libraries essential requirement construction large scale knowledge systems 
tim menzies valuable comments particular relationship knowledge patterns problem solving methods design patterns 
mike healy rob jasper mike uschold keith williamson categorical assistance 
blair blair guha pratt 

microtheories ontological engineer guide 
tech rept cyc mcc austin tx 
burstall goguen burstall goguen 

putting theories specifications 
ijcai pages 
buvac buvac editor 
proc aaai fall symposium formalizing context 
aaai 
www formal st edu context symposium 


generic tasks knowledge reasoning highlevel building blocks expert system design 
ieee expert pages 
clark porter clark porter 

building concept representations reusable components 
aaai pages ca 
aaai 
www cs utexas edu users 
clark porter clark porter 

km knowledge machine users man ual 
technical report ai lab univ texas austin 
www cs utexas edu users km html 
clark etal clark thompson 

kb phase training tool space station experiment 
technical report boeing applied research technology seattle wa 
www cs utexas edu users papers 
clark etal clark thompson porter 

knowledge ap proach question answering 
fikes chaudhri editors proc 
aaai fall symposium question answering systems 
aaai 
www cs utexas edu users papers 
cycorp cycorp 

cyc public ontology 
www cyc com public html 
falkenhainer forbus falkenhainer forbus 

compositional modelling find ing right model job 
artificial intelligence 
falkenhainer falkenhainer forbus 

structure mapping engine 
aaai pages 
gamma gamma helm johnson 

design patterns 
addison wesley 
goguen goguen 

reusing interconnecting software components 
computer pages 
srinivas goldberg green mc donald waldinger 

specware language manual 
technical report kestrel 
www kestrel edu 
mahesh nirenburg mahesh nirenburg 

situated ontology prac tical nlp 
proc 
ijcai workshop basic ontological issues knowledge sharing 
crl 
nmsu edu research projects 
menzies menzies 

object oriented patterns lessons expert systems 
soft ware practice experience 
www csee edu timm 
noy hafner noy hafner 

representing scientific experiments cations ontology design knowledge sharing 
aaai pages 
pierce pierce 

basic category ory computer scientists 
mit press 
porter porter lester murray pittman acker jones 

ai research context multi functional knowledge base botany knowledge base project 
tech report ai dept cs univ texas austin 
rickel porter rickel porter 

automated modeling complex sys tems answer prediction questions 
artificial intelligence 
smith medin smith medin 

categories concepts 
harvard univ cambridge ma 
srinivas srinivas 

specware formal support com posing software 
proc 
conf 
mathematics program construction germany 
kestrel tech rept kes www kestrel edu html html wielinga wielinga schreiber breuker 

kads mod approach knowledge engineering 
knowl edge 
williamson williamson healy barker 

reuse knowledge appropriate level abstraction 
proc 
sixth int 
conf 
software reuse 
