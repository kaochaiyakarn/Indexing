minimizing congestion general networks harald heinz institute department mathematics computer science paderborn university germany harry de principle task parallel distributed systems reduce communication load interconnection network usually major bottleneck performance distributed applications 
introduce framework solving line problems aim minimize congestion maximum load network link general topology networks 
apply framework problem line routing virtual circuits dynamic data management problem 
scenarios achieve competitive ratio log respect congestion network links 
line algorithm routing problem remarkable property oblivious path chosen virtual circuit independent current network load 
oblivious routing strategies easily implemented distributed environments intensively studied certain network topologies meshes tori networks 
oblivious path selection algorithm achieves polylogarithmic competitive ratio general networks 

large parallel distributed systems networks workstations internet bandwidth interconnection network usually major bottleneck performance distributed applications 
due fact expensive difficult increase bandwidth interconnection network increase processor speed memory capacities individual nodes 
partially supported dfg massive algorithmen anwendungen ist programme eu contract number ist alcom ft principle task systems design distributed applications way cause little communication overhead possible 
may sufficient simply reduce total communication load total traffic network result bottlenecks 
addition load distributed evenly network resources 
corresponds minimizing congestion maximum taken network links amount data transmitted link divided respective bandwidth 
introduce general framework minimizing congestion produced applications distributed environments 
framework applied online problems aim minimize congestion 
successful yields solution online problem arbitrary networks fully distributed decisions local knowledge network load 
framework representing network links topology network tree 
tree topology simple online problems solved efficiently trees 
combining tree solution online problem tree representation network framework yields solution minimizes congestion network links 
framework evaluated applying fundamental problems distributed computing 
known online routing problem see 
problem routing requests consisting source destination point arrive online 
request routing algorithm specify path source destination network 
goal minimize congestion network links 
second problem data management problem introduced 
nodes network issue read write requests shared data objects 
data management algorithm problem decide place copies shared objects network access copies link congestion minimized 

definition model model network weighted graph jv nodes jej edges 
nodes represent processors edges represent links function represents bandwidth links 
sequence requests read write requests shared objects issued nodes network served online algorithm 
order obtain simple unambiguous model assume requests issued issued fully processed online algorithm 
note algorithms develop sequential model handle parallel overlapping requests 
performance online algorithm evaluated comparing optimal offline algorithm opt full knowledge input sequence advance process optimally 
input sequence opt denote congestion produced opt respectively processing algorithm called competitive exists constant independent 
opt sequence algorithm said strictly competitive 
general assume online algorithm may randomization 
case fulfill bound high probability 
framework competitive analysis input sequence viewed chosen adversary order reflect bound hold input sequences 
case randomized algorithms specify exact power adversary 
assume adversary oblivious request sequence allowed depend random choices online algorithm 
algorithm input sequence define absolute load link amount data transferred connection processed algorithm 
define relative load connection load divided bandwidth 
define congestion maximum relative loads links network 
cost metrics online routing data management problem defined follows 
online routing 
online routing problem request sequence consists routing requests pairs nodes 
request path connecting corresponding nodes network specified 
increases load edge path 
data management 
data management problem request sequence consists read write requests shared data objects 
data management strategy allowed congestion 
high probability means congestion probability migrate create invalidate copies execution time 
assume message including messages migrating copies messages locating copies network messages invalidating copies increases load edge respective path 
note uniform definition load associated messages chosen keeping description strategies simple possible 
results easily extended non uniform definitions 

previous new results centralized logn competitive online routing algorithm aspnes 
algorithm exponential cost function 
edge assigned length exponential current load routing request occurs algorithm chooses shortest path source destination respect length assigned edges 
competitive ratio algorithm optimal due lower bound provided 
drawback algorithm centralized current network load known order routing decision 
awerbuch azar improve result developing algorithm centralized exist agents routing decisions network 
scenario difficult distributed implementation realize date knowledge state network agents 
show surprising result knowledge current load network needed order achieve polylogarithmic competitive ratio congestion 
oblivious online routing algorithm routing algorithm path selected th request depend routing decisions requests path may depend source request destination random input 
note randomization essential design oblivious routing algorithm low competitive ratio exist large lower bounds deterministic routing protocols see 
oblivious routing strategies easily implemented distributed environments oblivious strategies designed special network topologies see 
authors provide lower bound oblivious routing hypercube 
knowledge analytical treatment oblivious routing strategies general networks 
online data management problem goal minimizing congestion network links investigated 
authors competitive online algorithm trees 
furthermore show achieve logn competitive algorithm meshes bi simulation mesh tree network 
claimed approach extended networks providing suitable hierarchical decomposition target network 
define exact properties hierarchical decomposition fulfill prove hierarchical decomposition exists network 
gives log competitive data management strategy general graphs 

outline framework sketch general concept solving online problems congestion model arbitrary networks 
framework bi simulation target network associated tree network called decomposition tree suitably constructed networks weighted describing bandwidth edges respectively 
simulation step shown tree simulate network request sequence online problem produces congestion processed processed congestion 
simulation mapping nodes nodes processor simulated counterpart note simulation step completely independent online problem solved 
second simulation step show certain online problems network simulate tree way congestion small factor larger congestion tree 
concretely request sequence processed tree congestion processed congestion 
constant independent simulation node may simulate nodes usually jv jv denote randomized mapping second simulation step additionally simulation step describe routing host nodes simulate adjacent tree nodes performed 
note easy simulation tree 
exact description routing definitions section 
purpose section important holds simulation results help solving congestion online problems general networks 
condition framework online problem solved efficiently trees 
suppose competitive algorithm tree value 
get online strategy follows 
suppose sequence requests online problem 
opt opt denote optimal congestion processed respectively 
processing assume request originally issued node issued 
furthermore onl denote congestion produced online tree strategy processing simulation step competitiveness yield opt opt 
onl constant depend simulate online tree strategy network get online strategy onl denote congestion strategy request sequence note bisimulation reorder nodes particular change request sequence 
simulation step requests node mapped second simulation request mapped 
onl denote congestion strategy request sequence denote factor congestion second simulation step 
get onl 

opt online strategy 
competitive 
crucial part proof choose way second simulation step performed small factor remainder organized follows 
section describe general method choosing define certain parameters mainly influence quality simulations 
section show decomposition tree parameters simulations performed small factor show section network tree parameters relevant simulations values 

decomposition tree section describe general method choosing decomposition tree network way simulations properly 
decomposition tree corresponds decomposition node set system subsets need notations characterize certain properties set system 
subsets called intersecting ny nx empty 
set system called laminar contains intersecting pair 
furthermore laminar set system subsets complete contains set sets fvg complete laminar system containing subsets construct decomposition tree follows 
set contains node level level level level 
set system graph associated decomposition tree 
edge labels right indicate bandwidth respective edge 
edges left bandwidth 
call set cluster corresponding tree node corresponding cluster corresponding node denoted nodes connected respectively 
note definition tree laminar system 
assume rooted node corresponding cluster contains nodes network 
definition leaves correspond sets fvg relation nodes leaf nodes define root level nodes parents level defined level 
remains define bandwidths edges define function cap subsets describes total bandwidth available nodes nodes defined follows cap recall denotes bandwidth edge set denote total bandwidth edges leaving set cap define bandwidth edge connecting level node level node bandwidth edge defined 
gives example complete laminar system corresponding decomposition tree 
describe parameters decomposition tree significant quality bi simulation important parameter simply height denoted 
specifying parameters need notation 
decomposition tree set denote set level nodes clusters correspond nodes form sub partition set pairwise disjoint subsets define weight function sub partition follows cap cap informally speaking weight function counts subset bandwidth edges adjacent nodes connect nodes cluster respect sub partition corresponding order define properly add definition cap 
mention basic properties intensively remainder 
additive set 
furthermore level cluster 
holds 
weight function define level node decomposition tree bandwidth ratio max juj js cap nu weight ratio max juj js cap nu definitions conventions 
observe tree node corresponding cluster contains single node 
graph induced nodes disconnected parameters turn measure congestion needed route messages children intuition follows 
bandwidth ratio describes ratio capacity edges leave set capacity edges connect rest cluster cap nu 
simulation mainly edges type leaving set ratio important parameter 
weight ratio describes set ratio capacity edges connecting rest cluster 
simulation proportional probability message routed set weight ratio important parameter 
max fd max fl denote maximum weight ratio maximum respectively taken nodes section shown quality bi simulation network associated decomposition tree expressed parameters 
convenience notation denote respectively ambiguity 

simulation results section show bi simulation works results congestion online routing strategy data management strategy simulation 

simulating simulation network decomposition tree straightforward 
node simulated leaf node corresponds cluster fvg 
message sent nodes sent unique shortest path connecting respective counterparts theorem states simulation increase congestion 
theorem request sequence online problem network processed congestion straightforward simulation yields congestion proof 
denote edge connects level node level node relative load processing absolute load 

consider processed message crosses edge leave enter cluster total bandwidth edges leaving cluster 
edges relative load 
bt 
simulating section show decomposition tree simulated network contrast simulation simulation completely independent definition online problem 
split description parts 
part give general problem independent simulation result relates expected relative load edge congestion tree second part show data management online routing problem simulation adopted relative load edge deviate expectation 
gives desired simulation problem independent simulation done follows 
level node simulated random node corresponding cluster mapped node probability note definition leaf node corresponding cluster fvg simulated remains describe path selection strategy routing host nodes simulate adjacent tree nodes consider level node children dg 
initialization phase solve concurrent multicommodity flow problem problem cluster select routing paths tree edges solution 
problem defined follows 
define js commodities source commodity sink demand 

denotes level cluster contains solve problem respecting capacities bandwidth edges note restrict solution way may edges inside flow allowed leave cluster 
solution problem define throughput fraction minimum commodities fraction commodity demand met 
optimal solution maximizes value altogether solving problem commodity flow size 
furthermore total flow traverses edge inside cluster smaller bandwidth choose routing path solution problem 
suppose simulated node children simulated message sent edge tree path chosen randomly way expected load edge equals flow commodity edge 
theorem states simulation achieves low expected load edge theorem expectation relative load edge due simulation tree strategy bounded logn 

lg 
congestion planar constant genus result improves 
lg 

proof 
denote minimum throughput fraction achieved solving multicommodity flow problems initialization phase 
relate expected load edge value give lower bound terms parameters 
lemma edge 

proof 
denote load edge due simulation edges connecting nodes level nodes level show yields lemma 
fix level 
denote edge assume level level 
simulation tree edge induces load endpoints lie cluster holds routing paths nodes simulating leave cluster denote level node 
node exists 
denote degree dg denote children analyze number messages traverse due simulation tree edges dg 
assume worst case scenario edge relative load absolute load edge 


say tree edge mapped pair iff simulated simulated case 
messages routed simulation edge 
simulating tree node node contained corresponding cluster edge dg comes question mapped fixed pair 
consequently expected number messages routed simulation level edges 

probability simulates probability simulates number equals 
demand commodity definition problem see equation 
means 
messages routed pair expected load edge smaller capacity routing paths chosen way expected load equals flow passes solution problem 
consequently route 
messages expectation pair expected absolute load 
messages edge holds edge yields lemma 
derive bound throughput fraction multicommodity flow problems solved initialization phase 
denote level node children dg 
show bound throughput fraction flow problem cluster cut partition disjoint sets nu capacity cut cap nu bandwidth edges sets 
sparsity cut capacity divided total demand cross cut sum demands commodities source destination lie different portions cut 
cut minimum sparsity called sparsest cut 
widely known value sparsest cut sparsity maximum throughput fraction strongly related see 
give lower bound value sparsest cut utilize relationship derive lower bound maximum throughput fraction problem 
lemma value sparsest cut cluster proof 
fix non empty subset nx denote part denote part respectively lies cluster sparsity cut induced defined cap dem dem demand cross cut sum demands commodities source destination lie different portions cut 
abs subset denote total demand absorbed subset total demand commodities sink 
technical claim proved full version 
claim subset level cluster abs 

cap nu claim estimate dem follows dem abs 
abs 



cap step utilized cap cap 
sets contains js nodes 
assume jx js 
combining definition weight ratio inequality get dem 
cap 
cap 
cap yields lemma 
shown problem satisfied logk value sparsest cut number commodities 
combining lemma yields logn 

lg 

improved result utilize uniform multicommodity flow graphs constant genus satisfied factor see 
order apply result transform problem uniform multicommodity flow problem nearly value sparsest cut 
lemma yield theorem 
details omitted due space limitations 
far shown simulated edge network expected load remains small 
order obtain result congestion simulation show simulation technique adopted load edge deviate expectation 
done proofs theorems 
theorem graph associated decomposition tree exists oblivious online routing algorithm strictly logn 

lg competitive respect congestion 
utilizing results section parameters theorem gives log competitive online routing algorithm general networks 
proof 
order apply framework sketched section need efficient solution online routing problem trees 
point easy tree routing path nodes unique 
simulation technique adopted follows 
online routing problem internal nodes decomposition tree store information 
simulation ensure appropriate routing paths selected 
routing request new random embedding nodes network 
denote random variable describing load edge due routing th request 
routing algorithm easily ensure edge traversed request 
assume random variable 
variables independent load edge sum independent random variables 
applying chernoff bound see sum get holds edge get desired result congestion 
note independence different routing requests means routing algorithm oblivious stated theorem 
similarly prove theorem data management problem 
proof appear full version 
theorem log competitive online algorithm data management problem general networks 
results obtained utilizing results section hold general networks 
special networks results significantly improved 
example mesh decomposition tree logn 
yields data management strategy routing strategy competitive ratio logn 
framework achieves results mesh shown 

graph decomposition section show graph decomposition tree parameters 
completes proof competitive ratios data management strategy online routing strategy section 
main theorem follows 
theorem graph jv nodes exists decomposition tree height logn maximum bandwidth ratio logn maximum weight ratio logn 
proof 
proof define 
logn 
construct decomposition tree say subset fulfills bandwidth property weight property iff max juj jsj cap nu max juj jsj cap nu respectively 
obviously tree cluster fulfills properties bandwidth ratio weight ratio note definition bandwidth property slightly differs bandwidth ratio maximum taken sets contain jsj nodes 
needed proof 
prove existence tree parameters presenting algorithm constructing tree 
frg fulfilling bandwidth property find ju jr 
cap nu nfr fu nug return 
algorithm running time algorithm polynomial solves np complete problems construction 
observe decomposition computed network online algorithm aims minimize congestion 
key observation construction properties local cluster 
means cluster fulfills bandwidth property depends cluster rest decomposition tree 
similarly weight property level cluster depends cluster clusters corresponding children holds child clusters completely define weight function subsets denote children subset write cap means weight ratio depends child clusters observed locality desired properties conclude theorem lemma 
lemma level cluster fulfills bandwidth property possible partition subclusters characteristics 

sets disjoint form partitioning 
sub cluster fulfills bandwidth property 

sub cluster js 
jsj 

cluster fulfills weight property subset ju jsj cap 
cap 
argue lemma yields theorem 
obviously cluster contains nodes network fulfills bandwidth property 
set corresponding root applying lemma get partitioning sets partitioning correspond level nodes partition compute balanced mincut sg violating sharpened weight condition ju jsj nfs return 
algorithm partition 
sets fulfill bandwidth property apply lemma recursively leaf nodes correspond singleton sets fvg easy verify construction cluster fulfills properties 
height logarithmic property lemma 
yields theorem 
proof lemma 
algorithm partitioning requirements lemma uses subroutine described proof lemma 
lemma subset possible partition disjoint subsets fulfills bandwidth property 

proof 
straightforward algorithm computes partitioning characteristics 
contains set long contains set fulfill bandwidth property set removed replaced subsets nu chosen follows 
selected arbitrary subset violates bandwidth property ju jr 
cap nu 
outline algorithm 
obviously algorithm finished set system contains sets fulfill bandwidth property sets partition remains show 

analysis introduce notion 
consider set partitioned sets nu algorithm 
partitioning term increases 
cap nu 
step algorithm say algorithm buys new bandwidth 
cap nu pays cap bandwidth edges leaving contribute cap nu 
derive upper bound amount new bandwidth algorithm buy 
need claims 
claim step algorithm buys bandwidth price bandwidth cap 
proof 
selected set violates bandwidth property 

cap nu cap cap nu 
new bandwidth equals 
cap nu 
yields 
cap claim bandwidth edge 
log times buying new bandwidth 
proof 
denote edge suppose buying new bandwidth algorithm partitions set sets nu ju jr contained set contribute cap price new bandwidth 
set contains point nodes observation utilized follows 
running time algorithm denote set partition contain node respectively 
algorithm uses buying new bandwidth set set changes jr jr reduced factor obviously happen 
log 
logn times 
get upper bound amount new bandwidth follows 
contains set bandwidth buying new bandwidth bandwidth edges leaving cluster 
denote value bandwidth observations estimate bandwidth algorithm buy bandwidth log 
bandwidth algorithm buy new bandwidth shown smaller proceeding manner get total new bandwidth altogether increases algorithm 

yields lemma 
describe algorithm partitioning requirements lemma 
general idea algorithm maintain partitioning set fulfills requirements lemma change partitioning successively requirement fulfilled 
relatively easy maintain requirement partitioning maintaining requirement algorithm uses algorithm subroutine 
new set added set decomposed subsets fulfill bandwidth property 
subsets added 
requirement fulfilled follows 
algorithm calculates balanced mincut subgraph induced means partitioned subsets capacity cap sets minimized set contains jsj nodes 
algorithm guarantees set partitioning subset subset requirement holds 
order fulfill th requirement algorithm fulfill condition cap 
subsets jsj nodes 
doing algorithm uses trick 
tries ensure sharpened condition hold certain subsets composed sub clusters current partitioning written formally say subset violates sharpened weight condition iff cap 
ju jsj show subset violates condition cluster fulfills weight property requirement holds 
partitioning algorithm works follows 
sg contains singleton subsets long exists subset violates sharpened weight condition algorithm 
firstly removes sub clusters directly insert ensures requirements fulfilled 
partitioned sets partitioned 
subsets resulting partitioning inserted description algorithm shown 
clear description algorithm finished requirements fulfilled furthermore set violates sharpened weight condition 
remains show algorithm fulfills requirement show algorithm terminates 
lemma algorithm partition terminates 
proof 
show iteration loop term decreases 
iteration algorithm removes sets decreases cap 

show increment inserting sets resulting partitioning smaller value 
need claim proved full version 
claim subset ju jsj cap 
claim get cap 
cap cap partitioning sets get collection subsets 
lemma 
consequently inserting sets value increases 
decreases iteration loop 
yields lemma 
lemma subset violates sharpened weight condition fulfills weight property 
proof 
fix arbitrary nonempty subset jx jsj denote part denote part respectively lies cluster show cap cap partition sets called small large sets follows 
set called large iff jx js small 
denote set small large sets respectively denote corresponding index sets fx fx introduce set union sub clusters current partitioning large intersection note definition small large fact jx jsj ensures ju jsj 
idea proof find relation cap exploit fulfill sharpened weight property 
claim proved full version 
claim cap claim quotient cap cap estimated follows 
cap cap cap cap cap 
cap 
cap inequality utilized cap 
fulfills sharpened weight property cap 

plugging inequality yields cap cap means cluster fulfills weight property 
completes proof lemma 
previously claimed lemma directly implies theorem 
acknowledgments am grateful awerbuch bruce maggs helpful comments preliminary version 
aiello leighton maggs newman 
fast algorithms bit serial routing hypercube 
mathematical systems theory 
azar fiat plotkin waarts 
online load balancing applications machine scheduling virtual circuit routing 
proc 
th acm symp 
theory computing stoc pages 
aumann rabani 
logk approximate mincut max flow theorem approximation algorithm 
siam journal computing 
awerbuch azar 
local optimization global objectives competitive distributed deadlock resolution resource allocation 
proc 
th ieee symp 
foundations computer science focs pages 
borodin hopcroft 
routing merging sorting parallel models computation 
journal computer system sciences 
hagerup rub 
guided tour chernoff bounds 
information processing letters 

tight bounds oblivious routing hypercube 
proc 
nd acm symp 
parallel algorithms architectures spaa pages 
klein plotkin rao 
excluded minors network decomposition multicommodity flow 
proc 
th acm symp 
theory computing stoc pages 
leighton rao 
approximate max flow mincut theorem uniform multicommodity flow problems applications approximation algorithms 
proc 
th ieee symp 
foundations computer science focs pages 
leonardi 
line network routing 
fiat woeginger editors online algorithms state art volume lncs pages 
springer 
maggs meyer auf der heide 
exploiting locality networks limited bandwidth 
proc 
th ieee symp 
foundations computer science focs pages 
valiant 
universal schemes parallel communication 
proc 
th acm symp 
theory computing stoc pages 

static dynamic data management networks 
phd thesis universitat paderborn 

optimal permutation routing hypercubes 
proc 
th acm symp 
theory computing stoc pages 
appendix proof claim definition multicommodity flow problem abs order estimate abs distinguish cases cardinality suppose ju js 
applying definition weight ratio get abs 
cap nu suppose ju js 
case distinguish sub cases value 
suppose 
abs 
suppose nu 
get abs 
nu 
nu 
cap nu applying definition bandwidth ratio set nu altogether yields claim 
proof claim proof 
assume contradiction cap 
cap cap nu cap cap nu cap nu cap cap cap sn analogously shown cap cap 
means cuts induced smaller capacity cap 
ajb minimum balanced cut conclude anu nu contain jsj nodes 
contain jsj nodes 
contradiction 
proof claim set fulfills bandwidth property jx jsj 

cap cap ns similarly apply bandwidth property sets yields cap cap cap cap ns cap nx ns combining result inequality get 
cap cap ns relate cap cap 
cap cap cap nu cap nu cap cap cap nu cap cap cap cap 
cap 
cap summing inequality inequality gives 
cap cap cap ns yields claim 
