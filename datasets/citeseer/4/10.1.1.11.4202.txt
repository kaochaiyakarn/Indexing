dynamic proxy architecture support distributed java objects mobile environment gregory cahill mads distributed systems group department computer science university dublin trinity college dublin ireland greg 
mads cs cd 

java remote method invocation rmi distributed object technology poor existing support operation wireless mobile computing environments 
rmi mobile environment poses number problems related hardware mobility characteristics wireless networks 
describes implementation architecture supporting rmi client server applications wireless mobile environment 
mobility support provided major components 
connectivity management manages wireless connections hides inherent unreliability wireless media higher layers 
location management addresses difficulty correctly locating invoking rmi server objects hosted mobile devices 
implementation evaluated terms transparency associated cost introducing mobility support rmi applications 
java remote method invocation rmi permits invocation methods java objects residing remote address spaces 
important distributed object technology right platforms enterprise java beans ejb jini rmi communication 
widespread adoption java technology led increasing number small mobile computing devices built java capability 
rmi designed primarily static wired networks form rmi support operation mobile computing environments 
mobile computing environments number constraints wired networks need accounted providing support applications environments device constraints mobile devices definition smaller lighter static counterparts limited display processing power capabilities 
network constraints mobile devices rely wireless communications presently characterised low bandwidths high latencies intermittent connectivity 
architecture location independent computing environments alice designed provide mobility support range client server application protocols connectivity management addressing characteristics wireless networks high latency low bandwidth 
alice independent application protocols may maintained different distributed object technologies 
location management mobile devices change point connection network frequently may invalidate held objects resident devices 
invalidation poses problem clients attempting contact objects devices 
solution problem location management rmi servers mobile environments dynamic proxies 
demonstrate dynamic proxies may redirect method invocations fixed mobile devices manner largely transparent client dramatically impact time taken method invocation 
resulting implementation permits transparent operation rmi clients servers mobile environment 
roadmap remainder describes solution supporting rmi applications mobile environments 
section provides background 
section examines integration application protocol independent module alice rmi runtime order support mobile rmi clients 
section presents solution dynamic proxies problem location management operation mobile rmi servers 
section describes implementation whilst sect 
presents performance evaluation 
section introduces related sect 
presents 
background section provides background mobile environment alice architecture java rmi dynamic proxies 
alice architecture alice architectural framework provides mobility support range application level client server protocols 
alice architecture allows application level protocols provide mobility support location management disconnected operation support connectivity management 
alice permits operation mobile servers centralised location register keep track whereabouts servers 
physical mobility wired connection wireless connection old connection pig 

mobile environment environment alice framework developed illustrated fig 

mobile hosts mh axe mobile computing devices wireless network interfaces 
mhs axe connected stationary mobility gateways mg maintain wireless wired network interfaces act entry point wireless network wired network 
fixed hosts fh sta tionary computing devices communicate mhs mgs 
mhs physically mobile may change point connection mg procedure known handoff 
alice provides mobility support form layered architecture alice layer solving specific problems introduced mobile environment 
mobility layer manages connections mh mg hiding complexity wireless network higher layers swizzling layer supports server mobility translating server refer mg directly mh disconnected operation layer allows clients cache server functionality periods mh disconnected java rmi rmi part java distributed object model provides illusion invoking method local object whilst fact method may invoked object different address space 
rmi designed specifically language dependent able take advantage existing java object model 
java garbage collection mechanism extended encompass remote objects 
rmi proprietary protocol wire known java remote method protocol turn operates top tcp ip 
important feature rmi ability replace standard tcp sockets programmer defined socket types specification custom socket factories 
dynamic proxies dynamic proxies feature java platform version 
dynamic proxy class class implements set interfaces specified runtime order provide type safe proxy invocation interface method proxy dispatched object 
invocations proxy dispatched single invoke method proxy class 
method free invocation including dispatch object returning result invocation client 
fact proxy class developed interface ensures proxy totally transparent client lends dynamic proxy class rmi application remote objects rmi applications required coded interface 
consequently dynamic proxy representation may created remote object requiring additional representation remote object 
importantly pre generation proxy class required aiding transparency process 
mobile host client mh acting client connectivity management mh mg provided alice mobility layer ml man ages wireless connection hides inherent unreliability medium higher layers 
connectivity management takes form transparent reconnection broken transport layer connections tunneling existing connections mh moved mg 
ml de signed operate independently application level protocol issues may range distributed object technologies 
mobility layer ml implemented consists superset standard bsd sockets known sockets 
replacements standard socket functions provided functions manage callbacks ml application 
callbacks may notify application changes state connectivity 
requires application aware mobility application callbacks optional 
replacing java socket implementation java native interface jni native programming interface java allowing access native code java code 
ways ml integrated rmi jni combination custom socket implementations ways alter underlying socket implementation rmi differences socket replacement classes integrated rmi 
java networking package provides java net 
socket java net classes provide client server communication endpoint functionality respectively 
default uses instances socket classes provide communication remote objects possible specify extensions classes rmi 
java net 
socket java net 
classes contain java net 
class representing socket implementation 
socket implementation defaults java net class 
socket implementation class handles dispatch calls socket functions implemented native code 
done jni calls java net class dispatched shared library 
linux net dll windows 
way sockets implemented java ways ml socket functions may integrated rmi native library level follows 
creating custom socket implementation 
firstly possible write custom socket implementation class default java 
net 
say alice 
mi accesses custom shared library say lib 
shared library constructed ml socket functions appropriate jni method signatures similar interface standard java library 
major difference ava net class alice rmi class additional functions management callbacks application layer part alice rmi class 
difference implementations occurs loading shared library 
call load native shared library containing platform specific socket functions altered load ml socket functions providing rmi runtime place standard system sockets 
replacing shared library runtime 
approach replacing standard native socket calls create shared library exposed external interface default 
library delegates calls ml socket functions standard native socket functions 
possible specify java runtime library loader path load libraries 
altering path load altered library runtime standard socket functions may effectively replaced alice socket replacement functions 
advantage approach standard socket functions replaced alice ml socket functions transparently application need alter legacy code 
approach significant disadvantages alice ml permit mobile aware operation provides extended api sockets mobile aware operation 
sockets api exposed simply replacing library 
chosen approach method integrate alice ml rmi runtime system creation custom socket implementation 
approach considered closely aligned goals java language new socket implementations expected developed fulfill certain requirements 
approach custom socket classes maintain socket implementation attribute type alice mi connectivity management support offered rmi runtime system ml sufficient mh acting client remote server object 
mobile host server addressing problems arise rmi object resident mh acts server 
servers traditionally export clients know may contacted 
rmi servers export type java frei 
contain ip address port number combination referring machine server object hosted 
mobile environment assumed alice mh directly communication pass mg 
server hosted mh exports mh address invalid host directly address attempts invoke server fail 
alice introduced swizzling layer overcome problem location management corba changing endpoint server point mg mh 
swizzling object considered appropriate rmi due differences way rmi implements remote object referencing adopt invocation redirection mechanism location management relays invocations mg mh 
remote object referencing java way rmi server object related address space resident illustrated fig 

simple non persistent bootstrap name server remote object host may obtained client 
endpoint legend extends interface fig 

class hierarchy remote objects rmi client receives registry cases ally stub object illustrated fig 
stub con tains un rmi 
trf attribute turn contains un rmi transport attribute contains sun rmi transport endpoint giving hostname port number object resides unique identifier form object id addition retrieval remote object way lookup ways rmi client may obtain remote object return value method invocation method invoked client remote object may return result method invocation remote object 
client may server resides virtual machine client actual object returned stub invoke methods object resided locally 
registry lookup essentially obtains result invocation method 
argument method called client third way client may obtain remote object argument method invoked client server 
case arises client rmi server object 
scenario rmi server may callback client may potentially pass remote object 
case registry lookup cases returned stub representing object object 
dynamic proxy classes redirection dynamic proxies provide basis invocation redirection mechanism developed 
possible dynamic proxies create proxy representation class implements set interfaces runtime 
method invocations handled implementation java 
tang 
reflect 
interface mg forward invocation mh attached 
possible remove knowledge creating proxy client code enables client side transparency process 
dynamic proxy approach proxy class say developed implements java 
tang reflect 
interface 
class takes generic object argument constructor uses reflection determine interfaces object implements 
object hosted mh needs bind registry running mg currently connected 
bound registry dynamic proxy object transparently implementing remote interface remote object 
object bound registry mg returned clients performing lookup remote object name 
maintains mg originated invocations proxy propagated firstly mg actual remote object location known mg 
invocation responses likewise propagated back mg 
presents operation scheme detail 
scenario shown client obtains remote object way registry lookup 
dynamic proxy scheme operates follows 
mg process binds mobility registry daemon mg known name 

remote object resident mh performs lookup known name mg attached 

mg process returned remote object 
mobile host mobility gateway fixed host fig 

dynamic proxy architecture 
remote object invokes register method mobility gateway process passing parameter 

registration process creates object mg implements set interfaces remote object 
completes set process 

client performs lookup server name mg 

object actual remote object returned client 

invocations forwarded single method object mg process 

mg process forwards invocation actual remote object resident mh returns result path back client 
approach achievable changes existing rmi architecture attractive solutions location management problem 
obtained return value invocation 
case fh receives remote object way return value method invocation illustrated fig 
operates similar manner value returned invocation step fig 
inspected mg 
remote object dynamic proxy representing object created registered mg proxy object returned client step 
necessarily involved process may involved obtaining sl 
mobile host mobility gateway mobility registry sl mobility gateway process sl fixed host fig 

obtained invocation obtained argument 
similar scheme employed detect remote object passed argument callback mh fh 
argument inspected mg remote passed proxy representation created mg proxy replaces original argument 
implementation section describes implementation solution connectivity management location management mobile rmi 
layer nota tion terminology 
referring entire layer full name mobility layer abbreviated form ml 
referring single component layer location component subscripted 
instance component ml residing mg referred 
position components implemented illustrated fig 

connectivity management connectivity management achieved integration ml rmi specification alternative socket factories rmi discussed sect 

component 
component component ml mh 
component provides alice socket re placement functions sockets api mobile aware applications layers replaces tcp transport layer mobile enabled applications 
ml component contains daemon ruled multiplexes applications connections single transport connection mg 
terms rmi socket functions accessed explicitly application programmer rmi runtime system creates sockets standard api needed communication 
consequently api interface java needs constructed 
component 
alice component consists daemon executes mg 
daemon connected daemon running mh responsible relaying connections mg mhs 
part ml daemon process require interaction application programmer need provide interface java 
integration rmi 
integration ml rmi runtime entails number steps discussed 
creation custom shared object library created file named 
functionally equivalent impl 
file contained additional methods sockets api linked file alice mobility layer socket replacement functions produce shared object file called 

creation custom socket implementation step create custom java socket implementation class ex mobile host mobility gateway fixed host application tcp ip mp mg tcp ip legend logical data flow physical data flow application tcp ip fig 

software architecture tending java 
net 
class making calls 
creation custom socket classes point distinction socket types implementation class 
creation custom socket classes realises distinction separate socket classes created alice 
rmi alice 
rmi 

creation custom socket factory final step creation client socket factory server socket factory objects rmi uses supply instances alice rmi alice rmi respectively communication 
location management new layer named java remote method protocol redirect layer developed dynamic proxy objects provide location manage ment mobile rmi servers 
layer consists components component resident mh rm resident mg 
component 
rm component consists modi fied version java 
rmi 
naming class 
alice 
rmi 
naming class maintains current mg mh connected 
mobility support required rmi server objects alice 
frei naming class register rmi runtime 
class presents api application programmer java frei naming class 
alice frei 
naming class overrides subset methods java rmi naming class introduces additional methods 
important change introduced alice rmi naming class overriding bind rebind methods 
overridden methods take arguments methods java frei naming string name object remote object 
java frei naming class causes binding remote name object table subject condition remote object may register running address space 
overridden bind method causing binding name remote registry address space causes tion component mg 
registration component effectively causes instantiation proxy representa tion server binding running mg separate address space 
way semantics rmi changed slightly calling bind method address space causes binding object proxy representing object different address space 
component 
component layer consists objects collectively transparently intercept invocations server objects described sect 

mobility gateway process mg process executes mg provides set methods rm component allow registration remote objects resident mh connected gateway 
mg process involved server handoff 
mobility registry mobility registry running mg providing lookup service clients wishing obtain server hosted mh 
mobility registry contains name server object bound proxy representation object created registration 
proxy objects remote object registers mg dynamic proxy object implementing remote interface created gateway 
proxy object instantiation alice rmi class part component 
evaluation section evaluates dynamic proxy location management scheme mobile rmi applications terms performance transparency solution 
performance performance evaluation compared cost standard hop rmi standard hop rmi dynamic proxy server 
indicated overhead introduced dynamic proxies standard hop rmi 
mobile rmi introduces extra hop invocation compared cost standard hop rmi mg standard hop rmi mg dynamic proxies determine cost introducing dynamic proxies scenario 
compared cost introducing full support mobile rmi determine cost introducing full functionality 
parameterless invocation type 
hop rmi client server dynamic proxy simply forwarded invocation real remote object resulted marginal increase dynamic proxy oooo type invocation fig 

invocation times remote method invocations hop rmi types invocation time taken perform remote invocation illustrated fig 

increase due reflection dynamic proxy 
mobile rmi dynamic proxies introduced additional overhead type invocation leading increase time taken standard hop rmi 
extra time due high costs reflection dynamic proxies java determine method invoked proxy 
operation full support type invocation led increase time taken dynamic proxies increase time taken standard hop rmi 
illustrated fig 

additional time taken perform invocation full support introduced need additional reflection mg order determine method invoked server due non serialisability method type 
method invoked void parameterless need replacement parameters return types proxy representations gateway 
primitive parameter type 
dynamic proxies client server standard hop rmi led slight increase time taken perform invocation illustrated fig 

rmi mobile environment invocation void method primitive parameter integer case expensive level standard rmi 
dynamic proxies led increase time taken perform invocation comparable increase observed void parameterless invocation explanation 
normal rmi dynamic proxy type invocation fig 

invocation times remote method invocations hop rmi types invocation full operation type invocation led increase time taken dynamic proxies increase standard rmi 
increase illustrated fig 

significant increase time taken standard rmi due part need perform reflection mg order determine method type due part need inspect method parameter mg 
inspection parameter needed order determine remote object passed parameter case proxy representation required see sect 

process inspection utilises reflection accounts additional time introduced invocation 
object parameter type 
marginal increase time taken perform remote method invocation observed dynamic proxy hop rmi illustrated fig 

similarly mobile rmi passing java object parameter method expensive standard rmi 
dynamic proxies architecture led increase time taken perform invocation similar previous scenarios 
additional overhead introduced reflection mg order determine method type order inspect parameter type see remote object passed 
case method type determination parameter inspection resulted increase time taken perform invocation just dynamic proxies increase standard rmi see fig 

significantly overhead introduced inspection primitive parameters mg 
may explained fact object creation expensive operation java 
primitive parameter scenario type object representation primitive data type needs constructed may serialised rmi call 
example parameter int object type integer created represent integer 
primitive return type 
hop rmi increase time taken invoke remote method observed dynamic proxies fig 
due reflection performed dynamic proxy 
mobile rmi invocation method parameters primitive return type integer case east expensive standard rmi additional introduced time taken perform invocation dynamic proxies 
operation full layer led increase time taken rmi dynamic proxies increase standard rmi 
illustrated fig 

additional cost making rmi call may accounted need determine method type inspect return value invocation 
object return type 
dynamic proxy hop rmi type invocation increased time taken invoke remote method shown fig 

mobile rmi invocation method parameters returns java object costly type invocation terms standard rmi 
due need ise return value method 
dynamic proxies type invocation increases time taken invoke method due cost reflection 
full layer support increases time taken invoke method type dynamic proxies increase standard rmi see fig 

client side transparency 
incorporation location management support offered mobile rmi servers layer com pletely transparent client mobile rmi server barring need perform certain bootstrap remote lookups different host mg mh 
whilst may require alteration hard coded host addresses certain legacy applications cases simply require change host parameter provided runtime client 
server side transparency 
layer server side completely transparent application programmer 
alternative java frei 
naming class required mobile servers alternative naming class api syntactically identical standard rmi naming class 
related problems host mobility addressed architecture addressed mobile ip network layer 
mobile ip solution host mobility requires hosts modified network protocol requires maintenance centralised location register 
element routing indirection introduced mobile ip 
architecture require replacement existing ip protocol maintenance centralised location register 
previous carried extension alice architecture rmi resulting java version ml 
architecture improves approach re existing ml component dealing possible ways client may obtain remote making mobility support transparent client removing need hand code proxy classes 
software mobility rmi remote objects network addressed resulting enhanced remote objects able migrate different address spaces 
number projects examined operation rmi wireless link perspective efficiency communication mechanisms employed rmi 
projects deal aspects connectivity man agement wireless connection specific operation rmi connection 
location management mobile clients servers dealt projects 
addresses operation remote procedure call mobile environment 
carried interceptors rmi utilising dynamic proxies custom socket implementations replacement shared libraries intercept rmi method invocations 
rmi proxy commercial application protocol dynamic proxies provide approach allow controlled penetration firewalls rmi clients servers 
discussed provision support rmi applications mobile environment including connectivity management form management wireless connection insulation rmi applications inherent unreliability medium location management dynamic proxies support rmi servers mobile hosts 
connectivity management provided rmi applications re application protocol independent mobility layer module alice provided full operation mobile rmi clients 
location management scheme rmi dynamic proxies developed provide invocation redirection gateway wireless wired networks permitted operation mobile rmi servers 
mobility support provided architecture enabled full operation rmi clients server objects mobile environment 
mobility support provided top existing network ip protocols high degree transparency low degree overhead need centralised location register 
gregory receipt fellowship time research grateful belt rust generous support 

sun microsystems java remote method invocation specification revision eye 
sun 
com produc jdk rmi december 

sun microsystems enterprise javabeans specification eye 
sun 
com produc ej august 

sun microsystems jini specification 
sun 
com jini october 

george forman john zahorjan challenges mobile computing ieee computer journal april 
mads raymond cunningham cahill generic architecture mobile object oriented applications workshop service portability december 

roger biggs ann wollrath jim waldo distributed object model java system usenix conference object oriented technologies coots pp 


charles perkins mobile ip ieee communications magazine vol 
pp 
may 
tom wall mobile rmi supporting remote access java server objects mobile hosts proceedings international symposium distributed objects applications pp september 
toolkit enhance java rmi mobility th ecoop workshop mobile object systems operating system support security programming languages june 

stefano koskimies kimmo wireless java rmi th international enterprise distributed object computing conference pp 
september 

krishnaswamy dan walther george riley brad ahamad implementations java remote method invocation rmi proceedings th usenix conference object oriented technologies systems coots pp 
april 

badrinath rpc remote procedure call service mobile clients proceedings st acm mobicom conference pp 

narasimhan moser melliar smith interceptors java remote method invocation java grande concurrency practice experience 

pitt neil rmi proxy white 
com march 
