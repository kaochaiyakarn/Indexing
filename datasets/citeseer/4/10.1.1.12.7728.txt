efficient content location interest locality peer peer systems locating content decentralized peer peer systems challenging problem 
gnutella popular file sharing application relies flooding queries peers 
flooding simple robust scalable 
explore retain simplicity gnutella addressing inherent weakness scalability 
propose content location solution peers loosely organize interest structure top existing gnutella network 
approach exploits simple powerful principle called interest locality posits peer particular piece content interested items interested 
algorithm called interest shortcuts amount flooding avoided making gnutella competitive solution 
addition shortcuts modular improve performance content location mechanisms including distributed hash table schemes 
demonstrate existence interest locality diverse traces content distribution applications traces popular peer peer file sharing applications 
simulation results show interest shortcuts resolve queries quickly peer peer hop reducing total load system factor 
ensuring availability content internet expensive 
publishers want high availability options 
premium content hosting services build manage content distribution infrastructures contract content delivery networks 
options prohibitively expensive average internet user wants share megabytes digital photographs friends 
low cost solution publish content desktop peer peer content distribution system gnutella 
peers downloading content create available replicas increase content availability 
system grows supply resources scales demand 
resources flash crowds people access content simultaneously 
challenges providing peer peer content distribution systems 
address fundamental challenge appropriate strategy locating content research sponsored darpa contract number nsf numbers career award ncr ani itr award ani ani 
additional support provided intel 
views contained document authors interpreted representing official policies expressed implied darpa nsf intel government 
sripanidkulchai bruce maggs hui zhang carnegie mellon university pittsburgh pa bmm cs cmu edu content may continuously replicated locations peer peer system 
content located efficiently little hope peer peer technology content distribution 
classes solutions currently proposed decentralized peer peer content location 
unstructured content location gnutella relies flooding queries peers 
peers organize overlay 
find content peer sends query neighbors overlay 
turn neighbors forward query neighbors query traveled certain radius 
solution simple robust peers join leave system scale 
class protocols distributed hash table dht abstraction motivated plaxton proposed address scalability 
protocols peers organize welldefined structure routing queries 
dhts elegant scalable performance dynamic conditions common peer peer systems unknown 
design philosophy departs existing seek retain simple robust fully decentralized nature gnutella improving scalability major weakness 
identify powerful principle peer particular piece content interested pieces content interested 
peers exhibit interest locality 
propose selforganizing protocol interest shortcuts efficiently exploits interest locality content location 
peers share similar interests create shortcuts 
peers shortcuts locate content 
shortcuts fail peers resort underlying gnutella overlay 
shortcuts provide loose structure top gnutella unstructured overlay 
gnutella primary example shortcuts compatible content location mechanisms dhts hybrid centralized decentralized architectures kazaa 
compare performance gnutella shortcuts traces collected different locations different times 
show shortcuts significantly improve performance content location gnutella providing large decreases amount load system time locate content 
find simple algorithms sufficient capture interest relationships 
provide intuition factors contribute degree locality observed traces 
ieee ieee infocom 

fig 

peers share interests 
section ii describe design interest shortcuts 
section iii evaluation metrics simulation methodology 
results section iv explore potential limitations shortcuts section section vi takes depth look factors contribute interest locality 
section vii look effectiveness shortcuts dht protocol chord 
discuss implications results section viii related section ix 
ii 
interest locality section technique called interest shortcuts 
show section iv technique simple principles significantly improve performance gnutella 
gives example illustrate interest locality 
peer middle looking files peers right file matching file peer upper righthand corner files 
peer middle share interests interests represent group files 
goal identify peers downloading files directly 
shortcuts architecture design goals propose technique called shortcuts create additional links top peer peer system overlay advantage locality improve performance 
shortcuts implemented separate performance enhancement layer top existing content location mechanisms flooding gnutella 
benefits implementation twofold 
shortcuts modular underlying content location scheme 
second shortcuts serve performance enhancement hints 
document located shortcuts located underlying overlay 
having shortcut layer affect correctness scalability underlying overlay 
general shortcuts powerful primitive improve overlay performance 
example shortcuts network latency reduce hop hop delays overlay networks 
explore specific kind shortcut interests content location 
illustrates content located gnutella 
query initiated peer bottom flooded peers system 
depicts gnutella overlay shortcut links bottom peer 
avoid flooding content located shortcuts 
query flooded entire system shortcuts content 
gnutella 
shortcuts 
fig 

content location paths 
design goals interest shortcuts simplicity scalability 
peers able detect locality fully distributed manner relying locally learned information 
algorithms lightweight 
addition dynamic nature peer peer environments requires algorithm adaptive self improving 
incorporate considerations design components shortcut discovery shortcut selection 
shortcut discovery heuristic detect shared interests peers content looking share similar interests 
shortcut discovery piggy backed gnutella 
peer joins system may information peers interests 
attempt locate content executed flooding 
lookup returns set peers store content 
peers potential candidates added shortcut list implementation peer selected random set added 
subsequent queries content go shortcut list 
peer find content list issues lookup gnutella repeats process adding new shortcuts 
peers passively observe traffic discover shortcuts 
scalability peer allocates fixed size amount storage implement shortcuts 
shortcuts added removed list perceived utility computed ranking algorithm described section ii 
shortcuts low utility removed list list full 
design alternatives shortcut discovery 
new shortcuts may discovered exchanging shortcut lists peers establishing sophisticated link structures content category similar structures search engines 
addition multiple shortcuts opposed just may added list time 
section iv study basic approach shortcut added time results returned gnutella flooding 
section explore potential optimizations adding shortcuts time learning new shortcuts current shortcuts 
shortcut selection may shortcuts list 
design rank shortcuts perceived utility 
shortcuts useful ranked top list 
peer locates content sequentially ieee ieee infocom asking shortcuts list starting top content 
rankings metrics probability providing content latency path shortcut available bandwidth path amount content shortcut load shortcut 
combination metrics peer preference 
peer continuously keeps track shortcut performance updates ranking new information learned 
allows peers adapt dynamic changes incrementally refine shortcut selection 
section iv explore probability providing content success rate ranking metric 
context success rate defined ratio number times shortcut successfully locate content total number times tried 
higher ratio better rank list 
iii 
performance evaluation section discuss design experiments expose interest locality evaluate effectiveness proposed shortcuts scheme 
start giving brief overview gnutella 
discuss performance indices evaluation describe methodology experimental setup 
gnutella content location gnutella uses flooding locate content 
query tagged maximum time live ttl bound number hops travel 
addition gnutella employs duplicate query detection mechanism peers forward queries previously forwarded 
despite mechanisms amount duplication inherent flooding algorithms avoided 
peers reply query query string matches partially exactly files stored disk drives 
performance indices metrics express benefits overhead interest shortcuts success rate queries resolved shortcuts 
success rates high interest locality techniques potential improve performance 
load characteristics query packets peers process participating system 
reducing load individual peers desirable scalability 
query scope query fraction peers system involved query processing 
smaller query scope increases system scalability 
minimum reply path lengths long take reply come back 
additional state additional state peers need maintain order implement shortcuts 
amount state measures cost shortcuts kept minimum 
methodology trace simulations performance evaluation 
discuss query workloads 
describe construct underlying gnutella overlay flooding queries map peers query workload nodes gnutella overlay 
discuss storage replication models simulation experiments 
query workloads diverse traces download requests real content distribution applications generate query workloads 
traces labeled boeing microsoft cmu web table capture web request workloads envision similar requests web content file sharing applications 
traces labeled cmu kazaa cmu gnutella table capture requests popular file sharing applications kazaa gnutella 
boeing trace composed day traces boeing firewall proxies march 
microsoft trace composed day traces microsoft corporate firewall proxies october 
cmu web cmu kazaa cmu gnutella traces collected passively monitoring traffic carnegie mellon university internet hour period october 
monitoring host connected monitoring ports campus border routers 
monitoring software tcpdump installs kernel filter match packets containing request response header regardless port numbers 
header may split multiple packets find happens rarely packets 
packet filter able keep traffic dropping packets 
extend tcpdump parse packets online extract source destination ip addresses ports request url response code content type tags 
anonymize ip addresses urls log extracted information log file disk 
trace consists web transactions primarily port kazaa downloads port gnutella downloads primarily port cmu rest internet 
download requests traces generate query workloads way peer downloads file url time peer issues query file time 
model query string full url perform exact matching query string filenames 
assume intention search file hosts file respond query 
modeling partial matches affect results web cmu kazaa query workloads url typically corresponds distinct piece content 
urls cmu gnutella workload filenames may correspond distinct pieces content 
example file favorite song favorite artist named favorite song favorite song favorite artist simulations files considered different semantically 
exact matches difficult partially match anonymized names 
ieee ieee infocom table trace characteristics 
trace characteristics boeing requests documents clients microsoft requests documents clients cmu web requests documents clients cmu kazaa distinct requests documents clients peers cmu gnutella distinct requests documents clients peers result number peers particular file overestimate number distinct files system 
randomly selected hour segments query workload simulations 
limit experiments hour median session duration reported peer peer systems 
characteristics trace segments listed table sorted number clients 
gnutella connectivity graphs discuss construct underlying gnutella overlay flooding queries map peers query workload described previous section nodes gnutella overlay 
simulate performance gnutella flooding gnutella connectivity graphs collected early 
graphs bimodal power law degree distribution average degree 
characteristic diameter small hops 
addition nodes hops away 
number nodes graph vary 
simulations selected gnutella graphs closest number peers ones hour trace segment 
nodes randomly removed graph number nodes matched 
resulting graphs original graphs similar degree distribution pair wise path length characteristics 
peers hour segment randomly mapped nodes gnutella graphs 
maximum query ttl application default gnutella clients 
possible content ttl limit problem queries 
storage replication model web query workloads describe content placed stored system 
trace segment assume web clients participate web content file sharing system 
preserve locality place copy content peer request publish system query lookup performed 
subsequent copies content placed accesses 
peer downloaded file time creates replica file available download time 
peers store content retrieve trace segment content available peers download 
request content peer previously downloaded repeated request satisfied locally peer cache 
requests static content microsoft trace cmu web trace evaluation 
specifically removed requests content contained cgi asp pl query strings url 
addition cmu web trace removed requests content specified response headers protocol 
microsoft trace response header information 
boeing trace contain sufficient information distinguish static dynamic content 
boeing requests analysis 
storage replication model cmu kazaa cmu gnutella query workloads draw distinction types peers traces peers serve files peers download files 
peers serve files issue requests content trace provide set files peers may download 
hosts outside cmu providing files hosts cmu hosts cmu actively downloading files 
assume peer downloads files files available peers 
table lists number clients peers download files total number peers types trace segment 
types peers participants peer peer system peers download content issue queries simulation 
running simulation pass trace segment build list content available peer 
specifically peer served file time trace segment assume file available peer download time trace segment 
simulates peer file disk trace segment 
originally obtained file download earlier trace sure available peers download downloaded 
partial knowledge content available peer limited information trace 
example assume peer copy file disk 
download file trace ieee ieee infocom segment 
addition peer downloaded file 
information trace file sends query looking file simulations reply reality file 
result underestimate number peers potentially supply file report pessimistic results cmu kazaa cmu gnutella workloads 
queries performed distinct requests 
example kazaa peer usually downloads multiple fragments file multiple peers parallel may issue multiple requests file 
simulations peer issues query find file 
assume peers trace segment participate file sharing session including peers outside cmu downloading files peers cmu 
ran set experiments looked peers cmu downloading content results similar peers trace 
results peers trace sections 
simulation experiments compare performance gnutella gnutella shortcuts query workload 
portion trace assume peers send queries join system segment stay 
participation static simulations discuss effects dynamic conditions section iv 
stated peers maintain fixed size list shortcuts 
shortcuts ranked success rates 
iv 
experimental results comparison gnutella section evaluation results comparing performance gnutella gnutella shortcuts 
success rate success rate defined number lookups successfully resolved interest shortcuts total number lookups 
success rate high shortcuts useful locating content 
note peers just joined system shortcuts lists choice flood locate piece content 
start counting success rate flood peers shortcut list 
depicts average success rate shortcuts query workload 
vertical axis success rate horizontal axis time start simulation observation 
average success rate hour high web workloads cmu gnutella cmu kazaa workloads 
individual success rate depicted observed peer increases longer simulation times peers learn peers comparison conducted experiments select random peers participating peers add shortcuts 
note different interest shortcuts shortcuts added replies flooding gnutella 
find success rate random shortcuts varied trace segments 
time refine shortcut list 
success rates workloads reasonably high success rates web workloads distinctly higher cmu kazaa cmu gnutella workloads 
believe partial view content available peer cmu kazaa gnutella workloads see conservative results discussed previous section 
ask kind content located shortcuts 
shortcuts useful finding popular content 
depicts cumulative probability finding content specified popularity ranking shortcuts 
results representative trace segment query workload 
axis content rank normalized total number documents trace segment 
normalized rank values range popular popular 
document classified 
content rank shortcuts labeled 
content depicted 
line uniform distribution documents equal probability 
find distributions microsoft cmu web traces closely match uniform distribution indicating shortcuts uniformly effective finding popular unpopular content 
distribution boeing trace close uniform distribution slight tendency finding popular content 
hand shortcuts tend find unpopular content cmu kazaa trace 
distribution right sharp inflection point represents finding extremely unpopular content shared people 
results cmu gnutella file accesses determine document popularity 
popular file accessed handful people 
load scope achieve load reduction shortcuts flooding small number peers exposed query 
look metrics capture load reduction load peer query scope 
load smaller scope help improve scalability gnutella 
load measured number query packets seen peer 
table ii lists average load gnutella gnutella shortcuts 
due space limitations results segments boeing microsoft traces 
example peers segment microsoft trace saw query packets second gnutella 
help shortcuts average load packets second 
shortcuts consistently reduce load trace segments 
reduction factor microsoft cmu web trace factor boeing trace factor cmu kazaa cmu gnutella traces 
look peak mean load ratio order identify hot spots system 
peak mean ratio flooding gnutella ranges traces meaning time experiment loaded ieee ieee infocom success rate boeing microsoft cmu web cmu kazaa cmu gnutella simulation length minutes success rates shortcuts 
table ii load peer query packets second 
cumulative distribution content shortcuts boeing microsoft cmu web cmu kazaa uniform trace protocol boeing gnutella flooding gnutella shortcuts microsoft gnutella flooding gnutella shortcuts peer system saw times query packets average peer 
trace segments peak ratio shortcuts similar gnutella indicating shortcuts drastically change distribution load system 
segments microsoft trace peak mean ratio shortcuts doubled compared gnutella 
shortcuts bias load peers large number requests 
peers content selected shortcuts compared average peers 
result tend see queries 
number peers significantly larger volumes content trace segments 
shortcuts interesting property redistributes load peers system frequently 
fair expect peers heavy system contribute resources 
scope query defined fraction peers system see particular query 
example flooding scope approximately peers ttl limit see query 
shortcuts successful smaller scope 
usually shortcut see query resulting query scope 
shortcuts unsuccessful scope flooding 
results show shortcuts successful locating content small number peers bothered queries 
path length path length number overlay hops request traverses copy content 
example peer finds content asking shortcuts shortcut unsuccessful path length lookup hops 
note peer locates content sequentially asking shortcuts list 
gnutella path length minimum number hops query travels reaches peer content 
peers directly observe improvement performance content fewer hops 
depicts average path length normalized content popularity rank popularity content 
fig 

performance interest shortcuts 
shortest path content overlay hops gnutella gnutella shortcuts boeing microsoft cmu web workload cmu kazaa cmu gnutella shortest path content 
number overlay hops workloads 
average content hops away gnutella 
shortcuts successful reduce path length half hops 
reduce path length shortcuts list asked parallel opposed sequentially 
look amount additional state required implement shortcuts 
average peers maintain shortcuts 
shortcut lists tend grow larger traces higher volumes requests 
placed arbitrary limit shortcut list size entries 
allowed list grow larger appear limiting factor performance 
look opportunities downloading content parallel multiple shortcuts find trace segments requests downloaded parallel shortcuts 
summarize results evaluation shortcuts effective finding popular unpopular content 
shortcuts content quickly efficiently 
shortcuts load distribution properties 
load reduced load redistributed peers heavy system 
addition shortcuts help limit scope queries 
shortcuts scalable incur little overhead 
workloads diverse request volumes collected years apart exhibit similar trends interest locality 
sensitivity participation dynamics section discuss effects participation dynamics shortcuts 
dynamics affect shortcut structure underlying gnutella connectivity 
expect peer performance poorer shortcuts leave system equivalently die 
interest structures designed adaptive effect shortcut leaving system seen lookup immediately leave 
example peer uses peer shortcut just left system 
time sends query discover left remove shortcut list ask shortcuts content 
worst case may unfortunately keep choosing shortcuts leave system fall back flooding ieee ieee infocom queries 
case shortcuts useless hurt gnutella flooding performance 
participation dynamics disrupt performance gnutella reducing effectiveness flooding 
gnutella network partitioned peers may locate content shortcuts 
potential limitations shortcuts previous section showed simple algorithms identifying interest shortcuts provide significant performance gains gnutella flooding mechanism 
section explore limits interest locality conducting experiments provide insight questions best possible performance peers learn shortcuts past queries 
practical changes basic algorithm previous section improve shortcut performance bring closer best possible 
improve shortcut performance discover shortcuts existing shortcuts addition learning past queries 
order explore best possible performance remove practical limits imposed shortcuts algorithm evaluated previous section 
peers add peers returned gnutella flooding shortcuts 
contrast basic algorithm previous section randomly selected peer added time 
second removed entry limit shortcut list size allowed list grow bound 
depicts best possible success rate averaged trace segments workloads 
note success rate pessimistic cmu kazaa cmu gnutella workloads discussed previously 
average success rate hour high microsoft cmu kazaa workloads 
upperbound promising impractical peers boeing microsoft workloads need maintain average shortcuts 
furthermore path length copy content long tens hops 
removing practical constraints look performance relax constraints answer second question posed section 
observe success rates basic shortcuts algorithm depicted best possible 
basic algorithm simple practical performing reasonably 
relax constraints adding shortcuts adding random shortcuts list peers returned gnutella 
specifically looked adding shortcuts time 
changed limit number shortcuts peer maintain 
depicts success rates observed extended shortcuts algorithm 
report results segment lowest success rate basic algorithm workload 
horizontal axis number shortcuts added time varying basic algorithm unbounded unbounded refers adding shortcuts possible best possible performance 
vertical axis success rate hour period 
find success rate increases shortcuts added time 
instance segment boeing trace add shortcuts time success rate increases compared adding shortcut 
adding shortcuts time produces success rates close best possible 
furthermore see diminishing returns adding shortcuts time 
find load scope path length characteristics adding shortcuts time comparable adding shortcut time 
key difference shortcut list size expands entries 
reasonable trade improving performance 
answer third question 
additional improvement shortcut algorithm locate content shortcut structure way peers ask shortcuts content 
shortcuts content ask shortcuts shortcuts 
viewed sending queries ttl hops shortcut structure 
implementation peers send queries peer shortcut structure sequentially content 
content peer currently shortcut gets added list new shortcut 
peers resort gnutella content shortcut structure 
believe efficient way learn new shortcuts needing excessively flood gnutella 
addition hope capitalize situation depicted 
peer left previously downloaded file added peer middle shortcut 
wants find file immediate shortcut file shortcut shortcut peer right file case peer left successfully locate content shortcut shortcut 
depicts success rates algorithm locating content 
vertical axis success rate horizontal axis time observation simulation 
gray lines points represent success rates basic algorithm 
limit shortcut list size entries 
success rates discovering new shortcuts existing shortcuts higher basic algorithm 
segment boeing trace success rate increased hour 
similarly success rate increased segment microsoft trace segment cmu web trace respectively 
addition load reduced half 
shortest path length content increases slightly hops 
results cmu kazaa cmu gnutella traces similar trends 
results show basic algorithm evaluated previous section performs reasonably 
addition practical refinements basic algorithm yield ieee ieee infocom success rate boeing microsoft cmu web cmu kazaa cmu gnutella simulation length minutes add shortcuts possible 
fig 

discovering new shortcuts existing shortcuts 
performance gains 
vi 
understanding interest locality section seek get better understanding factors contribute degree interest locality observed workloads 
target search answer questions context web workloads interest structures look 
interest locality capturing relationships embedded objects belong web page relationships web pages 
interest locality capturing locality accesses publisher web server publishers 
perform similar analyses cmu kazaa cmu gnutella workloads answer questions interests capture relationships songs artist songs genre 
nearly impossible extract information anonymized urls file names 
focus analysis web workloads 
properties interest structures section treat shortcut structure directed graph analyze properties 
vertices graph peers edges represent shortcut relationships 
example peer uses peer shortcut directed edge created graph 
look snapshots graph taken minutes hour simulation segment boeing trace 
due space limitations summarize key findings 
viewed undirected graph find large number connected components minutes 
connected component peers 
hour trace connected components composed peers 
addition connected component connected 
specifically graph highly clustered characteristics small world networks small minimum distance success rate boeing microsoft cmu web cmu kazaa cmu gnutella unbounded number shortcuts added time success rate number shortcuts added 
fig 

potential interest shortcuts 
success rate boeing microsoft cmu web simulation length minutes success rate asking shortcuts shortcuts 
nodes 
characteristics different random graphs clustered 
clustering coefficient vertex defined fraction edges exist kv neighbors possible total number edges kv kv 
clustering coefficient minutes hour trace 
clusters shortcut graph correspond clusters interests 
clusters implications content location 
peers looking content usual areas interest find shortcut structure 
peer wants find content lie usual areas interest shortcuts useful peers need able escape current interest clusters 
retaining gnutella random connectivity escape route useful purposes 
interesting observation clustering coefficient web graph represents html link structure web documents lower observed shortcut graph represents web accesses 
believe interest locality capturing relationships different links web pages 
web access graph interesting properties different previously studied web graphs 
looked clustering document graph vertices graph documents edges represent documents accessed peer 
example peer downloads files edge created files 
edges weighted number distinct peers download files 
running shelf graph partitioning algorithms graph produces partitions files 
includes comparing partitions clusters created shortcuts studying properties web access graph 
web pages web objects 
section explore effect structure web pages interest locality 
web page consists multiple embedded objects 
client requests web page usually gets objects back server parallel 
evaluation previous sections assumed web content sharing systems share fundamental characteristic 
object component larger entity web page 
objects peer peer systems granularity web pages interest ieee ieee infocom success rate microsoft basic microsoft best possible cmu web basic cmu web best possible simulation length minutes fig 

success rates web page workload 
locality useful 
order answer question adapt traces approximate requests granularity web pages 
filter dynamic content methodology described section iii 
requests documents text html mime type microsoft cmu web traces simulations 
boeing trace contain content type information experiments 
due incomplete information methodology limitations 
example explore effect multiple frames web page 
count frame distinct web page 
addition examining text html requests number participating peers drops peers requested text html static content 
run set simulations web page workload discussed sections iv 
results metric success rates 
results metrics trend results reported earlier 
black lines depict average success rate web page workloads basic algorithm adding shortcut time 
success rates hour period microsoft cmu web workloads 
performance drop compared success rates locating web objects section iv 
suspect performance difference caused locality web objects page 
verify hypothesis looking best possible success rate peers allowed add possible peers returned gnutella flooding shortcuts depicted gray lines 
performance drop consistent basic algorithm 
improving shortcut discovery algorithm explored section improve success rate performance web pages 
summary performance gains observed section iv contributed structure web pages multiple objects web page interest relationship web pages 
interest shortcuts capable exploiting properties improve performance 
objects different publishers 
factor may contribute interest locality locality accesses content web site publisher 
section ask content publisher necessarily belong interest group 
table iii effect publisher shortcuts 
trace successful unsuccessful diff diff boeing microsoft microsoft html addition interest locality capture relationships publishers 
intuitively content publisher belong interest group 
clear granularity interests powerful help content location 
specifically content popularity publisher follows zipf distribution 
small number pages highly popular large number pages rarely accessed 
peer may access different sets pages 
gain better understanding analyze results reported section iv answer questions shortcuts succeed content publisher 
shortcuts succeed peers shortcut publisher 
hostname part ip address url publisher name 
due anonymization match servers exact name 
example www cnn com www cnn com treated different publishers semantically 
result count content belonging publisher 
table iii lists frequency content successfully shortcuts shortcut publisher 
publisher shortcuts request shortcuts originally created result accessing content publisher publisher current request 
boeing trace average publisher shortcuts successful locating content time trace segments 
different publisher shortcuts successful time 
find interest locality capture interests multiple publishers 
addition find time publisher shortcuts sufficient locating content 
results microsoft trace similar content publisher shortcuts 
believe majority publisher shortcut successes web objects belong web page shortcuts effective locating content html traces 
summarize interest locality different publisher locality 
interest shortcuts exploit relationships span multiple publishers locate content 
find shortcuts effective capturing locality levels granularity ranging locality accessing objects web page accessing web pages publisher accessing web pages span publishers 
addition interest structures different properties html link structures ieee ieee infocom table iv load peer query packets second 
trace protocol boeing chord chord shortcuts microsoft chord chord shortcuts web documents 
vii 
sensitivity underlying content location mechanism section ii claimed shortcuts modular components underlying content location protocol 
section explore performance shortcuts chord dht protocol 
chord provides efficient scalable distributed lookups resolves content ids locations log overlay hops number participating peers 
facilitate lookups node maintains log state peers system 
evaluation assume chord provides simple interface peer sends query piece content chord returns list ip addresses peers store copy content 
addition assume content placement peers individual interests 
peers store content requested downloaded 
architecture section ii implement shortcuts separate layer 
queries resolved chord peers shortcuts shortcuts unsuccessful locating content 
performance metrics gnutella trace shortcuts algorithm results success rate state overhead remain reported section iv 
shortcuts successful path length locating content hops 
comparison chord locates content hops 
key differences chord gnutella underlying content location protocol load query scope 
table iv lists number queries observed peer packet second chord chord shortcuts 
due space limitations results segments boeing microsoft workloads 
chord efficient limiting load compared gnutella see table ii 
example segment microsoft trace chord limits number queries packets second compared gnutella packets second 
shortcuts chord reduce load packets second 
shortcuts reduce load factor traces 
query scope fraction peers system involved query chord analogous query path length 
scope peers trace segments 
shortcuts successful reduce query scope shortcuts successful query scope sum number shortcuts tried shortcut list size number chord hops total number peers system 
scope unsuccessful shortcuts increased approximately hops 
fortunately peers pay penalty unsuccessful shortcuts 
summarize interest shortcuts improve performance chord dht protocol 
viii 
discussion propose technique create shortcuts content location overlays 
believe promising approach introducing performance enhancements overlay construction algorithms 
architecture shortcuts modular building blocks constructed top generic large scale overlays 
shortcuts designed exploit locality significantly improve performance 
furthermore layering enables higher performance degrading scalability correctness underlying overlay construction algorithm 
interest locality powerful principle content distribution applications 
show interest locality web content sharing popular peer peer file sharing applications 
applications construct shortcuts exploit locality characteristics improve performance 
study find interacting small group peers smaller sufficient achieving high hit rates 
results differ previous web caching studies report hit rates start saturate population sizes thousands clients 
difference approach peers grouped interests web caching clients grouped 
cooperation small groups peers share interests provides benefits cooperation large group clients random interests 
addition improving content location performance interest shortcuts primitive rich class higher level services 
instance keyword string matching searches content performance content retrieval examples services 
distributed hash tables support keyword searches 
interest shortcuts implement searches top schemes way 
peers forward searches shortcuts 
peer receives search performs keyword match content stores locally 
chance content shortcuts interest locality 
performance content retrieval implemented interest shortcuts 
advantage service content retrieved peer best performance 
peer peer systems assume interaction order single requests 
shortcuts provide opportunity longer term relationship peers 
relationship peers afford carefully test shortcuts select best ones content retrieval performance 
addition amount state peers need allocate interest shortcuts small bounded 
peers store performance ieee ieee infocom history shortcuts 
peers actively probe shortcuts available bandwidth needed 
potential concern interest locality exploiting relationships privacy underlying content location mechanisms 
argue 
peers gain information obtained underlying content location mechanism 
interest shortcuts allow information intelligently improve performance 
ix 
related improvements gnutella flooding mechanism studied dimensions 
query caching exploits zipf distribution popularity content reduce flooding 
second approaches expanding ring searches designed limit scope queries random walks peer forwards query message randomly chosen neighbor place flooding promising improving gnutella scalability 
approaches effective finding popular content interest shortcuts find popular unpopular content 
proposed improvements gnutella interest shortcuts improve performance gnutella 
associative overlays proposed improve gnutella performance principles interest locality 
peer peer applications kazaa interest locality improve performance 
specifics kazaa protocol publicly known peers selected supernodes serve index content located peers 
locating content normal peer contacts supernode turn may contact supernodes 
shortcuts environments efficient query routing supernodes reduce load supernodes 
proposals systems distribute web content peer peer technology 
peerto peer web hosting service 
design stresses ease publishing 
content location provided dynamic dns lookups urls centralized architecture 
coop net proposes peer peer content distribution complement client server systems flash crowds 
clients downloaded content turn serve content clients 
content location initiated original web server 
bittorrent delivers web content peer peer technology designed integrate seamlessly existing web browsers 
content location provided asking known server 
squirrel peers local area network share content emulate web proxy 
squirrel uses pastry dht algorithm content location 
interest shortcuts employed systems avoid centralized content location bottlenecks coopnet bittorrent improve performance pastry squirrel 
interest locality related ideas collaborative filtering suggests people choices opinions 
building decentralized peer recommendation system heuristics identify recommend peers share similar interests 
wish venkat padmanabhan microsoft corporate proxy traces ripeanu gnutella connectivity graphs 
frank members cmu computing services helped tremendously debug run trace collection software 
dan blandford guy blelloch helped experiment graph partitioning algorithms graphs 
chu andy myers anonymous reviewers constructive criticism earlier drafts 
akamai technologies www akamai com 
gnutella gnutella wego com 
ratnasamy francis handley karp shenker scalable content addressable network proc 
acm sigcomm 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems ifip acm international conference distributed systems platforms middleware 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications proc 
acm sigcomm 
zhao kubiatowicz joseph tapestry infrastructure wide area fault tolerant location routing berkeley technical report ucb csd 
plaxton rajaraman richa accessing nearby copies replicated objects distributed environment proceedings th annual acm symposium parallel algorithms architectures 
ratnasamy shenker stoica routing algorithms dhts open questions proc 
international peer peer workshop 
kazaa www kazaa com 
iyer rowstron druschel squirrel decentralized peerto peer web cache acm symposium principles distributed computing podc 
padmanabhan sripanidkulchai case cooperative networking proc 
international peer peer workshop 
jr gruhl agrawal web hosting content sharing tool masses proc 
international www conference 
bittorrent available org bittorrent 
meadows boeing proxy logs available ftp cc vt edu pub boeing march 
jacobson leres mccanne tcpdump available www tcpdump org 
saroiu gummadi gribble measurement study peerto peer file sharing systems proc 
multimedia computing networking mmcn 
ripeanu foster iamnitchi mapping gnutella network properties large scale peer peer systems implications system design ieee internet computing journal vol 

watts strogatz collective dynamics smallworld networks nature 
adamic small world web proc 
rd european conf 
research advanced technology digital libraries ecdl 
blandford blelloch index compression document reordering data compression conference dcc 
almeida bestavros crovella de oliveira characterizing locality www proc 
ieee conference parallel distributed information systems pdis 
wolman voelker sharma cardwell karlin levy scale performance cooperative web proxy caching proc 
acm sosp 
sripanidkulchai popularity gnutella queries implications scalability www cs cmu edu research gnutella html february 
lv cao li shenker replication strategies unstructured peer peer networks proc 
acm international conference supercomputing ics 
cohen fiat kaplan case associative peer peer overlays proc 
workshop hot topics networks 
resnick iacovou suchak riedl grouplens open architecture collaborative filtering netnews proc 
acm conference computer supported cooperative 
ieee ieee infocom 
