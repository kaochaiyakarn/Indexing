appears proc 
acm ifip usenix intl 
middleware conf 
middleware approximate object location spam filtering peer peer systems feng zhou li zhuang ben zhao ling huang anthony joseph john kubiatowicz computer science division berkeley zl cs berkeley edu 
overlay networks allow decentralized object location routing dolr networks unique ids 
propose extension dolr systems publish objects generic feature vectors content hashed guids enables systems locate similar objects 
discuss design distributed text similarity engine named approximate text addressing ata built top extension locates objects text descriptions 
outline design implementation motivating application ata decentralized spam filtering service 
evaluate system real spam email messages messages find spam identification ratio zero false positives 
keywords peer peer dolr tapestry spam filtering approximate text matching structured overlay networks utilize scalable routing tables map unique identifiers network locations providing interfaces decentralized object location routing dolr distributed hashtables dht :10.1.1.111.1818:10.1.1.140.3129:10.1.1.28.5987:10.1.1.1.4310:10.1.1.105.3673
allow network applications distributed file systems distributed web caches efficiently locate manage object replicas wide area network 
systems excel locating objects object replicas rely known globally unique identifiers guid object commonly generated applying secure hash function object content 
provides highly specific naming scheme lend object location management semantic features 
address problem propose approximate location extension dolr systems publish locate objects generic feature vectors composed number values generated description content 
object addressed feature vector matching minimal threshold number entries original feature vector 
extension propose approximate text addressing ata facility instantiates approximate location extension block text fingerprints features find matches highly similar text documents 
validate ata design approximate object location extension design decentralized spam filtering application leverages ata accurately identify ac bb fig 

tapestry routing example 
path taken message node node tapestry hexadecimal digits length nodes namespace 
junk email messages despite formatting differences evasion efforts spammers 
evaluate accuracy fingerprint vector scheme simulation analysis real email data explore trade offs resource consumption search accuracy 
rest follows section briefly describes existing overlays 
section presents approximation extension dolr systems prototype implementation 
section describes design ata section discusses design decentralized spam filter 
section presents simulation experimental results followed discussion related section status section 
provide mathematical analysis robustness text fingerprinting appendix background structured overlays section background material structured overlays 
different protocols differ semantics details performance objectives 
context tapestry performance reasons design general results generalized structured protocols 
routing tapestry overlay location routing layer rigorous treatment dynamic algorithms :10.1.1.111.1818:10.1.1.1.4310
structured protocols object node ids pseudo randomly chosen namespace fixed length bit sequences common base hex 
tapestry uses local routing tables node route messages incrementally destination id digit digit represent wildcards 
node neighbor map multiple levels level represents matching prefix digit position id level neighbor map contains number entries bf fe aa ce fig 

publication tapestry 
publish object server aa sends publication request root leaving pointer hop 
server publishes replica similarly 
node exists object rooted node 
bf fe aa ce fig 

object location tapestry different location requests 
instance locate guid query source routes root checking pointer step 
node encounters pointer server aa 
equal base id th entry th level location node closest network latency begins prefix forward message th hop router tapestry examines th level routing table forwards message link corresponding th digit destination id routing substrate provides efficient location independent routing logarithmic number hops compact routing tables 
shows tapestry routing mesh 
data location tapestry server local object available routing publish message object root node live node identifier maps 
hop path location mapping stored 
mappings multiple replicas stored sorted distance local node 
see example object publication 
replicas object published 
client routes query message root node 
message queries hop router way routes finds location mapping 
note nearby objects query messages quickly intersect path taken publish messages resulting quick search results exploit locality :10.1.1.111.1818
see example object location 
notice locality exploited directing location requests nearby replicas 
approximate dolr dolr systems tapestry provide deterministic scalable efficient location routing services making attractive platforms deploying wide area network client node fv fv look approximate object fv fv send msg guid dolr layer guid guid guid guid guid fv fv fv return guid object set guid return guid object set guid guid look fv look fv look fv msg object node object node fig 

location approximate object 
client node wants send message objects feature ffv fv fv 
sends lookup message feature fv fv fv 
fv exists 
location failure message sent back 
fv managed object node sends back list ids objects having feature fv 
similar operation done feature fv ids list guid 
client node counts occurrence ids lists finds guid id looking 
sends payload message object guid tapestry location message 
applications 
files particular located efficiently canonical name known 
previous approaches generate globally unique identifiers guid secure hash sha content 
approach significantly limits usability system scenarios users known exact names objects perform searches general characteristics system 
particular scenarios include searches data closely approximates similar known data certain properties 
examples include searching audio video matches existing works content features searching lightly modified replicas existing data 
approximate dolr design propose extension dolr approximate dolr generic framework address needs applications 
system apply application specific analysis objects generate feature vectors describe distinctive features provide translation mechanism features traditional guid obtained secure content hash object contents 
query ability features applies variety contexts 
world multimedia search retrieval extract application specific characteristics hash values generate feature vectors 
combination field value mappings mapped feature vector canonical ordering fields 
example applied searching printer drivers printer features location manufacturer speed 
features canonically ordered location manufacturer speed example feature vector hash soda hash hp hash ppm 
member vector feature application specific feature encoded hashed identifier 
feature object feature object stored network 
feature object simple object stores list guids objects feature vectors include clients searching objects feature set finds set feature objects network associated single feature selects guids appear feature objects tunable threshold parameter avoid false positives maintaining desired generality matches 
publication object system proceeds follows 
content hash derived guid published underlying dolr layer 
assures client route messages object guid 
generate feature vector feature vector try locate associated feature object 
object available system append current guid object 
create new feature object identified feature announce availability overlay 
locate object system retrieve feature object associated entry feature vector 
count number distinct feature objects unique guid appears select guid appear number greater preset threshold 
guid route messages desired object 
api follows fv guid 
publishes mapping feature vector guid system 
feature vector set feature values object definition application specific 
feature vector guid search object 
notice publishes mapping fv guid 
publish object done publish primitive tapestry called 
fv guid 
removes mapping fv guid mapping exists network reverse 
fv thres msg 
primitive routes message location objects overlap queried feature vector fv thres entries 
basic operations involve feature retrieving list guids share feature doing frequency count filter guids match thres features routing payload message msg 
object system feature vector fv selection criterion jf fv thres jf location operation deterministic means existing object ids matching criterion located sent payload message 
important notice mean matching object system receive message object id may correspond multiple replicas depending underlying dolr system 
message sent replica matching object id hopefully nearby replica dolr utilizes locality 
interface reduce problem locating approximate objects systems finding mapping objects search criteria feature vectors 
mapping maintain similarity relationships similar objects mapped feature vectors sharing common entries 
show example mapping text documents section 
basic prototype tapestry describe approximate dolr prototype implemented top tapestry api 
prototype serves proof concept optimized simplicity 
prototype allows gain experience possible optimizations performance robustness functionality 
prototype leverages dolr interface publishing locating objects associated identifier 
called object begins publishing content hashed object guid tapestry 
client node uses tapestry send messages feature objects involved 
tapestry routes messages nodes feature objects stored 
nodes add new object guid list guids inside feature object 
feature object network client node receives message creates new feature object containing new object publishes 
call client node uses tapestry location send messages feature objects asking list ids associated feature value 
nodes feature objects reside receive messages lookup maps send back result 
messages sent back nonexistent feature objects counted empty id list 
client node counts occurrence guid resulting lists 
guids threshold number counts removed 
message call sent remaining object guids example executing call shown 
note analogous system implemented top distributed hash table dht abstraction systems 
routing messages previously published feature objects retrieve feature object doing get operation appending new guid putting object back put 
optimizing location initial description operation involves client node nodes feature objects stored 
propose optimizations eliminates network round trip reducing latency normal dolr system cost keeping small amount state overlay nodes 
optimization involves client node caching result client node fv fv fv fv fv send message approximate object guid match fv look dolr layer fv fv msg object node guid guid guid guid guid guid fv fv fv fv guid fv fv fv fv guid fv fv fv fv fv fv fv fv fv msg fv fv msg fv fv msg msg fig 

optimized location 
client node wants route message feature vector ffv fv fv fv 
sends message identifier fv fv fv fv 
fv doesn exist object node receives message 
object node receives messages fv fv fv scans local storage ids matching fv fv fv guid 
object node sends msg guid 
translating feature vector guid 
messages feature vector routing cached guid 
second optimization complex illustrated 
normally client node retrieves set feature objects counts guid occurrences locally routes message resulting guid 
intuition features identified hashed keys reasonably low collision rates feature identify small number objects feature 
furthermore multiple feature objects colocated object identify new feature objects created node object stored 
way look feature object cases published time object node 
implies route application level message feature feature vector expect arrive node desired object stored 
key change node storing feature object file providing mapping feature guids share feature stores feature vectors guids 
routing message feature vector fx zg means sending message identifier message includes entire feature vector re querying 
node receives message immediately scans local storage feature objects matching guid feature objects node determines amount overlap feature vector queried feature vector 
overlap query threshold message delivered guid location 
implies query messages contains information node completely evaluate search local information 
locally stored feature objects contain matching objects evaluated immediately determine satisfies query 
message contains necessary information deliver payload desired guid set messages sent provide level fault resilience message loss 
nation desired guid occur message received waiting messages arrive 
translation feature vector guids occurs network client node 
provides significant communication savings 
nodes need keep state support optimization 
addition storing feature objects keep mapping feature values guids need keep track previously resolved feature vectors order drop additional requests feature vector 
state stored temporary basis removed reasonable period time requests feature vector arrived 
concurrent publication problem implementation described 
lookup feature objects publication new feature objects atomic 
result multiple feature objects feature value published node tries publish object feature value concurrently 
propose solutions 
exploit fact object mapped unique root node serialize publication root node 
node required send message root node feature value obtain leased lock publishing feature object 
lock acquired node nodes trying obtain fail restart process find newly published feature object 
incurs round trip communication root node 
efficient optimistic way solve problem client node assumes feature object exist network 
tries publish object doing lookup 
publication message travels network node checks knows published feature object feature value 
object exist node root know 
node detects cancels publication sends message existing feature object merge new information 
process potentially efficient conflicts rare 
general operation accomplished single way publication message 
optimistic approach easily implemented top tapestry proposed common upcall interface peer peer overlays 
proposed upcall interface allows applications override local routing decisions 
specifically node intercept publication message handle conflicts specified 
approximate text addressing section design approximate text addressing facility built approximate dolr extension discuss design decisions exploring trade offs computational bandwidth overhead accuracy 

vector fingerprint 
checksum substring fig 

fingerprint vector 
fingerprint vector generated set checksums substrings length post processed sort selection reverse operations 
finding text similarity goal efficiently match documents distributed network share strong similarities content 
focus highly similar files modified email messages edited documents news article published different web sites 
algorithm follows 
text document variant block text fingerprinting introduced generate set fingerprints :10.1.1.106.2691
fingerprint vector document feature vector publication location approximate dolr layer 
calculate block text fingerprint vector size text document divide document possible consecutive substrings length document length characters strings 
calculating checksums substrings fast operation scales sort set checksums value select size subset highest values reverse checksum digit 
deterministically selects random set biasing id prefix numerical routing 
parameterized constant chosen application tune granularity similarity matches 
example size email complete sentences account substring source code code fragments longer length 
illustrates fingerprint process 
calculation expensive 
java prototype processing throughput mb ghz piii laptop 
trade offs obvious trade offs network bandwidth accuracy search 
greater number entries vector accurate match false positives greater number parallel lookup requests document 
distance lookup requests travels directly impacts bandwidth consumption network 
ata enabled applications benefit exploiting network locality matching similar documents nearby network dolr dht object location locality tapestry 
trade exists number publishers indicate particular document resources required client find match query 
bandwidth accuracy tuned placing time live ttl field lookup query constraining scope query messages 
clients fail find match may publish documents improving lookup performance clients 
explored detail section 
decentralized spam filtering spam unsolicited email wastes time valuable network resources causing headaches network administrators home users alike 
currently widely deployed spam filtering systems scale university wide network keyword matching source address matching 
easy deploy manage systems walk fine line letting spam blocking legitimate emails 
observation human recognition fool proof spam identification tool 
propose decentralized spam filter pools collective spam recognition results readers network 
exist centralized collaborative spam filtering systems claims peer peer uses napster architecture 
knowledge attempt build truly decentralized collaborative spam filtering system 
compared alternative university wide centralized collaborated designs important benefit wide area decentralized design lies fact effectiveness system grows number users 
system huge number users world wide highly probable spam email receive received identified somebody large number users 
deterministic behavior dolr systems prove useful single peer publishes information specific email piece information deterministically clients 
expect system responsive new spam systems different nodes publish exchange spam information certain intervals 
additionally decentralized systems provide higher availability resilience failures attacks similar centralized solutions 
basic operation decentralized spam filtering system consists kinds nodes user agents peers 
user agents extended email client programs users 
query peers new emails received send user feedback regarding certain email spam peers 
peer piece long running software example applications include spam filters plagiarism detection news article clustering 
installed typically university department server speaks peers worldwide forms global network 
email client receives message server user agent extracts body mail drops format artifacts extra spaces html tags generates fingerprint vector sends peer dolr system 
peer turn queries network approximate dolr api see information email published 
match indicates email spam email filed separately discarded depending user preference 
message delivered normally 
user marks new message spam user agent marks document tells peer publish information network 
enhancements optimizations basic design allows human identification spam quickly propagate network allows users system benefit feedback 
design choices optimizations augment functionality reduce resource consumption 
fingerprint vectors reverse engineering blocking unknown emails difficult 
basic system attackers block known messages group mailing lists 
propose add voting scheme top publish search model 
count positive negative votes kept system user set threshold value discarding filing spam count confidence measure 
central authority controls assignment authentication user identities 
user agent required authenticate able vote email 
restrict number votes certain user agent perform certain email 
type attack spammers find arbitrary text segments checksum values selected fingerprint selection algorithm 
appending preferred segments spam emails spammers fix resulting email fingerprint vectors attempt avoid detection 
note attack succeed continuous stream unique text segments generated unique segment appended spam message 
places significant computational overhead spammer scales number spam messages sent 
additionally mail clients choose randomly small set fingerprint calculation algorithms 
different fingerprinting methods include transforming text calculating checksums changing checksum method changing fingerprint selection method 
circumvent spammer need determine set fingerprint algorithms append set preferred segments segment overcoming known selection algorithm 
different fingerprint algorithms generate distinct spam signatures spam partitioning user population reducing likelihood match requires significantly computational overhead overcome 
optimizations centralized mail servers compute fingerprint vectors incoming messages 
vectors compared locally identify popular messages lookups performed determine spam 
additionally server attach precomputed fingerprint vectors spam filtering results custom headers messages reducing local computation especially thin mail clients pdas 
evaluation section combination analysis experimentation random documents real emails validate effectiveness design 
look aspects fingerprinting robustness changes content false positive rates 
evaluate fingerprint routing constrained time live ttl fields tuning trade accuracy network bandwidth consumption 
fingerprint random text evaluation examining properties text fingerprinting randomly generated text 
particular examine effectiveness fingerprinting matching text small modifications originals likelihood matching unrelated documents false positive rate 
robustness changes content examining robustness fingerprint vector scheme small changes document measuring probability fingerprint vector stays constant modify small portions document 
fix fingerprint vector size want measure robustness small changes different threshold constants thres 
experiments take sets random text documents size kb kb match small large sized spam messages respectively calculate fingerprint vectors modifying consecutive bytes 
similar text replacement mail merge schemes generate differentiated spam 
measure probability thres jf fingerprints matching modification function threshold size document kb kb 
fingerprint vector size jf 
repeat experiment modification consecutive bytes simulating replacement phrases sentences modifying randomly placed words characters long 
addition simulated experiments developed simple analytical model changes basic combinatorics 
model detail appendix experiment plot analytical results predicted model addition experimental results 
show scenario experimental results gathered randomized text files comparing fingerprint vectors modifications 
see model appendix predicts simulation data exactly patterns modification 
specifically modifying characters text impacts fingerprints small probability 
means setting matching threshold guarantee near matching rate 
increase length change characters results change significantly guarantee near perfect matching thresholds 
probability complete match fp vector size number matching fingerprints probability sized analytical sized simulation sized analytical sized simulation modify consecutive characters probability complete match fp vector size number matching fingerprints sized analytical sized simulation sized analytical sized simulation modify consecutive characters probability complete match fp vector size number matching fingerprints sized analytical sized simulation sized analytical sized simulation modify characters group fig 

robustness test experimental analytical 
probability correctly recognizing document modification function threshold 
jf 
note multiple small changes third experiment impact changing fingerprint vectors 
case setting threshold value provides near perfect matching rate 
avoiding false positives addition robust modifications want fingerprint vectors provide low rate false positives unrelated documents generate matching entries vectors 
section evaluate fingerprint vectors metric simulation random text documents 
section similar tests real email messages 
generate random text files find document pairs match fingerprint entries 
experiment done different file sizes ranging kb kb 
shows resulting false positive rate versus file size 
results fingerprint match low statistically insignificant increasing fingerprint matches threshold document match 
tests pairs file size pairs files file size matched fingerprints pairs files matched fingerprints 
result combined robustness result tells false positive test document size byte matching fingerprint matching fingerprint probability matching fingerprint pair documents matching fingerprint fig 

false positives 
probability random text files matching fingerprint vectors function file size 
distribution junk email size email size kbyte emails fig 

spam mail sizes 
size distribution spam email messages experiments histogram cdf representations 
randomized documents threshold fingerprints gives matching mechanism near perfect terms robustness small changes absence false positives 
fingerprint real email repeat experiments section real emails 
collected total spam email messages www org 
histogram cdf representations size distribution shown 
order get idea small modifications spam email common practice spammers variant fingerprint techniques fully categorize email set uniqueness 
personally confirmed results 
junk emails unique junk emails 
modified copies unique ones 
exact copies unique ones 
statistics see junk emails modified version despite believe collectors archive strive eliminate duplicates 
means changing email sent really common technique spammers prevent detection user 
robustness test modified copies popular junk emails archive copies 
standard result human processed accurate 
fingerprint vector size set jf 
vary threshold matching fingerprint collect detected failed number 
table shows successful detection rate thres satisfying 
false positive test collect normal emails compose half newsgroup posts half personal emails project members 
thres detected failed total succ 
table 
robustness test real spam emails 
tested modified copies emails copies 
jf 
match fp pairs probability table 
false positive test real spam emails 
tested normal spam pairs 
jf 
expected latency ms mark rate ttl success probability vs expected latency ttl fig 

finding ideal ttl 
graph shows marked document correlation ttl values queries probability successful search percentage nodes network marked 
doing experiment expect collisions common due common words phrases objects emails 
full pair wise fingerprint match vector size unique spam emails legitimate email messages 
table shows non spam email messages matched spam message fingerprints 
raise match threshold fingerprints matches 
match threshold matches 
conclude false positives threshold value rare real text samples 
efficient fingerprint routing ttls wewant explore fingerprint routing algorithms realistic context 
specifically consider additional factor mark rate portion users network actively report particular spam 
user marks spam message publishes fact registering opinion network 
example mark rate means user population actively marked message spam 
simulate trade bandwidth usage mark rate search success rate simulate searching randomly generated fingerprints transit stub networks vary required number overlay hops find match mark rate 
assume users marking spam randomly distributed 
efficient dolr layer users mark document spam fewer number hops expect query travel finding match 
set ttl value queries conserve bandwidth maintaining reasonably high search success rate 
performed experiments transit stub topologies nodes latency calibrated network diameter ms 
tapestry network nodes experiment repeated randomized overlay node placements 
aggregating data placements topologies reduced standard deviation data points 
results show expected latency success probability queries function number hops allowed query ttl 
high correlation ttl value network distance traveled ms plot ttl associated network distance 
example see queries ttl topologies travel distance approx 
ms 
publication rate expect queries successful time 
note time live value overlay hops results high probability finding existing document reported small portion participating nodes 
related large amount structured peer peer overlays :10.1.1.111.1818:10.1.1.140.3129:10.1.1.28.5987:10.1.1.118.8846:10.1.1.1.4310:10.1.1.16.4785:10.1.1.105.3673
tried clarify interfaces protocols export applications including distributed hash tables dhts decentralized object location routing layers 
proposal designed dolr systems implemented top dhts minor modifications 
furthermore protocols tapestry network proximity metrics constrain network traffic benefit performance optimizations 
discusses feasibility doing keyword web search structured networks thought instantiation proposal applied text documents keywords features 
scheme inverted indices keywords features assigned different nodes maintained structured overlay location routing primitives 
tries gauge feasibility propose specific implementation 
context approximate text addressing centralized text similarity search studied problem 
comprehensive discussion 
includes discussion grams similarity search exact search facility 
specific technique category forms basis approach checksum fingerprints :10.1.1.106.2691
broder examined probability different strings colliding identical single fingerprint 
contrast focus collision probability entire finger print vectors 
appendix consider probability changes fingerprint vector different document modification patterns 
spam filtering schemes proposed deployed 
schemes hashing fuzzy hashes including proposal collaborative utilize community consensus filter messages 
systems include main components hash functions generate digests email messages repository known digests corresponding emails spam 
system differs group digest repository fully decentralized queries deterministic default existing results matter 
ensures scalability accuracy 
big family spam filtering schemes machine learning :10.1.1.48.1254
schemes filter incoming messages symptoms trails spam emails identified explicitly implicitly training process 
personalized user preferences email content perform client machines 
filters systems user local information allow cross user collaboration difficulty identifying new spam emails different seen local user 
ongoing implemented basic approximate dolr approximate text addressing prototype java implementation tapestry exploring additional optimizations extensions 
prototype proposed spam filtering system implemented available including node component implemented tapestry application user interface implemented microsoft outlook plug direction deploy longrunning service provide valuable service collect valuable trace data 
considering extending system handle predicate queries 
proposed design approximate location extension dolr systems described approximate text addressing facility text objects 
discuss issues data consistency performance optimizations system design decentralized spam filtering system key application 
validate designs simulation real data show tune fingerprint vector size query ttl improve accuracy reduce bandwidth usage query latency keeping low false positive rate 

broder applications rabin fingerprint method 
sequences ii methods communications security computer science santis vaccaro eds 
springer verlag pp 

fully functional prototypes ata layer spam filter available download www cs berkeley edu zf 
dabek zhao druschel kubiatowicz stoica common api structured overlays 
proceedings iptps berkeley ca february 

distributed checksum clearinghouse 
www com anti spam dcc 

harvey jones saroiu theimer wolman skipnet scalable overlay network practical locality properties 
proceedings usits seattle wa march usenix 

hildrum kubiatowicz rao zhao distributed object location dynamic network 
proceedings acm spaa canada august 

li loo hellerstein kaashoek karger morris feasibility peer peer web indexing search 
nd international workshop peer peer systems berkeley california 

manber finding similar files large file system 
proceedings winter usenix conference 

maymounkov mazieres kademlia peer peer information system xor metric 
proceedings st international workshop peer peer systems iptps cambridge ma march 

mozilla spam filtering 
www mozilla org spam html 

ratnasamy francis handley karp schenker scalable content addressable network 
proceedings sigcomm august 

rowstron druschel pastry scalable distributed object location routing large scale peer peer systems 
proceedings ifip acm middleware november 

sahami dumais heckerman horvitz bayesian approach filtering junk email 
aaai workshop learning text categorization madison wisconsin july 


org 


www com 

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
proceedings sigcomm august 

razor 
razor sourceforge net 

witten moffat bell managing gigabytes compressing indexing documents images second ed 
morgan kaufmann publishing 

zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing 
tech 
rep ucb csd berkeley april 
analysis robustness text fingerprinting give mathematical analysis compute probability distribution number unchanged fingerprints text document small modifications 
define original document original document modifications document divided consecutive substrings length characters fig 

relationship fig 

update chars 
fig 

insert chars 
fig 

delete chars 
set checksums calculated substrings set checksums calculated substrings checksums checksums checksums original checksums fp fingerprint vector generated checksums fp jf fp fingerprint vector generated checksums fp jf jsj set vector jsj represents size jf fp number checksums new fingerprint vector old fingerprint vector refer illustration define probability checksums fp obsolete define probability checksums fp newly generated pr pr jf xj jxj jaj jxj jaj pr pr jf jy jbj jy jbj 
fp composed checksums fp checksums newly generated set checksums new checksums fp fp 

fp composed checksums checksums fp checksums new checksums fp fp 
max 
pr pr pr pr pr pr pr define jf fp probability checksums common fingerprint vector new document old document 
pr jf fp pr jf fp pr knowing jx jy apply results equation equation get probability number unchanged fingerprints modification document 
jx jy related modification pattern consider get jx jy changes checksums modification operation types operations update characters jx jy illustrated 
insert characters jx jy illustrated 
delete characters jx jy 
illustrated 
equals union equals union modification exactly compute jx jy modification jx ranges max jx jx jy ranges max jy jy compute approximate average jx jy specific pattern modification operations equations 
equation compute probability distribution number unchanged fingerprints fingerprint vector 

