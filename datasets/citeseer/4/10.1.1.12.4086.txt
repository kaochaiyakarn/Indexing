linearly typed assembly language james cheney cornell university ithaca ny greg morrisett cornell university ithaca ny today type safe low level languages rely garbage collection recycle heap allocated objects safely 
ltal safe low level simple language stands guarantees safe execution xed memory space relying external run time support 
demonstrate expressiveness ltal giving compiler functional core ml 
independence comes steep price ltal type system imposes discipline linearity ensures memory reused safely prohibits useful kind sharing 
results experiments prototype ltal system show just high price linearity 

background motivation safety certi cation systems java bytecode veri cation possible verify safety code obtained untrusted provider untrusted network 
re nements proof carrying code typed assembly language possible check execute machine code directly interpretation 
widely systems verifying low level code require trusted run time environment provide safe memory management 
furthermore systems takes ad hoc approach initialization heap allocated objects 
wang appel saha shao shown build type safe garbage collector ideas capability calculus eliminating memory management trusted computing base 
trusted code required implement region primitives region calculi systems relatively complicated 
furthermore region approaches address initialization problem 
step back examine foundational approach issues initialization memory permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
management low level code 
particular linear type system provide clean elegant solution problems 
speci cally 
linear type system conventional mips style assembly language called ltal 

theorems show typed ltal program sound leak free uses bounded memory 

encoding memory management operations malloc free ltal 

techniques compiling unrestricted non linear high level functional languages ltal fashion 
important note consider resulting system practical 
price ltal simplicity elegance support shared data structures 
rst restriction preclude ltal target high level languages 
show type preserving translation high level ml language ltal explicit copying 
unfortunately experiments show naive translation far practical 
think ltal serve important core realistic systems 
course idea employing linearity new researchers proposed linear languages implementation techniques implementing functional languages garbage collection bounded space 
approaches carry type information way realistic assembly language 
aspinall developed heap bounded assembly language variant tal employs linearity guarantee nite heap usage direct memory management 
tailored serve safe target language hofmann rst order linear functional programming language 
includes pseudo instructions memory data structure management assumes presence unbounded stack supports polymorphism higher order functions 
previous proposals typed resource conscious intermediate low level languages include walker crary morrisett capability calculus smith walker morrisett alias types walker watkins linear region calculus 
systems clearly powerful ltal permitting form direct control memory 
techniques complex involves combination type level named memory locations singleton name types bounded quanti cation 
provide unconditional guarantee safety rely outside run time support memory management trusted implementation regions 
contrast ltal aim simplicity obtaining strong memory management safety guarantees 
remainder rst give overview ltal language emphasizing departures tal 
section describe simple compiler non linear functional language ltal linear intermediate language 
summarize proofs relevant soundness memory preservation properties ltal section 
section describes extensions ltal polymorphism recursion datatypes laziness informal level 
section describe implementation typechecker ltal compiler translation section 
serves proof concept microbenchmark results 
give overview related directions safe low level memory management 

overview linear tal syntax syntax ltal code follows operands op instructions add op op ld mov op mul op st sub op blocks jmp op halt operands include register names integer values code labels instructions representative subset mips assembly language usual interpretation 
instance ld loads word memory effective address computed adding contents register set places word destination register give formal operational semantics instruction section introduce suitable machine 
tal group instructions blocks jmp halt terminated sequences instructions 
ltal include pseudo instructions alloc free cons nil case 
ltal include labels heap data opposed code labels 
data labels added ltal constraint linear types escape global types see section 
global labels necessary rest presentation omit added complication 
operational semantics call sets integer constants register names data labels code labels instruction blocks names int reg lab block respectively 
write disjoint union nite partial maps partial map write ffx 
yg partial map resulting updating indicate dom dom holds 
components operational semantics de ned follows values int lab heap values hv heaps heap lab hv register les ile reg code sections block operand op register code label integer write op value op register le operational semantics ltal essentially tal omission built malloc instruction 
program state triple consisting current heap current register le contents current remaining instruction sequence 
write indicate program code section steps state step 
relation de ned add op rfr 
op op op ld rfr 
mov rfr 
op mul op rfr 
op st 
fi 
gg sub op rfr 
op jmp op op instructions ect domains heap register le code section 
memory code registers created destroyed execution 
program state stuck instruction sequence remaining halt transition program take 
happen ways 
register code label data label may domain register le code section data section 
real machine result hardware exception memory protection fault 
second contents register memory location may unexpected sort 
real machine sorts may distinguishable run time program put memory inconsistent state failing immediately 
machine corresponds undesirable behavior real machines 
type system ltal includes operand types describe contents register instruction operand 
unrestricted types int cell code operand types 

memory types register contexts fr rn ng machine words interpreted integers type int 
cell type cell indicates uninterpreted machine word 
di erence int cell int may arithmetic conditional branch instructions cell values may overwritten 
words interpreted code addresses types form code register le typing context 
type indicates value address called current register context matches appropriate instantiations type variables code labels procedures typically include register code label type indicating register contains return address 
types unrestricted values may copied ignored cast cell desired 
restricted linear types include type variables types existential recursive types 
type variables restricted instantiated restricted types 
come avors indicates memory block having type indicates null zero 
memory types include simple pairs written emphasize linear nature 
existential types usual form types restricted 
recursive types standard 
include explicit pack unpack roll unroll forms leave type reconstruction annotation design choices implementations 
ltal program collection labeled blocks fl ing code typing context fl ng 
tal typecheck program typechecking block context blocks typecheck block updating typing context ect instruction register types 
typing judgments simpli ed form 
write gif indicate register context instruction formed changes context actual rules appendix 
typing rules arithmetic instructions straightforward rd rs int intg arith rd rs rd int rs int intg arith denotes add mul sub 
source registers type int target register unrestricted type case may source registers 
operation registers type int 
control ow instruction typings similar tal 
encounter jump check branch target type matches current context possibly modi ed take account new type information arising conditional branch 
possible perform instruction word type argument 
branching type lets distinguish run time nullable null 
int code code intg main novelty typing mov instructions memory accesses ld st move instructions cell linear move 
loads load register unrestricted type render loaded component memory cell unusable alias giving type cell 
cell ig st ig ig ld cell ig express linear tal st ld inverse operations similarly loading storing set 
simpli ed forms real rules see appendix emphasize inverse relationship 
real rules permit copying unrestricted data 
rules swap types memory cell register actual operational behavior swap values behavior move load store instructions usual 
typing forbids reusing source value 
clearly introduce cisc swap instruction subsuming behavior ld st supporting exchange types cell 
previous versions tal included initialization ags types junk values simple subtyping system bridge gap allocation initialization 
ltal machinery necessary 
uninitialized memory cells type cell initialized 
recursive types de ne freelist type ist implement allocation deallocation operations primitive 
example code constructs pair allocating freelist terminating program memory available fr cell halt fr cell rf mov ld rf st st fr hint inti rf typing branch instruction rst unroll de nition ist order expose nullable 
type re ects change typing information arising fact non null 
rest block containing branch typed cell 
frequently allocation happens right deallocation optimize away branch tell type succeed 

compiling linear tal primitive source language call byvalue simply typed calculus integers pairs abbreviated 
syntax language types int terms values hv contexts ranges integer constants ranges denumerable set variables 
usual free occurrences bound consider terms modulo equivalence 
write capture avoiding substitution free occurrences omit integer operations conditionals easily added 
large step semantics programming language rules de ne judgment meaning expression evaluates value hv hv typing judgment de ned 
int linear closure conversion introduce linear intermediate language lil type system requires precise accounting dynamically allocated data structures 
particular values pair type freely duplicated forgotten 
value exactly 
integer function values may copied forgotten restrictions 
corresponds fact need dynamically allocate space primitive values registers pairs 
minamide represent closures data structure consisting closed code environment 
type environment held existential ensure translation closures uniform 
source level closures type di erent environments existential type environment types target language environments explicit uniform type closures 
source language supports arbitrary duplication forgetting resources pairs closures 
translation linear intermediate language realizes explicitly copying deallocating data structures needed 
instance building hx xi int int int int int int involves doing deep copy constructing desired pair resulting separate copies unrestricted types integers functions copied freed restriction 
absence types type variables copy free data structure crawling fashion 
longer works need copy value type 
source language types closures translation introduces types give uniform translation closure environments 
augment closure additional methods copying environment deallocating environment 
syntax linear intermediate language unit int hi pack hx hi hv pack 
hi unit 
int ftv 

ftv 









hx 

pack 

ftv 



type system lil abbreviate free types split unrestricted types unit int function types associated tracked memory resources versus linear types may 
turn correspond restricted linear types ltal level 
function type deserves explanation 
linear implication intuitionistic implication 
denotes function argument linearly reusable 
linear logic terms 
functions linearly closed may refer closed functions linear argument 
operational semantics similar source language includes rules forms hv hx pack type system intermediate language ensures linear values exactly 
judgments terms form 

set type variables scope set variables scope types 
contexts order sensitive 
mean dom dom dom exists words operation allows duplication variables unrestricted type 
weakening unrestricted assumptions explicit additional rule 
write context contains function typed variables 
gives typing rules lil 
rule code types ensures code closed depends parameter functions scope 
rules variants typical linear type rules 
type translation source lil translation shown 
source level closure type translated target level term consisting components 
environment type held 
apply method takes argument environment produces result 
copy method consumes environment produces copies 
free method consumes environment returns linear unit unit 
lift type translation type assignments follows auxiliary de nition unit term translation 
translation assumes distinguished variable env refers data structure holds values free variables needed evaluate expression 
resulting translated expression produces value type copy environment 
critical invariant env 
forbid reordering source type environment translation 
term translation depends auxiliary meta level functions copy free shown de ned induction structure source language types 
functions implicit reuse discarding context components source language explicit copying deletion linear language 
correctness proofs type semantic correctness translation lil draw proofs similar results minamide typed closure conversion translations 
lemma 
derivable exists env 
proof 
straightforward induction derivation 
prove semantic equivalence de ne simulation relations source terms substitutions hand target terms 
definition 
de ne ground simulation relations relating closed source target values relating closed source target expressions follows int hv hv app copy hv free hi int int app copy free unit app copy free lil type translation int hi envi hx envi env hx copy hx hx hy envi env hx envi hx hy hx envi hx envi hhx envi hp envi hx free hx envi hp envi hx free hx envi hc envi hx envi happ envi envi copy env copy env copy env free env free env app env hr envi free env happ pack hc envi app happ lil translation copy copy int hx xi copy hx yi hx copy hy copy hhx hx ii copy henv happ copy env happ happ pack pack hc free unit free int hi free hx yi free free free henv happ free env de nitions copy 
free 
translation environment explicit need unusual simulation relation source substitutions expressions target expressions definition 
substitution mapping source variables source terms 
write indicate dom dom dom 
extend ground value equivalence substitutions satisfying follows hi fx 
vg hv envi env de ne contextual simulation 

follows hv envi env rst need show copy free macros advertised translations source terms 
suces check properly closed values lemma 
assume copy hv free hi 
proof straightforward induction de nition real insight invariants needed prove case function types need built prove simulation theorem 
suppose env derivable 
proof 
induction derivation interesting cases variables applications abstraction 
companion technical report preparation contains full proofs 
generating linear tal code describe simple translation assembly language performs minimal register allocation optimizations extent possible linear tal just ordinary assembly language 
assume registers rs stack register ra answer register ru temporary registers freelist register rr return address register 
type translation follows unit int int int ht ist cc ra ru cell ist rr cc ht cell cc cell integers represented words pairs pointers memory blocks existentials type variables corresponding forms ltal 
translation functions expresses simple calling convention 
procedure call argument passed stack consists unspeci ed additional contents result register ra caller save temporary register point important callee save temporary ru may refer type freelist register rf point freelist return register contain appropriate return address requires function argument popped stack disposed leaving stack remainder result return register ra rr refer important rf point freelist ru contain original contents translation restricted unrestricted il type restricted unrestricted ltal type respectively 
translation context iterated tuple ht cell introduce macros greatly simplify translation 
alloc free macros assume points freelist macros assume distinct point important 
completely precise label alloc macro needs type depends heavily context omit level detail favor clarity 
tell type rf cell head list branch operation alloc removed 
alloc rf halt mov rf ld free st mov rf push alloc st st mov pop mov ld ld free drop ld free mov rot ld st mov mov ltal macros assume functions lifted top level program sequence bindings functions variables followed program body 
function applications function variables data 
introduce auxiliary judgments toplevel expressions 
function program bodies context binding top level function names types 
rules judgments rules judgments ordinary typing rules rule omitted 
guarantees application heads function variable names bound shows code generation translation lil ltal 
speci label ls entry point entire program 
generate canonical label lil bound function name generate fresh local return address label lr translated application 
taken liberty presenting simple completely accurate translation terms re context translating branch split parts typecheck subexpressions want shape environment stay don want split stack linear environment splits 
completely formal type system judgments 
shape domain linear types may attened replaced unit 
essentially implementation works 
translation variable accesses slightly tricky 
treat context ordered list implemented nested memory cells 
linear setting possible traverse list modifying 
look variable environment traverse initial segment corresponding saving auxiliary list copy restore environment 
accomplished aid macro rot moves head cons cell nonempty list starting drop rs jmp rr ls cc cell cc cell jmp rr 
int mov ra 
hi unit mov ra 

unit 

mov ra 
ld ra rs 
rot ru rs 
rot rs ru 

push ru ra 
push rs rr rot rs ru mov rr lr jmp ra lr cc cell pop rr rs 

push ru ra 
rot ra ru 
hx 
rot rs ra push rs ra 
drop rs drop rs 
pack 


push rs ra 
drop rs 

push rs ra 
drop rs lil ltal term translation possibly empty list starting extremely inecient way accomplish simple task ignore linearity restriction easy lookups approximately instructions average 
lookups common turns important source ineciency ltal 
correctness highly schematic description translation lil ltal 
type correctness translation precise need explicit form translation 
view results translation triple instruction sequence code section code type context set labels 
result translation pair 
definition 
code section signature formed respect code section disjoint satisfying write theorem 
derivable satis es 
derivable satis es type satisfying 
cc cell cc cell relative code context believe possible show translation il ltal preserves operational behavior compiler correct 
type correctness argues favor 
formalizing proving hard defer 

formal results tal ltal satis es type soundness relative operational semantics type safe program get stuck 
requires checking program wellformed heap register le typecheck respect current register context 
handle de ning judgments characterize single pointer property need 
soundness entails memory conservation program terminates normally memory result computation reused 
worth pointing judgment special case heaps possible worlds view kripke style semantics bunched implications interesting connection plan investigate :10.1.1.24.6526
choice notation observation similar choice 
follows xed code section signature lemma progress 
exists key proving type preservation ensure type register le changes register le heap change way compatible single pointer property 
lemma conservation 

exist types 

lemma preservation 
theorem soundness 
stuck 
easy verify memory cells created destroyed 
memory cells orphaned execution type safe program conversely execution stuck result memory management error problem 
course programs halt time leaving heap mess result little unsatisfying 
translation uses halt terminate program runs memory programs terminate successfully calling exit continuation guaranteed leave memory consistent state memory answer restored freelist 
consider deal situations running memory gracefully exception handling section 

extensions source language doesn deal really interesting features functional languages datatypes pattern matching recursive functions polymorphism control operators laziness 
dealing recursion straightforward surprisingly linear setting 
datatypes polymorphism fairly easy deal complicated implementation 
section describe simple extensions 
laziness rely crucially sharing dicult impossible accommodate ltal discuss options supporting 
ltal memory model primitive supporting essentially cons cells real languages employ wide variety memory models discuss possible extensions ltal support models 
easy handle features recursion ltal supports recursion blocks typechecked context code labels 
source intermediate languages 
easy add standard syntax recursively de ned functions source intermediate languages usual typing operational semantics rules 
lil require function refer function labels ordinary functions recursive functions refer functions 
fix fix recursive functions translate closures application function copies environment constructs new closure proceeding body function 
fix mkc copy env copy env free env free env happ envi envi copy env happ pack hc envi app fix app env hx envi env env mkc happ envi env hx envi hr envi free env mkc happ envi translation recursive functions list ht copy free copy free type translations extensions source lil translation recursive functions 
activity constructing closure recurs top level closure construction inside application function introduce new function mkc application function environment constructs closure 
copy environment application rst need split function argument rest environment 
extending mutually recursive functions straightforward tedious 
drawback simplistic encoding recursive functions closure copied recursive call 
alternative possibly better approach de ne app require caller function free environment call 
permits recursive functions implemented threading single context recursive calls 
lists datatypes lists arbitrary types easily added source linear il 
type translation lists ltal shown 
extending term translation deal cons nil case expressions easy 
deal arbitrary user de ned datatypes introduce singleton integer types union types lines encoding recursive types alias types dtal 
polymorphism important feature shown implement parametric polymorphism 
ltal supports polymorphism source intermediate languages 
easily add universally quanti ed types source lil usual way 
main problem translate polymorphic source level types values lil types may freely copied forgotten source language lil 
approach take restrict polymorphism function types parameterize polymorphic functions copy free functions arguments 
type translation augmented approximately shown 
unfortunately encoding interact closure conversion closure conversion integral translation lil 
currently looking way simplify translation splitting phases linearization phase adds copy free functions abstractions source language closure conversion 
existential types supported 
polymorphism source lil translation existentials straightforward handle closures special case 
exceptions continuations ltal includes halt instruction escaping situations running memory cleaning 
prefer exception handling mechanism programs run unexpected situations backtrack attempt recover 
kind behavior necessity systems program expected reasonable matter happens 
nice able handle rst class continuations callcc 
unsurprisingly answer continuation passing style conversion 
linear setting complications 
calling exception handler ltal programs dispose storage allocated handler installed 
second noted forms control ow exceptions coroutines accomplished linear cps translations forms rst class callcc 
intuitively reason copying continuations requires copying world 
light result expect kinds control ow easier implement ltal require maintaining copy world free world functions computation 
garbage collection counting ltal tries pretend garbage collection part functional programming world important ltal exist 
fortunately linear logic provides bridge back intuitionistic logic ts purposes exponential modality 
course 
linear logic valid proposition copied forgotten restriction models garbage collected values perfectly 
easily add new unrestricted types 
ltal lil allow coerced unrestricted aliases linear data may escape garbage collected memory components heap cell want unrestricted unrestricted 
prevents accidentally recycling shared cell 
alternative approach permit sharing reclamation interpret types counted pointers 
previous readings linear logic higher level abstraction ltal clear push counting interpretation way linear level introducing counting :10.1.1.24.9456
hard handle features laziness compiler call value language dicult support call name evaluation ltal translating source expressions suspensions standard techniques 
ecient call need implementation easy sharing allowed 
easy incorporate ltal 
group laziness roughly equivalent terms diculty thunks implemented strict language ml simulated lazy language haskell monads 
real problem dealing ltal sharing addressed section 
rst discuss intriguing alternative 
hearn reynolds described translations languages idealized algol ia syntactic control interference sci polymorphic call name linear calculus similar lil :10.1.1.141.7192
ia sci higher order imperative languages stack allocation call name parameter passing integer 
target language includes types function types translation 
believe possible compile target language ltal 
ia sci provide statically scoped integer problems higher order storage unrestricted deallocation 
sharing functional languages expect data sharable copying accomplished copying pointers 
ltal specifically forbids sharing 
quite 
known techniques controlling aliasing added ltal 
heavyweight approach probably augment ltal type system alias types powerful complex approach dealing aliasing 
wadler approach linear typing linear values may temporarily shared 
operator long aliases escape body expression 
walker watkins linear region calculus focuses tracking regions individual cells includes sharing operation similar 
uses region names guarantee aliases escape 
additional variations theme vault clean cyclone programming languages 
separation logics reasoning pointer programs may er compelling alternative name sharing 
repeatedly observed alias types similar ways pointer logics 
believe investigating relationship may lead powerful ad hoc sharing mechanisms 
interesting note aforementioned analysis hearn reynolds ia sci linear logic superseded interpretations employing separation bunched logics :10.1.1.24.6526
cons cells model memory primitive assumes memory blocks words 
presentation proofs soundness memory preservation relatively simple functional languages execute simple architecture 
desirable able atten large data structures 
approach easily extended accommodate need allowing arbitrary tuples words memory types 
price exibility slightly complicated essentially typing rules 
serious defect ltal lookups environment constant time require traversing linked list 
incorporating tuples pairs cost somewhat cost transparent memory management 
managing temporary data storage intermediate values generated construction pair requires relatively heavyweight alloc approach 
far convenient stack store environment 
lookups temporary stack allocation constant time operations stack allocation deallocation multiple cells coalesced single operation 
experimented incorporating simpli ed form stack types linear tal yielding linear stack tal 
currently performs stack ow checking memory bounded typical performance better 
compare ltal section 
unrealistic aspect ltal programs expect memory organized freelist prior execution 
better view memory contiguous segment words page provided operating system broken blocks desired sizes needed restored adjacent blocks freed 
approach related taken orderly linear lambda calculus stack logic approach addresses general dynamic memory management :10.1.1.141.7192
focuses garbage collection architecture deallocation implicit describes stack allocation deallocation heap deallocation 
yu shown build certi ed malloc free memory manager separation logic 
approach pcc expressive complex type system develop 

implementation implemented typechecker interpreter ltal certifying compiler source language ltal translations described section 
implementation written ocaml consists lines code 
implementation includes recursive functions lists partial implementation polymorphism outlined sections 
toy implementation intended proof concept shake bugs type system run real programs 
rest section describe experiments suggest ltal programs just inecient feared 
realize prove www cs cornell edu releases ltal ltal file cs hp cs hp stk fact ack fib tabulate map filter rev sum table ltal performance microbenchmarks 
write bad compiler 
believe results shed light relevant issues worth presenting 
implementation performs optimization phases lil prior generating ltal code 
optimizations include copy propagation inlining dead code elimination 
implemented lil copy free operations explicit temporarily order perform copy free elimination optimizing away copies results just freed afterward 
optimizations crucial reducing ineciency resulting code complexity typechecking acceptable level 
implemented stack variant ltal called 
includes downward stack type push pop instructions 
environment stored stack environment accesses take instructions expected programs smaller faster pure ltal ones 
written microbenchmarks ltal gauge 
benchmarks include simple arithmetic functions factorial ackermann function fibonacci sequence list examples including constructing reversing ltering mapping summing lists 
include code size cs thousands instructions total number instructions executed thousands heap size hp rounded nearest byte page 
indicate pages stack space stk needed 
list examples lists size 
results shown table 
results show rst ltal programs remarkably space time inecient 
naively compiling higher order functional programs linear closures copied freed recursive call results far bookkeeping copying freeing relative actual computation 
bookkeeping crosses abstraction boundaries dicult optimize away 
simple functions list traversals incur memory overheads concomitant slowdowns copying far excess really needed simple functions map filter rev problems fault simplistic source lil translation ltal possible hand code functions eciently ltal 
example hard hand code factorial function approximately instructions requires heap allocated memory 
see comparing environment lookups big part problem 
storing environment stack results dramatic improvements code size running time 
code size typically shrinks heap ltal size running times improve factor 
improvement memory footprint pronounced 
small examples improvement resolution page metric capture larger examples typically save page 
sense intermediate language exclusive reliance pairs 
compiling explicitly linear source language performing advanced analyses detect existing linearity certainly result signi cant improvement 
preliminary experiments compiling language ltal indicate exploiting existing linearity decrease code size factor decrease memory usage running time factor 
examples direct comparison higher order functions filter map expressed 

related idea linearity implement functional languages garbage collection long history 
focus closely related strongly uenced 
lafont linear machine early approach showing translate linear functional programs instructions linear machine recycled memory directly 
wadler early proponent linearity support imperative features purely functional languages wakeling runciman studied practical advantages drawbacks linear implementation techniques 
baker proposed employing linearity lisp manage memory garbage collection 
chirimar gunter riecke gave counting interpretation linear logic explicit copies frees corresponded counting operations :10.1.1.24.9456
compared interpretations call name need value calculi linear logic turner wadler studied properties call value call need interpretations :10.1.1.40.6828
hofmann linear rst order functional language list tree data structures space usage tracked programs compiled programs allocate new memory 
aspinall shown translate variant tal provides space usage guarantees 
data structures lists trees dealt built instructions plain assembly language ltal 
aspinall hofmann incorporated usage annotations allow sharing 
approach encoding duplicatable closures linear language super cially related benton encoding linear term calculus system exponentials encoded coinductive datatypes existential quanti cation 
objective prove strong normalization compile programs 

summary linear tal safe low level language stands require outside run time support garbage collector operating system guarantee safe execution xed memory space 
ltal relatively simple expressive compile functional core ml 
far know certi ed code technique combines levels transparency independence expressiveness 
independence comes steep price 
ltal linearity discipline prohibits useful kind sharing 
disastrous consequences naive compilation highlevel non linear functional languages ability copy taken granted 
furthermore ltal accommodate language features laziness rely sharing 
intend generalize ltal support sharing safe low level memory management 
acknowledgments matthew wang contributed signi cantly earlier versions 
dave walker dan grossman provided valuable feedback 

amal ahmed david walker 
logical approach stack typing 
proc 
int 
workshop types language design implementation pages 
acm press 
david aspinall adriana 
heap bounded assembly language 
journal automated reasoning 
appear 
david aspinall martin hofmann 
type system place update 
le metayer editor proc 
european symposium programming pages 
springer verlag 
lncs 
henry baker 
lively linear lisp look ma garbage 
acm sigplan notices 
benton 
strong normalisation linear term calculus 
journal functional programming january 
josh peter hearn reddy thielecke 
linear continuation passing 
higher order symbolic computation 
don box chris sells 
essential net volume common language runtime 
addison wesley 
chirimar carl gunter jon riecke :10.1.1.24.9456
counting computational interpretation linear logic 
journal functional programming 
manuel ahndrich robert deline 
adoption focus practical linear types imperative programming 
proc 
conference programming language design implementation pages 
acm press june 
dan grossman michael hicks trevor jim greg morrisett 
cyclone user manual 
www cs cornell edu projects cyclone online manual 
martin hofmann 
type system bounded space functional place update extended 
proc 
european symposium programming volume lncs pages 
springer verlag 
yves lafont 
linear machine 
theoretical computer science 
lindholm yellin 
java virtual machine speci cation 
addison wesley 
john martin odersky david turner philip wadler :10.1.1.40.6828
call name call value call need linear lambda calculus 
proc 
int 
conference mathematical foundations programming semantics new orleans 
elsevier 
minamide gregory morrisett robert harper 
typed closure conversion 
proc 
symposium principles programming languages pages 
acm press 
stefan saha zhong shao 
principled scavenging 
proc 
conference programming language design implementation pages snowbird utah june 
acm press 
greg morrisett karl crary neal glew david walker 
stack typed assembly language 
journal functional programming january 
greg morrisett david walker karl crary neal glew 
system typed assembly language 
acm transactions programming languages systems 
george necula 
proof carrying code 
proc 
symposium principles programming languages pages paris france january 
peter hearn john reynolds :10.1.1.141.7192
algol polymorphic linear lambda calculus 
journal acm 
leaf petersen robert harper karl crary frank pfenning :10.1.1.141.7192
type theory memory allocation data layout 
proc 
symposium principles programming languages pages 
acm press 
rinus plasmeijer marco van eekelen 
clean language report version 
www cs kun nl clean 
david pym peter hearn yang :10.1.1.24.6526
possible worlds resources semantics bi 
theoretical computer science 
appear 
john reynolds 
separation logic logic shared mutable data structures 
proc 
ieee symposium logic computer science pages los alamitos ca usa july 
ieee computer society 
frederick smith david walker greg morrisett 
alias types 
proc 
european symposium programming volume lncs pages 
springer verlag 
david turner philip wadler 
operational interpretations linear logic 
theoretical computer science 
wadler 
linear types change world 
broy jones editors proc 
ifip tc working conference programming concepts methods sea israel pages 
north holland 
david wakeling colin runciman 
linearity laziness 
functional programming languages computer architecture pages 
david walker karl crary greg morrisett 
typed memory management static capabilities 
acm transactions programming languages systems 
david walker greg morrisett 
alias types recursive data structures 
harper editor proc 
int 
workshop types compilation volume lncs pages montreal canada september 
springer verlag 
david walker kevin watkins 
regions linear types 
proc 
int 
conference functional programming pages 
daniel wang andrew appel 
type preserving garbage collectors 
acm sigplan notices 
hongwei xi robert harper 
dependently typed assembly language 
international conference functional programming pages 
yu hamid zhong shao 
building certi ed libraries pcc dynamic storage allocation 
proc 
european symposium programming april 
appear 
appendix typing rules type formedness formally type contexts 
map type variables signs restrict recursive type variables positive occurrences 
write 
context 
interchanged 
cell 
int 


rn ng 





code code code formedness remaining rules refer implicitly global formed context op 


int 
cell 
op 
op 
op 

op 
op 


op 


op 

op 


op 


op 


op 

op 

op 





int 
op int 
arith op 
int 
op code 
op 

op code 
op 

cell 


ld 

cell 


ld 

cell 
op 

mov op 




st 
cell 



st 
cell 

op code 
jmp op 
halt 


state formedness hv 



program formedness 
code 
