adaptive garbage collection battery operated environments chen kandemir vijaykrishnan irwin dept computer science engg 
pennsylvania state university university park pa kandemir vijay cse psu edu energy important constraint battery operated embedded java environments 
show garbage collector gc tuned reduce energy consumption java applications 
particular show importance tuning frequency invoking gc object allocation garbage creation rates optimize leakage energy consumption 
reduce leakage energy exploiting leakage power optimization controlled gc 
mechanism power supply memory banks hold useful data shut 
implement new adaptive gc mechanism sun kvm optimizes ability shut banks 
evaluation approach various embedded applications shows adaptive garbage collection scheme effective reducing system energy consumption different hardware configurations 
java language environments java enabled devices fast popular embedded computing world 
primary features java attractive embedded energy sensitive environments platform independence write appear proceedings usenix jvm symposium aug research supported part nsf awards nsf career awards 
wolczko sun microsystems palo alto ca mario eng sun com run demand loading compilation remote update execution advanced software development features object oriented programming automatic garbage collection pointer type safety 
battery operated embedded environments employ java believe system designers focus individual components jvm try energy efficient possible :10.1.1.11.9649
amount energy consumed device determines duration battery life 
main sources energy consumption current processors dynamic leakage energy 
dynamic energy consumed component utilized 
contrast leakage energy consumed long power supply maintained independent component activity 
leakage energy insignificant part energy consumption due continued shrinking transistors associated technology changes leakage power important portion energy consumption 
fact shown dominant part chip power budget micron technology 
supply gating effective mechanism reducing leakage energy shuts power supply components idle 
supply gating repercussions 
unit supply gated memory element state memory lost 
second power supply unit period idleness requires hundreds processor cycles 
focus applying supply gating mechanism memory elements control garbage collector gc 
important components java virtual ma chine gc 
gc automatically determines objects program longer 
gc suitable component power memory banks hold useful data access accurate object usage particular performing collection gc turn bank contain live objects 
traditional gc implementation garbage collection generally invoked memory allocate new object requested 
strategy acceptable pure performance oriented jvm implementation energy sensitive environment memory architecture delaying collecting garbage available free memory run may lead wasted leakage energy consumption 
leakage energy expended bank time holds garbage dead objects effectively wasted 
way reducing wasted energy perform garbage collections frequently necessary 
waiting heap space exhausted invoke gc frequently regular intervals detecting dead objects earlier turning power supply memory banks aggressively 
focus embedded java environment demonstrate adaptive garbage collection strategy strategy tunes frequency gc invocations object creation garbage generation patterns lead large energy savings memory 
kvm sun microsystem jvm designed embedded battery operated environments set applications typical hand held devices show energy behavior resulting adaptive garbage collection strategy competitive best fixed allocation garbage collection 
results indicate benchmarks compared best fixed allocation garbage collection adaptive gc strategy incurs performance penalty 
results encourage gc implementors embedded java systems explore adaptive garbage collection strategies 
remainder organized follows 
section presents adaptive gc strategy 
section introduces benchmarks presents gc strategies compared discusses simulation environment 
section gives experimental results showing effectiveness strategy reducing energy consumption 
briefly discuss related section 
section concludes summarizing major contributions giving brief outline planned memory structures typically organized smaller partitions called banks sub banks power performance optimizations topic 
approach garbage collector kvm invoked objection allocation available free heap space insufficient accommodate object allocated 
time object garbage time detected collected object occupies space heap memory unnecessarily 
pure performance oriented environment may problem energy conscious environment cause unnecessary leakage energy consumption 
example suppose bank holds single object garbage time object collected time see bank consumes leakage energy time period larger difference times higher wasted energy consumption 
vital energy perspective detect collect garbage soon possible 
previous gc algorithms known collect objects soon garbage counting problems reclaiming circular structures efficiency problems updating counts 
variants proposed address problems collectors adopted widely 
alternative option increase invocation frequency widely garbage collectors mark sweep collectors employed kvm 
potential savings obtained frequent garbage collection balanced additional overhead required collect dead objects earlier energy cost garbage collection 
accesses heap execution instructions processor gc executes incur additional dynamic energy 
additional leakage energy consumed due increased time expended due frequent invocation gc 
unnecessarily 
obviously important issue come suitable garbage collection frequency balances potential leakage energy savings additional overheads 
difficult see fix gc frequency specific value applications value may suitable applications 
application different object allocation garbage generation pattern 
experimental results detailed section shows really case 
option tuning frequency size bank bank turn bank turn bank time garbage collector invoked 
garbage collection dynamically execution 
section describe adaptive garbage collection strategy tunes frequency garbage collection dynamic behavior application runtime 
basic principle opportunity turn bank holds dead objects garbage collector invoked simple application principle may cause frequent turn turn bank thrashing objects collected collection 
avoid thrashing need additional principle garbage collector invoked certain number objects garbage noted invoking gc possible tell exactly size objects garbage collection phase 
due fact object allocation deallocation patterns exhibit regularity form past history information estimate size dead unreachable objects 
object creation rate garbage generation rate respectively 
assume successive garbage collections invoked times total size live objects heap just total size includ ing unreachable objects heap assume total size objects heap excluding unreachable ones object creation rate time period respectively 
assume similarly garbage generation rate size garbage collection respectively 
expressed garbage live live time invoked strategy estimate object creation garbage generation rates collection say invoked 
values updated adapt values potentially changing heap behavior 
allocation occurs time strategy decide invoke gc gc banks supply gated garbage collector invoked function returns number banks total object size total object size heap right allocation size object allocated 
consider ability supply gate bank differently fast object allocation rate may require re activation supply gated unit short duration time 
due time penalty re activation may beneficial keep power supply bank result re activation allocations 
collection bank supply gated space gc creates allow application run interval shorter implementation measured terms number allocations 
formulation size memory bank 
estimation perfect limit penalty due gc invoked byte allocation collection happens 
overhead adaptive algorithm 
decision making requires simple cal easily obtained adding lines garbage collector codes 
stressed information collection decision making activities consume energy 
true sophisticated heuristic algorithms may give accurate predictions 
algorithms expected complex require detailed past history information potentially incurring significant performance execution time overhead 
experimental setup benchmarks kvm garbage collector sun virtual machine kvm virtual machine designed constraints inexpensive embedded mobile devices mind 
suitable devices bit risc cisc microprocessors controllers little kb total memory available kb storage actual virtual machine libraries 
kvm technology targets smart wireless phones mainstream personal digital assistants pagers small retail payment terminals 
kvm uses different garbage collectors mark sweep 
collectors differ supports compaction 
mark sweep collector passes heap 
pass called mark pass bit marked object indicating object reachable live 
step sweep pass returns unreachable objects garbage pool free objects 
adaptive garbage collection strategy popular collectors generational collector 
compacting collector results non compacting collector similar omitted due lack space 
compacting mark sweep collector kvm permanent objects distinguished dynamic objects 
certain amount space heap allocated permanent objects called permanent space 
useful permanent space marked swept compacted contains permanent objects referenced execution application 
mark sweep part collector non compacting collector 
compaction takes place occasions mark sweep phase size object allocated larger largest free chunk memory obtained sweeping ii permanent object allocated needed permanent objects allocated 
compaction live objects moved heap 
allocating new dynamic object free list checked see chunk free memory space allocate object 
garbage collector called 
garbage collection sweep phase checked largest free chunk memory obtained sweep phase satisfies size allocated 
collector enters compaction phase 
compaction object allocation attempted 
space memory exception signaled 
rest compacting mark sweep collector referred base collector base short 
different versions see adaptive garbage collector performs compared class collectors called allocation collectors call gc mark sweep algorithm object allocations 
conducted experiments different values 
cases collection frequency base collector lower value expect allocation collector generate better energy behavior 
fact expect application value values experiments generates best energy result 
consequently best results gc frequency tuned application behavior 
general may possible may information application heap behavior runtime 
consequently adaptive scheme tries detect optimal frequency runtime 
application set java applications successful adaptive collector generate energy behavior allocation collector performs best application 
applications expect adaptive collector generate better results best allocation collector 
may occur example different phases course application execution phase works best different garbage collection frequency 
expect adaptive collector competitive best allocation collector energy perspective 
architecture simulation environment focus system chip soc architecture executes kvm applications 
soc integrated circuit contains entire electronic system single silicon 
considering fact socs keep getting complex energy demand expected increase significantly 
particularly true memory systems applications run socs data intensive 
soc architecture cpu core main memory modules addition peripheral custom circuitry relevant discussion 
processor soc embedded core 
core mhz bit stage pipelined risc architecture implements sparc architecture specification 
primarily targeted low cost uniprocessor applications 
soc architecture main memory composed parts 
part contains kvm code associated class libraries second part heap contains objects method areas third part holds non heap data contain runtime stack kvm variables 
typically kvm code class libraries reside rom 
rom size kb storage actual virtual machine libraries 
libraries application roms provide energy savings 
activate rom partitions partition 
rom partition disabled turned 
helps reduce leakage energy consumption memory banks application execution 
may possible optimize energy consumed rom techniques clustering libraries study mainly focus ram portion memory commonly embedded environments memory modules holds java application kvm shade instruction level simulator energy parameters profiling info instruction counts memory accesses simulation environment 
energy cost heap 
heap default size kb holds application bytecodes application data target energy management strategies 
additional kb sram storing non heap data 
assume memory space partitioned banks depending heap bank holds live object shutdown saving leakage energy 
bank assumed kb 
objective shutdown memory banks possible order reduce leakage dynamic energy consumption 
note operating system assumed reside different set rom banks optimizations considered 
assume system virtual memory support uncommon embedded environments 
perform energy calculations built custom simulation environment top shade sparc instruction set simulator tool set 
shade instruction set simulator custom trace generator simulates sparc instruction set 
simulator takes kvm system application input keeps track energy consumption processor core datapath chip caches onchip sram rom memories 
datapath energy includes energy spent application execution expended garbage collection 
energy consumed processor core estimated counting dynamically number instructions type multiplying count base energy consumption corresponding instruction 
energy consumption different instruction types obtained customized version validated cycle accurate energy simulator 
simulator configured model stage pipeline similar architecture 
analytical energy model validated actual values similar proposed evaluating dynamic energy consumption memory elements supply voltage threshold voltage 
assume leakage energy cycle entire memory equal dynamic energy consumed access 
assumption tries capture anticipated importance leakage energy micron technologies 
similar abstractions leakage energy modeling employed architectural studies due lack validated leakage energy models 
memory system energy divided portions energy spent accessing kvm code libraries energy spent accessing heap data energy spent accessing runtime stack kvm variables 
simulator allows user adjust various parameters components 
energies spent chip interconnects included corresponding memory components 
study assume memory bank states read write active inactive 
state memory bank read written 
consumes full dynamic energy full leakage energy 
active state memory bank active powered read written 
consumes dynamic energy full leakage energy 
inactive state bank contain useful data 
conservatively assume inactive state memory bank consumes original leakage energy result supply gating 
placing unused memory banks inactive state may save significant leakage energy may cause performance degradation 
specifically bank inactive state accessed service memory request takes cycles transition active state 
term time resynchronization time resynchronization penalty 
mentioned inactive state leakage energy consumption resynchronization time highly implementation dependent affected sizing driving transistors 
values study reasonable conservative 
assume cycle leakage energy consumed resynchronization average cycle leakage energy consumed system active state consumed inactive state 
benchmark codes test effectiveness energy saving strategy collected applications shown table 
applications represent group codes executed energy sensitive devices hand held computers electronic game boxes range utilities calculator scheduler embedded web browser game programs 
believe applications represent mix codes expect run kvm battery sensitive environments 
experimental results stated results reported section value allocations see section bank size kb 
heap energy shows heap energy consumption different versions 
values shown graph normalized respect base collector 
addition base adaptive collector report results set allocation collectors values 
bar normalized energy consumption heap 
results observations 
far allocation collector concerned clearly see different applications best different garbage collection frequencies 
second adaptive garbage collection strategy reduces heap energy base collector kvm significantly average applications heap energy saving 
third benchmark adaptive strategy competitive best allocation collector 
example dragon adaptive strategy comes close allocation collector best allocation collector benchmark 
similarly resp 
adaptive collector generates competitive results allocation resp 
allocation collector 
results clearly show adaptive garbage collection successful optimizing heap energy 
energy objective optimizing energy consumption heap changing frequency garbage collections change energy profile parts system rom memory banks hold runtime stack cpu datapath 
example applications gc executables publicly available www cse psu edu normalized energy consumption static dynamic heap memory 
table benchmarks experiments 
application brief description source calculator arithmetic calculator www cse psu edu crypto cryptography www org dragon game program comes sun kvm electronic map kvm www com decoder www com wml browser www com game program comes sun kvm integer math lib home rochester rr com scheduler weekly daily scheduler www cse psu edu normalized energy consumption breakdown 
frequent collection expected increase energy spent cpu due garbage collection 
analyze behavior give energy consumption components interested 
observe results code experimental suite adaptive strategy comes close best allocation collector focuses energy consumption 
execution profiles better understand energy savings due adaptive garbage collection give data illustrating energy benefits come 
give table number times version invokes garbage collection 
results see adaptive strategy calls garbage collection frequently base collector 
explain reduces heap energy consumption significantly 
fact see table allocation collector calls garbage collection frequently average base collector indicating base collector slow invoking collector 
mentioned earlier calling garbage collection frequently incurs extra runtime overhead 
garbage collector invoked necessary expected save energy powering bank 
see table adaptive strategy calls collection fre quently allocation strategy 
runtime overhead collectors 
considering adaptive strategy competitive allocation collectors see adaptive strategy achieves energy behavior allocators performance penalty 
compared remaining versions calls collection frequently average application responsible average 
shows heap footprints different versions applications calculator dragon 
graphs axis corresponds number allocations course execution 
axis hand represents occupied memory space heap alive dead objects 
horizontal line axis corresponds bank boundary starting bottom bank 
graphs sake clarify show allocation collector base collector adaptive collector 
clearly observe impact changing frequency collections number active power banks required 
focus calculator 
application base collector invoke collection 
observe adaptive collector invokes collection frequently allocation collector true stud ied allocation collectors allocation col 
adaptive collector gc invoked just time new bank activated 
energy savings competitive allocation collectors invoke gc frequently 
noted allocation collector shown activates collections bit late second bank accessed 
hand observe different behavior 
application experiences frequent object allocations putting pressure heap memory 
best energy results obtained calling gc frequently 
consequently adaptive strategy allocation collector shown achieve best result 
adaptive collector strikes balance frequent slow garbage collections 
performance behavior important evaluate performance impact adaptive garbage collection strategy 
table gives version percentage increase execution cycles respect base collector 
see average benchmarks execution time increase due adaptive strategy increases execution times allocation strategies employed 
considering fact strategy competitive allocators far energy behavior concerned performance overhead adaptive scheme acceptable 
example approach competitive allocation collector far energy consumption concerned 
allocation collector increases execution time application larger corresponding increase adaptive collector 
bank size variations recall far experiments performed heap size kb bank size kb 
subsection change bank size keeping heap size fixed kb measure sensitivity results bank size variation 
gives table number gc activations benchmark 
application base adpt calculator crypto dragon scheduler average table percentage increase execution cycles respect base collector 
normalized heap energy consumptions benchmarks dragon 
experiments benchmarks showed similar trends reported detail 
results values normalized respect heap energy consumption base allocator kb bank size kb heap size 
run dragon kb bank size due large inter bank objects allocated benchmark currently implementation allocate objects larger bank size 
observe trends graph 
effectiveness adaptive collection strategy allocation collectors increase reduced bank size 
smaller bank size gives opportunity gc turn heap memory regions finer grain manner 
consequently heap memory space turned 
second adaptive strategy continues follow best allocation collector different bank sizes different bank sizes 
heap size variations subsection fix bank size kb default value report experimental results obtained different heap sizes 
focus results observed application adpt calculator crypto dragon scheduler average benchmarks similar 
heap sizes set experiments kb kb kb default kb 
observe results shown adaptive strategy continues follow best allocation collector performance sensitive heap size variation 
related efforts concerning garbage collector java virtual machine focused optimizing energy consumption 
efforts characterizing energy behavior java applications 
flinn quantify energy consumption pocket computer running java virtual machine 
energy behavior highperformance java virtual machine characterized 
diwan analyzed different memory management policies performance energy perspectives 
closely related 
energy impact various gc parameters characterized kvm attempt design adaptive garbage collector 
contrast proposes adaptive gc strategy tailors invocation frequency maximize energy savings 
results different bank sizes top bottom dragon 
unnecessary leakage energy expended maintaining state garbage objects recognized unreachable collector 
wasted leakage energy proportional duration object garbage time recognized garbage 
invoking gc frequently reduce wasted leakage needs balanced energy cost invoking gc 
show design adaptive gc strategy tailors invocation frequency account tradeoffs object allocation garbage creation frequencies 
implemented adaptive gc commercial jvm showed effective reducing system energy 
benini de micheli 
system level power optimization techniques tools 
acm transactions design automation electronic systems pp april 
chandrakasan fox 
design high performance microprocessor circuits 
ieee press 
chen shetty kandemir vijaykrishnan irwin wolczko 
tuning garbage collection embedded java environment 
proc 
th international symposium high performance computer architecture cambridge ma february 
virtual machine kvm 
java sun com products 
cmelik keppel 
shade fast instruction set simulator execution profiling 
proc 
acm sigmetrics conference measurement modeling computer systems pp 
may 
diwan li grunwald farkas 
energy consumption garbage collection low powered computing 
www cs colorado edu diwan 
university colorado boulder 
flinn back anderson farkas grunwald 
quantifying energy consumption pocket computer java virtual machine 
proc 
international conference measurement modeling computer systems june 
execution footprints calculator dragon different collection frequencies 
results different heap sizes 

hwu 
embedded microprocessor comparison 
www crhc uiuc edu impact ece public html notes lec htm 
jones lins 
garbage collection algorithms automatic dynamic memory management 
john wiley sons 

hu martonosi 
cache decay exploiting generational behavior reduce cache leakage power 
proc 
th international symposium computer architecture june 

analytical energy dissipation models low power caches 
proc 
international symposium low power electronics design page august 
powell 
yang roy 
gated vdd circuit technique reduce leakage deep cache memories 
proc 
acm ieee international symposium low power electronics design august 
taivalsaari 
programming wireless devices java platform 
addison wesley 
vijaykrishnan kandemir irwin kim ye 
energy driven integrated hardware software optimizations simplepower 
proc 
international symposium computer architecture vancouver british columbia june 
vijaykrishnan kandemir kim irwin 
energy characterization java applications memory perspective 
proc 
usenix java virtual machine research technology symposium april 
