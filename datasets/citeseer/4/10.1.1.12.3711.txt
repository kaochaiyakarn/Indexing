codecrawler lessons learned building software visualization tool michele lanza lanza iam unibe ch software composition group university berne switzerland software visualization tools face challenges terms implementation including scalability usability adaptability durability 
tools research tools tend short life cycle vulnerable software evolution processes complex problem domain constantly changing requirements dictated research goals 
discuss implementation software visualization tool codecrawler criteria architecture internal architecture visualization engine metamodel interactive facilities 
discussion generates implementation recommendations design guidelines hold tool class tools stands 
extract common design guidelines recommendations apply software visualization general reverse engineering tools hope insights fruitfully researchers field 
keywords software visualization tools reverse engineering experience report reverse engineering understanding legacy software systems primary concern software industry 
important prerequisite maintenance evolution software systems 
commonly approach reverse engineering software visualization graphical display software 
reverse engineering research community implemented software visualization sv tools addressing different aspects trying offer solutions different problems 
tools advantages drawbacks face problems levels architecture implementation 
tools constantly changed evolved order cope new requirements new platforms new languages new import export formats constant evolution puts pressure researcher tools implements research vehicle primary goal 
built software visualization tool called code crawler development started re implemented times currently developed extended 
codecrawler lightweight software visualization tool combines metrics information visualizations 
mainly targeted static software visualization 
codecrawler implementation changed evolved order cope new requirements research generated 
current design able solve problems encountered static software visualizations 
lessons learned codecrawler generalized common design guidelines recommendations apply kinds software visualization tools 
identify key issues pertinent implementation software visualization tool 
architecture way sv tool structured 
clear separation main subsystems core visualization engine metamodel provides higher flexibility necessary resistant software evolution processes 

internal architecture design core domain model 
simple sight domain model designed extensibility added new requirements terms functionality needed users impact 

visualization engine way information visualized 
sv tools special needs offthe shelf visualization library offer degree freedom needed sv tool provider 
hand writing complete visualization library scratch cumbersome lengthy process burden sv tool provider 
describe compromise solution largely satisfied needs 

metamodel way data collected stored 
part directly related software visualization general common reverse engineering issues separated software visualization tool reused external welldefined source functionalities 

interactive facilities direct manipulation possibilities offered user 
hard validate aspect requires sv tool provider ultimately dictates tool usability success 
discuss implementation codecrawler aspects generalize lessons learned design guidelines recommendations implementation software visualization tools 
hope lessons ultimately profitably researchers field case want start new implementation enhance existing implementation software visualization tool 
structure article 
section introduce domain software visualization 
discussion leads identify criteria want test tool 
section introduce codecrawler tool implemented research group discuss advantages drawbacks implementation context identified criteria 
generalize lessons learned design guidelines recommendations section 
take look related section conclude section summarizing findings 
software visualization price define software visualization typography graphics design animation cinematography modern human computer interaction computer graphics technology facilitate human understanding effective computer software 
ware states visualization provides ability comprehend huge amounts data 
software visualizations simplistic lack visual cues viewer correctly interpret 
cases obtained visualizations complex real value viewer 
goal software visualization tool ultimately visually render software dynamic static fashion 
software visualization useful visual displays allow human brain study multiple aspects complex problems parallel 
software visualization tools face problems coming form general fields information visualization semiotics graphics study symbols convey meaning discussed tufte bertin 
ware describes basic stages process data visualization interestingly stages direct mapping architecture software visualization tools 
collection storage data 

preprocessing designed transform data understand 

display hardware graphics algorithms produce image screen 

human perceptual cognitive system perceiver 
deduce stages components de facto way software visualization tool 
metamodel 
data visualized case software source code collected stored metamodel provides facilities parsing storing 
internal architecture 
data provided metamodel software visualization tool kind internal representation visualizes 

visualization engine 
important part tool devoted graphical output information 

interactivity 
perceiver viewer wants look software times wants interact visualizations static visualizations seldom offer exhaustive explanations viewer 
furthermore union interplay components regarded architecture software visualization tool 
codecrawler codecrawler language independent software visualization tool written smalltalk 
codecrawler supports reverse engineering combination metrics software visualization 
see screen shot codecrawler 
power flexibility simplicity scalability repeatedly proven large scale industrial case studies 
model software codecrawler uses moose language independent reengineering environment 
implementation codecrawler started part master thesis 
codecrawler 
snapshot codecrawler main window 
visualized system case codecrawler 
directly smalltalk language reflective capabilities provide functionalities provided external metamodel 
context esprit project moose implementation famix metamodel completion codecrawler started moose metamodel 
famix provided possibilities language independence java smalltalk ada cobol involved complexity 
codecrawler major releases released october 
newest re implementation described article codecrawler able visualize construct necessarily field software reverse engineering 
architecture software system general architecture software visualization tool dictates hand kind functionality provides hand defines extended case changing new requirements 
codecrawler adopts call bridge architecture described see internal architecture core codecrawler acts bridge visualization engine left metamodel right 
uses visualization engine hotdraw framework metamodel famix metamodel implementation called moose reengineering environment 
described detail 
order keep certain 
general architecture code crawler composed main subsystems core metamodel visualization engine 
flexibility codecrawler uses facade classes hide visualization engine metamodel core 
limit effects changes happening visualization engine metamodel 
advantage facade classes changed visualization engine metamodel changes 
example change newly supported gxl format directly affects moose affect implementation codecrawler adding new menu item codecrawler file menu 
example major change visualization engine 
sight massive change affect visualization engine facade classes 
second moment codecrawler start exploit added third dimension visualizations effect implementation core 
internal architecture internal architecture software visualization tools largely dictated domain model 
depends type visualizations tool provides 
codecrawler focused visualizing static information software working mainly structural level 
visualizations types discussed include algorithm visualization animation computation visualization 
taxonomy price code crawler static code visualization tool 
internal architecture codecrawler things related visualization engine metamodel divided parts core model polymetric views subsystem layout engine user interface service classes 
core model 
see simple class diagram codecrawler core model 
codecrawler uses nodes represent entities classes methods subsystems edges represent relationships inheritance 
core model codecrawler 
access entities 
nodes edges contained class represents graph mathematical sense 
node class edge class inherit superclass represents general item 
serves bridge visualization part contains attribute named points class 
bridge parallel plugin hierarchy contains attribute named plugin points plugin class 
classes plugin hierarchy provide functionality nodes edges 
decided separate functionality hierarchy putting inside node edge classes order obtain flexibility higher degree extensibility 
plugin hierarchy ultimately serves bridge metamodel representing software 
case superclass defines attribute named entity points needed class case visualizing software point class moose represents software artifact 
protect changes metamodel facade classes code crawler implemented hierarchy famix plugins counterparts moose 
example order represent famix class moose called time codecrawler implements class interfaces 
return extensibility implementation obvious students extended codecrawler plugin hierarchy order model visualize kinds entities example fields concept analysis web site reengineering prolog rule repositories 
polymetric views 
information regarding certain visualization visualized metrics stored means view specification class 
comes display view software system view builder instance specification class builds needed visualization 
specifications views easily composed modified view editor window depicted 

codecrawler view editor 
views composed piece piece directly invoked main window 
layout engine 
complex problems go graph drawing graph layouts subject research years 
layout class hierarchy part codecrawler external commercial graph layout library 
reason doing smalltalk freely available standardized layout library case programming languages java 
interfacing libraries written problem decided order keep control possible 
trade having delegating control carefully evaluated 
codecrawler layouts time ca 
inherit common superclass 
layout class takes input collection node figures assigns position 
service ui classes 
classes mentioned codecrawler contains classes provide various services example storing constants color mappings 
classes pure user interface classes dialogs panels 
order keep size reasonable limits omit discussion 
visualization engine primary task software visualization tool visualization engine provide graphical output screen 
see simple class diagram visualization engine 
codecrawler uses visualization engine hotdraw framework lightweight editor written smalltalk consisting ca 
classes 
provides basic graphical functionalities zooming scaling eli 
visualization engine code crawler 
codecrawler subclasses extends basic hotdraw classes 
class hierarchy composed classes model serves facade hotdraw classes 
sion comes collection simple figures rectangles lines ellipses composite figures easily reused extended subclassing code crawler subclasses include represents drawing surface visualization displayed figures classes add functionality quite simple hotdraw classes 
subclasses offer protection changes hot draw subclasses affected 
codecrawler classes organized small hierarchy serve facade classes classes subclass hotdraw classes 
allows replace fly graphical representation node edge 
furthermore facade classes implement operations want effect figures graphical operations geometric transformations delegate appropriate concrete figures screen 
metamodel primary task metamodel collect store data visualized 

architecture moose code crawler metamodel 
codecrawler uses moose language independent reengineering environment written smalltalk model software systems 
see internal organization moose reengineering environment 
moose famix metamodel specification provides language independent representation object oriented source code contains required information reengineering reverse engineering tasks navigation querying metrics refactorings language independent context esprit project needed legacy systems written different implementation languages 
extensible know advance information needed tools 
reengineering problems refactorings tools need language specific information allow language plugins extend model language specific features 
allow tool plug ins extend model tool specific information 
famix metamodel comprises main objectoriented concepts class method attribute inheritance plus necessary associations invocation access 
note complete famix metamodel includes aspects object oriented paradigm contains source code entities formal parameters local variables functions opted uml sufficient modeling source code purpose reengineering specifically targeted representing source code 
moose full fledged reengineering environment provides codecrawler services parsing smalltalk java reading exchange files different formats xmi cdif gxl rsf 
codecrawler uses functionalities provided moose directly delegation subclassing moose classes 
furthermore plugin hierarchy codecrawler contains subtree composed famix plugins serves facade actual famix classes moose 
described detail section 
limit size describe moose point reader referenced articles 
interactive facilities visualization rendered screen user wants look wants interact 
storey helps reduce cognitive overhead visualization 

codecrawler 
context menus dynamically built depending entity relationship selected 
see codecrawler 
code crawler hotdraw framework provides direct manipulation purely graphical level user click drag double click delete zoom spawn child windows codecrawler uses functionality providing context pop menus node edge 
note depending type node class method different choices offered user 
example possible open class browser node look list senders certain method context master group student implemented top codecrawler navigation facilities enable user go back forth view macro navigation offer user context navigation aids micro navigation 
context menus micro navigation located plugin hierarchy context entity 
macro navigation graphical interactions geometric transformations techniques located codecrawler main window 
lessons learned section take lessons learned implementation codecrawler generalize common design guidelines recommendations 
apply static software visualization tools codecrawler wider context visualization tools reverse engineering tools general 
architecture case software visualization tool seen section general architecture readily identified composed visualization engine metamodel core internal architecture 
visualization engine 
provides graphical capabilities sv tool 
cases sv tool provider uses extends commercial external graphical library opengl directx cases implements 
recommend implement graphical library scratch long painful implementation real improvement tool capabilities 
design decision sv tool provider take wants visualization engine 
think involves higher complexity puts pressure direct manipulation issues visualized software interacted navigated 
metamodel 
metamodel provides sv tool data collection data storage capabilities 
metamodel language independent providing representation programming languages time language dependent cases language additional metainformation 
core 
ultimately core part sv tool domain model tool functionalities modeled implemented 
visualization engine metamodel considered external tools evolution directly controlled sv tool provider provide 
involves implementation sv tool core capabilities 
useful provide mechanism protection changes happening visualization engine visualization engine supported anymore date certain platform metamodel implementation changes 
providing right protection mechanisms replace visualization engine metamodel having big impact sv tool core 
case means facade classes general case main point define precise interfaces metamodel visualization engine 
quality stability interfaces ultimately defines stability tool 
internal architecture core task visualization tool visualize parts internal graph representation 
visualization done different means tools visualize nodes rectangles edges connecting lines rectangles 
internal architecture provides functionalities allow visualization 
mainly involves providing guidance user assist process visualization visualized 
static code visualization tools adopted internal representation basic entity relationship metamodel internally represented graph consisting nodes entities edges relationships 
nodes 
nodes represent concrete software artifacts 
concrete artifacts localized source code include classes methods functions packages artifacts localized source code represent abstractions head developers 
examples artifacts groups classes subsystems functionalities edges 
edges represent relationships software artifacts 
identify concrete relationships inheritance relationships invocations methods relationships artifacts 
example relationship dependency subsystems subsystem depends subsystem localized source code 
representation advantage domain independent making mapping domain possible 
domain related information added metamodel general 
parallel domain dependent plugin hierarchy comes play seen parallel plugin hierarchy separate concerns representation graph composed nodes edges mathematical sense including operations go traversing graph getting children nodes domain relevant information node represents certain software artifact information modeled 
alternative encode node edge classes having deep hierarchy items composed classes previous implementation codecrawler adopted model limits terms flexibility soon evident nodes edges classes large item specific functionality encoded 
separation hierarchies practically core model stable constant enhancements additions functionality mainly impact plugin hierarchy 
visualization engine visualization engine sv tool influence prominent aspect visualization 
user perceives tool see internal details 
design decisions taken case include type engine vs degree possible interactivity engine comes third party possibly commercial product sv tool provider chooses implement visualization engine part tool 
engine type vs 
decision heavily influences visualizations provided sv tool 
involves navigation fly computing performance 
added third dimension exploited intelligently easy generate nice looking boxes 
interactivity 
direct manipulation interfaces allow kinds direct interactions known user friendly 
effectively reduce latency perception interest investigation performed user 
user naturally wants click interface reduce dis tance sees thinks sees 
translates kinds interactions selecting moving removing copying inspecting visualized artifacts 
discuss aspect detail 
implementation 
decision third party product possibly commercial impact implementation weight sv tool provider 
naturally third party commercial products stable faster better documented people provide products experienced engaged graphical issues 
easy sv tool provider shift attention visualization part providing nicer faster colorful displays expense semantics ultimately goal sv tool provide meaningful information nice displays user 
reusing graph visualization tools libraries dotty grappa graphviz break implementation time introduce new problems lack control interactivity 
visualization engine merely vehicle goal software visualization tool 
sense choosing right engine important visualization tool interface engine matters 
better defined time tool provider spends engine 
case chose lightweight engine easily extensible provides necessary functionality 
lesson learned choose appropriate engine delegate job visualizing possible engine 
furthermore easier visualize engine better 
case tool provider chooses implement engine recommend lightweight incremental approach strive obtain visualizations quickly possible 
lesson learned keeping control possible visualization engine terms implementation helps increase usability sv tool 
experiments external engines soon reached limit customizable flexible needs 
put simple words total possible control necessary case 
metamodel metamodel sv tool influence internal architecture 
sv tools distinction metamodel internal architecture 
drawback tool monolithic architecture concern metamodel clearly separated parts tool 
sv tool provider interest making separation metamodel comes considerable level com plexity added software visualization tool complexity 
reason complexity resides concerns collection information parsing source code reading writing files various exchange file formats storage querying information databases web browsers 
general lesson separate metamodel concerns possible implementation sv tool 
sv tool interface metamodel reuse functionalities tied prevent mixing concerns 
interactive facilities modern computers allow faster powerful displays 
direct manipulation interfaces possible allow user look information screen interact 
publications books human computer interface hci field point essential give user possibility play displayed information 
user interface design topic limit point importance citing essential literature alan cooper jef raskin jeff johnson 
interactive facilities software visualization tool provides heavily influence quality tool terms reverse engineering 
storey provide list cognitive design elements needed reverse engineering process 
deduce list tool features direct manipulation facilitate navigation providing directional arbitrary navigation time reduces disorientation effects reducing effort user interface adjustment 
put simple words say user ease tool supports interactive visualizations 
implementation level problem interactivity cross cutting concern interactivity provided parts system visualization engine provides graphical interactivity internal architecture metamodel provide context interactivity 
simple example pop menus offer choices graphical level delete spawn window 
context choices dive class node inspect senders method node 
case seen bridge architecture able cope problem context menu built succession facade item plugin user 
solutions problem separate interactive facilities separate classes offer plugins 
related quite extensive research evaluation comparison reverse engineering software visualization tools 
keller compare sv tools functional practical level 
storey ph thesis targeted cognitive aspects software visualization 
gall evaluate reverse engineering tools level offered functionalities terms usability extensibility 
excellent works targeted qualitative evaluation tools 
knowledge explicit implementation architecture reverse engineering tools specifically software visualization tools 
pieces information gathered tools web sites documentation exists publications tool providers 
industrial commercial tool providers disclose information 
best documented software visualization tool know rigi widely decade comes pages documentation 
documentation goal describe functionalities provided rigi way implemented partly inferred 
shrimp views known visualization tool comes set publications targeted cognitive issues 
visualization tools excellent tools come consistent documentation despite open source come badly documented 
lack documentation codecrawler exception mainly due academic environment tools developed 
phenomenon noticed consistent research conducted software visualization tools basically dropped forgotten research finished 
examples research publications include works riva kazman jerding rugaber 
internal architecture software visualization tool identified common problems issues inherent systems various levels 
levels discussed include architecture internal architecture visualization engine metamodel interactive facilities software visualization tools 
architecture 
architecture separates main parts core metamodel visualization engine software visualization tool allows higher flexibility greater extensibility 
time sv tool vulnerable software evolution processes 
core internal architecture 
design core sv tool largely guided goals tool provider mind 
notion graph consisting nodes edges trivial functionality matters added core way functionality tool users 
case codecrawler seen separation graph notion parallel extensible plugin hierarchy 
separation allows great extensibility subclassing addition functionality 
visualization engine 
visualization engine main task bring visualizations software screen 
degree integration sv tool core visualization engine influences quality visualizations 
apart providing protection mechanisms changes visualization engine engine largely responsible level interactivity sv tool offers 
seen light recommend commercial black box products favor products classes easily reused delegation subclassing 
case codecrawler protect changes facade extend freeware lightweight visualization framework called hotdraw 
note visualization engines provide graph layout library 
recommend libraries greatly reduce complexity sv tool 
metamodel 
metamodel task collect store data visualized sv tool 
recommend separation metamodel sv tool order keep focus core functionalities sv tool 
metamodel developed tool provider experience area 
example sv tool provider write parser reuse existing parsers 
interactive facilities 
providing interactive facilities viewer essential quality software visualization tool 
purely technical level provided visualization engine interactions enriched context information provided domain model internal architecture sv tool 
acknowledgments oscar nierstrasz st phane ducasse anonymous reviewers helpful comments 
funded swiss national science foundation project meta models tools evolution component systems 
keller 
software visualization tools survey analysis 
proceedings iwpc pages 
battista eades tamassia tolls 
graph drawing algorithms visualization graphs 
prentice hall 
gall 
comparison reverse engineering tools 
proceedings wcre pages 
gall 
evaluation reverse engineering tools 
journal software maintenance research practice 
bertin 

walter de gruyter 
brant 
hotdraw 
master thesis university illinois urbana 
cooper 
face essentials user interface design 
hungry minds 
cooper 
running asylum 
sams 
demeyer ducasse lanza 
hybrid reverse engineering platform combining metrics program visualization 
blaha rugaber editors proceedings wcre th working conference reverse engineering 
ieee oct 
demeyer ducasse tichelaar 
unified universal 
uml shortcomings coping roundtrip engineering 
rumpe editor proceedings uml second international conference unified modeling language volume lncs kaiserslautern germany oct 
springer verlag 
demeyer tichelaar ducasse 
famix information exchange model 
technical report university bern 
ducasse lanza 
methodology understanding object oriented systems 
technique science 
ducasse lanza tichelaar 
moose extensible language independent environment reengineering object oriented systems 
proceedings second international symposium constructing software engineering tools coset june 
ducasse lanza tichelaar 
moose reengineering environment 
smalltalk chronicles aug 

favre 
generic software exploration environment 
proceedings th international workshop program comprehension pages 
ieee may 
gamma helm johnson vlissides 
design patterns 
addison wesley reading mass 
holt pak 
visualizing software evolution large 
proceedings wcre pages 
holt winter sch rr 
gxl standard exchange format 
proceedings wcre nov 
jerding rugaber 
visualization architectural localization extraction 
baxter quilici verhoef editors proceedings fourth working conference reverse engineering pages 
ieee computer society 
johnson 
gui 
morgan kaufmann 
johnson 
documenting frameworks patterns 
proceedings oopsla pages oct 
published proceedings oopsla acm sigplan notices volume number 
kazman 
assessing architectural complexity 
technical report university waterloo 
lanza 
combining metrics graphs object oriented reverse engineering 
diploma thesis university bern oct 
lanza ducasse 
categorization classes visualization internal structure class blueprint 
proceedings oopsla pages 

storey 
shrimp views interactive customizable environment software exploration 
proceedings international workshop program comprehension iwpc 
ller 
rigi model software system construction integration evaluation module interface specifications 
phd thesis rice university 
price baecker small 
principled taxonomy software visualization 
journal visual languages computing 
raskin 
interface 
addison wesley 
riva 
visualizing software release histories color third dimension 
master thesis politecnico di milano milan 
schweizer 
navigation object oriented reverse engineering 
diploma thesis university bern june 
stasko domingue brown price editors 
software visualization programming multimedia experience 
mit press 

storey 
cognitive framework describing evaluating software exploration tools 
phd thesis simon fraser university dec 

storey fracchia ller 
cognitive design elements support construction mental model software exploration 
journal software systems 
tichelaar 
modeling object oriented software reverse engineering refactoring 
phd thesis university berne dec 
tufte 
envisioning information 
graphics press 
tufte 
visual explanations 
graphics press 
tufte 
visual display quantitative information 
graphics press nd edition 
ware 
information visualization 
morgan kaufmann 
