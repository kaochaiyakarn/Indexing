department computer science university maryland college park maryland 
cs umd edu maintaining software security perspective testing software security lengthy complex costly process 
currently security testing done penetration analysis formal verification security kernels 
methods complete difficult 
essential focus testing effort areas greater number security vulnerabilities develop secure software meet budget time constraints 
propose testing strategy classification vulnerabilities develop secure stable systems 
taxonomy enable system testing maintenance group understand distribution security vulnerabilities prioritize testing effort impact vulnerabilities system 
landwehr classification scheme security flaws evaluated database operating system vulnerabilities 
analysis indicates vulnerabilities tend focused relatively areas associated small number software engineering issues 
keywords intrusion classification security testing vulnerabilities 
piece software containing security flaw secure environment vulnerable attack 
define attack allowing individual obtain information computer system access rights obtained cause system unusable intended purpose 
refine definition 
software vulnerabilities due causes poor development practices ignoring security policies design incorrect configurations improper initialization inadequate testing due deadlines imposed financial marketing needs security considered phases development added ad hoc manner 
security models describe security policies followed actual implementation follow model exactly 
security compromises 
increasing exploits vulnerabilities systems show growing needs develop secure software 
marvin zelkowitz department computer science university maryland fraunhofer center experimental software engineering college park maryland 
zelkowitz org show security vulnerabilities remain release operating system 
providing mechanism focusing security concerns allow system developers effectively address security issues lifetime product 
versions software contain vulnerabilities exploit characteristics conditions exploited attackers earlier versions 
programmers testers adequate measures keep check characteristics conditions improving programming practices testing characteristics conditions specifically 
classic example problem seen today windows xp buffer overflow vulnerability discovered shortly release 
allow hackers take computer erase disks alter data install programs 
spite microsoft assigning testers developer large arsenal testing methods usage tests user interface tests gorilla tests bug bash tests usage stress tests application programming interface tests applets tests nt verify tests regression tests apps tests non nt tests synthetic gui application tool tests rats tests ad hoc tests testing strategies simple widely known flaw destroy security microsoft newest version windows 
shows general testing strategies organizations insufficient 
goal devise classification vulnerabilities information problems software development location impact system concentrate increase testing effort areas help software development community get feedback improve continuously 
security rests confidentiality integrity availability information tried base taxonomy principles 
taxonomy endeavors classify vulnerabilities systems find parts systems greater concentration types vulnerabilities dominant various systems focus type testing needed find 
regularity information exists may guide testing group write test cases discover greater number vulnerabilities exploited help prevent eliminate development process 
may help system designers integrate security requirements building new systems 
may reduce cost maintaining systems vulnerabilities eliminated development stage 
approach possible identify eliminate flaws windows xp buffer vulnerability software deployment 
section reviews security testing strategies classification schemes security flaws describes model 
section apply taxonomy evaluating security flaws releases windows nt linux 
show taxonomy focus testing activities help uncover vulnerabilities easily system releases 
section concludes followed potential 

security classifications presently organizations test security systems firewalls networks commercially available vulnerability analysis tools stat scanner iss scanner hiring tiger team simulate hackers penetration testing formal methods 
penetration testing tests network particular day results may vary day day 
find vulnerabilities systems prone difficulties 
formal methods mathematical description system implemented verify system meet security requirements 
difficult specify requirements system mathematical form 
methods security testing developed including syntax testing property testing fault injection mutation testing gligor testing method 
techniques limited finding specific security flaws 
general testing techniques path testing domain testing data flow testing 
techniques specifically adapted security issues 

classification schemes number security flaw taxonomies developed including protection analysis pa taxonomy research secured operating systems risos security taxonomy spafford taxonomy landwehr taxonomy aslam taxonomy bishop taxonomy du mathur taxonomy brian survey chillarege orthogonal defect classification 
section reviews taxonomies 
redefine security attack executing software purpose utilize security vulnerabilities identified taxonomies 
flat taxonomies 
define flat taxonomy divides set security vulnerabilities general criterion 
simplest taxonomies 
look multidimensional taxonomies seek classify vulnerabilities criteria 
protection analysis pa taxonomy year old taxonomy address security concerns 
objective pa project provide basis categorizing protection errors properties automated pattern matching approach 
taxonomy flaws different operating systems 
global categories improper protection initialization enforcement improper validation improper synchronization improper choice operand operation 
categories taxonomy broad flaw classified multiple categories 
contribution study types security flaws time check tocttou allocation deallocation residuals serialization errors remain relevant 
risos taxonomy research secured operating systems risos security taxonomy flaws operating systems ibm os ibm series operating system bolt beranek newman system pdp 
classification consisted categories incomplete parameter validation inconsistent parameter validation implicit sharing privileged confidential data asynchronous validation inadequate serialization inadequate identification authentication authorization prohibition limit exploitable logic error 
main contribution study classification integrity flaws operating systems 
led classifying flaw multiple categories 
spafford taxonomy spafford characterized common system vulnerabilities operational administrative flaws design flaws faults main categories 
help detailed information characteristics vulnerabilities 
aslam taxonomy aslam defined classification security faults unix operating system 
classification scheme broad categories coding faults comprising faults introduced software development emergent faults resulting improper installation software unexpected integration incompatibilities programmer fails completely understand limitations run time modules 
attributes cause security errors improper evaluation condition 
narrow viewpoint may possible correct error changing condition program 
selection criteria software testing methods design implementation prototype database store vulnerability information specified 
brian survey published survey software fault studies software engineering literature 
studies reported faults discovered production quality software 
results insightful development phases possible 
chillarege orthogonal defect classification method developed ibm watson research center classifying software defects semantics defect correction links defect distribution development progress maturity product 
odc triggers reflect security issues 
multidimensional taxonomies 
taxonomies classify flaws attribute 
bishop taxonomy bishop proposed flaw taxonomy unix operating system 
taxonomy uses axes classifying vulnerability nature flaw time exploitation domain effect domain minimum number components needed exploit vulnerability source identification 
axes divide security domain software functionality 
du mathur taxonomy classified flaws viewpoints cause flaw nature impact type change fix remove flaw 
dimension similar landwehr third dimension categories spurious entity missing entity misplaced entity incorrect entity cover possibilities 
landwehr taxonomy carl landwehr categorized security flaws criteria genesis flaw enter system time enter system location system manifested 
goal look impact security flaws evolving product flaw occurs occurs impact location appeared right mix criteria 
centered landwehr model basis 

taxonomy landwehr categorization security flaws gave realization genesis location useful dimensions perspective 
included third dimension impact vulnerability system 
critical impact areas prioritize testing effort 
dimensional classification scheme helped extract information set vulnerabilities discover regularities vulnerabilities different operating systems 
abstraction tells frequent occurrences security errors indicating current development practices overlook checks testing done adequately specific conditions 
information possible assign testing group test frequent occurrences vigorously 
vulnerability classified classification 

software development issues 
landwehr genesis provided basis describing way vulnerability entered system 
general type security flaw validation errors occur program fails check parameters supplied returned conform assumptions checks misplaced 
domain errors occur intended boundaries protection environments porous including implicit sharing privileged confidential data lower level representation object supposed hidden current domain fact exposed 
serialization flaws permit asynchronous behavior different system components exploited 
check time tocttou flaws fall category 
aliasing flaws arise names object cause contents change unexpectedly consequently invalidate checks applied 
serialization aliasing flaws combined category 
identification authentication flaw permits operations invoked sufficiently checking identity authority invoking entity 
boundary condition flaws occur due omission checks assure constraints table size file allocation resource consumption exceeded 
trojan horse refers program useful service exploits rights program user rights possessed author trojan horse way user intend 
covert channel defined path transfer information way intended system designers 
exploitable logic errors include errors fall categories 
simplified categorization distinguishing intentional inadvertent malicious non malicious flaws landwehr taxonomy 
testing perspective essential test systems adequately discover security flaws programmer intent important context 
trapdoor hidden piece code responds special input allowing user access resources passing normal security enforcement mechanism 
logic time bomb piece code remains dormant host system certain detonation time event occurs 
flaws occur developer deliberately includes software 
terms discovery trojan horse intent differs 
redefine category eliminate ambiguity exploitable logic errors occur due incorrect logic implementation 
simplified genesis dimension validation errors domain errors serialization aliasing errors errors due inadequate identification authentication boundary condition errors trojan horse covert channel exploitable logic column 

location flaws system 
dimension describes location software vulnerability system initialization flaws area occur operating system fails establish initial protection domains specified system administrator specified secure initial configuration system 
memory management process management functions operating systems provide control memory cpu time 
errors functions may permit process gain access improperly deny service 
categories separate taxonomy 
trojan horse non replicating replicating virus malicious trapdoor intentional logic time bomb non covert storage malicious channel timing genesis validation error incomplete inconsistent device management errors occur routines fail respect parameters provided validate parameters provided memory locations altered directly indirectly checks user programs 
file management operating systems include file systems implement access controls share protect files 
errors controls management underlying files result security flaws 
identification authentication functions operating system maintain special files user ids passwords provide functions check update files appropriate 
important functions possible ports entry system ensure functions invoked user permitted consume control system resources 
genesis dimension modified location dimension landwehr taxonomy 
landwehr proposed general taxonomy include flaws operating systems hardware support software application user software 
seeking taxonomy help find vulnerabilities operating systems include categories fall operating systems 
eliminated category called unknown 

impact flaws system 
dimension describes effect system due exploit vulnerability 
visible impact attack 
dimension prioritized suit organization testing efforts 
categories follows domain error including object re residuals exposed representation errors inadvertent serialization aliasing identification authentication inadequate boundary condition violation including resource exhaustion constraint errors exploitable logic error 
landwehr genesis security flaws 
system initialization memory management process management scheduling operating device management systems including networking location file management identification authentication software unknown hardware unauthorized access action result disclosure modification data resources execution code higher privileges user violating system security policy 
root system access actions allow attacker execute system processes take action system root privileges violating system security policy 
denial service actions prevent part system functioning accordance intended purpose delay time critical operations 
may prevent authorized users access resources system services 
integrity failure actions result disclosure system state information violating system security policy 
crash hang exit crash may result due actions result sudden drastic failure software support privileged utilities application unprivileged utilities 
security flaw taxonomy flaws location 
development issues location impact application operating system device disk 
system may hang computer programs conflict run properly due malicious action attacker system 
exit action resulting unexpected termination application service 
failure action leading temporary permanent termination ability application system service perform required function 
invalid state action lead system state permitted system security policy 
file manipulations action result unauthorized access modification deletion file contents user required privileges 
errors due clock changes action leading system clock access may result unpredictable system state 
validation errors system initialization unauthorized access domain errors memory management root system access serialization aliasing errors process management scheduling denial service errors due inadequate identification authentication device management integrity failure boundary condition errors file management crash hang exit trojan horse identification authentication failure covert channel invalid state exploitable logic errors file manipulations errors due clock changes 
security flaw taxonomy security testing perspective making simplifying assumptions previously taxonomy shown schematically 
applying taxonomy wanted see taxonomy useful finding vulnerabilities released software 
obtained file vulnerabilities windows nt harris linux compiled red hat linux errata classified vulnerabilities existed successive releases software order see classification mechanism identified error prone components system 
rank development issues exploitable logic identification authentication identification authentication validation error location impact 
windows nt system initialization system initialization identification authentication memory management unauthorized access unauthorized access unauthorized access unauthorized access validation linux memory unauthorized error management access identification identification unauthorized authentication authentication access exploitable system unauthorized logic initialization access identification system unauthorized authentication initialization access 
common vulnerabilities linux distribution vulnerabilities dimension taxonomy software developing issues categories 
second dimension location flaws categories third dimension impact flaws categories 
possible triples vulnerability 
test classified flaw ranked triples number vulnerabilities triple rank indicates highest number vulnerabilities 
column indicates number vulnerabilities triple 
errors occurred randomly triple approximately number vulnerabilities 
windows nt linux top triples 
areas appropriate increased system testing 
repetitive security failures classified vulnerabilities windows nt versions xp red hat linux versions 
stat scanner vulnerability assessment tool windows unix linux environments developed harris analyze vulnerability trends windows nt linux systems 
data scanning systems windows nt service pack service pack post sp security rollup package interim bug fix releases windows nt collect number type security flaws service pack 
number type security flaws fixed successive service pack previous release 
number type new security flaws successive service pack absent prior service pack 
number vulnerabilities service pack releases warning low medium high sp sp sp sp sp sp srp service packs 
number security flaws service packs risk levels 
successive changes security flaws release provide relevant data just total number flaws 
provides snapshot flaws fixed service pack releases 
starting baseline vulnerabilities service pack sp bars axis indicate number flaws prior releases represent new security flaws indicate number flaws prior service pack fixed service pack 
seen 
number remaining fixed security flaws successive service packs 
majority flaws fixed service pack release low risk level 
new medium level flaws introduced sp sp sp srp 
high risk flaw detected releases sp 
medium risk flaws continue exist releases high risk flaws get fixed 
goal look security flaws occurred just number 
classified vulnerabilities service pack taxonomy ranked various categories dimension number vulnerabilities category 
rank indicates highest number vulnerabilities 
data figures 
results ranking shown figures 
maximum number flaws system initialization location dimension service packs exploitable logic rank sps rank sps inadequate identification authentication rank sps rank sps dimension software development issues 
compared distribution high medium risk level flaws total distribution security flaws 
ranked categories dimension number high medium flaws category 
distribution ranking scheme shown figures 
comparing figures figures respectively conclude distribution high medium risk numbers flaws shown sp relative previous sp 
example sp flaws 
sp flaws obtained number adding number flaws appear axis subtracting number flaws axis 
sp flaws 
level security flaws reflects regularities distribution total number vulnerabilities 
taxonomy identify high risk flaws release system defined rank security flaws dimension may potentially eliminate prevent majority security flaws orienting testing search intensely flaws 
rank value rank value system initialization ranks flaws memory mgmt process mgmt device mgmt file mgmt identification authentication location software 
ranking locations software 
ranks flaws software development issues bugs sp sp sp sp sp sp srp bugs sp sp sp sp sp sp srp 
ranking software development issues 
number key points observed data ranks category service pack combined list flaws similar 
indicates problem areas service packs similar vulnerabilities concentrated certain combinations dimensions 
shows problem areas security identified classification scheme 
high medium risk flaws lie heavily concentrated areas developers testers successful eliminating risk flaws release higher level security 
rank value syst em initialization ranks high med flaws mgmt pr mgmt device mgmt fil mgmt identi cation location software bugs sp sp sp sp sp sp srp 
ranking locations software counting high medium risk level flaws 
rank value ranks high med flaws software development issues bugs sp sp sp sp sp sp srp 
ranking software development issues counting high medium risk flaws 
new security flaws successive service packs heavily concentrated areas showing may prevented eliminated exploited testing effort concentrated problem areas 
concentration security flaws set specific categories lead scenarios 
may easier exploit categories larger concentration flaws 
implies testing categories lead difficult break secure system 

test plans test problem areas adequately 
taxonomy lead building complete test plans 
lead categories fewer flaws may difficult find exploit 
important note may knowledge flaws system taxonomy help eliminating common easily exploitable bugs 

comparison flaws windows nt linux 
black indicates windows nt linux flaws white indicates fewer flaws ratio relative number windows nt linux flaws 
left windows right linux 
looking security flaws windows nt linux observe cases similar characteristics systems 
emphasizing testing black circles identifies half windows linux vulnerabilities systems 
looking system independently black represent windows linux flaws 

extends existing research security vulnerabilities perspective help predict prevent eliminate security vulnerabilities existing new systems 
information reflects organization environment useful accurately detect problem areas environment 
information retained organization preventing risk factor introduced signing contract tiger testing team 
shown concentrating testing effort problem areas organizations environment develop secure software prevent vulnerability exploits 
classification scheme help software development community reducing maintenance costs systems fixing flaws early stages development cycle serve database derive security metrics baselines testing 
security testing established systematic repeatable process able collect data achieved level security product controlling process reach desired level security 

testing taxonomy 
compared security windows nt unix 
windows nt slightly rigorous security features standard unix systems display similar vulnerabilities 
reached significant differences real level security systems 
implies find similar regularities distribution security vulnerabilities unix windows nt 
compiled list vulnerabilities various versions versions red hat linux reach windows nt linux vulnerabilities reflect similar regularities 
striking result think number small represent vulnerabilities linux hope grow database derive 
taxonomy classify security flaws different operating systems variants unix linux sun solaris understand relationships type security flaws systems 
relationships similar conclude hacker community exploits specific set vulnerabilities help taxonomy vulnerabilities eliminated readily 
lead test generality taxonomy 

research testing techniques research direction evaluate various testing techniques path testing domain testing data flow testing find vulnerabilities discovered traditional testing techniques map information taxonomy 
useful organizations know technique detecting problem areas software 
direction build tools automated tests test characteristics conditions software data vulnerability database 
example memory management greater concentration security flaws able tool perform memory data structure checks check consistency values stored memory boundary limits data structures able remove possible flaws category 
regression testing run union set automated tests checks various problem areas detected software 
acknowledge jim william wall harris graciously provided access stat scanner vulnerability assessment tool 
acknowledge dr william dr memon university maryland dr ray mississippi state university valuable guidance 
research partially supported ccr national science foundation university maryland 
michael richard selby microsoft secrets world powerful software creates technology shapes markets manages people free press 
ron 
broadening scope penetration testing techniques 
july 
pfleeger pfleeger methodology penetration testing computers security 
linde operating system penetration afips national computer conference pp 

design secure operating system national computer conference 
marko ari vulnerability analysis software syntax testing technical research centre finland 
available online www ee oulu fi research protos analysis wp robustness fink bishop property testing new approach testing assurance acm sigsoft software engineering notes july 
voas mcgraw software fault injection programs errors john wiley sons 
du mathur vulnerability testing software system fault injection department computer sciences purdue university coast tr 
eugene spafford extending mutation testing find environmental bugs software practice principle pp 
feb 
gligor cheng jiang reich new security testing method application secure kernel proceedings ieee symposium security privacy pp 

beizer software testing techniques van nostrand reinhold new york 
hollingsworth protection analysis project final report information sciences institute university southern california marina del rey ca 
abbott security analysis enhancements computer operating systems report institute computer science technology natl 
bur 

eugene spafford common system vulnerabilities proceedings workshop directions computer misuse anomaly detection pp 

landwehr bull mcdermott choi taxonomy computer program security flaws acm computing surveys vol 
pp 

aslam taxonomy security faults unix operating system thesis purdue university 
aslam taxonomy security faults technical report coast laboratory department computer science purdue university march 
bishop taxonomy unix system network vulnerabilities technical report cse purdue university may 
du aditya mathur categorization software errors led security breaches proceeding st national information systems security conference crystal city va 
demillo mathur grammar fault classification scheme application classification location flaws sp sp sp sp sp sp srp system initial mem mgmt process mgmt device mgmt file mgmt 
number flaws various service packs categorized locations software 
errors tex technical report serc tr purdue university 
brian survey software fault surveys technical report uiucdcs university illinois urbana champaign december 
ram chillarege odc process measurement analysis control proc 
fourth international conference software quality software division oct mclean va ram chillarege michael halliday diane bonnie ray man yuen wong orthogonal defect classification concept process measurements ieee transactions software engineering vol nov 
hans stefan stefan axelsson jonsson comparison security windows nt unix third nordic workshop secure systems november 
appendix development bugs sp sp sp sp sp sp srp validation error domain error serialization aliasing boundary violation exploitable logic trojan horse covert channel 
number flaws various service packs categorized software developing issues 
tables raw data generate figures 
