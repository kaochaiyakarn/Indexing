early experiences persistent java mick jordan mick jordan eng sun com sun microsystems laboratories garcia avenue mountain view ca usa reports initial experiences orthogonally persistent variant java platform called persistent java pjava 
review reflect design pjava discuss compatibility java 
features limitations initial prototype discussed 
experiences gained running distinct applications pjava described detail 
persistent java pjava experimental persistent programming environment java programming language 
pjava provides orthogonal persistence approach provides equal rights persistence data types absolute minimum additional programming effort 
pjava attempts support wide range applications ranging simple completely transparent uses persistence sophisticated applications require extensible transaction models 
major goal pjava arbitrary java code participate unchanged pjava applications 
report early experiences prototype pjava called pjava sun microsystems java development kit jdk release 
pjava designed implemented pjava team glasgow university support provided sun microsystems laboratories collaborative research program 
providing brief overview design pjava followed description pjava prototype 
reflect design choices pjava comment relate specification java platform evolving parallel pjava effort 
discussion limitations pjava describe common pitfalls programmers unfamiliar orthogonally persistent systems 
discuss applications run pjava environment focusing suitability ease programming performance extra functionality 
pjava design section provide brief overview pjava design 
pjava provides orthogonal persistence java principles orthogonality principle orthogonality states values type equal rights persistence longevity brevity 
pjava applies principle java types including class types 
persistence independence principle persistence independence states code form irrespective longevity data acts 
pjava accepts arbitrary unmodified java code 
persistence identification principle persistence identification says straightforward consistent mechanism determining longevity values 
pjava mechanism persistence reachability root objects explicitly registered class pjavastore 
pjava applications associated store represented programmer instance pjavastore class 
application initiated associating pjava interpreter store class invoke may omitted application previously registered initial class pjavastore 
objects candidates persistent reachable directly indirectly root objects explicitly registered pjavastore 
default successful termination pjava application causes objects reachable roots atomically updated store 
applications terminate exceptionally changes stable store 
possible call pjavastore program execution order achieve global stabilization 
responsibility application ensure stabilization reflects semantically consistent state 
application register callback methods pjavastore called prior execution initial class 
variety application specific tasks example verifying global consistency constraints 
objects store persistently bound associated class including bytecodes 
class name lookup performed store fails normal mechanisms java system employed 
addition global stabilization pjava provides rich extensible transaction interface class 
simplify programmer task variety standard transaction models provided specializations class example traditional flat transactions nested transactions 
extensibility provided collection modular building blocks example lock management composed form new transaction kinds 
nature pjava store implementation dependent 
usually file disk partition 
pjava interpreter may execute store called store mode store called non store mode 
reflections pjava design section report experiences aspects pjava independent pjava implementation 
programming interfaces programmer perspective bulk pjava design concerned extended transaction model 
implemented pjava report experiences 
class visible programmers pjavastore experiences led redesign 
significant change relates support multiple stores 
initially notion pjava application able access multiple stores represented multiple instances pjavastore class 
reasons described section abandoned 
minor usability changes 
persistence identification pjava identifies persistent objects reachability named roots registered pjavastore class 
requires additional code written requires namespace managed application 
approach transparent define roots set class instances virtual machine set implicitly defined classes loaded interpreter time 
approach class fields declared static viewed fields corresponding class object provide implicit persistent root table 
associating appropriate semantics static transient combination modifiers design issues discussed surrounding static initialization avoided 
hand failure transient appropriately cause data quietly persistent 
shall see pjava design choice turns pragmatic pjava compatibility java pjava interpreter execute normal java applications unchanged 
normal mean applications pjavastore classes 
words pjava interpreter running non store mode pass standard compliance tests 
minimal requirement pjava accept standard class files 
fact pjava accepts unmodified class files generated normal java compiler requires pre processing post processing steps 
run non store mode pjava preserves semantics language standard packages 
time writing tested compatibility extensively 
significant applications java compiler jeeves server execute correctly pjava interpreter 
compliance store mode subtle issue 
extent specification java virtual machine applies store mode unclear specification attempting define orthogonally persistent system 
certainly pjava behavior differs cases interpreted non compliant 
discuss cases 
noted pjava design predates existence detailed language specification published august 
static class data currently specification silent static transient combination modifiers 

require separate mechanism remove unused classes 

called illegal earlier language specification 
current version java compiler jdk 
reports error 
meaning transient defined general terms 
natural interpretation truncate reachability analysis static transient variables associated class instances 
system properties properties table maintained system class effectively global static data 
semantics data face persistence unclear cause compatibility problems 
certain properties clearly transient sense relate execution particular virtual machine external values change executions 
currently rule static data persistent default causes properties table persistent means transient properties reinitialized 
dubious programming practice applications example java compiler see table global application specific data need persistent 
way language indicate particular property transient persistent automatic solution problem 
properties interface extended indicate longevity keys preferable explicitly define table transient require applications alternative arrangements communicating data 
summary issues minor concern conclude high degree compatibility achieved pjava 
pjava pjava initial prototype version jdk sun microsystems 
pjava currently runs sparc architecture solaris 
order produce prototype reasonably short time changes possible virtual machine implementation 
pjava available sun interested research groups near 
pjava provides modified virtual machine 
contentious violates run guarantee 
applications exploit pjava persistence features run standard virtual machines 
attempting provide persistence extension ideally written entirely java 
hard see achieve degree orthogonality pjava modifying virtual machine 
ideally see orthogonal persistence part java platform 
implementation pjava cache loaded objects separate buffer pool manages pages transferred disk 
buffer pool implemented top recoverable virtual memory rvm 
garbage collected heap java virtual machine jvm left unchanged 
new persistent objects copied heap object cache part stabilization 
objects copied object cache buffer pool required 
object converted swizzled machine addresses persistent identifiers part process 
reduce overhead immediately unswizzled object load translated demand 
handled thread safe manner 
special area store called bootstrap region set aside pjavastore class classes depends instances associated classes reachable root table time store created 
bootstrap region loaded step startup idea speed loading objects accessed 
pjava interpreter runs modes store mode non store mode 
non store mode interpreter behaves exactly standard java interpreter extra capability create store execution register objects persistent roots 
store mode extra argument store pathname passed interpreter 
pathname argument indicates name persistent store run 
pjava store implemented file 
interpreter opens store part initialization process persistent roots available instance pjavastore class 
bi modality implied store argument proven inconvenience 
release interpreter automatically switch non store mode file argument exist 
access provided pjavastore class pathname name store create 
performance reliability pjava experience pjava positive performance reliability perspective 
particularly relatively short time frame implemented fact relatively complicated undocumented virtual machine implementation 
testament forest benchmark described section ran correctly execution 
fur thermore performance quite bit better version runs objectstore commercially supported object oriented database 
limitations pjava section describe limitations pjava implementation cause fall short goal fully orthogonal persistence 
limitations result constraints original jdk virtual machine design time manpower considerations pjava class loading java language specification defines rules governing class loading considerable detail 
defines specific phases loading process pains define exactly source code causes phase completed 
specification explicitly permits different class files formats bindings class files symbolic 
specification permits flexibility time classes resolved 
pjava loads resolves required classes transitively store stabilization store self contained 
java permits multiple instances named class exist virtual machine provided loaded different classloader 
fresh virtual machine contains system classloader replaced 
classloader load class plays role dynamic type checking operator 
instances class loaded different considered type 
note may different definitions anyway irrelevant java uses name equivalence type checking purposes 
pjava maintains single class dictionary pjavastore class acts persistent table classes loaded system class loader 
associated classloader class currently recorded table 
confusion possible internal errors may occur application attempts stabilize store containing multiple class instances 
limitation removed release 
threads orthogonal persistence requires instances class thread persistent 
possible pjava part owing complexity thread implementation jdk 
applications 
having debugged non persistent version 
limited cooperating threads control manager sufficient knowledge determine safe stabilize store 
due fact pjavastore synchronized method serializing stabilize calls multiple threads easy way application threads 
possible enter single threaded mode stabilization succeed thread needed output 
currently threads stopped stabilization occurring possibly damaging thread activity may occurring 
repaired appropriate locking virtual machine cost 
preferable defer issue design implementation implicit locking required pjava extensible transactions model 
extensible transactions pjava extensible transaction model implemented pjava applications limited periodic checkpoints ability rollback 
wide variety useful applications written limitation 
object cache replacement current version pjava possible replace objects object cache 
cache objects brought memory store newly allocated objects persistent stabilize 
cache fixed size determined interpreter startup 
fixed limit amount data processed execution clearly major limitation longrunning applications associated large stores 
underway remedy problem pjava prototype 
applications written date problem typically affects store loading phase large amount data read file system placed store 
cache size set interpreter startup usually possible workaround fixed limit 
applications process resulting stored data access entire database usually execute default cache size 
pjava object cache architecture benefit objects needed transferred page buffer pool cache 
native code pjava design argued native code permitted pjava applications risks data consistency arise unchecked access memory possible native code 
pragmatically application writers decide appropriate trade safety functionality performance 
functionality migrates java core example remote method invocation rmi just time jit compilers widespread expect need native code diminish 
native code implementors follow additional conventions ensure code compatible implementation pjava virtual machine 
concerned ensuring object residency accessing fields methods 
situation complex native code contains state persistent order save persistent version associated java class 
pjava provides support native state means classes persistent 
workaround ensure state declared fields java classes idiom causes problems state pointer java way declare type 
causes portability problems machines bit addressing 
hiding java object declaring integers dangerous normal pjava handling non resident objects 
external state objects contain external state pose general problem orthogonally persistent systems 
typically external state associated native code core features language platform example operating system file descriptors declared integers 
data marked transient jdk interacts badly pjava design choices persistence reachability static fields persistent default data usually meaningless object reloaded subsequent execution 
pjava modified core java classes solve problem honor transient modifier 
problem java object serialization system part java core jdk fortunately release data marked transient 
course half solution 
needs way class recreate transient state object reloaded 
original pjava design handled class specific callbacks 
jit compilers cooperate persistence mechanisms pjava 
registered pjavastore class 
subsequently altered similar mechanisms provided serialization invoking specially named methods provided part class definition 
mechanisms implemented pjava particularly significant piece external state code implements native methods 
code bundled interpreter 
remainder exists dynamically loaded libraries loaded calls system typical idiom call static initializer class 
pjava static initializers run class loaded class class instance created 
subsequent executions external library loaded leading exception 
correct idiom pjava program static transient boolean loaded static boolean system return true idiom assumes transient static variables automatically reinitialized class faulted persistent store 
alternatively called explicitly callback 
related problem library search path system persistent default rules static variables 
unfortunate property stores moved environment library search path different 
temporary workaround pjava force search path reinitialized straightforward relevant code core virtual machine 
robust solution consistent pjava model persistent class consistency load native code store persistent object 
subsequent attempts load library look store done persistent java classes 
window toolkit awt awt important part java core implementation structured portability heavily platform dependent contains considerable amount native code 
suffers problems referred previous sections 
awt key part java environment obviously common attempt awt class persistent reachability class 
pjava explicitly checked stabilization aborted prospect class working correctly subsequent execution 
unfortunately restriction leads unnatural programming idioms 
natural convenient encapsulate application level persistent data subclass awt class 
pjava programmer place application data separate class reachable persistent root associate awt class level indirection 
mechanism needed separate persistent portable aspects awt class transient platform dependent pieces 
possible mark transient persistent information enable class reinitialized subsequent reload callback methods pjava 
mechanism somewhat similar place mobile agents visual obliq 
persistence independence clear preceding sections pjava design explicit root registration pragmatic choice 
completely avoids problems arise loaded classes implicit roots persistence contain transient data marked state problematic 
pjava design application complete control classes persistent 
common pitfalls significant consequence principles orthogonality fact code data bound persistent store 
provides high degree consistency contributing application reliability runs counter normal experience programmers 
requires additional tools support evolution software 
consider issues separately 
binding code data lack orthogonal persistence everyday programming languages meant significant part learning new programming language concerns facilities input output 
incorrect say orthogonal persistence completely removes need facilities goals substantially remove need save restore data structures ad hoc formats separate executions application 
today norm programmers difficulty believing alternative 
early programming languages consistent separation code data provided separate facilities data definition records arrays behavior procedures loose connection data code operated 
advent data types object oriented programming focus shifted integration code data state behavior 
persistence mechanisms generally continue maintain separation 
example objectstore store code database 
underline pervasive separation mindset admit spending frustrating pjava debugging session wondering application behavior changing despite having changed recompiled code 
characteristic separation code data ability open multiple databases application inability pjava commented 
clear databases contain code bound data conflict language semantics 
may multiple possibly different versions named class situation exist language definition 
better analogy java programmer notion store consistent persistent virtual machine 
multiple stores handled distinct virtual machines able communicate example rmi 
model faithful object oriented paradigm focussing active objects behavior passive data 
schema type evolution code bound data store difficult modify example fix bug 
addition need recompile new code installed store affected objects rebound 
onerous separation code data attractive simplification 
separation cost 
typically consistency check schema validation carried time store accessed 
true input 
file system store 

different 
certainly basic classes object thread 

complex solution support schema versioning objects types coexist multiple versions store 
phase java object serialization 
contrast schema evolution pjava needs checks maximizing performance application 
lack schema evolution tools particularly felt application developers main task change code lack noted users pjava application deployed need evolution occurs frequently corresponding defined release points 
eventually occur common changes significant cause problems applications ad hoc persistence 
ultimately expect reflection capabilities available pjava ease transitions increase rate applications evolve compromising reliability 
pjava provides schema evolution mechanisms means stores completely rebuilt face change 
clearly unacceptable long term 
short term solution investigated provision simple schema evolution tool summer 
progress supporting simple changes modifying code methods 
current solution suffers problems scale fixed redesigning part pjava implementation 
clear essential keep schema evolution schema versioning mind designing persistent object system 
constraints pjava built prevented foresight 
problem addressed schema evolution mechanism pjava type compatibility rules enforce 
pjava takes strong compile time centric view type compatibility reflected approach class loading described section 
language specification hand specifies weaker set consistency rules applied class load time 
particular sets classes compile pass weaker rules 
ironically weakening justified support limited form class evolution require recompilation 
hoped evolution put footing context pjava 
summary clear schema evolution high priority feature provide releases pjava 
example applications pjava available short period limited group users extensive set substantive applications report 
set applications cover fairly wide spectrum provide useful insights 
application provide brief description discuss perspectives suitability pjava ease programming performance extra functionality 
oscar oscar application domain geographical information systems gis authored glasgow 
originally written test capabilities java domain subsequently modified run pjava 
oscar consists main phases 
open file ntf data national transfer format available survey gb 
data representation roads uk 

read file line time line data span physical lines file 
line represents ntf structure 
line parsed java object corresponding ntf structure built 
continues data indicator encountered 

awt display data meaningful manner 
rudimentary gis features available clicking road get information 
possible alter display colors different kinds roads 
normal usage oscar expects load tiles nw ne sw se tile file ntf data representing km square area 
tiles displayed image shown number scales pixels defaulting 
viewing area display complete tile user scrolls view rest quadrant 
tiles comprise quite lot data tile containing objects 
tiles experiment translates reading data approximately objects building corresponding java objects 
suitability pjava oscar representative classic set applications persistent object systems invented 
ease programming converting oscar pjava easily accomplished requiring addition amendment lines code compilation units new class load tiles store 
limitation persistent awt classes pjava conversion slightly onerous 
performance loading tiles ntf format files minutes tile depending mount data tile load system 
loading normally take minutes 
interpreted implementation java sun jdk undoubtedly inflates time compiled implementation need read entire file clearly provides limit scalability 
performance benefits converting pjava substantial 
time display tile measures seconds average seconds process tile store draw data image buffer display buffer 
subsequent faster objects loaded cache 
ntf data file read memory go java version run memory 
example big effect 
pjava data converted persistent objects subset needed particular display need loaded persistent store 
permits large sets tiles loaded saved incrementally single store 
stress required part programmer effect storing data registering root objects 
extra functionality possible save map road kinds display colors java version ad hoc persistence mechanism involved extra programming mechanism connect color data ntf data 
structure constructed program domain making persistent required extra pjava 
forest forest application domain computeraided software engineering case 
prototype written objectstore objectoriented database 
forest integrates essential activities software development authoring versioning configuration management system building 
adopts vesta approach configuration management characterized repository immutable versioned source objects combined modular system build descriptions generate derived software artifacts 
suitability pjava experiences implementing forest prototype objectstore positive 
dissatisfaction lack orthogonality objectstore general enthusiasm java lead collaboration glasgow develop persistent java 
believe case tools ideal application persistent object systems framework vesta approach optimal choice 
long term believe extensible transaction model pjava greatly assist development collaborative software development tools 
complete forest environment translated pjava 
converted benchmark developed part evaluation prototype objectstore 
benchmark simulates number users exercising versioning authoring system checking components editing checking back 
vesta logical unit checkout entire tree objects 
step process logically separate transaction 
run benchmark performs set number passed parameter 
particular set objects accessed chosen pseudo randomly 
objectstore commercial product comparison pjava useful datapoint 
ease programming forest environment contains fairly large set object types open ended set developers define new types environment 
orthogonality persistence mechanism direct impact ease system programmed 
objectstore version fell quite bit short regard order achieve adequate performance code quite objectstore specific 
particular objectstore persistent objects accessed inside transaction boundaries new persistent objects allocated syntactically different forms new operator 
paying attention clustering managed allocation time turns important owing false lock conflicts arise objectstore choice page level locking data transfer 
contrast pjava version oscar originally developed tested non persistent application required changes 
isolated module registration single object persistent root 
second change insertion calls method checkpoint store transaction boundaries 
addition calls method achieve checkpoints done obvious simple way cause code persistence specific 
pjava transaction model implemented sequence flat transactions objectstore version 
pjava transaction model supports composition user transaction code hindsight body benchmark persistence independent defining simple subclass provided durability aspect transactions virtue global stabilization composing classes implementing benchmark proper 
performance important aspect objectstore version benchmark measuring system behaved concurrent users added 
unfortunately pjava support concurrent transactions performance comparisons limited single user case 
architectural differences systems comparisons difficult 
provide insights costs architectural decisions 
objectstore employs client server architecture server acting concurrency control point clients regular operating system processes 
general objects pages transferred server client machine processing locally back server transaction commit 
typically clients reside separate machines network 
possible execute clients machine server configure server shared memory sockets client server communication mode comparison 
final difference code stored objectstore database schema type check carried time client starts transaction 
type check extend code behavior weak consistency check substantially reduces need schema evolution 
pjava hand client server objectstore sense noted earlier architecture essentially consistent persistent virtual machine 
clients share address space protection domain pjava system 
acceptable java safe language 
contrast thor wishes support clients written unsafe languages devising ways dealing 
lack class functions methods java limits composition classes implement runnable interface 
performance problems result crossing protection boundaries 
possible multiple pjava interpreters execute read mode persistent store concurrent updates achieved single interpreter basic java concurrency mechanism threads 
limitations pjava prevent benchmarking multi user simulation 
data benchmark reported previous 
initial store mb size consists text files versioned directories 
benchmark accesses versioned directories creates mb new leaf objects 
stressed pjava version direct port version general structure code 
code compiled machine code pjava code interpreted bytecodes 
total elapsed time single user version benchmark running objectstore version seconds pjava seconds times averaged runs rounded nearest second 
tests run mb memory stores locally attached disk 
objectstore consistent value reported previously production version beta release 
expecting find order magnitude difference favor pjava began search explanation 
surprising fact appears improvement running objectstore version machine opposed client server combination 
suggests shared memory communication providing little benefit 
experiment altered benchmark execute single transaction 
case objectstore time came seconds pjava time reduced seconds 
evidently transactions considerably expensive objectstore pjava 
objectstore provides concurrency control rollback surprising cost high 
objectstore variant initial scan store locate versioned directories took seconds compared seconds pjava substantial difference demands explanation 
objectstore performs schema validation transaction 
tested cost repeating initial scan trans 
database changed client transaction test fast 
action took seconds 
seconds attributed schema validation cost pjava need pay consistent binding code data 
performance difference objectstore pjava clearly merits study 
results encouraging prototype nature pjava demonstrate strong consistency guarantees pjava clear performance benefit 
extra functionality forest designed outset persistent object system implementation infrastructure capabilities simply realized efficiently 
port limited set functionality file system storage served remind fact 
java compiler java compiler sun jdk medium sized applications written entirely java 
consists classes 
compiler ordinarily executed compilation unit compile multiple compilation units run 
suitability pjava superficially compiler appear obvious application pjava 
source code kept persistent store case forest compiler necessarily suitable application 
normal mode reading writing file system requirements orthogonal persistence appear limited 
delving little deeper reveals benefits pjava environment 
general time java compiler runs classes loaded file system errors classes handle code generation loaded 
small variations set loaded classes may occur depending nature source code compiled 
average classes loaded 
principle time class loaded verified 
practice classes loaded directories application classpath verified trade performance security 
addition standard optimizations performed bytecodes time loaded 
evidently possible exploit persistence classes pjava reduce costs verification optimization occurs class loaded 
compilation unit contains errors compiler loads error messages dynamically properties file 
file expected special pathname relative standard system property called java home 
approach provides flexibility tailoring content error messages example purposes introduces potential inconsistency adds surprising amount compilation time see 
binding properties table compiler classes persistent store remove potential inconsistency avoid compilation overhead loading table 
ease programming modifying compiler load properties table save persistent object simple 
code existed read table moved main part compiler new class install invoked perform initialization 
permits error message table reloaded date required 
noted compiler modified encapsulate error messages code completely remove dependency external file 
modification messages require custom interface display edit table 
loading classes persistent store carried initialization time 
achieve suffices create dummy persistent instance main class register persistent root 
pjava rules persistence reachability classes force necessary classes persistent 
performance time load error messages table file seconds effectively reduces zero pjava version 
install class operates existing minimal store classes specific compiler faulted demand compilation 
install class creates new store classes stored bootstrap region loaded step startup 
rationale existence bootstrap region minimize faulting overhead classes loaded early application lifetime 
compiler contains fairly large number classes serves testbed effect optimization pjava implementa 
standard class properties map string string values built persistence support defined file format 
tion 
measured time compiler took compile java lang classes compilation unit time configurations 
standard jdk 
interpreter java 

pjava interpreter non store mode pjava 

pjava interpreter store mode compiler classes bootstrap region pjava 

pjava interpreter store mode classes bootstrap region pjava sb 
compilation time seconds running sparcstation averaged runs follows see pjava interpreter adds small overhead compilation time 
expected store mode time reduced faster fault resolved classes reload class files 
storing classes bootstrap region performs worse better mode 
believe possible explanation classes bootstrap region strictly needed compiler 
owing bug current version pjava unable store just transitively reachable classes 
class package store classes package 
fixing bug cause pjava sb perform significantly better pjava 
time compile class verification enabled seconds standard jdk compiler verification accounts additional seconds 
cost incurred pjava version initialization phase compiling verification enabled identical figures table 
unfortunately owing bug pjava related class verification unable prove 
extra functionality attempt add extra functionality compiler number possibilities suggest 
non optimized version interpreter compatibility non optimized pjava interpreter 
selves 
example ability encapsulate arbitrary configuration data example compiler options arranged customization interface 
jeeves jeeves server development sun 
jeeves entirely written java provides extensibility servlets may loaded internet 
servlets applets execute controlled environment sandbox 
applets servlets user interface component 
suitability pjava jeeves highly suitable application pjava 
jeeves maintains considerable amount state controls behavior external file system 
currently webmaster required edit configuration files manually intent replace applet interface allow server configured web browser capable running java 
running pjava server configuration data completely encapsulated durable face crashes 
interesting potential storing user data persistent store associated server external file system 
common oodb vendors offer web front ends databases relatively straightforward transform simple objects html representation 
pjava design includes proposal new url protocol provides type checked access objects persistent store 
protocol easily recast servlet url 
easily implemented additional reflection facilities proposed jdk 
alternatively applet transferred client browser set custom communication mechanism rmi similar mechanism access objects associated persistent store 
ease programming time writing modified jeeves store configuration data persistent store 
expect modifications similar carried java compiler properties table jeeves uses property tables 
experimented simple persistent counter servlet requires counter registered root store stabilized request client browser resulting extra lines code 
table compilation time java lang java pjava pjava pjava sb jeeves exploits multi threading service requests concurrently 
servlet executes thread servlets general unaware 
quite threads attempt stabilize store time 
pjava prevented serializing stabilize calls 
interface jeeves servlet handled method special class cleanest way achieve wrap method enforces serial stabilization 
performance running internal benchmark observed slowdown running jeeves pjava interpreter non store mode 
informative compare time taken serve html host file system time serve persistent store hope report 
extra functionality piece extra functionality pjava provide require special programming transparent caching objects mechanisms object cache 
caching objects external file system require periodic checks external modifications 
interesting possibility provide file system emulation persistent store eliminating requirement 
early experiences pjava positive reliability performance better expected prototype 
useful applications written simple global stabilization mechanisms available pjava pjava compatible java programs persistence mechanisms 
pjava issues remain resolved regarding state exists outside control pjava 
wider transient modifier java core packages help task 
transition pjava fully fledged environment supporting concurrent transactions extensible transaction model ability evolve code data applications reside pjava stores remains significant design implementation challenge 
hope able report experiences system 
acknowledgments information oscar provided stewart glasgow 
cathy waite glasgow provided helpful input experiences pjava 
glasgow pjava team malcolm atkinson susan spence laurent tony help clarifying understanding pjava implementation prompt response bug reports 
trademarks sun sun microsystems java solaris trademarks registered trademarks sun microsystems united states countries 
sparc sparcstation trademarks sparc international licensed exclusively sun microsystems design issues persistent java type safe object oriented orthogonally persistent system atkinson jordan spence proceedings th international conference persistent object systems cape may new jersey may 
pjava design working document available www dcs gla ac uk pjava 
orthogonally persistent object systems atkinson morrison vldb journal pp 
java development kit version java sun com jdk 
jeeves www javasoft com jeeves java language specification james gosling bill joy guy steele addison wesley isbn 
object pse pro java object design www odi com products pse html 
recoverable virtual memory satyanarayanan rvm release cmu january 
objectstore database system charles lamb 
jack orenstein dan weinreb communications acm october 
java remote method invocation revision sun microsystems may 
java object serialization specification revision sun microsystems may 
migratory applications visual obliq krishna bharat luca cardelli proceedings acm symposium user interfaces software technology pittsburgh pa nov 
annotated manual margaret ellis bjarne addison wesley reading massachusetts 
vesta approach configuration management roy levin paul mcjones dec systems research center tr june 
software configuration management objectoriented database mick jordan michael van de usenix conference object oriented technologies monterey ca june 
liskov language independent interface thor persistent object system 
object oriented multi database systems pp prentice hall 
type safe sharing fast liskov adya castro proceedings th international conference persistent object systems cape may new jersey may 
distribution strategies persistent java susan spence proceedings st international workshop persistence java scotland september 
jdk preview sun microsystems www javasoft com products jdk index html 
