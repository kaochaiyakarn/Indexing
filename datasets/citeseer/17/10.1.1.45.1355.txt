types dyadic interaction kohei honda kohei mt cs keio ac jp department computer science keio university ku yokohama japan formulate typed formalism concurrency types denote freely composable structure dyadic interaction symmetric scheme 
resulting calculus typed reconstruction name passing process calculi 
systems explicit implicit typing disciplines types form simple hierarchy types proved accordance 
typed variant bisimilarity formulated shown typed fi equality clean embedding bisimilarity 
name structure induced simple hierarchy types studied fully characterises typable terms set untyped terms 
turns name structure results deadlock free property subset terms certain regular structure showing behavioural significance simple type discipline 
preliminary study types concurrency 
types denote freely composable structure dyadic interaction symmetric scheme 
view concurrent computation collection interaction structures types computing naturally arise mathematical encapsulation structures 
types initially assigned names 
assignment forms universe names essentially milner sorting terms reside universe 
terms formed syntactic constructs corresponding type structures equated variant bisimilarity 
formalism regarded typed reconstruction name passing process calculi 
types interaction start constant types say nat denote fixed patterns interaction 
input output types ffi ffi 
connotation primitives receive send value type ffi type occurs type reminiscent functional types 
unit type denoting inaction 
types combined composite type connectives sequencing branching 
sequencing composes types sequentially denoted structure ffi ffi means engage action type ffi engage action type ffi branching constructors 
structure ffi ffi offers alternatives wait selected 
ffi phi ffi selects right option left option type 
operationally composite type denotes semantically atomic operation fact amalgamation multiple interactive communication 
set types form simple hierarchy reminiscent church simple hierarchy functional types 
form typed universe names name corresponds certain type 
terms actions formed names 
terms actions corresponds certain type type structure operationally 
actions provide high level abstraction interactive behaviour just abstraction arrays records provides abstraction respective operations sequential setting concrete type constructors concurrent programming 
transition semantics formulated typed variant bisimilarity equate terms 
appeared concur lncs pp springer verlag april 
shown milner encoding lazy calculus explicitly typed fi equality embedded explicitly typed weak bisimilarity 
pragmatically important able reconstruct typed terms untyped terms 
scheme simple type inference system suffices essentially extension foregoing construction functional types 
shape typing judgement notably different foregoing 
sequent takes form ff ff xn ff term port names ff type schemes 
basically judgement tells structures potential interface points term owns 
inference system enjoys subject reduction existence principal typing assigns types exactly modulo ff equality set terms result erasing type annotations explicitly typed terms 
essential result name structure terms precisely differentiates typable terms untypable terms 
exhibited certain set terms name structure induced simple type hierarchy results deadlock free behaviour important properties concurrent distributed computing 
result lay foundation investigation varied type disciplines name passing framework 
structure rest follows 
explicitly typed system studied sections 
section introduces types typed terms defines reduction relation terms 
section defines typed bisimilarity presents embedding result explicitly typed fi equality bisimilarity 
section introduces implicitly typed system 
basic definitions syntactic properties type inference system correspondence explicitly typed system established 
section studies simple type discipline reflected syntactic behavioural properties terms 
give complete characterization typable terms name structure show typability induces deadlock free property certain subset terms 
section discusses related issues 
proofs omitted space sake 
interested readers may consult 
typed terms 
types types 
initially types 
symmetry intrinsic interaction reflected syntax types type natural numbers write nat type natural numbers nat 
set atomic types denoted ranged 
atomic type exists atomic type called type 
type type atomic type original type 
assume includes nat nat 
intuitively nat type natural number nat type interacts successors 
nat type nat 
special denotes pure form synchronization resulting term generation line say ccs 
type 
acts concrete examples see examples 
call atomic types constant types 
set types interaction ranged ffi ffi defined follows 
atomic type type 
ii ffi type ffi ffi types 
iii ffi ffi types ffi ffi ffi ffi ffi phi ffi types 
intuitively ffi denotes type receives ffi ffi denotes type emits ffi ffi ffi denotes sequential composition types ffi ffi denotes type offers alternatives ffi phi ffi denotes type select left right interact type 
notion types extended composite types 
type type ffi denoted ffi implying kind interaction pair type ffi notion substantiated computationally 
type 
ii ffi def ffi ffi def ffi iii ffi ffi def ffi ffi ffi ffi def ffi phi ffi ffi phi ffi def ffi ffi easy know proposition 
ffi def ffi type ffi syntactic conventions assume strength association strongest follows 
phig 
assume constructors associate right 

names terms actions 
type set names reside 
mapping types typed names called universe 
total function assigns type ffi denumerable set names written ffi ffi ffi ffi ffi ffi 
omit type annotations write 
universe equipped irreflexive bijective mapping names names written ffi ffi ffi ffi ffi names type ffi exactly names names type ffi write ffi simply ffi universe isomorphic structure fix universe discuss 
concerned universe form typed expressions 
functional types entity called terms 
names entities actions terms 
action denotes semantically atomic structure interaction corresponds type 
term denotes structured collection independent actions 
essentially differs situation functional types term inhabit particular type 
best terms inhabit underlying universe 
assume set constant symbols corresponding constant type atomic types 
constant symbol arity form ffi ffi 
arity denotes types names constant carry 
sets terms actions universe defined inductively 
ffi ffi range typed actions range typed terms 
note implicit underlying universe term action mean term action respectively 
constant symbol type arity ffi ffi ffi name ffi xn ffi action called constant action 
ii ffi name ffi ffi delta ffi ffi actions 
iii ffi ffi actions ffi ffi ffi ffi ffi ffi ffi ffi actions 
iv ffi action ffi type inl ffi ffi inr ffi ffi actions 
term action 
vi ffi action ffi name ffi ffi term 
prime term ffi subject 
vii terms term 
parallel composition 
viii term jx ffi jp term 
scope restriction ffi 
ix term 
inaction 
term term 
replication conventions assume binary constructors associate right parenthesis explicit syntactic structure 
cumbersome write typed expressions alert reader may perceive resemblance milner syntactic construction 
fact notion agents may regarded sprout syntactic category call actions 
see suggestion abstraction concretion 
note calculus complete october contained concrete type structures corresponding actions came know february 
coincidence ideas quite notable 
full 
nat nat delta nat nat nat nat abbreviate internal type script write delta nat nat reconstruction original expression easy 
cases type annotations necessary write delta assumed expression essentially typed 
simplification syntax write delta delta ffi ffi omitting write delta av ffi ffi ffi delta delta ffi ffi ffi omitting delta symbols consecutive inputs outputs convenient 

binding substitution 
bindings induced binders 
omit type scripts 
jx ffi jp ffi binds free occurrences ffi ffi 
say occurrence effective 
effective effective inl inr case effective occurrence effective binds free respect henceforth assume name effective resp 
effective resp 

understand intuition think delta delta delta delta inl delta delta natural assume delta bound 
binding notion harmony interesting equality types ffi ffi ffi corresponding equivalence actions stipulate expository 
sake simplicity convention convenient losing generality 
convention 
assume names binding occurrences typed expressions pairwise distinct disjoint free names 
define typed substitution names 
free name certain type substituted name type 
substitution name name effective names harmony binding idea definition typed substitution starts ffi ffi ffi def ffi ffi ffi def ffi ffi ffi ffi def ffi ffi ffi def ffi rest standard 
infinitely names type find fresh name type substitution defined 
mainly simultaneous substitutions written ffi ffi omit type superscripts expressions assume substitution typed 
oe id denotes identity operation 
sequential composition oe oe written oe oe denotes result firstly performing oe far substituted names collide oe means convention simply oe oe def oe oe immediate definition substitution 
proposition 
term ffi ffi term 
similarly ffi action ffi ffi action 
substitution typed operation 
define ff convertibility written ff standard way 
substitution ff convertibility naturally restricted terms convention 

reduction 
reduction represents fundamental mechanism computing formalism 
action composition fine grained operations general need decompose definition reduction rules actions terms 
reduction actions fi oe delta oe delta means interacts term substitutions generated 
substitutions receipt values effective actions sequentially composed 
notion consistent binding idea discussed 
definition reduction starts constants interact 
assume pair constant actions dual types rule form const fi oe id delta oe id delta names distinct fn yg 
example nat fi succ ffi nat oe id delta oe id delta nat denotes successor set rules reduction actions follow 
pass delta ffi fi ffi oe id delta delta gen fi oe id delta oe id delta inl ffi fi ffi oe delta oe delta ffi ffi fi inl ffi oe delta oe delta inr ffi fi ffi oe delta oe delta ffi ffi fi inr ffi oe delta oe delta seq ffi fi ffi oe delta oe delta oe ffi fi oe ffi oe delta oe delta ffi fi ffi oe oe delta oe oe delta exc ffi fi ffi oe delta oe delta ffi fi ffi oe delta oe delta note reduction rules provided pair actions dual types 
need substitution top level actions actions occur term composed write ffi fi ffi omitting substitutions 
easily get proposition 
actions ffi ffi unique ffi ffi 
reduction 
define structural rules terms define reduction relation 
structural congruence denoted smallest congruence relation induced rules 
ff qj jxj fn write sequence concurrent composition prime terms replications etcetera 
main definition follows 
definition 
step reduction denoted smallest relation terms generated com ffi fi ffi wj ffi ffi gamma 
wj struct gamma 
gamma 
define gamma 
proposition immediately theorem 
term gamma 
term universe 
examples terms reduction follow 
example 
constant 
arity succ nat assume rule mentioned 
nat succ nat gamma 
nat nat ii bi directional interaction 
note comes back agent left 
allows value passing result see polyadic calculus 
delta delta delta gamma 
xg iii branching term generation 
assume terms 
true def inl phi dupl bx def true false false def inr phi def dupl false def false true def true dupl example true false xyz gamma 
true false true note define parallel por xyz def xyz 
iv buffer 
buffer denotes buffer oldest value newest value xn interaction port left branch read request right branch responds write request 
empty tell user 
note exception handling elegantly embedded branching structure 
buffer def inl buffer buffer buffer def inr delta buffer buffer xw buffer 
define behaviour amalgamation small parts 
verify fact behaviourally equivalent typed bisimilarity 
define parts empty cell usual cell 
empty def inl empty jnj cell empty cell def inr delta inl empty cell inr delta cell new buffer defined def empty def jnj cell examples action constructor roughly plays role usual summation process calculi express branching behaviour 
essential difference lies type abstraction summation may possible 
related local behaviour branching construct 
time transform concurrent composition called expansion law crucial difference general summation 
transition bisimulation 
labels instantiation 
introduce labelled transition relation define usual bisimilarity processes typed setting reduction transition may represent possible define behavioural semantics reduction relation relying labelled transition methods fairly new labelled transition relation typed setting important subject study 
note semantics develop section conforms equivalences induced means developed 
amalgamation small interactions 
kinds labels means interaction takes place term coincides reduction 
takes form called action instantiation 
denotes interaction outside term engages 
grammar define set action instantiations follows inl inr constant action 
relationship action expression instantiations notation ffi oe delta reads instantiated generates oe 
assume rule const exists pair constant symbols dual types 
const fi deltac oe id delta actions rules 
ffi ffi ffi fv xg delta delta ffi ffi ffi delta oe id gen oe id delta seq ffi oe delta oe ffi oe delta ffi ffi oe oe delta ffi oe delta ffi ffi oe delta ffi oe delta ffi ffi oe delta plus ffi delta oe inl ffi inl delta oe plus ffi oe delta inr ffi inr oe delta reduction relation top level actions write ffi omitting oe 
proved induction inference rules 
proposition 
suppose ffi oe delta oe typed term 

transition system bisimilarity 
define transition relation gamma element form hp qi typed terms certain universe label written gamma 
follows 
inter ffi wj ffi gamma 
wn xj com ffi fi ffi wj ffi ffi gamma 
wj struct gamma 
gamma 
inter assume xg wg fn 
names binding occurrences 
tells transition rules essentially typed result immediate proposition 
theorem 
gamma 
term term universe 
note equate ffi ffi ffi suggested notion labels turn reflected bisimilarity induce general sound semantic relation 
simplicity path pursued 
rule generation term sound transition defined labelled transition 
formalism terms reside universe compute interact universe 
formulate typed weak bisimilarity labelled transition relation 
defined gamma 
gamma 
gamma gamma 
definition 
weakly bisimilar concerned universe denoted exists symmetric relation terms hp hp qi gamma 
bn occur free hp notion defined theorem 
bisimilarity 
proof basically proceeds usual name passing calculi see omitted 
theorem 
congruence relation 
note notion congruence terms typed formation rules 
theorem regard providing equality notion typed processes 

embedding simply typed fi theory 
example application typed equality see typed fi theory typed terms embedded milner encoding lazy calculus 
leave definition simply typed calculus 
naturally take explicitly typed system 
simplicity constant type nat assumed write ff fi denote functional type domain ff domain fi 
term formation starts variables constants natural numbers successor function written ff ff fi ff fi etcetera 
assume embedding types nat ffl def nat 
ii ff fi ffl def ff ffl fi ffl note vital existence constant types mapping 
suspect reason similar construction done sorting discipline precisely lack notion constant types constant actions matter framework 
clear functional type ff exists image ff ffl conform structure encoding assume universe functional variable ff ff ffl mapping follows 
mapping maps tuple hm ff ff ffl certain term universe 
name thought denote name appropriate type 
nat def nat ffl succ nat nat def xy succ nat nat ffl 
ii ff def delta ff ffl 
iii ff fi ff fi def xy fi ff fi ffl 
iv ff fi ff fi def ff fi delta lu ff 
note term inhabits certain type mapped term just inhabits universe 
note free names encoding owns corresponding types term free variables 
crucial fact simply typed terms distinct normal forms encodings bisimilar easily proved induction structure terms 
show ff fi ff fi ff fi fi ff ff appropriate note curry constant function takes multiple arguments translation introduce multi party interaction represented actions calculus 
lose generality currying respects operational behaviour functions possible 
example add split add usual way 
strong determinacy encoded terms invariance bisimilarity reduction prove proposition 
ff fi ff iff ff ff note embedding may satisfactory equationally may semantically 
formulation types term inhabits universe universe semantically flat fact natural computational content type scheme ffi fi ffi 
equational embedding tells room refinement type universe effect enables semantically satisfactory mapping functional types 
solution left occasion 
untyped terms type inference 
untyped terms 
practically convenient able reconstruct typed terms untyped terms 
construction illuminates typable terms differentiate untypable terms 
define syntax untyped terms 
set untyped names ranged 
assume irreflexive bidirectional mapping names written denoting name name untyped setting 
set untyped terms follows 
explicitly typed system range untyped terms 
constant calculus distinct arity numeral constant symbol 
delta inl inr notions bindings induced syntactic constraint branching actions substitution ff conversion defined care type compatibility names 
naming convention convention assumed 
starting axioms constants definition omit type annotations 
rule combination constant actions form fi reduction relation defined follows 
com fi wj gamma 
wj struct gamma 
gamma 
prime terms complementary names complementary actions meet reduction take place 
essential fact untyped setting possible incompatible pair prime terms complementary names 
define 
definition 
err read contains possible run time error gamma 
wj fi example term error delta xy notion important context typing system untyped terms 
typed terms strip type annotation preserving original operational behaviour 
erase function specifies 
erase ffi erase erase delta ffi delta erase ffi erase erase 
ii erase ffi ffi erase ffi erase ffi erase inl ffi inl erase ffi erase inr ffi inr erase ffi erase ffi ffi erase ffi erase ffi 
iii erase ffi erase ffi erase erase erase erase erase erase erase holds definition 
assume rules untyped constant actions coincide explicitly typed system 
proposition 
explicitly typed 
gamma 
erase gamma 
erase 
ii erase gamma 
gamma 
erase exposition go detailed study untyped transition relation untyped bisimilarity 
worth noting property holds case reduction relation stated proposition hold case untyped transition xy succ cc gamma 
succ left hand side typable right hand side 
typing labels solves issue discussed 

type schemes 
inferring types untyped term find universe term safely reside 
suffices find portion universe harmony term structure 
specialty arises formulation type inference system comparison functional types fact multiple name type pairs stead multiple variable type pairs assumption construction essential idea concurrency types multiplicity interfaces explicit gives additional information type discipline system shown section 
extend syntax types type variables ranged ae ae 
type variable different type variable corresponds called variable written ae 
set ae ae 
ff ae ff ff ffi ffi ffi ffi ffi phi ffi gives set type schemes 
ff resp 
ff stands assignment type free resp 
bound name 
notion types defined 
finite set assignments collision free names bound names called typing written gamma delta theta etcetera 
intuitively typing denotes assignment types names occurring term 
gamma denotes set names occurring gamma 
definitions concerning typings follow 
typing gamma consistent written gamma con names gamma denote incompatible operations 
gamma con iff ff fi implies ff fi ff fi implies ff fi similarly bound names 
ii typings compatible written gamma delta common name predicates denote incompatible operations ff gamma fi delta implies fa ff fig con dual similarly bound names 
iii ff ff essentially equivalent define notion normal forms typings 
write gammaj normal form gamma defined ff ff gammag gamma may 

typing rules 
ready define type inference system 
deals kinds sequents 
main sequent form gamma reads statement gamma derivable 
subject predicate sequent respectively gamma 
auxiliary sequent form gamma ff reads auxiliary statement ff derivable assumption gamma 
subject predicate assumption sequent ff gamma sequent form initially author mfps oxford england 
respectively 
give rules typing terms 
rule typing terms 
rule typing actions 
gamma denotes names occur bound 
notation gamma denotes result away prime statements subjects gamma eliminate names occur bound type expressions 
note rules working convention rule prime gamma ff ff gamma fa ffg gamma parallel gamma delta gamma delta gamma delta scope gamma gamma rep gamma gamma nil gamma weak gamma gamma ae delta con delta rule gamma ff delta ff gamma ff ff gamma gamma gamma ff delta ff gamma delta ff ff gamma delta gamma ff delta ff gamma delta ff ff phi gamma ff gamma inl ff phi fi phi gamma fi gamma inr ff phi fi addition constant assume rule form gamma gamma xg names distinct gamma consistent 
sequent gamma inferred rules sequent said derivable typed typing gamma 
examples derivable sequents untypable terms follow 
nat 
ii xu succ nat nat 
iii succ delta typable 

basic syntactic properties 
said basic scheme type inference extension type inference functional types aspects duality notion system formulated previous subsection enjoys syntactic properties quite similar find typing systems functional types 
essential results regard 
subject reduction cf 
theorem says reduction change potential interface 
assume reduction rules constant actions typed fi gamma delta theta gamma delta theta con 
theorem 
subject reduction gamma gamma 
gamma proof proceeds induction type derivation substitution names poses mild difficulty 
omit details 
theorem operationally assures invariance interface tightly coupled lack run time error point immediate subject reduction 
corollary 
gamma err strictly speaking need elimination bound names convention want liberal assumption binding distinction free bound names typing indispensable relates notion assigning types potential interface points term keep idea 
note weak rule rule property weaker free names lost reduction 
typing represents potential interface terms difference essential 
important property typing problem essentially computed unification usual systems functional types 
substitution ff ae gamma result substituting ff occurrences ae gamma simultaneously written gamma ff ae 
theorem 
principal typing substitution instance gamma result applying substitutions zero times gamma 
suppose typed 
gamma gamma gamma gamma gamma substitution instance gamma 
gamma effectively 
proof uses common type scheme schemes checks inference rule 
algorithm efficiently computes general type scheme restricted system essentially milner polyadic calculus proved correct respect typing system 
algorithm easily adaptable system 

relationship explicitly typed system 
explicate implicitly typed terms relate explicitly typed terms 
universe ju set assignments types names form fa ffi ffi 
easy induction structure typed terms get proposition 
suppose resp 
ffi term resp 
action gamma ae ju erase gamma resp 
gamma erase ffi 
correspondence direction establish term action typable gamma contains type variables exists corresponding typed term action explicitly typed system easy naming convention 
gamma suitably choosing substitution type variables write gammai gammai contains type variables 
proposition follows tells proposition typable terms essentially coincide systems proposition 
untyped term 
gamma gamma exists universe term substitution gammai ae ju erase def syntactic behavioural counterpart typability 
preliminaries 
types interaction introduced form simple hierarchy types reminiscent simple type hierarchy functional types 
hierarchy reflected syntactic behavioural properties terms studied 
need auxiliary notions regarding syntax 
simplicity definitions untyped terms understood similar notions explicitly typed terms 
subexpressions terms actions occurring action term defined standard way 
notation sub sub 
example sub fa 
ii say compatible structure interaction syntactically modulo difference name occurrences delta delta compatible compatible compatible extend composed actions 
iii similarly define dual notion compatibility 
compatible complementary syntactic structure starting delta specifically inl compatible iff compatible compatible 
details naturally follow 
naming convention theorem holds modulo ff convertibility 
iv active delta active inl inr 
similarly active active inl inr 
essential notion occurrence 
names occur way actions write occurrence simply understood context 
understood denotes name name occur name 
relations generated rules 
underlying term 
equivalence relation set subexpressions names occurring names necessarily occurring 
ab iff ab iff ab 
ii ab elements sub vv ab elements sub vv 
iii delta delta delta vw 
iv inl inl inr inr vv inl inr vv easy induction proven simultaneously fact type occur get result 
state result explicitly typed terms statement involves restricted names propositions corresponding result untyped terms 
proposition 
term universe ffi ffi ffi ffi ffi ffi ffi ffi important syntactic notion related typing discipline static counterpart lack run time error call safety 
definition 
say safe ab resp 
ab sub sub compatible resp 
compatible 
safety structurally ensures operational compatibility names possibly interact 
proposition easily infer corollary 
term certain universe safe 
safety completely differentiate typable terms untypable terms 
example take simply delta safe equipped action 
clearly term untypable 

simplicity 
clean characterization typability name relation term cf 
abramsky 
concerned name relation defined follows 
definition 
say name carries name written simply understood context conditions hold 
sub active 
ii aa aa bb bb stands transitive closure 
notion define essential syntactic notion corresponding simple type discipline 
definition 
say term simple safe name occurring simplicity denotes lack self names considering occurrences hereditary 
clean characterization order follows 
lemma 
explicitly typed system ffi ffi ffi occurs ffi proper subexpression 
proof easy induction structure typed term formation 
syntactic structure type forms finite tree lemma implies name relation circular structure obtain proposition 
suppose term certain universe simple 
equivalently gamma gamma simple 
prove converse simplicity implies typability need analyse inference procedure 
purpose syntactic transformation convenient 
define relation ae follows 
denotes arbitrary context second rule assume null 
rule assume def elimination rule harmless rule rep rules 
ae ae ae easy ae change typability resulting types 
addition easily ae ae takes form def xj vn vn include action form construction show essential reasoning establish desired result 
suppose simple safe 
easily arrange changing typability prime terms follows sequence written vn names occur names occur preceding terms occur occur names occur 
type term 
structure term significant case rule parallel 
prove induction structure actions term typable term typable 
side condition check case occur hand calculate safety condition order relation names type scheme main theorem follows 
theorem 
characterization typability gamma gamma iff simple 

simplicity deadlock free property 
simplicity name structure may result meaningful behavioural characterisation immediately contrast strong normalization typable terms simply typed calculus 
subset terms certain regular condition simplicity ensures important property concurrent computing deadlock free property 
construction inspired lafont type discipline 
naturally untyped calculus 
restricted set terms characterised regular way generating new terms relationship communicating names 
definition 
term regular sub active write vn name occurs active newly generated terms way related communication structure prime term 
consequence proposition 
suppose regular 
occurs proof easy definition regularity 
note implies occurs regular simple 
regular term uniqueness constraint names name occur exactly binding occurrences scope restriction 
notion regular term said name complete gamma 
uniqueness constraint names occurring exists name occurring words name complete names compensated names gamma derivative name complete possible term reduces happen prime terms ready interact may regarded deadlock 
definition 
suppose name complete 
gamma 
gamma contains prime term subterm say deadlock 
simplest example deadlock delta see examples deadlock involve kind circular name 
proved 
show name complete typable term deadlock note name complete term reduces name complete term 
show typable name complete structurally equal similar terms contain prime term case gamma 
suppose 
write assumption wj vn qm gamma 
right hand side names occur exactly compensated containing prime term 
easy eliminate replications changing name structure occurrences gain def gamma 
proposition name say occur subject prime term subexpression action say proposition name occur occurs actions 
way know place occur 
name completeness contradiction 
theorem 
suppose name complete gamma 
deadlocks 
result extended terms name complete composing term 
characterisation restricted set terms reasoning shows import name structure uniqueness names assumed 
suggested restricted set terms typability assumption provides term representation lafont interaction net translation somewhat cumbersome know result generalise restricted set terms significant behavioural properties deadlock associated type discipline 
need deal replicated terms 
note working convention 
note untyped name complete terms encode scheme partial recursive functions weak bisimilarity restricted set terms non trivial computing power 
direct way typing lafont net exists variation type system type 
discussions 
related 
notion typing names name passing framework studied milner sorting subsequently related including appeared 
seen development milner idea sense operational structure associated names name passing essential elements notion types 
main difference lies sorting discipline equipped type constructors basically tries capture operational structure multiple name passing 
departure construction plain structure sorting lies identification basic types input output term generation way composing types arbitrary type constructors sequentialization branching prominent constructs 
related point constants 
construct naturally born identified syntactic domain represent compositional interaction patterns 
notion essential form simple hierarchy types explicit setting elegantly functionality constant functions interaction setting saw section 
constant functions essential pragmatic sequential languages get essential concurrent programming languages interaction 
significance construct treated coming exposition 
related includes abramsky process interpretation linear logic got essential suggestions regarding compositional type structure interaction materialization terms lafont construction treats type discipline discussed section 
differs theirs formulating typed formalism general framework process calculi church rosser assumed integration various elements believe essential typed concurrency single framework type constructors interaction constants typed behavioural equivalences etcetera 

issues 
started study type notion concurrent computation constructing may compared simple hierarchy types functional setting 
remaining issues arise naturally 
relationship functional types got important suggestions stages formal development systematic incorporation various type disciplines developed context functional types cf 
framework important subjects study 
specifically clarifications behavioural consequences incorporation line result pursued 
regard pierce sangiorgi incorporates subtyping notion milner sorting discipline refinement usage names communication shows interesting step direction 
note touched computability issue 
suspect impossible satisfactory encoding general recursive functions simple type discipline developed verification negation conjecture left study 
theme enrichment type constructors adding construct parallel composition nondeterministic branching 
ramification type structures needed constructors suited realistic concurrent programming hope simple scheme provide basis development 
final section noted may semantics universe may semantics types setting 
essentially due nature parallel composition tight functional composition composing behaviour terms 
note lack semantics types means types tell little semantic computational consequence typed composition 
question possible framework typed concurrency significant semantic interpretation type 
issue deep leave question open 
clearly investigation theoretical practical necessary acquire sound understanding types concurrency 
wish turn useful basis allow recursively defined types representation possible 
study typed concurrent computing 

samson abramsky rod burstall robin milner atsushi ohori prakash panangaden vasco vasconcelos nobuko yoshida criticism advice suggestions 
anonymous referees provided valuable comments pointed errors 
deep gratitude mario tokoro long lasting encouragement 
generous support fellowships japanese junior scientists gratefully acknowledged 
abramsky computational interpretations linear logic 
technical report doc imperial college department computing october 
appear theoretical computer science 
barendregt types lambda calculi programming languages 
proceeding esop 
boudol asynchrony calculus 
manuscript 

engberg nielsen calculus communicating systems label passing 
research report daimi pb computer science department university aarhus 
gay sort inference calculus 
popl 
hindley principal type scheme objects combinatory logic trans 
american 
math 
soc 

honda tokoro object calculus asynchronous communication proc 
european conference object oriented programming lncs springer verlag july 
honda representing functions object calculus pp october 
revised version keio cs report 
honda calculus september submitted 
revised version keio cs report 
honda types dyadic interaction full version keio cs report 
honda yoshida process reduction semantics keio cs technical report 
lafont interaction nets popl 
milner theory type polymorphism programming journal acm 
milner parrow walker calculus mobile processes 
part ii 
ecs lfcs edinburgh university 
milner functions processes 
automata language programming lncs 
milner barbed bisimulation icalp 
milner polyadic calculus lfcs report edinburgh university 
mitchell type systems programming languages handbook theoretical computer science elsevier science publishers 
pierce sangiorgi typing subtyping mobile processes 
vasco honda principal typing scheme polyadic calculus volume 
