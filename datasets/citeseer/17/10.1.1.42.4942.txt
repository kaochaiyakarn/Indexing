functional programming january 
printed united kingdom fl cambridge university press kleisli functional query system limsoon wong kent ridge digital labs heng mui keng terrace singapore email limsoon org sg kleisli modern data integration system significant impact bioinformatics data integration 
contains brief kleisli system example illustrate uses bioinformatics arena 
primary query language provided kleisli called cpl functional query language surface syntax comprehension syntax 
kleisli implemented functional language sml 
describes influence functional programming research benefits kleisli system especially obvious ones implementation level 
availability 
kleisli commercialized name kris 
available kris technology santa cruz ave menlo park ca 
direct email info kris com web browser www kris com 
kleisli system davidson advanced broad scale integration technology proved useful bioinformatics arena benton karp baker brass 
bioinformatics problems require access data sources high volume highly heterogeneous complex constantly evolving geographically dispersed 
solutions problems usually involve multiple carefully sequenced steps require information passed smoothly steps 
kleisli designed handle requirements directly providing high level query language cpl wong express complicated transformation multiple data sources clear simple way 
key ideas kleisli system influenced functional programming research database query language research 
high level query language cpl functional programming language built notion bulk data types suitable database programming built operations required modern bioinformatics 
kleisli implemented top functional programming language standard ml new jersey sml nj 
data format kleisli uses exchange information external world derived idea type inference 
provides overview kleisli system summary impact limsoon wong query language theory illustration uses bioinformatics arena description influence functional programming research benefits kleisli system especially obvious ones implementation level 
organization follows 
section subsections give overview architecture data model query language cpl kleisli 
section subsections explain impact kleisli integration biology data illustrate impact real life example 
section subsections single areas implementation kleisli discuss influenced functional programming research 
particular type inference gives rise kleisli self describing data exchange format monad gives rise kleisli internal representation queries simple optimization rules higher order functions give rise simple implementation kleisli powerful optimizer 
effectiveness optimizer discussed section 
section discusses differences old prototype author built university pennsylvania current production version constructed kent ridge digital labs 
quick tour kleisli kleisli regarded system data access transformation integration 
sits heterogeneous data sources tools operate integrated version available data 
quick tour focus data model kleisli complex object types high level query language supported kleisli called cpl stands collection programming language 
basic architecture subsection data model subsection overview cpl subsection 
architecture cpl kleisli pipe memory shared net servers remote genbank gdb ncbi blast sybase asn drivers blast cpl type nrc optimizer driver object complex manager opm manager library primitive module acedb kleisli kleisli system davidson written entirely sml nj 
architecture system depicted 
kleisli extensible ways support high level query languages replacing cpl module 
kleisli support different types external data sources adding new drivers forward kleisli requests sources translate replies kleisli exchange format 
installation kent ridge digital labs contains drivers popular bioinformatics systems including sybase oracle entrez schuler wu blast altschul gish gapped blast altschul acedb walsh furthermore optimizer kleisli customized adding different rules strategies 
query submitted kleisli processed cpl module translates equivalent expression nrc 
calculus nrc described buneman chosen internal query representation easy manipulate amenable machine analysis 
nrc expression analyzed type module infer general valid type expression passed optimizer module 
optimized nrc expression compiled nrc module calls complex object library 
resulting compiled code executed accessing drivers external primitives needed pipes shared memory 
driver primitive managers keep information external sources primitives wrapper interface codes 
complex object library contains routines manipulating complex objects codes set intersection codes iterating set 
core kleisli system divided main components shown dotted line 
component provides high level language support consists cpl module approximately lines sml codes type module approximately lines nested relational calculus nrc module approximately lines optimizer module approximately lines including codes actual optimization rules 
second component query engine consists driver manager approximately lines including codes actual drivers primitive manager approximately lines including codes actual primitives implementation complex object library approximately lines 
detail implementation kleisli deferred section influence functional programming discussed 
proceed quick tour cpl see actions 
complex object types data model underlying kleisli complex object type system goes sets records flat relations type system relational databases codd 
allows arbitrarily nested records sets lists bags variants 
bag called multi set conceptually set duplicates may occur 
list conceptually bag order 
variant called tagged union type limsoon wong represents type 
sets bags lists homogeneous 
order mix objects different types set bag list necessary inject objects variant type 
simultaneous availability sets bags lists kleisli deserves comments 
relational database sole bulk data type set 
functional programming language usual bulk data type list 
having bulk data type presents problems important real life applications 
firstly particular bulk data type set list may natural model real data 
example modeling author list ordering authors important conveniently modeled list 
modeled set necessary model set pairs avoid losing information ordering authors 
secondly particular bulk data type set list may efficient model real data 
example modeling author list ordering authors unimportant particular application mind conveniently modeled set 
modeled list known database query optimizations re ordering joins ullman longer applied normally preserve positional ordering 
example genpept report format chosen national centre biotechnology information amino acid sequence information 
information includes sequence interesting biological features derivation source dna sequence papers authors studying cross databases containing related information 
amino acid sequence thought string letters certain regions positions string special biological interest binding sites active sites domains 
feature table genpept report part genpept report documents positions regions special biological interest annotations comments regions 
type represents feature table genpept report entrez schuler 
uid num title string accession string feature name string start num num anno string descr string interesting type record set lists records 
detail 
record fields uid title accession feature 
store values types num string string respectively 
uid field uniquely identifies genpept report 
feature field set records form feature table corresponding genpept report 
records fields name start anno 
types string num num respectively 
represent respectively name start position position particular feature feature table 
anno field list records 
records fields descr type string 
records represent annotations corresponding feature 
general types freely formed syntax num string bool kleisli 
num string bool base types 
types constructors build new types existing types 
types respectively construct set bag list types type type constructs record types types type constructs variant types types flat relations relational databases basically sets records field records base type words relational databases bags lists variants nested sets nested records 
values types explicitly constructed cpl follows assuming values appropriate types records 
variants sets bags lists 
example value conforming feature table type uid accession title 
ptp feature name source start anno organism descr mus descr taxon 
particular feature table belongs genpept report protein tyrosine sequence 
particular feature displayed amino acid amino acid entire sequence 
feature entry displayed annotations 
indicates amino acid sequence derived mouse dna sequence 
second provides cross national center biotechnology information taxonomy database information taxonomic relationship mouse organisms 
schemas structures popular bioinformatics databases flat files softwares easily mapped data model 
extreme data structure complexity entrez schuler acedb walsh contain deeply nested mixtures sets bags lists records variants 
extreme data structure complexity relational database systems codd sybase oracle contain flat sets records 
currently kleisli gives access sources regularly molecular biology laboratories singapore companies 
reason ease mapping bioinformatics sources kleisli data model inherently composed combinations sets bags lists records variants 
directly naturally map sets sets bags bags lists lists records records variants variants kleisli data model having type declaration hand 
possible map sources easily relational database system deductive database system relational deductive database systems impose normal form requirement 
normal form important concept relational databases basis practical implementation 
key ingredient guaranteeing termination queries deductive databases 
value normal form flat contains limsoon wong nested records nested sets bulk types 
relational database systems deductive extensions designed manipulate data normal form restrictions implementations exploit normal form assumption achieve great efficiency 
number type constructors may spartan compared popular functional programming languages arbitrary number fresh types type constructors introduced programmer 
closest database correspondence types programming languages schemas 
schema relational database contains list relation names structure underlying relations information presence indices 
relation structures correspond definition types 
spite correspondence different attitude types worlds 
database query language necessary introduce new relation type explicitly 
query database query language results new type 
example projection query extracts fields existing relation having fields principle introduces new record type having named fields 
functional programming language haskell new record types created easily explicitly introduced hand 
implement query haskell programmer introduce new type type constructor having named fields 
functional programming language sml nj new record types prior type declaration case variant types declared hand 
number types databases spartan 
difference richness types database programming hidden implicit richness types functional programming highlighted explicit 
fact database queries introduce new types compelling reason database programming languages favour flexible type constructors types completely conveniently anonymously defined terms structures 
interestingly experimental theoretical investigations functional programming languages remy explored ideas favoured similar spartan flexible type constructions 
collection programming language syntax cpl similar odmg standard object oriented database languages cattell 
interesting feature syntax cpl heavy comprehension syntax showed long ago functional programming languages miranda formalized wadler 
typical comprehension cpl syntax odd returns set consisting squares odd numbers set similar notation functional languages main difference binding occurrence indicated preceding backslash expression returns set list 
functional languages called generator odd called filter 
giving kleisli complete syntax wong illustrate cpl series examples 
example query extracts titles features set db feature tables 
note introduce variable effect db bind element set db 
title title feature feature db example query extracts titles features elements db titles contain tyrosine substring 
title title feature feature db title string tyrosine queries simple project select queries 
project select query query operates flat relation set 
transformation query perform limited selecting elements relation extracting projecting fields elements 
fact source data result normal form queries expressed relational query language 
cpl perform complex nesting unnesting common relational database languages sql shown examples 
example query reduces nested relation db set sets lists level set lists 
restructures eliminating uids 
title title feature name start start annotations anno db feature example query flattens db completely 
anno similar meaning db works list set 
binds item list anno 
title title feature name start start anno name anno descr descr db feature anno example query navigates annotation feature entry db discover organism entry 
restructures nested relation database entries associated organisms 
entry organism descr db feature anno organism limsoon wong example query demonstrates nesting cpl subquery db restructuring db example 
subquery org extracts organism names 
main query groups entries db organism names 
sorts output list alphabetical order organism names org converts set org duplicate free sorted list 
db entry organism descr db feature anno organism org organism db organism entries entry db organism org inspiration cpl came primarily breazu tannen structural recursion query language 
structural recursion difficulties 
syntactically acceptable structural recursion program logically defined breazu tannen subrahmanyam 
second structural recursion expressive power express queries require exponential time space 
programming languages take turing completeness granted attitude database programming radically different 
context querying databases due immense size queries restricted practical sense low complexity class logspace ptime tc fact may want prevent query worse delta log complexity confident query optimizer high probability optimizing query delta log complexity 
database query languages sql designed way joins easily recognized joins operations typical database query language require complexity evaluated naively 
tannen buneman suggested natural restriction structural recursion reduce expressive power guarantee definedness 
restriction cuts structural recursion homomorphisms commutative idempotent monoid sets revealing telling correspondence monads wadler :10.1.1.33.5381
nested relational calculus denoted nrc designed restriction buneman 
nrc essentially simply typed lambda calculus extended construct building records construct decomposing records field selection construct building sets construct decomposing sets means restriction structural recursion 
specifically construct decomposing sets fe forms set big union set nrc suitably extended implemented nrc module kleisli counterpart cpl la wadler equations relating monads comprehensions wadler :10.1.1.33.5381
order show nrc basis query language relationship existing query languages investigated 
furthermore enable kleisli solution existing open problems query language theory enable generalization existing results query language theory facilitate practical implementation allow query optimization enable new applications 
expressive power nrc extensions studied suciu dong libkin wong buneman suciu wong 
papers solutions open problems query language theory 
important results directed nrc nrc delta gamma xi 
nrc augmented equality test 
nrc augmented rational numbers linear order rational numbers arithmetic operations summation construct 
nrc shown exactly power usual nested relational algebra buneman 
nrc delta gamma xi shown capture power sql including aggregate functions group constructions libkin wong 
languages easier analyse existing nested relational algebras sql easier implement optimize 
example libkin author libkin wong began series powerful analyses nrc delta gamma xi fruitfully resolved open questions sql including long anticipated results unordered graphs nrc delta gamma xi sql test graph chain test graph connected test graph number edges compute transitive closure graph 
impact theoretical results design cpl kleisli cpl adopts nrc delta gamma xi core 
nrc delta gamma xi captures standard nested relational queries high level manner easy automated optimizer analysis primary reason able prove difficult theorems sql 
easy translate user friendly surface syntax comprehension syntax sql syntax nrc delta gamma xi 
suitable core 
fixpoint operator forms structural recursion imported cpl rare occasions recursive computations needed 
appreciate design decision look sql de facto commercial query language 
proved libkin wong sql express recursive queries 
practice fixpoint computations desirable importance database context counting 
sql limited recursion construct proposed debated latest standard aggregate functions summation average part sql belong called entry level sql supported commercial relational database systems 
impact bioinformatics mentioned earlier kleisli system developed general solution broad scale data integration problems 
author collaborators limsoon wong bioinformatics arena testbed old prototype system davidson succeeded making impression field benton karp baker brass 
brief commentary functional programming community success kleisli wadler 
description kleisli action bioinformatics provided previous papers overly simplified 
provide detailed real life example querying protein patents illustration 
challenges data integration bioinformatics explained subsection 
motivation detailed example protocol involved explained subsection 
cpl query implementing example exhibited explained subsection 
data integration biological sequence databases built biologists 
sequence databases created amount data small important database entries human readable 
database entries constructed flat files text entries information ordered specific way 
probably accurate describe databases data repositories 
new types data captured created new data repositories created variety flat file formats 
result effort create large number different databases different formats typically non standard data query software really properly accessible bioinformatics experts baker brass 
significant challenge pieces complex ways answer new questions biology 
clearly simple retrieval data sufficient modern bioinformatics 
challenge manipulate retrieved data derived various databases re structure data way investigate specific biological problems 
may require feeding retrieved data various application programs multiple sequence alignment programs structure modeling programs require specific input data sets formats 
observed baker brass baker brass existing biology data retrieval systems fully demand flexible painless data integration 
systems rely low level direct manipulation biologists 
archetypal example entrez system schuler 
biologist uses keyword extract summary records click record view contents perform operations 
works simple actions 
number actions records increases direct manipulation quickly repetitive 
questions complex involve assembly data needed exceeds skill patience biologists 
merely providing library package interfaces lot databases analysis softwares useful requires long tedious programming adding package demonstrated difficulties corba siegel 
described earlier kleisli davidson goes step provides high level powerful query language cpl cpl offers nice data kleisli model high level operators express complex queries biology databases analysis softwares manner extremely straightforward overly user programming skill 
widely agreed kleisli significantly reduced difficulty integrating biology data benton karp baker brass 
get sense kleisli impact bioinformatics describe bioinformatics query implemented kleisli davidson 
called impossible queries department energy bioinformatics summit report 
query find gene located particular band particular human chromosome non human homologs possible 
basically query means gene particular position human genome find dna sequences non human organisms similar 
main database containing band information gdb pearson sybase relational database 
order find homologs actual dna sequences needed ability compare needed 
unfortunately database keep actual dna sequences 
actual dna sequences kept database called genbank burks 
time access genbank provided asn version entrez schuler extremely complicated retrieval system 
entrez kept precomputed homologs genbank sequences 
query required integration gdb relational database entrez non relational database extracted names genes required band accessed entrez homologs genes filtered homologs retain non human ones 
query considered impossible time system bioinformatics sources involved due heterogeneity complexity geographical locations 
complexity query cpl query davidson remarkably short 
kleisli power bioinformatics applications baker chen chen chen 
subsections bioinformatics application protein patents easily understood non biologists described 
querying protein patents consider pharmaceutical large choice protein sequences 
determine functions 
criterion selection patent potential 
process involving data sources steps required depicted dataflow diagram 
www gdb org dan doe whitepaper contents html limsoon wong find similar seqs find abstracts claims user user check patented seqs find superfamily user query seq superfamily rep seq rep seq superfamily seq seq patented rep seq patent detail entrez scop uspto scop domains patent texts nr patented seq initial stage amino acid sequence sequences little known 
question point patented 
existing patent search systems information retrieval systems rely english words 
systems suffer dichotomy recall vs precision frakes baeza yates 
return highly relevant information expense missing large proportion return highly relevant information expense returning lot information 
searching patents laborious fruitful 
furthermore early search english word searching actual amino acid sequences 
reliable technology comparing protein sequences sequences patented needed 
things come rescue 
protein patents generally protein function primary sequence structure 
linear string symbols amino sequence 
second bioinformatics sufficiently advanced tools reliably identify homology primary sequence structure level available pearson 
patented protein sequences extracted database prepared form suitable tools operate means reliably identify sequences patented 
patented sequences obtained protein section entrez schuler 
locally greater efficiency 
sequence comparison software wu blast altschul gish comparing sequences warehouse primary sequence structure homology 
protein sequences identified second question point ones potential wider patent claims 
understand question necessary recognize protein patents generally granted sequence function 
functions kleisli proteins unknown point done known proteins evolutionary origin tend similar functions differ significantly primary structure 
terminology structural classification protein database officially known scop lower case proteins superfamily 
way identify protein sequences potential wider patent claims find having large number sequences superfamilies 
homology searching algorithms primary structure generally sufficiently sensitive detect majority sequences typical superfamily pearson primary structure distance members family mutated significantly 
tools homology search tertiary structure level needed 
reliable automatic tools purpose exists moment structural similarity tertiary level necessarily imply similarity function 
reliable manually constructed databases superfamilies exist 
nice scop 
sequences screened scop possible pull representative sequences superfamilies check ones patented identifying superfamilies potential 
wu blast reliable sequence comparison program suitable carrying screening 
representatives superfamilies necessary fish rest members superfamilies 
step accomplished gapped blast altschul remotely compare representatives huge nonredundant protein database nr curated national center biotechnology information 
having potentially protein sequences pharmaceutical ready hopefully patent results due course 
ready ask third question relevant prior arts 
examination prior arts necessary determine directions begins proteins decides 
retrieving texts patented sequences superfamilies proteins helpful 
step complementary previous step carried exactly technology 
subsection cpl program accomplishes step 
patented proteins superfamily subsection concentrates explaining example query example cpl program answers question find superfamily protein sequence seq belongs identify patented members superfamily 

name scop blast db 
name pat blast db 
scop add scop 
access name sid seq file key sid limsoon wong 
sf desc desc sf hit accession pscore pscore 
bridge hit patent title pscore pscore 
process seq scop blast pscore pscore 
process accession 
scop 
process type sf 
scop 
process key 
sid seq 
process seq pat blast pscore pscore query requires data sources contains representative sequences various superfamilies scop contains patented protein sequences extracted entrez scop contains structural classification proteins 
entry uniquely identified name called sid index available 
scop database specialized deeply nested database comes specialized retrieval software supports commands sid return corresponding scop entry scop classification number return sid scop entries belonging class 
query requires sequence comparison software 
kleisli system hand format compatible wu blast altschul gish greater efficiency 
query requires different sources different softwares typical database systems 
connection scop blast established wu blast line 
connection pat blast established wu blast line 
connections allow wu blast compare input protein sequence sequences identify homologous highly similar input protein sequence 
connection scop establish scop line 
connection provides classification information proteins 
provide random access representative sequences scop superfamilies scop identifier sid connection sid seq established sid index line 
having set connections real start 
sequence seq compared sequence similarity scop superfamily representative sequences scop blast look hit strong threshold pscore line 
seq regarded superfamily hit sid recorded accession field protein classification record looked scop scop sid line 
record field type record 
inner record field sf stores scop classification number superfamily 
classification number scop connection ask scop sid representatives superfamily line 
representative serves bridge help identify desired patented sequences 
representative index sid seq look sequence record line 
seq field record stores protein sequence sequence patented sequences connection pat blast hits strong threshold pscore patented sequences desired kleisli line 
relevant information superfamily information bridge patent information returned output set lines 
influence functional programming functional programming significant influence design implementation kleisli cpl influence visible language level cpl cpl higher order functions ml style polymorphic type system 
type system augmented invention functional programming community parametric record polymorphism ohori remy 
cpl view record type variables closer machiavelli ohori row variables remy implementation wong polymorphic records kleisli clever idea remy 
noticeable feature cpl comprehension syntax appearance years ago programming language world languages miranda 
discussed earlier buneman core cpl founded structural recursion breazu tannen monad wadler :10.1.1.33.5381
interesting discuss influence functional programming components kleisli system visible 
particular discuss self describing exchange format kleisli subsection internal representation queries subsection optimizer subsection 
type inference self describing exchange format discoveries functional programming community favourite parametric polymorphism type inference 
cpl uses type system kleisli self describing data exchange format direct derivative type system 
benefits discussed subsection 
dynamic heterogeneous environment bioinformatics databases softwares 
worse thing thought explicit database schema 
compounding research biologists demand flexible access queries adhoc combinations 
query system aims general integration mechanism environment satisfy conditions 
count availability schemas 
able compile query submitted completely structure query 
second data model external databases softwares easily translate doing lot type declarations 
third shield existing queries evolution external databases softwares possible 
example extra field appearing external database table necessary recompile rewrite existing query 
fourth data exchange format straightforward demand programming effort capture variety structures output external databases softwares 
limsoon wong requirements addressed directly interesting features cpl type system 
cpl polymorphic record types allow example 
name salary defines function returns names people earning dollars 
function applied name salary fields allowing input source freedom evolve 
cpl variant types allow example name john zip code 
set containing objects different structures case string carrying name tag number carrying zip code tag 
feature particularly useful handling asn formatted iso data genbank burks important complex sources dna sequences contains profusion variant types 
note functional programming languages haskell sml require variant types declared advance haskell class record types 
contrast cpl require variant types declared 
fact cpl require type declared 
course type meaning cpl program completely inferred structure schema type declaration 
possible logically plug data source doing form schema declaration small acceptable risk run time errors inferred type actual structure compatible 
important feature data sources explicit schemas extremely big explicit schemas run tens pages example big complex schema asn schema entrez national center biotechnology information making impractical form declaration 
come fourth requirement 
data exchange format agreement lay data data stream message data exchanged systems 
case format exchanging data kleisli bioinformatics sources 
data exchange format kleisli corresponds kleisli data model 
provides records variants sets bags lists allows data types freely composed 
fact data exchange format completely adopts syntax value construction cpl described subsection 
recall cpl programs contain type declaration 
cpl compiler cpl program principle typing scheme 
kind type inference possible construct cpl unambiguous general type 
particular value construction syntax possible inspect symbols local type constraints corresponding value value constructor unambiguous 
example bracket seen immediately clear bag bracket seen immediately clear record 
adopting value construction syntax cpl data exchange format self describing 
self describing exchange format need define advance structure objects exchanged 
database terminology means fixed schema 
programming language terminology kleisli means type declaration 
sense object exchanged carries description 
self describing format important property matter complex object exchanged easily parsed reconstructed schema information 
understand advantage look iso asn standard iso open systems interconnection 
easy exchange asn objects parse asn object need parse schema describes structure making necessary write complicated parsers simple 
mentioned self describing data exchange formats exist forms earlier papakonstantinou litwin 
kleisli probably self describing exchange format consciously derived type inference 
noted kleisli self describing compressed data exchange format compact value construction syntax cpl example name john age age name peter uses shorter name age john peter 
fields records position independent cost having repeat record labels times 
record labels declared advanced fields records fixed order declaration corresponding labels necessary repeat record labels 
essentially works data type declaration defining constructor ri scope restricted particular data stream point particular appears data stream point redefined data stream whichever comes earlier 
simple compressed exchange format essentially retains flavour imparted cpl value construction syntax 
kleisli triples syntax briefly recall restricted form structural recursion corresponds presentation monads kleisli wadler buneman :10.1.1.33.5381
combinator ext delta delta obeying equations ext fg fg ext fog ext ext ext 
ext equal ff rg construct nrc 
direct correspondence cpl ext interpreted ext combinator key operator complex object library kleisli heart nrc representation queries implementation cpl earns central position kleisli system offers tremendous practical theoretical convenience 
practical convenience best seen issue syntax implementation database query language 
syntax internal representation query usually manipulated code generators better easier analyse 
confused surface syntax usual database programmer programs better surface syntax easier read 
worth contrasting ext construct comprehension 
regard surface limsoon wong syntax cpl adopts comprehension syntax easier read ext construct 
example cartesian product sets expressed comprehension syntax contrast expressed ext construct ext ext convoluted 
advantage comprehension syntax ends 
regard syntax situation exactly opposite 
comprehensions easy human programmer read understand 
fact extremely inconvenient automatic analysis poor candidate representation queries 
difference illustrated pair contrasting examples implementing optimization rules 
known optimization rule vertical loop fusion goldberg paige corresponds idea getting rid intermediate data 
optimization queries comprehension syntax expressed informally fe gn nx fe fe gn hm jk rule comprehension form simple grasp 
basically intermediate set built comprehension fe hm eliminated favour generating fly 
practice quite messy implement rule 
writing rule informal denotes number comprehension 
comes implementing nasty traversal routine written skip non applicable order locate applicable nx fe hm author tried find simple technique implement rule years succeed 
consider ext construct 
pointed wadler comprehension translated 
effect optimization rule vertical loop fusion dramatic 
optimization expressed nx ny gg nx ny informal troublesome longer appears 
rule coded straightforwardly implementation language 
similar observed proofs structural induction 
comprehension syntax comes case comprehension introduce secondary induction proof number generators filters comprehension ext construct give rise complication 
related saving comprehensions require kinds terms expressions qualifiers ext formulation requires kind terms expressions 
order illustrate point concretely necessary introduce detail implementation kleisli system wong 
type syn ml objects represent queries kleisli declared nrc module mentioned subsection 
data constructors relevant discussion corresponding cpl constructs enclosed ml comment brackets 
times convenient think object type syn expression tree 
example ifthenelse thought tree subtrees ifthenelse root 
kleisli type var int variables represented int type svr int server connections represented int datatype syn 
emptyset syn syn syn extset syn var syn ext ifthenelse syn syn syn read svr real syn process real request priority assigned optimizer ml objects represent optimization rules kleisli functions type rule 
type rule syn 
syn option optimization rule successfully applied rewrite expression expression 
successfully applied 
return optimization rule vertical loop fusion 
promised earlier rewarded simple implementation example vertical loop fusion 
fun extset extset extset extset rules unpleasant implementation comprehension syntax straightforward kleisli monad representation 
second illustration 
easy see rule means fe nx fe nx provided free rule called filter promotion functional programming world 
simple form code motion aho migrates filter inner loop iteration element achieves dual purpose avoiding recomputing multiple times false avoiding computation inner loops due iteration informal presents major challenge implement rule simple way 
rule simple correspondence slightly general expressed ext construct nx nx nx provided free surprisingly realization kleisli pleasantly simple example filter promotion 
limsoon wong fun extset ifthenelse ifthenelse extset extset surface syntax cpl comprehension syntax internal representation ext construct inspired kleisli monad 
choice implementing cpl choice implementing cpl fortunately known easy translation exists wadler buneman :10.1.1.33.5381
translations equations fe nx nx fe feg fe fe fg possible pie eat 
kleisli optimizer performs optimizations 
optimizations include general form code motion parallelism exploit network latency selective laziness reduce memory consumption improve response time migration selection projection joins external relational database servers reordering joins tables distinct database servers described davidson 
impact optimizations discussed section 
higher order functions optimization pleasant experience implementing optimizer kleisli system illustrates advantages conveniences higher order functions allowing expression better algorithms discussed suciu wong 
optimizer wong consists extensible number phases 
phase associated rule base rule application strategy 
large number rule application strategies supported 
familiar include applies rules rewrite expression tree leaves root single pass applies rules rewrite expression tree root leaves single pass applies rules largest redices single pass multi pass versions 
exploiting higher order functions rule application strategies decomposed traversal component common strategies simple control component special strategy 
short higherorder functions generate strategies extremely simply resulting small optimizer core 
order give ideas done code fragments optimizer module mentioned subsection 
kleisli traversal component higher order function shared strategies val decompose syn 
syn 
syn 
syn recall syn type ml objects represent query expressions 
decompose function accepts rewrite rule query expression applies immediate subtrees rewrite immediate subtrees 
note touch root traverse just rewrites immediate subtrees straightforward looks fun decompose decompose decompose extset extset 
rule application strategy function having type val 
syn 
syn precise definition type important discussion point deferred 
function takes rule base query expression optimizes new query expression applying rules strategy assume pick 
rule ml function takes rule base query expression returns rule applicable rule applied rewrite control components strategies mentioned earlier generated simple way 
example strategy applies rules maximal subtrees 
starts trying rules root query expression 
rule applied moves level paths tries 
soon rule applied path stops level path 
words applies rule path root leaves 
control component fun rdb query case pick rdb query 

decompose rdb query example strategy applies rules root leaves 
tries rewrite node query expression progresses leaves 
control component fun rdb query fun pass subquery val case pick rdb subquery 

subquery decompose pass pass query limsoon wong example strategy applies rules leaves root 
tries rewrite node moves root query expression 
control component fun rdb query fun pass subquery val decompose pass subquery case pick rdb 

pass query interesting class rules requires multiple rule application strategies 
scope rules vertical loop fusion filter promotion previous subsection entire query 
contrast class rules parts 
inner part context sensitive scope limited certain component query 
outer part scopes entire query identify contexts inner part applied 
parts rule applied completely different strategies 
rule base rdb represented system ml record type type bool ref trace rulename 
syn 
syn 
unit ref rules rulename rule list ref rules field rdb stores list rules rdb names 
trace field rdb stores function tracing usage rules rdb 
field rdb stores flag indicate tracing done 
tracing indicated rule name rdb applied successfully transform query trace function invoked record trace 
normally simply means message rewritten rule printed 
trace function allowed carry considerably complicated activities 
possible exploit trace functions achieve sophisticated transformation simple way 
example rule rewrites true inner part rule rewrites true 
outer part rule identifies context scope inner part rule limited branch 
example intuitive human 
branch conditional subexpressions identical test predicate conditional eventually evaluate true 
rule straightforward express machine 
informal way 
fortunately rules kind straightforward implement system 
example kleisli absorption rule expressed rule 
rule clauses 
clause says rule applied ifthenelse test predicate boolean constant lead non termination 
second clause says rule applied forms ifthenelse 
third clause says rule applicable situation 
fun ifthenelse bool ifthenelse fun equiv bool true case contextsensitive 
ifthenelse 
second clause meat implementation 
inner part rewrite true captured function rewrites identical true 
function supplied rule applied strategy scope branch contextsensitive rule generator 
fun contextsensitive rule strategy query val changed ref false flag set rule applied val rdb set context sensitive rule base ref true trace ref fn 
fn 
fn 
changed true changed true rule rules ref rule val strategy rdb query apply rule strategy 
changed contextsensitive rule generator reused context sensitive optimization rules migrating selection projections joins external relational database systems 
higher order functions greatly simplifies implementation current kleisli optimizer wong compared original optimizer wong 
mentioned author discover particular method implementing rewrite strategies paulson spivey similar ideas 
optimization performance optimizations emphasized kleisli traditionally studied functional programming languages database management systems 
section uses example query joins relational databases give indication kind optimizations kleisli performs queries involving external sources limsoon wong impact 
idea migrating joins data sources improve performance subsection idea lazy evaluation reduce response time subsection idea concurrency reduce network idle time subsection 
original query unoptimized cpl query accesses relational databases east coast united states joins data 
query submitted kleisli cpl site singapore 
internet link singapore united states 
example hart relational database containing certain information extracted periodically entrez 
gdb pearson relational database containing mapping information 
gdb obtain records fall human chromosome 
records retrieve related records 
assuming connection gdb established gdb connection established task accomplished query combine follows primitive loci set firstn process select gdb process select locus gdb objectid process select gdb objectid primitive combine gdb locus title len process select loci process construct works sending request specified connection parsing corresponding reply complex object 
kleisli supports multiple connections data servers 
discussion section connection gdb request sent gdb directed connection request sent directed connections whichever currently free 
optimization concerns evaluation need describe evaluation behaviour comprehension construct 
sets construct usually form pn en cm 
arbitrary expressions 
evaluate sets evaluate booleans 
pattern matching elements corresponding set kleisli construct evaluated absence optimization nested loop 
example evaluation algorithm looks initialize accumulator emptyset foreach matching foreach matching delta delta delta cm insert accumulator return accumulator set firstn function simply selects items set example selects records locus sequences chromosome 
obtained timings section increasing number 
ran loci cause gdb accessed repeatedly compute way join tables object genbank locus locus location sizes approximately records respectively 
access bring object genbank table 
accesses bring locus table number times cardinality object genbank table 
delta accesses bring locus location table delta times cardinality locus table 
consequently ran combine cause gdb access times compute join loci gb head accs table 
delta accesses gdb compute loci described 
additional accesses compute join gb head accs table records loci 
obvious query take long time produce output high capacity link singapore united states link 
clearly unacceptable 
subsections describe optimizations kleisli carries automatically 
maximal subquery migration obvious optimization migrate operations data sources possible 
rationale optimization certain statistics indices available native optimizers data sources 
expected perform operations efficiently 
fact migrate subqueries large possible ngu execute remotely data sources 
effect migrating maximal subqueries ensure native optimizers context possible give possible 
example limsoon wong equivalent query migration way join needed compute loci gdb shown 
primitive loci set firstn process select locus objectid objectid gdb primitive combine gdb locus title len process select locus locus len len title title sql string loci loci sent just sql request gdb obtain desired way join 
executing combine required merely access gdb accesses 
furthermore accesses combine cheaper combine 
reason combine brought gb head accs table completely time combine brought columns table projections columns migrated rows table selection column migrated 
big improvement query completed seconds 
version query record displayed entire result table computed 
response time seconds 
joining records wait long time see 
lazy evaluation improve response time start output process soon rows resulting table available 
accomplished lazy evaluation 
idea lazy evaluation implemented changing combined query combined replacing outermost bracket bracket 
presence tag comprehension construct indicates result comprehension formed lazily 
soon elements set available system return waiting rest elements set 
rest elements returned demand available 
cpl takes care coordination automatically 
combine required number accesses gdb combine started displaying row result access kleisli gdb access 
response time seconds greatly reduced seconds combine 
needed seconds complete query 
concurrent evaluation accessed item loci 
accesses essentially sequential previous versions example 
sequentially sending requests able exploit fact data servers ran top sybase handle requests simultaneously 
similarly system waiting response resources send new request servers process reply previous request simultaneously 
kleisli cpl built capability coordinate multiple threads execution automatically take advantage overlap waiting times 
idea concurrency reduce waiting implemented changing combine new query combine replacing outermost generator loci loci 
cpl means matching pattern elements set sequential fashion 
hand means matching pattern elements set parallel 
combine took seconds display row finished row seconds connections server concurrently 
introducing concurrency careful things 
remote server may able handle limited number requests time say 
case send requests time avoid overwhelming remote server 
fortunately data servers application usually running top commercial systems sybase practice admission control 
addition kleisli provides mechanism adjust level concurrency respect different servers 
second concurrent thread requires resources memory allocated output consumed quickly 
tougher deal problem 
kleisli relies priority scheme schedule external data requests optimization rule assigning priority 
optimization results glance tabulate typical execution time respect number loci entries 
results obtained running queries sparc mb memory singapore 
data sources located east coast united states philadelphia baltimore gdb 
accesses relied link countries 
note combine connections 
limsoon wong number entries total combine time combine sec combine response combine time combine sec combine performance improvement shown achieved cpl complicated programming 
fact kleisli optimizer automatically perform optimizations discussed optimizations 
note write permission granted alternative optimization semi join ullman achieve potentially greater improvement concurrent version combine 
concurrent idea combine general form optimization semi join idea 
particular semi join idea works data source powerful system full fledged relational database 
evolution kleisli kleisli undergone extensive re design re implementation kent ridge digital labs original prototype built university pennsylvania 
section purposes show kleisli changed explain advanced features current release system kleisli version release december 
focus granularity laziness subsection exploitation concurrency subsection improvement type system subsection improvement optimizer subsection availability new drivers subsection development new high level query interfaces subsection 
laziness old prototype laziness 
unfortunately implementation laziness contained bad idea 
bad idea mistaken belief granularity laziness fine possible 
result lazy representation complex object old prototype function applied unit object returned token function function applied returned token function function applied returned token function 
clumsy inefficient 
furthermore enforced linearity list tokens completely odd inherent tree nested nature kleisli kleisli data model 
lazy operators cpl old prototype kleisli complicated implementation high overhead 
current release kleisli better implementation laziness simpler efficient flexible natural 
new implementation set represented tree fashion branches lazy branches lazy freely mixed 
representation imposed linearity tokens old prototype 
operators new kleisli implementations uniformly objects lazy objects lazy 
concurrency old prototype strictly sequential 
exploit network latency inherent access remote data sources 
exploit parallelism possible remote data sources usually resided distinct independent servers 
exploit parallelism run large machine multiple processors 
current release kleisli inherently concurrent 
able automatically overlap requests dispatches remote source soon source free needing wait completely received processed previous reply remote source 
note replies kind remote sources accessed kleisli usually sets containing elements processed data parallel manner 
aggressively exploits parallelism possible sending requests multiple remote data sources simultaneously scheduling tasks run multiple processors 
recall section simple fold concurrency produced near fold increase query performance 
kleisli sources typically run level servers large memory processors 
machines easily sustain order magnitude concurrency 
queries handled kleisli inherently data parallel increase concurrency typically translates order magnitude increase query performance 
types type system old prototype poorly implemented 
treatment record types main source inefficiency 
record types implemented remy representation remy wong 
properly exploited possible test constant time record types fields possible extract constant time type field record type 
old prototype author failed properly exploit representation 
fact record type unnecessarily converted remy representation list field name field type pairs record type stored unnecessarily recalculated list representation remy representation great cost 
current release kleisli completely limsoon wong type system fully rectified mistake 
difference type inference performance implementations significant 
particular examples reported take hours infer types old prototype took minutes current implementation powerful machine 
improvement type inference performance type system current release kleisli functionalities old prototype 
old prototype allow user defined data type 
support subtyping 
support tuple type variables 
current release kleisli features 
tuple type variables useful implementing functions arrays 
data type subtyping bioinformatics applications 
old prototype meta information inputoutput type server information available achieve better type safety 
current release kleisli information possible 
note output type server usually dependent input request 
example output type relational database server depends input sql query 
relational database server principle produce infinite number different types general possible separate strongly typed interface function possible input output type server 
practical sacrifice type safety exchange small number interface functions server 
type system able type check function actual supplied input compile time recover type safety lost compromise 
type system current release kleisli capability 
example consider cpl program gdb connection relational database gdb pearson containing human genome mapping information section 
primitive locus sym process select id sym locus gdb old prototype accept typeable produces meaning polymorphic set element type instantiated type 
type safe ways 
obviously locus sym safely set records having id field sym field 
second run locus table gdb fields 
constrast current release kleisli interrogate catalogue information gdb 
locus required fields produce type id sym ensure locus sym set records having id field sym field 
checking possible relational database system keeps catalogue kleisli provides various meta information tables names columns availability indices columns expected sizes fact current release kleisli proper output type server input value fully supplied compile time 
necessary meta information needed achieve capability available recorded driver manager module depicted subsection driver registered kleisli 
example interface scop subsection illustration 
consider cpl program 
primitive 
process scop primitive 
process 
scop primitive 
process 
scop type produced string unit unit string string 

possible variants representing possible kinds requests supported scop 
output type polymorphic set knowing actual request type possible provide information 
type produced string 
sid string pdb string num string region string type cl string cf string sf string fa string sp string desc cl string cf string sf string fa string dm string sp string 
context 
sufficient current release kleisli determine function sends request scop entry corresponding input sid 
unnecessary know actual value 
output type type scop entry available piece meta information kleisli 
similarly type produced string 
string 
context 
sufficient current release kleisli determine function sends request sid scop entries belonging input scop classification 
output type set sid available kleisli piece meta information happens string 
optimization optimizer old prototype simple minded 
phase rule base rule application strategy kept rewriting query top manner rules rule base normal form reached 
support routines analysis manipulation syntax objects 
contrast current release kleisli matured optimizer 
mentioned subsection extensible number phases rule base rule application strategy 
addition adequate support analysis manipulation syntax objects conservative testing equivalences 
simple minded rigidity old optimizer limsoon wong responsible shortcomings described shortly overcome flexibility current optimizer 
said earlier old prototype rule application strategy 
furthermore implemented way new rule application strategies easily produced 
contrast shown subsection new optimizer carefully divided implementation strategies common traversal component individually specialized control component 
result relatively simple generate new strategies new optimizer 
important optimization rules missing old prototype 
example rules join re ordering migrating joins distinct relational databases 
rules new optimizer 
new optimizer able produce significantly better optimized queries involve relational databases 
incidentally example section involved join different relational databases optimized old prototype 
old prototype needed rules accomplish optimizations due rigidity having rule application strategy rule base 
example needed rules specify migrate selections projections joins single external relational database system shown author thesis wong 
contrast new optimizer rules accomplish optimizations shown subsection wong 
exploiting contextsensitive rule generator shown example rules new optimizer complicated corresponding plus rules old prototype 
rule migrating projections illustration 
special case rule rewrite name process select name process select name name assuming connects sql database 
original query entire table retrieved 
rewritten query column table retrieved 
generally relational database system context field projection projections pushed relational database unused fields retrieved transferred 
example rule migrating projections relational database implemented 
rule requires function traverses expression determine context field projection determine fields projected returns context returns list contains fields projected 
function implemented simple way contextsensitive rule generator example 
fun val count ref ref fun variable count proj variable kleisli contextsensitive length count recall subsection process represented nrc module syn object read priority assigned kleisli 
rule defined 
function sql support routines available current release kleisli handle manipulation sql queries syn syntax objects 
fun extset read string annotations test connects sql server case test projection 
extset read string sql 
implementation requires string 
actual implementation new optimizer allows syn object see wong 
drivers old prototype drivers 
driver asn version entrez 
second driver sybase database systems 
drivers developed kyle hart 
drivers provided old prototype access small number external sources greatly limiting number bioinformatics problems directly applied 
current release kleisli provide drivers different kinds bioinformatics sources covering significant proportion currently publicly available bioinformatics sources 
significant coverage bioinformatics tools databases current version kleisli directly applicable larger number bioinformatics integration problems 
interfaces old prototype came interface high level query language cpl adequate interested database style queries 
important additional interfaces kleisli available 
group users traditional database programmers prefer familiar syntax sql mathematical syntax cpl known date sql poorly designed query language despite popularity author resisted demand users years 
author gave partially 
current release kleisli provides second high level query language short simplified sql syntax sanitized version sql 
described full wong 
limsoon wong implemented kleisli translating nrc just cpl uses constructs select select distinct order select distinct order comprehension cpl sql syntax grouping aggregate functions 
special grouping aggregate function constructs needed sql sql data model allow nesting case 
group users non programmers prefer specify queries graphic interface 
current release kleisli experimental graphic interface called quick tan allows queries specified pointing clicking graphic representation data sources 
robust powerful version quick designed released 
users want reformat output produced kleisli viewing web browser 
current release kleisli comes additional interfaces integrate data model exchange format facilities popular programming languages web java perl 
description interfaces chen wong 
interfaces allow java perl programmer directly access kleisli cpl manipulate results native complex objects java perl opposed raw strings 
easily reformat output produced kleisli viewing web browser purposes 
similar interfaces programming languages planned 
kleisli system high level query language cpl embody advances database query languages functional programming 
represents significant deployment functional programming industrial strength prototype significant impact data integration bioinformatics benton karp baker brass 
early kleisli prototype applied bioinformatics hart efficiently solve real life data integration problems bioinformatics baker chen chen chen 
date cpl know system express general bioinformatics queries kleisli 
key ideas success system 
complex object data model sets bags lists records variants flexibly combined 
second high level query language cpl allows objects manipulated easily 
third self describing data exchange format serves simple conduit external data sources 
fourth query optimizer capable powerful optimizations 
influence functional programming research ideas described 
reason success system 
spite kleisli kleisli system remarkably compact implementation consisting codes standard ml new jersey 
compares lines codes typical full blown commercial database system oracle consideration large proportion lines devoted transaction control disk management user interfaces 
implementor author doubt robust platform functional programming demanded effort implementing kleisli 

author designed implemented prototype kleisli cpl university pennsylvania 
peter buneman val tannen leonid libkin dan suciu collaborated query language theory foundational issues cpl susan davidson chris overton introduced author problems bioinformatics 
kyle hart helped applying kleisli address integration problem 
re designed re implemented entire system returned institute systems science renamed kent ridge digital labs 
new system production pharmaceutical industry new implementation ideas higher performance robust better support bioinformatics 
desai narasimhalu supported development singapore 
oliver wu jing chen wang added bioinformatics support funding singapore economic development board 
author begun seriously kleisli bioinformatics 
nam hai chua university anthony ting institute molecular cell biology strauss kent ridge digital labs israel moscow taught knows biology relevant exciting subject 
author grateful contributions 
phil wadler bringing mike spivey attention encouraging write article suggestions improved presentation article 
aho sethi ullman 

compilers principles techniques tools 
reading massachusetts addison wesley 
altschul gish 

local alignment statistics 
methods 
altschul madden schaffer zhang zhang miller lipman 

gapped blast psi blast new generation protein database search programs 
nucleic acids research 
baker brass 

development biological sequence databases 
current opinion biotechnology 
baker brass bechhofer goble paton stevens june 
tambis transparent access multiple bioinformatics information sources 
pages proceedings th international conference intelligent systems molecular biology 
limsoon wong benton 

bioinformatics principles potential new multidisciplinary tool 
trends biotechnology august 
breazu tannen subrahmanyam 

logical computational aspects programming sets bags lists 
pages lncs proceedings th international colloquium automata languages programming 
springer verlag 
breazu tannen buneman naqvi 

structural recursion query language 
pages proceedings rd international workshop database programming languages 
morgan kaufmann 
buneman naqvi tannen wong 

principles programming complex objects collection types 
theoretical computer science 
burks fischer hayden keen kelly lawrence 

genbank 
nucleic acids research supplement 
cattell 
ed 

object database standard odmg 
san mateo california morgan kaufmann 
chen wong 

kleisli perl manual data exchange format supporting tools 
kent ridge digital labs heng mui keng terrace singapore 
chen chua strauss wong 

extracting consensus sequence kleisli 
pages proceedings st international conference bioinformatics genome regulation structure 
chen zhang wong 

protein patent query system powered kleisli 
pages proceedings acm sigmod international conference management data 
chen strauss wong 

kleisli bring features results 
pages genome informatics 
tokyo japan universal academy press 
codd 

relational model large shared data bank 
communications acm 
date 

critique sql database language 
sigmod record 
davidson overton tannen wong 

digital library biomedical researchers 
international journal digital libraries 
dong libkin wong 

local properties query languages 
pages proceedings th international conference database theory 
frakes baeza yates 

information retrieval data structures algorithms 
prentice hall 
goldberg paige 

stream processing 
pages proceedings acm symposium lisp functional programming 
hart overton 

relational translator ncbi asn database 
computer applications biosciences 
hart wong overton buneman 

query language integrate biological data 
abstracts st meeting interconnection molecular biology databases 
iso 

standard 
information processing systems 
open systems interconnection 
specification abstraction syntax notation asn 
karp 

database links foundation interoperability 
trends biotechnology 
kleisli 

databases recursive data structures 
ph thesis department computer information science university pennsylvania philadelphia pa 


issues developing integrated genomic databases application human chromosome 
bioinformatics 
libkin wong 

query languages bags aggregate functions 
journal computer system sciences 
litwin mark roussopoulos 

interoperability multiple autonomous databases 
acm computing surveys 
baltimore 

molecular cell biology 
new york freeman 
brenner hubbard chothia 

scop structural classification protein database investigation sequences structures 
journal molecular biology 
national center biotechnology information 

ncbi asn specification 
revision 
ngu yan wong 

heterogeneous query optimisation maximal subqueries 
pages proceedings rd international symposium database systems advanced applications 
ohori buneman breazu tannen 

database programming machiavelli polymorphic language static type inference 
pages proceedings acm sigmod international conference management data 
papakonstantinou garcia molina widom 

object exchange heterogenous information sources 
pages proceedings ieee international conference data engineering 
paulson 

higher order implementation rewriting 
science computer programming 
pearson matheson robbins 

gdb human genome data base anno 
nucleic acids research 
pearson 

comparison methods searching protein sequence databases 
protein science 
remy 

typechecking records variants natural extension ml 
pages proceedings th symposium principles programming languages 
remy 

efficient representation extensible records 
pages lee 
ed proceedings acm sigplan workshop ml applications 
schuler epstein 

entrez molecular biology database retrieval system 
methods 


data intensive intra internet applications experiences java corba world wide web 
pages proceedings th ieee international conference data engineering 
siegel 

corba fundamentals programming 
new york wiley 
spivey 

functional theory exceptions 
science computer programming 
suciu 

bounded fixpoints complex objects 
theoretical computer science 
suciu wong 

forms structural recursion 
pages lncs proceedings th international conference database theory 
prague springer verlag 
limsoon wong tan wang wong 

graphical interface genome multidatabases 
journal database management 
ullman 

principles database knowledgebase systems ii new technologies 
rockville md computer science press 
wadler 

comprehending monads 
mathematical structures computer science 
wadler 

functional programming angry half dozen 
sigplan notices 
walsh anderson 

acedb database genome information 
methods biochem anal 
wong 

querying nested collections 
ph thesis department computer information science university pennsylvania philadelphia pa 
wong 

remy fast polymorphic projection 
acm sigmod record 
wong 

kleisli query system manual 
kent ridge digital labs heng mui keng terrace singapore 
wong 

kleisli cpl extensible query optimizer programmer guide 
kent ridge digital labs heng mui keng terrace singapore 
wong 

collection programming language manual 
kent ridge digital labs heng mui keng terrace singapore 
wong 

simplified sql manual 
kent ridge digital labs heng mui keng terrace singapore 
