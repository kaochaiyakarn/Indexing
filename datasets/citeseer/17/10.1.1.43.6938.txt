duality computation pierre louis curien cnrs university paris hugo herbelin inria rocquencourt calculus syntax calculus control operators exhibiting symmetries program context call name call value 
calculus derived implicational gentzen sequent calculus lk key classical logical system proof theory 
correspondence proofs programs see lk precisely formulation called lk syntax directed system simple types calculus 
calculus choosing call name call value discipline reduction amounts choosing possible symmetric orientations critical pair 
analysis leads revisit question natural syntax call value functional computation 
de ne translation calculus calculus dual translations back calculus recover known cps translations composing translations 

programming languages implicit symmetries input output program context 
obviously shown selinger categorical setting picture extended evaluation mechanisms exists symmetry call name call value 
logical side best symmetries sequent calculus left right rules 
correspondence programs proofs traditionally explained natural deduction right right elimination rules implication elimination called modus ponens corresponding procedure application 
believe tradition part misleading 
sequent mail pierre louis curien pps jussieu fr mail hugo herbelin inria fr calculus style syntax exhibits symmetries precise believe compelling way 
key step program accomplished shown simply typed terms terms call name normal form bijective correspondence cut free sequent calculus proofs suitable restriction gentzen lj lk 
danos schellinx identi ed restriction lk called lkt part thorough investigation linear logic encodings classical proofs 
having gained correspondence naturalness making natural deduction usually preferred practice reason longer systematically study calculus sequent calculus traditional curry howard correspondence natural deduction 
sequent calculus far behaved natural deduction enjoys subformula property destruction rules cuts characterized contrast elimination rules natural deduction superimpose construction destruction operation application constructor term xm destructive term leading goal root conceive sequent calculus version call value calculus calculus 
starting point observation call value discipline manipulates input way classical extension calculus manipulates output 
computing mn call value viewed lling hole input context result evaluation focus contexts waiting values situation sounds dual output values passed continuations 
leads syntax di erent syntactic categories contexts terms commands commands pairs consisting term context represent closed system containing program environment 
correspondingly type di erent categories kinds sequents 
usual sequents 
type commands sequents typing terms contexts danos recognized relevance categories extends ogata relation call value cps translations natural restriction lk considered 
form 

symbol serves single distinguished output hypothesis input stands computation continue happened 
rest er prologue simple justi cation relevance sequent calculus computational study calculus 
call name evaluation calculus speci ed inference rule mn recursive speci cation may implemented stack follows mn 

simple device called krivine machine 
rephrased contexts stacks mn 

recall context term hole denoted lled term context context obtained lling hole context consider evolution types holes contexts execution rules 
type hole type hole type corresponds left implication note holes contexts correspond inputs 
second rule krivine machine reads cut implication introduced right implication introduced left 
world sequent calculi natural deduction 
section recall second author sequent calculus analysis call name calculus 
section discuss add call value picture 
leads section calculus typing system lk logical system classical logic limited implication connective kinds sequents introduced 
particular exhibit symmetry call name call value disciplines means dual orientations single critical pair 
section analyze calculus calculus corresponding sequent calculi lkt calculi correspond lkt relation linear logic explained appendix translation calculus arrives intersection target reduction stays calculus calculus call name call value discipline 
section reverse engineering exercise 
guided goal translating call value normal forms normal forms revisit source call value evaluation syntax extension calculus construct restriction extension opinion call value counterpart calculus 
section complete duality adding connective di erence 
allows exhibit fully duality terms contexts 
section link analysis classical works continuation semantics 
section complete description cut elimination lk conclude section 

call name calculus sequent calculus style section variant calculus 
calculus sequent calculus calculus natural deduction 
syntax typing rules simply typed calculus recalled appendix 
syntax subsequent sections embodies syntactic categories discussed commands contexts 
terms typing system sequent calculus judgements form 


typing rules 












notations read context lled just notation naming construction calculus 
terms reduced reductions rules 

hv normal forms terms subexpressions form 

treatment calculus follow longer cut redex paradigm sequent calculus 
treatment add contraction rules 


hv 
restrict cut rule combinations cut redex paradigm sequent calculus annoying phenomenon shows derivations turn solved removing rule longer include construction added explicitly grammar 
perfect world 
section ignore explicit process substitution natural deduction consider replacement carried completely single step 
easier convey main observations results 
note normal term form vj 
vn 
de ne translations calculus calculus 
translation preserves normal forms translation compositional preserves structure applicative terms 
translation involves parameterization context trick goes back plotkin called colon translation mn 
hv proposition 
translation maps normal terms normal terms 
proof 
normal form variable abstraction normal expression normal abstraction expression xm mn cases correspond situations cut redex 
notice term xm mk translation 

essentially terms rearrangement 
translation applicative terms turned way round variable applied rst argument second encoding variable applied list arguments 
simple adjustments consisting restricting syntax calculus rule statement proposition improved essentially isomorphism bijection preserves reduction step step ways 
consider restriction syntax calculus disallows applications contexts form real restriction application mn replaced expansion mn cf 
appendix av reduction decompose rule calculus smaller steps form context app 
ei 
var cj adjustments proposition restated translation isomorphism bijective maps normal forms normal forms preserves reductions step step 
translation de ne compositional preserve normal forms 
sort translation quite known amounts translate natural deduction sequent calculus 
hm mn hm jn 
translation maps normal form image previous translation modulo rule administrative redexes 
insertion application node translation simulates reduction rule calculus need re ne rule 
proposition 
translation homomorphism terms terms preserves call name reduction 
term reduces repeated applications rule proof 
preservation reduction trivial 
note preservation step step second part statement easy consequence xm mk 

steps 
logical computational loss may force body abstraction form expanding necessary 
observation leads variant calculus abstraction replaced double abstraction typing rule 


call value introducing traditionally explains encode call name call value introducing explicit operators freeze evaluation arguments 
idea applied encode call value top call name freezing function argument evaluated 
familiar construct understood way 
suppose want compute application mn call value discipline 
rst step may consist writing mx intention evaluated passed mx equivalently application delayed argument evaluated 
aim introduce new binding operator turn dual 
rst approximation encode hn correct encoding hn hp ii abstraction allows turn freeze expression context waiting value mx get hn hm jx 
ij ii reduces hn hm jx 
ii 
typing rule 
command context dual 
typing rule follows 

adds cut elimination rule ci forms critical pair rule command form impose rule priority redex yielding 
compositional interpretation calculus rede ned follows mn hn hm jx 
ii hm show call value reduction simulated translation hn jx 
ii 
hn hm ii 
hm step conditioned form value sense abstraction variable reduction applied 
begins prevents immediate application forces evaluation nal start capitalize analysis call name call value translation just de ned call value works stands call name provided changes priorities reduction system 
applies early possible reduces repeated rule de ne call name call value discipline application rewrite rules giving priority 
call name just optimized version translation justi es neutral symbol say proposition rephrased follows translation homomorphism terms terms call name reduction 
term reduces repeated applications rules suggests consider call value counterpart translation proposition 
raises question considered call byvalue normal forms calculus 
defer analysis section 
system lk collecting ingredients sections arrive calculus syntax 
evaluation rules 
jv 
ei hv hv ci observe supposed commitments call name call value reduction 
depends order rules call value consists giving priority redexes serve encode terms say form mn call name gives priority redexes 
disciplines referred cbn reduction cbv reduction respectively 
typing level obtain lk typing judgements 


typing rules 














term translated term follows mn hn hm jx 
ii hm judgement 
calculus translated lk judgement lk 

formulation rule 
di erent section closely related 
just application new 
immediately followed possible cbn reduction possible cbv reduction variable abstraction required call value discipline calculus 
see decomposition call value reduction steps explicit section 
new formulation rule presents redundancy translation old version 
works new far reduction concerned simpler translation translation call value provided takes new version 
larger context full lk new rule sense cbv translation designed way image lies intersection natural subsystems lk introduce 

behaved section de ne subcalculi calculus call calculus calculus typing systems correspond systems lkt 
de nition guided requirement stability call name call value evaluation respectively propositions 
syntax judgements lkt 




contexts called applicative contexts 
typing rules lk rules follows 






judgement 
sign delineates distinguished hypothesis puts linearity constraints hypothesis stoup terminology girard 
note implicit contractions left implication rule 
hand mechanism way switch distinguished hypothesis hypothesis 
syntactic restrictions lkt say done price turning 
putting observations see rules lkt guarantee formula stoup subject contraction rule 
reasons subject weakening rule weakening outside stoup implicit typing rule 
proposition 
term cbn reducts calculus lies calculus 

typing system considered section lives lkt shall call lkt retrospect section written 
judgement 
notice sharpening reducts translation lie calculus case 
turn call value restriction 
syntax judgements 




terms called values 
typing rules lk rules follows 








proposition 
term cbv reducts calculus lies calculus 
term stands intersection lkt calculus calculus uses notation reducts stay relevant evaluation discipline xed 
systems calculus calculus wellbehaved calculus 
easy check calculus calculus stable cbn cbv reduction normal commands lies calculus calculus de ned section 

cbv calculus 
section arrived perfect correspondence call name normal forms call name normal forms 
wish reach goal call byvalue normal forms 
purposes duality wish eliminate need operation encode call value computation need operator encode call name computation 
recall plotkin de nition call value reduction variable abstraction typical normal form yn translation hn 
iij jt 
ii contains 
redex 
simple way rst obstacle extend syntax calculus construct mn replace reduction rules 
application expression variable abstraction extend translation way hn hm ii consider term form xx yn normal normal form yn yn hv yn 
ii yn 
yn jv 
ii yn hm ii yn translation able reduce hidden redex cure mismatch introduce rule source language app 
mn free rule allows reduce xx yn follows xx yn 
yn yn yn consider term form zn free normal normal form zn zn zn hv iij hm ii zn hv hm iii zn hm ii zn translation able reduce hidden redex 
leads introduce rule free easily checked app normal forms follows mn mn possible stage write translation set normal forms terms call value normal form 
translation typically term ym write ym 

order avoid placing applicative subterms contexts order achieve second goal getting rid introduce rule exp ma 
mx application expression app exp normal forms follows yv vn xv vn ready call value normal form normal form translation de ned 
note double abstraction cf 
point need hv xv vn 


yv vn 


translation 
suggests consider calculus symmetric calculus section call calculus 
typing level call system stress subsystem just lkt subsystem lkt cf 

syntax lkt syntax 
hv 
rewrite rules new incarnation rule 
ei reading back calculus style arrive syntax call calculus vn vn usual seen shortcut free 
consider reduction rules calculus vn av vn vn av vn term obtained replacing occurrence vn replaced vn 
derives directly seeing shortcut 
translation straightforwardly adapted terms de nes fact bijection syntaxes vn hv jv 

vn hv jv 

state cbv counterpart proposition 
proposition 
translation isomorphism terms terms 

sabry felleisen characterized theory induced calculus call value cps translation theory induced equations addition lift en xv xv yv rules app correspond exactly lift cases en respectively 
note rules transparent point view calculus 
rule interpreted right left corresponds equation free sabry felleisen analysis call value calcu lus agrees 
new sequent calculus perspective suggests choice functional syntax terms 

completion duality order dualize terms contexts introduce connective dual implication di erence connective denoted 
syntax calculus extended follows call extension calculus 

add computation rule 
typing rules lk 

equation dual equation free calculus cf 
appendix 




de ne duality calculus works follows type level translations commands terms contexts de ned recursively applying table duality 



proposition 
lk 


extend de nition calculus calculus way proposition restricts re nes duality calculus calculus 
just give extended syntax calculus calculus leave rest reader calculus calculus 




cps translations section stands xed arbitrary type constant 
de ne translation lk types intuitionistic types types simply typed calculus written mathematical notation means space functions follows note read false image translation resp 
reads classically equivalent resp 

de ne translation lk terms terms follows kx 

proposition 
lk lk 
lk translation validates cbv discipline 

restricted proposition sharpened way additional implication holds 
provided translates kv considered note calculus forces callby value orientation critical pair translation takes care call name discipline duality 
set 
note time reads classically equivalent 
note alternatively taken primitive de ned proposition 
lk lk 
lk translation validates cbn discipline 
combining translation terms obtain cps translations terms cbn 

cbv 
translations known literature call name lafont hofmann streicher translation call value plotkin fischer translation 
dictionary useful recognize cbn cbv ka ca ka va ka ca ka 
ca 
ca ka kb ca va va cb letters stand values continuations computations respectively 
lafont semantics maps computations computations interprets continuation type pair computation type continuation type think stack section 
plotkin fischer call value semantics maps values computations interprets value type function values computations 

head reduction machine section specify kinds weak head reduction machine 
rst machine quite standard environments 
commands manipulate expressions having form gi explicit environments lists bindings form vf ef 
write vf vf rst binding appearing notation shorthand gi 
evaluate command start machine cfg 
gj 
gi hv gi gi cf ef gj gi cf vf gi jef gi de ned gj gi gj de ned bindings terms contexts restricted form ef reducing cbv cbn 
second machine exploits idea encoding environments means indexes stack pointer machine danos regnier restriction studied previous authors 
stack sequence bindings bind term context 
binding denotes closure environment binding 
binding comes indexes rst index points stack environment term context turns closure begins 
second index points environment binding closure goes 
concrete syntax bindings natural numbers state machine 
stack denote stack popped times jsj length 
evaluate start gi 
rules machine follows 
hv fp fqg sg sg hv hv sg de ned de ned min jsj jsj similarly 

rule acts garbage collecting rule removes part stack term code context 
instance functional language atomic types xpoints pcf application rule guarantees program atomic type ends empty stack 

related works section contains miscellaneous remarks organized hopefully helpful keywords 
symmetry 
altogether de ned calculi full syntax cbn cbv discipline section calculus lkt calculus section restrictions calculus section calculus section 
levels duality call name call value governed symmetry terms terms 
situation summarized table 
table shows source target direction cf 
proposition indicates stronger correspondences cf 
proposition 
interesting complete picture adding strong correspondences 
particular show cbv calculus arrives naturally relates cbv calculus 
consider call name calculus plus cbn calculus target 
calculus delay substitutions ym 
hv ii force sharing subcomputations 
logic syntax evaluation language lk nd cbn cbv lkt cbn cbv cbv lkt cbn cbn cbv non determinism 
non determinism classical logic encapsulated critical pairs similar pair 
explicit connection call name call value appears works 
semantics 
fairly clear syntax lk cbn cbv machine interpreted selinger control control categories categorical construction interpreting 
exponent exponent 
weak exponent weak exponent 
interesting useful details interpretation 
dynamics 
laurent investigated cbn proof nets extended polarized linear logic closely corresponds calculus 
proof nets enjoy simple correction criterion 
suggests proof net representation lk possible 
games 
intend develop game interpretation calculi 
game theoretic analysis call value honda yoshida 
hope sharpen analysis obtain game theoretic reading duality computation 
expressivity 
di erence connective purely formal way 
interesting study connective sake get insights computational meaning 
initiated kind investigation 
way seeing di erence connective allows view contexts values 
context hole function type explained pair values type viewed product type 
interpretation cut form appears destructive evaluate pair bind components pair respectively 

berardi symmetric calculus classical program extraction information computation 
des coroutines en logique proc 
journ ees des langages collection inria pauillac inria fr index html 

curien herbelin computing ohm trees proceedings rd fuji international symposium functional logic programming eds sato toyama world scienti 
danos sequent calculus continuation passing style compilation 
appear proceedings th congress logic methodology philosophy science held kluwer 
danos 
schellinx lkt sequent calculi second order logic dual linear decompositions classical implication advances linear logic cambridge university press 
danos 
schellinx new logic linear logic journal symbolic logic 
danos regnier ex deo ou encore chose dire sur la machine de krivine unpublished 
gentzen investigations logical deduction gentzen collected works ed szabo north holland 

girard unity logic annals pure applied logic 
ph 
de groote relation calculus syntactic theory control lecture notes computer science 
herbelin qu th ese de doctorat universit paris 
honda yoshida game theoretic analysis call value computation proc 
icalp lecture notes computer science springer 
hofmann streicher continuation models universal calculus proc 
logic computer science 
laurent polarized proof nets calculus draft 
ong stewart curry howard foundation functional computation control proceedings acm sigplan sigact symposium principle programming languages paris acm press january 
ogata constructive classical logic cps calculus appear international journal foundations functional programming 
parigot calculus algorithmic interpretation classical natural deduction proc 
international conference logic programming automated reasoning st petersburg lecture notes computer science 
plotkin call name call value lambda calculus theoretical computer science 
sabry felleisen reasoning programs continuation passing style lisp symbolic computation 
selinger control categories duality categorical semantics calculus draft 
urban bierman strong normalization cut elimination classical logic proc 
typed lambda calculus applications lecture notes computer science 
appendix calculus calculus extension calculus deals multiple allows account classical reasoning 
curry howard isomorphism seen calculus control operators equivalent say felleisen calculus 
sake consistency framework consider syntactic categories terms commands accordingly kinds typing judgements syntax mn typing judgements 

typing rules 


mn 






reduction rules call name substitution usual capture avoiding substitution rst rule third rule second rule replaces subterm form mn 
additional rule similar reduction include reduction rule treat implicitly expansion rule free linear decoration lkt section complete section providing translations lkt linear logic 
arrow types translated 
translation lkt linear logic de ned follows formulas translation consists inserting modalities places modi cation called linear decoration 
proposition 
lkt lkt 
lkt lkt ll ll ll ll linear decoration de ned follows proposition 


ll ll ll ll 
