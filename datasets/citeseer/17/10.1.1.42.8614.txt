adaptive communication environment object oriented network programming toolkit developing communication software douglas schmidt schmidt cs wustl edu www cs wustl edu schmidt department computer science washington university st louis mo earlier versions appeared th th sun user group conferences san jose california dec san francisco california june 
adaptive communication environment ace object oriented toolkit implements strategic tactical design patterns simplify development concurrent event driven communication software 
ace provides rich set reusable wrappers class categories frameworks perform common communication software tasks range operating system platforms 
communication software tasks provided ace include event demultiplexing event handler dispatching connection establishment interprocess communication shared memory management message routing dynamic re configuration network services multi threading concurrency control 
ace targeted developers high performance concurrent network applications services 
primary goal ace simplify development concurrent oo communication software utilizes interprocess communication event demultiplexing explicit dynamic linking concurrency 
addition ace automates communication software configuration reconfiguration dynamically linking services applications run time executing services processes threads 
describes structure functionality ace presents examples illustrating core ace features 
ace freely available commercial products ericsson bellcore siemens motorola kodak academic industrial research projects 
ace ported variety uni processor multi process os win versions unix sunos sgi irix hp ux osf aix linux sco vxworks mvs 
motivation demand robust high performance distributed communication software systems increasing dramatically 
examples systems include global personal communication systems network management platforms enterprise medical imaging systems real time market data monitoring analysis systems 
distributed computing promising technology improving collaboration connectivity interworking performance parallel processing reliability availability replication scalability portability modularity extensibility dynamic configuration reconfiguration cost effectiveness resource sharing open systems 
distributing services networks autonomous computers offers potential benefits developing distributed communication software complex compared stand applications 
significant portion complexity arises limitations conventional tools techniques develop communication software 
particular standard networking mechanisms sockets tli reusable component libraries windows sun rpc lack typesafe portable re entrant extensible application programming interfaces apis 
example sockets tli identify endpoints communication weakly typed integer handles increase potential subtle run time errors 
source development complexity arises widespread algorithmic decomposition 
distributed applications developed algorithmic decomposition techniques yields non extensible system architectures 
problem exacerbated fact source code examples popular network programming textbooks algorithmic oriented design implementation techniques 
object oriented techniques offer variety principles methods tools help reduce complexity developing communication software 
illustrate objectoriented techniques successfully applied practice examines structure functionality thread thread library library dynamic dynamic linking linking memory memory mapping mapping select select poll poll system system stream stream pipes pipes named named pipes pipes apis sockets sockets tli tli communication communication subsystem subsystem virtual memory virtual memory subsystem subsystem general posix win services process process subsystem subsystem synch synch wrappers wrappers frameworks class categories acceptor acceptor connector connector distributed services components name name server server token token server server logging logging server server gateway gateway server server sock sock tli tli fifo fifo sap sap log log msg msg service service handler handler time time server server os adaptation layer wrappers thread thread manager manager sap sap corba corba handler handler wrappers wrappers reactor reactor shared shared malloc malloc adaptive service executive adaptive service executive asx asx service service config config mem mem map map components adaptive communication environment adaptive communication environment ace 
ace freely available object oriented network programming toolkit design implementation fundamental communication software design patterns 
structure participants ace toolkit ace toolkit designed layered architecture ranges low level wrappers encapsulate existing os mechanisms higher level class categories frameworks extend wrappers implement strategic tactical communication software design patterns 
illustrates relationship components ace toolkit 
wrappers ace source tree contains lines 
approximately lines code total toolkit devoted os adaptation layer 
layer shields upper levels ace platform dependencies associated os mechanisms ffl multi threading synchronization ffl interprocess communication ffl event demultiplexing ffl explicit dynamic linking ffl memory mapped file shared memory os adaptation layer object oriented wrappers encapsulate enhance operating system concurrency interprocess communication ipc virtual memory mechanisms illustrated bottom available modern operating systems unix win 
applications combine compose components selectively inheriting aggregating instantiating ace wrapper class libraries described section 
wrappers improves application robustness encapsulating os communication concurrency virtual memory mechanisms type secure interfaces 
alleviates need applications access underlying weakly typed library interfaces directly 
compilers detect type system violations compile time run time 
ace uses inlining extensively eliminate performance penalties incurred additional type security abstraction provided wrapper layer 
class categories frameworks addition wrappers ace contains higherlevel network programming framework integrates enhances lower level wrappers 
framework supports dynamic configuration concurrent network daemons composed application services 
framework integrated collection components collaborate produce reusable architecture family related applications 
object oriented frameworks widely complex application domains graphical user interfaces databases operating system kernels communication subsystems 
frameworks enable larger scale reuse software components obtained reusing individual classes stand functions 
ace framework contains class categories ffl reactor ace reactor provides extensible object oriented demultiplexing event timer signal events service handler dispatching ffl service configurator ace service configurator supports flexible extensible construction applications services may configured dynamically run time ffl adaptive service asx executive adaptive service executive asx simplifies automates development configuration reconfiguration concurrent communication software applications composed communication services 
ffl concurrency mechanisms ace abstracts lower level os multi threading multi processing mechanisms flexible extensible manner 
ffl shared malloc mechanisms components managing dynamically allocation shared local memory 
ffl corba integration ace integrated corba implementations single threaded multi threaded orbix 
ace provides standard library network service components 
service components play roles ace 
provide reusable components common distributed system tasks logging naming locking time synchronization 

illustrate utilize ace features reactor service configurator service initialization concurrency ipc components 
combined language features templates inheritance dynamic binding design patterns factory builder service configurator reusable facilitate development communication software may updated extended modifying recompiling relinking restarting running systems 
stream framework service service configurator configurator applications applications application application specific specific concurrency concurrency global global interprocess interprocess communication communication service service initialization initialization reactor reactor network network services services applications applications applications applications ace class categories organized follows section describes ace wrapper components higher level ace framework components section outlines architecture production applications utilize ace components section presents concluding remarks 
ace wrapper components lowest level ace components consist wrappers encapsulate os multi threading local remote interprocess communication ipc virtual memory mechanisms 
wrappers help simplify design implementation robust compact portable extensible communication software 
ace wrappers grouped class categories shown 
class category collection components collaborate provide set related interfaces services 
primary class categories supported ace include ffl reactor performs event demultiplexing event handler dispatching encapsulating os event demultiplexing mechanisms select poll 
ffl ipc sap encapsulates local remote ipc mechanisms sockets tli memory mapped files ffl connection encapsulates active passive connection establishment mechanisms ffl concurrency encapsulates extends multithreading synchronization mechanisms ffl service configurator automates configuration reconfiguration encapsulating explicit dynamic linking mechanisms dlopen dlsym reactor reactor registered objects framework framework kernel application application timer timer queue queue signal signal handlers handlers handle handle table table event event handler handler logging logging handler event event handler handler logging logging handler handler handle input handle input handle input recv msg recv msg process msg event event handler handler logging logging acceptor acceptor sh new logging handler sh new logging handler accept sh accept sh sh open sh open os event demultiplexing interface ace reactor class category components ffl stream models implements layers partitions hierarchically integrated communication software 
class categories discussed section 
ace components illustrated booch notation 
solid rectangles indicate class categories combine number related classes common name space 
solid clouds indicate objects nesting indicates composition relationships objects undirected edges indicate type link exists objects 
dashed clouds indicate classes directed edges indicate inheritance relationships classes undirected edge small circle indicates composition uses relation classes 
inscribed triangle identifies class class 
reactor event demultiplexing service dispatching communication software processes different types events timer signal events 
example inetd structured internally event loop monitors set communication ports 
communication port associated application specific handler implements network services standard internet ftp telnet time day echo services request client arrives monitored port standard ftp service resides known port associated service handler dispatched class provides interface contains pure virtual method 
pure virtual method provides interface declaration accompanying definition 
subclasses class provide definitions pure virtual methods objects class may instantiated 
form request inetd forks ftp process transfer files behalf client 
consolidate automate common event processing activities ace provides event demultiplexing event handler dispatching framework called ace reactor 
reactor encapsulates functionality unix windows nt event demultiplexing mechanisms select poll portable extensible wrapper 
os event demultiplexing system calls detect occurrence different types input handles simultaneously 
facilitate application portability ace reactor provides interface regardless event demultiplexing mechanism 
addition ace reactor contains mutual exclusion mechanisms designed perform callback style dispatching correctly efficiently multithreaded event processing environment 
structure objects ace reactor illustrated 
objects responsible demultiplexing events temporal events generated timer driven callout queue events received communication ports signal events dispatching appropriate methods pre registered event handler process events 
shown event handler objects derive ace event handler base class 
class specifies interface ace reactor dispatch certain application specific methods response arrival certain events 
ace reactor uses virtual methods declared event handler interface integrate demultiplexing handle timer signal events 
handle events dispatched handle input handle output handle exceptions methods timer events dispatched handle timeout method events dispatched handle signal method 
subclasses ace event handler logging handler described section may augment base class interface defining additional methods data members 
addition virtual methods ace event handler interface may selectively overridden subclasses implement application specific functionality 
example application specific subclasses pbx monitoring server section define event handler objects communicate clients inheriting instantiating objects sock sap tli sap transport interface classes described section 
virtual methods ace event handler base class defined subclass application may instantiate resulting event handler object 
example implements simple program continuously exchanges messages back forth processes bi directional communication channel 
example illustrates services main program initialize register handler callback ping pong start event loop data arrives ok send reactor reactor handle events foreach event handle input select reactor reactor register handler callback handle output signal arrives timer expires handle signal handle timeout ace reactor interaction diagram ace event handler 
depicts ace reactor demultiplex dispatch signal timer events 
ping pong class shown inherits interface ace event handler implements applicationspecific functionality follows class ping pong public ace event handler public ping pong char len min strlen buf virtual int handle input ace handle handle return read handle buf virtual int handle output ace handle handle return write handle buf len virtual int handle signal int signum finished virtual int handle timeout const time value const void finished bool done void return finished private sig atomic finished char buf size len bi directional communication channel created svr unix stream pipes static int init handles ace handle handles pipe handles lm error log error pipe enable message oriented mode mode 
int arg ioctl handles arg ioctl handles arg return main program begins opening appropriate communication channel 
program forks child process instantiates ping pong event handler object named callback processes registers callback object signal timer events instance ace reactor enters event loop follows int main int argc char argv ace handle handles ace reactor reactor init handles handles pid pid fork ping pong callback argv register event handler reactor register handler handles pid callback ace event handler read mask ace event handler write mask register signal event handler reactor register handler callback register timer event handler reactor schedule timer callback main event loop run process callback done false reactor handle events return callback event handler timer signal events stored appropriate tables inside ace reactor 
likewise ace reactor stores appropriate handle internal table register handler method invoked register event handler 
application subsequently performs main event loop calling ace reactor handle events method handle passed argument underlying os demultiplexing system call select poll 
input output signal timer events associated pre registered event handler callback object occur run time ace reactor automatically detects events dispatches appropriate method event handler object 
dispatched method callback object responsible performing application specific functionality writing message communication channel reading message channel setting flag triggers termination program 
collaboration components depicted object interaction diagram shown 
ipc sap local remote ipc mechanisms ace provides forest class categories rooted ipc sap interprocess communication service access point base class 
ipc sap encapsulates standard ipc sap sock sap tli sap fifo sap sap socket api transport layer interface api stream pipe api named pipe api ipc sap class category relationships handle os local remote ipc mechanisms offer connection oriented connectionless protocols 
shown forest class categories includes sock sap encapsulates socket api tli sap encapsulates tli api sap encapsulates unix sunos stream pipe api fifo sap encapsulates pipe api 
class category organized inheritance hierarchy 
subclass provides defined interface subset local remote communication mechanisms 
subclasses hierarchy comprise functionality particular communication abstraction internet domain unix domain protocol families 
classes opposed stand functions helps simplify network programming follows ffl shield applications error prone details example ace addr class hierarchy shown supports diverse network addressing formats type secure interface awkward error prone struct data structures directly 
ffl combine operations form single operation example sock acceptor constructor performs various socket system calls socket bind listen required create passive mode server endpoint 
ffl parameterize ipc mechanisms applications classes form basis parameterizing application type ipc mechanism requires 
helps improve portability discussed section 
ffl enhance code sharing inheritance hierarchical decomposition increases amount common code shared various ipc mechanisms interface lower level os device control system calls ioctl 
sections discuss class categories ipc sap 
sock sap sock sap class category provides applications object oriented interface internet domain unix domain protocol families 
applications may access functionality underlying internet domain unix domain socket types inheriting instantiating appropriate sock sap subclasses shown 
ace sock subclasses encapsulate functionality ace subclasses encapsulate unix domain functionality 
shown subclasses may decomposed provide unreliable connectionless message oriented functionality vs ace stream components provide reliable connection oriented functionality ace acceptor components provide connection establishment functionality typically servers vs stream components provide bi directional data transfer functionality clients servers 
wrappers encapsulate socket interface helps detect subtle application type system violations compile time facilitate platform independent transport level interface improves application portability greatly reduce amount application code development effort expended lower level network programming details 
illustrate point example program implements simple client application uses ace sock bcast class broadcast message servers listening designated port number lan subnet int main int argc char argv ace sock bcast sap sap char msg unsigned short port msg argc argv hello world port argc atoi argv sap send msg strlen msg port send broadcast exit exit instructive compare concise example dozens lines source code required implement broadcasting socket interface directly 
tli sap tli sap class category provides interface system transport layer interface tli 
tli sap inheritance hierarchy tli identical sock sap wrapper sockets 
primary difference tli tli sap define interface protocol family 
addition tli currently ported win platforms 
combining features default parameter values templates read write compatibility streams module relatively straight forward develop applications may parameterized compile time operate correctly socket tli transport interface 
sock sock connector acceptor sock acceptor sock connector sock ipc sap sock mcast sock bcast group comm datagram comm stream comm connection establishment sock stream stream sock sap class categories instance code illustrates templates may applied parameterize ipc mechanisms application 
code extracted distributed logging facility described section 
code subclass derived ace event handler parameterized particular type transport interface corresponding protocol address class logging handler header file template class logging handler public ace event handler public logging handler void virtual logging handler void virtual int handle input ace handle virtual ace handle get handle void const return peer stream get handle protected peer stream peer stream depending certain properties underlying os platform bsd sunos system sunos logging application may instantiate client handler class sock sap tli sap shown logging application class logging handler defined mt safe sockets public logging handler public logging handler endif mt safe sockets 
increased flexibility offered template approach extremely useful developing application run portability multiple os platforms 
particular ability parameterize applications transport interface necessary variants sunos platforms socket implementation sunos thread safe tli implementation sunos contains number serious defects 
tli sap shields applications peculiarities tli interface 
example subtle applicationlevel code required properly handle non intuitive error prone behavior listen accept concurrent server encapsulated accept method tli acceptor class 
method accepts incoming connection requests clients 
default parameter values standard method calling accept method syntactically equivalent tli sap sock sap applications 
sap sap class category provides wrapper interface high performance local ipc 
platforms sap class category implemented atop named pipes 
win named pipes mechanism primarily transfer data efficiently processes machine 
typically efficient sockets local ipc 
platforms sap class category implemented mounted stream pipes 
sunos provides system call mounts pipe handle designated location unix file system 
server application created pushing stream module mounted pipe 
client application running host machine server subsequently opens filename associated mounted pipe client server receive handle identifies unique non multiplexed bi directional channel communication 
sap inheritance hierarchy mirrors sock sap tli sap 
offers functionality similar sock sap ace classes encapsulate unix domain sockets sunos platforms sap flexible ace interface enables stream modules pushed popped sap endpoints respectively 
sap supports bi directional delivery byte stream prioritized message oriented data processes threads executing host machine 
fifo sap fifo sap class category encapsulates unix named pipe mechanism called fifos 
stream pipes named pipes offer uni directional data channel senders single receiver 
messages different senders placed communication channel 
type demultiplexing identifier included explicitly message enable receiver determine sender transmitted message 
streams implementation named pipes sunos provides message oriented data delivery semantics 
contrast platforms sunos provides named pipes 
fixed length messages message sent named pipe sunos distinguished form byte count special termination symbol allows receiver extract messages communication channel 
alleviate limitation ace fifo sap implementation contains logic emulates message oriented semantics available sunos communication mechanisms addition encapsulating handle communication mechanisms sockets tli ace provides wrappers memory mapped files system unix ipc mechanisms ffl memory mapped files ace mem map class provides interface memory mapped file mechanisms available win unix mmap family system calls 
calls utilize underlying os virtual memory facilities map files address space process 
contents mapped files may accessed directly pointers 
pointer interface convenient efficient accessing blocks data indirectly standard read write system calls 
addition contents memory mapped files may shared conveniently processes 
existing win unix interfaces memory mapped files somewhat baroque 
instance developers perform bookkeeping details manually explicitly opening file determining length performing multiple mappings 
contrast ace mem map wrapper offers interface employs default values multiple constructors type signature variants map open file handle map filename simplify typical memory mapped file usage patterns 
example program uses ace mem map wrapper map file specified command line print lines reverse static void const char putchar continue int main int argc char argv char filename argv char file mem map mmap filename mmap file size size mmap size file size file size size file size file size file return return instructive compare wrapper interface verbose interface necessary systems calls read directly 
ffl system ipc mechanisms sunos unix provides suite shared memory synchronization message passing mechanisms known colloquially system ipc 
functionality offered mechanisms subsumed sunos unix facilities mmap thread synchronization stream pipes primitives respectively 
certain types applications database engines may benefit characteristics system ipc mechanisms peer peer nature message queues efficient atomicity semantics semaphores widespread availability system ipc range unix os platforms 
somewhat challenging understand system ipc mechanisms particularly semaphores correctly interfaces quite general behavior traditionally documented sparsely 
ace system ipc wrapper interfaces shield developers myriad unnecessary details 
example ace wrapper version system ipc semaphores intuitive simpler applications utilize standard wait signal semaphore operations shown code fragment typical producer consumer example typedef ace sv semaphore simple sema sema prod sema create sema cons sema create void producer void prod wait produce resource cons signal void consumer void cons wait consume resource prod signal instructive compare concise wrapper interface verbose interface necessary system semaphores directly 
concurrency multi threading synchronization mechanisms ace concurrency class category contains wrappers ace mutex ace condition ace semaphore ace rw mutex encapsulate corresponding solaris posix pthreads multi threading synchronization mechanisms 
wrappers automate initialization synchronization objects appear fields classes simplify typical usage patterns threading synchronization mechanisms 
instance code illustrates ace wrappers sunos mutex cond synchronization mechanisms typical shared resource management class class resource manager public resource manager int initial resources resource add lock resources initial resources int acquire resources int amount wanted lock acquire resources waiting block resources released 
resource add wait resources amount wanted lock release int release resources int amount released lock acquire resources amount released waiting waiting resource add signal waiting waiting resource add broadcast lock release private ace mutex lock ace condition resource add int resources int waiting 
note constructor ace condition object resource add binds ace mutex object lock condition object 
simplifies ace condition wait calling interface comparison underlying sunos cond cond wait interface 
ace mutex wrappers provide relatively elegant method synchronizing multiple threads control potentially error prone possible forget call release method due programmer due occurrence exceptions 
improve application robustness ace synchronization facilities leverage semantics class constructors destructors 
ensure ace mutex locks automatically acquired released ace provides helper class called ace guard defined follows template class ace guard public ace guard mutex lock lock acquire ace guard void lock release private mutex lock object ace guard class defines block code ace mutex acquired released automatically block exited 
note ace guard class defined template parameterized mutual exclusion mechanism 
different types mutex semantics 
type mutual exclusion shares common interface acquire release possesses different serialization performance properties 
types mutual exclusion supported ace non recursive recursive locks 
ffl non recursive locks non recursive lock provides efficient form mutual exclusion define critical section single thread may execute time 
non recursive sense thread currently owning lock may reacquire lock releasing 
deadlock occur immediately 
sunos provides support non recursive locks mutex sema types posix pthreads doesn provide synchronization mechanisms 
asx framework provides mutex rw mutex semaphore wrappers encapsulate semantics respectively 
ffl recursive lock recursive lock hand allows acquire method invocations nest long thread owns lock trying re acquire 
recursive locks particularly useful callback driven event dispatching frameworks reactor described section framework event loop performs callbacks pre registered user defined objects 
user defined objects may subsequently re enter dispatching framework method entry points recursive locks necessary prevent deadlock occurring locks held framework callbacks 
template class implements recursive lock semantics synchronization mechanisms solaris threads posix pthreads native behavior provide recursive locking semantics template class ace recursive thread mutex public initialize recursive mutex 
ace recursive thread mutex void implicitly release recursive mutex 
ace recursive thread mutex void acquire recursive mutex 
int acquire void const conditionally acquire recursive mutex 
int void const releases recursive mutex 
int release void const private ace mutex nesting mutex ace condition mutex available thread owner id int nesting level note interface class consistent locking mechanisms available ace 
code illustrates ace guard ace recursive thread mutex callback mechanism int callback dispatch const event handler eh event event constructor acquires lock entry 
ace guard lock eh handle event event destructor guard releases lock exit 
code ensures registering event handler object executes critical section 
example illustrates idiom constructor class acquires lock synchronization object automatically ace guard object created 
likewise class destruction automatically unlocks object mon object goes scope 
destructor mon invoked automatically release mutex lock regardless arm statement returns method 
addition lock released automatically exception raised processing body register handler method 
ace recursive thread mutex ensure application specific handle event callbacks dispatched dispatch method cause deadlock reenter callback object 
ace provides ace thread manager class contains set mechanisms manage groups threads collaborate implement collective actions 
instance ace thread manager class provides mechanisms suspend resume allow number participating threads suspended resumed atomically 
service configurator explicit dynamic linking mechanisms static linking technique composing complete executable program binding object files compile time static link time 
dynamic linking contrast enables addition deletion object files address space process initial program invocation point run time 
sunos support implicit explicit dynamic linking ffl implicit dynamic linking implement shared object files known shared libraries 
shared object files reduce primary secondary storage utilization copy shared object code exists memory disk regardless number processes executing code 
certain address resolution relocation operations may deferred dynamically linked function referenced 
lazy evaluation scheme minimizes link editing overhead process start 
ffl explicit dynamic linking provides interfaces allow applications obtain utilize remove run time address bindings symbols defined shared object files 
explicit dynamic linking mechanisms significantly enhance functionality flexibility communication software services may inserted deleted runtime terminating restarting entire application 
sunos supports explicit dynamic linking dlopen dlsym routines win supports feature routines 
ace provides service configurator class category encapsulate explicit dynamic linking mechanisms sunos set classes inheritance hierarchies 
service configurator leverages ace components extend functionality conventional daemon configuration control frameworks listen inetd windows nt service control manager provide automated support static dynamic configuration concurrent multi service communication software monitoring sets communication ports activity dispatching incoming messages received service config reactor service repository service repository class service config class service repository service repository iterator service object service object inheritance hierarchy event handler shared object service object task service object event handler application specific functionality task task functionality component relationships service configurator class category monitored ports appropriate application specified services 
remainder section discusses primary components service configurator class category 
ace service object inheritance hierarchy primary unit configuration service configurator service 
service may simple returning current time day highly complex distributed real time router pbx event traffic 
provide consistent environment defining configuring communication software application services derived ace service object inheritance hierarchy illustrated 
ace service object class focal point multi level hierarchy types related inheritance 
standard interfaces provided classes type hierarchy may selectively implemented application specific subclasses order access certain application independent service configurator mechanisms 
mechanisms provide transparent dynamic linking service handler registration event demultiplexing service dispatching 
decoupling application specific portions handler object underlying application independent service configurator mechanisms effort necessary insert remove services running application significantly reduced 
ace service object inheritance hierarchy consists ace event handler ace shared object base classes ace service object derived class 
ace event handler class described section 
behavior classes outlined 
ffl ace shared object base class base class specifies interface dynamically linking service handler objects address space application 
ace shared object base class exports pure virtual methods init fini info 
methods impose contract reusable components provided service configurator application specific functionality utilizes components 
pure virtual methods service configurator ensures service handler implementation honors obligation provide certain configuration related information 
information subsequently service configurator automatically link initialize identify unlink service run time 
ace shared object base class defined independently ace event handler class clearly separate orthogonal sets concerns 
example certain applications compiler text editor benefit dynamic linking require communication port event demultiplexing 
conversely applications ftp server may require event demultiplexing require dynamic linking 
separating interfaces base classes applications able select subset service configurator mechanisms incurring unnecessary storage costs 
ffl ace service object derived class general installing administering complex distributed systems requires support dynamic linking event demultiplexing service dispatching order automate dynamic configuration reconfiguration application services 
service configurator defines ace service object class combines interfaces ace event handler ace shared object base classes 
resulting derived class supplies interface developers basis implementing configuring service service configurator 
development application specific subclasses ace service object implement pure virtual suspend resume methods specified ace service object class interface 
methods invoked automatically service configurator response external events 
application developer may control actions object undertakes order suspend service removing unlinking completely resume previously suspended service 
addition application specific subclasses implement pure virtual methods init fini info get handle inherited defined ace service object subclass 
init method serves entry point service handler runtime initialization 
method responsible performing application specific initialization instance ace service object dynamically linked 
likewise fini method called automatically service configurator ace service object unlinked removed application run time 
method typically performs termination operations release dynamically allocated resources memory handles synchronization locks 
info method formats humanly readable string concisely reports service addressing information documents service functionality 
clients may query application retrieve information contact particular service running application 
get handle method reactor extract underlying handle service handler object 
handle identifies transport endpoint may accept connections receive data clients 
ffl application specific concrete derived subclasses service object class interface contains pure virtual methods inherited event handler shared object base classes 
developers supply concrete subclasses define pure virtual methods described implement necessary application specific functionality 
accomplish task subclasses typically define certain virtual methods exported service object interface 
example handle input method implemented accept connections data received clients 
ace acceptor class depicted example application independent subclass accepts connection requests part distributed logging facility 
class described example section 
ace service repository class service configurator class category supports configuration single service communication software 
simplify run time administration necessary individually collectively control coordinate ace service objects comprise application currently active services 
ace service repository object manager coordinates local remote queries involving services offered service configurator application 
search structure object manager binds service names represented ascii strings instances ace service objects represented object code 
service name uniquely identifies instance ace service object stored repository 
entry ace service repository contains pointer ace service object portion application specific derived class shown 
enables service configurator load enable suspend resume unload ace service objects application statically dynamically 
dynamically linked ace service objects repository maintains handle underlying shared object file 
handle unlink unload ace service object running application service offers longer required 
iterator class supplied conjunction ace service repository 
class visit ace service object repository unduly compromising data encapsulation 
ace service config class ace service config class unifying component service configurator framework 
illustrated class integrates service configurator framework components ace service repository ace reactor automate static dynamic configuration concurrent multi service communication software 
ace service config class uses configuration file known svc conf guide configuration reconfiguration activities 
application may associated distinct svc conf configuration file 
likewise set applications may described single svc conf file 
describes primary syntactical elements svc conf file extended backus naur format ebnf 
service config entry file begins svc config entries svc config entry null dynamic static suspend resume remove stream string null service object module stream null pathname ident pathname ident active inactive null string null ebnf format service config entry symbol description dynamic dynamically link enable service static enable statically linked service remove completely remove service suspend suspend service removing resume resume previously suspended service stream configure stream daemon table service config directives service config directive specifies configuration activity perform 
table summarizes valid service config directives 
service config entry contains attributes indicate location shared object file dynamically linked service parameters required initialize service run time 
consolidating service attributes initialization parameters single configuration file installation administration services application significantly simplified 
svc conf file helps decouple structure application behavior services 
decoupling permits lazy configuration reconfiguration mechanisms provided framework application specific attributes parameters specified svc conf file 
depicts state transition diagram illustrating methods service configurator class category invoked response events occurring service configuration execution reconfiguration 
example configure reconfigure events occur process directives method ace service config class called consult initialized configure service config process directives network event reactor dispatch reconfigure service config process directives shutdown service config close awaiting events loop service config run event loop call handler event handler handle input idle perform callback state transition diagram service configuration execution reconfiguration svc conf file 
file consulted new instance application initially configured 
file consulted application reconfiguration triggered receipt pre designated external event unix signal notification arriving socket 
stream layered integration stream class category primary focal point adaptive communication environment 
class category contains adaptive service executive asx framework asx framework integrates lowerlevel wrapper components ipc sap higherlevel class categories reactor service configurator 
asx framework helps simplify development hierarchically integrated communication software particularly user level communication protocol stacks network servers 
asx framework designed improve modularity extensibility reusability portability application specific services underlying os concurrency ipc explicit dynamic linking demultiplexing mechanisms services built 
asx framework provides benefits developers communication software 
embodies encapsulates implements key design patterns commonly develop communication software 
design patterns help enhance software quality addressing fundamental challenges large scale system development 
challenges include communication architectural developers accommodating new design paradigms architectural styles resolving non functional forces reusability portability extensibility avoiding development traps pitfalls usually learned experience 

strictly separates key development concerns ace separates communication software development distinct categories application independent concerns common communication software port monitoring message buffering queueing demultiplexing service dispatching local remote interprocess communication concurrency control application configuration installation run time service management application specific concerns depend individual application 
reusing wrappers frameworks provided ace developers freed spending time reinventing solutions commonly recurring tasks 
turn enables concentrate key higher level functional requirements design concerns constitute particular applications 
primary asx features asx framework increases flexibility communication software decoupling application specific processing policies configuration related development activities mechanisms ffl type number services associated application process asx framework permits applications consolidate services single administrative unit 
multi service approach configuring communication software helps simplify development reuse code performing common service initialization activities automatically reduce consumption os resources process table slots spawning service handlers demand allow application services updated modifying existing source code terminating executing dispatcher process inetd consolidate administration network services uniform set configuration management operations 
ffl point time service configured application asx framework leverages service configurator framework described section provide extensible object oriented interface automates os mechanisms explicit dynamic linking 
dynamic extensibility communication software permitting internal services configured application begins executing running 
feature enables application services dynamic reconfigured requiring modification recompilation relinking restarting active services 
asx framework choice static dynamic configuration may selected service basis 
furthermore choice may deferred application begins execution 
ffl type execution agents asx framework services may performed run time different types process thread execution agents 
decoupling service functionality execution agent invoke service asx framework increases range application concurrency configuration alternatives available developers 
efficient application concurrency configuration depends certain service requirements platform characteristics 
example process configuration may appropriate implementing long internet ftp telnet base security mechanisms process ownership 
case service active instance service may mapped separate process executed parallel multi processor platform 
different configurations may suitable circumstances 
instance simpler efficient implement cooperating services systems distributed database engines separate threads frequently common data structures 
approach service may executed separate thread process reduce overhead scheduling context switching synchronization 
ffl order hierarchically related services combined application complex services may composed interconnected series independent service objects communicate passing messages 
objects may joined essentially arbitrary configurations satisfy application requirements enhance component reuse 
ffl handle timer event demultiplexing mechanisms mechanisms dispatch incoming connection requests data application specific handler 
asx framework uses reactor class category integrate demultiplexing handle timer signal events extensible type safe object oriented interface 
ffl underlying ipc mechanisms application services may ipc sap mechanisms described section exchange data participating communication entities local remote systems 
weakly typed handle socket tli interfaces ipc sap wrappers enable applications access underlying os ipc mechanisms type safe portable interface 
asx framework incorporates concepts modular communication frameworks including system streams kernel conduit framework choices object oriented operating system survey communication frameworks appears 
frameworks contain features support flexible configuration communication subsystems inter connecting building block protocol service components 
general frameworks encourage development standard communication related components message managers timer event dispatchers assorted protocol functions decoupling processing functionality surrounding framework infrastructure 
described asx framework contains additional features decouple processing functionality underlying process architecture 
streams application services configured asx framework execute user space kernel space 
advantages developing general purpose communication software user space os kernel ffl access general os features applications developed run user space access full range os mechanisms dynamic linking memory mapped files multi threading large virtual address spaces interprocess communication mechanisms file systems databases 
contrast kernel resident components restricted limited set kernel specific mechanisms 
idioms overcome limitations maintaining user level daemon performs file behalf kernel resident component workarounds tend somewhat inelegant non portable 
ffl enhanced development environment higher level programming tools symbolic debuggers may develop applications user space 
conversely developing network services os kernel complex challenging task due primitive debugging tools subtle timing interactions kernel programming environment 
risky expect application developers program effectively constrained environment 
ffl increased system robustness exceptional conditions dereferencing null pointers dividing generated user level process thread affect offending process thread 
exceptional conditions os kernel may cause entire operating system panic crash 
rebooting os crash quickly tedious 
ffl portability porting kernel level drivers different os platforms different variants os platform typically entails complications porting user level application components platforms 
sunos dki api intended alleviate portability problems unix platforms solve portability problem applications running platforms os windows nt vms novell 
primary rationale implementing distributed services os kernel improve performance 
example kernel resident implementation communication process architecture represents binding cpus application tasks messages implement services communication system 
network interface network interface pseudo pseudo stream tail multiplexor application application stream stream stream stream head head application application stream stream downstream message message object object write write task task object object read read task task object object module module object object open close put svc components asx framework protocol stack helps reduce scheduling context switching protection domain boundary crossing overhead may exhibit predictable response time due wired paged memory 
communication software applications increased flexibility simplicity robustness portability offered development key requirements offset potential performance degradations 
stream class category components components stream class category responsible coordinating configuration run time execution ace stream objects 
ace stream object user applications collaborate configure execute application specific services asx framework 
illustrated ace stream contains series inter connected ace module objects may linked developers installation time applications run time 
ace modules objects decompose architecture application series inter connected functionally distinct layers 
layer typically implements cluster related service functionality transport service presentation layer formatting service 
ace module contains pair ace task objects partition layer constituent read side write side processing functionality 
language features inheritance dynamic binding parameterized types enable developers incorporate application specific functionality stream modifying application independent asx framework components 
example adding service layer stream involves inheriting default ace task interface selectively overriding virtual methods subclass provide application specific functionality allocating new ace module contains instances read side write side application specific ace task subclass inserting ace module stream 
services adjacent inter connected ace tasks collaborate exchanging typed messages message passing interface 
avoid reinventing familiar terminology class names stream class category correspond similar available system streams framework 
techniques support extensibility concurrency frameworks significantly different 
example adding application specific functionality asx stream classes performed inheriting defined interfaces implementations existing framework components 
inheritance add new functionality provides greater type safety pointer system streams 
asx stream classes employ different concurrency control scheme reduce deadlock simplify flow control tasks stream 
asx stream classes completely redesign reimplement coroutine service processing mechanisms system streams 
asx changes intended utilize multiple pes shared memory multiprocessor platform effectively 
remainder section discusses primary components stream class category ace stream class ace module class ace task class detail ffl ace stream class ace stream class defines application interface stream 
ace stream object contains stack services provide applications bi directional get put style interface sending receiving data control messages inter connected modules comprise particular stream 
ace stream class implements push pop style interface allows applications configure stream run time inserting removing objects ace module class described 
ffl ace module class ace module class defines distinct layer application specific functionality 
stream formed inter connecting series ace module objects 
ace module objects stream loosely coupled collaborate adjacent ace module objects passing typed messages 
ace module object contains pair pointers objects applicationspecific subclasses ace task class described shortly 
process executes run time stack processes complicates increases potential deadlock 
example process may suspend execution wait resources available events occur 
shown default ace module objects ace stream head ace stream tail installed automatically stream opened 
ace modules interpret pre defined asx framework control messages data messages circulate stream run time 
ace stream head class provides message buffering interface application stream 
ace stream tail class typically transforms incoming messages network pseudo device canonical internal message format may processed higher level components stream 
likewise outgoing messages transforms messages internal format network messages 
ffl ace task class ace task class central mechanism ace creating user defined active objects passive objects process application messages 
ace task perform activities ffl dynamically linked ffl serve demultiplexing endpoint operations ffl associated multiple threads control called active object ffl store messages queue subsequent processing ffl execute user defined services 
ace task class defines interface inherited implemented derived classes order provide application specific functionality 
class interface defines pure virtual methods open close put svc described 
defining ace task class enhances reuse decoupling application independent components provided ace stream class category applicationspecific subclasses inherit components 
likewise pure virtual methods allows compiler ensure subclass task honors obligation provide functionality ffl initialization termination methods subclasses derived ace task implement open close methods perform application specific ace task initialization termination activities 
activities typically allocate free resources connection control blocks handles synchronization locks 
ace tasks defined ace modules separately 
ace modules stored pairs ace task subclass handles read side processing messages sent upstream ace module layer handles write side processing messages send downstream module layer 
open close methods active put put active active module module module process thread write task object read task object module object module module module svc put svc put active active active alternative methods invoking put svc methods module write side read side ace task subclasses invoked automatically asx framework ace module inserted removed stream respectively 
ffl application specific processing methods addition open close subclasses ace task define put svc methods 
methods perform application specific processing functionality messages 
example messages arrive head tail stream series inter connected ace tasks result invoking put svc method ace task stream 
put method invoked ace task layer stream passes message adjacent ace task layer 
put method runs synchronously respect caller borrows thread control task originally invoked put method 
thread control typically originate upstream application process downstream pool threads handle device interrupts internal stream event dispatching mechanism callout queue trigger retransmissions connection oriented transport protocol ace module 
ace task executes passive object borrows thread control caller ace task put method entry point ace task serves context ace task executes behavior 
contrast ace ace task executes active object ace task svc method perform application specific processing asynchronously respect ace tasks 
put svc method directly invoked adjacent ace task 
invoked separate thread associated ace task 
thread provides execution context thread control ace task svc method 
method runs event loop continuously waits messages arrive ace task ace message queue see bullet implementation put svc method message may forwarded adjacent ace task stream put ace task utility method 
put calls put method ace task residing adjacent layer 
invocation put may borrow thread control caller handle message immediately synchronous processing approach illustrated 
conversely put method may enqueue message defer handling svc method executing separate thread control asynchronous processing approach illustrated 
discussed particular processing approach selected significant impact performance ease programming 
ffl message queueing mechanisms addition open close put svc pure virtual method interfaces ace task contains ace message queue 
ace message queue standard component ace pass information ace tasks 
ace task executes active object ace message queue buffer sequence data messages control messages subsequent processing svc method 
messages arrive svc method dequeues messages performs ace task subclass application specific processing tasks 
types messages may appear ace message queue simple composite 
simple message contains single ace message block composite message contains multiple ace message blocks linked 
composite messages generally consist control block followed data blocks 
control block contains bookkeeping information destination addresses length fields data blocks contain actual contents message 
network int spawn void fork log msg log log error unable fork function spawn server client named pipe client logging daemon options debugging log msg log log debug sending request server server host comm manager send request len host host zola server logging daemon storage device printer client zola named pipe client logging daemon tcp connection console oct ics uci edu client test unable fork function spawn oct zola ics uci edu sending request server oct ics uci edu client unable fork function spawn tcp connection distributed logging facility overhead passing ace message blocks tasks minimized passing pointers messages copying data 
ace message queues contain pair high low water mark variables implement layer flow control adjacent ace modules stream 
high water mark indicates amount bytes messages ace message queue willing buffer flow controlled 
low water mark indicates level previously flow controlled ace task longer considered full 
ace examples ace components currently research commercial environments enhance configuration flexibility software component reuse communication software operate efficiently portably multiple hardware software platforms 
illustrate asx framework practice section examines architecture commercial applications currently developed ace components distributed logging facility distributed monitoring system telecommunication switch devices 
distributed logging example debugging distributed communication software frequently challenging diagnostic output appears different windows different remote host systems 
ace provides distributed logging facility simplifies debugging run time tracing 
facility currently commercial line transaction processing system provide logging services cluster workstations multi servers high speed network environment 
shown distributed logging facility allows applications running multiple client hosts send logging records server logging daemon running designated server host 
section focuses architecture configuration server daemon portion logging facility service configurator ace reactor class categories provided asx framework 
complete design implementation distributed logging facility described 
server logging daemon components server logging daemon concurrent multi service daemon processes logging records received client hosts simultaneously 
object oriented design server logging daemon decomposed modular components shown perform defined tasks 
application specific components logging acceptor logging handler responsible processing logging records received clients 
connection oriented application components acceptor client handler responsible accepting connection requests data clients 
application independent asx framework components ace reactor service configurator ipc sap class categories responsible performing ipc explicit dynamic linking event demultiplexing service dispatching concurrency control 
logging handler subclass parameterized type responsible processing logging records sent server logging daemon participating client hosts 
communication mechanisms may instantiated sock sap tli sap wrappers follows class logging handler public client handler defined mt safe sockets ace sock stream ace tli stream endif mt safe sockets ace inet addr 
logging handler class inherits event handler indirectly client handler service object dynamic linked server logging daemon 
logging records arrive client host associated particular logging handler object ace reactor automatically dispatches object handle input method 
method formats displays records output devices logging acceptor logging handler sock acceptor logging handler sock stream null synch svc handler acceptor svc handler peer acceptor peer stream synch components applicationspecific components components peer acceptor peer stream stream service configurator concurrency global ipc sap connection reactor activates class components server printer persistent storage console devices illustrated 
logging acceptor subclass parameterized type responsible accepting connections client hosts participating logging service class logging acceptor public client acceptor defined mt safe sockets ace sock acceptor ace tli acceptor endif mt safe sockets ace inet addr 
logging acceptor class inherits ace service object indirectly ace acceptor base class may dynamically linked server logging daemon manipulated run time server logging daemon svc conf configuration file 
likewise logging acceptor indirectly inherits ace event handler interface handle input method invoked automatically ace reactor connection requests arrive clients 
connection request arrives logging acceptor subclass allocates logging handler object registers object ace reactor 
modularity reusability configurability distributed logging facility significantly enhanced decoupling functionality connection establishment logging record reception distinct class hierarchies shown 
decoupling allows logging handler service repository service config reactor server server logging daemon service manager logging handler logging acceptor connection request remote control operations client logging records client client client ace components distributed logging facility ace acceptor class reused types connection oriented services 
particular provide completely different processing functionality behavior ace client handler portion service need reimplemented 
furthermore parameterized types decouples reliance particular type ipc mechanism 
server logging daemon configuration asx framework uses service configurator enable dynamic static configuration logging services server logging daemon 
dynamically configured services may inserted modified removed run time improving service flexibility extensibility 
svc conf file entry dynamically configure logging service server logging daemon dynamic logger service object logger alloc svc name 
token logger specifies service name installation run time identify corresponding service object ace service repository 
service object return type alloc method located shared object file indicated pathname logger 
service configurator framework locates dynamically links shared object file logging service config logging handler logger daemon register service logging acceptor start event loop connection event data event register new handler client process logging record register handler reactor run event loop handle events foreach event handle input new logging handler open register handler handle input write load service configure foreach svc entry open service repository process directives load service interaction diagram server logging daemon daemon address space 
service location specifies name application specific object derived service object 
case alloc function dynamically allocate new logging acceptor object 
remaining contents line represent application specific set configuration parameters 
parameters passed init method service argc argv style command line arguments 
init method logging acceptor class interprets port number server logging daemon listens client connection requests 
statically configured services available daemon begins execution 
example service manager standard service configurator framework component clients obtain listing active daemon services 
entry svc conf file statically configure service manager service server logging daemon initialization static ace svc manager order static directive object code implements ace svc manager service statically linked main daemon driver executable program 
addition ace svc manager object inserted service repository dynamic configuration occurs done automatically ace service config constructor 
due constraints statically configured service may reconfigured run time removed service repository 
main driver program server logger daemon implemented code int main int argc char argv ace service config configure server logging daemon 
open argc argv return perform logging service 
run reactor event loop return depicts run time interaction various framework application specific objects collaborate provide logging service 
daemon configuration performed ace service config open method 
method consults svc conf file specifies services configure daemon static ace svc manager dynamic logger service object logger alloc service config entries svc conf file processed inserting designated ace service object ace service repository registering ace event handler portion service object handler ace reactor 
configuration activities completed main driver program shown invokes run reactor event loop method ace service config 
method enters event loop continuously calls ace reactor handle events service dispatch method 
shown dispatch function blocks awaiting occurrence events connection requests clients 
events occur ace reactor automatically dispatches previously registered event handlers perform designated application specific services 
asx framework responds external events trigger daemon reconfiguration run time 
dynamic configuration steps outlined performed executing asx daemon receives pre designated external event unix signal 
depending updated contents svc conf file services may added suspended resumed removed daemon 
asx framework dynamic reconfiguration mechanisms enable developers modify server logging daemon functionality fine tune performance extensive effort 
example debugging faulty implementation logging service simply requires dynamic functionally equivalent service contains additional instrumentation help isolate source erroneous behavior 
note process may performed modifying recompiling relinking restarting currently executing server logging daemon 
distributed pbx monitoring system illustrates client server architecture private branch exchange pbx telecommunication switch monitoring system implemented asx framework components 
distributed communication system server receives processes status information generated attached server high speed communication link 
server transforms forwards status information network client systems graphically display information users 
users typically supervisors pbx status information monitor performance personnel forecast allocation resources meet customer demands 
pbx devices attached server controlled device adapter ace module 
ace module shields rest server pbx specific communication characteristics 
read side device adapter ace module maintains collection device handler objects pbx responsible parsing transforming incoming device events canonical message object built atop flexible message management class described 
initialized incoming canonical message objects passed read side event analyzer ace module 
module implements applicationspecific functionality server 
internal addressing table maintained event analyzer determine client receive message object 
event analyzer determines proper destination message object forwarded multicast router ace module 
multicast router ace module reusable component shields rest application specific server code knowledge client server interactions particular choice communication protocols 
clients subscribe receive events published server establishing connection multicast router ace module 
write side multicast router ace module accepts connection requests clients creates separate client handler object manage reactor service repository service config ccm stream event filter asx run time switch handler switch handler session handler session handler session handler telecom switches supervisor event server supervisor supervisor session router switch adapter event analyzer upstream downstream asx components pbx application client connection 
client handler object handles subsequent data transfer control operations server associated client 
client connected server indicates type pbx event interested monitoring 
point multicast router receives message object event analyzer automatically multicasts message clients subscribed receive particular type event encapsulated message object 
ace service config object server control initialization termination stream ace module components configured statically installation time dynamically run time 
ace service config object contains instance ace reactor event dispatch incoming client messages appropriate client handler device handler event handler 
control messages arriving clients sent write side stream starting multicast router continuing interconnected write side stream ace modules device adapter sends appropriate pbx device 
likewise reactor detects incoming events pbx devices dispatches stream starting device adapter ace module 
server configuration ace modules comprise pbx server may configured server time 
asx framework provides degree flexibility explicit dynamic linking driven svc conf configuration script 
configuration script indicates services dynamically linked address space server stream server stream dynamic stream server stream alloc dynamic device adapter module da alloc dynamic event analyzer module ea alloc dynamic multicast router module alloc configuration script indicates order hierarchically related services dynamically linked pushed server stream 
application initialization service config class parses configuration script carries directives describe entry 
server stream composed ace modules device adapter event analyzer multicast router dynamically configured server 
indicated shared object file linked dynamically server specified dynamic directive instance module object extracted shared object library calling alloc function 
described modules may subsequently updated relinked necessary install updated version ace module completely terminating executing pbx server 
server reconfiguration number drawbacks associated statically configuring services communication software application 
example performance bottlenecks may result services configured server side application active clients simultaneously access services 
conversely configuring services client side may result bottlenecks clients execute powerful systems 
general difficult determine appropriate partitioning application services priori processing characteristics workloads may vary time 
primary objective asx framework develop object oriented service configuration mechanisms allow developers defer late development cycle installation time run time decisions regarding services ran client side ran server side 
facilitate flexible reconfiguration run time control environment provided asx framework enables developers alter application service configurations ei telecom switches event filter session handler session handler session handler ccm stream session router switch adapter asx run time reactor service repository service config supervisor supervisor switch handler switch handler event analyzer upstream downstream event filter event filter supervisor event server reconfiguration pbx monitoring system ther statically installation time dynamically runtime 
useful different os hardware platforms different network characteristics require different service configurations 
example configurations server performs clients 
different system configurations may appropriate different circumstances multi processor server platforms high speed networks available 
illustrates configuration shown may altered operate efficiently distributed environment server processing constitutes primary bottleneck 
reconfiguration process accomplished script suspend server stream stream server stream remove event analyzer remote stream server stream dynamic event analyzer module ea alloc resume server stream new script migrates processing functionality server clients unlinking ace modules server stream dynamically linking client stream 
asx framework replaced previous architecture ad hoc techniques parameter passing shared memory exchange messages related services server 
contrast previous approach highly uniform ace module inter connection mechanisms provided asx framework greatly simplify portability configurability 
concluding remarks adaptive communication environment ace collection components provide rich set object oriented components 
components encapsulate os mechanisms interprocess communication ipc event demultiplexing explicit dynamic linking concurrency 
ace simplifies development communication software consolidating common communication related activities local remote ipc event demultiplexing service handler dispatching service initialization configuration mechanisms distributed applications containing monolithic layered services distributed logging intra inter service concurrency reusable components 
adaptive communication environment employs variety advanced os mechanisms explicit dynamic linking multi threading object oriented design techniques encapsulation hierarchical classification deferred composition language features parameterized types inheritance dynamic binding enhance software quality factors robustness ease portability reusability extensibility significantly degrading application performance 
object oriented techniques features enhance reusability extensibility components develop communication software 
example distributed applications may developed inheriting composing customizing existing ace components support dynamic configuration concurrent execution application services 
advanced os features useful improving application functionality performance 
ace freely available world wide web url www cs wustl edu schmidt ace html 
distribution contains complete source code documentation example test drivers components developed part ace object oriented network programming toolkit developed washington university st louis 
ace toolkit currently communication software companies including bellcore siemens dec motorola ericsson kodak 
leffler mckusick karels quarterman design implementation bsd unix operating system 
addison wesley 
unix system network programming 
reading ma addison wesley 
schmidt harrison objectoriented components high speed network programming proceedings st conference objectoriented technologies systems monterey ca usenix june 
booch object oriented analysis design applications nd edition 
redwood city california benjamin cummings 
schmidt ace object oriented framework developing distributed applications proceedings th usenix technical conference cambridge massachusetts usenix association april 
comer stevens internetworking tcp ip vol iii client server programming applications 
englewood cliffs nj prentice hall 
stevens unix network programming 
englewood cliffs nj prentice hall 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
reading ma addison wesley 
schmidt design patterns develop object oriented communication software communications acm special issue object oriented experiences vol 
october 
johnson foote designing reusable classes journal object oriented programming vol 
pp 
june july 
linton vlissides calder composing user interfaces interviews ieee computer vol 
pp 
february 
batory malley design implementation hierarchical software systems reusable components acm transactions software engineering methodology vol 
pp 
oct 
campbell islam designing implementing choices object oriented system communications acm vol 
pp 
sept 
zweig conduit communication abstraction proceedings nd usenix conference pp 
usenix association april 
schmidt oo encapsulation lightweight os concurrency mechanisms ace toolkit tech 
rep wucs washington university st louis september 
schmidt suda object oriented framework dynamically configuring extensible distributed communication systems iee bcs distributed systems engineering journal special issue configurable distributed systems vol 
pp 
december 
schmidt reactor object oriented interface event driven unix multiplexing part report vol 
february 
schmidt object oriented design implementation reactor wrapper unix multiplexing part report vol 
september 
schmidt ipc sap object oriented interface interprocess communication services report vol 
november december 
schmidt acceptor connector design patterns actively passively initializing network services workshop pattern languages object oriented programs ecoop aarhus denmark august 
bjarne stroustrup ellis annotated manual 
addison wesley 
schmidt reactor object behavioral pattern concurrent event demultiplexing event handler dispatching pattern languages program design coplien schmidt eds reading ma addisonwesley 
davis win network programming 
reading ma addison wesley 
presotto ritchie interprocess communication ninth edition unix system unix research tenth edition vol 
pp 

stevens advanced programming unix environment 
reading massachusetts addison wesley 
moran shannon virtual memory architecture sunos proceedings summer usenix technical conference phoenix arizona 
kleiman barton faulkner smith stein weeks williams multiprocessing 
multithreading sunos kernel proceedingsof conference san antonio texas june 
ieee threads extension portable operating systems draft february 
schmidt transparently parameterizing synchronization mechanisms concurrent distributed application report vol 
july august 
booch simplifying booch components report vol 
june 
lee dang weeks shared libraries sunos proceedingsof summer conference phoenix arizona 
ho olsson approach genuine dynamic linking software practice experience vol 
pp 
apr 
custer inside windows nt 
redmond washington microsoft press 
schmidt stephenson experiences design patterns evolve system software diverse os platforms proceedings th european conference object oriented programming aarhus denmark acm august 
ritchie stream input output system bell labs technical journal vol 
pp 
oct 
hutchinson peterson kernel architecture implementing network protocols ieee transactions software engineering vol 
pp 
january 
schmidt suda transport system architecture services high performance communications systems ieee journal selected areas communication vol 
pp 
may 
schmidt stiller suda flexible application tailored protocol configuration proceedings th conference local computer networks minneapolis minnesota pp 
ieee sept 
hardware profiling kernels usenix winter conference san diego ca usenix association jan 
saxena peacock yang verma krishnan pitfalls multithreading svr streams processes proceedings winter usenix conference san diego ca pp 
jan 
schmidt active object object behavioral pattern concurrent programming pattern languages program design coplien vlissides eds reading ma addison wesley 
schmidt box suda adaptive dynamically assembled protocol transformation integration evaluation environment journal concurrency practice experience vol 
pp 
june 
schmidt family design patterns applicationlevel gateways theory practice object systems special issue patterns pattern languages vol 

schmidt design patterns initializing network services introducing acceptor connector patterns report vol 
november december 
schmidt connector design pattern actively initializing network services report vol 
january 

