avoid learning expect automating automating interactive programs don libes national institute standards technology expect tool automating interactive programs 
expect controlled writing tcl scripts traditionally manual process 
describes autoexpect tool generates expect scripts automatically watching actual interactions writing appropriate script 
autoexpect possible create expect scripts writing actual expect statements knowledge expect 
keywords autoexpect expect interaction automation tcl autoexpect tool generates expect scripts automatically watching actual interactions writing appropriate script 
autoexpect possible create expect scripts writing actual expect statements knowledge expect 
may sound useful beginners expect experts turn autoexpect effective 
background expect tool automating interactive programs 
possible sophisticated expect scripts 
example different patterns expected simultaneously processes different actions case 
traditional control structures procedures recursion available 
thorough description expect libes 
expect language facilities provided tcl traditional scripting language 
thorough description tcl 
traditionally users write expect scripts studying interaction automated writing corresponding expect commands perform interaction 
autoexpect program watches user interacting program creates expect script reproduces interactions 
simplest autoexpect quite straightforward 
example consider ftp session ftp uu net 
normally start way ftp ftp uu net point user interact ftp 
autoexpect automate difference start interaction line autoexpect ftp ftp uu net remainder interaction user interact ftp 
exiting ftp autoexpect exit expect script default called script exp 
graphically shown 
mimics style unix script command similarly transparently watches session provides log session user 
autoexpect automate multiple interactive applications easily single interactive application 
autoexpect exactly way user shell 
initially spawning shell default autoexpect called arguments user interact running multiple programs switching attention job control arbitrary interactions 
autoexpect note reproduce faithfully 
job control supported extra effort 
example user may press suspend job generate interrupt signal 
autoexpect generate appropriate statements reproduce interaction repeated 
autoexpect audience autoexpect zero knowledge expect 
autoexpect creates complete ready program 
autoexpect fit people know expect 
autoexpect useful users expect knowledge 
example users may want generalize resulting scripts changing repeated sets statements loops 
expect experts autoexpect convenient tool automating interactive processes generated expect script autoexpect watches interactive session generates expect script reproduce 
parts interaction 
easier cut paste autoexpect scripts write scratch 
autoexpect provides similar value intermediate expect users 
additional benefit autoexpect provides perfect patterns match output 
expect users find useful run autoexpect examine patterns chosen match program output 
take long acquire moderate competency expect 
intermediate expert expect users find common scenario typing second third time start thinking gee automated expect 
take minutes write minutes debug simply interaction minutes justify stopping automating expect 
sound reasoning today 
course user thing tomorrow soon start lose time automating 
step back interaction repeated correct choice go ahead manually interact invest time automating interaction 
shorter simpler interaction users fall trap considering advantages expect script 
may counterintuitive 
fact users recognize value expect long interactions 
lengthy painful boring interaction quickly people turn expect 
expert expect users repeatedly perform interactions quick brief believing re rush afford automate problem don think today 
short autoexpect worth knowing user expect spectrum expert total newcomer 
potential pitfalls important understand autoexpect guarantee working script necessarily guess certain things occasionally guesses wrong 
usually easy identify fix problems 
typical problems timing default autoexpect produces interaction designed run quickly possible 
surprisingly large number programs rn ksh telnet devices modems ignore keystrokes arrive quickly prompts 
generated script hangs waiting prompt spot brief pause may necessary previous command sent 
fortunately spots rare 
example telnet ignores characters entering escape sequence 
characters ignored immediately connecting modems time 
programs exhibit behavior time typically switch disable 
example rn flag disables behavior rn refers 
listing shows script written deal poorly designed modems 
spawn tip modem expect connected tip says allocated modem sleep pause allows modem enable uart send atd ignored expect connect hang forever autoexpect supports conservative mode 
enabling mode generated script pause briefly sending character 
pause noticeable humans sufficient sensitive programs 
mode enabled time interactively control user 
possible precise character inter arrival times reproduce original interaction timings 
desired users want scripts interact fast possible speed humans 
slowing scripts human speeds doesn guarantee correct result programs timing guarantees 
users mercy operating system scheduler 
echoing program echo characters 
example user types cat shell autoexpect sees user typed computer typed user typed computer typed user typed computer typed user typed computer typed literal rendering expect looks send expect send expect send expect send expect specific knowledge program impossible know user waiting see character echoed typing 
autoexpect sees characters echoed assumes send group interleaving way originally appeared 
autoexpect rewrites fragment send cat expect cat script pleasant read 
conceivably incorrect user really wait see character echoed 
additional previous expect added terminal driver normally echoes return character return sequence 
knowledge wired autoexpect 
situation autoexpect merely consumes characters possible user resumes typing 
scripts tight 
expect commands echoed command command output subsequent prompt expect command generated matches 
aside human written scripts bother expect cat 
expect just skip extraneous output 
autoexpect optimization raises concern output resemble command 
case generated script execute send desired output appeared 
change default autoexpect records character interaction script 
desirable gives user ability judgements important replaced pattern match 
hand generated scripts going correct interactions involve commands output differs run run 
example date command produces different output 
date command running autoexpect sure way produce script require editing order 
autoexpect supports prompt mode 
mode autoexpect look line program output usually prompt 
handles date problem see 
style 

autoexpect scripts mistaken humanly generated scripts 
autoexpect uses variety features intended machine generated scripts 
example send commands generated autoexpect flag send suppresses possible interpretation argument flag 
obviously redundant 
flag 
necessary autoexpect check flag 
autoexpect simpler verbose form 
users simpler verbose form 
operations expect follow convention 
autoexpect scripts tend look somewhat verbose peculiar 
useful things gained studying output autoexpect 
example possible see string quoted order tcl script simply running autoexpect typing strings 
general autoexpect held model human programming style 
goal 
implementation notes autoexpect implemented expect script 
expect script interesting discussion techniques scope 
item autoexpect includes template inserted script describing things generated code just case user look script little autoexpect surprising style 
despite implementation pure expect script easily keeps pace interactive 
instance large chunks output processed single read appended output buffer 
user types character script output buffers flushed 
users type slowly relatively speaking processing noticeable 
similar approach taken kibitz tk general events handled entirely tcl scripts libes 
todd richmond demonstrated feasibility automating expect scripting modifying expect 
written experiment publicly released part merely earlier version expect time integrate back current version 
retrospect script autoexpect provides flexibility loading expect core 
tcl tk resist changes expect core profitably accomplished tcl 
progress publicly distributed autoexpect produces straight line code 
may sound simplistic valid 
currently progress loop rolling removal statements creating loops produce equivalent effect 
section describes example problems studied 
creation counted loops consider sequence 
repeating send expect sequence send expect send expect send rewritten set send expect send rewrite particularly valuable repetitions shows possibility handling repetitions 
creation output dependent loops consider sequence 
repeating expect send sequence expect send expect send expect interaction repeating appearance better rewritten expect send interaction repeating appearance form better form repetitions defined 
earlier counted loop may meaningful 
problems solutions generalized 
example repeated statements may consist multiple send expect sequences just 
similarly nested expect statements supported 
example consider interaction expect send expect send expect send expect send expect rewritten expect send expect send user interactions occasionally require commands send expect 
statements handled 
unfortunately optimal rewriting algorithms 
script fragments rewritten ways 
straight line scripts easily solve goal reproduction 
difficult definable goals appropriateness particular task 
sense task may sense 
approach consider having user driven generator graphical interface 
graphical interface various ways rolling code 
user select code shown rewritten various forms 
scripts autoexpect saves substantial time writing scripts hand 
expect experts find convenient autoexpect automate parts interactions 
easier cut paste autoexpect scripts write scratch 
beginners may able get away learning expect call autoexpect 
acknowledgments availability jeff bowyer institute computer science university brno czech republic henry spencer assistance development autoexpect 
steve ray jim fowler providing suggestions improved 
expect autoexpect freely available 
author nist appreciate credit software documentation ideas portions 
scripts programs described document may ftp pub expect expect tar ftp cme nist gov software mailed send mail message send pub expect expect tar quotes library cme nist gov libes libes kibitz connecting multiple interactive programs software practice experience john wiley sons west sussex england vol 
may 
libes libes exploring expect tcl toolkit automating interactive programs reilly associates january 
ousterhout tcl tk toolkit addison wesley 
author biography don libes creator expect author definitive text exploring expect reilly 
don written computer science papers articles plus unix classics life unix prentice hall obfuscated mysteries wiley 
don computer scientist national institute standards technology 
reach electronically libes nist gov 
