optimizing ml hierarchy monadic types andrew tolmach paci software research center portland state university oregon graduate institute dept computer science box portland usa apt cs edu 
describe type system typed semantics hierarchy monads describe delimit variety ects including non termination exceptions state call value functional language 
type system semantics organize justify avariety optimizing transformations presence ects 
addition describe simple monad inferencing algorithm computes minimum ect subexpression program provides accurate ects information local syntactic methods 
optimizers implemented engines repeatedly apply improving transformations programs 
important transformations propagation values de ning site site hoisting invariant computations loops 
pure side ect free language lambda calculus compiler intermediate language transformations neatly described simple equations beta reduction beta exchange hoisting bindings exchange fv fv letrec letrec fv fv fv set free variables side conditions nicely express data dependence conditions equations valid 
supported part air force materiel command contract national science foundation ccr 
orientation equation generates valid transformation 
ective compilers pure lazy functional languages conceived built basis transformations considerable advantages modularity correctness 
nice apply similar methods optimization languages ml side ects mutable state exceptions 
unfortunately rearranging transformations generally valid languages 
example apply beta oriented left right situation evaluating performs output mentioned twice evaluating resulting expression produce output twice 
fact eager evaluation order xed non termination side ect 
example valid known terminating free ects course 
similar challenge long faced lazy functional languages source level obtain power side ecting operations invalidating simple equational reasoning beta similar rules 
ective solution discovered context monads :10.1.1.100.9674
obvious idea monads internal representation ir compilers call value languages 
initial steps direction taken peyton jones launchbury shields tolmach 
aim design ir suitable eager lazy source languages 
pursue monads particular eager languages address question discover record di erent sorts ects single uni ed monadic type system 
introduce hierarchy monads ordered increasing strength ect inference algorithm annotating source program subexpressions minimal ect 
past approaches coping ects fallen main camps 
approach sml new jersey til compiler fall back form beta called valid eager settings 
restricts bound expression variables constants abstractions evaluating expressions causes computation moved substituted 
augment rule compilers local syntactic analysis discover expressions demonstrably pure terminating 
local syntactic analysis assume calls unknown functions may impure non terminating 
form analysis quite ective particularly compiler inlines functions 
approach ml kit compiler uses sophisticated ect inference system track latent ects functions detailed basis 
goals school typically far reaching aim ects information provide generous course fact transformation valid doesn mean applying necessarily improve program 
example beta oriented left right improving transformation expensive compute appears times similarly oriented left right improving applied 
polymorphic generalization rules perform signi cantly sophisticated optimizations automatic parallelization heap data 
support goals ect inference generally track store ects ne grained level 
approach essentially simple monomorphic variant ect inference applied wider variety ects including non termination exceptions io cast monadic form intended support transformational optimizations 
infer information latent ects attempt calculate ects ne level granularity 
return inference system particularly simple state implement 
fundamentally new system compared talpin jouvelot decision monadic syntax validate typed monadic semantics 
practical advantage monadic syntax easy re ect results ect inference program easily consulted kept date subsequent optimizations auxiliary data structure 
advantage monadic semantics provides natural foundation probing proving correctness transformations presence variety ects 
related wadler independently shown talpin jouvelot ect inference system applied monadic framework uses untyped semantics considers store ects 
independent project benton kennedy prototyping ml compiler ir describes ects monadic encoding similar 
source language section brie describes ml source language explain approach 
call value source language fig 

simple monomorphic variant ml expressed normal form names result computation evaluation order completely explicit 
class const includes primitive functions constants 
construct monomorphic semantics typing properties app abs legal normal form 
restriction monomorphic language essential see sect 

functions unary primitives plus take element tuple argument 
simplicity presentation restrict letrec single functions 
types constants fig 

exceptions carry values type exn nullary exception constructors 
raise takes exception constructor providing means declaring constructors assume arbitrary pool constructor constants 
handle catches exceptions raised evaluating rst argument passes associated exception value second argument handler function expecting exn 
body handler function may may choose exception depending value may tested 
datatype typ type varty var typ int bool datatype value exn var var tup typ list const const typ typ datatype const datatype exp integer int val value true false abs varty exp 
app value value plus minus times value exp exp divide varty exp exp eqint letrec varty varty exp exp tuple value list project int value 
raise value handle exp value fig 

syntax source language ml datatype integer int true false bool exn plus minus times divide tup int int int eqint tup int int bool tup bool bool bool tup exn exn bool int tup fig 

typings constants initial environment primitive function divide potential raise particular exception 
supply paradigmatic state altering primitive internal side ects ml manipulations handled similarly 
primitives pure guaranteed terminate 
semantics remainder language completely ordinary 
intermediate representation monadic types shows syntax monadic intermediate representation ir 
example code look ahead fig 

part terms source language addition monad annotations handle constructs new construct described detail 
datatype monad id lift exn st datatype monad int bool exn tup list type varty var datatype value var var const const datatype exp val value abs varty exp app value value value exp exp monad monad varty exp exp letrec varty varty exp exp tuple value list project int value raise value handle monad exp value monad monad exp fig 

syntax monadic typed intermediate representation integer int true false bool exn plus minus times tup int int id int divide tup int int exn int eqint tup int int id bool tup bool bool id bool tup exn exn id bool int st tup fig 

monadic typings constants initial environment values ordinary value types expressions monadic types incorporate monad possibly identity monad id 
call value language domain arrow types codomain arbitrary 
monadic types constants speci ed fig 

typing rules fig 

gure discussion ranges value types monads values constants variables expressions 
presentation monads arranged simple linear order 
order increasing ect id identity monad describes pure terminating computations 
lift lifting monad describes pure potentially non terminating computations 
exn monad exceptions lifting describes computations may raise uncaught exception potentially non terminating 
st monad state exceptions lifting describes computations may write outside world may raise exception potentially non terminating 
write precedes list 
intuitively implies computations provoke ects 
particular hierarchy captures number distinctions useful transforming ml programs 
discuss extension approach strati ed monadic structures sect 

formally suppose monad standard operations unitm turns values null computations bindm composes computations usual monad laws hold left bindm kx right bindm unitm assoc bindm bindm bindm bindm ek suppose value type monad gives domain values type 
implies exists unique embedding value type maps 
functions called monad morphisms lifting functions obey laws unit unitm unitm bind bindm ek bindm functions viewed generalizations unit operations unit id unitm 
fig 
gives semantic interpretations types typeof const val id fx abs id app bool fx ff ff lift letrec vn tn tuple vn id tup tn tup tn project id ti exn raise exn exn exn exn handle fig 

typing rules intermediate language complete partial orders cpo monads associated bind functions 
note laws hold semantics id id compose semantics terms figs 

environments map identi ers values 
semantics largely predictable 
construct serves composition monadic computations explicit construct monadic coercions explicit 
intuitively evaluates monadic type performing associated effects binds resulting value evaluates monadic type 
essentially plays role usual monadic bind operation particular semantic interpretation expression environment just bindm typing rules fig 
require may monad semantics general mixed monad bindm term semantics general form strictly redundant 
form useful easier state recognize left hand sides interesting transformations involving validity depends monad 
example non monadic beta valid simply id examples shown sect 

semantics non proper morphism handle deserve special attention 
expression may exn st meaning handle depends st version manipulate state component 
note plausible ways combine state exceptions 
semantics ml handling exception alter state equally reasonable revert state handle 
incidentally don semantics id lift typing rule handle disallows cases 
course cases appear source code generate monadic ir coerced exn explicit handle omitted altogether favor type raise exception 
raise expression handled similarly typing rules force monad exn semantics need case expression may coerced st explicit necessary 
cpo int bool represents false exn tup tn tn tup monad cpo cpo id lift 
exn ok fail st state 
ok fail state xk kx xk ka 
xk ka ok fail fail 
kas xs ok 
fail xs fail 
xs 
upm lift 
exn ok st xs ok exn ok lift st xs ok st xs ok 
fail 

ok fail 
fig 

semantics types monads value env var const integer const true const false const plus const divide const plus const plus ok fail state sequence written far ok append arbitrary xed integer fig 

semantics values exp env val abs app letrec fix tuple vn project raise exn handle vn fail bindm upm af vn vi xh ok ha ok fail 
ok xs ok xs fail 
xs 
fig 

semantics expressions id val var fv transformation rules fig 

generalized monad laws section attempt motivate ir particular choice monads presenting number useful transformation laws 
laws proved correct respect denotational semantics sect 

proofs straightforward tedious omitted 
course means complete set rules needed optimizer general purpose speci particular operators 
noted earlier valid transformations improvements 
gives general rules manipulating monadic expressions 
generalizations usual left right assoc laws single monad recovered rules setting id setting setting 
just ident compose laws stated ir syntax housekeeping coercions 
law unit special case obtained setting id 
permits move expressions suitably weak ects coercions bind special case obtained setting laws variants involving letrec letrec behaves just id abs omit details 
lists valid laws altering execution order 
full beta reduction variables bound id monad 
general order bindings exchanged data dependence id monad lift monad 
intuition rule harmless reorder expressions may terminate detect causes non termination 
hand similar rule exn monad distinguish di erent raised exceptions constructor value carry 
principal di erence lift exn purposes code motion 
rule states valid lift pure expression letrec data dependence violated 
re ects stronger property valid lift non terminating exception raising expression letrec recursive function guaranteed executed 
principal advantage distinguishing exn general st monad transform valid 
left hand side may crude way functions guaranteed called appear practice arises naturally systematically introduce loop headers recursions law hdr letrec id abs letrec app fv says expression raise exception hoisted handle 
show exibility id expressions manipulated useful oriented right left hoisting conditionally executed code 
rules variants involving letrec place id omit 
arti cial example power transformations consider code fig 

computation invariant hoist recursive function binding marked pure terminating lifted exchanged pure bindings 
positions lifted 
note monad annotations tell pure terminating invokes unknown function bound example exposes limitations monomorphic ects applied impure function marked impure binding 
practice desirable clone separate copies specialized argument 
worse consider function naturally parametric ect 
function pessimistically annotated ect re ecting function passed program 
obvious solution give functions map generic type abstracted monad variable analogous ect variable system talpin jouvelot 
believe system extended handle generic types examined semantic issues involved detail 
id id fv fv lift fv fv letrec id id letrec fv fv letrec app letrec app exn fv handle handle exn id id fv id id fv abs id id id abs fv fig 

code motion laws monadic expressions int id int int st int fn int id int int letrec int st int int int bool eqint id st int int int plus int int int divide dummy int id int int fn int fig 

example intermediate code obvious concrete analogue syntax monad inference possible translate source programs type correct ir programs simply assuming expression falls maximally monad st case 
source variable constant coerced st primitive return value st peyton jones suggest performing translation monad laws analogous fig 
worker wrapper transform simplify result hopefully resulting expression bindings 
main objection approach doesn allow calls unknown functions worker wrapper doesn apply return non st results 
example code fig 
local syntactic analysis discover argument function pure terminating 
obtain better control ects developed inference algorithm computing minimal monadic ect subexpression program 
pure provably terminating expressions placed id pure potentially non terminating expressions lift forth 
algorithm deals latent monadic ects functions recording result types 
example produces annotations shown fig 

input algorithm typed program source language output program typed ir 
term translation essentially trivial source target identical term structure possible need terms target 
consider example source term val raise 
val value translation id monad translation raise exn st bool fx exn exn raise exn raise exn fig 

selected translation rules monad 
glue subterm translations insert coercion translation val term 
terms serve exactly purpose add necessary exibility system permit monad constraints met 
coercion potentially needed subterm program 
develop deterministic syntax directed translation turn typing rule fig 
translation rule simply recording inferred type monad information appropriate annotation slots output combining translations subterms obvious manner wrapping term result 
examples fig 
shows translation rules corresponding typing rules raise 
free type monad translated typed term initially set fresh variable translation algorithm generates set constraints relating variables just ordinary type inference algorithm 
discuss solution constraints 
speci ed translation pro coercion terms prove constraint resolution unnecessary identity coercions 
postprocessing step remove unneeded coercions rule 
translation algorithm generates constraints types monads 
type constraints solved ordinary uni cation unifying codomain types requires monad components equated components 
interesting question record resolve constraints monad variables 
constraints introduced explicitly side conditions letrec rules implicitly equating monads subexpressions handle rules implicitly result ordinary uni cation arrow types mention monads codomains 
side condition constraints inequalities form monad variable variable explicit monad 
implicit constraints equalities uniformity replace pair inequalities 
collect constraints side ect translation process simply adding global list 
common circularities monad constraints 
solve constraint system view directed graph node monad monad variable edge constraint 
partition graph strongly connected components sort components reverse topological order 
process component time order 
anti symmetric nodes component assigned monad determined assigned variables component proceeding component 
determine minimum possible correct assignment component consult edges nodes component nodes outside component order processing nodes received monad assignment 
maximum assignments minimum correct assignment component 
edges minimum correct assignment id algorithm linear number constraints size source program 
summarize perform monad inference rst translating source program form padded coercion operators annotated monad variables collecting constraints variables solving resulting constraint system ll variables translated program 
resulting program contain null coercions form removed single postprocessing pass 
algorithm similar talpin jouvelot restricted monomorphic source language 
algorithms generate essentially sets constraints 
talpin jouvelot solve ect constraints extended form uni cation separate mechanism 
natural extend algorithm handle hindley milner polymorphism types monads talpin jouvelot style 
idea generalize free type ect variables de nitions allow di erent uses bound identi er instantiate di erent ways 
particular parametric functions map di erent monads polluting 
functions wholly parametric ects place minimum ect bound permissible instantiations monad variables 
supporting form monad polymorphism desirable type polymorphism program explicitly 
program compilation monad polymorphic program complete set ect instantiations polymorphic de nition known 
set put upper ect bound monad variables de nition body determine transformations legal 
alternatively guide generation ect speci clones suggested previous section 
separate compilation setting monad polymorphism library de nition useful client code library code absence complete information uses de nition variable monad body de nition need treated st monad purposes performing transformations body 
extending monad hierarchy basic approach restricted linearly ordered set monads sect 

extends naturally collection monads embedding operations form lattice id lattice bottom element 
clearly reasonable require partial order equivalent requiring ident compose hold 
partial order requirement distinguished role id assumption monad obeys left right assoc operation obeys unit bind prove laws fig 

validity laws fig 
naturally depends speci semantics monads involved 
insisting monads collection upper bound embedding guarantee arbitrary expressions arms coerced unique common monad monad inference mechanism sect 

tempted describe lattice specifying set primitive monads encapsulating individual ects assuming existence arbitrary union monads representing combinations ects 
handle discussion sect 
indicates way combine ects sense talk general way union monads 
appears necessary specify explicitly monad lattice semantic interpretation de nition bindm de nition non proper morphism np introduced de nition np lack ofa generic mechanism combining monads unfortunate turns proofs transformation laws lengthy case analyses 
conjecture restricting attention operations represent natural monad transformers help organize proofs simpler form 
status believe approach inferring recording ects shows promise simplicity semantic clarity 
remains seen ects information kind described improve performance ml code signi cant way answer question extended ir described version supports full standard ml implemented monad inference algorithm version currently measuring ectiveness backend rml compiler system 
ident compose laws hold partial order su ces de ne just choices guarantee existence upper bounds de nitions imply de nition pairs monads 
bene tted conversations john launchbury dick kieburtz exposure ideas unpublished papers 
comments anonymous referees motivated clarify relationship algorithm existing talpin jouvelot 
phil wadler helpful earlier draft 

appel 
compiling continuations 
cambridge university press 

appel 
loop headers calculus cps 
lisp symbolic computation 

benton july 
personal communication 

birkedal tofte 
region inference von neumann machines region representation inference 
rd acm symposium principles programming languages popl pages 
acm press 

flanagan sabry duba felleisen 
essence compiling continuations 
proc 
sigplan conference language design implementation june 

gi ord jouvelot lucassen sheldon 
fx man ual 
technical report mit lcs mit lcs tr massachusetts institute technology laboratory computer science sept 

kieburtz launchbury 
encapsulated ects 
unpublished manuscript oct 

kieburtz launchbury 
algebras encapsulated ects 
unpublished manuscript 

launchbury peyton jones 
state haskell 
lisp symbolic computation pages dec 

liang hudak jones 
monad transformers modular interpreters 
nd acm symposium principles programming languages popl jan 

peyton jones 
compiling haskell program transformation report 
proceedings esop volume lecture notes computer science pages 
springer verlag 

peyton jones launchbury 
unboxed values rst class citizens 
proc 
functional programming languages computer architecture fpca pages sept 

peyton jones launchbury shields tolmach 
bridging gulf common intermediate language ml 
th acm symposium principles programming languages popl pages san diego jan 

peyton jones wadler 
imperative functional programming 
th acm symposium principles programming languages popl pages jan 


talpin jouvelot 
polymorphic type region ect inference 
journal functional programming 


talpin jouvelot 
type ect discipline 
information computation june 

tarditi 
design implementation code optimizations type directed compiler standard ml 
phd thesis carnegie mellon university dec 
technical report cmu cs 

tofte 
talpin 
region memory management 
information computation feb 

tolmach oliva 
ml ada strongly typed language interoperability source trans lation 
journal functional programming 
appear 

wadler 
marriage ects monads 
unpublished manuscript mar 

wright 
typing ect inference 
proc 
th european symposium programming esop volume lecture notes computer science feb 
