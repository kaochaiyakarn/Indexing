exploiting modal logic express performance measures graham clark stephen gilmore jane marina lfcs university edinburgh scotland 
email stg jeh dcs ed ac uk dipartimento di informatica universita di torino italy 
email marina di 
stochastic process algebras pepa provide ample support component construction models 
tools compute numerical solution models stochastic process algebra methodology lacked support specification calculation complex performance measures 
stochastic modal logic aid construction reward structure model 
discuss relationship underlying theory pepa 
performance specification language supports high level reasoning pepa models allows queries equilibrium behaviour 
meaning specification language foundations stochastic modal logic 
describe implementation logic pepa workbench case study illustrate approach 
long recognised whilst markovian models simple computer systems constructed explicit notational support complex systems high level modelling formalism essential 
variety formalisms exist example queueing networks generalised stochastic petri nets stochastic activity networks san stochastic process algebras spa 
unfortunately corresponding high level notational support developed querying models checking performance specifications met 
best support constructing reward structure captures desired measure provided 
performance evaluation process algebra pepa compact formal language modelling distributed computer telecommunications systems 
pepa models constructed composition components perform individual activities cooperate shared ones 
model system designer determine candidate design meets behavioural temporal requirements demanded 
markovian spa pepa enhanced information duration activities race policy relative probabilities 
languages appeared literature include pepa empa :10.1.1.132.1448
essentially propose approach performance modelling corresponding continuous time markov chain ctmc generated structured operational semantics linear algebra solve model terms equilibrium behaviour 
behaviour represented probability distribution possible states model 
distribution seldom ultimate goal performance analysis modeller interested performance measures derived distribution reward structure defined ctmc 
case study time users pepa reported significant proportion ort spent deriving performance measures steady state analysis complete 
study temporal modal logics conjunction process algebras established 
logics express properties systems number states relation succession 
modal logic express finite behaviour 
temporal logic operators introduced allowing reasoning carried infinite behaviour 
decade process algebras extended capture additional information systems relative probability choices timing actions 
analogously extensions syntax logics allow properties expressed reflect additional information captured 
stochastic modal logic explain may specify performance measures pepa model 
logic attractive features expresses properties high level manner focusing possible behaviours model states properties expressed way remain invariant model transformations automatic aggregation specification constructed compositional manner reflecting compositional structure model 
interested steady state behaviour surprising modal temporal logic 
explain modal logic su cient specifying reward structure model assumed equilibrium 
approach specifying performance measures pepa models incorporated pepa workbench 
recognising logic expressions may users developed high level model query language 
language foundations stochastic logic 
earlier clark proposed modal logic define reward structure pepa model 
demonstrating feasibility su ered major drawback 
logic include representation timing aspects pepa consequently clear relationship equivalence relations established language strong equivalence 
current address problem developing stochastic logic takes full account random variables represent duration activities pepa 
earlier version appeared 
reward language extended take advantage compositional structure models 
additionally describe implementation approach illustrate substantial case study 
section give succinct summary pepa language motivate need formal notation specifying performance pepa model 
provide brief summary pepa reader consult full details 
pepa reward language associated stochastic modal logic section whilst implementation described section 
section illustrate ideas simple realistic example 
directions 
pepa pepa performance evaluation process algebra extends classical process algebra capacity assign exponentially distributed durations activities described model system 
concise formal language small number grammar rules define formed terms language 
activity action type performed rate preceding denoted symbol rate denotes passive participation shared activity 
choices separated 
cooperation set action types empty 
hiding activities denying availability cooperation gives term notation definitional equality def syntax may formally introduced means grammar cs denotes sequential component denotes model component executes parallel 
stands constant denotes sequential model component introduced definition 
cs stands constants denote sequential components 
ect syntactic separation types constants constrain legal pepa components cooperations sequential processes 
constraint necessary underlying markov process ergodic 
structured operational semantic rules language possible generate directly pepa model continuous time markov process faithfully encodes temporal aspects pepa model 
pepa workbench check formedness pepa models generate markov process representation 
detects faults deadlocks cooperations involve active participants 
described full earlier 
steady state distribution may applying number linear algebra solution methods generator matrix 
extended workbench capability reduce models canonical form internally automatically aggregating model 
considerable benefits terms tackling state space explosion problem means states markov process solved longer correspondence states pepa model 
formal aspects pepa exploited developing mapping language markov process automatic aggregation techniques 
extraction performance measures resulting steady state probability distribution largely ad hoc procedure 
reward structure calculate appropriate expectations state space determining states reward attached relied knowledge modeller states characterised syntactic terms 
apart relying modeller insight technique disadvantage incompatible automatic aggregation 
motivated develop companion reward language pepa centred stochastic modal logic characterises behavioural terms states rewards attached 
pepa reward language stochastic modal logic section introduce stochastic modal logic core reward language 
particular expression testing satisfaction equilibrium properties seen closely related specification model checking formula expressed probabilistic modal logic pml 
give modified interpretation formulae suitable reasoning pepa continuous time models 
previous clark proposed approach generating measures traditional hennessy milner logic hml 
idea capture set interesting states model partitioning state space formula logic states enjoy property assigned reward number value local state information rate state may perform particular activity 
uninteresting states reward 
way reward vector formally specified equilibrium measures utilisation throughput may calculated 
method ideal reasons 
firstly ad hoc logic provided initial partition meaning calculational technique required addition order assign reward values 
secondly logic qualitative disregarded rate pepa process perform activity captured fact activity possible 
inadequacies led base appropriate logic larsen skou pml 
probabilistic modal logic syntax pml formulas tt models described probabilistic state action discrete probability distribution successors informally semantics formula set states unable perform activity semantics set states transition probability set successors satisfies choose modify slightly interpretation formulae respect pepa models 
give simple definition definition set states 
successors 
model pepa process 
tt subscript formulae form interpreted rate probability state capable doing activity quickly arriving set states satisfies satisfies remainder denote pml interpretation pml relation pml pepa larsen skou show pml exactly characterises probabilistic bisimulation sense probabilistic processes bisimilar satisfy exactly set pml formulae 
modification semantics pml analogous result holds pepa processes theorem modal characterisation strong equivalence model pepa process 
say pepa processes strongly equivalent particular underlying markov chains equivalent satisfy set pml formulae modified setting 
proof 
result just theoretical interest 
guarantees transformation applied model resulting model replaced strongly equivalent model expect new model satisfies formulae original model 
rewards attached equivalent states performance measures derived new model equal measures derived original 
automatic aggregation procedure described implemented pepa workbench isomorphism relation pepa 
relation stronger strong equivalence meaning isomorphic models necessarily strongly equivalent 
result implies pml formulae measures calculated model aggregation identical calculated 
user point view aggregation remains transparent reward calculations carried 
case reward specification techniques spa models 
pml derived combinators introduced equation 
add expressive power logic prove succinct expressing particular properties 
informally set processes transition rate derivative satisfy processes able perform activity 
ff def tt def def def specifying performance measures natural idea model states model behaviour state 
smoothly reconciled probabilistic logic computation reward vector seen stage procedure 
method simple standard theory process logics extend syntax pml set variables model state space extend semantics valuation function tt intuition variable represents property true particular subset state space 
allows expression formulae transmit understood represent undesirable portion state space case possible ciently transmit network packet finish failure state 
useful compose additional monitor process model label states 
known technique verification general relies skill modeller design process alter state space original model 
due predicative semantics pml formulae evaluate characteristic function set states straightforward specify utilisation reliability measures require reward values 
relation pml measures throughput require real valued rewards direct 
reason pml general part richer pepa reward language 
pepa reward language definition reward structure pepa reward language comprised parts reward specification associates value logical formula specifying behaviour attachment determines process derivatives particular reward specification associated reflecting compositional structure model 
meaning reward specification depend attached pepa model associated value may depend information local derivative consideration 
explained semantics reward language described 
formally reward specification considered pair consisting logical formula reward expression 
attachment formula checked set subcomponents context model 
formula satisfied corresponding derivative assigned reward 
value reward corresponds evaluation simple arithmetic expression 
syntax semantics reward expressions syntax reward expressions simple captures little straightforward syntax arithmetic 
additions bound variables 
atom atom cur rate act bound variables cur rate denote real numbers 
meaning dependent reward structure built particular labelled multi transition system results pepa model consideration 
exist pragmatic reasons useful specifying performance measures 
variable cur intended give reward expression access currently assigned reward allowing reward expressions previous assignments 
variable rate allows activity rates expressions specifically reward values assigned derivative transition rate successor derivatives activity type way timing information may incorporated reward specifications 
objective define reward function pepa process consideration ds computes derivative set ds derivative fact state transition system gives reward assigned derivative 
complete reward structure may built successively overlaying ects di erent reward functions explains inclusion variable cur 
reward assignment function semantic function relies context pepa process define meaning reward expressions semantics 
pc pc op pc pc op pc pc cur pc rate pc fig 

semantics reward expressions notation pc denotes evaluation expression respect context denotes context binary operator op intended capture obvious binary operators defined syntax 
definition completes definition reward specification 
definition reward specification pair pml formula reward expression 
creating reward structure attachments behavioural specification captured reward specification relates subcomponents model model attachment may guide formula tested model 
instance large pepa model may interesting examine performance single component queue 
possible disregard behaviour rest model interaction queue examination 
achieve contexts employed 
definition attachment triple 
reward specification context pepa processes passive rate undefined 
attachment allows modeller choose subcomponents interest subcomponents processes ds represent function constructing reward structure pepa process 
assume initial value ds 
semantic function attachments takes argument reward assignment function evaluates new function say possibly modified assignment function reflect new rewards assigned pepa model 
argument sequence attachments 
sequence chosen reward structure built sequentially allowing reward expression values partially constructed reward structure 
evaluating sequence attachments trivial evaluated individually order 
shown 

am 
am meaning attachment defined 
definition semantics attachment meaning attachment 
value determined follows 
pn 

created ordinary function perturbation result function constructs reward structure derivative space pepa process 
details 
implementation pepa workbench extended allow subset pepa reward language 
allows modeller express behavioural properties pml currently contexts implemented 
implementation automatically generates reward structure provably generates performance measures strongly equivalent models 
means modeller may apply aggregation pepa model having alter description performance measures 
pepa model workbench generates representation model generator matrix solved 
order generate matrix necessary workbench traverse entire state space pepa model 
traversal state model reward specification checked satisfied reward assigned 
algorithm implement subset reward language employs simple model checking procedure pml case study self checking distributed computation case study comes project tailorable fault tolerance frameworks embedded applications project 
project example fault tolerant applications provided industrial partners siemens 
objective project build modular framework faults errors failures methodically considered 
module framework backbone responsible tolerating internal external faults 
backbone currently implementation simplification key algorithms 
setting embedded system number loosely coupled nodes shared memory 
communication synchronous message passing 
agents run nodes 
agents designated manager 
simplified model assume manager experiences failures 
simplifying assumption necessary describe leadership election addition processing describe 
concentrate internal faults detected self checking phase distributed computation 
self checking agents monitor progress may declare faulty 
manager periodically broadcasts query agents asks alive 
manager waits receive possible replies agent responds agent alive alive agent faulty faulty 
means agent detected trapped fault uncertain state 
reply received certain timeout manager assumes hardware fault node agent running 
case recovery process initiated node 
agent composed sub processes 
responsible fault detection isolation restarting 
detector sets local flag indicate fault 
reports back manager agent alive 
flag periodically unset isolation process 
process reads flag finds unset reports back manager agent faulty 
agent faulty restart subprocess ensures correct re initialisation agent 
reflect structure system components model description 
define manager component generic agent components 
manager controls daemon processes agent manage 
agent sub components detection isolation restarting 
exponential assumptions deterministically timed timeouts approximated exponential distributions 
manager def query manager daemon def query daemon daemon def alive daemon faulty daemon timeout daemon daemon def daemon timeout daemon daemon def rn daemon agent composes sub processes synchronising relevant activities 
agent def detector restart timeout flag flag timeout alive faulty detector process concerned value flag reporting agent alive 
registers timeouts occur witnesses recovery agent node 
detector def flag detector flag detector timeout detector detector def alive detector timeout detector detector def detector timeout detector detector def detector process receives alive query manager 
checking value flag responsibility sending fault report appropriate 
detector process registers timeouts recovery processes 
def query def flag flag timeout def faulty timeout def timeout def final process responsible restarting agent fault 
witness reports sub processes order restart agent action necessary 
restart def alive restart faulty restart timeout restart restart def ra restart timeout restart restart def restart complete system configured composition agents paired instance daemon 
structure model represents single manager process system channels communicate agents running remote nodes 
order model broadcast alive message paired agent manager processes required synchronise message sent 
replies received asynchronously instance daemon received broadcast sent 
case fault agent node restart action performed node broadcast sent 
show system managed agents 
def agent daemon system def query query manager synchronisation set agent associated daemon contains activity types query alive faulty timeout managed agents added state space system increases proportionally 
course model exhibits symmetries exploited order eliminate uninteresting variants states 
aggregated state space compact store cient solve order find steady state probability distribution system 
aggregation performed automatically pepa workbench 
investigations model ect aggregation eliminate syntactic presentations states 
may case states presentation altered 
distinct disadvantage modeller expressive language provided allows definition performance measures model syntactic presentation states 
language modeller thorough knowledge aggregation method deployed order identify syntactic presentations remain aggregation 
complete knowledge aggregation method definition performance measures awkward unnatural modeller 
logical notation provide expressing performance measures avoids need modeller understand aggregation method employed tool reproduce ect states interest 
definition measure change aggregation performed 
definition measures independent number agents system re unchanged larger configurations system 
illustrate pepa reward language compute significant performance measures system 
potential lag system 
occurs agents detected local fault appointed daemon registered information 
simply expressed faulty captures states potential perform transition faulty reward fault registration rate assigned states 
ect varying flag registration rates measure shown 
expected measure sensitive variations rate associated flag activity leads states faulty message sent 
show rates values rn ra fig 

plot lag varying rates ect timing agents faster rate pre fault registration causing agents restarted manager 
rates values rn ra fig 

plot lag varying rates second measure define captures potential successive timeouts 
measure interest tuning system find right balance waiting faulty agents self repair pre software hardware resets 
timeout activities distinguished model activity performed rate 
express measure third variable timeout timeout tt varying relative values measure include classes timeout activity 
ability rate variables reward expressions allows include just activities interest 
related pepa reward language notation description performance specifications relate stochastic process algebra models expressed pepa 
study self checking distributed computation illustrates way modeller pepa reward language reason performance model 
alternative approach constructing reward structures spa models 
bernardo extends syntax empa activity augmented reward value activity represented triple comprised type rate reward values 
generated reward structure reward assigned state sum rewards associated activities enabled state 
bernardo constructed equivalence relation respects additional reward information 
choice pml motivated simplicity link pepa strong equivalence 
research area probabilistic verification links approach 
logics hansson jonsson able specify bounds probabilistic properties crucially probabilities behaviours specified state :10.1.1.49.6154
de alfaro addresses problem specifying long run average properties probabilistic systems non deterministic choices adversaries 
de alfaro defines experiments represent interesting model behaviour patterns 
experiments associate real valued outcome pattern behaviour considered occur infinitely 
baier describe temporal logic specify transient properties ctmcs 
model checking procedure aims establish properties hold 
quite distinct logic construct reward structure calculate steady state performance measures 
authors gratefully acknowledge helpful comments anonymous referees 
graham clark jane supported epsrc compa 
stephen gilmore supported distributed commit protocols epsrc esprit working group fireworks 
completed whilst marina visiting lfcs supported cnr 

harrison patel 
performance modelling communication networks computer architectures 
international computer science series 
addison wesley 

ajmone marsan balbo conte 
modelling generalized stochastic petri nets 
john wiley 

meyer sanders 
stochastic activity networks structure behavior application 
proc int 
workshop timed petri nets pages torino italy 
ieee computer society press 


compositional approach performance modelling 
cambridge university press 

herzog 
multiprocessor distributed system design integration functional specification performance analysis stochastic process algebras 
performance 

bernardo gorrieri 
tutorial empa theory concurrent processes nondeterminism priorities probabilities time 
theoretical computer science july 

howard 
dynamic probabilistic systems volume ii semi markov decision processes chapter pages 
john wiley sons new york 

bowman derrick 
analysis multimedia stream stochastic process algebra 
priami editor proc 
th int 
workshop process algebras performance modelling pages nice france september 

hansson jonsson 
logic reasoning time reliability 
formal aspects computing 

huth kwiatkowska 
quantitative analysis model checking 
proceedings twelth annual ieee symposium logic computer science pages warsaw poland june july 
ieee computer society press 


probabilistic symbolic model checking engineering models applications 
phd thesis carnegie mellon university 

de alfaro 
specify verify long run average behavior probabilistic systems 
lics ieee symposium logic computer science 

gilmore 
pepa workbench tool support process algebra approach performance modelling 
editors proc 
th conf 
mod 
techniques tools computer perf 
eval volume lncs pages 

clark 
formalising specification rewards pepa 
proc 
th process algebras performance modelling workshop pages july 

clark gilmore 
specifying performance measures pepa 
katoen editor proc 
th int 
amast workshop real time probabilistic systems volume lncs pages bamberg germany 
springer verlag 

gilmore 
cient algorithm aggregating pepa models 
appear ieee transactions software engineering 

clark gilmore thomas 
experiences pepa performance modelling tools 
iee proceedings software february 
special issue papers th uk performance engineering workshop 

larsen skou 
bisimulation probabilistic testing 
information computation september 

hennessy milner 
algebraic laws nondeterminism concurrency 
journal acm january 

clark 
techniques construction analysis algebraic performance models 
phd thesis university edinburgh 

bernardo 
algebra method associate rewards empa terms 
degano gorrieri marchetti spaccamela editors th int 
colloquium automata languages programming volume lncs pages bologna italy july 
springer verlag 

baier 
katoen hermanns 
approximate symbolic model checking continuous time markov chains 
proceedings concur volume lncs pages 
