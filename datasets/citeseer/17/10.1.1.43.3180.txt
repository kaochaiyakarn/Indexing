transactional workflows amit sheth marek rusinkiewicz amit ctt bellcore com marek cs uh edu basic transaction model evolved time incorporate complex transactions structures take advantage semantics higher level operations seen level page reads writes 
known examples extended transaction models include nested multi level transactions 
number relaxed transaction models defined years permit controlled relaxation transaction isolation atomicity better match requirements various database applications 
correctness criteria global serializability proposed 
examples extended relaxed transaction models reported 
transaction concepts begun applied support applications activities involve multiple tasks possibly different types including limited transactions executed different types entities including limited dbmss 
designer applications may specify inter task dependencies define task coordination requirements additional requirements isolation failure atomicity application 
refer applications multi system transactional workflows 
workflows developed ad hoc methods desirable maintain safeguards transactions related correctness computations data integrity 
discuss briefly specification execution issues evolving field emphasis role database transaction concepts 
idea workflow traced job control languages jcl batch operating systems allowed user specify job collection steps 
step invocation program steps executed sequence 
steps executed conditionally 
simple idea subsequently expanded products research prototypes allowing structuring activity providing control concurrency commitment 
extensions allow designer multitask activity specify data control flow tasks selectively choose transactional characteristics activity semantics 
area influenced concept long running activities 
workflows discussed may long running 
related terms database literature task flow activities multi system applications application networked applications 
related issues addressed various relaxed transaction models 
fundamental problem extended relaxed transaction models provide predefined set properties may may required semantics particular activity 
problem adopting models designing implementing workflows systems involved processing workflow may provide support facilities implied extended relaxed transaction model 
furthermore extended relaxed transaction models mainly geared processing entities dbmss provide transaction management features assumed particular restrictive type focus preserving data consistency coordinating independent tasks different entities including legacy systems 
bellcore rrc ln piscataway nj 
please send email extended version 
university houston houston tx 
specification tasks task workflow unit represented sending message filling form executing procedure contract transaction 
task processed entities limit attention cases task executed entity dbms application system 
model task state machine automaton behavior defined providing state transition diagram task skeleton 
correctness traditional transactions workflow level model internal operations task deal aspects task externally visible controllable 
general task corresponding automaton different internal structure resulting different task skeleton 
example corresponding standard transaction visible prepared commit state shown cf :10.1.1.109.5175
task specification may include ffl set externally visible execution states task including initial state termination states ffl set significant events lead transitions states event identified attribute forcible rejectable delayable required enforce inter task dependencies 
st committed done aborted executing executing ab phi phi phi phi phi phi hy dn cm ab upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi task specified independently entity execute considering capabilities behavior executing entity 
case may necessary determine entity execute task workflow system able adequately simulate states supported entity task executed 
case task specified execution specific entity specific type entity usually appropriate dealing existing legacy systems 
task skeleton depends large characteristics system task executed 
properties local system responsible execution task presence absence phase commitment interface directly affect form task skeleton definition activity 
characteristics entity executes task may influence properties task affecting structure 
task transaction executed dbms provides full range transaction management functions need take advantage local concurrency control commitment recovery access granting facilities 
task executed application system need understand application system semantics affects transactional behavior 
developing new global mechanisms duplicate functionality local systems build model managing multi system workflows utilizes known task structures semantics coordination requirements collection tasks execution semantics systems execute tasks 
workflow specification consists conditions affect execution tasks 
result specification inter task inter workflow execution requirements discussed 
dependencies correctness criteria tasks constituting workflow specified internal structure workflow defined specifying inter task dependencies 
dependencies specified variety software paradigms rules constraints programs 
general dependencies defined priori statically determined dynamically execution 
case tasks dependencies defined execution workflow starts 
relaxed transaction models approach 
generalization static strategy precondition execution task workflow specific transitions tasks possible tasks workflow dependencies known advance tasks preconditions satisfied executed 
different initial parameters task may result different executions task 
preconditions may defined terms execution states sibling tasks output values sibling tasks external variables including time data states 
terms execution dependencies data value dependencies temporal dependencies literature refer various scheduling preconditions 
dynamic case task dependencies created execution workflow executing set rules 
examples kind dependency specifications long running activities 
tasks workflow communicate variables local workflow persistent workflow system 
variables including temporal variables may hold parameters task programs 
data flow tasks determined assigning values input output variables 
practice substantial difference format representations data output task input 
corresponding mapping translation needs recognized need integral part workflow model 
execution task effects state database value output variable 
additional aspects intra inter workflow specifications captured inter task dependencies include ffl failure atomicity requirements defined acceptable termination states workflow committed aborted 
ffl execution atomicity requirements define isolation properties workflow 
requirements may specified providing coupling modes tasks requiring execution tasks atomic transactions ffl dependencies span workflows 
example may required tasks workflow follow execution entity 
requirements referred correctness criteria 
execution workflows correct execution workflows involves enforcing intertask dependencies assuring correctness interleaved execution multiple workflows 
scheduler determines allowable transitions task different system user events 
analyzed allowing corresponding transition take place terminating workflow 
account semantics tasks workflows executing entities significantly simplify control needed assure correct concurrent execution multiple workflows 
basic approaches implementation workflow management system identified embedded approach assumes executing entities support active data management features 
approach frequently dedicated systems developed support particular class workflows usually involves modification executing entities 
layered approach implements workflow control facilities top uniform application level interfaces execution entities 
workflow manager approach developed carnot project mcc 
follow reported partly currently working workflow management project utilizes approach 
discussions colleagues bellcore krishnakumar ness collaboration members mcc carnot project attie singh tomlinson woelk influenced 
ansari ness rusinkiewicz sheth 
flexible transactions support multi system telecommunication applications 
proceedings th vldb august 
attie singh sheth rusinkiewicz 
specifying enforcing intertask dependencies 
proceedings th vldb conference 
dayal hsu ladin 
transactional model long running activities 
proceedings th vldb conference september 
dyson 
workflow 
forbes november 
elmagarmid editor 
transaction models advanced database applications 
morgan kaufmann february 
elmagarmid leu litwin rusinkiewicz 
multidatabase transaction model 
proceedings th international conference vldb 
garcia molina gawlick klein salem 
coordinating multi transaction activities 
technical report cs tr princeton university february 
georgakopoulos hornick 
environment specification management extended transactions doms 
technical report september gte laboratories 
jin ness rusinkiewicz sheth 
concurrency control recovery multidatabase workflows telecommunication applications 
proceedings sigmod conference may 
klein 
advanced rule driven transaction management 
proceedings ieee compcon 
rusinkiewicz cichocki 
model multidatabase transactions international journal intelligent cooperative information systems vol 
sheth rusinkiewicz 
manage interdependent data 

wachter reuter 
contract model 


