universit degli studi di dipartimento di matematica operations research group auction algorithms shortest hyperpath problems de leone august technical report 
cam auction algorithms shortest hyperpath problems de leone dipartimento di matematica universit di delle mc italy 
email dipartimento di matematica universit di delle mc italy 
email campus august 
auction reduction algorithm strongly polynomial version auction method shortest path problem 
extend auction reduction algorithm different types shortest hyperpath problems directed hypergraphs 
results preliminary computational experiences show auction reduction method comparable known methods specific classes hypergraphs 
keywords directed hypergraphs hyperpaths shortest paths auction algorithms 
ams subject classification shortest hyperpath problem extension directed hypergraphs classical shortest path problem spt directed graphs :10.1.1.54.829
pervasive spt shortest hyperpaths relevant applications 
particular core traffic assignment algorithms transit networks 
shortest hyperpath models constructed spt problem stochastic time dependent networks production planning assembly lines 
shortest hyperpath algorithms building blocks enumerative algorithms hard combinatorial problems 
consequence growing interest efficient shortest hyperpath algorithms 
provides motivations investigating known methods theoretical practical point view developing new ones 
auction algorithms proposed bertsekas assignment problem extended general transportation problems 
survey auction algorithms network optimization problems contained chapter 
auction algorithms shortest path problems graphs proposed 
single origin single destination case method viewed application auction method ffl specifically constructed assignment problem finite termination procedure established 
furthermore algorithm dual coordinate ascent method 
strongly polynomial version auction method proposed pallottino scutell define pruning procedure reduces graph shortest path tree 
improvements method pruning method strengthened structure reduced graph exploited obtain better time complexity 
variant auction algorithm pruning proposed 
devise auction method shortest hyperpaths nonnegative hyperarc weights slightly modifying spt algorithm 
method tailored solve types shortest hyperpath problems various cases provide worst case complexity bound 
report results preliminary computational experience 
section give basic definitions hypergraphs shortest hyperpaths 
proposed auction method shortest hyperpaths section 
computational results sections respectively 
shortest hyperpaths directed hypergraphs directed hypergraph pair set nodes set directed hyperarcs hyperarc pair ae tail head 
detailed directed hypergraphs general definition hypergraphs introduced particular class hypergraphs considered called graphs :10.1.1.54.829
size jej hyperarc number nodes contains tail head jej jt hyperarc arc jej proper hyperarc jej 
denote number arcs proper hyperarcs respectively je jn size sum cardinalities hyperarcs size jej node forward star fs set hyperarcs backward star bs set hyperarcs 
path st length hypergraph sequence st 
nodes origin destination path st respectively 
say node connected node path st exists path st cycle 
path cycle free contain subpath cycle 
hypergraph nodes hyperpath st minimal hypergraph respect deletion nodes hyperarcs 

fh 
connected cycle free path 
observe fsg exists unique hyperarc predecessor hyperarc denoted 
say node exists hyperpath hyperarc say hyperarc contained reduction 
note contained strictly contained ae 
denote anu reduction obtained deleting 
say hypergraph full contains possible reductions proper hyperarcs 
full hypergraph represented support hypergraph obtained deleting strictly contained hyperarcs 
conversely hypergraph obtain corresponding full hypergraph adding strictly contained hyperarcs 
shortest hyperpaths weighted hypergraph hyperarc assigned nonnegative real weight 
weight hyperpath weighted hypergraph defined ways 
known definitions lead intractable shortest hyperpath problems 
restrict definitions known tractable :10.1.1.54.829
weighting function node function hyperpath st assigns value nodes depending weights hyperarcs 
value weight chosen weighting function 
additive weighting function satisfies properties function predecessor 
formally additive weighting function defined means recursive equations fsg non decreasing function weights nodes 
clearly different additive weighting functions defined see consider value function obtained defining follows minimum value shortest hyperpath problem consists finding set minimum value hyperpaths origin node node denote minimum value hyperpath su assume distance function obtained defining follows minimum distance problem asks minimum distance hyperpaths origin denote vector minimum distances arc weights nonnegative minimum value minimum distance problems solved efficiently procedure sbt :10.1.1.54.829
computational analysis variants sbt 
minimum time problems transit hypergraphs problem finding passenger expected travel time core urban transit networks models 
problem formulated terms hyperpaths transit networks graphs 
introducing time weighting function transit hypergraphs define particular shortest hyperpath problem different slightly general terminology equivalent formulations 
transit hypergraph weighted support hypergraph positive parameter oe associated node full hypergraph represented consider contained proper hyperarc time weighting function obtained defining weight function follows phi oe phi oe phi practice weighted average weights oe values delta inverse sum weights oe 
arc fug corresponding arc function defined way gives case nonnegative value 
minimum time problem consists finding minimum time hyperpaths origin full hypergraph note may considerably larger support practice solving minimum time problem efficiently requires directly aim observations 
denote vector minimum times define oe phi consider proper hyperarc set reductions denote reduction yielding minimum time arg min relations hold proposition consider nodes increasing order fu reduction fu follows max ik fi practice working support hypergraph requires finding hyperarc considering set reductions previous observations done processing nodes order compute value gamma technique compute expected travel times efficiently adopted auction algorithm minimum time problem 
reductions shortest hyperpaths hyperarc reduction operation proper hyperarc consists replacing hyperarc contained returning reduced hypergraph 
clearly hypergraph weighted nonnegative weight assigned propositions show suitably choosing weight reduction operation modify optimal solution shortest hyperpath problem 
proofs straightforward omitted 
suppose weighted hypergraph corresponding vectors optimal solutions value distance weighting functions 
proper hyperarc consider replacing proposition vector optimal values reduced hypergraph 
proposition vector optimal distances reduced hypergraph 
suppose transit hypergraph corresponding full hypergraph optimum times proper hyperarc consider replacing arc fug proposition gamma vector optimal times reduced full hypergraph 
auction algorithms shortest hyperpaths section propose auction method minimum value problem discuss adaptation weighting functions 
introducing approach briefly recall relevant features auction algorithms spt reader referred cited literature details 
auction algorithm shortest path problems graphs maintains path candidate path starting origin set dual node prices satisfying complementary slackness cs conditions ij ij ij cost arc 
algorithm consists basic operations path extension path contraction dual price raise 
iteration candidate path possibly extended adding new node path violating 
extensions possible dual price terminal node raised path contracted deleting node single origin single destination case algorithm terminates destination node reached variants devised multiple destination case 
consider case nonnegative costs dual prices initially set zero 
scan node node node time optimal distance node determined equal 
consequence decreased algorithm sequences scan operations ranks nodes increasing order distance origin property auction reduction method introduces reduction operation scan node delete arc entering arc means reduction operations graph transformed shortest path tree strongly polynomial time complexity obtained 
reduction operations including deletion nodes proposed improving complexity bound 
observation core auction shortest hyperpath method observation definition value distance time weighting functions arc fug 
words weighting functions define standard spt problem hypergraph directed graph 
suggests technique ffl apply auction reduction spt algorithm arcs hypergraph ffl scan node apply hyperarc reduction operations properties 
possibly generating new arcs 
note hypergraph modified algorithm step applied current hypergraph returned previous reduction operations 
practice execution proper hyperarcs lay explored part hypergraph considered replaced arcs result successive reductions 
auction algorithm minimum value problem described procedure 
procedure applied graph auction algorithm graph reduction described 
node predecessor pred gives arc best path determined far notational convenience consider pred set initially pred 
label minimum hyperpath value determined far optimum hyperpath value scan node denote fsa fsh arcs proper hyperarcs fs respectively fs fsa fsh 
replacing hyperarc reduction ani denoted note may arc node denoted 
execution algorithm contained graph ha ea directed graph defined nodes arcs current hypergraph va ea fsa proposition step algorithm node va quantity gives shortest path length current contained graph ha proof property follows correctness auction algorithm spt observing new arc created scan node theorem vector determined algorithm gives minimum hyperpath values original hypergraph 
proof theorem proved induction considering nodes order scan increasing order value delta 
claim clearly true node assigned 
assume previously assigned correct scan node follows proposition lower bound length path ha node node 
current hypergraph value hyperpath containing proper hyperarc 
implies correct consequence step change optimal solution proposition 
weighting functions auction algorithm minimum value easily adapted minimum distance problem 
aim suffices skip weight update step 
follows property replaced node 
algorithm gives vector optimal distances 
proof correctness distance function similar theorem 
procedure step pred fsg step fsa return perform steps 
scan set value delete bs bs pred reduce hyperarcs fsh update labels delete arcs fsa pred pred fag fag step node deletion contraction expansion fsa fig pred contract go step fsa go step step contraction contract set min fsa fw go step step expansion expand node arg min fsa fw go step 
situation slightly complex travel times 
recall goal support transit hypergraph deal corresponding full hypergraph implicitly 
aim replace hyperarc reductions arc insertion operations described 
consider proper hyperarc support fu know suffices consider reductions fu see section 
scan node compute value generate arc weight gamma proposition 
conclude gamma reduction yielding minimum time delete necessary removed scan node proper hyperarc jt arcs generated 
order compute efficiently proper hyperarc support hypergraph keep values initially set oe oe oe scan oe 
keep counter visited nodes 
rewrite step follows step reduce hyperarcs fsh oe oe oe oe oe add arc gamma jt delete observe new arc added improve label 
case current predecessor pred deleted step arc generated belongs contained graph step 
lemma values delta assigned scan node correct value assigned scan node correct 
proof set nodes current hypergraph scan occurred scan node know gives spt distance contained graph lower bound spt distance node consider proper hyperarc current support hypergraph 
reductions containing nodes considered algorithm possibly adding new arcs 
follows lower bound 
lower bound minimum time node current hypergraph 
thesis follows 
lemma proof correctness auction algorithm minimum times induction theorem 
computational complexity auction reduction algorithm solves spt problem graph jv jv log jv jg time 
easy see maximum number arcs generated execution value distance weighting functions size time function 
total time spent scans step size 
state proposition proposition running time auction shortest hyperpaths algorithm size log ng value distance time function size log ng 
techniques improving running time auction reduction method path scanning ant multipath restructuring 
resulting complexity jv jej 
fact total computation time successive scan operations jv clearly jv scans 
techniques easily applied shortest hyperpath algorithm proposition follows proposition auction shortest hyperpath algorithm path scanning multipath restructuring takes size time value distance time functions 
computational results section preliminary computational results auction methods shortest hyperpath problems 
main goal compare variants basic method complete experimental evaluation auction shortest hyperpath methods require larger effort 
basic shortest hyperpath algorithm denoted har implementation procedure data structure 
variant algorithm denoted har second best device chapter 
implemented third version denoted second best device node contraction operation introduced 
node contraction deletes node indegree outdegree equal arcs incident node say replaced arc 
node contraction operations simplify current graph may help keeping current path shorter 
compared auction algorithms implementation procedure denoted :10.1.1.54.829
algorithms coded language run ibm risc workstation ram aix operating system 
general devising reasonable experimental setup shortest hyperpaths trivial task hypergraphs show degrees freedom graphs see 
restricted weighting function distance considered different hypergraph topologies random grid 
random hypergraphs show special structures origin distinguished node fs contains arcs 
size proper hyperarcs chosen randomly interval min max 
experiments set min jf defined classes random hypergraphs different values max proper hyperarcs arcs exiting root weights generated randomly interval remaining arcs weights belong 
choice motivated attempt increase relevance hyperarcs 
results random hypergraphs shown table 
class value ffi expected size fs execution times milliseconds entry rounded average instances 
max ffi har har sbt table 
random hypergraphs grid hypergraph nodes arranged theta grid node identified nodes form level pair mod vertical arcs hyperarcs connect nodes successive levels exists hyperarc gamma gamma mod gamma mod addition origin node arcs generated classes grid hypergraphs square long ae high ae parameters choosen order number nodes classes 
hyperarc weights lay interval vertical arcs weights lay weights arcs leaving lay 
execution times reported table 
entry rounded average instances times seconds 
high square long har har sbt table 
grid hypergraphs clearly incomplete results allow draw 
concerns random hypergraphs auction algorithms comparable standard label setting methods efficient class hypergraphs 
auction methods competitive density increases case har gives best results 
hand auction methods suitable large grid hypergraphs 
result matches computational results auction methods long grid graphs surprising auction algorithm maintain long current path order connect nodes layers 
second best data structure gives best results random hypergraphs high grids suitable square long grids 
result surprising grid hypergraph exist hyperarcs plus vertical arcs leaving node conceivable results high grids due savings obtained scanning origin node 
contrary node contraction operation useless grid hypergraphs 
result disappointing preliminary experiments operation proved effective classes grid graphs 
possible explanation may node highest distance tail hyperarc highest distance tail hyperarc belongs case hyperarc reduction may create arcs leaving node node contraction applied 
observation may suggest guidelines improving algorithms 
proposed auction method shortest hyperpath problems adapted types weighting functions 
method derived minor changes auction reduction spt algorithm 
appealing feature approach techniques originally developed graphs easily exported hypergraphs 
practical point view auction shortest hyperpath methods comparable known methods favourable cases 
expect behaviour dramatically affected structure underlying hypergraph resemble closely happens graphs 
conclude auction shortest hyperpath methods deserve investigation theoretical practical side 
possible direction adapting variants proposed literature price raise technique devised forward reverse approach single origin single destination case chapter 
bertsekas 
distributed algorithm assignment problem 
technical report laboratory information decision system massachusetts institute technology cambridge 
bertsekas 
auction algorithm distributed relaxation method assignment problems 
annals operation research 
bertsekas 
auction algorithm shortest paths 
siam journal optimization 
bertsekas 
linear network optimization algorithms codes 
mit press cambridge massachusetts 
bertsekas 
auction algorithm minimum cost network flow problem 
technical report lids laboratory information decision system massachusetts institute technology cambridge 
bertsekas 
auction algorithm transportation problems 
annals operation research 
bertsekas pallottino scutell polynomial auction algorithms shortest paths 
computational optimization applications 
de leone 
modified auction algorithm shortest path problem 
optimization methods software 
ausiello italiano 
dynamic maintenance directed hypergraphs 
theoretical computer science 
gallo gentile 
max horn sat minimum cut problem directed hypergraphs 
mathematical programming 
gallo longo nguyen pallottino :10.1.1.54.829
directed hypergraphs applications 
discrete applied mathematics 
gallo pallottino 
hypergraph models algorithms assembly problem 
technical report tr dipartimento di informatica universit di pisa 
nguyen pallottino 
equilibrium traffic assignment large scale transit networks 
european journal operation research 
nguyen pallottino gendreau 
implicit enumeration hyperpaths logit models transit networks 
transportation science 
nguyen 
computational study shortest hyperpath algorithms 
technical report crt centre de recherche sur les transports universit de montr eal 
pallottino scutell strongly polynomial auction algorithms shortest paths 
ricerca 

hypergraph model stochastic time dependent shortest paths 
submitted european journal operational research 
wu florian 
simplicial decomposition method transit equilibrium assignment problem 
annals operation research 

