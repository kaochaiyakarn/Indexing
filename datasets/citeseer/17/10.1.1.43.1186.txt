disc dynamic instruction set computer michael brad hutchings department electrical computer engineering brigham young university provo utah dynamic instruction set computer disc developed support demand driven instruction set modification 
partial reconfiguration disc pages instruction modules fpga demanded executing program 
instructions occupy fpga resources needed fpga resources reused implement arbitrary number performance enhancing application specific instructions 
disc enhances functional density fpgas physically relocating instruction modules available fpga space 
image processing application developed disc demonstrate advantages paging application specific instruction modules 
keywords fpga processor run time reconfiguration relocatable hardware application specific processor digital systems general purpose processors provide sufficient processing power operate acceptably real time environments 
specialized computing resources digital signal processors application specific processors improve available computation 
relatively new approach improving available computing power embedded systems implement application specific circuits field programmable gate arrays fpgas 
expensive custom circuits fpgas provide simplified low cost design environment 
attractive ability fpga operate unlimited number unique circuits device configuration 
cost device amortized various circuits operate device 
method mix programmability processor systems hardware configurability fpga systems implement application specific processors fpga 
describe novel application specific processor implemented partially configurable fpga 
providing background research fpga processor systems 
techniques implement disc described 
include partial reconfiguration relocatable hardware linear hardware model 
architecture disc processor example custom instructions 
conclude presenting results algorithm implemented disc 
background number general purpose processors developed show feasibility implementing processor architecture fpgas 
custom processors successfully demonstrated advantages adding specialized hardware general purpose processor cores 
application areas processors include digital audio processing systems linear equations statistical physics 
limitation building customized processors fpgas lack hardware resources available complete processor core specialized instruction set 
functional processor core instruction modules quickly consume resources largest fpgas available today 
technique provide hardware resources fpgas reconfigure fpga application execution 
constantly removing idle hardware fpga resources available offered time configured device 
technique known run time reconfiguration rtr shown increase functional density reconfigurable fpgas 
disc processor uses rtr ameliorate hardware limitations fpga processor architecture 
specifically disc replaces idle application specific instruction modules usable modules provide essentially limitless application specific instruction set 
early attempts modifying processor instruction set involved writable control store generating custom micro code application 
prism project extended idea augmenting instruction set standard risc processor application specific instructions tightly coupled fpga 
hardware images instructions extracted compiled source code transparent user 
project discusses dynamic approach involves swapping hardware compute configurations fpga resource demanded data flow token 
disc processor implements instruction instruction set independent circuit module 
individual instruction modules paged hardware demand driven manner dictated application program 
hardware limitations eliminated replacing unused instruction modules usable instructions run time 
application running disc contains source code indicating instruction ordering library application specific instruction circuit modules 
partial fpga reconfiguration disc takes advantage partial fpga configuration implement dynamic instruction paging 
partial reconfiguration provides ability configure sub section fpga remaining logic operates unaffected 
national semiconductor configurable logic array clay chosen ability partially reconfigure hardware resources 
disc uses partial configuration provide custom instruction caching 
instruction modules implemented partial configurations individually configured disc demanded application program 
initiating execution custom instruction disc queries fpga presence custom instruction configuration 
custom instruction fpga execution initiated 
program execution pauses custom instruction configured fpga 
typical program executes custom instructions configured fpga available hardware consumed 
hardware custom instructions new custom instruction modules may configured fpga sufficient hardware removed 
replacing oldest custom instruction modules fpga newer modules fpga serves cache custom instruction modules 
example demonstrate operation instruction caching image processing algorithm coarse grain image processing instruction modules shown 
large application specific instructions implemented discrete hardware operate complete image 
modules fit device time instruction caching employed 
assembly language program image processing routine follows execute histogram operation image located image hist image calculate median pixel value image store threshold median image threshold enhance binary contrast image thresholding thresh threshold image copy entire image new location copy image image perform morphological erosion image image subtract image image obtain outline diff image image instruction previous program hist median thresh copy diff designed independent partial configuration source code representing program loaded disc processor begins execution 
instructions executed configured fpga 
algorithm finished free hardware 
example instructions modules hist median thresh copy configured executed hardware full instruction able configure execute 
free space oldest instruction module hist removed room 
process removing old instruction modules room new modules continues program finishes 
advantages partial configuration provides number advantages disc conventional configuration methods 
idle instruction modules removed room usable modules 
ability replace instruction modules system run time allows implementation instruction set larger possible single time configured fpga 
second configuration time substantially reduced 
fpga completely configured time new instruction needed configuration overhead dramatically reduced configuring hardware necessary requested instruction 
reducing size hardware configure significantly reduces configuration bit stream 
configuration bit stream reductions disc instruction modules fall complete fpga configuration 
significantly smaller bit stream corresponding configuration time reduced 
environment run time configuration reducing configuration time limit reconfiguration overhead 
third system state saved fpga configuration 
conventional configuration techniques prevent preservation system state configuration destroying contents flip flops 
implementing disc conventional configuration methods require saving restoring system state program counter register values time configuration occurs 
prevent time consuming process saving restoring state disc implements global controller remains fpga times 
summary partial configuration allows disc implement essentially infinite instruction set hardware limited configuration state preserving overhead 
relocatable hardware ability partially configure custom instruction modules allows disc implement important strategy relocatable hardware 
relocatable hardware implemented partially configurable fpgas provides ability relocate placement decisions partial configurations run time 
sub modules traditional digital systems require single fixed location hardware strict global local physical constraints 
sub modules traditional systems paged hardware fixed location pose problems global optimizations static circuitry improve hardware utilization 
run time partial reconfigurable system fixed locations partial configurations pose serious performance problems 
disc modules designed operate single physical location instructions varying sizes library inevitably overlap hardware 
overlapping instructions operate properly fpga time 
overlapping instructions frequently application program configuration overhead needed replace instructions quickly system bottleneck 
disc removes problems designing custom instruction module multiple locations fpga 
flexibility multiple locations disc custom instructions significantly improves run time utilization 
instruction modules initially configured fpga close possible avoid wasted hardware modules 
hardware space full additional instruction modules placed locations older unneeded instruction modules currently lie 
relocatable hardware allows run time constraints conditions dictate instruction module placement optimal hardware utilization 
relocatable hardware implemented designing custom instruction modules firmly defined global context 
global context provides physical placement positions communication network necessary modules operate correctly 
global context partitions available hardware array potential placement locations relocatable instruction modules 
communication network provided placement location insure adequate communication global controller instruction modules location 
order design instruction modules fit global context instruction modules physically independent 
physical layout instruction module affect physical layout placement module library 
linear hardware space disc implements relocatable hardware form linear hardware model 
name suggests model linear dimensional hardware space 
dimensional grid configurable logic cells organized array rows location specified vertical location module size specified module height rows 
global context constructed linear hardware model 
context consists uniform communication network global controller 
communication network constructed running global signal vertically die spreading global signals width die parallel see 
linear hardware space network global controller disabled communication linear hardware space 
communication network provides access global resources instruction modules performs intermodule communication 
global controller specifies communication protocol controls global resources global state monitors circuit execution 
global controller communication network remain location application execution preserve global context 
gain access global signals sub modules linear hardware space designed horizontally width fpga 
modules lie perpendicular global communication signals full access global signals regardless vertical placement see 
sub modules span entire width fpga module may consume arbitrary amount hardware varying height 
relocatable circuit modules communicate established global protocol operate properly vertical location 
run time environment circuit modules relocated needed optimize available hardware space 
module placed vertical location width fpga global signals simplified custom instruction module 
disc architecture disc architecture implements relocatable hardware linear hardware model single national semiconductor clay fpga coupled external ram 
clay provides array fine grain logic cells allowing complete rows linear hardware space 
complete processor coupling global controller library custom instruction circuit modules see 
custom module address data control instruction module global control instruction module processor memory library module instruction fft edge detection add multiply subtract custom module disc linear hardware space 
global controller global controller provides circuitry operating monitoring global resources external ram internal communication network global state 
global controller consumes complete rows approximately chip leaving rows available custom instruction modules 
physical layout global controller estimated gates communication network seen 
fdmux fdmux mux mux mux fdn mux zero fdmux inv mux inv fdmux mux inv bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux inv bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux inv bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux inv bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz fdmux mux inv bufz fdmux bufz mux fdmux bufz xond fdmux bufz fdmux bufz disc global controller layout 
global controller modeled simple bit processor simplified instruction set 
internal datapaths bits wide single internal register 
bit program counter address register provides addressing range 
internal registers available hold system status allow external control 
global controller provides consistent communication interface standard protocol custom instructions vertical location 
number global signals necessary properly interface custom modules global controller 
signals include memory interfacing signals internal register state processor status 
global controller responsible sequencing instruction cycles custom instruction modules 
processor supports instruction modes standard complex 
standard instruction sequence follows simple cycle execution 
instructions require minimal processing time basic arithmetic logic operations operate sequence 
custom instruction sequence offers additional cycles instructions need significantly time traditional low level instructions 
instructions add cycle require thousands cycles single operation 
large instructions modules image processing instructions discussed earlier operate custom instruction sequence add hundreds thousands cycles custom processing 
global control unit contains number default instructions available times control global resources 
instructions sequencing status control memory transfer include ffl set clear carry controls carry status bit ffl load store data register provides memory transfer operations ffl conditional jump provides conditional control 
instructions operate standard instruction 
instructions coupled library provide complete instruction set processor 
application implement instruction set size paging instruction modules demand driven manner instruction library 
custom instruction modules custom instruction modules vary size complexity designed fit global context described 
specifically module contains decode data path control unit 
decode unit assigns specific op code custom instruction responsible acknowledging presence global controller 
decode unit compares opcode executing instruction match opcode instruction cycle 
positive match module signals global controller hardware instruction sequencing continues 
data path responsible providing proper connections global communication network adhering established communication protocol 
control unit responsible monitoring local state signaling instruction completion global controller 
custom instruction modules varying size implemented disc development 
vary simple single row shifter complex edge detection module rows 
table shows current instructions available disc 
circuit layout adder module seen 
xo bufz xo nd xond xond bufz nd xond xond bufz xo xond xond bufz xo nd xond xond bufz nd xond xond bufz nd xond xond bufz xo xond xond bufz xo nd xond xond bufz disc adder custom module layout 
module rows gates shifter comparator add subtract addressing modes masking operations logical operators bit level operations mean filter edge detector table sample custom instruction modules 
system operation disc processor implemented pc isa custom board exclusively study 
board includes static bus interface circuitry clay fpgas memory 
configuration controller implemented fpga monitor processor execution request instructions host 
disc implemented second fpga application program memory stored adjacent memory see 
board operates unix operating system controlled host device driver 
pc host bus interface configuration clay controller isa bus disc clay processor disc system 
performance main consideration disc implemented primarily study dynamic instruction set modification partial reconfiguration 
research tool processor bits operates host bus speed mhz 
processor widths operating speeds increased device densities improve tool enhancements available 
disc application initiated loading program memory target application second configuring disc fpga global controller 
execution processor validates presence instruction hardware 
instruction requested application program exist hardware processor enters halting state requests instruction module host 
receiving request instruction module host evaluates current state disc fpga hardware chooses physical location requested module 
physical location chosen available fpga resources existence idle instruction modules 
possible instruction module loaded fpga location currently occupied instruction module 
empty hardware locations available simple lru algorithm remove idle hardware 
host modifies bit stream requested hardware module reflect placement changes 
hardware module configured disc platform sending new configuration system 
provides simplified flow chart disc instruction execution 
instruction 
hardware available 
remove old instruction compute new location instruction configure module execute instruction fetch pc instruction disc instruction execution 
drawback partially configuring device run time overhead caused continually reconfiguring instruction modules 
current board configures disc processor sending configuration bit stream bit bus transfer pc isa bus 
operating maximum transfer rate mb sec pc host capable configuring row 
represents processor cycles simple instruction executions row configured 
removing current system board bus limitations configuration speeds improve factor operate device maximum mb sec 
custom instruction modules remain resident processor long periods time decrease reconfiguration overhead 
addition custom instruction modules provide performance improvement sequence general purpose alu instructions justify cost run time reconfiguration 
application example demonstrate tradeoff 
application example simple image mean filter developed sequence general purpose instructions application specific hardware module demonstrate performance improvements gained building application specific instruction module hardware 
demonstrations calculate mean value pixel image obtaining average neighborhood follows gamma gamma general purpose approach general purpose approach required instructions processor core add subtract shift additional addressing modes 
additional modules comprised total rows leaving rows free custom instruction modules 
execution algorithm centered inner loop calculation neighborhood mean value 
calculating pixel value involved individually adding pixel neighborhood 
instructions summing operation involved address calculation pointer manipulations 
complete processing pixel required average instructions clock cycles 
processing complete image including overhead required ms mhz 
application specific approach application specific approach significantly improves performance algorithm assuming control address generation buffering pixel values pipelining arithmetic 
rows hardware extra registers arithmetic operators control logic consume significantly hardware simple instructions general purpose approach 
mean instruction module calculates average neighborhood sliding window seen 
numbered element sliding window represents pixel register custom module 
loading entire window memory pixel register values shifted represent sliding window 
registers loaded new pixel 
window registers loaded custom instruction module adds pixel values parallel custom adders seen 
division achieved shifting results bit positions 
shift sliding pixel window mean instruction dataflow 
mean instruction requires clock cycles evaluate pixel image 
reducing pixel calculation clock cycles eliminating address calculation overhead reduces clock count general purpose case times speedup 
operating mhz image filtered ms displays original image image filtered mean custom instruction 
configuration overhead cost reconfiguring application specific instruction module high configuration overhead considered comparing approaches 
row mean instruction requires additional configuration raising total cycle count 
mean configuration overhead represents total operating time 
device configuration speeds maximized configuration overhead reduced total operating time 
test image filtered mean custom instruction 
extra modules needed general purpose approach require configuration 
represents total operating time 
considering high cost configuration total operating time mean filter custom instruction provides times speedup general purpose approach see table 
general application purpose specific rows operation cycles raw speedup configuration cycles total cycles actual speedup table performance comparison general purpose application specific approaches 
disc processor successfully demonstrates application specific processors arbitrarily large instruction sets constructed partially reconfigurable fpgas 
relocatable hardware model improved run time utilization fpga resources linear hardware model provided convenient framework relocating custom instruction modules 
disc demonstrates general concept alleviating density constraints fpgas partially reconfiguring device run time 
techniques partial configuration relocatable hardware linear hardware model implemented general purpose processor offer similar advantages digital architectures 
may enhance usefulness fpga processors providing demand driven computation 
addition techniques may allow fpga computing machines operate dynamic environments multitasking operating systems 
digital architecture benefit demand driven hardware may find techniques useful 
acknowledgments supported arpa contract number dabt subcontract national semiconductor 
additional support provided harry holt tim soft logic group national semiconductor 
davidson 
fpga implementation reconfigurable microprocessor 
proceedings ieee custom integrated circuits conference pages 
fagin 
quantitative measurements fpga utility special general purpose processors 
journal vlsi signal processing august 
wolfe shen 
flexible processors promising application specific processor design approach 
proceedings st annual workshop microprogramming microarchitecture micro pages san diego ca november 
hutchings 
nano processor low resource reconfigurable processor 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 

reconfigurable multi bit processor dsp applications statistical physics 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
hutchings 
density enhancement neural network fpgas run time reconfiguration 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
agrawala 
dynamic problem oriented redefinition computer architecture microprogramming 
ieee transactions computers november 
athanas silverman 
processor reconfiguration instruction set metamorphosis 
computer march 
ling 
data driven computer virtual hardware 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
national semiconductor 
configurable logic array clay data sheet december 
