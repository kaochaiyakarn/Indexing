distributed file systems past distributed file system fabio kon kon cs uiuc edu march start citing attempts implementing distributed file system 
section famous systems academic community nfs afs sprite experimental systems brought important scientific contributions coda zebra harp echo 
knowledge systems characteristics current trends computer systems finish section presenting thoughts distributed file system 
major part distributed file systems carried middle eighties 
nowadays tens different implementations kind system 
distributed systems history find support ftp service clients large amount local storage svo 
started running pdp 
interim file server ifs created years xerox parc 
able organize public personal files hierarchical directory tree 
research center brought file server smb 
system possible access single pages file allowed diskless clients network virtual memory 
years lot different systems xdfs locus swallow cmu vice designed implemented svo 
time creation currently distributed file systems sun nfs cmu afs 
section describe systems systems brought relevant contributions research field 
case studies nfs network file system developed sun microsystems widely distributed file systems unix world 
releasing versions nfs sun public nfs protocol specification sun allowed implementation nfs servers clients vendors 
protocol defines rpc interface external data representation standard xdr sun 
today possible find nfs implementations existing computers operating systems including non unix systems mvs macos os ms dos 
nfs servers definition stateless store information state client accesses files 
server crash information lost recovery immediate 
hand stateless servers control concurrent accesses files nfs assure consistency file system 
different clients different conflicting copies file directory local cache 
file updated client modifications may noticed clients period seconds 
file created deleted fact take seconds perceived clients 
needs coherent sharing information distributed system mechanism message passing 
stateless servers nfs capable managing locks atomic transactions 
name space client different user point view location transparent 
job system administrator determine client view directory structure 
done editing file statically binds mount points server directories editing automounter configuration files allows dynamic bindings degree replication read directories 
user level implementation rpc xdr client caching policy nfs performance worse systems describe bellow 
currently nfs distributed file system networks workstations 
andrew andrew project hkm sat tan started carnegie mellon university ibm support 
goal design implement ideal distributed file system academic environment allow sharing common directory structure thousands client machines 
scalability important problem face order accomplish goal security 
clients users impossible trust client weaken security system 
security problem solved restricted kerberos protocol sns mutual authentication client servers 
scalability problem address large amount server client 
client opens file andrew file system afs file fetched server 
subsequent read write operations local copy stored local disk 
file closed modified transferred back server 
consequence technique afs presents session semantics unix semantics 
client perceive update file client opens closed 
afs brought concept callback allowed client open close file times having access server 
client receives file server receives callback promise client holding version file 
callback broken client updates file server afs files transferred needed blocks kbytes reduce open latency allow access files fit local disk 
receives new version file client 
local copy times far client holds valid callback 
afs supports simple replication scheme automatic backup user files replication read directories 
currently afs cells world giving users possibility sharing files different continents unix file system interface 
coda coda system implemented early nineties descendent afs 
main goal provide access distributed file system portable computers 
coda implements automatic replication mechanisms afs 
coda volume set file system directories associated volume storage group set servers replicates volume 
set accessible servers particular group particular moment called 
coherency copies file maintained afs callbacks 
client sends updated file server update forwarded servers ss mechanism 
server recovers crash done moment update files 
client sends request fetching new file preferred server sends request file version number servers 
client find server old version file advise get update copy 
disconnected operation interesting coda feature possibility accessing distributed file system files connected network 
file locally cached portable computer disk user read update file server permission 
portable computer reconnected network system tries propagate appropriate servers updates disconnected period 
conflicts occur different updates file different clients coda provide tools user decide update prevail 
order allow access files disconnected coda client tries keep local disk largest possible amount files user need connection server lost 
accomplished mechanism assigns priorities file time file accessed client explicit list interesting files provided user hoard database 
minutes process called hoard walk initiated order bring local disk files larger priorities 
idea client working set stored client disk 
local disk full new file copied cached file lowest priority discarded local disk 
see coda respect session semantics 
tolerate wants extra availability provided coda 
sprite sprite network operating system ocd developed university california berkeley middle eighties 
file system collection network services closer call distributed operating system 
sprite transparently distributed file system mechanism process migration transparent process user 
distributed file systems address sprite file system 
main goals sprite file system designers high performance unix semantics file sharing 
achieved performance best times certainly better nfs afs 
unix semantics achieved case failures occur 
high performance previous experiments shown huge client server caches improve performance considerably 
experiments shown large amount file system devoted temporary files lifetime seconds 
order client server caches big possible sprite implements scheme file system virtual memory manager compete physical memory 
usually physical memory allocated systems file system cache get tens megabytes available memory 
sprite designers suggest file servers dedicated machines hundreds megabytes ram entirely file caching 
order reduce network disk traffic sprite caches reads writes file system 
seconds dirty cached blocks modified seconds sent server 
written piece data take seconds sent server seconds written disk 
procedure saves lot network disk traffic 
temporary files example sent server 
hand delayed write scheme system sensitive failures 
user saves file text editor take minutes get safe place hard disk 
updates file may completely lost client server crashes 
exhaustive experiments bhk nwo shown sprite performance local networks outperforming nfs afs 
unix semantics provided client server goes sprite file system users access file system concurrently perceive kind semantics local unix machine 
words call read system call returns data written write call location 
unix semantics accomplished disabling client caching file concurrent write shared 
concurrent write sharing defined state client particular file opened clients file opened writing 
caching particular file disabled read write operations done directly server unix semantics obviously achieved 
clear caching disabled performance strongly affected 
studies shown bhk concurrent write sharing rarely occurs gain having file system trust compensate loss performance 
differently nfs sprite servers stateless keep track clients doing files 
cause problems server crashes rebuild state rebooting 
mary baker worked hard topic phd thesis bak presents mechanisms allowed rebooting time sparcstation clients reduced just seconds including file system verification 
name space differently previously described systems sprite name space system clients 
pathname resolution scheme prefix tables mechanism wo 
client needs resolve pathname looks largest prefix pathname local prefix table 
find server handles requested file directory 
sends server handle corresponding prefix plus rest pathname 
server resolve rest pathname returns client file handle subsequent accesses file 
hand resolve pathname just returns code client indicating 
server answers client resolve requested pathname client sends broadcast network servers asking server handles pathname 
server replies client adds entry local prefix table 
gives error message user 
clients start empty prefix tables broadcast find root directory server 
entries added need arises 
client try access domain prefix tables receive reply sends new broadcast servers asking server domain 
behavior allows easy implementation domain migration 
domain migrates server clients automatically adapt new configuration need administrator interference differently nfs afs resolves pathnames component component prefix tables allows sprite access appropriate server immediately provided requested pathname prefix table 
nfs tries reduce overhead analyzing pathnames component component caching directory information sprite 
broadcasts sprite protocol seriously compromises scalability 
sprite designed local networks performance kind environment 
important point sprite security mechanisms limited weaker unix 
weaknesses arises fact prefix tables allow user access directory say checking unix permission bits directories prefix previously added prefix table 
zebra zebra system ho ho developed university california berkeley 
joined powerful ideas originally conceived local file systems new distributed file system concept 
concepts redundant arrays inexpensive disks raids log structured file systems ro 
years mainly risc technology introduced microprocessor speeds increased disk access speeds ous 
consequences fact disk access times started major bottleneck various applications systems 
obviously administrator reconfigure servers involved migration 
huge caches avoid lot read accesses disk effect write accesses cached long time 
log structured file systems sprite lfs ro large amount small write operations grouped sequentially transferred disk avoiding unwanted seek times 
disk block written updated anymore new data concatenated log making write operations faster 
zebra uses idea group writes distributed file system 
stripping files different servers raids different disks single server zebra manages evenly distribute workload 
avoiding situation server idle flooded requests application running zebra various disk requests processed parallel different servers 
redundant logical server maintained order keep system availability acceptable levels 
system files kept accessible server goes 
desired system configured maintain higher level redundancy higher availability 
tests shown zebra performance better sprite systems 
part measured workloads built way result obtained 
exhaustive measurements required 
major problems system availability scalability requires fundamental system managers centralized single machine 
details zebra implementation cited papers 
harp harp highly available reliable persistent file system experimental system developed mit early nineties 
offers highly fault tolerant file service adopting primary backup witness pessimistic replication scheme 
runs conventional hardware requiring inexpensive power supplies keeping power couple minutes failure power supply 
file system operation approved majority servers system performance obviously worse previously described systems 
scheme integrity file system data really essential 
sz developed nineties university toronto 
assumption file sharing wide networks may larger expected afs team 
system divided clusters 
clients perform intra cluster communication local servers conventional nfs 
servers perform inter cluster communication order fulfill client requests 
servers dynamically create local replicas remote files consistency control replicas different clusters obeys session semantics 
experiments wide area engineering network showed major improvements lowering intra cluster traffic 
rewritten garbage collection operation performed 
echo echo distributed file system piece ambitious project carried dec research center palo alto 
echo joined qualities systems afs scalability sprite unix semantics harp fault tolerance new features coherent distributed file cache directory write 
best system design time implementation suspended project porting taos operating system new hardware platform canceled 
echo users january middle 
fault tolerance scheme replication disks single server increases data integrity replication servers single disk increases system availability 
requires special hardware called autonet avoid servers access disk time 
pessimistic replication algorithm similar implemented harp 
echo system implement write kind data including directories mbh 
order avoid destruction file system integrity client server crashes echo assures written data get disk defined partial order refined user calling new system call 
cache consistency maintained efficient fault tolerant mechanism called leases gc km 
mechanism allows accessing cached files write shared different clients 
interesting echo features completely implemented 
integration local naming service internet domain name service dns 
name space intended uniform echo clients world 
example pathname com dec src dir arq access file arq directory dir internet node src dec com ironically implemented feature may important echo contribution 
idea file server domain files called junctions contain pointers servers directories 
point similar nfs mount points sprite remote links 
junctions contain information protocol access corresponding sub tree 
system administrator specify protocols semantics file system volumes 
directory important data lost consistent replicated pessimistic algorithm 
important shared data optimistic algorithm 
directories shared distant clients session semantics 
directories files fast accessed write leases kind information 
words directory sensible protocol kind data 
comparative charts table presents comparative summary previous systems important characteristics 
echo may possibly best distributed file system designed moment 
symbol just indicates address local resolved dns module 
diagram describes tradeoffs pairs distributed file system characteristics mechanisms 
continuous arrow roughly means increasing expect increase non continuous arrow means increase usually leads decrease labels arrows contain name system corresponding tradeoff observed 
interesting relation exists replication efficiency 
optimistic replication may lead increase efficiency pessimistic replication usually leads decrease efficiency 
arrow heterogeneity scalability just signs system run large number different platforms nfs easier build larger distributed system machines available 
nfs known poor scalability 
availability cache scalability afs sprite sprite afs efficiency nfs harp nfs coda coda coda security afs sprite increase increase decrease increase afs echo coda consistency sprite harp reliability location replication transparency heterogeneity distributed file systems tradeoffs current distributed file systems presents problems research community try solve 
new kind applications mainly deals multimedia continuous data video audio bringing new requirements local distributed file system design 
enumerate important features distributed file system support 
ffl transparency file system easier user interaction programmers efforts hiding aspects data location network type operating system type failure occurrences 
ffl global scale afs systems give users different continents possibility sharing files 
years computers earth connected file system tool sharing information 
ffl unix semantics semantics provides simple tool synchronization data sharing processes different machines 
current systems don provide feature claiming files rarely shared different clients 
aren files rarely shared systems don provided coherency 
answer 
ffl automatic replication increases system availability reliability offer user server allowing choice efficiency workload distribution 
ffl striping evenly distributes workload allow parallel transfers single files 
ffl aggressive caching increases system performance making cache hit ratio big possible 
ffl log structure increase data writing performance decrease file system verification time 
ffl automatic compression making idle cpu cycles decreases storage space requirements data transfer times dou 
ffl multimedia support multimedia applications deal huge amounts information currently get terabytes data transfer rates hundreds megabytes second 
unix file systems proper kind task 
alternatives mp designed ucsd considered order decrease latency increase transfer speed file sizes 
ffl adaptation monitoring workload system try accesses efficient possible 
ffl protocol flexibility done echo junctions shown system administrator able determine protocol piece system name space 
shown section tradeoffs features 
tradeoffs implementing system containing desired properties harder 
role researchers defy build distributed file system 
bak mary baker 
fast crash recovery distributed file systems 
phd thesis university california berkeley ca january 
technical report ucb csd 
andrew birrell andy hisgen chuck timothy mann garret swart 
echo distributed file system 
technical report digital equipment systems research center palo alto ca september 
bhk mary baker john hartman michael kupfer ken shirriff john ousterhout 
measurements distributed file system 
proceedings th symposium operating system principles pages pacific grove ca october 
douglis ousterhout 
transparent process migration design alternatives sprite implementation 
software practice experience august 
dou fred douglis 
role compression distributed systems 
acm operating systems review 
gc cary gray david cheriton 
leases efficient fault tolerant mechanism distributed file cache consistency 
proceedings th acm symposium operating system principles pages december 
gill zhou sandhu 
case study file system workload large scale distributed environment 
technical report computer science research institute university toronto 
hkm john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
ho john hartman john ousterhout 
zebra striped network file system 
proceedings usenix file systems workshop pages ann arbor michigan may 
usenix 
ho john hartman john ousterhout 
zebra striped network file system 
proceedings th symposium operating system principles pages asheville nc december 
acm 
km fabio kon mandel 
soda lease consistent distributed file system 
de ao editor xiii brazilian symposium computer networks 
technical report mac ime usp 
available ftp ftp ime usp br pub reports comp rt mac ps gz 
edward lee raid ii scalable storage architecture high bandwidth network file service 
february 
barbara liskov sanjay ghemawat robert gruber paul johnson shrira michael williams 
replication harp file system 
proceedings th acm symposium operating system principles pages 
mbh timothy mann andrew birrell andy hisgen charles garret swart 
coherent distributed file cache directory write 
technical report digital equipment systems research center palo alto ca june 
mp keith muller joseph pasquale 
high performance multi structured file system design 
proceedings th acm symposium operating system principles pages 
nwo nelson welch ousterhout 
caching sprite network file system 
acm transactions computer systems february 
ousterhout trace driven analysis unix bsd file system 
proceedings th symposium operating system principles pages orcas island wa december 
acm 
ocd ousterhout douglis nelson welch 
sprite network operating system 
ieee computer february 
ous john ousterhout 
aren operating systems getting faster fast hardware 
summer usenix pages anaheim ca june 
james pang gill zhou 
implementation performance cluster file replication large scale distributed systems 
technical report computer science research institute university toronto august 
ro rosenblum ousterhout 
design implementation log structured file system 
proceedings th symposium operating system principles pages pacific grove ca october 
acm 
sat satyanarayanan 
scalable secure highly available distributed file access 
ieee computer pages may 
garret swart andrew birrell andy hisgen timothy mann 
availability echo file system 
technical report digital equipment systems research center palo alto ca september 
satyanarayanan james kistler kumar maria ellen siegel david steere 
coda highly available file system distributed workstation environment 
ieee transactions computers april 
smb daniel swinehart gene mcdaniel david boggs 
wfs simple shared file system distributed 
proceedings th acm symposium operating system principles pages december 
sns jennifer steiner clifford neuman jeffrey schiller 
kerberos authentication service open network systems 
available ftp athena dist mit edu file pub kerberos doc usenix psg march 
ss satyanarayanan ellen siegel 
parallel communication large distributed environment 
ieee transactions computers 
sun sun microsystems xdr external data representation standard 
rfc network information center sri international 
sun sun microsystems nfs network file system version protocol specification 
available ftp ftp uu net networking ip nfs nfs spec ps february 
svo 
file servers network distributed systems 
acm computing surveys december 
sz sandhu zhou 
cluster file replication large scale distributed systems 
acm sigmetrics performance evaluation review june 
tan andrew tanenbaum 
modern operating systems 
prentice hall englewood cliffs new jersey 
wo welch ousterhout 
prefix tables simple mechanism locating files distributed filesystem 
proc 
th international conference distributed computing systems pages boston mass may 
ieee 

