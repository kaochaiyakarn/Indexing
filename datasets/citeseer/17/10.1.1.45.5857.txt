model checking security protocols edmund clarke jha may cmu cs school computer science carnegie mellon university pittsburgh pa resources added computer networks vendors look world wide web viable marketplace importance able restrict access insure kind acceptable behavior presence malicious intruders paramount 
people looked cryptography help solve problems 
cryptography tool 
security system depends cryptosystem 
typically researchers proposed security protocols provide security guarantees 
protocols consist sequence messages encrypted parts 
develop way verifying protocols model checking 
model checking proven useful technique verifying hardware designs 
modelling circuits finite state machines examining possible execution traces model checking number errors real world designs 
hardware designs security protocols subtle bugs difficult find 
examining possible execution traces security protocol presence malicious intruder defined capabilities determine protocol enforce security guarantees 
provide sample trace attack protocol 
research sponsored part avionics laboratory wright research development center aeronautical systems division afsc air force wright patterson afb ohio contract arpa order part national science foundation 
ccr views contained document authors interpreted representing official policies expressed implied national science foundation government 
keywords computer security cryptographic protocols formal verification model checking partial order 
security early computers provided physical isolation 
unauthorized access machines prevented restricting physical access 
importance sharing computing resources led systems users authenticate usually providing name password pair 
sufficient user needed physically console connected machine secure link 
efficiency gained sharing data computing resources led computer networks communication channels trusted 
case authentication information name password pairs intercepted replayed gain unauthorized access 
networks local certain user community isolated rest world willing take risk place trust community 
order able share information outside community isolation removed 
benefits sharing enormous gains demonstrated growth entities internet world wide web 
guarantees communication links 
numerous protocols take advantage cryptography proposed claim solve security issues 
correctness protocols paramount especially consider size networks involved desire users place confidential information allow monetary transactions take place networks 
typically protocols thought set principals send messages 
hope requiring agents produce sequence messages security goals protocol achieved 
example principal receives message encrypted key known principals principal able conclude message originated principal incorrect conclude principal talking principal adversary replaying message overheard conversation depending security goal simple example protocol protocol may may secure 
reasoning correctness protocols subtle number researchers turned formal methods prove protocols correct 
order concentrate security protocol opposed security cryptosystem vast majority research area perfect encryption assumptions 
ffl decryption key known order extract plaintext 
ffl redundancy cryptosystem generated encryption appropriate key 
implies encryption collisions 
equal generated plaintext key 
assumptions obviously true practice reasonable 
important allow away cryptosystem analyze protocol 
particular attack abstracted protocol attack exists real cryptosystem 
related protocols tended short terribly complicated informal arguments prove correctness 
running parallel behavior protocols difficult analyze 
asynchronous composition difficult reason adding issues knows reasoning security protocols extremely difficult 
approach taken bellare rogaway shoup rubin try provide rigorous mathematical proof correctness protocol 
properties pseudo random functions mathematical arguments prove adversary statistical advantage trying discover key session key distribution protocol 
earliest successful attempts formally reasoning security protocols involved developing new logic express deduce security properties 
earliest logic commonly referred ban logic due burrows abadi needham 
syntax provided constructs expressing intuitive properties said believes key authority 
provide set proof rules try deduce security properties believe key list explicit assumptions protocol 
formalism successful uncovering implicit assumptions weaknesses number protocols 
logic criticized protocol idealization step required formalism 
protocols literature typically sequence messages 
ban logic requires user transform message protocol formulas message inferences logic 
example server sends message containing key ab step need converted step server sends message containing ab meaning key ab key communication attempt give logic rigorous semantics abadi tuttle attempts improve expand logic :10.1.1.115.3569
ban logic remains popular simplicity high level abstraction 
modal logics verifying security protocols includes development logic express accountability 
convincingly argues applications electronic commerce accountability belief important 
counterparts world people held accountable electronic transactions 
means individual participants believe transaction place 
able prove third party transaction place 
provides syntax allows properties expressed set proof rules verifying 
similar ban logic accountability logic high level abstraction 
able analyze protocols find lack accountability variant cmu internet billing server protocols 
orthogonal line research revolves trying automate process verification logics 
craigen attempt embedding ban logic 
automation resulting experiment satisfactory 
building forward chaining mechanism changing rules able build system try develop entire theory set axioms find closure set formulas derivation rules 
wing went proposing theory checker generator 
provide formal defined framework assurances correctness termination 
addition system generates theory checkers variety logics including ban accountability logic 
third technique placed general category model checking 
common approach model protocol defining set states set transitions takes account intruder messages communicated back forth information known principals 
state space traversed check particular state reached state trace generated 
attempt formalism due dolev yao 
develop algorithm determining protocol secure model 
model extremely limited 
consider secrecy issues model encryption decryption adding checking deleting principal name 
meadows extension dolev yao model prolog model checker 
system user models protocol set rules describe intruder generates knowledge 
rules model intruder generate knowledge applying encryption decryption intruder generate new knowledge receiving responses messages sends principals participating protocol 
addition user specifies rewrite rules indicate words reduced 
typically rules capture notion equality fact encryption decryption inverse functions 
rules encrypt decrypt decrypt encrypt id check perform verification user supplies description insecure state 
model checker searches backwards attempt find initial state 
accomplished naturally prolog attempting unify current state right hand side rule deducing left hand side state description previous state 
initial state system insecure attempt prove insecure state unreachable showing state leads particular state unreachable 
kind search leads infinite trace order intruder learn word learn word order learn word learn word 
reason facility formal languages included allows user prove word set words language generated intruder 
technique involves steps ffl show word question language 
ffl show knowledge word language requires previous knowledge word language 
ffl show initial state contain word language 
initial model checker limited 
particular allow modeling freshly generated nonces session keys 
model checker evolved nrl protocol analyzer allowed operations 
addition model changed include states participants state intruder maintaining old paradigm unifying right hand sides transition rules order generate predecessor states 
model complex suffers important weaknesses original system 
systematic way converting protocol description set transition rules nrl analyzer 
model checker relies heavily user verification way theorem prover relies user guide search proof 
algorithms nrl analyzer guaranteed terminate limit placed number recursive calls allowed model checking routines 
woo lam propose intuitive model authentication protocols 
model resembles sequential programming participating principal modelled independently 
easy obvious translation common description protocol set messages model 
models intuitive consider possible execution traces considering just set words obtainable intruder 
concerned checking call secrecy em correspondence properties 
secrecy property expressed set words usually keys intruder allowed obtain 
correspondence properties express things form principal finishes protocol run principal principal started participated protocol run provide general logic formalize security properties provide automated tool 
set inference rules prove correspondence assertions model 
addition description model intuitive precise formal 
presents model middle point 
meadows emphasizes algebraic properties intruder trying derive words 
state intruder set words generate state participants determined values variables correspond protocol program counters 
number rules reason information contained messages provided prove properties protocol 
example properties including authentication terms invariant proven 
invariant proven hold protocol steps unwieldy quickly 
area involved trying generic verification tools verify security protocols 
lowe uses fdr model checker csp analyze needham schroeder public key authentication protocol 
lowe succeeded finding previously unpublished error protocol 
fact able generic model checker promising 
unfortunately csp model protocol far straightforward 
addition model parameterized nonces participants 
means models single run protocol 
order prove general protocol correct prove theorem states general protocol insecure restricted version insecure 
lotos language tool box analyze protocol 
interesting case study fact protocol real system currently design controlling access multimedia services broadcast public channel 
able find couple security flaws proposed system generic tools 
gray mclean propose encoding entire protocol terms temporal logic 
symbolic model checking describe model giving formulas express possible relationships variable values current state variable values state 
framework formal cumbersome 
provide simple example prove global invariant example 
subcases consider straightforward technique demands long proofs extremely simple example 
argue technique automated provide tool system 
abadi gordon propose spi calculus extension pi calculus cryptographic primitives model describing analyzing cryptographic protocols 
spi calculus models communicating processes way similar csp ccs 
spi calculus provides constructs output channel input channel restriction composition testing equality pairs projections encryption decryption branching equality zero 
sets spi calculus pi calculus apart calculi dynamic nature scope restriction 
restriction operator thought creating new name processes scope restriction operator refer 
processes output new name outside scope restriction operator allowing process refer 
pi calculus new names thought private channels 
spi calculus restriction operator model nonces keys 
far protocol models verified comparing slightly altered model obviously correct level abstraction protocol model 
concrete complete model heintze tygar 
view protocols set agents modeled non deterministic finite state machines 
actions principal follow protocol depend local state principal sense restricted 
actions adversaries restricted protocol allowed perform actions consistent current knowledge 
words send messages generate current knowledge 
model includes notion belief sequence sends receives defines local state principal 
security split secret security time security 
model secret secure beliefs universally valid 
particular principal believes message shared principals case knows model time secure beliefs eventually expire 
words belief held principal event event held event authors go prove questions secret secure time secure undecidable 
model job capturing means security model complex practice 
intuition propose model checking scheme verification security protocols perfect encryption assumptions 
propose intuitive model captures basic idea message generation communication 
systems protocol encoded csp term rewrite rules model protocol definitions easily translated sequence commands send receive 
fact clear translation done automatically simple notation describe protocols literature sequences messages occur run protocol 
sequence actions participants take asynchronous composition get full model protocol 
unspecified participant call intruder 
intruder models untrusted communication medium malicious principals 
messages sent intercepted intruder 
intruder allowed send messages impersonating trusted principal 
intruder may selected participant protocol run 
addition intruder allowed compromise temporary secrets session keys generated run protocol meant treated permanent secrets 
care taken unreasonable allow intruder compromise temporary session keys soon generated 
sense participants allowed key allowed compromised 
run protocol consist interleaving actions participants intruder 
particular run trace analyzed determine security protocol compromised 
particular check intruder learns secret meant permanent principal believes completed run principal principal participated run 
general set security requirements specified kind logic trace checked see requirements violated 
verify protocol correct possible runs checked 
think trace alternating sequence global states actions 
global state consist local state participant global information set secret information principals participated protocol runs 
principal finite number actions take point time typically just number possible states finite 
restrict sufficiently large finite number runs entire state space finite depth search state space simply checking reachable state violates security specification 
specification kinds properties currently interested 
kind secrecy property 
provide model checker set terms intruder allowed obtain 
verification simply check intruder possession terms set 
straightforward information known intruder typically infinite 
example intruder knows piece data key repeatedly encrypt data produce infinite number new terms 
second property temporal property woo lam call correspondence 
particular interested checking principal believes finished protocol run principal principal begun protocol run principal 
generalized event occurs event occurred past 
woo lam notation 
denote 
property simple temporal relationship 
relation events events mapping 
formally projection trace events events derivable grammar terminal symbols represent events particular principal believes completed protocol runs principal principal begun protocol runs principal protocol run part mapped separate protocol run part 
order check kind property augment global state counters 
correspondence property 
maintain separate counter keep track difference number events events 
counter turns negative events events correspondence property violated point mapping events events 
conversely long counter goes negative mapping events events 
messages typically messages exchanged run protocol built pairing encryption smaller 
smallest contain called atomic messages 
types atomic messages 
ffl keys encrypt messages 
perfect encryption assumption states way obtain plaintext encrypted message appropriate decryption key 
keys property key inverse gamma messages gamma 
note symmetric cryptography decryption key encryption key gamma ffl principal names refer participants protocol 
ffl nonces randomly generated numbers 
intuition randomly generated message containing nonce assumed generated nonce generated 
old message 
ffl data plays role protocol works intended communicated principals 
denote space atomic messages 
set messages set atomic messages defined inductively follows ffl 
atomic message message 
ffl delta 
messages paired form new message 
ffl key fmg 
message encrypted key form new message 
keys inverses take space modulo equivalence gamma important note perfect encryption assumption 
way generate fmg words exist messages key fmg delta fmg fm implies subset messages 
closure denoted representing set derived defined rules 

delta 
pairing 
delta 
projection 
key fmg 
encryption 
fmg key gamma 
decryption model define model formally describing global state individual principal local states defined describing actions update state 
model consists asynchronous composition set named communicating processes augmented local store keep track current information knows set bindings variables appearing process 
principal involved protocol modelled processes described sequence actions perform initial state local store 
initial state bindings assumed empty 
process intruder completely specified 
initial state local store allowed perform realistic actions 
example intruder allowed decrypt messages key possess allowed send messages create information local store 
allowed receive send messages arbitrarily possibly intercepting messages intended principals possibly impersonating trusted principal 
formally principal modelled tuple hn bi ffl names name principal 
ffl process similar style csp sequence actions performed 
ffl set messages known produced principal 
set possible messages 
typically infinite particular closed encryption decryption pairing concatenation projection 
example fmg set messages denote closure operations 
ffl vars vars set variables appearing process set bindings 
global state maintained composition participating principals intruder process list permanent secrets list temporary secrets set counters indexed pairs principals participating protocol runs 
formally global state tuple pi ffl pi product individual principals intruder process 
product asynchronous yielding interleaving semantics restriction processes synchronize messages 
ffl names theta names gives difference number times principal name begun initiating protocol principal name number times finished responding principal counter gets negative value means finished responding protocol believes participated protocol having taken part protocol 
ffl names theta names gives difference number times principal named begun responding principal named number times finished initiating protocol counter gets negative value means finished initiating protocol believes participated protocol having taken part protocol 
ffl set messages considered safe secrets 
set words intruder allowed know 
set remains constant usually includes things private keys principals communicate server 
ffl set messages considered temporary secrets 
set new secrets generated run protocol 
secrets assume intruder may able discover outside means protocol reveal session keys 
specific actions principal may perform divided internal actions communication actions 
internal actions performed asynchronously 
principal allowed perform internal action interleaving model possible behaviors multiple principals transition 
define transition relation principals principal take action principal behaves communication actions consist send receive actions 
receive action potentially change principal local store reflecting new information learned 
communication actions occur pairs principals transition simultaneously 
communication actions interleaved possible actions automata 
order communication action take place message sent unify message received 
message msg principal ha ba unifies message msg principal hb bb exist substitution oe vars extending bb bb oe ba msg oe msg 
messages unify transitions taken ha send msg ba ha ba hb receive msg bb hb oe oe msg 
require msg unify msg pair var val var appearing msg corresponding value msg val 
updates add new bindings change previous bindings 
part internal actions create discover new information 
example create nonce 
nonces globally distinct action creates nonce appeared point protocol 
new nonce added principal local store 
works similarly supposed model generating new session key encrypt messages 
formally ha var bi ha ha var bi ha cases val new value generated action val var val 
action action updated global state val 
additionally intruder allowed perform action acquire secret previously generated principal 
models possibility session keys compromised 
allows classes secrets assume permanent private key server trusted principal secrets temporary session keys 
need allow intruder obtain session keys order allow possibility replay attacks allow intruder establish old compromised key session key 
need restrict usage intruder allowed compromise session key immediately generated 
reason allow intruder perform action compromise key established protocol 
formally hz bi hz bi val val global state updated 
special actions 
mark principal participation protocol 
guarantee principal named finishes protocol performs principal named participated protocol performed 
maintaining counters pair principals participating protocol 
formally ha ba ha ba update global state setting new value ae defined similarly hb bb hb bb update global state setting new value ae gamma error definitions identical updated global state action may performed intruder rest actions may performed principal 
actions particular honest principal may restricted sequence actions represent role protocol 
intruder restriction allowed action time provided performs send action message case recall trace alternating sequence global states actions interested checking possible traces 
clearly finite number states participants 
addition intruder generate infinite number messages allowed send finite number send match receive 
finite number possible states consider finite number runs perform depth search state space generate possible traces 
check reachable state violates security specification 
pseudocode algorithm 
proc dfs global state push global state empty pi pop intruder information pi 
report error states pi push model checking algorithm remaining detail maintain local stores principals 
local store accessed places 
principal ha ba sends message insure second principal receives message update check global state see intruder local store 
turns local stores infinite closure operation 
really need compute entire closure need determine particular message closure 
suffices represent infinite set finite set generators 
topic section 
normalized derivations intuitively speaking represents set information known principal principal knows generate information general infinite set usually interested set principal knows specific message generated principal 
leads definition 
message 
derivation alternating sequence sets messages rule instances written follows delta delta delta gamma rk gamma ffl ffl ffl rule instance written hi closure rules satisfies premise rule corresponding 
example ffag delta gamma derive delta follows 
ffag delta gamma 
delta bg ffag 
ffag delta gamma fag bg 
gamma 
ffag delta gamma fag ag 
hfa bg fa delta 
ffag delta gamma fag delta bg contains introduce notion normalized derivation introduce notion shrinking rules expanding rules defining metric define shrinking rule rule instance rule hi oi max max analogously expanding rule rule instance hi oi max min define normalized derivation follows delta delta delta gamma rk gamma normalized derivation expanding rule implies expanding rule words shrinking rules appear left expanding rules 
recall notation rule instance hi example model define metric inductively follows ffl ffl delta ffl fmg note defined fm fm perfect encryption assumption implies case delta delta substring substring loss generality assume delta case delta delta delta delta delta delta delta delta delta message derivation rules section messages categorized 
definitions rules shrinking rules rules expanding rules 
show model derivation normalized derivation need lemma 
lemma derivation length expanding rule shrinking rule 
exists derivation delta delta delta gamma gamma 
gamma expanding rules 


proof case hfm fm delta gi hfm delta fm gi case delta delta delta case delta new derivation clear case ii delta delta delta new derivation consist substring substring loss generality assume delta case delta delta delta delta delta new derivation hfm fm hfb fm gi hfm fm delta gi fm bg fm fm delta fbg case hfm fm delta gi gamma assumptions encryption way generate fmg knowing encryption algorithm 
delta fmg case fmg new derivation clear case hfm kg gi hfm delta fm gi delta fmg delta new derivation case hfm kg gi gamma fm gi case fm fmg case new derivation clearly case ii fm fmg case fm valid derivation clear theorem set messages 
normalized derivation proof normalized derivation clearly derivation definition direction exists derivation gamma delta delta delta gamma rk gamma shrinking rule expanding rule empty gamma normalized derivation done 
induct size min repetitively lemma move left leftmost rule immediately right shrinking rule 
original derivation finite time apply lemma rule moves slot left need apply lemma finite number times 
leftmost rule clearly expanding rules left immediately right shrinking rule expanding rules left expanding rule left original derivation contradicting minimality new derivation gamma finite 
application lemma add new shrinking rules new satisfies gamma frg 
furthermore js jsj gamma inductive hypothesis transform gamma normalized derivation corollary determining decidable 
proof theorem normalized derivation try find normalized derivation show exists 
repeatedly apply shrinking rules creating new sets finite number rules rule creates finite number new words smaller metric words input rule finite finite number apply shrinking rules finite number times 
call final set result repeatedly applying possible shrinking rules normalized derivation derivation uses expanding rules 
furthermore length minimal derivation bounded expanding rule creates words longer words inputs rule 
finite number expanding rules finite simply try possible sequences expanding rules length equal finite number steps 
algorithm guaranteed terminate 
proof lemma majority cases displayed kind independence rules 
intuitively independence means applying rule increase set things derived rule 
formally shrinking rule independent expanding rule pair instances hi hi 
oe output expanding rule input shrinking rule 
case pairing decryption encryption projection 

information gained applying shrinking rule applying expanding rule 
case encryption decryption key 
note property applied cases lemma real proving lemma came case pairing rule projection rule independent 
pairs rules independent perfect encryption assumption 
general exchanging property lemma need shown pairs rules independent 
information algorithms corollary proves decidability determining extremely inefficient algorithm 
particular enumerating sequences expanding rules length yield exponential complexity 
practice search derivation structure specifically theorems theorem delta delta proof assume delta delta delta expanding rule 
assumption delta show delta derived shrinking rule take derivation delta gamma theorem get normalized derivation gamma shrinking rules appearing gamma redundant don add new words removed derivation contradict fact created applying possible shrinking rules case remainder derivation remainder assume delta consist expanding rules 
particular rule derivation expanding rule way case rule require premise assume delta clear rule rule delta theorem fmg fmg proof analogous previous theorem 
putting yields basis search algorithm 
set known messages increases repeatedly apply shrinking rules removing redundant messages get set basic messages apply shrinking rules 
redundant messages mean messages generated messages set expanding rules 
example apply rule get delta remove delta applying rule careful generate fmg gamma remove fmg pseudocode algorithm 
consider complexity inserting new message current set information generate new set information time interaction previously known messages try apply decryption rule 
message jmj encryptions 
encryption scan looking inverse key total jb time 
analogously contain jmj keys 
key check element see function add fxg gamma add gamma delta return add add fxg gamma return add return add return augmenting intruder knowledge decrypted 
takes jb time 
newly decrypted message decrypted 
number iterations bounded jb total time generate bounded jb jmj size bounded jb 
know words derived expanding rules 
search see word known theorems break smaller pieces searched recursively 
example fmg theorem tells pseudocode algorithm 
function return true delta return fxg return return false searching intruder knowledge searching derivation check see costs time 
break smaller pieces recursively check 
total number recursive calls bounded number operations making turn bounded jwj 
total time check bounded jb 
verification example consider example illustrate model checker works 
consider simplified protocol analyzed lowe 
fn 
fn 
fn gkb initiator responder 
selects nonce sends name encrypted public key uses private key decrypt message obtain generates nonce sends encrypted public key uses private key decrypt message returns encrypted public key 
uses private key verify just received nonce sent earlier 
order model checker isolate actions performed actions performed write short sequence actions participant role protocol 
process description principal 
description principal similar 
remains specify initial state principal local store 
principal including intruder knows names principals 
principal knows public key principals 
principal knows private key 
lists initial contents intruder local store consists names principals public keys private key 
var var na send var concat var encrypt pubkey var concat var na receive var concat var encrypt pubkey concat var na var nb send var concat var encrypt pubkey var var nb var process description initiator intruder pubkey pubkey pubkey intruder intruder intruder initial knowledge result verification attempt 
just seconds model checker finds violation security specification generates counter example 
provides easier read description attack 
sequence messages runs protocol ff fi provided 
notation meant convey impersonating left arrow intercepting message meant right arrow 
examine counter example see happened 
initiates protocol run intruder 
intruder initiates protocol run impersonating nonce intruder 
responds intruder forwards message message format expecting nonce new nonce encrypted public key 
replies back intruder nonce encrypted intruder public key 
intruder private key decrypt return nonce encrypted public key 
receives message protocol run complete believes finished protocol run corresponding belief initiated protocol run analysis easily seen observing relationship ff run fi run ffl role ff played fi 
ffl role ff played fi 
ffl message fi obtained corresponding message ff replacing fi run identical ff run plays role responder impersonating played role initiator 
lack correspondence intruder var na nonce concat intruder encrypt pubkey intruder concat nonce intruder intruder concat encrypt pubkey concat nonce var nb nonce concat encrypt pubkey concat nonce nonce intruder intruder concat intruder encrypt pubkey concat nonce nonce concat intruder encrypt pubkey intruder nonce intruder intruder intruder concat encrypt pubkey nonce verification result ff fn fi fn fi fn ff fn ff fn gk fi fn gkb attack needham schroeder protocol lowe suggests fixing protocol changing second message new protocol follows 
fn 
fn 
fn gkb try verify protocol lowe find attack single run protocol 
attack entire exhaustive search state space performed verification process takes bit longer completed minute 
model checker provides number advantages formalisms 
way model protocol intuitive 
simply list sequence actions participant takes protocol 
systems logics need interpret beliefs message meant convey generate counterexamples error 
term rewriting approaches need construct set rewrite rules model intruder manipulate participants generate new messages 
simply model protocol set programs participant protocol 
separate algorithms maintain intruder knowledge state exploration algorithms need encode intruder models 
prototype model checker described successfully discovered previously published errors protocols 
run correct protocols model checker takes bit longer ends exploring entire reachable state space examples investigated far system terminates minute 
confident kind exhaustive simulation feasible useful technique verifying security protocols 
extensions investigated implemented additional experiments carried 
despite fact simple straightforward translation protocol descriptions literature modelling language process tedious prone error 
currently developing better interface allow protocols specified exactly way specified literature 
working defining logic specify properties interested checking 
investigating add message operations xor encryption non atomic keys 
extensions possible clear additions affect efficiency decision procedure message derivations 
efficiency important concern 
currently model checker runs acceptable amount time 
increase number concurrent protocol runs increase complexity model checker expect execution time increase dramatically 
techniques increase efficiency model checker necessary combat increase complexity 
particular clear number operations thought independent sense swapped execution trace affecting rest trace 
leads believe partial order techniques applied 
increase efficiency ease expressibility prove useful analyzing complex protocols including electronic commerce protocols 
abadi gordon 
calculus cryptographic protocols spi calculus 
proceedings fourth acm conference computer communications security april 
appear 
abadi tuttle :10.1.1.115.3569
semantics logic authentication 
proceedings th acm symposium principles distributed computing pages august 
bellare rogaway 
provably secure session key distribution party case 
proceedings th annual acm symposium theory computing pages 

approach formal verification cryptographic protocols 
proceedings rd acm conference computer communication security 
brinksma 
iso specification language lotos 
computer networks isdn systems 
burrows abadi needham 
logic authentication 
technical report dec systems research center february 
craigen 
analyze authentication protocols 
technical report tr ora canada 
dolev yao 
security public key protocols 
ieee transactions information theory march 

overview toolbox 
cost workshop june 
gray mclean 
temporal logic specify verify cryptographic protocols progress report 
proceedings th ieee computer security workshop 
heintze tygar 
model secure protocols compositions 
ieee transactions software engineering january 
hoare 
communicating sequential processes 
prentice hall 

accountability electronic commerce protocols 
ieee transactions software engineering may 
wing 
fast automatic checking security protocols 
usenix nd workshop electronic commerce 
lacroix 


providing equitable conditional access trusted third parties 
european conference multimedia applications services techniques pages may 
lowe 
breaking fixing needham schroeder public key protocol fdr 
tools algorithms construction analysis systems volume lecture notes computer science pages 
springer verlag 
meadows 
applying formal methods analysis key management protocol 
journal computer security 
meadows 
nrl protocol analyzer overview 
proceedings second international conference practical applications prolog 
needham schroeder 
encryption authentication large networks computers 
communications acm 
peled 
model checking representatives 
proceedings fifth international conference computer aided verification lecture notes computer science pages 
springer verlag 
shoup rubin 
session key distribution smart cards 
proceedings eurocrypt 
syverson van oorschot 
unifying cryptographic protocol logics 
proceedings ieee computer society symposium research security privacy 
ieee computer society press may 
woo lam 
semantic model authentication protocols 
proceedings ieee symposium research security privacy 
woo lam 
verifying authentication protocols methodology example 
proceedings international conference network protocols 
