continuation semantics typed lambda calculi summary albert meyer massachusetts institute technology laboratory computer science technology square cambridge ma mitchell wand computer science department brandeis university waltham ma logics programs brooklyn june parikh ed 
springer lecture notes computer science vol 



reports preliminary semantics continuation transform 
previous semantics continuations concentrated untyped lambda calculi primarily mechanism inclusive predicates 
predicates easy understand atomic values obscure functional values 
case typed lambda calculus show predicates replaced retractions 
main theorem states meaning closed term retraction meaning corresponding term 


method continuations introduced strachey wadsworth device formalizing notion control flow programming languages 
method term evaluated context represents rest computation 
term involves evaluation subterm subterm evaluated new context evaluates rest term proceeds old context 
term evaluated immediately value passed context 
context called continuation 
cases may write direct continuation semantics language 
faced problem formulating relationship semantics 
relationship studied reynolds stoy sethi tang 
papers discussed essentially untyped lambda calculus atoms interpreted scott model 
result case semantics term connected relation identity relation atoms 
key construction suitable relation 
done method inclusive predicates depended details models 
result significance predicates values atoms obscure 
show case typed lambda calculus may replace inclusive predicates retractions far easier understand 
direct continuation meanings term connected relation show direct meaning may recovered continuation meaning retraction 
way continuation semantics appears representation direct semantics sense hoare retraction hoare abstraction mapping 
hoare notion concrete invariant appears crucial part proof 
furthermore reasoning proof lies entirely calculus theorem holds model 
avoid detailed modeltheoretic manipulation characteristic inclusive predicate approach 

language 
consider simply typed lambda calculus 
types ground types oe oe functional types ff fi 
types distinguished type necessarily ground type answers 
types 
terms variables combinations abstractions ff variable ff type term 
assume semantics sorted environment model meyer wand 

interpretation types 
continuation semantics manipulate representations objects appear direct semantics 
assign type ff type ff representations objects type ff 
ground types represented 
corresponding function type ff fi continuation semantics function takes arguments representation ff continuation expects representation fi 
information function computes answer 
oe oe ff fi ff 
fi 
transformation 
term type ff construct term type ff follows mn mn deleted type annotations clarity 
variable send result continuation abstraction return appropriate function continuation 
combination evaluate operator continuation turn evaluates operand continuation applies value operator value operand current continuation 
fits nicely definition gamma type ff fi type ff fi ff 
fi type ff type fi operationally pleasant fact tail recursive operand combination 
property furthermore preserved beta reduction 
redex inside scope lambda call value reduction coincides outermost callby name reduction plotkin 
allows simpler implementation standard machines abelson sussman 

retractions 
say ff retract fi write ff fi iff exist lambda definable maps ff fi fi ff ffi identity function ff 
formulate retractions various domains semantics follows 
theorem 
statman ground type ff ff proof define ff 
ff define inverse mapping observe ff form ff ff fl fl ground type 
fl injection retraction fl left inverse define ff ff ff ff ax 
ff ff denote retractions 
note ff denote usual combinator ff apply element type ff fi element type ff get element type fi writing mn 
ffl denote combination call pseudo application 

theorem 
type ff ff ff proof basic types retraction identity 
functional types define ff fi ff fi fi ffi fi ffi ffi ff ff fi ff fi fi ffi fi ffi ffi ff may state main theorem 
main theorem 
closed term type ff 
ff ff 

concrete invariants 
prove theorem need consider terms free variables 
consider elements ff legal representations elements ff constitutes appropriate concrete invariant representation scheme 
type ff need predicate ff elements type ff environment model 
define set predicates ff acceptable iff properties types ff fi fl values type ff hold ff ff ff fi ff jk ff fi fl fi fl ff fl js ff fi ff ffl ff fi ff fi ffl mn fi ffl property says canonical representations images standard combinators legal 
property says legal representations closed pseudo application conventional application homomorphic image pseudo application real application representations behaved sends value continuation 
definition state key result 
theorem 
acceptable predicate 
term environment ae ae holds ffi ae ae 
proof sketch show denotes usual bracket abstraction lambda elimination algorithm 
allows concentrate combination 
theorem follows algebraic manipulation additional induction hypotheses ae ae ae 

existence acceptable predicates 
finish main theorem need show environment model exists acceptable predicate 
prove existence acceptable predicates 
uses induction types second depends strong normalization theorem 

proposition 
define follows oe true ground types 
higher types define ff fi true iff ff holds fi ffl jm jn ffl mn ffl acceptable predicate 
proof definition proceeded induction types 
property definition acceptability follows induction types 
property follows fortiori 

theorem 
smallest predicate containing ix containing js jk type closed ffl 
acceptable 
proof sketch element expressed term built combinations ix js jk ffl 
turn terms rewriting system usual rules show acceptable range quantifiers definition acceptability restricted denotations terms normal form system 
follows usual rules sound applied subterms normal form 
strong normalization theorem term element term normal form restriction quantifiers effect 


shown case typed lambda calculus explain continuation transform retractions depending principle beta conversion 
development goes redefine continuation transformation set mn mn operand evaluated operator allow algorithm choose nondeterministically 
case need ensure versions satisfy concrete invariant 
case call name transformation plotkin treated methods 
situation complicated study calculi strong normalization fails typed calculus fixed point operators 
currently studying untyped case clear writing approach extends cases 
retractions interest add dimension understanding 

abelson sussman abelson sussman structure interpretation computer programs mit press cambridge ma 
hoare hoare proving correctness data representations acta informatica 
meyer meyer model lambda calculus 
information control 
plotkin plotkin call name call value calculus theoret 
comp 
sci 

reynolds reynolds relation direct continuation semantics proc 
nd colloq 
automata languages programming saarbrucken springer lecture notes computer science vol 
berlin springer 
sethi tang sethi tang constructing call value continuation semantics acm 
stoy stoy congruence programming language definitions theoret 
comp 
sci 

strachey wadsworth strachey wadsworth continuations mathematical semantics handling full jumps oxford university computing laboratory technical monograph prg january 
wand wand types sets semantics milner style polymorphism conf 
rec 
th acm symp 
principles programming languages 
