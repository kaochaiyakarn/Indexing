proceedings ieee workshop vlsi signal sakai japan pp 
compiled simulation programmable dsp architectures steven tjiang heinrich meyr aachen university synopsys aachen university technology germany usa technology germany presents technique simulating processors principle compiled simulation 
existing commercially available instruction set simulators dsps interpretive character proposed technique performs instruction decoding simulation scheduling compile time 
technique offers orders magnitude faster simulation 
high speed allows user explore algorithms hardware software trade offs hardware implementation 
user tailor compiled simulation trade speed accuracy 
sources speedup limitations technique analyzed realization simulation compiler 
designers today dsp systems digital cellular phones multimedia systems face increasing complexity quickly changing system requirements 
deal challenges designers increasingly turned programmable architectures incorporating microprocessors basis dsp systems 
flexibility inherent architectures allows designers accommodate late design changes fix bugs shipping systems 
flexibility promises shorter design time decreasing time market 
past programmable processors played peripheral role performed control interface functions asics provided key dsp functions 
today advent higher performance digital signal processors play larger role providing key dsp functions control interfacing asics role accelerators 
correspondingly amount complexity dsp software increased 
exacerbated problems partitioning system hardware software portions interfacing portions 
currently problems receiving intense interest researchers hardware software design 
hardware software partitioning algorithmic architectural implications 
explore different partitionings designer needs estimates software capabilities performance 
unfortunately estimates traditionally available running software hardware prototype 
alternatively designer obtain estimates running software simulator processor simulator hardware portions hardware software simulation 
exploring software implementations dsp algorithms implementations statistical behavior requires hours days today processor simulators 
example illustrates importance high speed processor simulation 
example arises development adpcm speech transcoders digital european cordless telecommunications digital circuit multiplication equipment applications shelf dsp processor 
line verification software implementation millions instructions standard set ccitt itu test sequences seconds speech signals target processor takes seconds 
verification instruction set simulator provided dsp chip vendor takes approximately hours mips machine sparc 
unfortunately complete statistical analysis algorithm required estimate signal noise ratio snr bit error rate ber word length dependent accuracy require far seconds real time signals 
designs verified statistical methods state art processor simulators prove inadequate 
designer prototype hardware emulation 
prospects increase costs development time enormously 
refer processor simulated target processor 
advantages compiled simulation presents compiled simulation approach processors fast practical exploration algorithms hardware software partitionings 
fast verifying asics interact closely software 
observed orders magnitude improvement speed standard interpretive simulators examples 
typical speedups orders magnitude 
compiled simulator different kinds simulation 
write behavioral hardware models attach subroutine calls compiled simulator behavioral simulation 
embed simulator high level algorithmic simulation environments spw 
combination lets verify algorithms exact arithmetic properties target processor bit true simulation 
simulator compiler insert code mimic instruction pipelines 
estimate number clock cycles software require real time events clock true simulation 
connect compiled simulator vhdl verilog simulator verify hardware interfaces directly simulated processor pins 
simulator compiler achieves inserting code communicates pin updates hardware simulator pin accurate simulation 
compiled simulation limit debugging 
approach provides links compiled code original source program code 
links allow standard language debugger gdb dbx target program 
designers debug code just vendor supplied interpretive simulator 
previous processor simulators instruction set simulators supplied shelf house dsp processor 
enable comfortable debugging controlled program execution provide visibility processor resources necessary code development 
currently available instruction set simulators interpretive simulation technique 
main disadvantages low simulation speed inability extended user 
instruction set simulators standard components hw sw processor compiler design environments 
speed simulators ranges depending character processor model simulation technique applied accuracy level provided 
compiled simulation technique simulator known simulation hardware circuits 
follow general idea apply simulation instruction set architecture 
approach resembles binary translation migrating executables machine collecting run time statistics 
clock bit true translation debugging objectives binary translation 
prototype simulation compiler commercial dsp processor reported 
realization portable compiler target back adapted generate bit true code code dsp target 
simulation compiler predecessor 
compiled simulation programmable architectures interpretive simulators process instructions software model target processor 
virtual processor built data structure representing state processor program changes processor state stimuli new instruction pointed program sequencer external events interrupts 
general interpretive simulators summarized loop instructions fetched decoded executed big switch statement run fetch pc insn decode switch insn add break 
approach translates target instruction directly host instructions 
example target instructions add mov mem mul interpreted simulation loop iterates instruction 
compiled simulation approach translates target instructions host instructions represented macros add saturate pc mov memory pc mul saturate pc translation completely eliminates fetch decode steps loop overheads interpretation resulting faster simulation 
target processors complex instruction decode step account significant amount time 
additional speedup created generates code tailored required accuracy level interpreter provides fixed level accuracy 
example interrupts required compiled simulation suppresses simulation interrupt logic 
large programs speed compiled simulation degraded low locality 
situation interpreter perform better 
dsp programs typically exhibit high locality result generated simulation program 
program memory dsp processors especially fixed point ones small compared typical host machine cache sizes 
measurements show difference simulation speed small large dsp programs 
detailed analysis done 
compiled simulation assumes code change run time 
self modifying programs force hybrid interpretive compiled scheme 
fortunately self modifying programs rare 
isolated cases dsp programming encountered far limited programs change target address branch instructions 
type self modifying code easily handled interpreting 
binary binary translation process organized ways 
direct approach translates target binary host binary directly fig 

guarantees fast translation simulation times translator complex portable hosts 
simplify translator improve portability split translation process parts compile target code program written high level language front processing compile program host code back processing fig 

way take advantage existing compiler simulation compiler simulation compiler target binary program host binary target binary host binary approaches binary binary translation 
compilers host reduce realization simulation compiler building front 
portability greatly improved possible loss simulation speed 
features machine code difficult represent high level language 
example absence sophisticated analysis compiled simulation assume instruction target indirect branch statement 
compiled instruction label computed goto switch statements simulate indirect branching 
labels reduce effectiveness compiler optimizations 
shall see dsp architectures indirect branches main problem compiled simulation 
compiled simulation pipelines simulate pipelines code clock cycle partitioned describe action pipeline stage 
gives generated output straight line code fragment translated pipeline stages id ex 
instructions interrupt id ex add sub mov pm add sub id mov ex mul add sub pm mul add id sub ex test mul add pm test mul id add ex lda test mul pm lda test id mul ex combining sub instructions 
tial execution standard branches delayed branches hardware loops complications compiled simulation pipelines 
standard branches introduce pipeline stalls 
detecting branch new fetches suppressed pipeline empty 
starting instruction branch target pipeline filled 
shows example pipeline cycle conditional branch 
pm bra sub id mov ex bra id sub ex bra ex pm mul test mul id lda test id mul ex pm cmp test cmp id add test id cmp ex sub add id test ex cycle id ex bra sub mov bra sub bra mul test mul lda test mul cmp test cmp add test cmp sub add test add id sub ex add ex simulation standard branches gives ordering sub instructions produced simulation compiler 
schedule instructions branch instruction compile time instructions target branch 
suppose branch target statically scheduled sequentially preceding instructions 
shows sub instructions dashed box 
sub instructions executed branch target reached sequential execution 
executed branch target reached taken branch 
preserve behavior simulator add extra code conditionally suppresses sub instructions 
indirect branches introduce overhead 
instruction target indirect branch include suppression mechanism instruction 
estimate overhead introduced conditional suppression low 
processor flushes pipeline completely encountering branch branch taken 
processors increase pipeline utilization delayed branches flush pipeline 
stage pipeline gamma instructions processed branch taken 
branch taken execution continues nth instruction branch 
branch taken execution continues instruction branch target 
fig 
shows example delayed branch operation 
depending instruction branch target reached overlapped instructions sequentially precede gamma instructions branch 
delayed branch indirect branch translate branch target sequences 
sequence overlaps instructions branch target instructions delayed branch 
translate delayed branch jump sequence 
sequence overlaps instructions branch target sequential execution 
indirect branching causes problems 
delayed branch indirect branch cmp test cmp add test cmp cycle id ex brc sub mov mul brc sub test mul brc test mul test add div add sub div add mov sub brc mul test add div sub cmp test add branch taken branch taken branch taken branch taken delayed branches choice revert interpretation 
order simulate hardware loops simulation compiler need resort interpretation 
instructions loop body instructions loop label known compile time 
way ordering cycle code done way standard branches 
pipelined architectures introduces additional overhead 
pipelines completely flushed branch taken simulation compiler resort interpretive operation tms 
cases pipeline operation modeled including additional code suppresses sub instructions 
clearly reason overhead indirect jumps 
complete branch prediction overhead avoided 
realization simulation compiler results simulation environment ss xx implemented analog devices adsp xx family dsp processors 
consists simulation compiler ssc host compiler gcc source level debugger dbx 
enables cycle bit true behavioral simulation processor comfortable debugging environment 
ssc simulation compiler form pass translator translation speed target sun mb 
translating program memory adsp intermediate representation takes seconds 
enable additional tradeoff recompilation execution speed simulation compiler translate target instructions intermediate code macros function calls 
compiling intermediate code host executable takes translation time 
version function calls compilation speed gcc compiler optimization target target 
compilation takes minutes 
macros compilation speed slows times compared function call version 
time speedup execution time 
current concentrating speeding compilation recompiling parts target binary changed 
table presents real life examples ss xx performance 
simulation speed measured depends complexity instructions target code 
fir filter example generated compiler target generates compound instructions rarely 
adpcm example hand coded optimally uses complex compound instructions frequently 
results table show simulator example simulator optimization speedup fir filter adsp xx ss xx run time dec ti ss ss adpcm adsp xx ss xx host sun mb ss xx flags compiler gcc preliminary table simulation examples measurement results 
outperforms standard simulator orders magnitude fir example times adpcm example 
verification took hours standard adsp xx simulator reduced minutes 
adsp xx visible pipeline 
order prove concepts architectures pipeline effects written compiled simulation examples ti tms nec pd processors 
despite overhead introduced pipeline modeling results table show approach achieves significant speedup 
simulator offers full debugging support standard level debugger dbx gdb 
offers breakpoint setting watching registers memory flags stack pins 
large advantage compared standard dsp debuggers highly target dependent 
order enable control external events occur parallel code execution simulation compiler able generate cycle hooks executed clock cycle 
user easily insert hooks simple labels assembly code target 
hw sw simulation simulator simulation hardware software components 
designers frequently early stage design process create software prototype design 
stage designers explore implementation options functions shifted hardware 
supports exploration attaches easily behavioral models hardware 
behavioral models serve starting point hardware design 
simulation useful behavioral models refined hardware rendered hardware description language hdl vhdl verilog net list 
verify hardware components attaching hdl simulator logic simulator 
connected behavioral models hardware components shown 
example shows converter glue logic attached dsp processor 
communication software irq oe oc inverter gal adr dec timer ad adc adsp latch analog st conv behavioral model hardware cycle hooks hw sw simulation 
hardware mediated cycle hooks 
hooks pass control hardware model written hooks accept data hardware models 
hardware models written hooks simple calls 
models written hdl hooks complicated 
synchronize hdl simulator convert data values communicating hdl simulator 
research compiled simulation provides fast accurate instruction set simulation 
simulation environment generates bit cycle pin accurate dsp processor simulation engines orders magnitude faster interpretive simulators 
standard source level debuggers offer comfortable debugging environment intermediate representation open extensions designer 
compiled simulator easily interfaced behavioral hardware models 
addition fast simulation offers comfortable debugging environment hardware software debugged debugger 
currently recompilations design changes relatively slow 
recompilation take additional time relative interpretation believe reduce time tolerable level limiting recompilation code changed 
interpreter hybrid addition alleviating problems indirect branches provide fast simulation speed fast turn time design changes 
investigating key problem areas interfacing hardware simulators accurate need model processor pin interface compiled simulator automatically insert hooks communicate hardware 
behavioral models idealized processor interface small set pins data address interrupt request lines detailed handshaking signals 
detailed hardware models may advantageous detailed processor interface simulates pins accurately 
investigating attachment commercially available processor interface models 
connected hardware models 
limit include simulation entire system 
continue investigate possibilities 
lee hardware software codesign methodology dsp applications ieee design test computers pp 
sept 
hardware software simulation st acm ieee design automation conference 
insulin instruction set simulation environment proc 
ottawa canada pp 

ghosh hardware software simulator embedded system design debugging tech 
rep mitsubishi electric research laboratories 
hss high speed simulator ieee trans 
cad vol 
cad pp 
july 

sites binary translation comm 
acm vol 
pp 
feb 
davidson whalley design environment addressing architecture compiler interactions microprocessors microsystems vol 
pp 
nov 
mart simulation compiler gnu dsp tech 
rep ib iss aachen university technology jan 
