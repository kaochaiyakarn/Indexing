execution monitoring high level temporal programs 
mikhail soutchanski cognitive robotics group department computer science university toronto www cs toronto edu mes papers ijcai mes cs toronto edu propose domain independent execution monitoring technique class restartable logic temporal programs 
execution temporal program interleaved monitoring 
remaining part program execution trace current time time plan satisfying temporal constraints generated remaining program monitor backtracks possible previous computation state restartable program new plan appropriate schedule constructed 
provide declarative framework implementation mobile robot 
large body research reasoning actions planning high level control robots broadly described dichotomies 
place appropriate category characterize follows 
plans sequences actions generated high level programs written human mind set suitable plans 
plans performed dynamic environment evolves unknown rules 
planning execution interleaved appropriately 
programs include explicit sensing actions sensing performed monitor execution program get feedback 
consider high level logic programming language golog modification single step interpreter language interpreter incrementally derive appropriate continuation plan side effect solving logical entailment task certain sequence primitive actions executed actions remaining part plan scheduled temporal constraints program initial data :10.1.1.22.558
interpreter coupled monitor senses exogenous actions provides corrections necessary 
particular monitor may sense current time backtrack previous computation state try alternative branch restartable program schedule actions remaining branch program executed 
main idea proposal follows 
primitive action selected execution interpreter 
reality unexpected exogenous actions may delay completion previous agent action 
reason performing action scheduled time agent senses real time agent waits performs alternative solution system temporal constraints allowing remainder program successfully rescheduled execution monitor rest program particular assigns new execution time action waiting time necessary performs time alternative schedule late perform action subsequent actions deadline case original plan deduced program failed 
plan includes action selected possible alternatives nondeterministic choice branch possible action scheduled moment schedule remaining actions follow execution monitor abandons actions follow favor subsequent actions 
case say monitor recovers failure skipping actions backtracking previous computation state restartable program alternative branch attempted reversing physically actions preceded 
loop interpreting program sensing monitoring executing repeats program completes successfully fails 
real life example problems outlined consider program mobile robot non deterministic choice tasks robot accomplish office environment clean lab deliver coffee give tour 
robot delayed corridor missed deadline coffee delivery request mean program failed robot execute remaining tasks possible 
section briefly review formal background give motivating examples 
section give logical specifications program interpreting execution monitoring formulate definition restartable programs correctness property recovery procedure 
application consider mobile robotics 
declarative framework developed supported implementation robot manufactured rwi 
able concentrate cognitive level issues software provides stable low level control reliable interface high level 
situation calculus golog want robot maintain logical mental model world performs actions real world 
mental model useful example replanning program controlling robot encounters unexpected circumstances 
assume robot deliberate circumstances reactive procedure may help solve problem 
informally assume robot deliberate moving friend house path clear start re plan finds unexpectedly friend home 
usefulness models mobile robotics discussed look expressive studied knowledge representation framework modeling processes called situation calculus 
situation calculus predicate logic language representing reasoning actions properties dynamically changing worlds 
employed model continuous processes physical systems provide foundations logic language golog version situation calculus described 
go language note basic components 
changes world result named actions 
sequence actions history represented term called situation 
constant denote initial situation empty history 
non empty histories constructed distinguished binary function symbol ff denotes successor situation resulting performing action denoted term ff 
important emphasize situation represents sequence actions plan feature situation calculus allows construct plans theorem proving special predicate oss ff state action ff possible situation relations truth values vary situation situation called relational fluents 
denoted predicate symbols situation term argument 
similarly functions values vary situation situation called functional fluents denoted function symbols situation term argument 
terms control theory decision theory fluents state variables influenced sequence control actions sequence decisions respectively performed far 
axiomatize primitive actions fluents domain application provide axioms 
axioms describing initial situation true initially actions occurred 
finite set sentences mention situation term situation independent 

action precondition axioms primitive action 
characterize oss conditions possible execute action situation 
successor state axioms fluent stating conditions value determined function holds previous situation characterize effects actions provide solution frame problem reiter addition set foundational domain independent axioms characterizes situations tree rooted axiomatization may include set domain specific axioms characterizing situation independent predicates functions 
set domain specific situation calculus axioms employed derive plans explained 
version situation calculus described explicit time variables 
intended consider temporal plans need elaborated version temporal situation calculus 
sequential temporal situation calculus consider instantaneous actions 
introduce time dimension situation calculus follow proposal add new temporal argument instantaneous actions denoting actual time action occurs 
bounce ball wall instantaneous action ball bouncing wall time 
second introduce function symbol time time denotes time occurrence action means application involving particular action shall need axiom telling time action time example time function start start denotes start time situation requires axiom start time start time arbitrary depends application 
foundational axioms sequential situation calculus accommodates time proposed considered reader may imagine temporal variables range reals total strict order defined 
provide axioms reals integers rely standard interpretation reals operations addition multiplication relations 
detailed example axiomatization sequential temporal situation calculus provided example coffee delivery robot robot schedule preferred coffee periods employee information times required travel various locations office 
robot carry just cup coffee time coffee machine gets coffee 
task schedule coffee deliveries possible gets coffee preferred time periods 
simplify axiomatization actions picking cup coffee giving instantaneous 
action going location intuitively duration represented pair instantaneous startgo endgo actions 
golog procedures cm constant denotes coffee machine location sue mary bill joe constants denote people appear upper case 
durational action represented corresponding pair instantaneous actions 
subsequent sections motivate execution monitoring technique consider temporal golog programs example 
self contained axioms included appendix 
golog planning planning known computationally intractable general impractical deriving complex behaviors involving hundreds possibly thousands actions applications characterized hundreds different fluents 
reason cognitive robotics group university toronto examines computer science approach reduce reliance planning eliciting interesting robot behaviors provide robot programs written suitable highlevel language case golog 
extended golog logic programming language primitive actions background domain theory assumed golog programmer certain intuitions domain able write program ffi binding existentially quantified variable obtained side effect establishing entailment ffi constitutes suitable plan ffi logical formula saying situation reached situation executing sequence actions specified ffi formal definition ffi appendix :10.1.1.22.558
golog includes constructs oe 
test truth value situation calculus formula oe ffi ffi sequence programs ffi ffi nondeterministic choice programs ffi nondeterministic choice argument program ffi constructs loops conditionals recursive procedures see details 
contrast original approach planning theorem proving programmer may golog constructs write program constrains search desirable plan golog program deterministic search required find binding existentially quantified variable 
example shows truth value oe computed domain axioms 
example task determining test true preconditions action hold current situation accomplished regression reduces recursively aforementioned task theorem proving task respect predicate logic theory incomplete describes initial situation consider fluent person golog program startgo cm office sue endgo cm office sue begins initial situation robot located near coffee machine coffee see axioms appendix 
golog programs fluents occur situational argument see appendix hint detailed explanation situational argument fluent uniquely restored 
feature golog surprising programming languages operators mention computation state explicitly 
evaluate test situation results doing startgo endgo consider successor state axiom determines truth value fluent person 
effect executed actions fluent value persists initial situation 
axioms characterizing initial situation determine test evaluates true 
important understand example tests distinguished sensing sensing measures values fluents external world tests evaluated respect domain axioms values fluents axioms constitute internal mental model agent 
example reproduce simple golog procedures demonstrate golog notation 
procedure commands robot go current position denoted functional fluent location loc time second commands robot go location loc loc time delta time units includes sequence startgo endgo 
proc goto loc loc ime loc proc loc loc delta loc loc delta 
loc loc delta 
startgo loc loc endgo loc loc delta examples new 
example example demonstrates backtracking nondeterministic choice sub programs allows modification plan fail 
program visit introduces functional fluent identical fluent start 
start certain mnemonic value start denotes time action occurred 
initial situation start see appendix robot located near coffee machine cm travel time sue units bill units 
proc visit goto office mary goto cm goto office sue goto cm goto office bill 
robot starts execute visit initial situation 
visit mary return back coffee machine travel time mary units go office sue return back coffee machine start going office bill 
robot reaches offices value time 
robot select left branch non deterministic choice decides go sue 
plan go mary come back cm go sue correct robot supposed arrive office sue 
assume robot delayed people walking going back cm arrive late start going sue 
moment robot change original plan backtracking non deterministic choice selecting branch go office bill 
plan modification require extra physical actions undoing actions performed 
plan modified way executed successfully robot reach bill 
example example demonstrates backtracking nondeterministic choice argument program allows modify plan fail 
assume current time robot just gave coffee joe located office 
robot construct execute plan specified golog procedure visit 
visit robot select person coffee wants coffee interval go cm pickup coffee expected travel time joe cm 
robot go office selected person arrive time time arrival proc visit 
goto cm goto office 
robot select bill wants coffee 
plan go coffee machine pick coffee go office bill arrive correct travel time cm bill 
imagine robot significantly delayed moving office joe cm moment robot arrived time units 
moment late start going bill best robot arrive office greater 
monitor backtracks top level non deterministic choice selects mary wants coffee bill robot execute modified plan specified visit pickup coffee start go mary arrive office time travel time office mary equals 
operational semantics temporal golog associate programs transition semantics semantics single steps program execution :10.1.1.22.558
configuration pair consisting program state part original program left perform situation 
specification semantics terms predicates trans final see appendix details :10.1.1.22.558
program ffi situation trans ffi ffi tells possible step computation returning resulting situation program ffi remains executed 
words trans ffi ffi denotes transition relation configurations 
final ffi tells configuration ffi considered final note moment cm goto cm equivalent empty sequence actions example 
computation completed program remains executed 
relation ffi defined means trans reflexive transitive closure trans final specifies interpreter golog programs mention time explicitly ffi ffi trans ffi ffi final ffi straight forward implementation specification means incremental interpreter suggested case golog programs sensing actions incremental interpreter remarkably simple 
terminating program ffi situation interpreter determines configuration ffi final 
current corresponds sought plan transition trans ffi ffi ffi configuration 
computation continues incrementally interpreter arrives final configuration fails final configuration achieved 
axioms trans final follows golog program fl step computation interpreter selects primitive action execution test condition evaluation program terminates fails 
operational semantics regular golog include time surprisingly easy modify semantics interpreter accommodate time 
need change axiom rans primitive actions trans ffi poss ffi nil trans ffi poss ffi nil start time take account programs may fail need trans fail ffi false final fail true trans final remains 
interpretation temporal golog programs transition primitive action determines inequality start time saying may occur situation start time execution temporal program may terminate set temporal inequalities set domain specific temporal constraints solution 
substitution existentially quantified variable obtained side effect establishing entailment ffi specifies unique temporal plan solution unique 
constructive proof determines situation term uniquely determine occurrence times actions general case consistent set temporal constraints may infinitely solutions 
reason obtain situation term want find executable plan need additional relation schedule 
relation true set temporal inequalities determined sequence actions leading solution call schedule schedule actions occur early possible 
execution monitoring temporal golog programs examples provide motivation need general framework execution monitoring 
show certain actions significantly monitor may backtrack old choice points program try alternative branches 
section elaborate framework developed committing particular details monitor introduce notions trace backtracking expand framework accordingly 
describe new specific monitor forms basis section 
general framework far considered generation plans golog programs 
particular seen sequence actions incrementally generated interpreter transition semantics 
simple environments guarantee truth values relational fluents values functional fluents correspond values real world agents perform actions independently robot actions may change real values fluents 
behavior agents unpredictable modeled advance feedback external world help account unpredictable effects obtain desirable behavior 
imagine stage planning interpreter selected primitive action execution test condition evaluation high level control module robot compares reality internal representation values fluents successor state axioms robot notice relevant discrepancies executes action reality evaluates test respectively high level control module called monitor attempts recover unexpected discrepancies proceeds remaining part program fails 
processes interpreting execution monitoring continues program reaches final configuration fails 
convenient imagine discrepancies robot mental world reality result sensory actions exogenous respect internal mental model robot observes actions 
want characterize processes interpreting execution monitoring declarative framework 
sequel need notion trace sequence program states 
constant denote empty trace functional symbol trace ffi denote new trace composed program state ffi previous trace ffi trace ffi trace ffi trace ffi oe ffi ffi remainder program long computationally advantageous recover discrepancies remaining program throw away plan scratch 
words modeling purposes away loss generality definition exogenous respect robot mind sensory actions obtained 
closed loop system interpreter execution monitor characterized formally new predicate symbol ffi ffi describing step transition consisting single rans step program interpretation followed process called monitor execution monitoring 
role execution monitor get new sensory input form exogenous action necessary generate program counter balance perceived discrepancy 
result system passes ffi ffi specified follows ffi ffi ffi rans ffi ffi trace ffi monitor ffi ffi cautious version avoids branches ffi fail ffi ffi ffi rans ffi ffi trace ffi ffi monitor ffi ffi possible configurations reached execution monitoring program ffi trace obtained repeatedly transitions reflexive transitive closure ffi ffi ffi ffi final ffi exogenous event simple primitive action complex arbitrary golog program 
holds situation resulting doing informally takes account influence external real world 
behavior generic monitor specified monitor ffi ffi relevant ffi ffi ffi relevant ffi recover ffi ffi relevant ffi predicate specifies discrepancy relevant current configuration program 
discrepancy matter relevant ffi execution monitor modify program ffi ffi addition transition test monitor keeps trace primitive action monitor runs action situation execution results new situation keeps trace 
discrepancy matter relevant ffi monitor recover 
predicate recover ffi ffi provides determining possibly ffi new program ffi possibly backtracking execution situation intended ffi system cautious avoid dead ends system transition configuration terminate goal situation see achieve outcome equivalent sense left open moment program ffi exogenous event occurred ffi executed wide range monitors achieved defining relevant recover different ways 
example corrective plans suggested domain independent recovery technique ability simple kind planner recover malicious exogenous actions illustrated blocks world example 
important case motivated examples section new program ffi determined backtracking previous program state achieved trace keeps program states interpreter passed far 
case ffi trace ffi trace 
give suitable definition recover assume program ffi form ffi goal goal situation calculus formula specifying important post condition plan satisfy 
ffi equivalent ffi termination ffi post condition goal true final situation 
section accommodate framework case temporal golog programs 
develop simple realization elaborating particular predicates relevant recover 
specific monitor simplify subsequent presentation consider primitive exogenous action watching clock 
high level control module sense external world real time 
axiomatize exogenous action oss watch time watch note axiom primitive action ffi selected execution test evaluated 
tests temporal arguments consider exogenous action watch need monitor evaluation tests 
note axiom modified case temporal golog programs add predicate schedule mentioned section schedule uniquely primitive action selected tentatively execution 
axiom transformed follows ffi ffi ffi rans ffi ffi trace ffi ffi ffi ffi schedule monitor ffi ffi transform axiom appropriate form emphasize information sensors influences low level software collision avoidance program accessible cognitive level 
trans oe nil oe holds transitions tests change situation argument see details :10.1.1.22.558
corresponds monitoring primitive actions monitor ffi ffi watch relevant ffi ffi ffi relevant ffi recover ffi ffi note sensed time may relevant respect execution ffi action time start action delay relevant rescheduled time argument action replaced new time value actions executed past 
action sufficient wait time action scheduled originally action reality 
formally relation specified follows time start ait relation true iff occurrences replaced result substitution occurrences relation true relation ait true iff current clock time system waits gamma units time current clock time difference real time start scheduled time time relevant iff time start action execution rescheduled sequence ffi leads situation postcondition ffi true relevant ffi ffi time start ffi ffi ffi predicate recover ffi ffi defined recover ffi ffi ffi time start trace ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi recover ffi ffi ffi fail non empty trace program state ffi trace ffi ffi rescheduled program ffi terminates goal situation ffi true monitor skips subsequent actions resumes execution program state ffi situation second disjunctive case ffi true appropriately rescheduled action case monitor executes skips subsequent actions resumes execution program state ffi situation 
recursively may happen recover ffi ffi true 
trace empty program ffi recovered ffi fail monitor terminates execution 
formulate correctness property recovery procedure need definition 
program ffi started originally situation postcondition goal 
restartable configuration ffi delay shorter rans ffi ffi ffi goal watch time start oe ffi goal example consider golog program example commands robot go joe office time consider situation results endgo office joe cm situation startgo office joe cm program restartable situation program ffi goto office bill remained performed delay time units 
start moment time start late go mary travel time mary cm robot arrive office note people selected real time 
ffi golog program restartable configuration ffi delay shorter goal situation calculus formula expressing post condition initial situation initial trace trace leading ffi ffi assume ffi ffi 
recovery procedure backtracking correct sense ffi ffi start watch time relevant ffi oe ffi recover ffi ffi ffi goal result proved induction trace 
simple cases golog program ffi restartable ffi syntactic form ffi fl fl ffi fl step execution alternative branches rest branch skipped necessary ffi started anew 
cases program post condition flexible goal express requirement deliver coffee people possible requirement deliver coffee people strictly preferred times 
turns goals type accomplish possible conveniently expressed concepts decision theory 
section introduce required fluents predicates applied coffee delivery example 
preferences utilities 
convenient view robots economic agents seek behavior maximizing utility cost 
point view supported numerous examples animals behavior 
ai different ways representing utilities see propose represent situation calculus fluents axiomatize accumulation rewards means appropriate successor state axiom 
shall see main advantage approach reward functions process oriented problems serving requests complex behaviors formulated additional representational overhead 
represent preferences decision maker application domain fluent ref situation preferable situation situations respect coincides successor state axiom fluent characterizes preferences decision maker change situations axiom depends particular application 
want consider preference relation irreflexive anti symmetric require successor state axioms satisfy set constraints ref oe ref ref ref oe ordering relation means action sequence contains sequence prefix axioms relation included set foundational axioms 
fluent ref characterizes preferences purely qualitative manner 
application express preferences utility fluent til holds situation evaluated means number axiomatize real rational numbers rely standard interpretation reals operations relations 
successor state axiom tells utility fluent change til person person til person person gamma gamma gamma til person person utility fluent intended represent cumulative reward gained certain behavior costs associated executions certain actions 
case example utility remains robot executed action different new value utility sum utility previous situation reward doing action person time note maximal value gamma axioms conjunction axiom say preferences expressed terms utilities ref til max til max max holds maximal value respect set linear temporal inequalities constrain values time variables mentioned situational term section solution entailment task ffi substitution considered appropriate sequence actions 
decision maker preferences different hypothetical plans compared best plan solves planning problem 
need predicate rans ffi ffi saying configuration ffi best reached configuration ffi doing step computation sequence actions constitutes optimal plan rans ffi ffi rans ffi ffi ffi ref ffi ref convenient framework represent requirement deliver coffee people possible 
introduce predicate goal goal ref goal informally final situation action results better situation utility function robot shall give coffee person time 
test goal 
evaluates true iff utility increases monotonically remains sequence actions leading final situation test evaluated 
sequel consider coffee delivery program fl 
interpreter coupled monitor generate schedule plans modify re schedule plans necessary program ffi fl goal test goal 
expressing post condition appended fl 
second want compute optimal schedules implementation reschedule remaining actions optimal way transform expression characterizing transitions closed loop system configurations 
axiom replaced axiom ffi ffi ffi rans ffi ffi trace ffi ffi ffi monitor ffi ffi definition ffi ffi ffi ffi final ffi reflexive transitive closure defined remains 
section remains force 
obviously situation substitution existentially quantified variable obtained solution entailment task ffi ffi fl goal 
test goal 
specified corresponds optimal plan deliver coffee people possible 
optimal plan computed re computed line account real values time 
implementation robot interpreter monitor control autonomous robot golem perform temporal scheduling tasks office environment 
golem mobile robot manufactured real world interface rwi 
golem equipped laser range finder determines distances surrounding obstacles high accuracy sonar proximity sensors bumpers board computer dual pentium ii mhz processor system mb ram laptop computer installed console pentium mhz processor mb ram computers run linux color camera system mounted pan tilt unit 
laptop computer sound card reproduce voice recordings 
low level software run robot initially developed university carnegie control rhino rwi robot see details 
mention briefly modules run board computer communication manager provides asynchronous communication coordination modules controls physical motion gathers information wheel encoders distance traveled robot plan path planning module computes shortest trajectory current location goal location dynamic programming algorithm auxiliary module determines distances obstacles laser range finder collision avoidance program changes speed direction motion robot sensors detect obstacles ahead program highly reactive dynamically modifies motion robot localize determines probability current location map stream current measurements sensors map office environment built neural networks sensor interpretation program 
important emphasize sensor readings performed aforementioned modules accessible high level control 
execution monitor described section uses unix internal clock sole sensor input 
limitation current experimental version limitation general framework 
interpreter temporal golog transitional semantics execution monitor implemented eclipse prolog 
ecrc common logic programming system eclipse provides built simplex algorithm solving linear equations inequalities reals 
provides built predicate rmax maximizes value variable may respect current set temporal constraints 
relations monitor relevant recover lead natural implementation prolog execution monitor arbitrary restartable temporal golog programs 
implementation trans interpreter prolog lifted directly final trans introduced trans interpreter requires domain specific action precondition successor state axioms axioms initial situation expressible prolog clauses :10.1.1.22.558
implementation inherits prolog closed world assumption limitation implementation general theory 
important advantage situation calculus specifications see appendix sound prolog implementation axioms programmed directly axioms 
locations offices map park coffee machine yves ray lounge prolog code run eclipse prolog laptop computer communicates low level software software package hli provides high level interface modules implementation hli relies prolog interface eclipse 
particular execute primitive action startgo call predicate hli go path prolog golem simply says reached destination execute action endgo 
implementation hli go path hli ensures robot successfully reach destination sending commands low level programs experiments run program 
proc goto cm cm proc wait wait wait ime cm cm office proc loc wait wait wait ime office 
goto office wait experiments data lounge ray ves robot travel times ime cm office ves ime cm office ray ime cm office lounge ime park cm ime office ves office ray ime office ray office lounge run program ffi goal 
line solve entailment problem ffi find substitution find optimal plan utility 
optimal plan robot deliver coffee ves ray lounge 
note procedure restartable computation state robot arrived near office gives coffee 
demonstrate recovery procedure works intended experiment 
robot moving coffee machine location map office ves location map intentionally delayed robot 
result arrived supposed arrive schedule 
time robot executed sequence actions endgo office ves ves utility decrease consequence postcondition goal 
false 
predicate relevant detects potential violation line simulation remaining program predicate definition relevant evaluates false line execution ffi fails 
monitor attempts recover failure optimal plan 
predicate recover backtracks recursively past computation state new optimal plan computed state top non deterministic choice person coffee delivered see procedure 
observed robot executed action endgo office ves waiting started move office yves office ray giving coffee yves robot holds coffee goes straight ray picking coffee 
set experiments seen closed loop system incremental interpreter coupled monitor behaved exactly intended 
discussion notion restartable plan formulated notion restartable program follow common intuitions 
execution monitoring recovery technique called purely inserted recovery plans proposed precursor circa 
question technique backtracking technique combined flexible recovery method remains open research question 
dynamic programming approaches execution monitoring give opportunity improve monitoring strategies 
case monitoring pace determined times primitive actions selected execution action occurrences monitor attempt estimate current branch high level program complete deadline 
monitoring tasks deadlines considered sequential decision problem available dynamic programming method constructing decision rule monitoring 
authors consider recovery technique decision abandon monitored task deadline 
provide logical specifications line program executions monitoring formulated version sequential situation calculus includes time account relies specification single step interpreter logic programming language golog main contributions adapts interpreter temporal domain expands framework developed introducing trace backtracking process line monitoring golog programs develops particular execution monitor case high level control module gets temporal information sole sensory input external world :10.1.1.22.558
formal point view develop predicate logic framework rescheduling modification temporal plans 
robotics point view develop general architecture suitable monitoring execution restartable situation calculus programs written golog 
set experiments real mobile robot golem manufactured rwi demonstrated usefulness architecture 
beetz mcdermott 
local planning ongoing activities 
editor proceedings rd international conference artificial intelligence planning systems aips pages 
aaai press 
boutilier dean hanks 
decision theoretic planning structural assumptions computational leverage 
appear journal ai research jair 
electronic version available www cs ubc ca spider papers html 
burgard cremers fox lakemeyer schulz steiner thrun 
interactive museum tour guide robot 
proc 
th national conference artificial intelligence aaai madison wisconsin 
de giacomo lesperance levesque :10.1.1.22.558
reasoning concurrent executions prioritized interrupts exogenous actions situation calculus 
th international joint conference artificial intelligence ijcai volume pages nagoya japan 
de giacomo levesque 
incremental interpreter high level programs sensing 
cognitive robotics working notes aaai fall symposium pages orlando florida usa 
de giacomo reiter soutchanski 
execution monitoring high level robot programs 
principles knowledge representation reasoning proc 
th international conference kr pages italy 
green 
theorem proving resolution basis question answering systems 
meltzer michie editors machine intelligence volume pages 

ein ur die golog zur des rhino 
diplomarbeit der universitat bonn 
available titan informatik uni bonn de 
burgard lakemeyer 
bridging gap logic golog real robot 
proc 
nd german conf 
ai ki bremen germany 
hansen cohen 
learning decision rule monitoring tasks deadlines 
technical report dept computer science un 
massachusetts amherst 
ftp cs umass edu pub tech reports ps 
levesque pirri reiter 
foundations situation calculus 
link oping electronic articles computer information science 
available www ep liu se ea cis vol 

levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains 
logic programming 
mcfarland 
intelligent behavior animals robots 
bradford book mit press 
musliner durfee shin 
execution monitoring recovery planning time 
proc 
conf 
artificial intelligence applications 
available www cs umd edu users musliner 
reiter 
knowledge action logical foundations describing implementing dynamical systems 
draft chapters book 
available www cs toronto edu 
reiter 
sequential temporal golog 
principles knowledge representation reasoning proc 
th international conference kr pages trento italy available www cs toronto edu 
thrun 
know know role models mobile robotics 
ai magazine 
appendix self contained appendix incorporates axiomatization coffee delivery example temporal situation calculus 
primitive actions ffl 
robot picks cup coffee coffee machine time ffl person 
robot gives cup coffee person time ffl startgo loc loc 
robot starts go location loc loc time ffl endgo loc loc 
robot ends process going location loc loc time fluents ffl 
functional fluent denoting robot location situation ffl going loc loc 
relational fluent means situation robot going loc loc ffl person 
person coffee ffl 
relational fluent means situation robot holding cup coffee 
situation independent predicates functions ffl person 
person wants receive coffee point time period 
ffl office person 
denotes office person 
ffl loc loc 
denotes amount time robot takes travel loc loc ffl sue mary bill joe constants denoting people cm constant denoting coffee machine location 
primitive action preconditions poss startgo loc loc going loc loc loc poss endgo loc loc going loc loc poss cm poss person office person successor state axioms loc loc endgo loc loc loc loc loc endgo loc loc going startgo going endgo pers pers pers initial situation cm going start 
set unique names axioms stating terms pairwise unequal sue mary bill joe cm office sue office mary office bill office joe 
coffee delivery preferences 
expresses sue joe tuples relation 
sue mary bill joe robot travel times cm office sue cm office mary cm office bill cm office joe action occurrence times time time time startgo time endgo appendix self contained appendix includes axioms trans final proposed predicate trans characterized axioms omit axioms procedures intricate omit axioms define constructs included congolog :10.1.1.22.558

empty program trans nil ffi false 
primitive actions trans ffi poss ffi nil start time 
tests trans oe ffi oe ffi nil 
sequence trans ffi ffi ffi fl trans ffi fl ffi fl ffi final ffi trans ffi ffi 
nondeterministic choice trans ffi ffi ffi trans ffi ffi trans ffi ffi 
pick trans ffi ffi trans ffi ffi 
iteration trans ffi ffi fl trans ffi fl ffi fl ffi assertions characterize configuration ffi evolve single step configuration ffi 
note conditional statements loops defined tests nondeterministic choice iteration 
predicate final characterized axioms 
empty program final nil true 
primitive action final false 
test final oe false 
sequence final ffi ffi final ffi final ffi 
nondeterministic choice final ffi ffi final ffi final ffi 
pick final ffi final ffi 
iteration final ffi true possible configurations reached program ffi starting situation obtained repeatedly transition relation trans starting ffi reflexive transitive closure transition relation 
relation trans defined second order situation calculus formula trans ffi ffi oe ffi ffi stands conjunction universal closure ffi ffi trans ffi ffi ffi ffi oe ffi ffi trans final definition relation ffi ffi trans ffi ffi final ffi relation ffi means terminating situation resulting execution program ffi situation write oe denote term representing situation calculus formula suppressed situational argument oe denote formula restored argument 
assume standard way encoding order situation calculus formulas 
ffi program resulting substituting uniformly ffi 
