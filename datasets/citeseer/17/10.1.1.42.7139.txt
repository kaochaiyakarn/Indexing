final dialgebras categories allegories roland backhouse paul hoogendijk department mathematics computing science eindhoven university technology box mb eindhoven netherlands 
th october revised th april study inductive coinductive types finite lists streams respectively usually conducted framework category theory intents purposes theory sets functions sets 
allegory theory extension category theory due freyd better suited modelling relations sets opposed functions sets 
question arises extend standard categorical results existence final objects categories example coalgebras products existence allegories 
motivation streamline current generic programming relational theory functional theory proved desirable 
define notion relational final dialgebra prove important class dialgebras relational final dialgebra exists allegory final dialgebra exists underlying category maps 
instances subsumed class consider include coalgebras products 
important lemma expresses bisimulations terms proves equivalent aczel mendler categorical definition 
generic programming generic polytypic programs programs parameterised type constructors functions types types list types integer list integer 
currently effort going developing practical applications generic programming underlying theory 
major drawback current state art generic programs typically defined induction structure type constructors 
leads long involved case analyses cases disjoint sum cartesian product inductive types 
example commuting datatypes give short semantic account datatypes commute long case analysis showing datatypes certain class commute definition 
potential benefits generic programming substantially greater lift level abstraction level higher view called regular datatypes instances just construction 
framework doing evident lambek got name dialgebra name shall 
initial exploration dialgebras basic building block generic programs 
philips research laboratories prof aa eindhoven netherlands 
concerned development relational opposed functional theory generic programming 
reason straightforward interested specifications implementations 
programming language theory functions sets play central role particularly called set theoretic semantics 
example number known standard set theoretic results existence initial algebras aczel axiom basically giving set theoretic semantics final coalgebras 
main theorem note existence relational extensions set theoretic functional fixpoints 
formally focus existence final dialgebras allegory existence underlying category maps 
assume familiarity elementary category theory 
unfamiliar allegory theory summarise elements theory need current discussion 
words freyd scedrov allegories binary relations sets categories functions sets 
focus existence relational extensions functional final dialgebras assumption functional final dialgebras exist 
confine discussion particular class dialgebras relevance demonstrated showing includes class algebras coalgebras inductive coinductive types sum product unit type non inductive types 
note assume reader familiar notions initial algebra final coalgebra 
excellent tutorial notions contained 
assume familiarity fixed point calculus 
draws important insights 
class dialgebras confine discussion 
insight inspired lambek discussion 
second hylomorphism theorem see theorem fundamental construction programs called virtual data structures 
results easily initiality finality properties 
chosen focus finality properties reasons 
concepts introduce better known context final algebras particular notion bisimulation 
fact aware applications hylomorphism theorem context final coalgebras 
second results obtain potentially harder prove context final algebras results relational setting straightforward functional setting different nature intersection union 
case results process straightforward 
formal basis section introduce basic definitions notation 
assumed reader familiar elementary category theory fixed point calculus 
notation denote greatest postfix point monotonic function notation arrow target object source object anonymous category 
want specific category say write application functor denoted pre juxtaposition 
functor category category ff fa fb allegory category additional structure additional structure capturing essential characteristics relations 
category means course object identity arrow id pair arrows matching source target composed delta composition associative id unit 
additional axioms include arrows type ordered partial order second intersection meet exists defined universal property third composition monotonic respect ordering 
fourth arrow converse ffi exists 
converse required galois adjoint ffi ffi commute contravariantly composition delta ffi ffi delta ffi easily shown laws converse preserves identities 
state laws assume variables appropriately typed 
word relation means formally arrow allegory 
occasionally interpret laws binary relations sets pairs case adjective binary indicates particular interpretation 
relation said simple delta ffi id total ffi delta id relation simple total said map 
binary relation map total function range domain easily checked maps closed composition identity arrows maps 
maps allegory form category refer underlying map category allegory 
henceforth denote maps lower case letters easily derived rule shunting rule maps relations delta ffi delta maps type property equal iff comparable 
gj allegory said tabulated relation pair maps delta ffi ffi delta ffi delta id binary relations tabulated take set functions project pair left right components respectively 
allegory object said unit id largest relation type object exists total relation requirement follows map 
simplicity requirement delta ffi id follows delta ffi allegory unit ffi delta objects ffi delta greatest relation type allegory unit said unitary 
category object unit object object unique arrow instance general theorems prove object unit sense unit underlying map category 
notion unit allegory natural extension notion unit category 
partial identity relation type id allegory binary relations partial identities represent sets 
pair element partial identity iff partial identity represents subset consisting element associated relation unitary allegory partial identities right domain left domain right domain operator defined universal property 
id ffi delta delta left domain operator defined dually 
binary relations right domain represents set proofs properties domain operators exploit 
relator monotonic functor commutes converse 
identity relator denoted id 
bird de moor prove functor domain tabulated allegory monotonic commutes converse 
context tabulated allegory relator monotonic functor 
property commuting converse important typically easily established recourse properties prefer stick original definition 
final dialgebras category initial algebras final coalgebras known concepts 
notion dialgebra slight generalisation notions 
section give formal definition final dialgebra category show final coalgebras unit type product instances concept 
section defines concept allegory 
definition 
categorical final dialgebras suppose functors type possibly different categories arrow dialgebra fa ga fixed object object call carrier dialgebra ff di homomorphism type dialgebras iff delta gff fff delta note ff type carriers dialgebras respectively 
defining composition homomorphisms composition base category identity homomorphism dialgebra carrier id trivial verify defines category denote 
algebra clearly id dialgebra coalgebra id dialgebra id denotes identity functor anonymous category 
known inductive types identified initial algebras final coalgebras 
reason want generalise dialgebras non inductive types instances initial final dialgebras 
definition final dialgebra standard final object category dialgebras give order introduce notation 
definition arrow ft gt final dialgebra fa ga exists arrow bd ce bd ce oe bd ce unique homomorphism dialgebra dialgebra call bd ce note bd ce dependent cases class dialgebras involved shall write bd ce order resolve ambiguity 
formally define dialgebra pair need injective 
limits coalgebras section want show universal properties limits particular unit product coalgebras expressed finality property 
expanding definition arrow definition bd ce delta gh fh delta goal rewrite universal properties limits particular unit product final coalgebras instance specific choice easier case case final coalgebras called coinductive datatypes stream 
universal property final coalgebra ft fa exists arrow bd ce bd ce delta fh delta arrow bd ce called anamorphism 
clearly instance 
specifically equation expresses final id dialgebra 
say rewrite equation bd ce delta fh delta equivalently bd ce oe id consider limits 
recall definition mac lane 
categories diagonal functor delta sends object constant functor deltaa functor value object value id arrow sends arrow constant natural transformation deltaf natural transformation value object limit functor consists object natural transformation deltat universal natural transformations deltaa objects universal property natural transformation ff deltaa unique arrow ff delta objects difficult see limit category functor final delta dialgebra functor value functor object value natural transformation id arrow unique arrow called mac lane arrow bd ff ce notation 
type deltat deltat universal property property bd ff ce delta deltah delta ff deltah id ji objects common call category shape category 
unit limit empty functor unique functor shape category empty category known general definition limit boils case unit existence object satisfying requirement objects category arrow arrows definition categorical 
return definition unit allegory 
objects unique object type terms final dialgebras id identity arrow equation specialises bd ce implicit universal quantification equation delta deltah delta ff quantification empty set 
bd ce product limit functor discrete category objects 
functor pair objects functor constant functor value pair object identity function id arrow 
natural transformation deltat pair arrows outl outr outl outr object theta product exists arrow theta theta outl delta outr delta operator called split operator 
called fork operator 
order match equation equation define bd ce state equations rhs equation single equation category consideration 
rewrite equation bd ce outl delta outr delta equivalently fact composition defined componentwise writing deltah bd ce outl outr delta deltah collecting results shown limit functor final delta dialgebra final coalgebra final id dialgebra 
dually colimit functor initial delta dialgebra initial algebra initial id dialgebra 
relational final dialgebras section suggest definition relational extension final dialgebras prove properties 
section context discussion category theory section allegory theory 
note discrete category allegory allegory operations composition converse subset defined componentwise 
delta relator leave simple verification reader relator functor discrete limits category final dialgebras relators provided allegory 
allegory obviously identity functor relator 
endofunctor relator final coalgebra final dialgebra relators 
note local completeness allegory requirement pair objects partially ordered set arrows type complete 
definition completeness requirement discrete categories relator delta lower adjoint galois connection 
relator lower adjoint galois connection objects relation ga gb relation relations gx case delta upper adjoint infimum operator shape example upper adjoint binary intersection 
deltax ordering deltax componentwise 
general case relation deltaa deltab family relations indexed objects infimum relation satisfying deltax hi observations basis able discuss limits coalgebras simultaneously 
consider final dialgebras relators lower adjoint galois connection upper adjoint 
note assume relator 
fact assumption lower adjoint strictly necessary section place assume local completeness allegory 
results earlier sections sharper assume relator lower adjoint 
section assumption explicit results section hand global assumption 
focus definition propose natural extension categorical notion final dialgebra notion 
definition assume relators type 
relational final dialgebra iff ft gt simple dialgebra mapping bd ce defined dialgebras bd ce fa ga bd ce id bd ce ffi delta bd ce largest solution equation gx ffi delta fx delta 
mapping bd ce call relational 
properties call reflection law cancellation law respectively 
key insight definition property slight generalisation dual hylomorphism theorem initial algebras see theorem 
done elevate theorem requirement 
goal provide evidence definition natural extension 
remainder section concerned proving relational final dialgebra categorical final dialgebra underlying map category 
section establishes converse result 
simple lemmas 
useful restate property pair calculational rules 
bd ce ffi delta bd ce solution equation bd ce ffi delta bd ce ffi delta bd ce ffi delta bd ce delta second solution bd ce ffi delta bd ce gx ffi delta fx delta second useful combine cancellation law reflection law 
straightforward calculation instantiated properties converse gives simplifications ce ffi delta ce delta bd ce gx ffi delta fx delta properties call computation rules properties call coinduction rules 
simple application rules show function bd ce monotonic 
bd ce bd ce bd ce ce ffi delta ce delta transitivity ffi delta ce delta ffi delta ce delta monotonicity composition remarked cases particularly interested lower adjoint 
assumption inclusion gx ffi delta fx delta equivalent ffi delta fx delta lower adjoint upper adjoint bd ce ffi delta bd ce 
ffi delta fx delta bd ce 
ffi delta fx delta informative instantiate values obtained discussing product functor section 
take doubling relator delta take binary intersection operator 
supposing outl outr obtain bd ce definitions composition outl ffi delta outr ffi delta standard definition extension relations split operator discussed section 
return general case 
lemma bd ce preserves simple relations total relations 
bd ce preserves maps 
proof fa ga simple 
bd ce delta bd ce ffi id reflection bd ce delta bd ce ffi bd ce coinduction bd ce delta bd ce ffi ffi delta bd ce delta bd ce ffi delta relator computation relator ffi delta ce delta delta ffi delta ce ffi delta ffi delta ce delta ce ffi delta monotonicity delta ffi id fa simple true fa ga total 
id gb ffi delta id bd ce ffi delta bd ce coinduction ffi delta fid delta relator ffi delta relator total true aim prove map 
assumption simple prove total 
lemma total relation 
proof ffi delta reflection ffi delta ce delta computation ce id gt reflection id gt case lower adjoint prove stronger statement lemma viz lemma relator lower adjoint upper adjoint ffi delta id proof lemma know monotonicity ffi delta id gt id suffices prove opposite inclusion 
ffi delta id reflection ffi delta bd ce coinduction ffi delta ffi delta fg ffi delta delta monotonicity id ft fg ffi delta relator lemma true case product lemma property outl ffi delta outl outr ffi delta outr id thetab outl outr final delta dialgebra 
case unit trivial property id ffi delta id id case coalgebras identity relator case get ffi delta id half way proving lambek lemma identity relator isomorphism 
details remainder proof 
lemma identity relator ffi bd fout ce proof ffi preparation reflection introduce identity id specifically functor fid id ft ffi delta fid reflection ffi delta ce definition ffi delta 
ffi delta fx delta rolling rule associativity composition 
ffi delta delta relator 
ffi delta fx delta fout identity function bd fout ce lemma identity relator delta ffi id ft proof lemma follows delta ffi bd fout ce ffi delta bd fout ce continue rhs bd fout ce ffi delta bd fout ce cancellation 
fout ffi delta fx delta fout functor 
ffi delta delta rolling rule 
ffi delta fx delta identity function ce reflection functor id ft note lemma shows requirement simple definition superfluous case identity relator 
straightforward prove simple case product know way deriving property remaining requirements definition 
corollary identity relator isomorphism 
delta bd ce ce delta proof isomorphism combination lemmas 
property follows fact isomorphism 
conclude section summarising theorem 
theorem relational final dialgebra categorical final dialgebra underlying map category 
maps bd ce map satisfies unique extension property bd ce delta gh fh delta proof delta gh fh delta components maps shunting gh ffi delta fh delta coinduction bd ce lemma bd ce map bd ce computation gh ffi delta fh delta components maps shunting delta gh fh delta bd ce delta gh fh delta parameterized final data structures construction inductive type structures list stream understood 
general procedure coinductive type take binary relator omega say fix arguments say consider relator omega construct final omega coalgebra section generalise construction method dialgebras show theorem prove coinductive types product relators 
theorem suppose allegories 
suppose omega binary relator type thetac relator type suppose object omega ta gta relational final omega dialgebra 
relation allegory tr bd omega omega id tb delta ce defines relator type proof monotonicity obvious defined functional composition number functions bd ce omega id delta monotonic 
commuting converse calculate tr ffi ffi coinduction tr ffi ffi delta id omega tr ffi delta ffi omega id delta converse omega relators gtr ffi delta omega tr delta computation true instantiating ffi converses gives ffi tr ffi tr ffi ffi fact respects identities follows directly reflection law 
distribution composition follows called map fusion rule tr delta bd ce bd omega id delta ce tr delta ts definition tr delta bd omega id delta ce map fusion rule map different meaning 
map function lists 
bd omega id delta omega id delta ce omega functor bd delta omega id delta ce definition delta map fusion rule prove follows 
tr ffi ffi definition tr delta bd ce bd ffi omega id delta ce ffi delta bd ce tr delta bd ce largest solution equation gx ffi omega id delta ffi delta id omega delta bd omega id delta ce largest solution equation gx ffi delta id omega delta omega id delta equations identical ffi omega id delta ffi delta id omega distribution converse composition ffi delta ffi omega id ffi delta id omega converse distributes binary relator omega ffi ffi ffi delta omega id delta id omega omega binary functor ffi delta id omega delta omega id tr delta bd ce bd omega id delta ce largest solutions identical equations equal 
call relators constructed 
elementary example theorem obtained defining omega projection relator exl omega objects arrows identity relator id omega ka omega gb true identity relator delta bd ce ce delta definitions bd ce tr definition bd omega id tb delta ce definitions omega bd ce identity relator 
product relator 
take omega projection relator exl product allegory 
omega take doubling relator delta omega binary intersection operator 
showed earlier see discussion immediately choice bd ce outl ffi delta outr ffi delta follows delta outl delta outl outl ffi delta delta outl outr ffi delta delta outr standard definition thetas extension product functor relations 
map fusion theorem product split fusion theorem thetas delta delta delta having shown product relator constructed conclude possibly best known example streams 
relator omega product relator constructed stream ta type infinite sequences tr relation holding streams corresponding elements streams related existence relational previous section showed relational extension maps 
words relational final dialgebra exists final dialgebra underlying map category 
section show reasonable conditions allegory way true 
context main theorem holds follows 
assume locally complete tabular allegory 
assume discrete category relators type refer allegory shape category 
case coalgebras course category exactly object arrow 
assume axiom choice viz 
total relation map 
precise total map allegory rel allegory binary relations sets assumptions hold 
theorem prove final dialgebra sub category formed total maps relational definition 
unit product known tabular allegory relational extensions unit product exist precisely unit product exist sub category total maps 
contribution show proved dialgebras general particular instances limits coalgebras 
summary form theorem prove theorem ft gt final dialgebra sub category total maps relational final dialgebra 
remainder section devoted proving theorem 
order show relational final dialgebra define relational extension bd ce operator maps 
view possible candidate function mapping relation fa ga largest solution equation gx ffi delta fx delta denote function definition ffi delta delta gx ffi delta fx delta order guarantee existence function need assume allegory locally complete lower adjoint 
assumptions hold greatest postfix point function mapping relation ffi delta fx delta known knaster tarski theorem exists virtue completeness turn algebraic properties demanded function typing law clearly satisfied 
show reflection cancellation laws hold mapping show extends bd ce functions coincide applied maps 
start reflection law 
proves useful contexts introduce definition definition bisimulation suppose fa ga dialgebra 
relation type bisimulation gr ffi delta fr delta succinct definition bisimulation believe original 
lemma show equivalent categorical definition proposed aczel mendler 
note definition generalises aczel mendler ways extension dialgebras maps arbitrary relations 
lemma assumes dialgebra map 
lemma suppose map fa ga dialgebra 
suppose tabulation relation bisimulation map fc gc delta gf ff delta delta gg fg delta proof proof mutual implication 
implication assume bisimulation try calculate candidate delta gf ff delta delta gg fg delta components maps shunting ff ffi delta delta gf fg ffi delta delta gg intersection ff ffi delta delta gf fg ffi delta delta gg axiom map exists relation ff ffi delta delta gf fg ffi delta delta gg total right domain id gc prove follows id gc ff ffi delta delta gf fg ffi delta delta gg id id ffi delta id gc gf ffi delta ffi delta ff delta fg ffi delta delta gg shunting converse relators delta ffi ffi delta delta ffi delta delta ffi gr ffi delta fr delta definition bisimulation note argument uses axiom 
need axiom show ff ffi delta delta gf fg ffi delta delta gg map 
shown total remains show simple 
fact proved assuming relator preserves binary intersections calculation ff ffi delta delta gf fg ffi delta delta gg delta ff ffi delta delta gf fg ffi delta delta gg ffi converse monotonicity ff ffi delta delta gf delta gf ffi delta ffi delta ff fg ffi delta delta gg delta gg ffi delta ffi delta fg gf gg simple ff ffi delta ff fg ffi delta fg preserves binary intersections ffi delta ffi delta tabulation ffi delta ffi delta id fid follows show map exists bisimulation assumption map 
bisimulation definition bisimulation gr ffi delta fr delta delta ffi relators gf delta gg ffi ffi delta ff delta fg ffi delta map shunting delta gf delta gg ffi ff delta fg ffi delta delta gf ff delta monotonicity delta gg ffi fg ffi delta shunting fg delta delta gg assumption true instantiating comparing definition see largest bisimulation computation rule bisimulation coinduction rule bisimulations satisfy lemma known corollary bisimulation final coalgebra identity relation carrier set 
lemma id proof inclusion id follows fact id bisimulation id ffi delta fid delta functors total true left id tabulation prove delta ffi id equivalently note type suggests unique extension property prove equality key doing lemma 
fact prove stronger result bisimulation tabulation equal existence guaranteed lemma 
specifically delta ffi id maps shunting calculus map bd ce unique extension property definition see map delta gf ff delta delta gg fg delta tabulation lemma bisimulation show extension bd ce lemma maps bd ce proof inclusion follows coinduction bd ce definition specifically ce ffi delta ce delta components maps shunting delta ce ce delta unique extension property definition see true follows inclusion total 
equality follows show simple 
proof fact lemma delta ffi id lemma id delta ffi coinduction delta ffi ffi delta delta ffi delta relators delta ffi ffi delta delta ffi delta computation rule monotonicity properties converse ffi delta delta delta ffi delta ffi delta ffi delta delta ffi delta simple true axiom prove mapping preserves total relations 
obvious lemma needed 
lemma mapping monotonic 
proof straightforward combination monotonicity composition 
lemma mapping preserves total relations 
proof axiom follows total relation exists map lemma monotonic lemma extension bd ce bd ce contains total map 
total 
prove cancellation law mapping lemma ffi delta largest solution equation gx ffi delta fx delta proof easy see ffi delta solution equation ffi delta ffi delta ffi delta delta relators computation ffi delta ffi delta delta ffi delta delta ffi delta ffi delta delta simple true remains prove solution 
tabulation solution equation 
prove delta ffi ffi delta calculate delta ffi ffi delta shunting id ffi delta ffi delta delta claim fh ffi delta delta gh delta id ff ffi delta delta gf ffi delta fg ffi delta delta gg id ffi delta id id ff ffi delta delta gf fg ffi delta delta gg 
monotonicity lemma id ff ffi delta delta gf fg ffi delta delta gg 
lemma preserves total relations id ff ffi delta delta gf fg ffi delta delta gg id id ffi delta id ff ffi delta delta gf ffi delta fg ffi delta delta gg converse shunting gf delta gg ffi ffi delta ff delta fg ffi delta relators delta ffi ffi delta delta ffi delta tabulation solution equation 
delta ffi satisfies equation 
true claim second step verify fh ffi delta delta gh delta shunting fh ffi delta delta gh delta ffi coinduction fh ffi delta delta gh delta ffi ffi delta fh ffi delta delta gh delta ffi delta relators shunting fh ffi delta delta gh ffi delta fh ffi delta delta gh delta fh ffi delta delta gh computation true concludes proof main theorem 
outlines attempt development generic programming 
proposed unifying definition relators encompasses coinductive relators stream non coinductive relators 
addition proved dialgebra final underlying map category relational final dialgebra allegory 
needs done 
problems particular interest possible establish go regular relators membership pair regulator relators commute resort cumbersome case analyses done past 
grateful anonymous referee insightful suggestions 
aarts backhouse hoogendijk van der 
relational theory datatypes 
available world wide web www win tue nl cs wp papers september 
peter aczel 
non founded sets 
number csli lecture notes 
center study language information stanford california 
peter aczel mendler 
final coalgebra theorem 
pitt editor category theory computer science lecture notes computer science pages 
springer verlag 
backhouse de bruin hoogendijk malcolm van der 
polynomial relators 
nivat rattray rus scollo editors proceedings nd conference algebraic methodology software technology amast pages 
springer verlag workshops computing 
richard bird oege de moor paul hoogendijk 
generic functional programming types relations 
functional programming january 
richard bird oege de moor 
algebra programming 
prentice hall international 

arguments program construction 
phd thesis eindhoven university technology department mathematics computing science june 
freyd scedrov 
categories allegories 
north holland 
hagino 
typed lambda calculus categorical type constructors 
pitt rydeheard editors category theory computer science pages 
springer verlag lecture notes computer science 
paul hoogendijk 
generic theory datatypes 
phd thesis department mathematics computing science eindhoven university technology 
paul hoogendijk roland backhouse 
datatypes commute 
eugenio moggi giuseppe rosolini editors category theory computer science th international conference volume lncs pages 
springer verlag september 
paul hoogendijk oege de moor 
datatype 
technical report department mathematics computing science eindhoven university technology 
submitted science computer programming 
available world wide web www win tue nl cs wp papers 
bart jacobs jan rutten 
tutorial algebras induction 
bulletin eatcs june 
jansson jeuring 
polyp polytypic programming language extension 
popl th acm sigplan sigact symposium principles programming languages pages 
acm press 
jay 
semantics shape 
science computer programming 
jay cockett 
shapely types shape polymorphism 
sannella editor esop th european symposium programming pages 
springer verlag lecture notes computer science april 
jeuring 
polytypic pattern matching 
conference record fpca wg conference functional programming languages computer architecture pages 
jeuring jansson 
polytypic programming 
launchbury meijer sheard editors proceedings second international summer school advanced functional programming techniques pages 
springer verlag 
lncs 
lambek 
fixpoint theorem complete categories 
mathematische zeitschrift 
joachim lambek 

canadian mathematical bulletin 
maclane 
categories working mathematician 
springer verlag new york 
lambert meertens 
calculate 
herbert doaitse swierstra editors proceedings eighth international symposium plilp programming languages implementations logics programs volume lecture notes computer science pages 
springer verlag 
meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
fpca functional programming languages computer architecture volume lncs pages 
springer verlag 
doaitse swierstra oege de moor 
virtual data structures 
helmut bernhard moller steve editors formal program development volume lncs pages 
springer verlag 

