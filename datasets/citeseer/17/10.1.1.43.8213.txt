representing monads andrzej filinski school computer science carnegie mellon university pittsburgh pa andrzej cs cmu edu show monad unit extension operations expressible purely functional terms embedded call value language composable continuations 
part development extend meyer wand characterization relationship continuation passing direct style continuation passing vs general monadic style 
show construct represented ordinary non composable class continuations single piece state 
presence specific computational effects storage escapes expressible monadic structure nondeterminism represented list monad added purely definitional extension requiring reinterpretation language 
includes implementation construction standard ml new jersey extensions examples 
background overview years monads gained considerable acceptance lazy functional programming world 
originally proposed moggi convenient framework structuring semantics languages research sponsored part defense advanced research projects agency title fox project advanced development systems software arpa order issued esd avs contract 

nsf sponsored research 
ccr 
views contained document author interpreted representing official policies expressed implied defense advanced research projects agency government 
proceedings st annual acm sigplan principles programming languages january 
fl acm 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
quickly popularized wadler technique structuring functional programs 
hard see reason popularity monads promise access state control operators retaining strong reasoning principles valid pure functional languages 
briefly restricting programs called monadic style similar spirit appearance continuation passing style sets uniform infrastructure representing manipulating computations effects firstclass objects 
somewhat remarkable monads comparable impact impure functional programming 
main reason clearly observed moggi widely appreciated purely functional community monadic framework built semantic core eager functional languages effects need expressed explicitly 
impure constructs linguistic updatable state exceptions class continuations external language os interface obey monadic discipline 
aspect missing ability programmers application specific monadic abstractions nondeterminism parsers ease naturality built effects 
useful monadic effects included defined terms existing concepts typical eager functional languages 
example backtracking expressed call cc updatable stack backtracking points 
implementations appear ad hoc require thorough understanding imperative features clear connection pure monadic abstractions implement 
usual monads yield approach far obvious 
show fact monadic effect definition expressible functional language synthesized just impure constructs class continuations storage cell 
words language scheme ml class continuations complete sense program expressible somewhat monadic style written direct style 
uses computational effects definition encapsulated abstraction customarily called composable functional partial continuations remaining program contains explicit escapes state 
rest section contains brief monads reader unfamiliar concept advised read papers moggi wadler complete presentation moggi convenient notation monadic effects 
sections derive representation result succession steps potentially useful right directly extends supplements earlier 
develop formal correspondence monadic style continuation passing style 
show non standard manipulations continuation monadic cps expressed terms operators composable continuations 
show define operators ordinary class continuations piece state 
supplement development section presents complete embedding executable ml code illustrates common monadic effects uniformly represented instances construction 
comparison related complete 
monads monadic reflection purposes monadic functional programming monad consists type constructor operations polymorphic functions ff ff gamma ff fi ff fi called unit extension respectively 
wadler uses binary infix operator writing bind notation probably superior writing actual programs monadic style variant preferable formal manipulations performing 
operations required satisfy monad laws id ff ffi ffi ffi monads give semantics various computational effects state exceptions applicative programming languages 
particular development set simple callby value cbv functional language moggi principle computations type ff correspond values type ff 
informally ja represents pure effect free computation yielding represents computation consisting effects followed result applying value computed noted moggi correspondence principle embodied introspective language extension called monadic reflection analogy computational reflection operators gamma ff gamma ff gamma ff gamma ff ff reflects value effectful computation type ff 
conversely general computation ff reifies corresponding effect free value type ff 
example exception monad defined ff ff exn inl case inl inr inr exn type exception names 
expresses value ff exn computation get exception raising construct raise def inr expression typically just value type exn 
conversely turns possibly ff expression value type ff exn define exception handling construct handle def case inl inr raises exception handler invoked bound exception name general patternmatching handle construct sml easily expressed terms 
justifying designation correspondence principle monadic reification reflection inverses respective domains 
expression ff possibly computational effects value ff general notation seen simply shorthand practice delta provided function reflect ff ff 
necessary delta special form exploit usual bijection computations type ff values type ff get function reify 
ff ff extracting monadic representation suspended computation 
theoretical development sections keep compact delta delta notation 
monads cps step development investigate formal connections monadic style continuation passing style cps 
noted wadler appear closely related actual correspondence quite involved benefits detailed analysis 
section consider translations monadic cps simply typed cbv functional language monadic reflection reification operators object language purely functional metalanguage typed fij calculus monadic unit extension functions 
relate translations generalizing results meyer wand typed cps transform method seen covering particular case identity monad ff ff id 
monadic translation monadic translation transforms object language term free variables 
xn ff 
xn ff fi meta language term ff 
xn ff fi translation types ff fi ff fi ff ff ranges base types ff fi cbv function space distinguish underlying pure function space ff fi 
extension structured types products sums straightforward omitted brevity 
term translation jx id familiar looking equations taken moggi 
example monadic reasoning quickly check monad laws verify correspondence principle delta delta id id id ffi id conversely representative value cases analogous id id jx cps translation consider cbv cps translation pair languages particular reflection reification operators monad translation types looks similar ff fi ff fi ff ff fl type final answers 
key idea making new answer type due wadler 
get simple relationship translations assume contain values note type expressible source language 
avoid clutter term equations omit injections projections source term translated ff 
xn ff fi term translation kx ak equations usual ones 
verify really correct cps analogs translation counterparts 
relation monadic style cps note define type indexed family functions mediating monadic cps alternatively little care take fl fl straightforward check term translation operations defined fact typed schema 
types oe ff ff ff ff ff ff oe oe ff fi ffi oe fi ff oe ff oe ff ffi oe ff ff fi oe ff ffi fi ff ff ffi ff meyer wand names functions analogous oe definition slightly convenient necessarily identity 
straightforward verify hoe fl fl form retraction pair source type fl fl ffi oe fl id fl metalanguage 
fl result immediate fl ff fi ff fi ffi oe ff fi ff fi oe ff fi ff fi ffi oe fi ff ffi oe fi ff oe ff ffi fi ffi fi ffi oe fi ff oe ff ih id fl ff ff ffi oe ffi ff ffi ffi oe ff ffi ff ffi ffi oe ff ffi ff ffi oe ff ih id type translations faithfully embed translation source language type corresponding translated type 
properly relate translations want stronger property meaning source term recovered meaning cps translation really captures subtleties monadic 
proof property complicated expected particular attempt prove induction term structure 
get feeling goes wrong consider untyped variants translations simply identity monad particular delta delta operations effect 
atomic value consider term xx xx remember full fi metalanguage delta nominally cbv translation delta specifies cbv cps transformation fact functional way extract abstractly problem introduced effect nontermination source language corresponding modification monadic structure encompass partiality 
rule surprises need explicit type structure 
specifically source type ff isolate set compatible cps values ff ff computations ff ff defined follows fm trueg ff fi fm ff fi ff mn fi ff fi ff mn ffi fi vt ff fm ff ff ff ft ff jv ff tg jv ff restriction ff equation ff means left hand side defined equal right hand side 
part result aiming states meanings object language values expressions fact compatible sense 
motivation specific conditions fairly technical try give intuition 
importantly ff tj jv ff jv ff ffi jv ff ffi particular jv ff ffi id ff ffi ffi id ff ffi id ff jv ff ff term invokes continuation ff term agree ff 
condition functions ff ensure latent computations involving terms particular arguments continuations behaved activated note translation written second condition functions expands oe ff ff ffi fi mn ffi fi states behaved function depend information argument preserved conversion back translated types 
easy check induction types oe ff ff ff particular oe ff ff ff 
element ff form 
example identity monad consider source values meanings equal meanings image oe 
substitution oe write avoid overloading brackets application oe meta language term ffi state key result relating cps monadic style 
theorem ff 
xn ff fi oe substitution assigning ff term foeg fi ff ffi oeg foeg ffi fi ff substitution mapping ff 
proof somewhat tedious structural induction meyer wand shortcut analyzing appear useful general case 
direct consequence get ff ffi oe ff foe ff ffi fi particular closed base type fi identity simple equality generally half theorem get monadic congruence result foe ff ffi fi example case partiality monad ff ff strict extension ka ff recover usual restriction continuation strict get congruence monadic characterization generalizes requirement computational effects 
check explicitly reflection principle satisfied free variables denote terms kx armed proof continuation passing characterization monadic reflection reification faithfully represents original definitions return embedding result 
monadic reflection composable continuations analysis previous section applies arbitrary monad natural assumption meta language monad functions gamma defined pure functional sublanguage object language 
words definition monad sufficiently algorithmic write source program monadic style place 
case say monad expressible language 
seen express monadic effects cps monadic style 
priori leave better reach non standard cps terms interpret delta delta particular monad need specific translation phase performed manually compilation interpretation partial evaluation automated technique 
object language terms gamma turns represent required cps terms direct style extended fixed operators manipulating continuation composable function 
expressible monad simulated single universal effect added object language 
specifically extend source language cps translation operators shift reset defined follows shift captures erases evaluation context nearest dynamically enclosing reset program run implicit enclosing reset passes context argument ordinary function 
example theta theta purposes reset coincides felleisen prompt notation adopted shift differs prompt original companion control continuation control definition 
details shift reset relation notions composable continuations see 
monadic delta operation delta typically provided function thunks special form 
assumption meta language included object language pure function type ff ff ae fl ae fl ae fl fl ae fl fl ae fl ae fl ae fl fl fl fl ke ae fl ae fl fl fl fl fl se ae fl ae fl fl fl fl fl fl fl ae fl ae fl fl fl meta continuation semantics similarly extension expressible function type ff fi ff fi preserves purity cps definition want evaluate continuation propagate result surrounding evaluation context 
fact delta need add je ja conversely need replace current continuation extended version directly expressed ga fv 
means expressible gamma define terms composable continuation primitives def je def include shift reset programming language write monadic programs direct style 
composable continuations storable continuations final step construction see shift reset defined terms continuations single storage cell 
trick view cps translation definitions shift reset specification language just higher order function obtain proper continuation semantics new meta continuation fl detailed 
result displayed 
usual call cc operator invokes argument current continuation represented escaping function seen discarded note particular nested application definition sequentialized usual fl fl likewise outer put metacontinuation 
hand underlined fl reduced away metacontinuation really comes play shift reset 
meaning complete program ae init fl fl fl init fl init usual top level continuation typically simply identity function 
note simpler operator abort denotation ae ae fl ae fl fl fl ae equivalent fv express se def kx informally erases context captured wrapping reset kx ensure identity continuation gets discarded invoked 
need define 
suffice defining pure cps terms domain theoretic setting noted sitaram felleisen 
second key observation definitions meta continuation threaded meta continuation semantics exactly global store scheme language 
means simply designate single updatable location hold fl represented procedure ignores continuation metacontinuation passed access 
specifically language continuations state operations mk ae oe ae oe oe mk oe mk ae oe oe mk oe oe maps locations values mk location assigned mk mk evaluates stores value returns mk returns current contents cell changing 
easy check definitions give terms right denotations ae def mk mk def mk mk mk kr ae usual abbreviations 
note particular escaping function abstraction stored mk denote procedure invoked uses continuation current contents mk 
need initialize mk initial continuation easiest way simply wrap reset top level expression evaluated 
completes embedding expressible monadic structure language escapes state somewhat surprising result deceptively general appearing monad laws 
stressed construction applies monads definitions captured functional programs place esoteric effects probabilistic computations defy simple decomposition 
incidentally definitions shift reset terms call cc state practical applications unrelated monads 
example lawall danvy investigating applications composable continuations continuation partial evaluation preliminary results indicate embedded shift reset explicit cps transformation step give significant improvements time space run efficient implementation call cc 
implementation examples section transcribe construction far runnable code 
emphasize typing issues involved new jersey dialect standard ml concrete language operational content translate straightforwardly scheme instantiation different monads may convenient module facility 
give examples reader may want compare wadler presentation 
composable continuations sml nj class continuations type distinct type general procedures 
set representation continuations scheme style non returning functions essential direct correspondence semantics section signature escape sig type void val coerce void 
val escape 
void 

structure escape escape struct datatype void void void fun coerce void coerce fun escape callcc fn fn throw example write open escape escape fn coerce val int void coerce unconstrained type variable escape permits storage continuations ref cells staying ml type system 
define composable continuations facility parameterized type final answers signature control sig type ans val reset unit 
ans 
ans val shift 
ans 
ans 
functor control type ans control struct open escape exception val mk ans 
void ref ref fn raise fun abort coerce mk type ans ans fun reset escape fn val mk mk fn mk abort fun shift escape fn abort fn 
reset fn coerce example structure control type ans int open reset fn shift fn val int monadic reflection building composable continuations package implement construction section 
signature monad simple signature monad sig type val unit 
val ext 


monad laws verified manually 
goal define reflection reification operations arbitrary monad get signature sig structure monad val reflect 
val reify unit 

proceed twist construction needs universal type section signature universal sig type val tou 
val 
ffi tou identity 
note ensuring instances fact match dynamically responsibility ml system free dump core attempts execute code tou foo 
signature implemented sml nj structure universal universal struct type system unsafe object val tou system unsafe cast val system unsafe cast cast behaves identity function general type 

complete construction universal type get usable definition pick suitable concrete type answers 
reification restricted computations type reflection remains polymorphic cases interpreter evaluations happen single type values sufficient 
functor represent monad struct structure control type ans universal structure fun reflect shift fn ext fun reify ext unit universal reset fn unit universal tou recall operationally tou identities ext unit 
worth stressing implementation represent needs typing loophole interface remains ml typable safe 
example exceptions example concrete syntax structure struct datatype suc err string val unit suc fun ext suc ext err err structure represent local open fun reflect err fun case reify suc 
err 
val fn string 
val fn unit 

string 

fun show fn ok int fn error val show fn unit 
int 
string show fn val ok string show fn oops val error oops string example state state monad wadler counting operations functor statemonad type state monad struct type state 
state fun unit fn fun ext fn val structure represent statemonad type state int fun tick reflect fn fun fetch reflect fn fun store reflect fn val tick fn unit 
unit val fetch fn unit 
parameter state int val store fn int 
unit reify fn store tick fetch val int example nondeterminism nondeterministic computation represented list answers structure monad struct type list fun unit fun ext ext ext structure represent local open fun amb reflect reify fn reify fn fun fail reflect val amb fn 
val fail fn unit 
reify fn val amb amb fail val int generally get haskell style list comprehensions free schema 
xn en may 
en expressed directly 
xn en example compute cartesian product lists open reify fn val reflect val reflect foo bar val foo bar foo bar foo bar int string list course probably efficient way implementing list comprehensions ml 
observed wadler list comprehensions generalized arbitrary monads similarly get general monad comprehensions ml simply supplying appropriate delta delta operations 
example continuations consider continuation monad arbitrary fixed answer type functor type answer monad struct type 
answer 
answer fun unit fn fun ext fn fn structure represent type answer string local open fun reflect fn fun reflect fn reify fn fun reflect fn fun reflect fn reify fn fn fun reflect fn reify fn val fn 


val fn 
string 
string 
val fn unit 
string 
string reify fn fn val string reify fn fn 
fn 
fn val abbc string related study relationships direct continuation semantics long history 
early investigations set domain theoretic framework main difficulties concerned reflexive domains result methods results closely tied specific semantic models 
hand meyer wand approach applies models typed calculi encompass computational effects nontermination 
extension meyer wand retraction theorem monadic effects partially bridge gap add facet understanding cps 
natural expect results continuation passing vs direct style scale monadic style particular possible extend results languages reflexive types adapting semantics proofs mentioned 
possible equivalence monads cps conjectured danvy filinski partially fleshed wadler quite informal result generalizes meyer wand expect proof complicated 
glimmer correspondence seen sabry felleisen result fij equivalence cps terms coincides direct style equivalence moggi computational calculus captures exactly equivalences hold presence arbitrary monadic effects 
peyton jones wadler probe relationship monads cps wadler analyzes composable continuations monadic perspective cases restriction hindley milner typability obscures deeper connections 
composable continuations studied number researchers 
constructs depend explicit support compiler runtime system ability mark splice delimited stack segments 
encoding standard scheme variant devised sitaram felleisen 
embedding fairly complex relying dynamically allocated mutable data structures eq tests direct connection formal semantics constructs 
scheme implementable notion partial continuations proposed queinnec code required intricate 
fair constructs apparently general shift reset practical utility additional power remains seen 
simpler construction uses single cell holding continuation directly derived denotational definition shift reset 
riecke effect delimiters may related share concepts techniques specifically monads prompts retractions 
closer inspection similarities apparent example riecke considers specific monads attaches special significance cps certainly specific goals papers quite different results obtained incomparable 
deeper connections uncover subject probably worth exploring 
exploiting correspondence monadic continuation passing styles embed definable monad language composable continuations construct 
construct decomposed ordinary class continuations storage cell 
possible principle express definable monadic effect combination control state 
practice course effects including obviously call cc ref cells naturally expressed directly detour composable continuations 
construction practical experiments rapid prototyping complicated monadic structures 
embedding approach incur interpretive overhead monadic interpreter complexity explicit source source monadic translation step 
importantly allows retain extra effort conveniences original language including pattern matching static typechecking module system 
efficiency general embedding may quite handcoded monadic style specialized particular monad especially compilers attempt track continuations storage cells 
hand effects rare programs run full speed overhead explicitly performing administrative manipulations specified gamma tagging checking return values exception monad 
embedding result strong argument inclusion class continuations practical eager languages especially ones ml mutable cells providing call cc simply add monadic effect completes language effects 
sophisticated module system sml lets expose little underlying raw power need picking appropriate monadic structure introduce effects ranging simple exceptions full composable continuations 
surely functional programming escapes state monadic effects 
monads provide lowest level framework sequencing computations practical programs need tools expressing higher level abstractions 
strict monad partitioning effects may adequate cases monads take place proper module facility 
fact syntactic noise due writing monadic style harder recognize exploit organizational units conveniently fit monadic mold example concurrency packages reppy cml imperative unification mutable data structures 
sheds light problem integrating individual monads express composite effects 
briefly complication monad closed package contains little information need express monadic data increment layered top possible effects 
uniformly quite clear moggi monad constructors steele pseudomonads possible techniques 
composable continuations characterization monads monad combination correspond letting target language defining translations contain monadic effects leading hierarchy control operators associated meta continuationpassing style introduced investigated murthy 
approaches lead inherently vertical hierarchical notion monad composition general answer questions backtracking undo exceptions undo state mutation 
really right way think supposedly functional programs monadic effects fact naturally combined horizontal independent way different pieces state storage monadic generalized cps formulation awkward cases individually mutable cells capture situation directly 
monads purely functional languages vs control state imperative functional setting largely disjoint 
connections outlined lead help avoid duplication effort 
example pure functional programmers benefit organizing reasoning class continuations storage cells imperative setting noting monadic effects clearly sufficient reason 
conversely results algebraic properties particular monads useful recognizing exploiting patterns continuation state usage eager languages 
acknowledgments want john reynolds support olivier danvy matthias felleisen julia lawall greg morrisett amr sabry phil wadler reviewers helpful comments various drafts 
andrew appel david macqueen 
standard ml new jersey 
third international symposium programming language implementation logic programming number lecture notes computer science pages passau germany august 
william clinger jonathan rees 
revised report algorithmic language scheme 
lisp pointers july 
olivier danvy andrzej filinski 
abstracting control 
proceedings acm conference lisp functional programming pages nice france june 
olivier danvy andrzej filinski 
representing control study cps transformation 
mathematical structures computer science december 
bruce duba robert harper david macqueen 
typing class continuations ml 
proceedings eighteenth annual acm symposium principles programming languages pages orlando florida january 
matthias felleisen 
theory practice firstclass prompts 
proceedings fifteenth annual acm symposium principles programming languages pages san diego california january 
matthias felleisen robert hieb 
revised report syntactic theories sequential control state 
theoretical computer science september 
matthias felleisen mitchell wand daniel friedman bruce duba 
continuations mathematical semantics handling full functional jumps 
proceedings acm conference lisp functional programming pages snowbird utah july 
robert hieb kent dybvig carl bruggeman 
representing control presence firstclass continuations 
proceedings acm sigplan conference programming languages design implementation pages white plains new york june 
gregory johnson dominic duggan 
stores partial continuations class objects language environment 
proceedings fifteenth annual acm symposium principles programming languages pages san diego california january 
david king philip wadler 
combining monads 
launchbury sansom editors functional programming glasgow pages ayr scotland 
springerverlag 
julia lawall olivier danvy 
partial evaluation 
indiana university aarhus university 
personal communication october 
albert meyer mitchell wand 
continuation semantics typed lambda calculi summary 
rohit parikh editor logics programs proceedings number lecture notes computer science pages brooklyn june 
eugenio moggi 
computational lambda calculus monads 
proceedings fourth annual symposium logic computer science pages pacific grove california june 
ieee 
eugenio moggi 
view programming languages 
technical report ecs lfcs laboratory foundations computer science university edinburgh edinburgh scotland april 
eugenio moggi 
notions computation monads 
information computation july 
murthy 
control operators hierarchies pseudo classical type systems translation 
proceedings acm sigplan workshop continuations pages san francisco california june 
technical report 
stan cs department computer science stanford university 
simon peyton jones philip wadler 
imperative functional programming 
proceedings twentieth annual acm symposium principles programming languages pages charleston south carolina january 
gordon plotkin 
call name call value calculus 
theoretical computer science december 
christian queinnec bernard 
dynamic extent control operator partial continuations 
proceedings eighteenth annual acm symposium principles programming languages pages orlando florida january 
john reppy 
cml higher order concurrent language 
proceedings acm sigplan conference programming language design implementation pages toronto canada june 
john reynolds 
relation direct continuation semantics 
jacques editor nd colloquium automata languages programming number lecture notes computer science pages saarbrucken west germany july 
jon riecke 
delimiting scope effects 
functional programming languages computer architecture pages copenhagen denmark june 
acm press 
amr sabry matthias felleisen 
reasoning programs continuation passing style 
proceedings acm conference lisp functional programming pages san francisco california june 
revised version appear lisp symbolic computation 
ravi sethi adrian tang 
constructing call byvalue continuation semantics 
journal acm july 
dorai sitaram matthias felleisen 
control delimiters hierarchies 
lisp symbolic computation january 
dorai sitaram matthias felleisen 
reasoning continuations ii full abstraction models control 
proceedings acm conference lisp functional programming pages nice france june 
brian smith 
reflection semantics procedural language 
phd thesis massachusetts institute technology cambridge massachusetts january 
mit lcs tr 
guy steele jr building interpreters composing monads 
proceedings annual acm symposium principles programming languages portland oregon january 
appear 
joseph stoy 
congruence programming language definitions 
theoretical computer science february 
philip wadler 
comprehending monads 
mathematical structures computer science december 
earlier version appeared proceedings acm conference lisp functional programming 
philip wadler 
essence functional programming invited talk 
proceedings nineteenth annual acm symposium principles programming languages pages albuquerque new mexico january 
philip wadler 
monads composable continuations 
lisp symbolic computation 
appear 
mitchell wand daniel friedman 
mystery tower revealed non reflective description reflective tower 
lisp symbolic computation may 
