symbolic model checking bdds armin biere alessandro cimatti edmund clarke zhu computer science department carnegie mellon university forbes avenue pittsburgh pa biere edmund clarke cs cmu edu istituto la ricerca scientifica tecnologica irst sommarive povo tn italy cimatti irst itc 
symbolic model checking proven powerful technique verification reactive systems :10.1.1.27.1489
bdds traditionally symbolic representation system 
show boolean decision procedures stalmarck method davis putnam procedure replace bdds 
new technique avoids space blow bdds generates counterexamples faster speeds verification 
addition produces counterexamples minimal length 
introduce bounded model checking procedure ltl reduces model checking propositional satisfiability 
show bounded ltl model checking done tableau construction 
implemented model checker bmc bounded model checking preliminary results 
model checking powerful technique verifying reactive systems 
able find subtle errors real commercial designs gaining wide industrial acceptance 
compared formal verification techniques theorem proving model checking largely automatic 
model checking specification expressed temporal logic system modeled finite state machine 
realistic designs number states system large explicit traversal state space infeasible 
symbolic model checking boolean encoding finite state machine handle states :10.1.1.27.1489
bdds canonical form boolean expressions traditionally underlying representation symbolic model checkers 
model checkers bdds usually able handle systems hundreds state variables 
larger systems bdds generated model checking large currently available computers 
addition research sponsored semiconductor research src contract dj national science foundation nsf 
ccr 
opinions findings recommendations expressed material authors necessarily reflect views src nsf united states government 
selecting right ordering bdd variables important 
generation variable ordering results small bdds time consuming needs manual intervention 
examples space efficient variable ordering exists 
propositional decision procedures sat operate boolean expressions canonical forms 
suffer potential space explosion bdds handle propositional satisfiability problems thousands variables 
sat techniques successfully applied various domains hardware verification modal logics formal verification railway control systems ai planning systems 
number efficient implementations available 
notable examples prove tool stalmarck method sato davis putnam procedure 
symbolic model checking technique sat procedures 
basic idea consider counterexamples particular length generate propositional formula satisfiable iff counterexample exists 
particular introduce notion bounded model checking bound maximal length counterexample 
show bounded model checking linear temporal logic ltl reduced propositional satisfiability polynomial time 
prove correctness completeness technique establish correspondence bounded model checking model checking general 
previous approaches ltl model checking method require tableau automaton construction 
main advantages technique 
bounded model checking finds counterexamples fast 
due depth nature sat search procedures 
finding counterexamples arguably important feature model checking 
second finds counterexamples minimal length 
feature helps user understand counterexample easily 
third bounded model checking uses space bdd approaches 
bdd approaches bounded model checking need manually selected variable order time consuming dynamic reordering 
default splitting heuristics usually sufficient 
evaluate ideas implemented tool bmc bounded model checking 
give examples sat model checking significantly outperforms bdd model checking 
cases bounded model checking detects errors instantly bdds initial state built 
organized follows 
section explain basic idea bounded model checking example 
section give semantics bounded model checking 
section explains translation bounded model checking problem propositional satisfiability problem 
section discuss bounds length counterexamples 
section experimental results section describes directions research 
example consider simple state machine consists bit shift register individual bits denoted 
predicate denotes transition relation current state values state values equivalent initial state content register arbitrary 
predicate denotes set initial states true 
shift register meant empty bits set zero consecutive shifts 
introduced error transition relation state value incorrect value 
property eventually register empty written sufficiently large number steps valid 
property formulated ltl formula 
translate universal model checking problem af existential model checking problem negating formula 
check execution sequence fulfills 
searching arbitrary path restrict paths states instance choose 
call states path initial state see 
initial content arbitrary restriction fig 

unrolling transition relation twice adding back loop 
unroll transition relation twice derive propositional formula defined 
expand definition get formula 
st step nd step path states witness contain loop 
require transition back initial state second state see 
represent transition defined equivalent formula 
sure path fulfill constraints imposed formula 
case property defined hold state 
equivalent formula 
putting derive propositional formula 
formula satisfiable iff counterexample length original formula 
example find satisfying assignment setting 
semantics actl defined subset formulas ctl negation normal form contain universal path quantifiers 
formula negation normal form nnf negations occur front atomic propositions 
ectl defined way existential path quantifiers allowed 
consider time operator eventuality operator globally operator operator 
assume formulas nnf 
transform formula nnf increasing size including release operator iff 
ltl formula path quantifiers allowed 
concentrate ltl model checking 
technique extended handle full actl resp 
ectl 
definition 
kripke structure tuple finite set states set initial states transition relation states theta labeling states atomic propositions kripke structures models order give semantics logic 
rest consider kripke structures boolean encoding 
require state represented vector state variables propositional variables 
define propositional formulas iff iff iff 
rest simply addition require state successor state 
write infinite sequence states define 
infinite sequence states path 
definition semantics 
kripke structure path ltl formula 
valid defined follows 
iff iff iff iff iff iff iff iff iff definition validity 
ltl formula universally valid kripke structure symbols iff paths ltl formula existentially valid kripke structure symbols iff exists path determining ltl formula existentially resp 
universally valid kripke structure called existential resp 
universal model checking problem 
conformance semantics ctl clear ltl formula universally valid kripke structure iff existentially valid 
order solve universal model checking problem negate formula show existential model checking problem negated formula solution 
intuitively trying find counterexample succeed formula universally valid 
theory part consider existential model checking problem 
basic idea bounded model checking consider finite prefix path may solution existential model checking problem 
restrict length prefix certain bound practice progressively increase bound looking longer longer possible counterexamples 
crucial observation prefix path finite represent infinite path back loop state prefix previous states see 
back loop see prefix say infinite behavior path 
instance prefix back loop represent witness gp 
holds states back loop previous state conclude witness gp hold loop loop fig 

cases bounded path 
definition 
call path loop delta gamma 
call simply loop loop 
give bounded semantics approximation unbounded semantics definition 
allows define bounded model checking problem section give translation bounded model checking problem satisfiability problem 
bounded semantics consider finite prefix path 
particular states path determine validity formula path 
path loop simply maintain original ltl semantics information infinite path contained prefix length definition bounded semantics loop 
loop 
ltl formula valid path bound symbols iff assume loop 
formula fp valid unbounded semantics find index valid suffix bounded semantics th state successor 
define bounded semantics recursively suffixes keep original add parameter definition bounded semantics notation parameter current position prefix lemma show implies definition bounded semantics loop 
path loop 
ltl formula valid bound symbols iff iff iff iff iff false iff iff iff iff note loop say valid bounded semantics bound hold similarly case holds fulfilled excluded 
constraints imply bounded semantics duality duality longer hold 
existential universal bounded model checking problems defined manner definition 
describe existential model checking problem reduced bounded existential model checking problem 
lemma 
ltl formula path proof 
loop follows definition 
case assume loop 
prove induction structure stronger property consider complicated case gamma gamma step fact assume smallest number case consider assumption exists choose 
second case proven disjunction right hand side fulfilled 
ut lemma 
ltl formula kripke structure 
exists proof 
shown existential model checking problem ltl formula reduced model checking formula certain product kripke structure 
kripke structure product original kripke structure tableau exponential size formula worst case 
ltl formula existentially valid exists path product structure starts initial state ends cycle strongly connected component fair states 
path chosen loop bounded jsj delta size product structure 
project path component original kripke structure get path loop addition fulfills definition bounded semantics implies ut main theorem section states take possible bounds account bounded unbounded semantics equivalent 
theorem 
ltl formula kripke structure 
iff exists translation previous section defined semantics bounded model checking 
reduce bounded model checking propositional satisfiability 
reduction enables efficient propositional decision procedures perform model checking 
kripke structure ltl formula bound construct propositional formula variables denote finite sequence states path vector state variables 
formula essentially represents constraints satisfiable iff valid size polynomial size common subformulas shared tool bmc 
quadratic linear size propositional formulas existential bounded model checking reduced polynomial time propositional satisfiability 
construct define propositional formula constrains valid path second give translation ltl formula propositional formula constrains satisfy definition unfolding transition relation 
kripke structure gamma depending path loop see different translations temporal formula definition describe translation path loop delta 
technical translation path loop delta definition 
consider formula path loop see 
starting formula valid respect bounded semantics iff position holds 
addition states starting gamma proposition fulfilled 
translation simply disjunction possible positions eventually hold 
positions conjunction added ensures holds path gamma 
similar reasoning leads translation temporal operators 
translation delta maps ltl formula propositional formula 
parameter length prefix path consider current position prefix see 
recursively process subformulas changes stays 
note define translation formula false 
translation consistent bounded semantics 
definition translation ltl formula loop 
ltl formula false false gamma consider case path loop 
translation delta ltl formula depends current position length prefix depends position loop starts see 
position denoted loop 
definition successor loop 
define successor succ loop succ succ definition translation ltl formula loop 
ltl formula min min succ gamma gamma gamma min gamma translation formula depends shape path loop 
define loop condition distinguish cases 
definition loop condition 
definition general translation 
ltl formula kripke structure left side disjunction case back loop translation loop 
right side possible starts loop tried translation loop corresponding loop condition 
theorem 
satisfiable iff corollary 
iff unsatisfiable 
determining bound section shown unbounded semantics equivalent bounded semantics consider possible bounds 
equivalence leads straightforward ltl model checking procedure 
check procedure checks 
procedure proves produces witness length increment value indefinitely procedure terminate 
section establish bounds bound conclude ectl ectl subset ectl temporal operator preceded existential path quantifier 
extended bounded model checking handle ectl formulas 
semantics translation ectl formulas full version 
general better bounds derived ectl formulas ltl formulas 
intersection sets formulas includes temporal properties practical interest efp egp 
include discussion bounds ectl formulas section 
theorem 
ectl formula kripke structure jmj number states iff exists jmj symbolic model checking number states kripke structure bounded number boolean variables encode kripke structure 
typical model checking problems involve kripke structures tens hundreds boolean variables 
bound theorem large practical problems 
definition diameter 
kripke structure diameter minimal number property 
sequence states exists sequence states words state reachable state reachable path length 
theorem 
ectl formula efp kripke structure diameter efp iff exists efp 
theorem 
kripke structure diameter minimal number satisfies formula 

gamma kripke structure explicit state representation known graph algorithms determine diameter 
kripke structure boolean encoding may verify diameter evaluating quantified boolean formula qbf shown theorem 
conjecture quantified boolean formula necessary express property diameter unfortunately know efficient decision procedure qbf 
definition recurrence diameter 
kripke structure recurrence diameter minimal number property 
sequence states exists theorem 
ectl formula kripke structure recurrence diameter iff exists theorem 
kripke structure recurrence diameter minimal number satisfies formula recurrence diameter definition bound bounded model checking applicable ectl formulas 
property recurrence diameter expressed propositional formula shown theorem 
may propositional decision procedure determine number recurrence diameter kripke structure 
bound recurrence diameter tight diameter 
example fully connected kripke structure graph diameter recurrence diameter equals number states 
ltl ltl model checking known pspace complete 
section reduced bounded ltl model checking propositional satisfiability showed np 
polynomial bound respect size 
polynomial reduction ltl model checking problems propositional satisfiability pspace np 
theorem 
ltl formula kripke structure jmj number states iff exists jmj theta subset ltl formulas involves temporal operators ltl model checking np complete 
subset ltl formulas shown exists bound linear number states size formula 
definition loop diameter 
say kripke structure lasso shaped path starting initial state form finite sequences length equal respectively 
define loop diameter 
theorem 
ltl formula lasso shaped kripke structure loop diameter iff exists theorem shows restricted class kripke structures small bounds exist 
particular kripke structure lasso shaped bounded loop diameter experimental results implemented model checker bmc bounded model checking 
input language subset smv language 
outputs smv program propositional formula 
propositional output mode different formats supported 
format dimacs format satisfiability problems 
sato tool efficient implementation davis putnam procedure uses dimacs format 
support input format prove tool stalmarck method 
benchmarks chose examples bdds known behave badly 
investigated sequential multiplier sequential shift add multiplier 
formulated model checking problem property sequential multiplier finished output output combinational multiplier circuit iscas benchmarks applied input words 
multipliers bit multipliers allowed output bits overflow bit 
proved property output bit individually results shown table 
sato conducted experiments study effect parameter controls maximal size cached clauses 
picked small value large value 
note overflow bit depends bits sequential multiplier occurs specification 
cone influence reduction remove 
smv smv sato sato prove bit sec mb sec mb sec mb sec mb sec mb gb sum table 
bit sequential shift add multiplier overflow flag output bits sec seconds mb mega byte 
column smv table official version cmu model checker smv 
smv version yang cmu improved support conjunctive partitioning 
manually chosen variable ordering bits registers interleaved 
dynamic reordering failed find considerably better ordering reasonable amount time 
barrel shifter example 
rotates contents register file step position 
model contains register file related way 
register contents neighbors contents 
property holds initial state model proved valid successor states 
results experiment table 
width registers chosen dlog jrj number registers register file case able prove recurrence diameter see definition jrj 
took little time compared total verification time shown column diameter 
asynchronous circuit distributed mutual exclusion described 
consists cells users want exclusive access shared resource 
proved liveness property request resource eventually acknowledged 
liveness property true asynchronous gate delay execution indefinitely 
model assumption fairness constraint individual gate 
cell exactly gates model delta fairness constraints number cells 
bound maximal length counterexample verification circuit verify liveness property completely 
showed counterexamples particular length illustrate performance bounded model checking chosen 
results table 
repeated experiment buggy design 
liveness property simply removed fairness constraints 
prove sato generate counterexample loop instantly see table 
step applying sat procedures symbolic model checking 
believe technique potential handle larger designs currently possible 
goal propose promising directions research 
investigate domain knowledge guide search sat procedures 
new techniques needed determine diameter system 
particular interesting study efficient decision procedures qbf 
combining bounded model checking state space reduction techniques presents interesting problem 
smv sato sato prove prove diameter diameter jrj sec mb sec mb sec mb sec mb sec mb gb table 
barrel shifter jrj number registers sec seconds mb mega bytes 
smv smv sato prove sato prove cells sec mb sec mb sec mb sec mb sec mb sec mb gb table 
liveness user dme sec seconds mb mega bytes 
smv smv sato prove cells sec mb sec mb sec mb sec mb segmentation fault table 
counterexample liveness buggy dme sec seconds mb mega bytes 
arne 
industrial success verification tools stalmarck method 
orna grumberg editor international conference computer aided verification cav number lncs 
springer verlag 
bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 
burch clarke mcmillan 
symbolic model checking states 
information computation 
clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
proceedings ibm workshop logics programs volume lncs pages 
springer verlag 
clarke grumberg 
look ltl model checking 
david dill editor computer aided verification th international conference cav volume lncs pages 
springer verlag june 
edmund clarke orna grumberg david long 
model checking abstraction 
acm transactions programming languages systems 
davis putnam 
computing procedure quantification theory 
journal association computing machinery 
emerson 
lei 
modalities model checking branching time strikes back 
science computer programming 
giunchiglia sebastiani 
building decision procedures modal logics propositional decision procedures case study modal proc 
th conference automated deduction lecture notes artificial intelligence 
springer verlag 
johnson trick editors 
second dimacs implementation challenge dimacs series discrete mathematics theoretical computer science 
see dimacs rutgers edu challenges 
kautz selman 
pushing envelope planning propositional logic stochastic search 
proc 
aaai portland 
lichtenstein pnueli 
checking finite state concurrent programs satisfy linear specification 
twelfth annual acm symposium principles programming languages pages 
martin 
design self timed circuit distributed mutual exclusion 
fuchs editor proceedings chapel hill conference large scale integration 
mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic publishers 
sistla clarke 
complexity propositional linear temporal logics 
journal assoc 
comput 
mach 
stalmarck 
modeling verifying systems software propositional logic 
daniels editor safety computer control systems pages 
pergamon press 
stephan brayton sangiovanni vincentelli 
combinational test generation satisfiability 
technical report departement electrical engineering computer science university california berkley october 
zhang 
sato efficient propositional prover 
international conference automated deduction cade number lnai pages 
springer verlag 
