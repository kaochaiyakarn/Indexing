paris flexible plan adaptation abstraction refinement ralph bergmann wolfgang wilke centre learning systems applications lsa university kaiserslautern dept computer science box kaiserslautern germany mail bergmann informatik uni kl de paris plan abstraction refinement integrated system domain independent case planning system allows flexible reuse planning cases abstraction refinement 
approach mainly inspired observation reuse plans restricted single description level 
domains high variation problems reuse past solutions achieved various levels abstraction 
paris planning cases concrete level abstracted levels abstraction leads set cases stored case base 
case abstraction done automatically retain phase cbr process modell 
new problem solved case retrieved problem description matches current problem exactly level 
subsequent reuse phase solution refined details contained case added achieve full solution problem 
refinement done generative planner performs forward directed state space search 
explain cases constructed reused case reasoning process 
shows overview system components 
case abstraction refinement paris includes explanation approach generalizing cases learning specializing problem solving 
complete description system 
case abstraction case abstraction means reducing level detail contained problem description solution case case contains operators states concrete case 
furthermore operators states described terms typically requires reduced number predicates 
general change complete representation language abstraction levels may required achieve meaningful und useful abstractions domain 
paris assumes addition concrete planning domain planning domain description concrete domain domain generic abstraction theory abstraction generalization evaluation specialization refinement retrieval case base new problem training cases solved problem paris system learning problem solving indexing 
components paris system domain contained part general knowledge 
domain may introduce new representation language 
contains set operators set rules describe different ways abstracting concrete states 
example domain planning rotary symmetric workpieces concrete domain contains predicates describe detailed contour workpieces individual cut operations performed 
domain abstracts detailed contour represents larger units called complex processing areas status processing processed roughly processed completed 
presents example relationship concrete case case 
left side shows section concrete case depicting step contour grooves manufactured sub plan consisting steps 
case shown middle abstracts detailed contour just represents complex processing area named includes raw fine elements 
corresponding plan contains steps processing raw manner processing fine manner 
arrows concrete case show concrete states correspond 
state derived existing concrete states state abstraction 
concrete fl bergmann wilke ecai workshop adaptation cbr 
edited voss published john wiley sons right tool cut cut cut cut center tool process raw process fine right tool cut left tool cut center tool cut cut cut state abstraction state refinement available concrete case case adapted case case abstraction case refinement raw fine 
example generating refining cases 
states abstracted 
concrete states skipped considered detail maintained case 
byproduct state abstraction sequence concrete operators abstracted single operator 
note explained kind case abstraction performed automatic procedure paris part retain phase cbr cycle 
cases stored case base indexed abstraction hierarchy details see 
retrieval reuse cases new problem solved case retrieved exactly matches current problem level 
matching cases contained case base retrieval procedure abstraction hierarchy indexing selects case located lowest level abstraction 
motivation concrete cases done refinement achieve complete solution 
corresponds similarity measure ranks cases similar lower level abstraction problems identical see 
reuse phase solution contained retrieved case refined fully detailed complete solution 
right side shows example refinement 
contour workpieces differs drastically concrete level case matches exactly atomic contour elements new problem abstracted complex processing area raw fine elements 
case guide state planner find refined solution problem 
state kind sub goal 
planner starts concrete initial state new problem description searches sequences concrete operators leading concrete state abstracted state case 
resulting operator sequence refinement operator 
remaining operators sequentially refined way 
portion case shown operator process raw refined sequence concrete steps manufacture area 
operator refined step sequence manufactures grooves 
note paris allows reuse problem decompositions different levels abstraction 
plans decompose original problem set smaller subproblems 
problems small independent underlying planner able solve stepping intractability problem 
retrieving refining cases assume case base contains set cases reused solve new problem 
problem solving case selected plan contained case refined solution new problem 
case retrieval search case applicable contains problem description abstraction current problem 
order decide problem description abstraction current problem hand apply generic abstraction theory case abstraction 
problem description new problem inferred concrete problem description 
abstracted problem description matched problem description contained case 
matching case refined come solution current problem 
refinement starts concrete initial state problem statement 
search performed find sequence concrete operations leads concrete state abstracted generic abstraction theory match second state contained case 
operator refined new concrete state 
state taken starting state refine operator manner 
refinement fails backtrack refinement previous operator try find alternative refinement 
refinement process reaches final operator directly search operator sequence leads concrete goal state new problem 
concrete goal state reached concatenation concrete partial solutions leads complete solution original problem 
refinement demands search procedure allows goal specification 
kinds forward directed search depth iterative deepening best search procedures purpose 
paris depth iterative deepening search 
please note paris allows reuse problem de paris bergmann wilke compositions different levels abstraction 
plans decompose original problem set smaller subproblems 
subproblems solved search problem solver 
problem decomposition leads significant reduction search performed solve problem 
pure search worst case time complexity finding required solution search length solution average branching factor 
problem decomposed solution subproblems require solution length nk respectively delta delta delta nk worst case time complexity finding complete solution delta delta delta max 
report series different experiments designed evaluating paris 
table summarizes experimental results obtained paris solve different process planning problems 
experiment paris trained different cases cases second run available reuse problem solving 
table summarizes percentage problems solved average computation time required solve problem 
results compared obtained separate experiment problem solved pure search reuse 
solved problems solution time reusing cases sec 
reusing cases sec 
reuse sec 
table 
percentage solved problems average solution time 
related cbr cbr volume case planning system specialized synthesis plans organic chemistry 
chemical starting material considered initial planning state target molecule goal state 
chemical transforms planning operators 
compared paris cbr abstraction 
operator descriptions states molecules 
uses subsumption hierarchy organize case base similar approach paris abstraction hierarchy 
vu vu volume hierarchical cbr system solves tasks similar planning 
vu explicit representation states operators paris 
consequently solve planning problems scratch cbr guarantee correctness produced solutions 
paris vu uses cases different levels abstraction 
paris vu allows combine different cases ones build new solution 
vu represent operators explicitly uses different kinds adaptation transformations called specialists strategies 
knowledge acquisition point view systems quite different 
paris requires acquisition operators different levels abstraction described precondition effects 
vu requires acquisition general adaptation transformations 
systems advantages different domains 
volume case design system uses object oriented representation designs 
designs represented aggregations specializations objects 
reusing design parts object structure may useful 
reusing top level objects case may comparable reusing case paris 
approaches case planning similar paris approach case planning systems prodigy analogy caplan cbc 
systems reuse planning cases directly doing abstraction 
approach related idea skeletal plans 
skeletal plan approach model operators concrete describe preconditions effects operators done paris 
explicit notion states abstraction refinement states 
plan refinement achieved stepping hierarchy operators guided heuristic rules operator selection 
appendix section addresses particularly questions discussed workshop 
abstraction paris different levels abstraction concrete planning domain explicit defined part general knowledge system 
distinct levels arbitrary number abstraction levels merged planning domain see 
different vocabularies level abstraction 
required represent naturally occuring abstraction levels domain 
main purposes abstraction increase flexibility reuse 
case concrete level may reused level 
adaptation knowledge paris requires complete hierarchical model planning domain set operator descriptions strips paris bergmann wilke levels abstraction 
additionally requires generic abstraction theory allows planning states 
knowledge sufficient scratch problem solving determining correctness solution 
retrieval reuse retain phase 
approach limited planning task domain independent 
knowledge represented strips operators horn clauses 
retrieval indexing abstraction approach paris strongly affects similarity assessment memory organisation 
retrieval selects cases match problem exactly certain level abstraction 
matching cases contained case base retrieval selects case located lowest level abstraction 
similarity defined level abstraction problems match exactly 
approach guarantee selected cases adapted 
order increase probability adaptable cases retrieved statistic information cases collected adaptation 
information influences retrieval allows forget cases adaptable situations 
statistic information takes retrieval time 
adaptation planning adaptation required large typically infinite solution space 
extremely plan reused new problem modification 
holds particularly domain mechanical engineering 
available cases 
approach described detail sections 
cases encode domain knowledge encode control knowledge 
cases combined adaptation 
generic problem solver state space planner refining cases 
case problem solving increase performance reduction problem solving time competence increase number solved problems certain time limit 
validated experiments see 
adaptation performed operation user 
case structure approaches case planning paris uses case structure clearly problem solution part 
problem part defined initial state final state solution part consists totally ordered sequence operators 
view influenced classical planning literature 
approaches rely view applied action planning tasks 
advantage kind problems solved clearly defined criteria exist define solution correct 
disadvantages limited flexibility 
kinds problems solved system represented combining predefined goals 
distinction influences indexing problem part needs indexing 
requirements limitations important prerequisite method availability required background knowledge concrete world description world description generic abstraction theory 
construction planning system concrete world description acquired anyway specifies language problem description essential sentences problem solution operators world generic abstraction theory acquired additionally 
feel price pay reuse flexible planning tractable certain practical situations 
formulation adequate domain theory crucial success approach 
operators missing required express useful plan reuse achieved 
need independently refinable operators 
operators exist simply represented domain representational power 
additionally requirement domain user advantage learned cases expressed terms user familiar 
user understand case easily 
main goal adaptation case planning reduce problem solving time 
goal retrieval find case adapted minimal effort 
reflected retrieval procedure paris system statistic information collected case adaptation 
aamodt plaza case reasoning foundational issues methodological variations system approaches ai communications 
bergmann durch flexible von fallen auf ph dissertation university kaiserslautern 
bergmann wilke explanation similarity unifying approach integrating domain knowledge case reasoning topics case reasoning eds wess 
althoff richter volume lecture notes artificial intelligence springer 
bergmann wilke building refining planning cases change representation language journal artificial intelligence research 
iwasaki concept implementation skeletal plans journal automated reasoning 
kambhampati hendler validation theory plan modifications artificial intelligence 
korf planning search quantitative approach artifical intelligence 
mu wess controlling nonlinear hierachical planner case reasoning proceedings nd ewcbr 
wess planning machining workpieces partial order nonlinear planner aaai fall symposium planning learning real applications 
paris bergmann wilke veloso carbonell scaling machine learning case study derivational analogy prodigy machine learning methods planning ed steven minton chapter morgan kaufmann 
paris bergmann wilke 
