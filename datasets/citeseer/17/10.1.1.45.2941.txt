software practice experience vol 


lua extensible extension language roberto ierusalimschy luiz de figueiredo computer science department puc rio icad puc rio br summary describes lua language extending applications 
lua combines procedural features powerful data description facilities simple powerful mechanism tables 
mechanism implements concepts records arrays recursive data types pointers adds object oriented facilities methods dynamic dispatching 
lua presents mechanism fallbacks allows programmers extend semantics language unconventional ways 
noteworthy example fallbacks allow user add different kinds inheritance language 
currently lua extensively production tasks including user configuration general purpose data entry description user interfaces storage structured graphical generic attribute configuration finite element meshes 
key words extension languages user programming programming languages increasing demand customizable applications 
applications complex customization simple parameters impossible users want configuration decisions execution time users want write macros scripts increase productivity 
response needs important trend nowadays split complex systems parts kernel configuration 
kernel implements basic classes objects system usually written compiled statically typed language modula 
configuration part usually written interpreted flexible language connects classes objects give final shape application 
configuration languages come flavors ranging simple languages selecting preferences usually implemented parameter lists command lines variable value pairs read configuration files ms windows ini files resource files embedded languages extending applications user defined functions primitives provided applications 
embedded languages quite powerful simplified variants mainstream programming languages lisp configuration languages called extension languages allow extension basic kernel semantics new user defined capabilities 
ccc received fl 
john wiley sons revised august ierusalimschy de figueiredo extension languages different stand languages embedded host client called host program 
host program usually provide domain specific extensions customize embedded language purposes typically providing higher level abstractions 
embedded language syntax programs application program interface api communicating hosts 
simpler configuration languages supply parameter values sequences actions hosts way communication embedded languages host programs 
important note requirements extension languages different general purpose programming languages 
main requirements extension languages ffl extension languages need data description facilities frequently configuration languages ffl extension languages clear simple syntax main users professional programmers ffl extension languages small small implementation 
cost adding library application may high ffl extension languages writing large pieces software hundreds thousands lines 
mechanisms supporting programming large static type checking information hiding exception handling essential ffl extension languages extensible 
conventional languages extension languages high abstraction level adequate interfacing users quite diverse domains 
describes lua extensible procedural language powerful data description facilities designed general purpose extension language 
lua arose fusion descriptive languages designed configuration specific applications scientific data entry visualizing profiles obtained geological probes 
users began demand increasingly power languages clear real programming facilities needed 
upgrading maintaining different languages parallel solution adopted design single language applications application 
lua incorporates facilities common procedural programming languages control structures assignments subroutines infix operators abstracts facilities specific particular domain 
way lua complete language language framework 
lua satisfies requirements listed quite 
syntax control structures quite simple pascal 
lua small library lines ansi generated yacc 
lua extensible 
design addition different features replaced creation meta mechanisms allow programmers implement features 
meta mechanisms dynamic associative arrays reflexive facilities fallbacks 
dynamic associative arrays directly implement multitude data types ordinary arrays records sets bags 
lever data description power language means constructors 
lua extensible extension language include stdio include lua lua header file include extra libraries optional int main int argc char argv char line opens library optional opens string lib optional opens math lib optional gets line line 
interactive interpreter lua reflexive facilities allow creation highly polymorphic parts 
persistence multiple name spaces examples features directly lua easily implemented lua reflexive facilities 
lua fixed syntax fallbacks extend meaning syntactical constructions 
instance fallbacks implement different kinds inheritance feature lua 
overview lua section contains brief description main concepts lua 
examples actual code included give flavor language 
complete definition language manual 
lua general purpose embedded programming language designed support procedural programming data description facilities 
embedded language lua notion main program works embedded host client 
lua provided library functions linked host applications 
host invoke functions library execute piece code lua write read lua variables register functions called lua code 
fallbacks specified called lua know proceed 
way lua augmented cope different domains creating customized programming languages sharing single syntactical framework 
sense lua language framework 
hand easy write interactive stand interpreter lua 
statements lua executed global environment keeps global variables functions 
environment initialized host program persists 
unit execution lua called chunk 
chunk may contain statements function definitions 
chunk executed functions statements compiled functions added global environment statements ierusalimschy de figueiredo width height width ensures aspect ratio color blue 
simple configuration file function bound elseif local minh local variable minh minh return width height bound monochrome color black color blue 
configuration file functions executed sequential order 
shows example lua simple configuration language 
code defines global variables assigns values 
lua dynamically typed language variables types values 
values carry type 
type definitions lua 
powerful configurations written flow control function definitions 
lua uses traditional pascal syntax reserved words explicitly terminated blocks semicolons optional 
syntax familiar robust easily parsed 
small example 
notice functions return multiple values multiple assignments collect values 
parameter passing source small semantic difficulties discarded language 
functions lua class values 
function definition creates value type function assigns value global variable bound 
value function values stored variables passed arguments functions returned results 
feature greatly simplifies implementation object oriented facilities described section 
basic types number floats string type function lua provides data types nil table 
explicit type checking needed primitive function type may returns string describing type argument 
type nil single value called nil main property different value 
assignment value variable lua extensible extension language list creates empty table current list current value current current current current value current list 
circular linked list lua nil 
uninitialized variables major source programming errors exist lua 
nil context actual value needed instance arithmetic expression results execution error alerting programmer variable properly initialized 
type provided allow arbitrary host data represented void pointers stored lua variables 
valid operations values type assignment equality test 
type table implements associative arrays arrays indexed integers strings reals tables function values 
associative arrays associative arrays powerful language construct algorithms simplified point triviality required data structures algorithms searching implicitly provided language 
typical data containers ordinary arrays sets bags symbol tables directly implemented tables 
tables simulate records simply field names indices 
lua supports representation providing name syntactic sugar name 
languages implement associative arrays awk tcl perl tables lua bound variable name dynamically created objects manipulated pointers conventional languages 
disadvantage choice table explicitly created 
advantage tables freely refer tables expressive power model recursive data types create generic graph structures possibly cycles 
example shows build circular linked lists lua 
lua provides number interesting ways creating table 
simplest form expression returns new empty table 
descriptive way creates table initializes fields shown syntax somewhat inspired database format window foreground blue ierusalimschy de figueiredo command creates table initializes fields foreground assigns variable window 
note tables need homogeneous simultaneously store values types 
similar syntax create lists colors blue yellow red green black statement equivalent colors colors blue colors yellow colors red colors green colors black powerful construction facilities needed 
trying provide lua provides simple constructor mechanism 
constructors written name just syntactic sugar name 
constructor table created initialized passed parameter function 
function initialization needed dynamic type checking initialization absent fields auxiliary data structures update host program 
typically constructor function pre defined lua configuration users aware constructor function simply write window window foreground blue think windows high level abstractions 
lua dynamically typed provides user controlled type constructors 
constructors expressions nested describe complex structures declarative style code dialog button label ok button label cancel reflexive facilities powerful mechanism lua ability traverse tables built function 
function takes arguments table traversed index table 
index nil function returns index table value associated index index nil function returns index value 
indices retrieved arbitrary order nil index returned signal traversal 
example lua traversal facilities shows routine cloning objects 
local variable runs indices object receives values 
values associated corresponding indices stored local table 
way traverses table related function traverses global variables lua 
presents function saves global environment lua table 
function clone local variable runs names lua extensible extension language function clone local creates new object local nil get index value store new table get index value return 
function clone generic object function save local env create new table local nil get global var value env store global variable table get global var value return env 
function save lua environment global variables receives values stored local table env 
exit function save returns table function restore restore environment 
function phases 
current environment erased including predefined functions 
local variables run indices values table storing values corresponding global variables 
tricky point functions called restore kept local variables global names erased 
interesting example manipulation global environment lua scarcely needed tables objects provide better way maintain multiple environments 
support object oriented programming functions class values table fields refer functions 
property allows implementation interesting object oriented facilities easier syntactic sugar defining calling methods 
method definitions written function object method params ierusalimschy de figueiredo function restore env save built functions erasing global environment local erase global variables local nil nil restore old values env nil get index env set global variable name env 
function restore lua environment equivalent function self params object method anonymous function created stored table field function hidden parameter called self 
second method call written receiver method params translated receiver method receiver params words receiver method passed argument giving expected meaning parameter self 
worthwhile note characteristics construction 
provide information hiding 
may correctly claim important part object orientation missing 
second provide classes object carries operations 
construction extremely light syntactic sugar classes simulated inheritance common prototype languages self 
discussing inheritance necessary discuss fallbacks 
lua extensible extension language fallbacks untyped language lua semantics run time abnormal conditions 
examples arithmetic operations applied non numerical operands trying index non table value trying call non function value 
halting situations unsuitable embedded language lua allows programmers set functions handle error conditions functions called fallback functions 
fallbacks provide hooks handle situations strictly error conditions accessing absent field table signaling garbage collection 
set fallback function programmer calls function arguments string identifying fallback new function called corresponding condition occurs 
function returns old fallback function programs chain fallbacks different kinds objects 
lua supports fallbacks identified strings arith order concat fallbacks called operation applied invalid operands 
receive arguments operands string describing operator add sub 
return value final result operation 
default functions fallbacks issue error 
index fallback called lua tries retrieve value index table 
receives arguments table index 
return value final result indexing operation 
default function returns nil 
settable called lua tries read write value index non table value 
default functions issue error 
function called lua tries call non function value 
receives arguments non function value arguments original call 
return values final results call operation 
default function issues error 
gc called garbage collection 
receives argument table collected nil signal garbage collection 
default function 
going important notice fallbacks usually set ordinary lua programmers 
fallbacks mainly expert programmers binding lua specific application 
facility integral part language 
typical example real applications fallbacks implement inheritance described lua programmers inheritance knowing caring implemented 
fallbacks shows example uses fallbacks allow object oriented style interpreting binary operators 
fallback set expressions ierusalimschy de figueiredo function dispatch receiver parameter operator type receiver table return receiver operator receiver parameter return receiver parameter operator arith dispatch 
example fallbacks table executed add 
notice global variable chain fallback functions 
unusual facility provided fallbacks reuse lua parser 
applications benefit arithmetic expression parser include required expertise inclination write parser scratch parser generator yacc 
shows complete implementation expression parser fallbacks 
program reads arithmetic expression variables outputs series primitive operations needed evaluate expression variables temporary variables 
example code generated expression mul mul add sub mul add div mul mul add main part program function set fallback arithmetic operations 
function create initialize variables tables field name containing variable name 
initialization loop reads lines containing arithmetic expressions builds assignment variable passes lua interpreter calling 
time interpreter tries execute code calls arith fallback value table number 
fallback creates temporary variable store symbolic representation result primitive arithmetic operation 
small code performs global common sub expression identification generates optimized code 
notice example evaluated single evaluation notice evaluated 
code optimization done simply caching previously computed quantities table indexed textual representation primitive operations values temporary variables containing results 
example value mul 
lua extensible extension language counter temporary variables table temporary variables function op local op 
name 
name 
nil expression seen create save result cache print name return arith set arithmetic fallback function create create symbolic variable local name return create create create create read expressions local read nil exit execute fake assignment print name 
optimizing arithmetic expression compiler lua code easily modified handle commutativity addition multiplication anti commutativity subtraction division 
easy change output postfix representations formats 
real application variables represent application objects complex numbers matrices images arith fallback call application functions perform actual computation objects 
main lua parser allow programmers familiar arithmetic expressions represent complex calculations application objects 
inheritance fallbacks certainly interesting uses fallbacks implementing inheritance lua 
simple inheritance allows object look value absent field ierusalimschy de figueiredo function inherit object field field parent avoid loops return nil local object parent access parent object type table check parent table return field may call inherit return nil index inherit 
implementing simple inheritance lua object called parent particular field method 
mechanism kind object inheritance contrast traditional class inheritance adopted smalltalk 
way implement simple inheritance lua store parent object distinguished field called parent instance set index fallback function shown 
code defines function inherit sets index fallback 
lua attempts access field absent object fallback mechanism calls function inherit 
function checks object field parent containing table value 
attempts access desired field parent object 
field parent fallback automatically called process repeated upwards value field parent chain ends 
scheme allows endless variations 
instance methods inherited fields starting underscore 
forms multiple inheritance implemented 
frequently form double inheritance 
model field parent hierarchy search continues alternative parent usually called 
cases extra parent 
double inheritance model generic multiple inheritance 
code instance inherits order parent parent lua real applications research development laboratory catholic university rio de janeiro puc rio industrial partners 
programmers lua past years develop substantial products 
section describes uses 
lua extensible extension language grid name log log true line color red width simple line color coral 
description profile object lua configurable report generator profiles mentioned lua initially arose supporting different applications limited extension languages 
applications tool visualizing profiles obtained geological probes 
main characteristic allow user configure profile layout combining instances objects specifying data shown 
program supports kinds objects continuous curves histograms representation scales build layout users may write lua code describing objects 
application lua code allows creation descriptions means graphical user interface 
facility built edg framework described 
storing structured graphical important lua storage structured graphical 
generic drawing editor developed saves containing high level descriptions lua graphic objects compose drawing 
illustrates descriptions 
generic structured bring benefits development ffl direct consequence lua interpreter load parse editor provides functions holding lua objects converting corresponding application objects 
ffl applications share graphical objects format 
graphical objects generated applications edited 
ffl structured description lua syntax editable humans easy identify modify object conventional text editors 
ffl object easily identified individually manipulated 
feature exploited edg system implementing support active graphic objects 
ffl graphical lua allows instantiation procedural objects 
example possible describe curves mathematical expressions 
ierusalimschy de figueiredo line color red text text example text color blue circle 
excerpt structured graphical high level generic graphical data entry lua features heavily exploited implementation edg system supporting development data entry programs high abstraction level 
system provides manipulation interface objects buttons menus lists graphic objects lines circles groups primitives 
programmers build sophisticated interface dialogs high abstraction programming level 
programmers associate callback actions graphic objects creating active objects react procedurally user input 
edg system uses lua fallback feature implementing double inheritance explained 
new interface graphic objects built inheriting original object behavior 
interesting inheritance edg cross language inheritance 
edg built portable user interface toolkit 
avoid duplicating lua data residing host edg uses fallbacks settable access fields toolkit directly lua 
host data accessed directly intuitive record syntax creating access function exported data item host 
edg system development data entry programs 
engineering systems complete analysis divided steps data entry called pre processing analysis called processing simulation result report verification called post processing 
data entry task easier drawing graphical representation data specified input analysis 
applications edg system extremely helpful provides fast development tool customized data entry 
graphical data entry tools new life legacy code batch simulation programs 
lua extensible extension language parent material name isotropic vars nu function 
creates dialog specify material 
creating new material generic attribute configuration finite element meshes engineering area lua generation finite element meshes 
finite element mesh composed nodes elements decompose domain analysis 
complete model physical properties attributes associated nodes elements material type support conditions loading cases 
set attributes specified varies widely analysis done 
implement versatile finite element mesh generators recommended attributes remain configurable user hard coded program 
generic system uses lua provide support attribute configuration 
edg adopts object oriented approach users create specific properties deriving pre defined core classes 
shows example create new kind material called isotropic 
related section discusses extension languages compares lua 
intention comprehensive representatives current trends extension languages selected scheme tcl python 
comprehensive list embedded languages available internet 
section compares fallback mechanism language mechanisms 
lisp dialects particularly scheme popular choice extension languages simple easily parsed syntax built extensibility 
instance major part text editor emacs written variant lisp text editors followed path 
currently implementations scheme form libraries especially designed embedded language instance elk 
lisp called user friendly comes customization 
syntax crude non programmers 
implementations lisp scheme truly portable 
popular extension language nowadays tcl 
undoubtedly reasons success existence tk powerful tcl toolkit building graphical user interfaces 
tcl primitive syntax greatly simplifies interpreter complicates writing slightly complex constructions 
ierusalimschy de figueiredo example tcl code double value variable set expr 
tcl supports single primitive type string 
fact added absence precompilation tcl inefficient extension language 
correcting problems improve efficiency tcl factor shown tc 
lua adequate data types pre compilation runs times faster tcl 
simple test shows procedure call arguments tcl running sparcstation costs increment global variable takes lua operations cost respectively 
hand lua approximately times slower typical value interpreted languages 
tcl built control structures control structures programmable delayed evaluation smalltalk 
powerful elegant programmable control structures lead cryptic programs seldom practice 
bring high performance penalty 
python interesting new language proposed extension language 
author need improved support embedding python applications renaming global symbols py prefix 
python tiny language features necessary extension languages modules exception handling 
features add extra cost applications language 
lua designed combine best existing languages order fulfill aim extensible extension language 
tcl lua small library simple interface interface single header file lines 
tcl lua pre compiled standard bytecode intermediate form 
python lua clean familiar syntax built notion objects 
lisp lua single data structure mechanism tables powerful efficiently implement data structures 
tables implemented hashing 
collisions handled linear probing automatic reallocation rehashing table full 
hash values cached improve access performance 
fallback mechanism lua viewed kind exception handling mechanism resumption 
dynamic nature lua allows cases statically typed language issue error compile time examples kind 
particular fallbacks arith order concat mainly implement overloading 
particular example readily translated languages overloading ada 
dynamic nature fallbacks flexible exception handling overloading mechanisms 
hand authors argue programs mechanisms tend difficult verify understand debug difficulties worsened fallbacks 
fallbacks written care moderation expert programmers 
increasing demand configuration applications changing structure programs 
nowadays programs written different languages writing powerful virtual machine writing single programs machine 
lua language designed specifically task 
small lua extensible extension language noted library lines ansi portable lua platforms ranging pc dos cray 
simple syntax simple semantics 
flexible 
flexibility achieved unusual mechanisms language highly extensible 
mechanisms emphasize associative arrays strong unifying data constructor 
allows efficient algorithms unifying constructors strings lists 
languages implement associative arrays tables lua dynamically created objects identity 
greatly simplifies tables objects addition object oriented facilities 
fallbacks allow programmers extend meaning built operations 
particularly fallbacks indexing operations different kinds inheritance added language fallbacks arith operators implement dynamic overloading 
reflexive facilities data structure traversal help produce highly polymorphic code 
operations supplied primitives systems coded individually new type programmed single generic form lua 
examples cloning objects manipulating global environment 
addition lua industrial applications currently experimenting lua number research projects ranging computing distributed objects send messages containing lua code idea previously proposed tcl transparently extending www browsers client side lua code 
functions interface lua operating system provided external libraries easy restrict power interpreter order provide adequate security 
plan improve facilities debugging lua currently simple stack traceback available 
philosophy providing powerful meta mechanisms allow programmers build extensions plan add simple hooks run time system allow user programs informed important events happen entering exiting function executing line user code different debugging interfaces built top basic hooks 
hooks useful building tools profilers performance analysis 
implementation lua described available internet ftp ftp icad puc rio br pub lua lua tar gz www inf puc rio br roberto lua html staff icad testing lua john roll valuable suggestions mail concerning fallbacks previous version lua 
industrial applications mentioned text developed partnership research centers brazilian oil brazilian electricity 
authors partially supported research development brazilian government cnpq capes 
lua means moon portuguese 
ierusalimschy de figueiredo 
ryan scripts unbounded byte 

franks adding extension language software dr dobb journal 


elk extension language kit 
ftp ftp cs indiana 
edu pub scheme repository imp elk tar gz technische universitat berlin germany 

ousterhout tcl embeddable command language proc 
winter usenix conference 
usenix association 

cowan ierusalimschy programming environments users th world computer congress 
ifip sep pp 
vol 


figueiredo souza coelho ao de interfaces para de sobre pp 


ierusalimschy figueiredo manual programming language lua version em ciencia da computa ao puc rio rio de janeiro brazil 
available ftp ftp inf puc rio br pub docs techreports 

beckman scheme little languages interactive graphics software practice experience 

bentley programming pearls addison wesley 

aho weinberger awk programming language addisonwesley 

ousterhout tcl tk toolkit addison wesley 

wall schwartz programming perl reilly associates 

lamport document preparation system addison wesley 

ungar self power simplicity sigplan notices 
oopsla 

levy de figueiredo lucena cowan 
led portable user interface development tool 
software practice experience 

de carvalho martha uma para configura ao de geom ao panel xxi de inform atica pp 



catalog embedded languages 
ftp inria fr pub embedded txt 

benson jr scheme library proceedings usenix symposium high level languages 
usenix october pp 


sah blow new architecture implementation scripting languages proc 
usenix symposium high level languages 

baird smith 
manual 
www inria fr manual html 

sah tc efficient implementation tcl language master thesis university california berkeley dept computer science berkeley ca 

sun microsystems java language 
java sun com people talk ps 

van rossum python unix programmers proc 

dutch unix users group 
ftp ftp cwi nl pub python ps 

van rossum 
python frequently asked questions 
ftp ftp cwi nl pub python python faq march 
version 

yemini berry modular verifiable exception handling mechanism acm transactions programming languages systems 

black exception handling case ph thesis university oxford 

rodriguez ierusalimschy uma em ao distribu ida por panel xxi de inform atica pp 

