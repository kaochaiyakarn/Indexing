tail recursion space leaks richard jones computing laboratory university kent canterbury canterbury kent ct nf rej ac uk machine johnsson peyton jones compiled graph reduction machine lazy functional languages 
machine compiler contains optimisations improve performance 
set optimisations designed improve performance tail recursive functions 
unfortunately machine subject space leak objects unnecessarily preserved garbage collector 
analyses particular form space leak occurs machine presents ideas fixing problem 
phenomena machines examined briefly 

compilers conventional imperative languages simple pascal procedure shown implemented procedure typically procedure called set new stack frame including information return addresses arguments passed turn na implementation set stack frame called tail call 
clearly unnecessary retain stack frame information apart return address 
implementation improved jumping calling 
doing stack frame including return address tail call recursive situation called tail recursion effect jumping calling turn recursion iteration performed constant space steele bauer 

simple graph get optimisation free graph reduction wadsworth method implementing lazy functional languages 
essential idea follows reduce expression construct graph expression unwind spine graph leaving pointers application nodes stack object function position leftmost outermost term discovered object function arguments apply function arguments overwrite redex node root result may turn graph go 
turner observed property graph reduction perform tail recursion constant stack space explicit tail call optimisation 
construct unwind overwrite cycle wastes time heap space 
example regardless known compile time just leftmost outermost position graph expression constructed spine unwound 
problems addressed compiled versions graph reduction discussed 

machine mechanism machine fast implementation graph reduction compiling supercombinators hughes johnsson includes large number compile time optimisations improve performance 
tail calls particular constructing graph functions applied arguments calling functions rearrange stack replacing arguments arguments called function 
machine jumps code called function 
known dispatching calling called function share redex cell heap 
insufficient arguments available graph application may constructed redex overwritten way na reduction scheme 
problem tail recursion standard machine unfortunately scheme introduces space leak wadler na scheme uses heap space 
space leak causes memory space leak away invisibly occurs program retains connection unnecessarily large graph releasing recycling garbage collector 
reason phenomenon known dragging 
space leaks common problem lazy functional languages hughes stoye peyton jones chapter 
simple example consider function returns item finite list 
assumed redex contain application 
cell source space leak 
nil head tail notation method peyton jones 
possible better 
scheme permits compiletime run time optimisations arity called function number currently stack known 
details peyton jones chapter 
shows state na graph reducer call 
step redex overwritten application rest list 
front list available recycling garbage collector 
available recycling garbage collector stack stack update call na graph reducer notice lazy evaluation list produced consumes list need exist application 
space complexity constant linear 
machine hand avoids overwriting redex stage 
stack rearranged point tail list dispatched 
overwrite occurs final tail call 
consequently redex holds pointers original argument part reclaimed garbage collector 
stack stack dispatch call standard 
garbage collector scavenging redex solution prevent garbage collector reaching arguments function redex node marking wanted redex cell preserved garbage collector needed overwriting eventual update assuming termination contents cell need preserved 
simplest way doing redex overwriting tag redex cell hole 
hole stack redex sufficient remove space leak new argument plus single cell preserved garbage collector 
importantly safe 
redex cell heap sharing preserved 
way scheme break contents redex address required reduction whnf complete 
sequential evaluator mean value result reduction depended 
case program fail terminate case 
second advantage revealed falling black hole actively discovered parallel evaluator second task attempt examine hole cell task updates 
solution require task redex sign 
task discovers report non termination 
task discovering suspend owner overwrites redex result 
tasks waiting awakened 
scheme guarantee detect self dependence example mutually dependent tasks started simultaneously block reporting black hole 

modification standard machine point redex 
ideally cell just function call cell redex 
new redexes formed unwinding spine expression discovering function cell sufficient arguments available 
assuming root node result program hole special function program arity arguments drag case redex entry function necessary functions new redex order avoid space leaks 
function guaranteed cause heap space consumed directly indirectly cause garbage collector invoked cause space leak 
examples include functions returning constant projection functions head depending implementation 
furthermore point redex result function certain graph contains arguments function 
omitting black holes mean non termination due self dependence may fail detected 

machines spineless machine burn goes length avoid creating spines 
spine space leaks form considered possible 
spineless machine uses different sorts application node sap applications shared reducible ap applications 
similar cycles discovered implementations pointer reversal stacks unwind graph stoye 
note new redex identified redex earlier 
general determined compile time unnecessarily expensive test run time 
stack stack ap ap unwinding unshared application cell redex ap unwinding cause space leak pointer application node removed stack 
node recycled garbage collector 
hand redex shared sap cell space leak possible redex scavenged garbage collector 
plugs leak spineless machine 
stack stack sap sap unwinding shared application cell tim fairbairn spineless tagless machine peyton jones compiled closure graph 
presence tim markers stack update frames spineless tagless support laziness leads problem closures heap overwritten result scavenged garbage collector 
solution overwrite code pointer shared closure entry pointer code 
prevents garbage collector discovering pointers closure allows detection certain forms non termination 

results results 
case heap size machine tuned find smallest possible heap program run 
minimum heap space requirement words program reverse tree sort insert sort nth prime queens digits tests reveal constant residency reverse accumulating parameter version reduced asymptotic residency tree sort insert sort 

space leaks major unresolved problem lazy functional programming 
clear single solution problem number partial solutions proposed 
wadler peyton jones 
general number distinct causes space leaks requiring different solution 
area requires careful attention functional language implementation 
article attention drawn source space leaks associated tail call optimisation shown source removed 
source non termination actively discovered 
method cheap implement safe plugs space leaks form 
furthermore minimal sense avoids performing multiple operations known redexes possible redex unwinding process 
statically analysing code improvements specialise actions functions functions cause space leak need take action avoid leak 
application idea machines sketched 

am grateful david turner anonymous referees useful comments earlier draft article particular mechanism spineless tagless machine 

bauer 
algorithmic language program development 
springer verlag berlin 
burn peyton jones robson spineless machine 
acm conference lisp functional programming snowbird july pp 
fairbairn wray tim simple lazy machine execute supercombinators 
ifip conference functional programming computer architecture portland september pp 
hughes design implementation programming languages phd thesis prg university oxford 
johnsson compiling lazy functional languages phd thesis chalmers university technology 
peyton jones 
implementation functional programming languages 
prentice hall 
peyton jones spineless tagless machine 
ifip conference functional programming computer architecture london august pp 
steele sussman lambda ultimate goto 
tech 
report ai memo mit ai laboratory 
stoye clarke norman practical methods rapid combinator reduction 
acm conference lisp functional programming austin 
stoye implementation functional languages custom hardware phd thesis computing laboratory university cambridge tech 
report december 
turner 
new implementation technique applicative languages 
software practice experience pp 
wadler 
fixing space leak garbage collector 
software practice experience pp 

wadsworth semantics pragmatics lambda calculus phd thesis university oxford 
