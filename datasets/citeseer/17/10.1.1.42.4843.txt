appear proceedings third acm sigplan sigact symposium principles programming languages st petersburg beach florida january 
fl acm see notice 
tree dag cyclic graph 
shape analysis heap directed pointers rakesh ghiya laurie hendren school computer science mcgill university montr eal qu ebec canada cs mcgill ca reports design implementation practical shape analysis purpose analysis aid disambiguation heap allocated data structures estimating shape tree dag cyclic graph data structure accessible heap directed pointer 
shape information improve dependence testing parallelization guide choice complex heap analyses 
method implemented contextsensitive interprocedural analysis mccat compiler 
experimental results observations benchmark programs 
results show analysis gives accurate useful results important group applications 
related pointer analyses critical importance optimizing parallelizing compilers support languages fortran 
pointer analysis problem divided distinct subproblems analyzing pointers point statically allocated objects typically stack ii analyzing pointers point dynamically allocated objects typically heap 
pointers stack objects usually obtained address operator pointers heap objects obtained memory allocating function malloc 
henceforth supported nserc fcar project financed industry canada alex parallel computers digital equipment canada ibm canada centre de recherche informatique de montr eal 
copyright fl association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
refer analyses respectively stack analysis heap analysis 
considerable amount done areas 
initially focus heap analysis languages lisp scheme toy imperative languages include complexities :10.1.1.152.1240:10.1.1.152.183
trend implement pointer analyses real fortran compilers examine practical useful solutions obtained 
proposed implemented approaches focus stack problem give conservative estimates heap problem :10.1.1.25.6013:10.1.1.22.4648
approaches exploit fact pointer targets stack possess compile time name 
property stack pointer relationships accurately captured pointsto pairs form denoting pointer variable points data object alternatively alias pairs form denoting aliased 
unfortunately heap objects fixed name lifetime dynamically allocated inherently anonymous 
various schemes name naming place statement program allocated qualifying names procedure strings distinguish objects allocated statement different calling chains 
naming schemes give name completely unrelated heap objects tend provide conservative results compute shape information 
adapting heap analysis abstraction designed stack analysis naming heap objects approach decouple analyses provide heap analyses approximate relationships attributes heap directed pointers 
mccat compiler perform stack analysis called points analysis resolves pointer relationships stack :10.1.1.25.6013
uses lo cation called heap heap locations reports heap directed pointers pointing 
depending characteristics program analysis apply appropriate heap analysis gives precise information relationships heap directed pointers 
programs uses heap level pointsto analysis 
programs number dynamically allocated arrays non recursive structures level connection analysis identifies heap directed pointers point structure 
scientific applications written typically exhibit feature number disjoint dynamically allocated arrays 
focuses level heap analysis shape analysis 
goal shape analysis estimate shape data structure accessible heap directed pointer tree dag general graph containing cycles 
specifically focus identifying tree acyclic dag data structures built program provide conservative estimates 
shape analysis designed programs primarily recursive data structures combination arrays recursive data structures 
shape information exploited parallelize programs apply optimizing transformations loop unrolling software pipelining 
previous heap analysis primarily focused variation problem shape estimation :10.1.1.152.1240:10.1.1.152.183
general approaches complex abstraction result may find precise answer 
look complex abstraction approach start simple abstractions implemented real compilers examine usefulness simple abstractions respect set representative benchmark programs 
main contribution design implementation practical abstractions perform shape analysis important class programs 
believe implement method optimizing parallelizing compiler collect empirical results real programs 
results indicate shape analysis provides accurate results programs build tree dag data structures compositional manner 
rest organized follows 
section give high level overview analysis rules assuming simple model stack directed pointers heap directed pointers clearly separated 
method fully implemented mccat compiler context sensitive interprocedural analysis programs 
section give brief overview implementation method discuss pertinent features 
empirical data section evaluate cost effectiveness shape analysis 
directions section 
analysis rules shape analysis composed abstractions computed program point 
pointer approximate attribute shape pair heap directed pointers approximate direction interference relationships 
abstractions defined formally follows 
definition heap directed pointer shape attribute shape tree data structure accessible unique possibly empty access path nodes heap objects belonging 
considered dag directed acyclic graph path nodes data structure path node acyclic 
data structure contains node having path shape considered cycle 
note lists special case tree data structures shape considered tree 
definition heap directed pointers direction matrix captures relationships ffl access path possibly exists heap heap object pointed pointer heap object pointed pointer case simply state pointer path pointer ffl access path exists heap object pointed heap object pointed definition heap directed pointers interference matrix captures relationships ffl common heap object possibly accessed starting pointers case state interfere 
ffl common heap object accessed starting pointers case state interfere 
direction relationships estimate shape attributes interference relationships safely calculating direction relationships 
heap structure direction matrix interference matrix example direction interference matrices illustrative examples illustrate direction interference abstractions 
part shows heap structure program point parts show direction interference matrices 
access path exists pointer pointer entries set 
access path exists pointer pointer entries set zero 
path exists pointer vice versa entries set zero 
starting heap object pointed accessed 
indicate interference matrix entries set 
example illustrates direction relationships symmetric ii interference relationships symmetric iii interference relationships form superset direction relationships 
second property reduce storage requirement interference matrix half actual implementation 
third property follows fact access path exists pointer access object pointed demonstrate direction relationships help estimate shape heap data structures 
initially shape shape tree 
exists path link 
statement prev sets path prev link 
direction matrix information know path existed path set deduce creation cycle heap objects pointed statement shape cycle shape cycle 
noted heap directed pointer shape abstracts shape data structure accessible shape data structure pointed example shape data structure pointed dag 
part data structure accessible considered shape tree 
shape shape tree 
knowledge shape data structure accessible heap directed pointer provides crucial information disambiguating heap accesses originating 
pointer shape tree accesses form lead disjoint tree assuming distinct fields 
shape dag distinct field accesses lead com prev prev shape tree shape tree shape cycle shape cycle example demonstrating shape estimation estimating shape accessibility criterion mon heap object 
dag structure traversed sequence links subsequence visits distinct node 
information disambiguate heap accesses different iterations loop different recursive calls traversing data structure 
shape happens cycle effectively information disambiguate heap accesses originating goal shape analysis identify dag data structures retain information long possible analysis 
rules calculate direction interference matrix abstractions estimate shape information 
analysis basic statements mccat compiler translates input programs structured compositional intermediate form called simple form basic statements access modify heap data structures listed 
variables field pointer type variable integer type op denotes operations 
structure analysis shown 
direction interference matrices program point statement compute matrices dn program point additionally attribute matrix pointer gives shape attribute 
attribute matrix statement represented statement compute sets direction interference relationships kills generates 
sets new matrices dn computed shown 
note elements gen kill sets denoted direction relationships interference relationships 
gen set form indicates corresponding entries output direction matrix dn dn set 
compute set pointers shape attribute modified statement 
attribute matrix store changed attribute pointers belonging set attribute matrix computed matrices shown 
set pointers relationships attributes abstracted matrices assume pointers point heap objects null 
assume updating interference matrix entry implies identically updating entry 
assumption rendered valid due symmetric nature interference relationships 
actual analysis rules divided groups allocations pointer assignments structure updates 
subsections discuss rules 
allocating new heap cells malloc pointer points newly allocated heap object 
existing relationships get killed 
pointer empty path interferes 
statement change attributes pointer newly allocated object pointed incoming outgoing links shape attribute tree 
acyclicity dag data structures allocations 
malloc pointer assignments 



op 
null structure updates 

null statement build new matrices dn delete killed relationships entries kill set dn entries kill set add generated relationships entries gen set dn entries gen set update shape attributes affected pointers compute basic statements analysis structure general form analysis rules structure analysis summarized rule 
kill set kill set gen set gen set tree note having gen set simply implies presently points heap object 
imply cyclic data structure accessible statement 
case cycle 
pointer assignments basic heap statements op null update stack resident pointer point new heap object 
kill existing relationships change shape attribute pointer kill set set statements statement malloc 
rules calculate gen set matrix statements 
pointer points heap object simply inherits relationships shape attribute pointer case presently points null point null statement 
gen set presently set implying point null 
rule statement gen set gen set gen set gen set gen set gen set purposes analysis consider pointer pointing specific field specific offset heap object pointing object 
assumption statements op equivalent statement shape analysis analyzed rule 
statement null kills relationships generate new relationships 
points null statement shape attribute relevant 
default case set tree 
statement pointer point heap object accessible pointer link shown 
generates types relationships new direction relationships pointer having path pointers ii new interference relationships respect pointer relationships statement path pointers presently path 
potentially path pointers path pointer ii pointers interfere pointer 
second possibility interference relationships 
note due possibilities number spurious relationships generated 
example generate spurious relationships path pointers paths interfere set direction relationships stated follows 
gen set relationships pointer path pointers path link direction matrix find pointers path identify pointers path specific link 
conservatively assume having path pointers path 
statement reported having paths pointers path spurious 
note path assumption reported path statement 
data structure accessible acyclic tree dag path back tree reported having path set direction relationships summarized sake clarity simply labeled node stack resident pointer points explicitly representing stack 
gen set cycle gen set obtained sets 
interference relationships statement pointer potentially interfere pointers presently interferes 
set newly generated interference relationships gen set despite potentially introducing spurious relationships statement affect shape data structure accessible gives new name heap objects belonging data structure 
data structure accessible data structure accessible safe assign shape attribute giving attribute matrix possible cycle shape structure accessible link tree 
detect information available conservatively say cycle 
tree lose tree attribute dag preserve acyclic property data structure accessible note simply deduce shape attribute direction relationships statement may lose tree dag attribute 
separately abstracting shape attribute proves critical identifying tree dag data structures 
structure updates structure updates form null nasty statements shape analysis imperative programs statements drastically change shape connectivity heap structures 
goal get accurate kill gen information overly complex abstraction 
choice practical technique simple abstractions live overly conservative gen kill sets types statements 
combination abstractions able perform accurate shape estimation important cases 
discuss analysis statements detail 
analyzing basic heap statement null statement breaks link emanating heap object pointed statement longer paths pointers presently paths exclusively link discussed information obtained direction interference matrices 
relationships killed 
statement generate new relationships 
shape attribute pointer may change statement disconnects data structure due dag cycle 
direction interference information suffice detect cases err conservatively leaving attributes unchanged 
note due lack precise kill information statement tree structure temporarily dag cyclic tree swapping children tree analysis continue report shape dag cycle 
statement breaks link resets linking heap object pointed heap object pointed shown 
discussed relationships killed breaking link obtained information available 
resetting link results generating new relationships modifying attributes pointers discussed 
pointers having path including path link pointers paths pointers paths 
pointers paths pointers statement 
set direction relationships generated summarized follows gen set pointer interferes pointer statement 
statement pointers interfere demonstrates pointers having path potentially interfere pointers interferes 
get set new interference relationships gen set statement considerably affect shape attribute pointers direction relationships pointers situations depending current attributes direction relationships pointers pointer path statement path back cycle generated illustrated case 
cycle accessible pointers presently path including shape attribute pointers cycle 
summarize case follows cycle situation arise possibilities tree case tree structure accessible pointers presently path data structures pointed initially completely disjoint statement simply connects tree substructure data structure pointed affect shape attribute pointer 
illustrates case 
shape attribute pointers initially path interfere dag presently tree 
pointers fall category 
shape attribute pointer dag cycle remains unchanged 
words shape attribute analyzing basic heap statement direction relationships impacting shape attribute pointers merge current attribute dag attribute merge operator shape attribute defined follows tree dag cycle tree tree dag cycle dag dag dag cycle cycle cycle cycle cycle case formally summarized follows tree dag tree case shape attribute pointers path merged shape attribute required data structure accessible accessible pointers statement 
summarize case follows tree rules noticed considerable number spurious direction interference relationships introduced analysis 
empirical results section indicate analysis provides effective shape information broad range programs efficient manner 
implementing shape analysis mccat compiler shape analysis implemented contextsensitive interprocedural analysis mccat optimizing parallelizing compiler 
flow sensitive analysis collects program point specific information 
analysis performed simple intermediate representation simplified compositional subset 
shape analysis performed points analysis focuses subset pointers reported pointing heap points analysis :10.1.1.25.6013
reduces storage requirements abstractions implementation easier efficient 
analysis framework similar points analysis 
noted dataflow frameworks basic abstraction rules previous section 
particular implementation structured simple analysis basic statement form section compositional rule control construct context sensitive approach handling procedure calls 
presenting basic analysis rules section consider presence stack directed pointers 
take account actual implementation requires additional checks 
subtle point form may refer stack heap stack heap 
example calling context may point stack allocated object name calling context may point heap allocated object 
consider statement form points stack allocated object name appropriate analysis rule points heap allocated object appropriate rule implementation uses points information resolve form set possible stack heap locations applies appropriate simple shape analysis rules merging results outputs 
strategy handling control constructs illustrated gives analysis rule statement 
defines merge operators abstractions 
merge operator direction interference relationships simply logical operation possible may relationships 
merge operator shape attribute defined section 
note consider loop condition simple assignment feasible 
example involves pointer equality test null 
accurately handle procedure calls interprocedural analysis framework built points analysis 
provides complete invocation graph program constructed simple depth traversal invocation structure program 
invocation structure known statically recursive indirect calls handled special manner 
recursive calls represented special pairs recursive approximate nodes approximate node represents possible recursion 
indirect calls function pointers represented nodes indicating possible set functions invocable call site resolved points analysis 
framework contextsensitive interprocedural strategy depicted fig input matrices set pointers abstracted ign current invocation graph node fun process cond body ign previ process basic stmt cond process stmt body ign merge merge merge previ return merge merge merge analyzing statement ure 
complete rules interprocedural analysis scheme described 
briefly discuss pertinent issues 
general idea matrices direction interference attribute abstractions call site mapped prepare input matrices called procedure 
body procedure analyzed input matrices output matrices obtained unmapped returned call site 
approach time procedure call analyzed call chain exists unique invocation graph node corresponding 
recursive calls handled interprocedural fixed point computation special recursive approximate nodes invocation graph 
indirect calls handled separately analyzing invocable procedure call site merging outputs 
caller 
callee map process process function analysis interprocedural strategy main issue related map processes identifying set pointers attributes relationships modified procedure call 
set includes pointers global scope ii scope callee accessible indirect invisible variables iii accessible callee direction interference relationship pointer accessible callee inaccessible variables 
spe cial symbolic names generated represent invisible inaccessible variables capture attributes relationships calling context 
points analysis generates symbolic names invisible variables simply reuse 
inaccessible variables generate symbolic names parameter global related inaccessible variable 
name parameter global variable name represent inaccessible pointers paths name represent inaccessible pointers paths interfere procedure call mapping stored names calling context names called context globals parameters symbolic names 
complete description rules map processes 
order get full context sensitivity reduced price implemented simple memoization scheme 
time finish analyzing procedure call store currently computed pairs input output matrices invocation graph node corresponding 
call re analyzed call chain simply stored output invocation node current input identical stored input 
currently exploring techniques optimize interprocedural algorithm include excluding functions invocation graph update access pointer variables ii building invocation graph lazy manner demand different invocation contexts arises analysis iii performing extensive memoization trying calls procedure irrespective call chain appear 
experimental results benchmarks collected number small medium sized benchmarks variety sources 
table summarizes characteristics benchmark programs 
section gives source lines including comments counted wc utility number statements simple intermediate representation number gives estimate program size analysis point view 
second section gives minimum maximum average number variables abstracted direction interference matrices functions program includes symbolic variables introduced analysis 
numbers indicate size abstractions memory requirements analysis program 
note average varies stanford sim quite reasonable respect space requirements bit matrices 
third section gives total number indirect program number indirect dereferenced pointer point stack location heap location stack heap location typically happens formal parameter receives stack directed pointer invocation function heap directed pointer 
benchmarks table substantial number indirect majority indirect refering heap locations benchmarks assembler loader 
benchmark set suited evaluating heap analysis results estimate effectiveness shape analysis set measurements table refs number heap related indirect benchmark 
columns respectively give number heap related indirect program dereferenced pointer say points tree dag cyclic data structure tree dag cycle attribute matrix program point 
multi columns labeled heap directed pointer table separately give measurements indirect respective form 
multi column labeled gives statistics program 
table compare actual shape data structure program builds reported analysis observe shape information useful improving dependence information parallelization 
tables programs divided groups 
top group corresponds programs build tree data structures candidates shape analysis 
programs determine structures fact trees information useful 
remaining programs reverse sim conservatively find structures dags shape information slightly useful 
bottom group programs build structures inherently dag graph note access form simply considered pointer indirect pointer pointer 
indirect form counted indirect form simplification expresses temp temp reason benchmarks arrays pointers may indirect type 
program source simple min max avg ind stack lines stmts vars vars vars refs stack heap heap bintree xref misr stanford hash power reverse assembler loader sim blocks sparse pug table benchmark characteristics shape analysis gives correct shape programs shape information really detailed improving dependence testing parallelization 
shape information useful way automatically determining higher level heap analysis applied 
observations data tables examination benchmark programs observations 
program builds tree data structure manner new node appended existing structure shape analysis successfully infers shape data structure tree 
happens case data structure temporarily lose tree attribute 
benchmark set bintree xref stanford build binary trees appending new node leaf node hash misr loader assembler build linked lists appending new item list 
shape attribute programs accurately estimated 
tree dag data structure built modified inserting new nodes existing nodes shape analysis provides conservative estimates reports shape dag cyclic 
code fragment illustrates case newnode newnode newnode newnode just statement old node new node path statement kills path old node link sets path old node new node 
analysis detect kill information finds old node additional path new node path 
reports shape attribute dag 
insertions done apparently dag structure analysis overly conservative reports final shape attribute cycle 
case applies benchmarks sim blocks 
data structure temporarily dag cyclic tree shape analysis detect continues report shape dag cyclic 
benchmark reverse recursively swaps binary tree represents case 
shape analysis abstracts pointers array pointers say pointer relationships attribute pointer represent merge relationships attributes pointers denotes pointers 
shape attribute pointer reported tree guaranteed array indices point tree structures completely disjoint structures pointed array indices say share node shape attribute reported dag cycle 
benchmark set hash uses array pointers linked lists power implements power network tree root having array pointers disjoint subtrees 
get shape attribute arrays tree 
example simplified version loop builds power tree follows program refs refs refs bintree xref misr stanford hash power reverse assembler loader sim blocks sparse pug empirical measurements shape analysis program actual data structure built shape shape shape info 
reported correct useful bintree binary tree tree xref binary tree linked list hanging node tree misr linked list tree game tree linked list tree stanford binary tree tree sort tree hash hash table array linked lists tree power tree implementing power network tree reverse binary tree recursively swapped dag slightly assembler linked list tree loader linked list tree sim array linked lists dag slightly arrays interconnected linked lists dag dag slightly blocks constraint graph data structure dag dag cycle partially slightly leaf linked octree dag cycle sparse sparse matrix linked lists cyclic cycle pug complex cyclic structure cycle accuracy usefulness shape information table experimental results struct root malloc temp temp temp temp loop function call build lateral returns tree iteration connected ith index pointer array temp 
iteration disjoint tree connected shape pointer array temp deduced tree 
computation benchmark performed loop iterates array 
important segment loop simplified format follows temp temp thetar thetar thetai thetai thetar thetai thetar thetai 
loop know shape information iteration pointer points disjoint tree operated function compute lateral 
loop effectively parallelized provided dependencies due variables case 
demonstrates shape analysis provide critical information dependence analysis parallelization 
benchmark uses arrays pointers linked lists 
lists share nodes consequently shape gets reported dag 
benchmarks sparse pug inherently cyclic data structures back pointers 
majority indirect fall cycle category 
ones tree category represent newly allocated nodes connected main data structure program 
shape information direction interference relationships useful 
example identify data structures accessible pointers say share node needs simply check interference matrix entry set 
similarly direction matrix information aid programmer safely deallocating memory 
call site free live pointer path may safe deallocation 
currently exploring effectiveness direction interference information applications 
interprocedural measurements shape analysis context sensitive interprocedural analysis 
table invocation graph characteristics benchmarks 
columns table give total number functions called program total number call sites program total number nodes invocation graph 
columns give number recursive approximate nodes number nodes call site 
table dynamic interprocedural measurements shape analysis 
columns give total number procedure calls analyzed number procedure calls get memoized actual number procedure calls get analyzed 
columns give average number procedure calls analyzed column labeled act function call site invocation graph node 
averages calculated dividing number act column appropriate number columns table 
program fns call ig rec app nodes sites call site bintree xref misr stanford hash power reverse assembler loader sim blocks sparse pug table static interprocedural measurements interesting observations results tables 
benchmarks size invocation graph explode complete contextsensitive analysis reasonable cost 
benchmarks large invocation graphs exploring aggressive memoization techniques handling programs discussed section 
interesting note large number procedure calls get memoized simple scheme reuses output values invocation node visited previously computed input 
observed table majority benchmarks recur program calls analyzed avc avi tot mem act bintree xref misr stanford hash power reverse assembler loader sim blocks sparse pug table dynamic interprocedural measurements sive approximate invocation graph nodes 
programs recursive data structures employ recursion control structure traverse modify 
implies useful shape analysis handle interprocedural analysis handle recursive programs safe accurate manner 
analysis approximates shape dynamic data structures programs 
shape analysis part hierarchy pointer analyses implemented mccat compiler directed programs simple recursive data structures built compositionally 
analysis completely implemented tested benchmark programs 
experimental results show provide accurate results programs build simple data structures 
programs building lists trees arrays lists trees provide useful information optimization parallelization 
programs major structural changes data structure shape abstraction powerful give accurate results results safe 
analyses handle cases substantially complicated difficult implement real compilers 
approach cheapest simplest analysis possible program consideration 
program fits target class shape analysis apply expensive complex analysis 
plan extend shape analysis create level analysis hierarchy enriching direction abstraction keep information link path partial implementation path matrices complex attribute matrix abstracts shape data structure respect certain links 
hoped analysis able handle structures leaf linked trees trees parent pointers improve accuracy information face structural updates giving better kill information 
positive results experiments plan apply heap analyses larger programs continue development efficient interprocedural strategies 
choi burke carini 
efficient flow sensitive interprocedural computation aliases side effects 
conference record twentieth annual acm sigplan sigact symposium principles programming languages pages january 
rogers carlisle reppy hendren 
supporting dynamic data structures distributed memory machines 
acm transactions programming languages systems march 
chase wegman zadeck 
analysis pointers structures 
proceedings sigplan conference programming language design implementation pages june 
deutsch 
model aliasing abstractions finite representations right regular equivalence relations 
proceedings international conference computer languages pages april 
ieee computer society press 
deutsch 
interprocedural may alias analysis pointers limiting 
proceedings acm sigplan conference programming language design implementation pages june 
emami ghiya hendren 
contextsensitive interprocedural points analysis presence function pointers 
proceedings acm sigplan conference programming language design implementation pages june 
hendren 
taming control flow structured approach eliminating goto statements 
proceedings international conference computer languages pages may 
emami 
practical interprocedural alias analysis optimizing parallelizing compiler 
master thesis mcgill university july 
gagnon 
fast forward lazy points analysis 
acaps project report mcgill university may 
ghiya hendren 
connection analysis practical interprocedural heap analysis proceedings workshop languages compilers parallel computing august 
ghiya 
practical techniques interprocedural heap analysis 
master thesis school computer science mcgill university may 
harrison iii 
interprocedural analysis automatic parallelization scheme programs 
lisp symbolic computation 
hendren emami gao sridharan 
designing mccat compiler family structured intermediate representations 
proceedings th international workshop languages compilers parallel computing number lecture notes computer science pages august 
springer verlag 
published 
hendren emami ghiya 
practical context sensitive interprocedural analysis framework compilers 
acaps technical memo school computer science mcgill university july 
hendren gao 
designing programming languages analyzability fresh look pointer data structures 
proceedings international conference computer languages pages april 
ieee computer society press 
hendren hummel nicolau 
abstractions recursive pointer data structures improving analysis transformation imperative programs 
proceedings acm sigplan conference programming language design implementation pages june 
hendren nicolau 
parallelizing programs recursive data structures 
ieee transactions parallel distributed systems january 
horwitz pfeiffer reps dependence analysis pointer variables 
proceedings sigplan conference programming language design implementation pages june 
jones muchnick 
program flow analysis theory applications chapter flow analysis optimization lisp structures pages 
prentice hall 
jones muchnick 
flexible approach interprocedural data flow analysis programs recursive data structures 
conference record ninth annual acm symposium principles programming languages pages january 
acm sigact sigplan 
klarlund schwartzbach 
graph types 
conference record twentieth annual acm sigplan sigact symposium principles programming languages pages january 
larus 
compiling lisp programs parallel execution 
lisp symbolic computation 
larus hilfinger 
detecting conflicts structure accesses 
proceedings sigplan conference programming language design implementation pages june 
larus hilfinger 
restructuring lisp programs concurrent execution 
proceedings acm sigplan parallel programming experience applications languages systems pages july 
murphy li culler khalil 
decentralized optimal power pricing 
proceedings supercomputing pages november 
landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages june 
plevyak chien karamcheti 
analysis dynamic structures efficient parallel execution 
proceedings th international workshop languages compilers parallel computing number lecture notes computer science pages august 
springer verlag 
published 
reps shape analysis generalized path problem 
proceedings acm sigplan symposium partial evaluation semantics program manipulation pepm pages june 
ruf 
context insensitive alias analysis reconsidered 
proceedings acm sigplan conference programming language design implementation pages june 
sagiv reps wilhelm 
solving problems languages destructive updating 
conference record third annual acm sigplan sigact symposium principles programming languages january 
sridharan 
analysis framework mccat compiler 
master thesis mcgill university september 
steensgaard 
points analysis linear time 
conference record third annual acm sigplan sigact symposium principles programming languages january 
wilson lam 
efficient context sensitive pointer analysis programs 
proceedings acm sigplan conference programming language design implementation pages june 

