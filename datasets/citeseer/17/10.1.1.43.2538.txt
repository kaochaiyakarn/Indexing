loop pipelining optimization run time reconfiguration viktor prasanna department electrical engineering university southern california los angeles ca usa 
usc edu usc edu reconfigurable architectures workshop raw 

lack automatic mapping techniques significant hurdle obtaining high performance general purpose computing reconfigurable hardware 
develop techniques mapping loop computations applications high performance pipelined configurations 
loop statements generalized directed acyclic graph dependencies mapped multiple pipeline segments 
pipeline segment executed fixed number iterations hardware reconfigured runtime execute segment 
reconfiguration cost amortized multiple iterations execution loop statements 
alleviates bottleneck high reconfiguration overheads current architectures 
describes heuristic techniques construct pipeline configurations reduced total execution time including runtime reconfiguration overheads 
performance benefits achieved approach illustrated mapping example application loop virtex series fpga xilinx 
reconfigurable computing demonstrated significant performance gains classes applications 
application mapping configurable hardware necessitates expertise low level hardware details 
automatic mapping applications configurable hardware necessary deliver high performance general purpose computing 
address issues mapping application loops reconfigurable hardware optimize total execution time 
total execution time includes time spent actual execution hardware time spent reconfiguring hardware 
configurable hardware utilized execute designs larger available physical resources 
run time reconfiguration rtr computations facilitates dynamic adaptation hardware suit design area computational requirements 
current devices reconfiguration supported darpa adaptive computing systems program contract dabt monitored fort 
time significant compared execution time 
focus developing mapping techniques exploit rtr attempt reduce reconfiguration overhead 
accomplished amortizing reconfiguration overheads execution large number iterations loop 
loop statements contribute significantly large component execution time application 
pipelined designs structured map configurable devices 
reconfigurable architectures including fpga devices provide excellent support pipelining regular logic block layout large number registers 
pipelined designs reduced predictable delays local interconnections 
mapping loop computations pipelined configurations proves effective configurable hardware 
develop techniques map computations loop reconfigurable hardware 
data dependencies loop statements constitute directed acyclic graph dag 
loop statements mapped pipelined configurations executing reconfigurable hardware 
mapping techniques attempt minimize total execution cost computations including reconfiguration cost 
statements split multiple pipeline segments executed sequentially fixed number iterations 
reconfiguration performed execution pipeline segment execute segment 
generating optimal schedule task graph np complete problem 
heuristic algorithms utilized reduce reconfiguration cost different pipeline segments 
compare effectiveness heuristics greedy heuristic list scheduling 
mapping techniques promise potential performance improvement classes fpgas 
evaluate performance mapping techniques virtex series fpga xilinx 
section describe related research addresses similar issues 
heuristic algorithms described detail section illustrated example 
section evaluate performance benefits achieved approach 
draw approach section 
related pipelining designs studied researchers configurable computing domain 
address issues mapping virtual pipelines physical pipeline incremental reconfiguration context piperench 
luk describe pipeline morphing virtual pipelines idea reduce reconfiguration costs 
pipeline configuration morphed configuration incrementally reconfiguring stage stage computations performed remaining stages 
describes generation pipelined circuits parallel loops high level programming language 
developed pipeline vectorization techniques 
research addressed related issues mapping circuits reconfigurable hardware 
prior research developed techniques mapping application loops 
focus run time reconfiguration different granularity 
approach exploit run time reconfiguration achieve high performance schedule infrequently minimize overheads 
algorithmic pipeline construction partial reconfiguration runtime exploited achieve goal 
pipeline construction speed obtained configurable logic increases computations loop increase 
configurable resources available lower required resources pipeline computations loop 
case pipeline segmented run pipeline stages reconfigured execute remaining computations 
consider loops loop carried dependencies 
loops dependencies different iterations loop 
loop transformations applied remove existing loop carried dependencies 
assume number iterations executed significantly larger number pipeline stages 
cycles involved filling emptying pipeline insignificant compared actual execution cycles pipeline stages 
execution complete loop decomposed multiple segments fixed number iterations segment executed sequence starting segment 
segment consists multiple pipeline stages 
logic reconfigured segment execute segment 
intermediate results segment execution stored memory 
execution sequence segments repeated required number iterations loop completed 
assume reconfiguration different segments controlled external controller host processor 
definitions reconfigurable architecture configurable logic array size theta intermediate memory size basic goals approach exploit chip memory fast access local sram provided reconfigurable architectures 
represents size memory 
input task specification dependency graph application tasks loop executed iterations 
task node denotes operation performed inputs specified incoming edges node 
directed edge ij denotes data dependency nodes 
weight ij edge denotes number bits data communicated nodes 
output pipeline sequence oe pipeline segments oe oe oe segment oe consists number stages iq pipeline stages mapping computational task nodes configurations device 
stages ij configuration executes specific task input task graph 
size pipeline stage length ij width ij stages segment null stages actual tasks just place holders explained section 
segment clock speed pipeline segment oe executed different clock speed oe depending maximum clock speed stages segment operate 
segment data output pipeline stage ij global outputs outgoing edges task node node mapped pipeline segment 
size segment data output pipeline stages segment oe sum global outputs stages segment 
segment iteration count number iterations oe pipeline segment executed reconfiguring execute segment 
oe depends size available memory store intermediate results 
assume initial final results communicated external memory 
oe min ae oe gamma reconfiguration cost reconfiguration cost loop total cost involved reconfiguring segments pipeline configuration 
includes cost configuring segment segment oe reconfiguration cost segments difference pipeline configurations 
partial reconfiguration device columns assumed computation 
number logic columns configurations different measure reconfiguration cost 
corresponding stages different segments dissimilar reconfiguration cost accounts multiple adjacent stages need reconfigured 
total execution time total execution time sum execution times segment total reconfiguration time 
oe oe loop phase pre processing mapping phase computation tasks input dag mapped components logic device 
components chosen set library components available executing application tasks task graph 
different components different logic area execution time tradeoffs potentially different degrees pipelining footprint device layout 
library component highest degree pipelining satisfies constraints specified task graph precision inputs chosen task 
proposed approach illustrated mapping scheduling body simulation application fft butterfly computation 
resulting task graphs phase dependency edges shown 
graph operations represented addition multiplication subtraction sh shift right bits divide 
operations graph bits weights edges indicated 
phase partitioning partitioning phase generates multiple partitions size partition smaller size device 
phase attempts optimize criterion maximize size partition minimize weight edges partitions 
criterion improves logic utilization second criterion reduces memory required buffer intermediate results generated partition pipeline segment 
sketch partitioning algorithm intricate details 
heuristic multi way partitioning incrementally generate partitions 
largest size node chosen list ready nodes inputs computed added current partition 
nodes added current partition new partition initiated 
adding ready node partition heuristic uses sums weights edges weight edges nodes weight edges nodes weight edges nodes weight edges neighbors neighbor edge node weight edges nodes neighbors node chosen node 

gamma 
gamma 
primary inputs outputs considered computing weights 
largest node fits current partition satisfying condition added current partition 
ties broken height node different weights edges listed 
resulting partitions illustrated partition number nodes graph 
routing considerations algorithm partitioning task graph assumes routing resources communicate different pipeline stages fig 

body simulation task dag fft task dag partition numbers pipeline stages memory 
pipeline stages global inputs outputs 
data inputs outputs adjacent pipeline stages non adjacent stages memory 
data outputs pipeline stages buffered registers consumed stages 
routing resources important consideration mapping communication non adjacent pipeline stages 
experiments discovered fpgas virtex routing register rich support pipeline able designs 
number bits data computed stage typically equal number logic cells utilized 
stage stage communication routing resources nearest neighbor interconnect 
extra routing logic resources buffering multiplexing utilized data values communicated non adjacent pipeline stages 
partitioning algorithm remaining area partition reduced reflect buffering requirements 
limitation approach partitions bad memory performance computation highly irregular large number data dependencies dag 
approximation routing resources results infeasible designs cases 
applications circuits mapped available logic routing resources 
phase pipeline segmentation configuration pipeline generated partitions computed phase algorithm 
partition utilized generate segment pipeline 
goal segmentation phase generate permutations pipeline stages segment reduce reconfiguration costs segments 
heuristic matching corresponding stages different pipeline segments 
partition nodes height flexibility mapped order pipeline 
addition node mapped pipeline successors partition mapped 
algorithm proceeds identifying list tasks partition ready scheduled 
task node ready predecessors scheduled segment 
step maximal matching set task nodes identified set ready lists partitions 
maximal matching set corresponds task node occurs partitions 
step schedules similar nodes different partitions different segments 
enables reduction reconfigurations costs runtime 
ready lists updated scheduling set nodes 
resulting pipeline schedules different segments shown table table 
segment segment segment segment segment segment table 
schedules body simulation greedy scheduling schedule phase segment mm segment segment segment segment table 
schedules fft greedy scheduling schedule phase reconfiguration null stages reconfiguring null stage computation stage accomplished small modifications pipeline design 
data values previous computation stage communicated directly output register addition flowing computational units 
input multiplexers utilized output registers latch values 
run time reconfiguration partial reconfiguration needs modify sram bits controlling configuration multiplexers 
reconfiguration cost significantly lower reconfiguring datapath 
results evaluate performance techniques comparing greedy heuristic list scheduling 
greedy schedule chooses largest available ready node stage pipeline 
new pipeline segment function segmentation partition mapped false num partitions jp repeat num partitions ready fv jv partition mapped endfor num partitions ready count num partitions jt ype ype ready gj curr null num partitions sel ready curr sel null sel ready segment segment phi sel sel null curr curr sel mapped sel true empty partition fig 

algorithm generate pipeline segments initiated nodes added current segment 
resulting schedule shown table table 
utilize modules parameters virtex component libraries 
modules utilized tabulated table 
number pipelined stages precision inputs size module mapped device listed table 
body simulation fft examples number slices reconfigured schedule shown table 
reconfiguration cost loop defined section 
heuristic algorithms significant saving reconfiguration cost 
translates direct reduction total execution time configuration 
worst case heuristic algorithms generate schedule greedy heuristic 
total execution cost computed applications data set size data points chip memory size kb 
example applications reconfiguration cost dominant cost module stages input slices speed add mhz add mhz subtract mhz shift mhz multiply mhz multiply mhz multiply mhz multiply mhz table 
virtex module characteristics greedy approach speedup body fft table 
reconfiguration costs number virtex slices execution application constitutes total execution time 
application speedups order speedups reconfiguration costs illustrated table 
shows heuristic approach performs significantly better greedy heuristic 
automatic mapping scheduling applications necessary achieving performance improvement general purpose computing applications reconfigurable hardware 
techniques address overheads involved reconfiguring hardware 
current architectures reconfiguration overheads significant compared execution cost 
proposed algorithmic techniques mapping scheduling loops applications reconfigurable hardware 
heuristics developed attempt minimize reconfiguration overheads exploiting pipelined designs partial runtime reconfiguration 
mapping example loops applications illustrates proposed algorithms generate high performance pipelined configurations reduced reconfiguration cost 
explore interaction proposed techniques techniques parallelization vectorization 
reconfigurable hardware specific optimizations clock disabling pipeline stages runtime modification interconnection reduce reconfiguration cost examined 
reported part usc project 
project developing novel mapping techniques exploit dynamic self reconfiguration facilitate run time mapping configurable computing devices architectures 
domain specific mapping approach developed support instance dependent mapping 
concept active libraries exploited realize framework automatic dynamic reconfiguration 


modeling mapping dynamically reconfigurable architectures 
phd thesis university southern california 
preparation 

duncan hall jain ziegler 
defacto design environment adaptive computing technology 
reconfigurable architectures workshop raw april 

prasanna 
mapping loops reconfigurable architectures 
th international workshop field programmable logic applications september 

prasanna 
dynamic precision management loop computations reconfigurable architectures 
ieee symposium fpgas custom computing machines april 

buell arnold 
splash fpgas custom computing machine 
ieee computer society press 

goldstein schmit thomas 
managing pipeline reconfigurable fpgas 
proceedings acm sigda sixth international symposium field programmable gate arrays february 

chang marek 
partitioning sequential circuits dynamically reconfigurable fpgas 
ieee transactions computers june 

mei prasanna 
domain specific mapping solving graph problems reconfigurable devices 
reconfigurable architectures workshop april 

homepage 
usc edu 

kress hartenstein 
operating system custom computing machines paradigm 
th international workshop field programmable logic applications pages sept 

luk shirazi guo cheung 
pipeline morphing virtual pipelines 
th international workshop field programmable logic applications sept 

bhatia 
temporal partitioning scheduling data flow graphs reconfigurable computers 
ieee transactions computers june 

mei prasanna 
genetic programming fpgas 
international workshop field programmable logic applications september 

subramanian pande 
automatic analysis loops exploit operator parallelism reconfigurable systems 
languages compilers parallel computing august 


compilation pipeline synthesis reconfigurable architectures 
reconfigurable architectures workshop raw 
verlag april 

luk 
pipeline vectorization reconfigurable systems 
ieee symposium field programmable custom computing machines fccm april 

xilinx www xilinx com 
virtex series fpgas 
article processed macro package llncs style 
