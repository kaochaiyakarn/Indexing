verifying authentication protocols csp steve schneider department computer science royal holloway university london egham surrey tw ex uk steve dcs rhbnc ac uk presents general approach analysis verification authentication properties language communicating sequential processes csp 
illustrated examination needham schroeder public key protocol 
contribution develop specific theory appropriate analysis authentication protocols built top general csp semantic framework 
approach aims combine ability express protocols natural precise way facility reason formally properties exhibit 
authentication comes number flavours 
example gollmann identified different varieties authentication raises question particular authentication protocol kind authentication protocol designed kinds provides 
aim csp approach reduce questions security protocols properties questions concerning csp processes satisfy particular csp specifications 
approach forces separation properties protocols allows discussion meant particular kinds security property independently protocols intended achieve 
formal analysis entirely csp framework allows possibility verification protocols respect csp properties 
general csp framework proposed author described 
concerned theoretical foundations 
offers definitions security properties including authentication 
means csp description protocol precisely defined semantics precise mathematical question protocol meets property 
verification carried addressed purpose 
approach taken firstly express protocol csp 
authentication property consider states events system restricted events occur 
establish defining suitable predicate messages shows particular messages circulate restricted system messages possible 
csp particularly suitable describing protocols close level think 
contexts argument authentication essentially amounts unreachability analysis proof particular word language 
strength approach formal link argument natural description protocol 
formalisation protocol csp exposes issues forces design decisions may explicit original protocol description 
formalisation required authentication property likewise forces consideration precisely meant authentication 
useful know precise csp properties protocol guarantee 
strengths csp ease specialised theories constructed top semantic models 
allows particular specification statements defined terms standard semantics new proof rules appropriate specifications provided 
approach taken specify reason authentication properties agents inability generate particular messages 
standard proof rules support verification sound complete preferable develop specialised theory provides appropriate level abstraction supporting kind reasoning require 
reasons space details csp proof system csp algebraic identities underpin results 
fuller version 
needham schroeder public key protocol needham schroeder public key protocol aims achieve authentication participants 
public key cryptography participant public key available everybody private key known 
message encrypted public key requires corresponding secret key order decrypt 
original version protocol assumed participants know public key engaged message exchange trusted server order obtain 
participants knowing public keys protocol may distilled messages described 
refer ns 
pb pa pb participants protocol public keys pa pb respectively generates nonce na nb respectively 
informal explanation design protocol run follows sends nonce na encrypted public key 
receives message containing nonce na knows generated decrypt message obtain nonce na identity authenticated similarly sent nonce encrypted public key final message received containing nonce nb generated decrypted message sent 
authenticated participants know talking 
lowe describes unexpected execution protocol discovered model checking techniques csp description network running protocol 
run receives authentication talking fact talking intruder believes honest 
execution described follows denotes intruder masquerading words generating messages appear sent intercepting messages destined 
pb pa pa pb response nonce challenge message indicate response originated intruder able pass nonce challenge issued receives response passed authentication normally requires agent assume honest correctly follow steps protocol 
note attack acting honestly judgement concerning honesty questionable 
lowe fix lowe observed sequence messages prevented including identity responder second message identify originator ensuring checked 
resulting protocol described 
refer ns 
pb pa pb lowe observed model checking techniques find earlier flaw flaw protocol 
furthermore offered proof attack protocol attack necessarily finite csp description model checked 
attack attack protocol 
proof considered nature possible sequence messages embodying attack 
aims direct method verification csp description protocol hostile environment shown meet particular authentication properties 
proof provides insight design protocol correct 
protocol ns example running 
purposes illustrating approach consider single run protocol participants know roles advance having worked approach example show approach generalises multiple interleaved runs protocol different agents 
section introduces aspects language theory communicating sequential processes csp appropriate 
section constructs csp model analysing authentication protocols describes ns csp 
section introduces csp approach defining authentication properties considers properties required ns 
section describes theory verifying authentication protocols particular authentication requirements 
section carries verification ns 
section discusses generalisation analysis consider case multiple concurrent runs protocol 
section briefly discusses algebraic properties incorporated analysis 
discussion section 
csp csp language designed specifically description communication patterns concurrent system components interact message passing 
underpinned theory supports analysis systems described csp 
suited description analysis network protocols protocols described csp relevant aspects network 
interactions investigated certain aspects behaviour verified theory 
section introduces notation ideas 
particular traces model csp 
fuller language reader referred 
events systems modelled terms events perform 
set possible events fixed analysis denoted sigma 
events may atomic structure may consist number distinct components 
example event put consists parts channel name put data value 
example events form consisting channel source destination message sets messages set messages fm single message elide set brackets define fmg example set events fi channel said type message sigma processes processes components systems 
entities described csp described terms possible events may engage 
process process engage events equivalent deadlock 
output able initially perform output channel behaves input accept input type channel behaves 
event event form process pronounced choice behave possible communications indexed form choice able behave arguments processes may composed parallel 
set events process behaves acting concurrently requirement synchronise event synchronisation set events may performed process independently 
special form parallel operator components interact events jjj equivalent fg processes may recursively defined means equational definitions 
process names appear left hand side definitions csp expressions may include names appear right hand side 
example definition light light defines process light possible behaviour perform alternately 
mutually recursive processes may defined possibly infinite collection process names appear left hand side definitions csp expressions involving names appear right 
example set definitions count count count count count define collection processes count number events downs ups 
full discussion single mutually recursive process definitions see 
traces semantics process defined set sequences events traces may possibly perform 
examples traces include hi empty trace possible process hon oni possible trace light traces model csp gives formal definition set traces associated csp process 
process associated non empty prefix closed set traces tr tr possible trace tr useful operator traces projection set events trace tr defined maximal subsequence tr events drawn singleton set fdg overload notation write tr tr fdg 
message extraction tr set channel names provides maximal sequence messages passed channels tr provides set messages tr passed channel tr sequence oe tr set events appearing sequence 
operator oe extends processes oe set events appear trace specification specifications predicates traces process satisfies specification traces satisfy sat tr traces example specification states event occur event captured predicate tr tr tr tr hbi tr tr hi fact traces prefix closed allows simpler specification tr hi tr hi states occurs trace process satisfying specification traces meeting predicate means occur occurred trace tr prefix tr containing fail meet predicate 
csp model approach taken modelling analysing security protocols provide csp description dolev yao model 
assumed communications medium entirely control enemy block re address duplicate fake messages 
define generates relation describes new messages may derived existing ones means knowledge messages sufficient produce capture enemy ability fake messages 
roles passive medium active enemy described distinct csp processes enabled capabilities enemy separately described 
purposes preferable describe combination enemy medium single csp process enemy easier analysis 
set user consisting names agents network 
user associate process user describes user behaves 
process user communicates enemy means channel trans transmits messages channel rec receives messages 
oe user trans rec resulting network described follows net jjj user user trans rec enemy network pictured 
analysis protocol consider parties involved protocol usera userb describe respective roles play 
users connected system user obtain net usera jjj userb trans rec enemy retain names users set user retain potential enemy masquerade different user 
user user user 
enemy trans rec trans rec trans rec 
csp model network channels trans rec type user user message message trans thought node sending message destination source destination message 
message space message generally defined data type 
message space message space analysis protocol follows raw user text nonce key message raw key message message message fact example public key cryptography space key split public keys public secret keys secret user user key public secret rules concerning way messages may generated existing ones 
set rules defines generates relation 
fp fs description enemy natural csp description dolev yao model separates essentially passive medium medium intruder intruder able read messages medium channel leak manipulate removing adding messages channels kill add 
approach taken allows explicit modeling enemy actions 
verification purposes equivalent description easier proofs enemy trans enemy fmg user rec enemy process exactly traces combination medium intruder 
reads messages output users channels trans pass message generate user allows honest message passing redirecting messages replaying messages inventing new messages 
furthermore options possibilities imperatives possible messages blocked simply enemy exercising option passing 
set contains messages enemy knows time new message put user set augmented 
set init consisting enemy initial knowledge may contain items users names public keys nonces enemy may 
enemy enemy init agents implementing protocols place restrictions messages may passed trans turn restricts possibilities messages passed rec 
position prove messages passed rec initial set init messages input trans theorem enemy sat init tr trans tr rec protocol participants agents participants protocol modelled usera userb consisting csp implementations halves protocol 
obviously vary depending protocol modelled 
generally participants trusted third parties activity described csp processes 
purposes illustrating csp approach simplify analysis considering section case initiator knows responder knows 
description allow attacks parties act initiators senders 
assumption relaxed section party independently play role 
user described process usera usera user trans rec trans process allows user chosen communication trans sends encrypted nonce challenge transmit channel trans intended destination enemy interfere source destination fields messages third filed messages simply track information concerning intentions expectations participants protocol 
case tracks fact user believes running protocol second communication form rec 
appears receive channel rec apparently source form message pa indicates process accept input encrypted pa nonce na included user identity nonce 
pattern matching message input corresponds assumption message fails match pattern ignored modelling blocking receipt accepting throwing away user processes simply engage message match pattern 
practice achievable especially cases agent decrypt message finding particular form 
affect ability enemy attack protocols described way 
typing messages implicit pattern matching 
type channel determines range possible messages match pattern 
range permissible inputs rec depends type correct run protocol nonce ability type messages input accept arbitrary message purposes assume inputs defined pattern matching conform expected type 
amounts assuming possible message type mistaken message type 
typing assumption relaxed framework verification difficult general cases consider 
final communication trans consists response nonce challenge behaviour protocol participant described csp process userb userb rec pb trans rec message rec pb allows input message receive channel encrypted secret key 
apparent source match source message nonce 
pattern matching 
second message trans describes response message 
required response nonce nonce challenge nb name encrypted public key originator message 
third message expected response apparent source nonce challenge nb possibility pb inputs blocked ignored 
authentication properties message oriented approach authentication discussed 
authentication considers set messages authenticate set messages occurrence element accompanied occurrence element sets taken disjoint 
trace specification may captured follows definition authenticates tr hi tr hi lemmas immediate consequence definition lemma sat authenticates sat tr hi lemma sat authenticates sat authenticates flavours origin authentication property treatment authentication terms sets messages allows extremely fine grained distinctions different flavours authentication property 
restrict authenticating message userb rec number possibilities message authenticate 
authenticating trans corresponds requirement occurrence final message guarantees initiated protocol run nonce na 
authenticating trans nonce corresponds requirement occurrence message guaranteed initiated protocol run possibly different nonce 
lemma yields implied property 

ftrans nonce authenticated corresponds requirement occurrence message guaranteed initiated protocol run possibly different user nonce 
lemma yields implied property property 

authenticating rec user nonce confirms received nonce challenge initiated run shown name contained second message 

rec user nonce user authenticated confirms received nonce challenge 
confirm initiated run 
authenticating trans confirms responded nonce challenge 

authenticating trans nonce authenticates responded challenge believed come necessarily nonce issued 
follows lemma implied property 

authenticating ftrans authenticates responded nonce challenge necessarily associate follows lemma implied property 

ftrans nonce authenticated confirms responded nonce challenge words verifies live 
follows lemma implied property property 
property strongest properties appropriate prove user reaches protocol reached protocol responded nonce challenge nb believed talking original protocol ns fails meet property meet weaker property proof provided 
verification obtain extremely specialised theorem applies authentication properties specific description net network 
theorem heart proof strategy 
provides sufficient list conditions achievement guarantees net sat authenticates theorem predicate messages init user sat maintains net sat tr hi predicate intended hold messages generated agent including enemy run protocol messages set prevented occurring 
intention show restriction means event occur 
conditions mean enemy sees messages satisfy generate messages satisfy condition states true users network restricted output message satisfy previously received message 
specification maintains defined maintains tr tr rec tr trans message received rec meets message sent trans meets predicate seen describing invariant stage protocol execution restricted hold message 
states hold message means message generated restricted turn means authenticates lemma 
problem particular protocol particular authentication property expressed terms find appropriate invariant true 
rank functions previous approach introduced rank function ae messages captured level encryption 
messages positive rank circulate system 
setting invariant taken ae 
rank function define invariant theorem terms ae order provide sharper description role played predicate 
cases may easier define terms rank function requires investigation 
verification property authentication property states rec pb nb authenticates trans pb nb confirms responded nonce challenge 
appropriate predicate verification ns respect property 
dependent descriptions usera userb property verified 
defined structural induction definition message space 
user text nonce nb secret public message public pa nonce message secret pa nonce message show theorem satisfied invariant order theorem applicable 
condition really amounts assumption initial information available enemy 
requirement init states enemy unable generate nonce possession secret key 
require proof formalises assumption making 
condition requirement interaction relation predicate 
may proven inductively considering clauses defining turn 
example consider clause 
inductive assumption 
possibilities public key secret key 
public key fact holds means holds required 
secret key implies 
establishes inductive step 
condition checked case single message constitutes pb 
follows definition 
condition checked usera userb means usera userb restricted trans introduce messages satisfy refer usera userb respectively restricted event 
consider usera rules csp allow restricted process rewritten sequential process follows usera trans user trans rec ae nb trans nb proof rules csp allow formal proof process satisfies maintains informal argument considering messages sends receives 
prove message received process meets predicate message sent 
proceed establishing message sent violates requirement 
message sent definition yields message sent violate requirement 
message pa received 
satisfy violate requirement requirement appropriate usera receives messages meet need consider case 
definition case na nonce 
disjunction implies nb 
case restricted usera sends messages violate requirement 
second case restricted user sends follows requirement violated 
completes proof 
turn attention userb restricting event trans intersect events userb performs userb process consider establish concerned runs userb lead authenticating event rec concerned runs apparent origin message agent identity message lead occurrence rec 
definition concerned user ba rec pb trans rec argument similar case message receipt pb 
requirement vacuously met consider case 
definition yields 
second message transmission pa nonce received message 
definition ensures message meets final message receipt message violate requirement maintains user ba sat maintains required 
final step technically restriction analysis userb case initiating agent means theorem proven usera jjj user ba trans rec enemy sat rec pb nb authenticates trans pb nb give technical justification restriction justified 
system unable perform event rec meets specification rec pb nb authenticates trans pb nb vacuously 
run userb particular agent may described user bj rec pb trans rec userb user user bj describes userb choice runs users 
description equivalent original userb input semantically identical choice fact user bj unable perform rec means composition usera enemy unable authentication property holds vacuously usera jjj user bj trans rec enemy sat rec pb nb authenticates trans pb nb reasoning user ba established holds case choice operator preserves specifications processes meet specification process consisting choice 
means user usera jjj user bj trans rec enemy sat rec pb nb authenticates trans pb nb fact forms parallel composition distribute choice obtain usera jjj user user bj trans rec enemy sat rec pb nb authenticates trans pb nb words net sat rec pb nb authenticates trans pb nb required 
multiple runs analysis performed system single run protocol take roles initiator responder respectively 
possible informally generalise verifications systems repeated runs protocol possible describe csp situation agents perform multiple runs protocol provide formal verification 
analysis single run allows attention focussed participants run 
case multiple runs appropriate model parties able engage runs parties restrict behaviour protocol run analysis 
approach shall take 
issue addressed concerns requirement fresh nonce protocol run 
may modelled csp infinite sequence nonces na nb kth run respectively 
kth run protocol defined terms occurs run th run commence 
general situation allows agent take role initiator responder independently run 
possibilities captured description user allowing th run point start th run 
particular user describes user point th run protocol ready executed 
soon begins description enables th run execute concurrently run earlier runs proceeding 
processes usera described follows usera user trans rec trans jjj usera rec pa trans rec jjj usera possibilities usera follows 
transmit message form trans corresponding usera initiating run protocol 
behaviour subsequent message rest messages appropriate protocol run possibilities usera protocol run 

receive message form rec message initiating protocol run subsequent behaviour continue protocol run offering possibility protocol run 
define usera usera user begins state runs performed 
description user userb exactly usera occurrences name replaced occurrences name appropriate version property description requirement rec authenticates trans theorem applicable descriptions usera userb including recursive ones 
predicate previously nb replacing nb definition established conditions met establish user trans sat maintains csp proof rule recursive definitions allows proof proceed structure similar proof single run 
proof rule states recursive definition shown preserve specification recursively defined process meets specification 
case considering wish show sat maintains usera restricted trans process defined terms 
rule states assumption sat maintains possible show sat maintains may deduce sat maintains assumption sat maintains means analysed messages th protocol run introduce need considered assumption means assume subsequent runs violate requirement 
analysis messages th protocol run entirely similar analysis carried single run protocol need reproduced 
main difference requirement incorporate extra case analysis equations wish allow equations message space 
natural ones describing relationship encryption decryption remove need definition generates relation reduce equality fmg covered 
properties associativity concatenation equations capture possible properties encryption mechanisms 
example encryption distributing catenation quite significant weakness equations imposed message space general presence allow additional attacks protocols 
useful understand conditions proof protocol correctness remains valid face equations 
fact impact equation proof may predicate 
defined structurally message space possible different ways constructing message may correspond contradictory values 
necessary check possibility arisen order proof remain valid 
check invariant defined necessary check equations 
states respects relevant equations 
easily shown respect 
hand respect 
fact invariant presence attempt construct led discovery attack nc nonce intruder generate 
pb pa pa pb pb run establishes possibility takes nb nonce challenge completion protocol provide authentication received nonce challenge discussion shown theory csp specialised provide theory reasoning authentication protocols 
process verification requires assumptions encryption mechanisms capability hostile agent explicit 
theory includes csp model framework containing protocol rules establishing authentication messages single agent general theorem deducing authentication agents properties respect invariant messages rules deriving required properties 
find construction invariant predicate forces consideration precise reasons protocol expected 
respect reflect understanding protocol designer understanding precise explicit 
failed attempts construct invariant may provide insight protocol provide authentication 
weak encryption mechanism allows provide authentication stated section difficulty finding invariant may lead discovery attack happened 
csp language common process algebras ccs provides language suitable description protocols natural way 
abadi gordon observe kind approach combines precise solid foundation reasoning protocols clear relationship implementations 
benefit process algebra approach identify precisely authentication property required protocol 
may left vague original formulation protocol performing verification gives information properties hold pinning precisely properties provided protocol 
vital question properties obtained required scope formal analysis really assessed intended protocol 
security properties may captured csp specifications alternatively terms equivalences processes done network built protocol required equivalent network describes effect correct operation protocol equivalence means protocol operate correctly context written process algebra distinguish actual protocol specification 
comparison approaches csp approach put forward author advocated encapsulation required properties terms interactions protocol agents users 
intention separate required properties way implementing 
property system described terms possible interactions environment internal events trans rec appear property description 
approach requires extra events connect authenticated appear protocol description captured usera userb descriptions follows usera connect trans rec trans userb rec pb trans rec authenticated top level requirement net trans rec sat authenticated authenticates connect essential proof strategy remain proposed high level description property purely terms interactions network environment 
proof rules remain unchanged additional assumption required messages meeting invariant introduced protocol agents environment guaranteed agents channels apart trans rec 
approach including additional control events protocol description appropriate abstracting away details protocol description providing clearer understanding protocol designer attempting achieve 
separation concerns allows authentication specifications formulated independently details particular protocol 
external events introduced csp approaches protocol analysis :10.1.1.27.6385
case analysis performed additional external events nonce challenge ok message included finer distinctions different flavours authentication 
approach simply straightforward extension approach fact taken introducing special events introduced mark particular points run protocol pinpointing directly 
issue interest definition concerned matching occurrences events event occurred definition allows arbitrarily events occur breaking authentication 
lowe discusses stronger version authentication requires authenticating event correspond different authenticated event terms requirement 
property important example authorisation financial transactions 
property captured strengthening definition follows definition authenticates tr tr authenticates follows immediately authenticates tr hi tr tr tr hi 
techniques developed concerned non injective authentication 
extension deal area ongoing research 
approach contrasts taken specifications roscoe calls intensional requiring protocol works expected sense 
properties expressed csp specifications independently protocol really correspond recipe providing specification appropriate particular protocol 
example gollmann identifies number authentication properties closest considered states origin messages protocol authenticated 
treat conjunction authentication properties authenticating authenticating authenticating stipulating authentication required protocol run complete examples gives canonical intensional specification interleavings messages different agents accordance messages protocol slightly weaker requires participant completes part protocol run participant engaged sequence events described protocol 
intensional properties formulated particular protocol csp terms independently protocol 
correspond recipes producing specification appropriate protocol 
different process algebraic approach taken abadi gordon pi calculus extended spi calculus model encryption 
resulting language allows protocols described straightforward way treatment freshness nonces keys explicitly provided process description language encapsulation operator provides natural pleasing model nonce key generation 
correctness protocol established showing testing equivalent specification process describes explicitly protocol intended achieve 
words indistinguishable context 
result enemy modelled explicitly 
capabilities enemy precisely described spi calculus language context distinguishing protocol specification describe attack protocol conversely context distinguishes protocol implements specification context enemy may described spi calculus 
contrasts approach taken specification separated extent protocol allows finer distinctions drawn different notions authentication 
explicit description enemy allows analysis regard different enemy capabilities framework 
comparative examples required explore relative merits approach 
approach providing invariant core proof complementary tools approaches search attacks 
results kind analysis provides useful information protocol correct alternatively gives bald statement attack 
appropriate debugging provide understanding protocol correct 
claim invariant provides basis understanding profitable explore interplay state exploration approaches proofs 
problem concerns relationship finite nature state space infinite possibilities attacks arise aspects possibility arbitrary depths encryption combining messages lowe begun consider proof strategy general form protocol run establishing absence attack finite state space really imply attack possible infinite state space 
invariant approach useful context 
paulson investigated application proof tool isabelle hol proving security properties protocols 
specifies security protocols terms traces system 
rounds protocol translated rules system traces may augmented 
possible enemy activities rules 
rules identified aim prove system trace generated rules meet required property established induction 
explicit invariant aims prove particular messages occur trace requires certain lemmas establishing particular classes message occur 
feature approach taken applies language theory establish particular terms generated production rules 
mechanical assistance proofs invaluable paulson useful results concerning reusability proof strategies 
appears number protocols proofs similar shape allows efficient analysis new protocols 
providing mechanical assistance csp proofs pvs encouraging necessary provide invariant order proof proceed analysis january fresh protocols automatic paulson reports isabelle hol 
approaches direct proof protocols indirect route establishing absence attacks tend formal languages describing security properties rules support reasoning statements language 
protocols modelled rules allow derivation new statements existing ones 
best known example language ban logic need protocols logic means link protocol logical treatment informal 
formal language described contains lower level primitives relate directly steps taken protocol supports reasoning concerning knowledge intruder particular stages 
language conjunction nrl protocol analyser check reachability negated requirements closer tools approaches 
approach proof reflecting feasible 
directions approach analysing verifying authentication protocols driven part consideration needham schroeder protocol 
verification done hand cryptographic mechanisms considered straightforward nonces public key encryption 
obvious need investigate csp handling security mechanisms timestamps investigate complicated protocols 
security properties confidentiality investigated 
approach apply confidentiality properties properties may expressed terms unreachability 
form mechanical assistance proof appears feasible bring benefits managing details proofs cumbersome track 
theory rules described theorem prover pvs investigations continuing assistance provided finding invariant 
peter ryan irfan jeremy bruno andy gordon gavin lowe cathy meadows abraham sidiropoulos anonymous referees comments earlier forms 
pleasure bruno checking proofs pvs providing number corrections underlining necessity mechanical assistance proofs manageable 
am grateful defence research agency provision funding 
abadi gordon calculus cryptographic protocols spi calculus university cambridge draft 
burrows abadi needham logic authentication technical report src dec 
davies schneider recursion induction real time processes formal aspects computing 
diffie van oorschot wiener authentication key exchanges designs codes cryptography 
dolev yao security public key protocols ieee transactions information theory 
gollmann mean entity authentication ieee computer society symposium research security privacy oakland 
hoare communicating sequential processes prentice hall 
kemmerer meadows millen systems cryptographic protocol analysis journal cryptology 
lowe attack needham schroeder publickey authentication protocol information processing letters 
lowe breaking fixing needham schroeder public key protocol fdr tacas lncs 
lowe hierarchy authentication specifications preparation 
meadows applying formal methods analysis key management protocol journal computer security 
millen interrogator model ieee computer society symposium research security privacy oakland 
milner parrow walker calculus mobile processes parts ii information computation 
needham schroeder encryption authentication large networks computers communications acm 
owre shankar rushby pvs specification language computer science lab sri international 
paulson proving properties security protocols induction computer laboratory university cambridge 
roscoe modelling verifying key exchange protocols csp fdr proceedings csfw ieee press 
roscoe intensional specifications security protocols proceedings csfw ieee press 
schneider security properties csp ieee computer society symposium research security privacy oakland 
schneider csp protocol analysis needham schroeder public key protocol technical report csd tr royal holloway university london 
syverson meadows formal language cryptographic protocol requirements designs codes cryptography 
woo lam semantic model authentication protocols ieee computer society symposium research security privacy oakland 
