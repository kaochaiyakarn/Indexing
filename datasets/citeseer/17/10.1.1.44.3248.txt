xsb system efficiently computing founded semantics prasad rao sagonas swift david warren freire department computer science suny stony brook stony brook ny founded model provides natural robust semantics logic programs negative literals rule bodies 
implemented founded semantics slg wam xsb 
performance results indicate overhead delay simplification prolog tabled evaluations minimal 
compute founded semantics slg wam adds efficient tabling engine operations negative loop detection delay simplification serve detect break resolve cycles negation arise evaluating normal programs xsb full prolog system closely approximates iso standard additionally supports tight integration tabled predicates predicates 
xsb research oriented logic programming system unix windows dos systems 
addition providing functionality prolog xsb contains features usually logic programming systems including ffl evaluation founded semantics full slg resolution ffl compiled hilog implementation ffl variety indexing techniques asserted code novel transformation technique called unification factoring improve program speed indexing compiled code ffl source code availability portability extensibility 
components xsb psb prolog version sb prolog 
xsb prolog system avoid referring xsb availability slg resolution handling hilog terms 
facilities seemingly simple significantly extend capabilities typical prolog system 
feel capabilities justify viewing xsb new paradigm logic programming 
understand implications slg resolution recall prolog depth search strategy sld uses program clause resolution :10.1.1.38.8814
prolog susceptible getting lost infinite branch search tree may loop infinitely 
slg evaluation available xsb correctly evaluate logic programs 
take simplest examples query program table ancestor 
ancestor parent 
ancestor ancestor parent 
terminate xsb ancestor compiled tabled predicate prolog systems go infinite loop 
user declare slg resolution predicate table declarations 
alternately auto table compiler directive direct system invoke simple static analysis decide predicates table 
power solve recursive queries proven useful number areas including deductive databases language processing meta interpreters program analysis 
efficiency implemented slg machine level tabled predicates executed speed compiled prolog 
note definite programs slg resolution similar tabling methods oldt resolution tabling possible evaluation programs negation 
logic programming rules negation paradoxes possible 
example consider russel paradoxes barber town person shave written logic program 
table 
barber person person person person person 
person barber 
person mayor 
logically speaking deduce barber mayor skeptical semantics undefined barber 
founded semantics treat true false undefined 
prolog course enter infinite loop 
xsb treatment negation discussed section 
second important extension xsb support hilog programming 
due space limitations hilog discussed detail :10.1.1.52.7860
xsb available different platforms dos microsoft windows windows windows nt running sun workstations sun running sunos solaris machines running mach machines running linux bsd solaris nextstep silicon graphics machines running irix hewlett packard series machines running hp ux running ultrix machines running ibm rs machines running aix sony news workstations running news os higher 
xsb prolog system slg hilog 
prolog system xsb interesting features fast compilation dynamic code 
ii object file compilation 
iii module system inference symbol usage compilation 
iv dynamic loading prolog code 
goal xsb provide implementation engine logic programming memory deductive database queries :10.1.1.48.4048
prerequisite functionality ability load large amount data quickly 
taken care code compiler asserted clauses 
result speed asserting retracting code faster xsb prolog system know 
time asserted code compiled slg wam code speed executing asserted code xsb faster 
note xsb follow semantics assert specified 
compile programs directly memory generates slg wam object code called byte code files 
object files executed directly emulator usual loaded interpreter byte code file executed emulator 
compiler libraries xsb system stored byte code files source code included standard system distribution 
module system users choose xsb file module file atom non predicate symbols normally assumed global modules flat modules nested 
dynamic loader lazily loads files containing predicates called useful reducing program space start time 
files loaded explicitly standard predicates consult 
note xsb continuous development document reflects current status version system 
taken great effort create robust efficient system emphasize xsb research system degree experimental 
research features xsb tabling hilog indexing techniques discussed document 
documents related world wide web anonymous ftp cs sunysb edu host xsb obtained :10.1.1.52.7860
rest organized follows section describes slg evaluation computation founded semantics xsb 
noteworthy features xsb mentioned section 
section briefly comments performance xsb 
conclude discussion section 
slg evaluation xsb differs prolog systems ability slg resolution uses type tabling addition sld resolution 
difference evaluation strategy means appropriate declarations xsb complete founded semantics non floundering normal programs negation terminates programs bounded property explained 
tabling allows different declarative programming style prolog number problems 
sections provide brief slg resolution implemented xsb 
tabling consider prolog program ancestor parent 
ancestor ancestor parent 
query ancestor 
program simple declarative meaning ancestor parent parent ancestor prolog compute answer query enters infinite loop 
inability prolog answer queries arise frequently comprises major limitations implementation logic 
number approaches developed solve programs ancestor reusing partial answers query ancestor 
briefly ideas algorithms described manner 
program keeps track nodes calls ancestor 
maintaining information repeated call ancestor body second clause detected 
idea store partial solutions call table consists calls associated answers 
answers substituted call ancestor body second clause 
joined second literal second clause substitutions general produce new solutions query new solutions turn fed body second clause fixpoint reached 
language call leftmost goal called generator node expanded program clauses sld resolution prolog :10.1.1.38.8814
correct answer substitutions solution node table entry call plus returns call 
details see 
subsequent calls subsequent variant subsumed calls referred active nodes expanded answers derived goal program clauses 
computation ends possible program clauses expand generator nodes answers returned active nodes 
active nodes expanded answers program clauses tabling terminate set answers queries derivation finite situation occurs program finite model instance 
proven program bounded term depth property terms maximum depth slg computation terminate 
programs include important class datalog programs 
important notice differences tabling sld resolution termination properties 
termination requires solution call returned 
second way solutions stored returned active nodes xsb answers may returned user order 
left right dynamically stratified negation original definitions tabling algorithms considered definite programs extended tabling programs restricted forms stratified negation 
broadly program uses stratified negation recursion negation 
refining intuition lead array stratification classes 
xsb evaluates programs stratified evaluation especially efficient lrd stratified programs explain 
consider simple approach incorporate negation tabling assume avoid complications floundering entire program ground clause program contains variable 
predicates negative literals tabled evaluate query program simple manner 
time negative goal called separate table opened negative call 
evaluation carried termination 
terminates classes programs paragraph answers determine success failure calling goal 
method just sketched correct certain classes stratified programs terribly efficient 
time new negative goal called new table started run completion 
information derived computation answer new query possible 
xsb addresses problem keeping track state call program table 
call state called incomplete complete 
value called means fact table entry 
calls table entries may complete incomplete 
call complete table entry contains possible solutions implied program call incomplete scheduling strategy program clause expansions answer returns xsb allows efficient detection call may marked complete 
term consuming nodes case 
completion allows ground queries datalog programs negation computed polynomial data complexity 
concepts explain lrd stratified negation 
assume tabled evaluation described previous subsection subgoal evaluation uses information clauses calls solve literals clause searched fixed left right traversal prolog 
derivation path encounters negative literal say behavior evaluation varies depending state completed answer depending truth value path fails removed list subgoals resolved 
path suspended 
called evaluation calls incomplete answers evaluation proceeds clauses may help determine truth answer suspended derivation path failed determined completely evaluated answers removed derivation path resumes computation 
program evaluated method sketched called lrd stratified stratified 
adjective left right comes fixed order evaluation selects literals body 
adjective dynamic arises fact run time information central derivation path remains suspended 
lrd stratified programs evaluation method explained detail 
simple program lrd stratified fit stratification classes familiar class left right modularly stratified programs 
leaving subject stratification note completion forms basis evaluation programs stratified findall dynamic stratification simple rearrangement program previous section causes lrd stratified 
consider program evaluated method sketched 
programs called dynamically stratified may stratified particular evaluation order 
version xsb handles dynamically stratified programs delaying negative literals necessary look right clause simplifying away delayed literals truth value known 
ensure efficiency literals delayed engine determines stratified lrd stratified evaluation method 
non stratified negation russell paradox section illustrates negation appears logic program recourse valued logic may necessary describe semantics 
value ground atom may undefined addition true false 
perspective stratification programs dynamically stratified 
xsb fact handles programs evaluating founded semantics 
semantics natural extension programmer perspective 
shown program dynamically stratified valued founded model 
furthermore elaborate forms nonmonotonic reasoning stable models built founded model :10.1.1.24.6050
xsb provides residual program explained evaluate stable models program 
intuition founded semantics explained operations tabling 
consider tabling acts ground definite program 
ground atom true successful derivation atom false derivation path ends cases 
case path ends node selected generator literal program clause resolve literal away 
second path ends node selected active literal answer clause resolve literal away 
paths failed case goal said finitely failed goal failed prolog 
paths failed second case possible infinite loops prolog derivation prolog fail literal properly 
definite program action failing infinite recursion intuitive sense 
normal program recursion occur negation simply failing recursion inappropriate 
instance recursion negation failed atom fail 
model program making true false 
assigning true false program inconsistent problems reasoning program rule difficult best 
founded semantics seen extension dynamic stratification handle recursion negation 
atom successful derivation true wellfounded model 
stratified negation notion successful derivation may involve full evaluation negative literals completion remains intuitively clear 
clause defining fails delaying checking literals clause false 
cases occur undefined 
undefined successful derivation failed finite failure infinite positive recursion 
failed removing successful literals clauses define failing clauses failed literals recursion negation remains 
final point version xsb provides basis computing stable models program called residual program 
consider simple non stratified program 
stable models program true true 
founded model true false undefined 
mentioned slg delays literals truth value determined simplifies delayed literals away truth value known 
delayed literals simplified away may true false stable model program computation founded model performed xsb seen pre processor stable models 
pre processed program consists answers delay list conditional unconditional 
program called residual program program delayed literals treated body literals clause 
residual program program 
computing stable models problem 
residual program may evaluated away clauses body literals original program 
residual program may bring performance gain search space algorithms compute stable models correspondingly reduced 
noteworthy features section briefly touch features xsb 
indexing traditional prolog systems unsuitable data oriented applications data mining limitations sld resolution accessing data efficiently may require indices prolog argument indexing 
xsb offers variety indexing techniques asserted code 
clauses indexed groups arguments alternative arguments 
detailed description mode indexing see 
form assert utilizes full prefix indexing provided tries available 
compiled code xsb offers unification factoring extends clause indexing methods functional programming logic programming framework 
briefly unification factoring offer complete indexing non deterministic indexing automata factor elementary unification operations 
different scheduling strategies xsb asynchronicity answer generation answer return tabling systems face important scheduling choice traditional top evaluation order returning answers consuming subgoals affect program efficiency 
scheduling answer returns important issue efficiency evaluations 
tabling scheduling strategy xsb thoroughly revised version strategy efficient terms time space :10.1.1.30.8473
outlined implementation second scheduling strategy local scheduling applications non monotonic reasoning combined answer subsumption improve performance programs arbitrary amounts 
performance slg wam overhead sld resolution minimal 
xsb simply prolog system tabling reasonably competitive prolog implementations wam emulator written assembly 
example xsb version times slower quintus emulated sicstus prolog 
bottom aspect tabling slg aids filtering redundant computations property slg complete non floundering datalog programs 
generation program furnishes case usefulness tabling optimizing prolog program 
example query sg fail 
executed program sg cyl sg cyl 
sg 
randomly generated cylinder base relation cyl 
cylinder thought rectangular matrix elements element row links certain number elements row 
cylinder array nodes nodes row connected elements higher row 
executing query slg orders magnitude faster sld sld search complete binary tree depth 
judicious tabling programs faster indiscriminate programs slower 
instance tabling append slows linear algorithm quadratic 
detailed analysis performance xsb :10.1.1.48.4048
performance founded negation knowledge win program standard scalable benchmark wellfounded semantics literature 
slg sldnf versions xsb shown 
sldnf resolution sufficient acyclic move graphs chains trees 
cases founded model total 
slg table win 
win move win 
sldnf win move win 
contains timing results seconds executing query win fail 
different data structures sizes varying 
times shown iterations 
tabled evaluation query creates distinct subgoals suspended nodes 
chains trees program modularly stratified subgoal answer fails 
shows case chain performance tabled negation comparable negation prolog times slower 
difference due recording subgoals answers tables suspending computations performing completion 
case complete binary tree tabled negation slower 
tabled negation fully evaluate negative literals completing consequently traverses entire search space exponential height tree see :10.1.1.48.4048
tuples move relation sld chain slg chain sld tree slg tree slg cycle performance win program different data structures 
goal xsb system provide framework environment gracefully integrates logic programming inmemory deductive database query processing nonmonotonic reasoning respect founded semantics 
fact produces residual program normal logic programs means preprocessor nonmonotonic formalisms just founded semantics 
xsb provides extensive builtin support accessing generated tables including residual program general programmability predicate appends lists xsb environment build complex nmr systems 
xsb quite robust logic programming deductive database query processing system way various applications 
extensively nonmonotonic reasoning system confidence robustness applications great 
goal find users wish applications xsb powerful general tool nonmonotonic reasoning 
maier sagiv ullman 
magic sets strange ways implement logic programs 
pods 
acm 
ramakrishnan 
amateur recursive query processing strategies 
proc 
sigmod conference pages 
acm 
chen kifer warren 
hilog foundation higher order logic programming 
logic programming 
chen warren :10.1.1.38.8814
tabled evaluation delaying general logic programs 
journal acm january 
codish sagonas 
xsb general purpose program analyzer 
technical report ku leuven 
dawson ramakrishnan ramakrishnan sagonas skiena swift warren 
unification factoring efficient execution logic programs 
proc 
nd symposium principles programming languages pages 
acm 
dawson ramakrishnan warren 
practical program analysis general purpose logic programming systems case study 
acm pldi 
appear 
debray 
sb prolog system version user manual 
dietrich 
extension tables recursive query evaluation 
phd thesis suny stony brook 
freire swift warren :10.1.1.30.8473
depth improving tabled logic programs alternative scheduling strategies 
th international plilp symposium 
springerverlag 
gelfond lifshitz :10.1.1.24.6050
stable model semantics logic programming 
joint international conference symposium logic programming pages 
kemp topor 
completeness top query evaluation procedure stratified databases 
logic programming proc 
fifth international conference symposium pages 
larson warren freire sagonas 

mit press 
larson warren freire sagonas gomez 

mit press 
preparation 
lindholm keefe 
efficient implementation defensible semantics dynamic prolog code 
proceedings international conference logic programming pages 
przymusinski 
logic program natural stratification iterated fixed point model 
pods pages 
ramakrishnan rao sagonas swift warren 
efficient table access mechanisms logic programs 
sterling editor international conference logic programming pages 
ross 
semantics deductive databases 
phd thesis department computer science stanford university 
sagonas swift warren :10.1.1.48.4048
xsb efficient deductive database engine 
proc 
sigmod conference 
acm 
sagonas swift warren 
limits fixed order computation 
international workshop logic databases 
lnai springer verlag 
sagonas swift warren 
xsb programmer manual version 
sagonas warren 
efficient execution hilog wam prolog implementations 
international conference logic programming 
appear 
seki 
power templates 
proc 
th pods pages 
acm 
tamaki sato 
oldt resolution tabulation 
third international conference logic programming pages 
van gelder ross schlipf 
unfounded sets founded semantics general logic programs 
jacm 

recursive query processing power logic 
theoretical computer science 
walker 
iteration practical inference method simple proved terminating sound complete 
automated reasoning 
originally formulated new york university tr 
xu 
psb prolog user manual 
