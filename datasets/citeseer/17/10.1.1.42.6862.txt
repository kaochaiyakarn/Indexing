calculating functional programs jeremy gibbons school computing mathematical sciences oxford brookes university brookes ac uk november way developing correct program calculate specification 
functional programming languages especially suitable referential transparency greatly helps calculation 
discuss ideas program calculation illustrate example maximum segment sum problem 
show calculations driven promotion promotion properties arise universal properties data types involved 
context history computing story contrasting trends 
hand cost cost performance ratio computer hardware computer software complex unreliable inevitably budget 
clearly learnt build computers program 
widely accepted ad hoc approaches constructing software break projects get ambitious 
formal approach sound mathematical foundations required 
formal approaches constructing software formal approach program verification program constructed traditional methods mathematically proved correct 
approach helps quality assurance provides help research colloquium school computing mathematical sciences oxford brookes university th november 
earlier version appeared bird meertens formalism proceedings new zealand formal program development colloquium edited steve reeves hamilton new zealand november 
constructing high quality program place 
better approach program derivation correctness requirements program gradually transformed application meaning preserving transformations program satisfies 
provided transformations correct applied resulting program necessarily satisfies requirements 
problem reduces formulating applying useful body meaning preserving transformations 
functional languages program derivation enjoyed considerable interest past decades 
early concentrated deriving programs imperative languages dijkstra guarded command language 
realized functional languages offer program number advantages imperative languages 
essential advantage functional languages higher level 
consequences ffl functional programs express fewer implementation details imperative programs programs shorter easier reason ffl functional languages referentially transparent reasoning closer normal mathematics ffl functional languages express specification solution derivation carried single formalism imperative languages derivation typically alternates programming language predicate calculus 
interest past decade deriving programs functional languages imperative languages 
program calculation seen advantage functional languages sufficiently express specification resulting program 
allows derivation proceed directly single formalism indirectly predicate calculus 
term program calculation opposed simply program derivation direct derivation 
possible derivation form original specification justification step intermediate version justification step 
justification step final program call calculation equational reasoning aim derivation possible calculational style 
expository reasons clarifies distinction routine parts development consist straightforward steps current technology creative parts know calculate require invention 
communicating essence development calculational parts elided just lines original specification routine calculation final program allowing proper emphasis placed remaining parts design decisions 
put way interested extending calculated precisely interested calculations 
developing techniques allow derivation calculated enables focus important parts 
calculus equational calculational style naturally entails powerful collection notations theorems calculus program construction provide individual steps 
theorems expressed far possible equations just simple applicability conditions flow calculation need interrupted 
inductive proofs far possible 
calculus mind called bird meertens formalism uses ideas universal algebra category theory provide body theorems 
particular theorems arise properties common patterns computation data structures concerned 
cases datatype definition needs stated follows automatically 
example illustrate concept calculating functional programs example computing maximum segment sum list num bers 
classical problem programming texts largely simple problem elegant obvious linear time solution 
bentley uses argument benefits algorithm design developing turn cubic quadratic log linear algorithms 
illustration program calculation particular development inspired 
notation gofer introduce necessary notation go 
problem list numbers maximum segment sum problem compute maximum sums contiguous segments list 
example list consists numbers gamma gamma gamma gamma greatest sum possible sum segment omits elements list 
lists list empty written constructed consing new element shorter list written 
basic operation lists map applies function element list map map map folds basic map fundamental operation lists foldr essentially encapsulates natural pattern recursion lists 
defined foldr foldr foldr natural pattern recursion lists determined completely definition lists datatype 
see folds fundamental maps note maps folds map foldr fm fm bs bs folds maps see examples 
common examples folds ffl function sum sums elements list sum foldr ffl function maximum finds largest element list maximum foldr max represents gamma largest element empty list need maximum empty list safe maximum undefined ffl operator concatenates lists foldr ffl function concat concatenates list lists long list concat foldr ffl function inits returns initial segments list inits foldr fi fi xss map xss operator representing function takes ffl function tails returns tail segments list tails foldr ft ft xss head xss xss function head satisfies head defined non empty lists ffl function returns partial results computed foldr foldr fs fs bs head bs bs tails 
components define functions returns contiguous segments list concat map inits tails segments list initial segments tail segments list formally define problem mss maximum map sum program takes cubic time quadratically segments finding sum takes linear time problem find linear time algorithm mss 
universal properties main reason programming foldr attractive existence universal property stating equations unique solution foldr show complicated expression equal function foldr suffices show satisfies equations 
universal property kind canned induction 
fold universal property arises free datatype definition 
illustration universal property called scan lemma map foldr tails thought alternative characterization 
instance foldr definition foldr fs fs bs head bs bs suffices show map foldr tails map foldr tails fs map foldr tails easily verified second map foldr tails tails map foldr head tails tails map foldr head tails map foldr tails foldr foldr head tails map foldr tails head xss head map xss head bs bs bs map foldr tails fs fs map foldr tails promotion program calculation kind interested driven largely promotion properties change order certain computations take place 
example stating maps combined map map map read right left map promoted function composition 
right hand side fold promotion property proved universal property 
examples follows 
states map promoted concat map concat concat map map second states fold similarly promoted foldr concat foldr map foldr provided associative unit may immediately obvious prove properties side equation obviously fold 
general theorem promotion property consequence universal property map combined fold foldr map foldr necessary catalyst allowing promotion properties proved universal property 
calculation ready proceed calculation 
maximum map sum maximum map sum concat map inits tails promotion concat maximum concat map map sum map inits tails promotion concat maximum map maximum map map sum map inits tails promotion map composition maximum map maximum map sum inits tails suppose maximum map sum inits foldr maximum map foldr tails scan lemma maximum completes derivation provided computed constant time takes linear time 
remains write maximum map sum inits fold foldr universal property comes play suffices find maximum map sum inits maximum map sum inits maximum map sum inits simplifying shows 
show promote maximum map sum inits cons maximum map sum inits inits maximum map sum map inits map maximum sum map sum 
inits sum sum sum maximum map sum inits maximum max maximum map map sum inits distributivity maximum map maximum max maximum map sum inits maximum map sum inits foldr max mss maximum looking forward shown folds fundamental pattern recursion lists 
malcolm shows applies suitable datatype fold universal property arise free datatype definition 
meijer shown similar results hold dual folds called unfolds collapsing data structure value folds unfolds generate data structure value just fundamental concept folds 
situations functions sufficiently general express natural specification 
particularly case specification non deterministic determined problems naturally specified inverses come naturally functional world 
answer backhouse bird de moor working calculi calculating relational programs 
remains seen worth paying extra complexity extra generality power provided relational languages 
shown ideas applied calculating parallel programs hardware designs 
roland backhouse paul hoogendijk 
elements relational theory datatypes 
bernhard moller helmut steve schumann editors lncs ifip tc wg state art report formal program development pages 
springer verlag 
jon bentley 
programming pearls 
addison wesley 
richard bird oege de moor 
algebra programming 
prentice hall 
richard bird 
theory lists 
broy editor logic programming calculi discrete design pages 
springer verlag 
available technical monograph prg programming research group oxford university 
richard bird 
algebraic identities program calculation 
computer journal april 
jeremy gibbons 
bird meertens formalism 
steve reeves editor proceedings new zealand formal program development colloquium pages hamilton november 
geraint jones mary sheeran 
circuit design ruby 
editor formal methods vlsi design 
north holland 
mark jones 
gofer manual 
department computer science yale university 
anne 
programming derivation algorithms 
prentice hall 
malcolm 
data structures program transformation 
science computer programming 
lambert meertens 
algorithmics programming mathematical activity 
de bakker lenstra editors proc 
cwi symposium mathematics computer science pages 
north holland 
erik meijer maarten fokkinga ross paterson 
functional programming bananas lenses envelopes barbed wire 
john hughes editor lncs functional programming languages computer architecture pages 
springer verlag 
david skillicorn 
foundations parallel programming 
cambridge university press 

