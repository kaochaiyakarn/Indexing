intrusion detection sequences system calls steven hofmeyr stephanie forrest anil somayaji dept computer science university new mexico albuquerque nm forrest cs unm edu send correspondence steven hofmeyr address august method detecting intrusions level privileged processes 
evidence short sequences system calls executed running processes discriminator normal abnormal operating characteristics common unix programs 
normal behavior collected ways synthetically exercising normal modes usage program possible live user environment tracing actual execution program 
case types intrusive behavior studied case results analyzed false positives 
modern computer systems plagued security vulnerabilities 
latest unix buffer overflow bug microsoft internet explorer applications operating systems full security flaws levels 
viewpoint traditional security paradigm possible eliminate problems extensive formal methods better software engineering 
view rests assumptions security policy explicitly correctly specified programs correctly implemented systems correctly configured 
assumptions may theoretically reasonable practice holds 
computers systems static continually changed vendors system administrators users 
programs added removed configurations changed 
formal verification statically defined system time consuming hard correctly formal verification dynamic system impractical 
formal verifications tools encryption access controls firewalls audit trails fallible making perfect implementation security policy impossible correct policy devised place 
accept security policies implementations configurations flawed practice accept imperfect security 
incrementally improve security tools intrusion detection systems ids 
ids approach security assumption system secure violations security policy intrusions detected monitoring analyzing system behavior 
different levels ids monitor system behavior 
critical profile normal behavior level robust variations normal perturbed intrusions 
reported chose monitor behavior level processes 
privileged processes running programs perform services send receive mail require access system objects inaccessible ordinary user 
enable processes perform jobs privileges ordinary user invoked ordinary user 
unix processes usually run privileges user invoked 
privileged processes change privileges superuser means setuid mechanism 
security problems privileged processes unix granularity permissions coarse privileged processes need superuser status access system resources granting status gives permission necessary perform specific tasks 
consequently permission access system resources just relevant operation 
privileged processes trusted access relevant system resources cases programming error code privileged process running privileged process incorrectly configured ordinary user may able gain superuser privileges exploiting problem process 
sake brevity usually refer privileged processes programs simply processes programs qualifier resolve ambiguities 
clear privileged processes level focus exploitation vulnerabilities privileged processes give intruder superuser status 
furthermore privileged processes constitute natural boundary computer especially processes listen particular port 
unix privileged processes function servers control access system 
corruption servers allow intruder access system remotely 
monitoring privileged processes offers advantages monitoring user behavior method date example see 
range behaviors privileged processes limited compared range behaviors users privileged processes usually perform specific limited function users carry wide variety actions 
behavior privileged processes relatively stable time especially compared user behavior 
users perform wider variety actions actions performed may change considerably time actions functions privileged processes usually vary time 
approach detecting irregularities behavior privileged programs regard program black box run emits observable 
believe observable dynamic characteristic program code stored disk may potential harm running realise potential 
regard process black box need specialized knowledge internal functioning intended role process infer indirectly observing normal behavior natural observable processes unix system calls unix processes access system resources system calls 
chosen short sequences system calls observable 
earlier study reported preliminary evidence short sequences system calls simple discriminator types intrusion :10.1.1.47.6145
results reported extend earlier study important differences 
slightly changed record sequences system calls previously look ahead pairs look ahead value exact sequences length 
measure anomalous behavior independent trace length hamming matches sequences 
collected normal behavior real live environment analyzed false positives 
want ids stable lightweight efficient depends discriminator observable distinguish acceptable unacceptable behavior 
stable mean reliably distinguishes acceptable unacceptable behavior 
approach experimental believe current theories adequately describe implemented systems really run 
primarily concerned determining empirically discriminator stable 
efficiency secondary consideration addressed extent analyze complexity algorithm report actual running times method production system 
inspired defenses natural immune systems 
compelling similarities problems faced immune systems computer security :10.1.1.53.9010
systems protect highly complex system penetration agents able discriminate broad ranges normal abnormal behavior 
immune system discrimination task known problem distinguishing self harmless molecules normally body nonself dangerous pathogens foreign materials 
discrimination immune system characteristic structure called peptide short protein fragment compact universal body 
limits effectiveness immune system example immune system protect body radiation 
proteins component living matter generally differ self nonself provide distinguishing characteristic 
view chosen discriminator short sequences system calls analogous peptide 
structure follows 
section review related intrusion detection 
section describes method anomaly intrusion detection describe build profiles normal behavior define ways detecting anomalies 
method build synthetic normal profile section demonstrating effectiveness detecting intrusions anomalies 
section consider consequences collecting normal data online functioning environments discuss false positives experimental results false positive rates 
limitations implications approach discussed section 
brief appendix included details various intrusions experiments methods approaches require knowledge internals intended role program notably program specification method attempts constrain program way perform operations program designed method refines permissions structure accomodate specific privileged processes 
differences method discussed fully section 
words real live refer production environment environment currently normal everyday 
contrast synthetic environment isolated test environment 
generate synthetic normal brief overview unix 
related intrusion detection system ids continuously monitors dynamic behavioral characteristics computer system determine intrusion occurred 
definition excludes useful computer security methods 
security analysis tools satan cops scan system weaknesses possible security holes 
ids monitor dynamic characteristic system intrusions evidence intrusions scan system weaknesses configuration errors poor password choices lead intrusions 
important non ids solutions computer security problems provided cryptography especially useful authentication secure communications 
virus protection schemes described ids definition scan static code dynamic behavioral characteristics 
approaches easily classified example integrity checking systems tripwire monitor important files changes indicate intrusions 
files static code dynamic characteristic indicative intrusions modified intrusive activities tripwire classified ids 
different architectures ids 
ids centralized processing performed single machine distributed machines 
ids centralized autonomous agents approach proposed ids truly distributed :10.1.1.158.8429
furthermore ids host network type monitors activity single computer type monitors activity network 
networkbased ids monitor information collated audit trails different hosts multi host monitoring monitor network traffic 
nadir dids examples ids multi host network traffic monitoring nsm ids monitors network traffic 
regardless architectural considerations ids components data collection reduction data classification data reporting 
data reporting usually simple system administrators informed anomalous intrusive behavior ids take act rapidly deal irregularities 
various methods data collection classification discussed 
ids monitors intrusive behavior needs collect data dynamic state system 
selecting set dynamic behavioral characteristics monitor key design decision ids influence types analyzes performed amount data collected 
systems example ides nides wisdom sense tim collect profiles user behavior generated audit logs 
systems look network traffic example nsm system 
approaches attempt characterize behavior privileged processes program specification method 
different behavioral characteristics generate different amounts data extreme example systems monitoring user profiles process large volumes raw data average user generate mb audit data day 
case data may need reduced manageable size 
behavioral characteristic selected classify data 
simplest case binary decision problem data classified normal acceptable anomalous possibly intrusive 
data classification complex instance trying identify particular type intrusion associated anomalous behavior 
plethora methods data classification majority artificial intelligence techniques see detailed overview 
classification techniques divided categories depending look known intrusion signatures misuse intrusion detection anomalous behavior anomaly intrusion detection 
misuse ids encode intrusion signatures scenarios scan occurrences requires prior knowledge nature intrusion 
contrast anomaly ids assumed nature intrusion unknown intrusion result behavior different normally seen system 
anomaly ids models normal expected behavior monitor systems deviations normal model indicate possible intrusions 
systems incorporate categories example nides denning generic model ids 
relatively ids deal misuse intrusion detection 
type implementation uses expert system fit data known intrusion signatures example ides nides stalker knowledge past intrusions encoded human experts expert system rules 
approaches attempt generate intrusion signatures automatically example approach uses pattern matching model colored petri nets ustat represents potential intrusions sequences system states form state transition diagrams 
difficulty encoding known intrusions continual occurrence new intrusions systems focus anomaly intrusion detection 
wide variety methods 
tripwire monitors state special files hosts equiv file unix system unix daemon binaries change normal simply static md checksum file 
program specification language define normal privileged processes terms allowed operations process 
rule induction systems tim generate temporal models normal user behavior 
wisdom sense incorporates unsupervised tree learning algorithm build models patterns user transactions 
systems nides employed statistical methods generate models normal user behavior terms frequency distributions 
nsm uses hierarchical model combination statistical approach determine network traffic usage profiles 
biologically inspired side connectionist neural nets classify data genetic programming proposed means developing classifications :10.1.1.158.8429
anomaly intrusion detection method performs anomaly intrusion detection misuse detection see section 
build profile normal behavior process interest treating deviations profile anomalies 
stages anomaly detection stage build profiles databases normal behavior analogous training phase learning system second stage databases monitor system behavior significant deviations normal analogous test phase 
recall chosen define normal terms short sequences system calls 
interests simplicity ignore parameters passed system calls look temporal orderings 
definition normal behavior ignores important aspects process behavior timing information instruction sequences system calls interactions processes 
certain intrusions may detectable examining aspects process behavior may need consider 
philosophy see far go simplest possible assumption 
profiling normal behavior algorithm build normal databases extremely simple 
scan traces system calls generated particular process build database unique sequences length occurred trace 
program interest different database specific particular architecture software version configuration local administrative policies usage patterns 
stable database constructed program database monitor ongoing behavior processes invoked program 
method complicated fact unix program invoke process 
processes created fork system call virtual variant 
essential difference fork creates new process instance program copy replace process new changing process id trace forks individually include traces part normal trace virtual forks virtual fork new program 
switch databases dynamically follow virtual fork 
large variability individual systems currently configured patched conjecture individual databases provide unique definition normal systems 
believe uniqueness resulting diversity systems important feature immune system increasing robustness populations infectious diseases 
immune system individual vulnerable different pathogens greatly limiting spread disease population 
traditionally computer systems biased increased uniformity advantages offered portability maintainability 
advantages uniformity potential weaknesses errors exploited attacker 
method discovered penetrating security computer computers configuration similarly vulnerable 
construction normal database best illustrated example 
suppose observe trace system calls excluding parameters open read mmap mmap open read mmap slide window size trace recording unique sequence length encountered 
example get unique sequences open read mmap read mmap mmap mmap mmap open mmap open read efficiency sequences stored trees tree rooted particular system call 
set trees corresponding example 
record size database terms number unique sequences example just upper bound storage requirements normal database nk 
practice storage requirements lower sequences stored trees 
example sendmail database contains unique sequences length nodes forest node corresponds system call 
node single system call sequences nodes 
measuring anomalous behavior database normal behavior method generate database check new traces behavior 
look overlapping sequences length new trace determine represented normal database 
sequences occur normal database considered mismatches 
recording number mismatches determine strength anomalous signal 
number mismatches occurring new trace simplest determinant anomalous behavior 
report counts raw number percentage total number matches performed trace reflects length trace 
ideally numbers zero new examples normal behavior jump significantly abnormalities occur 
clear distinction normal legal behavior 
ideal case want normal database contain variations normal behavior want contain single possible path legal behavior approach assumption normal behavior forms subset possible legal execution paths program unusual behavior deviates normal paths signifies intrusion undesirable condition 
want able detect intrusions unusual conditions indicative system problems 
example process runs disk space may execute error code results unusual execution sequence path program 
clearly path legal certainly regarded normal 
normal database contain variations normal behavior encounter sequence normal database regard anomalous consider single mismatch significant 
reality impossible collect normal variations behavior issues discussed fully sections face possibility normal database provide incomplete coverage normal behavior 
solution count number mismatches occurring trace regard anomalous traces produce certain number mismatches 
problematic count dependent trace length indefinite continuously running processes 
alternative constrain measure locally 
anomalies studied temporally clumped anomalous sequences due intrusions occur local bursts 
defining local measure difficult unordered state space true notion locality close system call 
chosen hamming distance sequences measure 
choice somewhat arbitrary related closely anomalies clumped 
theoretically justify measure determine worth empirically 
hamming distance sequences compute new sequence differs existing normal sequences 
similarity sequences computed matching rule determines sequences compared 
matching rule hamming distance difference sequences indicated hamming distance 
new sequence determine minimal hamming distance min set normal sequences min minfd normal sequences jg min value represents strength anomalous signal deviates known pattern 
note measure dependent trace length amenable thresholds binary decision making 
various measures illustrated small example 
consider trace shown previous example open read mmap mmap open read mmap generated normal database consisting open read mmap binary alphabet measure analogous binary hamming distance number positions sequences differ 
read mmap mmap mmap mmap open mmap open read trace call sixth trace changed read mmap open read mmap mmap open mmap mmap new sequences mmap open mmap open mmap mmap corresponds mismatches trace min values 
different measures different time complexities 
determine new sequence mismatch requires gamma comparisons normal sequences stored forest trees root tree corresponds different system call 
similarly take gamma comparisons confirm sequence normal database 
sequence normal database computing min sequence expensive 
min smallest hamming distance normal sequences check single sequence normal determine min require total gamma comparisons recall number sequences database 
expect anomalies rare time algorithm confirming normal sequences cheaper 
rate anomalous normal sequences ra average complexity computing min sequence gamma ra gamma gamma ra ran 
classification errors ids measures making decisions observed values measures 
simplest case binary decisions sequence anomalous normal 
binary decision making types classification errors false positives false negatives 
define errors asymmetrically false positive occurs single sequence generated legitimate behavior classified anomalous false negative occurs sequences generated intrusion classified anomalous sequences generated intrusion appear normal database 
statistical decision theory false negatives false positives called type type ii errors respectively 
detect intrusion sequences generated intrusion classified anomalous 
terms measures require min sequences generated intrusion 
measure strength anomaly min want intrusions generate strong anomalies assume higher min sequence generated intrusion 
practice report maximum min value encountered trace represents strongest anomalous signal trace compute signal anomaly sa sa min new sequences ig example sa 
generally report actual sa value sa value normalized sequence length enable compare sa values different values sa sa minimize kinds errors willing tolerate false negatives false positives 
false negatives reduced adding layers defense layering reduce false positive rates 
simple example illustrates 
consider system layers defense intruder penetrate layer probability pn intruder escape detection pn false negative rate 
probability detection independent layer probability intruder penetrate layers undetected example false negative rate exponentially reduced adding layers protection provided independence 
contrast assume layer independent probability generating false positive expected number false positives delta case layering compounds false positives 
false positives measured collect normal behavior live environments see section 
collecting normal empirically occurrence rare acceptable events result incomplete normal database 
normal incomplete false positives result encounter acceptable sequences included normal database 
limit false positives set thresholds min values regard anomalous sequence min threshold value 
summarize sequence length sufficiently different normal sequences flagged anomalous 
validity assumption intrusive behavior characterized increased hamming distance normal sequences tested empirically sections follow 
behavior synthetic environment methods choosing normal behavior define normal database generate synthetic normal exercising program normal modes possible tracing behavior generate real normal tracing normal behavior program live user environment 
synthetic normal useful replicating results comparing performance different settings kinds controlled experiments 
real normal problematic collect evaluate issues discussed section need real normal determine system perform realistic settings 
example generate normal synthetically idea false positive rates get realistic settings synthetic definition includes variations normal behavior variations legal behavior 
exclude synthetically generated traces normal see false positives resulted clear traces exclude choice arbitrary resulting false positives equally arbitrary 
section results synthetic normal section results real normal 
building synthetic normal database studied normal behavior different processes unix sendmail lpr wu ftpd running sunos running linux 
sendmail program sends receives mail lpr program enables users print documents printer ftpd program transfer files local remote hosts 
sendmail complex processes briefly describe exercised sendmail produce profile normal behavior methods constructing synthetic normal processes described appendix 
considered variations message length number messages message content text binary encoded encrypted message subject line sent mail received mail 
addition looked effects forwarding bounced mail queuing 
lastly considered effects origin variations cases remote local delivery 
suite artificially constructed messages exercise sendmail version producing trace combined length system calls 
table shows messages type generate normal databases 
began message length testing different message lengths ranging line bytes 
selected shortest length produced varied pattern system calls bytes standard message length remaining test messages 
similarly number messages sendmail run sent message traced sendmail sent messages tracing sendmail forth messages 
intended test response sendmail bursts messages 
tested message content sending messages containing ascii text data data pgp encrypted file 
case number variations tested generated variations system call patterns selected single default selected moving stage 
messages constituted corpus normal behavior 
reran set standard messages different operating system sendmail cf sendmail configuration file variant tried generating normal database tailored exact operating conditions sendmail running 
features considered little effect number messages message content subject line sent mail received mail mail programs queuing 
message length considerably different effect sequence system calls depending message origin remote mail produces traces system calls proportional length message little sequence variation traces local mail produces traces roughly length regardless size message sequence system calls changes considerably message size increases 
cases large message size generate normal message size difference 
effect forwarding mail remote traces negligible small noticeable affect local traces 
bounced mail effect remotely effects evident local case 
test generated databases different values processes tested sendmail lpr ftpd 
results shown table 
choice sequence length determined conflicting criteria 
hand want sequence length short possible minimize size database computation involved detection recall time complexity detection proportional 
hand sequence length small able discriminate normal anomalous behavior 
choice empirical observations 
databases remarkably compact example sendmail database contains unique sequences length requires bytes store current implementation 
sendmail complex privileged processes currently unix systems behavior described compactly expect privileged processes normals compact 
data encouraging indicate range normal behavior programs limited 
variability normal preclude detecting anomalies worst case possible sequences length show legal normal behavior anomalies detected 
possible sequences length 
alphabet sigma system calls size possible sequences length choosing alphabet size problematic knowing exactly system calls sendmail considering total system calls sunos operating system 
conservative estimate assume sendmail uses calls number synthetic normal database approximately possible sequences 
sendmail normal database contains gamma percent total possible number patterns 
course completely accurate number possible sequences sendmail limited structure code 
determine require analysis source code precisely wish avoid strengths approach require specialized knowledge particular program 
detecting anomalous behavior intrusive behavior anomalous definition normal 
ideally want intrusive behavior anomalous 
test compared normal databases range known abnormal behavior 
experiments report number mismatches percentage mismatches normalized anomaly signal sa sa dependent length trace preferred measure 
sa values meaningful context detection thresholds thresholds dependent acceptable level false positives 
way constructed normal zero false positives synthetic data principle sa indicates anomaly goal clear separation anomaly normal want sa values large 
issue false positives real environment explored section 
distinguishing processes experiments performed compared sendmail unix programs 
distinguish sendmail programs detect small deviations behavior single program 
done comparison varying sequence lengths 
sequence length low mismatches range 
sequence length reaches mismatches programs 
results comparisons table process showed significant number anomalous sequences anomalous sequence quite different normal sendmail sequences sa indicating anomalous sequence differs normal sequences half positions 
processes shown distinct sendmail actions perform considerably different sendmail 
tested normal database lpr achieved similar results data shown 
lpr exhibits separation shown table presumably smaller program limited behavior 
results suggest behavior different processes easily distinguishable sequence information 
detecting intrusions second set experiments detect intrusions exploit flaws processes sendmail lpr wu ftpd 
intrusions successful unsuccessful updates patches software 
report results 
able detect attempted intrusions fail 
detection failed intrusions useful warning sign attacker attempting break system 
third behavioral category able detect occurrence error states sendmail forwarding loops 
error states technically legal behavior properly regarded abnormal indicate existence problems 
compared system call traces categories successful exploits unsuccessful exploits error conditions normal database relevant program recorded number mismatches percentage mismatches trace sa values 
table shows results successful intrusions 
row table reports data typical trace 
cases conducted multiple runs intrusion identical nearly identical results runs differed significantly report range values 
date collected data successful intrusions sendmail lpr ftpd 
sendmail intrusions decode alias intrusion 
intrusions described appendix 
successful intrusions clearly detected sa values 
exception decode intrusion low range generates mismatches sa value 
results suggest approximate detection thresholds need online system detect intrusions 
results trying detect unsuccessful intrusions error conditions shown table 
unsuccessful intrusions attack scripts called sm sm 
sunos patches prevent particular intrusions 
unsuccessful intrusions clearly detectable successful intrusions 
error conditions detectable similar range sa values 
clear case undesirable errors studied local forwarding loops sendmail see appendix description 
summary able detect abnormal behaviors tested including successful intrusions failed intrusion attempts unusual error conditions 
reported results experiments show varying sequence length little effect detection terms sa measure 
analyzed sequences length 
minimum sequence length just give sa sa sufficiently informative 
maximum sequence length cost computation scales sequence length 
results reported 
decode intrusion detectable value kk sequence length little difference sa increased sequence length results decreased anomaly signal 
happen anomalies consisted short clumps system calls separated large gaps sequence length increases longer sequences similar normal sequences 
example say normal sequence open read mmap mmap open read intrusion disrupted positions give close close close mmap open read 
give sa system calls give sa 
implies best sequence length slightly larger allow detection anomalies minimizing computation directly proportional chosen gives margin error 
considering anomaly measures gives limited picture sorts perturbations caused intrusions unacceptable behaviors 
example sa values indicate anomalous sequence giving clear idea anomalous sequences temporally distributed 
anomaly profile shows temporal distribution anomalous sequences successful sendmail intrusion intrusion runs 
see noticeable intrusions anomalies clumped 
indicates doing real time monitoring able detect intrusions intruder gains access right start intrusive behavior 
behavior real environment results reported section normal databases generated synthetically attempted exercise normal modes behavior process resulting traces build normal databases 
ids deployed protect functioning system may best way generate normal 
real normal behavior process particular machine quite different synthetic normal 
synthetic normal behaviors may absent actual system hand real normal include behavior thought unable incorporate synthetic 
section attempt build normal real environment 
questions arise consider collecting real normal running system 
ensure included abnormal sequences 
ensure system exploited collect normal traces 
including abnormal sequences result false negatives 

ensure normal sufficiently comprehensive 
long collect normal 
normal 
incomplete normal result false positives 

intrusions detectable increase size normal 
size normal increases include rare normal sequences overlap abnormal sequences reducing detection rates increasing false negatives 
collecting real normal collected normal lpr different real environments massachusetts institute technology artificial intelligence laboratory mit university computer science department unm 
cases simple solution question posed ensure intrusive behavior included normals 
lpr studied aware intrusion reported section requires lpr generate print jobs close succession observers easily detect system generates jobs day 
guarantee normal free intrusion traces excluded intrusion analysis 
general problem trivial particularly know nature intrusion concerned true anomaly detection 
possible ways excluding intrusive behavior normal trace include ffl collect normal real open environment whilst monitoring environment carefully ensure intrusions happened collection normal 
lpr 
ffl collect normal isolated environment sure intrusions happen 
disadvantage solution normal possibly incomplete environment necessity limited particularly case processes sendmail communicate outside world 
mit environment traced lpr running different hosts running sunos weeks obtain traces total print jobs 
growth size normal database shown 
print jobs traced traces added normal number unique sequences normal database grows 
initially growth rapid tapers particular minimal database growth past print jobs 
reinforces idea choosing short sequence length possible accumulate full range normal sequences rapidly short sequences 
regard promising indicates normal behavior limited collected short period time depending system 
normal vary different environments 
answers case lpr normals collected independently mit unm identical program operating system 
represent considerably different environments seen differences listed table example traced lpr host unm traced hosts mit 
despite differences environment patterns database growth unm environment similar mit data shown resulting database sizes quite different unique sequences unm mit 
databases differ size content example comparison unique sequences databases indicates sequences databases represents unm database mit database 
databases different detect intrusion identically 
analyze anomalous sequences generated intrusion find unique anomalous sequences detected unm database identical unique anomalous sequences detected mit database anomaly identical databases 
suggests intrusion signatures encoded sequences system calls system call signature basis misuse ids ids anomaly misuse detection exploration ideas see 
normal 
section addresses questions posed normal 
intrusions detectable size normal increases 
experiments lpr data collected real environments mit unm 
cases divided set data set training set second set test set 
training data build normal database test data scanned normal database explain choose test training sets 
false positive sequence test set min determine lowest false positive rate fp setting threshold minimum value needed normal database detect intrusion 
intrusion test set threshold detect zero false negatives 
false positive rate simply number false positives job 
expected false positive rate calculated bootstrap technique procedure estimating approximating distribution statistic random sample 
divided jobs test training sets follows jobs chosen randomly replacement training set remaining jobs test set test set jobs mit jobs unm 
process repeated times get bootstrap estimate 
bootstrap applicable data appear stationary 
checked stationarity sampling jobs randomly small chronologically consecutive groups comparing means produced sampling methods 
tailed sample test samples gives value 
probability means different insignificant 
expected false positive rates standard deviations shown varying sizes normal database 
data shown mit lpr 
similar results obtained lpr data collected unm data shown 
summarize lowest expected false positive rate sigma 
false positive jobs mit system average false positives day 
rate computed normal database jobs jobs test set 
false positive rate appears leveling 
increase size normal database jobs shown test set jobs rate drops sigma false positive day 
hesitant draw data derived single process true positive intrusion get accurate measure false negatives false positive rate expect detect different intrusions 
furthermore done tests check stationarity absolutely sure time dependent effects data 
build normal database chronologically jobs compare remaining jobs get false positive rate sequence length 
bootstrap distribution probability getting false positive rate low jobs randomly selected 
may temporal dependencies detected tests stationarity 
line system normal constructed jobs encountered case expect lower false positive rates 
worth noting false positive rates computed system spent days collecting normal behavior 
provided size normal database grow indefinitely expect false positive rates reduce spend days normal collection 
illustrated fact increase size normal database include jobs days false positive rate halves 
furthermore normal behavior traced weeks build normal database threshold detection intrusion drop see table 
analysis false positives looked sequences responsible false positives get idea causing rare acceptable behavior 
investigated false positives unusual circumstances including 
trying print machine file dev printer exist 
file named local socket connects lpd running machine 
apparently lpr place job queue communicate lpd 
unclear lpd indicated error 
job print 

printing symbolic links 
lpr told print file current directory flag 
file printed symbolic link file lpr followed symbolic link original file placed symbolic link real file spool directory 

printing separately administered machine different configuration 

trying print job large lpr ran disk space log file 
normal database built chronologically false positives caused case caused second case 
really false positives 
false positive sort acceptable behavior classified anomalous 
behavior unacceptable caused intrusion want know indicates system functioning properly efficiently 
points instances irregular behavior symptomatic problem system indicate conditions need rectified 
sense false positives 
kind analysis indicates actual false positive rate lower reported values example case chronological normal number false positives reduced 
discussion previous sections evidence short sequences system calls discriminators normal abnormal operating characteristics common unix programs 
essence regularity executing programs highly perturbed intrusive activities 
results interesting reasons suggest possible implementation path lightweight intrusion detection system techniques applicable security problems computational settings illustrate value studying empirical behavior actual systems suggest strategy approaching line problems computing solved conventional methods 
results sections suggestive testing needs completed validate approach 
particular extensive testing wider variety unix programs subjected large numbers different kinds intrusions desirable 
programs ideally results controlled environments run large numbers intrusions live user environments 
expect discrimination difficult highly stressed environments high user loads overloaded networks exceptional conditions raised 
furthermore test ideas different operating systems windows nt 
successfully detected intrusions programs buffer overflow program running linux symbolic link vulnerability program running hp ux logistical problems associated collecting data live user environments 
operating systems shipped robust tracing facilities possible collect data standardized environments 
difficult justify installing code known vulnerabilities needed run large numbers different intrusions production environment putting user community risk real intrusions 
obvious stopping criteria 
system slightly different say collected data different programs different environments 
assuming detailed experiments confirm results host systems engineering questions need addressed ids principles implemented deployed 
combination synthetic actual behavior collected define normal database 
user environments certain legitimate features programs seldom database generated live user traces contain false positives constructing synthetic database appropriately prevent false positives 
easier distribute ids require lot customization time installed ids systems administration easier harder 
collection real usage data install time highly automated 
related complication guarantee intrusions take place collection normal behavior 
second unix programs monitored databases switched different processes started 
completely different database program earlier emphasized normal behavior different programs significantly different ranging 
percentages imply behavior common different programs running implementation able reduce resource requirements exploiting commonality 
envision ids real time line system potentially discover interrupt intrusions successful 
feasibility highly dependent efficient design implementation tracing facility algorithms detect mismatches 
emphasis determining approach successful 
concerned efficiency issues 
system able detect intrusions real time data collected mark hewlett packard happening require careful attention efficiency issues 
step analyzed complexity algorithm able measure efficiency production environment 
implementation prove inefficient numerous simplifications experiment looking specific kinds calls tenth call important question context ids response appropriate possible intrusion detected 
deep topic largely scope 
ids respond sending alarm human operator 
long run believe response side largely automated ids technology going widely deployed 
evidence intrusions generate highly regular signatures possible store signatures known intrusions respond aggressively signatures detected 
new anomalies cautious actions taken 
advantage monitoring process level wide range responses possible ranging shutting computer completely radical simply running process lower priority 
method propose panacea certainly forms intrusions 
example race condition attacks typically involve stealing resource file created program running root program chance restrict access resource 
root process detect unusual error state normal set system calls defeating method 
examples intrusions missed password hijacking user cases user violates policy privileged processes 
idea looking short sequences behavior quite general applicable security problems 
example people suggested applying technique computational systems including java virtual machine corba distributed object system security atm switches network security 
potential applications necessary determine empirically simple definitions analogous sequences system calls give clear compact signature normal behavior determine signature perturbed intrusive behavior 
approach similar approaches differences critical 
ko chosen level privileged processes characterize behavior privileged process program specification policy description program able 
policy derived program code requires specialized knowledge program function 
writing policy prone sorts errors writing program hard guarantee correctness 
importantly perspective policy easily include behavior legal normal hard determine behavior normal 
avoid issues treating program black box relying purely empirical observation ascertain program behavior 
key difference rely exclusively sequencing information specification approach monitors individual operations 
approaches tim consider sequencing information 
differ approach look domain user behavior approach detecting anomalies 
results sufficiently promising added complexity probabilities unnecessary 
possible simple deterministic approach successful data structured 
case may probabilities necessary structured domains user behavior 
earlier papers advocated comprehensive approach computer security collection organizing principles derived study immune system 
immune system perspective certainly influenced design decisions emphasizing concrete computational mechanisms largely ignoring immune system connection 
details approach ids fits vision :10.1.1.53.9010
extensions suggested analogy 
important bias underlying approach modern computers complex systems sense comprised large number components interact nonlinearly 
components continually evolving environments embedded users programmers implement 
complexity threatens overwhelm design strategies functional decomposition 
furthermore implies design build computers necessarily understand behave 
example fact normal behavior highly complex program sendmail captured small number system call sequences hard predict 
making assumptions believe programs users behave trying behavior surprised asks question behavior observe 
take existing artifacts study behavior rigorously 
approach dismissed merely empirical theoretical point need spend time asking extent existing theories describe existing artifacts 
method anomaly intrusion detection process level 
normal defined terms short sequences system calls executed running privileged processes 
profiles normal behavior consisted unique sequences length remarkably compact example sendmail database contained sequences 
measures detect abnormal behavior deviations profiles normal 
measures allowed successfully detect classes abnormal behavior including intrusions unix programs sendmail lpr ftpd failed intrusion attempts sendmail error conditions sendmail 
studied different methods accumulating normal profiles generating normal synthetically attempting exercise program modes normal operation possible tracing process live user environment 
case analyzed data false positives 
false positive rates lpr print jobs explainable terms system problems results tentative sufficient data comprehensive analysis 
intend expand base intrusions gather data processes running real environments get realistic estimates false positive false negative rates 
lgm 
lgm advisory unix sendmail dec 
www lgm org advisories html 
lgm 
lgm advisory unix syslog aug 
www lgm org advisories html 
lgm 
lgm advisory unix lpr aug 
www lgm org advisories html 
debra anderson alfonso valdes 
generation intrusion detection expert system nides summary 
technical report sri csl computer science laboratory sri international may 
cert 
ftpd vulnerability 
ftp info cert org pub cert advisories ca ftpd vulnerability 
cert 
syslog vulnerability workaround sendmail 
ftp info cert org pub cert advisories ca syslog october 
cert 
vulnerability 
ftp info 
cert org pub cert advisories ca december 
spafford :10.1.1.158.8429
defending computer system autonomous agents 
proceedings th national information security systems conference 
denning 
intrusion detection model 
ieee transactions software engineering los alamos ca 
ieee computer society press 
denning 
cryptography data security 
addison wesley 
efron tibshirani 
bootstrap 
chapman hall new york 
farmer venema 
security site breaking 
ftp ftp win tue nl pub security admin guide cracking 
daniel farmer eugene spafford 
cops security checker system 
proceedings summer usenix conference pages june 
forrest hofmeyr somayaji :10.1.1.47.6145
sense self unix processes 
proceedings ieee symposium research security privacy los alamitos ca 
ieee computer society press 
forrest hofmeyr somayaji :10.1.1.53.9010
computer immunology 
communications acm 
forrest somayaji ackley 
building diverse computer systems 
proceedings th workshop hot topics operating system los alamitos ca 
ieee computer society press 
kevin fox henning jonathan reed richard 
neural network approach intrusion detection 
proceedings th national computer security conference pages washington october 
jeremy frank 
artificial intelligence intrusion detection current directions 
proceedings th national computer security conference october 
maccabe 
architecture network level intrusion detection system 
technical report department computer science university new mexico august 
heberlein dias levitt mukherjee wood 
network security monitor 
proceedings ieee symposium security privacy 
ieee press 
heberlein mukherjee levitt 
internet security monitor intrusion detection system large scale networks 
proceedings th national computer security conference 
hochberg jackson stallings dubois ford 
nadir automated system detecting network intrusion misuse 
security 
kemmerer porras 
state transition analysis rule intrusion detection approach 
ieee transactions software engineering 
kephart 
biologically inspired immune system computers 
artificial life iv 
mit press 
kim spafford 
design implementation tripwire file system integrity checker 
proceedings cnd acm conference computer communications security 
calvin ko george fink karl levitt 
automated detection vulnerabilities programs execution monitoring 
proceedings th annual computer security applications conference pages december 
sandeep kumar 
classification detection computer intrusions 
phd thesis department computer sciences purdue university august 
sandeep kumar eugene spafford 
pattern matching model misuse intrusion detection 
proceedings national computer security conference pages baltimore md 
liepins vaccaro 
intrusion detection role validation 
security 
lunt 
detecting intruders computer systems 
conference auditing computer technology 
lunt jagannathan neumann javitz valdes garvey 
real time intrusion detection expert system ides final technical report 
computer science laboratory sri international menlo park california february 
spafford 
countering abuse name authentication 
cnd annual telecommunications policy research conference 

misuse detection tools 
journal computer security 
somayaji hofmeyr forrest 
principles computer immune system 
proceedings second new security paradigms workshop 
henry teng chen stephen lu 
security audit trail analysis inductively generated predictive rules 
proceedings sixth conference artificial intelligence applications pages piscataway new jersey march 
ieee 
appendix appendix gives detailed descriptions intrusions error conditions tested 
script uses special command line option cause sendmail append email message file 
script file rhosts local user may obtain root access 
attack uses syslog interface overflow buffer sendmail 
message sent sendmail victim machine causing log long specially created error message 
log entry overflows buffer sendmail replacing part sendmail running image attacker machine code 
new code executed causing standard root owned shell attached port 
attacker may attach port leisure 
attack run locally remotely tested modes 
varied number commands issued root successful attack 
decode older sendmail installations alias database contains entry called decode resolves unix program converts binary file encoded plain text original form name 
respects absolute filenames file bar uu says original file home foo rhosts bar uu attempt create foo rhosts file 
sendmail generally run semi privileged user daemon email sent decode overwrite file system target file happens world writable decode alias entry allows files modified remote user 
attack script uses lpr replace contents arbitrary file 
attack exploits fact older versions lpr different names printer queue files remove old queue files reusing 
attack consists getting lpr place symbolic link victim file queue incrementing lpr counter times printing new file overwriting victim file contents 
ftpd configuration problem 
wu ftpd misconfigured compile time allowing users site exec access bin 
users run executables bash root privilege 
unsuccessful intrusions sm sm 
forwarding loops local forwarding loops occurs sendmail set home forward files form logical circle 
considered simplest case shown table 
appendix appendix describes briefly synthetic normals generated ftpd lpr 
synthetic ftpd generated tracing execution ftpd option ftpd man page 
synthetic lpr generated tracing types lpr jobs printing text file printing postscript file attempting print nonexistent file printing different printers printing burst pages printing symbolic links option 
authors gratefully acknowledge support defense advanced research projects agency office naval research national science foundation ir 
performed whilst authors mit artificial intelligence laboratory helpful support staff provided environment experimentation 
people contributed important ideas suggestions including ackley sanchez lebaron haeseleer maccabe minar 
data tables generated help rogers longstaff computer emergency response team cert 
tables type behavior mail messages message length number messages message content subject sender receiver different forwarding bounced mail queuing vacation total table number messages type generate synthetic sendmail normal 
number table indicates number variants example different message lengths 
process database size sendmail lpr ftpd table normal database size sequence length sendmail lpr ftpd 
process number mismatches mismatches sa ls ls ls ps ps ux finger ping ftp pine table distinguishing sendmail processes 
column reports results single anomalous measures mismatches column percentage mismatches trace column column 
results shown sequence length 
mismatches sendmail database includes variations 
anomaly number mismatches mismatches sa decode ftpd table detection successful intrusions sendmail lpr ftpd 
data attack show results tracing sendmail tracing 
columns list results various anomalous measures mismatches percentage mismatches trace sa cases columns list range values minimum maximum 
results 
anomaly number mismatches mismatches sa sm sm forward loop table detection unsuccessful intrusions error conditions sendmail 
columns list results various anomalous measures mismatches percentage mismatches trace sa results 
unm mit number hosts number print jobs time period weeks db size detection mismatches mismatches sa table comparison lpr normals collected mit unm 
results 
email address forward file foo host bar host bar host foo host table forward loop 
captions example forest system call sequence trees 
sa plotted sequence length plot infer sequence length little difference length 
anomaly profile run intrusion 
data represents trace system calls concatenation forked sendmail processes 
sa value intrusion highest point reached axis 
growth database size lpr normal collected mit 
axis indicates number print jobs tried axis indicates number unique sequences normal database 
bootstrap estimate change expected false positive rate normal database size increases 

