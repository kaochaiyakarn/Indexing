steps cps transformation detailed olivier danvy department computing information sciences kansas state university danvy cis ksu edu december transforming term continuation passing style cps fact characterized separate aspects values intermediate applications name 
evaluation applications sequentialized traversal syntax tree 
traversal mimics reduction strategy 
resulting term equipped continuation abstraction application intermediate values yields final result evaluation 
point fulfilled uniform naming mechanism abstraction church encoding explains continuations represented functions 
second point justifies cps terms evaluation order independent evaluation order determined syntax tree traversal cps transformation 
third point captures essence cps transformation 
staged fischer plotkin original cps transformer points 
call value terms tree traversal post order 
method applicable evaluation orders call value evaluation right left call name 
staging originates need clearer formulation cps transformation suitable deriving inverse 
keywords calculus syntax trees continuation passing style transformation church encoding 
technical report cis department computing information sciences kansas state university 
revised version february 
manhattan ks usa 
phone 
fax 
partly supported nsf ccr 
background pass version fischer plotkin cps transformation derived earlier 
translation yields terms extraneous redexes pass composing fischer transformation plotkin colon translation 
mn fresh variable 
equations read level specification la nielson nielson 
operationally correspond functional abstractions applications translation program underlined occurrences represent syntax constructors 
result transforming term cps arbitrary context represented continuation fresh variable 
motivation cps transformation expressed pass looks counter intuitive 
earlier expressed direct style control abstractions concise equations remain 
direct style ds transformation needed express cps transformation form amenable proving cps ds transformations inverses 
lead staging cps transformation enlightening way 
goal report insight 
illustration transform direct style term cps steps 
ect name intermediate values fresh variables special form naming device cf 
section 
intermediate values produced sub terms applications 

second step cf 
section expressions 
possible variables introduced fresh risks name clashes 
cf 
section introduce continuation function call making formal parameter coincide formal parameter corresponding expression 
cps term modulo renaming yielded fischer plotkin cps transformer terms 
fact composition steps equivalent fischer plotkin cps transformation 
overview rest organized follows 
sections specify steps cps transformation naming intermediate values intermediate evaluations introducing continuations 
section points fischer plotkin cps transformer captures steps way compositional respect source term uses functional accumulator 
section specialize fischer plotkin cps transformer restricted source syntax evaluation sub expressions sequentialized point specialized transformation coincides third step 
naming intermediate values bnf direct style terms call value applicative order variables abstractions evaluated step applications need evaluation steps applications create intermediate values 
reason distinguish variables abstractions applications 
yields equivalent bnf direct style expressions 
respectively stand trivial serious reynolds terminology 
evaluating serious expression creates intermediate value 
transformation intermediate values explicit wrapping application expression 
fresh variable 
semantics expression usual strict working call value 
transformation trivially correct 
transformation characterized follows 
abstractions applications source term isolated expressions 
example term gets transformed intermediate evaluations stage bnf terms produced step cf 
section 
intuition section embedded expressions 
ect rewrite terms satisfy bnf 
rewrite system flattens embedded expressions 
proposition rewrite system strongly normalizing confluent 
proof rules overlap 
second fifth rules rewrite term term proper sub parts subjected rewriting 
trouble come third fourth rules 
associate set expression follows 
sets initialized zero 
expression occurs immediate sub term function argument declaration part expression increment set prior rewriting 
applying third fourth rules decrements set 
rules increment counter 
consider finite terms rewriting system terminates 
rewrite system meaning preserving variables newly introduced step possibility name clash call value expressions meaning preserving 
going back examples section term gets transformed introducing continuations open parenthesis naming church encoding motivate continuations introduced abstractions 
third step cps transformation 
church encoding quote wand comprehensive description church encoding higher order syntax called church encoding representation syntax phrase term binding relationships source phrase represented binding relationships term 
example quantified formula order logic represented 
shows bound 
church encoding possible avoid special forms bnf productions functional languages 
example writing rec special form rec bind recursively apply fixpoint operator abstraction fix ect 
example writing escape special form escape capture current continuation apply call cc operator abstraction call cc ect 
going back cps transformation church encoding suggests natural way name intermediate values yielded applications 
naming intermediate values revisited nutshell get rid special form church encoding writing combine combine new combinator 
define combine usual macro expansion expression redex combine combine alternatively view continuation define combine application second argument combine alternative definition combine leads continuation passing style 
correspondingly represent abstractions writing 
account continuation 
base case trivial terms handled applying current continuation inductively inherited lexically enclosing declaration captured rewrite system 
introducing continuations stage bnf terms produced second step cf 
section 
sorts variables original ones naming intermediate values add third sort denote continuations 
transformation introduces continuations terms transforming term introducing new identifiers describe transformation notation 
write state transformed judgement uses auxiliary judgements 
write state context denotes current continuation transformed write state trivial expressions transformed fresh variables 
equivalently inherited attribute expressed level specification section 
term transformed defined inductively follows 
going back example section term gets transformed usual cps counterpart term produced fischer plotkin cps transformer 
fischer plotkin sequentialization point wonder fischer plotkin cps transformer looks way 
section justifies appearance 
compositionality noticed sequentialization section compositional compositional denotational semantics 
definition rewrite system compositional holds equation part subjected rewriting right hand side equation proper subpart left hand side equation 
example equations section compositional ones compositional 
write compositional sequentialization 
compositional post order traversal sequentialization section obtained post order traversal application nodes abstraction 
ways program post order traversal 
example compositional traversal operating linear time requires accumulator 
accumulator represented function 
point developed appendix fischer plotkin cps transformer precisely encodes post order traversal functional accumulator 
accordingly rewrite system expressions compositionally functional accumulator 
expression sequentialized defined inductively follows 
rewriting system corresponds sml function appendix 
abstraction applications traversed post order 
traversal mimics call value reduction strategy 
combining naming sequentialization retrospect isolating naming phase pedagogic device 
compose steps 
third line di ers previous 
fresh variable 
essence cps transformation specializing fischer plotkin equations restricted source syntax evaluation subexpressions sequentialized yields precisely equations section 
composing transformations section section yields specification section 
comparison related cps transformation ubiquitous di erent areas computer science including logic constructive mathematics programming languages programming 
approach focuses syntactic aspects transformation semantic implications 
concentrated producing output term output formats may correspond code generation register allocation la wand 
particular post order traversal encoded cps transformation justifies cps transformation naturally supports semantics directed compiling respect syntax tree code sequentialization 
steps cps transformation nicely generalize haynes cps transformation post order traversal syntax trees explicit 
identification traditional intuitive descriptions programming cps transformation 
issues stage cps transformation steps simple state motivate 
staging appeared su ciently original enlightening warrant reporting pedagogic purposes 
generalized extended applied calculi ered scheme 
staging general changing traversal order syntax tree yields cps transformation 
examples include right left cps transformation call name needs tag source syntax delay force detailed full version 
andrzej filinski 
due john greiner julia lawall 
andrew appel 
compiling continuations 
cambridge university press 
william clinger daniel friedman mitchell wand 
scheme higher level semantic algebra 
john reynolds maurice nivat editors algebraic methods semantics pages 
cambridge university press 
william clinger jonathan rees editors 
revised report algorithmic language scheme 
lisp pointers iv july september 
olivier danvy 
back direct style 
bernd krieg bruckner editor proceedings fourth european symposium programming lecture notes computer science rennes france february 
technical report cis department computing information sciences kansas state university 
olivier danvy andrzej filinski 
abstracting control 
proceedings acm conference lisp functional programming pages nice france june 
olivier danvy andrzej filinski 
representing control study cps transformation 
technical report cis kansas state university manhattan kansas january 
andrzej filinski 
linear continuations 
proceedings nineteenth annual acm symposium principles programming languages pages albuquerque new mexico january 
acm press 
michael fischer 
lambda calculus schemata 
proceedings acm conference proving assertions programs pages 
sigplan notices vol 
sigact news january 
daniel friedman mitchell wand christopher haynes 
essentials programming languages 
mit press mcgraw hill 
murthy 
evaluation semantics classical proofs 
proceedings sixth symposium logic computer science amsterdam netherlands july 
ieee 
flemming nielson hanne riis nielson 
level semantics code generation 
theoretical computer science january 
gordon plotkin 
call name call value calculus 
theoretical computer science 
john reynolds 
definitional interpreters higher order programming languages 
proceedings th acm national conference pages boston 
mitchell wand 
deriving target code representation continuation semantics 
acm transactions programming languages systems 
mitchell wand 
correctness procedure representations higher order assembly language 
steve brooks editor mathematical foundations programming semantics lecture notes computer science march 
appear 
compositional tree traversals appendix provides necessary background traversing trees compositionally 
point show fischer plotkin cps transformer traverses syntax trees compositionally functional accumulator 
sml forms source target terms explicit relates term grammars 
flattening trees define trees zero ary unary binary nodes cf 

want flatten trees canonical form 
example tree cons cons leaf node cons cons leaf leaf leaf leaf flattened canonical form 
cons leaf cons node cons leaf cons leaf leaf leaf undergraduate data structures books describe flatten tree incrementally 
captured iterative function displayed 
line definition flatten passed tree proper subpart input tree 
terms flatten compositional respect input see section 
way express flatten compositionally respect input making traverse tree 
undergraduate programming books describe idea accumulator delay recursive call proper sub part input 
captured function displayed 
way express flatten compositionally respect input 
graduate functional programming books describe idea represent accumulator function 
datatype constructors functions fun fun cons captured function displayed 
datatype tree leaf node tree cons tree tree specification tree sml 
fun flatten leaf leaf flatten node node flatten flatten cons leaf cons leaf flatten flatten cons node cons node flatten flatten flatten cons cons ll lr flatten cons ll cons lr flattening tree sml non compositionally 
datatype option fun flatten fun traverse leaf leaf traverse leaf cons leaf traverse node node flatten traverse node cons node flatten traverse cons acc traverse traverse acc traverse flattening tree sml compositionally 
fun flatten fun traverse leaf leaf traverse node node flatten traverse cons traverse fn cons traverse traverse fn flattening tree sml compositionally functional accumulator 
assessment demonstrated previous section inherently higher order flattening tree post order traversal 
section instantiate result terms show instantiation coincides fischer plotkin sequentialization cf 
section 
trees closely resemble syntax trees calculus 
leaves correspond variables unary nodes correspond abstractions binary nodes correspond applications 
go back syntax trees intermediate values applications name cf 

distinguish trivial terms variables abstractions serious terms applications data type seen implementation bnf specified section 
example term represented tv abs tv abs sr app sr app tv var tv var tv abs tv var want intermediate applications data structure specified 
data type seen implementation bnf specified section 
example sequentialized tv abs tv abs sr app var var sr app var abs tv var tv var corresponds term sequentialization achieved non compositionally compositionally 
point compositional sequentialization functional accumulator cf 
literally corresponds fischer plotkin sequentialization cf 

datatype ast tv sr var string abs string ast app string ast ast syntax calculus sml 
datatype ast tv sr var string abs string ast app string ast syntax sequentialized calculus sml 
fun flatten ast fun traverse tv traverse traverse sr traverse traverse var var traverse abs ast abs flatten ast traverse app fct arg traverse fct fn traverse arg fn targ sr app targ var traverse ast fn tv calculus terms compositionally sml 
fischer plotkin sequentialization terms 

