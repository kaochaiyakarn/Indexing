lisp symbolic computation international journal fl kluwer academic publishers manufactured netherlands call need continuation passing style chris okasaki cs cmu edu peter lee cs cmu edu david tarditi cs cmu edu school computer science carnegie mellon university pittsburgh pa keywords call need continuation passing style continuations lazy evaluation functional programming 
examines transformation call need terms continuation passing style cps 
begins presenting simple transformation call need terms program graphs reducer graphs 
informal derivation carried resulting translation terms self reducing program graphs graphs represented cps terms involving storage operations 
informal derivation proceeds simple steps resulting translation taken canonical cps transformation call need terms 
order define cps transformation formally alternative presentations 
takes form continuation semantics call need language 
second presentation follows danvy hatcliff stage decomposition call name cps transformation resulting similar stage cps transformation call need 
number practical matters considered including improvement eliminate called administrative redexes avoid unnecessary memoization take advantage strictness information 
improvements feasible consider potential applications compilers call need programming languages 

trends compiler construction terms written continuation passing style cps intermediate representation 
transformations cps call name call byvalue languages known unaware similar transformation languages implemented call need evaluation strategy known lazy evaluation :10.1.1.42.4772
find natural consider transformation 
motivations cps supported part national science foundation pyi ccr matching funds bell northern research 
supported ph scholarship 
okasaki lee tarditi expose low level implementation details high level intermediate language compatible efficiency considerations motivate call need evaluation strategy 
considering graph reduction standard technique implementing lazy evaluation 
examine simple transformation call need terms program graphs reducer graphs inspired spineless machine 
graphs reducer expressed ml programs 
informally derive translation terms self reducing program graphs graphs represented cps ml terms involving storage operations 
informal derivation proceeds simple steps resulting translation taken canonical cps transformation call need terms 
graph reducer evaluation subgraphs order achieve lazy behavior 
memoization involves destructive updates underlying graph store canonical cps transformation updates expressed assignments ml style mutable 
order mechanism explicit formal alternative presentation cps transformation form continuation semantics 
way provide complete definition cps terms storage operations 
provide formal account call need transformation follow danvy hatcliff decomposition call name cps transformation simpler transformations 
making simple extension danvy hatcliff staging account memoization obtain similar stage transformation show transformation equivalent canonical transformation 
remainder consider number practical matters including improvement call need transformation eliminate called administrative redexes optimal cps transformation danvy filinski :10.1.1.42.4772:10.1.1.42.4772
optimizations include transformations avoid unnecessary memoization take advantage strictness information 
conclude brief discussion possible applications directions 

graph reduction continuation passing style graph reduction program converted directed graph representation 
graph reducer evaluate program 
wadsworth graph reduction evaluate programs 
turner popularized idea implementation sk combinators 
refinements concept proposed including spine call need continuation passing style machine serves inspiration model graph reduction 

graph reducer purposes programs represented binary dags binary trees shared subgraphs 
interior nodes represent applications leaves represent functions 
assume programs free variables 
addition roots potentially shared subgraphs distinguished special marker 
evaluate graph call name strategy spine graph path root left leaf traversed pushing arguments stack function reached 
function applied building graph corresponding body function substituting arguments stack occurrences function parameters 
new graph evaluated remaining stack 
reduction complete function reached arguments stack 
function considered take arguments form 
abstraction 
achieve call need evaluation account memoization shared subgraph evaluations 
memoized evaluation involves saving current stack evaluating subgraph empty stack 
root subgraph overwritten result 
original stack restored evaluation new graph continued 
concretely consider datatype graphs procedure evaluating graphs ml programming notation 
note ml notation assignable implement destructive update graphs 
representation shared graphs requires bit explanation 
graph share essentially annotation indicating graph potentially shared 
self annotated graph facilitate update purpose memoization 
presents transformation terms ml terms type graph ref transform shared graphs functions respectively 
note shorthand ref may occur graph cycles represent recursion consider recursive programs 
okasaki lee tarditi graph clos stack graph theta stack app graph ref theta graph ref share graph ref theta graph ref stack push graph ref theta stack empty eval graph stack graph eval clos concat eval app eval 
push eval share eval 
empty eval simple graph reducer spineless machine 
evaluate term ml program executed eval empty 
points worth mentioning graph reduction scheme 
transformation arranges arguments shared 
overly conservative 
practical approach described section 
second graph typically assume programs lambda lifted prior conversion graph form 
greatly simplifies handling environments assumptions 
functions compiled sense function converted expression executed builds graph function body reduces 
fact key idea machine practical graph 

graph reduction continuation passing style informally derive cps transformation call need terms incrementally modifying representation graphs graphs represented cps terms involving storage operations 
step remove overhead interpreting graphs folding eval essence graphs represented directly call need continuation passing style 
ref clos 
empty ref app share 
fix case push 
push eval 
clos conversion call need terms ml terms type graph ref functions derived reducer 
instance application graphs represented follows ref 
push 
empty implementation graphs may represented closures small directly sequences machine code :10.1.1.53.3729
note approach involves self modifying code seldom feasible modern computer architectures 
folding introduces subtle effect time graphs constructed 
previously top level program graph graphs representing bodies functions built 
words ml term produced executed built entire graph 
graphs built incrementally subgraphs constructed necessary 
occurs code building subcomponents graph specifically application delayed abstraction 
practice effect beneficial instance complicated argument evaluated 
reason incremental behavior desired original behavior regained hoisting construction subgraphs outside comparable generation compilers interpreters partial evaluation 
okasaki lee tarditi scope abstraction 
instance ref 
push follows assume incremental behavior acceptable 
observe shared graphs destructively updated 
avoid placing graphs store 
push empty 
note argument stack essence representation portion current continuation part continuation arising function application 
specifically argument stack push push push representation continuation 
expressing argument stacks equivalent continuations introducing continuations capture sequencing implicit statements storage operations leads translation shown 
note stack easily consume arguments 
restrict attention single argument higher order functions 
note sml storage primitives ref replaced continuation passing style storage primitives new deref assign 
primitives defined formally section 
note readability semicolon delimit third argument assign 
difference assign assign call need continuation passing style new assign assign deref cps graph reducer 
transformation serves canonical call need cps transformation 
viewed perspective rename transformation mc plotkin call name cps transformation 
point view final transformation shown serves high level description form graph reduction inspired spineless machine 
slight change perspective view transformation call need cps transformation 
rename transformation instructive compare call name cps transformation shown 
difference rule application call need transformation memoization code involving storage operations wrapped argument 

source target languages transformations convert terms source language terms target language 
languages similar may differ intended evaluation strategy may different nonstandard extensions 
order avoid confusion simple notation naming languages 
language variant exp untyped calculus grammar okasaki lee tarditi occasionally application written variations exp named subscripts describe intended evaluation strategy nonstandard extensions 
possible subscripts follows evaluation orders ffl call name ffl call need ffl call value ffl evaluation order independent cps 
non standard extensions ffl memoized suspension primitives thunk ffl storage primitives store 
example exp thunk call value calculus extended force delay operations manipulating thunks 
precise nature nonstandard extensions defined sections 
languages employ mixed evaluation strategy 
example exp employs call need call value evaluation manner precise 
grammars languages included appendix 
shown canonical cps transformation call need terms functionality exp exp cps store similarly exp exp cps 
continuation semantics call need terms viewing denotational semantics syntax directed translation source language 
version lambda calculus wand see addition environment cps transformation corresponds quite closely continuation semantics 
expressing transformation continuation semantics yields important insight call need continuation passing style ans 
answers val clos expressible values clos thunk thunk closures ae env ide thunk environments val ans expression continuations thunk ans thunks exp env thunk ae ae ae 
ae ae ae call name continuation semantics corresponding meanings cps terms storage operations 
domain equations particularly helpful respect 
straightforward example consider call name continuation semantics corresponding domain equations 
see meaning transformed term thunk takes expression continuation produces answer 
add domain stores obtain call need continuation semantics corresponding domain equations shown 
semantics storage operators 
see meaning transformed term thunk takes expression continuation produces command continuation turn takes store produces answer 
note command continuation corresponds storage operation 
informally think thunk expression continuation performing reductions storage operation invoking storage operation command continuation current store 

stage call need cps transformation danvy hatcliff demonstrate call name cps transformation decomposed distinct stages course absence side effects call need call name denotationally indistinguishable 
separate denotational semantics explicit stores call need useful framework adding side effects okasaki lee tarditi ans 
answers val clos expressible values clos thunk thunk closures ae env ide thunk environments ff loc locations oe store loc thunk stores store ans command continuations val expression continuations thunk thunks exp env thunk ae ae ae 
ae ae new ff assign ff ae assign ff deref ff call need continuation semantics corresponding new loc new oe ff oe ff free oe deref loc 
thunk deref ff oe oe ff oe assign loc thunk assign ff oe 
semantics cps storage operators 
call need continuation passing style exp exp thunk force delay transformation mapping call name terms call value language explicit thunks 
thunks transformation continuations call value cps transformation extended handle thunks 
written ffi extend result call need accounting memoization 
consider exp thunk call value calculus extended operations thunks ffl delay construct thunk term ffl force evaluate thunk value call name terms simulated language transformation shown delays argument forces variable 
extend call need merely replace rule application delay delay identical delay intended semantics include memoization 
simply take usual call value cps transformation extend handle operations thunks 
complete transformation 
delay force operators easily transformed follows delay force delay performs memoization usual way 
delay new assign assign deref okasaki lee tarditi exp thunk exp cps store mn force delay delay new assign assign deref plotkin call value cps transformation extended treat operations thunks 
theorem term exp proof structural induction 
case proceeds expanding definitions reducing appropriate 
cases shown 
formally simply write ffi decomposing manner convenient optimizations transformation may localized just subcomponents 
improvements described section improvements section 
alternatively may useful factor description memoization third stage ffi ffi approach transforms delay appropriate combinations delay force call value storage operations 
extended transform direct style call value storage operations cps storage operations need longer transform delay 
details factorization left exercise motivated reader 

eliminating administrative redexes literal implementations transformations introduce redexes simply manipulate continuations doing useful computation 
call need continuation passing style force mk xk delay delay mn new assign assign deref new assign assign deref derivations proof 
okasaki lee tarditi exp thunk exp cps store mn force delay delay new assign assign deref exp thunk 
exp cps store exp cps store exp cps store mn force delay delay new assign assign deref level specification extended call value cps transformation 
compiler administrative redexes may eliminated postpass 
alternatively may reduced fly staged transformation style danvy filinski differentiates administrative redexes static terms syntax constructors dynamic terms :10.1.1.42.4772:10.1.1.42.4772
writing call value cps transformation form obtain staged call need cps transformation free decomposition ffi contains staged call value cps transformation 
read level specification terms correspond static transformation time operations underlined terms storage operations correspond dynamic run time operations 
transformation time underlined terms call need continuation passing style just syntax constructors exp cps store transforms terms dynamic continuations transforms terms static continuations 
related follows lemma term exp static continuation dynamic continuation fij fij proof structural induction 
ffi ffi theorem term exp fij proof proceeds fashion theorem case application requires lemma 
refinement note force eliminate redex adding special case 
force requires modification force produce redex 
simple consequences modification identities delay force delay force 
optimizations actual implementations functional programming languages employ number optimizations compile time analyses 
section consider optimizations 
expressing directly confine modifications okasaki lee tarditi exp exp simple optimizer 
applications arguments require memoization converted call name 

eliminating unnecessary memoization transformation far performs excessive memoization 
argument memoized fact arguments memoization unnecessary may safely elided 
eliding memoization argument corresponds replacing call need application call byname application 
call optimization 
consider intermediate language exp call need call name applications written respectively 
optimizer exp exp maps application safe require memoization 
tell arguments require memoization 
abstractions variables require memoization abstractions weak head normal form evaluated variables bound arguments memoized required 
simple version takes cases account appears 
unshared arguments require memoization 
argument shared value required thunk forced 
conversely argument unshared value required 
unshared argument evaluated know value required 
saving value pointless 
incorporating sharing analysis increases effectiveness allowing unshared arguments 
advantage optimization requires slight modification substitute delay delay call name applications 
new transformation shown 
call need continuation passing style exp exp thunk force delay delay introducing thunks 
points variable arguments 
arguments need delayed 
special case force ensure doing causes overhead delay force 
second may occasionally useful variable argument 
sharing analysis show argument unshared paths may worthwhile argument paths shared 
burn call dynamic marking shared thunks 
consider application share arguments share argument 
produce term knew arguments produce term case argument memoized 
second case argument memoized passed variable 

strictness optimizations certain functions known strict functions safe call byvalue program evaluated call need 
modern compiler technology typically generates efficient code callby value call need common optimization call byvalue strict functions detected strictness analysis 
demonstrate incorporate optimization transformation 
okasaki lee tarditi exp exp thunk force delay force delay introducing thunks strictness optimizations 
consider mixed calculus call need call value terms indicated subscripts respectively coercions 
grammar language exp 
call need terms call value terms coercions framework strictness optimizer exp exp replaces call need lazy terms call value strict counterparts provably safe 
course done consistent manner 
instance lazy function strict function 
gives modifications required strictness optimizations 
call need terms transformed usual way adding delay force call value terms unchanged transformation target language call value 
coerces call value function call need function opposite 
examples illustrate 
consider function strict argument information assume lazy function yielding mixed term call need continuation passing style note strict variable value bound lazy function 
happens appears lazy context instance argument 
simply insert coercion 
key prevented making strict function spite fact lazy context 
effect sort coercion allow functions analyzed optimized isolation contexts functions appear course contexts account may result better optimizations 
second example consider function course transform coerce strict functions applied 
alternatively transform coerce lazy functions applied 
general translation unsafe bound lazy function argument evaluated needed 
argument evaluates trivially abstraction evaluating harm needed arguments evaluate trivially strict variables lazy variables certain previously forced detectable path analysis may treated similarly 
translation preferable depends functions applied 
usually applied lazy functions translation may preferable vice versa 
combining strictness optimizations optimizations previous section strictness optimizations performed 
applied changing remaining callby need applications call name 
reason ordering strictness optimizations change sharing behavior program causing shared arguments unshared candidates 
thunk passed strict function forced previously may forced okasaki lee tarditi times 
course able apply strictness optimizations modified operate appropriate terms exp exp extended similarly 
exp exp thunk 
putting complete transformation exp exp cps store ffi ffi ffi composing just stages yields cps transformation mixed terms cm shown 
point correctness complete transformation depends correctness proof correctness probably follow lines wand 
note identity transformations introduce call name call byvalue terms specializes 
related arose desire give cps presentation graph reduction particularly called tagless models graphs directly executed interpreted 
previous descriptions graph reduction informally state transition systems 
developed rudimentary call need cps transformation danvy call name cps transformation proved invaluable guiding evolution 
authors investigated similar topics involving call continuations 
presents continuation semantics lazy functional language rgensen rewrites interpreter lazy language cps achieve binding time improvements purpose partial evaluation 
employ different memoization technique explicit tag distinguishes evaluated unevaluated expressions 
wang describes methods implementing lazy evaluation scheme call cc access continuations including calls status checking free implementation similar 
call need continuation passing style cm exp exp cps store cm cm cm cm cm mcm cm cm new assign cm assign deref cm cm cm cm cm cm mn cm cm mn cm cm cm exp 
exp cps store exp cps store exp cps store cm cm cm cm cm cm cm cm new assign cm assign deref cm cm cm cm cm cm mn cm cm mn cm cm cps transformation mixed terms 
okasaki lee tarditi 
call need cps transformation explored variations culminating produces administrative redexes takes advantage strictness sharing information 
number possible directions 
obvious application ideas area compiler construction 
approach transformation front cps compiler lazy functional language 
existing cps back supports storage operations originally developed call value language 
early experience implementations techniques gives reason believe approach viable 
second area investigation incorporation optimizations analyses transformation 
strictness sharing optimizations fit quite cleanly framework interesting see optimizations 
grateful mitch wand keen insight clarified thinking 
wish olivier danvy suggestions encouragement 

appel andrew jim trevor 
continuation passing style 
sixteenth acm symposium principles programming languages 

asperti andrea 
integrating strict lazy evaluation sl calculus 
ma nski editors programming language implementation logic programming sweden springerverlag 

van der programs 

unpublished workshop presentation 

augustsson lennart 
compiling lazy functional languages part ii 
phd thesis department computer sciences chalmers university technology 
call need continuation passing style 
bloss hudak paul young jonathan 
code optimizations lazy evaluation 
lisp symbolic computation 

burn geoffrey hankin chris abramsky samson 
strictness analysis higher order functions 
science computer programming 

burn geoffrey peyton jones simon robson john spineless machine 
proceedings acm conference lisp functional programming snowbird 

danvy olivier filinski andrzej 
representing control study cps transformation 
mathematical structures computer science december 

danvy olivier hatcliff john 
thunks continued 
proceedings workshop static analysis wsa irisa rennes france bordeaux france september 
extended version available technical report cis kansas state university 

danvy olivier hatcliff john 
cps transformation strictness analysis 
acm letters programming languages systems 
appear 

futamura 
partial evaluation computation process approach compiler compiler 
systems computers controls 

goldberg benjamin 
detecting sharing partial applications functional programs 
kahn gilles editor proceedings conference functional programming computer architecture portland springer verlag 

hughes john 
design implementation programming languages 
phd thesis oxford university 

johnsson thomas 
lambda lifting transforming programs recursive equations 
jouannaud editor conference functional programming languages computer architecture nancy springerverlag september 

johnsson thomas 
compiling lazy functional languages 
phd thesis department computer sciences chalmers university technology 
okasaki lee tarditi 
rgensen jesper 
generating compiler lazy language partial evaluation 
symposium principles programming languages january 

mark semantics lazy functional languages 
theoretical computer science 

koopman philip lee peter siewiorek daniel 
cache behavior combinator graph reduction 
acm transactions programming languages systems april 

kranz david kelsey richard rees jonathan hudak paul philbin james adams norman 
orbit optimizing compiler scheme 
proceedings sigplan symposium compiler construction july 

mycroft alan 
theory practice transforming call need call value 
proceedings th international symposium programming springer verlag 

nielson flemming nielson hanne riis 
level semantics code generation 
theoretical computer science january 

peyton jones simon implementing lazy functional languages stock hardware spineless tagless machine 
journal functional programming april 

plotkin gordon call name call value calculus 
theoretical computer science 

reynolds john definitional interpreters higher order programming languages 
proceedings acm national conference new york new york 

steele jr guy rabbit compiler scheme 
technical report mit 

turner david new implementation technique applicative languages 
software practice experience january 

wadsworth christopher semantics pragmatics lambda calculus 
phd thesis university oxford 

wand mitchell 
short proof lexical addressing algorithm 
information processing letters 
call need continuation passing style 
wand mitchell 
specifying correctness binding time analysis 
symposium principles programming languages january 

wang ching lin 
obtaining lazy evaluation continuations scheme 
information processing letters 
grammars exp exp exp exp cps exp exp exp exp thunk force delay delay exp cps store newm deref assign 
