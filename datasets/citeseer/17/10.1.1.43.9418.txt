timed automata rajeev alur 
model checking emerging practical tool automated debugging complex reactive systems embedded controllers network protocols see survey 
traditional techniques model checking admit explicit modeling time unsuitable analysis real time systems correctness depends relative magnitudes different delays 
consequently timed automata introduced formal notation model behavior real time systems :10.1.1.43.9418
definition provides simple way annotate state transition graphs timing constraints finitely real valued clock variables 
automated analysis timed automata relies construction finite quotient infinite space clock valuations 
years formalism extensively studied leading results establishing connections circuits logic progress developing verification algorithms heuristics tools 
provides survey theory timed automata role specification verification real time systems 
modeling transition systems 
model discrete systems state transition graphs transitions labeled event symbols 
transition system tuple hq sigma set states set initial states sigma set labels events theta sigma theta set transitions 
system starts initial state system change state event write label state reachable state state reachable state system reachable initial state 
complex system described product interacting transition systems 
hq sigma hq sigma transition systems 
product denoted ks transition system hq theta theta sigma sigma iff sigma sigma ii sigma sigma iii sigma sigma observe symbols belong alphabets automata synchronization 
transition systems timing constraints 
express system behaviors timing constraints consider finite graphs augmented finite set real valued clocks vertices graph called locations edges called switches 
switches instantaneous time elapse location 
clock reset zero simultaneously switch 
instant reading clock equals time elapsed time reset 
switch associate clock constraint require switch may taken current values clocks satisfy constraint 
location associate clock constraint called invariant require time elapse location long invariant stays true 
define timed automata formally consider simple example 
department computer information science university pennsylvania bell laboratories lucent technologies 
email alur cis upenn edu 
supported part nsf career award ccr darpa nag 
fig 

timed automaton clocks consider timed automaton clocks 
clock gets set time system switches symbol invariant associated locations ensures labeled switch happens time preceding resetting independent clock labeled switch checking value labeled switch ensures delay greater 
notice example constrain delay system put explicit bounds time difference important advantage having multiple clocks set independently 
clock constraints clock interpretations 
define timed automata formally need say type clock constraints allowed invariants enabling conditions 
set clocks set phi clock constraints defined grammar clock constant clock interpretation set clocks assigns real value clock mapping set ir nonnegative reals 
ffi ir ffi denotes clock interpretation maps clock value ffi 
denotes clock interpretation assigns agrees rest clocks 
syntax semantics 
timed automaton tuple hl sigma ei finite set locations set initial locations sigma finite set labels finite set clocks mapping labels location clock constraint phi theta sigma theta theta phi theta set switches 
switch hs represents edge location location symbol clock constraint specifies switch enabled set gives clocks reset switch 
semantics timed automaton defined associating transition system sa 
state sa pair location clock interpretation satisfies invariant 
set states denoted qa state initial state initial location clocks types transitions sa state change due elapse time state real valued time increment ffi ffi 
ffi ffi ffi ffi satisfies invariant 
state change due location switch state switch hs satisfies 

sa transition system label set sigma ir 
instance timed automaton state space associated transition system fs theta ir label set fa dg ir sample transitions 




note time additivity property ffi ffl ffi ffl 
omitted requirements definition necessary executability 
invariant location violated outgoing edge enabled 
second reachable state automaton admit possibility time diverge 
example automaton enforce infinitely events finite interval time 
automata satisfying operational requirement called nonzeno 
interested reader referred 
product construction 
proceed define product construction timed automata complex system defined product component systems 
hl sigma hl sigma timed automata 
assume clock sets disjoint 
product denoted ka timed automaton hl theta theta sigma sigma ei switches defined 
sigma sigma hs hs 
sigma sigma hs 
sigma sigma hs locations product pairs component locations invariant compound location conjunction invariants component locations 
switches obtained synchronizing switches identical labels 
train gate controller example 
consider example automatic controller opens closes gate railroad crossing 
system composed components train gate controller shown 
safety correctness requirement system train inside gate gate closed 
corresponds establishing reachable state location train location gate observe location reachable product graph 
example edge initial location corresponding scenario event approach immediately followed event 
product simply syntactic operation annotates product locations conjunctions invariants product edges conjunctions enabling conditions analysis 
consider timing information establish event approach immediately followed event location clocks value event lower guard guaranteed precede event guard 
computational problem timing verification deductions analyzing timing constraints 
train approach approach raise exit lower controller gate raise lower exit fig 

train gate controller compositionality 
communication system components competing alternatives definition exist 
choice synchronization primitives somewhat orthogonal problem analysis timing constraints algorithmic techniques timed automata applied models 
model open real time systems interacting environment needs distinction events controlled system events controlled environment 
compositional framework provides foundations decompose analysis problem simpler problems 
issues pertaining impact timing synchronization studied 
reachability analysis location timed automaton said reachable state location component reachable state transition system sa input reachability problem consists timed automaton set target locations reachability problem determine target location reachable 
verification safety requirements real time systems formulated reachability problems timed automata illustrated train gate example 
transition system sa timed automaton infinite solution reachability problem involves construction finite quotients 
time transition system 
transition system sa timed automaton infinitely states infinitely symbols 
step define transition system called time transition system denoted ua transitions labeled symbols sigma hiding labels denoting time increments 
state space ua equals state space qa sa set initial states ua equals set initial states sa set labels ua equals set sigma labels transition relation ua relation states label iff exists state time value ffi ir ffi holds transition system sa reachability problem timed automata wish determine reachability target locations 
follows solve reachability problems consider time transition system ua sa stable quotients 
time transition system ua finitely labels infinitely states 
address problem consider equivalence relations state space qa equivalence relation state space qa said stable iff exists state quotient ua respect stable partition transition system ua states ua equivalence classes equivalence class initial state ua contains initial state ua set labels sigma contains labeled transition equivalence class class holds ua reduce reachability problem reachability problem quotient respect need ensure apart stability equate target states non target states 
equivalence relation said sensitive set target locations belong belong consequently solve reachability problem search equivalence relation stable sensitive finitely equivalence classes 
region equivalence 
define equivalence relation state space automaton equates states location agree integral parts clock values ordering fractional parts clock values 
integral parts clock values needed determine particular clock constraint met ordering fractional parts needed decide clock change integral part 
example clocks state transition clock constraint followed transition clock constraint depending current clock values satisfy 
integral parts clock values get arbitrarily large 
clock compared constant greater actual value exceeds consequence deciding allowed switches 
assuming clock constraints involve comparisons integer constants clock constraints involve rational constants multiply constant common multiple denominators constants 
formalize notion 
ffi ir fr ffi denotes fractional part ffi denotes integral part ffi ffi fr ffi 
clock largest integer compared clock constraint appearing invariant guard 
equivalence relation called region equivalence defined set clock interpretations clock interpretations iff conditions hold 
exceed 
fr fr iff fr fr 

fr iff fr 
clock region equivalence class clock interpretations induced 
nature equivalence classes best understood example 
consider timed transition table clocks 
clock regions shown 
note finite number regions 
delta delta pi number clocks 
number clock regions exponential encoding clock constraints 
corner points open line segments open regions fig 

clock regions region automaton 
region equivalence relation clock interpretations extended equivalence relation state space requiring equivalent states identical locations region equivalent clock interpretations iff key property region equivalence stability 
quotient timed automaton respect region equivalence called region automaton denoted 
number equivalence classes finite stable sensitive irrespective choice target locations 
follows solve reachability problem search finite region automaton 
complexity reachability 
reachability solved time linear number vertices edges region automaton linear number locations exponential number clocks exponential encoding constants 
technically reachability problem pspace complete 
fact established sources complexity number clocks magnitudes constants render pspace hardness independently 
choice timing constraints decidability 
clock constraints enabling conditions invariants timed automaton compare clocks constants 
constraints allow express constant lower upper bounds delays 
generalization constraints analysis technique breaks 
fact allow constraints form special case linear constraints clocks reachability problem undecidable :10.1.1.43.9418
zone automata 
strategy improve region construction collapse regions considering convex unions clock regions 
clock zone set clock interpretations described conjunction constraints puts lower upper bound clock difference clocks 
clocks set convex set dimensional euclidean space 
reachability analysis zones uses operations clock zones denotes intersection zones 
clock zone denotes set interpretations ffi ffi ir 
subset clocks clock zone denotes set clock interpretations 
key property set clock zones closure operations 
zone pair location clock zone 
build transition system states zones 
consider zone switch succ set clock interpretations state reached state letting time elapse executing switch set succ describes successors zone switch set succ computed operations clock zones follows succ clock zones effectively closed successors respect switches 
zone automaton obtained adding edges zones succ 
timed automaton zone automaton transition system states zones initial location zone initial location switch clock zone transition succ 
difference bound matrices 
clock zones efficiently represented matrices 
suppose timed automaton clocks clock zone represented theta matrix entry gives upper bound clock entry gives lower bound clock pair entry ij gives upper bound difference clocks distinguish strict nonstrict bound distinguish constraints allow possibility absence bound define bounds domain ik zz theta 
constant denotes absence bound bound zz denotes nonstrict bound bound denotes strict bound difference bound matrix dbm theta matrix entries elements ik 
example consider clock zone gamma represented matrix matrix matrix matrix observe implied constraints reflected matrix matrix obtained matrix tightening constraints 
tightening obtained observing sum upper bounds clock differences gamma gamma upper bound difference gamma purpose operations extended domain ik bounds 
matrices tightest possible constraints called canonical dbm satisfiable represents nonempty clock zone 
satisfiable dbm equivalent canonical dbm 
canonical dbms represent clock zones 
dbm classical algorithms computing pairs shortest paths check dbm satisfiable convert canonical form 
canonical dbms equivalent iff ij ij test search determine zone visited earlier 
representation canonical dbms supports required operations conjunction efficiently cf 

theoretically number zones exponential number regions zone automaton may exponentially bigger region automaton 
practice zone automaton fewer reachable vertices leads improved performance 
furthermore number clock regions grows magnitudes constants clock constraints experience indicates number reachable zones relatively insensitive magnitudes constants 
implementation 
input verification problem consists set component timed automata solution demands searching region automaton 
actual search performed fly enumerative engine bdd symbolic engine 
briefly sketch implementation search timed cospan 
suppose input program consists collection coordinating timed automata automaton timing annotations 
preprocessor generates new program consists automata description monitor automaton ar encoding region construction az encoding dbm zone construction 
suppose clocks constants bounded automaton ar variables variables ranging keep track integral parts clocks variables ranging give ordering fractional parts 
automaton az variables ranging gammac keep track numerical entries dbm boolean variables keep track strictness bit matrix entry 
update rules variables refer state variables component automata 
searching region automaton semantically equivalent searching product ar searching zone automaton semantically equivalent searching product az preprocessing step search engine cospan perform search input program bdds fly enumerative search 
experience shows enumerative search zone construction preferable symbolic search region construction preferable 
dense vs discrete time 
choice time domain ir set nonnegative real numbers 
alternatively choose set rational numbers results stay unchanged 
key property time domain context implies arbitrarily events happen different times interval nonzero length 
hand choose set nonnegative integers model time discrete time model flavor analysis problems changes quite bit 
dense time model reachability timed automata pspace universality undecidable discrete time case reachability timed automata pspace universality expspace 
believe discrete time models appropriate scheduling applications inappropriate modeling asynchronous applications asynchronous circuits 
verification real time systems discrete time models see instance 
established certain restrictions timed reachability problem answer irrespective choice ir 
minimization 
suppose wish explicitly construct representation state space timed automaton 
building region zone automaton employ minimization algorithm constructs coarsest stable refinement initial partition refining needed 
alternative symbolic representations 
attempts combine bdd representation discrete locations dbm representation zones 
sample approaches include encoding dbms bdds particular attention bit patterns variable ordering variants bdds specifically designed represent clock constraints 
discussion summarized basic techniques analysis timed automata see 
conclude briefly discussing tools applications theoretical results 
tools 
variety tools exist specification verification real time systems 
list closely related approach discussed 
tool timed cospan automata modeling analysis tool developed bell labs see 
tool kronos developed verimag supports model checking requirements 
uppaal toolkit developed collaboration aalborg university denmark uppsala university sweden allows checking safety bounded liveness properties 
tools incorporate additional heuristics improving performance 
applications 
methodology described suitable finding logical errors communication protocols asynchronous circuits 
examples analyzed protocols include philips audio transmission protocol carrier sense multiple access collision detection bang audio video protocol detailed description case studies obtained homepages kronos uppaal 
application cospan verification asynchronous communication chip reported scheduling problem telecommunication software reported 
automata theoretic verification 
reachability analysis discussed section adequate check safety properties real time systems 
verify liveness properties request occurs infinitely response need consider nonterminating infinite executions 
specification verification safety liveness properties formulated uniform elegant way automata theoretic approach 
approach timed automaton possibly acceptance conditions buchi viewed generator timed language set sequences real valued time occurrence associated symbol 
verification corresponds queries timed language defined timed automaton modeling system 
query timed automaton accepts undesirable behaviors verification question reduces checking emptiness intersection solved pspace 
hand query timed automaton accepts behaviors satisfying desired property verification corresponds testing inclusion timed languages undecidable general :10.1.1.43.9418
decidability language inclusion problem ensured requiring specification automaton deterministic event clock automaton 
theory regular regular languages finds applications including modeling discrete systems attempts develop corresponding theory timed languages 
timed languages defined timed automata characterized timed version timed regular expressions timed temporal logics 
complexity different types membership problems timed automata studied 
timed languages definable timed automata closed union intersection complementation 
prompted identification subclasses automata better closure properties 
equivalence refinement relations 
timed language equivalence timed automata undecidable stronger equivalences timed bisimulation simulation decidable 
timed automaton timed bisimulation equivalence relation state space qa sigma ir exists number equivalence classes maximal timed bisimulation relation infinite problem deciding exists timed bisimulation relates specified initial states surprisingly decidable algorithm involves analysis region automaton product space theta 
proof technique useful obtain algorithms checking existence timed simulation timed simulation relations useful establishing refinement descriptions different levels abstractions 
complexity deciding timed bi simulation exptime 
hierarchy approximations timed bisimulation relation defined basis number clocks observer distinguish timed automata 
impact precision observer clocks distinguishing ability studied 
linear real time temporal logics 
linear temporal logic ltl popular formalism writing requirements regarding computations reactive systems 
variety real time extensions ltl proposed writing requirements real time systems 
particular real time temporal logic metric interval temporal logic mitl admits temporal connectives eventually subscripted intervals 
typical bounded response requirement request followed response time units expressed mitl formula 
verify real time system modeled timed automaton satisfies specification mitl formula model checking algorithm constructs timed automaton accepts timed words violate checks product nonempty language 
definition mitl requires subscripting intervals nonsingular 
fact admitting singular intervals subscripts formulas form translation mitl timed automata impossible satisfiability model checking problems resulting logic undecidable 
see survey real time temporal logics 
branching real time temporal logics 
tools symbolic model checking employ branching time logic ctl specification language 
real time logic timed computation tree logic tctl allows temporal connectives ctl subscripted intervals 
instance bounded response property request followed response time units expressed tctl formula turns states region equivalent satisfy set tctl formulas 
consequently timed automaton tctl formula computation set states satisfy performed labeling algorithm labels vertices region automaton subformulas starting innermost subformulas 
alternatively symbolic model checking procedure computes set states satisfying subformula fixpoint routine manipulates boolean combinations zone constraints 
probabilistic models 
probabilistic extensions timed automata allow modeling constraints delay input event output event distributed uniformly seconds cf 

probabilities semantics verification question changes 
probabilistic timed automaton specification automaton accepts undesirable behaviors verification corresponds establishing probability run system generates word accepted zero 
modification cycle detection algorithm region automaton product solve problem 
similar approach works verifying tctl properties probabilistic timed automaton 
introduce explicit probabilities requirements event happen time probability model checking algorithms known discrete model time 
hybrid systems 
model timed automata extended continuous variables clocks temperature imperfect clocks modeled 
hybrid automata useful modeling discrete controllers embedded continuously changing environment 
verification hybrid automata undecidable general 
subclass rectangular automata analysis possible language preserving translation timed automata subclass linear hybrid automata analysis possible symbolic fixpoint computation polyhedra 
see theory tool hytech survey 

research timed automata collaboration courcoubetis david dill tom henzinger bob kurshan 
salvatore la torre comments survey 

abadi lamport 
old fashioned recipe real time 
real time theory practice rex workshop lncs pages 
springer verlag 

alur courcoubetis dill 
model checking probabilistic real time systems 
automata languages programming proc 
th icalp lncs pages 

alur courcoubetis dill 
model checking dense real time 
information computation 

alur courcoubetis halbwachs dill wong toi 
minimization timed transition systems 
concur lncs pages 

alur courcoubetis halbwachs henzinger ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science 

alur courcoubetis henzinger 
observational power clocks 
concur fifth conference concurrency theory lncs pages 

alur dill 
theory timed automata 
theoretical computer science 

alur feder henzinger 
benefits relaxing 
journal acm 

alur fix henzinger 
event clock automata class timed automata 
theoretical computer science 

alur henzinger 
really temporal logic 
journal acm 

alur henzinger 
modularity timed hybrid systems 
concur eighth conference concurrency theory lncs pages 

alur henzinger 
ho 
automatic symbolic verification embedded systems 
ieee transactions software engineering 

alur itai kurshan yannakakis 
timing verification successive approximation 
information computation 

alur jagadeesan 
model checking real time systems telecommunications application 
proc 
intl 
conf 
software engineering 

alur kurshan 
timing analysis cospan 
hybrid systems iii control verification lncs pages 
springer verlag 

alur kurshan viswanathan 
membership problems timed hybrid automata 
proceedings th ieee real time systems symposium 


asarin maler caspi 
kleene theorem timed automata 
proceedings th ieee symposium logic computer science pages 

behrmann larsen pearson weise yi 
efficient timed reachability analysis clock difference diagrams 
computer aided verification 

sifakis tripakis 
modeling urgency timed systems 
compositionality significant difference lncs 
springer verlag 

maler pnueli yovine 
progress symbolic verification timed automata 
computer aided verification lncs pages 


campos clarke 
real time symbolic model checking discrete time models 
theories experiences real time system development amast series computing 

clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
proc 
workshop logic programs lncs pages 

clarke kurshan 
computer aided verification 
ieee spectrum 

courcoubetis yannakakis 
minimum maximum delay problems real time systems 
third workshop computer aided verification lncs pages 

olivero tripakis yovine 
tool kronos 
hybrid systems iii verification control lncs pages 
springer verlag 

de alfaro 
formal verification probabilistic systems 
phd thesis stanford university 

dill 
timing assumptions verification finite state concurrent systems 
automatic verification methods finite state systems lncs pages 

emerson mok sistla srinivasan 
quantitative temporal reasoning 
computer aided verification nd international conference lncs pages 

gawlick segala andersen lynch 
liveness timed untimed systems 
proc 
icalp lncs pages 

henzinger 
theory hybrid automata 
proceedings th ieee symposium logic computer science pages 

henzinger 
time real time logics reviewed 
concur ninth international conference concurrency theory lncs pages 


henzinger ho wong toi 
hytech generation 
tacas tools algorithms construction analysis systems lncs pages 

henzinger puri varaiya 
decidable hybrid automata 
proceedings th acm symposium theory computing pages 

henzinger manna pnueli 
digital clocks 
icalp automata languages programming lncs pages 
springer verlag 

henzinger nicollin sifakis yovine 
symbolic model checking real time systems 
information computation 

henzinger raskin 
regular real time languages 
icalp automata languages programming lncs pages 


kang lee 
state minimization concurrent system analysis state space exploration 
proceedings conference computer assurance pages 


specifying real time properties metric temporal logic 
journal real time systems 

kurshan 
computer aided verification coordinating processes automata theoretic approach 
princeton university press 

larsen pettersson yi 
uppaal nutshell 
springer international journal software tools technology transfer 

larsen steffen weise 
continuous modeling real time hybrid systems concepts tools 
software tools technology transfer 

larsen wang 
time abstracted bisimulation implicit specifications decidability 
proceedings mathematical foundations programming semantics 

lynch 
distributed algorithms 
morgan kaufmann 

merritt tuttle 
time constrained automata 
proceedings workshop theories concurrency 


temporal logic real time systems 
research studies press 

pnueli 
temporal logic programs 
proceedings th ieee symposium foundations computer science pages 

sifakis 
specification verification concurrent programs cesar 
proceedings fifth symposium programming lncs pages 

alur kurshan brayton 
verifying abstractions timed systems 
concur lncs pages 

brayton 
case study compositional hierarchical timing verification 
cav lncs pages 

tripakis yovine 
analysis timed systems time abstracting bisimulations 
proceedings eighth conference computer aided verification lncs 

cer ans 
decidability bisimulation equivalence parallel timer processes 
cav lncs pages 

vardi wolper 
automata theoretic approach automatic program verification 
proc 
ieee symp 
logic computer science pages 

wilke 
specifying state sequences powerful decidable logics timed automata 
lncs pages 
springer verlag 

yannakakis lee 
efficient algorithm minimizing real time transition systems 
cav lncs pages 
