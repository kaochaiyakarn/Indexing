security properties csp steve schneider royal holloway university london egham surrey tw ex security properties confidentiality authenticity may considered terms flow messages network 
extent characterisation justified process algebra communicating sequential processes csp appropriate describe analyse 
explores ways security properties may described csp specifications security mechanisms may captured particular protocols designed provide properties may analysed csp framework 
concerned theoretical basis analysis 
sketch verification simple example carried illustration 
security protocols designed provide properties authentication key exchanges key distribution non repudiation proof origin integrity confidentiality anonymity users wish exchange messages medium little control 
properties difficult characterise formally informally 
protocols contain great deal combinatorial complexity making verification extremely difficult prone error 
promotes view process algebra provide single framework modelling protocols capturing security properties facilitating verification debugging 
discussion proposing possible approaches providing definitive answers 
considers confidentiality authenticity properties considered 
argued security properties considered properties concerning flow messages network 
extent characterisation justified process algebra csp appropriate describe analyse 
considers ways security properties may described notation csp security mechanisms may captured particular protocols designed provide properties may analysed csp framework 
approach general clear modelling particular properties analysis particular protocols require tailoring model 
aims exploring general approach trying construct universal model suitable handling possible security issues probably unrealistic goal 
security properties generally properties requiring bad occur exclusively form tend considered safety properties 
course particular communication protocols aim live occur designed achieve goals delivery messages 
distinction drawn security requirements implemented protocol liveness requirements important communication generally independent security 
possible security properties expressed liveness properties outside scope 
traces model csp adequate needs analyse properties form bad happen sufficient focus systems may 
equivalences refinements expressed grounded traces model 
structured follows relevant csp notation introduced section section contains discussion properties confidentiality authentication may captured csp independently security protocols section discusses modelling security protocols networks implemented contains exam ple verification toy confidentiality property illustrate material section discusses approach potential 
csp notation csp language designed specifically description communication patterns concurrent system components interact message passing 
underpinned theory supports analysis systems described csp 
suited description analysis network protocols protocols described csp relevant aspects network 
interactions investigated certain aspects behaviour verified theory 
section introduces notation ideas 
particular traces model csp 
fuller language reader referred 
events systems modelled terms events perform 
set possible events fixed analysis denoted sigma 
events may atomic structure may consist number distinct components 
example event put consists parts channel name put data value 
example events form consisting channel source destination message sets messages set messages fm single message elide set brackets define fmg example set events fi channel said type message sigma processes processes components systems 
entities described csp described terms possible events may engage 
process process engage events equivalent deadlock 
process process able initially perform behave way described process pronounced choice behave possible communications indexed form choice able behave arguments processes may composed parallel 
set events process behaves acting concurrently requirement synchronise event synchronisation set events may performed process independently 
special form parallel operator components interact events jjj equivalent fg processes may recursively defined means equational definitions 
process names appear left hand side definitions csp expressions may include names appear right hand side 
example definition light light defines process light possible behaviour perform alternately 
traces semantics process defined set sequences events traces may possibly perform 
examples traces include hi empty trace possible process hon oni possible trace light useful operator traces projection set events trace tr defined maximal subsequence tr events drawn singleton set fag overload notation write tr tr fag 
analysing processes specifications predicates traces process satisfies specification traces satisfy sat tr traces process refined process written traces traces 
means meets specification meet 
model checking techniques allow refinement relation checked mechanically finitestate processes tool fdr 
processes equal refines means equality processes checked fdr 
security properties network provides means users people applications programs communicate sending receiving messages 
situation may modelled high level abstraction csp process net provides user ways interacting sending messages parties receiving messages parties 
assume universal set message messages sent party consider users numbered user ng channel employed user input messages network input channel type user message input form considered instruction user transmit message user network 
high level view network channel employed user receive messages output network output channel type user message output form considered receipt user message sent user users requirements network expressed terms behaviour network csp successfully years description analysis communications protocols 
common safety liveness properties readily expressed terms possible behaviour network respect users 
example property spurious messages generated captured safety property requires output message previously input appears trace occurred 
liveness requirement message lost formalised follows input message corresponding output eventually available 
generally properties expressed precisely formally terms semantic models csp 
necessary know internal structure network order demonstrate provides particular services services properties expressible simply terms interactions network offers users 
case common communications protocols take view security properties captured way 
examine offer definitions properties considering network finer level detail 
views security properties considered ffl viewpoint users network know parties trusted 
properties expressed viewpoint generally include assumptions implicitly explicitly user communication partner act contrary aims protocol 
example shared secrets disclosed third parties 
ffl high level god eye view identifies nodes follow protocols faithfully identifies engaging general activity attempting find flaw protocol 
view taken care taken ensure privileged information accidentally protocol description responses node dependent information available high level view 
circumstances node may knowledge concerning communication partner cases protocol may invoked communicating particular known trusted users knowledge trust obtained outside scope report 
report follow high level view 
means postulate existence enemy identity known formulation security properties 
user name enemy process 
justify decision single enemy arguing enemies increase vulnerability protocols single enemy sense encapsulates behaviour enemies 
confidentiality confidentiality particular set messages achieved users may communicate message drawn set possibility user intended recipient receiving 
words input occurs subsequent output user user message output occurs user necessarily sent message previous input form obtain messages intended user 
analysis purposes consider system god eye view user obtain messages intended user user 
confidentiality captured specification requiring message output user sent user 
restrict attention message set messages intended remain confidential 
assume generated user true example signed messages simplifying assumption justified circumstances 
assumption implicit definition simply guess confidential message 
messages encrypted messages control messages general available eavesdroppers confidentiality concerned protecting 
considerations may captured trace specification definition net provides confidentiality set messages net sat ffl tr user hi tr user hi definition states message output user evidenced message trace tr initially sent user appears trace 
may expressed csp process algebra theorem process net provides confidentiality sense definition ffl net user net user user states input message user user blocked output message user 
observe equivalent net user net user user example net meets equivalence message user user output user breaches confidentiality assuming 
property may captured traces model property conf conf tr messages tr user messages tr user states messages message set output user subset sent 
words user obtain messages sent 
fact property sat specification means preserved refinement 
simplification observe messages sent users communicating users know trust honest characterisation confidentiality may simplified messages sent user 
definition simplifies net sat ffl tr user hi equivalent simpler form net sat tr user hi property may expressed entirely process algebra number different ways 
way captures idea attention focussed entirely events user observed net sigma user process refinement net sigma user traces model refinement process achieving equality equivalent obtaining refinement direction net sigma user alternative characterisation obtained considering effects preventing net performing events user system providing confidentiality affected restriction net net user restricting behaviour net reduce behaviours follows automatically restriction refinement net processes equivalent precisely refinement direction net user net final characterisation regards system acceptable event perform set sigma user words perform possible process perform events run user net characterisations provably equivalent assertion net sat tr user hi straightforward process algebra show system provides confidentiality sets separately provides confidentiality sets simultaneously net user net net user net net user net user user net user net message authentication property requires messages guaranteed authentic sense particular message come particular source really come source 
authentication requires messages forged 
terms event authenticates event observation possible occurred previously observation provides evidence previous occurrence 
definition event authenticates event process sat auth tr auth tr tr hi tr hi observe specification restrict number occurrences event occurrence event expression property terms sat specification demonstrates preserved refinement 
specification captured process algebraic equation 
case condition equivalent example process authenticating authenticating words event occur occur previously 
context sending receiving messages require received message authenticate sent message words receipt message node possible message sent node system net consisting medium enemy nodes property check net net example buffer process copy copy authenticating message output previously input 
characterisation authentication promoted sets events 
set authenticates set message authenticates messages words messages seen messages previously occurred 
captured follows definition authenticates form useful wish check message genuine originator unknown 
captured set user authenticating set user authenticating message indicates honest node generated original message 
buffer process copy weaker property authenticating output occur input 
property strictly weaker previous property output authenticates corresponding input 
example random bit generator allows bit output input bit rand 
rand rand authenticating bit output wasn previously input authenticating particular definition provides straightforward proof transitivity authentication authenticates authenticates authenticates network architecture common architecture security protocols designed consists network nodes typically workstations able communicate asynchronously sending messages medium acts postal service 
need security arises fact users service people applications programs control medium possible malicious agents intercept interfere network traffic 
need confidentiality face insecure medium creates need form encryption need authenticity message forgery possible raises need form security mechanism 
common approach modelling situation consider set nodes connected medium modelled single process 
medium general consist network processes network may considered higher level abstraction single process 
interactions nodes may nodes medium 
discussed earlier find convenient model malicious interference means separate enemy process node manipulates essentially passive medium 
service provided users modelled jjj node trans rec medium nodes unable interact directly operation entirely interleaved 
communicate medium means channels trans rec nodes transmit receive messages respectively 
quite distinction user node user communicates network blurred addressing security properties 
authentication check particular server remains requires response directly server network operator responsible 
cases appropriate think user node entity 
purposes find convenient treat distinct 
forms interference modelled intruder process enemy node able alter condition medium certain channels available nodes 
entire system de scribed net jjj node trans rec medium leak kill add enemy process net refer configuration generally parameterised particular descriptions node processes node processes medium enemy network medium enemy rec trans trans rec leak add kill 
architecture network messages kind messages transmitted received depend particular protocol modelled probably best initially defer definition type channels come model protocol 
note node node channels trans rec interact medium trans rec may thought denoting families channels single channels 
destination field required part message message possibly encryption 
clear stage best handle encrypted messages order maintain possibility number encryption levels may arbitrarily large recursive data structure required lines message plaintext key key message message message plaintext messages nontrivial structure plaintext user text plaintext plaintext structure appropriate messages 
example key exchange protocol keys take dual role encrypt messages comprising messages encrypted 
key exchange mechanisms set key included possible plaintext cryptographic mechanisms hash functions may included possible messages case definition message extended extra lines hash hash message 
purposes definition message remembering varied modelling needs 
prove useful considering enemy may deduce messages received able extract information messages 
extraction function kernel may defined structural induction message kernel defined plaintext case functions defined follows kernel kernel kernel fkg kernel kernel kernel kernel kernel kernel fug kernel ftg kernel kernel kernel definition contains clause clause message reflecting data structure natural way 
function kernel lifts sets obvious way 
message properties intruder able manipulate medium particular ways 
approach taken events signal particular modes interference preference having occur nondeterministically originally taken 
advantage approach allows greater control level type interference may occur 
enemy capable producing messages example generate message encrypted key course reproduce message previously received 
fact messages intruder able generate depend messages seen pass network traffic messages able generate keys seen owns 
information system define messages generated enemy 
trivial consistency relation set messages consistent 
definition relation information system dependent encapsulate encryption mechanism 
information system defines relation finite sets tokens single tokens indicating token generated set 
case relationship indicate enemy agent generate particular message messages seen 
consider example messages may encrypted means secret keys public keys 
set public nodes public keys simplicity assume node public fp key set nodes secret keys node secret fs key set distinct set public keys secret public set shared keys shared distinct public secret keys secret shared public shared entailment relation fin message theta message relation finite set messages think enemy having seen messages enemy generate 
relation closed axioms information system 


abuse notation allow relation possibly infinite sets messages fin ffl encapsulate way messages generated considering possible structures message 

messages key 
certain properties particular encoding mechanisms may captured providing additional inference rules 
example relationship secret public keys may captured pair rules 
fp 
fs example rules allow deduce obvious result possession message encrypted secret key say possession public key allows original message retrieved fp fp fp fp appropriate rule shared keys possession shared key message encrypted key allows generation original message 
fk shared possible encode various deductions wish include capability enemy example deducing key observing encoded message message plaintext 
fm rules give model different encryption decryption capabilities enemy 
rules encapsulate properties encryption 
example encryption commutative include rule 
fk medium description medium involves number decisions best way model network medium 
allow possibility intruder able manipulate medium particular ways 
done building intruder medium medium capability interfering message traffic particular ways prefer follow roscoe approach including separate model intruder 
second approach gives greater separation medium considered essentially passive service provided various nodes malicious agent particular capabilities manipulate medium particular ways 
capabilities agent explicit manipulation medium associated particular events attacks protocols easier follow understand 
medium containing set messages may described initially medium medium input output ia process input permits input medium 
decide type messages medium accept offer 
purposes separate destination source body message 
possibilities example message broadcast users explicit destination field required 
input trans medium fi channel trans type user user message message trans thought node sending input medium indicating wish message delivered node source destination message 
abstracted away refusals sense input refused amounts making assumption deduced messages accepted 
reasonable assumption protocols currently perform tasks masking network traffic 
level abstraction assume messages accepted network 
felt unrealistic definition input altered accordingly messages may input number messages network reaches capacity threshold process output allows output medium output rec medium fi channel rec type user user message message rec corresponds receipt message node labelled coming source node note empty external choice simply equivalent set empty medium contains messages possibility output 
process ia describes possible interactions medium due intruder actions 
perfectly secure medium treat part process description cases considering model ways medium susceptible interference 
medium vulnerable having messages removed added leaked 
ia kill medium fbg medium 
add medium fi leak medium enemy action modelling enemy concerned messages enemy able generate 
may disrupt protocol may correspond information enemy discovered concerning supposedly confidential messages 
certain assumptions may concerning enemy depending property analysis 
checking confidentiality assumed enemy unable generate messages generated users kept confidential 
hand checking authentication assumed enemy honest users capable generating messages authenticity ensured protocol enemy unable generate need authentication protocol 
integrity assumed enemy capable generating messages assumptions may incorporated description enemy may parameterised set messages seen set messages init initially able generate 
assumptions expressed conditions init set messages particular security property concerned 
question arises sufficient model enemy actions single enemy process 
principle possible number malicious agents acting effect attack single agent unable 
possible model developed depends actual description process enemy fact description enjoys property enemy enemy jjj enemy analysis done level traces see number enemies acting encapsulated description single enemy 
addition messages generated messages seen enemy able generate particular plaintext messages 
furthermore enemy considered possession nodes public keys users names 
set init model information initially possession enemy 
public init user init relation gives capability enemy generate messages messages possession 
csp description enemy relation 
set records messages read medium 
initialised enemy defined enemy enemy kill add leak knows option allows enemy kill message remove medium 
described simply kill kill enemy fact dealing trace properties communication protocols ability enemy kill messages entirely irrelevant 
possible removal messages medium interfere liveness properties communications protocols compromise properties expressed terms traces 
medium allows reordering messages particular message ignored remain medium killed 
protocol guarantees security property enemy unable kill messages guarantee case 
equally useful definition kill equivalent omitting option entirely 
second course action available enemy insert message generate medium 
messages generated initial set init messages come possession 
add init add enemy observe description incorporates ability enemy manipulate message address fields giving impression message comes source genuine source 
enemy considered simply eavesdropper power add messages medium add component simply modelled omitted entirely 
third option allows observe message currently medium leak leak enemy fxg final option included model enemy knowledge particular messages 
accomplished allowing enemy output message fact generated 
knows init enemy channel indicate messages enemy deduce seen known initially 
argument represents set messages enemy seen 
normally empty set protocol run possible model effect possession particular key vulnerability protocol including key message set observe allowed insertion message medium particular false sources attached messages 
rerouting message modelled having enemy read leak kill cleaner essential discussed add message different destination field back medium 
assumption case confidentiality formalised 
assuming messages wish keep confidential fact kernel messages initially generated enemy kernel init hand integrity authenticity implicitly assuming init sense protocols designed provide services intended deal messages generated enemy 
checking confidentiality protocol strong assumption enemy output message supposed confidential protocol considered insecure 
situations key exchange protocol designed provide confidentiality authenticity case reasonable analysis init 
situations modelling enemy knows adequate necessary construct sophisticated complex model enemy keeps track incoming outgoing messages outputs messages deduces generated legitimate users particular ignoring messages puts medium reads back leak pursue observe situation bear mind 
nodes consider nodes link user medium control user 
nodes provide security facilities required users encrypting deciphering messages 
finite set nodes labelled set user ng 
nodes provide means users send messages network 
user communicating network fact communicating corresponding node 
nodes interact users inputting plaintext messages intended destinations outputting messages source 
process node communicates user channels type user plaintext input node node interpreted request user send message user similarly output communication interpreted delivery user message come nodes exception node interact medium transmitting possibly messages control messages intended recipients messages employed protocol 
channels trans transmission rec receipt messages 
channels type user message set message contains plain encrypted messages discussed 
communication trans corresponds node placing message destination medium 
communication rec corresponds node receiving message medium source description node process depend security property aiming verify network 
confidentiality authenticity anonymity integrity description consist csp implementation particular protocol analysis 
example extremely simple protocol provide confidentiality messages sent user user implemented node public key secret key follows node trans node node rec plaintext node message observe protocol ensure authenticity 
situation different case nonrepudiation 
case verification judge viewpoint judge control nodes non repudiation protocol 
fact judge viewpoint parties dishonest 
possibility generates need non repudiation protocol place 
judge allow possibility node capabilities node 
nonrepudiation established context nodes kill add leak messages interact medium usual ways 
nodes non repudiation established node node fxg init node init trans node rec node fxg kill node init add node leak node fxg modelling point view interfaces processes network expanded include channels add leak kill node able generate plaintext messages channel redundant retained source messages particular non repudiation protocols refine node 
set messages corresponding initial state node contain keys node may encrypt decrypt messages 
meadows example order illustrate material simple example 
protocol simple example designed purely illustrative purposes 
fact kind example best illustrates benefits process algebra approach process algebra exploring subtle patterns interactions different parties interactions fairly simple 
illustrates approach 
proof obvious property unduly long expected 
significant amount formalisation needs done proof proceed example consists legitimate user encrypts received messages particular key returns medium 
described legitimate node number definiteness receives messages rec encrypts returns trans 
process algebra follows node rec trans node key possessed node aim establish enemy obtain particular message possess 
expressed confidentiality respect net net alternatively net sat tr hi standard assumption confidentiality enemy possession messages containing kernel kernel init may take description net consist node node initially empty medium medium enemy initially learned enemy 
prove useful extract certain sets messages traces system leak tr fm ffl tr leak hig add tr fm ffl tr add hig trans tr fm ffl tr trans hig rec tr fm ffl tr rec hig tr fm tr hig mess tr leak tr add tr trans tr rec tr tr lemma kernel function closed generates relation kernel kernel proof considering clauses define relation 
result follows clause true relation 
order prove confidentiality net respect certain properties components 
required properties described lemma 
combine information state components maintained events occurred extracted trace 
combination information sources required establishing kind result 
state approaches commonly include history variable component state order record trace information 
approach taken closer event approaches provide way extracting state system trace 
lemma component processes meet specifications enemy sat tr enemy sat tr medium sat tr medium sat tr node sat tr tr kernel add tr kernel kernel init kernel leak tr tr kernel tr kernel kernel init kernel leak tr tr kernel leak tr kernel kernel trans tr kernel add tr tr kernel rec tr kernel kernel trans tr kernel add tr tr kernel trans tr kernel rec tr proof standard mutual recursion proof csp 
full proof omitted reasons space 
process algebra manipulation details full yields required result 
theorem network secure node trans rec medium leak add kill enemy sat tr hi proof strategy proof follows properties established lemma prove kernels messages passed system contained kernel init kernel init follows passed channel 
proof easily adapted take nodes account 
fact descriptions nodes necessary required meet particular specification example transmit messages kernel intersects node sat kernel trans tr kernel course complex specifications appropriate example messages added network nodes intersect passed node may passed back node sat kernel trans tr kernel kernel rec tr specification fact met node discussion model checking concerned expression particular security properties protocols framework csp order provide foundation analysis verification 
approach motivated part availability model checking tools fdr proceeded eye applicability tools 
inevitable practical difficulties may necessary adapt properties 
necessary establish properties checking correspond properties results obtained application tools allow inferences require 
example sets plaintext messages generally infinite base sets small 
unsuitable direct analysis means model checking current february state art technology situation improve value passing introduced 
techniques deducing results concerning messages verifications place holders appropriate 
case simplifications concerning maximum number encryptions order regain message space additional justification assumptions required derive general correctness 
problems protocols perform encryptions certain level generally interference involving deeper levels detected case 
necessary prove imposition bound rule attacks protocol order confidence results analysis 
additional modelling issues modelling enemy separate process allows possibility introducing tactics state space exploration model checking example restricting number messages enemy place medium 
accompanying enemy interference performance events may introduce tactics introducing constraints parallel refining system 
may prove useful attempting detect flaws flaw refinement flaw original system correctness refined protocols imply original correct demonstrated tactic rule possible attacks 
non repudiation completely different kind property 
party non exchange messages concerned honest 
furthermore party satisfied party received required messages party aims obtain evidence sufficient convince outside party exchange took place 
directions meadows example appears particularly straightforward example comparing different approaches proof rests fact stage information required generate message introduced system invariant system fairly simple rely particularly encryption decryption properties simply property generation messages relation introduce new information 
harder find suitable invariants scenarios information encrypted form communication users shared key necessary prove stage decrypted 
subtle properties encryption decryption required 
disappointing simple example meadows requires lengthy proof 
part point doing proof explore relationship language theoretic ideas underpinning invariant csp recursive description 
relationship similar proof type hope obtain theorems allow results concerning language messages generated translated immediately csp setting need laborious manual translation 
close relationship csp protocol descriptions rules generating messages allow natural proofs 
achieved expect result particular set rules generate message containing translate immediately result corresponding csp description required confidentiality property 
due peter ryan richard moore irfan paul gardiner bill roscoe gavin lowe michael goldsmith abraham sidiropoulos lively discussion perceptive comments earlier versions 
anonymous referees careful reviewing useful constructive suggestions 
dra providing funding research 
formal systems europe failures divergences refinement user manual tutorial 
gray mclean 
temporal logic specify verify cryptographic protocols progress report proceedings eighth ieee computer security foundations workshop 
hoare 
communicating sequential processes 
prentice hall 
meadows 
applying formal methods analysis key management protocol 
journal computer security 
roscoe 
lecture notes domain theory 
oxford university 
roscoe 
prospects describing specifying verifying key exchange protocols csp fdr 
formal systems europe schneider 
modelling security properties csp 
royal holloway technical report csd tr 
