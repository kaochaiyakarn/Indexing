parallel database processing node pc cluster cases decision support query processing data mining tamura masaru kitsuregawa institute industrial science university tokyo ku tokyo japan phone fax iis tokyo ac jpg developed pc cluster system consists pcs 
pc employs mhz pentium pro cpu connected atm switch 
picked kinds data intensive applications 
decision support query processing 
data mining specifically association rule mining 
high speed network atm technology come de facto standard 
high performance network standards available atm networks widely local area widely distributed environments 
problems atm networks high latencies contrast higher bandwidths 
usually considered serious flaw atm composing high performance massively parallel processors 
applications large scale database analyses insensitive communication latency requiring bandwidth 
hand performance personal computers increasing rapidly days prices pcs continue fall faster rate workstations 
mhz pentium pro cpu competitive integer performance processor chips workstations 
weak floating point operations frequently database applications 
combining pcs atm switches construct large scale parallel platform easily inexpensively 
examine system help data warehouse processing currently runs expensive high mainframes workstation servers 
experiment complex query standard benchmark tpc gb database evaluate system compared commercial parallel systems 
pc cluster exhibited higher performance compared current tpc benchmark reports 
second parallelized association rule mining ran large scale data mining pc cluster 
sufficiently high linearity obtained 
believe commodity pc clusters play important role large scale database processing 
massively parallel computer systems moving away proprietary hardware components commodity parts cpus disks employ proprietary interconnection networks higher bandwidths lower latencies 
bandwidths upcoming standards high speed communication atm improved rapidly due progress communication technologies latencies remain high 
considered serious flaw atm networks composing high performance massively parallel processors 
applications insensitive communication latency large scale database analyses 
applications large amount data exchanged processing nodes 
communication way requiring bandwidth 
hand performance personal computers increasing rapidly days 
example mhz pentium pro cpu competitive integer performance processor chips workstations weak floating point operations frequently database applications 
addition prices pcs continue fall faster rate workstations 
pcs sold resulting better performance price ratio pcs workstations 
looking technology trends atm connected pc clusters promising approach massively parallel database processing believe important addition conventional scientific applications 
considerable research parallel database processing done decade 
developed parallel hardware platforms addition parallel operating systems parallel relational algorithms 
research effectiveness parallelization proved vendors shipping parallel dbms products running commercial parallel platforms 
platforms smp machines sun proprietary hardware ibm sp ncr 
performance parallel database processing commodity large scale pc clusters reported 
berkeley team reported performance parallel sorting operations workstation cluster 
approach quite attractive application quite simple reflect aspects real relational database query processing 
system inexpensive commodity pc clusters 
pc cluster development various research projects performed scientific benchmarks executed clusters 
absolute performance clusters attractive compared massively parallel processors insufficient performance pcs networks projects preferably price performance achieved 
developed pc cluster system consisting pcs parallel database processing 
pcs employing pentium pro cpu connected atm switch 
picked kinds data intensive applications 
decision support query processing 
complex query standard benchmark tpc gb database evaluate system compared commercial parallel systems 
pc cluster exhibited higher performance compared systems current tpc benchmark reports 
second association rule mining 
developed parallel algorithm application 
result sufficiently high linearity obtained 
section pc cluster system 
section experiments decision support query processing described 
section explains parallel association rule mining 
concluding discussions section 
pc cluster pilot system cpu intel pentium pro mhz chip set intel fx main memory mb disk drives os western digital eide gb databases seagate ultra scsi gb rpm scsi aha ultra wide atm nic interphase pci atm adapter os solaris table configuration pc node pc cluster system system components pc cluster pilot system consists mhz pentium pro pcs connected mbps atm network mbps ethernet network 
shows picture system 
table shows configuration pc node 
rfc pvc driver ip atm 
hitachi ports atm switch 
fundamental performance characteristics measured fundamental performance network communication disk accesses 
shows effective throughput point point communication socket interface tcp ip atm 
mhz pentium pcs tested sake comparison 
contrary expectation throughput mhz pentium pro pcs sufficiently high spite heavy tcp ip 
exceeds mbps choose appropriate message size kbytes 
mhz pentium pc cpu really suffers protocol overhead resulting lower performance 
result decided employ standard tcp ip communication protocol cluster tackling development new light weight protocol 
hand round trip throughput mbps message size bytes pentium pro mhz pentium mhz throughput point point communication block size kb consumer process fastest zone simple read fastest zone simple read slowest zone consumer process slowest zone throughput mb sec throughput sequential disk read average latency byte messages sec quite large compared massively parallel processors 
affect performance database analyses applications require mainly way communication 
measured sequential read performance scsi disk 
disk accessed raw device interface bypasses buffer cache mechanism unix file system 
modeling different cpu loads kinds tests performed 
test read system calls issued consecutively processing data 
simple read curves show results test 
due zone bit recording technique throughput disk varies considerably depending location blocks accessed 
fastest zone slowest zone graph show upper bound lower bound respectively results 
second test read data check summed discarded model cpu load actual database processing 
access disk asynchronously threads disk read check summing created posix thread library supported solaris operating system 
communicate queue buffers 
consumer process curves show results test 
cpu heavily loaded blocks smaller kbytes adequate disk accesses due system call overhead 
chose kbytes disk block size 
case throughput mb sec mb sec 
decision support query processing parallel hash join operations widespread adoption relational database systems advances line transaction processing techniques brought large databases transaction logs 
users interested analyzing statistics databases new business plans 
applications analyses include decision support market analysis sales trend analysis data mining database servers supporting applications called data warehouses 
standardization database benchmarks reflects prevalence applications 
tpc benchmark tm known benchmarks transaction processing frequently performance metrics database systems 
tpc announced benchmark named tpc benchmark tm targeted decision support queries 
queries ad hoc intensively heavy relational operators join sort aggregation 
high performance relational database systems efficiently scan large amount data sophisticated processing algorithms heavy operators required 
join expensive relational operators combine multiple relations join conditions 
hash join algorithms suited parallel processing widely researched 
parallel hash join algorithm partitions input relations disjoint subsets called buckets applying hash function join attribute tuple 
bucket consists tuple map hash value joining relations results joining pair corresponding buckets relations 
means join operation performed parallel processing nodes 
outline parallel hash join algorithm follows 
build phase processing node applies hash function tuple portion input relations tuples sent destinations hash values 
received tuple inserted hash table processing node 

probe phase relation read disks tuple sent destination node hash value 
hash table processing node probed received tuples produce result tuples 
relations joined query 
join relations requires joins 
order joins performed determined query optimizer variety query execution plans proposed 
plans right deep multi join begins building hash tables memory relations probing successively pipeline manner tuples remaining relation 
software architecture query processing far developed parallel hardware platforms addition parallel operating systems parallel relational algorithms 
sdc super database computer platforms cluster shared memory multiprocessor nodes purpose project examine viability microprocessor parallel query processing servers 
projects developed proprietary architectures commodity microprocessors 
commercial workstations days showed poor performance didn employ executor executor executor executor frontend scheduler sql compiler user application query plan code backend catalog coordinator global architecture database server barrier sync flow control ipc write read send recv manager server file system disk manager dispatcher network manager user thread memory raw disk open connect status results code tcp ip sockets atm structure database kernel node processing elements 
standard lan technologies immature forced design implement interconnection networks 
circumstances dramatically changed reasonable commodity pcs processing elements atm technology interconnection 
atm connected pc clusters develop software parallel query processing 
ported system software developed sdc pc cluster system 
currently emulate device driver layer sdc code user level threads posix thread solaris operating system 
planning kernel level implementation maximal efficiency 
depicts global architecture database server 
queries issued user applications compiled optimized front machine produce executable code 
take compiled mode generated code consists processor native code interpreted mode efficiency flexibility 
currently sql compiler optimizer ready done hand 
determine plan query write code plan 
execution query initiated coordinator program 
coordinator broadcasts generated code pc node server process query execution running 
shows structure server process called database kernel 
database kernel consists permanent threads threads named server interacts coordinator 
creates user thread executing code passed coordinator monitors exceptional events user thread coordinator 
exceptional conditions user thread reported coordinator cause user threads running nodes abort 
generated code contains parts specific corresponding query initialization finalization code execution plan evaluation code predicates query 
commonly code hash table manipulation various conversion routines contained database kernel dynamically linked target code execution 
user threads sets streams registers operator input stream callback function 
permanent thread dispatcher keeps polling registered input streams evaluates callback functions data delivered threads disk network 
processing done context dispatcher user thread suspends eof condition met 
model centralized designed support multiple queries running time 
execution starts pcs perform operations centralized control 
barrier synchronizations encapsulated open close operations network connections simplify code 
completion network open operation connect nodes guaranteed ready receiving data completion network close operation shutdown guaranteed data arrive 
performance evaluation tpc benchmark query tpc benchmark consists complex queries issued database contains relations 
time consuming query query requires join operations 
shows sql description query 
examine execution times query different plans 
generated gb test database shown table modified version program partitioned tuples relation horizontally disks hash values primary key 
fact nation region partitioned replicated quite small 
didn create indexes force full scan relations indexes wouldn help ad hoc queries 
depicts execution plan query right deep tree 
hash tables select nation year sum amount sum profit select name nation extract year orderdate year discount ps quantity amount part supplier lineitem partsupp nation suppkey suppkey ps suppkey suppkey ps partkey partkey partkey partkey orderkey orderkey nationkey nationkey name green group nation year order nation year desc sql description tpc query built relations part partsupp supplier order probed sequence lineitem 
part attributes necessary query tuples shrink hash tables fit memory tuples selected relations 
plan represents aggregation sum group performed independently node gathering results master node node lower network traffic 
final join aggregation results nation performed locally master node nation small parallelization 
shows trace cpu utilization effective throughput disk network master node execution plan 
build phases phase phase cpu utilization disk throughput reached near maximum value relation number tuples tuple length supplier bytes part bytes partsupp bytes customer bytes order bytes lineitem bytes nation bytes region bytes table database gb tpc benchmark partsupp lineitem part order ps suppkey suppkey ps partkey partkey name green supplier nation nationkey nationkey partkey partkey suppkey suppkey orderkey orderkey execution plan tpc query right deep tree time cpu usage disk execution trace tpc query right deep tree mb sec resulting disk bound 
probe phase cpu load increased disk throughput decreasing 
reason transition cpu bound due heavy cpu load required processing multiple probe operations concurrently 
depicts execution plan left deep tree involve concurrent probe operations 
case results probe operation turn hash table probe operation 
shows execution trace plan 
phase disk throughput reached near maximum 
phase cpu load increased near aggregation performed concurrently probe operation order bottleneck disk phase cpu heavily loaded higher disk throughput obtained compared phase right deep plan 
difference disk throughput phases resulted different elapsed times relation lineitem accessed phases 
elapsed time phase right deep plan seconds phase left deep plan seconds 
experiments execution times dominated disk read times input relations 
lineitem supplier order ps suppkey suppkey ps partkey partkey orderkey orderkey nation nationkey nationkey partsupp part partkey ps partkey name green ps suppkey suppkey execution plan tpc query left deep tree time cpu usage throughput mb disk execution trace tpc query left deep tree execution plans affect performance query processing effect small extra os incurred 
disks providing data high rate near maximum mb sec reduce amount order obtain speedup 
indexes helpful query accomplished avoiding extra data transfer unnecessary attributes relation 
purpose store attribute relation individual file separately 
physical storage organization called transposition vertical partitioning 
shows execution plan query transposed file organization 
due increase number input files execution tree gets complicated 
join operations tree classified types inter relation joins essential query intra relation joins tuple id joins reconstructing original tuples projected forms disconnected attributes 
appear red links light blue 
omit details 
shows execution trace plan 
execution cpu utilization stayed disk throughput dropped significantly meaning bottleneck turned cpu 
heavy cpu load execution time wasn reduced proportionally amount suppkey nationkey ps partkey ps suppkey ps partkey name partkey discount quantity orderkey suppkey orderkey orderdate nationkey name partkey name execution plan tpc query transposed files time disk throughput mb cpu usage execution trace tpc query transposed files resulting speedup compared previous plans exceeds quite satisfactory 
table shows results right deep rd left deep ld transposed file tp methods reported results commercial systems gb tpc query 
system lacks software maintenance price metrics system price determined accurately 
hardware components cost 
observe system achieves fairly performance 
execution time transposed files twelve times short powerful commercial platform 
results strongly support effectiveness commodity pc massively parallel relational database servers 
system exec 
time price teradata ncr mhz pentium gb main memory disk drives oracle dec alphaserver mhz gb main memory disk drives oracle sun ue mhz ultrasparc gb main memory disk drives ibm db pe rs sp mhz powerpc gb main memory disk drives oracle hp eps mhz pa gb main memory disk drives pilot system mhz pentium pros gb main memory disk drives rd ld tp see text table execution time gb tpc systems data mining association rule mining data mining hot research topic database field method discovering useful information rules previously unknown patterns existing data items 
enables effective utilization transaction log data just archived abandoned 
major applications data mining association rule mining called basket analysis 
transaction data typically consists set items bought transaction 
analyzing derive association rule customers buy buy 
order improve quality obtained rules large amount transaction data examined requiring quite long time complete 
introduce basic concepts association rule 
fi set items ft set transactions transaction set items ae itemset support transaction set transactions contain denote support 
association rule implication form ae 
rule measures value support confidence 
support rule support 
confidence rule transaction set means transactions contain contain written support support 
example transaction database 
minimum support minimum confidence respectively 
itemsets support minimum support called large itemsets generated 
case large itemsets 
large itemset association rule ae derived support support minimum confidence 
results support confidence support confidence 
known algorithm association rule mining apriori algorithm 
studied parallel algorithms mining association rules apriori 
algorithms called hpa hash partitioned apriori discussed 
apriori generates candidate itemsets scans transaction database determine candidates satisfies user specified minimum support minimum confidence 
results candidate itemsets generated 
continues itemset satisfies minimum support confidence 
naive parallelization apriori copy candidates processing node processing node scan transaction database parallel 
works fine number candidates small fit local memory single processing node memory space utilization efficiency method poor 
large scale data mining storage required candidates exceeds available memory space processing node 
causes memory overflow results significant performance degradation due excessive amount extra os 
hpa partitions candidate itemsets processing nodes hash function parallel hash join eliminates broadcasting transaction data reduce comparison workload significantly 
hpa works better naive parallelization large scale data mining 
th iteration pass algorithm follows 
generate candidate itemsets processing node generates new candidate itemsets large itemsets th iteration 
itemsets contains items itemsets contains items 
called itemsets itemsets respectively 
processing node applies hash function candidates determine destination node id candidate processing node inserted hash table discarded 
execution time number nodes execution time hpa program pass pc cluster 
scan transaction database count support count processing node reads transaction database local disk 
itemsets generated transaction hash function phase applied 
itemsets sent certain processing node hash value 
itemsets received nodes locally generated id equals node id hash table searched 
hit support count value incremented 

determine large itemset reading transaction data processing node individually determine candidate itemset satisfy user specified minimum support 
processing node sends large itemsets coordinator large itemsets gathered 

check terminal condition large itemsets empty algorithm terminates 
coordinator broadcasts large itemsets processing nodes algorithm enters iteration 
performance evaluation hpa algorithm hpa program explained implemented pc cluster 
node cluster transaction data file hard disk 
transaction data produced data generation program developed agrawal designating parameters number transaction number different items 
produced data divided number nodes copied node hard disk 
parameters evaluation follows number transaction number different items minimum support 
size data mbytes total 
message block size set kbytes results communication characteristics pc clusters discussed previous section 
disk block size kbytes suitable value system 
note number candidate itemset pass substantially larger passes relatively frequently occurs association rules mining 
careful parallelize program effectively especially pass unnecessary itemsets count generated 
execution time hpa program pass shown number pcs changed 
maximum number pcs evaluation 
reasonably speedup achieved application number pcs increased 
performance evaluation parallel database processing atm connected node pc cluster system 
latest pcs enabled obtain mbps throughput point point communication mbps atm network called heavy tcp ip 
greatly helped developing system short period absorbed fixing problems 
massively parallel computers tend business applications conventional scientific computation 
major business applications decision support query processing data mining picked executed pc cluster 
query processing environment built results previous research super database computer sdc project 
evaluation results query standard tpc benchmark showed system achieved superior performance especially transposed file organization employed 
data mining developed parallel algorithm mining association rules implemented pc cluster 
utilizing aggregate memory system efficiently system showed speedup characteristics number nodes increased 
price performance ratio pc clusters attractive promising parallel database processing applications 
facts support effectiveness commodity pc massively parallel database servers 
acknowledgment project supported new energy industrial technology development organization japan 
hitachi technically helped extensively atm related issues 
agrawal imielinski swami 
mining association rules sets items large databases 
proceedings acm sigmod international conference management data pages 
agrawal srikant 
fast algorithms mining association rules 
proceedings international conference large data bases 
arpaci dusseau arpaci dusseau culler hellerstein patterson 
high performance sorting networks workstations 
proceedings international conference management data pages 
batory 
searching transposed files 
acm tods 
kersten 
monet geographical extensions novel approach high performance gis processing 
proceedings international conference extending database technology pages 
carter 
commodity clusters performance comparison pc workstations 
proceedings ieee international symposium high performance distributed computing pages 
dewitt gray 
parallel database systems high performance database systems 
communications acm 
gray editor 
benchmark handbook database transaction processing systems 
morgan kaufmann publishers nd edition 

encapsulation atm adaptation layer 
technical report rfc 
kitsuregawa nakano takagi 
query execution large relations functional disk system 
proceedings international conference data engineering th pages 
ieee 
kitsuregawa ogawa 
bucket spreading parallel hash new parallel hash join method robustness data skew super database computer sdc 
proceedings international conference large data bases th pages 
laubach 
classical ip arp atm 
technical report rfc 
schneider dewitt 
tradeoffs processing complex join queries hashing multiprocessor database machines 
proceedings international conference large data bases th pages 
kitsuregawa 
hash parallel algorithms mining association rules 
proceedings ieee international conference parallel distributed information systems pages 
sterling becker olson 
communication overhead space science applications beowulf parallel 
proceedings international symposium high performance distributed computing pages 
tamura nakamura kitsuregawa ogawa 
implementation performance evaluation parallel relational database server sdc ii 
proceedings international conference parallel processing th pages 
tpc 
tpc benchmark tm decision support 
standard specification revision transaction processing performance council 

