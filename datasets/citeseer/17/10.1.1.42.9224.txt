suffix cactus cross suffix tree suffix array juha department computer science box fin university helsinki finland 
mail juha cs helsinki fi url www cs helsinki fi 
suffix cactus new alternative suffix tree suffix array index large static texts 
size performance searches lies suffix tree suffix array 
structurally suffix cactus seen compact variation suffix tree augmented suffix array 
suffix tree important data structures 
suffix tree index structure formed string allows kinds fast queries string 
suffix tree attractive size construction time linear length text 
suffix trees wide variety applications 
apostolico cites suffix trees manber myers mention newer ones 
application interested suffix tree index large static text allow fast searches 
basic search type string matching searching occurrences pattern string text 
useful forms queries include regular expression matching approximate string matching 
examples large texts requiring fast searching electronic dictionaries biological sequence databases 
efficiently suffix tree fit main memory 
space requirement suffix tree important issue 
gonnet snider studied suffix trees small part time main memory applications slow unacceptably 
exact size suffix tree depends implementation type text 
typical size tight implementation english text bytes text symbol 
suffix array data structure suffix tree allows fast searches text 
size efficient implementation suffix array including text bytes text symbol 
string matching supported academy finland 
performance suffix arrays comparable suffix trees types searches regular expression matching slower suffix arrays 
new suffix tree data structure called suffix cactus 
size suffix cactus bytes text symbol lies sizes suffix trees suffix arrays 
holds performance applications regular expression matching 
suffix cactus offers interesting new point view family suffix structures 
structure suffix cactus similarities suffix tree suffix array 
suffix cactus described compact version suffix tree suffix array augmented extra information 
suffix cactus called cross suffix tree suffix array 
anderson nilsson irving introduced new alternative data structures 
level compressed trie andersson nilsson takes bytes text symbol matching properties comparable suffix cactus 
suffix binary search tree irving takes bytes text symbol similar suffix array matching problems 
basic definitions string alphabet sigma substring string string suffix string string prefix string strings largest number string called longest common prefix length denoted lcp 
trie see knuth rooted tree properties 

node root contains symbol alphabet 

children node contain symbol 
node represents string formed symbols contained nodes path root inclusive 
due second property nodes may represent string 
note node represents string ancestors represent prefixes depth node denoted depth length path root length string represents 
suffix trie st text trie leaves represent suffixes nodes suffix trie st represent exactly set substrings substring text prefix suffix example suffix trie string shown fig 

size suffix trie text length impractical large texts 
suffix tree suffix cactus compact linear size versions suffix trie 
section define suffix cactus description suffix trie 
aa bb aa cc cc aa cc cc aa bb aa cc cc aa cc aa bb aa cc cc aa cc aa fig 

suffix trie string 
symbol extra symbol making suffixes leaf 
suffix omitted trie 
matching string length text string length pattern 
problem string matching find occurrences string solved linear time scanning text pratt algorithm 
large static text faster solution achieved preprocessing text 
suffix trees suffix arrays suffix suitable preprocessing structures 
regular expression matching goal find substrings text match regular expression 
similar problem approximate string matching string integer wants find text edit distance problems solved scanning text 
regular expression matching takes time excluding preprocessing regular expression approximate string matching kn time 
baeza yates gonnet described methods suffix tree regular expression matching approximate string matching 
idea independently mentioned 
methods scanning suffix time find matching prefix 
methods take advantage fact set suffixes common prefix length state scan characters suffixes 
part scan needs done 
suffix tree provides information common prefixes 
replaced suffix structure 
method approximate string matching efficient basic text scan method short patterns small values myers developed method efficient approximate string matching long patterns large method divides pattern smaller parts approximate occurrences small edit distance limit searched separately 
results combined restrict area text needs scanned 
matching parts done method baeza yates gonnet myers uses slightly different method 
suffix tree suffix array suffix tree discovered weiner compact version suffix trie 
formed unary node node exactly child child 
example shown fig 

strings substrings text represented pointers text 
suffix tree leaf suffix number nodes number leafs nodes children 
size suffix tree linear length text 
aa cc aa fig 

suffix tree suffix array string 
alphabet size sigma considered constant suffix tree constructed time string matching takes time 
dependency sigma may linear logarithmic constant depending implementation branching 
compact alternative uses linked lists linear dependency sigma regular expression matching approximate string matching linked list implementation better implementations 
basic form suffix array just lexicographically ordered array suffixes text 
suffixes represented starting positions fig 

suffix array discovered manber myers independently gonnet baeza yates snider 
string matching suffix arrays done log time binary search 
manber myers improved string matching time log providing additional information lengths longest common prefixes suffixes 
provided pair implicit tree structure called interval tree 
interval tree defined binary search order 
root interval tree middle suffix array suffix processed binary search 
left child root middle suffix half array right child middle suffix second half array 
level nodes formed middle suffixes quarters array 
described lcp information essential efficient regular expression matching approximate string matching suffix arrays 
suffix array slower suffix tree tasks worst case factor log 
practice difference smaller 
advantage suffix array suffix tree smaller size 
lcp information suffix array implemented bytes text symbol including text 
suffix array constructed linear time constructing suffix tree listing suffixes lexicographic order tree 
manber myers described construction algorithm works sorting suffixes 
takes log time worst case log log time average random texts independent distribution characters 
advantage construction construction suffix tree smaller space requirement bytes text symbol 
suffix cactus new data structure suffix cactus suffix tree viewed compact suffix trie 
suffix tree formed unary nodes children 
get suffix cactus internal node children 
called branches suffix cactus 
definition 
node suffix trie st text root child parent suffix cactus sc branch contains exactly nodes path leaf clearly node st contained exactly branch sc 
branch containing root st called root branch 
node called root branch called leaf parent called parent node branching depth denoted depth depth parent node branching depth root branch 
branch contains string formed characters nodes contained branch represents string leaf leafs st represent suffixes correspondence suffixes branches sc 
starting point suffix represented branch denoted suffix 
string contained suffix depth term definition implies existence ordering children node 
ordering allows alternative forms cactus 
variations string shown fig 

left hand side variation uses alphabetical ordering implementation described 
fig 

variations suffix cactus string 
turn upside see explanation name cactus 
obvious way define tree structure suffix cactus 
definition parent alternative 
branch sc root 
parent branch branch containing parent node implementation described section natural definition 
definition parent alternative 
branch sc root 
parent branch branch containing preceding sibling preceding sibling defined ordering definition 
alternative definitions branches root branch parent 
example consider third branch left cactus left fig 

definition parent branch second definition parent second branch 
implementation name cactus comes way branches start middle branches 
whichever alternative definitions tree structure kind branching needs implemented differently traditional tree branching 
implementation affects exact space requirement suffix cactus time complexity different matching problems 
describe detail implementation space efficient described matching problems time complexity linked list implementation suffix tree 
implementation alphabetical ordering children node second alternative definition parent branch 
children branch linked list highest branching lowest branching 
key property second alternative definition branch child branching depth 
child list find specific child takes time string contained branch point branching child 
child list structure formalized operations nextsibling obvious way 
implementation described little 
suffix depth values kept tables 
tables lexicographic order suffixes 
suffix table fact basic suffix array 
simplify notation rank branch order name branch 
suffix suffix represented branch sth suffix lexicographic order 
branch root branch 
lemmas show branching structure suffix cactus text derived straight text 
lemma 
branching depth depth branch lcp suffix gamma suffix 
proof 
root leaf parent node branch alphabetically preceding sibling leaf branch gamma 
ancestor paths root go node get separated 
lcp suffix gamma suffix depth depth 
ut lemma 
parent branch branch latest branch depth depth 
proof 
root parent node alphabetically preceding sibling parent contains parent node ancestor depth depth depth 
suffix suffix precedes suffix lexicographically remains show latest branch satisfying conditions 
branch leaf node ancestor contained root path holds depth depth depth depth 
ut lemma 
branch child branches branch child branch children highest branching lowest branching 
delta delta delta proof 
lemma child 

depth depth 
branch conditions hold replaced condition hold 
child depth depth 
case node satisfies conditions violates third condition 
children child second claim lemma clearly true 
children holds depth depth 
violate third childhood condition ut lemma enables describe implementation branching operations nextsibling 
implementation consists single table called sibling 
notations lemma table defined sibling ae alternatively sibling ae gamma gamma children nextsibling sibling words children branch form cyclical list 
addition define sibling 
nextsibling defined follows 
ae sibling sibling sibling nextsibling ae sibling sibling sibling fig 
shows example implementation 
suffix depth sibling fig 

implementation left hand side suffix cactus fig 

fig 

state suffix cactus processing branch 
active branches grayed 
construction section describe construction algorithms implementation suffix cactus 
algorithms phases second common 
phases algorithms construct suffix depth tables 
algorithm uses suffix tree uses suffix array 
common second phase constructs sibling table depth table 
start describing second phase 
start second phase depth table tells branching depths branch 
lemma parent branch branch latest branch preceding depth depth 
depth table fully defines branching structure cactus sibling table calculated 
sibling table constructed branch branch pass 
look situation branch just processed processing branch start fig 

path branch root branch branches path called active branches 
highest branching children active branch may unprocessed branches 
children processed branches siblings processed branches hand processed 
assume sibling table finished entry excluding entries gamma 
parent branch active branches 
able find parent quickly active branches list 
parent branch list depth depth 
list implemented far unfinished sibling table entries sibling gamma gamma 
see happens branch processed 
parent active adding list active branches done 
assume active branch parent 


find list active branches 

remove branches passed search list active branches finalize children setting sibling gamma 
sibling setting sibling 
add list active branches 
branches processed travel list active branches set children remaining active branches 
algorithm detail fig 

sibling sk gamma gamma depth depth parent 
sibling sk gamma sk gamma sk gamma depth depth travel list active branches parent 
sibling sibling remove passed branches list finalize children 
sibling sk gamma sk gamma finalize children sibling active branches 
sibling fig 

construction sibling table depth table 
variables sk gamma named help comparison algorithm description text 
excluding loops algorithm clearly works linear time 
round loops walks step list active branches removes branch list 
removed branch return list 
round loops executed branch 
gives theorem 
theorem 
sibling table constructed depth table linear time constant additional space 
remaining problem construction suffix cactus get suffix depth tables 
way suffix tree 
lexicographically ordered depth traversal tree recover necessary information tree linear time 
mentioned section suffix tree build linear time construction works linear time 
construction takes space suffix tree construction may take little depending details implementation 
suffix depth tables constructed suffix array lcp information 
basic suffix array forms suffix table 
mentioned lemma values depth table lexicographically adjacent suffixes 
values recovered lcp information suffix array traversal interval tree linear time 
suffix array build log sorting method dominates time complexity cactus construction 
advantage construction stages space final suffix cactus 
experimentation see suffix cactus behaves practice implemented described variation suffix cactus linked list version suffix tree version suffix array lcp information 
tests run mhz pentium pc mbytes memory running linux operating system 
implemented standard suffix tree construction suffix array construction sorting suffix cactus construction algorithms described previous section 
table gives execution times space requirements construction algorithms 
space requirements include text 
space requirement finished structure bytes text symbol suffix array bytes text symbol suffix cactus regardless construction method 
principle space requirement finished suffix tree reduced little construction time space requirement releasing suffix links 
implementation done complications memory management caused knowing number nodes suffix tree advance 
implementations numbers pointers take bytes 
exceptions suffix array depths suffix cactus table 
space requirements execution times construction 
text space bytes time type sigma tree array cactus tree cactus array tree array cactus tree cactus array english english english random dna random random random table 
string matching regular expression matching times 
string matching times total times matching patterns 
text string matching regular expression matching matches time time ms type sigma pattern tree array cactus matches tree array cactus english english english random dna random random random random take byte 
rare case longest common prefix suffixes recognized handled separately necessary 
affect pattern matching time length pattern exceeds 
test matching performance implemented string matching regular expression matching algorithms data structures 
results tests table 
execution times include going set matches 
string matching tests patterns selected randomly text 
regular expression cs fa tg regular expression tests 
test texts contain letters matching times include conversion regular expression automaton 
concluding remarks described variation suffix cactus 
interesting variations notably implements branching hashing uses kind binary tree structure 
main advantage variations better performance string matching large alphabets 
due nature suffix cactus variations need implementation construction algorithms totally different ones described 
remains done developing versions 
ukkonen suggested name cactus 

aho hopcroft ullman 
design analysis computer algorithms chapter pages 
addison wesley 

andersson nilsson 
improved behaviour tries adaptive branching 
inf 
process 
lett july 

andersson nilsson 
efficient implementation suffix trees 
software practice experience feb 

apostolico 
myriad virtues subword trees 
apostolico galil editors combinatorial algorithms words pages 
springer verlag 

baeza yates gonnet 
efficient text searching regular expressions 
proc 
th international colloquium automata languages programming icalp pages 

baeza yates gonnet 
sequence matching 
technical report department computer science university chile 

galil park 
improved algorithm approximate string matching 
siam comput dec 

gonnet baeza yates snider 
lexicographical indices text inverted files vs pat trees 
technical report oed centre new oed university waterloo 

irving 
suffix binary search trees 
technical report tr computing science department university glasgow apr 

jokinen ukkonen 
algorithms approximate string matching static texts 
proc 
th international symposium mathematical foundations computer science mfcs pages sept 

knuth 
sorting searching volume art computer programming chapter pages 
addison wesley 

knuth morris pratt 
fast pattern matching strings 
siam comput june 

manber myers 
suffix arrays new method line string searches 
siam comput oct 

mccreight 
space economical suffix tree construction algorithm 
acm apr 

myers 
sublinear algorithm approximate keyword searching 
algorithmica oct nov 

nucleic acids research sequences supplement may 

ukkonen 
constructing suffix trees line linear time 
van leeuwen editor algorithms software architecture 
information processing volume pages 
full version appear algorithmica 

ukkonen wood 
approximate string matching suffix automata 
algorithmica nov 

weiner 
linear pattern matching algorithms 
proc 
ieee th annual symposium switching automata theory pages 
article processed macro package llncs style 
