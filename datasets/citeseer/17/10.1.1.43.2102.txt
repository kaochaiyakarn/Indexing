flow directed closure conversion typed languages henry suresh jagannathan stephen weeks 
presents new closure conversion algorithm simply typed languages 
implemented algorithm part mlton program compiler standard ml sml 
mlton rst applies functors eliminates polymorphism code duplication produce simply typed program 
mlton performs closure conversion produce rst order simply typed program 
contrast typical functional language implementations mlton performs optimizations rst order language closure conversion 
notable contributions 
translation uses general ow analysis framework includes 
types target language fully capture results analysis 
mlton uses analysis insert coercions translate di erent representations closure preserve type correctness target language program 

translation practical 
experimental results range benchmarks including large real world programs compiler ml kit indicate compile time cost ow analysis closure conversion extremely small dispatches coercions inserted algorithm dynamically infrequent 
presents new closure conversion algorithm simply typed languages 
implemented algorithm part mlton program compiler standard ml sml 
mlton rst applies functors eliminates polymorphism code duplication produce simply typed program 
mlton performs closure conversion produce rst order simply typed program 
typical functional language implementations mlton performs optimizations rst order language closure conversion 
important bene approach numerous optimization techniques developed rst order languages immediately applied 
addition simply typed intermediate language simpli es structure entertainment decisions henry com nec research institute suresh research nj nec com star laboratories com mlton freely available gpl www neci nj nec com pls mlton 
compiler 
experience mlton indicates simply typed intermediate languages suciently expressive eciently compile higher order languages standard ml 
immediate question arises pursuing strategy concerns representation closures 
closure conversion transforms higher order program rst order representing procedure tag identifying code executed typically code pointer procedure applied environment containing values procedure free variables 
code portion procedure translated take environment extra argument 
previous translation implements closures elements datatype dispatches call sites appropriate code 
di er datatypes target language express procedures may called call site determined ow analysis 
consequently size dispatches calls inversely related precision analysis 
dispatches code pointers express function calls important bene ts target language remain simply typed need introduce existential types optimizations di erent calling conventions di erent procedures applied call site :10.1.1.141.7192
simplicity optimization opportunities orded dispatches masked overhead dispatch strategy inferior code pointer directly embedded closure record 
show cost dispatches benchmarks measured small fraction benchmark execution time 
elaborate issues sections 
approach extends range expressible ow analyses previous inserting coercions target program preserve closure meaning change type :10.1.1.33.6545
coercions translation expresses higher order ow information rst order target language form veri able type system 
results ow analysis completely expressed types target program ordinary optimizations performed target automatically take advantage ow information computed source 
section show representations chosen coercions runtime cost 
experimental results range benchmarks including compiler approximately lines sml code ml kit approximately lines indicate compile time cost ow analysis closure conversion small local optimizations eliminate inserted coercions 
mlton produces code signi cantly faster code produced standard ml new jersey 
remainder structured follows 
section describes source target languages closure converter 
section de nes class ow analyses translation 
section presents closure conversion algorithm 
detailed example illustrating algorithm sec tion 
section describes mlton presents experimental results 
sections presents related 
source target languages illustrate ow directed closure conversion translation source language shown left hand side 
program consists collection datatype declarations followed expression 
ml datatype declaration de nes new sum type constructors create discriminate values type 
source language lambda calculus core augmented constructor application case tuple construction selection tuple components exceptions 
exceptions treated elements datatype 
source language simply typed types type constructors arrow types tuple types 
omit type rules assume expression variable annotated type 
write mean type write mean variable type assume bound variables program distinct 
exp bind lam app tuple name sets speci occurrences subterms forms fn respectively program occurrences de ned formally paths unique expression labels 
tycon names set datatypes declared program 
source language con tycon var data data datatype fn case raise handle target language func 
data 

fun 
data datatype fun fun case raise handle fig 

source target languages 
source language target language see right hand side simply typed arrow types target language contain lambda expressions 
target language program pre xed collection mutually recursive rst order functions function application explicitly speci es rst order function called 
value lam env value con value env var value 








fn 
hfn fv fn hfn 



hc hc vi 

case 
hc vi 

case 


raise 

handle 



handle 
fig 

source language semantics 
specify source language semantics inductively de ned relations 
example expression evaluation de ned relation written 
pronounced environment expression evaluates value exception packet 
regard semantics exceptions similar presentation 
write denote exception packet containing value value closure tuple values value built application datatype constructor 
semantic rules target language identical rule function application 


fun function declaration program 
flow analysis ow analysis standard monovariant analysis uses values approximate sets exact values aval tycon lam aval value may tycon represents constructed values type set occurrences represents set closures sequence values represents set tuples 
de nition 
value consistent type holds 

lam 
consistent de ne ow analysis type respecting function variables constructors exception packets values program 
de nition 
ow function var con aval 
consistent 
carries values type consistent informally conservatively approximates set values may take runtime 
similarly approximates set values may applied runtime 
special token packet models exception values exception values collected value packet 
formally specify meaning analysis de ne pair relations mutual induction 
rst environments ows describes environment approximated ow 
dom vf second relation values values vf describes value approximated value relative ow 

vf constructor associated datatype vf 

vf vf 
hfn vf fn de nes collection safety constraints ow meeting conservatively approximate runtime behavior program 
partial order values de nition 
tycon lam theorem 
safe 
vf 

vf packet 

vf 

vf packet 
proof 
induction 

de nition 
variable expression yields expression value de ned follows de nition 
ow safe 


fn ffn 

fn 


case 



raise packet fy 
handle packet 
fig 

safety constraints ows 
constraints standard monovariant control ow analysis exceptions 
rule merges arguments constructor 
avoid introducing recursive coercions reduce number coercions performed runtime 
second ow constraints simplify speci cation translation straightforward incorporate extra generality practice 
prove program minimum safe ow corresponds usual cfa 
example safe ow uni cation ow analysis described henglein tolmach oliva :10.1.1.33.6545
view analysis adhering safety constraints containment replaced equality rules 
closure conversion safe ow source program datatype closure conversion algorithm produces target program datatype datatype fn fun fn translation inserts datatype declaration set appears range constructor expression write denote new datatype fn denote name constructor corresponding fn constructor argument type tuple free variables fn 
extend values de ning translation creates function declaration expression occurs source program 
name target language rst order function fn denoted fn 
function extracts free variables closure record passed rst argument continues translated body 
translation uses auxiliary functions exp exp bind bind appear 
interesting cases translation expressions application 
rule builds closure record applying appropriate constructor tuple procedure free variables 
rule translates application dispatch closure record procedure applied 
safety constraints require containment equality translation inserts coercions program points ow precise 


fn fn fv fn 
case fn fn branch fn fresh 
fresh variables 
case case fresh variables 
raise raise handle handle fig 

closure conversion expressions 
coercion function de ned changes representation value precise precise type 
example translation application may require coercions points 
value argument precise formal coercion inserted change argument type formal 
second coercion required value result precise value variable bound 
de ne var aval aval bind cases values 
note de ned 

fresh variables 

case fn fn branch fn fig 

coercion function 
practical issues simple type system express coercions case expression arm simply changing constructor type representing closure easy pick underlying representation datatypes machine code generated 
terms underlying memory objects coercions identity 
datatypes represented tag word function distinguish summands forming datatype followed xed representation value carried summand thing changed coercion function tag word 
easy pick tags don change instance address code procedure 
mlton 
shown section dynamic counts indicate coercions rare cost unimportant 
advantage allowing coercions change representations choose specialized representations environment records 
closure conversion algorithm designed safe space 
note closure record rst order function 
alternative replacing closed variable selection closure record violates space safety keeps entire record alive 
possible violation rule turn tail call non tail call requiring coercion call 
coercion corresponds step lattice values nite height space usage program increase constant factor 
possible share dispatches generated calls set expressions 
mlton necessary performance 
example consider example 
fn fn fn fn case 

source program ffn ag ffn cg ffn fn cg ffn fn dg flow datatype unit fn datatype int fn datatype unit fn datatype unit fn datatype unit fn unit fn datatype int fn unit fn fun code fn fun code fn fun code fn fun code fn val val val case 
case 
case val case case case val case target program fig 

example 
source appears part cfa ow part result closure conversion appears part 
fn represent entire expression fn consider translation expression call may bound procedure corresponding fn fn call dispatch appropriately 
expression de nes branch case expression coerce procedure corresponding known expression associated element ffn fn cg 
expression de ning dispatch coercion occur rst dispatch expression provides code required 
arm case expression coerce result function known code associated fn fn experiments implemented algorithm part mlton program compiler standard ml 
mlton support separate compilation takes advantage program information order perform optimizations 
give brief overview relevant compiler passes intermediate languages 
mlton translates input sml program explicitly typed polymorphic intermediate language xml 
xml module level constructs 
functor applications performed compile time uses structures signatures eliminated moving declarations top level appropriately renaming variables 
mlton translates xml simply typed language eliminating uses polymorphism duplicating polymorphic expression monotype 
small higher order functions duplicated size metric prevent excessive code growth 
mlton performs ow analysis described section resulting closure converts procedures fol rst order language algorithm described section 
series optimizations inlining tuple attening redundant argument elimination loop invariant code motion fol program translated program compiled gcc 
trampoline satisfy 
reduce trampoline costs multiple fol procedures may reside procedure dispatch procedure entry jumps appropriate code 
demonstrate practicality approach measured impact compile time code size benchmarks sizes lines 
benchmarks knuth bendix life lexgen simple standard ratio regions integer intensive tensor oating point intensive count graphs symbolic mlton compiler kit ml kit 
benchmarks executed mhz intel xeon gb memory 
table give number lines sml benchmark compile times sml nj version mlton 
number lines include approximately lines basis library code ratio regions written je siskind research nj nec com tensor written juan jose garcia worm es count graphs written henry henry com 
kit run sml nj version incorrectly rejects kit ill typed 
mlton pre xes program 
compile time sml nj time batch compile entire program 
order improve performance code generated sml nj entire program wrapped local declaration body performs 
mlton give total compile time time taken ow analysis closure conversion percentage compile time spent gcc compile code 
ow analysis times shorter previous suggest reasons 
sets values implemented hash consing binary operations particular set union cached avoid re computation 
second running cfa equivalent polyvariant analysis 
precise cfa performed directly non source fewer set operations performed 
third analysis tracks higher order values 
analysis precise datatypes usual birthplace approach see rules 
earlier attempts demonstrate feasibility cfa limited small programs analysis benchmarks con rm ow analysis practical programs excess lines 
mlton compile times longer sml nj 
note ratio mlton sml nj compile time increase program size increases 
believe mlton compile time practice linear 
fact gcc major component mlton compile time especially large programs 
expect native back remove time 
lines mlton program sml sml nj total flow convert gcc count graphs kit knuth bendix lexgen life mlton ratio regions simple tensor tsp table :10.1.1.141.7192
program sizes lines compile times seconds 
table gives various dynamic counts benchmarks quantify cost closure conversion 
presentation tractable entries millions second running time program 
nonzero entries written 
known unknown measure number known unknown procedure calls identi ed program syntactic heuristics 
fol known indicates number known procedure calls remaining fol program ow analysis optimizations fol program performed 
di erence fol known due inlining code simpli 
dispatch indicates number case expressions introduced fol program express procedure calls ow set singleton 
di erence dispatch unknown gives rough measure ectiveness ow analysis syntactic analyses identifying procedures applied call sites 
coerce indicates number coercions performed closure tags ensure closure type adheres appropriate ow set 
fol program known unknown known dispatch coerce count graphs kit knuth bendix lexgen life mlton ratio regions simple tensor tsp table 
dynamic counts millions second 
benchmarks aggressive syntactic inlining calls known 
benchmarks remain signi cant number unknown calls 
flow analysis uniformly helps reducing number 
number dispatches caused imprecision analysis number calls executed 
notice number coercions performed zero majority benchmarks means imprecision ow analysis rarely results unwanted merging closures di erent representations 
table gives runtime results sml nj mlton 
course systems completely di erent compilation strategies optimizers backends runtime systems numbers isolate performance closure conversion algorithm 
certainly demonstrate feasibility 
related closure conversion algorithms untyped target languages explored detail 
algorithms typed target language solve problem created procedures type di er number types free variables 
closure conversion exposes types program sml nj sec mlton sec nj mlton count graphs kit knuth bendix lexgen life mlton ratio regions simple tensor tsp table 
runtimes seconds ratio sml nj mlton 
variables explicit environment record procedures having source level type may compile closures di erent types 
minamide address problem de ning new type system target language uses existential type hide environment component closure record closure type exposing environment calls :10.1.1.141.7192
unfortunately target language complex simply typed calculus dicult express control ow information 
example type system prevents expressing optimizations impose specialized calling conventions di erent closures applied call site 
alternative minamide solution proposed bell 
approach bene simply typed target language express control ow information target program 
inspired technique rst described reynolds suggest representing closures members datatype datatype di erent arrow type source program 
tolmach oliva extend bell weak monovariant ow analysis type inference :10.1.1.33.6545
re ne closure datatypes datatype equivalence class procedures determined uni cation 
approach express ow analysis simply typed target language restricted ow analyses uni cation 
di er approaches datatype coercions produce simply typed target program cfa 
describe ow directed representation analysis drive closure conversion optimizations 
flow information encoded type system intersection union types 
system supports multiple closure representations strongly typed context 
support limited number representation choices rely critically complex type system express choices 
uses ow information closure representation decisions simply typed calculus 
palsberg keefe de ne type system accepts set programs cfa viewed safety analysis 
type system simple types recursive types subtyping 
discuss closure conversion coercions correspond closely subtyping 
inserting coercions remove need subtyping target language simpler language simple types sum types recursive types 
related compiler orts typed intermediate representations 
helping verify implementation compiler optimizations detecting transformations violate type safety typed intermediate languages expose representations types useful code generation 
example datatypes target language describe environment representations determined ow analysis source language 
types provide useful bridge communicate information di erent compiler passes 
results ow directed closure conversion translation mlton demonstrate 
order simply typed intermediate languages ective tool compilation languages ml 

coercions dispatches introduced ow directed closure conversion negligible runtime cost 

contrary folklore implemented negligible compiletime cost large programs 

andrew appel 
compiling continuations 
cambridge university press 

michael ashley 
practical exible ow analysis higher order languages 
acm symposium principles programming languages pages january 

je rey bell fran bellegarde james hook 
type driven 
proceedings acm sigplan international conference functional programming pages amsterdam netherlands june 

greg defouw david grove craig chambers 
fast interprocedural class analysis 
acm symposium principles programming languages pages january 

allyn robert muller wells 
strongly typed ow directed representation transformations 
international conference functional programming june 

elsman 
static interpretation modules 
international conference functional programming september 

marc feeley james miller guillermo jason wilson 
compiling higherorder languages fully tail recursive portable technical report technical report department computer science university montreal 

robert harper john mitchell 
type structure standard ml 
acm transactions programming languages systems april 

nevin heintze 
set analysis ml programs 
acm conference lisp functional programming pages 

nevin heintze david mcallester 
linear time control ow analysis 
proceedings acm sigplan conference programming language design implementation pldi pages las vegas nevada june 
sigplan notices may 

fritz henglein 
simple closure analysis 
technical report department computer science university copenhagen march 

suresh jagannathan stephen weeks andrew wright 
type directed ow analysis typed intermediate languages 
international static analysis symposium september 

neil jones stephen muchnick 
flow analysis optimization structures chapter pages 
prentice hall 

simon peyton jones john launchbury mark shields andrew tolmach 
bridging gulf common intermediate language ml haskell 
acm symposium principles programming languages pages january 

robin milner mads tofte robert harper david macqueen 
de nition standard ml revised 
mit press 
:10.1.1.141.7192
minamide gregory morrisett robert harper 
typed closure conversion 
acm symposium principles programming languages pages st petersburg fl january 

jens palsberg 
closure analysis constraint form 
acm transactions programming languages systems january 

jens palsberg patrick keefe 
type system equivalent ow analysis 
acm transactions programming languages systems july 
preliminary version principles programming languages pages january 

john reynolds 
de nitional interpreters higher order programming languages 
acm annual conference pages 

manuel serrano pierre weis 
optimizing caml compiler 
workshop ml applications orlando florida june 
acm sigplan 
appears inria rr 

zhong shao andrew appel 
space ecient closure representations 
acm conference lisp functional programming pages orlando fl jun :10.1.1.141.7192

david tarditi anurag acharya peter lee 
assembly required compiling standard ml acm letters programming languages systems june 
appears cmu cs 

david tarditi gregory morrisett perry cheng chris stone robert harper peter lee 
til type directed optimizing compiler ml 
acm conference programming language design implementation may 

mads tofte lars birkedal 
region inference algorithm 
transactions programming languages systems 

mads tofte lars birkedal martin elsman niels tommy olesen peter sestoft peter bertelsen 
programming regions ml kit 
technical report technical report diku tr department computer science university copenhagen 

andrew tolmach dino oliva 
ml ada strongly typed language interoperability source translation 
journal functional programming july 
