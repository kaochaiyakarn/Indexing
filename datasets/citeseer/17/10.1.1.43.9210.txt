modelling security properties csp steve schneider royal holloway university london technical report csd tr february department computer science egham surrey tw ex england security properties confidentiality authenticity may considered terms flow messages network 
extent characterisation justified process algebra communicating sequential processes csp appropriate describe analyse 
explores ways security properties may described csp specifications security mechanisms may captured particular protocols designed provide properties may analysed csp framework 
concerned theoretical basis analysis 
formal verification simple example carried illustration 
security protocols designed provide properties authentication key exchanges key distribution non repudiation proof origin integrity confidentiality anonymity users wish exchange messages medium little control 
properties difficult characterise formally informally 
protocols contain great deal combinatorial complexity making verification extremely difficult prone error 
promotes view process algebra provide single framework modelling protocols capturing security properties facilitating verification debugging 
discussion proposing possible approaches providing definitive answers 
argued security properties considered properties concerning flow messages network 
extent characterisation justified process algebra csp hoa appropriate describe analyse 
considers ways security properties may described notation csp security mechanisms may captured particular protocols designed provide properties may analysed csp framework 
familiarity csp assumed 
approach general clear modelling particular properties analysis particular protocols require tailoring model 
aims exploring general approach trying construct universal model suitable handling possible security issues probably unrealistic goal 
security properties generally properties requiring bad occur exclusively form 
course particular communication protocols aim live occur designed achieve goals delivery messages 
distinction drawn security requirements implemented protocol liveness requirements important communication generally independent security 
possible security properties expressed liveness properties outside scope 
traces model csp adequate needs analyse properties form bad happen sufficient focus systems may 
equivalences refinements expressed grounded traces model 
security properties network provides means users people applications programs communicate sending receiving messages 
situation may modelled high level abstraction csp process net provides user ways interacting sending messages parties receiving messages parties 
assume universal set message messages sent party consider users numbered user ng security properties channel employed user input messages network input channel type user message input form considered instruction user transmit message user network high level view network channel employed user receive messages output network output channel type user message output form considered receipt user message sent user users requirements network expressed terms behaviour network csp successfully years description analysis communications protocols 
common safety liveness properties readily expressed terms possible behaviour network respect users 
example property spurious messages generated captured safety property requires output message previously input appears trace occurred 
liveness requirement message lost formalised follows input message corresponding output eventually available 
generally properties expressed precisely formally terms semantic models csp 
necessary know internal structure network order demonstrate provides particular services services properties expressible simply terms interactions network offers users 
case common communications protocols take view security properties captured way 
examine offer definitions properties considering network finer level detail 
views security properties considered pi viewpoint users network know parties trusted 
properties expressed viewpoint generally include assumptions implicitly explicitly user communication partner act contrary aims protocol 
example shared secrets disclosed third parties 
security properties pi high level god eye view identifies nodes follow protocols faithfully identifies engaging general activity attempting find flaw protocol 
view taken care taken ensure privileged information accidentally protocol description responses node dependent information available high level view 
circumstances node may knowledge concerning communication partner cases protocol may invoked communicating particular known trusted users knowledge trust obtained outside scope report 
follow high level view report 
means postulate existence enemy identity known formulation security properties 
user name enemy process 
justify decision single enemy arguing enemies increase vulnerability protocols single enemy sense encapsulates behaviour enemies 
confidentiality confidentiality achieved users may communicate particular messages drawn set possibility user intended recipient receiving 
words input occurs subsequent output user user message output occurs user necessarily sent message previous input form obtain messages intended user 
god eye view user obtain messages intended user user confidentiality captured specification requiring message output user sent user restrict attention message set messages intended remain confidential 
assume generated user true example signed messages simplifying assumption justified circumstances 
assumption implicit definition simply guess confidential message 
messages encrypted messages control messages general available eavesdroppers confidentiality concerned protecting 
considerations may captured trace specification definition net provides confidentiality set messages net sat ffl tr user hi tr user hi may expressed csp process algebra ffl net user net user user security properties observe equivalent net user net user user example net gamma 
gamma 
gamma 
gamma 
meets equivalence message user user output user breaches confidentiality assuming 
quantification messages necessary 
property may captured traces model property conf conf tr messages tr user messages tr user states messages message set output user subset sent 
words user obtain messages sent 
fact property sat specification means preserved refinement 
immediate consequence process algebra characterisation system providing confidentiality sets separately provides confidentiality sets simultaneously ffl net net ffl net net ffl net net simplification observe messages sent users communicating users know trust honest characterisation confidentiality may simplified messages sent user definition simplifies net sat ffl tr user hi security properties equivalent simpler form net sat tr user hi property may expressed entirely process algebra number different ways 
way captures idea attention focussed entirely events user observed net sigma user process refinement net sigma user traces model refinement process achieving equality equivalent obtaining refinement direction net sigma user alternative characterisation obtained considering effects preventing net performing events user system providing confidentiality affected restriction net net user restricting behaviour net reduce behaviours follows automatically restriction refinement net processes equivalent precisely refinement direction net user net final characterisation regards system acceptable event perform set sigma user words perform possible process perform events run user net characterisations provably equivalent assertion net sat tr user hi straightforward process algebra show system provides confidentiality sets separately provides confidentiality sets simultaneously net user net net user net net user net user user net user net security properties message authentication property requires messages guaranteed authentic sense particular message come particular source really come source 
authentication requires messages forged 
terms event authenticates event observation possible occurred previously observation provides evidence previous occurrence 
definition event authenticates event process sat auth tr auth tr tr hi tr hi observe specification restrict number occurrences event occurrence event expression property terms sat specification demonstrates preserved refinement 
specification captured process algebraic equation 
case condition equivalent example process gamma 
gamma 
gamma 
gamma 
authenticating gamma 
authenticating gamma 
gamma 
security properties words event occur occur previously 
context sending receiving messages require received message authenticate sent message words receipt message node possible message sent node system net consisting medium enemy nodes property check net net example buffer process copy gamma 
gamma 
copy authenticating message output previously input 
characterisation authentication promoted sets events set authenticates set messages authenticates messages words messages seen messages previously occurred 
captured follows definition authenticates form useful wish check message genuine originator unknown 
captured set user authenticating set user authenticating message indicates honest node generated original message 
buffer process copy weaker property authenticating output occur input 
property strictly weaker previous property output authenticates corresponding input 
example random message generator rand gamma 
gamma 
rand authenticating message output wasn previously input authenticating particular definition provides straightforward proof transitivity authentication authenticates authenticates authenticates security properties furthermore follows definition sets authenticate authenticated words event performed union fact contained intersection 
mutually authenticating disjoint events set occur 
note authentication reflexive authenticates 
anonymity way anonymity property receiver anonymous message idea sent amounts requirement anonymous message sent users message sent particular user possible user 
may captured number different ways depending precisely flavour anonymity intended 
strong anonymity approach uses alphabet renaming abstraction operator 
providing anonymity aim achieve situation observations possible particular observer allow observer deduce set events say occurred 
words event occurs possible 
approach way 
consider alphabet renaming operator maps events new event event performed replaced new event anonymity fact event rise event words possible fact events possible original process captured process algebra inverse alphabet renaming gamma events available available 
anonymity condition amounts requiring gamma event possible events possible 
new event intended event universal set events sigma 
theoretically cleaner alternative arbitrary event place avoided alternative may lead confusion 
security properties definition process strongly anonymous respect set gamma new event example consider process gamma 
gamma 
gamma 
gamma 
intention occurrence event provide indication occurred 
alphabet renaming function observe gamma follows provides strong anonymity respect set fa exactly expect 
hand consider process gamma 
gamma 
gamma 
gamma 
gamma 
number copies event possible depends initial event chosen find gamma gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
original process example allows trace ha bi possible original process theorem strongly anonymous respect gamma follows fact gamma true traces model trace trace gamma 
theorem strongly anonymous respect strongly anonymous respect converse result hold strongly anonymous respect mean strongly anonymous respect trivial see observed process anonymous security properties respect singleton set respect sets size 
concrete example consider process gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
process strongly anonymous fa fb union 
hand obtain result theorem strongly anonymous respect fg strongly anonymous respect observe property anonymity preserved refinement true refined process run true systems 
context sending messages network wish obtain partial anonymity aim obscure origin message wish obscure contents 
particular message require possibility node sent message 
property required net strongly anonymous respect set fin fixed fact require family anonymity results may collected single algebraic equation single alphabet renaming encapsulates separate alphabet renamings 
theorem strongly anonymous respect family fa pairwise disjoint sets events gamma events new events 
point view network property mentioned property check net gamma net net suitable function removes originator message provides anonymity messages sent network 
important note communication place presence enemy able monitor traffic goes network protocol achieve anonymity enemy see source message enters network 
anonymity normally required enemy considered recipient access incoming messages 
security properties weak anonymity form anonymity may considered strong circumstances requires instance event intended anonymous replaced alternative event 
case process gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
hope anonymity set fa bg occurrence provide sufficient evidence order occurred 
renaming function yields gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
gamma 
point event occurred second constrained different independently anonymous event occurred possibility second event particular instance 
situation arise anonymous voting algorithm instance party allowed vote anonymity subsequent votes different 
form anonymity characterised property behaviour result permutation events anonymity required 
intention observer able distinguish behaviour system behaviour exchanged 
function obtain process 
suggests alternative weaker characterisation anonymity 
definition process weakly anonymous respect set events permutation set weaker previous definition requires instances particular event replaced way allowing instance possible replaced event 
requires consideration large number equivalences order establish anonymity grows exponentially size problem alleviated certain extent considering transpositions permutations swap precisely elements permutation product transpositions need check transpositions transpositions generated involving particular element may restrict attention transpositions 
define alphabet transformation maps maps leaves events unchanged 
theorem set element weakly anonymous respect security properties proof direction trivial function permutation prove direction recall result csp functions 
transpositions ft ag generate entire group permutations permutation equivalent case 
corollary weakly anonymous weakly anonymous theorem strongly anonymous respect weakly anonymous respect consideration situation regard network illustrates need specialisation notion anonymity 
messages form communicated network requirement instance particular replaced message instance message replaced correspond better anonymity example business transactions session parties consist number messages generated 
consider permutations messages form wish consider subgroup permutations consisting permutations agent component message 
subgroup generated mappings defined network provide form anonymity required net net user user 
integrity integrity seen dual converse confidentiality leakage information low level users high level users case enemy user honest parties 
integrity seen assurance messages tampered assurance hash value checksum 
case messages generated enemy 
viewpoint integrity form authenticity sense message output follow particular input message case output authenticates input 
originator message need known simply output message authenticates input message node 
form authenticity difference users abstracted away 
net user user net user user user output message input user 
network non repudiation non repudiation concerned parties transaction obtaining evidence transaction occurred case subsequent denial party 
evidence sufficient convince arbitrator judge transaction occurred 
sense different authenticity party may know proven judge 
differs authenticity users primarily concerned malicious interference party 
example party may generated particular message presumably knowledge 
knowledge provide evidence convince judge 
evidence transaction obtained transaction occur 
way non repudiation protocol requires party obtains evidence transaction 
receiver message obtain message evidence pass judge establishes authenticates sender send message 
sender message obtain message evidence pass judge establishes authenticates receiver receive message 
way non repudiation protocol need provide particular party required evidence 
highest level description despite differences authentication turns non repudiation modelled authentication property 
see difference comes detailed level description 
consider case evidence provided proof sender user say party user received message user position input evidence network message previously received user may captured follows definition transaction sender receiver message provides evidence received user authenticates user similar fashion receiver may provide evidence message sent 
definition transaction sender receiver message provides evidence sent user authenticates user task setting network non repudiation ensured finding appropriate evidence messages words message finding suitable general non repudiation requirement concerned particular message evidence providing evidence set possible messages 
case required function gamma 
message provides evidence network architecture common architecture security protocols designed consists network nodes typically workstations able communicate network sending messages medium acts postal service 
need security arises fact users service people applications programs control medium possible malicious agents intercept interfere network traffic 
need confidentiality face insecure medium creates need form encryption need authenticity message forgery possible raises need form security mechanism 
common approach modelling situation consider set nodes connected medium modelled single process 
medium general consist network processes network may considered higher level abstraction single process 
interactions nodes may nodes medium 
discussed earlier find convenient model malicious interference means separate enemy process node manipulates essentially passive medium 
service provided users modelled jjj node trans rec medium nodes unable interact directly operation entirely interleaved 
communicate medium means channels trans rec nodes transmit receive messages respectively 
quite distinction user node user communicates network blurred addressing security properties 
authentication check particular server remains requires response directly server network operator responsible 
cases appropriate think user node entity 
purposes find convenient treat distinct 
forms interference modelled intruder process enemy node able alter condition medium certain channels available nodes 
entire system described net jjj node trans rec medium leak kill add enemy process net refer configuration generally parameterised particular descriptions node processes node processes medium enemy network network medium enemy rec trans trans rec leak add kill architecture network messages kind messages transmitted received depend particular protocol modelled probably best initially defer definition type channels come model protocol 
note node node channels trans rec interact medium trans rec may thought denoting families channels single channels 
destination field required part message message possibly encryption 
clear stage best handle encrypted messages order maintain possibility number encryption levels may arbitrarily large recursive data structure required lines message plaintext key key message message message plaintext messages non trivial structure plaintext user text plaintext plaintext structure appropriate messages 
example protocol keys take dual role encrypt messages comprising messages encrypted 
key exchange mechanisms set key included possible plaintext cryptographic mechanisms hash functions may included possible messages case definition message extended extra lines hash hash message 
purposes definition message remembering varied modelling needs 
network prove useful considering enemy may deduce messages received able extract information messages 
extraction function kernel may defined structural induction message kernel defined plaintext case functions defined follows kernel kernel kernel fkg kernel kernel kernel kernel kernel kernel fug kernel ftg kernel kernel kernel function kernel lifts sets obvious way 
message properties intruder able manipulate medium particular ways 
approach taken events signal particular modes interference preference having occur nondeterministically originally taken ros 
advantage approach allows greater control level type interference may occur 
enemy capable producing messages example generate message encrypted key course reproduce message previously received 
fact messages intruder able generate depend messages seen pass network traffic messages able generate keys seen owns 
information system ros define messages generated enemy 
trivial consistency relation set messages consistent 
definition relation information system dependent encapsulate encryption mechanism 
information system defines relation finite sets tokens single tokens indicating token generated set 
case relationship indicate enemy agent generate particular message messages seen 
consider example messages may encrypted means secret keys public keys 
set public nodes public keys simplicity assume node public fp key set nodes secret keys node secret fs key network set distinct set public keys secret public fg set shared keys shared distinct public secret keys secret shared fg public shared fg entailment relation fin message theta message relation finite set messages think enemy having seen messages enemy generate 
relation closed axioms information system 


abuse notation allow relation possibly infinite sets messages fin ffl encapsulate way messages generated considering possible structures message 

messages key 
certain properties particular encoding mechanisms may captured providing additional inference rules 
example relationship secret public keys may captured pair rules 
fp 
fs example rules allow deduce obvious result possession message encrypted secret key say possession public key allows original message retrieved fp fp fp fp appropriate rule shared keys possession shared key message encrypted key allows generation original message network 
fk shared possible encode various deductions wish include capability enemy example deducing key observing encoded message message plaintext 
fm rules give model different encryption decryption capabilities enemy 
rules encapsulate properties encryption 
example encryption commutative include rule 
fk medium description medium involves number decisions best way model network medium 
allow possibility intruder able manipulate medium particular ways 
done building intruder medium medium capability interfering message traffic particular ways prefer follow roscoe approach ros including separate model intruder 
second approach gives greater separation medium considered essentially passive service provided various nodes malicious agent particular capabilities manipulate medium particular ways 
capabilities agent explicit manipulation medium associated particular events attacks protocols easier follow understand 
medium containing set messages may described initially medium fg medium input output ia process input permits input medium 
decide type messages medium accept offer 
purposes separate destination source body message 
possibilities example message broadcast users explicit destination field required 
input trans gamma 
medium fi channel trans type user user message message trans thought node sending input medium indicating wish message delivered node source destination message 
network abstracted away refusals sense input refused amounts making assumption deduced messages accepted 
reasonable assumption protocols currently perform tasks masking network traffic 
level abstraction assume messages accepted network process output allows output medium output rec gamma 
medium fi channel rec type user user message message rec corresponds receipt message node labelled coming source node note empty external choice simply equivalent set empty medium contains messages possibility output 
process ia describes possible interactions medium due intruder actions 
perfectly secure medium treat part process description cases considering model ways medium susceptible interference 
medium vulnerable having messages removed added leaked 
ia kill gamma 
medium fbg fg medium fg fg add gamma 
medium fi leak gamma 
medium enemy action modelling enemy concerned messages enemy able generate 
may disrupt protocol may correspond information enemy discovered concerning supposedly confidential messages 
certain assumptions may concerning enemy depending property analysis 
checking confidentiality assumed enemy unable generate messages generated users kept confidential 
hand checking authentication assumed enemy honest users capable generating messages authenticity ensured protocol enemy unable generate need authentication protocol 
integrity assumed enemy capable generating messages assumptions may incorporated description enemy may parameterised set messages seen set messages init initially able generate 
assumptions expressed conditions init set messages particular security property concerned 
felt unrealistic definition input altered accordingly messages may input number messages network reaches capacity threshold network question arises sufficient model enemy action single enemy process 
principle possible number malicious agents acting effect attack single agent unable 
possible model developed depends actual description process enemy fact description enjoys property enemy enemy jjj enemy analysis done level traces see number enemies acting encapsulated description single enemy 
addition messages generated messages seen enemy able generate particular plaintext messages 
furthermore enemy considered possession nodes public keys users names 
set init model information initially possession enemy 
public init user init relation gives capability enemy generate messages messages possession 
csp description enemy relation 
set records messages read medium 
initialised fg enemy defined enemy fg enemy kill add leak knows option allows enemy kill message remove medium 
described simply kill kill gamma 
enemy fact dealing trace properties communication protocols ability enemy kill messages entirely irrelevant 
possible removal messages medium interfere liveness properties communications protocols compromise properties expressed terms traces 
medium allows reordering messages particular message ignored remain medium killed 
protocol guarantees security property enemy unable kill messages guarantee case 
equally useful definition kill equivalent omitting option entirely 
second course action available enemy insert message generate medium 
messages generated initial set init messages come possession 
add init add gamma 
enemy observe description incorporates ability enemy manipulate message address fields giving impression message comes source genuine source 
network enemy considered simply eavesdropper power add messages medium add component simply modelled omitted entirely 
third option allows observe message currently medium leak leak gamma 
enemy fxg final option included model enemy knowledge particular messages 
accomplished allowing enemy output message fact generated 
knows init gamma 
enemy channel indicate messages enemy deduce seen known initially 
argument represents set messages enemy seen 
normally empty set protocol run possible model effect possession particular key vulnerability protocol including key message set observe allowed insertion message medium particular false sources attached messages 
rerouting message modelled having enemy read leak kill cleaner essential discussed add message different destination field back medium 
assumption case confidentiality formalised 
assuming messages wish keep confidential fact kernel messages initially generated enemy kernel init fg hand integrity authenticity implicitly assuming init fg sense protocols designed provide services intended deal messages generated enemy 
checking confidentiality protocol strong assumption enemy output message supposed confidential protocol considered insecure 
situations key exchange protocol designed provide confidentiality authenticity case reasonable analysis init fg 
situations modelling enemy knows adequate necessary construct sophisticated complex model enemy keeps track incoming outgoing messages outputs messages deduces generated legitimate users particular ignoring messages puts medium reads back leak pursue observe situation bear mind 
network nodes consider nodes link user medium control user 
nodes provide security facilities required users encrypting deciphering messages 
finite set nodes labelled set user ng 
nodes provide means users send messages network 
user communicates network fact communicating corresponding node 
nodes interact users inputting plaintext messages intended destinations outputting messages source 
process node communicates user channels type user plaintext input node node interpreted request user send message user similarly output communication interpreted delivery user message come nodes exception node interact medium transmitting possibly messages control messages intended recipients messages employed protocol 
channels trans transmission rec receipt messages 
channels type user message set message contains plain encrypted messages discussed 
communication trans corresponds node placing message destination medium 
communication rec corresponds node receiving message medium source description node process depend security property aiming verify network 
confidentiality authenticity anonymity integrity description consist csp implementation particular protocol analysis 
example extremely simple protocol provide confidentiality messages sent user user implemented node public key secret key follows node gamma 
trans gamma 
node node rec gamma 
plaintext gamma 
node message observe protocol ensure authenticity 
situation different case non repudiation 
case verification judge viewpoint judge control nodes non repudiation protocol 
fact judge viewpoint parties dishonest 
possibility generates need non repudiation protocol place 
judge allow possibility node capabilities node non repudiation established context nodes kill add leak messages interact medium usual ways 
nodes non repudiation established node gamma 
node fxg init gamma 
node network init trans gamma 
node rec gamma 
node fxg kill gamma 
node init add gamma 
node leak gamma 
node fxg modelling point view interfaces processes network expanded include channels add leak kill node able generate plaintext messages channel redundant retained source messages particular non repudiation protocols refine node 
set messages corresponding initial state node contain keys node may encrypt decrypt messages 
meadows example order illustrate material simple example mea grm 
protocol simple example designed purely illustrative purposes 
fact kind example best illustrates benefits process algebra approach process algebra exploring subtle patterns interactions different parties interactions fairly simple 
illustrates approach proof 
proof obvious property unduly long expected mea grm 
significant amount formalisation needs done proof proceed example consists legitimate user encrypts received messages particular key returns medium 
described legitimate node number definiteness receives messages rec encrypts returns trans process algebra follows node rec gamma 
trans gamma 
node key possessed node aim establish enemy obtain particular message possess 
expressed confidentiality respect net net alternatively net sat tr hi standard assumption confidentiality enemy possession messages containing kernel kernel init network may take description net consist node node initially empty medium medium fg enemy initially learned enemy fg 
prove useful extract certain sets messages traces system leak tr fm ffl tr leak hig add tr fm ffl tr add hig trans tr fm ffl tr trans hig rec tr fm ffl tr rec hig tr fm tr hig mess tr leak tr add tr trans tr rec tr tr lemma kernel function closed generates relation kernel kernel proof considering clauses define relation 
result follows clause true relation 
order prove confidentiality net respect certain properties components 
required properties described lemma 
combine information state components maintained events occurred extracted trace 
combination information sources required establishing kind result 
state approaches commonly include history variable component state order record trace information 
approach taken closer event approaches provide way extracting state system trace 
lemma component processes meet specifications enemy sat tr kernel add tr kernel kernel init kernel leak tr enemy sat tr kernel tr kernel kernel init kernel leak tr medium sat tr kernel leak tr kernel kernel trans tr kernel add tr medium sat tr kernel rec tr kernel kernel trans tr kernel add tr node sat tr kernel trans tr kernel rec tr proof case recursion induction definition process 
provide proof illustration 
definition enemy unique fixed point guarded function vector processes indexed sets messages function may kill gamma 
network init add gamma 
leak gamma 
fxg init gamma 
wish prove component fixed point meets corresponding component vector specifications spec spec tr kernel add tr kernel kernel init kernel leak tr show vector specifications satisfiable preserved function 
clearly satisfiable satisfies 
prove spec preserved assuming sat spec prove possible course action satisfies spec rule external choice sat tr gamma 
sat tr hi tr tr tr branch turn 
deduce kill gamma 
sat tr hi tr kill tr spec tr trace tr meeting second disjunct specification add tr add tr leak tr leak tr follows spec tr spec tr 
furthermore trace meeting disjunct tr hi spec tr 
kill gamma 
sat spec tr second choice yields init add gamma 
sat tr hi tr add tr init spec tr observe traces tr meeting second disjunct specification kernel add tr kernel add tr kernel 
kernel add tr kernel kernel init leak tr spec tr 
leak tr leak tr kernel kernel kernel init init 
follows kernel add tr kernel kernel init kernel leak tr possibility tr hi yields spec tr conclude init add gamma 
sat spec tr network third choice yields leak gamma 
fxg sat tr hi tr leak tr spec fxg tr trace tr meeting second disjunct specification add tr add tr kernel fi kernel init kernel leak tr kernel kernel fi kernel init kernel leak tr kernel kernel init kernel leak hi tr kernel kernel init kernel leak tr words spec tr holds 
spec tr holds case disjunct true follows leak gamma 
fi sat spec tr fourth choice falls sort analysis second yields init gamma 
sat spec tr finish applying rule choice times sat tr sat tr sat tr obtain kill gamma 
init add gamma 
leak gamma 
fxg init gamma 
sat kernel add tr kernel kernel init kernel leak tr true arbitrary conclude sat spec define tr fg tr similarly component net behaves corresponding specifications 
components constrain behaviour entire process net allow particular events occur certain times 
rule may establish specifications met components met system 
tr tr sat tr sat tr hi sat tr network antecedents state truth depends events process meets process unable perform events mean placed parallel interacting events involved occurrence event event perform engages ensures combination meets tr 
case net easiest consider combination node fg enemy firstly consider case tr 
applying rule fadd fg 
obtain antecedents rule tr tr fadd enemy sat tr node sat tr hi conclude node fg enemy sat tr similar reasoning obtain node fg enemy sat tr node fg enemy sat tr consider effect placing combination parallel events medium fact combination equivalent net net node fg enemy sigma medium case third antecedents rule trivially satisfied 
specification met component providing instance second antecedent met combination 
deduce specifications hold net position establish theorem asserts correctness example 
theorem network secure node trans rec medium leak add kill enemy sat tr hi proof strategy proof follows prove kernels messages passed system contained kernel init true follows passed channel proof begins assuming contradiction possible trace net follows point trace kernel contained kernel messages passed 
network focus trace tr trace system point establish possible message trace possibility leads contradiction 
assume contradiction net meet specification 
trace tr net tr hi 
tr longest prefix tr kernel mess init tr kernel init init tr trace tr message removed kernel mess tr kernel init 
trace tr defined property true prefix tr true tr kernel kernel mess tr kernel kernel init kernel mess tr kernel init 
number possibilities message tr message channels leak add trans rec kill consider turn 
message tr leak specification fg kernel leak tr kernel trans tr kernel add tr trans init tr trans tr add init tr add tr obtain kernel mess tr kernel mess init tr kernel mess kernel mess init tr kernel leak tr kernel mess init tr kernel trans tr kernel add tr kernel mess init tr kernel trans init tr kernel add init tr kernel mess init tr kernel mess init tr kernel init contradicts definition tr message tr leak event 
entirely similar reasoning applies rec specification trans specification 
cases differ slightly preceding ones 
event tr communication form add specification fg kernel add tr kernel init kernel leak tr kernel leak tr kernel leak init tr kernel mess tr kernel mess init tr kernel mess kernel mess init tr kernel add tr kernel mess init tr kernel init kernel leak tr kernel mess init tr kernel init kernel leak init tr kernel mess init tr kernel init kernel mess init tr contradicts definition tr message tr add event 
entirely similar reasoning applies specification 
final possibility event tr kill event 
case mess tr mess init tr contradicts definition tr yielding contradiction 
discussion initial assumption trace tr tr true yielding required result 
proof easily adapted take nodes account 
fact descriptions nodes necessary required meet particular specification example transmit messages kernel intersects node sat kernel trans tr kernel fg course complex specifications appropriate example messages added network nodes intersect passed node may passed back node sat kernel trans tr kernel kernel rec tr fg specification fact met node discussion concerned expression particular security properties protocols framework csp order provide foundation analysis verification 
approach motivated part availability model checking tools fdr proceeded eye applicability tools 
inevitable difficulties may necessary adapt properties 
cases establish properties checking correspond properties results obtained application tools allow inferences require 
example sets plaintext messages infinite base sets small unsuitable direct analysis means model checking means current state art technology situation improve value passing introduced 
techniques deducing results concerning messages verifications place holders appropriate 
case simplifications concerning maximum number encryptions order regain message space additional justification required derive general correctness correctness assumptions 
problems protocols perform encryptions certain level generally interference involving deeper levels detected case 
necessary prove imposition bound rule attacks protocol order confidence results analysis 
modelling enemy separate process allows possibility introducing tactics state space exploration model checking example restricting number messages enemy place medium 
accompanying enemy interference performance events may introduce tactics introducing constraints parallel refining system 
may prove useful attempting detect flaws flaw refinement flaw original system correctness refined protocols imply june original correct demonstrated tactic rule possible attacks 
non repudiation appears completely different kind property 
party non exchange messages concerned honest 
furthermore party satisfied party received required messages party aims obtain evidence sufficient convince outside party exchange took place 
meadows example appears particularly straightforward example comparing different approaches proof rests fact stage information required generate message introduced system invariant system fairly straightforward rely particularly encryption decryption properties simply property generation messages relation introduce new information 
harder find suitable invariants scenarios information encrypted form communication users shared key necessary prove stage decrypted 
subtle properties encryption decryption required 
disappointing simple example meadows requires lengthy proof 
part point doing proof explore relationship language theoretic ideas underpinning invariant csp recursive description 
relationship similar proof type hope obtain theorems allow results concerning language messages generated translated immediately csp setting need laborious manual translation 
close relationship csp protocol descriptions rules generating messages allow natural proofs 
achieved expect result particular set rules generate message containing translate immediately result corresponding csp description required confidentiality property 
particularly due peter ryan richard moore paul gardiner bill roscoe gavin lowe michael goldsmith andreas lively discussion perceptive comments earlier versions 
dra providing funding research 
formal systems europe failures divergences refinement user manual tutorial 
grm gray mclean temporal logic specify verify cryptographic protocols progress report proceedings eighth ieee computer security foundations workshop 
hoa hoare communicating sequential processes prentice hall 
mea meadows applying formal methods analysis key management protocol journal computer security 
ros roscoe lecture notes domain theory oxford university 
ros roscoe prospects describing specifying verifying protocols csp fdr formal systems europe 
