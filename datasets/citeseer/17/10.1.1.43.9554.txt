specification behavioural requirements compositional multi agent system design daniela jonker jan treur wijngaards university calgary software engineering research network university drive nw calgary alberta canada email cpsc ucalgary ca url www cpsc ucalgary vrije universiteit amsterdam department artificial intelligence de boelelaan hv amsterdam netherlands email jonker treur cs vu nl url www cs vu nl jonker treur 
shown informal formal specification behavioural requirements scenarios agents multi agent systems integrated multi agent system design 
particular addressed compositional perspective design descriptions specification behavioural requirements exploited 
approach applied case study development mediating information agent 
shown compositional verification benefits integration requirements engineering design process 
agent systems complex systems develop cf 

autonomy behaviour agents contributes inherently complexity 
tasks performed individual agents simple complex agents autonomy emergent behaviour complete multiagent system hard design hard verify 
applications required agents cooperate users sense coordinated manner 
essential analyse requirements behaviour multi agent system relation behavioural properties individual agents order develop system right properties 
multi agent system development emphasis specification system architecture designed implementation design 
requirements considered kept implicit informal 
principle required behavioural properties play heuristic role system design manner system behaviour needed explicitly specified means 
requirements engineering cf 
addresses development validation methods eliciting representing analysing confirming system requirements 
requirements express intended properties system scenarios specify cases intended system examples intended user interaction traces usually employed clarify requirements 
requirements scenarios expressed various degrees formality ranging unstructured informal representations usually initial requirements acquisition structured semi formal representations formal representations 
requirements specified multi agent system agents multi agent system components agents 
starting behavioural requirements system requirement refinement behavioural properties agents identified step components agent 
approach fits quite compositional multiagent system design example discussed part heuristics design process explicit 
underlying assumptions compositional design method lead designs transparent better maintainable partially reused easily designs 
process requirements refinement defines different process abstraction levels detail 
basis refinement requirements scenarios entire system system components identified agents users world components 
components system specific sub set refined requirements scenarios imposed ensure system satisfies requirements scenarios 
refinement requirements scenarios imposed agent leads identification components agent properties 
different refinement levels requirements scenarios related levels process abstraction compositional design description designed 
compositional verification process system designed formalised behavioural requirements play main role cf 

verification process existing design high complexity respects 
hand formal formulations properties different process abstraction levels 
explicit requirements engineering performed hard search space requirement formulations small verification useful respect appropriate requirements properties assumptions depend 
hand proofs 
part design process requirements formally specified starting point verification process reducing complexity verification eliminating search space requirement formulations different process abstraction levels 
requirements specified design process verification form reverse engineering performed obtain required properties different process abstraction levels 
methodological approach proposed results compositional specification languages language specify design descriptions language specify behavioural requirements scenarios compositional multi agent system development method desire cf 
real world case study see languages available second currently added 
languages fulfills purpose 
language specify multi agent system architecture needs features different language express properties system 
principle languages different 
distinction specification languages follows distinction ai design community cf 
structure design object hand function behaviour hand 
languages informal semi formal formal variants needed facilitate step informal formal 
formal models specified languages related formal manner formally defined design description satisfies requirement scenario specification formal relation verify design description fulfills requirements scenarios 
shown specification behavioural requirements scenarios informal formal integrated multi agent system design particular compositional design method underlying formal conceptual model design descriptions desire 
approach applied case study development mediating information agent 
example domain case study development multi agent system keeps human users informed respect interests rapidly changing available information world wide web 
task multi agent system inform users information available papers world wide web scope interest 
sources information world wide web information providing agents operate world wide web example agents related web sites research groups announce new papers included web site 
different representations requirements scenarios informal semiformal formal discussed section 
requirements scenarios refinement process abstraction levels explained section 
integration verification process requirements engineering topic section 
section concludes discussion 
informal formal representation requirements engineering role scenarios addition requirements gained importance see 
scenarios cases examples interaction sessions users system requirement elicitation regarded effective ways communicating stakeholders domain experts users system customers managers developers 
scenarios example employed formalise interactions components system 
having requirements scenarios requirements engineering process provides possibility mutual comparison requirements verified scenarios scenarios verified requirements 
mutual verification process ambiguities inconsistencies existing requirements scenarios may identified lack requirements scenarios scenarios may identified requirements formulated requirements may identified scenarios formulated 
informal scenarios semi formal requirements semi formal scenarios formal requirements formal scenarios relations requirements scenarios degree formalisation informal requirements fig 

representations informal formal 
stated requirements scenarios seen effective ways communicating stakeholders 
true requirements scenarios represented structured easy understand manner precise detailed support development process system 
unfortunately standard language exists representation requirements scenarios 
formats varying degrees formality different approaches 
informally represented requirements scenarios best understood stakeholders approaches exist formal representations requirements early stages 
continual participation stakeholders process possible 
drawback informal descriptions appropriate input construct system design 
hand advantage formal descriptions manipulated automatically mathematical way enables verification detection inconsistencies 
furthermore process formalising representations way disambiguate requirements scenarios 
time formal representation appropriate communication means stakeholders 
approach development process different representations informal structured semi formal representations obtained process formalisation resulting cooperation stakeholders designers system formal representations designers construction design 
independent measure formality requirement scenario represented number different ways different representation languages informally way cases uml 
examples 
informal representations different informal representations express requirement scenario 
representations example graphical representation language natural language combinations languages done uml cases cf 

scenarios instance represented format supports branching points process language takes linear structures account 
example application list imprecisely formulated initial requirements elicited 
example elicited requirement keeping aware shown 
example informal initial top level requirement user needs kept aware relevant new information world wide web 
requirement information elicited interview stakeholder 
scenario elicited stakeholder sc 
user generates awareness scope 
user waiting 
new information available world wide web 
user receives results awareness scope asr requirement analysed reformulated precise requirement 
reformulated scenarios requirements terminology identified relevant construction domain ontologies words bold face part domain ontologies acquired 
example reformulation requirement top level user notified new information world wide web awareness scope user expressed awareness scope just new information available world wide web user retracted awareness scope awareness scope retraction 
structured semi formal representations requirements scenarios reformulated structured precise forms 
check requirements ambiguities inconsistencies analysis seeks identify parts requirement formulation refer input output process useful 
analysis provokes reformulation requirement structured form input output explicitly visible structure formulation 
analysis process concepts relate input identified distinguished concepts relate output acquisition domain ontology cf 
integrated requirements engineering 
possibly requirement splits natural manner simpler requirements 
leads number new representations requirements 
ontology facilitates formalisation requirements scenarios input output concepts defined semi formal level 
nontrivial behavioural requirements temporal structure reflected representation 
entails terms point time earlier point time clarify temporal relationships different fragments requirement 
informally specified requirement example reformulation steps point time user receive input results awareness scope new information awareness scope user generated output awareness scope just new information available output world wide web time user generated output awareness scope retraction 
point time earlier point time user generated output awareness scope user generated output awareness scope retraction referring awareness scope just new information awareness scope available output world wide web user receive input new information awareness scope reformulation steps semi formal structured requirement specified point time earlier point time user output awareness scope user output retraction awareness scope just world wide web output new information awareness scope user input new information awareness scope summary obtain structured semi formal representation requirement performed explicitly distinguish input output concepts requirement formulation define domain ontologies input output information temporal structure statement explicit words point time earlier point time 
scenarios structured semi formal representation obtained explicitly distinguish input output concepts scenario description define domain ontologies input output information represent temporal structure described implicitly sequence events 
interplay requirements elicitation analysis scenario elicitation analysis plays important role 
specific identified requirements scenarios relate example relates sc 
identified requirement related scenario available isolated requirement new scenario acquired 
sc 
user output awareness scope 
user waiting 
world wide web output new information 
user input results awareness scope formal representations formalisation scenario formal ontologies input output formalising sequence events temporal trace 
formal temporal model obtained example defined 
course formal languages chosen long allow formalisation temporal dependencies occur behavioural requirements having design choices 
obtain formal representations requirements input output ontologies chosen formal ontologies 
domain ontologies acquired reformulation process example application formalised part domain ontologies related focus requirements scenarios shown ontology element explanation scope sort search scopes awareness scopes user sort names different users persistence type sort distinguish persistent incidental scopes info element sort result information result scope binary relation info element scope persistent incidental objects sort persistence type corresponding difference persistence awareness scope search scope input interested ternary relation user scope persistence type output result user ternary relation info element user scope addition temporal structure semi formal representation expressed formal manner 
formal ontologies formalisation temporal structure mathematical language obtained formulate formal requirement representations 
semantics compositional information states evolve time 
information state component assignment truth values true false unknown set ground atoms play role compositional structure reflected structure information state 
formal definition 
set possible information states denoted 
trace component sequence information states 
trace component information state input interface component time point component denoted state input sub component analogously state output denotes information state output interface component time point component formalised information states related statements formally defined satisfaction relation 
behavioural properties formulated formal manner quantifiers time usual logical connectives 
alternative formal representation temporal properties modal temporal operators temporal multi epistemic logic 
examples formal representations top level requirements formalised part requirement addresses case information relating awareness scope second part addresses case information available 
state output interested user scope persistent state output www result scope info element scope state input result user info element user scope state output interested user scope persistent state output www result scope info element scope state output www result scope info element scope state output interested user scope persistent state input result user info element user scope example formal representation top level scenario formal scenario representation relates second formal requirement representation expressed 
note point time point happens corresponds waiting user course similar scenario waiting take time 
sc state output interested user scope persistent state output www result scope info element scope state input result user info element user scope summarise formalisation requirement scenario basis structured semi formal representation achieved choosing formal ontologies input output information formalisation temporal structure formal mathematical language checking temporal formula formally represents requirement temporal model formally representing scenario means formal verification requirements scenarios done model checking 
formal representation scenario formal representation requirement compatible temporal formula true model 
example temporal formula true scenario sc result available world time point scenario user generated persistent interest output time point time point user information input 
requirements different process abstraction levels section levels abstraction discussed requirements system requirements agent system requirements components agent 
example requirements different levels process abstraction example domain illustration 
requirements multi agent system requirements multi agent system including interaction users considered 
requirements scenarios previous sections formulated respect users world wide web considered environment 
assumptions design multi agent system support users 
example specific agents assumed 
requirements scenarios section express desired behaviour global perspective refer input output users environment world wide web 
refining requirements scenarios elementary units behaviour identified behavioural refinement units behaviour chosen specific design decision 
example postulated basis specific user outputs concerning interest scope interest identified search scope user incidental need information scope search scope generated 
awareness scope user persistent need information scope awareness scope generated 
awareness scope retraction user persistent need information retraction scope awareness scope generated 
available new information users interested information new information available user awareness scope retracted user matches information receive information 
persistent need information retracted information newly available world wide web matches persistent need information identified new information 
note new ontology elements created need part ontologies user input output meant part ontologies 
relation refinements design decision identify types agents personal assistant agents direct contact users information provider agents handle needs information 
requirements imposed personal assistants requirements imposed ordinated behaviour types agents 
interfaces personal assistants information providers occur semiformal reformulations requirements 
global design multi agent system described fig 
users personal assistant information providers world wide web depicted 
personal assistant operate human agents users information provider agents 
task personal assistant inform users information available papers world wide web scope interest 
information available papers communicated personal assistant information providers 
personal assistant capable searching information world wide web 
user user personal assistant www information provider information provider fig 

global multi agent system description 
design choice additional level requirements formulated terms input output agents processes identified refinement point time user shall receive input results awareness scope user generated output awareness scope just new information relevant awareness scope available input personal assistant personal assistant receive input awareness scope retraction new information received personal assistants input 
refinement point time personal assistant generate output results awareness scope user received input awareness scope user just new information relevant awareness scope available output world wide web output information providers personal assistant receive input awareness scope retraction new information received personal assistants input 
point time user generated output search scope personal assistant generate output incidental need information scope search scope 
point time user generated output awareness scope personal assistant generate output persistent need information scope awareness scope generated 
user generated output awareness scope retraction users generated awareness scope having retracted personal assistant generate output persistent need information retraction scope awareness scope generated 
point time personal assistant receives new information input user awareness scope matching information receive information input 
information provider receives input information identifies new information new information matches persistent need information information provider received input personal assistant personal assistant receive new information input 
point time information provider receives input persistent need information information newly available world wide web matches persistent need persistent need retracted new information available information identified new information generated output information provider 
summary current problem design choice design system multi agent system single component system 
agents multi agent system users world wide web components system level process abstraction 
top level requirements pose constraints component multi agent system 
words requirements specify global purpose behaviour system specify behaviour system terms relations behaviour components 
requirements composition relation multi agent system 
individual components designed requirements formulated behaviour individual agents component www 
requirements scenarios refined requirements refined scenarios process abstraction level process abstraction level process refinement relations relations requirements scenarios process refinement relations fig 

process abstraction level refinements 
requirements agent system requirements formulated behaviour individual agents component www requirements process abstraction level see fig 
case level 
requirements formulated informally formally 
example requirements imposed personal assistant agent abbreviated pa incoming search scope user pa shall initiate incidental quest useful information scope generating output communication information providers regarding incidental need information scope search scope 
observation performed world wide web regarding scope search scope 
incoming awareness scope user pa shall initiate persistent quest useful information scope generating output communication information providers regarding persistent need information scope awareness scope 
repeatedly generating output observation performed world wide web regarding scope awareness scope pa receives input corresponding awareness scope retraction 
point time pa receives new input user awareness scope matching information pa generate output awareness scope result user pa received corresponding awareness scope retraction received new information 
similarly requirements assumed requirements formulated components multi agent system 
possible define elementary units behaviour refining requirements 
desirable depends constructed requirements considered sufficiently elementary serve starting point transparent design components 
components required behaviour complex aim 
case requirements components refined terms behaviour 
example possible behavioural refinement includes requirements pa maintains profile users satisfies contains awareness scopes user 
awareness scope added profile received pa input 
awareness scope removed profile corresponding awareness scope retraction received pa input 
pa capable matching new input awareness scopes determine appropriateness information users issued awareness scopes 
pa capable interpreting incoming communication information generating communication information agents 
relation behavioural refinements requirements process refinement created deemed appropriate 
furthermore process refinement deemed appropriate choice current process abstraction level extended processes example personal assistant agent replaced number agents process abstraction level additional process abstraction level created agents processes example composing personal assistant number subcomponents case alternative chosen 
choice number additional level requirements formulated specify behavioural properties sub processes relation behaviour sub processes relation global respect level number requirements formulated specify behavioural properties individual sub processes behaviour local respect level 
considering requirements level sub components identified global level behaviour analyzed 
requirements design decision identify sub components personal assistant component maintain user profiles called maintenance agent information component capable matching information awareness scopes called proposal determination component handles communication agents called agent interaction management 
requirement imposed component maintenance agent information abbreviated mai requirement component proposal determination pd imposed component agent interaction management aim 
requirements personal assistant similar behavioural refinements results addition sub components 
level process abstraction design personal assistant described fig 

apart mentioned components personal assistant consist component called world interaction management abbreviated wim observing world wide web interpreting observation results component called maintenance world information abbreviated maintain information world wide web component called process control abbreviated opc determine strategies goals plans agent 
communicated info observation results wim observed agent info communicated agent info agent task control process control maintenance agent information proposal determination maintenance world information agent interaction management world interaction management process info wim process info aim process info mai process info info communicated communicated info pd communicated world info observations actions observed info pd observed world info action observation info pd communication info pd agent info opc world info opc agent info wim agent info aim world info aim world info wim fig 

internal description personal assistant 
design choices additional level requirements formulated incoming communication information received input pa interpreted aim new information awareness scopes awareness scope retractions search scopes 
aim provides mai awareness scopes awareness scope retractions 
aim provides pd new information search scopes 
aim provides new information 
pd provides aim awareness scope results search scope results communicated user 
mai provides pd current awareness scopes search scopes 
requirements component agent individual behavioural properties components distinguished process abstraction level specified requirements abstraction level 
examples level requirements pd pd matches current awareness scopes new information receives match pd generates corresponding awareness scope result 
aim aim receives awareness scope result aim generates outgoing communication containing result relevant user 
requirements specification verification section methodological aspects summarized discussed 
particular relation requirements specification compositional verification addressed 
methodological aspects proposed methodology design process relation behavioural refinements requirements process refinement created deemed appropriate 
refinement behavioural requirement defines requirements elementary units behaviour 
starting behavioural requirements entire system basis requirement refinement decided agents system particular agent meant show type behaviour 
step agents decided desirable refine requirements agent depending requirements constructed agent elementary serve starting point transparent design agent 
agents required individual behaviour may complex lead transparent design 
case behavioural requirements agents refined 
lead identification requirements elementary units behaviour agent relation different components agent perform behaviour 
highest process abstraction level required behavioural properties entire system process abstraction level behavioural properties agents process abstraction level behavioural properties components agents 
fig 

behavioural properties different process abstraction levels requirements refinement process iterated agent components depending complexity agent may lead arbitrary number process abstraction levels agent see fig 

result process different process abstraction levels level entire system level agents separately specific processes agents 
sets requirements lower level chosen way realise higher level requirement sense process composition relation defined design description chosen refinements requirement satisfied original requirement satisfied 
defines logical aspect behavioural refinement relation requirements 
logical relation refinement relationships verify requirements chosen refinements requirement hold system description requirement proven hold system description 
similarly scenarios refined lower process abstraction levels adding interactions sub processes 
level abstraction requirements scenarios employ terminology defined ontology level 
relation compositional verification methodological approach creation different process abstraction levels relation requirements refinement natural connection process compositional verification cf 

purpose verification prove certain set assumptions system adhere certain set properties expressed requirements scenarios 
order prove system behaving required complete specification system necessary set requirements scenarios verify system 
set available verification process hampered great extent formulating sufficiently precise requirements scenarios existing system nontrivial 
purpose verification turned useful exploit compositionality cf 

compositional verification described takes process abstraction levels system related compositional structure system account 
requirements scenarios formulated formally terms temporal semantics 
verification process requirements scenarios system derived properties agents process abstraction level lower agent properties turn derived properties agent components abstraction level lower see fig 

primitive components components composed verified traditional verification methods 
verification composed component process abstraction level done properties sub components embeds specification process composition relation environmental properties component depending rest system including world 
exploits compositionality verification process set environmental properties proof certain component adheres set behavioural properties depends assumed properties sub components composition relation properties interactions subcomponents manner controlled 
assumptions component functions properly properties proven subcomponents 
implies properties different levels process abstraction play role verification process 
condition apply compositional verification method availability explicit specification system description abstraction level composed descriptions adjacent lower abstraction level 
compositionality verification reduces search space properties identified proofs supports reuse agents components 
complexity compositional verification process fold identification appropriate properties different levels abstraction finding proofs properties complex 
properties identified part requirements engineering process means complexity part verification process reduced complexity finding proofs remains 
experience number case studies having right properties reduces half verification due compositionality process abstraction level search space proofs relatively small 
explicit requirements engineering performed finding properties different process abstraction levels hard process abstraction level search space possible behavioural requirement formulations nontrivial 
part design process requirements formally specified different levels process abstraction useful starting point verification process provide detailed map verification process reduce complexity eliminating search space requirement formulations different process abstraction levels 
integration requirements engineering process system design process leads system designs appropriate verification arbitrary architectures 
reuse supported example replacing component possible violating requirements scenarios long new component satisfies requirements scenarios replaced component 
requirements engineering process model described support requirements engineering process 
note idea refinement known area sequential programs 
method compositional requirements specification proposed exploits similar idea context behavioural requirements 
discussion requirements scenarios describe required properties system includes functions system structure system static properties dynamic properties 
applications agent systems dynamics behaviour system plays important role description successful operation system 
requirements scenarios specification informal semi formal able discuss stakeholders formal disambiguate analyse establish constructed model multi agent system satisfies 
requirements scenarios form basis communication stakeholders including system developers important maintain document requirements scenarios organised structured comprehensive way 
document important maintenance system taken operation 
different activities requirements engineering lead large number inter related representations requirements scenarios 
explicit representation traceability relations useful keeping track connections traceability relationships explicit see figs 
reformulation relations requirements resp scenarios process abstraction level behavioural refinement relations requirements resp scenarios different process abstraction levels satisfaction relations requirements scenarios 
case study relationships specified hyperlinks 
offers traceability relating relevant requirements scenarios possibility jump definitions relevant requirements scenarios 
summary main lessons learned case studies integration requirements scenarios acquisition ontology acquisition supports conceptual detailed design input output interfaces agents agent components refinement requirements scenarios terms requirements scenarios elementary behaviours top level supports identification agents allocation behaviours agents refinement requirements scenarios terms requirements scenarios elementary behaviours agent supports identification agent components allocation functionality agent components compositional approach requirements scenarios specification provides basis design rationale documentation design choices reasons compositional approach requirements scenarios specification integral part multi agent system design process strongly facilitates compositional verification designed system 
process achieving understanding requirement involves large number different formulations representations gradually evolving informal semi formal formal 
scenarios formalisation compared requirements equal importance 
keeping track various relations different representations requirements requirements scenarios supported hyperlink specifications requirements document 
result explorative studies proposed principled design method multi agent systems include specification languages language specify design descriptions language specify behavioural requirements scenarios languages fulfill purpose 
distinction similar ai design community structure design object hand function behaviour hand 
languages informal semi formal formal variants available support step informal formal example support communication stakeholders 
formal specification language type semi formal graphical variant language available compositional multi agent system development method desire supported desire software environment 
language meant specify requirements scenarios language specify multi agent system architecture conceptual design level needs features different language express properties system 
current research integration approach requirements engineering proposed compositional development method multi agent systems desire particular software environment addressed 
requirements scenarios agent systems address complex behavioural properties 
comparison clear example uml complex behavioural requirements specified cases informal activity diagrams design specific express necessary complex temporal dependencies relevant requirements scenarios 
development uml different representations behavioural requirements scenarios issue 
approach complex behavioural properties specified 
difference compositionality exploited requirements specification verification 
research knowledge engineering identification formalisation properties knowledge intensive systems addressed usually context verification competence assessment complex tasks 
properties basis requirement specifications may play role specific agent 

benjamins fensel assumptions problem solving methods role knowledge engineering 
wahlster ed proceedings twelfth european conference artificial intelligence ecai john wiley sons pp 


brazier dunin keplicz jennings treur formal specification multi agent systems real world case 
lesser 
ed proceedings international conference multi agent systems icmas mit press menlo park vs pp 

extended version international journal cooperative information systems huhns singh eds special issue formal methods cooperative information systems multiagent systems vol 
pp 


brazier jonker treur principles compositional multiagent system development 
ed proceedings th ifip world computer congress wcc conference information technology knowledge systems knows pp 


brazier treur wijngaards willems temporal semantics compositional task models problem solving methods 
data knowledge engineering vol 
pp 


davis software requirements objects functions states prentice hall new jersey 

dijkstra discipline programming 
prentice hall 

dubois 

albert formal language supporting tools requirements engineering 

dubois du bois formal requirements engineering method real time distributed systems 
proceedings real time systems conference rts 

dubois yu petit early late formal requirements 
proceedings 
ieee computer society press 

engelfriet jonker treur compositional verification multi agent systems temporal multi epistemic logic 
mueller singh rao eds pre proc 
fifth international workshop agent theories architectures languages atal pp 

appear mueller singh rao eds intelligent agents lecture notes ai springer verlag 
press 
erdmann studer cases scenarios developing knowledgebased systems 
proceedings th ifip world computer congress wcc conference information technologies knowledge systems knows ed pp 


eriksson uml toolkit 
wiley computer publishing john wiley sons new york 

gero sudweeks eds artificial intelligence design kluwer academic publishers dordrecht 

gero sudweeks eds artificial intelligence design kluwer academic publishers dordrecht 

harmon watson understanding uml developer guide 
morgan kaufmann publishers san francisco 

jonker treur wijngaards formal knowledge level process model requirements engineering 
proceedings th international conference industrial engineering applications ai expert systems iea 
lecture notes ai springer verlag appear 

jonker treur compositional verification multi agent systems formal analysis pro activeness reactiveness 
de roever langmaack pnueli eds proceedings international workshop compositionality compos 
lecture notes computer science vol 
springer verlag pp 

sommerville requirements engineering processes techniques 
john wiley sons new york 

musen ontology oriented design programming new kind oo 
ed proceedings th ifip world computer congress wcc conference information technology knowledge systems knows pp 


nwana ndumu brief software agent technology 
jennings wooldridge 
eds agent technology foundations applications markets 
springer verlag berlin pp 


sommerville sawyer requirements engineering practice guide 
john wiley sons england 

pohl jarke scenarios system development current practice ieee software pp 
march april 

wooldridge jennings agent theories architectures languages survey 
wooldridge jennings 
eds 
intelligent agents lecture notes artificial intelligence vol 
springer verlag berlin pp 

