archival storage digital libraries arturo crespo department computer science stanford university mail crespo cs stanford edu propose architecture digital library repositories assures long term archival storage digital objects 
architecture formed federation independent collaborating sites managing collection digital objects 
architecture key components signatures object handles deletions digital objects functional layering services presence awareness service layers disposable auxiliary structures 
long term persistence digital objects achieved creating replicas sites 
keywords digital library repository archival longterm preservation data 
digital library repository dlr stores digital objects constitute library 
key requirements distinguish dlrs information stores archival storage intellectual property management 
archival nature dlr means digital objects documents technical reports movies preserved indefinitely technologies organizations evolve 
intellectual property management required digital objects served organization runs repository owns information 
means repository understand enforce intellectual property laws offer clients variety access payment options 
focus archival requirement 
interrelated factors archival digital objects data meaning preservation 
illustrate consider maya inscriptions 
read paintings preserved data preservation centuries 
second meaning decoded say english 
preserve meaning needs translation machinery lot guesswork hector garcia molina department computer science stanford university mail hector cs stanford edu case maya writings aids left course extremely hard provide advance 
translation done gradually continuously avoid spanning large differences representations translating 
focus data preservation 
admittedly simpler problems clearly data preservation step meaning preserved 
view digital object bag bits simple header information discussed 
concern object postscript file format document explains postscript interpreted aid preserving meaning postscript file object giving metadata postscript file author title 
wish preserve relationships objects 
develop identification scheme object point 
way instance metadata object just discussed identify postscript file describing 
problem definition reader may wonder solved problem 
database system reliably store objects relationships 
may true long compatible software manage objects true 
instance suppose stanford mit libraries wish store backup copies technical reports different database systems 
possible current systems tell stanford system object managed jointly mit 
similarly say stanford database vendor goes business years stanford decides vendor 
migrating objects problematic database systems typically represent reliable objects ways intimately tied architecture software 
goal architecture archival digital objects 
objective replace database systems allow existing systems preserving interrelated collection digital objects versions simplest reliable possible way 
keep mind describing lowest layer dlr higher layers discussed deal intellectual property metadata security 
section key components architecture long term archival feasible 
sections describe functional components architecture 
section complete example shows components 
section discuss related 
space limitations provide full details architecture explain failures situations handled 
focus explaining main features representative examples 
key components architecture digital library repository dlr formed collection independent collaborating sites 
site manages collection digital objects provides services defined sites 
site uses computers run different software long follows certain simple conventions describe 
architecture key components 
signatures object handles object dlr handle identify retrieve 
handles internal dlr users identify documents movies 
example user searching report stan naming facility discussed translate appropriate handle handles report multiple components 
object define handle large signature computed exclusively contents checksum cyclic redundancy check crc 
contents smaller size signature object creation time padded random string size larger size signature 
scheme properties important archival environment site generate objects handles consulting sites 
possible sites operate independently 
furthermore sites need agree signature function software versions character sets timestamp services 
handle object reconstructed object 
see extremely useful property need reliably save object mappings 
copies object different sites copies identical handles 
may disconcerting contents identical management simpler call spade spade objects different contents extremely high probability different handles 
item requires discussion may possible different objects share handle disastrous 
making signature large bits likelihood disaster happening extremely low rational worry 
illustrate appendix derive bound probability disaster dlr objects signatures size bits 
bound extremely conservative see say bit signature dlr objects incredibly safe 
collection probability signature size collisions size bits bytes bits bytes bits bytes bits bytes bits bytes bits bytes bits bytes bits bytes bits bytes bits bytes number bits required typical applications paranoid users need absolute certainty signature unique offer enhanced identification scheme 
handles extended fields unique publisher field signature object 
publisher field unique code site publishes object publisher code assigned site authority 
publisher field object change object migrates repositories 
second field signature described earlier 
site creates new object stores publisher field object header 
computes signature extended object checks local object signature 
extremely rare case conflict add discriminator random string bytes new object 
discriminator included computation signature object map different signature filtered object returned user 
handle object computed site reading publisher value adding object signature 
deletions handle scheme objects updated place 
contents object modified automatically new object different handle 
important advantage eliminates sources confusion 
instance correct typo report pass object 
provide higher level mechanisms tracking versions object see section similarly stored object corrupted due disk error corrupted object confused original 
fundamental rule architecture objects voluntarily deleted 
allowing deletions dangerous sites managed independently particular hard distinguish deleted object corrupted morphed needs restored 
ruling deletions natural digital library important keep historical record 
books burned removed circulation necessary 
provide analogous high level mechanism indicating certain objects provided public 
having immutable objects presents management challenges 
example say create new version object say video clip mark directly indicate new version accessed place update section show indirectly record changes 
course having deletions increases storage requirements 
believe important issue storage costs low archiving fashion library objects possible data 
layered architecture dlr site may implemented differently important defined simple possible site interfaces 
furthermore important clean interfaces services site different software systems implement individual components 
achieve architecture defining service layers site 
layers include 
object store layer object store layer uses data store file system database management system persistently save objects 
layer may scheme identify objects file names tuple ids 
refer local identifiers disk ids 

identity layer layer main functions provides access objects handles signatures ii provides basic facilities reporting changes objects interested parties 

complex objects layer manages collections related objects 
services maintain different versions representations document set scanned pages technical report 

reliability layer coordinates replication objects multiple stores long term archival 
assumption object store layer reasonable effort reliable storage counted keep objects forever 
upper layers provide mechanisms protecting intellectual property enforcing security charging customers various revenue models 
provide associative search objects metadata contents objects user access 
user access indexing security reliability identity layer object store data store user access indexing security reliability complex objects complex objects identity layer object store data store site site layers cellular repository 
illustrate layers dlr 
column represents site row software layer 
call implementation layer site cell andthe complete repository cellular dlr 
cells collaborate achieve goals 
example reliability cell site communicates reliability cell site cells reliability layer deal local site 
study grayed cells 
awareness awareness services standing orders subscriptions alerts important digital libraries 
important reliability indexing layers site backing aware new objects corrupted objects take appropriate action 
similarly maintain index date changes need propagated 
systems awareness services added afterthought base storage system developed hard detect changes 
architecture awareness services integral part layer 
possible build reliable awareness services replication indexing 
disposable auxiliary structures layers typically maintain auxiliary structures improving performance 
architecture structures designed disposable reconstructed underlying digital objects 
illustrate consider identity layer 
efficient lookup needs index structure maps handle signature local disk id file name 
option store index digital object making part dlr 
opens door inconsistencies 
instance index may say object handle disk id signature object disk id say auxiliary structures part dlr 
structures may secondary storage part dlr 
structures corrupted inconsistent dlr deleted reconstructed scratch 
addition avoiding potential inconsistencies approach easy migrate objects new store old obsolete 
auxiliary structures typically intricate migrated new system 
new system simply obtains digital objects builds structures implementation desires 
object store layer object storage layer lowest dlr layer 
layer treats objects sequence bytes uses local disk ids identify objects 
disk ids meaningful specific data store format varies data store data store 
example data store standard file system object saved different file disk id file name 
hand objects saved single sequential file disk id name file offset file length object 
object store interface interface object storage layer functions os get disk id read object disk id os put bag bits disk id insert new object repository return disk id associated 
os awareness list disk ids list disk ids 
function os awareness lets client perform scan entire collection 
awareness service envision 
simplicity easier implement object store robust 
awareness service higher layers lost state wish verify state 
building reliable system define desired events done far section undesired expected events koh 
events may occur failures recovery mechanisms higher layers handle 
layer undesired expected events include os get returning corrupted object ii os put failing insert object returning error iii os awareness returning disk ids objects inserted os put 
object store implementation having extremely simple interface deletes primitive awareness reduces number undesired events needs consider possible build store moving parts things break 
addition simple interface allows secondary storage system data store including legacy systems 
possible way build solid store supports interface consider design 
objects placed sequentially disk tape unique pattern separating 
disk id disk address byte 
list handles just scan disk sequentially looking special start object pattern 
deletes updates object scan object report 
auxiliary structures node tables free space tables structures corrupted 
migrate collection objects different site simply move single stream objects 
stress way build cell layer way expect built reliable repository 
identity layer object identity layer provides access objects globally unique handles provides awareness service handles attempts correct failures store cell 
addition layer adds class field objects awareness provided class basis 
logically partitions storage making possible example single identity cell service clients 
illustrates class field added object 
gray box represents bits identity cell storage 
cell adds class field possibly system data size object stores larger object represented larger rectangle 
unknown layer gray area may contain headers added higher layers thetype field discussed section 
analogous packets move network layers lower layers adding headers 
network layers lower layers remove headers returning object upper layers 
complete headers recorded data store preserved layer compute signature verify correct object 
course layer interprets headers lower higher layers 
class system data data structure digital object identity interface object identity layer implements functions analogous object store functions il put bag bits class handle creates object class returns global handle associated 
il get handle bag bits class gets object class handle 
il awareness class list handles returns handles objects class repository 
il latest class client list handles lists handles class created repository time invoked function 
put function create object 
function receives data class assume class simply fixed length string calls object store layer os put function save data secondary storage 
handle new object computed returned client 
get function returns object handle 
discuss function implemented 
il awareness class function lists handles objects class local store 
il latest class client function specialized awareness service 
explain detail operates intuitively reports objects created time client invoked function 
provided improve efficiency clients informed objects seen 
il latest rely auxiliary structures recording new objects seen clients reliable awareness function simply scans object store objects 
cgm discusses options implementing awareness service 
undesired expected behavior layer includes losing object ii il put returning error iii awareness functions returning required handles 
identity layer attempt probability undesired events low possible 
way check undesired events object store layer 
notice architecture significantly reduces number undesired events 
particular wrong object returned il get call trivially checked object matches requested handle 
similarly return deleted object deleted objects 
identity implementation ways implement il get handle function 
obtain disk ids object layer retrieve object turn compute signature find object signature matches requested handle 
second way having identity layer keep index mapping handles disk ids 
index initialized complete scan object store incrementally maintained new objects created 
il get handle function simply lookup disk id fetch object store 
notice index disposable discussed section 
matter fact implementation index periodically discarded rebuilt scratch ensure structures corrupted reduce likelihood undesired events layer 
similarly latest function uses auxiliary structures track objects seen client 
structure disposable 
periodically deleted order force clients general il awareness 
causes client check objects known re initialize auxiliary structure latest calls 
discussed earlier identity layer try handle undesired events lower cell 
specifically suppose identity layer servicing ail get handle call structures determined object disk id call os get disk id may return corrupted object identity cell check fetched object handle handle 
discrepancy identity layer reports object 
restore object service provided reliability layer discussed 
sure problem caused object store case auxiliary structure told id place look object incorrect 
complex object layer dlr multiple digital objects may interrelated 
example technical report may renditions plain ascii postscript word simple object 
similarly report may consist sequence versions representing state report time 
complex object layer implements useful constructs tuples version sets implementing higher level notions technical report access rights movie address details high level concepts implemented higher layers 
doc rdl propose specific organizations documents high level constructs 
traditional methods building complex structures dlr environment objects deleted modified 
instance implement set object containing pointers objects membership modified 
set represents renditions report mean new rendition added example 
schemes propose section allow structures evolve 
particular complex object cell interacts single identity cell components complex object assumed reside identity cell 
complex object may replicated site discussed section 
furthermore complex object cell restricts particular partition lower cell specific class value calls 
value set initially client complex object cell interface discuss 
complex object layer adds atype field objects hands identity layer 
field appear gray area 
type field record object layer 
complex object layer offers clients interface shown accessing objects analogous identify layer 
instance call put bag bits handled adding bits calling il put new bag bits class partition cell works 
type indicates object structural objects generated complex object layer 
tuples basis implementing complex object tuple structure 
tuple simply object containing ordered list object handles 
interface tuples list handles handle creates tuple containing handles passed parameters returns handle new tuple object 
handle list handles returns list handles tuple 
illustrates tuples 
tuple created contains handles objects 
represent ho 
second tuple 
notice create tuple ho different 
tuple tuple tuple tuple base data base data base data tuple object object object versions versions way implementing updateable objects environment direct updates allowed 
versions update object creating new version 
versions support functions name handle creates new version object data returns handle 
update handle new version creates new version object handle 
read handle list handles returns list handles current version object 
versions handle list handles returns list versions object 
handle name returns create version object 
illustrates versions implemented tuples 
object object anchor sequence versions 
version recorded object 
list handles contains handle anchor version object handle object constitutes version handle previous version 
initial version handle null 
upper tuple object records second version 
notice objects updated version chain goes earlier version 
anchor version object identifies chain contain list versions 
need update new versions generated 
structure created sequence calls name string sample 
returns anchor 
name extended random string unique stored 
name simply comment identifier 
update handle version 
update second version 
read latest version ofv read returns handle 
example single latest version discuss section replicating chain sites may lead multiple latest versions 
version object sample version current tuple tuple version document versions base data object base data object update read versions functions need determine latest version anchor 
done indirectly 
way scan tuple objects looking anchor referenced tuples latest versions 
way build disposable structure maps anchors member objects 
structure built scanning tuple objects incrementally maintained new update calls 
design ensures disposable structure essential long term survival dlr 
record version chain ended inaccessible generate new version points object 
update call refuse create new versions final 
define object indicate different semantics version chain frozen accessed 
summary version objects provide mechanism updating deleting dlr information 
mechanism builds immutable objects provides reliable long term storage 
sets structures implemented similar fashion 
example illustrates set objects implemented 
member tuple points set anchor type set actual member object 
interface sets may include functions set member tuple sample object set tuple base member set members object base data data set name handle returns handle empty set set name 
handle set name returns set name set handle 
set handle handle inserts member set 
member set handle obj handle boolean returns true handle member set set handle 
additional functions sets union intersection difference discussed 
versions set membership determined scanning objects looking set anchor 
disposable structures implemented process efficient 
discuss section sets replicated different sites may temporary inconsistencies regarding membership 
reliability layer replication layer copies objects site order increase probability objects persist extremely long times 
achieved establishing replication agreements multiple sites mutually maintain replicas objects replication group 
example reliability layer site establishes replication agreement site objects group time object belonging created sites copy propagated site 
note agreements multilateral members responsible backing objects members 
reliability layer adds header fields objects hands lower layers storage 
group field records replication group object belongs sets desired level replication 
group selected client creates object place 
second field distinguish objects represent agreements 
replication agreement recorded version complex object 
field set true group field set identifier group 
content list identifying sites participating agreement 
agreement changes new version generated new participants fields 
note objects version agreement group group 
backed participating sites 
note replication functions describe migrate collection site site adding replication group dropping 
reliability interface interface reliability layer includes functions rl gr hdl creates new replication agreement identified returned gr hdl handle 
handle group identifier object group 
rl participants site list gr hdl list set participants group gr hdl 
interface includes functions complex object interface 
functions create objects additional parameter gr hdl added indicate replication group belong 
awareness functions extended objects belonging replication group requested 
implementation rl call received reliability cell simply calls receiving group identifier 
update called create initial version agreement 
field set true field set tog contents empty set sites 
result call isg client create objects class 
dlr administrator issue arl participants call record participating sites 
call issued participating sites site immediately propagate news sites 
call generates new version agreement version chain anchored byg containing new list participants 
agreement place replication layer enforce variety ways 
illustrate simple way assuming replication cell actively ensuring replication cell copies group 
perform similar process concurrently 
periodically requests complete list handles corresponding object 
comply cell uses lower awareness services get object handles storage partition forwards group cell performs similar scan site compares handles 
handle seen locally object copied 
cell asks cell create new identical object 
object may existed may corrupted 
similarly object missing locally requested created local site 
note asked replicate objects complex type reliability layer creates shallow duplicates 
example suppose version object created version say postscript technical report 
assume objects defined group 
version created updated report reason group defined beg 
site receive version report second 
ensure complex object fully replicated components group 
note auxiliary tuple objects created complex object layer replication group field generated implicitly complex object layer 
objects need replicated part complex structure participate 
achieve replication implicitly assume replication group tuple object union replication groups base objects points 
stored replication agreement reliability cell remember agreements case problems 
consider sample problems illustrate 
scope detailed case case failure analysis 
fist scenario reliability cell fails participating loses state latest agreement lost local site 
cell restarts scanning local site objects field set eventually finding latest version agreement point resumes backup participants 
lost failure reconstructed participants 
second scenario say cell recovers record agreement locally 
cell assumes cell knows local site partition class agree advance say fixed ports local layer interfaces default fixed class 
information classes saved default 
know participating ing 
sites hopefully active realize lost objects restore 
agreement group restored 
eventually realizes agreement participating resumes activity 
cell needs periodically scan local object ensure accurate information 
third scenario latest version agreement lost older version survives 
recovers starts activity date list participants 
may cause temporarily sites contain replicas may cause send object copies sites longer participants 
latest version agreement eventually anda eventually operate correctly 
emphasize damage done scenario creation non needed replicas sites dropped agreement 
un needed copies may waste space way compromise objects stored 
reliability layer guarantees epidemic propagation copies 
look object group extremely high sites 
may periods time missing sites copy corrupted take sequence failures disappear sites 
note notion distributed commit object committed created site probability long term existence increases copies propagated 
fact objects immutable simplifies protocol increases chances works correctly 
particular danger distributed copies inconsistent client creates may wish know replicated knows reached extreme safety mode 
add function reliability layer checks object sites 
complex objects group get replicated copies converge 
sites may temporarily incomplete information view strict inconsistency 
example site may think technical report available ascii postscript site may think available ascii word 
information encoded set eventually sites know formats 
complete example section give example layers described previous sections 
example repositories containing technical reports anchor version chain created group existed 
versions ing group sufficient reconstruct latest version 
stanford mit 
sites replication agreement objects belonging replication group suppose upper cell stanford wants publish technical report stanford 
publisher anticipates version document may generated decides version complex object 
sake simplicity assuming version technical report just object 
publisher asks reliability cell stanford create new version object belonging replication group recall version object contain data technical report save data version 
reliability layer calls complex object layer function 
turn complex object cell generates version object saves calling identity cell calls object store cell 
result calls reliability layer obtains handle version object creating version object client ready generate version technical report 
client creates technical report object tr calling function reliability cell stanford 
reliability cell sets group field asks lower layers save report 
creating tr client tr version calling function reliability layer 
reliability layer pass request complex object layer generate object containing pointer tr previous version null pointer case version 
right show state stanford site moment mit repository empty 
version object tr version stanford tr version object tr version mit repositories replication 
tr replication agreement mit stanford objects technical report group mit stanford reliability cell try enforce agreement querying reliability cell awareness algorithms finding newly created objects tr andv missing mit site 
described section simple way doing query il awareness function obtain handles site compare handles handles site 
efficient way doing query il latest function find handles added repository time visited 
efficient awareness algorithms outside scope 
finding handles missing objects replication process create replicas objects mit site 
moment content repository shown 
showing reliability agreement object assuming created earlier 
note point synchronization problem concurrently add new versions mit stanford 
illustrates showing state stanford generated version tr independently created version tr 
replication process copies new objects sites multiple latest versions shown 
call read return tr tr 
view application problem intention multiple current versions report stanford mit versions jointly authored 
intention report creation layer ensure author time creates new versions report 
type sequencing enforced synchronization service discussed 
version object tr tr tr tr version version version object stanford mit tr tr tr tr version version new versions created stanford mit 
return state repository suppose stanford repository failure completely destroys information 
failure reliability process stanford recover data reliability agreement objects indicate replicas lost 
time reliability cell mit visit stanford find objects including replication agreement objects lost stanford 
reliability cell mit restore objects potentially allowing replication cell stanford start recovering destroyed digital objects 
tr tr version related version object tr tr version stanford mit inconsistent state 
tr tr version architectures proposed implemented digital libraries arm kw 
architectures focus interoperability distribution directly concerned problem long term reliability 
secondary device level petal lee lt frangipani tml projects designed highly available scalable block level storage systems easy manage 
availability system achieved data striping redundancy 
projects consider problem long term data reliability aim file system replacement 
allow place updates deletions application generated filenames handles 
business world cold systems successful solving problem long term archiving data frequently accessed 
cold acronym computer output laser disk 
cold systems originally designed replace archival applications online computer systems 
typical cold system captures output computer program stores 
typically storage media cd roms types storage media magnetic disks raid magnetic tape re writable laser disks cd rom 
cold system monolithic computers running exactly software different environment consider 
storing data write cold device forces data immutable design 
cold systems assume persistent storage available write device structures 
assume dlr storage immutable 
systems software layering proven effective especially area networking 
specifically open system osi provides detailed standard divides network layers clear responsibilities ste 
studied architecture long term archival storage digital objects 
argued build simple powerful archival repository signatures object handles allowing deletions having awareness services layers disposable auxiliary structures 
suited heterogeneous evolving environment site needs agree simple interfaces signature computation function simple object harder structure type group fields 
sites may auxiliary structures need agree details 
node tables clocks inconsistent indexes cause lose corrupt information 
objects deleted modified place sources confusion eliminated yielding extremely safe dlr 
migration information obsolete site new simple performed replication services 
acknowledgments early ideas papers developed talks jerry saltzer 
want carl lagoze useful suggestions 
arm 
william arms 
key concepts architecture digital library 
lib magazine july 
www cnri reston va home dlib july arms html 
cgm 
arturo crespo hector garcia molina 
awareness services digital libraries 
lecture notes computer science 

demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database maintenance 
operating systems review january 
doc 
document management alliance 
dma specification draft january 
www org dma 


computer output optical disk application 
proceedings seventh annual conference optical information systems pages july 
koh 
kohler 
survey techniques synchronization recovery decentralized computer systems 
computing surveys june 
kw 
robert kahn robert wilensky 
framework distributed digital object services 
technical report tn national research initiatives cnri may 
www cnri reston va home cstr arch html 
lee 
edward lee 
highly available scalable network storage 
compcon 
lt 
edward lee thekkath 
petal distributed virtual disks 
asplos 
rdl 
jr ron daniel carl lagoze 
extending warwick framework metadata containers active digital objects 
lib magazine november 
www dlib org dlib november daniel daniel html 
ste 
richard stevens 
unix network programming 
prentice hall 
tml 
thekkath timothy mann edward lee 
frangipani scalable distributed file system 
sosp 
appendix probabilityof having signature collision different objects assigned signature depends size collection number bits signature 
insert document probability having collision documents collide second document probability having collision possible signatures generated create collision 
general inserted documents probability document create collision 
assume signature function uniformly distributes documents signature space computation signature document independent probability collision collection documents 
bn equation impractical large numbers factorials produce overflow 
qn derive approximation making qn taylor expansion exponential function 

qn fore pn pn approximate 
