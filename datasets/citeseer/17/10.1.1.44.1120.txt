testing log file analysis tools methods issues james andrews dept computer science university western ontario london ontario canada andrews csd ca large software systems keep log files events 
log files analyzed check run program reveals faults system 
discuss log files software testing 
framework automatically analyzing log files describe language specifying analyzer programs implementation language 
language permits compositional compact specifications software act test oracles discuss efficacy oracles unit system level testing various settings 
explore methodological issues efficiency logging policies scope limitations framework 
conclude testing log file analysis constitutes useful methodology software verification current testing practice formal verification methodologies 

clear aspects desired behaviour software formal specifications 
clear specifications connected actual programs automated way practical software engineering purposes 
formal verification development methods assume languages defined semantics consider defined subsets languages 
programs today developed languages defined semantics 
languages formally reliably predict observables program outputs program code observables get hold obtained individual runs program 
observables valuable 
programmers depended order test debug programs established practical testing techniques 
particular value kind output file generally referred debug file log file 
file records events inputs outputs values variables parameters returns function calls sequentially program running 
programmers inspect log files identify diagnose problems code 
may refer practice informal log file analysis 
way formal methods help program testing log file analysis naturally suggests 
specify program log log file 
concurrently formally specify format acceptable log file 
run program repeatedly different inputs see log files meet specification doing formal log file analysis 
cases correct error re run 
explores tools methods doing testing log file analysis issues arising doing 
section gives summary formal framework log file analysis 
defines notion log file analyzer state machine concepts discusses prototype implementation 
sections study examples framework unit testing system testing respectively 
section discusses issues development methodology avoidance false negatives positives logging turned 
section explores advantages scope limitations framework 
section discusses related section gives prospects 

analysis framework section summarize framework log file analysis detail 
give definition format log file 
argue appropriate useful form formal log file analyzer set par state machines making transitions lines log file define log file analyzer informally way 
describe textual language specifying log file analyzers prototype implementation language 

log files simplicity impose restrictions format log files 
keyword sequence alphanumeric characters underscores lower case letter 
string sequence characters enclosed double quotes 
number real number standard ascii representation 
log file line sequence keywords strings numbers keyword separated blanks terminated new line character sequence 
log file sequence log file lines 
left hand side shows part log file hypothetical program tasks control heater room compare 
program gets input seconds digital thermometer message form temp time room temperature degrees celsius reported 
program supposed switch heater temperature drops switch soon temperature rises reports events log file messages form heater heater 
note log file conform informal specification heater turned seconds temperature returned 
necessarily obvious inspection 
possible check log file simple grammar 
things straightforward complex log files 
right hand side example 
system controls temperature room tasks involve allocation deallocation memory 
system reports call functions malloc free aid detecting problems memory leaks 
result separate threads log file reports arbitrarily interleaved 

log file analyzers considerations section suggest view log file analyzer set parallel state machines state machine analyzing thread events reports errors transitions taken 
statecharts formalism view allows parallel components expressed succinctly state space explosion builds fairly simple intuitive model computation state machines define log file machine consisting ffl identifying name ffl possibly infinite set machine states defined subset defined final states ffl set log files lines machine notices ffl transition relation source states log file lines destination states may source state 
informally log file machine processes log file follows 
starts initial state reacts line log file sequence 
line machine notices discards line stays state 
notice line transition line destination state transition possible stays state reports error 
log file machine final states reports error 
formal presentation appears 
example see 
shows log file machine named accepts correct log files heater monitor specification 
correctly accept log file left transition state line log file 
notices lines form temp heater heater 
usual conventions depicting state machines final states indicated double circles initial state indicated small arrow conditions transitions appear square brackets 
log file analyzer consists possibly infinite set log file machines process log file parallel 
typically machine analyzer notice different possibly disjoint set log file lines union sets lines noticed cover lines expect log file 

language specifying analyzers notion log file analyzer concrete syntax specifying analyzers 
developed simple language referred log file analysis language doing 
upper level syntax fairly straightforward syntactic representation state machines machine specify name initial final states transition relation 
analyzer specification sequence machine specifications 
transition relation specified clauses source destination triggering line individual transitions possibly limiting conditions 
example consider log file machine 
temp temp temp heater temp temp temp heater temp temp malloc temp malloc malloc heater temp temp free heater temp 
left simple log file 
right complex log file 
heater heater temp temp temp temp 
log file machine heater monitor system 
machine initial state temp temp heater temp temp heater final state 
machine ptr initial state malloc ptr alloc alloc free ptr final state 

definition log file machines log file analyzer language 
specified machine left 
syntax names states log file lines represented order terms keywords strings numbers variables keywords function symbols 
variable sequence alphanumeric characters underscores uppercase letter 
log file line represented term language instance line temp represented term temp 
note variable match current temperature read log file 
similarly declaration final state effect declaring state final state term match variable 
right specification class log file machines named ptr variable ptr replaced term 
term notices lines form malloc free changes state alloc back depending deduced pointer block memory currently allocated unallocated 
fact allowed final state signifies log file run block memory allocated freed 
log file analyzer specification consisting specification plus specification accepts correct log files format shown right 

implementation developed prototype implementation form translator auxiliary library 
implementation write analyzer translate compile translated program executable oracle run log file interest 
oracle displays report stating log file conforms specification explaining 
target programming language translation prototype prolog 
modern implementation prolog compile source efficient executable code 
transition condition defined prototype language simply prolog goal programmers may include prolog program text order provide auxiliary definitions conditions 
recall analyzer may consist infinite class log file machines 
may pose implementation difficulties practical purposes 
time typically finite number machines analyzer non initial states need represent internally machines 

unit testing log file analysis section explore log file analysis unit testing 
take example testing object class implements simple dictionary data structure 
class contains methods adding deleting finding information associated keys 
key appear dictionary 
wide variety approaches implementing dictionaries 
task face testing class correctness confirm key added twice key deleted having added keys dictionary added deleted 

traditional approaches traditional practical approach testing class follows 
write test harness program creates instance object class calls object methods sequence test cases 
run harness test cases evaluate output visually harness code 
traditional approach suffers problems 
evaluating harness output visually tedious errorprone 
evaluating output harness requires write duplicate dictionary class comparison purposes 
duplicate dictionary class may erroneous inefficient may interact class test undesirable way 
hoffman address problems classbench framework harness moves object small easy check subset potential state space full empty keys odd keys checking results point subset 
unfortunately general approach interferes selection test cases may allow satisfy functional structural boundary coverage criteria 

log file analysis approach approach log file analysis adapted traditional approach follows 
ffl construct test harness program logs results method call 
call write log file line form method key result method add delete find key key question result succ fail 
ffl run harness test cases see discussion 
ffl compile run log file analyzer log files produced 
ffl errors correct iterate 
log file analyzer describes succinctly situations key dictionary situations various methods succeed 
important need mention equal number cases errors reported 
compiled analyzer handle 

discussion specification analyzer taken formal specification behaviour dictionary class algebraic approaches 
analyzer testing specific package standard implementation class judged regardless source language implementation 
note log file analyzer free explore automated non automated methods running test cases randomized testing testing satisfy coverage criteria generation test cases formal specification 
limited analysis chosen log 
approach unit testing scale 
inherent barrier testing larger complex units 
instances similar techniques decade specific domain conformance testing communications protocol software specifications units large complex 
see analyzer test implementations osi protocol 

system testing log file analysis consider log file analysis systemlevel testing testing software systems properties tested level individual module object class 
consider library system processes checking checking books management charges things 
example system level requirements want check borrower returns book book shall barcode scanned book shall 
borrower returns book late shall charged current late charge day times number days book late 
able check unit testing system satisfies requirements example barcode scanning late fee charging book status code may separate modules 
furthermore may hundreds requirements requirements document typical library system 

log file analysis approach possible approach problem log file analysis follows 
add system kinds entries log file 
ffl checkin barcode book barcode scanned returned 
ffl checkout record barcode borrower duedate immediately book barcode returned giving information checkout book 
ffl charge borrower amount borrower charged amount overdue fines 
ffl barcode status status status book changes 
run system test cases run resulting log files log file analyzer containing machine 
analyzer machine book return moves simple sequence parameterized states track effects book return borrower charged fine accruing book 
note charging fine book done order machine processing states 
requirements handled may repeated times course building complete log file analyzer checking systemlevel requirements 
new requirements added typically fewer additional events logged log file entries re checking requirements 

discussion seen simple example system testing log file analysis heater monitor program memory leak checking 
checking global properties program necessarily checked unit testing memory allocation done units 
strengths log file analysis approach uniformity illustrated similarity structure unit level system level log file analyzers 
note move system testing necessary remove logging code may remain machine key key initial state add key succ delete key fail find key fail add key fail delete key succ find key succ final state 

log file analyzer checking dictionary object 
machine book return barcode initial state idle idle checkin barcode returned returned checkout record barcode borrower duedate current date today today duedate processing borrower fine amount fine day amount today duedate returned checkout record barcode borrower duedate current date today duedate today processing borrower done processing borrower fine amount status charge borrower amount processing borrower done status processing borrower fine barcode processing borrower fine final state borrower done 

log file machine testing library system requirements 
assembled units unit testing 
log file lines generated logging code interspersed log file lines unit testing machines appended machines system produce analyzer confirms unit level system level tests 

methodological issues discuss issues methodology testing log file analysis 
concentrate main groups issues concerning logging policies concerning false negative positive results concerning called probe effect logging may interfere software test 

logging policies instrumentation program verification methodology describing partly formal partly informal 
formal part analyzer specification informal part policies followed writing lines log file 
presence informal part means methodology rigorous formal verification argue loss rigour significant practice 
simple log file analysis done part personal software process individual tester need explicit logging policies 
reliance log file analysis increases software development organization logging policies stated clearly explicitly design documents 
consider text hypothetical design document heater monitor immediately receiving report current temperature system log line form temp temperature received degrees celsius 
reader may agree difficult misunderstand text easy review implementation meets design criterion inspecting code near message handling code 
software development organizations implement form document review procedure maximize reliability reviews logging code integrated existing procedures 
instrumentation code perform logging normally done hand logging policies straightforward possible instance log inputs outputs changes key internal variables parameters return values key procedure calls 
instrumentation errors serious distributed debugging errors caught log file analysis failures happen complementary errors analyzer specifications see section 
logging policy may seen informal link implementation formal part methodology 
log file analysis decreases risk informal specifications simplifying informal link tools directly developers 

false negatives false positives verification method formal informal guard possibility false negatives programs judged incorrect correct false positives converse 
discuss possibilities log file analysis 
main reasons log file analyzer may accept log file ffl analyzer specification may incorrect 
ffl logging policy may incorrect 
ffl implementation may implement logging policy correctly 
ffl implementation may functionally incorrect 
degree false negatives 
log file rejected users keep mind situations may case correction error may require changes analyzer logging policy logging code non logging code 
serious problem false positives 
log file accepted analyzer necessarily mean run reveals errors 
complementary errors implementation se instrumentation implementation logging policy analyzer specification cancel 
thorough system document reviews see section incorporating analyzer specification logging policy logging code mitigate risk false positives 

efficiency probe effect probe effect effect test harnesses behaviour system test 
obviously want minimize probe effect possible 
log file analysis deal main kinds probe effects efficiency recompilation 
section discusses tradeoffs probe effects 
may feasible logging code remain production software 
main reason efficiency logging involves expensive write operations typically disk log files disk may take valuable space 
radical solution problem recompile software production way compile logging code 
clients insist correctly delivered production code exact code tested 
recompilation different manner may exacerbate subtle bugs due word alignment problems 
maker studied informal logging software 
suggests possible solutions paradox 
global boolean variables may set compile time run time cause logging routines output assembled message internal circular buffer 
allow logging code remain production cutting inefficiency 
price remaining compute time inefficiency 
may satisfactory cases 
efficiency gains processors may feasible past 
pine mail client instance allows users set debug level highest level produces output log file 
presumably means users running software day frequently tests value integer decide perform logging 

scope limitations section summarize advantages see methodology testing log file analysis 
explore limitations summarize scope methodology 

advantages main advantages methodology see 
ffl formal log file analysis allows achieve greater level rigour testing practice requiring programming language rigorous semantics fact applicable programming languages capable file input output 
ffl casts formal specifications form relatively simple state machine agents analyzers process concrete computational artifacts log files 
analyzers compositional concatenation analyzers performs functions components apply uniformly levels testing 
ffl adds significantly disturb current practice testing 
ffl appears flexible extent application instance single individual large organization unit system testing small number simple properties avoidance memory leaks large number complex properties system safety properties checked 

limitations formal methods point view methodology fails verify program confirms denies particular runs program reveal faults 
inherent failing software testing inevitable fate long keep languages packages operating systems ill defined semantics amenable formal verification 
related objection fact possible confirm deny program property want specify 
certainly true temporal properties involving eventually infinitely operators instance log file give finite snapshot portion run program 
techniques dillon graphical interval logic appropriate application testing require rigorous languages 
logging policy includes log input output confirm deny static input output properties program individual runs 
simple state machine structure analyzers appear limitation 
analyzer possibly infinite set machines may infinite number states theoretically allowing fully simulate programs test 
point view methodology disadvantage requiring programmers testers learn new language construct carefully logging code add programs 
plan study possible alternatives view maximizing acceptability 
guarantee log file reports faithfully efficiently behaviour program 
discussed limitations sections 

scope preceding discussion suggests log file analysis best environments properties 
ffl higher reliability greater rigour testing desired 
ffl programmers familiar state machine concepts pattern matching languages prolog able learn 
ffl leeway experiment new elements development methodology 
ffl real time performance constraints heavy risk removing compiling logging code deemed low 
speculate properties obtain 
wish explore ideas joint university industry research project getting way 

related log file analyzer seen specification test oracle system test 
appropriate compare test oracles 
researchers worked generating test oracles formal specifications 
specifications oriented describing behaviour system purposes model checking formal verification 
luckham particular deal specifically anna extension ada includes specification text describe tools transform anna program auto detects errors falls debugger detected 
contrast proposed direct specification essentially test oracles order reduce conceptual complexity task 
formal specification program handle problem mapping name space program name space specification 
proposed language independent methodology programs instrumented generate distinguished outputs log files trivial name space mapping oracle 
deal verification tracking internal implementation details memory allocation task difficult formal specifications generating log file output 
customized test oracle specifications application areas protocol testing 
report scheme estelle specifications translated pascal oracles 
seen generalization formal definition techniques 
log files debugging distributed software systems long history 
bates wileden deal questions filtering logged output clustering lowlevel events higher level events 
researchers extend deal issues detection specific error classes automatic instrumentation program code debugging output deterministically re execute programs sophisticated filtering presentation debugging output 
focus user instrumentation code general formal analysis log files independent source language informs user errors detected 
ideas earlier timestamps merging logging data different processes essential extend distributed systems 
tasks perform log files performed assertion code programs 
maker rosenblum practical programming assertions relevant 
note tasks involve coordination arbitrarily large amount data memory leak checker assertions program code may involve extra programming greater risk probe effects 
chechik gannon consider programs annotated expressions symbolic language related scr style specifications 
annotations comparable write statements needed produce log file put conditions states variables result general technique formal program verification 
requires information source code structure obtained tools gnu compiler concerned techniques analyzing log files produced programs regardless source language 

described tools automatic formal analysis log files studied methodology applying associated issues 
software specifications write tools relatively compact compositional applicable uniform way unit system level testing independent source language software test directly usable verifying test runs 
conclude testing formal log file analysis potentially useful methodology obtaining greater software reliability practical settings 
uses formal components analyzers informal components logging policies level rigour sits formal verification development traditional methods 
embarking project industrial partners study ideas 
plan study current practices log file identify technologies build log file analyzer language plan study log file analysis pilot project order refine methodology identify tradeoffs improve tool support 
study log file analysis wider areas testing distributed systems 

acknowledgments martin phil maker jeff joyce hughes aircraft jack morrison sun bos product assurance wong ibm toronto informal discussion log files respective organizations projects 
ideas reported formulated author working project university british columbia hughes aircraft canada limited systems division macdonald mda 
especially richard yates mda discussions concerning ideas 
mike phil gray dan hoffman jeff joyce hanan phil maker gail murphy helpful comments suggestions 
project financially supported bc advanced systems institute mda 
author currently supported nserc startup faculty science university western ontario 
andrews 
practice log file analysis 
technical report department computer science university western ontario may 
anonymous 
pine information center 
home page pine software pine development team 
url www washington edu pine 
bates wileden 
approach high level debugging distributed systems 
acm sigplan notices august 
beizer 
software testing techniques 
van nostrand reinhold new york edition 
brown ii 
automated oracle software testing 
reliability june 
chechik gannon 
automatic verification requirements implementation 
proceedings international symposium software testing analysis issta 
dillon kutty moser melliar smith ramakrishna 
graphical interval logic specifying concurrent systems 
acm transactions software engineering methodology april 

automating formal specification 
tapsoft th international joint conference theory practice software engineering april 

frankl 
astoot approach testing object oriented programs 
acm transactions software engineering methodology april 
harel 
statecharts visual formalism complex systems 
science computer programming 
luckham 
debugging ada tasking programs 
ieee software march 

specifying software requirements complex systems new techniques applications 
ieee transactions software engineering se january 
hoffman 
classbench framework automated class testing 
software practice experience may 
joyce slind unger 
monitoring distributed systems 
acm transactions computer systems 
falk nguyen 
testing computer software 
van nostrand reinhold new york edition 
kunz black taylor basten 
poet independent visualizations complex executions 
computer journal september 
luckham sankar takahashi 
dimensional pinpointing debugging formal specifications 
ieee software january 
maker 
improved support assertions logging 
technical report school information technology northern territory university darwin nt australia september 
mcdowell helmbold 
debugging concurrent programs 
acm computing surveys december 
malley richardson dillon 
efficient specification oracles critical systems 
proceedings california software symposium 
peters parnas 
test oracles generated program documentation 
proceedingsof international symposium software testing analysis 
richardson aha malley 
specification test oracles reactive systems 
proceedings th international conference software engineering melbourne australia may 
rosenblum 
practical approach programming assertions 
ieee transactions software engineering january 
sankar goyal 
software testing algebraic specification test oracles 
technical report csl tr computer systems laboratory stanford april 
sannella tarlecki 
formal development programs algebraic specifications implementations revisited 
acta informatica 

tai carver 
ada programs deterministic execution 
ieee trans 
softw 
engineering january 
von zhao 
trace analysis conformance arbitration testing 
ieee transactions software engineering november 
