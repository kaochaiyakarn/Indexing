lazy depth search linear graph algorithms haskell david king john launchbury department computing science university glasgow jl dcs glasgow ac uk depth search key wide variety graph algorithms 
explore implementation depth search lazy functional language 
time languages obtain linear time implementation 
go 
traditional imperative presentations algorithms constructed individual components may reused create new algorithms 
furthermore style program quite amenable formal proof exemplify calculational style proof strongly connected components algorithm 
graph algorithms long challenge programmers lazy functional languages 
clear express algorithms side effects achieve efficiency 
example texts provide implementations search algorithms quadratic size graph see paulson harrison compared standard linear implementations imperative languages see manber 

implement variety algorithms depth search dfs obtaining linear time efficiency 
importance depth search graph algorithms established years ago tarjan hopcroft tarjan seminal title extension tarjan original 
demonstrated depth search skeleton build efficient graph algorithms 
particular code fragments relevant particular algorithm embedded dfs procedure order compute relevant information search proceeds 
quite elegant number drawbacks 
firstly dfs code intertwined code particular algorithm resulting opaque programs 
secondly reasoning algorithms dynamic process discussion value reasoning complex 
occasionally depth forest provide static intermediate value reasoning 
build idea 
having explicit depth forest reasoning long overheads unacceptable programming 
particular wide variety dfs algorithms combinations standard components passing explicit intermediate values 
doing gain far greater degree modularity usually implementations algorithms retaining standard complexity measure 
place need destructive update order gain complexity constant factor imperative graph algorithms assuming underlying ram machine 
advances lazy functional languages provide updatable state implemented glasgow haskell compiler 
compiler provides extensions language haskell hudak providing updatable arrays allows state actions encapsulated external behaviour purely functional 
consequently obtain linear algorithms retain ability perform purely functional reasoning reusable component 
summary main contributions ffl provide implementations dfs algorithms linear time haskell 
done lazy functional language careful provide real code avoid resorting pseudo code 
ffl construct algorithms reusable components providing greater level modularity typical presentations 
ffl provide examples correctness proofs 
proofs reason dynamic process dfs static value 
organised follows 
section introduces data type graphs standard functions subsequent algorithms 
section introduces depth search 
section describes haskell implementation algorithms depth search includes topological sorting strongly connected components 
section describes linear implementation depth search haskell 
section describes complex algorithms depth search including edge classification biconnected components 
section discusses complexity algorithms 
section discusses related 
representing graphs ways represent directed graphs 
purposes array adjacency lists 
array indexed vertices component array list vertices reachable single edge 
adjacency structure linear size graph sum number vertices number edges 
indexed structure able explicit sharing occurs graph 
alternative recursive tree structure rely cycles heap 
sharing nodes graph implicit making number tasks harder 
just standard haskell immutable array 
gives constant time access update arrays may shared arbitrarily 
mechanism represent undirected graphs simply ensuring edges directions 
undirected graph symmetric directed graph 
represent multi edged graphs simple extension consider 
graphs may thought table indexed vertices 
type table array vertex type graph table vertex type vertex may type belonging haskell index class ix includes int char tuples indices 
haskell arrays come indexing 
functions indices returning list indices bounds returning pair greatest indices 
provide vertices alternative indices returns list vertices graph 
vertices graph 
vertex vertices indices convenient extract list edges graph done function edges 
edge pair vertices 
type edge vertex vertex edges graph 
edge edges vertices manipulate tables including graphs provide generic function mapt applies function argument table index entry pair builds new table 
mapt vertex 


table 
table mapt array bounds indices haskell function array takes low high bounds list index value pairs builds corresponding array linear time 
array implementation need provide pair vertices array bounds 
convenience define type bounds vertex vertex mapt define outdegree graph 
table int outdegree mapt ws length ws builds table detailing number edges leaving vertex 
build graph list edges define 
bounds 
edge 
graph bnds es accumarray flip bnds es array haskell function accumarray builds array list index value pairs difference accumarray accepts possibly values indexed location combined function provided accumarray argument 
simply build lists values associated index 
constructing array takes linear time respect length adjacency list 
linear time convert graph defined terms edges vertex table graph 
example graph produce array representation graph shown 
find immediate successors say compute graph haskell uses assoc type equivalent introduces unnecessary new notation 
directed graph returns 
combining functions edges gives way reverse edges graph giving transpose graph graph 
graph bounds graph 
edge edges extract edges original graph reverse direction rebuild graph new edges 
example graph return 
immediately define indegree table vertices indegree graph 
table int indegree outdegree depth search depth search viewed process may loosely described follows 
initially vertices graph deemed unvisited choose explore edge leading new vertex 
start vertex explore edge leading new vertex 
continue fashion reach vertex edges leading unvisited vertices 
point backtrack continue latest vertex lead new unvisited vertices 
eventually reach point vertex reachable initial vertex visited 
unvisited vertices left choose search vertex visited edge examined 
depth forest graph concentrate depth search specification value spanning forest defined depth traversal graph 
forest graph depicted 
solid tree edges graph edges lead unvisited vertices 
remaining graph edges shown dashed lines 
edges classified relationship tree forward edges connect ancestors tree descendants back edges reverse cross edges connect nodes forest right left 
standard classification useful thinking number algorithms section give algorithm classifying edges way 
specification depth search approach dfs algorithms explore manipulate depth forest explicitly step construct depthfirst forest graph 
need appropriate definition trees forests 
forest list trees tree node containing value forest sub trees 
trees forests polymorphic type data may contain 
data tree node forest type forest tree depth search graph takes graph initial ordering vertices 
graph vertices initial ordering returned forest 
dfs graph 
vertex 
forest vertex function pivot 
restrict considering properties leave haskell implementation section 
initial ordering vertices important 
case related function dff graph 
forest vertex dff dfs vertices properties depth forests 
completely characterised conditions 
depth forest graph spanning subgraph vertex set edge set subset graph edge set 
ii graph contains left right cross edges respect forest 
find convenient talk terms paths single edges path zero edges joined 
write gamma 
mean path graph confusion drop graph subscript 
ban left right cross edges translates paths 
top level implies path vertex tree vertex tree occurs forest 
property ts dff ts gamma 
deeper tree forest paths traverse tree left right absence graph edges cross tree structure left right implies path follow tree structure 
property tree node ts subtree occurring dff ts gamma 
gamma 
notation ts indicate division list trees forest order trees preserved 
note ts empty 
indicate list membership purely set membership 
way get ancestor point forests contain combined left right cross edge 
path property pick focusses dfs provides relationship initial order structure forest property vertices 
write gamma 
edges graph ordering induced list vertices vs dfs vs gamma 
gamma 
gamma 
gamma 
property says vertices occur single depth tree taken forest predecessor respect gamma 
occurs earlier vs predecessor 
case different trees 
earliest predecessor predecessor tree rooted predecessor 
properties certainly true dfs spanning forests claim completeness 
useful properties derivable 
depth search algorithms algorithm 
depth search numbering having specified dfs partly turn consider may 
algorithm straightforward 
wish assign vertex number indicates vertex came search 
number algorithms depth search number including biconnected components algorithm appears example 
overload notation mean occur tree express depth ordering graph simply flattening depth forest preorder 
preorder trees forests places ancestors descendants left subtrees right subtrees preorder tree 
preorder node ts ts forest 
ts concat map preorder ts obtaining list vertices depth order easy graph 
vertex dff convenient translate ordered list actual numbers 
function tabulate tabulate bounds 
vertex 
table int tabulate bnds vs array bnds zip vs zips vertices positive integers linear time builds array numbers indexed vertices 
package function follows bounds 
forest vertex 
table int bnds ts tabulate bnds ts turns convenient algorithms functions take depthfirst forest argument construct forest 
algorithm 
topological sorting converse preorder postorder unsurprisingly turns useful right 
postorder places descendants ancestors left subtrees right subtrees postorder tree 
postorder node ts ts forest 
ts concat map postorder ts repeated appends caused concat introduces extra logarithmic factor easily removed standard transformations 
preorder define graph 
vertex dff lack left right cross edges dfs forests leads pleasant property dfs forest flattened postorder 
express need definition 
definition linear ordering vertices post ordering respect graph exactly gamma 


means gamma 
gamma 

words definition states vertex path vertex ordering vertex occurs earlier reachable path addition path property named post order flattening depth forests property 
theorem vs order vertices appear vs post ordering respect proof comes post order flattening forest ancestor right forest 
case take second note gamma 
property different trees forest 
property lowest common ancestor 
apply topological sorting 
topological sort arrangement vertices directed acyclic graph linear sequence edges problem arises quite frequently set tasks need scheduled task performed tasks depends performed 
define graph 
vertex reverse correct 
comes result comes result theorem exists vertex earlier cycle assumption graph acyclic edge gamma 
exists 
algorithm 
connected components vertices undirected graph connected path 
directed graph vertices connected connected graph viewing edge undirected 
undirected graph tree depth spanning forest contain exactly vertices constitute single component 
translate directly program 
function components takes graph produces forest tree represents connected component 
components graph 
forest vertex components dff undirected graph undirected undirected graph 
graph undirected bounds edges undirected graph search may duplicate edges effect structure components 
algorithm 
strongly connected components vertices directed graph said strongly connected reachable 
strongly connected component maximal subgraph vertices strongly connected 
problem known compiler writers dependency analysis problem separating procedures functions mutually recursive groups 
implement double depth search algorithm kosaraju unpublished sharir 
scc graph 
forest vertex scc dfs reverse vertices graph ordered 
reverse ordering initial vertex order depth traversal transpose graph 
result forest tree constitutes single strongly connected component 
algorithm simply stated correctness obvious 
may proved follows 
theorem vertices scc 
proof proof proceeds calculation 
write transpose edges gamma 
edges gamma post ordering defined reversal induces ordering scc definition scc dfs reverse property gamma gamma gamma gamma gamma 
gamma 
gamma 
gamma 
construct loop implications 
gamma 
gamma 
gamma 
gamma 
consider gamma 
gamma 
gamma 
gamma 
post ordering 

gamma 
gamma 


transitivity 
gives direction 
complete loop 
latest vertex reachable 
gamma 
gamma 
gamma 
gamma 
transitivity gamma 
gamma 
gamma 
gamma 
gamma 
required theorem proved 
best knowledge calculational proof algorithm 
traditional proofs see 
example typically take pages argument 
contrast reusing earlier algorithm able reuse properties obtain compact proof 
similarly believe dfs forest basis program proofs simplified proofs values processes 
minor variation algorithm reverse roles original transposed graphs scc graph 
forest vertex scc dfs reverse advantage result express strongly connected components valid depth forest original graph transposed graph 
alternative works strongly connected components graph strongly connected components transpose graph 
implementing depth search order translate graph depth spanning tree technique common lazy functional programming generate prune 
graph list vertices root set generate potentially infinite forest consisting vertices edges graph prune forest order remove repeats 
choice pruning pattern determines forest ends depth traverse left top fashion breadth top left combination 
generating define function generate graph vertex builds tree rooted containing vertices reachable generate graph 
vertex 
tree vertex generate node map generate happens tree anyway generated tree contain repeated subtrees 
cyclic generated tree infinite rational 
course tree generated demand finite portion generated 
parts prune discards constructed 
pruning goal pruning infinite forest discard subtrees roots occurred previously 
need maintain set vertices traditionally called marks vertices discarded 
set operations require initialisation empty set membership test addition singleton 
prepared spend linear time generating empty set done essential operations may performed constant time 
easiest way achieve state transformers mimic imperative technique maintaining array booleans indexed set elements 

provide explanation state transformers appendix described number papers moggi wadler peyton jones wadler launchbury implemented haskell variant avoid cluttering main text 
implementation vertex sets easy type set vertex bool bounds 
st set bnds bnds false contains set 
vertex 
st bool contains include set 
vertex 
st include true define prune follows 
prune bounds 
forest vertex 
forest vertex prune bnds ts runst bnds thenst 
chop ts prune function begins introducing fresh state thread generates empty set thread calls chop 
final result prune value generated chop final state discarded 
chop set 
forest vertex 
st forest vertex chop returnst chop node ts contains thenst visited 
visited chop include thenst 
chop ts thenst 
chop thenst bs 
returnst node bs chopping list trees root examined 
occurred tree discarded 
vertex added set represented calls chop sequence 
chop ts prunes forest descendants adding set marked vertices 
complete pruned named remainder original forest chopped 
result turn named bs resulting forest constructed 
done lazily demand 
state combinators force computation follow predetermined linear sequence exactly sequence computation determined external demand 
top leftmost vertex demanded produced 
hand final tree forest demanded set marks single threaded previous trees produced 
demanded nature dfs anyway restrictive may 
point may wonder benefit gained functional language 
code looks fairly imperative 
extent comment justified important note place development destructive operations gain efficiency 
flexibility gain best worlds destructive update vital vital powerful modularity options provided lazy functional languages 
dfs components generate prune components combined provide definition dfs 
dfs vs prune bounds map generate vs argument vs list vertices generate function mapped having graph 
resulting forest pruned left top fashion prune 
paying extra logarithmic factor acceptable possible dispense completely imperative features prune implementation sets balanced trees example 
algorithms algorithm 
classifying edges seen value classifying graph edges respect depth search 
codify idea building subgraphs original containing vertices particular kind edge 
tree edges easiest just edges appear explicitly spanning forest 
edges may distinguished comparing preorder postorder numbers vertices edge 
summarise situation diagram preorder 
tf bc postorder 
diagram expresses relationship types edge tree edges forward edges back edges cross edges preorder postorder numbers 
back edges go lower postorder numbers higher cross edges go higher lower orderings 
forward edges composition tree edges distinguished tree edges means tree edges forward edges go lower preorder numbers higher conversely postorder determine tree edges problem 
implementation principles immediate 
tree bounds 
forest vertex 
graph tree bnds forest bnds concat map flat ts flat node ts node ts concat map flat ts back graph 
table int 
graph back post mapt select select ws ws post post cross graph 
table int 
table int 
graph cross pre post mapt select select ws ws post post pre pre forward graph 
graph 
table int 
graph forward tree pre mapt select select ws ws pre pre tree classification graph edges classify edge generate depth spanning forest produce preorder postorder numbers 
information required construct appropriate subgraph 
algorithm 
finding reachable vertices finding vertices reachable single vertex demonstrates dfs doesn take vertices second argument 
commencing search construct tree containing reachable vertices 
flatten preorder produce desired list 
reachable graph 
vertex 
vertex reachable dfs application algorithm test existence path vertices path graph 
vertex 
vertex 
bool path elem reachable elem test lazy returns true soon match 
result reachable demanded lazily produced lazily 
soon required vertex generation dfs forest ceases 
dfs implements true search merely complete traversal 
algorithm 
biconnected components programming complex algorithm finding biconnected components 
undirected graph biconnected removal vertex leaves remaining subgraph connected 
bearing problem reliability communication networks 
example want avoid driving particular town alternative route 
undirected graph graph biconnected vertices removal disconnects graph known articulation points 
locating articulation points allows graph partitioned biconnected components partition edges 
vertices articulation points marked asterisk 
naive brute force method requires time problem graph vertices edges 
efficient algorithm described tarjan biconnected components course depth search time 
apply theory tarjan express explicit intermediate values 
tarjan method theorem theorem depth spanning forest graph articulation point graph root child ii root proper descendants edges proper ancestors apply theorem associating low point number vertex 
low point number smallest dfs numbered vertex reached zero tree edges single graph edge 
calculate low point numbers traversing dfs trees bottom associating vertex low point number 
function label see annotates tree depth numbers low point numbers 
vertex low point number minimum dfs number vertex ii dfs numbers vertices reached single edge iii low point numbers vertex descendants tree 
example result running label dfs spanning tree produced graph gives annotated tree depicted 
depth forest undirected graph dashed lines important back edges calculating low points 
tree nodes triples instance represents triple depth number low point number vertex low points vertices calculate articulation points 
part ii theorem depth number equal low point articulation point 
function collect coalesces dfs tree biconnected tree tree node elements biconnected components 
node dfs number compared low point number children 
child low point number strictly node dfs number component involving vertex completed 
hand node dfs number equal child low point number component completed node included 
function handles special case root 
bcc ties functions 
bcc graph 
forest vertex bcc concat map map label forest forest dff bounds forest label graph 
table int 
tree vertex 
tree vertex int int label node ts node lv map label ts lv minimum lu node dw lu xs tree vertex int int 
forest vertex node dv lv ts node vs node vs map collect ts collect tree vertex int int 
int tree vertex collect node dv lv ts lv node vs cs collected map collect ts vs concat ws lw node ws collected lw dv cs concat lw dv node ws lw node ws collected biconnected components algorithm coalescing tree produce forest containing trees 
algorithm complex individual components correctness may potentially established independently components 
quite typical imperative presentations bones recursive dfs procedure filled components algorithm resulting single monolithic procedure 
biconnected trees analysis depth search complexity models complexity analysis imperative languages established years verified respect reality implementations 
models possible show traditional implementations various dfs algorithms linear size graph run time 
corresponding models lazy functional languages developed level developed extensive verification 
models see example sands believe implementation dfs algorithms linear models fully tested ran empirical tests 
vertices edges seconds measurements taken strongly connected components algorithm took measurements strongly connected components algorithm uses depth searches 
results experiment 
timings taken randomly generated graphs differing numbers vertices edges accurate approximately 
results quite clear 
plotted points clearly lie plane indicating linearity algorithm 
curious constant factor paying imperative language 
coded tarjan biconnected components algorithm compared haskell implementation 
graphs tested haskell times slower better expected haskell implementation multi pass implementation monolithic single pass algorithm 
related wise express graph algorithms haskell 
express graph problem terms set recursive equations algorithm fixed point equations 
graphs represented lists algorithms poor complexity suitable parallel evaluation 
unfortunately algorithm implementations long unreadable giving little insight structure problem 
example strongly connected components algorithm page intricate haskell 
barth 
describe structures parallel functional language id suited state computation 
instance structure array holding marks express vertex visited traversal 
strength structures designed support parallel evaluation drawback referential transparency lost 
regard depth search reif gives strong evidence inherently sequential computational complexity improved parallel computation 
structures provide valuable method general graph searching parallel provide little help particular case depthfirst search 
graph exploration language gel erwig provides explicit extensions lazy functional language 
exploration operators give concise way expressing graph algorithms 
graph problems expressed terms set predefined high level operations ideal add new language concepts new class problem tackled 
burton yang experimented multi linked structures 
arrays implemented balanced trees represent heaps 
give examples multi linked structures heaps example arbitrary depth search function 
drawback approach heaps passed returned function 
balanced trees logarithmic factor incurred depth search function linear size graph 
simon peyton jones helpful comments gave preliminary draft 
grateful richard bird suggesting dfs expressed generate prune paradigm geraint jones theo inspiring correctness proofs 
partly supported uk science engineering research council 
barth nikhil arvind structures extending parallel non strict functional language state hughes ed conference functional programming languages computer architecture lncs springer verlag cambridge massachusetts pp 

burton yang 
manipulating data structures pure functional language software practice experience 
leiserson rivest 
algorithms mit press cambridge massachusetts 
erwig 
graph algorithms iteration data structures 
structure graph algorithms style programming mayr ed graph theoretic concepts computer science lncs springer verlag pp 

harrison 
data types standard ml john wiley sons 

functional programming miranda pitman london 
hopcroft tarjan 
algorithm efficient algorithms graph manipulation communications acm 
hudak peyton jones wadler arvind boutel fairbairn fasel guzm hammond hughes johnsson kieburtz nikhil partain peterson 
report functional programming language haskell version acm sigplan notices 
wise 
graph algorithms lazy functional programming language proceedings th international symposium lucid intensional programming pp 

available technical report number computer science department indiana university 
launchbury 
lazy imperative programming workshop state programming languages acm sigplan copenhagen denmark pp 

launchbury peyton jones 
lazy functional state threads conference programming language design implementation acm sigplan orlando florida 
manber 
algorithms creative approach addisonwesley reading massachusetts 
moggi 
computational lambda calculus monads symposium logic computer science ieee asilomar california 
paulson 
ml working programmer cambridge university press cambridge 
peyton jones wadler 
imperative functional programming th symposium principles programming languages acm charleston north carolina 
reif 
depth search inherently sequential information processing letters 
sands 
naive time analysis theory cost equivalence report diku university copenhagen denmark 
sharir 
strong connectivity algorithm applications data flow analysis computers mathematics applications 
tarjan 
depth search linear graph algorithms siam journal computing 
wadler 
comprehending monads conference lisp functional programming acm nice france pp 

appendix imperative features initially introduced glasgow haskell compiler perform input output see peyton jones wadler 
approach monads moggi wadler easily extended achieve situ array updates 
launchbury showed original model extended allow imperative actions delayed results required 
model 
monad state transformers type constructor st defined type st 
elements type st int say functions applied state return pair integer new state 
usual unit returnst sequencing combinator thenst returnst 
st returnst thenst st 

st 
st thenst st monad provides basic array operations ix 


st ix 


st ix 



st takes pair index bounds type lie index class ix initial value returns initialised array 
time operation takes linear respect number elements array 
provide reading writing element array take constant time 
st monad comes equipped function runst 
runst st 
takes state transformer function applies initial state extracts final value discards final state 
type runst hindley milner nested quantifier built haskell 
universal quantifier ensures state thread variables state threads referenced 
details see launchbury peyton jones 
example runst thenst nums 
nums thenst 
nums thenst 
returnst return 
read follows run new state thread extracting final value finished create new array indexed components bind array nums write array nums index value read component nums index bind value return value note final expression returnst unnecessary returns value 
parentheses immediately thenst unnecessary haskell grammar binds lambda expressions tighter infix functions 
