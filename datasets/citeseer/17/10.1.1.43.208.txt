june am page compiling functional language luca cardelli bell laboratories murray hill new jersey 
summarizes experience implementing compiler functional language 
language ml milner compiler implemented personal project postgraduate student university edinburgh ml compiler refers vax implementation 
time familiar programming language semantics knew little compiler technology interpreters main programming concern 
major influences design compiler steele steele implementation folklore statically dynamically scoped dialects lisp allen 
result internal structure compiler fairly unorthodox compared example aho 
anyway compiler language ml different 
ml interactive statically scoped strongly typed polymorphic class higher order functions type inference dynamic allocation 
features preclude known implementation styles particularly ones lisp static scoping algol family functional values nested scoping strong typing 
interaction features gives ml character compilation challenging 
compiler partially converted new ml standard 
major points interest discussed interactive interpreter usage polymorphic type inference algorithm compilation pattern matching optimization representation user defined data types compilation functional closures function application variable access intermediate machine formal operational semantics modules type safe separate compilation 

potential efficiency realize potentially ml compiled efficiently 
static scoping possible compute compile time location variables 
strong typing type information needed run time regularity parameter passing argument function application trivial argument function application optimized situations stack languages intermediate dynamic structures appear necessary 
pattern matching destructuring discrimination arguments compiled efficiently compiling explicit destructuring discrimination code 
data type definitions compiler optimize data representations somewhat example totally general principles ml superficial knowledge ml assumed 
compiler ml available part lcf system gordon garbage collector affect normal execution speed encoded address datum extra space 
page june am definition list type require extra pointers produces normal representation lists pairs memory words nil 
hand inefficiencies essentially embedded structure language 
noticeable probably polymorphism 
polymorphism sense facilitates writing smaller programs code reused different situations non polymorphic typed languages require writing compiling copies essentially identical procedures 
polymorphism piece data identical format pointer 
implies space run time inefficiencies 
packed records arrays records character arrays bitmaps handled space efficient form case strings ml primitive predefined types 
type mechanism ml provides uniform way extending compiler fit special applications 
example bitmap graphics embedded introducing primitive type bitmap primitive operations 
new type fit perfectly language supports user defined types 
impractical semantically correct definition bitmap type operations ml 

compiler architecture compiler organized phases programming convenience necessity 
phase scanning parsing produces syntax tree 
second phase analysis includes typechecking computation stack displacements free variables 
third phase compilation intermediate stack machine language peephole optimizations tail recursion removal 
fourth vax code generation 
compiled program executed interactive run time system performs garbage collection 
process repeated definition expression typed user fetched external file 
interactive compiler compilation small phrases virtually instantaneous 
mean compiler particularly fast little startup overhead 
requirements pretty preclude external intermediate files system tools assemblers 
compilation done main memory code generator directly produces vax binary code 
large programs may require unrealistically large amounts memory separate compilation allows break programs manageable pieces 
compiler incremental sense compilation top level phrase takes place environment created previous compilations 
ml statically scoped language top level 
top level expression compiled current top level environment 
top level local environments live stack 
successful top level declaration top level environment grows 
parsing phase parsing 
parser recursive descent association stack infix operators 
recursive descent allows beautifully structure parser break rules 
example parsing ml declarations organized level grammar 
polymorphic type system major feature ml 
typechecker major components compiler 
typechecking algorithm due robin milner milner basic algorithm luis damas unpublished extension updatable data 
typechecking performed analysis phase unification algorithm 
typechecking requires compiler pass due sophistication tasks performed typechecking pass gather information useful succeeding translation pass 
tasks computation free variables function consequent computation stack closure displacements program variables 
june am page conventional compilers organized symbol table contains sorts information 
ml compiler symbol table solely speed string equality 
compiler organized linked list environment ones interpreters 
done keep structure compiler close correspondence denotational semantics language understood 
ml sophisticated treatment environments encoding flat symbol table dangerous 
scoping primitive identifiers ml uniform respect user defined identifiers 
care needed deal property language 
example compiled primitive operator op primitive function 
fun op 
necessarily addition 
compiler smart recognize op occurrence operator op occurrence function generate appropriate code 
translation phase produces intermediate stack machine code described detail sections 
initial reasons intermediate language portability facilitate code optimization 
intermediate language turned tremendous aid debugging compiler fact amply justifies 
primary goal compile fast function applications task facilitated extreme regularity function application ml 
believe gave bit importance problem ignoring efficiency considerations single goal shaped compiler 
example machine uses stacks avoid stack shuffling function call tail recursion removed machine function application split operations application immediately follows application intermediate context saving restoring optimized away escape trap mechanism uses third stack interferes function call 
peephole optimization phase operates intermediate code jump optimization tail recursion removal 
believe mistake remove tail recursion late stage complex auxiliary peephole optimizations needed really eliminate tail recursion combination conditionals local declarations 
analysis phase recognize tail recursive situations translation phase immediately generate proper code 
code generation phase naive machine instructions translated operate stacks optimization detection special cases 
techniques register allocation believed mistake functional languages frequent context switching ml execution time greatly benefit peephole optimizer 
introduced execution time satisfactory typical applications typical applications demanding 
run time system provides dynamic memory allocation garbage collection system routines input output 
garbage collection done recursive copying compacting space algorithm data different pages depending data format 
spaces grow incrementally simple adaptive algorithm changes frequency collections amount garbage reclaimed previous collections 
major drawback compiler absence debugging tools 
problem serious may typechecking combined clean semantic structure ml eliminates large proportion bugs compile time allowing flexibility untyped languages occasionally program untyped languages find thinking ml typechecker trapped bug 
simple fact ml interactive provides debugging environment far superior debugging system batch compiled languages lisp programmer knows 
reasons felt pressure introduce debugging tools 
debugging desirable especially new users may require rethinking compiler architecture 
page june am 
fetching variables having claimed ml compiled efficiently 
primary decision concerns way functional objects represented terms data structures 
turn affects way variables fetched applications performed 
variable fetching function application important factors performance functional language 
difficulty derives fact functions returned values functions 
lisp just ignores problem reintroduce form fails implement higher order functions correctly 
algol languages forbid situation partial exception simula algol 
correctly solve problem value function text closure function text environment defines value variables free text 
solutions known implementation statically scoped lisp dialects 
simplest implement run time stacks linked lists closure simply contain pointer relevant environment stacks real stacks information overwritten successive uses stack 
solution usually inefficient simula uses clever optimizations 
second solution closures contain copies pointers values relevant global variables real stack argument passing 
advantage local variables directly accessed known depth stack global variables directly accessed known depth closure static link display techniques necessary 
disadvantage closures built moderately expensive situations 
closures contain assignable variables pointers assignable objects order preserve sharing side effects 
ml compiler uses second solution closures bundles global variables associated function text 
problem sharing side effects solved simply fact ml assignable program variables assignable structures live heap shared pointers contained closures 
said display techniques necessary 
hand compiler compute set global variables function 
naive way doing corresponding logical definition free variables requires expensive set manipulations 
current ml compiler uses tricky supposedly clever stack discipline 
am going describe simpler reasonably efficient solution prototype compilers 
global variables accumulated var set data structure realized hash table association list 
primitive operations available var sets obtaining new empty var set inserting variable var set applying function elements var set 
insertion done follows 
variable set inserted associated old cardinality set number returned closure displacement variable 
variable set corresponding displacement returned 
analysis lambda expression starts list local variables initialized list formal parameters lambda expression set global variables initialized new var set 
local declarations grow 
variable body lambda lookup procedure applied 
variable searched stack 
global variable inserted obtaining closure displacement global variable 
suppose lambda expression contains lambda expression 
procedure applied recursively process obtain var set 
variables global local global fetched create closure simply apply lookup variables 
arbitrary top level expression processed top level environment new var set 
analysis empty set undefined variables 
june am page 
pattern matching ml functions defined specifying set patterns matched order arguments corresponding set actions execute style function definition inherited hope burstall 
pattern matching communicates highly structured information input parameters 
consequence compiler produce better code pattern matching description corresponding sequence discrimination selection operations 
ml pattern matching powerful example prolog pattern matching variable occur ml pattern 
ml pattern matching just abbreviation nested case statements selection functions 
naive way compiling pattern matching try match input pattern matches execute corresponding action backtrack try pattern 
lot useless generated strategy 
ml compiler better job compiling patterns discrimination tree optimal number tests datum order select appropriate action technique due dave macqueen gilles kahn implemented hope compiler 
pattern matching compilation algorithm fairly complex illustrated simple example 
consider shuffle function converts pair lists length list pairs 
definition conventional second definition uses pattern matching infix cons val rec shuffle list list null list null list nil null list null list escape shuffle hd list hd list shuffle tl list tl list val rec shuffle nil nil nil shuffle hd tl hd tl hd hd shuffle tl tl shuffle escape shuffle pattern matching programs organized rows pattern action pairs 
produce discrimination tree set rows analyze patterns kind pattern variable hd tl default behaves anonymous variable data constant nil data constructor applied patterns tuple patterns nil nil 
patterns nested depth 
generate discrimination tree tuples split patterns vertically columns 
example obtain prefix form col nil hd tl col nil hd tl 
notice split producing columns 
variables may need split tuples 
heuristic choice determine column best discrimination 
reasonable heuristic choose column largest number distinct constants constructors guaranteed produce shallower discrimination tree 
simple case choose column say col 
col exhausts possible list constructors nil case automatically introduce new row escape match fail original patterns matches input 
generate test null list non null list column ignore case redundant 
case analyze second column choice column 
choice nil col reduces col nil eliminate rows column match nil choice col reduces col hd tl 
col simply generate test nil distinguish cases 
col generate test non nil 
point exhausted possible inputs 
complex situations may carry analysis hd tl split columns page june am code produced process closely resembles code generated definition shuffle val rec shuffle list list null list null list nil escape shuffle null list escape shuffle val hd hd list tl tl list val hd hd list tl tl list hd hd shuffle tl tl destructuring list hd tl done efficiently explicit calls hd tl check null list point know list null 
reasons pattern matching efficient hand written code 

representation user defined types compiler chooses efficient representations user defined data types 
example ml definition polymorphic binary tree type tree leaf node tree tree naive representation type tree tagged pointer tag discriminate leaf node case 
tagged pointer leaf case points triple node case 
triple contains left right subtree node information 
kind representation guaranteed user defined data type far optimal frequently occurring cases 
example want leaf represented number node triple extra tagged pointers 
ml objects represented memory boxed unboxed structures 
unboxed structure booleans enumerations small integers numeric value 
boxed structure tuples closures pointer memory area contents structure allocated pointer bigger 
possible distinguish boxed unboxed structures fact garbage collector follow pointers 
data type compiler knows computes boxed property true objects type boxed 
example booleans boxed boxed lists boxed boxed non null nil represented unboxed tuples boxed 
type tree boxed properties types tree built leaf built unboxed type node built boxed triples optimizations possible 
constants leaf represented unboxed numbers different numbers constants tagged null pointers 
second suppose single constructor furthermore contains boxed data eliminate tagged pointer leaving naked boxed datum distinguished constants 
boxed property computed data type representations just selected 
recursive polymorphic type definitions introduce indeterminacy computation boxed property case behave conservatively 
optimizations type tree represented efficient form mentioned type bool false true represented false true type age currently compiled case instructions uniformity general case user defined data types special cases branches suffice easily detected 
june am page age int represented exactly int type list nil cons list represented nil naked pairs cons cells representation optimizations complicated pattern matching know different discrimination tests different representations 
possible ml encapsulates definition new data types constructors selectors single construct simultaneously optimized 

typechecking type type variable standing arbitrary type type operator 
operators int integer type bool boolean type nullary type operators 
parametric type operators function type cartesian product type take types arguments 
general forms operators type function type pair values replaced arbitrary types give specialized function pair types 
types containing type variables called polymorphic types containing type variables monomorphic 
types conventional programming languages pascal algol monomorphic 
expressions containing occurrences type variable express contextual dependences case domain codomain function type 
typechecking process consists matching type operators instantiating type variables 
occurrence type variable instantiated occurrences variable instantiated value legal instantiations int int bool bool contextual instantiation process performed unification robinson 
unification fails trying match different type operators int bool trying instantiate variable term containing variable circular structure built 
situation arises typechecking fun 
considered illegal 
trivial example typechecking 
identity function fun type maps type 
expression type int matched domain type yielding int int specialized type context 
type codomain type int context 
basic algorithm described follows 

new variable introduced lambda binder assigned new type variable meaning type determined context occurrences 
pair stored environment searched time occurrence yielding intervening instantiation type occurrence 

conditional component matched bool branches unified order determine unique type expression 

abstraction fun type inferred context associated new type variable 
functional type returned domain intervening instantiation codomain type 
application type unified type type new type variable 
implies type function type domain unifiable instantiation returned type application 
order describe typechecking expressions variables introduced binders need introduce notion generic type variables 
consider expression pair creates pair objects fun pair true ex page june am milner type system expression typed algorithm described produce type error 
fact occurrence determines type int second occurrence determines type bool unified 
type variables appearing type lambda bound identifier called non generic example shared occurrences instantiations may conflict 
note functional arguments perfectly behaved function 
fun produces pair fun produces pair true 
try find typing example assigning typecheck correctly situations int type fun type fun match domain 
typing unsound general example succ int int type matches accepted argument wrongly applied true 
sound extensions milner type system type scope discussion 
basic problem typing heterogeneous occurrences lambda bound identifiers 
turns tolerable practice expressions extremely useful necessary different mechanism provided 
going try better typing heterogeneous occurrences bound identifiers 
consider val fun ex pair true essential able type previous expression polymorphic function applied distinct types context making polymorphism quite useless 
better position ex know exactly information deal separately occurrences 
case type type variables occur type bound identifiers occur type enclosing lambda bound identifiers called generic property able assume different values different instantiations bound identifier 
achieved operationally making copy type distinct occurrence making copy type careful copy non generic variables shared 
expression example illegal ex non generic type propagates fun val ex pair true unsound accept expressions type consider applying succ bound 
definition generic variables follows type variable occurring type expression generic iff occur type binder lambda expression enclosing note type variable non generic typechecking lambda expressions may generic outside lambda expression 
case ex assigned non generic assigned generic 
determine variable generic maintain list non generic variables point program type variable list generic 
list augmented entering lambda leaving lambda old list automatically current type variable generic 
copying type copy generic variables nongeneric variables shared 
unifying non generic variable term type variables contained term non generic 
consider recursive declarations june am page rec val treated rec expanded fixpoint operator type val fun evident instances type variables type recursive definition non generic instances generic 

typecheck typecheck declaration part obtaining environment identifiers types typechecking body 

declaration treated checking definitions introduces pair environment type case mutually recursive declarations create environment containing pairs defined new non generic type variables inserted list non generic variables scope declaration 
typechecked environment types matched instantiations 
side effects interact nicely polymorphism require special treatment see gordon page discussion problems 
simplest solution consists requiring assignments act monomorphic values position taken standard ml 
ml compiler uses flexible discipline devised luis damas discussed 

functional machine functional machine fam stack machine designed support functional languages large address space computers 
considered secd machine landin optimized allow fast function application true stacks opposed linked lists 
section contains brief overview fam fully described cardelli 
machine supports functional objects closures dynamically allocated garbage collected 
optimization support techniques application slower strictly avoided tail recursion pattern matching calls supported 
restricted side effects arrays provided 
machine intended compilation ml functional languages easy regular providing rich set operations open ended collection data types 
instructions machine supposed interpreted assembled machine code executed 
optimized special case operations provided special cases easily detected assembly time 
efficiency considerations machine supposed perform run time type checking type safe 
matter principle primitive test type object correct application machine operations guaranteed typechecking source language 
needed effect run time typechecking achieved variant tagged data types 
state machine determined pointers denotations set memory locations 
pointers argument pointer frame pointer stack pointer trap pointer program counter environment pointer 
point independent stacks directly indirectly data heap 
memory takes care sideeffects heap includes file system 
page june am ap ep sp fp tp rs env text ts pc closure argument pointer ap points top argument stack arguments loaded passed functions results functions delivered 
stack store local temporary values 
machine operations take displacements object displacement zero 
frame pointer fp points current closure frame fr consisting text currently executed program environment free variables program 
program counter pc points program executed pr part current closure 
stack pointer sp points top return stack rs program counter frame pointer saved function calls 
trap pointer tp points trap stack ts trap frames stored 
trap frame record state machine resume previous machine state side effects heap reverted 
environment pointer ep points defines top level environment execution interactive systems 
execution ep ap normally grows top level definitions 
semantics machine operationally state transitions plotkin henderson 
machine state represented tuple rs fr pr ts es stack rs ts es write operation pushing cell type top may contain type variables 
empty stack stack iff stack 
stack th cell top contains type top cell displacement 
case conflicting substitutions rightmost substitution valid 
frame fr pointed fp form clos text ab sequence machine operations literals values free variables source program translation literals big constants strings inner lambda expressions occur program translation taken code garbage collector access easily 
code literals text literal text 
text free variables clos closure 
closure implements function having type ab 
program pr pointed pc string machine operations 
empty program initial instruction pr singled writing op pr parameters op 
memory pair functions address value stream locations file system discussed 
machine operation op 
implements state transition denoted rs fr op pr ts es rs fr pr ts es order operation visible normally equivalent notation june am page op rs fr pr ts es rs fr pr ts es data operations transfer data back forth argument stack data cells 
general take arguments top popping stack times push back results 
set machine data types open ended set data operations 
data types arguments basic machine operations implementation 
include unit bool short int string list closure 
data operations may fail failures trapped 
machine failures user defined failures behave uniformly 
stack operations manipulate argument stack 
examples 
copies th cell top 
inflate inserts null cells th cell top 
deflate deletes cells starting th cell top cells deleted area 
inflate operation pushes cells top similarly deflate pops cells top 
closure operations manipulate closures 
closure data object representing function contains text function value free variables 
text function complex structure contains sequence instructions suitable machine language set literals may strings text cells 
closures created placing values free variables text function storing information newly allocated closure cell 
closures mutually recursive functions may contain loops allocated steps dummy closures set mutually recursive functions allocated heap recursive closures built filling dummy closures 
way closures may mutually contain pointers dummy closures 
operations closures closure creates closure arguments allocates empty closure recclosure fills dummy closures retrieves value free global variable retrieves literal text closure 
closure int text rs fr pr ts es clos rs fr pr ts es int rs fr pr ts es clos unity unity unity rs fr pr ts es recclosure int int text clos unity unity unity rs fr pr ts es clos rs fr pr ts es int rs clos text pr ts es rs clos pr ts es int rs clos text code pr ts es rs clos text pr ts es control operations affect program counter stack pointer 
jump unconditional branch point program text 
conditional branch jumps top false normal execution flow continues 
function application page june am split operations saves calling closure rs saves calling program counter rs activates called closure sitting top making pointed fp setting pc entry point restores calling closure rs 
means inverses canceled multiple curried applications 
called closure uses return restore calling program counter return calling function normally executed 
sequence return optimized uses jump pass control called function 
advantage control stack grow iteration programmed tail recursion 
return incorporate deflate operation take arguments cells cell top 
jump code rs fr pr ts es rs fr ts es code false rs fr pr ts es rs fr ts es true rs fr pr ts es rs fr pr ts es rs fr pr ts es rs fr fr pr ts es clos text code ab rs fr pr ts es rs pr clos text ts es rs fr fr pr ts es rs fr pr ts es return int int rs code fr pr ts es rs fr ts es int int clos text code ab rs fr pr ts es rs clos text ts es exception operations deal exception stack 
interaction trap stack stacks exceptions 
function call slower exceptions traps fire 
failwith operation takes string generates failure string failure reason 
failure trapped previously executed trap instruction saved state machine heap failure recovery point 
trap saves ap fp sp pc corresponding failure handler trap stack ts flag meaning failures trapped 
takes list strings saves ap fp sp pc handler ts list strings selectively trap failures 
reverts effect trap 
failwith takes string searches trap stack top trap block block list strings containing corresponding state machine ap fp sp pc restored trap block ones removed 
matching trap message june am page failure followed failure string printed standard output stream machine stops 
trap code rs fr pr ts es rs fr pr ts rs fr es code sl string list rs fr pr ts es rs fr pr ts sl rs fr es code rs fr pr ts rs fr es rs fr ts es rs fr pr ts sl rs fr es rs fr ts es failwith string rs fr pr ts pr rs fr es rs fr pr ts es 
trap block top ts sl contained sl 
string rs fr pr ts pr rs fr es rs fr es trap block satisfying condition 
suggestions compile high level language expressions fam operations 
translation function expressions fam programs example int means expression translated fam operation int 
primitive operations corresponding fam machine operation translated translating arguments left right appropriate fam operation op arg arg arg 
arg op variables converted operation depending defined strings converted 


string 



function applications translated translating argument function appending parts apply operation functions compiled sequences operations run time build closures 
global variables function collected appropriate environments informally get appropriate displacement text function fetched closure generated 
fun 




get get text 




return closure recursive functions involve recclosure 
compilation mutually recursive functions page june am rec val 



text 

return recclosure text 

return recclosure modules type safe separate compilation 
complete module mechanism designed macqueen current ml compiler includes preliminary implementation separately compiled modules loosely resembles facilities provided modula wirth 
current ml modules parameterless support multiple instances 
implementation techniques currently modules briefly described relevant ambitious proposals 
module compiled compiler writes implementation file containing program code module specification file containing type information 
module import previously compiled modules specification files typecheck module boundaries 
version numbers automatically maintained keep track obsolete modules recompiled 
importation modules dynamic happen conditionally hidden functions imported modules 
module imported times loaded 
desirable necessary framework type declarations 
modules import module important type declarations processed different version type declarations typechecker complain interact module importing 
think module closure global variables modules selfcontained program text defines set bindings environment 
environment implemented record fields heap opposed piece stack 
example describes module parameters show parameters may treated imports modules 
module includes body import text module defines environment environments top argument stack execution text just function application environments argument stack execution text just definition 
access variable requires operation access environment record field operations record selection 
corresponds move instructions vax instruction 
bit expensive internal variable access probably noticeably 
access variables modules imported imported requires indirections 
sharing imported modules achieved simply sharing environment record modules 
imported module happens essentially free 
separate compilation achieved producing text module closure empty anyway exporting text file implementation file module 
text compiled assuming called linking necessary parameters environments argument stack 
result call environment field identifier directly exported module field exported submodule 
june am page includes import declaration carried dynamic linking simply fetching imported environment 
dynamically link precompiled module produce empty closure 
module parametric calling closure supply link fetch parameter environments 
closure called producing environment link modules 
result left argument stack inserted global module pool sharing 
reviewed ml implementation techniques various degrees original isolation combination techniques 
techniques historical roots lisp calculus dialects developed various people implementation ml lcf system hope language generations ml 
aho aho ullman principles compiler design addison wesley 
allen allen anatomy lisp mcgraw hill 
burstall burstall macqueen sannella hope experimental applicative language lisp conference stanford august pp 

cardelli cardelli 
functional machine bell labs technical report tr 
gordon gordon milner wadsworth 
edinburgh lcf lecture notes computer science springer verlag 
henderson henderson functional programming application implementation prentice hall 
kowalski kowalski logic problem solving north holland 
landin landin mechanical evaluation expressions computer vol 
pp 

macqueen macqueen modules standard ml conference 
milner milner theory type polymorphism programming journal computer system science pp 

milner milner proposal standard ml internal report csr dept computer science university edinburgh 
plotkin plotkin structural approach operational semantics internal report daimi fn computer science dept aarhus university 
robinson robinson machine oriented logic resolution principle journal acm vol jan pp 

steele steele rabbit compile scheme ai tr mit may 
steele steele expensive procedure call myth proc amc national conference seattle oct 
wirth wirth programming modula springer verlag 
