interconnection object specifications malcolm simple account interconnections systems distributed concurrent interacting objects 
give definition object class specifications show may composed larger systems way captures complex objects parallel composition synchronisation 
distributed autonomy objects key concepts object orientation hope simple treatment parallel composition clarify important aspects hierarchical structure distributed systems objects 
particular interest commutativity properties give truly concurrent model parallelism distributed systems contrast interleaving models parallelism 
atomic events occur independently distributed components system interleaving model parallel composition happens approach simply deny relevance temporal ordering execution independent events asserting 
words independence events expressed commutativity properties 
commutativity properties capture true concurrency dates back far mazurkiewicz example 
monteiro pereira explicitly limits monoids obtain commutativity properties sheaf theoretic model concurrency 
approach interconnections objects similar respects monteiro pereira sheaf theoretic approach relies goguen categorical systems theory see applications object orientation goguen ehrich wolfram goguen :10.1.1.52.4296
consider objects local hidden state aspects may observed means attributes may updated methods 
object class specified declaring set attributes set methods stating methods affect values attributes 
basis hidden sorted algebra approach object specification 
hidden sorted algebra variety sorted algebraic specification uses hidden sorts model hidden local states objects visible sorts model data values objects manipulate 
goguen diaconescu proposed construction called independent sum capture parallel connection synchronisation systems interacting objects 
goal investigate simple way ideas underlying independent sum construction 
illustrate construction means example technical details see goguen diaconescu loc 
cit 
specification defines class cells store natural numbers specification imports module called data assume defines data types object class specification case sort nat natural numbers 
obj pr data op init 
op getx 
nat op putx nat 
var var nat eq getx init eq getx putx endo local state cells represented hidden sort cell assignment method putx update state attribute getx returns value currently held cell 
constant init sort represents initialisation creation cell 
goguen diaconescu consider specification describing behaviour cell object introduce construction called independent sum composing systems interacting objects specifications 
example suppose specification defines behaviour cell suppose cell defined similar specification replaced 
behaviour system consisting operating parallel defined specification obj pr data op init 
op getx 
nat op putx nat 
op gety 
nat op nat 
var vars nat eq getx init eq getx putx eq gety init eq gety eq getx getx eq gety putx gety eq putx putx endo note represents state specification second specification represents product states represents state composite system 
equations specification taken directly final equations state operate independently assignment doesn affect value attribute vice versa 
final equation particularly relevant subsequent sections independence captured stating assignment commutes assignment independent sum represents parallel connection synchronised init just initialisation synchronously initialises 
process repeated give hierarchical construction large systems 
example third cell form kz conjoin give kz 
subscripted indicates common part shared independent sum duplicate versions object composite object thought pushout inclusions kz fact pushout goguen diaconescu give universal characterisation independent sum construction 
sections investigate universal ways capturing parallel connection synchronisation 
section gives preliminary technical background section discusses basic approach interconnections simple classes processes sections discuss interconnections object systems objects respectively 
key idea follows commutativity properties capture true concurrency similar commutativity axioms independent sum 
research reported supported part cec esprit bra working groups core information systems correctness reusability compass comprehensive algebraic approach system specification development contract management information technology promotion agency ipa japan part industrial science technology frontier program new models software architectures sponsored new energy industrial technology development organization 
preliminaries order account reasonably self contained brief summaries technical notions sequel 
main concepts require categories functors limits monoids right actions monoids sheaves 
introduced subsections readers familiar concepts skip section 
categories category theory allows treatment constructions mathematics computer science 
give basic definitions introductions 
category consists ffl class jcj objects ffl class kck morphisms called arrows ffl maps kck jcj give respectively source target morphism ffl jcj distinguished morphism called identity ffl partial operation kck kck called composition defined case 
required axioms satisfied ffl identities neutral elements composition jcj kck compositions defined ffl composition associative kck sides defined 
kck write iff information pictorially gamma 
composite depicted gamma 
gamma 
equation depicted picture referred commuting diagram means paths diagram start points equal 
objects category different objects object orientation risk confusing refer category objects simply objects 
important example category sets objects sets morphisms functions precisely triples sets map 
composition morphisms just composition functions 
write composition diagrammatic order direction arrows 
usual notation ffi 
example category arises partial order 
partial order construct category call objects elements morphisms pairs elements particular morphism iff composite category opposite category op obtained turning arrows specifically objects op objects morphisms op iff example category arising partial order op category arising partial order iff example artificial category category objects identity morphisms objects morphism 
category pictured diagram gamma gamma gamma gamma gamma psi identity morphisms omitted diagram 
sections discuss relationship category synchronisation call category sync 
think sync denoting system consisting objects synchronised common subobject 
fact strange example category thought pictorial representation system instance system obtained instantiating category objects objects instantiating arrows morphisms objects express relevant subobject relationship 
instantiations may achieved functors 
functors natural transformations categories functor pair jf kfk jf maps objects objects jf jcj jdj kfk maps morphisms morphisms way ffl kck kfk jf jf ffl kfk jf ffl morphisms kfk kfk kfk 
write denote functor functor write jf kfk fx object arrow example main features functors summarised concisely follows 
ffl kck fa ffl fa ffl morphisms ff fg 
example functor identity functor sets sets defined set function example list sets sets defined list set lists set list function applies componentwise list giving list result 
functors natural transformation family morphisms indexed objects jcj morphisms diagram commutes 
fa ga gf gb ff ff gf example family functions take singleton list hxi natural transformation list 
limits objects category product object thetab morphisms thetab thetab pair morphisms exists unique morphism thetab diagram represents situation 
thetab phi phi phi phi hj delta delta delta delta delta delta delta deltaff au example category sets products cartesian products standard projection functions 
category arising partial order products correspond greatest lower bounds 
generally limits defined follows 
diagram category functor ffi category called shape diagram 
cone diagram ffi object family morphisms ffi jxj ffi diagram 
ffi ffi gamma gamma gamma gamma psi ffi write ffi indicate family morphisms cone ffi limit diagram ffi cone ffi cone ae ffi unique morphism ae jxj 
example general situation products category limits diagrams ffi category objects arrows identities 
product thetab projections limit diagram ffi maps object important example limits useful talking parallel composition synchronisation 
suppose morphisms category supposing diagram ffi sync sync category pictured section 
pullback object theta morphisms theta theta theta ffi universal property unique theta theta gamma gamma gamma gamma psi delta delta delta delta delta delta delta deltaff au gamma gamma gamma gamma psi call theta pullback object 
example sets pullback object thetab pullbacks limits general thought combining objects diagram minimal way projections commute arrows diagram 
sections limits model parallel composition systems object specifications 
useful know arbitrary diagram specifications composed say category complete iff limit diagram ffi monoids objects state specification class objects fixes visible attributes object state methods state may changed 
object class abstraction objects real world may reveal unexpected facets altered manner unforeseen circumstances 
abstracting reality simultaneous effect methods object state doing impose monoid structure fixed set methods proper object class 
applying methods corresponds multiplication monoid applying methods corresponds identity monoid 
monoid set associative binary operation ffl thetam usually referred multiplication identity element ffl monoid write just usually write mm ffl example set lists containing elements concatenation thetaa empty list monoid 
example especially important material sections 
monoid homomorphism structure preserving map carriers monoids 
words ffl 
ffl means map distributes multiplication preserves identities 
ffl ffl gives category mon monoids monoid homomorphisms 
mon complete interesting relationship limits mon independent sums 
example consider diagram mon 
ffl ffl ffl gamma gamma gamma gamma gamma psi pullback object diagram mon thetan carrier 
multiplication pullback object defined componentwise ffl ffl ffl identity 
think specifications objects share common subobject morphisms restricting programs programs pullback object represents parallel composition synchronised independent sum 
element gives rise element pullback object similarly elements satisfy commutativity axioms independent sums program seen representing parallel composition programs independent sums commutativity composition expresses irrelevance temporal ordering execution 
right actions monoids sections simply view methods object class monoid natural extension analogy view object state right action methods 
right action monoid ffl consists set binary operation phi thetam phi phi ffl phi phi phi omega right actions morphism right actions phi 
omega map phi omega gives category ra right actions category complete 
example pullback object phi gamma 
omega gamma psi ra right action fi thetau fi defined fi phim psim monoid methods specification object class ignore attributes specification possible think right action model implementation specification 
useful property models move back monoid morphisms cf 
property models signature morphisms institutions goguen burstall 
proposition monoid homomorphism induces functor ra ra ra 
proof phi right action define ra phi phi phi phi straightforward check right action phi 
omega morphism right actions define ra just phi 
omega 
morphism right actions follows equalities phi phi omega omega sheaves sheaf theory branches mathematics underlying theme various applications passage local global properties 
provides formal notion coherent systems observations number consistent observations various aspects object uniquely pasted give observation aspects 
passage local global properties pasting local observations behaviour allow sheaf theory usefully applied computer science give models concurrent processes objects :10.1.1.52.4296
give basic definition sheaf fuller accounts 
may consider sheaf giving set observations object behaviour variety locations 
notion location formalised definition complete heyting algebra partially ordered set ffl greatest lower bound ffl subsets fc ig upper bound ffl greatest lower bounds distribute upper bounds example topological space subset inclusion ordering complete heyting algebra 
important example subsystems system described section 
definition complete heyting algebra presheaf functor op sets 
set restriction function cd subject conditions ffl cc id identity set ffl de cd ce notation presheaf write xj cd 
note observations presheaf structured sense presheaves defined functors concrete category structures 
example consider presheaves monoids functors op mon 
case restriction functions required preserve structure example restriction functions presheaves monoids monoid homomorphisms 
sheaf presheaf allows families consistent local observations pasted give global observation 
definition presheaf sheaf iff satisfies pasting condition ffl family elements unique xj example suppose system just functor op sets means subsystem set observations teh subsystem sheaf paste unique way local observations set subsystems give global observation system provided local observations contradict 
idea developed sections 
process classes class objects specified declaring attributes objects class declaring methods operate states defining effect methods attributes 
ignore moment attributes objects concentrate just methods arrive simplistic notion process classes 
notion simplistic intrinsic interest illustrate ideas approach interconnections objects 
simplest way specifying class processes state set events processes class engage 
say process class specification just set 
correspond specifying alphabet process formalism csp 
generally say process class specification monoid thought specifying programs class processes carry history traces events engages 
monoids alphabets advantage purposes comparing classes processes monoid morphisms renaming events compare actions processes 
consider example clock process engage event tick 
monoid programs class clocks set lists denotes tick clock 
slightly complex example process engage distinct events say called dot dash corresponding monoid suppose want conjoin process clock way dot lasts tick clock dash takes ticks 
expressed monoid morphism dot dash pp morphism takes list dots dashes returns amount ticks clock required 
example history dot dash process list dot dash dot corresponding history clock process pppp ticks 
morphism synchronise dot dash processes share clock process 
result synchronisation consist histories dot dash processes provided take number ticks clock 
example process go dot dash dot goes dash dash acceptable histories require ticks clock 
dot dash processes common clock result parallel composition pullback object diagram mon gamma gamma gamma gamma gamma psi pullback object diagram thetad lists dots dashes represent histories processes pair history parallel composition processes provided require number ticks shared clock 
point illustrated example systems thought diagrams behaviour system limit 
developing interconnections systems objects ideas results categorical systems theory cf 
goguen :10.1.1.52.4296
possible curious examples behaviour composite processes 
fag fbg fa bg fa bg processes arranged morphisms ffifl fflfi qs ffifl fflfi ffifl fflfi ffifl fflfi qk observe processes obvious restriction functions arrow restricts list fa bg list fag 
idea process participate event participate event processes observe happening happening behaviour system limit mon carrier set thetab thetac thetad yj zj yj zj element set ab ba abj abj suggests observes happening observes happening observes happening happening monteiro pereira refer trace impossible behaviour see unacceptable relativistic behaviour objects share clock 
synchronising system clock shared objects reasonable way avoiding impossible behaviours 
object specification previous section outlined relationship limits category monoids independent sum process specifications 
relied viewing set methods class processes monoid 
object class specification declares number attributes allow observation aspects object state 
object class specification give set representing data values attributes take 
object attribute set thought set tuples attributes 
means specifying way methods affect object attributes 
simple way achieving provide function maps methods attribute values function thought returning attribute values evaluating method object initial state 
definition object class specification triple monoid set function carrier write 
example specification stack object ffl set lists ffl set representing value top stack ffl defined error push pop tail tail tail push tail pop tail tail consider object class specifications 
morphism consist translation programs translation state attributes program translate evaluate result get result evaluating translating resulting state attributes 
words require diagram commutes 
note monoid morphism strictly speaking leftmost arrow diagram forgetful functor mon sets omitting keeping notation section 
definition morphism object class specifications 
pair monoid morphism sets gives rise category obj object class specifications morphisms 
note monoid morphism just map sets methods allow methods translated composite programs 
inheritance modelled inclusions object class specifications cf 
example 
intuition inheriting specification specialises inherited specification adding methods attributes 
inherits inclusion 
restriction state attributes 
definition containment object class specifications morphism 
pre inverse id 
gives subcategory obj obj object class specifications objects containments morphisms 
definition implies effect inherited methods state attributes altered 
previous section suggested interconnection objects far methods concerned captured limits category monoids 
sense limits state attributes aggregated objects state space composite object composed state spaces component parts coherent way 
proposition allows build specifications classes composite objects 
proposition category obj object class specifications complete 
fact limits obj constructed limits methods state attributes 
notation allows give easy characterisation limits obj 
notation note diagram obj thing functor mon functor sets natural transformation forgetful functor mon sets 
extending notation definition write diagrams object class specifications proof proposition 
suppose diagram object class specifications limit mon limit sets 
composing gives cone induces morphism clear diagram cone straightforward check limiting cone 
describes paste arbitrary diagram object class specifications parallel composition objects limits 
possible paste models object class specifications model evaluates methods way agrees specification 
definition model object class specification tuple phi ff phi right action ff ff phi diagram object specifications models specifications diagram build model limit diagram 
proposition obj diagram object class specifications suppose jxj px dx model sx phi ff sets functor phi thetap ff natural transformations models give rise model limit model constructed limit sets operations required model limit constructed universal properties limits details left exercise reader 
system specification previous section limits diagrams objects means composing object class specifications specifications complex object classes 
section generalise considering systems objects interconnections systems 
previous section goal examine ways composing systems objects form larger systems 
various ways defining systems objects 
general way provide richest structure system specifications 
definitions due goguen 
definition system specification diagram ffi obj object class specifications 
category thought defining shape topology system 
morphisms system specifications specify systems composed larger systems particular morphism identify saying natural transformation mean sx sx jxj arrow sf sx sy shared components systems composed 
suppose ffi obj obj system specifications morphism ffi interpret ffi functor interprets topology ffi means comparing object class specifications ffi object jxj 
particular want means encoding methods state attributes methods state attributes ffi may achieved natural transformation ffi picture 
obj obj ffi ffi oe definition system specifications ffi obj obj morphism system specifications ffi pair functor ffi natural transformation 
gives category sys system specifications 
argued previous section system thought object limit diagram 
accordance slogan categorical systems theory behaviour limits cf 
goguen explicit definition functor beh sys obj takes system specification limit obj called behaviour :10.1.1.52.4296
fact objects viewed systems composed object 
gives functor obj sys right adjoint beh goguen 
just objects composed complex objects limits diagrams systems composed larger systems 
definition interconnection system specifications diagram ffi sys 
result interconnection colimit sys 
proposition states category sys cocomplete arbitrary diagrams systems composed larger systems colimits 
proposition special case theorem goguen asserts result complete category objects 
proposition interconnection system specifications result 
behaviour result interconnection ffi obj computed limit obj limits system ffi limit ffi beh obj 
way structuring objects systems consider topologies form partial order 
way consider subobject relationships components system 
definition po system functor op obj partially ordered set 
po systems special kinds system specifications morphisms just system specification morphisms 
idea po system constructed hierarchically smaller systems means parallel connection synchronisation cell kz considered 
analogously define interconnections po systems diagrams results colimits analogously proposition proposition category po systems cocomplete 
words po systems may constructed hierarchically 
relate results sheaf theoretic model monteiro pereira categorical systems slogan objects sheaves showing po system specification gives rise canonical way sheaf :10.1.1.52.4296
definition sheaf objects po system op obj complete heyting algebra sheaves 
morphism sheaves objects system specification morphism functor part distributes greatest lower bounds 
order construct sheaf objects po system show partial order gives rise complete heyting algebra 
definition partially ordered set topology complete heyting algebra omega omega omega collection downwards closed subsets subsets 
define functor op omega op hc fx cg 
fact omega functor category partial orders category complete heyting algebras left adjoint forgetful functor views complete heyting algebra partial order unit adjunction 
construct sheaves objects follows 
definition po system op obj omega omega op obj functor takes downwards closed subset limit diagram op 
op obj 
proposition omega sheaf objects 
proof proposition uses basic properties limits omit details 
omega defined limits projection omega hc sc 
fact natural transformation omega morphism system specifications omega morphism satisfies special property expresses canonicity construction omega theorem sheaf objects 
system specification morphism unique morphism sheaves omega 
theorem states adjunction po systems sheaves objects view omega best possible way extending sheaf objects 
speculations simple formalisation object classes systems objects studied ways systems objects may interconnected 
motivation account comes goguen diaconescu independent sum construction captures parallel composition synchronisation 
monteiro pereira sheaf theoretic model concurrency limits category monoids obtain commutativity properties express truly concurrent parallel composition 
goguen model behaviour parallel composition means limit constructions take step objects sheaves paradigm giving adjunction po systems sheaves :10.1.1.52.4296
expect general notion sheaf functor category grothendieck topology obtain adjunction system specifications sheaves objects 
definition object class specification similar definitions automata categories 
definition motivated goguen diaconescu independent sum construction hidden sorted algebra interesting examine relationship nerode equivalence automata theory behavioural equivalence hidden sorted algebra 
mazurkiewicz process monoids suggests relation nerode equivalence 
important aspect object orientation covered object creation deletion 
possible treat simple way looking restrictions systems subcategories 
system functor obj deleting object correspond restricting subcategory similarly object creation correspond extending 
approach dynamic systems interesting area research 
interesting exciting area intend explore relationship sheaf theoretic models objects logic toposes 
topos internal logic kind intuitionistic type theory 
category sheaves particular category form topos possible logic express constructively prove useful properties systems objects 
category right actions monoid topos interesting examine internal logic means reasoning models specifications 
monoids capture structure programs somewhat arbitrary topos representations group appropriate free group structure programs 
jiri ad amek 
observability nerode equivalence concrete categories 
editor fundamentals computation theory 
springerverlag lecture notes computer science 
michael arbib ernest manes 
machines category expository 
siam review 
michael barr charles wells 
category theory computing science 
prentice hall 
corina 
distributed semantics foops 
technical report prg tr programming research group university oxford 
jos felix costa am sernadas cristina sernadas 
object inheritance subtyping 
acta informatica 
edsger dijkstra 
unification calculi 
manfred broy editor program design calculi pages 
springer verlag 
rakesh 
general definition safety liveness 
master thesis school electrical engineering comp 
sci washington state univ 
hans dieter ehrich joseph goguen am sernadas 
categorial theory objects observed processes 
de bakker willem de roever rozenberg editors foundations object oriented languages 
springer verlag lecture notes computer science 
joseph goguen 
mathematical representation hierarchically organised systems 
editor global systems dynamics pages 
karger 
joseph goguen 
minimal realization machines closed categories 
bulletin american mathematical society 
joseph goguen 
systems minimal realization 
proceedings ieee conf 
decision control pages 
joseph goguen 
discrete time machines closed monoidal categories 
journal computer system sciences 
joseph goguen 
objects 
international journal general systems 
joseph goguen 
categorical manifesto 
mathematical structures computer science 
joseph goguen 
types theories 
george michael reed andrew william roscoe ralph wachter editors topology category theory computer science pages 
oxford university press 
joseph goguen :10.1.1.52.4296
sheaf semantics concurrent interacting objects 
mathematical structures computer science 
joseph goguen rod burstall 
institutions model theory specification programming 
journal association computing machinery 
joseph goguen diaconescu 
algebraic semantics object paradigm 
hartmut ehrig fernando orejas editors trends data type specification 
springer verlag lecture notes computer science 
joseph goguen malcolm 
proof correctness object representations 
roscoe editor classical mind essays dedicated hoare chapter pages 
prentice hall international 
john gray 
fragments history sheaf theory 
fourman mulvey scott editors applications sheaves 
springer verlag lecture notes mathematics 
hoare 
communicating sequential processes 
prentice hall 
joachim lambek philip scott 
higher order categorical logic 
cambridge university press 
cambridge studies advanced mathematics volume 
saunders mac lane 
categories working mathematician volume graduate texts mathematics 
springer verlag 
saunders mac lane moerdijk 
sheaves geometry logic 
springer verlag 
johan lilius 
sheaf semantics petri nets 
technical report dept computer science helsinki university technology 
malcolm joseph goguen 
proving correctness refinement implementation 
technical monograph prg programming research group oxford university 
mazurkiewicz 
traces histories graphs instances process monoid 
editors mathematical foundations computer science 
springer verlag lecture notes computer science 
luis monteiro fernando pereira 
sheaf theoretic model concurrency 
proc 
logic computer science lics 
ieee press 
benjamin pierce 
basic category theory computer science 
mit press 

sheaf theory volume london mathematical society lecture notes 
cambridge university press 
david wolfram joseph goguen 
sheaf semantics foops expressions extended 
tokoro nierstrasz wegner yonezawa editors proceedings ecoop workshop object concurrent computing pages 
springer verlag lecture notes computer science 
