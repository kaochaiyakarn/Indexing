network working group mathis request comments mahdavi category standards track psc floyd lbnl romanow sun microsystems october tcp selective acknowledgment options status memo document specifies internet standards track protocol internet community requests discussion suggestions improvements 
please refer current edition internet official protocol standards std standardization state status protocol 
distribution memo unlimited 
tcp may experience poor performance multiple packets lost window data 
limited information available cumulative acknowledgments tcp sender learn single lost packet round trip time 
aggressive sender choose retransmit packets early retransmitted segments may successfully received 
selective acknowledgment sack mechanism combined selective repeat retransmission policy help overcome limitations 
receiving tcp sends back sack packets sender informing sender data received 
sender retransmit missing data segments 
memo proposes implementation sack discusses performance related issues 
text document taken directly rfc tcp extensions long delay paths bob braden van jacobson 
authors kevin fall lbnl christian huitema inria van jacobson lbnl greg miller mitre greg lixia zhang xerox parc ucla dave borman allison isi review constructive comments 
mathis standards track page rfc tcp selective options october 
multiple packet losses window data catastrophic effect tcp throughput 
tcp postel uses cumulative acknowledgment scheme received segments left edge receive window acknowledged 
forces sender wait roundtrip time find lost packet unnecessarily retransmit segments correctly received fall 
cumulative acknowledgment scheme multiple dropped segments generally cause tcp lose ack clock reducing throughput 
selective acknowledgment sack strategy corrects behavior face multiple dropped segments 
selective acknowledgments data receiver inform sender segments arrived successfully sender need retransmit segments lost 
transport protocols including netblt clark xtp strayer rdp nadir huitema vmtp cheriton selective acknowledgment 
empirical evidence favor selective acknowledgments simple experiments rdp shown disabling selective acknowledgment facility greatly increases number retransmitted segments lossy high delay internet path partridge 
simulation study kevin fall sally floyd fall demonstrates strength tcp sack non sack tahoe reno tcp implementations 
rfc vj describes possible implementation sack options tcp 
unfortunately deployed internet disagreement sack options conjunction tcp window shift option initially described rfc revised jacobson 
propose slight modifications sack options proposed rfc 
specifically sending selective acknowledgment received data reduces need long sack options keshav mathis 
addition sack option carries full bit sequence numbers 
modifications represent changes proposal rfc 
sack easier implement address concerns robustness 
selective acknowledgment extension uses tcp options 
enabling option sack permitted may sent syn segment indicate sack option connection established 
sack option may sent established connection permission sack permitted 
mathis standards track page rfc tcp selective options october sack option included segment sent tcp receiving data tcp sending data refer tcp data receiver data sender respectively 
consider particular simplex data flow data flowing reverse direction connection treated independently 

sack permitted option byte option may sent syn tcp extended receive presumably process sack option connection opened 
sent non syn segments 
tcp sack permitted option kind kind length 
sack option format sack option convey extended acknowledgment information receiver sender established tcp connection 
tcp sack option kind length variable kind length left edge st block right edge st block 
left edge nth block right edge nth block mathis standards track page rfc tcp selective options october sack option sent data receiver inform data sender non contiguous blocks data received queued 
data receiver awaits receipt data means retransmissions fill gaps sequence space received blocks 
missing segments received data receiver acknowledges data normally advancing left window edge number field tcp header 
sack option change meaning number field 
option contains list blocks contiguous sequence space occupied data received queued window 
contiguous block data queued data receiver defined sack option bit unsigned integers network byte order left edge block sequence number block 
right edge block sequence number immediately sequence number block 
block represents received bytes data contiguous isolated bytes just block left edge block just block right edge block received 
sack option specifies blocks length bytes bytes available tcp options specify maximum blocks 
expected sack conjunction timestamp option jacobson takes additional bytes plus bytes padding maximum sack blocks allowed case 
sack option advisory notifies data sender data receiver received indicated segments data receiver permitted discard data reported sack option 
discussion appears section consequences advisory sack particular data receiver may drop data 
mathis standards track page rfc tcp selective options october 
generating sack options data receiver behavior data receiver received sack permitted option syn connection data receiver may elect generate sack options described 
data receiver generates sack options circumstance generate permitted circumstances 
data receiver received sack permitted option connection send sack options connection 
sent sack options included acks ack highest sequence number data receiver queue 
situation network lost mis ordered data receiver holds non contiguous data queue 
rfc section discusses reasons receiver send acks response additional segments received state 
receiver send ack valid segment arrives containing new data duplicate acks bear sack option 
data receiver chooses send sack option rules apply sack block immediately kind length fields option specify contiguous block data containing segment triggered ack segment advanced acknowledgment number field header 
assures ack sack option reflects change data receiver buffer queue 
data receiver include distinct sack blocks possible sack option 
note maximum available option space may sufficient report blocks receiver queue 
sack option filled repeating reported sack blocks sack blocks previous sack options subsets sack block included sack option constructed 
assures normal operation segment remaining part non contiguous block data held data receiver reported successive sack options large window tcp implementations rfc 
sack block sack blocks sack option may listed arbitrary order 
mathis standards track page rfc tcp selective options october important sack option reports block containing received segment provides sender date information state network data receiver queue 

interpreting sack option retransmission strategy data sender behavior receiving ack containing sack option data sender record selective acknowledgment 
data sender assumed retransmission queue contains segments transmitted acknowledged sequence number order 
data sender performs re packetization retransmission block boundaries sack option receives may fall boundaries segments retransmission queue pose serious difficulty sender 
possible implementation sender behavior follows 
suppose segment retransmission queue new flag bit indicate particular segment reported sack option 
acknowledgment segment arrives containing sack option data sender turn bits segments selectively acknowledged 
specifically block sack option data sender turn flags segments retransmission queue wholly contained block 
requires straightforward sequence number comparisons 
bit turned result processing received sack option data sender skip segment retransmission 
segment bit turned highest segment available retransmission 
retransmit timeout data sender turn bits timeout indicate data receiver 
data sender retransmit segment left edge window retransmit timeout bit segment 
segment dequeued buffer freed left window edge advanced 
mathis standards track page rfc tcp selective options october congestion control issues document attempt specify detail congestion control algorithms implementations tcp sack 
congestion control algorithms de facto standard tcp implementations preserved stevens 
particular preserve robustness presence packets reordered network recovery triggered single ack reporting packets receiver 
recovery data sender limits number segments sent response ack 
existing implementations limit data sender sending segment reno style fast recovery segments slow start jacobson 
aspects congestion control reducing congestion window response congestion similarly preserved 
time outs fall back mechanism detecting dropped packets unchanged sack option 
data receiver allowed discard data retransmit timeout occurs data sender ignore prior sack information determining data retransmit 
research congestion control algorithms may take advantage additional information provided sack 
area research concerns modifications tcp wireless satellite environment packet loss necessarily indication congestion 

efficiency worst case behavior return path carrying acks sack options lossless block sack option packet sufficient 
segment arriving data receiver holds discontinuous data cause data receiver send ack sack option containing altered block receiver queue 
data sender able construct precise replica receiver queue union sack blocks 
mathis standards track page rfc tcp selective options october return path lossless sack option defined include sack block single packet 
redundant blocks sack option packet increase robustness sack delivery presence lost acks 
receiver time stamp option jacobson sack option room include sack blocks 
sack block generally repeated times necessary successive ack packets 
ack packets reporting particular sack block dropped sender assume data sack block received unnecessarily retransmit segments 
deployment tcp options may reduce number available sack blocks 
reduce redundancy sack delivery presence lost acks 
exposure tcp sack regard unnecessary retransmission packets strictly exposure current implementations tcp 
worst case conditions necessary sender needlessly retransmit data discussed detail separate document floyd 
older tcp implementations sack option unfairly competing sack capable tcps 
issue discussed detail floyd 

sack option examples examples attempt demonstrate proper behavior sack generation data receiver 
assume left window edge data transmitter sends burst segments containing data bytes 
case segments received dropped 
data receiver return normal tcp ack segment acknowledging sequence number sack option 
mathis standards track page rfc tcp selective options october case segment dropped remaining received 
receiving packets data receiver return tcp ack segment acknowledges sequence number contains sack option specifying block queued data triggering ack left edge right edge segment lost case nd th th th segments dropped 
data receiver acks packet normally 
third fifth seventh packets trigger sack options follows triggering ack block nd block rd block segment left right left right left right edge edge edge edge edge edge lost lost lost lost mathis standards track page rfc tcp selective options october suppose point th packet received order 
data badly network nd packet retransmitted lost th packet retransmitted 
point data receiver sack blocks report 
data receiver replies selective acknowledgment triggering ack block nd block rd block segment left right left right left right edge edge edge edge edge edge suppose point nd segment received 
data receiver replies selective acknowledgment triggering ack block nd block rd block segment left right left right left right edge edge edge edge edge edge 
data receiver note data receiver permitted discard data queue acknowledged data sender data reported sack option 
discarding packets discouraged may receiver runs buffer space 
data receiver may elect keep data reported sack option 
case receiver sack generation additionally qualified sack block reflect newest segment 
newest segment going discarded receiver discarded adjacent segments sack block report minimum left right edges newest segment 
newest segment sack blocks report old data longer held receiver 
data receiver may discard data reported sack option sender discard data acknowledged acknowledgment number field tcp header 
mathis standards track page rfc tcp selective options october 
security considerations document strengthens weakens tcp current security properties 

cheriton cheriton vmtp versatile message transaction protocol rfc stanford university february 
clark clark lambert zhang netblt bulk data transfer protocol rfc mit march 
fall fall floyd comparisons tahoe reno sack tcp ftp ftp ee lbl gov papers sacks ps december 
floyd floyd issues tcp sack ftp ftp ee lbl gov papers issues sa ps january 
huitema huitema experiment high speed file transfer satellite links th data communication symposium mexico october 
jacobson jacobson congestion avoidance control proceedings sigcomm stanford ca august 
jacobson jacobson braden tcp extensions paths rfc october 
jacobson jacobson braden borman tcp extensions high performance rfc may 
keshav keshav presentation internet research group november 
mathis mathis mahdavi tcp forward acknowledgment option presentation internet research group june 
partridge partridge private communication february 
postel postel transmission control protocol darpa internet program protocol specification rfc darpa september 
stevens stevens tcp ip illustrated volume protocols addison wesley 
mathis standards track page rfc tcp selective options october strayer strayer dempsey weaver xtp xpress transfer protocol 
addison wesley publishing 
sax reliable data protocol rfc bbn july 

authors addresses matt mathis jamshid mahdavi pittsburgh supercomputing center fifth ave pittsburgh pa mathis psc edu mahdavi psc edu sally floyd lawrence berkeley national laboratory road berkeley ca floyd ee lbl gov allyn romanow sun microsystems garcia ave mpk mountain view ca allyn eng sun com mathis standards track page 
