type inference builds short cut deforestation olaf lehrstuhl fur informatik ii rwth aachen aachen germany informatik rwth aachen de deforestation optimises functional program transforming create certain intermediate data structures 
short cut deforestation deforestation method single local transformation rule 
return short cut deforestation expects producer consumer intermediate structure certain form 
warm fusion proposed automatically transform functions form 
unfortunately costly hard implement 
starting fact short cut deforestation parametricity theorem second order typed calculus show required form list producer derived type inference 
typability second order typed calculus undecidable 
linear time algorithm solves partial type inference problem controlled inlining polymorphic type instantiation su ces deforestation 
resulting new short cut deforestation algorithm cient removes intermediate lists original 
deforestation lazy functional programs functions glued intermediate data structure produced function consumed 
example function tests element list xs satisfies predicate may defined follows haskell ph xs map xs acm copyright notice 
copyright association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
acm sigplan international conference functional programming icfp function map applies elements xs yielding list boolean values 
function combines boolean values logical operation 
john hughes influential hug relevance obtained modularity points lazy evaluation programming style practicable 
contrast eager evaluation lazy evaluation ensures boolean list produced cell time 
cell immediately consumed garbage reclaimed 
function runs constant space 
furthermore comes value true production list aborted 
modular programming style come free 
list cell allocated filled taken apart garbage collected 
monolithic definition cient 
false xs xs aim deforestation algorithms automatically transform functional program create intermediate data structures 
say producer consumer data structure fused 
extensive literature various deforestation methods implementation real compilers proved di cult see section 
short cut deforestation response problems short cut deforestation developed glp gil single local transformation foldr build build new function second order type build build short cut deforestation removes intermediate list produced expression build consumed function foldr 
lists common intermediate data structures functional programs 
compiler writer defines list manipulating functions standard library extensively programmers terms build foldr 
example definition map map xs build foldr xs gill implemented short cut deforestation glasgow haskell compiler ghc measured speed ups queens program average large number programs programmed deforestation mind gil 
warm fusion originally second order type build confined deforestation producers defined terms list producing functions standard library 
today glasgow haskell compiler extended type system permits programmer functions build 
asking programmer supply list producers build form runs contrary aim writing clear concise programs 
foldr defining list consumers generally considered modular programming style build enable deforestation 
warm fusion ls developed automatically derive build foldr form generally recursive definitions 
basic idea transforming arbitrary list producer build form rewrite build foldr push foldr term rewriting hoping cancels builds 
expression build form 
transformation abandoned 
method expensive poses substantial problems implementation np 
derivation build type inference di erent cient powerful method transforming arbitrary list producing expression build form fused foldr consumer 
inspired fact short cut deforestation parametricity theorem second order typed calculus 
reduce problem deriving build form producer type inference problem 
fact typability second order typed calculus undecidable wel pose problem developed linear time partial type inference algorithm type annotations second order typed program su ces purposes 
type inference algorithm indicates clearly inlining needed deforestation 
contrast warm fusion need derive build form necessary 
reduce transformation time avoid potential ine ciency build forms 
formally improved short cut deforestation small functional language second order types similar intermediate language core inside glasgow haskell compiler 
structured follows 
section informally idea type inference adapting producer short cut deforestation 
section type inference algorithm simply typed functional language demonstrate method works 
furthermore discuss inlining definitions list functions producer 
section extend type inference algorithm second order typed language build derivation algorithm 
see particular need instantiate polymorphic functions 
discuss section entire program 
section extensions deforestation method 
section compare approach related ones conclude section 
idea fundamental idea short cut deforestation restrict deforestation intermediate lists consumed function foldr 
higher order function uniformly replaces constructors list function empty list constructor constant foldr 
xk 
xk 
foldr just replaces list constructors list produced expression eye catching optimisation replace list constructors compile time foldr unfortunately rule wrong foldr false map map false example constructors definition map part expression needed replaced 
solve problem distinguish constructors build intermediate list list constructors 
producer constructors replaced variables new transformation rule foldr observe definition generally di erent types 
just transformation type correct polymorphic type hold assumption type variable 
express type conditions transformation rule function build introduced foldr build build build function build additional ect computing substitution factored short cut deforestation simple transformation 
strikingly polymorphic type guarantees semantic correctness transformation 
intuitively manufacture value type right types 
formally transformation instance parametricity free theorem wad pit 
validity foldr build rule proved glp gil 
straightforward method obtain replace constructor positions note 
xk syntactic sugar expression 
type constants int int 
type inference variables 
types term variables terms case terms types simply typed language var term abs term app case case type system simply typed language constructor positions type check expression 
type try di erent replacement replacement gives desired type short cut deforestation takes place 
obviously generate test approach prohibitively expensive 
fortunately determine list constructors need replaced pass algorithm infers principal typing 
just replace occurrence new variable occurrence new variable principal type modified producer type variable deforestation possible 
subsequently just look types typing 
types respectively turned back list constructors 
types respectively replaced obtain derived desired form build list producer abstraction list constructors simply typed language syntax simply typed language defined type system 
language essentially simply typed calculus augmented arbitrary mutual recursion case decomposition algebraic data structures 
view data constructors just special term variables 
introduce type inference variables type inference algorithm 
may inside types type constants 
monomorphic language lists elements type int 
view type environment mapping variables types set tuples operator combines type environments assumption domain disjunct 
abbreviate language explicit definitions algebraic data types data 
ck definition implicitly expressed having data constructors type environment 
demand variable binding construct binds di erent term variable 
condition avoids complications scope rules usually enforced inside compilers preliminary renaming pass 
type inference type inference algorithms simply typed calculus usually take untyped term input 
input deforestation typed program want take advantage property 
base type inference algorithm algorithm ly hindley milner type system 
algorithm takes type environment expression type input may contain type variables returns principal typing 
type substitution typing 
furthermore principal typing typing typing exists substitution 
type inference algorithm 
initial substitution additional argument 
say substitution extension substitution written exists substitution 
say principal typing respect typing typing exists substitution 
theorem environment expression type 
typing new type inference variable new type inference variable 
ek case 
xk ek type inference algorithm simply typed language yields principal typing respect 
fails 
proof similar soundness completeness proved ly 
type inference algorithm assume existence unification algorithm 
substitution unifier equation general unifier unifier unifier require return general unifier unifier exists fail 
convenience define 
returns general unifier unifier exists fails 
choose formulate additional substitution presentation algorithm readable indicates cient implementation method 
abstraction list constructors list constructor abstraction algorithm hand example 
typed expression produces list 
int int int int int int int int map int int int int int int 
xs int 
case xs ys map ys map int algorithm replaces list constructor respectively di erent variable respectively existing type annotations far possible just replace type int expression new type inference variable 
furthermore add respectively type environment new type inference variable variable respectively type schemes assure inferred types appropriate consumer argument respectively remaining arguments give type inference variable identity substitution 
example input output look follows int int int int int int int int int int int map int int int int 
xs case xs ys map ys map id int int int int int inferred principal typing easier read apply substitution input int int int int int int int int int int int int int int int int map int int int int int 
xs int 
type constructors int 
type variables type inference variables 
types terms 
additional terms types second order typed language case case type abs type app new type rules second order typed language case xs ys map ys map type environment tells construct result expression construct lists internal expression 
build polymorphic type express producer build form section 
directly consider final fusion step 
consumer foldr variables replaced variables turned back list constructors 
example fusion producer consumer foldr gives int int int int int int int int int int int int map int int int int int int 
xs int 
case xs ys map ys map int general result type inference may contain type inference variables 
subexpressions type inference variable type relevant result type inference variables safely replaced int 
type inference fails fusion possible 
optimisation fail early desired polymorphic type inferred unification algorithm treat constant type inference variable replaced 
inlining external definitions previous example artificial usually definition map part producer 
deforestation requires inlining 
example demonstrates important just inline right hand side definition recursive definition 
experiences implementation deforestation algorithms mar np shown leaving inlining separate transformation pass gives unsatisfactory results 
fact type environment principal typing producer determine variables definitions need inlined 
determining definitions inlined duplicating computations separate art discussed see example san wp 
safe inline functions defined abstraction 
type inference replace type int new type variable expression types variables type environment 
example consider producer map 
replacement list constructors types int type inference algorithm gives typing map int int int int int int int int map special type inference variable type map signifies definition map needs inlined 
need repeat process extended producer 
continue processing right hand side map type substitution 
inline definitions process appears type variable type environment course 
subsequently processed potentially mutually recursive definitions put single binding 
furthermore bound variables need renamed preserve invariant binding construct binds di erent variable 
example output coincides modulo variable names output section 
actual fusion performed described 
contrived cases algorithm may inline list functions 
expect code explosion occur practise algorithm abandon list constructor abstraction inlined code exceeds predefined size 
case new type inference variables 
xk ek new type inference variable new type inference variable modification type inference algorithm second order typed language build derivation polymorphic language extend terms simply typed language type abstraction type application types polymorphic algebraic data types universally quantified types 
additional syntax new type rules 
distinguish type variables may bound types terms type inference variables occur freely 
polymorphic algebraic data types polymorphic constructors need general type rule case 
note write polymorphic list type 
functions build foldr defined follows build 

foldr 


xs 
case xs ys foldr ys foldr build rule takes form foldr build simply typed language demand variable binding construct binds di erent variable bound variables disjunct free variables term variables type variables 
better readability liberal variable names examples 
type inference extension second order typed language 
central importance require treat type variables constants type inference variables may replaced 
place replace type variable typing substitution part result substitution denote substitutions replace type inference variables 
note general sound complete 
case performs test assure bound type variable leave scope 
case expect return universally quantified type 
int id fails finding typing 
algorithm relies fact original producer typable places type abstraction type application known replace list types type inference variables 
principal typing exists list types need substituted type inference variables type environment expression 
limited completeness su ces fusion method 
theorem environment expression types 
exists substitution typing yields principal typing respect 
proof theorem instance theorem proved appendix extended algorithm abstracting list constructors second order typed programs just described section simply typed programs 
di erence replace int 
type intermediate list producer replace respectively new respectively replace type new type inference variable 
instantiation polymorphism problem left 
functions manipulate polymorphic lists example map prevent list constructor abstraction type annotations contain polymorphic list types 
replace occurrences type application variable contains polymorphic list type new variable defined 
type instantiation performed list types replaced type inference variables 
avoid code explosion inline instantiated definition polymorphic variable example consider list producer fst zs bool char unzip fst bool char unzip bool char zs bool instantiation polymorphism replaces occurrences unzip bool char monomorphic unzip fst zs bool char unzip bool char bool char fst bool char unzip zs bool replace occurrences bool new type inference variables replace existing list constructors 
input result type inference look follows 
fst zs bool char unzip bool char char fst char unzip zs id inferred type unzip indicates definition inlined 
original right hand side definition unzip unzip foldr 
foldr 

case case vs ws vs ws processing unzip input result type inference algorithm follows 
note start type substitution obtained previous type inference 
unzip bool char char foldr bool foldr bool char char bool char 
char 
case case vs ws char vs char ws char char bool char char type variable type environment 
list constructor abstraction terminated successfully 
express producer build form follows build fst zs bool char foldr build bool 
bool 

unzip bool char char foldr bool char char bool char 
char 
case case vs ws char vs char ws char char fst char unzip zs bool note producer fst bool char unzip bool char zs fused standard short cut deforestation fst unzip individually expressed build form 
note definition fst needed deforestation inlined 
practise rename inlined variables types preserve invariant binding construct binds di erent variable 
general may instantiated polymorphic variables inline 
instantiations undone 
instantiation method may restrictive note translation hindley milner typed program second order typed language yields program bound expressions type abstracted polymorphic variables occur type applications 
programs intermediate language core glasgow haskell compiler nearly completely form haskell type systems hindley milner type system 
deforestation program program traverse twice 
traversal search potentially expressions foldr furthermore collect definitions bindings may inlined 
note need collect definitions variables return lists list type function arrow type 
suppose find potentially expression 
foldr bool bool true fst bool char unzip bool char zs 
expression try convert producer build form 
foldr bool bool true build bool bool 
build derivation pass fuse foldr build pairs second actual deforestation pass 
bool 
bool true 
reductions put arguments consumer places list constructors 
unzip bool char bool char foldr bool char bool char bool char ys bool char 
case case unzip ys vs ws bool char vs char ws bool char true char fst bool char unzip zs 
idea immediately suggests directly replace right list constructors build derivation pass avoiding completely explicit construction build form 
section 
want stress finding right list constructors list producer information separate issues 
keeping separate increases potential application area build derivation method 
example derive build wrappers list producing functions wrapper worker scheme described ls gil 
furthermore foldr build rule various simple transformations reduction implemented glasgow haskell compiler 
note derive build form needed deforestation 
avoid potential ine ciencies introduced superfluous build forms observed gil 
removing costs intermediate data structure deforestation brings subexpressions producer consumer previously separated intermediate data structure 
new opportunities optimising transformations arise deforestation 
consider example expression map sum inits function inits returns list prefixes argument 
short cut deforestation pass fuses inits 
map sum result fusion 
sum positioned production inner lists 
fused second deforestation pass 
extensions fusion partial producers list append function poses problem foldr build rule 
expression xs ys produce resulting list xs copied ys 
modifying definition copy ys done glp ls tm runs contrary aim eliminating data structures 
fortunately gill gil discovered generalisation build augment 

xs 
xs foldr build rule foldr augment xs foldr xs foldr augment rule eliminate intermediate list part produced partial producer 
come back example xs ys 
type inference indicates definition needs inlined 
type inference definition type environment contains ys ys may shared bound 
non variable list argument augment 
augment form example augment 


vs 
ws 
case vs ws zs zs ws xs ys foldr build rule special instance foldr augment rule replace xs reduce obtain 
need build 
prefer build intuitive wildly known 
algebraic data types lists type method transforming producer build form specific lists algebraic data types 
consider example type arbitrarily branching trees data rosetree node rosetree build function type determined data constructor type node rosetree rosetree rosetree 

rosetree node note canonical encoding data type rosetree second order calculus isomorphism type just canonical encoding data type build isomorphism type cf 
pit 
furthermore algebraic data type comes catamorphism consumes elements regular way see mh catamorphism defined general rosetree 

rosetree 
case node ts map rosetree ts rule instance parametricity theorem type node node obviously derive form expression type rosetree just easily build form list typed expression 
deforestation additionally need consumer defined terms catamorphism data type 
catamorphism defined explicitly user 
compiler learn name catamorphism directive 
alternatively consumer automatically transformed catamorphism form algorithm warm fusion 
handle mutually recursive data types 
catamorphisms set mutually recursive data types mutually recursive 
argument build polymorphic type variables types set need special type inference variables build derivation 
limited regular covariant algebraic data types 
algebraic data type called regular recursive calls body form head definition 
counter example data twist nil cons twist data type called contravariant recursive call appears contravariant position body argument function type constructor data infinite infinite catamorphisms contravariant types complex covariant ones non regular types general definition unknown mh 
furthermore validity parametricity theorems proved regular covariant algebraic data types pit 
limitations mild nearly types appear practise regular covariant 
related wadler wad coined term deforestation 
method fold unfold transformations see san proof correctness presentation approach 
hand methods short cut deforestation abandon treatment generally recursive definitions favour regular form recursion 
methods fusion laws parametricity theorems 
authors take di erent points view regular forms recursion obtained need provided programmer automatically inferred arbitrary recursive programs transformation 
mfp gives overview fusion laws 
hylomorphisms tm enable description regular producers regular consumers single form 
hit presents algorithm transforming generally recursive definitions hylomorphisms 
algorithm transform definitions real world programs 
feg describes ambitious method deriving recursion skeleton definition parametricity theorem fusion 
sketched algorithms far implementation 
generally implementations deforestation problems controlling inlining avoid code explosion mar np 
foldr build rule fusion laws regular producers consumers require transformation arbitrary expressions 
methods automatically transforming programs regular form purely syntax directed raise question generally applicable 
question transformation changes ciency program usually answered 
type inference method adapting producers intermediate data structures short cut deforestation 
showed problem abstracting data constructors arbitrary producer reduced partial type inference problem 
linear time algorithm solves type inference problem 
inlining polymorphic type instantiation transforms producer build form suitable fusion foldr consumer 
method cient easier implement warm fusion method ls 
believe able transform producers desired form 
claim di cult prove complete definition rewriting performed warm fusion required 
example section demonstrates warm fusion technique transforming functions build form function basis insu cient 
functions comprise producer fst unzip expressed build form 
furthermore type method clearly indicates definitions need inlined control searched mar np 
optimising compiler high level programming language undo abstractions program 
transforms modular concise program cient longer code 
avoid unnecessary inlining 
method basically just replaces list constructors producer performs complex transformation transparent mar programmer easily determine source program deforestation applicable 
furthermore ect transformation ciency calculable 
showed short cut deforestation method specific lists algebraic data types 
require additional mechanism ensures consumer data structure defined terms respective catamorphism 
algorithm adapted hand large number list producers fusion 
currently working implementation short cut deforestation algorithm glasgow haskell compiler 
compiler designed easily extendible compiler optimisations chi 
believe idea type inference algorithms fruitful transformations parametricity theorems 
frank huch simon peyton jones fruitful discussions suggestions improving 
chi olaf 
adding optimisation pass glasgow haskell compiler 
available www informatik rwth aachen 
de november 
feg leonidas fegaras 
fusion free 
technical report cse oregon graduate institute science technology january 
ghc glasgow haskell compiler 
research microsoft com users ghc 
gil andrew gill 
cheap deforestation nonstrict functional languages 
phd thesis glasgow university 
glp andrew gill john launchbury simon peyton jones 
short cut deforestation 
fpca conference functional programming languages computer architecture pages copenhagen denmark june 
acm press 
hit hu iwasaki takeichi 
deriving structural hylomorphisms recursive definitions 
proceedings st acm sigplan intl 
conf 
functional programming icfp philadelphia pa usa may pages new york 
acm press 
hug hughes 
functional programming matters 
computer journal 
ls john launchbury tim sheard 
warm fusion deriving build recursive definitions 
conf 
record th acm sigplan sigarch intl 
conf 
functional programming languages computer architecture fpca la jolla san diego ca usa june pages 
acm press new york 
ly lee yi 
proofs folklore polymorphic type inference algorithm 
acm transactions programming languages systems july 
mar simon marlow 
deforestation higher order functional programs 
phd thesis glasgow university 
mfp erik meijer maarten fokkinga ross paterson 
functional programming bananas lenses envelopes barbed wire 
john hughes editor functional programming languages computer architecture pages 
springer verlag june 
mh erik meijer graham hutton 
bananas space extending fold unfold exponential types 
proceedings seventh international conference functional programming languages computer architecture fpca pages la jolla california june 
acm sigplan sigarch ifip wg acm press 
john martin odersky david turner philip wadler 
call name callby value call need linear lambda calculus 
th international conference mathematical foundations programming semantics new orleans march april 
np nemeth simon peyton jones 
design warm fusion 
proceedings th international workshop implementation functional languages pages 
ph simon peyton jones john hughes haskell non strict purely functional language 
www haskell org february 
pit pitts 
parametric polymorphism operational equivalence 
technical report cambridge university computer laboratory 
preliminary version appeared proceedings second workshop higher order operational techniques semantics ii stanford ca december electronic notes theoretical computer science 
san andre santos 
compilation transformation non strict functional languages 
phd thesis glasgow university department computing science 
san sands 
proving correctness automatic program transformations 
theoretical computer science october 
tm takano erik meijer 
shortcut deforestation calculational form 
proceedings seventh international conference functional programming languages computer architecture fpca pages la jolla california june 
acm sigplan sigarch ifip wg acm press 
christian tu ers 
erweiterung des compilers um die von 
master thesis rwth aachen 
wad philip wadler 
theorems free 
functional programming languages computer architecture pages 
acm 
wad philip wadler 
deforestation transforming programs eliminate trees 
theoretical computer science june 
wel wells 
typability type checking second order calculus equivalent undecidable 
proceedings ninth annual ieee symposium logic computer science pages paris france july 
ieee computer society press 
wp keith wansbrough simon peyton jones 
polymorphic type 
conference record popl nd acm sigplan sigact symposium principles programming languages 
proof theorem theorem prove slightly stronger theorem 
property typing typing exists weak induction 
hand true result exists call generally creates new variables may substitute di erently 
prove type inference variables newly created ones 
define set type inference variables 
write type inference variables write exists 
non type type outermost level 
write exists type non type 
idea extending obtain variables need replaced non types 
remember treats type variables constants type inference variables may replaced 
denote substitutions replace type inference variables 
theorem soundness completeness typing variables appearing creates new variables returns 
proof union lemma lemma 
lemmas proof main lemma 
lemma substitution typing substitution 
proof induction derivation lemma 

proof induction replaces type variable 
lemma proof directly definition lemma properties 
returns 

returns 

returns proof follows prerequisite returns general unifier unifier exists 
note algorithm defined recursively structure term argument structure embedded types 
substitutions replace type inference variables increase size actual term structure 
prove properties structural induction term argument applying induction hypothesis recursive calls lemma extends substitutions returns 
proof induction separate main proof proof soundness proof completeness proof soundness repeat large parts proof completeness case soundness requires existence typing 
avoid complication adding test corresponds condition type abs 
want prove purpose test necessary 
lemma typing variables appearing creates new variables returns 
proof structural induction term case typing derived var 
furthermore lemma returns 
furthermore rule var follows 
case typing derived term abs 
exists new variable 
follows lemma returns follows induction hypothesis creates new variables returns 
lemma 

follows creates new variables returns furthermore apply term abs obtain 
case typing derived rule term app 
exists new variable 
follows induction hypothesis creates new variables returns lemma lemma gives induction hypothesis creates new variables returns 
lemma follows creates new variables returns furthermore substitution lemma assures 
apply term app obtain 
case typing derived rule type abs 
new type variable 
follows lemma returns induction hypothesis creates new variables returns 
lemma 
follows creates new variables returns typing know variables appearing follows 
apply type abs obtain 
case 
typing derived type app 
new variable 
follows induction hypothesis creates new variables returns exists substitution type non type 
follows lemma type equal 
unifier returns follows creates new variables returns lemma follows 
follows substitution lemma follows apply type app obtain 
proofs remaining cases similar ones 
