inheritance workflows approach tackling problems related change van der aalst basten dept technology management eindhoven university technology netherlands aalst tm tue nl dept electrical engineering eindhoven university technology netherlands basten tue nl dept computing science eindhoven university technology netherlands inheritance key issues object orientation 
inheritance mechanism allows definition subclass inherits features specific superclass 
adapting workflow process definition specific needs ad hoc change changing structure workflow process result reengineering efforts evolutionary change inheritance concepts useful check new workflow process inherits desirable properties old workflow process 
today workflow management systems problems dealing ad hoc changes evolutionary changes 
result workflow management system support dynamically changing workflow processes workflow processes supported rigid manner changes allowed handled outside workflow management system 
propose inheritance preserving transformation rules workflow processes show rules avoid problems dynamic change bug 
dynamic change bug refers errors introduced migrating case process instance old process definition new 
transfer old process new process lead duplication skipping tasks deadlocks livelocks 
restricting change inheritance preserving transformation rules guarantees transfers problems 
transformation rules extract aggregate management information case version workflow process avoided 
key words workflow management petri nets inheritance adaptive workflow dynamic change management information contents preliminaries notations bags 
labeled place transition nets 
branching bisimilarity 
wf nets 
soundness 
inheritance inheritance relations 
inheritance preserving transformation rules 
part done author sabbatical leave large scale distributed information systems lsdis laboratory university georgia 
inheritance workflow management domain ad hoc change 
evolutionary change 
workflow templates 
commerce 
dynamic change valid transfer rules 
transfer cases superclass subclass 
transfer cases subclass superclass 
related dynamic change 
combining approach inheritance change regions 
management information management information nets 
maximal common divisors minimal common multiples workflow process definitions inheritance preserving transformation rules management information 
management information workflow management domain 
tool support verifying soundness 
supporting inheritance 
supporting dynamic change 
providing aggregate management information 
workflow management technology aims automated support coordination business processes reduce costs flow times increase quality service productivity :10.1.1.101.5199
critical challenge workflow management systems ability respond effectively process changes 
changes may range ad hoc modifications process single customer complete restructuring workflow process improve efficiency 
today workflow management systems ill suited dealing change 
typically support idealized version preferred process 
real run time process variable process specified design time 
way handle changes go system back 
users forced bypass workflow management system quite frequently system liability asset 
adaptive workflow aims providing process support similar contemporary workflow systems way workflow system able deal process changes 
papers workshops show problems related workflow change difficult solve :10.1.1.38.8630:10.1.1.45.6317
take challenge find techniques add flexibility loosing support provided today systems 
typically types process changes ad hoc changes evolutionary changes 
ad hoc changes handled case case basis affect case process instance selected group cases 
change result error rare event special demands customer 
exceptions result ad hoc changes 
typical example ad hoc change need skip task case emergency 
workflow process definition resulting ad hoc change called variant workflow process 
ad hoc change typically leads variants workflow process running parallel 
evolutionary change structural nature certain moment time workflow changes new cases arrive system 
change result new business strategy reengineering efforts permanent alteration external conditions change law 
evolutionary change typically initiated management improve efficiency responsiveness forced changing market demands 
workflow process definition resulting evolutionary change called version workflow process 
new cases handled version process 
existing cases progress may influenced evolutionary change 
acceptable handle running cases old way 
situations cases need transferred old version new version 
ad hoc evolutionary change inevitably lead situations multiple variants versions active time cases need migrated variant version 
today workflow management systems problems dealing situations 
term dynamic change problem cf 
refer anomalies caused transferring cases process 
term management information problem refer problem providing aggregate overview progress case multiple versions variants 
trend increasingly dynamic situation ad hoc evolutionary changes needed improve customer service reduce costs continuously 
problems relevant generation workflow management systems 
petri nets illustrate process related concepts 
fact mainly restricted class petri nets class called wf nets 
wf net source place sink place nodes path source sink 
readers familiar petri nets workflow modeling referred section 
prepare shipment record shipment send goods prepare shipment send bill record shipment send goods send bill dynamic change bug 
shows workflow process definitions illustrating dynamic change problem 
sequential workflow process left changed workflow process tasks send goods send bill executed parallel right problems possible transfer case left right 
sequential process possible states states corresponds state parallel process 
example state token mapped state token cases tasks prepare shipment send goods executed send bill record shipment need executed 
consider situation parallel process changed sequential means cases need moved right hand side process left hand side process 
states right hand side process problem state token token mapped token state token token mapped token state token prepare shipment send bill executed causes problems corresponding state sequential process possible execute send bill send goods 
example shows straightforward migrate old cases new process change 
problem illustrated result reducing degree parallelism making process sequential 
similar problems occur ordering tasks changed sequential tasks swapped 
extending workflow new tasks removing parts aggregating group tasks single task may result similar problems 
changing workflow fly running cases transferred new process definition dynamic change bug occur 
problem relevant workflow management systems truly supporting adaptive workflow 
today workflow management systems able handle problem 
systems typically versioning mechanism change leads new version cases refer appropriate version 
case starts version process continue version 
versioning mechanism may suitable situations 
administrative process short flow time candidate versioning mechanism 
situations mechanism appropriate 
case long flow time acceptable handle existing cases old way 
consider example process handling mortgage loans 
typically duration years 
mortgage process changes times year lead dozens different versions running parallel 
reduce costs keep processes manageable number active versions versions cases kept minimum 
processes shorter flow time may undesirable versions running simultaneously 
fact may legal reasons starting new step process mandatory forcing transfer cases new process 
unfortunately problems illustrated direct transfer hazardous 
note dynamic change problem relevant ad hoc change evolutionary change 
problem prominent evolutionary change potentially cases need transferred 
problem related change problem may lead multiple active versions variants process difficult provide aggregate management information 
consider 
assume workflow process definitions versions workflow process 
point time left hand process may contain running cases state state state right hand process may contain running cases state tokens state tokens provide aggregate management information numbers combined way result provides meaningful representation amount progress 
example solution difficult state left hand process definition corresponding state right hand process definition 
result aggregate management information collected projecting states cases right hand process definition 
doing yields total cases tasks send goods send bill record shipment need executed cases send goods record shipment need performed cases state send bill record shipment need done case task record shipment needs performed 
possible summarize information counting number tokens resulting place right hand process definition projecting cases process definition places contain tokens place contains tokens place contains tokens place contains tokens contains tokens 
example complicated general straightforward obtain aggregate management information different process definitions complex number larger 
management information problem explained occurs multiple versions variants workflow process avoided 
evolutionary change number versions limited 
fact cases transferred just active version running cases version 
situations possible desirable transfer cases process 
legal managerial practical reasons prevent transfer cases 
situation multiple active versions process 
ad hoc change may lead situation number variants may order magnitude number cases 
variants customized accommodate specific needs 
manage workflow process different versions variants desirable aggregated view progress 
note manufacturing process manager get impression progress walking factory 
workflow process handling digitized information possible 
utmost importance supply manager tools obtain condensed accurate view workflow processes 
problem extracting aggregate management information relevant ad hoc evolutionary change prominent ad hoc change 
tackle dynamic change problem management information problem propose approach inheritance preserving transformation rules introduced :10.1.1.33.2525
inheritance key concepts object orientation 
classes objects object oriented design correspond workflow process definitions cases workflow management context 
object oriented design inheritance typically restricted static aspects data methods object class 
workflow management dynamic behavior cases prime importance 
inheritance preserving transformation rules focus workflow process definitions petri net setting 
inheritance relations branching bisimilarity compare processes combination notions encapsulation abstraction 
encapsulation corresponds blocking tasks abstraction corresponds hiding tasks 
restricting process changes inheritance preserving transformation rules direct transfer possible state avoiding problems illustrated 
note inheritance rules avoid dynamic change bug preventive treatment problem 
changes shown allowed cure postpone transfer case problems 
result case may active versions workflow process 
may reasons having multiple active versions law cases forced handled old way 
case ad hoc workflow multiple active versions process called variants 
presence multiple active versions variants process obscure status workflow 
notions encapsulation abstraction inspired process algebraic concepts see 
process algebra terms encapsulation abstraction different meaning terms object oriented design 
fortunately inheritance preserving transformation rules construct aggregate management information 
inheritance notions allow definition concepts maximal greatest common divisor mcd gcd minimal common multiple mcm lcm set variants versions 
concepts create condensed overview 
clearly dynamic change problem management information problem related 
solving dynamic change problem instantly migrating cases single version process need construct aggregate management information just active version 
ad hoc changes inevitably lead multiple variants illustrated multiple active versions workflow process unavoidable 
remainder organized follows 
section introduce basic concepts techniques going 
approach special subclass petri nets wf nets notion correctness named soundness 
section introduces inheritance notions inheritance preserving transformation rules 
section inheritance workflow management context discussed 
section tackles problems related dynamic change inheritance preserving transformation rules 
section shown results create aggregate management information 
section consider tools support notions 
section summarizes results 
preliminaries section introduces techniques remainder 
standard definitions bags petri nets 
advanced concepts branching bisimilarity workflow nets soundness 
preliminaries required define inheritance concepts unambiguous way 
notations bags bags defined finite multi sets elements alphabet bag alphabet considered function natural numbers finite number elements assigned non zero function value 
bag alphabet denotes number occurrences called cardinality set bags denoted 
explicit enumeration bag notation similar notation sets square brackets curly brackets superscripts denote cardinality elements 
example denotes bag elements elements bag contains elements holds predicate symbols alphabet consideration 
denote individual elements bag symbol sets bag alphabet element 
sum bags denoted defined 
difference denoted defined max 
binding sum difference left associative 
restriction domain denoted defined 
restriction binds stronger sum difference 
notion defined expected bag denoted 
note finite set elements denotes unique bag function yielding element set 
finite sets bags 
bag finite subset yield bags defined straightforward manner 
labeled place transition nets section define variant classic petri net model labeled place transition nets 
elaborate petri nets reader referred 
universe identifiers set action labels 
definition 
labeled net labeled place transition net simply labeled net tuple 
finite set places 
finite set transitions 
set directed arcs called flow relation 
labeling function 
petri net literature class petri nets introduced definition referred class labeled ordinary nets distinguish class petri nets allows arc place transition 
labeled net 
elements referred nodes 
node called input node node exists directed arc fy node called output node exists directed arc place called input place output place transition called input output transition 
set input nodes node called preset set output nodes called postset 
auxiliary functions defined assign node preset postset respectively 
node fy 
note preset postset functions depend context net function applies 
node nets clear net preset postset functions refer 
augment preset postset notation name net confusion possible preset node net postset node net labeled net defined static structure 
shows graphical representation net 
places represented circles transitions represented rectangles 
attached place identifier 
attached transition label 
transition labeling needed reasons 
net modeling workflow process may contain transitions referring single task identified label workflow process 
second transition labels mechanism tasks 
sake simplicity assume transition labels identical transition identifiers explicitly stated 
labeled nets dynamic behavior 
behavior net determined structure state 
express state net places may contain tokens 
labeled nets tokens simple markers see 
distribution tokens places called marking net 
definition 
marked labeled net marked labeled net pair labeled net bag denoting marking net 
set marked labeled nets denoted registered ready send letter classify complaint cust contacted classified contact department file dossier register pending complaint contact customer take action contact cust labeled net 
dynamic behavior marked labeled nets defined called firing rule simply transition relation defining change state marked net executing action 
define firing rule necessary formalize net allowed execute certain action 
definition 
transition enabling marked labeled net 
transition enabled denoted input places contains token 
transition labeled net enabled net fire transition 
firing removes token input places adds token output places 
means firing marked net changes marked net 
definition 
firing rule firing rule smallest relation satisfying 
labeled net shown illustrate firing rule 
net models processing complaints complaints desk fictitious complaints desk handles complaints customers products produced complaint registered classified 
depending classification complaint letter sent customer inquiry started 
inquiry starts consultation department involved followed discussion customer 
inquiry necessary actions taken 
dossier filed 
shows process definition configure workflow management system employees complaints desk 
marking shown state token place transition register transition enabled marking 
firing register results state pending complaint registered tokens produced 
classify complaint fire followed send letter contact department contact customer take action 
file dossier fire 
note file dossier consumes tokens produces token 
firing rule determines set called reachable markings marked net 
marking reachable initial marking marked net exists sequence enabled transitions execution leads uses notations sequences 
alphabet identifiers 
sequence length natural number alphabet function 
sequence length zero called empty sequence written 
sake readability sequence positive length usually written function values example sequence written aab 
set sequences arbitrary length alphabet written definition 
firing sequence marked labeled net sequence called firing sequence natural number exist markings 
transitions 


note implies firing sequence 
sequence said enabled marking denoted 
firing sequence results unique marking denoted 
marked labeled net shown enabled firing sequences 
example firing sequence register classify complaint contact department enabled 
executing sequence results marking pending complaint contact cust 
mentioned marking labeled net reachable firing sequence leading initial marking marking 
definition 
reachable markings set reachable markings marked labeled net denoted defined set 
consider example marked labeled net shown 
firing sequences leading marking 
reachable 
total markings reachable 
purpose analyzing processes defined nets properties defined studied 
properties refer net structure refer dynamic behavior marked net 
definitions refer structural properties 
definition uses standard notations inverse relation reflexive transitive closure 
definition 
connectedness labeled net weakly connected simply connected nodes net strongly connected nodes remainder assume nets weakly connected 
assume nets nodes 
nets places transitions sense 
structural property called free choice property 
definition 
free choice net free choice net labeled net definition transitions free choice nets characterized fact transitions sharing input place share input places 
pragmatic point view class free choice nets particular interest workflow management systems diagramming technique corresponds free choice nets 
class free choice nets combines reasonable expressive power strong analysis techniques 
consequently free choice nets extensively studied literature 
important results free choice nets brought 
example property refers dynamics marked net boundedness 
definition 
boundedness marked labeled net bounded set reachable markings finite 
bounded net number tokens place bounded 
maximum number tokens place net safe 
definition 
safeness marked labeled net safe reachable marking place 
note safeness implies boundedness 
transition dead reachable marking enabling transition 
definition 
dead transition marked labeled net transition dead reachable marking 
property stronger absence dead transitions liveness 
net live matter marking reached possible enable arbitrary transition net firing number transitions 
definition 
liveness marked labeled net live reachable marking transition reachable marking 
branching bisimilarity formalize inheritance concepts mentioned need formalize notion equivalence 
labeled nets equipped equivalence relation specifies different marked labeled nets observable behavior 
choosing different equivalence relations different semantics obtained 
information different semantics concurrent systems reader referred 
branching bisimilarity standard equivalence relation marked labeled nets notion silent action pivotal definition branching bisimilarity 
silent actions actions transition firings observed 
silent actions denoted label transitions net label different observable 
note assume element labeled transitions distinguish external observable internal silent behavior single label sufficient internal actions equal sense visible effects 
explained subsection context workflow management want distinguish successful termination deadlock 
termination predicate defines states marked net terminate successfully 
marked labeled net state perform actions terminate successfully said deadlock 
assume arbitrary termination predicate 
define branching bisimilarity auxiliary definitions needed relation expressing marked labeled net evolve marked labeled net executing sequence zero actions predicate expressing marked labeled net terminate performing zero actions 
definition 
relation defined smallest relation satisfying definition 
predicate defined smallest set marked labeled nets satisfying marked labeled nets action abbreviation predicate means zero actions performed disjunct predicate satisfied action performed second disjunct satisfied 
observable action disjunct predicate satisfied 
simply equal meaning single action performed 
definition 
branching bisimilarity binary relation called branching bisimulation 
prq prq rq 
prq rq rq 
prq 
marked labeled nets called branching bisimilar denoted exists branching bisimulation prq 
essence branching bisimulation 
shows essence branching bisimulation 
firing rule depicted arrows 
dashed lines represent branching bisimulation 
marked labeled net able simulate action equivalent marked net performing number silent actions silent action may may simulate 
third property definition guarantees related marked nets termination options 
branching bisimilarity equivalence relation reflexive symmetric transitive 
property 
branching bisimilarity equivalence relation 
proof 
see detailed proof 
branching bisimilarity introduced 
definition subsection slightly different original definition 
fact definition semi branching bisimilarity defined 
shown notions equivalent sense define equivalence relation marked labeled nets :10.1.1.158.7366
reason alternative definition concise intuitive original definition 
comparison definitions 
wf nets petri nets workflow modeling suggested authors workflow management systems petri nets design language cosa income 
fact commercial workflow management systems modeling language corresponds subset petri nets typically free choice nets :10.1.1.30.3125
class nets remainder introduce basic concepts terminology workflow management domain 
concepts supported today workflow management systems recognized standardization bodies workflow management coalition 
workflows case piece executed specific case 
examples cases mortgage insurance claim complaint tax declaration order request information 
cases generated external customer 
possible case generated department organization internal customer 
goal workflow management handle cases efficiently effectively possible 
workflow process designed handle similar cases 
cases handled executing tasks specific order 
workflow process definition specifies tasks need executed case order life cycle case isolation 
alternative terms workflow process definition procedure flow diagram routing definition 
tasks executed specific order useful identify conditions correspond causal dependencies tasks 
condition holds hold true false 
task pre postconditions preconditions hold task executed postconditions hold execution task 
cases handled workflow process definition 
result task executed cases 
task needs executed specific case called item 
example item order execute task send refund form customer case complaint sent customer baker 
items executed resource 
resource machine printer fax person participant worker employee 
offices resources mainly human 
workflow management restricted offices prefer term resource 
resources allowed deal specific items 
facilitate allocation items resources resources grouped classes 
resource class group resources similar characteristics 
may resources class resource may member multiple resource classes 
resource class capabilities functional requirements members called role 
classification structure organization resource class called organizational unit team branch department 
item executed specific resource called activity 
take photograph state workflow see cases items activities 
items link cases tasks 
activities link cases tasks resources 
resources focus process aspect 
fact consider life cycle case isolation 
cases interact competition resources 
problems introduced section related allocation resources tasks interaction cases 
topic reasonable resources consider just case time 
workflow attributes 
workflow attribute specific piece information routing case 
think workflow attribute control variable logistic parameter 
workflow attribute may age customer department responsible registration date routing decisions 
workflow attributes reasons 
reality routing decisions splits workflow attributes values depend application data behavior persons applications involved 
workflow attributes typically set external entities resources applications electronic messages modeled accurately 
consider choice non deterministic 
workflow attributes allows nets high level petri nets 
analysis point view class nets preferable availability efficient algorithms powerful analysis tools 
process dimension specified tasks need executed order 
modeling workflow process definition terms net straightforward tasks modeled transitions conditions modeled places cases modeled tokens 
consider example 
net shown specifies processing complaints case corresponds complaint 
tasks 
task modeled transition 
place models condition new case created 
token place refers newly created case tasks executed 
marked labeled net models workflow process definition called workflow net wf net 
wf net satisfies requirements 
wf net place input transitions place output transitions 
token corresponds case needs handled token corresponds case completed 
second wf net dangling tasks transitions conditions places 
task condition contribute processing cases 
node wf net located path place place requirement corresponds strongly connectedness place connected additional transition definition 
wf net labeled net fresh identifier net workflow net wf net conditions satisfied 
case creation contains input place 
case completion contains output place 
connectedness strongly connected 
wf net extended net formulate connectedness constraint called short circuited net 
label new transition short circuited net important 
sake convenience label set net shown wf net satisfying requirements definition 
reader referred information modeling workflow process definitions terms wf nets :10.1.1.30.3125
input place corresponds initial state output place corresponds final state case starts marking completes marking 
previous subsection introduced branching bisimilarity distinguishes successful termination deadlock 
workflow terminate successfully marking 
wf nets termination predicate defined follows 
definition 
class marked labeled nets equipped termination predicate wf net 
note fact wf net contains output place necessarily mean initial marking option terminate successfully 
subsection address things successful termination workflow processes 
soundness mentioned workflow process definition specifies life cycle case isolation 
means interested behavior wf nets initially single token special place requirements definition wf net refer structure net modeling workflow process definition 
despite structural requirements behavior contain problems deadlocks livelocks dangling completion case tasks executed 
consider example wf net shown 
wf net describes procedure handling complaints 
extension wf net shown 
extending wf net error introduced 
task send letter executed deadlock occurs system gets stuck marking pending complaint inform man 
source problem place error 
place depicted bold named error highlight crux problem 
problem occurs ignore complaint executed token gets stuck place error case completes token put place removing token 
token error seen dangling completed case 
workflow management systems garbage collection completion undesirable 
completing case guaranteed tasks executed case 
avoid problems formulate additional requirements 
definition 
soundness wf net said sound conditions satisfied 
safeness safe 
proper completion reachable marking implies 
absence deadlock reachable marking 
absence dead tasks contains dead transitions 
soundness minimal requirement workflow process definition satisfy 
requirement definition states sound wf net safe 
reasonable assumption places wf net correspond conditions true marked token false empty 
second requirement states moment token put place places empty corresponds completion case dangling 
third requirement states starting initial marking possible reach marking token place means feasible complete case successfully 
registered cust contacted contact department file dossier contact customer take action contact management contact cust contact man man contacted ignore complaint inform management ready inform man send letter classified classify complaint register inform customer pending complaint error wf net sound 
requirement states dead transitions corresponds requirement task execution workflow task performed 
notion soundness slightly stronger notion soundness previous publications requirement 
safeness requirement added stress fact places correspond conditions hold token hold tokens 
addition requirement allows simplification inheritance rules pivotal 
wf net shown sound 
easily verified inspecting reachable states 
wf net shown sound second requirement proper completion marking error reachable third requirement absence deadlock deadlock marking pending complaint inform man fourth requirement absence dead tasks inform management fire definition soundness guaranteed 
notion soundness coincides liveness safeness short circuited net 
theorem 
characterization soundness wf net sound live safe 
proof 
proof similar proof theorem 
difference stronger notion soundness implies safeness boundedness short circuited net 
theorem shows standard petri net analysis techniques verify soundness 
consider example wf net shown 
standard analysis tools cf 
verify short circuited net live safe 
exact complexity deciding wf net sound known worst case pspace complete see 
straightforward approach deciding soundness construction coverability graph see example short circuited net initial marking 
approach requires worst case non primitive recursive space 
workflow management systems modeling language corresponds free choice :10.1.1.30.3125
free choice wf nets soundness decided polynomial time 
practical experience workflow management systems allow design non free choice wf nets cosa shows complex workflows states checked tools coverability graph algorithm woflan 
woflan briefly described section information interested reader referred 
definition 
workflow process definition workflow process definition sound wf net 
set workflow process definitions denoted class class labeled nets interesting context workflow management 
members class called workflow process definitions guaranteed correct respect criteria mentioned definitions wf net soundness 
note formally workflow process definition defined net initial marking 
remainder typically consider markings reachable initial marking 
initial marking explicitly initial marking workflow process definition assumed 
branching bisimilarity behavioral equivalence relation 
remainder assume branching bisimilarity standard equivalence relation comparing workflow process definitions 
definition 
behavioral equivalence workflow process definitions workflow process definitions 
inheritance inheritance cornerstones object oriented programming object oriented design 
basic idea inheritance provide mechanisms allow constructing subclasses inherit certain properties superclass 
case class corresponds workflow process definition sound wf net see definition objects instances class correspond cases 
object oriented design methods class characterized set attributes set methods 
attributes describe properties object 
methods specify operations objects create destroy change attribute 
note attributes methods describe static aspects object 
dynamic behavior object hidden inside methods modeled explicitly 
uml behavior object modeled terms state machine 
dynamic behavior objects intrinsic part class description explicit implicit inheritance dynamic behavior understood 
see elaborate discussion topic pointers related 
object oriented programming language supports inheritance respect static structure class interface consisting attributes methods remarkable 
workflow management aims supporting business processes results inheritance static aspects useful context 
inheritance dynamic behavior dealt comprehensive manner :10.1.1.33.2525
approaches focus specific inheritance relations causal relations tasks methods 
consider example malone inheritance defined tasks processes 
provide tool support navigating space processes specialization generalization links 
unfortunately control routing structure taken account causal relations tasks considered 
workflow management systems available claim object oriented provide support inheritance 
example workflow management system inconcert allows building workflow class hierarchies 
unfortunately inheritance restricted attributes structure process taken account 
workflow management systems implemented object oriented programming languages 
systems offer object oriented mechanisms inheritance workflow designer designer program code benefit object oriented features provided host language 
think inheritance useful concept workflow management 
advocate inheritance notions illustrate usefulness tackling problems related change :10.1.1.33.2525
inheritance relations subsection define inheritance relations workflow processes 
consider workflow process definitions subclass 
process definition subclass superclass inherits certain features intuitively say subclass 
clearly tasks typically add new tasks 
reasonable demand respect tasks respect new tasks tasks basically mechanisms 
mechanism simply disallows execution new tasks compares resulting behavior behavior mechanism leads notion inheritance 
possible distinguish behaviors tasks executed subclass intuitively definition conforms blocking tasks new resulting inheritance concept called protocol inheritance inherits protocol mechanism allow execution new tasks consider effects old ones 
possible distinguish behaviors arbitrary tasks executed effects tasks considered subclass inheritance notion called projection inheritance inherits projection workflow process definition old tasks 
projection inheritance conforms hiding abstracting tasks new recall section branching bisimilarity equivalence compare behaviors marked nets behaviors workflow process definitions 
recall action label denote internal unobservable actions 
consequence hiding tasks workflow process definition achieved renaming tasks remainder assume set action task labels wf nets see definition equal set observable tasks extended distinction inheritance mechanisms may subtle corresponding inheritance notions quite different 
illustrate difference handle register archive handle register archive check handle register archive check handle register archive check handle register archive check workflow process definitions 
workflow process definitions shown 
process definition corresponds sequential workflow process consists tasks register handle archive 
workflow process definitions extends additional task check 
process definition task check executed arbitrarily times register handle 
process subclass respect protocol inheritance check blocked identical process subclass respect projection inheritance execution check hidden equivalent defined definition task check executed task handle 
process subclass respect protocol inheritance check blocked equivalent process definition subclass respect projection inheritance possible skip task handle executing hidden task check 
process definition task check executed parallel task handle 
process subclass respect protocol inheritance check blocked task archive executed 
subclass respect projection inheritance 
abstracts newly added parallel task check distinguish task check inserted handle archive remaining workflow process definition shown 
process subclass respect protocol inheritance check blocked process deadlocks executing task handle 
subclass respect projection inheritance 
abstracts check observe differences behaviors mechanisms blocking hiding result orthogonal inheritance notions 
consider combinations mechanisms 
workflow process definition subclass workflow process definition protocol projection inheritance hiding new methods blocking new methods detect differences subclass protocol projection inheritance 
subclass respect protocol projection inheritance 
mechanisms obtain weaker form inheritance 
workflow process definition subclass workflow process definition life cycle inheritance blocking newly added tasks hiding distinguish 
life cycle inheritance general inheritance relations 
workflow process definitions shown subclasses respect life cycle inheritance 
detailed study inheritance relations 
purpose suffices formalize relations 
go detail properties inheritance relations 
formalize forms inheritance introduce operators nets encapsulation abstraction 
encapsulation block tasks abstraction hide tasks 
operators inspired encapsulation abstraction operators known process algebra 
operators defined labeled nets follows 
definition 
encapsulation labeled net 
encapsulation operator function removes net transitions label formally 
note removing transitions wf net defined definition yield result longer wf net 
definition 
abstraction labeled net 
abstraction operator function renames transition labels silent action formally implies implies 
operators notions inheritance defined follows definition 
inheritance relations 
protocol inheritance workflow process definitions workflow process definition subclass protocol inheritance denoted pt 

projection inheritance workflow process definitions workflow process definition subclass projection inheritance denoted pj 

protocol projection inheritance workflow process definitions workflow process definition subclass protocol projection inheritance denoted pp 

life cycle inheritance workflow process definitions workflow process definition subclass life cycle inheritance denoted lc 
pj lc pp pt overview inheritance relations behavior 
inheritance relations equivalence notion branching bisimilarity introduced definition 
note life cycle inheritance new tasks partitioned sets tasks blocked means operator tasks hidden means gives overview inheritance relations 
arrows depict strict inclusion relations 
easy see protocol projection inheritance implies protocol projection inheritance 
protocol inheritance implies life cycle inheritance projection inheritance implies life cycle inheritance 
life cycle inheritance imply protocol projection inheritance 
consider example workflow process definition shown 
workflow process definition extends process definition shown new tasks inform customer contact management inform management ignore complaint 
corresponds wf net place error 
note contrast wf net soundness property satisfied 
question extended workflow process definition shown subclass workflow process definition shown 
subclass protocol inheritance blocking contact management results potential deadlock 
subclass projection inheritance executing ignore complaint original task send letter skipped 
protocol projection inheritance requires protocol inheritance projection inheritance extended workflow process definition clearly subclass protocol projection inheritance 
extended workflow process definition shown subclass workflow process definition life cycle inheritance hiding contact management inform management blocking ignore complaint hiding blocking inform customer obtains workflow process definition branching bisimilar original 
inheritance relations introduced subsection number desirable properties 
example relations preorders reflexive transitive see property 
furthermore workflow process definition subclass workflow process definition inheritance relations vice versa workflow process definitions equivalent defined definition workflow process definitions branching bisimilar see property 
words inheritance relations anti symmetric 
relation reflexive anti symmetric transitive partial order 
property proof 
property 
assuming defined definition equivalence workflow process definitions lc pt pj pp partial orders 
registered cust contacted contact department file dossier contact customer take action contact management contact cust contact man man contacted ignore complaint inform management ready inform man send letter classified classify complaint register inform customer pending complaint extended workflow process definition 
observation definition life cycle inheritance allow executions task blocked executions task hidden left untouched determining subclass relationship workflow process definitions 
illustrate restriction consider workflow process definition process definition extension workflow process definition combines extensions process definitions 
process definition subclass life cycle inheritance workflow process definitions 
reason life cycle inheritance allow encapsulation task check executed alternative task handle abstraction task check executed parallel handle 
difficult generalize definition life cycle inheritance inheritance relations matter way allowed treat different executions task different way 
simply requires temporary task names distinguish different executions single task 
example variant life cycle inheritance defined follows 
workflow process definition subclass current definition life cycle inheritance workflow process definition renaming tasks new subclass yields subclass variant life cycle inheritance 
consider example variant workflow process definition introduced checks names check check respectively 
difficult see blocking tasks hiding proves subclass current definition life cycle inheritance 
renaming tasks check check check proves subclass proposed variant life cycle inheritance 
formalize generalizations inheritance relations lines discussed paragraph 
goal focus important concepts play role applying inheritance notions context workflow management 
generalizations useful occasions distract essential concepts 
question remains inheritance relation appropriate 
answer question depends context 
applications liberal notion inheritance suitable life cycle inheritance 
applications restrictive notion desirable 
section discuss usefulness inheritance relations different application areas context workflow management 
inheritance preserving transformation rules inheritance relations previous subsection immediately useful 
workflow designer benefit inheritance relations method tool support workflow changes preserve inheritance 
purpose transformation rules 
transformation rules construct subclass workflow process definition extending 
rules local relatively easy check computational point view 
furthermore correspond typical design constructs workflow designer extend change workflow 
rules slightly different versions rules :10.1.1.33.2525
main distinction requirement workflow process definitions called life cycles safe :10.1.1.33.2525
rules named pps pts pjs pj pp pt pj pj 
safeness requirement simplifies formulation rules allows generalizations respect free choice requirements stated 
auxiliary definitions needed definition transformation rules 
definition 
alphabet alphabet operator function 
marked labeled net 
alphabet defined set visible labels transitions net dead dead 
workflow process definitions contain dead transitions alphabet workflow process definition equals set observable transition labels 
property 
alphabet workflow process definition alphabet equals 
proof 
follows immediately definitions workflow process definition soundness alphabet 
sake simplicity alphabet workflow process definition denoted 
definition 
union labeled nets labeled nets 
union labeled net 
nets satisfy abovementioned conditions union said defined 
rule easiest understand 
named pps preserves protocol projection inheritance 
transformation rule pps illustrated 
workflow process definition 
connected net union defined 
workflow process definition subclass process definition protocol projection inheritance conditions satisfied share single place transitions label appear alphabet transition input places visible label live safe 
transformation rule pps shows protocol projection inheritance allowed postpone behavior 
reaches state place marked possible iterate behavior defined arbitrary number times continuing original behavior 
requirement live safe guarantees token consumed place transition returned property crucial correctness rule pps 
pps protocol projection inheritance preserving transformation rule 
theorem 
protocol projection inheritance preserving transformation rule pps workflow process definition labeled net place 



live safe 
defined workflow process definition pp proof 
transformation rule pps special case rules remainder rules pts theorem pjs theorem 
pts preserves protocol inheritance pjs preserves projection inheritance shown rule pps preserves protocol projection inheritance protocol projection inheritance 
proof simplification proof theorem 
free choice requirement replaced condition safe 
constructed transformation rule pps place place shared extension containing transition check 
remaining transformation rules subsection principles rule pps 
second transformation rule subsection named pts preserves protocol inheritance 
illustrated 
transformation rule pts extend workflow process definition alternative branches behavior 
workflow process definition 
extension net place live safe 
nets share places nodes 
furthermore contains transition input place output place 
net resulting transformation rule pts defined union removal transition place functions entry point alternative branches behavior added functions exit point 
requirement live safe ensures token transitions consume place eventually returned additional requirements guarantee workflow process definition 
required extended fresh transition input place output place workflow process definition 
transition emulates behavior note introduced formulate requirements rule pts original process definition extension subclass second transformation rule pps special case transformation rule pts 
rule pts reduces rule pps places coincide 
places different assumed input transition place transition output transition assumption excludes possibility iterations place place guaranteeing modification original process definition truly place entry point place exit point 
final requirement guarantees subclass protocol inheritance transitions input place visible label appearing alphabet requirement means transitions input places act called guards 
encapsulating guards leads net behavior identical behavior original process definition guaranteeing subclass protocol inheritance 
recall denote preset postset functions notation possible distinguish preset postset functions extension original workflow process definition resulting subclass pts protocol inheritance preserving transformation rule 
theorem 
protocol inheritance preserving transformation rule pts workflow process definition labeled net 
assume fresh identifier appearing contains places transition 



live safe 
defined 
workflow process definition workflow process definition pt proof 
proof similar proof theorem 

free choice requirement replaced condition safe 
illustrate transformation rule pts workflow process definitions shown 
process definition constructed transformation rule pts net net containing place transition check 
note particular case coincide 
net constructed transformation rule pts 
remaining workflow process definitions subclasses respect protocol inheritance sense try apply pts obtain workflow process definitions 
transformation rule subsection pjs preserves projection inheritance 
theorem formalizes transformation rule pjs 
illustrates rule 
shows rule pjs corresponds sequential composition 
new behavior may inserted sequential parts workflow process definition yielding subclass projection inheritance 
contrast previous transformation rules original workflow process definition modified 
basically transformation rule pjs says allowed replace arc original workflow process definition entire net 
original workflow process definition contains place transition input transitions 
modification net sharing place transition place input place result transformation rule net obtained union removing arc arc requirement live safe guarantees option move token transition normally put place place firing transitions requirement transitions labeled task identifiers appearing alphabet guarantees hiding tasks influence behavior original workflow process definition 
pjs projection inheritance preserving transformation rule 
theorem 
projection inheritance preserving transformation rule pjs workflow process definition labeled net place transition 


live safe 
defined workflow process definition pj proof 
proof similar proof theorem 
free choice requirement replaced condition safe 
constructed transformation rule pjs arc transition handle place replaced net containing place transition check 
mentioned proof theorem transformation rule pps theorem special case transformation rule pjs theorem 
details reader referred 
interesting exercise prove claim 
formulate transformation rule subsection auxiliary definition needed 
place marked net said redundant implicit depend number tokens place output transitions enabled reachable marking 
definition 
implicit place marked labeled net 
place called implicit reachable markings transition implicit places properties studied 
transformation rule pj formalized theorem 
shows restrictions allowed extend workflow process definition parallel branch behavior 
result rule pj subclass original workflow process definition projection inheritance 
illustrated 
original workflow process definition 
modification net containing place live safe 
net structures share transitions place input place output place furthermore input output transitions 
net structure resulting transformation rule pj defined union removal place assumptions mean transitions function input output transition extra parallel branch modeled basic idea net satisfies property firing transition eventually followed firing transition requirement live safe guarantees time transition fires resulting tokens places moved input places transition firing transitions addition guarantee satisfies desired property firing followed exactly firing achieve goal assume extended place input transition output transition 
requiring place implicit extension guarantees firing transition preceded firing difficult see number tokens zero corresponds number firings transition followed firing guarantee terminate firing times extension place put token place leaving tokens clearly achieved extension yields workflow process definition 
combination requirements implies workflow process definition satisfying property firing eventually followed firing attentive reader notice duality rules pts pj 
pj projection inheritance preserving transformation rule 
theorem 
projection inheritance preserving transformation rule pj workflow process definition labeled net 
assume fresh identifier appearing contains place transitions 



live safe 
defined 
implicit 
workflow process definition workflow process definition pj proof 
proof similar proof theorem 
free choice requirement replaced condition safe 
transformation rule defined theorem named pj historical reasons see 
easy see workflow net constructed transformation rule pj 
section concluded workflow process definition shown subclass workflow process definition shown respect life cycle inheritance 
difficult see transformation rules section construct subclass superclass 
transformation rule pts add alternative task ignore complaint 
rule pjs add task inform management send letter ready 
parallel task contact management added transformation rule pj 
task inform customer added pps pts pjs 
subsection transformation rules construct subclasses workflow process definitions different forms inheritance 
rules correspond design constructs practice choice iteration sequential composition parallel composition 
designer sticks rules inheritance guaranteed 
remainder show transformation rules avoid problems discussed 
rules interesting computational point view 
inheritance preserving transformation rules making arbitrary changes complexity checking extended workflow process definition subclass original process definition reduced considerably 
note requirements specified transformation rules verified locally requirement involves evaluation dynamic behavior constraint original workflow process definition extension rules required verify dynamic behavior liveness safeness reachability combined net soundness subclass follows local requirements 
complexity requirements transformation rules appears pspace complete see 
practical point view problem 
requirements complexity checking soundness 
argued section existing tools woflan verify soundness property complex workflows encountered practice 
free choice wf nets allowed case workflow management systems requirements verified polynomial time 
see details :10.1.1.30.3125
inheritance workflow management domain section discuss usefulness inheritance concepts context workflow management 
address issue worthwhile consider trends shift sellers market buyers market years resulted increase number products services offered customer 
consider example mortgage loans today financial institutions offer various types mortgage loans 
customer expects flexibility standard product service customized 
today enterprises complex rapidly changing structure 
communication mechanisms electronic data interchange edi internet enabled electronic commerce commerce extended virtual enterprises 
result business processes interorganizational 
impact trends workflow management significant 
result trend number workflow processes variants processes increased considerably 
second trend resulted inter workflows distributed sites involving heterogeneous resources 
workflow processes moving long lasting defined centralized business processes dynamically changing distributed business processes variants 
developments associated problems inheritance concepts particular relevance generation workflow management systems 
illustrate give number situations inheritance concept tackle certain problems 
ad hoc change widely recognized workflow management systems provide flexibility 
indicated today workflow management systems problems dealing change 
particular kind change ad hoc change 
ad hoc change affects individual cases refers changes case case basis structural modifications workflow process definition 
ad hoc change typically result error rare event special demands customer 
exceptions result ad hoc changes 
typical example ad hoc change skipping task case emergency 
kind change initiated external factor 
typical dilemma related ad hoc change problem decide kinds changes allowed fact impossible foresee possible changes 
inheritance concepts offer support ad hoc change 
predefined workflow process definition superclass 
modified workflow process definition resulting ad hoc change subclass superclass inheritance relations 
enforcing requirement certain properties preserved 
process resulting ad hoc change subclass predefined workflow process protocol inheritance new alternatives offered sequence tasks possible superclass possible subclass 
example protocol inheritance possible skip existing tasks introducing bypass tasks 
projection inheritance allowed skip existing tasks 
possible add new tasks parallel 
notion inheritance appropriate depends situation 
possible different inheritance notions different parts workflow process interaction outside may changed life cycle inheritance communicate external actors changed projection inheritance 
note general possible foresee potential changes 
inheritance relations allow formulating rules respect change enumerating possible exceptions 
ad hoc change typically leads variants workflow process 
changes correspond exceptions desirable combine variants single complex workflow 
inheritance creating copy modifying time change needed changes need stored 
shown section possible provide aggregate management information 
evolutionary change new technology new laws new market requirements lead modifications workflow process definitions hand 
evolutionary change refers changes structural nature certain moment time process changes new cases arrive system 
type change result new business strategy reengineering efforts permanent alteration external conditions change law 
evolutionary change initiated management improve efficiency responsiveness forced changing market demands 
evolutionary change affects new cases may influence old cases 
basically ways deal existing cases restart existing cases aborted restarted new process 
time cases routing definition 
workflow applications acceptable restart cases possible rollback expensive flush cases 
abort existing cases stopped processed pending cases aborted considered ready 
approach existing cases completed hand 
general solution acceptable 
proceed case refers specific version workflow process 
newer versions affect old cases 
workflow management systems support versioning mechanism 
drawback approach old cases benefit improved routing definition 
addition complex task manage versions 
transfer existing cases transferred new process directly benefit evolutionary changes 
transfer cases preferred solution 
term dynamic change introduced refers problem transferring cases consistent state new process 
evolutionary change cause problems internal dynamic change problem illustrated 
addition cause confusion outside world 
customer receiving goods bill starts receiving bill goods may result irritation 
change needs restricted designer needs aware fact environment affected certain changes 
inheritance rules previous section restrict changes 
observable behavior cornerstones defined inheritance notions see sections degree change observed environment quantified 
external business partners involved change satisfy certain inheritance requirements need agree change change externally noticeable effects 
consequence business partners able notice differences need act accordingly 
section show restricting evolutionary change inheritance rules previous section dynamic change problem avoided 
workflow templates workflow processes different enterprises common elements typically designed scratch 
large companies possible specify workflow process definition replicate parts need process 
local differences taken account prohibit uniform solution 
result workflow processes typically designed scratch wheel re invented day 
avoid re inventing wheel workflow templates 
workflow template standard design common workflow process 
enterprise department enterprise workflow template starting point design new workflow process 
standard solution provided template changed accommodate specific needs 
templates allows designers reflect local differences resulting specific regulations organizational structures particularities re common parts 
idea templates workflow processes new 
malone defined large number process templates called process handbook 
today enterprise resource planning erp systems sap sap ag germany baan netherlands offer hundreds ready workflow templates named business models models starting point configuring system 
workflow templates best business practices reflect experiences leading enterprises 
set workflow templates offered today workflow management systems limited clear templates increase avoid starting scratch time new workflow designed 
current erp workflow management systems provide limited support templates 
designer copy template customize accommodate specific needs 
copy modify approach sophisticated change allowed changes template affect workflow processes designed template 
copy modify approach approach inheritance 
establishing inheritance relationship customized workflow process corresponding template possible restrict change certain changes template transferred customized process 
commerce traditional electronic commerce commerce mainly electronic data interchange edi rapidly moving internet 
commerce moving long lasting defined business relationships dynamic situation parties having prior trading relationship engage common business process 
consequently operational boundaries organizations fluid 
result difficult separate interorganizational business processes ones 
commerce complicated management business processes 
processes scattered multiple organizations subject frequent changes 
problems need solved enable enactment workflows crossing organizational borders 
problems conceptual design interorganizational workflows technical exchange data internet financial distribute benefits managerial responsible nature 
interesting conceptual problems may benefit inheritance concepts 
agree common workflow having know details business processes 
allow local changes business partners involved optimizes internal process need global coordination 
solve problem design simple common workflow tasks relevant partners specified 
common workflow partitioned business partners involved global workflow process split local parts 
business partner extends refines local workflow process operational 
changing local workflow cause problems swapping tasks lead deadlocks shared workflow 
avoid problems inheritance preserving transformation rules pps pjs pj 
changes local workflow preserve projection inheritance business partners detect differences problems deadlocks livelocks avoided 
notion projection inheritance appropriate allows changes having internal effects 
note protocol inheritance life cycle inheritance suitable application 
alternative route local workflows may lead deadlock workflow process 
second problem solved mechanism projection inheritance local change restricted transformation rules preserving projection inheritance business partners detect differences need new agreement global protocols 
examples section illustrate inheritance concepts support ad hoc change evolutionary change workflow templates commerce 
clearly just starting point augmenting workflow management systems inheritance concepts 
example examples focus process perspective control flow routing aspects considered 
inheritance equally important perspectives dealing organization data applications operations 
process perspective dominant workflow management applications restrict perspective 
remainder show inheritance truly assist dealing problems identified section 
dynamic change problem dynamic change introduced 
sequential process changed parallel problems 
degree parallelism reduced states old process correspond states new process 
state token right hand side mapped state sequential process left hand side 
putting token result double execution task send bill 
putting token result skipping task send goods 
problem identified apply situation degree parallelism changed 
example swapping removing tasks may lead similar problems 
reason workflow management systems allow dynamic change workflow process changed existing cases handled old way new process applies new cases 
case pointer version workflow version maintained long cases pointing 
applications solution 
flow time case long may unacceptable process running cases old way 
consider example change year curriculum university year 
expensive offer curricula long time 
sooner cases students need transferred 
examples mortgage loans insurance policy typical flow time decades 
maintaining old versions process expensive may cause managerial problems 
possible regulations new laws enforcing dynamic change 
inheritance preserving transformation rules solve problem indicated 
way avoid incorrect execution cases postpone transfer running cases state 
inheritance preserving transformation rules avoid problems restricting change changes correct transfer possible 
remainder section organized follows 
introduce notion transfer rule rule map cases workflow process definition 
second give concrete generic transfer rules map cases superclass subclass specialization 
third provide generic rules support generalization mapping cases subclass superclass 
fourth discuss related dynamic change 
explain approach combined called change regions 
combined approach cope changes prohibit immediate transfer cases 
valid transfer rules subsection assume presence workflow process definitions old new 
cases old process moment change need transferred old workflow process definition new case old process definition removed mapped new case new process definition 
state case new process definition depends state case old process definition need define transfer rule 
definition 
transfer rule workflow process definitions transfer rule notation partial function mapping markings markings 
transfer rule maps states old workflow process definition states new workflow process definition 
note function partial dom state case domain transfer rule case transferred 
clearly transfer rule acceptable 
transfer case transfer rule result deadlocks anomalies 
consider transfer rule acceptable transfer case results state new workflow process definition reachable newly initiated cases 
transfer rule satisfying property called valid 
definition 
valid transfer rule workflow process definitions transfer rule transfer rule valid dom 
basically valid transfer rule sure soundness property target workflow net guaranteed cases transferred workflow process definition 
property 
workflow process definitions valid transfer rule dom conditions satisfied 
safeness place 
proper completion 
absence deadlock 
proof 
follows directly definitions workflow process definition soundness valid transfer rule 
generic transfer rules guaranteed valid 
definition 
workflow process definitions transfer rules defined follows transfer rule maps possible marking 
transfer rule maps possible marking 
transfer rule empty domain dom 
property 
valid 
proof 
follows directly definitions workflow process definition soundness valid transfer rule states reachable sound workflow net transfer rule empty domain trivially valid 
transfer rules correspond policies described section 
rule corresponds restarting existing cases corresponds aborting existing cases corresponds completing running cases old process definition versioning mechanism 
remainder section consider trivial transfer rules focus transfer rules lead direct transfer postponement meaningful state default 
rules corresponds inheritance preserving transformation rules section 
transfer cases superclass subclass consider types transfer rules class subclass class superclass 
subsection transfer rules mapping states class states subclass 
transfer rules inheritance preserving transformation rules section 
introduce transfer rules corresponding respectively pps pts pjs pj introduce identity function generic transfer rule 
definition 
id workflow process definitions id transfer rule corresponds identity function id transfer rule id necessarily valid 
state workflow process definition exist second process definition 
id turns suitable transfer rule pps pts pjs 
transfer rule inheritance preserving transformation rule illustrated rule pps see theorem 
pps adds new alternative behavior restrict behavior part corresponding old workflow process definition way case simply transferred changing state 
theorem 
transfer rule pps workflow process definitions satisfying requirements stated theorem 
mapping pps id transfer rule pps valid 
proof 
recall pps special case pts 
validity pps follows directly validity transfer rule pts see theorem 
easy see pps valid extension adds behavior 
identity function valid 
illustrates transfer rule pps inheritance preserving transformation rule pps extend old workflow process definition left hand side task inform customer executed point registration filing 
transfer rule pps transfers case left hand side process definition right hand side process definition changing state 
illustrates transfer rule pps defined section 
second transfer rule inheritance preserving transformation rule pts identical pps pending complaint ready registered ready send letter classify complaint cust contacted classified file dossier contact cust inform customer pending complaint registered cust contacted file dossier contact cust classify complaint register pps contact customer take action contact department register send letter take action contact customer contact department pps classified transfer rule pps theorem 
transfer rule pts workflow process definitions satisfying requirements stated theorem 
mapping pts id transfer rule pts valid 
proof 
workflow process definitions satisfying requirements stated theorem 
extension enables new behavior restricting existing behavior follows 
observation implies identity function pts valid 
pending complaint pending complaint registered ready send letter classify complaint cust contacted classified file dossier contact cust pts register contact department contact customer take action registered cust contacted file dossier contact cust register update statistics ignore complaint contact department classify complaint classified ready send letter take action contact customer pts pts transfer rule pts transfer rule pts illustrated 
inheritance preserving transformation rule pts old workflow process definition left hand side extended alternative branch containing tasks ignore complaint update statistics 
state left hand side process definition reachable right hand side process definition 
easy see transfer rule pts valid particular situation 
note update statistics 
task added wf net shown introduce subclass states superclass states marking place ignored 
third transfer rule new tasks inserted existing sequential tasks defined theorem transformation rule pjs 
theorem 
transfer rule pjs workflow process definitions satisfying requirements stated theorem 
mapping pjs id transfer rule pjs valid 
proof 
proof similar proofs theorems 
added part inserts new behavior restrict existing behavior follows 
implies identity function pjs valid 
pending complaint registered ready cust contacted classified file dossier contact cust pjs pjs contact department contact customer take action register send letter classify complaint registered file dossier contact cust register contact department contact customer cust contacted take action inform management send letter classify complaint classified inform man ready pending complaint transfer rule pjs illustrates transfer rule pjs inheritance preserving transformation rule pjs insert task inform management send letter ready 
addition task introduces new states 
transfer rule pjs transfers case changing state 
glance alternative transfer rule mapping transfers token place ready left hand process definition place inform man right hand process definition 
transfer rule imply newly added task inform management executed transferred case 
transfer meaningful token place ready left hand process definition result executing task send letter 
clearly necessarily case 
pending complaint registered cust contacted contact department file dossier contact customer take action contact management contact cust contact man man contacted ready classified classify complaint register pending complaint registered ready send letter classify complaint cust contacted classified contact department file dossier register contact customer take action contact cust pj pj send letter pj transfer rules pj pj transfer rules pts pps pjs trivial additional behavior alternative branches parts inserted existing parts introduced eliminating existing states 
transfer cases corresponding transformation rule pj complex pj adds parallel behavior additional behavior 
adding parallel behavior may necessary mark places newly added parts 
consider example workflow process definitions shown 
left hand side process definition transformed right process definition transformation rule pj task contact management added executed parallel contact customer 
clearly state token pending complaint registered left hand side process definition mapped identical state right hand side process definition 
tokens marking classified ready transferred place right hand side process definition 
places contact cust cust contacted marked transferring case identical state result deadlock 
consider example case tokens pending complaint contact cust left hand side process definition 
state transferred modifications right hand side process definition task take action executed place man contacted get marked 
way solve problem add additional token place contact man man contacted 
conservative approach contact man marked new task contact management required executed task take action performed 
progressive approach man contacted marked task take action executed executing new task contact management 
illustrates complicating issues transferring cases transformation rule pj additional tokens need added adding tokens multiple ways add tokens conservative progressive approach 
closely observing requirements stated theorem provides solution issue implicit place acts kind counter indicating newly added part marked additional tokens 
second issue dealt providing transfer rules conservative pessimistic pj progressive optimistic pj 
define rules prove validity lemma 
lemma 
workflow process definitions place implicit 
reachable marking firing sequences unique marking 
proof 
known firing sequence enabled resulting enabled see definition implicit place 
assume markings 
follows definition 
remains proven 
assume 
loss generality assume 
workflow process definition see definition 
implicit enabled 
markings 
follows fact 
fact contradicts fact workflow process definition proper completion see definition soundness 
contradiction shows completes proof 
workflow process definitions satisfying requirements lemma lemma states firing sequences leading marking lead marking addition markings identical respect places lemma implies function definition defined 
definition 
defined lemma 
function id defined follows 
reachable marking firing sequence id unique marking defined 
consider projection inheritance preserving transformation rule pj theorem 
define requirements transformation rule implicit place added original workflow place virtual place really workflow process definitions added sure activation extension defined firing transition followed deactivation firing transition 
note workflow process definitions theorem satisfy requirements lemma definition 
function id defined definition counts number tokens workflow process definitions safe reachable marking id id 
recall complications concerning transfer cases transformation rule pj identified 
id indicates marked suffices transfer case superclass subclass changing state 
id indicates marked contains token newly added parallel branch behavior needs marked transferring case 
ways mark parallel part output places marked conservative pessimistic approach input places marked progressive optimistic approach 
define transfer rules pj pj pj theorem 
transfer rules pj pj workflow process definitions satisfying requirements stated theorem 
defined theorem id defined definition 
assume id 
pj transfer rule pj pj pj pj valid 
pj transfer rule pj pj pj pj valid 
proof 

prove pj pj 
defined theorem 
firing sequence occur alternatingly point sequence number times occurred equal number times occurred occurred time extra 
property direct result fact implicit means enabled workflow process definition means safe 
occur alternatingly distinguish possibilities 
number times occurs possibly zero equal number times occurs means note necessarily enabled occurs 

firing sequence exists live safe see theorem 
modification firing sequence immediately occurrence sequence inserted 
sequence enabled results state pj pj pj pj elements 

transition occurs precisely sequence transition means case necessarily enabled states pj pj places marked 
construct sequence 

sequence modification firing sequence immediately occurrence sequence inserted 
sequence enabled results state pj note 
pj 
sequence sequence obtained concatenating enabled results state pj pj 
left hand side process definition transformed right hand side process definition adding task contact management transformation rule pj 
consider case left hand process definition token pending complaint contact cust 
transfer rule pj case transferred state right hand process definition pending complaint contact cust contact man marked 
transfer rule pj marks man contacted contact man transfer rules far map states superclass states subclass 
series inheritance preserving transformation rules applied workflow process definition possible construct composite transfer rule valid maps state original workflow process definition superclass new process definition subclass 
transfer rules subsection imply dynamically changing workflow process definitions rules pts pps pjs pj problems deadlocks livelocks dangling avoided 
subsection construction composite transfer rules illustrated means running example 
transfer cases subclass superclass transfer rules previous subsection assume cases transferred superclass subclass 
think applications inheritance preserving transformation rules section applied reverse direction 
note rules section assumes direction 
inheritance preserving transformation rules applied create superclass subclass 
means workflow process definition extended reduced parts workflow process definition removed 
example parallel branch removed applying pj reverse direction 
inheritance preserving transformation rules applied reverse direction need transfer rules map states subclass states superclass 
transfer rules remainder section 
consider subclass workflow process definition superclass workflow process definition constructed applying rule pps theorem reverse direction 
transfer rule pps map states subclass superclass 
theorem 
transfer rule pps workflow process definitions satisfying requirements stated theorem 
place defined theorem pps transfer rule pps pps pps 
transfer rule pps valid 
proof 
transformation rule pps special case rule pts theorem 
proven assuming places theorem equal place assumption transfer rule pps equals transfer rules corresponding pts applied reverse direction 
transfer rules pts pts stated theorem correspond pps validity pps follows immediately validity pts pts illustrates transfer rule pps inheritance preserving transformation rule pps reduce old workflow process definition right hand side new workflow process definition left hand side 
removed task inform customer add new states pps corresponds particular situation identity function 
removed part network tasks tokens removed part mapped single token place pending complaint 
workflow process definition subclass process definition constructed means transformation rule pps transfer case superclass subclass back yields original state 
property 
pps pps defined theorems 
pps pps proof 
property follows immediately definitions transfer rules theorems 
generally converse hold 
transfer rule pps corresponds specialization pps corresponds generalization 
specialization follows generalization may possible reconstruct original state information lost generalization step 
second consider transfer cases inheritance preserving transformation rule pts applied reverse direction 
consider workflow process definitions shown 
old process definition right hand side reduced removing alternative branch containing tasks ignore complaint update statistics 
note transfer cases right left left right 
case alternative branch removed transfer simple case transferred changing state 
case alternative branch places pending complaint ignored marked transfer complicated place ignored new process definition 
ways deal problem corresponding token moved point alternative branch starts place classified conservative approach moved point alternative branch ends place ready progressive approach 
give valid transfer rules pts pts formulate pts pts need consider problem illustrated 
net shown transition taken 
suppose remove task applying rule pts reverse direction old workflow process definition process definition new workflow process definition process definition old process definition marking token reachable firing new workflow process definition marking longer reachable removing situation exceptional normally removal alternative branch behavior modeled transition change set reachable markings respect set places remain new workflow 
change occur possible come elegant transfer rule valid 
recall transition introduces marking reachable workflow process definition transfer rule valid transfer results state new wf net reachable initial marking new workflow process definition 
define transfer rules pts pts add requirement removed part change behavior remaining part 
formalize requirement virtual transition defined theorem 
transition emulates behavior removed part 
required influence set reachable markings 
theorem 
transfer rules pts pts workflow process definitions satisfying requirements stated theorem 
defined theorem 
assume 
pts transfer rule pts pts pts 
transfer rule pts valid 
pts transfer rule pts pts pts 
transfer rule pts valid 
proof 

prove pts pts 
labeled net defined theorem 
show firing sequences pts pts 
result suffices prove pts pts valid 

defined theorem 
firing sequence transitions effect transition 
sequence transition replaced transition result sequence transitions occur alternatingly point sequence number times transition occurred equal number times transition occurred transition occurred time extra 
property follows fact safe live safe see theorem 
transitions occur alternatingly distinguish possibilities 
assume number times transition occurs equal number times transition occurs live safe firing transition removes tokens 
way mark places fire transitions follows 
consider subsequences start transition occurrence transition contain occurrences transitions subsequence replace occurrences transitions single occurrence transition arbitrary position transitions remaining subsequence 
resulting firing sequence 
clearly sequence enabled 
pts pts completes proof case 

assume number times transition occurs exceeds number times transition occurs 
note empty case equal contradicts assumption 
follows 
consider subsequences start occurrence transition occurrence transition contain occurrences transitions subsequence replace occurrences transitions single occurrence transition remaining occurrences transitions simply removed 
resulting firing sequence 
sequence enabled transition emulates behavior subnet 
pts completes proof pts 
sequence sequence obtained concatenating transition sequence enabled results state pts completes proof pts 
requirement theorem essential validity transfer rules 
note checking requirement quite complex 
practical point view create new problem 
coverability graph decide sound requirement checked extra costs 
construct coverability graph add arcs corresponding new states introduced requirement holds 
remainder assume application pts restricted situations added part add new behavior original part 
consider old workflow process definition right hand side reduced removing alternative branch containing tasks ignore complaint update statistics 
rule pts applied case marks places pending complaint ignored transfer results state marks places pending complaint classified 
rule pts maps case state marks pending complaint ready 
states pts pts correspond identity function 
property states transferring case superclass subclass back yields original state 
property 
pts pts pts defined theorems 
pts pts pts pts proof 
desired result follows immediately definitions transfer rules theorems 
note property hold opposite direction may states pts pts pts pts consider example left hand process definition corresponds property right hand process definition corresponds equals pending complaint ignored pts pts pending complaint classified pts pts pending complaint ready 
example shows transferring case subclass superclass back necessarily yield original state 
rule pjs valid transfer rule inheritance preserving transformation rule pjs theorem reverse direction 
recall pjs inserts new tasks transition place rule pjs removes tokens inserted part marks place 
theorem 
transfer rule pjs workflow process definitions satisfying requirements stated theorem 
special place defined theorem pjs transfer rule pjs pjs pjs 
transfer rule pjs valid 
proof 
special transition defined theorem 
transition element theorem reduces theorem case transformation rule pjs reduces transformation rule pps theorem 
element proof similar proof theorem mainly observation 
firing sequence transition transitions occur alternatingly 
property follows fact safe live safe 
illustrate transfer rule pjs place inform man old process definition right hand side marked case transferred changing state 
place inform man marked token inform man moved ready 
property 
pjs pjs defined theorems 
pjs pjs proof 
property follows directly theorems 
rule pj remaining transfer rule map states new workflow process definition parallel branch removed rule pj applied reverse direction 
transfer rule simply removes tokens deleted parallel part 
theorem 
transfer rule pj workflow process definitions satisfying requirements stated theorem 
pj transfer rule pj pj transfer rule pj valid 
proof 

prove pj 
labeled net defined theorem 
firing sequence obtained removing occurrences transitions sequence enabled 
difficult verify state resulting firing equal respect places pj 
right hand side process definition transformed left hand side process definition removing task contact management 
transfer rule pj removes token contact man man contacted case transferred subclass superclass 
property 
pj pj pj defined theorems 
pj pj pj pj proof 
follows directly theorems 
inheritance preserving transformation rule section defined valid transfer rules moving case superclass subclass vice versa 
rules case moved superclass subclass back original state obtained 
generally converse hold 
pending complaint registered cust contacted contact department file dossier contact customer take action contact management contact cust contact man man contacted ignore complaint inform management ready inform man send letter classified classify complaint register inform customer pending complaint registered ready send letter classify complaint cust contacted classified contact department file dossier register contact customer take action contact cust dynamic change superclass left hand side workflow process definition subclass right hand side process definition 
series inheritance preserving transformation rules applied composition appropriate corresponding transfer rules yields composite transfer rule valid 
consider example workflow process definitions shown 
right hand side process definition subclass left hand side process definition life cycle inheritance obtained applying rules pts pps pjs pj 
transfer rule obtained composing transfer rules pts pps pjs pj pj 
consider case superclass marks pending complaint cust contacted 
transfer case subclass places pending complaint cust contacted contact man marked transfer 
man contacted marked contact man transfer rule obtained composing transfer rules pts pts pps pjs pj 
note particular pair workflow process definitions equivalent consider case subclass marking pending complaint inform man transfer case superclass places pending complaint ready marked 
conclude return problem illustrated 
problem dynamic change bug solved 
argue problem solved inheritance concepts provide solution particular example 
explained section satisfactory solution postpone transfer transfer rule 
state token right hand side mapped reasonable state sequential process definition left hand side 
putting token result double execution task send bill 
putting token result skipping task send goods 
transfer rules section show restricts change inheritance preserving transformation rules section possible find satisfactory transfer rule valid dynamic change problem avoided 
formalized term satisfactory easy see transfer rules lead unnecessary skipping multiple execution tasks 
transfer rules offer reasonable solutions types changes typically adapt workflow process definition adding removing alternative branches pts adding removing loops pps adding removing sequential tasks pjs adding removing parallel branches pj 
related dynamic change similarities dynamic change workflow domain schema evolution database domain 
requirements database applications change time definition schema structure data elements stored database changed 
schema evolution active field research decade mainly field object oriented databases cf 
resulted techniques tools partially support transformation data database schema 
dynamic change schema evolution similar additional complications case dynamic change 
shown example possible transfer case 
second acceptable shut system transfer cases restart new procedure 
cases migrated system running 
dynamic change may introduce deadlocks livelocks 
solutions provided today object oriented databases deal complications 
need new concepts techniques 
researchers worked problems related dynamic change 
ellis keddara rozenberg propose technique called change regions 
change region contains parts workflow process definition potentially cause problems respect transfer cases 
change region versions old situation new situation 
solution version complete process covers old new situation changes affect cases soon possible 
parts workflow change regions inactive old cases handled 
approach drawback process definition complex automatic garbage collection added 
drawback fact authors provide method identifying change region change regions need identified manually 
authors provide notion change correctness give specific circumstances guaranteed 
authors improve approach introducing jumpers 
jumper moves case old workflow new workflow 
jump postponed state jumper available 
authors give concrete technique transfer cases jumpers added manually 
keddara ellis language support dynamic evolution workflow systems ml 
different modalities change authors give special purpose meta language geared model workflow change 
agostini de michelis propose technique automatic transfer cases old process definition new process definition give criteria determining transfer possible 
approach interesting automatically computes states possible migrate 
consider example 
approach indicates necessity postpone transfer running cases state 
unfortunately approach works restricted class workflows modeling language allow iteration runtime iteration achieved backward jumps 
summary approach 
casati ceri pernici tackle problem dynamic change set transformation rules partition state space part aborted part transferred part handled old way parts handled hybrid process definitions similar approach change regions :10.1.1.45.6317
reichert dadam similar approach 
semantical issues errors introduced swapping tasks skipping tasks multiple executions task considered 
van der aalst propose fixed set transformation rules support dynamic change 
rules explicitly net level semantical issues considered 
reader interested workflow change petri nets referred contains papers authors mentioned 
refer phd thesis keddara complete overview related dynamic change 
mentioned uses approach inheritance 
transfer rules inheritance preserving transformation rules guarantee preservation soundness property transfer 
semantical errors swapping tasks skipping tasks multiple execution tasks avoided choosing appropriate inheritance notion projection inheritance guarantees tasks skipped transferring case superclass subclass 
combining approach inheritance change regions dynamic change bug illustrated solved approach inheritance 
example case parallel process right needs migrated sequential process left inheritance preserving transformation rules techniques assistance 
acceptable way migrate case state sequential process 
way avoid anomalies postpone transfer case send goods executed 
inheritance notions avoid situation change limited inheritance preserving transformation rules possible circumvent dynamic change bug 
section motivated situations reasonable limit change inheritance notions 
realistic expect change restricted way 
shows situations sense change degree parallelism 
may situations sense deliberately change ordering tasks 
situations inheritance notions applies 
propose approach combining techniques techniques 
suppose want change workflow process definition way changes captured inheritance preserving transformation rules 
step combined approach identification changes captured transformation rules 
applying transformations yields intermediate workflow process definition shown section cases transferred second step combined approach identify remaining changes change regions 
change region defined pair workflow process definitions old region subnet new region subnet simplicity assume change region 
change region techniques 
example degree parallelism increased change region apply theorem 
theorem states possible migrate cases moving parallel process acceptable function migrating cases consider workflow process change region described left hand side describes old region right hand side describes new region 
theorem states state old region possible migrate case new region 
example cases transferred original workflow process definition intermediate process definition new process definition combining techniques 
example assume degree parallelism reduced change region 
case theorem applied 
theorem states called synthetic cut change temporarily adds new workflow process definition deal problem 
consider 
right hand side describes old region left hand side describes new region old new region need added temporarily new workflow process definition 
new cases handled new region existing cases handled old region 
case complete transfer cases possible 
examples show approach combined techniques 
similarly apply techniques 
scope techniques limited changes captured inheritance techniques 
management information transfer rules defined previous section migrate cases workflow process definition workflow process definition 
cases migrated workflow process definition easy provide aggregate management information 
place possible count number cases marking indicating numbers wf net representing workflow process definition manager obtains condensed view progress 
situations multiple versions variants workflow process 
evolutionary change number versions typically limited 
fact cases transferred directly change just active version 
proceed policy transfers postponed case handled completely transfer rule definition transfers delayed multiple active versions 
indicated may various reasons policies legal constraints technical problems managerial considerations 
average flow time cases long evolutionary changes occur frequently dozens versions 
ad hoc change may result larger number variants workflow process 
fact possible situation number variants order magnitude number cases 
section pointed shift sellers market buyers market leads increase number products services offered 
consider example number variants specific car model combinations colors engines options accessories 
number variants may fact exceed number cars sold 
clearly result shift increasing number variants workflow process 
today customers expect flexibility may lead new ad hoc variants 
manage workflow process different versions variants desirable aggregated view progress 
indicated section utmost importance supply manager tools obtain condensed accurate view status cases workflow process hand 
section show inheritance notions introduced facilitate construction aggregate management information 
introduce notion net 
second define notions maximal greatest common divisor mcd gcd minimal common multiple mcm lcm number workflow process definitions 
third discuss utilization inheritance preserving transformation rules section constructing aggregate management information 
discuss approaches obtaining aggregate management information various application areas identified section 
management information nets provide manager succinct information progress need diagram summarizing states running cases versions variants workflow process 
diagram show states individual cases show versions variants workflow process information aggregate level 
version variant workflow process represented workflow process definition sound wf net 
reasonable workflow process definition aggregate management information 
term management information net mi net refer workflow process definition visualize progress 
definition 
mi net 
natural number workflow process definitions versions variants workflow process 
addition workflow process definition net management information net mi net 
total valid transfer rule version variant transfer rule dom valid 
number versions variants workflow process mi net accompanying transfer rules states running case mapped mi net appropriate transfer rule 
note actual transfer cases information state case mapped mi net 
want collect information cases transfer rules definition required total 
furthermore management information accurate possible required transfer rules valid 
note definition restrictive 
fact definition impose restrictions mi net requirement workflow process definition sound wf net serve mi net 
principle map cases set workflow process definitions arbitrary mi net trivial transfer rules definition 
quality management information low 
general easy find meaningful mi net non trivial valid transfer rules 
consider example workflow process definitions shown 
process definitions variants workflow process 
variants result ad hoc changes 
process definition represents example normal process 
process definition yields slightly changed workflow parallel branch containing task check added 
process definition ad hoc variant task check added handle archive 
handle register archive handle register archive handle register archive check check variants workflow process 
note workflow process definitions result evolutionary changes case called versions 
net example oldest process definition successor successor note subclass inheritance relations definition 
problem arbitrary changes considered changes respecting inheritance relations 
remainder section term variant term version referring element set workflow process definitions 
concepts valid ad hoc evolutionary changes 
numbers shown indicate number cases certain state variant 
example variant cases 
cases register executed cases archive executed 
task handle executed cases check executed cases 
note total cases variants shown eleven simple variants real need aggregate management information respect progress 
imagine number variants increases variants complex need aggregate information separate status reports variant shown 
accommodate need cases mapped mi net 
simple variants shown clear construct meaningful mi net 
mi net variants 
mi net emphasize common parts possible 
capture possible routings 
non trivial question obtain meaningful transfer rules 
shows mi nets process variants shown 
left mi net gcd emphasizes common part variants 
variants contains steps register handle archive steps executed order 
right hand side mi net lcm contains tasks variants effort capture possible routings 
note mi nets augmented numbers indicating number cases state 
example mi nets place labeled indicating cases state register handle variant variant variant interesting note workflow process definitions shown subclass life cycle inheritance left hand mi net gcd identical gcd handle register archive register archive check check handle greatest common divisor gcd common multiple lcm workflow process definitions 
constructed gcd applying transformation rule pj theorem constructed gcd applying rule pjs theorem 
result transfer rules id pj pjs previous section map states workflow process definitions gcd 
difficult verify obtains numbers doing 
mentioned mi net shown lcm attempts capture possible behaviors workflow process definitions focusing common parts hiding check check find variants 
means workflow process definitions shown superclass lcm lcm constructed applying inheritance preserving transformation rules pjs pj lcm constructed applying pjs obtained applying pj 
consequently pjs theorem map states lcm furthermore states mapped lcm pj pj theorem states mapped lcm pjs pj pj note figures cases register archive cases register archive mapped place lcm transformation rule pj result place lcm labeled 
place contains information cases residing states marking context management information reason transfer rule pj rule pj rules applicable 
technically possible conservative mapping pj example twelve cases mapped place lcm progressive mapping pj just case mapped place lcm 
purpose management information meaningful pj conservative mapping results view pessimistic 
cases register archive require execution task check conservative mapping cases lcm suggests 
transformation rule pj provide accurate estimate progress 
exclude transformation rule determining management information 
remainder transfer rules previous section pts pps pjs pj pts pts pps pjs pj note meaningful consider pts pts alternative branch variant workflow process mi net cases part alternative branch executed moved point alternative branch starts conservative view point alternative branch ends progressive view 
question mapping accurate depends context 
example figures illustrates basic idea constructing aggregate management information 
shows inheritance concepts introduced useful obtaining meaningful mi nets transfer rules 
clearly names gcd lcm mi nets suggestive 
subsection notions maximal greatest common divisor mcd gcd number variants workflow process notions minimal common multiple mcm lcm number variants formalized 
section role inheritance preserving transformation rules section transfer rules section studied detail 
maximal common divisors minimal common multiples workflow process definitions left hand side wf net gcd shown mi net superclass variants shown 
explained cases variants mapped gcd respectively transfer rule id see definition transfer rule pj see theorem transfer rule pjs see theorem 
think gcd intersection greatest common divisor gcd process definitions shown gcd contains elements variants 
coincidence gcd equals variants 
right hand side mi net lcm shown correspond variants 
think mi net union common multiple lcm variants shown 
terms intersection union may misleading straightforward intersection union network structure set workflow process definitions generally yield mi net 
prefer terms gcd lcm 
notions gcd lcm defined life cycle inheritance relation definition auxiliary notions maximal common divisor mcd minimal common multiple mcm 
recall defined definition denotes behavioral equivalence workflow process definitions 
definition 
mcd gcd mcm lcm 
natural number workflow process definitions 
net maximal common divisor mcd 
lc workflow process definition lc lc 
net greatest common divisor gcd 
mcd 
mcds 

net minimal common multiple mcm 
lc workflow process definition lc lc 
net common multiple lcm 
mcm 

note notions mcd gcd mcm lcm defined respect life cycle inheritance respect size workflow process definitions size workflow process definition determined number tasks 
mcd workflow process definitions typically contains fewer tasks conforms intuitive notion mcd 
reading definition mcd number process variants counterintuitive mcd required superclass process variants 
similarly mcm typically contains tasks straightforward show mcm subclass life cycle inheritance mcd lc transitive see property mcm typically larger mcd terms numbers tasks 
consider example process definitions shown 
definition gcd mcd variants shown lcm mcm variants 
lcm lc gcd lcm tasks gcd definition raises interesting questions 
set workflow process definitions mcd mcm 

set workflow process definitions gcd lcm 
remainder answer questions 
show answer question affirmative 
unfortunately answer second question negative 
note far terms gcd lcm gcd lcm 
follows immediately definition set workflow process definitions equivalent sense defined definition gcd set workflow process definitions unique branching bisimilarity 
true lcm set workflow process definitions 
remainder terms gcd lcm 
property needed prove set workflow process definitions mcd mcm 
set totally ordered life cycle inheritance relation lc workflow process definitions called chain 
property 
workflow process definitions lc infinite chain lc lc 
different respect workflow process definitions 
lc lc lc 
lc proof 
workflow process definitions lc observations important 

second 
third finite 
lc lc 
infinite chain different workflow process definitions 
lc lc lc 
lc follows observations 

third observation states finite 
yields contradiction proves property 
theorem answers question raised affirmatively 
theorem 
existence mcd mcm 
natural number workflow process definitions exists mcd 
exists mcm 
proof 
recall property 
states infinite chains workflow process definitions related lc consequently prove existence mcd suffices show exists workflow process definition superclass variants 
similarly prove existence mcm suffices show workflow process definition subclass variants 
workflow process definition containing task labeled 
clearly superclass workflow process definition 
superclass variants proves existence mcd 
net constructed variants 
follows 
source place output transitions variant 
new transitions unique task label occur alphabets variants 
source place variant new identifier connected output place new transitions 
way new transitions act guards original variants 
sink places variants simply fused yielding sink place clearly subclass variant blocking new transitions hidden obtains workflow process definition branching bisimilar variants 
conclude mcm variants exists 
answer question phrased positive set workflow process definitions mcd mcm 
unfortunately mentioned answer second question negative 
set workflow process definitions may different mcds means gcd 
similarly set workflow process definitions may different lcm 
consider example process definitions shown 
mcds 
sequential process definition consisting task prepare shipment task send goods task record shipment sequential process definition consisting task prepare shipment task send bill task record shipment mcds easy verify workflow process definitions mcds 
superclass cases smaller respect lc candidate 
similarly workflow process definitions shown mcm 
consider process definition mentioned proof theorem 
consider workflow process definition consisting starting additional guard transitions 
guard transitions unique label say respectively 
blocked hidden branching bisimilar blocked hidden branching bisimilar subclass variants 
workflow process definition subclass variants superclass branching bisimilar mcm labels chosen arbitrarily pair labels 
combinations labels variants shown conclude set workflow process definitions mcds 
example reason agree presence tasks send goods send bill agree ordering 
situations unique modulo branching bisimilarity mcd gcd unique mcm lcm 
example variants shown gcd lcm nets gcd lcm respectively 
theorem states necessary sufficient requirements existence gcd lcm 
theorem 

natural number workflow process definitions workflow process definition gcd 

lc 
workflow process definition lc implies lc workflow process definition lcm 

lc 
workflow process definition lc implies lc proof 
proofs parts theorem similar 
prove part 
assume gcd 
follows definition mcd gcd lc 
satisfies requirement theorem 
prove satisfies second requirement assume exists workflow process definition lc lc follows property chosen way mcm 
definition gcd means contradicts fact lc lc partial order see property 
satisfies second requirement theorem 
second workflow process definition satisfying pair requirements theorem 
consider definition mcd 
assume workflow process definition lc lc follows lc combination lc implies lc partial order see property 
net satisfies requirements definition means mcd 
assume arbitrary mcd variants 
follows assumptions lc consequently definition mcd yields means satisfies definition gcd 
far formalized notions mcd gcd mcm lcm 
shown mcds exist necessarily unique 
set workflow process definitions unique mcd mcm mcd mcm gcd lcm 
reason studying notions suitable aggregate management information 
mcd mcm set workflow process definitions suitable mi net defined definition process definitions 
general straightforward determine mcd mcm set workflow process definitions exist gcd lcm set 
addition mcd mcm gcd lcm possible find meaningful transfer rules mapping cases various workflow process definitions net 
situations quite easy pinpoint gcd lcm set workflow process definitions 
remainder subsection devoted explaining number situations 
subsection return topic finding appropriate transfer rules 
consider number workflow process definitions variants single workflow process 
variants equivalent behavioral equivalence relation arbitrary variant gcd lcm 
second variants form chain variants totally ordered lc relation element lcm greatest element gcd 
third variant superclass variants variant gcd 
note workflow process definitions satisfy requirement 
process definition superclass means gcd variants 
result conforms earlier claims 
fourth variant subclass variants variant lcm 
fifth variants tasks common gcd equals empty workflow process definition introduced proof theorem 
variants common respect internal places transitions labels start real task non labeled transition lcm simply union workflow process definitions 
property formalizes claims 
property 

natural number workflow process definitions 

gcd lcm 

lc lc 
lc lcm gcd 

lc gcd 

lc lcm 

gcd 

transitions label different lcm 
proof 
properties follow immediately theorem 
prove fifth property observe superclass life cycle inheritance variants 
see definition life cycle inheritance clearly hiding tasks variant yields process equivalent second arbitrary superclass 
consider variants 
lc follows similarly 
follows means 
consequently means lc theorem conclude gcd set variants prove property show subclass variants 
consider variant transitions label different blocking transitions yields process branching bisimilar lc means subclass variants 
second prove workflow process definition subclass variants subclass assume subclass variants 
sets task labels see definition life cycle inheritance 
clearly label appears alphabet precisely variants 
lc combining results derived far follows theorem lcm set variants inheritance preserving transformation rules management information section notion mi net introduced means collect aggregate management information status cases number variants workflow process 
essential set total valid transfer rules available map information running cases mi net 
section introduced notions mcd gcd mcm lcm number workflow process definitions 
argued mcd gcd mcm lcm mi nets candidates collecting aggregate management information 
easy determine mcd mcm gcd lcm 
indicated section may situations gcd lcm exist 
mapping running cases different variants workflow process suitable mi net crucial 
unfortunately straightforward obtain useful set transfer rules 
section shown possible transfer case workflow process definition constructed means transformation rules section 
inheritance preserving transformation rules accompanying transfer rules extract aggregate management information 
observation 
consider set workflow process definitions created means inheritance preserving transformation rules section directions 
pair elements set transfer rules section construct total valid transfer rule maps cases element pair element 
observation implies workflow process definition set process definitions created means inheritance preserving transformation rules section forms meaningful mi net 
consider workflow process definitions 
workflow process definition obtained means inheritance preserving transformation rule pj theorem obtained transformation rule pjs theorem 
means cases mapped means transfer rules pj theorem pjs theorem respectively 
interesting see cases mapped assume mi net 
cases mapped means rule pj theorem 
recall explicitly excluded rule pj context aggregating management information 
cases mapped means composite transfer rule pj pjs net intermediate map cases similarly cases mapped means transfer rules pjs theorem pjs pj observation important consequences 
consider set workflow process definitions satisfying requirement observation 
mentioned process definition set chosen mi net 
transfer rules section transformation rules pts pps pjs pj pts pts pps pjs pj provide mappings running cases workflow process definitions states mi net 
states close actual states cases possible important quality management information 
note chosen mi net necessarily mcd mcm set process definitions see example discussed illustrated figures 
set workflow process definitions satisfies conditions property suitable choice mi net yields gcd lcm see example illustrated figures 
illustrates slightly larger example 
shows workflow process definitions 
process definitions middle variants complaints handling process 
registered cust contacted contact department file dossier contact customer take action contact cust ready classified classify complaint register pending complaint gcd registered cust contacted contact department file dossier contact customer take action contact cust ready classified classify complaint register inform customer pending complaint registered cust contacted contact department file dossier contact customer take action contact management contact cust contact man man contacted inform management ready inform man send letter classified classify complaint register inform customer pending complaint lcm registered cust contacted contact department file dossier contact customer take action contact management contact cust contact man man contacted inform management ready inform man send letter classified classify complaint register pending complaint send letter send letter ignore complaint ignore complaint workflow process definitions aggregate views gcd lcm variants hold cases process definitions mi nets 
net gcd top gcd net lcm bottom lcm net gcd obtained means transformation rules pps pts applied reverse direction gcd obtained means rules pjs pj reverse direction 
furthermore net yields lcm rules pjs pj yields lcm rules pps pts 
transfer rules section map cases variants composition pps pts pts equals pts example map cases gcd composition pjs pj map cases gcd composition pjs pj map cases lcm composition pps pts map cases lcm consider example place ready gcd label indicates cases state corresponding place ready 
cases ready cases ready just cases ready 
cases state corresponding inform man task inform management cases ready 
brings total cases state ready gcd note lcm just cases state corresponding place ready lcm distinguishes inform man ready 
example illustrating lcm complex contains detailed information gcd succinct contains information relevant variants 
suitable mi net depends context 
management information workflow management domain section management information return section 
section discussed relevance inheritance domains ad hoc change evolutionary change workflow templates commerce 
remainder discuss domains possible approaches obtaining aggregate management information inheritance preserving transformation rules transfer rules 
ad hoc change typically results slightly different variants predefined workflow process 
variants usually result error rare event special demands customer 
predefined workflow process seen template 
variants constructed extending template workflow inheritance preserving transformation rules template variant template workflow gcd variants see property 
variants constructed applying inheritance preserving transformation rules reverse direction template variant template workflow lcm variants see property 
variants constructed applying inheritance preserving transformation rules directions template workflow gcd lcm suitable mi net presenting aggregate management information 
change restricted inheritance preserving transformation rules transfer rules section obtain transfer rules ad hoc variants template workflow process see observation 
evolutionary change typically results limited set versions workflow process 
time change occurs cases transferred immediately just active version 
transfers postponed transfer rule need aggregate management information 
case evolutionary change version workflow process candidate presenting aggregate management information 
changes restricted transformation rules problem map cases version workflow process observation 
note changes past extensions transformation rules applied forward direction version workflow process definition lcm variants see property 
workflow template starting point designing workflows template candidate projecting aggregate management information 
restricting modifications template inheritance preserving transformation rules cases mapped workflow template problems 
commerce important business partners agree common workflow process see section 
business partners useful aggregated management information level common workflow process 
section suggested local workflow processes subclass part common workflow process projection inheritance 
local extensions restricted transformation rules pps pjs pj transfer rules pps pjs pj map cases common process definition 
common process definition certain restrictions gcd workflow processes perceived business partners local global view 
tool support preceding sections shown inheritance concepts tackle problems related ad hoc change evolutionary change workflow processes 
concepts enhance application workflow templates may beneficial design enactment interorganizational workflows see section 
unfortunately today workflow management systems support workflow inheritance discussed 
workflow management systems adopted object oriented concepts 
example inconcert allows building workflow class hierarchies 
class hierarchies inheritance restricted static interface attributes part relationships 
knowledge single workflow management system dynamics workflow process account defining inheritance 
section briefly discuss results aid existing workflow management systems 
remainder section describe woflan allows verification soundness 
recall soundness pivotal notions inheritance transformation rules transfer rules 
discuss tool support inheritance notions introduced section 
woflan check relationships inheritance relations introduced section 
consider ways integrate change facilities services support dynamic change construct aggregate management information existing workflow management systems 
verifying soundness considered workflow process definitions 
recall workflow process definition sound wf net 
workflow process definition determines arbitrary process process desirable properties proper completion absence deadlock 
see definitions wf net soundness 
today workflow management systems enact workflow processes having properties 
support advanced techniques verify correctness workflow process definitions :10.1.1.30.3125
design time hardly checks verify properties stated definitions fulfilled 
violations properties typically result serious run time errors deadlocks livelocks 
contemporary workflow management systems typically restrict number trivial syntactical checks 
serious errors deadlocks livelocks may remain undetected 
means erroneous workflow may go production causing dramatic problems organization 
erroneous workflow may lead extra legal problems angry customers managerial problems depressed employees 
important verify correctness workflow process definition operational 
frequent ad hoc evolutionary changes role verification important 
reason developed woflan workflow analyzer 
woflan stand verification tool specifically designed workflow analysis 
woflan product independent possible analyze processes designed various workflow products different vendors 
woflan able handle complex workflows hundreds tasks 
woflan provides point diagnostic information repairing errors detected 
pivotal woflan notion soundness defined definition 
fact woflan uses slightly weaker version soundness safeness requirement omitted cf 
:10.1.1.30.3125
woflan analyzes stronger notion 
soundness notion expresses minimal requirements workflow satisfy includes properties proper termination absence deadlock livelocks 
current version woflan analyze workflows designed workflow products cosa staffware meteor protos 
cosa leading workflow management systems dutch workflow market 
cosa uses petri nets modeling language allows modeling enactment complex workflow processes advanced routing constructs 
cosa support verification 
fortunately woflan analyze workflow process definition constructed cone cosa network editor design tool cosa system 
woflan import process definitions staffware meteor protos 
staffware widespread workflow management systems world 
meteor workflow management system corba supports transactional workflows :10.1.1.101.5199
protos business process reengineering tool re design document workflow processes 
illustrate woflan consider wf net shown 
shows workflow modeled cosa shows diagnostics provided woflan analyzing workflow 
woflan reports workflow modeled cosa sound connection tasks ignore complaint inform management source error 
note boundedness safeness property diagnosis woflan refer short circuited workflow net see definition wf net theorem characterization soundness 
information woflan refer interested reader download version woflan world wide web 
note inheritance preserving transformation rules section appear reduce need tool woflan rules preserve soundness 
transformation rules require essential parts functionality implemented woflan 
consider example requirement theorem requirements theorem requirement theorem requirements theorem 
requirements need checked algorithms implemented woflan 
explained subsection woflan provides excellent basis incorporate support inheritance 
cosa design erroneous workflow process definition shown 
supporting inheritance section shown application areas desirable limit possible changes imposing inheritance relationships designed workflow process definition extended way result subclass predefined workflow process definition workflow template existing workflow life cycle inheritance 
recall defined inheritance relations protocol projection inheritance protocol inheritance projection inheritance life cycle inheritance 
basically ways support inheritance relations 

enumerative verification method workflow process definitions decidable workflow process definition subclass workflow process definition inheritance relations definition 
comparing state spaces process definitions possible decide process definitions branching bisimilar 
approach systematically blocking hiding tasks enumerating reachable states resulting nets comparing state spaces 
tools check branching bisimilarity enumerative methods 
known deciding finite processes branching bisimilar done polynomial time size problem defined number states transitions processes 
workflow process limited number tasks states 
practical problems separate verification tool enumerative methods 
difficult provide interface workflow editor diagnostics provided woflan verifying correctness cosa design shown 
workflow design tool verification tool 
workflow editor construct state space typically containing thousands states send verification tool 
second difficult translate results generated verification tool diagnostics understandable workflow designer 

workflow editor supporting inheritance preserving transformation rules section identified inheritance preserving transformation rules 
enumerative method verify inheritance relations possible limit changes workflow editor inheritance preserving transformation rules identified 
note transformation rules correspond design constructs typically constructing adapting workflow process definition 
editor augmented rules benefits 
rules enumerative method efficient computational point view 
second user forced correct designs respect selected inheritance relation correctness design 
need provide diagnostics locate source error 
unfortunately editors current workflow management systems provide facilities enforce design rules conditions transformation rules quite complex check tools dedicated petri net analysis 
easy extend existing workflow tools inheritance preserving transformation rules 
ideal situation editor automatically checks inheritance relationships limits change inheritance preserving transformation rules 
moment tools missing 
un fortunately workflow management systems provide sophisticated editors supporting inheritance notions near 
useful extend woflan support inheritance notions 
recall woflan import process definitions workflow tools 
woflan provide tool independent support inheritance 
principle possible implement enumerative verification inheritance relationships support inheritance preserving transformation rules woflan 
current version woflan implements enumerative approach algorithm 
check workflow process definition subclass workflow process definition inheritance relations definition 
protocol inheritance projection inheritance protocol projection inheritance check quite efficient polynomial number states transitions workflow processes 
current version woflan involved check life cycle inheritance 
moment woflan supports brute force approach worst case checks possible partitions new tasks tasks workflow process definition sets tasks need blocked need hidden see definition 
workflow designer current version woflan verify proposed change workflow process captured inheritance relations 
note approach partly solves problems related enumerative verification mentioned 
woflan provides tool independent support state spaces may large difficult provide useful diagnostics case desired subclass relationship exist 
algorithms woflan verify requirements inheritance preserving transformation rules 
possible extend woflan support transformation rules relatively straightforward way 
order useful existing workflow tools workflow designer translate transformation verified extended version woflan workflow model tool 
translation may error prone modeling language workflow tool closely related petri nets 
alternative transformation rules method employed combination existing workflow tools 
purpose useful translate rules specific modeling language workflow tool 
means workflow designer check appropriate conditions making change 
necessary verification support provided woflan rules simplified restrictions 
currently method appears promising way enable workflow designers benefit transformation rules current technology 
supporting dynamic change today workflow management systems provide versioning mechanism possible enact multiple versions workflow process time 
case workflow instance refers version possible migrate case version 
addition mechanism suitable ad hoc change 
workflow management systems inconcert ensemble provide support ad hoc changes executing case possible adapt corresponding process definition case private copy workflow process definition modified problems 
today commercial workflow management systems support dynamic change possible transfer case process definition 
applications dynamic changes necessity 
section transfer rules assumption changes limited application inheritance preserving transformation rules section directions 
support transfer cases version process workflow enactment service needs extended 
change limited inheritance preserving transformation rules implementation transfer facility straightforward need postpone transfers just active version workflow process 
note assumption implies workflow management system includes support inheritance rules discussed previous subsection 
transfer cases handled workflow engine separate service 
workflow engine extended transfer facility engine notified time new version workflow process 
case active tasks executed transfer simple database update change case create new workflow state marking 
task executed case needs transferred transfer delayed completion task running task aborted rolled back case transferred 
separate service transfer cases service integrated engine relevant cases need blocked instances need transferred frozen avoid concurrency problems 
providing aggregate management information multiple versions variants workflow process desirable aggregated view progress condensed management information showing statuses cases diagram mi net 
section shown change limited inheritance preserving transformation rules applied directions possible construct view 
purpose information needed states cases involved including version variant information transformation rules move version variant mi net 
suitably chosen mi net transfer rules calculated automatically cases mapped single diagram 
clearly today workflow management systems provide facility show aggregate management information level versions variants processes 
fact workflow management systems provide hardly management information 
implementation facility far trivial circumstances simplify realization ideas section 
information needed distill management information extracted interfering enactment service cases transferred 
second functionality needed implement dynamic change transfer rules facility 
tackles notorious problems related adaptive workflow supporting dynamic change providing management information right aggregation level 
solution approach inheritance 
inheritance notions focus dynamic behavior processes static structure particular relevance workflow management 
provided inheritance relations protocol projection inheritance protocol inheritance projection inheritance life cycle inheritance inheritance preserving transformation rules applied directions pts pps pjs pj transfer rules pts pps pjs pj pj pts pts pps pjs pj 
transformation rules restrict changes workflow process definitions way new workflow process definition inherits certain properties old workflow process definition 
restrictions useful dealing ad hoc workflow evolutionary change workflow templates interorganizational workflows 
transformation rules combined transfer rules enable dynamic change aggregation management information 
process changes restricted transformation rules typical problems related adaptive workflow avoided 
transfer rules transfer cases workflow process definition generate condensed management information showing aggregate view progress 
inheritance notions interesting theoretical practical perspective 
hand inheritance relations lead interesting concepts gcd lcm set process definitions 
hand provide concrete solutions problems today workflow management systems faced 
interesting topic research application inheritance rules various domains 
mentioned application projection inheritance commerce 
application integration inheritance concepts component software architectures 
challenge deal dynamic change problem case inheritance relationship old new process definition 
solution merge approach techniques explained section 
combined approach identifies changes captured inheritance preserving transformation rules regions changes captured rules 
changes inside regions handled techniques 
final challenge develop tool support inheritance notions 
explained section tool woflan provides starting point 
ultimate goal integrate inheritance notions industrial workflow management system supports dynamic change aggregation management information 
acknowledgment want robert van der eric verbeek anonymous referee careful reading useful comments early versions 
eric verbeek valuable contribution going development woflan 

van der aalst 
verification workflow nets 
balbo editors application theory petri nets proceedings volume lecture notes computer science pages toulouse france june 
springer berlin germany 

van der aalst 
application petri nets workflow management 
journal circuits systems computers 

van der aalst 
process oriented architectures electronic commerce interorganizational workflow 
information systems 

van der aalst basten 
life cycle inheritance petri net approach 
balbo editors application theory petri nets proceedings volume lecture notes computer science pages toulouse france june 
springer berlin germany 

van der aalst basten verbeek 
adaptive workflow interplay flexibility support 
editor enterprise information systems pages 
kluwer academic publishers norwell 

van der aalst desel oberweis editors 
business process management models techniques empirical studies 
springer berlin germany 

van der aalst ter hofstede 
verification workflow task structures petri approach 
information systems 
appear 

van der aalst de michelis ellis editors 
workflow management net concepts models techniques tools wfm proceedings lisbon portugal june 
eindhoven university technology eindhoven netherlands computing science report 

adam huang 
modeling analysis workflows petri nets 
journal intelligent information systems march 

agostini de michelis 
simple workflow models 
van der aalst de michelis ellis editors workflow management net concepts models techniques tools wfm proceedings pages lisbon portugal june 
eindhoven university technology eindhoven netherlands computing science report 

baan 
product description 
baan netherlands 

baeten weijland 
process algebra volume cambridge tracts theoretical computer science 
cambridge university press cambridge uk 

basten 
branching bisimilarity equivalence 
information processing letters may 

basten 
terms nets system design petri nets process algebra 
phd thesis eindhoven university technology eindhoven netherlands december 

basten van der aalst 
inheritance behavior 
computing science report eindhoven university technology eindhoven netherlands november 

basten van der aalst 
inheritance dynamic behavior development groupware editor 
agha de rozenberg editors concurrent object oriented programming petri nets lecture notes computer science advances petri nets 
springer berlin germany 
appear 


transformations decompositions nets 
brauer reisig rozenberg editors advances petri nets part petri nets central models properties volume lecture notes computer science pages 
springer berlin germany 

bertino 
object oriented database systems concepts architectures 
addisonwesley 

booch rumbaugh jacobson 
unified modeling language user guide 
addison wesley 

casati ceri pernici pozzi 
workflow evolution 
data knowledge engineering 

christensen mortensen 
world petri nets 
www daimi au dk 

silva 
improving linearly characterization nets 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer berlin germany 

de michelis ellis 
computer supported cooperative petri nets 
reisig rozenberg editors lectures petri nets ii applications volume lecture notes computer science pages 
springer berlin germany 

desel esparza 
free choice petri nets volume cambridge tracts theoretical computer science 
cambridge university press cambridge uk 

ellis keddara 
ml modeling language support dynamic evolution workflow systems 
computer supported cooperative 
appear 

ellis keddara rozenberg 
dynamic change workflow systems 
ellis kling mylopoulos kaplan editors conference organizational computing systems proceedings pages milpitas california august 
acm press new york 

ellis keddara wainer 
modeling workflow dynamic changes timed hybrid flow nets 
van der aalst de michelis ellis editors workflow management net concepts models techniques tools wfm proceedings pages lisbon portugal june 
eindhoven university technology eindhoven netherlands computing science report 

ellis nutt 
modelling enactment workflow systems 
ajmone marsan editor application theory petri nets proceedings volume lecture notes computer science pages chicago illinois june 
springer berlin germany 

esparza nielsen 
issues petri nets survey 
journal information processing cybernetics 


ensemble user guide 
costa mesa california 

georgakopoulos hornick sheth 
overview workflow management process modeling workflow automation infrastructure 
distributed parallel databases 

van glabbeek 
linear time branching time spectrum ii semantics sequential systems silent moves extended 
best editor concur th 
international conference concurrency theory proceedings volume lecture notes computer science pages hildesheim germany august 
springer berlin germany 

van glabbeek weijland 
branching time abstraction bisimulation semantics extended 
ritter editor information processing proceedings ifip th 
world computer congress pages san francisco california august september 
elsevier science publishers north holland 

van glabbeek weijland 
branching time abstraction bisimulation semantics 
journal acm 

groote vaandrager 
efficient algorithm branching stuttering equivalence 
paterson editor automata languages programming th 
international colloquium proceedings volume lecture notes computer science pages warwick uk july 
springer berlin germany 

han sheth 
adaptive workflow modeling 
information systems analysis synthesis th 
international conference proceedings pages orlando florida july 

horn jablonski stein 
comprehensive approach flexibility workflow management systems 
georgakopoulos prinz wolf editors activities coordination collaboration wacc proceedings pages san francisco california february 
acm press new york 

hernandez 
sap handbook 
mcgraw hill 

inconcert 
inconcert process designer guide 
inconcert cambridge massachusetts 

jablonski bussler 
workflow management modeling concepts architecture implementation 
international thomson computer press london uk 

keddara 
dynamic evolution workflow systems 
phd thesis university colorado boulder colorado 

klein dellarocas bernstein editors 
adaptive workflow systems cscw workshop proceedings seattle washington november 
ccs mit edu klein cscw 


workflow imperative 
van nostrand reinhold new york 

lawrence editor 
workflow handbook workflow management coalition 
john wiley sons new york 

malone crowston lee pentland tools inventing organizations handbook organizational processes 
management science 

murata 
petri nets properties analysis applications 
proceedings ieee april 

oberweis 
modellierung und ausf von workflows mit petri 
teubner germany 
german 

pallas athena 
protos user manual 
pallas athena bv netherlands 


implementing baan iv 
macmillan computer publishing new york 

rozenberg simone 
survey equivalence notions net systems 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer berlin germany 


income workflow user manual 
gmbh germany 

reichert dadam 
supporting dynamic changes workflows losing control 
journal intelligent information systems 

reisig 
petri nets volume eatcs monographs theoretical computer science 
springer berlin germany 

sheth 
contemporary workflow process automation adaptive dynamic activity coordination collaboration 
wagner editor database expert systems applications th 
international workshop dexa proceedings pages toulouse france september 
ieee computer society press los alamitos california 

sheth kochut miller 
large scale distributed information systems lsdis laboratory meteor project page 
lsdis cs uga edu proj meteor meteor html 

software ley 
cosa user manual 
software ley gmbh germany 

staffware 
staffware user manual 
staffware plc uk 

verbeek van der aalst 
woflan home page 
www win tue nl woflan 

verbeek basten van der aalst 
diagnosing workflow processes woflan 
computing science report eindhoven university technology eindhoven netherlands may 

van der aalst 
conservative adaption workflow 
wolf reimer editors practical aspects knowledge management pakm st 
international conference workshop adaptive workflow proceedings pages basel switzerland october 
extended version available computing science report eindhoven university technology eindhoven netherlands 

van der aalst 
ad hoc workflow problems solutions 
wagner editor database expert systems applications th 
international workshop dexa proceedings pages toulouse france september 
ieee computer society press los alamitos california 

weijland 
synchrony asynchrony process algebra 
phd thesis university amsterdam amsterdam netherlands 

wolf reimer editors 
practical aspects knowledge management pakm st 
international conference workshop adaptive workflow proceedings basel switzerland october 

