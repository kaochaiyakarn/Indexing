interactive collision detection philip hubbard department computer science box brown university providence ri collision detection response virtual reality application believable 
unfortunately existing collision detection algorithms slow interactive 
new algorithm fast interruptible allowing application trade quality speed 
algorithm uses simple dimensional geometry approximate motion sets spheres approximate dimensional surfaces 
algorithm allows sample application run times faster runs existing algorithms 
physical world live filled solid objects 
solid objects collide penetrate flex break 
computer simulation virtual world believable exhibits property 
term collision handling algorithm part simulation system enforces objects 
researchers developed variety algorithms 
typical algorithm parts 
detection algorithm determines simulated objects penetrate algorithm leave 
response algorithm corrects behavior objects penetrate 
parts algorithm pose interesting problems focus detection algorithms 
discussion response algorithms see baraff :10.1.1.24.9637
despite wealth literature detection algorithms algorithms adequately address needs interactive applications virtual reality 
interactive application detection algorithm run real time rates objects collide tolerate objects motion guided user objects motion fully pre specified 
new detection algorithm meets criteria approximation 
essence algorithm computes approximate characterization presence absence collisions 
accuracy approximation controlled application program calls algorithm 
algorithm refines approximation interrupted program accuracy approximation improves length time interruption 
approach gives application program flexibility allowing degrade quality detection increase speed important 
approach analogous progressive refinement rendering 
success rendering technique suggests technique prove valuable 
algorithm forms approximate geometry 
dimensional structure call space time bound 
space time bound provides conservative estimate object may 
algorithm uses space time bounds focus attention objects collide 
call second form approximate geometry sphere tree 
structure contains sets spheres set approximating threedimensional surface object different level detail 
sphere trees allow algorithm quickly find approximate contacts objects 
previous way evaluate previous detection algorithms note improve naive algorithm 
consider simulation involving agents objects move presents naive algorithm attempts detect collisions agents time period 
paragraphs discuss problems algorithm 
problem concerns outermost loop algorithm 
loop increments time variable fixed timestep deltat 
notice larger deltat steps deltat agent fa move position time agent fa move position time surfaces penetrate collision occurs time naive detection algorithm 
algorithm faster smaller deltat algorithm accurate 
way get speed accuracy adaptive timestep inversely proportional likelihood collision 
call naive algorithm inability adaptively change timestep fixed timestep weakness 
second problem naive algorithm presence inner loops 
loops cycle pairs agents making processing time increase quadratically number agents 
call need check pair timestep pairs weakness 
naive algorithm third problem involves statement innermost loop 
determining surfaces penetrate tricky 
example polyhedral intersections involve special cases complicated process 
term pair processing algorithm code checks pair surfaces penetration time detection algorithm suffers weakness pair processing algorithm calls robust efficient 
authors describe solutions weaknesses 
authors address 
furthermore algorithms nearly solve impose restrictions agents making algorithms unsuitable interactive applications 
eliminate fixed timestep weakness researchers geometry explicit time dimension 
cameron describes bounds agents modeled constructive solid geometry 
von herzen lipschitz condition bound space occupied time varying surfaces 
duff couples octree subdivision interval arithmetic 
techniques limitations 
cameron duff address pairs weakness 
von herzen duff consider motion involving acceleration 
importantly techniques handle motion fully pre specified 
interactive application algorithms 
researchers address fixed timestep weakness assuming pre specified motion 
show increase deltat collisions occur 
technique efficiently handle curved paths eliminate pairs weakness inspired 
structures somewhat similar space time bounds solve fixed timestep weakness 
approach remedy pairs weakness situations 
space subdivision popular way mitigate pairs weakness omega gamma worst case exists 
algorithm shaffer herb exemplifies octrees researchers 
turk presents simpler technique divides space uniformly 
algorithms address fixed timestep pair processing weaknesses flexible handle motion fully pre specified 
turk algorithm particular viable approach low overhead 
compare algorithm section 
pair processing thibault naylor show binary space partitioning bsp trees accelerate polyhedral penetration testing average 
sclaroff pentland interesting algorithm approximates surfaces deformed superquadrics 
authors demonstrate approach works wide variety surfaces knowledge authors show approximation collision detection tractable 
algorithm overview section mentions detection algorithm implements form progressive refinement 
algorithm operates sequence steps allowing interrupted step 
step broad phase 
broad phase uses details agents current motion determine earliest time collision possible 
algorithm executes steps time arrives 
time algorithm execute remaining steps called collectively narrow phase 
narrow phase processes agents involved possible collision determining collide 
narrow phase terminates reporting collision lack thereof algorithm returns broad phase cycle repeats 
section states algorithm precisely 
broad phase accurately detects collisions agents bounding boxes 
step narrow phase approximates geometry possibly colliding agents twice accuracy preceding step providing twice detection accuracy application program choose interrupt 
geometric approximation conservative collision involving true geometry corresponds collision involving approximate geometry 
avoid fixed timestep pairs weaknesses broad phase uses space time bounds structures describe sections 
sphere trees describe section allow narrow phase avoid pair processing weakness 
space time bounds section defines space time bounds structures broad phase algorithm 
pedagogical purposes assuming agent point soon relax assumption 
position time denote velocity denote acceleration say know scalar upper bound conclude jx gamma assertion related taylor theorem proof difficult 
importance inequality comes geometric interpretation 
inequality states position time distance point bound position sphere radius centered bound position times structure cross section particular sphere 
understand structure consider analogous structure moving cross sections bounding structure circles radius spheres 
gives example structure 
due factor structure definition call bounding structure parabolic horn 
extend idea parabolic horn cover agent merely point 
moves agent rotate point 
space possibly swept rotation bounded sphere radius radius parabolic horn parabolic horn cross views parabolic horn point point point hyper trapezoid motion sections expanded simple approach overly conservative shape 
case represent union parabolic horns 
see section detection algorithm needs find intersections bounding structures 
parabolic horns contain quadratic factor costly intersect 
solution build simple polyhedron called hyper trapezoid encloses parabolic horn 
cross sections hyper trapezoid isothetic cubes bounds cross sections respectively parabolic horn 
cross sections hyper trapezoid defined linear interpolation endpoint cubes 
note hyper trapezoid faces face cross sectional cubes 
cross section face isothetic square 
cross sections face normal axis say face normal axis 
feature faces important section 
guaranteed enclose parabolic horn horn cross sections increase size monotonically shows hyper trapezoid 
far information direction acceleration 
know limits direction remove part hyper trapezoid 
rectangle isothetic edges parallel coordinate axes cube isothetic faces isothetic rectangle 
space time bound motion say know vector delta sort limit arises moves away particular direction avoiding obstructing wall bouncing agent 
limit conclude gamma delta proof assertion identical proof inequality 
appreciate significance inequality think normal vector plane passes point inequality states time vector position back side plane 
inequality holds point displace radius front plane hyper trapezoid clipped plane section describes implement clipping 
set planes defined time interval cross sections plane 
call plane cutting plane 
hyper trapezoid cutting plane complete space time bound 
shows example 
algorithms space time bounds assume provided application program 
example consider driving flight simulator 
user starts turning vehicle simulator knows acceleration point center turn knows holds vehicle turned halfway 
simulator estimate sharpness turn 
space time bound intersections agents collide time space time bounds intersect time space time bounds conservative overestimates 
detection algorithm compute earliest agents time intuitively clear approach solves fixed timestep weakness 
section presents precise statement approach 
current section sketches compute avoiding pairs weakness details computation 
main source complexity intersection algorithm presence cutting planes spacetime bounds 
simplify algorithm observing intersection hyper trapezoid faces necessary condition sort intersection space time bounds 
proof relies fact cutting planes remove volume add volume 
convenient structure search intersections space time bounds search face intersections 
recall cross section hyper trapezoid face normal standard axis face normal axis 
partition set faces subsets ff ff face normal axis ffg ff fx zg sets important reason hyper trapezoids intersect time intersection face ff face ff ff fz zg 
contra positive assertion guides intersection algorithm 
specifically algorithm considers turn testing faces current intersection 
contains intersection hyper trapezoids intersect 
find intersections set ff algorithm projects face ff ff plane 
normal ff axis points coordinate ff coordinate projection line segment 
segments intersect corresponding faces may intersect faces intersect cross sections intersect 
cross sections isothetic squares ff coordinate checking intersection reduces simple dimensional problem 
bentley ottmann algorithm find intersections segments corresponding ff algorithm sweeps line ff plane low coordinates high coordinates reporting intersection finds 
bentley ottmann algorithm runs log time segments intersect times 
agents worst case value 
build call rebuild space time bounds build earliest inter 
bounds gamma build deltat overlap true really inter 
expiring pair processing algorithm finds agents penetrate build return collision build build deltat overlap false build return collision detection algorithm called time 
encountered worst case practice 
fact hundreds test runs described section average number segment intersections processed real face intersection percent worst case value 
empirical evidence suggests effectively eliminated pairs weakness 
remainder intersection algorithm deals cutting planes 
algorithm finds faces intersect checks intersections involving faces cutting planes space time bounds 
computation involves intersecting planes determining intersection inside hyper trapezoids 
subproblem variable linear programming problem constraints involved solve problem efficiently straight forward modifications bentley ottmann algorithm 
detecting collisions section describes detection algorithm uses results section 
assume algorithm part larger graphics system calls algorithm rendering frame 
called algorithm determines agents collided previous frame 
returns details collisions finds system call response algorithm 
presents pseudo code algorithm 
paragraphs explain details 
denote current time time system calls algorithm 
start simulation algorithm builds space time bounds agents 
space time bounds expire time time longer know values section 
building algorithm invokes intersection algorithm section 
intersection algorithm returns time pair space time bounds intersect space time bounds intersect expire expiration time 
reasons soon apparent detection algorithm saves variable collision current time 
detection algorithm free return immediately 
system calls algorithm value algorithm return immediately long persists calls 
algorithm detection algorithm sets local variable build rebuilds space time bounds 
note rebuilt space time bounds incorporate time build detection algorithm calls intersection algorithm obtain new hopefully new substantially larger build algorithm continue avoid 
possible agents call close build updated intersect immediately 
define immediately gamma build deltat small value deltat paragraph discusses choice deltat 
gamma build deltat reached limits accuracy space time bounds provide 
accuracy call pair processing algorithm describe pair processing algorithm section 
calling pair processing algorithm corresponds entering interruptible narrow phase described section 
say pair processing algorithm finds inter penetrate case detection algorithm advance time build rebuild retest space time bounds 
time advances build deltat 
value deltat minimum temporal resolution algorithm 
assume deltat chosen application algorithm 
application choose deltat small user care collisions duration deltat missed 
note similarity deltat naive algorithm 
algorithms minimum temporal resolution algorithm advantage timestep fixed deltat 
detection algorithm advance build deltat agents close space time bounds penetrate immediately 
algorithm section assumes space time bounds initially disjoint grazing contact 
resolve problem detection algorithm sets flag overlap performs pre processing test 
test iterates faces find penetration current time 
iteration quite efficient performed relatively rarely 
advance build deltat may allowed pair agents start penetrating pre processing test detects additional pairs 
discuss subtle detail 
sphere trees spheres simplest geometric structures check penetration 
agents spheres pair processing algorithm trivial 
agents closely approximated single sphere set partially overlapping spheres provide reasonable approximation 
algorithm agents represented sets spheres trivial 
algorithm faster small sphere sets small sets spheres approximate agents accurately 
solution dilemma hierarchy sets agent 
call hierarchy sphere tree 
deeper levels hierarchy spheres approximate agent exactly 
children sphere level spheres level bounds 
note agents penetrate spheres penetrate parents penetrate 
recursive algorithm descends hierarchy find penetration level wasting time spheres possibly penetrate 
hierarchical space subdivision general form common computer graphics 
popular technique octree 
sphere trees advantages octrees collision detection 
detection algorithms octrees incur cost rebuilding octrees moving agents time call pair processing algorithm 
detection algorithm uses sphere trees hand builds agent sphere tree 
update sphere trees applies rigid body transformations application program applies agents 
detection algorithm uses sphere trees pair processing 
hierarchical algorithm finding sphere tree penetrations supports goal progressive refinement see section 
descending level hierarchy corresponds step narrow phase application program descent level quality improves level 
lowest level sphere stores part agent surface intersects allowing step narrow phase reached detect penetration exactly 
problem remains building sphere tree agent 
little relevant literature 
rourke badler cover polyhedron attaching spheres vertices 
approach gives little control number spheres set produces redundant spheres 
goldsmith salmon algorithm improving bounding hierarchies ray tracing 
build sphere tree algorithm lowest level sphere set full solution 
remedy problems developed approach 
build octree agent default orientation circumscribing spheres occupied level sphere set level notice resolution approximation doubles level 
sphere sets generated octree guaranteed optimal sense 
exploring ways tweak simulated annealing algorithm 
objective function measures maximum distance agent surface sphere set tweaked 
note objective function quantifies accuracy provided detection algorithm 
tweaking sphere trees generate satisfactory practice 
tried approach polyhedral agents applying approach representations spline surfaces may prove challenging 
general building sphere trees remains interesting research problem 
performance evaluated performance detection algorithm ways 
compared broad phase broad phase turk algorithm 
turk algorithm needs narrow phase application involves simple geometry 
test program generates random configurations isothetic cubes applies forces move 
cube forces grouped sets set associated acceleration bound detection speedup speedup simulation time collision occurred speedup broad phase turk algorithm 
number sets variations set random 
simulate interactive conditions program gives algorithm information expiration time 
unix clock routine measures time algorithm needed find collision 
ran tests decstation turbo mb ram 
tested various numbers agents results individual tests agents test 
graphs speedup algorithm time spent turk algorithm divided time spent algorithm 
speedup greater indicates advantage algorithm larger speedup better 
graphs logarithmic scale avoid hiding slowdowns speedups 
detection speedup comparison time spent detection algorithms ignoring time spent ordinary differential equation ode solver speedup includes ode solver runtime 
graphs show algorithm faster turk algorithm 
graph suggests ode solver runge kutta method bottleneck anticipate speedups closer detection speedups faster ode solver second order runge kutta method 
interactive applications care performance system summed frames performance individual frame 
study frame performance repeated tests measured time spent algorithm frame 
individual tests slowest frame slower turk slowest 
frames nearly slow slowest frame common algorithm 
evidence comes histogram detection frame times algorithm seconds frame detection time num 
frames turk algorithm num 
frames algorithm frame timings broad phase turk algorithm 
average speedup depth cases positive cases speedup narrow phase bsp algorithm 
tests see 
results give hope algorithm prove useful interactive applications 
evaluate narrow phase full detection algorithm implemented sketch application spaceship simulator 
simulator user controls ship applying forward thrust rotational velocity 
user ship shares space ships periodically pick control values random 
simulator calls algorithm find collisions ships 
run simulator sun sparcstation gt mb ram 
test narrow phase went follows 
ran simulator detection algorithm calling pair processing algorithms sphere tree algorithm algorithm bsp trees 
bsp algorithm gives exact approximate results test indicates speed gained return degraded quality 
gives average speedup sphere tree algorithm run simulator calls pair processing algorithm 
depth refers maximum depth algorithm descended sphere trees 
notice interrupting algorithm shallower depth gains speed positive cases cases bsp algorithm detected actual penetration 
simulator indicates complete detection algorithm broad narrow phases compares existing algorithms 
simulator calls algorithm executes set number simulation time units times quickly calls turk algorithm coupled bsp algorithm 
new approach collision detection 
algorithm addresses weaknesses common detection algorithms allows interactive applications trade quality speed needed 
implementation significantly outperforms existing algorithms empirical tests 
believe raises interesting questions 
mention section broad phase conservative ignores bounding box collisions 
algorithm faster broad phase selectively ignored agents application temporarily designated unimportant 
speed gained manner useful 
general tradeoff speed accuracy users find appropriate tasks 
questions topics interesting 
possible guidance john spike hughes 
bob zeleznik andy van dam played important roles research 
supported part nsf darpa science technology center computer graphics scientific visualization ibm ncr sun microsystems dec hp onr arpa order 
baraff witkin dynamic simulation non penetrating flexible bodies siggraph proceedings computer graphics vol :10.1.1.24.9637
july pp 

cameron collision detection dimensional intersection testing ieee transactions robotics automation vol 
june pp 

cohen chen wallace greenberg progressive refinement approach fast radiosity image generation siggraph proceedings computer graphics vol 
august pp 

collision detection algorithm velocity distance bounds proceedings ieee international conference robotics automation vol 
pp 

duff interval arithmetic recursive subdivision implicit functions constructive solid geometry siggraph proceedings computer graphics vol 
july pp 

hayward awareness collision prediction proceedings ieee international conference robotics automation vol 
pp 

goldsmith salmon automatic creation object hierarchies ray tracing ieee computer graphics applications vol 
may pp 

hubbard space time bounds collision detection tech 
report cs department computer science brown university february 
rourke badler decomposition dimensional objects spheres ieee transactions pattern analysis machine intelligence vol 
july pp 

preparata shamos computational geometry springer verlag new york 
press flannery teukolsky vetterling numerical recipes cambridge university press cambridge 
sclaroff pentland generalized implicit functions computer graphics siggraph proceedings computer graphics vol 
july pp 

shaffer herb real time robot arm collision avoidance system ieee transactions robotics automation vol 
april pp 

thibault naylor set operations polyhedra binary space partitioning trees siggraph proceedings computer graphics vol 
july pp 

turk interactive collision detection molecular graphics tech 
report tr computer science department university north carolina chapel hill march 
von herzen barr geometric collisions time dependent parametric surfaces siggraph proceedings computer graphics vol 
august pp 

