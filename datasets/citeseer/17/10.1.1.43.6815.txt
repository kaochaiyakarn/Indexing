soon possible time optimal control timed automata eugene asarin oded maler institute information transmission problems bol 

moscow russia asarin ru verimag av 
de gi eres france oded maler imag fr 
tackle problem timed automaton target set configurations restrict transition relation systematic way state remaining behaviors reach soon possible 
consists extending controller synthesis problem timed automata solved mps amps deal quantitative properties behaviors 
problem formulated notion timed game automaton optimal strategy constructed fixed point operator space value functions defined state clock configurations 
research verification synthesis discrete systems approach set possible behaviors system partitioned consisting behaviors satisfying certain property 
verification task checking empty synthesis restriction transition relation system order achieve fact 
typical example property behaviors system eventually reach subset state space 
situations classification behaviors bad crude distinguish example behaviors reach steps 
suggests richer model quantitative performance measures associated behaviors length cumulative cost states transitions probabilities verification transformed finding worst case performance measure synthesis rephrased search optimal controller minimizing quantity 
timed automata ta ad system models quantitative timing constraints added discrete transition systems 
far verification synthesis ta concentrated qualitative properties important role timing information partially supported european community esprit ltr project vhs verification hybrid systems french israeli collaboration project hybrid models industrial plants research russian foundation basic research 
constrain set possible behaviors 
associate natural performance measure behaviors ta time elapses reach certain set configurations 
order treat synthesis problem previously introduced mps amps model timed game automaton tga usual timed automaton ad actions partitioned controller uncontrolled environment 
model various controller synthesis problems qualitative properties formulated solved 
example eventuality problem find set winning states controller enforce tga set compute strategy states 
solve quantitative generalization find state minimal time controller enforce automaton regardless uncontrolled events construct controller achieves optimum state 
previous techniques tell minimal time finite 
amps solution obtained backward fixed point calculation state space tga 
main difference iteration performed function tga state space ir denotes roughly min max temporal distance state similar value policy iterations dynamic programming ber 
state space tga non countable functions tabulated done shortest path algorithms finite graphs 
fortunately prove restricted case functions clocks value functions encountered iteration synthesis algorithm belong special wellfounded class functions admitting simple linear algebraic representation 
guarantees termination algorithm 
rest organized follows section re introduce timed game automaton model 
section formulate controller synthesis problem describe synthesis algorithm 
section prove algorithm effective correct partial correctness termination 
games timed systems context timed games extensions discrete games equivalently plant models theory supervisory control discrete event systems rw players actions may take place physical time axis subject certain timing constraints 
games take model timed automata ad automata equipped auxiliary continuous variables called clocks grow uniformly automaton precise quantitative information expressed various real time logics full richness verify behaviors system reach target fixed bound determine minimal constant property true 
state 
clocks interact transitions participating pre conditions guards certain transitions possibly reset transitions taken 
continuous time setting player choose moment wait time take transition 
case consider adversary action possibility wait time perform action elaborate description game theoretic approach untimed timed synthesis reader encouraged look lengthy introductions amp amps tls 
timed game automata finite set states ir integer clock space 
denote elements 
elements theta called configurations 
subset called zone obtained boolean combination inequalities form gamma kg 
set zones denoted 
zone right open interval included properties subsets extend naturally subsets theta say theta zone written finite union sets form fq theta zone 
function ae reset function sets coordinates argument leaves intact 
set functions denoted 
assume finite sets actions special empty action set represents actions possible actions controller stands uncontrollable actions environment 
action stands wait see 
definition timed game automaton 
timed game automaton tga tuple ffi ae theta zone state clock spaces distinct action alphabets theta theta theta theta timing constraints types actions functions ffi theta theta ae theta theta indicate state reached performing possibly joint action clocks reset occasion 
requirements state action set fx zone 
assume fixed largest constant definition tga 
similar requirements hold assume ffi ae identity function sides refrain action happens 
require automaton strongly non zeno cycle transition graph automaton induced ffi transition resets clock variable zero transition taken 
important condition prevents controller environment achieve goals unrealistic tricks time 
requirement zone right open means player allowed wait configuration really wait small additional positive amount time 
important preventing infeasible zero time idling strategy intuitively automaton configuration time progress long players agree soon take action 
transition taken 
formalized follows definition steps runs 
joint step tga gamma 

time step duration gamma 

discrete step gamma 
ffi ae 
run tga starting sequence joint steps gamma 
gamma 
note means agree time progress positive amount 
hand possible reach state permitted players situation thing happen discrete step 
ease notation introduce total transition function ffi theta theta theta theta put ffi ffi ae notice line corresponds normal case clearly replacing subset restrict range action player chose certain configurations decrease set behaviors tga 
formulate various controller synthesis problems finding appropriate restrictions call strategies 
strategies necessary deterministic allow action configuration 
problem algorithm definition problem 
tga set ae theta find strategy player allows reach target set fast possible player 
algorithm generalization synthesis method eventuality games timed automata 
algorithm iterates value function gives upper estimate arrival times set value function theta ir step iteration means controller allows reach time 
algorithm finding value function form algorithm value iteration tga 
ae repeat fn fn gamma fn fn gamma ff operators algorithm follows minff act idle act min max ffi idle inf ir max sup max ffi intuitively specifies worst largest configuration game performed action idling 
similarly worst thing happen deciding idle time includes possible outcomes actions best waiting time minimizes outcome idle compared act denotes best outcome immediate action 
strategy extraction operator formula ff ff act act idle idle act ff act act idle act idle ff act fa max ffi act unfortunately subtleties real valued time complicate situation bit 
problem strategy extracted ff violate requirement 
happen situation player take transition sooner better time reflected strategy ff follows player action enabled including discrete transition enabled formally speaking strategy blocking time overcome problem introduce non blocking approximations ff small satisfy right openness conditions non integers guards 
show section strategy small player reach time arbitrarily close 
relaxed strategy obtained ff enabling action narrow stripe ff ff idle act correctness proof partial correctness aim prove algorithm converges gives optimal restrictive solution problem 
lemma 
player uses strategy ff gamma initial position fn tga reaches target set time transitions adversary 
proof 
straightforward induction ut small positive number 
corollary 
suppose algorithm converges iterations 
player uses strategy ff initial position tga reaches target set time adversary 
lemma 
player prevent tga reaching steps fn gamma time player 
proof 
straightforward induction ut corollary 
player initial position player prevent tga reaching target set gamma time 
corollary 
initial position player transition adversary prevent tga reaching target set strictly time 
corollaries imply partial correctness algorithm 
claim 
suppose algorithm converges 

function gives time necessary drive tga 
strategy ff guarantees arrival time 
restrictive strategy guarantees arrival time sub strategy simple functions need prove properties algorithm 
effectiveness algorithm manipulates functions theta ir ir need find finite representation functions order implement algorithm 
second issue prove algorithm converges 
effectiveness finite convergence follow fact functions algorithm belong class closed operator definition 
function ir referred simple iff represented ae gamma zones kg 
function theta ir simple delta simple fixed additional boundedness condition means value influence largest constant definition tga 
clearly simple function admits finite representation list zones constants easy see equality simple functions decidable satisfy closure properties lemma 
simple ae reset function max min ae simple 
set zone 
notice closure results mentioned subsection effective sense possible transform algorithmically representations original functions representations resulting functions 
property simple functions crucial proof convergence algorithm 
lemma foundedness 
decreasing sequence simple functions finite 
effectiveness convergence key step proof convergence effectiveness algorithm closure simple function operators algorithm 
delta largest backward distance zone delta jx zg 
easy see delta simple argument 
lemma closure simple functions 
simple tga bounded act idle simple 
representations effectively 
proof 
act follows immediately lemma fact fixed function ffi delta reset function restricted zone 
case idle difficult 
looking equations see idle obtained elimination inf sup variable functions domain includes state space time 
example defined max ffi max ffi closure function reset conclude form simple function motivates definition class functions definition nice functions 
union sets form jx dg zones 
function theta ir ir referred nice iff represented ae gamma kg 
properties nice functions 

simple nice 

nice hg hg 

nice sup nice 

nice inf ir simple 
proof 

immediate definitions 

ae gamma ae pm gamma qm ae obtain representation combine line formula line formula verify types sets appear comparing lines formulae 
jr tg fact ir 
js gamma tg written jx gamma cg 
js gamma gamma ir 
js gamma gamma written jx gamma gamma dg 
intersected pm qm pm qm sets produce participating definition function 
boundedness condition inherited qm reasoning min identical 

ae gamma sup 
observe set fx jt intersects finitely sets definition associate partial functions gamma gamma delta defining conditions functions nice max 

similar statement 
concludes proof 
ut follows immediately idle simple 
case immediate previous cases lemma 
ut corollary 
algorithm effective 
corollary 
algorithm converges 
proof 
sequence fn decreasing sequence simple functions 
virtue lemma stabilizes 
ut claim concludes correctness proof algorithm 
theorem main result 
algorithm converges produces restrictive optimal strategy problem timed automata 
example consider clock tga adversary trivial target set fq player choose waiting going losing sink resetting clock intuitively smaller values better go lose time resetting clock benefit smaller transition guard 
value function strategy obtained algorithm depicted 
gamma fag gamma fag fbg bg gamma gamma cg fcg see winning state right start reach clock spaces partitioned intervals clock values reach respective guards value interval measures time satisfaction guards 
obtained minff observe breakpoint better take transition absence adversary complexities algorithm demonstrated example 
fig 

tga trivial adversary 
missing guards invariants true 
concluding remarks constitutes step process lifting classical results automata timed automata main result rephrased finding min max shortest paths non countable behaving graphs 
algorithm easily extended models integer costs associated transitions 
assigning different costs passage time different states transform model general hybrid system ones synthesis problem treated probably problem harder undecidable 
application point view problems related digital circuit design scheduling problems manufacturing telecommunication formulated optimal control problems framework introduced 
believe unifying qualitative property approach dominant verification optimization oriented approaches important development hybrid systems research 
ad alur dill theory timed automata 
theoretical computer science amp asarin maler pnueli symbolic controller synthesis discrete timed systems 
antsaklis kohn nerode sastry 
eds hybrid systems ii 
lecture notes computer science vol 

springer amps asarin maler pnueli sifakis controller synthesis timed automata 
proc 
ifac symposium system structure control 
elsevier ber bertsekas dynamic programming optimal control 
athena scientific mps maler pnueli sifakis synthesis discrete controllers timed systems 
mayr puech 
eds proc 
stacs 
lecture notes computer science vol 

springer pa antsaklis optimal control discrete event systems 
proc 
cdc 
ieee rw ramadge wonham supervisory control class discrete event processes 
siam control optimization tls tomlin sastry synthesizing controllers nonlinear hybrid systems henzinger sastry 
eds hybrid systems computation control 
lecture notes computer science vol 

springer wong toi synthesis controllers linear hybrid automata 
proc 
cdc 
ieee pa example transition costs added discrete event models optimal controller synthesis problem formulated solved 
