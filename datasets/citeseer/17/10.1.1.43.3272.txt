memo functions 
ralf hinze institut ur informatik iii universit bonn bonn germany ralf informatik uni bonn de www informatik uni bonn de ralf 
presents polytypic implementation memo functions digital search trees 
memo function seen composition tabulation function creates memo table look function queries table 
show tabulation derived look inverse function construction 
type memo tables de ned induction structure argument types parametric respect result type memo functions 
memo table xed argument type functor look tabulation natural isomorphisms 
provide simple polytypic proofs properties 
memo function ordinary function caches previously computed values 
applied second time particular argument immediately returns cached result recomputing 
storing arguments results memo function internally employs index structure called memo table 
fact memo function seen composition tabulation function creates memo table look function queries table 
memo table implemented variety ways instance hashing comparison search tree schemes 
approaches drawbacks argument memo function compound value list tree 
comparing compound values expensive search tree schemes ordering prohibitive 
hash tables viable alternative hashing compound values dicult 
furthermore case collisions values checked equality hash consing garbage collector may alleviate problem 
memo functions compound argument types digital search trees known tries data structure choice 
looking value trie takes time proportional size value 
particular running time independent number memoized values 
combination lazy evaluation tries provide elegant ecient implementation memo functions 
direct descendant earlier generalized tries turn relies heavily framework polytypic programming 
central insight trie considered type indexed datatype hinze de ned induction structure types 
look function enjoys straightforward polytypic de nition 
show de nition systematically derive inverse tabulation function 
functions involved derivation parametric underlying datatype argument type memo functions 
note reported generalizes approach de ne tries arbitrary datatypes arbitrary kinds precursor restricted types rst order kind 
second minor di erence memo tables require nite tries concerned nite tries 
rest structured follows 
section brie reviews paradigm polytypic programming 
section gives polytypic de nitions memo tables associated look tabulation functions 
naturality functions shown section 
section concludes points direction 
examples functional programming language haskell 
haskell abbreviation haskell 
polytypic programming section brie reviews concept polytypic programming 
thorough treatment interested reader referred 
may safely skip section 
central idea provide programmer ability de ne function induction structure types 
types play central ole undertaking rst take closer look haskell type system 
haskell ers basic construct de ning new types datatype declarations 
data declaration takes general form data 
de ned type constructor value constructors 
perspective language design data construct quite monster comprises di erent features type recursion type abstraction ary sums ary products 
haskell type system covered language types consider functional types higher order memo functions see section 
type variables type terms unit datatype denotes type application denotes type abstraction xpoint type term denotes sensible type consider instance 
exclude terms require type terms kinded language kinds kind terms memo functions 
kind manifest types kind type constructors map type constructors kind kind straightforward typing rules kinding rules omitted reasons space see 
type language easily translate data declarations type terms type de ned xm 




simplicity ary sums reduced binary sums ary products binary products 
type language quite complex de ning polytypic value comparatively simple 
suces specify cases primitive type constructors 
treat type constructors datatype declarations 
data data inl inr data example 
polytypic equality function de ned equations 
clarity type argument enclosed angle brackets 
bool true ui inl inl ui inl inr false ui inr inl false ui inr inr ui proper element trivially yields true 
elements sum equal constructor arguments constructor equal 
pairs equal corresponding components equal 
ut may surprising rst sight polytypic function equal completely determined giving cases primitive type constructors 
standard reduction rules type terms type term kind reduced term form exactly cases covered equal example 
type natural numbers data nat zero succ nat equal test naturals equality 
succ zero succ zero succ zero succ zero zero zero zero zero true hinze note zero equals inl succ equals inr ut example suggests simple way implementing polytypic functions types represented algebraic datatype covering cases equal proceed ordinary pattern matching 
alternatively specialize partially evaluate polytypic value closed type term 
advantage passing representations types run time necessary 
key idea compositional de nition equal mimic structure types value level 
consider instance specialization ui 
de ne ui compositionally terms specializations constituent types 
mapping types idea suggests mapping equality functions 
ui application 
nutshell type abstraction mapped value abstraction type application value application type recursion value recursion 
example 
equations extend de nition equal example note equal fresh variable associated 
equal ui equal hui ti equal ti equal xpoint operator value level 
note equal type argument longer restricted types kind 
reason generalize type signature de ned induction structure kinds 
bool li equal hli example bool 
bool 
de nitions specialize equal nat equal nat equal equal equal equal equal equal bi 
remove clothing obtain familiar haskell function nat nat bool zero zero true zero succ false succ zero false succ succ ut worth noting development means special equal works arbitrary polytypic values indexed types kind 
memo functions 
memo functions section apply framework polytypic programming implement trie memo tables associated look tabulation functions 

type represents memo tables indexed values type store values type section show de ne table induction structure function associated look function takes memo table key type returns associated value type converse function argument type interface easily function type 
memoized version simply 
worth noting technique depends essential way lazy evaluation type keys nite produces potentially nite tree 
require full laziness evaluated queried times 
haskell meets requirements 
memo tables tries generalized tries enjoy rm mathematical foundation laws exponentials 

note equation captures idea currying 
equations immediately derive polytypic de nition table type constructor kind 
fact see section satis es properties functor 
particular trie unit type identity functor trie sums product functors trie products composition functors 
hinze specialize type term apply techniques sketched section techniques developed values equally type indexed types 
equations extend table arbitrary type terms arbitrary kinds 
table table hk li table hk table hli table hk table ui ti table ti table note kind depends kind consequently table kind indexed kind 
example 
memo table type natural numbers data nat zero succ nat nite list 
nat nat haskell notation reads data replace cons add case nil obtain familiar type lists see example 
note instance nite lists functions natural numbers appears semantic elegance applicative languages turner 
ut example 
alternative de nition natural numbers binary number system digits 
data bin bin bin associated memo table nite binary tree bin bin bin corresponding haskell type data ut memo functions 
example 
memo table unlabelled binary tree data tree leaf fork tree tree somewhat mind type 
tree tree tree note occurrences right hand side nested 
haskell type data ntree example called nested datatype 
element type nite list th entry type similar type appears seminal nested datatypes 
ut example 
consider parameterized datatype ubiquitous datatype lists 
data list nil cons list list type constructor higher order memo table takes trie base type yields trie list list list type constructor called generalized rose tree 
corresponding haskell type reads data tlist ta nlist ta tlist ta ut table look look function polytypic de nition 

applyhk inl apply hk applyhk inr apply hk applyhk apply hk applyhk structure apply visible swap value arguments new function called lookup 
id inl 
outl inr 
outr 
hinze unit type lookup function identity sums selects appropriate memo table products composes lookup functions components 
extension apply works essentially 
applying scheme section obtain 
applyhk li applyhk apply hk applyhk apply hai apply apply ht ui apply hui apply ti apply apply hti apply ti apply small glitch 
consider type signature type constructor kind 


ai 
type signature contains occurrences table course want specialize specialize type signature 
replace ai generalize fresh type variable say ta ta ta 

ta 
re ned de nition apply captures generalization 
tu tu 
applyhk li tu ta applyhk ta tu ta hard see applyhk valid type applyhk example 
querying memo table natural numbers works follows 

nat tz ts zero tz tz ts succ ts recall elements nite lists 
consequently corresponds list indexing written 
haskell 
ut example 
look function binary numbers corresponds tree indexing binary number interpreted path binary tree 

bin tn tt tn tn tt tn tt tt ut memo functions 
example 
look function memo tables type somewhat hard grasp 
de nition simple instance general scheme 

tree ntree tl tf leaf tl ntree tl tf fork tf nested type requires polymorphic recursion 
ut example 
nal example consider look function lists 
ta ta 

tlist ta 
list nlist tn tc nil tn nlist tn tc cons tc list parametric type higher order look function takes look function base type yields lookup function list note rank type signature legal haskell 
versions glasgow haskell compiler ghc haskell interpreter hugs support rank types 
ut tabulation tabulation inverse look fact derive de nition inverse function construction 
derivation slight reformulation apply allows structured calculations junk combinator see instance 

applyhk applyhk outl apply hk outr applyhk uncurry apply hk 
applyhk specify tabulate right inverse apply seeking polytypic de nition tabulate proceed case analysis case de nition extensionality hinze case applyhk de nition applyhk applyhk outl applyhk outr coproducts 
inl 
inr applyhk outl 
inl applyhk outr 
inr speci cation outl 
inl outr 
inr surjective pairing outl outr 
inl 
inr note universal property coproducts universal property products surjective pairing special case 
case applyhk de nition applyhk uncurry applyhk 
apply hk exponentials uncurry curry applyhk 
apply hk curry speci cation applyhk 
curry speci cation 
curry summarize calculated de nition tabulate 

inl 
inr 
curry equation readable convert pointwise style 
extension tabulate arbitrary type terms works exactly apply omitted reasons space 
points order 
second calculation essential universal property coproducts 
alas haskell natural semantic model category cpo pointed complete partial orders continuous functions categorical coproduct 
memo functions 
words haskell valid called hyper strict functions completely evaluate arguments 
context lazy language need hyper strictness somewhat ironic 
intuition information result memoized function leaves corresponding trie 
note appropriate theoretical setting calculations category cpo pointed complete partial orders strict continuous functions categorical products cartesian product categorical coproducts coalesced sum closed smash product space strict continuous functions form monoidal closure 
memo tables isomorphisms isomorphisms precise memoization operates strict functions implementation requires lazy evaluation trie strict sum lazy pair tries 
maintain distinction haskell strictness annotations really memo table domain 
data nat zero succ refrain 
second calculations show tabulation right inverse lookup 
converse shown straightforward xpoint induction 
require xpoint induction order cope recursive types 
said clear case bottom type missing derivation 
fortunately holds trivially initial object cpo type unique strict function type example 
tabulation function natural numbers liner 
nat zero 
succ standard toy example memoization fibonacci function 
nat nat zero zero succ zero succ zero succ succ succ monoidal closure similar cartesian closure product smash product categorical product tensor product 
hinze time complexity improved exponential quadratic recursive calls replaced table lookups 
nat nat zero zero succ zero succ zero succ succ memo memo succ memo nat nat memo ut example 
function type bin equally easy 
bin 

ut example 
inverse requires polymorphic recursion note haskell notation lambda abstraction 
tree ntree leaf fork ut example 
parametric lists obtain higher order tabulation function 
ta ta 
list tlist ta nlist nil cons tlist functions operate lists 
dynamic programming problem optimal matrix multiplication may serve example 
sequence matrix dimensions dn problem nd cost multiplying sequence matrices 
mn dimension assume multiplying matrix matrix costs haskell program implements straightforward exponential solution 
cost list nat nat cost minimum cost take 


cost drop length memo functions 
recursive calls improves complexity exponential polynomial size input modi ed version cost omitted reasons space 
memo cost list nat nat memo cost cost ad hoc variant code appears 
ut example 
function memo cost de ned previous example maintains global memo table 
comes considerable cost recall functions natural numbers memoized nite lists note matrix dimensions 
dn index lists 
ecient alternative time space maintain local memo table 
cost list int int cost memo length nat nat int minimum memo 


memo memo nat nat int memo sequence matrix dimensions xed body cost sublists represented pairs list indices 
consequently smaller memo table suces memo uses table type int indexed pairs list indices small sequences matrix dimensions may large 
resulting code corresponds closely standard dynamic programming solution see instance 
ut properties xed type constructor satis es properties functor endo functor cpo 
functorial action arrows 
hinze functor laws id id 
shown straightforward xpoint inductions see instance 
functions natural isomorphisms 
note functor written functorial action post curry eval eval function application 
naturality conditions 
post apply hki 
post proofs pointwise variants 

immediate consequence second naturality property instance id tabulate id map resulting memo table 
types allow ecient implementation id applying law left right may optimization 
prove xpoint induction second naturality property follows immediately mutually inverse 
case proposition holds trivially strict polytypic functions strict type arguments 
case apply de nition de nition extensionality 
de nition case applyhk memo functions 
de nition applyhk applyhk outl apply hk outr de nition outl 

outl outr 

outr applyhk outl applyhk outr ex apply hk outl applyhk outr coproduct fusion law 



apply hk outl applyhk outr de nition applyhk applyhk case applyhk de nition applyhk uncurry applyhk 
apply hk de nition uncurry applyhk 
apply hk ex uncurry applyhk 
applyhk ex uncurry post applyhk 
applyhk proof obligation see uncurry apply hk 
applyhk de nition applyhk applyhk remains show uncurry uncurry post equivalent curry uncurry post curry uncurry de nition uncurry curry eval 
id curry fusion law curry 
curry 
id curry eval 
de nition post post hinze memo functions interesting case study polytypic programming 
implementing trie memo functions encountered kind indexed kinds table kind indexed types apply type indexed types table values apply 
quite remarkable concepts show single application 
direction suggests 
remains extend memoization higher order functions 
recall tries law exponentials 
unfortunately obvious way rewriting function space possible way dilemma apply memoization recursively may set ii author currently exploring approach 
am grateful colin runciman stimulating research reported function build hki transfers function trie form 
furthermore due anonymous referees valuable comments 

andrew appel marcelo goncalves 
hash consing garbage collection 
technical report cs tr princeton university computer science department february 

roland backhouse patrik jansson johan jeuring lambert meertens 
generic programming 
doaitse swierstra pedro jose oliveira editors rd international summer school advanced functional programming braga portugal volume lecture notes computer science pages berlin 
springer verlag 

richard bird lambert meertens 
nested datatypes 
jeuring editor fourth international conference mathematics program construction mpc sweden volume lecture notes computer science pages 
springer verlag june 

richard connelly lockwood morris 
generalization trie data structure 
mathematical structures computer science september 

ralf hinze 
generalizing generalized tries 
journal functional programming 
accepted publication 

ralf hinze 
new approach generic functional programming 
thomas reps editor proceedings th annual acm sigplan sigact symposium principles programming languages boston massachusetts january pages january 
memo functions 

ralf hinze 
polytypic programming ease january 
submission 

ralf hinze 
polytypic values possess types 
phil wadler editor proceedings fifth international conference mathematics program construction mpc july july 

jones peterson 
hugs user manual may 
available www haskell org hugs 

daniel leivant 
polymorphic type inference 
proc 
th symposium principles programming languages 

donald michie 
memo functions machine learning 
nature april 

alan mycroft 
polymorphic type schemes recursive de nitions 
paul robinet editors proceedings international symposium programming th colloquium toulouse france volume lecture notes computer science pages 

michael donnell 
equational logic programming language 
foundations computing series 
mit press cambridge mass 

simon peyton jones john hughes editors 
haskell non strict purely functional language february 
available www haskell org definition 

guy lapalme 
algorithms functional programming approach 
addison wesley publishing second edition 

ghc team 
glasgow haskell compiler user guide version september 
available www haskell org ghc documentation html 

david turner 
semantic elegance applicative languages 
functional programming languages computer architecture fpca new hampshire pages 
acm new york october 
