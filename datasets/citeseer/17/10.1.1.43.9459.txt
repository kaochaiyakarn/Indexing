incremental algorithms lists johan jeuring cwi box ab amsterdam netherlands jt cwi nl incremental computations improve performance interactive programs spreadsheet programs program development environments text editors incremental algorithms describe compute required value depending input input edited 
considering possible different edit actions data type lists basic data type spreadsheet programs text editors define incremental algorithms lists 
theory construction incremental algorithms developed give incremental algorithm involved example formatting text 
cr categories descriptors software programming techniques applicative programming software programming languages language constructs artificial intelligence automatic programming program transformation 
general terms algorithm design theory 
additional keywords phrases bird meertens calculus program construction incrementality list text processing 
number reasons intractable problems solvable computer 
processor speed computers increasing 
second efficient algorithms may derived problems existence optimal research supported dutch organisation scientific research project nr 
nf 
algorithm shown 
third classes problems kinds algorithms parallel incremental may derived 
deals incremental algorithms 
computation performed repeatedly slightly changed data profitable describe computation means incremental algorithm 
incremental algorithm describes compute required value depending slightly changed data old value changes data information 
examples computations performed repeatedly slightly changed data interactive programs program development environments spreadsheet programs 
example spreadsheet program lists numbers summed 
number list changed sum changed gamma 
change require summation numbers lists 
form incremental algorithm depends data type defined edit model 
propose method description derivation incremental algorithms interactive programs data type list 
incremental algorithms data types described 
interactive programs text editors spreadsheet programs data type list program development environments usually data type tree 
function defined lists 
incremental algorithm describes find value argument edited 
possible edit actions deletion insertion elements argument list splitting argument joining arguments 
edit action value recomputed 
example consider task breaking paragraph lines result looks nice text formatting 
algorithms problem knuth bird 
derive incremental algorithm problem possible combine formatted paragraphs constant time 
furthermore deleting inserting piece text breaking resulting paragraph lines done time linear length deleted inserted piece text 
consequence results author edits text formatted text available 
facilitates wysiwyg editing 
incremental algorithms lists 
algorithms derived bird meertens style program construction 
bird meertens style program construction data type oriented calculus algorithm derivation means program transformations 
specifications transformed efficient functional algorithms laws functions defined initial data type 
aspects bird meertens calculus :10.1.1.100.9674
lots articles incremental algorithms specific problems example algorithm incrementally computing minimum spanning tree frederickson algorithm incremental huffman coding knuth algorithm pattern matching dynamically changing set patterns meyer proposals derivation description incremental algorithms literature 
language designed yellin strom automatically transforms algorithms fp syntax incremental algorithms 
construct fp incremental version algorithm consists series fp constructs components 
approach disadvantage shared automatic methods formal program derivation efficient incremental algorithm derived 
furthermore data types handle bag tuple restrictive 
approach incrementality called finite differencing described paige 
called invariants equalities form maintained means code describes find value arguments changed 
approach generic distinguish incrementality different types 
approach sketched compared reps teitelbaum demers incremental attribute evaluators 
give incremental algorithm interactive program development environment tree editor evaluation attributes tree 
natural extension trees edit model lists result slightly complex edit model model reps teitelbaum demers give 
model obtained suitable calculating algorithms 
incremental algorithms implemented views system 
organised follows 
section introduces data types list functions defined data types map filter catamorphism 
section defines simply incremental algorithms lists gives incremental algorithms functions introduced section 
definition incremental algorithms generalised order able give incremental algorithms class problems derive incremental algorithms old definition 
fact new definition give usually inefficient incremental algorithm catamorphism lists 
give efficient incremental algorithm text formatting 
section describes possible ways theory incremental algorithms lists reported extended data types 
preliminaries section introduces basic notions definitions subsequent section 
subsection briefly describes notational conventions functions operators 
important concepts bird meertens calculus notions catamorphism promotion 
catamorphisms functions defined initial data type inductive definitional pattern mimics type 
data type catamorphisms defined promotion theorem 
process described detail malcolm 
second subsection introduces boom hierarchy hierarchy consisting data types set bag list binary tree defines catamorphisms data types 
give widely examples catamorphisms map reduction 
auxiliary functions introduced third subsection 
functions operators typical names functions function composition associative denoted small dot delta 
composition written delta function application denoted white space 
application argument written function application associates right delta delta types exists product type theta consisting pairs elements operator theta defined types functions functions function theta theta theta projection functions theta denoted left projection ae right projection 
binary operators written infix notation 
typical names binary operators phi fi omega partially parametrised phi binary operator type theta consider expression phi unary function type similarly 
parametrised operators known sections 
binary operators take left arguments short possible right arguments long possible functions take arguments long possible example phi omega phi omega notation expresses similarly data types catamorphisms theory lists described section introduced bird meertens 
recursive data type list base type denoted introduced means constructor rules unit associative 
data type called join list operator joins lists 
data type list data types boom hierarchy 
described meertens consists data types binary tree list bag set 
data types obtained scheme varying laws satisfied 
satisfies laws scheme leads data type binary tree information leaves 
associative obtain list associative commutative obtain bag delta written respectively deltac 
idempotent obtain data type set 
phi theta associative operator function unit phi 
definition data type list exists unique function phi unit element exist may introduce fictitious element see meertens property unit phi 
function defined called catamorphism 
known fact catamorphism list written composition reduction map defined follows 
map operator takes arguments function list returns list consisting original elements function applied 
precisely defined value applying reduction operator associative operator phi list obtained placing phi adjacent elements list phi theta phi defined phi phi phi phi phi phi phi phi possibly fictitious unit element phi 
catamorphism split reduction map exist operator phi function phi delta fact expressed meertens 
example widely catamorphism filter operator takes predicate boolean function list retains elements satisfying predicate list bool defined delta 

holds 

example odd :10.1.1.100.9674
important notion bird meertens formalism promotion 
data type promotion theorem 
promotion provides means proving equalities functions avoiding application induction development algorithms 
inductive arguments tend tedious elegant proofs promotion 
early main motivations goguen initiality proofs 
give theorem define 
definition phi omega function phi omega associative operators phi theta omega theta phi omega phi omega example function functions function phi phi operators phi 
proof theorem structural induction uniqueness property catamorphisms meertens malcolm 
theorem promotion function phi omega delta phi delta omega delta delta proof theorem follows may weaken requirement phi omega particular equality phi omega suffices require equality range immediate consequence promotion theorem map distributivity law delta delta catamorphisms left reductions right reductions defined join list 
left reductions viewed catamorphisms data type snoc list lists constructed left right 
element operator phi theta exists unique function phi satisfying equalities 
phi phi phi phi function called left reduction 
right reductions defined similarly 
element operator phi theta exists unique function phi satisfying equalities 
phi phi phi phi catamorphism written left reduction right reduction vice versa 
auxiliary functions operators section define auxiliary functions operators 
operator cross frequently calculations 
cross takes lists pairs element list element second list 
result cross bag pairs 
example operator cross introduced bird :10.1.1.100.9674:10.1.1.100.9674
definition taken jeuring 
operator cross subscripted binary operator mean 
phi phi delta note phi binary prefix operator 
functions tl hd lt usual meaning defined lt hd tl functions tl commute delta delta delta tl tl delta functions hd lt satisfy delta hd hd delta delta lt lt delta functions hd tl indexing operator lists denoted defined 
operator takes natural number list length defined hd tl operator take takes natural number list elements takes defined follows 
hd tl specification algorithms encounters generators returning consecutive substrings string parts returning partitions string 
list comprehension see turner define tails inits bird characterise recursively means functions tails inits follows 
delta tails delta inits tails delta delta inits delta delta function delta defined delta operators defined hd lt function parts enumerates bag ways list broken lists lists 
defined means bag comprehension follows 
parts yc various recursive characterisations function parts 
characterisation parts left reduction bird 
characterisation join list catamorphism parts 
parts parts parts parts parts fl parts fl bxc bxc xy xl yh yt xi xl yh xi xl lt yh hd yt tl order show function parts fl delta deltac delta delta defined shown operator fl associative 
proof fact omitted 
totally ordered 
operator binary operator type theta defined define arguments equal values arguments outcome 
necessary define differently different problems 
choice operator equal values immaterial problem give exact definition 
operator defined similarly 
incremental algorithms lists incremental algorithms lists interactive programs text editors spreadsheet programs suppose want code text respect dictionary 
usually text coded edited 
means incremental algorithm text coded edited 
consequently coded text available moment 
section sketch approach incrementality lists 
give definition basic incremental algorithms subsection give examples problems incremental algorithms 
give definition general incremental algorithms new definition show exists incremental algorithm catamorphism lists 
second subsection contains involved example derivation efficient incremental algorithm formatting text 
definitions incremental algorithms function defined lists suppose want find value list interactively editing list 
description interactive programs functional setting thompson 
editing piece data text program list numbers spreadsheet program cursor moved data 
suppose data represented list 
cursor positioned elements 
cursor positioned data lists distinguished part data front position cursor part position cursor 
actions possible 
ffl moving cursor right left ffl deleting inserting elements ffl splitting data ffl concatenating pieces data 
list edit actions incomplete comprise basic components editor 
components editors consist compositions actions 
action want result applied resulting list immediately available 
implies adapt interactive program working 
edit action interactive program example showing result edit action screen update value 
describe happen edit actions 
determines form incremental algorithm 
pieces data say concatenated value determined values tentative assumption incremental algorithms exists operator fi fi 
follows join list catamorphism 
assumption inevitable want deal insertion deletion properly reasonable 
functions possibly tupled extra information catamorphisms implemented efficiently 
data split pieces data say values determined value fi 
operator fi invertible easy binary associative operators invertible 
general way find values compute scratch tuple computation computation value list front cursor value list cursor 
chosen option 
splitting data point cursor located simple values constituents immediately available 
concluding assumed interactive program extended computation triple values value list front cursor value argument list value list cursor 
form incremental algorithms described provides elegant way deal insertion deletion elements 
suppose list inserted lists triple transformed 
obtain triple split compute compute phi phi phi 
segment deleted split split values available triple computed 
deal cursor movements 
suppose cursor positioned nonempty lists say lists cursor moved left 
required find values values 
assume catamorphism fi delta fi 
furthermore fi 
exists operator omega fi omega express terms means omega incremental algorithms require existence operator omega cursor moved right required find values values 
incremental algorithms require existence operator phi satisfying phi fi 
definition basic incremental algorithm basic incremental algorithm tuple fi delta omega phi fi delta fi omega phi fi say function incremental exists basic incremental algorithm 
give examples incremental functions 
ffl functions function incremental 
basic incremental algorithm tuple delta delta delta delta tl delta ae ffl predicates function incremental 
basic incremental algorithm tuple delta 
omega phi operators omega phi defined omega phi tl ffl function phi incremental provided sections phi invertible 
example incremental reduction 
basic incremental algorithm gamma gamma 
ffl function parts see incremental 
function defined definition irrelevant 
function removes duplicates parts parts similarly defined parts parts follows fl delta deltac delta delta delta delta delta delta ae basic incremental algorithm parts 
fi delta omega phi basic incremental algorithm function 
want find conditions existence basic incremental algorithm delta guaranteed 
theorem fi delta omega phi basic incremental algorithm fi function satisfying omega ff phi psi operators ff psi 
delta delta ff psi basic incremental algorithm delta proof fi follows promotion theorem delta delta delta 
furthermore calculation ff fi fi ff ff omega fi omega fi delta omega phi basic incremental algorithm similarly psi follows delta delta ff psi basic incremental algorithm delta theorem obtain basic incremental algorithm problem finding shortest partition ascending lists string 
problem specified sap delta ascending delta parts predicate predicate defined delta example apply function sap list obtain partition :10.1.1.100.9674
parts basic incremental algorithm try apply theorem 
derivations definitions operators ff psi omitted 
ff psi defined lt lt hd hd lt hd tl ff psi delta ascending delta deltac delta delta delta delta delta ff psi basic incremental algorithm delta ascending delta parts 
example algorithm incremental reduction 
exist operators phi omega satisfying respectively phi omega problem basic incremental algorithm exists maximum segment sum problem 
want incremental algorithms problems generalise definition incremental algorithms 
function required incremental interactive program computed extended computation tuple list front cursor 
tuple extend interactive program computation tuple suppose exist efficiently computable functions ff fi ff delta fi delta furthermore deal cursor movements left reduction omega exists operator ff satisfying omega ff right reduction phi exists operator psi satisfying psi phi note tuple omega ff ff tuple phi psi fi play dual role 
definition incremental algorithm incremental algorithm tuple fi delta omega ff ff phi psi fi fi delta ff delta omega fi delta phi omega omega ff omega psi phi phi phi basic incremental algorithm fi delta ff psi function extended incremental algorithm fi delta omega ff id phi psi id operators omega phi defined omega fi phi fi fact catamorphism exists incremental algorithm 
expressed theorem 
theorem catamorphism 
delta inits delta lt delta tails tl delta ae hd incremental algorithm proof proof consists showing delta inits left reduction omega omega showing delta tails right reduction phi tl phi easy omitted 
furthermore show lt delta delta inits hd delta delta tails lt delta delta lt lt delta inits id similarly lt inits replaced respectively hd tails equalities follow immediately 
maximum segment sum problem specified delta delta slight generalisation problem tuple maximum sum tails maximum sum inits sum argument list catamorphism see smith 
theorem gives efficient incremental algorithm finding maximum segment sum list 
formatting text incrementally problem considered derivation bird meertens style program construction efficient incremental algorithms breaking paragraph lines derivation full detail merely give brief overview 
formatting document tasks break paragraph individual lines result looks nice 
aspects task 
detailed study breaking paragraphs lines knuth aspects treated 
aspects text formatting formalisation nicely looking 
knuth describe functions formatted text determine badness solution 
functions called waste functions 
waste function required find solution minimises amount waste 
algorithms problem knuth bird 
algorithms line suppose problem solved text processed available new word added right exists operator phi requires constant time average evaluation phi derive bird meertens calculus incremental algorithm solves paragraph problem 
algorithm combines paragraphs constant time exists operator omega omega constant time evaluation 
course time combine paragraphs bounded time write screen 
solution knuth paragraph problem give different results cases 
combining paragraphs solution requires time linear length second paragraph 
omega evaluated constant time algorithm obtain formatting paragraph linear time algorithm obtain time complexity line algorithms 
furthermore deleting inserting piece text breaking resulting paragraph lines done time linear length deleted inserted piece text 
consequence results text formatted edited 
facilitates wysiwyg editing 
give formal specification problem breaking paragraph lines 
suppose list natural numbers representing lengths words text 
assumed punctuation marks glued words follow 
list numbers broken lists fit line length waste function minimised 
suppose line length constant natural numbers input value example sentence pride prejudice jane austen truth universally acknowledged single man possession fortune want wife 
represented list 
truth universally acknowledged single man possession fortune want wife 
specify problem solved delta fit delta parts fit defined follows 
predicate fit defined fit constant reduction function defined definition objects equal value 
function various choices 
choose simplest line case implemented greedy algorithm 
sophisticated choices bird knuth 
don know incremental algorithms derived definitions chosen delta delta gamma value solution 
argument function defined may different solutions equal value important themes previous papers see bird fokkinga resolve nondeterminism 
fact specify relation function avoiding having define objects equal value 
chosen stay functional framework 
derivation line algorithms breaking paragraph lines relational framework carried de moor 
nondeterminism resolved ad hoc fashion defining objects equal value follows 
clear incremental algorithms derived definitions concludes specification problem 
apply specification jane austen sentence obtain solution 
derive incremental algorithm paragraph problem specified 
purpose express catamorphism find operator fi function fi delta defined delta fit delta parts try apply theory developed function parts example bird 
theory applicable 
intuitively seen follows 
expressed terms information obtained useless 
information split lines line starts left information split lines gluing initial part line follows want values tails available 
specification paragraph problem generalised delta tails tails catamorphism delta delta see apply promotion theorem 
suppose fi operator fi delta tails fi delta delta delta function delta delta simplified follows 
delta definition delta definition map follows delta delta delta delta defined delta 
operator fi synthesised follows 
definition hd definition map map distributivity delta hd assumption assumed delta hd delta operator 
provided exists operator satisfying requirement fi delta delta operator fi defined fi derivation operator quite difficult omitted reasons space 
defined follows 
theta phi delta lt ff delta inits delta delta hd ff theta theta ff delta fit fit fit fit phi theta theta phi omega delta delta 
omega theta omega fit xy give operational understanding algorithm obtained 
values find value 
value concatenation section mapped expressed operator fi 
element section starts finding longest element inits fits line appended line element inits appended line fits line longest element inits fits line expressed operator ff 
operator phi prepends resulting partition th element catamorphism implemented resulting algorithm requires quadratic time evaluation 
show linear time algorithm obtained 
lt ff inits lt ff inits returns longest element inits fits line appended element element fact fit 
implies computing elements suffices purposes 
final specification problem reads delta fi delta delta operator fi amendment operator fi 
fi gamma algorithm implemented requires linear time evaluation 
catamorphism theorem applied obtain incremental algorithm 
resulting algorithm hopelessly space inefficient 
derive alternative incremental algorithm 
try find basic incremental algorithm paragraph problem function defined equality proved fi operator omega basic incremental algorithm defined delta delta 
component basic incremental algorithm find efficiently computable operator phi phi fi search basic incremental algorithm abandoned try find incremental algorithm 
definition incremental algorithms finding incremental algorithm amounts finding left reduction fl right reduction fl exists functions ff fi operators fl fl satisfying equations 
ff delta fl fi delta fl 
fl fl fl 
fl fl fl fl fl function ff operators fl fl defined follows 
catamorphism fi delta delta fl fi operator fl defined fl fi 
may take ff id furthermore remarked define operator fl delta delta fl fl function fi operators fl fl defined follows 
right reduction fl take right reduction function catamorphism fi delta delta fl fi operator fl defined fl fi definition delta fi section 
define operator fl tl delta ae fl fl incremental algorithm 
fi delta delta fl fi fl id fl fi fl problem derived incremental algorithm problem coding text respect dictionary 
algorithm algorithms data compression 
line algorithms problem known see rodeh pratt 
specification problem similar specification paragraph problem specified delta delta parts dictionary 
derivation efficient algorithm problem uses recursive characterisation function parts 
reported part ongoing research incremental algorithms 
theory developed far specific lists 
natural extension theory model notion cursor boom hierarchy see section develop theory data types hierarchy go 
second extension model incremental data types admissible edit actions incremental data type modelled initial data type induced set constructors corresponding edit actions 
development theory incremental data types examples incremental algorithms derived support development theory 

discussions incremental algorithms richard bird maarten fokkinga jaap van der gratefully acknowledged 
furthermore maarten fokkinga jaap van der commented previous versions pointed ways improve presentation contents 

line breaking problem text formatting 
acm newsletter 
bird 
transformational programming paragraph problem 
science computer programming 
bird 
theory lists 
broy editor logic programming calculi discrete design volume nato asi series pages 
springer verlag 
bird :10.1.1.100.9674
lectures constructive functional programming 
broy editor constructive methods computing science volume nato asi series pages 
springer verlag 
bird 
small specification exercises 
van gries misra editors beauty business birthday edsger dijkstra pages 
springer verlag 
fokkinga 
underspecification derivation optimal partition algorithms 
cwi amsterdam 
frederickson 
data structures line updating minimum spanning trees applications 
siam journal computing 
goguen 
memories 
bulletin eatcs 
jeuring 
deriving algorithms binary labelled trees 
apers van leeuwen editors proceedings sion computing science netherlands pages 
jeuring 
algorithms theorems 
broy jones editors programming concepts methods pages 
north holland 
knuth 
dynamic huffman coding 
journal algorithms 
knuth 
breaking paragraphs lines 
software practice experience 
malcolm 
data structures program transformation 
science computer programming 
meertens 
algorithmics programming mathematical activity 
de bakker lenstra editors proceedings cwi symposium mathematics computer science volume cwi monographs pages 
north holland 
meertens 
paramorphisms 
technical report cs cwi 
appear formal aspects computing 
meyer 
incremental string matching 
information processing letters 
de moor 
categories relations dynamic programming 
submitted publication 
paige 
programming invariants 
ieee software 
pemberton 
views open architecture user interface system 
appear proceedings interacting computers preparing nineties noordwijkerhout netherlands 
reps teitelbaum demers 
incremental context dependent analysis language editors 
acm transactions programming languages systems 
rodeh pratt 
linear algorithm data compression string matching 
journal acm 
smith 
applications strategy designing divide conquer algorithms 
science computer programming 
thompson 
interactive functional programs method formal semantics 
david turner editor research topics functional programming pages 
addison wesley publishing 
turner 
overview miranda 
david turner editor research topics functional programming pages 
addison wesley publishing 
yellin strom 
language incremental computations 
acm transactions programming languages systems 
