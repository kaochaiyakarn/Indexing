complete monotonic semantic path orderings cristina maria ferreira albert rubio cristina uvic es cf di fct unl pt rubio lsi upc es dept dept inform atica dept univ univ de vic univ nova de lisboa polit de catalunya de jordi girona vic spain portugal barcelona spain theoretically powerful semantic path ordering spo useful practice monotonicity proved hand concrete term rewrite system trs 
monotonic variation spo called mspo 
characterizes termination trs terminating rules included mspo 
mspo complete termination method 
practical side easily automated ingredients standard interpretations general purpose orderings rpo 
shown sufficiently powerful way handle non trivial examples obtain methods dummy elimination dependency pairs particular cases 
obtain positive modularity results termination mspo 
rewrite systems sets rules directed equations compute repeatedly replacing parts formula equal ones simplest possible form obtained 
depending kind objects rewritten different kinds rewrite systems string rewrite systems thue semi thue systems term rewrite systems trs see dj klo detailed surveys 
termination fundamental property applications rewrite systems 
termination trs general undecidable property consists single rule 
termination trs proved showing induced rewrite relation included founded ordering terms 
ordering monotonic stable substitutions reduction ordering suffices check rule system 
monotonic orderings including subterm relation called simplification orderings foundedness follows kruskal theorem kru 
inside class path orderings particular recursive path ordering rpo der received special attention see der dj 
unfortunately orderings simple easy turn cases weak termination proving tool trs terminating contained simplification ordering simply terminating 
avoid problem different transformation methods developed bd bl zan fz ste xi 
transforming trs set ordering constraints dependency pairs method ag successful general technique proving termination non simply terminating trs 
alternative transformation methods powerful term orderings 
due simplicity semantic path ordering spo kl potential known candidate spo scheme rpo generalized replacing precedence function symbols founded underlying quasi ordering involving term head symbol 
simplicity presentation kept ordering powerful 
fact terminating trs spo includes rewrite relation 
unfortunately spo useful practice 
due generalization monotonicity property lost underlying ordering monotonic 
sufficient check rules included ordering ensure termination imply rewrite step inside ordering 
order ensure termination trs user responsible proving hand monotonicity restricted terms rewrites step 
monotonic version spo 
hand monotonic semantic path ordering mspo powerful proving termination trs theoretical side characterizes termination trs terminating rules included mspo practical side generalizes automatable termination proof methods 
hand termination automatically checked ingredients underlying base quasi orderings mspo provided 
far know monotonic version spo due ges 
hand proposal general fact show characterize termination hand suitable practical implementations 
section detailed comparison provided 
interested mspo checking termination proving termination automatically 
expect automatically generate adequate mspo trs exists studied particular classes underlying quasi orderings automatically generated 
hint power resulting family mspo shown known methods dummy elimination fz dependency pairs ag dependency graph refinement particular instances 
classes underlying quasi orderings termination proofs non simply terminating terminating term rewriting systems fully automated 
system mspo developed examples including ones checked 
software examples available www lsi upc es albert 
additionally applying known sufficient conditions ensuring modularity termination gra modularity results termination mspo obtained 
particular trs proved terminating mspo aforementioned classes underlying quasi orderings termination proved modular disjoint systems finite constructor sharing systems 
note modularity properties crucial practical applications automatic termination proof systems 
formal definitions basic tools introduced section 
section study monotonic semantic path ordering 
section devoted examples 
termination methods analyzed section 
section modularity results 
section 
preliminaries consider set function symbols set variables set terms built arbitrary terms function symbol oe substitution 
strict partial ordering transitive irreflexive relation 
monotonic implies stable substitution implies soe toe 
monotonic orderings stable substitutions called rewrite orderings 
reduction ordering rewrite ordering founded infinite sequences reflexive transitive closure binary relation denoted transitive closure 
term rewrite system trs possibly infinite set rules terms 
trs rewrites denoted rule sj loe position substitution oe roe trs terminating exists infinite sequence transitive closure terminating trs reduction ordering 
furthermore reduction orderings characterize termination trs 
theorem 
rewrite system terminating rules contained reduction ordering interesting property reduction orderings combined subterm relation loosing foundedness 
note general monotonicity lost add subterm relation monotonic closure 
proposition 
reduction ordering founded 
relation multiset extension finite multisets denoted defined smallest transitive relation containing fsg ft ng ng founded ordering terms founded ordering finite multisets terms 
quasi ordering transitive reflexive binary relation 
inverse denoted strict part strict ordering iff 
equivalence note disjoint union denotes syntactic equality quasi ordering strict part notation remainder possibly subscripts denote quasi ordering 
definitions 
monotonic 
founded 
stable substitutions soe toe 
quasi monotonic 
quasi reduction quasi ordering fulfills properties 
note quasi monotonic necessarily monotonic 
lexicographic combination denoted lex defined usual lex iff founded stable substitutions lexicographic combination precedence founded quasi ordering precedence recursive path ordering rpo denoted rpo defined recursively follows rpo iff 
rpo 
rpo 
fs rpo ft ng 
monotonic semantic path ordering recall definition semantic path ordering 
analyze example non monotonicity provide intuition monotonic version propose 
definition 
called underlying base quasi ordering semantic path ordering spo kl denoted spo defined spo iff 
spo 
spo 
fs spo ft ng semantic path ordering fulfills property 
lemma kl 
founded stable substitutions spo founded stable substitutions 
said semantic path ordering general non monotonic quasi monotonic fact problem appears monotonic 
shown example 
example 
consider quasi ordering defined terms ii iff iii reflexive variables constants 
quasi ordering founded strict part terms contexts containing symbol note length decreasing sequence number symbol initial term sequence stable substitutions quasi monotonic 
induced spo monotonic case spo spo adding context terms spo fact case prove spo 
analyzing example observe quasi monotonic monotonic case spo require may happen adding context apply cases 
order ensure monotonicity spo need sure context 
way obtain require provided quasi monotonic iff spo requiring bit strong fact example need context requiring ask weaker ensures 
definition 
say quasi monotonic wrt 
implies terms function symbols definition 
pair called quasi reduction pair founded stable substitutions quasi monotonic define monotonic semantic path ordering mspo definition 
quasi reduction pair 
corresponding monotonic semantic path ordering denoted mspo defined mspo spo terms theorem 
mspo reduction ordering 
proof 
foundedness follows fact mspo spo spo founded 
stability substitutions follows stability spo monotonicity show mspo implies mspo spo terms function symbols definition mspo mspo implies 
hand quasi monotonicity 
definition mspo mspo implies spo spo implies spo case 
previous theorem shows mspo provides correct method proving termination term rewriting systems 
result shows complete method terminating term rewriting monotonic semantic path ordering includes rules 
mspo characterizes termination 
theorem 
rewrite system terminating exists quasi reduction pair mspo rule proof 
right left implication follows theorem 
left right build appropriate pair terminating trs definition rewriting quasi monotonic stable substitutions 
termination property strict part 
founded 
quasi monotonic quasi monotonic quasi reduction pair prove mspo rule definition subterm spo repeatedly applying case implies mspo quasi reduction pair condition quite tight shown example required quasi reduction quasi ordering spo characterize termination terminating sets rules included spo underlying quasi reduction quasi ordering 
example 
quasi reduction quasi ordering trs included generated spo 
note trs terminating shown mspo example 
show rules included spo quasi reduction quasi ordering important spo spo constant term need subterm definition need able include rule 
include second need order conclude case case recursive call spo possibility requires contradicts assumption 
ii iii proceed third rule 
spo need contradicts assumption iii 
need 
assumption iii quasi monotonicity implies 
apply case spo need spo requires contradicting assumption iii 
theorem shows theoretical power ordering termination proof method order useful practice sections show general methods obtain quasi reduction pairs building consider obtained combining interpretation terms quasi reduction quasi ordering called basic quasi ordering obtained known practical general purpose methods path orderings polynomial interpretations 
interpretation general property require preservation quasi monotonicity stability substitutions basic quasi ordering 
particular interpretations suitable practical applications provided 
interpretations original ad hoc ways different termination methods placed framework 
consider interpretations mappings terms terms course consider interpretation terms multisets terms domain provided required properties fulfilled 
consider defined follows note imply loss generality identity mapping 
additionally follows 
quasi ordering quasi ordering wellfounded quasi monotonicity stability substitutions case 
give examples interpretations preserve properties 
symbol interpreted projection single argument denoted pair xn function symbol applied arbitrary sequence obtained arguments denoted pair xn ng 
additionally consider identity variables bijection 
assume pair symbol 
usually identity pairs omitted 
interpretation recursively defined pairs ffl pair xn ffl pair xn 
easy show interpretations preserve quasi monotonicity stability substitutions recall stability quasi orderings requires stability strict part 
proposition 
interpretation defined 

quasi monotonic quasi monotonic 

stable substitutions stable substitutions 
building section show quasi reduction pairs obtained 
basic cases possible quasi orderings fulfilling quasi monotonicity requirement proposition 
quasi reduction quasi ordering 

quasi reduction pair 

precedence defined iff top top 
quasi reduction pair 
show obtain new quasi reduction pairs quasi reduction pairs 
start pairs proposition repeatedly apply properties obtain suitable quasi reduction pairs 
define renaming quasi ordering definition 
mapping called renaming denote 
extend terms obtaining head renaming map way symbol renaming map renaming quasi ordering defined note renaming applied head symbol term arguments defined variables 
proposition 
quasi reduction pair 
quasi reduction pair founded stable substitutions 
quasi reduction pair renaming map 
quasi reduction pair ng qn lex example 
quasi reduction quasi ordering precedence renaming map proposition quasi reduction pair proposition quasi reduction pair 
proposition quasi reduction pair conclude proposition lex quasi reduction pair 
examples examples provide quasi reduction pair cases details checking mspo included 
give definition definition cases methods described sections 
basic quasi ordering rpo avoid confusion precedence denoted note precedences build simplicity directly give strict part example 
trs comes example case renaming map identity interpretation generated pairs rpo precedence note added signature symbol rule rpo implies spo case spo mspo second rule 
prove spo rpo implies case spo need check spo follows case 
third rule rpo 
prove spo rpo implies case spo need check spo 
follows case rpo spo follows case 
example 
example nested recursion fz precedence component take lexicographic combination lex precedence renaming map identity interpretation basic quasi ordering rpo generated empty precedence 
note added signature function symbol constant show mspo 

prove spo apply case 
recursive call spo apply case rpo 
recursive call spo apply case rpo recursive call spo apply twice case 
example 
non simply terminating example ag precedence second component le true le false le le minus minus le true false minus quot quot quot minus take lexicographic combination lex precedence le true le false minus interpretation le true false minus basic quasi ordering rpo generated precedence quot 
show minus mspo le 
minus le minus le 
prove minus spo le minus le minus case spo need check recursive call minus spo le minus spo minus spo follow case spo 
minus le minus rpo le conclude case 
generalizing termination proof methods application provided methods generate suitable quasi orderings show known termination proof methods dummy elimination fz dependency pairs ag seen particular instance monotonic semantic path ordering 
note side effect provides new simple proof correctness 
study proposal show strictly weaker 
dummy elimination dummy elimination consists transformation eliminates function symbols signature replacing constant pi notation terms rewrite rules transformed accordingly 
soundness result states trs defined contains symbols arity eliminated terminating transformed trs defined pig terminating 
interpretation defined pairs xn pi symbol eliminated identity pair symbols 
system ju dec rg cap dec contains subterm just function symbol eliminated details see fz 
example ff transformed elimination system ff pi pi constant replacing show termination shown dummy elimination find simple quasi reduction pair contained mspo 
reduction ordering containing 
define means interpretation defined basic quasi ordering iff 
hand define iff 
note simplification ordering rpo subterm relation included 
show quasi reduction pair 
reduction ordering quasi reduction quasi ordering proposition said reduction ordering founded quasi ordering stable substitutions propositions conclude quasi reduction pair 
show contained contained mspo cap cap cap cap show spo prove spo subterm induction jr xi cap dec 
definition cap cap consequently strict part includes cap cap induction hypothesis spo arguments case spo dependency pairs consider plain dependency pair method method called dependency graph usable rules restriction see ag details 
note theses refinements method analyzing operationally actual rewrite relation considering 
method trs signature split sets constructor symbols set defined symbols set defined symbols heading left hand side rule constructor symbols 
renaming map defined symbols identity 
dependency pairs rule set pairs hn subterm headed symbol example rule dependency pairs hf hf terminating quasi reduction quasi ordering rule dependency pair hs ti show termination shown dependency pairs find simple quasi reduction pair contained mspo 
precedence iff iff 
take lex propositions quasi reduction pair 
show contained mspo directly dependency pairs proof 
show spo prove spo subterm induction jr top top top top top dependency pair hn implies induction hypothesis spo arguments case spo spo note precedence build quite weak strict part 
believe better precedences component adding strict comparisons defined symbols adding different precedence lexicographic combination capture easily part power dependency graph 
monotonic semantic path ordering analyze proposal ges monotonic spo 
give strict part definition 
definition 
quasi reduction quasi ordering 
iff spo version important step right direction main weaknesses 
requirement quasi reduction quasi ordering strong 
shown example spo loose completeness proposal complete 
furthermore practical view dummy elimination technique dependency pair technique included note instance renaming mapping preserve quasi monotonicity 
hand respect efficiency implementation method termination proof requires huge number comparisons rule symbol argument position symbol checked 
note check show included mspo lemma 
quasi reduction quasi ordering 
exists quasi reduction pair mspo proof 
take iff obvious case mspo prove quasi reduction pair quasi monotonic follows definition quasi monotonic quasi ordering stable substitutions follows directly properties modularity section modularity results mspo obtained applying known sufficient conditions ensuring modularity termination 
consider disjoint unions trs systems share symbol constructor sharing unions trs systems share constructors 
trs called terminating non deterministic collapses denoted terminating fg yg terminates new symbol termination results ffl termination modular property disjoint unions trs 
ffl gra termination modular property constructor sharing unions finite trs 
lemma 
xi included mspo terminating 
note includes subterm relation new symbol case rules included spo conclude mspo mspo corollary 
mspo mspo mspo basic orderings include subterm relation trs included mspo mspo respectively 
ffl disjoint terminating terminating 
ffl share constructors finite terminating terminating 
described new ordering general method proving termination trs 
mspo known spo spo monotonic useful practice 
complete method characterizes termination 
method generalizes simple way known methods transformations 
case dependency pairs method successful general methods applied practice show generalize usable rules dependency graph refinements 
kind operational refinements fit framework elaborated quasi orderings inside mspo believe obtain similar results 
order study behavior mspo developing termination system method 
currently system check termination ingredients mspo provided aim fully automate termination proofs heuristics selecting ingredients tried 
application order term rewriting fact method defined means orderings properties fulfilled wellknown opens door important classes ac rewriting rewriting modulo associativity commutativity axioms higher order rewriting lack general methods important 
apart modularity results studying kinds combinations particular called hierarchical combinations reusing termination proofs proving termination trs splitting different parts may crucial practice 
acknowledgments want roberto nieuwenhuis ohlebusch help development 
ag arts giesl 
automatically proving termination simplification orderings fail 
tapsoft th international joint conference theory practice software development caap lncs 
bd bachmair dershowitz 
commutation transformation termination 
th international conference automated deduction lncs pag 
oxford england 
bl bellegarde lescanne 
termination completion 
applicable algebra engineering communication computing 
der dershowitz 
orderings term rewriting systems 
theoretical computer science 
der dershowitz 
termination rewriting 
journal symbolic computation 
dj dershowitz 
jouannaud 
rewrite systems 
jan van leeuwen editor handbook theoretical computer science volume formal models semantics chap 
pag 

elsevier science publishers 
fz ferreira zantema 
dummy elimination making termination easier 
th int 
conf 
fundamentals computation theory lncs pag 

ges 
monotonic semantic path ordering 
technical report informatik berichte universitat ulm ulm germany 
gra gramlich 
generalized sufficient conditions modular termination rewriting 
applicable algebra engineering communication computing 
kl kamin 
levy 
generalizations recursive path ordering 
unpublished note dept computer science univ illinois urbana il 
klo klop 
term rewriting systems 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press 
kru kruskal 
quasi ordering tree theorem conjecture 
transactions american mathematical society 
ohlebusch 
modularity termination term rewriting systems 
theoretical computer science 
ste steinbach 
automatic termination proofs transformation orderings 
th int 
conf 
rewriting techniques applications lncs kaiserslautern germany 
xi xi 
automated termination proofs freezing 
th int 
conf 
rewriting techniques applications lncs pag 
tsukuba japan 
zan zantema 
termination term rewriting interpretation type elimination 
journal symbolic computation 

