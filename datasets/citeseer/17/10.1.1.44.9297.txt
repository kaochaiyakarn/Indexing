rewriting properties combinators intuitionistic linear logic monica valeria de paiva eike ritter computer laboratory university cambridge new museums site pembroke street cambridge cb qg england investigate possibility developing semi automatic rewriting tool manipulating reasoning combinators intuitionistic linear logic 
particular develop canonical confluent terminating term rewriting system associated theory categorical combinators rudimentary linear logic 
order knuth bendix completion algorithm transform equational theory combinators equivalent canonical rewrite system 
means set categorical combinators linear logic derived resulting system combinators checked rewriting properties rewriting techniques 
process deriving categorical combinators relatively long interesting interaction side reported mechanized version 
started theoretically correct formulation combinators fragments logic consideration 
usual automatic rewriting tool derive check properties local confluence termination canonicity system led improve axiomatic characterization categorical combinators equivalent presentation derived nice feature rewriting techniques may applied successfully 
process transformation data provided theoretical considerations follows definite pattern described section 
intuitionistic linear logic introduced girard lafont 
basic assumption linear logic able logical control resources available derivation 
resource linear logic main claim applicability applications areas computer science applications linear logic see 
multiplicative exponential intuitionistic linear logic refinement intuitionistic logic sense develop linear calculus system linear combinators 
main concern calculus linear categorical combinators models intuitionistic linear logic faithfully efficiently 
categorical combinators relationship category theory intuitionistic linear logic explained see categorical combinators logical systems 
briefly recall intuitionistic linear logic describe system categorical combinators arrived discuss rewriting properties system 
categorical combinators linear logic intuitionistic linear logic recall rules multiplicative intuitionistic linear logic sequent calculus system 
note omega gammaffi fragment linear logic called rudimentary linear logic 
developing categorical combinators section introduce categorical combinators rudimentary linear logic 
combinators multicategories detailed explanation typing rules see 
kinds combinators ffl contexts gamma lists types ffl types ground types tensor product linear implication ffl lists linear maps morphisms contexts identity gamma delta exchange gamma delta gamma delta cut gamma delta gamma gamma gamma omega gamma omega gamma delta omega gamma delta omega gamma delta gammaffi gamma delta gammaffib gamma gammaffi gamma gammaffib gamma weakening gamma gamma contraction gamma gamma dereliction gamma gamma promotion gamma multiplicative intuitionistic linear logic ffl linear maps correspond linear terms 
definition raw linear combinators gamma gamma omega gammaffib fst id snd omega tens oe oe cur app app equational theory 
equations id identity combinator id id id equations composition equations constants fst snd fst snd fst snd fst snd id constants fst snd surprising linear logic point view explained section 
equations linear implication naturality rules application app fst app app app fst snd snd app app fi rule app cur id naturality rule currying cur cur fst snd equations tensor product naturality rules omega fst omega omega tens fst snd snd tens tens oe fst oe oe snd oe fst oe oe snd fi rules tens tens usual dealing categorical combinators consider rule implication 
rule tens theorem equational theory categorical combinators rudimentary linear logic admits locally confluent rewrite system 
proof running knuth bendix completion equational theory locally confluent rewrite system obtained rules equations oriented left right 
developing rewrite system describe process transforms formulation combinators equational theory rewrite system shown previous section 
aim obtain canonical rewrite system normal forms translations term calculus 
wants avoid linear rewrite rules possible 
fact implementation non left linear rules requires costly equality check render theorems asserting confluence orthogonal systems unusable 
having oriented original equations criteria run knuth bendix completion process produces non canonical rewrite system 
reasons 
equations capturing categorical concept naturality cause rewrite system non terminating 
example rule omega 
omega original system obviously leads nonterminating system 
solve problem introducing new combinator tens abbreviation 
way rewrite rule replaced rules 
rule expresses omega terms tens second rule adapted naturality rule 
combinators app derived way combinators oe oe app respectively 
second reason incompatibility naturality rule cur preliminary representation variables term calculus 
category theory suggests primitive combinators natural number represent combinator fst snd preliminary formulation combinators fst id snd 
possible formulate naturality rule cur version rewrite rule rule cur cur note fst abbreviation fst fst fst times number derived consider typing information 
categorical combinators simply typed calculus fst equal inferred typing rules 
way obtain rule cur cur fst apply knuth bendix algorithm system natural numbers fst obtain divergence pattern fst fst fst times 
fst fst gamma times solution remove natural numbers favour fst snd 
way divergence disappears left right sides rule pattern equal 
linear logic point view combinators fst snd unnatural non linear 
typing restrictions ensure subexpressions linear expressions expression fst snd 
termination issue application rewriting techniques shows termination subsystem include rules xi linear implication 
hans zantema proofs result nice application distribution elimination proposed simpler proof polynomials 
untyped system linear combinators linear implication non terminating simulate fi reduction untyped calculus 
way prove termination typing information essential way 
standard approach reducibility method show strong normalization term calculus 
termination subsystem linear implication constitutes important part proof identify terms equal modulo equations subsystem 
current proving termination omega gammaffi fragment linear logic process extending approach deal logical operator 
types lists linear maps extended follows omega gammaffib fst id fl ffl operator characterized comonoid comonad equations 
comonad equations fl ffl id fl ffl fl fl fl fl comonad equations added equational theory combinators omega gammaffi fragment 
completion theory extended equations results locally confluent system rewrite system xi plus rules obtained orienting comonad equations left right new rules generated critical pairs comonad rules associativity composition fl ffl fl fl fl fl rule derived critical pair rule associativity rule provides new information deal logical rule dereliction see 
rule applies reduction monoidal rule context proof theoretic point view rules characterize application promotions 
rewrite system xi proved terminating 
current concerns formalization comonoid equations 
canonical rewrite system associated theory categorical combinators intuitionistic linear logic position study notion normal form defined system 
canonical rewrite system associated equational theory categorical combinators rudimentary linear logic 
hand development system categorical combinators largely benefited application rewriting techniques led better understanding theory 
hand equational presentation combinators resulted interesting application rewriting framework 
equational theory completed successfully locally confluent rewrite system termination proofs subsystems nice applications techniques proving termination rewrite systems 
results obtained far show promising pursue project hope extend approach complex logical systems 
martin hyland guidance hans zantema providing termination proofs 
benton bierman de paiva hyland term assignment intuitionistic linear logic technical report computer laboratory university cambridge august 
bierman draft ph thesis computer laboratory university cambridge 
garland guttag guide lp larch prover release lp documentation mit november 

girard lafont linear logic lazy computation proc 
tapsoft lecture notes computer science vol 
springer verlag pp 


girard taylor lafont proofs types cambridge university press 
ritter categorical machines higher order lambda calculi ph thesis technical report computer laboratory university cambridge 
ritter de paiva syntactic multicategories categorical combinators linear logic submitted presentation ctcs may 
scedrov brief guide linear logic bulletin eatcs june pp 

zantema termination term rewriting interpretation proc 
ctrs lecture notes computer science springer verlag pp 

zantema private communication june 
