fast algorithms sorting searching strings jon bentley robert sedgewick theoretical algorithms sorting searching multikey data derive practical implementations applications keys character strings 
sorting algorithm blends quicksort radix sort competitive best known sort codes 
searching algorithm blends tries binary search trees faster hashing commonly search methods 
basic ideas algorithms date back practical utility overlooked 
extensions complex string problems partial match searching 

section briefly reviews hoare quicksort binary search trees 
emphasize known isomorphism relating summarize basic facts 
multikey algorithms data structures section 
multikey quicksort orders set vectors components 
regular quicksort partitions input sets greater value radix sort moves field current input known equal field 
node ternary search tree represents subset vectors partitioning value pointers lesser elements greater elements binary search tree equal elements processed fields tries 
structures analyses appeared previous typically complex theoretical constructions far removed practical applications 
simple framework opens door implementations 
algorithms analyzed section 
analyses simple derivations old results 
section describes efficient programs derived algorithms 
program sorting algorithm bell labs lucent technologies mountain avenue murray hill nj research bell labs com 
princeton university princeton nj rs cs princeton edu 
competitive efficient string sorting programs known 
second program symbol table implementation faster hashing commonly regarded fastest symbol table implementation 
symbol table implementation space efficient multiway trees supports advanced searches 
application programs sorts quicksort implementation compare operation searches hashing binary search trees 
take advantage properties string keys widely practice 
algorithms provide natural elegant way adapt classical algorithms important class applications 
section turns difficult string searching problems 
partial match queries allow don care characters pattern instance matches soda sofa 
primary result section ternary search tree implementation rivest partial match searching algorithm experiments performance 
near neighbor queries locate words hamming distance query word instance code distance soda 
give new algorithm near neighbor searching strings simple implementation describe experiments efficiency 
offered section 
background quicksort textbook divide conquer algorithm 
sort array choose partitioning element permute elements lesser elements side greater elements recursively sort subarrays 
happens elements equal partitioning value 
hoare partitioning method binary places lesser elements left greater elements right equal elements may appear side 
algorithm designers long recognized desirability difficulty ternary partitioning method 
sedgewick observes page ideally get equal keys position file keys smaller value left keys larger value right 
unfortunately efficient method doing devised 
dijkstra popularized problem dutch national flag order sequence red white blue pebbles appear order holland 
corresponds quicksort partitioning lesser elements colored red equal elements white greater elements blue 
dijkstra ternary algorithm requires linear time looks element exactly code implement significantly larger constant factor hoare binary partitioning code 
wegner describes efficient ternary partitioning schemes 
bentley mcilroy ternary partition counterintuitive loop invariant main partitioning loop inner loops 
inner loop moves index scans lesser elements swaps equal elements halts greater element 
second inner loop moves index correspondingly scans greater elements swaps equal elements halts lesser element 
main loop swaps elements pointed increments decrements continues cross 
wegner proposed invariant maintained complex code 
equal elements edges swapped middle array extraneous comparisons 
code partitions element array comparisons 
quicksort extensively analyzed authors including hoare van emden knuth sedgewick 
detailed analyses involve harmonic numbers theorem 
hoare quicksort partitions single randomly selected element sorts distinct items nh lg expected comparisons 
common variant quicksort partitions median random sample 
theorem 
van emden quicksort partitions median randomly selected elements sorts distinct items nh expected comparisons 
increasing push expected number comparisons close lg 
theorems far deal expected performance 
guarantee worst case performance partition 
quicksort binary search tree true median computed cn comparisons 
paterson pippenger give worst case algorithm establishes constant floyd rivest give expected time algorithm theorem 
quicksort partitions median computed cn comparisons sorts elements cn lg comparisons 
proof observes recursion tree lg levels cn comparisons level 
quicksort algorithm closely related data structure binary search trees data structure see knuth 
shows operation input sequence 
tree right standard binary search tree formed inserting elements input order 
recursion tree left shows ideal partitioning quicksort partitions element subarray leaves elements subarrays relative order 
level algorithm partitions value produces left subarray right subarray sorted recursively 
illustrates fundamental isomorphism quicksort binary search trees 
unboxed partitioning values left correspond precisely internal nodes right horizontal vertical placement 
internal path length search tree total number comparisons structures 
totals equal structure set comparisons 
expected cost successful search definition internal path length divided combine theorem yield theorem 
hibbard average cost successful search binary search tree built inserting elements random order lg comparisons 
analogous theorem corresponds theorem reduce search cost choosing root subtree median elements subtree 
analogy theorem perfectly balanced subtree decreases search time lg 
algorithms just quicksort isomorphic binary search trees significant digit radix sort isomorphic digital search tries see knuth 
isomorphisms described table algorithm data structure quicksort binary search trees multikey quicksort ternary search trees msd radix sort tries section introduces algorithm data structure middle row table 
radix sort tries structures examine input field field significant significant 
quicksort binary search trees structures field wise comparisons array indexing 
phrase problems terms set vectors components 
primitive operation perform ternary comparison components 
munro raman describe algorithm sorting vector sets place describe previous area 
hoare sketches quicksort modification due section multi word keys known segment comprises items items key values identical value words partitioning segment comparison th word keys 
hoare gives awkward implementation elegant idea knuth gives details scheme solution 
ternary partitioning algorithm provides elegant implementation hoare multikey quicksort 
recursive pseudocode sorts sequence length known identical components 
originally called sort 
sort return choose partitioning value partition value component form sequences sizes sort sort sort partitioning value chosen ways computing true median specified component choosing random value component 
ternary search trees isomorphic algorithm 
node tree contains split value pointers low high left right children fields 
ternary search tree letter words form roles corresponding fields binary search trees 
node contains pointer equal child represents set vectors values equal split value 
node splits dimension low high children split equal child splits 
binary search trees ternary trees may perfectly balanced constructed inserting elements random order partially balanced variety schemes 
section knuth builds optimal binary search tree represent common words english twelve words letters 
shows perfectly balanced ternary search tree results viewing words set vectors components 
low high pointers shown solid lines equal pointers shown dashed lines 
input word shown beneath terminal node 
tree constructed partitioning true median subset 
search word starts root proceeds equal child node value stops comparisons 
search ax comparisons letter comparisons second letter reporting word tree 
idea dates back far see example 
prior authors proposed representing children trie node array linked list represents set children binary search tree structure viewed ternary search tree 
mehlhorn proposes weight balanced ternary search tree searches inserts deletes elements set strings length log time similar structure described section iii mehlhorn text 
bentley saxe propose perfectly balanced ternary search tree structure 
value node median set elements relevant dimension tree constructed criterion 
bentley saxe structure solution problem computational geometry derive geometric design paradigm multidimensional divide conquer 
ternary search trees may built variety ways inserting elements input order building perfectly balanced tree completely specified set 
sleator tarjan schemes balancing ternary search trees 

analysis start analyzing ternary search trees apply results multikey quicksort 
theorem due bentley saxe 
theorem 
bentley saxe search perfectly balanced ternary search tree representing vectors requires lg scalar comparisons optimal 
proof sketch 
upper bound start active vectors active dimensions comparison halves active vectors decrements active dimensions 
lower bound consider vector set elements equal dimensions distinct th dimension 
similar search times suffix tree data structure reported manber myers 
consider multikey quicksort partitions median element subset 
theorem corresponds theorem 
theorem 
multikey quicksort partitions median computed cn comparisons sorts vectors cn lg scalar comparisons 
proof 
recursion tree perfectly balanced node lg root theorem 
level tree contains elements linearity median algorithm cn scalar comparisons performed level 
multiplication yields desired result 
multikey quicksort partitions randomly selected element requires comparisons analogy theorem 
decrease number partitioning sample median 
theorem 
multikey quicksort partitions median randomly selected elements sorts vectors nh kn expected scalar comparisons 
proof sketch 
combine theorem observation equal elements strictly decrease number comparisons 
additive cost kn accounts inspecting keys 
increasing sample size reduce time near lg kn 
munro raman describe place vector sort running time 
turn sorting analogous results building ternary search trees 
build tree scratch time bounds described adding bookkeeping functions additional primitive operations augments sort construct tree 
sorted input tree built kn comparisons 
theorem describes worst case cost searching totally balanced tree 
expected number comparisons successful search randomly built tree partitioning sample median result 
theorem 
expected number comparisons successful search ternary search tree built partitioning median randomly selected elements 
proof sketch 
theorem isomorphism trees sort algorithms 

string programs ideas underlying multikey quicksort ternary search trees simple old yield theoretically efficient algorithms 
utility case keys strings gone virtually unnoticed unfortunate string keys common practical applications 
section show idea ternary recursive decomposition applied character character strings leads elegant efficient programs sorting searching strings 
primary practical contribution 
assume reader familiar programming language described kernighan ritchie 
represents characters small integers easily compared 
strings represented vectors characters 
structures theorems seen far apply immediately sets strings fixed length 
standard programs variable length strings terminated null character integer zero 
multikey quicksort function sort strings primary sort function declaration void main char int passed array pointers character strings job permute pointers strings occur lex program related content available www cs princeton edu rs strings 
nondecreasing order 
employ auxiliary function passed arguments additional integer depth tell characters compared 
algorithm terminates vector contains string current depth runs strings 
sort function uses supporting macros 
define swap char define depth swap macro exchanges pointers array macro integer character accesses character depth string 
vector swap function moves sequences equal elements temporary positions ends array back proper place middle 
void int int int char swap complete sorting algorithm program similar code bentley mcilroy 
function originally called void main char int partitioning recursively sort lesser greater segments sort equal segment corresponding character zero 
tune performance program standard techniques described sedgewick 
algorithmic speedups include sorting small subarrays insertion sort partitioning median elements larger arrays median medians exploit theorem 
standard coding techniques include replacing array indices pointers 
table gives number seconds required sort usr dict words file contains words characters 
machine mhz system simple tuned radix mips mips pentium dx third column reports time system qsort function fourth column reports time program 
simple code fast generalpurpose presumably highly tuned system function faster 
fifth column reports time void char int int depth int return rand swap swap swap break swap min min depth depth depth program 
program sort strings tuned sort substantially faster simple version 
benchmark final column describes run time highly tuned radix sort mcilroy bostic mcilroy fastest string sort know 
ran sorts data sets library call numbers dimacs implementation challenge 
extracted file set unique keys file card number lac instance keys average length characters 
mips machines tuned sort percent faster radix sort intel machines percent slower 
multikey quicksort prove faster radix sort contexts 
primary challenge implementing practical radix sorts case number distinct keys number bins keys equal 
multikey quicksort may thought radix sort gracefully adapts handle case cost slightly bins full 
turn implementing string symbol table ternary search trees depicted 
node tree represented structure retrieved dimacs library call number data sets theory stanford edu 
int search char root return return program 
search ternary search tree insert char malloc sizeof tnode insert insert insert return program 
insert ternary search tree typedef struct tnode typedef struct tnode char tnode value stored node pointers represent children 
root tree declared root 
program returns string tree 
starts root moves tree 
branches obvious 
takes branch returns current character string character 
loop know ran tree looking string return 
program inserts new string tree 
insert string code root insert root 
statement detects running tree new node initializes falls standard case 
subsequent code takes appropriate branch branches characters remain string 
tested search performance dictionary testing sorting 
inserted words tree measured average number branches taken possible successful searches tree 
results table input branches order nodes lo eq hi total balanced tournament random dictionary sorted reversed rows describe different methods inserting strings tree 
column immediately suggests theorem 
theorem 
number nodes ternary search tree constant input set independent order nodes inserted 
proof 
unique node tree corresponding unique string prefix set 
relative positions nodes tree change function insertion order number nodes invariant 
notice standard search trie node compaction exactly number nodes 
data set number nodes percent number characters 
average word length including delimiter characters characters 
average number equal branches successful search precisely input character compared equal element 
balanced tree chooses root subtree median element collection 
tree number surplus greater comparisons half worst case bound theorem total number comparisons just 
build tournament tree sort input set 
recursive build function inserts middle string subarray recursively builds left right subarrays 
tree uses percent comparisons balanced tree 
randomly built tree uses just fifteen percent comparisons 
fourth line table describes inserting words dictionary order isn quite sorted due capital letters special characters 
final lines describe inserting words sorted order reverse sorted order 
inputs slow search factor binary search tree slow search factor 
ternary search trees appear quite robust 
conducted simple experiments see ternary search trees compare symbol table structures described knuth 
measured binary search viewed implementation perfectly balanced binary search trees 
input set binary search uses string comparisons inspects characters average average string comparison inspects characters 
computers tested highly tuned binary search took twice time program tournament tree 
typical implementation symbol tables hashing 
represent strings chained hash table size hash function section kernighan ritchie reasonably efficient produces spread 
int char unsigned return body search function tab strcmp str return return fair timing replaced string comparison function strcmp inline code hash tree search functions coding style 
dictionary average successful hash search requires string comparisons calls strcmp function character comparisons successful search requires comparison stored string half comparison string front ends character 
addition search compute hash function usually inspects character input string 
simple experiments show ternary search trees competitive best known symbol table structures 
ways improve ternary search trees 
search function program reasonably efficient tuning techniques saving difference compared elements reordering tests registers squeeze additional percent 
table compares time resulting program similarly tuned hash function successful unsuccessful machine mhz tst hash tst hash mips mips pentium dx times number seconds required perform search word dictionary 
successful searches structures comparable search times 
generated unsuccessful searches incrementing character word bat transformed word cat cat transformed nonword dat 
ternary search trees faster hashing simple model 
models unsuccessful search application dependent ternary search trees faster hashing unsuccessful search applications discover mismatches examining characters hashing processes entire key 
long keys typical applications advantage important simple dictionary considered 
dimacs library call number data sets instance program took fifth time hashing 
insert function program room improvement 
tournament tree insertion inserting median element recursively inserting lesser greater elements provides reasonable tradeoff build search times 
replacing call memory allocation function malloc buffer available nodes eliminates time spent memory allocation 
common techniques reduced run time transforming recursion iteration keeping pointer pointer reordering tests saving difference comparison splitting single loop loops 
combination techniques sped program factor machines considering environments slow malloc 
experiments cost inserting words dictionary percent greater searching words program 
efficient insertion routine requires lines web page cited earlier 
main drawback ternary search trees compared hashing space requirements 
ternary search tree uses byte nodes total megabytes 
hashing uses hash table pointers byte nodes bytes text megabytes 
alternative representation ternary search trees space efficient subtree contains single string store pointer string node stores bits telling children point nodes strings 
leads slower complex code reduces number tree nodes close space hashing 
ternary search trees efficiently answer kinds queries require linear time hash table 
ordered search trees logarithmic time searches find predecessor successor element count number strings range 
similarly tree traversal reports strings sorted order linear time 
see advanced searches section 
summary ternary search trees combine best worlds low overhead binary search trees terms space run time character efficiency search tries 
primary challenge tries practice avoid excessive memory trie nodes nearly empty 
ternary search trees may thought trie implementation gracefully adapts handle case cost slightly full nodes 
ternary search trees easy implement compare code instance knuth implementation hash tries ternary search trees year represent english dictionaries commercial optical character recognition ocr system built bell labs 
trees faster hashing task gracefully handle character set unicode standard 
designers experimented partial match searching word lookup replace letters low probability recognition don care character 

advanced string search algorithms turn search algorithms analyzed theoretically 
problem partial match searching query string may contain regular letters don care character 
searching dictionary pattern matches single word pattern matches words including banana problem studied researchers including appel jacobson manber 
rivest presents algorithm searching tries take single branch letter specified don care character recursively search branches 
program implements rivest method ternary search trees called instance root program statements 
returns search runs tree 
second fifth statements symmetric recursively search search character don care search string greater 
third statement recursively searches current character query string non null 
fourth char int void char return char program 
partial match search statement detects match query adds pointer complete word stored flag program nonzero output search array 
rivest states partial match search trie requires time respond query word letters specified file letter words 
ternary search trees viewed implementation tries binary trees implementing multiway branching expected results apply immediately program 
experiments led surprise unspecified positions front query word dramatically costly unspecified characters word 
dictionary seen table presents queries number matches number nodes visited search balanced tree random tree 
study phenomenon conducted experiments dictionary random data closely models dictionary 
page limit proceedings allow describe experiments confirm anecdotes table 
key insight top levels trie representing dictionary high branching factor starting don care character usually implies recursive searches 
near word branching factor tends small don care character word frequently gives just single recursive search 
reason rivest suggests binary tries branch bit representation character branching second bit 
flajolet puech analyzed phenomenon detail bit tries methods extended provide detailed explanation search costs function unspecified query positions 
nodes pattern matches balanced random television tele 
vision banana ban 
ana br br 
xy 
xy table 
partial match search performance turn problem near neighbor searching set strings find words dictionary hamming distance query word 
instance search words distance soda finds code coma words 
program performs near neighbor search ternary search tree 
arguments tree node string distance 
statement returns node null distance negative 
second fourth statements symmetric search appropriate child distance positive query character appropriate side 
third statement checks match recursively searches middle child 
conducted extensive experiments efficiency program space limits sketching just experiment 
table describes performance similar data sets void char int int strlen char program 
near neighbor search dictionary random min mean max min mean max line shows costs performing searches distance word data set 
dictionary data represented letter words dictionary tree nodes 
distance search performed word dictionary 
minimum cost search visited nodes find maximum cost search visited nodes find mean search cost 
random data represented letter words randomly generated symbol alphabet tree nodes 
subsequent lines table describe search distances 
simple experiment shows searching near neighbors relatively efficient searching distant neighbors grows expensive simple probabilistic model accurately predicts time real data 

sections old techniques uniform presentation analysis multikey quicksort ternary search trees 
uniform framework led code sections 
multikey quicksort leads directly program tuned variant competitive best known algorithms sorting strings 
exhaust application underlying algorithm 
believe multikey quicksort practical system sorts described 
algorithm sort integers instance comparing byte byte 
section shows ternary search trees provide efficient implementation string symbol tables section shows structures quickly answer advanced queries 
ternary search trees particularly appropriate search keys long strings incorporated commercial system 
advanced searching algorithms ternary search trees useful practical applications number interesting problems analysis algorithms 
acknowledgments grateful helpful comments giancarlo doug mcilroy ian munro chris van wyk 

appel jacobson world fastest scrabble program 
communications acm may 

bentley mcilroy engineering sort function 
software practice experience 

bentley mcilroy knuth programming pearls literate program 
communications acm june 

bentley saxe algorithms vector sets 
sigact news fall 

jr randomized binary searching tree structures 
communications acm march 

dijkstra discipline programming 
prentice hall englewood cliffs nj 

flajolet puech partial match retrieval multidimensional data 
journal acm april 

floyd rivest expected time bounds selection 
communications acm march 

hoare quicksort 
computer journal april 

kernighan ritchie programming language second edition 
prentice hall englewood cliffs nj 

knuth art computer programming volume sorting searching 
addison wesley reading ma 

theory practice construction working sort routine 
bell system technical journal october 

manber baeza yates algorithm string matching sequence don cares 
information processing letters february 

manber myers suffix arrays new method line string searches 
siam journal computing 

mcilroy bostic mcilroy engineering radix sort 
computing systems 

mehlhorn data structures algorithms sorting searching 
springer verlag berlin 

mehlhorn dynamic binary search 
siam journal computing may 

munro raman sorting multisets vectors place 
proceedings second workshop algorithms data structures springer verlag lecture notes computer science 

rivest partial match retrieval algorithms 
siam journal computing 

paterson pippenger finding median 
journal computer systems sciences 

sedgewick implementing quicksort programs 
communications acm october 

sedgewick quicksort equal keys 
siam comp june 

sedgewick analysis quicksort programs 
acta informatica 

sleator tarjan self adjusting binary search trees 
journal acm july 

multidimensional height balanced trees 
ieee transactions computers april 

van emden increasing efficiency quicksort 
communications acm september 

wegner quicksort equal keys 
ieee transactions computers april 
