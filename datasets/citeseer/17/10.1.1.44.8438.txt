verifying progress timed systems stavros tripakis verimag 
study issue progress distributed timed systems modeled parallel composition timed automata 
clarify requirements discrete progress absence deadlocks time progress absence deadlocks give static sufficient conditions model ta deadlock free 
dynamic techniques deadlock detection 
techniques forward symbolic reachability onthe fly return answer soon possible necessarily having construct store state space 
distributed timed systems systems consisting number communicating components behavior depends timing constraints 
distributed timed systems increasingly interesting hand critical applications hand complex obvious prove correctness 
formal verification techniques purpose system desired properties described formally mathematical models checked system model satisfies properties 
implicit informal verification process modeling 
ways ensure system model captures correctly behaviors system property model corresponds expected property 
obvious way trial error models built stages modified verification process believed realistic 
systematic way ensure sanity system model check satisfies property progress ability execute forever 
progress usually minimal requirement hold model probably wrong real system supposed study issue progress timed systems modeled timed automata ta acd hnsy 
requirement progress particularly relevant model especially cases system composed done verimag 
currently author uc berkeley post doctoral scholar 
current address cory hall uc berkeley 
tel 
fax 

mail stavros eecs berkeley edu 
convenient simplifying hypothesis result loss generality system may terminate execution legal state assume continue performing infinitely dummy actions modify state 
components usually case realistic systems 
parallel composition operator typically ta involves conjunctive synchronization semantics lead unexpected behaviors non progress 
need methods detect problems modeling expressed users ta verification tools see instance 
recalling ta section clarify notion progress timed systems section 
untimed systems type evolution discrete state changes ta evolve possible ways discrete transition letting time pass 
accordingly progress requirements related ta discrete time progress 
discrete progress requirement states possible take discrete transitions infinitely 
corresponds unique progress requirement untimed systems deadlock freedom 
timed context deadlocks states discrete transition possible letting time pass 
time progress requirement states possible time diverge elapse upper bound 
requirement justified intuition physical world trying model summarized hypothesis physical process matter fast infinitely fast 
hypothesis implies finite possibly unbounded number events occur certain positive amount time 
executions violate property called zeno 
deadlock free model time progress corresponds absence states possible infinite executions zeno 
section give conditions ensuring ta model deadlock free 
conditions sufficient necessary static take account discrete structure ta reachable state space presence timing constraints 
hand quite useful practice expensive check 
section dynamic techniques detecting deadlocks 
techniques sound complete detect true deadlocks fail model free 
techniques fly forward symbolic reachability covers reachable state space 
case deadlocks detected locally visited node symbolic reachability graph 
case detected nested reachability starting visited node 
cases answer returned soon possible diagnostics provided 
related 
progress explicitly discussed original alur acd region graph construction deadlock detection viewing region graph untimed graph deadlocks detected usual finding sink nodes graph detected encoding non generalized buchi acceptance condition solving untimed emptiness problem 
theoretically possible approaches expensive practice mainly due large size region graph 
freedom handled hnsy symbolic technique backward fix point computation informally ta free iff satisfies tctl formula init true :10.1.1.26.7422
approach feasible important drawbacks fly fix point computation terminate answer returned 
provide diagnostics primitive form characteristic set formula 
usually needed diagnostics sample executions 
considers potential state space interesting reachable part state space 
sifakis sy bs bst treats problem different perspective 
checking model satisfies progress aims developing theory composition timed systems guarantees progress possible 
background dense state spaces clocks valuations 
set non negative reals fx xng set variables called clocks 
valuation function 
write valuation assigns zero clocks 
valuation 
ffi ffi resp 
gamma ffi valuation ffi ffi resp 
gamma ffi gamma ffi 
valuations called equivalent clock pair clocks gamma gamma gamma gamma polyhedra 
atomic constraint expression form gamma valuation satisfies constraint satisfies gamma gamma hyperplane set valuations satisfying atomic clock constraint 
class hx polyhedra defined smallest subset contains hyperplanes closed set union intersection complementation 
deadlocks considered meaningless ta model hnsy see :10.1.1.26.7422
notation polyhedra write hyperplane defined constraint polyhedron defined intersection 
write true equivalently false equivalently zero equivalently 
polyhedron called convex ffi ffi gamma ffi polyhedron convex iff defined intersection finite number hyperplanes 
hand non convex written delta delta delta convex 
denote set fi convex 
operations polyhedra 
definition intersection union complementation defined operations polyhedra 
polyhedra difference defined complementation test inclusion equivalent 
define operations sequel 
examples operations shown 
closure 
operation necessary guaranteeing termination reachability algorithms section 
convex polyhedron natural constant closure denoted close greatest convex polyhedron exists equivalent 
intuitively obtained ignoring bounds involve constants greater said closed close lemma 
closed closed 
closed closed 

exists constant closed 
max denote smallest constant closed 
lemma 
constant finite number closed polyhedra 
clock resets 
define operations forward backward clock reset respectively follows def fv ig def fv ig intuitively contains valuations obtained valuation resetting clocks contains valuations resetting clocks yield valuation time elapse 
define operations backward forward time elapse polyhedron polyhedra respectively iff ffi ffi iff ffi gamma ffi result easy derive definitions 
lemma 
convex convex 
effective representation 
polyhedra effectively represented difference bound matrix dbm data structure proposed dil 
convex polyhedra represented single dbm reduced minimal canonical form jx algorithm 
non convex polyhedron union convex polyhedra delta delta delta represented non canonical way list dbms polyhedron semantic operations polyhedra implemented syntactic dbm transformations daw tri 
interesting convex polyhedra admit memory efficient representation quadratic number clocks operations cubic number clocks 
non convex polyhedra expensive exponential worst case time space complexity 
non convex polyhedra indispensable example algorithms involve unions 
manage convex polyhedra possible 
particular reachability analyses section performed convex polyhedra 
non convex polyhedra temporarily instance check inclusion convex polyhedron union convex polyhedra section 
timed automata sequel labels denotes finite set labels 
timed automaton ta acd hnsy tuple invar finite set clocks 
finite set discrete states 
initial discrete state 
finite set edges form 
source target discrete states 
labels label 
conjunction atomic constraints defining convex polyhedron called guard set clocks reset crossing edge 
invar function associating discrete state convex polyhedron called invariant edge write source target guard label reset respectively 
discrete state write resp 
set edges form resp 

assume guard invar 
max defined maximum max guard invariant states 
state pair location invar valuation satisfying invariant initial state 
states equivalent equivalent 
close fyg fyg fig 

polyhedra fx yg operations 
transitions 
consider state 
write ffi ffi 
timed transition form ffi ffi ffi ffi invar 
ffi called ffi successor edge discrete transition respect form reset 
called successor write ffi ffi discrete transition ffi discrete transition ffi timed transition 
runs 
run starting state finite infinite sequence ae ffi ffi ffi ffi delta delta delta ffi ffi successor successor ffi th point ae denoted ae defined 
waiting delay ae point denoted delay ae defined ffi states ae run spends time delay ae called transient states 
elapsed time point denoted time ae defined sum sigma delay ae 
total elapsed time ae denoted time ae defined limit sequence time ae sequence converges 
state reachable exists finite run ffi delta delta delta ffi ffi initial state reach set reachable states 
ta model differs acd points invariants second permit transient states 
invariants useful specifying urgency actions especially context ta executing parallel 
transient states useful modeling sequences actions take negligible amount time 
model different hnsy semantics runs implicit requirement discrete transitions taken infinitely hnsy permit executions ta stays forever discrete state :10.1.1.26.7422
definition general permits distinguish cases event occurs eventually know event may occur 
model case having edge labeled going discrete state invariant true 
model case adding dummy self loop edge state 
definition hnsy case modeled true invariant implies exists infinite run staying forever corresponding state :10.1.1.26.7422
parallel composition ta 
system usually divided parts indispensable able describe systems compositionally set components execute parallel communicate certain way 
adopt usual model parallelism ta synchronous passage time components interleaving discrete actions 
communication modeled action synchronization 
precisely consider ta invar 
labels set labels local labels 
edges define composite edges labels labels synchronization yields edge ke def viewed polyhedra intersection defined 
labels labels interleaving yields edges 
def ke def parallel composition denoted ka defined ta theta invar invar invar invar set edges contains composite edges form ke ke automata synchronize common labels interleave local labels 
requirement progress timed systems section define formally requirements discrete time progress notions deadlock freedom respectively 
give sufficient necessary conditions ensure deadlock freedom model ta 
conditions static take account discrete structure ta reachable state space presence timing constraints 
conditions necessary untimed behavior ta satisfy conditions valid timing constraints considered 
discrete progress discrete progress captured notion deadlocks 
deadlocks 
state ta deadlock delay ffi edge ffi deadlock free reachable states deadlock 
characterize deadlock freedom local condition reachable states 
discrete state define free def guard gamma reset invar target delta intuitively free contains valuations state deadlock 
lemma follows definitions 
lemma 
deadlock free iff reach free 
static sufficient condition deadlock freedom 
characterization static sufficient condition deadlock freedom lemma 
lemma 
deadlock free discrete state condition holds gamma guard reset delta invar free note condition compositional ta satisfy condition parallel composition 
useful checked syntactic parallel product set ta usually smaller semantic graph contains clock information graph defined section 
time progress zeno runs 
consider infinite run ae time ae exists time ae run called zeno corresponds pathological situation violates time progress requirements 
example consider ta shown 
run ae 

delta delta delta time ae zeno 
fact run transitions zeno 
fig 

ta left strongly non zeno ta right 

states violating time progress requirement 
formally state ta infinite runs starting zeno 
free reachable states 
notice deadlock necessarily reverse 
example ta deadlock free states bound stay forever transitions 
hand edge missing states deadlocks infinite runs starting 
lemma characterizing freedom ta inspired hnsy :10.1.1.26.7422
lemma 
free iff reach exists run ae starting point ae time ae 
strongly non zeno ta 
consider ta structural loop sequence distinct edges delta delta delta target source addition modulo 
called strongly non zeno structural loop exists clock 
reset step reset 
bounded step guard false 
intuitively means unit time elapses loop example ta strongly non zeno case guards missing 
strong non interesting dispenses burden ensuring time progress 
nice characteristic strong non preserved parallel composition efficiently checked large systems 
lemma 
strongly non zeno infinite run nonzeno 

strongly non zeno aka lemma provides static sufficient condition freedom 
part lemma strongly non zeno ta free 
part lemma test strong non done compositional way 
definition test strong non static 

modeling system case components untimed modeled simple finite state machines clocks 
components considered strongly non zeno convention parallel composition rest system affect strong non global system 
meaning different variants 
finish section summarizing meaning notions related time progress introduced 
deadlocks correspond modeling errors ta assumed capture behavior real system correctly act infinitely block time 
ta strongly non zeno model systems unbounded number events occur finite amount time 
example ta perform unbounded number transitions time units 
systems useful instance modeling sender emit messages arbitrarily fast 
strongly non zeno ta model systems bounded number events occur finite amount time 
example ta perform transitions time units 
systems practice strongly non zeno 
fly deadlock detection sections algorithms deadlock detection 
algorithms fly return answer soon possible necessarily building state space 
algorithms symbolic reachability dt state space represented graph nodes sets states symbolic states edges correspond symbolic successor operations 
simplicity algorithms input single ta straightforward extend take input parallel composition delta delta delta ka number ta generate fly symbolic state space composite automaton 
algorithm deadlock detection uses simple depth search dfs generate symbolic graph check time visited symbolic state state deadlock 
algorithm detection sophisticated 
lemma uses nested reachability outer level dfs performed generate symbolic graph visited symbolic state inner level reachability performed compute states time elapse time unit 
states satisfy property states 
symbolic reachability consider ta discrete states clocks symbolic state set states ig polyhedron 
simplicity denote 
convex called zone 
non convex write convex convex zone edges natural constant max define successor predecessor operations post def close gamma delta pre def gamma delta intuitively post contains states equivalents reached state transition letting time pass pre contains states reach state transition letting time pass 
operations preserve convexity polyhedra result post pre zone 
operations algorithm symbolic reachability shown 
algorithm takes input initial zone set target zones returns output zone states reach state zone state reach state zone visit set currently visited nodes initially empty 
algorithm works exploring fly symbolic paths sequences form delta delta delta gamma gamma post 
zone path intersects target zones path pre stabilized backward way compute states lead target zone path 
operation yields ae ffi ffi delta delta delta ffi gamma gamma important notice states reach included case states reach path 
hand target zone hit guaranteed non empty properties post operator tri 
termination algorithm ensured lemma 
reach return visit visit fs post continue visit continue reach return pre return fig 

symbolic reachability 
deadlock detection procedure reach directly deadlock detection 
ta invar suffices define set target states follows convex gamma invar free delta lemma deadlock free iff reach zero returns 
fact test line algorithm optimized follows 
definition visited zone invar testing gamma invar free delta equivalent testing free 
worth noticing case deadlock algorithm extended straightforward way provide diagnostics showing deadlock reached 
detection complete symbolic reachability 
mentioned reachability procedure reach complete sense return greatest subset reach non empty subset 
hand algorithm sound sense returns empty subset states reach find develop complete reachability procedure called partial reachability procedure reach 
shown 
takes input initial zone set target zones returns greatest subset state reach necessarily convex represented set zones fs reach fsg convex return fig 

complete symbolic reachability 
starting algorithm computes reach subset reaching target zones 
symbolic state ns empty states reach target zones algorithm substitutes repeats procedure 
zone convex 
reach performs reachability zones split number convex polyhedra convex operator 
reach called resulting zones 
nested reachability detection 
detect ta nested combination partial reachability procedure complete reachability procedure 
outer level reach applied generate reachable zones 
zone inner level complete reachability performed extended ta uses auxiliary clock find states time elapse time unit 
precisely consider ta invar ta fzg invar set zones qg 
return visit visit fsg post continue visit continue return return fig 

nested reachability detection 
algorithm detection shown 
outer reachability procedure identical procedure reach checking intersection currently visited zone set target zones checks states time unit elapse 
called initial zone target zones returns set zones reach zone non empty contains 
notice outer reachability performed inner reachability performed lemma free iff zero returns 
static dynamic techniques ensuring progress system modeled parallel composition set timed automata 
focus practicality 
case deadlocks static technique interesting syntactic parallel product system small number reachable discrete states smaller number possible discrete states product 
dynamic technique preferable 
case static technique test strong non efficient applied compositionally 
complete technique useful practice realistic systems strongly non zeno 
techniques currently implemented real time verification tool kronos 
tool uses forward symbolic reachability analysis check safety properties invariance bounded response 
experiments proven size symbolic reachability graph quite small practice see instance dt 
dynamic detection techniques graph expected efficient practice 
acd alur courcoubetis dill 
model checking dense real time 
information computation 
bowman 
katoen 
automatic verification lip synchronisation algorithm uppaal 
rd international workshop formal methods industrial critical systems 
bs sifakis 
relating time progress deadlines hybrid systems 
international workshop hart pages grenoble france march 
lecture notes computer science 
bst sifakis tripakis 
modeling urgency timed systems 
compositionality lncs 
appear 
daw 
ethodes analyse de syst emes es de la th eorie la 
phd thesis institut national polytechnique de grenoble 
french 
dil dill 
timing assumptions verification finite state concurrent systems 
sifakis editor automatic verification methods finite state systems lecture notes computer science pages 
springer verlag 
dt tripakis 
model checking real time reachability properties abstractions 
tools algorithms construction analysis systems lisbon portugal volume lncs 
springer verlag 
hnsy henzinger nicollin sifakis yovine :10.1.1.26.7422
symbolic model checking real time systems 
information computation 
olivero 
mod analyse de syst emes es 
phd thesis institut national polytechnique de grenoble 
french 
sy sifakis yovine 
compositional specification timed systems 
th annual symposium theoretical aspects computer science stacs pages grenoble france february 
lecture notes computer science spinger verlag 
tri tripakis 
formal analysis timed systems practice 
phd thesis universit joseph de grenoble 
published 
yovine 
ethodes pour la de syst emes es 
phd thesis institut national polytechnique de grenoble 
french 
