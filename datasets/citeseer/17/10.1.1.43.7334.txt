genetic system programming christian jacob chair programming languages department computer science university erlangen martens str 
erlangen germany email jacob informatik uni erlangen de 
genetic system programming glp paradigm evolutionary creation development parallel rewrite systems lindenmayer systems provide commonly formalism describe developmental processes natural organisms 
system paradigm extended purpose describing time context dependent formation formal data structures representing rewrite rules computer programs expressions 
glp methods gleaned nature combined simulated evolution simulated structure formation 
prototypical glp system implementation described 
controlled evolution complex structures exemplified development tree structures generated movement turtle 
systems development organism may 
considered execution developmental program egg 
higher organisms common dna components force consider developing organisms dynamic collections appropriately programmed finite automata 
central task developmental biology discover underlying algorithm course development 
lindenmayer grzegorz rozenberg morphogenesis formation structures nature result complex growth processes 
central idea systems structure formation interpreted execution programs rewrite rules 
nature blue print organism rule systems tell build combine parts form complete functioning organism 
programs highly parametrized parameters set environment development interaction processes take place 
parallel rewrite systems systems provide useful formal model description developmental processes organisms 
give rudimentary definitions context free systems stacking capability 
general difficult create system simulating special growth process introduce evolutionary method glp supporting system inference 
dol systems context free systems simplest type systems 
formally system defined triple alphabet endomorphism defined referred axiom element defined production map explicit mapping symbol identity mapping assumed 
deterministic system production rule symbol word sequence generated defined denotes fold iteration string obtained preceding string applying production rules symbols string simultaneously language defined turtle interpretation bracketed parametric dol systems consider system generates sequence strings axiom iteration iteration string sequences describe fractal growth artificial structure 
structure formation process easily visualized define interpretation symbols 
common interpretation symbols control movement artificial object usually known turtle draws lines way dimensional space move forward stepsize move backward stepsize rotate left angle rotate right angle 
stands deterministic context 
rotate pitch yaw pitch angle pitch back angle yaw left angle yaw right angle example system quietly assumed fixed rotation angle stepsize include parameters strings done order keep strings small 
modular substrings marked bracket symbols 
string form strings interpreted sequence substring interpreted starting interpret turtle reset prior position orientation interpretation allows formation tree structures branches visualization iterated turtle movement example shows 
fig 

artificial structure generated dol system described 
turtle oriented upward origin situated big spot center 
systems genetic programming synthesis systems inference problem systems involves finding proper axiom rewrite rules structure growth process sequence structures 
development system particular biological species usually perform steps 
biological object 
informal rules definition 
definition system axiom rules 
computer simulation interpretation generated strings 
translation graphical output 
comparison artificial object behavior real object 
correction system repetition steps necessary 
shows system synthesis difficult tedious process 
methods hand automatic generation systems prusinkiewicz points random modification production rules iteration iteration iteration iteration generally gives little insight relationship systems figures generate 
algorithms reported literature limited practical value complex structure formation 
obviously evolutionary approach sensible points 
need support system inference evolutionary basis functions generate possibly codings systems subject certain constraints alphabet iterations context sensitivity parameters evaluation functions return fitness measure interpreted system modification selection functions enable interactive system editing automatic control evolutionary techniques 
sections discuss preliminary ideas evolutionary techniques breeding populations systems describe growth processes interpreted domain evaluated fitness measure respect target growth process 
extended gp glp briefly describe kind evolutionary algorithm system system development coding 
similar genetic programming gp paradigm introduced koza uses lisp expressions structures undergoing adaptation hierarchical typed expressions terms 
main differences common gp paradigm higher order building blocks patterns expression generation modification 
coarse structures genotype expressions generated combining macro patterns taken predefined pattern pool see example patterns centered circle fig 

combinable subexpressions rely set function symbols arity range specified 
expression pattern pool serves possibly partial descriptions organism genotypes problem dependent environment 
expression patterns expression generation parametrized possibly constrained highlevel data structures serve building blocks 
patterns associated set attributes number predicates constraining set subexpressions plugged 
attribute pattern rank serves kind fitness measure patterns compete selected subexpressions expression generation process 
concerns patterns root symbol case recursive non recursive version stack pattern different function symbols alternatives fig 


alternative grammar approach see 
excellent overview current extensions applications gp 
similar ranks control pattern selection genetic operators 
specialized meta operators rank adjustment take care patterns enhance pool patterns focus increased decreased ranks adjustment 
fig 

pool expression patterns 
coarse structure system description centered circle built depicted expression patterns 
stand single expression non empty sequence expressions head respectively 
denotes alternatives 
pattern ranks depicted small circles 
expression generation evolution starts random generation initial population expressions 
expression constructed start pattern recursive manner combining expressions expression pattern pool respecting pattern constraints discussed previous section 
generation system expression result generation steps lsystem axiom lsystem axiom stack rr 
lsystem axiom stack rr lsystem axiom stack rr lrule lrule lrule lsystem axiom stack rr lrule left right lrule lrule 

represent formal parameters referring expression expressions head respectively 
lsystem axiom lrule left right stack yl yr rl rr stack lrule real real rl integer yr integer yl integer rr integer axiom yl yr rl rr stack left 
rr right yl yr rl rr stack lsystem axiom 
lrule left right stack stack 
rl lrule 
stack yl yr rl rr lsystem axiom stack rr lrule left right stack rl stack lrule left pb right stack stack rr lrule 
expressions decoded parametrized bracketed system form rr rl 
pb 
rr interpreted turtle demonstrated 
evaluation reproduction expressions population system genotypes consists symbolic expressions data structures head symbols denote data types decoding interpretation evaluation functions easily definable pattern matching mechanisms 
enables simultaneous different kinds system genotypes merging context free context sensitive systems population introducing new context dependent data type interpretation functions 
fitnesses derived system interpretation functions system genotype receives associated fitness value 
order build generation expressions genetic operator chosen operator pool depending operator rank operator performs mapping dimensional genotype vector set genotype expressions 
individual genotypes selected fitness values fitness proportionate rank selection schemes 
resulting possibly modified expressions entered generation 
selection genetic operators terminates new population filled maximum size 
variations expressions size shape expressions change dynamically evolution process genetic operators 
table gives overview operators currently 
introduce alternate selection scheme subexpressions arguments genetic operators possibly constrained patterns provide templates extracting subexpressions modification recombination 
enables operators applied predefined expression contexts context may vary course evolution process 
definition new patterns contexts meta operators te ec necessary 
similar pattern pool expression generation pattern pool genetic operator pattern associated rank number controls selec tion competing patterns 
explain ideas detail mutation crossover operators rely templates defined table 
pattern mutation perform pattern mutation individual expression mutation template selected pattern pool pattern ranks 
suppose template selected predicate demanding arguments term 
subexpression head pattern operator short explanation 
mutation mu replace subterms expression meeting template constraints newly generated equivalent subexpressions 
crossover exchange subexpressions meeting template constraints expressions 
shrink sh delete subexpression 
duplication du duplicate subexpression 
permutation pe permute expression arguments randomly left right shift reversion 
template extr 
te extract template expression 
successful templates inserted pattern pools 
encapsulation ec replace subexpression single symbol 
tab 
gp operators collection 
operand selection operators rely operator templates 
gp operator rank templates selection operator mutation mu mu mu axiom stack restrict mutation expressions head axiom stack expression complying predicate argument 
restrict mutation expressions head 
lrule left right restrict mutation expressions head left appearing lrule expression right term right context 
crossover lrule left right stack restrict crossover lrule expressions contain stack expression right term arguments 
tab 
pattern pool templates gp operators replaced newly generated term argument expression resulting modified individual genotype 
fig 

pattern mutation system genotype pattern crossover pattern crossover recombination operator enables exchange structures type individuals 
expressions top crossover template chosen pattern pool ranking scheme 
subexpressions head meeting restrictions template selected randomly expression exchanged individuals resulting modified expressions bottom 
fig 

expression recombination pattern crossover lsystem axiom stack rr 
lsystem axiom stack stack 
rl 
lsystem axiom 
lrule left right stack stack 
rl lrule 
lsystem axiom lrule left right pb stack yl lrule 
parent parent lsystem axiom 
lrule left right stack stack 
rl lrule 
lsystem axiom 
lrule left right pb stack yl lrule 
child child virtual genetic system laboratory order test support generation evolution expressions extended genetic programming paradigm designing virtual glp laboratory part genetic programming environment 
examples give brief impression surprisingly easy formation complex structures small populations individuals generation short period generations 
simple problem solved generate systems form complex structure number branches majority tree points leaves situated outside inner cube outer cube boundaries regard horizontal directions 
number system iterations fixed 
axiom rule expressions evolved 
fitness value individual system genotype maximized defined portion leaf coordinates lying specified boundaries leave having coordinates form figures show collection interpreted systems derived single genotype applying crossover mutation generations 
phenotypes develop densely packed structures broad branching 
fig 

collection system turtle interpretations derived mutants genotype system individual upper left corner 
depicted numbers refer phenotype fitness 
gen ia sel 


gen gen gen gen gen ia sel gen gen research demonstrated parallel rewrite systems designed evolution processes 
course limited rudimentary description genetic programming techniques support design hierarchical program data structures 
extensions glp gp laboratory currently developed implemented respect areas fitness functions measure similarities growth processes order infer systems sequences target structures including growth functions fitness evaluation extending set interpretation functions extension context sensitive stochastic table systems 
important area research genetic operators support hierarchical modularized expression evolution 
variant described glp system design artificial neural networks 

grammer genetic algorithm rawlins ed foundations genetic algorithms san mateo 

jacob evolution neural net architectures hierarchical grammar genetic system international conference neural networks genetic algorithms innsbruck austria 

jacob typed expressions evolution artificial nervous systems appear icann international conference artificial neural networks sorrento italy 

kinnear advances genetic programming mit press london 

koza genetic programming programming computers means natural selection mit press london 

lindenmayer rozenberg 
eds automata languages development north holland 

lindenmayer mathematical models cellular interaction development parts ii journal theoretical biology pp 


saupe chaos fractals new frontiers science springer verlag 

prusinkiewicz lindenmayer algorithmic beauty plants springerverlag pp 
ff 

gp laboratory implemented mathematica 
currently user interface realized mathematica notebooks extended nextstep graphical user interface mathematica trademark wolfram research nextstep trademark computers 
alternative neural net design expression evolution system described 
