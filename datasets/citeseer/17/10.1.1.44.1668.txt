efficient representation validation proofs george necula peter lee school computer science carnegie mellon university pittsburgh pennsylvania cs cmu edu presents logical framework derived edinburgh logical framework lf obtain compact representations proofs efficient proof checkers 
essential ingredients application manipulates proofs class objects proof carrying code system proofs allow easy validation properties safety critical untrusted code 
framework call lf inherits lf capability encode various logics natural way 
addition lf framework allows proof representations high degree redundancy characteristic lf representations 
missing parts lf proof representations reconstructed proof checking efficient reconstruction algorithm 
describe algorithm strip unnecessary parts lf representation proof 
experimental data gathered context proof carrying code system shows savings obtained lf lf difference practically useless proofs megabytes manageable proofs tens kilobytes 
problem automated theorem proving received considerable attention scientific community cases directed improving capabilities practicality proof search procedures 
research sponsored part advanced research projects agency title fox project advanced languages systems software arpa order 
issued esc ens contract 

views contained document authors interpreted representing official policies expressed implied advanced research projects agency government 
submitted lics 
consideration generation manipulation resulting proofs firstclass objects 
theorem prover generates explicit proof object successfully proved predicate enables user verify validity subject claim checking proof object 
effectively eliminates need trust soundness theorem prover small expense having trust simpler proof checker 
generated proofs proof checker great software engineering benefit lead timely discovery soundness bugs introduced development maintenance theorem prover 
direct explicit proof objects context proof carrying code pcc technique safe execution untrusted code 
pcc requires code producer attach code formal proof code meets safety specification published advance code receiver 
code receiver easily verify code respect specification checking validity attached proof 
proof carrying code approach shown useful safety critical systems extended upgraded code trusted unknown origin high risks involved 
published case studies discuss uses pcc extensible operating systems safe interaction components written safe languages native code systems agents 
explicit proof object accompanies untrusted code part proof carrying code key element enables enforcement wide variety safety policies ranging simple memory safety type safety resource usage bounds performance penalties incurred approaches interpretation run time checking 
proof carrying code system application involving explicit manipulation proofs utmost importance proof representation compact proof checking efficient 
logical framework derived edinburgh logical framework associated proof representation proof checking algorithms desirable properties ffl framework encode judgments derivations wide variety logics including order higher order logics 
ffl proof checker performs directed pass inspection proof object having perform search 
leads simple implementation proof easy trust install existing extensible systems 
ffl unique implementation proof checker easily configured logics encoded framework 
allows code receiver implementation checker enforcing unrelated safety policies 
ffl proof representation detailed compact 
chose edinburgh logical framework lf starting point quest efficient proof manipulation algorithms scores high desirable properties listed 
respect viewed testimony usefulness lf practical system applications proof carrying code 
lf completely appropriate purposes representation proofs unnecessarily large due high degree redundancy 
address issue extended lf handle implicit subterms extended lf type checking algorithm synthesize missing subterms 
order keep reconstruction algorithm simple particular avoid higher order unification need postpone constraints impose syntactic restrictions proof subterms missing 
restrictions forced general retain small amounts redundant information proof representations 
experience shows case representation level proofs proofs theorems deductive systems current scope proof carrying code 
resulting framework call lf observe experiments pcc proof generating theorem prover order logic reductions orders magnitude size proofs time required proof checking factors increasing size proofs 
organized follows 
section classical encoding predicates proofs edinburgh logical framework 
section introduce lf type system 
lf type system lend directly deterministic type checking show section lf reconstruction judgment shown sound respect lf typing 
continue representation algorithms convert lf representations lf representations 
conclude implementation details section presentation experimental data supporting claim lf representation efficient lf representation 
reasons space omit interesting details expanded version 
edinburgh logical framework edinburgh logical framework referred lf introduced harper honsell plotkin metalanguage high level specification logics 
lf provides natural support management binding operators hypothetical schematic judgments lf bound variables 
crucial factor succinct formalization proofs 
lf type theory language entities levels objects types kinds syntax shown kinds type pix types pix objects notation pix free order define logic lf define lf signature sigma contains declarations set constants corresponding syntactic formula constructors proof rules 
fragment signature defines order predicate logic shown 
top section contains declarations type constructors corresponding respectively individuals predicates type family pf indexed predicates 
representation predicate pf type valid proofs rest contains declarations syntactic constructors followed constants corresponding proof rules order logic 
note higher order features lf succinct representation hypothetical parametric type type pf type true imp truei pf true andi pip pir pf pf pf andel pip pir pf pf impi pip pir pf pf pf imp alli pip pix pf pf alle pip pie pf pf fragment lf signature corresponding order predicate logic 
judgments characterize implication elimination impi universal quantifier alli elimination alle rules 
write ppq denote lf representation predicate example lf representation proof show representation proof predicate oe predicate impi ppq ppq ppq pf ppq andi ppq ppq lf representation proof implication followed conjunction predicate oe 
important benefit lf representing proofs lf type checking verify proof valid proves predicate 
lf type checking judgment written gamma lf gamma type environment free variables definition lf type checking proof adequacy lf type checking proof validation order higher order logics 
example validation proof representation shown done finding derivation judgment delta lf pf imp ppq ppq ppq lf typing judgment typing judgments discussed depend signature sigma henceforth omitted order simplify notation 
owing simplicity lf lf type system implementation type checker simple easy trust 
furthermore dependencies particular object logic segregated signature implementation type checker reused directly proof checking various firstorder higher order logics 
logic dependent component proof checker signature usually easy verify visual inspection 
unfortunately mentioned advantages lf representation proofs come high price 
typical lf representation proof large due significant amount redundancy 
fact seen proof representation shown copies opposed predicate proved 
effect redundancy observed practice increases non linearly size proofs 
consider example representation proof way conjunction representation contains redundant copies ppq occurrences andi 
redundancy representation space problem leads inefficient proof checking redundant copies type checked checked equivalence copies predicate 
proof representation checking framework remainder observation possible retain skeleton lf representation proof modified lf type checking algorithm reconstruct fly missing parts 
resulting implicit lf representation inherits advantages lf representation small logic independent implementation proof checker disadvantages large proof sizes slow proof checking 
implicit lf implicit lf representation proof similar corresponding lf representation exception select parts representation missing 
expository purposes positions representation subterms missing marked placeholders written exemplify placeholders show lf representation proof shown 
major difficulty dealing placeholders type checking 
particular type checking algorithm able reconstruct fly missing parts proof 
refer lf type checking algorithm reconstruction algorithm 
step establishing reconstruction algorithm lf define lf type system objects sigma gamma gamma gamma gamma fi pf gamma gamma gamma pix gamma gamma pix gamma pix gamma pf gamma gamma pix gamma pf gamma equivalence fi fi lf type system impi andi lf representation proof oe typing judgment gamma definition shown 
lf typing rules similar lf typing rules differences ability type implicitly typed abstractions applications argument implicit 
notation pf means placeholder free contain placeholders similarly write pf gamma denote types contained type environment gamma contain placeholders 
decided restrict lf typing situations types involved contain placeholders 
affect representation proofs simplifies various proofs correctness lf lf typing rules basis implementation reconstruction choice instantiation placeholders completely determined context 
lf typing system adequate basis arguing soundness reconstruction algorithm 
property established theorem guarantees existence typed placeholder free object implicit object typed lf typing discipline 
theorem soundness lf typing 
gamma pf gamma pf exists gamma lf proof theorem induction structure lf typing derivation 
theorem keystone proof adequacy proof checking reconstruction algorithms sound respect lf reconstruction algorithm reconstruction algorithm performs functions lf type checking algorithm finds typed instantiations placeholders occur objects 
ease understanding algorithm sketch operation implicit proof object 
reconstruction goal case verify implicit proof representation type pf imp ppq ppq ppq goal type declared type constant impi head top level application algorithm collects constraints ppq ppq ppq andi pf ppq pf ppq ppq constraints lead substitutes guaranteed construction welltyped representation predicates 
constraint rule abstraction obtain system constraints pf ppq pf ppq andi pf ppq ppq process continues constraints generated 
note system constraints consists typing constraints unification constraints turn simple rigid rigid flex rigid kinds solved eagerly 
give precise description reconstruction algorithm form mutually recursive judgments directly implementable 
purpose introduce notation 
letter range members set placeholder variables subject unification opposed lf variables 
symbol delta denote type environment placeholder variables gamma arbitrary type environments 
case lf object contain placeholder variables write 
extend notation write gamma fv mean types associated gamma free variables contain placeholder variables 
lf typing judgments types contain placeholders contain placeholder variables 
main operation placeholder variables substitution lf objects 
write psi denote result applying substitution psi placeholder variables write dom psi refer set placeholder variables psi defined 
write denote substitution obtained psi restricting set placeholder variables list constraints consists typing constraints form unification constraint form definitions judgments describe reconstruction algorithm shown 
notation judgment uses double arrow separate inputs left outputs right procedure implements algorithmic interpretation judgment 
rest section briefly discuss judgment 
reconstruction gamma psi 
judgment object contain placeholders placeholder variables type type environment contain placeholders 
main judgment checks implicit object type returns substitution placeholder variables abstraction implicit type bound variable recovered dependent function type rule abs 
note case require reconstruction abstraction body yield substitution 
restriction simplifies unification process worry substitution containing bound variable 
abstraction rule atom collect set constraints compute type possibly containing set placeholder variables declared delta 
solve constraints return resulting substitution psi 
condition dom delta dom psi atom rule requires placeholder variables introduced constraint collection instantiated local constraint solving 
respect algorithm powerful elf postpone unsolved constraints 
restriction limit power algorithm reconstructing implicit proof representations eliminating need machinery managing postponed constraints 
note reconstruction algorithm check explicitly returned substitution welltyped guaranteed true design constraint solving 
constraint collection gamma delta 
judgment computes objects abstractions set constraints type solution type environment delta declares placeholder variables introduced constraint collection 
placeholder variables appear object scanned find application head type read signature rule cc ct type environment rule cc var explicit application argument typing constraint added rule cc app implicit argument new placeholder variable introduced environment delta rule cc 
note typing constraints introduced explicit arguments implicit arguments guaranteed reconstructed objects appropriate type 
side conditions rule cc app ensure types contain placeholders 
constraint solving gamma psi 
judgment described rule kind constraint rules sc typ sc unif reordering rule allows implementation pick desired order solving constraints 
implementation employ sc ord rule solving constraints order 
unification psi psi 
objects types unified contain placeholder variables placeholders 
result unification substitution objects placeholder variables 
order avoid complications higherorder unification unify placeholder variable head application 
restriction major effects usability reconstruction order logic proofs 
order express restriction distinguish unification application head atomic unification cases normal unification 
normal unification produce substitution placeholder variable 
costly occurs check rule nu inst avoided instances see section 
note rule nu abs sufficient unifying abstractions objects types kept long normal form 
judgments described allow proofs fi normal form produced provers 
system easily extended deal fi redices useful encoding proofs unnamed lemmas 
main reconstruction gamma delta gamma pix delta abs gamma delta gamma delta psi dom delta dom psi gamma psi fi fi dom gamma atom abstraction collecting constraints gamma delta delta sigma cc ct gamma delta delta gamma cc var gamma delta pix fv oe pf gamma fv gamma delta cc app gamma delta pix gamma delta cc new placeholder variable solving constraints gamma delta delta sc gamma psi gamma psi sc ord gamma psi psi gamma psi psi gamma psi ffi psi sc typ psi psi gamma psi psi gamma psi ffi psi sc unif atomic unification delta au ct delta au var psi psi psi psi psi ffi psi au app nn xn psi xn nn psi au beta normal unification delta delta nu abs psi psi nu atom fv nu inst judgments constitute lf reconstruction algorithm concludes presentation reconstruction algorithm 
interesting note object reconstructed contain placeholders lf object reconstruction algorithm amount lf type checking 
detailed discussion including complete proofs soundness refer interested reader 
mention main soundness result theorem states existence derivation reconstruction judgment equivalently successful run reconstruction algorithm guarantees existence lf typing turn theorem guarantees existence lf typing 
sequence theorems allows reconstruction algorithm checking compact representation proofs preserving adequacy results known edinburgh logical framework 
theorem soundness proof reconstruction 
lf object lf type respectively pf delta type delta delta delta representation algorithm reconstruction judgment section accept implicit forms typed lf object 
useful define algorithm erase lf representation proof redundant subterms possible ensuring resulting implicit object accepted reconstruction 
proof carrying code environment representation algorithm applied proof sent receiving system order reduce burden communication network 
designed implemented representation algorithms varying degrees complexity effectiveness 
space reasons determined experimentally choice practice 
representation algorithm choice attempt find maximum number redundant subterms proof representation statically defines statically representation recipes constant functional type defined signature 
representation recipes specify arguments application constant safely eliminated 
example representation recipe constant andi says arguments left implicit 
alleviate inherent loss effectiveness due context insensitive representation algorithm separate representation recipes constant dynamically pick appropriate context 
representation recipe ary constant composed sequence containing recipe characters character corresponding argument position application denote recipes corresponding constant checking recipe inference recipe 
algorithm described uses recipe characters denote implicit argument denote explicit arguments checking inference recipes respectively recursively 
refer checking inference modes time shall letter stand components representation algorithm 
describe actual representation algorithm applies representation recipes show compute recipes 
main representation function described judgments compute representation mode fc ig compute representation application head recipe remaining arguments 
order represent application constant get appropriate recipe depending kind representation 
drop arguments corresponding recipe characters represent recursively arguments corresponding characters mode specified abstractions implicitly typed application variable represented arguments explicit 
reader verify applying representation function recipes shown lf proof representation obtain implicit representation 
core representation algorithm computation representation recipes constant type declared signature sigma 
informally representation recipes predict behavior reconstruction algorithm analyzing application head situation delta representation algorithm 
described judgment gamma cm mn psi situations distinguished 
checking situation contain placeholder variables recover implicit arguments situation occurs example top level know predicate proof supposed prove 
situation type application contain placeholder variables case conservatively assume implicit arguments recovered 
situation referred inference 
situation predict type constant typing constraints solved right left arguments implicit explicit argument checking inference reconstruction occur 
order describe precisely computation representation recipes define function unif computes set free variables guaranteed instantiated successful unification object definition unif follows unification 
complement unif denoted normally consists variables occur functor position notable cases definition unif shown unif unif fxg head constant unif unif unif head variable unif consider application constant type sigma pix pix type abstraction 
due right left order solving constraints operation unify type unification succeed necessary arguments corresponding variables explicit 
checking situation contain placeholder variables unification finds instantiations arguments corresponding variables unif 
inference situation unification guaranteed find instantiation 
typing constraints arguments processed reverse order 
fc ig set variables fx xn guaranteed instantiated processing constraint corresponding similarly set variables required explicit unification fail processing constraints corresponding sets computed starting follows unif unif ne ni definitions define representation recipe recipe characters defined follows fv note argument corresponding implicit inferred constraints corresponding xn appear functor position 

argument explicit represented recursively checking mode variables occurring type required explicit inferred previous constraints 
reader verify algorithm computing representation recipes generates results shown 
interested reader find representation algorithms simpler complex 
representation algorithms yield implicit objects suitable reconstruction algorithm discussed section 
show proofs correctness representation algorithm 
case correctness representation algorithm critical reconstruction result representation algorithm tested reconstruction 
constant andi andel impi alle fragment representation recipes order logic 
implementation details section discuss aspects actual implementation proof representation proof checking algorithms specifically binary encoding lf objects occurs check optimization leads significant improvements reconstruction time 
detailed presentation implementation 
implementation lf reconstruction explicit substitutions debruijn indices 
choice simplifies considerably implementation substitution unification 
rest section missing extended due space constraints 
experimental results representation algorithm section reconstruction algorithm shown section implemented part proof carrying code system 
system order theorem prover prove memory safety type safety various mobile agents written assembly language 
proofs emitted prover converted implicit form representation algorithm sent code receiver checked reconstruction algorithm 
section results experimental comparisons lf lf representation proofs terms proof size proof checking time 
purpose length external representation proofs proof size 
lf lf representations measure time required proof reconstruction average runs reconstruction algorithm pentium mhz machine 
consider reconstruction time lf representation proof indicative lf type checking time 
show representative sample experimental data collected 
note savings proof size proof checking time due lf representation increase nonlinearly size experiment proof size checking time lf lfi lf lfi unpack delta simplex delta sharpen qsort kmp bcopy effect lf representation proof size proof checking time 
proof sizes measured bytes external representation checking time measured milliseconds pentium mhz 
proof 
space savings significant larger proofs difference practically useless proofs megabytes manageable proofs tens kilobytes 
similar reduction orders magnitude observed proof checking time 
order better understand dependency lf proof size checking time corresponding lf values fitted polynomial ax experimental data squares method 
fitting results having correlation shown theta theta results close expected improvement suggested way example discussed section 
practice exponent larger due representation cost proof rules appear proof eliminated 
measured effect occurs check optimization described section reduce reconstruction time implicit proofs average 
initially cost occurs check reconstruction time optimization reduces eliminating cost occurs checks 
results consistent 
expected occurs check optimization effect reconstruction applied lf proofs placeholders 
related problem redundancy representation proofs addressed purpose simplifying user interface theorem provers proof assistants 
miller suggests extreme approach proof object records substitutions quantifiers relying decidability tautology resulting matrix 
leads compact proof representations expense np complete tautology checking problem 
furthermore presence interpreted function symbols arithmetic case pcc proofs tautology checking problem easily undecidable 
argument synthesis term reconstruction algorithms implemented lego coq proof assistants effective algorithm sense fewer proof subterms omitted proof representation redundancy tolerated 
address difficult problem representing proof predicate proves recovered 
algorithm able synthesize proof subterms information context predicate proof supposed prove 
implementation elf logic programming language lf contains reconstruction algorithm similar sense missing application arguments recovered type application inherited arguments arguments application synthesized arguments 
fact elf reconstruction algorithm powerful impose restriction terms missing proof 
achieve flexibility elf type reconstruction uses incomplete algorithm constraint solving 
proof checking algorithm characterized special efficient case elf reconstruction algorithm proof structure need search higher order unification reduced simple extension order unification respects bound variables constraints generated simple flex rigid form solved eagerly 
design language relies syntactic restrictions purpose eliminating need higher order unification type checking 
restrictions strict purposes prevent free higher order syntax representation predicates proofs requiring costly explicit implementations substitution 
framework representation techniques full lf language gain leverage substitution meta language restrictions imposed subterms missing representation 
distinguishing feature related discussed representation algorithms take regular lf representation proof eliminate subterms possible keeping resulting proof reconstruction capability proof checker 
experimental data supports claim lf representation order logic proofs substantial practical benefits 
describe logical framework lf extends edinburgh logical framework lf notion implicit objects incomplete lf objects 
implicit objects interesting missing parts easily reconstructed simple extension lf type checking algorithm requiring search higherorder unification complicated constraint solving 
define subset constructive manner presenting simple reconstruction algorithm syntax directed requires order unification 
subset lf accepted reconstruction algorithm particularly suited compact representation logical proofs 
addition reduced size proofs lf inherits advantages lf formalization proofs natural support hypothetical parametric judgments simple logic independent proof checker 
reconstruction algorithm show representation algorithm selectively erases subterms lf representation proof operation results orders magnitude reductions proof size proof checking time 
fully comprehend practical advantages lf representation proofs useful compare alternative special purpose representation 
consider example representation proofs trees internal nodes correspond uses proof rules 
proof rule retain proof tree minimal amount information minimize size proof representation 
proof checker implemented large case statement case manually specialized proof rule 
special purpose representation efficient terms proof sizes proof checking time requires large difficult maintain implementation 
example implementation changed modification logic proof rules 
experimented special purpose representation order logic proofs observed contain amount information corresponding lf proofs 
similarly process checking special purpose representation proofs involves amount terms number kind pattern matching unification operations lf reconstruction 
lf framework achieve efficiency special purpose representation general easier maintain implementation 
efficiency gains due lf added simplicity generality lf lf ideal representation framework practical applications manipulating proofs class objects required 
successfully tested framework backend theorem prover emits explicit proofs medium communicating program correctness proofs computer systems part proof carrying code 
frank pfenning introducing lf helpful comments earlier versions 
abadi cardelli curien evy 
explicit substitutions 
journal functional programming oct 
debruijn lambda calculus notation nameless dummies tool automatic formula manipulation 

mat 

dowek felty herbelin huet murthy parent werner coq proof assistant user guide 
version 
tech 
rep inria rocquencourt may 
elliott higher order unification dependent types 
rewriting techniques applications chapel hill north carolina apr dershowitz ed springer verlag lncs pp 

harper honsell plotkin framework defining logics 
journal association computing machinery jan 
luo pollack lego proof development system user manual 
tech 
rep ecs lfcs university edinburgh may 
michaylov pfenning empirical study runtime behavior higher order logic programs 
proceedings workshop prolog programming language philadelphia pennsylvania july miller ed university pennsylvania pp 

available technical report ms cis 
michaylov pfenning higher order logic programming constraint logic programming 
workshop principles practice constraint programming newport rhode island apr brown university pp 

miller logic programming language lambda abstraction function variables simple unification 
journal logic computation sept 
miller compact representation proofs 
studia logica 
necula proof carrying code 
th annual acm symposium principles programming languages jan acm pp 

necula lee safe kernel extensions run time checking 
second symposium operating systems design implementations oct usenix pp 

necula lee efficient representation validation logical proofs 
technical report cmu cs computer science department carnegie mellon university oct 
necula lee safe untrusted agents proof carrying code 
special issue mobile agent security jan vigna ed springer verlag lncs 
appear 
pfenning logic programming lf logical framework 
logical frameworks huet plotkin eds cambridge university press pp 

pfenning unification anti unification calculus constructions 
sixth annual ieee symposium logic computer science amsterdam netherlands july pp 

pfenning elf meta language deductive systems system description 
th international conference automated deduction nancy france june july bundy ed lnai springer verlag pp 

pollack implicit syntax 
informal proceedings workshop logical frameworks antibes may 
