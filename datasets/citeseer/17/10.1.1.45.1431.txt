interaction language typing system takeuchi kohei honda makoto kubo mt cs keio ac jp kohei mt cs keio ac jp kubo mt cs keio ac jp department computer science keio university ku yokohama japan small language typing system idea interaction important notions parallel distributed computing 
apart constructs parallel composition process creation pairs communication primitives notion session semantically atomic chain communication actions interleave chains freely high level abstraction interaction computing 
primitives enable programmers elegantly describe complex interactions processes rigorous type discipline similar ml 
language formal operational semantics type inference system regarding prove program typed typing system causes run time error due type inconsistent communication patterns offering new foundation type discipline parallel programming languages 
idea interaction reciprocal actions multiple parties central notions parallel distributed computing protocol exchange client process server process multi processing environments communication distributed software modules actions mobile robot environments reactive human interface etcetera 
cases meaning interaction processes running parallel clear seen chain reciprocal actions parties interleaved actions parties 
example application consisting multiple possibly distributed parallel processes proceeds computation way communication component processes various servers services operating systems 
situation interaction tends time consisting chain reciprocal actions parties 
situations abstraction methodology describe complex dynamic interaction structures rigorous mathematical discipline clearly required 
abstraction allow addition usual time style communication call return pass away ways organizing composing reciprocal communication actions semantically single operation 
organization turn appeared proc 
parle lncs springer verlag 
may type discipline ensures typed programs behave principled fashion causing run time error due inconsistency communication patterns parties 
especially true send port names communication party dynamically parallel object oriented languages pool actors ml concurrent languages cml situations communicating entities certain port name known dynamically run time 
proposal elementary programming language constructs abstraction accompanying type discipline 
proposed constructs simple allow programmers concisely codify complex structures reciprocal communication flexible way 
programming done untyped fashion type discipline easily yields effective typing procedure provides way checking consistency communication patterns interacting parties similarly typed functional programming languages ml 
crucial language construct flexible programming type abstraction session point serves private channel course interaction newly created time interactive session parties starts 
initiation session takes place usual port name may shared parties action composing session done associated private channel 
separation notion session points usual port names suggested distinct ways names name passing process calculi calculus calculus see section turns essential flexible way composing interactions clean type abstraction resulting operational structures 
exhibited small example language type system 
specifically show typability program ensures lack run time errors including inconsistency communication patterns believe important discipline parallel communication programming 
structure follows 
section develops basic ideas interaction primitives motivations 
section introduces small language primitives syntax operational semantics formulated 
section devoted formulation typing system study basic properties 
section gives comparison discusses possible subjects study 
basic idea communication primitives basic idea underlying interaction primitives informally 
formal treatment sections 
simplest synchronous input output 
synchronous communication values csp calculus simplest primitives interaction write note level basic calculus shown simpler primitive called asynchronous name passing suffices represent general interaction structures :10.1.1.53.4500
high level description type abstraction interaction behaviour synchronous communication primitive essential 
sends data name performs action assigns data received name variable performs action operational idea underlying primitives represented notion reduction 
reduction relation denotes parallel composition processes 
means substituting free occurrences action considers successive interaction parties constitutes structured communication issue interference important 
third party interfere communication shared port intended communication impossible 
practice networked computing problem resolved utilizing idea session private concerned communicating parties offers capability perform interaction interference third party 
idea turns neatly formalizable name passing notion scope restriction names name passing process calculi :10.1.1.53.4500
essentially processes initially exchange private port name subsequently interact 
shows case processes transmit sequence data consecutively 
denotes port name private restricted 


initially communicating private name local communication link processes established 
similar constructions omnipresent encoding examples data control structures name passing process calculi :10.1.1.53.4500
special name passing primitive important better status separately usual name passing 
separate treatment essential type abstraction sessions shall see soon 
dual primitives link creation multiple communication actions dealt semantically single interaction event follow 
accept accepts establishment local channel port name creating channel performs action 
request requests linkage acquiring local channel performs action local channels may called session points simply just channels separately usual port names 
accept request action communication performed created private channel 
names persistent identifiers communication channels interactive session 
accept request possible perform private communication processes access 
primitives preceding transition accept request 


assume occur free denoting scope restriction channel actions initiating session actions constitutes session separate 
communication private channel transmission data include control features 
essential construct kind branching selection primitives 
roughly correspond field selection record functional calculi method invocation object oriented programming languages 
deltal selects options label channel perform action 
delta delta delta waits multiple labels delta delta deltal action channel formalize idea giving operational semantics primitives small language 
proceed idea type notion accompanying communication primitives 
type abstraction type systems functional programming languages ml allow type programs applicative behavior helps programming disciplined fashion assuring type errors occur program execution 
way need type abstraction programs interactive behavior 
possible mainly due syntactic construct explicitly establishing local communication channel discussed 
take example fragment program request request true delta delta delta closer look know flows interaction ffl interacts sequence ffl interacts sequence note extraction individual communication flows possible local channels separately usual port names 
idea consider pattern individual information flow type interaction 
need notations write output input value type assuming bool stands type boolean values gets types interaction follows 
ffl type int int ffl type int bool type abstraction name formally called session 
notion session crucial categorizing basic behavior communicating entities programs 
example easily know process named session int int dual 
branching constructs dual type abstractions 
read value delta delta delta write delta delta delta example process sends value party likes read receives party likes write 
type abstraction fragment naturally regarding channel read ff write fi ff fi party interacts program dual session symbol phi read ff write fi note local channel crucial extracting type information 
formal construction ideas done section centering typing system small language basic properties including weak form subject reduction error free properties 
language small example language communication primitives discussed previous section 
utilizes notion process creation name channel scope restriction addition auxiliary commands assignment 
language called introducing syntax define operational semantics reduction relation programs 
formulate natural notion run time errors setting 
syntax basic entities language 
discussed distinguish port names session points shall simply call channels distinct categories 
delta delta delta delta delta delta range port names channels respectively 
delta delta delta range labels branching 
assume set expressions include names name variables arithmetic expressions boolean expressions including variables channels essentially prohibit channels passed communication 
symbols delta delta delta range set expressions 
delta delta delta range name variables delta delta delta range union name variables names 
delta delta delta range variables expressions general 
delta delta delta range constants simply names integers boolean values 
process variables range 
syntax follows 
definition syntax prog dec delta delta delta dec dec def delta delta delta xn act delta delta delta act accept act request act act act delta act act delta delta delta act create act act act act main syntactic categories programs processes actions 
program consists set declarations distinct process variables set declarations form multiple recursion main part process 
process usually concurrent composition multiple actions instantiations explained name channel scope restriction 
instantiation delta delta delta instantiates process variable process defining equation parameters delta delta delta concurrent composition name scope restriction cf 

channel scope restriction specific indispensable represent usage channels private interaction point processes 
means channel private jk delta delta delta jp delta delta delta abbreviations jk delta delta delta jk jp delta delta delta respectively 
action roughly speaking process engages thread interaction composed sequence interaction primitives discussed previous section 
firstly accept act request act establish private channel interacting parties start communication channel 
initial binds free occurrences act 
subsequent phrases keyword denote existence binding 
primitives discussed previous section act sends value expression port action act receives value channel instantiates action 
allow port name channel passed resulting dynamic communication topology cml actors 
delta act selects field party interacting action act delta delta delta act offers total selections channel primitive process creation written create act dynamically generates new process action 
assignment conditional standard assignment command variable assigned 
inaction termination action 
omitted examples 
note mapped language faithfully terms operational semantics type structures 
program difficult understand 
set programs restricted satisfy formedness short condition 
properties ensured typability condition properties quite natural 
henceforth fn fc fv mean sets freely occurring names channels variables respectively 
definition formedness dec delta delta delta dec dec fc fv def delta delta delta fn fc fv fx delta delta delta subsequently treat process program implicitly assuming fixed set declarations distinct process variables 
preceding formedness condition extends cases 
illustrate usage communication primitives simple example 
examples intelligible strings non capital letters cell port names variables strings capital letters cell process variables 
string starting write labels branching 
example cell informal description cell ffl client requires reset data cell cell resets data set data empty 
ffl client requires set new value cell cell sets new value clients data 
ffl client requires refer data cell data cell empty tell client failure cell tells data 
declaration behaviour cell 
def cell accept reset create cell false set create cell true ref delta ok create cell delta create cell line defines cell action name variable cell content 
state cell telling empty full 
line acceptance request user creating private channel rest describes branches subsequent actions 
reset line resets regenerating empty cell name 
set line reads value cell new content process generation 
ref lines describe somewhat complex interaction sequence empty sends label ok value client channel sends label client note certain kind exception handling expressed cleanly going usual direction method invocation 
declaration cell cell true process name cell value 
operational semantics semantics processes transition system defines reduction relation processes programs 
milner structural congruence formulation reduction relation easier 
basic rules definition 
definition structural congruence smallest congruence relation generated ff jkj fn jkj fc ff means ff convertible terms bound names bound variables bound channels 
reduction relation processes 
divide definition parts basic rules compositional rules 
reduction relation processes suitable sequence declarations defined smallest relation closed rules definitions 
definition reduction rules link accept act request act jkj act act com act act act act label delta act fl act delta delta delta act act act ass act act create act act cond true act act act false act act act delta delta delta delta delta delta xn def delta delta delta xn eval definition shows basic transition rules processes informal discussions primitives section 
said implicitly assume set declarations means declarations dec dec dec 
denotes prime process contains top level forms act act act act reduction expressions assumed usual way cf 

note rules values transmitted communication evaluated constants 
definition defines auxiliary transition rules closing relation syntactic constructors name channel scope restriction parallel composition 
definition reduction rules 
par str defines reduction processes set declarations easily extended definition reduction programs omit 
simple example reduction code cell appeared 
example declaration client def 
request delta ref ok act delta delta deltag assuming declaration cell example reduction sequence 
cell cell true cell jkj delta delta deltag delta ref ok act delta delta deltag jkj true delta ok create cell cell true delta delta delta ok act delta delta deltag jkj delta ok create cell cell true ok act delta delta deltag jkj create cell cell true act cell cell true act shows cell successfully transmitted value client expected 
errors values communication think type constructor errors setting kinds considered 
usual due mismatch operator operands 
new situation denoting incompatibility communication patterns 
standard expression immediately wrong wrong values applied operator expression true 
interesting type error arises communication patterns match 
notion type error specific situation 
time error concerns pair actions 
definition gives set process contains kinds immediate errors 
definition immediate error 
wrong 
act act start actions channel take forms act act act act act delta act act fl act delta delta delta act fl delta delta delta act act symmetric cases 


assuming implicitly fixed set declarations define wrong processes 
definition error process wrong written err exists 
simple example wrong process follows 
example cell wrong user assume declaration cell example 
define def 
request delta set delta delta action delta delta delta cell cell cell true err cell cell cell true request cell ink delta set delta delta delta accept cell ink delta delta deltag delta set delta delta delta reset delta delta delta set delta delta delta ref delta delta deltag delta delta delta cell cell true section show typing system detects kind type errors 
programming examples illustrate usage communication primitives small language introduced previous section 
examples intelligible string starting write labels branching strings non capital letters cell port names variables strings capital letters cell process variables 
cell show cell specification ffl client requires reset data cell cell resets data set data empty 
ffl client requires set new value cell cell sets new value clients data 
ffl client requires refer data cell data cell empty tell client failure cell tells data 
declaration behavior depicted 
remember denotes variable port name 
def cell accept reset create cell false set create cell true ref delta ok create cell delta create cell give detailed description lines 
line defines cell action name variable cell denotes content cell 
state cell telling empty full 
line accepting request user creating private channel rest describes branches subsequent actions 
reset line resets regenerating empty cell name 
set line reads value cell new content gain process generation 
lines describe somewhat complex interaction empty sends label ok value client channel sends label client 
note certain kind exception handling expressed cleanly going usual direction method invocation 
declaration process cell cell true may interest give type abstraction program formal definition typing system section 
type abstraction session cell set ff ref ff ii ff denotes type variable 
type abstraction continuous interaction clearly expresses exception handling discussed clean way 
communication error describe client cell described 
definition wrong user action cell process def 
request delta set delta delta action delta delta delta definition wrong user cell client going communicate port cell invalid way 
send label set wait response cell cell intend receive client 
transition sequences cell cell cell true request cell delta set delta delta delta accept cell ink delta delta deltag delta set delta delta delta reset delta delta delta set delta delta delta ref delta delta deltag delta delta delta create cell cell true 
step fall communication error formally cf 
definition delta delta delta cell cell true section show typing system detects kind type errors 
typing system section type discipline interaction computing language example 
introducing basic notions types type system untyped programs 
study basic properties typed programs including weak form subject reduction show typedness ensures program run type constructor errors 
type scheme define type schemes typing system 
range type schemes 
simplicity include recursive types inclusion straightforward see 
definition type scheme ffl ff delta delta phi hl delta delta delta hl delta delta delta ffl empty communication type 
ff fi fl denote type variables 
means constant type int bool delta delta delta 
delta denotes sequential composition types delta sequential composition types abbreviate denotes type firstly sending value type similarly denotes type firstly receiving value type doing action type delta delta delta hl delta delta delta types label selecting label branching 
type select specified labels subsequent action type offer multiple options party 
idea duality complementary communication patterns essential type discipline 
formalized notion types 
definition type type type inductively defined follows ffl def ffl def delta def delta delta def delta delta delta delta def hl delta delta delta hl delta delta delta def phi hl delta delta delta type atomic types ffl int original type 
note type type type original type 
note types sending receiving types change carried types 
typing system channel parties reduction 
distinguish party types stipulate party starts session request negative polarity party starting accept positive polarity 
purpose introduce set gammag ranged polarities write gamma denote type interaction requesting party dually accepting party 
roughly speaking satisfy say gamma consistent 
idea formulate notion type assignment programs processes actions 
essentially assumption hypothetical type assignment names variables process variables type assignment channels 
single type term traditional functional types channel type pairs program typing interaction showing existence multiple interaction points cf 

main sequent processes takes form gamma delta gamma set type assignments names variables set type assignments process variables delta set type assignments channels explained 
said types names channels show processes interfaces communications specific type 
stand names variables 
single type assignment call subject assignment predicate 
name say roughly means think polarity corresponding polarity checking consistency usage positive polarity just convenience 
gamma gamma range family finite sets type assignments called typing 
gamma write set subjects occurring gamma subj gamma 
process variable list types delta delta delta denoting types expressions instantiate variable 
example def delta delta delta type process variable delta delta delta parameter type finite set type assignments process variables process variable occurs fx delta delta delta delta delta delta delta delta delta delta delta range family finite sets assignments called channel typing 
subj delta set subjects delta 
channel typings consistency notion important 
definition channel compatibility delta delta consistent denoted delta delta iff delta delta fk gamma subj delta delta delta fk gamma subj delta type inference system deals kinds sequents consisting auxiliary ones addition main sequent 

gamma sequent expression reads assumption gamma derived 

gamma act delta sequent action reads assumption gamma act delta derived 
understood main sequent discussed 

gamma delta sequent processes discussed 

def delta delta delta sequent declarations reads assumption declaration def delta delta delta typable 

gamma dec delta delta delta dec sequent program reads assumption gamma dec delta delta delta dec typable 
type inference system called follows 
typing rules gamma delta fa pg means subject occur gamma 
similarly delta delta fk qg delta fx delta delta delta gamma delta delta delta means result removing assignments subject delta delta delta weakening rules rule corresponds syntactic category defined definition 
set type assignments names right hand side turn way convenient due treatment regarding weakening rules 
definition type inference rules name gamma delta fa pg var gamma delta fx pg exp gamma acc gamma delta fu pg act delta delta fk pg gamma delta fu pg accept act delta req gamma delta fu pg act delta delta fk gamma pg gamma delta fu pg request act delta send gamma gamma act delta delta fk gamma act delta delta fk delta recv gamma delta fx pg act delta delta fk gamma act delta delta fk delta phi gamma act delta delta fk pg gamma delta act delta delta fk delta delta gamma act delta delta fk gamma fl act delta delta delta act delta delta fk hl delta delta delta pn ig gamma gamma act delta gamma create act delta cond gamma bool gamma act delta gamma act delta gamma act act delta localvar gamma gamma delta fx pg act delta gamma act delta gamma init gamma gamma delta fx delta delta delta pn delta delta delta par gamma delta gamma delta gamma delta delta delta delta gamma delta fa pg delta gamma delta gamma delta gamma delta fk gamma delta gamma delta dec fx delta delta delta xn png delta fx delta delta delta pn delta fx delta delta delta pn def delta delta delta xn prog dec gamma gamma dec delta delta delta dec np gamma act delta gamma act delta delta fk fflg fk gamma subj delta typing system gives simple example typing assignment 
examples see 
example assuming declaration example assign type cell cell true port name cell type cell reset ffl set int ref ok int clearly shows structure interaction done port cell including exception handling mentioned 
basic properties type system aim subsection prove error free property typable terms 
show property need steps 
show weak form subject reduction property typable typable 
secondly show process typable immediate type error 
sake space detailed proofs left 
firstly show lemmas prove properties 
lemma 
gamma delta fx pg delta subj gamma fa pg gamma fa pg gamma delta 
gamma delta fx pg delta gamma gamma delta 
gamma delta gamma delta 
mechanically proved induction structure act proved induction expressions suitable definition lemma gamma gamma generally speaking typing process may change type communication inside 
subject reduction property usual sense hold 
theorem tells process typable process reduction original process typable 
weak form subject reduction purpose 
theorem gamma delta exists delta gamma delta prove property induction structure typable reducible process lemmas 
reach main theorem need lemma says typable process immediate error 
lemma gamma delta 
theorem lemma obtain theorem error free gamma delta err 
typability ensures lack run time error including mismatch communication patterns 
helps programmers write correct programs free possible execution mechanisms care type errors eliminating unnecessary codes 
aspects typing including typing algorithm construction refined type disciplines please consult section 
discussion comparison programming channels explicitly describe various patterns interaction programs look csp 
separation port names private channels idea session interaction csp making type abstraction impossible 
describe dynamic link creation csp 
concurrent object oriented paradigm gives simple programming method call return style communication realize flexible interaction patterns cf 
section chained continuous interaction flows types proposed languages 
processes essence sequential processes running parallel communicating persistent port names 
sense concurrent process calculi theoretical csp calculus calculus similar notions 
distinct treatment names channels done calculi 
fact channels locally accept request processes perform continuous interaction primitives exist process calculi mixed general name passing notion 
type abstraction may easily done 
types concurrent programming paradigm look complex traditional functional programming paid attention session processes abstraction interaction 
context proposals typed abstraction communication processes done including :10.1.1.45.1355:10.1.1.36.9162
propose concurrency interaction primitives associated type notions incorporated ml functional programming languages 
approach programming language typing system extension polyadic calculus proposed 
approach tries new language design typing system line primitives inherent calculus may nearer try develop language primitives type notions solely idea interaction extending extant framework authors believe approaches commute 
precursors time communication including multiple value passing considered way freely combining multiple interactions type abstracting resulting interaction flow considered contrast approach 
result low level description communication behaviour approaches 
apart difference fruitful framework precursors possible mentioned 
note type structure similar due explicit channels accept request primitives description interleaved interactions possible crucial flexible programming interaction :10.1.1.45.1355
typing algorithm easy formulate typing algorithm corresponding typing system 
gives example algorithm way similar notion kinding 
kinding gain principal types processes typing system 
discussed various typing notions studied extensions ml name passing process calculi 
combined gain refined type discipline system 
example information communication topology extracted way 
important challenge regard ensure certain form deadlock free property typing 
fact system process typable communication stopped middle session interleaved say request command corresponding party 
issue important subjects study 
related formal verification methodology name passing context 
application consider description type discipline concurrent object programming languages primitives 
examples basic primitives concurrent objects message passing method branch described primitives 
description enables check consistency interaction concurrent objects statically incompatibility past type communication type communication abcl 
regarding implementation note processes encoded calculus preserving essential operational behavior 
calculus asynchronous name passing means theoretically language implemented asynchronous message passing suitable distributed implementations 
presently plan implement language primitives extensions architecture uses idea 
primitives dyadic interaction enable describe various interaction patterns flexibly including primitives establish private link parties perform structured communication simple language operational semantics primitives 
language regarded extension usual process calculi augmented important notions actions channels distinct usual port names typing system notion sessions type abstraction structured sequences interaction 
typability program ensures program cause run time errors regarding values regarding communication patterns 
type information provides essential operational ideas underlying program 
hope construction serves possible bases developments programming methodologies parallel distributed computing environments especially regarding communication intensive applications 
agha actors model concurrent computation distributed systems mit press 
america operational semantics parallel object oriented language 
popl 
berry milner turner semantics ml concurrency primitives 
popl 
damas milner 
principal type schemes functional programs 
popl 
hennessy 
semantics programming languages 
wiley 
hewitt bishop steiger universal modular actor formalism artificial intelligence 
ijcai 
hoare communicating sequential processes 
communications acm 
hoare communicating sequential processes 
honda types dyadic interaction :10.1.1.45.1355
concur lncs 
honda tokoro object calculus asynchronous communication 
ecoop lncs 
honda yoshida combinatory representation mobile processes 
popl 
jones constraining interference object design method tapsoft lncs springer verlag 
kubo interaction machines 
preparation 
mitchell type systems programming languages 
handbook theoretical computer science 
milner theory type polymorphism programming 
journal computer system sciences 
milner polyadic calculus tutorial 
logic algebra specification 
milner parrow walker calculus mobile processes parts ii 
information computation 
milner tofte harper definition standard ml 
nielson nielson higher order concurrent programs finite communication topology 
popl 
ohori compilation method ml style polymorphic record calculi 
popl 
ohori kato semantics communication primitives polymorphic language 
popl 
pierce remy turner typed higher order programming language pi calculus 
manuscript 
pierce sangiorgi 
typing subtyping mobile processes 
ieee symposium logic computer science reppy 
cml higher order concurrent language 
pldi 
takeuchi interaction programming language typing system 
master thesis keio university march japanese 
english version preparation 
thomsen 
calculus higher order communicating systems 
popl 
vasconcelos 
predicative polymorphism pi calculus 
parle lncs 
vasconcelos honda 
principal typing schemes polyadic pi calculus 
concur lncs 
tokoro 
design implementation 
oopsla 
yonezawa abcl object oriented concurrent system 
mit press 
