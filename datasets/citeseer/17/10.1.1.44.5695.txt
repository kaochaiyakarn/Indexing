cubic bottleneck subtyping flow analysis nevin heintze david mcallester february variety program analysis methods worst case time complexity grows length program analyzed 
cubic complexity typically arises control flow analyses inference recursive types including object types 
said cubic performance improved analyses require dynamic transitive closure 
prove linear time reductions problem determining membership languages defined way nondeterministic pushdown automata npda problems flow analysis typability amadio cardelli type system 
algorithm npda acceptability best known 
reductions factored problem monotone closure propose linear time reduction monotone closure method establishing monotone closure hardness program analysis problems 
sub cubic procedure monotone closure hard problem imply sub cubic procedure membership npda language 
static analysis computer programs useful variety ways 
allows bugs compile time ensure certain classes errors occur run time 
concerned establishing inherent complexity family program analyses problems 
designing polynomial time program analysis algorithms faced question cubic time procedure improved problem solved sub cubic time 
new tool establishing hardness results cubic time problems conditions sub cubic algorithm 
proving cubic time hardness results avoids wasted effort trying find sub cubic procedure 
cubic time hardness methods bell labs mountain ave murray hill nj nch bell labs com 
labs mountain ave murray hill nj research att com 
provide insight true source time complexity variety program analysis problems 
cubic time complexity common program analyses methods similar control flow analysis developed shivers 
includes algorithms inferring recursive types palsberg keefe method determining typability amadio cardelli type system :10.1.1.33.8725:10.1.1.36.3559
cubic behavior arises set analyses 
approach proving cubic time hardness results derived result radford neal states problem determining membership languages defined way nondeterministic pushdown automata npda reduced linear time problem monotone closure 
cubic time algorithm membership language defined npda sub cubic algorithm 
languages defined way nondeterministic pushdown automata npda precisely context free languages 
membership context free language determined sub cubic time sub cubic procedures matrix multiplication 
npda define languages context free sub cubic membership test known 
neal theorem implies procedure monotone closure membership languages defined npda done sub cubic time 
take kind cubic time hardness result monotone closure problem 
monotone closure problem advantages npda tool establishing hardness results 
monotone closure problem simpler easier reductions 
appears monotone closure closer structure problems arise program analysis 
monotone closure viewed generalization transitive closure 
problem instance consists set edges plus target edge edge arc form range symbolic constants called basic nodes ranges set monadic function symbols 
monotone closure problem determine target edge derived edges inference rules transitivity monotonicity monotonicity states 
possible show need derive arcs form expressions form appear arcs :10.1.1.46.7406
transitive closure set derivable arcs enumerated naive way cubic time 
transitive closure sub cubic algorithm known 
examples monotone closure hardness results linear time reduction monotone closure control flow analysis typability amadio cardelli type system 
results indicate known cubic time algorithms problems easily improved 
believe cubic time hardness method applied variety analysis problems intuitively involve flow analysis recursive types 
npda monotone closure review neal result monotone closure problem solved sub cubic time membership problem language defined npda 
input string pushdown automata written tape input marked special tape symbol 
input tape read automata access push store unbounded depth 
configuration machine consists machine state location input currently read string symbols pushdown store 
transition table nondeterministic machine specifies set possible actions triple machine state top stack symbol input symbol 
action push pop pushdown store stack symbol may pushed move read head left right way automata 
initial configuration input string automata specified initial state reading symbol string push store empty 
matching accepts input exists sequence allowed actions leading accepting machine state 
reduce problem npda accepts input string problem monotone closure 
consider particular machine running particular input 
represent configuration npda computation term form basic node representing position head state machine sequence function symbols representing state push store representing top store readable symbol 
set possible machine actions encoded rewrite rules 
example suppose symbol position allows machine pop symbol push store machine state reading position input string rewrite rule head position machine state 
input string write set actions allowed string position action represented rewrite rule 
rewrite rules representing push actions form represented standard form rules 
npda modified accepts string reaches standard accepting configuration empty push store head positioned initial tape symbol 
machine accepts input term representing initial configuration rewritten term representing standard accepting configuration rewrite rules 
process rewriting corresponds precisely set arcs derivable transitivity monotonicity 
machine accepts input derive start state canonical accept state 
note number rewrite rules generated tn size transition table machine length input string 
fixed machine reduction linear length input string 
exists sub cubic procedure monotone closure exists sub cubic procedure determining membership language defined npda 
increasing number machine states factor log convert machine accepts language uses push symbols 
construction applied machine push symbols resulting monotone closure problem function symbols 
monotone closure problem solved sub problems function symbols npda membership 
function symbols suffice npda hardness 
proof clear monotone closure remains npda hard add reflexivity rule stating closure objective show control flow typability amadio cardelli type system monotone closure hard 
systems working terms denote procedures 
concerned semantically meaningful operations applied types procedures operators dom ran take procedure type return domain range respectively 
natural order procedures intuitively provided safe 
operation ran monotone implies ran ran 
unfortunately dom anti monotone dom dom 
presence monotone anti monotone operations function types motivates study variant monotone closure monotone anti monotone operation 
call closure 
show monotone closure linear time reduced closure closure monotone closure hard 
suppose monotone closure problem function symbols problem consists finite set edges target edge want determine follows inference rules transitivity monotonicity 
reduce problem closure monotone anti monotone 
introduce new basic node node intuitively arcs reverse meaning applied negative nodes equivalent construct new set arcs arcs arc defined condition constrains contains tran tran tran tran operations tran tran defined follows 
tran tran tran tran tran tran example arc argue derivable monotone rules derivable monotone rule anti monotone rule monotone closure closure property suffices derive arcs involving expressions appear expressions form 
expressions form called positive expressions form called negative 
arcs involve positive expressions negative expressions trans produces positive expressions trans produces negative expressions 
furthermore property preserved inference rules derived arc involves positive expressions negative expressions 
arcs involving positive expressions called positive arcs arcs involving negative expressions called negative arcs 
anti monotonicity rule derives negative arc positive arc vice versa inverting direction arrow 
define flip expression result replacing flip positive expression negative flip negative expression positive 
inference rules applied arcs property derive arc derive arc flip operation 
inference processes related invariant arc derivable monotone rules trans trans trans trans derivable rules 
arc derivable monotone rules derivable rules 
monotone closure closure remains npda hard include reflexivity rule control flow analysis control flow analysis received considerable attention lately 
case pure calculus safe say standard cubic time analysis called cfa :10.1.1.32.7905
section show standard control flow analysis pure calculus monotone closure hard easily done sub cubic time 
pure calculus defined grammar 
bound free variables defined usual way 
formulate standard control flow analysis somewhat nonstandard way 
formulation control flow analysis takes input term derives arcs form subterms set derived flow arcs subterms defined inference rules 
input input antecedents form input rules signify subterm input term 
assumed input term ff renamed semantically distinct variables distinct names 
think arcs flow analysis defining kind rewrite relation signifies repeatedly reduce input term fi reductions substitution instance may rewrite substitution instance formal relationship environment evaluation 
arcs derivable rules subterms input term 
derivable arcs enumerated simply running inference rules completion forward chaining manner 
naive implementation transitivity rule takes time get procedure 
input term target arc form take control flow problem determine arc derived rules applied input term 
note problem determining arc derived transitive closure decided time linear number input arcs 
target arc think sub cubic procedure possible 
show problem monotone closure hard easily sub cubic procedure 
proof monotone closure hardness control flow analysis reduction closure reflexivity 
set arcs target arc instance closure problem monotone operations called ran anti monotone operation called dom range domain respectively 
think basic nodes procedures domain range 
inference rules viewed constructing domains ranges procedure objects 
domain range unfortunately reduction intuition fairly complex 
reduction builds machine uses flow analysis rules implement closure rules 
abbreviation term 
note inference rules derive 
arcs 
ff variants identity function store sets terms 
consider term form 
generate arc inside term variable simply typed pure calculus terms bounded order arity shown control flow problem solved linear time 
set items inserted items extracted 
insert item set include application 
elements extracted set represented expression 
precisely rules derive 
inserted set note term viewed definition variable generally abbreviation 
want construct term containing certain set subterms regard subterms included side effects inclusion avoided 
terms take expression fe abbreviation term fresh variables 
reduction defined follows 
closure problem target arc construct term pure calculus 
id basic node id dom basic node id ran basic node id id dom basic node id 
id dom basic node id id ran basic node id ran id basic node id id assume distinct bound variables term formal parameters various identity functions ff renamed distinct 
control flow problem determine control flow applied term derives arc xm original target arc xm bound variables id id respectively 
prove correctness reduction 
expression form dom ran define variable bound variable identity function id line term ensures derivable flow analysis 
show set arcs form derivable flow analysis closed inference rules closure reflexivity 
clearly arcs closed transitivity reflexivity 
need show closed function ran anti monotonicity function dom consider ran 
suppose control flow analysis derives xm want show case derives ran ran term contains id ran xm ran 
transitivity ran 
term contains id ran id id 
id ran 
ran ran prove derived arcs closed antimonotone rule dom suppose control flow derives xm want show case derives dom dom term includes id id dom xm id dom term includes id 
id dom id 
id dom get dom dom dom proved flow analysis generates arcs form closure generates omit proof extraneous arcs generated 
amadio cardelli typability show typability amadio cardelli system recursive types monotone closure hard sub cubic procedure easily 
amadio cardelli system pure terms typable 
consider modified term grammar includes numerical constant 
established equivalence flow analysis recursive types term typable amadio cardelli system application flow rules previous section derive attempt apply numerical constant procedure :10.1.1.36.3559
order terms potentially untypable need include non procedure variant reduction previous section 
done pairs procedure part flag part flag part harmless term dangerous term 
notation hu wi representing pair abbreviation term 
alternate notation xy second notate xy 
instance closure problem target arc construct term 
id basic node id dom basic node id ran basic node id hy id dom basic node id id dom basic node id hy id ran basic node id ran id basic node id id id second id target mg term similar previous section pairs functions 
component pair function plays role corresponding function previous term 
pairs allows second component pair carry bomb explode reaches appropriate place 
note occurrence second line term 
second terms 
way get value generate arcs second applied pair appears line 
inference procedure fails derive target arc flow analysis fail generate arcs form 
term typable 
hand closure generates target arc flow analysis generates second id term untypable 
shown easily find sub cubic procedure monotone closure sub cubic procedure monotone closure imply procedure membership languages defined npda done years cubic procedure 
shown monotone closure reduced linear time various problems definition monotone closure hard 
particular shown standard flow analysis pure lambda calculus typability amadio cardelli system recursive types monotone closure hard 
expect similar proofs constructed variety program analysis problems 
amadio cardelli 
subtyping recursive types 
acm transactions programming languages systems 
proc 
popl 
aho hopcroft time tape complexity pushdown automaton languages information control vol 
pp 

bondorf jorgensen efficient analysis realistic line partial evaluation journal functional programming vol 
july 
heintze set analysis ml programs acm conference lisp functional programming pp 
heintze control flow analysis type systems static analysis symposium pp 
jones flow analysis lambda expressions symp 
functional languages computer architecture pp 

jones flow analysis lazy higher order functional programs interpretation declarative languages abramsky hankin eds ellis horwood 
robert givan david mcallester 
new results local inference relations 
principles representation reasoning proceedings third international conference pages 
morgan kaufman press october 
internet file ftp ai mit edu pub users dam kr ps 
david mcallester 
inferring recursive data types 
www ai mit edu people dam ps 
david mcallester nevin heintze 
set analysis 
www ai mit edu people dam ps 
mcallester givan 
taxonomic syntax order inference 
jacm april 
internet file ftp ai mit edu pub users dam jacm ps 
neal computational complexity taxonomic inference unpublished manuscript pages ftp ftp cs utoronto ca pub radford ps 
palsberg keefe type system equivalent flow analysis popl pp :10.1.1.36.3559

palsberg schwartzbach safety analysis versus type inference information computation vol 
pp 
april 
shivers control flow analysis scheme proc 
acm conf 
programming language design implementation atlanta pp 
june 
