dependence analysis java bytecode zhao department computer science engineering fukuoka institute technology ku fukuoka japan email zhao cs fit ac jp understanding program dependencies computer program essential software engineering tasks program understanding testing debugging reverse engineering maintenance 
approach dependence analysis java bytecode discuss applications technique include java bytecode slicing understanding testing 
java new object oriented programming language achieved widespread acceptance emphasizes portability 
java programs compiled portable binary format call bytecode 
class represented single class file containing class related data bytecode instructions shows simple java class test corresponding bytecode instructions 
files loaded dynamically interpreter java virtual machine jvm executed 
java applications routinely transmitted internet compressed class file archives zip files jar files 
typical example situation download web page contains java applets 
situation leads problems follows 
class files source code application usually unavailable user 
bugs classfiles need report bugs application developers possibly pay new version bug free software 
developers available support application want support software anymore business user changes fix bugs 
second bytecode instructions contained classfile bugs methods java software testing necessarily remove possible bugs source program 
cases tools support bytecode understanding testing debugging benefit greatly 
result development techniques tools support kinds tasks java bytecode important 
way program dependence analysis technique 
program dependencies dependence relationships holding program elements program implicitly determined control flows data flows program 
intuitively computation statement directly indirectly affects computation statement program exist program dependence statements 
dependence analysis process determine program dependencies analyzing control flows data flows program 
compiler optimizations program analysis testing techniques rely program dependence information topically represented representation dbr example program dependence graph pdg 
pdg originally proposed compiler optimizations performing program slicing various software engineering tasks program debugging testing maintenance complexity measurements 
example program slicing decomposition technique extracts program elements related particular computation greatly benefit pdg slicing problem reduced vertex reachability problem simpler original algorithm 
dependence analysis originally focused procedural programs 
object oriented software popular researchers applied dependence analysis object oriented programs represent various object oriented features classes objects class inheritance polymorphism dynamic binding concurrency 
detailed discussions see related section 
previous dependence analysis mainly focused programs written high level programming languages programs low level programming languages jvm 
dependence analysis techniques binary executables different operating systems machine architectures existing dependence analysis techniques applied java bytecode straightforwardly due specific features jvm :10.1.1.39.1779
order perform dependence analysis java bytecode extend existing dependence analysis techniques adapting java bytecode 
propose dependence analysis technique java bytecode 
identify define types primary dependencies java bytecode program intraprocedural level discuss applications technique java bytecode slicing understanding testing 
addition applications believe dependence analysis technique underlying base develop software engineering tools java bytecode aid debugging reengineering reverse engineering 
rest organized follows 
section considers intraprocedural dependence analysis java bytecode 
section discusses applications dependence analysis technique 
section discusses related 
concluding remarks section 
dependence analysis perform intraprocedural dependence analysis bytecode methods necessary identify primary dependencies bytecode method 
section types primary dependencies bytecode method 
background give definitions necessary formally defining dependencies bytecode method graphical viewpoint 
digraph ordered pair finite set elements called vertices finite set elements cartesian product called arcs binary relation arc called initial vertex arc said adjacent called terminal vertex arc said adjacent predecessor vertex vertex adjacent successor vertex adjacent degree vertex denoted degree number predecessors degree vertex denoted outdegree number successors simple digraph digraph path digraph sequence arcs terminal vertex initial vertex called length path 
initial vertex terminal vertex path called path control flow graph cfg bytecode method tuple cfg simple digraph set vertices representing bytecode instructions set arcs represent possible flow control vertices unique vertex called start vertex represents entry point degree ae set vertices called termination vertices represent exit points degree belong exists path path traditional control flow analysis represents statement program vertex cfg 
analyzing java bytecode represent bytecode instruction vertex cfg 
cfg vertex represents bytecode instruction arc represents possible control flow bytecode instructions 
cfg contains unique vertex represent entry point method set termination vertices represent multiple exit points method due existence exception handling 
vertices cfg bytecode method 
forward dominates iff path contains properly forward dominates iff forward dominates strongly forward dominates iff forward dominates exists integer path length greater equal contains called immediate forward dominator iff vertex properly forward dominates path definition graph dug bytecode method tuple dug cfg cfg cfg finite set symbols called local variables partial functions power set 
functions map vertex cfg set local variables defined respectively instruction represented vertex 
local variable defined instruction execution assigns value variable instruction execution requires value evaluated 
section show determine definition information bytecode instructions 
cfg dug bytecode method define control dependence data dependence method 
iconst istore iconst istore goto label iload iconst iadd istore iload aload getfield test array iload iadd istore iload label goto label class test int array int test int try array catch exception return null return pop iconst istore jsr label iload ireturn jsr label goto label astore temp jsr label aload temp astore temp aload null putfield test array ret temp iload ireturn javac simple bytecode method 
control dependencies control dependencies represent control conditions execution instruction depends bytecode method 
informally instruction directly control dependent control transfer instruction executed directly determined evaluation result cfg cfg bytecode method vertices cfg directly strongly control dependent iff exists path contain immediate forward dominator exists vertex path contain immediate forward dominator directly weakly control dependent iff successor exists path vertex strongly forward dominates strongly forward dominate control dependencies represent bytecode instructions related control conditions execution instruction depends 
types jvm instructions may cause control dependencies 
jvm control transfer instructions cause conditionally unconditionally jvm continue execution instruction control transfer instructions 
kinds instructions cause control dependencies 
ffl unconditional branch instructions goto jsr ret 
ffl conditional branch instructions ifeq ifnull lcmp 
ffl compound conditional branch instructions 
second jvm execution method finished method return control caller 
caller expecting value called method 
jvm provides return instructions purpose include ireturn areturn return 
return instructions change flow control instruction execution form source control dependencies 
third kind special branch jsr jump subroutine 
goto remembers came 
jsr executed branches location specified label leaves special kind value stack called represent return address 
may cause control dependence 
fourth exceptions sort super goto transfer control method terminate current method find destination java stack 
instructions may explicitly implicitly throw exception cause control dependencies explicitly implicitly change control flow instruction 
kind instructions form source control dependencies 
ffl instruction may explicitly throw exception 
ffl instructions may implicitly throw exception checkcast getfield idiv instanceof invokeinterface invokespecial invokestatic invokevirtual ldc ldc new newarray putfield 
data dependencies data dependencies represent data flow instructions bytecode method 
informally instruction directly data dependent instruction value variable computed direct influence value variable computed cfg cfg bytecode method vertices cfg directly data dependent iff exists path vn 
compute data dependencies determining definition information set instruction compute data dependencies kind information 
order define data dependencies bytecode method annotated cfg dun vertices cfg annotated functions definition 
function set local variables defined vertex second function set local variables vertex construct dug bytecode method define functions explicitly 
intuitively local variable corresponds reading value variable definition local variable corresponds writing value 
jvm method invoked frame allocated consists fixed sized operand stack set local variables 
effectively set consists array words local variables addressed word offsets array base 
determine definition information set instruction bytecode method follow ffl bytecode instruction assigns value local variable frame forms definition variable 
instructions istore istore astore astore form definitions local variable defined implicitly opcode explicitly operand byte bytes combined wide instruction 
similarly instructions effectively operate local variables viz 
data item type long double effectively occupies local variables instruction form definitions local variables 
example instruction forms definition local variable forms definition local variables 
ffl parameter passing mechanism bytecode causes source definitions local variables words parameters passed particular method invoking method forms initial definitions local variables 
types parameters easily determined bytecode context 
instance method parameter instance class method defined 
types arguments defined corresponding method descriptor 
second determine information set instruction bytecode method follow ffl bytecode instruction reads value local variable forms variable 
instructions iload iload aload aload forms uses single local variable defined implicitly opcode explicitly operand byte bytes combined wide instruction similarly instructions effectively form uses local variables 
implementation level particular method may represented words address instruction offset local variable 
sets instruction bytecode method determined dug method constructed 
dug straightforward compute data dependencies instructions method 
applications intraprocedural dependence analysis technique useful software en tasks related java bytecode development 
briefly describe tasks bytecode slicing understanding testing 
bytecode slicing purpose analyzing dependencies bytecode program compute static slices program 
section informally define notions statically slicing bytecode program show compute static slices bytecode program dependence analysis 
static backward slicing criterion bytecode program tuple instruction program local variable static backward slice ss bytecode program static slicing criterion consists instructions program possibly affect value local variable similarly informally define notions forward static slicing bytecode program 
static forward slicing criterion bytecode program tuple instruction program local variable defined static forward slice ss bytecode program static slicing criterion consists instructions program possibly affected value variable addition slicing complete bytecode program perform slicing single bytecode method independently dependence analysis method 
may helpful locally analyzing single method 
bytecode understanding necessary understanding bytecode program 
example case get class files java application get source code application 
attempt understand behavior bytecode program want know local variables bytecode instructions affect local variable interest local variables bytecode instructions affected execution variable interest program 
discussed backward forward slicing bytecode program satisfy requirements 
hand problems software maintenance ripple effect code change program affect behavior codes program 
modify bytecode program necessary know local variables instructions affected modified variable local variables instructions affect modified variable 
needs satisfied backward forward slicing bytecode program modified 
bytecode testing bytecode program bugs methods java software testing necessarily remove possible bugs source program 
necessary propose testing methods java software bytecode level 
dependence analysis technique analyzes control data dependencies represent control data flow properties bytecode program reasonable step define dependence coverage criteria test data selection rules covering dependencies testing java software bytecode level 
related dependence analysis applied various programming languages time knowledge apply dependence analysis java bytecode 
dependence analysis object oriented programs studied larsen harrold chen considered sequential object oriented programs zhao considered concurrent object oriented programs 
techniques analyze various types dependencies object oriented programs lack ability analyze java bytecode 
dependence analysis binary executables studied cifuentes built dependence graph machine instructions dos operating systems perform slicing graph larus schnarr dependence analysis perform slicing elf format binary executables operating system 
due specific features jvm techniques applied java bytecode straightforwardly 
similar hatcliff introduced dependence analysis technique multi threaded programs jvm concurrency primitives support model construction multi threaded java program 
technique java programs translated intermediate language called jimple perform dependence analysis jimple code 
jimple originally introduced target language java decompiler means decompile java class files bytecode jimple file format jimple different jvm 
result technique perform dependence analysis jimple code different sense directly perform dependence analysis jvm bytecode 
concluding remarks dependence analysis technique java bytecode 
identified defined various types primary dependencies java bytecode intraprocedural level discussed applications technique software engineering tasks related java bytecode development including java bytecode slicing understanding testing 
addition applications believe dependence technique underlying base develop software engineering tools aid debugging reengineering reverse engineering java bytecode 
developing dependence analysis tool automatically analyze various types primary dependencies bytecode program construct dependence graph program 
intend graph underlying representation develop slicer testing tool java bytecode 
author anonymous referees valuable suggestions comments earlier drafts 
arnold gosling java programming language addison wesley 
agrawal demillo spafford debugging dynamic slicing backtracking experience vol pp 
bates horwitz incremental program testing program dependence graphs conference record th annual acm sigplan sigact symposium principles programming languages pp charleston south california acm press 
chen wang chen slicing object oriented programs proceedings pp hongkong china december 
cifuentes intraprocedural static slicing binary executables proc 
international conference software maintenance pp october 
ferrante ottenstein warren program dependence graph optimization acm transaction programming language system vol pp 
hatcliff corbett dwyer sokolowski zheng formal study slicing multithreaded programs jvm concurrency primitives proc 
static analysis symposium september 
horwitz reps binkley interprocedural slicing dependence graphs acm transaction programming language system vol pp 
larus schnarr eel machineindependent executable editing sigplan conference programming languages design implementation pp june 
korel program dependence graph static program testing information processing letters vol pp 
krishnaswamy program slicing application object oriented program dependency graphs technical report tr department computer science clemson university 
kuck kuhn padua wolfe dependence graphs compiler optimizations conference record th annual acm symposium principles programming languages pp 
larsen harrold slicing objectoriented software proceeding th international conference software engineering german march 
lindholm yellin java virtual machine specification addison wesley 
mcgregor krishnaswamy program representation object oriented software acm sigplan notices vol pp 
ottenstein ottenstein program dependence graph software development environment acm software engineering notes vol pp 
podgurski clarke formal model program dependences implications software testing debugging maintenance ieee transaction software engineering vol pp 
weiser program slicing ieee transaction software engineering vol pp 
zhao cheng static slicing concurrent object oriented programs proceedings th ieee annual international computer software applications conference pp august ieee computer society press 
zhao slicing concurrent java programs proc 
seventh ieee international workshop program comprehension pp pittsburgh pa usa may 
