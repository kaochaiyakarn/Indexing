query decomposition view maintenance query languages unstructured data dan suciu research usa suciu research att com query languages proposed querying information sources data constrained schema schema unknown 
examples include lorel querying data combined heterogeneous sources qs querying world wide web unql querying unstructured data 
natural data model languages rooted labeled graph 
main novelty ability express queries traverse arbitrarily long paths graph typically described regular expression 
queries may prove difficult evaluate case data distributed sites edges going sites 
typical case collection www sites links pointing freely site forming cycles 
naive query shipping strategy may force query migrate back forth various sites leading poor performance non termination 
technique query decomposition query shipped exactly site computed locally local results shipped client assembled final result 
technique efficient data part final result shipped data sites client site total done locally sites exceed needed computing unoptimized query centralized version database 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings nd vldb conference mumbai bombay india show query decomposition technique adapted derive simple view maintenance method forms updates introduce graph data model 
database query languages proposed data model labeled tree generally labeled rooted graph 
lorel qrs designed conjunction tsimmis project pgmw query data information sources impose rigid structure structure completely known 
unql bds bdhs motivated need query self describing databases acedb databases popular biologists data sources unknown structure 
authors languages suggest suitability query information sources world wide web 
qs ks query language specifically designed querying world wide web 
motivated fact today web search engines restricted content queries select single page content qs designed ask structure queries addressing hypertext organization 
system developed querying hypertext structures bk 
main common feature languages ability follow arbitrarily long sequences links 
illustrate feature giving typical query www example 
example suppose want fetch publications computer science department university california san diego home page www ucsd edu 
html structure need search illustrated 
convenient view html data rooted directed graph nodes correspond pages edges links page set outgoing links prob ignore node content trees labeled edges nodes 
case html data justify choice fact focus structural content queries 
see bdhs justification model :10.1.1.32.3916
www cs ucsd edu academic people researches papers papers papers papers ee department schools papers papers papers cs department departments papers papers fragment www ucsd edu result query lem expressing query relational objectoriented query language don know advance links follow root cs department link papers link 
slightly modified unql syntax query expressed select papers cs department papers db db stands database example www ucsd edu site 
symbol denotes label placed label means repeated times 
means sequence labels 
short query starts root follows paths edge labeled cs department follows paths edge labeled papers returns set subtrees 
course query applied university sites retrieve papers published computer science departments 
example illustrates main feature separating query languages unql lorel qs relational object oriented query languages ability follow arbitrarily long sequences links 
typically sequences described regular expressions 
particular compute transitive closure link relation 
bdhs call languages unstructured query languages :10.1.1.32.3916
natural data model rooted directed graph labels attached vertices edges 
traditional relational databases captured model special case trees fixed depth bdhs see section :10.1.1.32.3916
relational databases expressive power languages powerful relational algebra bdhs :10.1.1.32.3916
discuss problems connection languages query decomposition view maintenance 
describe problems 
query decomposition information sources reside number different sites 
database fragment site may large number links leading sites 
illustrate papers www sdsc edu www ucsd edu papers papers papers papers information source distributed sites 
suppose want consider ucsd web site example conjunction web site san diego supercomputer center www sdsc edu 
typical query may start ucsd web site traverse back forth links sites traverses sequences links 
cs department may links projects sdsc site may follow links back ucsd site point may encounter papers link 
query shipping query evaluation implies query migrate sites arbitrary large number times 
query decomposition problem requires query decomposed queries computed independently fragments db db database residing sites results combined client site yield db 
course problem solved best additional knowledge data distribution available cs department link unique resides ucsd site 
purpose see accomplish knowledge data distribution useful browsing unfamiliar information source 
describe technique translates query certain fragment unstructured query language query decomposable meaning db computed computing db db independently gluing results client site 
decomposition efficient computing db db expensive computing db naive evaluation strategy db centralized 
optimized evaluation db efficient centralized version db computing db db separately 
view maintenance view just result query applied database db 
view materialized result stored client site 
view maintenance problem consists finding efficient techniques updating view client site database incrementally updated say db db delta delta smaller db defined section case relational databases represented trees insertion element set modeled special case 
ideally view update depend old view papers cs department ee department papers papers people papers www cs ucsd edu academic schools departments researches papers query logically partitions database regions 
increment delta db 
view maintenance techniques relational databases extensively discussed see gl list 
case unstructured data face additional problem informing client site update taken place 
information taken granted case relational query language 
consider relational database relations view oe 
classic view maintenance algorithms view updated differently depending updated 
delta view oe delta gets updated view need changed 
unstructured database static partition data distinct relations partition done dynamically view computed 
query example defines view logically partitions database regions 
regular expression occurring query equivalent automaton states regions correspond precisely states 
view maintenance done differently update region updates regions respectively 
course view defined query may partition db different way 
develop algebraic techniques transform query certain fragment unstructured query language query query decomposition problem db computed easily db computation db expensive naive computation db delta encapsulates information region affected update furthermore db delta db delta 
relation previous choose describe techniques context query language unql bdhs bdhs 
language relies data model rooted labeled graphs described bds 
describes bisimulation rooted labeled graphs showing data model subsumes relational nested relational 
introduces basic algebraic operations associated data model including tree concatenation denoted vext vertical ext observing vext works nicely conjunction cyclic structures 
language unql introduced bdhs bdhs declarative language pattern matching shown equivalent algebraic language uncal centered generalized version vext called gext generalized ext 
bdhs bdhs prove number algebraic laws gext intended query optimizations 
laws additional ones dealing cyclic data order derive query decomposition techniques 
need add additional operations uncal consider labeled graphs roots class objects language trees cou pp extend uncal graph juxtaposition see section 
equations associated new operations spirit cou pp simpler gext 
applicability assumptions limitations query language describe techniques context query language unql bds bdhs apply equally decomposing queries certain fragments lorel qs 
important notice query decomposition view maintenance critical way particular language constructs unql tree concatenation denoted bdhs :10.1.1.32.3916
note techniques apply unql queries expressible lorel qs 
restrictions query language query decomposition technique works unql queries satisfying restrictions 
requires query monotone 
particular handle set difference incremental deletions 
expected limitation data model set semantics particular flat trees just sets 
case relational databases known gl bag semantics set semantics needed order algebraic view maintenance deletions 
second restriction requires query 
limitation far severe sounds unstructured query languages focus queries traversing long link sequences join free object oriented databases joins replaced link traversals 
fact queries qs ks join free interesting lorel unql examples qrs bdhs join free 
knowledge data distribution query decomposition method works assuming knowledge data distributed sites 
may useful consider serious limitation approach 
cases minor knowledge data sources help decompose query better currently 
part plan investigate knowledge data sites incorporated query decomposition method 
updates view maintenance techniques kinds updates insertions replacements 
insertion notation db delta means new subtree delta inserted particular node db section root delta merged monotone operation resulting database edges original 
second kind update replace allows replace subtree rooted node tree 
monotone operation extent model deletions relational databases 
update notification view maintenance technique requires server informs client page general node graph updated 
refer reader bd db update notification techniques www 
site selection query capabilities address problem site selection 
assume database stored fixed known relatively small number sites say may links 
assumption easily enforced case web sites simply ignoring links pointing outside set assume knowledge semantics data stored sites query capabilities reality sites may offer restricted access keyword search 
case conjunctive queries relational databases lmss lru discuss techniques efficiently select relevant sites limited query capabilities sites 
example illustrate problems techniques propose solve query example 
easier describe view maintenance technique start 
view maintenance require database db updatable nodes explicitly marked 
extreme case nodes marked updatable adopting approach lead increased storage requirement materialized views 
view db computed semantics unql query result encapsulates markers updatable pages db 
marker tagged name dynamically computed region encountered 
suppose database db updated say page marked link new subgraph delta added page notation db db delta 
server notifies client update sending delta 
client looks marker view reads tag region occurred updates view dynamically shown 
particular example cases view needs updated delta delta follows 
delta inserted cs department edge region delta delta delta select papers cs department papers delta 
delta inserted cs department edge papers edge region delta delta delta select papers delta 
delta inserted cs department papers edge delta delta delta 
informal description sounds procedural technique described fully algebraic 
illustrate query decomposition 
assume database db distributed different sites arbitrary links path form cs department papers may travel back forth arbitrary number times 
assume priori knowledge data structured partitioned sites prepared deal cs department links number papers links possible distribution links sites 
decompose query need list input output links site 
intuitively method starts decomposing query queries described applies queries entry point site illustrated inputs site inputs site 
observe queries logically partitions database regions defines 
want tag output link corresponding region name 
note partitions independent output link may region say replicate output link times region may 
illustrated outputs sites case correct view update form delta see section 
site site db db query decomposition sites 
intuitive meaning edge 

step results independent computations shipped client combined gluing outputs corresponding inputs 
data model mentioned earlier adopt data model bds bdhs 
tsimmis data model pgmw qrs object id additional features markers ffl edges critical way query decomposition view maintenance 
briefly review main ideas refer reader bdhs detailed description data model 
rooted graphs label universe labels includes strings numbers booleans database modeled rooted graph graph distinguished node called root edges labeled elements label special label denoting empty symbol vertices connected ffl edge intended meaning edges emerging emerge see 
trees trees form particularly interesting subset rooted graphs suffice represent sets records 
contains example relational database representation tree 
syntax trees tree fg tree tree abbreviating fa fa fan fag fa fgg example written tup tup tup tup tup relational database represented tree 
illustration fr fm fag tup fm fbg tup fm fcg fm fbg fcg tup fm fag fag emphasize data model set semantics 
trees fa fcg fa considered equal 
markers addition edge labels leaves graph allowed labeled special symbols denoted called markers 
labels markers part information content database control updates take place connect fragments distributed database 
share similarities object id tsimmis data model pgmw qrs 
markers allow define concatenation operation graphs marker denotes database obtained drawing edges leaves labeled root occurrences old marker disappear markers remain markers see 
graphs inputs outputs capture connection fragments distributed database generalize single input root tree inputs 
call markers leaves outputs tree reaching notion tree graph inputs outputs 
formally fx xm fy yn finite sets markers 
database database inputs fx outputs fy xn 
xn 

rec xn illustration rec inputs outputs fx xn inputs outputs graph edges labeled elements label leaves may labeled markers distinguished roots associated xm extend syntax trees trees inputs outputs tree trees single anonymous input outputs tree tree tree xm tree tree fg tree tree tree contains example graph inputs outputs written fa fb gg fb fy fb gg ag fc fa gg 
convention exists single graph inputs null graph denoted nodes edges different empty set fg node edges 
extend operation follows 
tree tree tree tree obtained drawing edge output input recursive definitions tree rec denotes graph obtained adding edge output input 
intuitively rec rec fa xg defines loop labeled equality notion equality rooted graphs bdhs bds 
nutshell rooted graphs bisimilar possible infinite unfolding edge removal duplicate subtree elimination node resulting trees equal 
restricted tree representations sets records bisimilarity relation exactly set record equality 
edges edges introduced convenience notation operations rec easier defined terms edges 
hand reader may noticed site site distributed database 
sense redundant rooted graph edges shown bisimilar rooted graph edges bds bdhs 
works graphs markers 
tree fag represented edge fa fg xg equivalent tree edges 
notation bdhs abuse notation call trees graphs cycles :10.1.1.32.3916
tree denotes set databases single anonymous input outputs tree databases inputs outputs tree tree tree tree canonical form database db tree expressed necessarily uniquely rec xm set fx cycle free 
representing distributed databases illustrate distributed database represented notation example db stored sites start cutting cross links inserting markers place input old root 
fragments database residing sites tree tree def fx def fx def fx denotes root db 
db tree rec juxtaposition disjoint graph union 
rec construct cross links selects input labeled unique anonymous input database 
general database db stored say sites expressed canonical form rec stored site site need cycle free 
transaction language view maintenance technique works conjunction simple transaction language spirit tup tup tup tup tup tup tup tup tup tup tup relational database markers 
database update 
gl describe 
transaction sequence atomic transactions form db db delta db db replace 
defined earlier 
replace operation assume db canonical form equation fx xm xm fx xm 
tree entries say db replace defined rec gamma gamma note replace unorthodox defined particular representation database meaning 
precisely find trees db db bisimilar equal purposes db replace bisimilar db replace 
example consider relational database db 
model insertions relations redesign db introducing markers 
traditional insert operation expressed db db fm ag result shown 
note explicitly include order allow insertions 
main result key technique query decomposition view maintenance transform queries decomposable queries 
definition query unql 
say decomposable iff 


item item trees named inputs definition sense queries acting databases named inputs 
view maintenance decomposable queries easy update db db delta update view db delta 
similarly show section query decomposition sense section easily done decomposable queries 
need proposition decomposable rec rec proof give informal argument 
rec infinite unfolding rec rec 
apply item definition 
shall see unql query decomposable 
theorem prove query positive join free fragment unql definition section obtained decomposable minor post processing main result sketch proof section 
theorem query positive fragment unql exists positive query constant tree ff conditions hold 
ff 
decomposable 

cost evaluating larger naive evaluation applications show theorem applied query decomposition view maintenance 
query decomposition illustration shall assume database stored sites technique described generalizes straightforwardly arbitrary number sites 
section assume db canonical form db db rec residing site query db def db proceed follows 
apply theorem decompose db ff db 
compute db rec 

item theorem proposition rec rec set inputs outputs 
compute site independently site 
send client site step potentially inefficient refined 
client holds 

client computes rec consists drawing edges outputs inputs obtaining db 
computes db shown step 
theorem applies queries expecting databases named inputs apply directly 
parts graphs sent step may turn step inaccessible root final result db 
avoid sending useless fragments step refine follows ffl compute accessibility graph nodes markers edges pairs accessible input 
fragments computed independently sites sent client 
ffl client computes transitive closure gives graph db rec 
tree ff client computes set markers concatenation db ff db ff db equal ff db 
ffl client sends set step resumed having server sent accessible fragment respectively client inputs argue total cost evaluating decomposed query larger computing db centralized version db naive evaluation method 
equally expensive compute 
key observation non optimized evaluation rec rec cost 
optimized evaluation better job rec avoid processing parts 
view maintenance view defined query def db 
simplicity assume db database named inputs 
view maintenance method consists 
db db tree db def db ff decomposition theorem 
view db defined compute store db 
particular ff encapsulates markers 
assume database updated db db delta send set markers tree delta server client compute delta update materialized view delta 
correct decomposable 

assume database updated db db replace 
strictly speaking set markers extracted delta exactly set inputs delta 
sent client updates view replace 
correct decomposable 
note new view computed old increment delta depend directly db 
possible join free 
calculus uncal bdhs introduces language unql query language browsing unstructured data data structure partially known :10.1.1.32.3916
shown unql equivalent calculus called uncal way certain fragment sql equivalent relational algebra 
briefly review uncal 
dry formalism refer reader bdhs presentation equivalent unql language :10.1.1.32.3916
lists constructs monotone fragment uncal call uncal uncal obtained restricting uncal ways emptiness test isempty removed gext construct replaced restrictive vext 
show queries expressed uncal monotone way formal bun 
briefly describe constructs queries label variables constants user defined predicate 
db stands input database fg returns empty set node edges fa qg returns singleton tree label constant label variable returns union trees 
represent conveniently edges 
concatenates section 
complex construct vext 
expression denoting tree inputs outputs may free label variable 
vext returns tree obtained replacing edge labeled tree 
tries illustrate action case fag single marker 
illustrate vext 
renames unique anonymous input tree tree fag juxtaposition inputs disjoint result union graphs 
tree tree tree abbreviate qn 
null tree nodes edges 
stands marker 
query expression free variables db query input 
query may markers constructs vext denote distinct markers database db 
query description meaning db input database fg empty set delta fa singleton edge label union concatenation vext expansion condition conditional form single input named juxtaposition null tree marker uncal calculus 
case oid external oid query access 
allow exception rule query database named inputs may unique marker denoting root input db query db def db legal db db fag 
main construct language vext 
explain vext interacts input output markers recall fa inputs outputs assume inputs fx xm outputs fy yn definition vext returns tree delta inputs delta outputs 
name denote delta new distinct marker markers require operation injective delta delta definition inputs vext delta def fa delta outputs delta convention single anonymous input vext inputs illustrate vext detailed example refer bdhs general definition vext :10.1.1.32.3916
example recall query example returns papers computer science department 
consider variant stops path finds papers edge cs department intuitively optimization assumes department edge occurs papers edge 
expressed follows vext db fa cs department fx papers fg fx fx fx best visualized graphically 
contains example database outputs fx zg 
vext db returns database outputs delta represented 
eliminating ffl edges part output graph obtain database 
note outputs delta delta remain result 
intuition markers copied output tagged region described section delta means region delta means region 
note marker disappears matter extend db marker update link site db affected 
decomposable sense definition 
sub query vext decomposable tree tree tree deltax deltay tree deltay deltaz original query example fg case papers 
deltay 
easily recovered 
theorem generalizes observation 
query evaluation method uncal consists manipulating labeled graphs suggested occasionally cleaning graph reducing bisimilarity eliminates parts 
main construct vext evaluation strategies illustrate vext db 
start root db traverse recursively automata 
example produce directly graph touching parts 
process edge db independently replacing process illustrated clean phase required get 
method efficient called optimized evaluation needs special care deal cycles method sense databases input root start naive may constructing unnecessary fragments graph eliminated 
statement item theorem holds methods 
query decomposition method recall need replace rec rec decomposable cost evaluating method method efficient rec may avoid accessing parts database needed 
query decomposition method cost computing db centralized version db method may expensive db method 
call uncal expression constant doesn mention input database db 
note example sub query vext db constant expression 
call query join free sub query form vext constant additional output markers easy extend results bdhs show relational algebra operations union selection projection relational databases expressed trees expressed join free uncal queries intersection cartesian product expressed uncal join free queries :10.1.1.32.3916
condition imposed want disallow self concatenation db db order theorem hold 
direct self concatenation possible uncal db output markers query 
rule self concatenation form vext db db uses marker place deep db leave 
purpose results section call unql query positive iff translation uncal bdhs uncal doesn isempty :10.1.1.32.3916
similarly call join free iff translation join free 
difficult design syntactic conditions sufficient unql queries positive join free 
decomposition rules sketch proof theorem describing decomposition rules applied query transform ff rules apply inductively sub queries note vext constant expression need transformed 
consequence inductive transformation rules reach gamma gamma construct 
applying rules transform query ensuring distinct vext subexpressions disjoint sets markers simply rename markers vext constructs 
base case db tree ff taken identity inputs 
xm xm 
expressible uncal access sets markers add new construct id denoting identity inputs db 
strictly speaking ff expression uncal id explain 
consider sub queries larger query transformations 
may common input markers construct quite correct 
observe possible common inputs db 
precisely similarly cases arise input form delta tagged marker gext subexpression private case inputs disjoint juxtaposition correct 
db inputs tagged private marker case inspect form db adopt meaning db copy common part db 
illustrate correctness rules vext consider query vext 
apply induction hypothesis get ff recall constant 
defines def vext ff def vext ff 
equations vext vext vext vext vext vext equation bdhs direct consequence definition vext :10.1.1.32.3916
check ff follows equation 
equations induction hypothesis decomposable easily check decomposable 
consider case apply induction hypothesis get ff 
cs dept papers cs dept papers papers papers papers db papers papers db papers cs dept papers db papers cs dept illustration vext db 
defines def ff def ff ff check item theorem ff ff ff ff ff equality true separation inputs markers explained 
may share input markers inputs db case common part exactly db ff ff ff ff 
check item construct apply induction ff 
obviously decomposable remains show ff ff 
show induction output marker tagged output marker markers may appear consequence condition join freeness definition section 
ff ff ff ff ff ff ff ff described query decomposition method compute efficiently queries query ff db db id fg fg fa fa ff ff ff ff ff vext vext vext ff ff ff ff rules transforming uncal join free query ff decomposable 
unstructured query languages distributed data sources 
decomposition efficient sense certain naive evaluation strategy decomposed query expensive compute distributed database original applied centralized database 
proposed update operations underlying data model shown query decomposition method derive simple view maintenance method 
methods knowledge structure database 
useful general limitation virtue simple knowledge database improve query decomposition 
plan develop techniques incorporate information query decomposition 
acknowledgments peter buneman gerd hillebrand comments 
bd thomas ball fred douglis 
internet difference engine applications 
procs 
compcon february 
bdhs peter buneman susan davidson gerd hillebrand dan suciu :10.1.1.32.3916
query language optimization techniques unstructured data 
sigmod 
bdhs peter buneman susan davidson gerd hillebrand dan suciu 
query language optimization techniques unstructured data 
technical report university pennsylvania computer information science department february 
bds peter buneman susan davidson dan suciu 
programming constructs unstructured data 
proceedings dbpl italy september 
bk beeri 
logical query language systems 
hypertext concepts systems applications 
procs 
european conf 
hypertext pages 
bun peter buneman 
private communication 
cou courcelle 
fundamental properties infinite trees 
theoretical computer science 
db fred douglis thomas ball 
tracking viewing changes web 
procs usenix technical conference january 
gl timothy griffin leonid libkin 
incremental views duplicates 
international conference management data pages san jose california june 
ks david konopnicki oded shmueli 
draft qs query system world wide web 
proc 
vldb 
lmss alon levy alberto mendelzon yehoshua sagiv divesh srivastava 
answering queries views 
proceedings th symposium principles database systems san jose ca june 
lru alon levy anand rajaraman jeffrey ullman 
answering queries limited external processors 
pods 
appear 
pgmw papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
ieee international conference data engineering march 
qrs quass rajaraman sagiv ullman widom 
querying heterogeneous information 
international conference deductive object oriented databases 
