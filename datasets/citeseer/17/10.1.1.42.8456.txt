fully complete model ml polymorphic types samson abramsky marina lfcs division informatics university edinburgh king buildings mayfield road edinburgh eh jz uk 
mail samson dcs ed ac uk dipartimento di matematica informatica universit di udine viale delle scienze udine italy 
mail dimi 
linear realizability technique building partial equivalence relations categories linear combinatory algebras 
categories turn linear categories form adjoint model kleisli categories 
show special linear combinatory algebra partial involutions arising geometry interaction constructions gives rise fully faithfully complete model ml polymorphic types system keywords ml polymorphic types linear logic models geometry interaction full completeness 
game semantics define fully complete models various fragments linear logic aj am give fully models programming languages including pcf ajm ho nic richer functional languages mcc languages non functional features types non local control constructs am lai 
results crucially linear analysis intuitionistic arrow possible intensional setting game categories 
definitions game game categories quite complex requiring cumbersome quotienting operations 
technique linear realizability simpler direct alternative game constructions addressing full completeness issues 
linear realizability technique amounts constructing category partial equivalence relations pers linear combinatory algebra lca turns linear category form adjoint model category 
notion linear combinatory algebra introduced author abr refines standard notion combinatory algebra way intuitionistic linear logic refines intuitionistic logic 
construction models lca quite simple partially supported tmr linear ct 
clear yields models extensionality properties avoiding quotienting operations needed defining game categories models 
categories offer simple natural models second order polymorphic calculus girard system gir 
interest realizability techniques particular linear realizability especially connection full completeness full abstraction problems 
realizability regarded powerful tool mediating intensional extensional aspects computation intensional constructions am technique building directly interesting possibly fully complete models 
examples realizability appear fully model pcf alternative game model ajm provided algebra bracketed strategies 
categorical model type theory logic said fully complete aj types formulae morphisms interpretation interpretation denotations proof term entailment interpretation function category syntactical objects category denotations full 
notion counterpart notion full abstraction sense term language executable fully complete model possible quotient fully 
full completeness ask question theory induced model coincides precisely syntactical theory equations satisfied model called faithful realizes exactly syntactical theory 
fully faithfully complete model ml types built obtained instance construction considering special linear combinatory algebra partial involutions 
ml types universal closures simple types types form xn free fv fx xn algebra partial involutions arises context generalization girard geometry interaction due author aj abr abr 
powerful construction allows build new combinatory algebras recover previously known models viewing alternative perspective 
algebra partial involutions highly constrained algebra computations reversible 
partial involutions reminiscent copy cat strategies game categories combinators mediate required interactions arguments simply copying information input output ports 
proof full completeness consists showing model satisfies axioms axiomatization fully complete models ml types :10.1.1.34.4240
axiomatization models system called hyperdoctrines cro 
particular works context adjoint models 
consists main steps 
axiomatization fact morphism ml type generates decomposition possibly infinite typed bohm tree 
axiom rules infinite trees model introduced 
proving model partial involutions considered contain infinite typed bohm trees quite difficult requires study intermediate model 
model generated sierpinski consists possibly infinite bohm trees typed calculus constants 
crucial step proof consists proving simply typed calculus typical ambiguity constants totality tests definable finite typed trees 
totality tests allow tell apart normal forms appears appear 
ingredient approximation lemma lines ajm 
full completeness result obtained interesting research full completeness system produced fully complete denotational models small subclass ml types algebraic types see hrr 
literature fully complete models system bc hug 
model quotient term model game model 
models somewhat syntactical flavor constructions extremely complex 
model viewed denotational model fully complete class ml types 
section recall syntax ml types system results simply typed calculus theory satisfying typical ambiguity 
due statman new typed separability result 
section recall notion theta hyperdoctrine notion adjoint hyperdoctrine introduced formalize definition fully complete hyperdoctrine :10.1.1.34.4240
section linear realizability technique building categories 
section lca partial involutions described 
section proof full completeness model lca partial involutions sketched 
final remarks directions appear section 
authors thankful honsell jagadeesan laird longley martini plotkin simpson useful discussions issues 
ml polymorphism recall syntax class ml types system important results simply typed calculus theory satisfying typical ambiguity 
theory said satisfy typical ambiguity terms equated equated possible substitutions type variables 
result statman typical ambiguity theorem asserts exactly consistent theory satisfying typical ambiguity simply typed calculus infinitely type variables fij theory 
immediate consequence result consistent theory fragment system consisting ml types precisely fij theory 
second result concerns definability convergence tests simply typed calculus infinitely type variables constants satisfying typical ambiguity 
particular prove type convergence test terms detect presence constants term type 
implies immediately theory typical ambiguity simply typed calculus infinite type variables constants term containing normal form equated term normal form appear 
result proof full completeness model pers lca partial involutions 
assume reader familiar system see 
class ml polymorphic types system corresponds limited kind polymorphism allowed language ml 
definition ml types 
class ml type ml types defined ml type fv xg class simple types system simple types infinite set type variables stands xn 
terms ml types essentially combinatorics typically ambiguous terms simply typed calculus 
fact theory ml terms induces theory satisfying typical ambiguity 
result simply typed calculus infinitely type variables proved sta 
theorem statman typical ambiguity 
type fv fx xn fij exist types sn tv ar term bool bool lm fij true bool ln fij false bool true false corollary 
maximal consistent theory satisfying typical ambiguity simply typed calculus infinitely type variables fij theory 
ii maximal consistent theory fragment system consisting ml types fij theory 
clear section definition full completeness corollary ii non trivial fully complete model ml types system necessarily faithful realizes exactly fij theory ml types 
show convergence tests definable simply typed calculus infinitely type variables constants type variable theory satisfying typical ambiguity call 
definition typed convergence tests 
tn distinguished type variable ff 
define induction convergence test term ff ff follows tn iq ff ff xn ff tn ff ff ff ff convergence test terms defined give procedure deciding normal form contains divergent subterm 
normal form type tn instantiate free variables apply sequence convergence tests ff ff tn effect head reduction ms ff ff tn subterm definitely appears head position reduces identity detected 
term denote ff ff ff simply ff term type ff obtained instantiating type variables free 
theorem typed separability 
tn term 
ff ff ff tn ae normal form free theorem regarded typed bohm separability theorem sense think generic unsolvable term theorem allows tell apart normal forms unsolvable terms 
corollary 
theory satisfying typical ambiguity term normal form appears equated term normal form appear 
models system recall notion theta hyperdoctrine see cro 
essentially corresponds notion external model see 
give formal definition fully faithfully complete hyperdoctrine model 
define categorical notion adjoint hyperdoctrine axiomatization full completeness ml types :10.1.1.34.4240
adjoint hyperdoctrines arise kleisli indexed categories linear indexed categories 
follows assume indexed categories consider strict see cro details 
definition theta hyperdoctrine 
theta hyperdoctrine triple base category finite products consists distinguished object generates objects product operation theta 
denote objects op indexed cartesian closed category category cartesian closed categories strict cartesian closed functors collection objects cartesian closed fibre category indexed morphisms objects morphisms hom op cartesian closed functor called reindexing functor denoted object object functors theta ffl right adjoint functor theta theta projection ffl satisfies beck chevalley condition 
theta hyperdoctrine endowed notion interpretation language system types free variables xm interpreted objects morphisms xm typed terms xm xn tn interpreted morphisms category xm xn tn theta theta tn definition full faithful completeness 
theta hyperdoctrine 
fully faithfully complete class closed types hom fij normal form definition capture theta hyperdoctrines arise kleisli construction indexed linear category axiomatization fully complete models ml types :10.1.1.34.4240
definition adjoint hyperdoctrine 
adjoint hyperdoctrine quadruple base category finite products consists distinguished object generates objects product operation theta 
denote objects op indexed linear category category linear categories strict monoidal closed functors preserving comonad structure underlying collection objects linear fibre category indexed morphisms op indexed kleisli category assume cartesian closed 
object functors theta ffl theta right adjoint functor theta theta projection ffl theta satisfies beck chevalley condition 
models pers linear combinatory algebra canonical examples theta hyperdoctrines arise considering partial equivalence relation category combinatory algebra see cro chapter section details 
section show build category linear combinatory algebra lca 
category turns form adjoint model kleisli category gives rise adjoint hyperdoctrine 
start recalling definition linear combinatory algebra abr definition linear combinatory algebra 
linear combinatory algebra ffl applicative structure ffl unary injective operation distinguished elements combinators ffi satisfying equations equation principal type logical rule ix ff gamma identity yz ff gamma gamma gammaffi fl gamma gamma gamma cut xz ff gamma gamma gamma gamma gamma exchange kx ff gamma gammaffi fi gamma weakening wx ff gamma gammaffi ff gamma gamma gammaffi ff gamma contraction ff gamma dereliction ffi ff gamma gammaffi ff comultiplication xy ff gamma gamma gammaffi ff gamma gammaffi fi closed functoriality lca correspond hilbert style axiomatization gamma gammaffi fragment linear logic 
lca ffl form standard ca ffl combinatory version girard translation intuitionistic logic linear logic 
define ff ffl fi fi standard combinators defined terms linear ones see details 
recall bci algebra applicative structure ffl combinators 
definition define category turns symmetric monoidal closed 
definition 
ffl bci algebra 
define category pera follows 
objects pers theta symmetric transitive relations 
morphisms morphism equivalence class gamma gammaffi gamma gammaffi defined ff gamma gammaffi fi iff fl fl ff ffl fl fi ffl fl bci algebras standard pairing gives rise tensor product definition tensor product requires care lemma 
ffl bci algebra 
pairing combinator 
notation xyz 
pers omega defined transitive closure relation omega fffi ff fi ff ff fi fi notice particular bci algebra affine bck algebra relation omega transitive projections get fffi ff fi ff ff fi fi proposition 
ffl bci algebra 
pera symmetric monoidal closed category 
show lca gives rise linear category 
proposition 
ffl lca 
pera pera functor defined ff fi ff fig ffi oe oe symmetric monoidal comonad oe omega omega defined oe uf oe ffi isomorphisms hold immediately categories lca lemma 
ffl lca 
pers 
idempotency 
ffi 
uniformity threads gamma gammaffi 
gamma gammaffi delta equivalently ff gamma gammaffi 
ff ff 
commutativity 
second isomorphism lemma relevant full completeness 
fact isomorphism amounts exactly uniformity threads axiom axiomatization full completeness :10.1.1.34.4240
isomorphisms lemma highlight fact category degenerate model linear logic 
theorem 
ffl lca 
category pera linear 
kleisli category pera induced comonad category pera cartesian closed 
categories pera pera form adjoint model 
category pera isomorphic category pera pera category obtained standard realizability standard combinatory algebra show build adjoint hyperdoctrine lca theorem adjoint hyperdoctrine 
ffl lca 
gives rise adjoint hyperdoctrine defining set fr ag 
objects finite products set copies set particular terminal object set 
morphism set theoretic function morphisms fibre category equivalence classes gamma 
object define 
morphism define behavior functor morphisms morphism gamma ffi gamma 
functor theta defined follows 
theta 
morphism theta partial involutions affine combinatory algebra examples arise categorical version girard geometry interaction construction traced symmetric monoidal categories abr abr 
basic example lca introduced abr defined space partial functions natural numbers natural numbers applying construction traced category pfn sets partial functions 
briefly recall definition lca discussing categorical framework see abr abr details 
lca partial involutions shown provide fully complete model ml types see section arises subalgebra 
consider space partial functions natural numbers natural numbers 
ff injective denote ff gamma inverse ff 
show endow space structure lca 
algebra obtain affine full combi 
start fixing injective coding functions theta order define application allows transform input output function input output function 
creating infinitely copies input output function ff defining ff 
explain application computed geometrically language boxes wires arises general setting traced symmetric monoidal categories see jsv treatment 
represent input output function ff input port output port box see fig 

order define application ff ffl fi ff fi regard ff input output function coding particular ff gamma described matrix input output functions entry ff ij ff ij ff gamma gamma accounts contribution th input wire th output wire see fig 
ii 
ii ff ff ff ff ff ff ff ffl fi fi iii fig 

geometrical description linear application 
result application ff ffl fi input output function see fig 
iii ff ffl fi ff ff fi ff fi ff denotes union graph relations fi ff denotes fi ff formula computing application essentially execution formula girard geometry interaction gir 
definition operation applicative structure quite simple 
operation intended produce single copy ff infinitely copies ff 
obtained simply tagging copies natural number define ff gamma id theta ff left show affine combinators defined structure ffl 
formal algebraic definition combinators definition combinators 
fi ffi fg gamma defined 
defined id id id id id function defined equations symmetric closure ffl ffl ffl 
defined id id id id function defined equations symmetric closure ffl ffl ffl 
defined id function defined 
order define need fix theta defined id id id id id theta theta function defined equations symmetric closure ffl ffl ffl 
order define need fix theta defined id theta theta function defined 
ffi order define ffi need fix ffi theta theta defined ffi id theta id id ffi theta theta theta theta function defined ffi ffi 
order define need fix theta theta defined id theta id id id theta theta theta theta function defined equations symmetric closure ffl ffl 
simple intuitive geometrical explanation combinators language boxes wires 
example consider identity combinator satisfy equation ix order define convenient regard input output function coding 
identity combinator just copies informations lefthand input wire right hand output wire vice versa righthand input wire left hand output wire see fig 

fact satisfies identity equation simple geometrical explanation 
apply partial function see fig 
ii 
string connecting input output wires result application forgetting box corresponding gives immediately expected result see fig 
iii 
argument property trace symmetric monoidal category pfn underlying combinatory algebra 
particular axioms characterizing trace operation setting traced symmetric monoidal categories 
consider combinator satisfies equation yz 
concretely box input output wires input output wires applied argument input output wire appears argument plus extra input output wire output token intended enter exit 
connections wires inside box determined control flow right hand part equation 
control flow passes input port input port second port connected ii iii fig 

geometrical description input port second port connected unique port remaining connections obtained symmetry see fig 

property check result application expected 
omega omega omega omega jj omega omega omega omega jj omega omega omega omega jj omega omega omega omega jj ii fig 

geometrical representations briefly discuss remaining combinators 
combinator explained similar way affine combinator simply forgets second argument see fig 
ii 
order define need fix different indices tagging copies arguments remaining copies ignored phi phi phi phi phi phi phi phi phi phi phi phi omega omega omega omega jj behavior ffi explained similarly see :10.1.1.34.4240
essentially combinators definition functions mediate required interactions arguments simply copying information various ports 
possible conditions imposed partial functions order cut space maintaining closure application affine combinators 
subalgebra gives rise fully complete model section obtained considering partial involutions definition 
partial involution iff graph symmetric relation 
denote inv space partial involutions check partial involutions closed application operation combinators definition proposition 
pinv inv ffl affine combinatory algebra 
pinv highly constrained algebra computations reversible 
partial involutions reminiscent copy cat strategies game categories computational effect copying informations input output wires 
fully complete model section sketch proof category lca pinv section satisfies axioms gives rise fully faithfully complete model ml types :10.1.1.34.4240
axiomatization consists main steps :10.1.1.34.4240
axiomatization fact morphism generates decomposition possibly infinite typed bohm tree 
second step consists axiom rules infinite trees model introduced 
start discussing briefly axioms decomposition 
notice axiom expresses fact type empty uniformity threads axiom hold immediately models 
fact axiom hold need verify empty 
follows immediately instantiating empty 
uniformity threads axiom follows isomorphism gamma gammaffi gamma immediate consequence lemma section 
proof validity remaining axioms decomposition theorem essentially nature partial involutions requires careful analysis applicative behavior 
details lengthy proof appear :10.1.1.34.4240
difficult part proof full completeness model pera pinv consists proving finiteness axiom ruling infinite typed trees 
particular prove trees generated elements pers denotations ml types repeated applications decomposition theorem finite height 
order prove finiteness result need study intermediate model contains approximant terms possibly infinite trees 
intermediate model consists hierarchy simple pers sierpinski 
hierarchy gives rise model simply typed calculus constants base type 
prove approximation lemma lines ajm says graph partial involution closed polymorphic viewed union approximants 
approximants correspond essentially finite trees obtained truncating level tree generated applying decomposition theorem 
reasoning contradiction typed separability result section fact live closed polymorphic pers conclude trees finite height belong pers 
details proof appear :10.1.1.34.4240
final remarks directions conclude list remarks interesting issues remain addressed currently investigation 
ffl fully complete model ml types 
natural question arises happens ml types 
partial answer 
type nat nat nat type church numerals model partial involutions 
fact recursive functions functions natural numbers natural numbers encoded type nat nat 
similar problem arises consider term combinatory algebra 
models defined give full completeness ml types 
innovative construction called 
ffl question arises naturally model linear term combinatory algebra fully complete ml types 
conjecture case proof fact difficult 
logical relation technique relating term algebra term subalgebra partial involutions useful 
interest linear term algebras lies fact model generated essentially model shown fully complete algebraic types hrr 
ffl linear realizability technique building categories lca 
categories turn linear categories 
interesting carry investigation general properties categories define coproducts products 
ffl models partial involutions worthwhile investigating typed untyped calculi different system strategies ajm style represented partial involutions opponent moves player moves provide fully complete models simply typed calculus base constants 
untyped setting partial involutions strategies possibly provide fully models alternative dfh kno 
ffl category pinv models typed bohm trees naturally arise model induced sierpinski 
particular models simply typed calculus fixed point combinator suggested alex simpson 
infinite calculi interesting property investigated 
abr abramsky 
retracing paths process algebra concur 
abr abramsky 
axioms full abstraction full completeness appear 
abr abramsky 
interaction combinators complexity notes siena italy 
abramsky panangaden scott 
geometry interaction models combinatory logic appear 
aj abramsky jagadeesan 
new foundations geometry interaction inf 
comp 

aj abramsky jagadeesan 
games full completeness multiplicative linear logic symbolic logic 
ajm abramsky jagadeesan malacaria 
full abstraction pcf inf 
comp 
appear 
abramsky longley 
realizability models history free strategies draft 
abramsky :10.1.1.34.4240
fully complete models ml polymorphic types technical report ecs lfcs lfcs available www dimi papers soft copy ps lfcs ps gz 
am abramsky mccusker 
full abstraction idealized algol passive expressions tcs 
am abramsky 
concurrent games full completeness lics 
asperti longo 
categories types structures foundations computing series mit press 
bc breazu tannen coquand 
extensional models polymorphism tcs 
cro crole categories types cambridge university press 
dfh di franco honsell 
game semantics untyped calculus tlca lncs 
gir girard 
interpr etation des coupures de arithm etique ordre sup erieur th ese etat universit paris vii 
gir girard 
geometry interaction contemporary mathematics 
hug hughes 
semantics full completeness system phil 
thesis university oxford submitted 
hrr hyland robinson rosolini 
algebraic types models mfps main eds lncs 
ho hyland ong 
full abstraction pcf inf 
comp appear 
kno ker ong 
universal game models untyped calculus bohm tree strikes back csl lncs 
jsv joyal street verity 
traced monoidal categories math 
proc 
comb 
phil 
soc 

lai laird 
full abstraction functional languages control lics 
mcc mccusker 
games full abstraction fpc lics 
nic 
hereditarily sequential functionals proc 
symposium logical foundations computer science lncs 
sta statman 
definable functionals fij conversion arch 
math 
logik 
