dynamic instruction set computer michael brad hutchings dept electrical computer eng 
brigham young university provo ut dynamic instruction set computer disc developed supports demand driven modification instruction set 
implemented partially reconfigurable fpgas disc treats instructions removable modules paged partial reconfiguration demanded executing program 
instructions occupy fpga resources needed fpga resources reused implement arbitrary number performance enhancing application specific instructions 
disc enhances functional density fpgas physically relocating instruction modules available fpga space 
developing customized stored program processors convenient design technique combines enhanced performance application specific circuits flexibility general purpose programmable processors 
application specific instruction sets customized optimized control substantially improve performance simplest programmable processors 
fpgas provide excellent implementation platform application specific processors quick development time simplified design process 
addition sram fpgas provide ability reconfigure distinct application specific processor single device 
number general purpose processors developed show feasibility implementing processor architecture fpga 
custom processors successfully demonstrated advantages adding specialized hardware general purpose processor cores 
application areas processors include digital audio processing systems linear equations statistical physics 
limitation building customized processors fpgas lack hardware resources available specialized instruction sets 
instruction modules quickly consume resources largest fpgas available today 
reconfiguring fpga replace idle circuitry supported arpa contract number dabt subcontract national semiconductor application execution provide hardware resources available time configured fpga 
technique known run time reconfiguration rtr shown increase functional density reconfigurable fpgas 
disc processor uses rtr ameliorate fpga hardware limitations provide essentially limitless application specific instruction set 
early attempts modifying processor instruction set involved writable control store generating custom micro code application 
prism project extended idea augmenting instruction set standard risc processor application specific instructions tightly coupled fpga 
hardware images instructions extracted compiled source code transparent user 
project discusses dynamic approach involves swapping hardware compute configurations fpga resource demanded data flow token 
disc processor implements instruction instruction set independent circuit module 
individual instruction modules paged hardware demand driven manner dictated application program 
hardware limitations eliminated replacing unused instruction modules usable instructions run time 
application running disc contains source code indicating instruction ordering library application specific instruction circuit modules 
describing techniques implement disc 
include partial reconfiguration relocatable hardware linear hardware model 
architecture disc processor example custom instructions 
disc processing system including software hardware platform described 
conclude presenting results algorithm implemented disc 
partial fpga reconfiguration disc takes advantage partial fpga configuration implement dynamic instruction paging 
partial reconfiguration provides ability configure subsection fpga remaining logic operates unaffected 
sram fpgas reconfigured circuit cal atmel national semiconductor fpgas support ability partially reconfigure hardware resources 
ieee workshop fpgas custom computing machines napa ca april 
partially reconfigurable systems implemented proposed hardware multi tasking multi phase serial communication algorithm data acquisition system self reconfiguring processor 
addition caching logic increase hardware efficiency standard digital systems proposed partially reconfigurable fpgas 
disc uses partial configuration implement custom instruction caching 
instruction modules implemented partial configurations individually configured disc demanded application program 
initiating execution disc queries fpga presence custom instruction configuration 
custom instruction fpga execution initiated 
program execution pauses custom instruction configured fpga 
typical program executes custom instructions configured fpga available hardware consumed 
hardware custom instructions new custom instruction modules may configured fpga existing hardware removed 
replacing oldest custom instruction modules fpga newer modules fpga serves cache custom instruction modules 
example assembly language source code exemplifies partial configuration disc instruction insta operates memory location mem insta mem insta mem instruction instb operates mem mem instb mem mem loopback label defined loopback mem instruction cmp compares mem mem cmp mem mem instruction jne jumps loopback equal jne loopback continue mem instb mem mem instruction previous program insta instb cmp jne designed independent partial configuration source code representing program loaded disc processor begins execution 
sequencing instructions small fpga may execute configure follows operation instruction configure insta configure insta fpga execute insta execute insta execute insta execute second insta configure instb configure instb fpga execute instb execute instb configure configure fpga execute execute execute cmp execute cmp available execute jne execute jne available continue looping jne fails remove insta fpga full remove oldest module configure configure execute execute execute instb execute second instb remove fpga full remove oldest module configure configure execute execute previous example assumed instructions insta instb cmp jne consume available space single fpga 
partially configuring fpga allows additional instructions execute full fpga 
advantages partial configuration provides number advantages disc conventional configuration methods 
idle instruction modules removed room usable modules 
ability replace instruction modules system run time allows implementation instruction set larger possible single time configured fpga 
second configuration time substantially reduced 
disc fpga completely configured time new instruction needed configuration overhead dramatically reduced configuring requested instruction 
reducing size hardware configure significantly reduces configuration bit stream 
configuration bit stream reductions disc instruction modules fall complete fpga configuration 
significantly smaller bit stream corresponding configuration time reduced 
environment runtime configuration reducing configuration time limit reconfiguration overhead 
third system state saved fpga configuration 
conventional configuration techniques prevent preservation system state configuration destroying contents 
implementing disc conventional configuration methods require saving restoring system state program counter register values time configuration occurs 
prevent time consuming process saving restoring ieee workshop fpgas custom computing machines napa ca april 
state disc implements global controller remains fpga times 
summary partial configuration allows disc implement essentially infinite instruction set hardware limited configuration overhead 
relocatable hardware ability partially configure custom instruction modules allows disc implement important strategy relocatable hardware 
relocatable hardware implemented partially configurable fpgas provides ability relocate placement decisions partial configurations run time 
essential general purpose processor disc substantially improve run time hardware utilization 
sub modules traditional digital systems require single fixed location hardware strict global local physical constraints 
submodules traditional systems paged hardware fixed location pose problems global optimizations static circuitry improve hardware utilization 
run time partial reconfigurable system fixed locations partial configurations pose serious performance problems 
disc modules designed single physical location instructions library inevitably overlap hardware 
overlapping instructions operate properly fpga time 
overlapping instructions frequently application program configuration overhead needed replace instructions quickly system bottleneck 
disc removes problems designing custom instruction module multiple locations fpga 
flexibility multiple locations disc custom instructions significantly improves run time utilization 
instruction modules initially configured fpga close possible avoid wasted hardware modules 
hardware space full additional instruction modules placed locations older unneeded instruction modules currently lie 
relocatable hardware allows run time constraints conditions dictate instruction module placement optimal hardware utilization 
relocatable hardware implemented designing custom instruction modules firmly defined global context 
global context provides physical placement positions communication network necessary modules operate correctly 
global context partitions available hardware array potential placement locations relocatable instruction modules 
communication network provided placement location insure adequate communication global controller instruction modules location 
order design instruction modules fit global context instruction modules physically independent 
physical layout instruction module affect physical layout placement module library 
linear hardware space disc implements relocatable hardware form linear hardware model 
name suggests model linear dimensional hardware space 
dimensional grid configurable logic cells organized array rows location specified vertical location module size specified module height rows 
global context linear hardware model consists uniform communication network global controller 
communication network constructed running global signal vertically die spreading global signals width die parallel see 
linear hardware space network global controller disabled communication linear hardware space 
communication network provides access global resources instruction modules performs intermodule communication 
global controller specifies communication protocol controls global resources global state monitors circuit execution 
global controller communication network remain location application execution preserve global context 
gain access global signals sub modules linear hardware space designed horizontally width fpga 
modules lie perpendicular global communication signals full access global signals regardless vertical placement see 
submodules span entire width fpga module may consume arbitrary amount hardware varying height 
ieee workshop fpgas custom computing machines napa ca april 
module placed vertical location width fpga global signals simplified custom instruction module 
relocatable circuit modules communicate established global protocol operate properly vertical location 
run time environment circuit modules relocated needed optimize available hardware space 
disc architecture disc architecture implements relocatable hardware linear hardware model single national semiconductor clay fpga coupled external ram 
clay provides array fine grain logic cells allowing complete rows linear hardware space 
complete processor coupling global controller library custom instruction circuit modules see 
custom module address data control instruction module global control instruction module processor memory library module instruction fft edge detection add multiply subtract custom module disc linear hardware space 
global controller global controller provides circuitry operating monitoring global resources external ram internal communication network global state 
global controller consumes complete rows approximately chip leaving rows available custom instruction modules 
physical layout global controller estimated gates communication network seen 
fd fd inv fdmux fdmux fdmux fdmux fdmux fdmux fdmux fdmux inv fdmux xond fdmux bufz fdmux bufz inv bufz fdmux bufz xond fdmux fdmux fdmux fdmux fdmux fdmux fdmux fdmux fdmux fdmux bufz fdmux fdmux disc global controller layout 
architecture global controller seen comprised submodules ffl data register dr stores intermediate results provides inter module communication buffering assists complex address generation bits ffl address register ar provides standard addressing modes memory access bits ffl program counter pc provides sequencing capability processor bits ffl status register sr stores internal state processor bits ffl instruction register ir stores opcode current instruction bits ffl global control unit contains circuitry necessary preserve communication protocol sequence processor states interface data register instruction global control unit status register program counter memory data external memory memory control status memory address memory address custom instructions data register feedback data register value memory data opcode address register disc global controller architecture 
global controller provides consistent communication interface standard protocol custom instructions vertical location 
global signals available custom instructions include ffl data register value accesses contents data register bits ieee workshop fpgas custom computing machines napa ca april 
ffl data register feedback provides new values data register bits ffl memory address allows address generation control custom instructions bits ffl memory data allows bi directional access memory data custom instructions bits ffl status signals provides control capability custom instructions bits ffl instruction register provides opcode current instruction bits 
global controller responsible sequencing instruction cycles modules 
instruction cycles implemented global controller ffl instruction fetch ffl operand fetch ffl halt processor hp ffl custom cycle cc ffl instruction execution ex 
cycle stores current program memory instruction register increments program counter 
cycle stores current program byte address register increments program counter 
hp cycle causes processor resources remain idle configuration 
cc cycle complex custom instruction modules adding additional cycles affect global resources 
ex cycle loads value data register contents data register feedback path 
instruction library operates possible instruction cycle sequences standard custom 
standard instruction sequence follows simple cycle execution ex 
instruction completes computation function single clock cycle basic arithmetic logic operations operate sequence 
custom instruction sequence offers additional cycles complex custom instructions 
custom sequence begins cycles followed 
sequence varies inserting cc cycles necessary complete complex application specific operation 
sequence completes ex instruction cycle 
custom instruction module complete control number cc cycles needed particular function 
instructions add cycle require thousands cycles single operation 
displays instruction sequences 
global control unit contains number default instructions necessary controlling global resources 
instructions sequencing status control memory transfer include ffl set carry sets carry bit status register ffl clear carry clears carry bit status register ffl store data register store data register memory ex custom instruction sequence cc cc ex 
standard instruction sequence disc instruction sequences 
ffl load data register load data register memory ffl conditional jump jump carry set 
instructions follow standard instruction sequence cycles 
instructions coupled custom instruction library designed particular application provide complete instruction set processor 
application implement instruction set size paging instruction modules demand driven manner instruction library 
custom instruction modules custom instruction modules vary size complexity designed fit global context described 
specifically module contains decode data path unit 
complex modules contain additional control structures 
decode unit assigns specific op code custom instruction responsible acknowledging presence global controller 
decode unit compares contents ir match opcode cycle 
positive match module signals global controller hardware instruction sequencing continues 
data path responsible providing proper connections global communication network adhering established communication protocol 
instruction modules executing refrain sending signals communication channel prevent corruption operating instructions 
data path unit provides new value data register ex stage 
instructions perform function modifying dr custom instruction modules varying size implemented disc 
vary simple single row shifter complex edge detection module rows 
table shows current instructions available disc 
circuit layout adder module seen 
system operation disc processor implemented custom board exclusively study 
board includes static bus interface circuitry clay fpgas memory 
configuration controller implemented fpga monitor ieee workshop fpgas custom computing machines napa ca april 
module rows gates shifter comparator add subtract addressing modes masking operations logical operators big level operations mean filter edge detector table sample custom instruction modules 
xo nd xond xond bufz xo xond xond xo disc adder custom module layout 
processor execution request instructions host 
disc implemented second fpga application program memory stored adjacent memory see 
board operates unix operating system controlled host device driver 
pc host bus interface ram configuration clay controller isa bus disc clay processor disc system 
performance main consideration disc implemented primarily study dynamic instruction set modification partial reconfiguration 
research tool processor bits operates host bus speed mhz maximum operating speed calculated mhz 
processor widths operating speeds increased device densities increase tool enhancements available 
disc application initiated loading program memory target application second configuring disc fpga global controller 
execution processor validates presence instruction hardware 
instruction requested application program exist hardware processor enters halting state requests instruction module host 
receiving request instruction module host evaluates current state disc fpga hardware chooses physical location requested module 
physical location chosen available fpga resources existence idle instruction modules 
possible instruction module loaded fpga location currently occupied instruction module 
empty hardware locations available simple lru algorithm remove idle hardware 
host modifies bit stream requested hardware module reflect placement changes 
hardware module configured disc platform sending new configuration system 
provides simplified flow chart disc instruction execution 
instruction 
hardware available 
remove old instruction compute new location instruction configure module execute instruction fetch pc instruction disc instruction execution 
drawback partially configuring device run time overhead caused continually reconfiguring instruction modules 
current board configures disc processor sending configuration bit stream bit bus transfer pc isa bus 
operating maximum transfer rate mb sec pc host capable configuring row 
represents processor cycles simple instruction executions row configured 
removing current system board bus limitations configuration speeds improve factor operate device maximum mb sec 
custom instruction modules remain resident processor long periods time decrease reconfiguration overhead 
addition custom instruction modules provide performance improvement sequence general purpose alu instructions justify cost reconfiguration run ieee workshop fpgas custom computing machines napa ca april 
time 
application example demonstrate tradeoff 
application example simple image mean filter developed sequence general purpose instructions application specific hardware module demonstrate performance improvements gained tailoring hardware application 
demonstrations calculate mean value pixel image obtaining average neighborhood follows gamma gamma coefficient simplify design 
grey scale image test image cases 
original test image 
general purpose approach general purpose approach required instructions processor core add subtract shift enhanced addressing modes 
additional modules comprised total rows leaving rows free custom instruction modules 
execution algorithm centered inner loop calculation neighborhood mean value 
calculating pixel value involved individually adding pixel neighborhood 
instructions summing operation involved address calculation pointer manipulations 
computation pixel finishes shifts division 
complete processing pixel required average instructions clock cycles 
processing complete image including overhead required ms mhz 
application specific approach application specific approach significantly improves performance algorithm assuming control address generation buffering pixel values pipelining arithmetic 
rows hardware extra registers arithmetic operators control logic consume significantly hardware simple instructions general purpose approach 
mean instruction module calculates average neighborhood sliding window seen 
numbered element sliding window represents pixel register custom module 
loading entire window memory pixel register values shifted represent sliding window see 
registers loaded new pixel 
sliding pixel window 
window registers loaded custom instruction module adds pixel values parallel custom adders seen 
division achieved shifting results bit positions 
shift dataflow mean instruction module 
mean instruction requires clock cycles evaluate pixel image 
clock cycles scheduled follows 
load register 
load register 
load register 
wait add delay parallel add 
write results image memory 
calculate new address 
shift register window reducing pixel calculation clock cycles eliminating address calculation overhead reduces clock count general purpose case times speedup 
operating mhz image filtered ms displays image filtered mean custom instruction 
ieee workshop fpgas custom computing machines napa ca april 
test image filtered mean custom instruction 
configuration overhead cost reconfiguring applicationspecific instruction module high configuration overhead considered comparing approaches 
row mean instruction requires additional configuration raising total cycle count 
mean configuration overhead represents total operating time 
device configuration speeds maximized configuration overhead reduced total operating time 
extra modules needed general purpose approach require configuration 
represents total operating time 
considering high cost configuration total operating time mean filter custom instruction provides times speedup general purpose approach see table 
general application purpose specific rows operation cycles raw speedup configuration cycles total cycles actual speedup table performance comparison general purpose application specific approaches 
disc processor successfully demonstrates application specific processors arbitrarily large instruction sets constructed partially reconfigurable fpgas 
relocatable hardware model improved run time utilization fpga resources linear hardware model provided convenient framework relocating custom instruction modules 
disc demonstrates general concept alleviating density constraints fpgas partially reconfiguring device run time 
techniques partial configuration relocatable hardware linear hardware model implemented general purpose processor offer similar advantages digital architectures 
may enhance usefulness fpga processors providing demand driven computation 
addition techniques may allow fpga computing machines operate dynamic environments multi tasking operating systems 
digital architecture benefit demand driven hardware may find techniques useful 
edinburgh uk 
cal preliminary data sheet 
athanas silverman 
processor reconfiguration instruction set metamorphosis 
computer march 
atmel san jose ca 
configurable logic design application book 
rosenberg 
data acquisition systems cache logic fpgas 
configurable logic design application book pages 
atmel san jose ca 
davidson 
fpga implementation reconfigurable microprocessor 
proceedings ieee custom integrated circuits conference pages 
hutchings 
density enhancement neural network fpgas run time reconfiguration 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
fagin 
quantitative measurements fpga utility special general purpose processors 
journal vlsi signal processing august 
french taylor 
processor 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
ling 
data driven computer virtual hardware 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 

dynamically reconfigurable logic undergraduate projects 
moore luk editors fpgas proceedings international workshop field programmable logic applications oxford england september 
ee cs books 
ieee workshop fpgas custom computing machines napa ca april 
dunlop 
dynamic reconfiguration fpgas 
moore luk editors fpgas proceedings international workshop field programmable logic applications pages oxford england september 

reconfigurable multi bit processor dsp applications statistical physics 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
national semiconductor 
configurable logic array clay data sheet december 
agrawala 
dynamic problem oriented redefinition computer architecture microprogramming 
ieee transactions computers november 
rosenberg 
implementing cache logic tm fpgas 
configurable logic design application book pages 
atmel san jose ca 
hutchings 
nano processor low resource reconfigurable processor 
buell pocek editors proceedings ieee workshop fpgas custom computing machines pages napa ca april 
wolfe shen 
flexible processors promising application specific processor design approach 
proceedings st annual workshop microprogramming microarchitecture micro pages san diego ca november 
