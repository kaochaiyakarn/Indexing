new advances graphhtn identifying independent subproblems large htn domains describe new method extracting knowledge hierarchical task network htn planning problems speeding search 
knowledge gathered propagating properties tree represents disjunctively possible decompositions htn planning problem 
show knowledge search process graphhtn planner split current refined planning problem independent subproblems 
new experimental results comparing graphhtn ordinary htn decomposition implemented planner 
comparison performed set problems um translog domain large htn transportation domain considerably complicated known logistics domain 
compare graphhtn planners ipp blackbox translated um translog domain strips style representation 
graphhtn performed considerably better um translog ipp blackbox 
previous lotem nau hendler developed graphhtn algorithm hybrid planning algorithm hierarchical task network htn planning sacerdoti currie tate combination htn style problem reduction graphplan style planning graph generation blum furst 
extend new results 
show new way extract properties htn planning problems speed search 
new properties propagated graphhtn planning tree tree represent disjunctively possible htn decompositions copyright american association artificial intelligence www aaai org 
rights reserved 
amnon lotem dana nau department computer science institute system research university maryland college park md lotem nau cs umd edu planning problem 
search algorithm exploits properties splitting current refined planning problem independent subproblems 
show solving independent subproblems separately merging solutions planner searches significant smaller search space achieves significant performance improvement solving planning problem 

compared graphhtn erol traditional htn planner set problems large htn domain um translog andrews 
um translog domain order magnitude larger size number features example known logistics domain 
comparison meaningful previous results lotem nau hendler original motivation htn planning handle large domains 

compared graphhtn blackbox ipp um translog domain 
perform comparison needed translate um translog strips style action representation 
developed algorithm translating htn planning domains strips style domains works correctly htn domain contains recursive methods 
describe experience translation 
algorithm produced domain big ipp koehler blackbox kautz selman handle successfully 
overcome problem tried encoding um translog domain strips style domain hand directly initial domain description 
resulting domain large blackbox computer 
compact ipp handle ipp ran considerably efficiently problem graphhtn 
starts short background section htn graphhtn planner 
describes new properties propagated planning tree exploited identify independent subproblems 
describes translation um translog domain 
performance tests tests results section 
conclude suggestions 
background htn planning htn planning ai planning methodology creates plans task decomposition 
planning problem specified initial task network collection tasks need performed specified constraints 
planning process decomposes tasks initial task network smaller smaller subtasks task network contains primitive tasks operators 
decomposition task subtasks performed method domain description 
method specifies decompose task set subtasks 
method associated various constraints limit applicability method certain conditions define relations subtasks method 
htn planners traditionally classical refinement search finding plan 
new approaches solving htn problems include encoding htn problems propositional satisfiability problems mali kambhampati mali graphhtn lotem nau hendler 
graphhtn planner graphhtn hybrid planning algorithm htn planning combination htn style problem reduction graphplan style planning graph generation 
algorithm builds explicit data structures represent disjunctively possible solutions planning graph blum furst planning tree lotem nau hendler 
planning tree tree expresses possible ways decompose initial task network htn methods 
planning graph context graphhtn states tasks planning tree applicable time step facts true time step 
presents example planning tree simplified planning problem um translog domain 
initial task network represented transport tasks top tree transporting transporting 
transport decomposed carry direct subtask uses truck uses forth 
algorithm works follows 
graphplan algorithm incrementally increases length plan searched 
iteration extends planning 
root transport carry direct vehicle drive drive load top carry direct drive transport vehicle 
dooropen unload top unload planning tree simplified version um translog 
ovals represent methods rectangles tasks tree performing task decompositions generate actions current time step 
actions generated far process extending planning graph 
certain conditions hold algorithm starts search solution planning tree planning graph 
solution current plan length plan length incremented process repeats 
graphhtn produces plans graphplan format actions may occur time interfere 
graphhtn algorithm sound complete guaranteed report plan shortest parallel length plan exists 
subsection describes search algorithm graphhtn required background understanding new enhancements 
search goal search algorithm find solution subtree planning tree 
solution subtree subtree planning tree properties root included 
instance compound task included exactly children included 
instance method included subtasks included 
node assigned properties start time time 
start time earliest time step action starts 
time latest time action subtree finished 
primitive tasks 
start time assignment define solution plan solution preconditions primitive tasks constraints methods satisfied solution plan performed 
highlighted example solution subtree 
time interval start indicates start time assigned corresponding task 
search solution subtree performed top right left manner 
top direction means nodes selected solution tree selection ancestors 
right left direction means algorithm selects tasks try finish time selecting set tasks finished 
search algorithm maintains types sets set tasks algorithm committed examine selection time set facts algorithm committed true time commitments result including solution tasks precondition established 
time algorithm scans tasks decides task select assigning time postpone selection earlier time step adding 
selected task algorithm selects decomposition method adds subtasks performed successor subtasks method 
selection decisions actions initialize tasks select transport decompose select carry direct decompose select unload top decompose select door closed decompose select close door start close door start door closed add unload tasks add open door subgoals postpone transport add tasks tasks transport transport carry direct transport unload top transport door closed transport close door transport transport tasks example decisions actions taken searching solution time steps long planning tree 
unload unload transport primitive task pt leads assignment start time pt certain ancestors pt pt offspring performed 
start time assigned task certain predecessors task added successors assigned start time 
process algorithm inserts preconditions tasks start time 
algorithm avoids selecting tasks mutually exclusive tasks delete facts 
presents search scenario tree 
search plan time steps 
initially transport tasks inserted tasks 
algorithm scans handles tasks tasks builds list tasks tasks scanned time step 
propagating properties planning tree earlier versions graphhtn search process pruned search space information propagated forward planning graph 
facts reachable initial state actions applicable time step 
applicable actions selected solution 

actions exclusive selected time step 
information associated time steps supply clues search algorithm possible consequences selecting specific decomposition method time step 
assumed propagating certain properties planning tree opposite direction search bottom left right search process able better decisions search goes right left top 
associate node planning tree information facts added deleted required precondition result selecting solution 
section describes information identify independent subproblems 
explain set facts computed 
computed similar way 
search performed top right left define facts facts possibly added actions subtree facts possibly added actions subtrees nodes necessarily ordered 
example planning tree described set door closed includes facts computed follows door open load top loc door open door open vehicle door open door closed load loc open door door open door open door open generated node propagated parent propagated predecessors propagated children door closed vehicle door open door closed close door door open computing set propagating set planning tree 
door closed part set propagated upward subtasks door closed task 
vehicle door open part set propagated subtasks ordered door closed task 
exact equations computing appear 
sets computed single scan planning tree roughly depth manner search process 
time complexity computing properties number nodes planning tree 
computation change time complexity graphhtn required building tree 
empirically computation properties added graphhtn running time 
efficiency purposes property encoded bit vector bit represents different possible fact domain 
identifying independent subproblems works past korf yang nau hendler desjardins dealt different ways reducing complexity planning working separately smaller subsets original problem solutions merged 
motivation similar approach different 
try identify splitting opportunities occur result refining planning problem search opportunities necessarily exist original instance primitive task methods instance non primitive task subtasks instance method 
subtask method ordered predecessor subtask method subtask ordered method node planning tree method task set equations computing 
problem prior refinement 
example package transportation problem planner assigns package different truck stage search problem split independent subproblems responsible transporting single package 
identifying independent subproblems search solving independently achieve significant complexity reduction 
problem independent subproblems planner take advantage independence cost solving problem behaves approximately model cost subp cost subp planner handles subproblems separately cost cost subp cost subp relatively small splitting approach cost effective 
question efficiently identify subproblems split 
search process graphhtn selects time step set tasks try finish time defines refined problem solved time 
definition refined problem 
refined planning problem graphhtn tasks subgoals planning graph planning tree current time tasks set tasks planner committed examine time subgoals set subgoals true time 
splitting current problem subproblems means split tasks subgoals sets separate sets 
certain conditions hold call split independent split 
definition independent split 
subp refined planning problem graphhtn solve time subp tasks subgoals subp subp set subproblems form subp subp independent split subp iff properties held tasks subgoals properties assures subp subp define real split tasks subgoals sets 
property technical way assure search subproblems performed separate subtrees planning tree 
properties assure solutions subproblems interfere 
properties imposes subgoals split subproblems achieve 
algorithm finding independent split definition defined subsection 
independent subproblem split solved separately 
proposition guarantees define set tasks union individual tasks set 
similar extension definitions 
planner solve independent subproblems original problem 
proposition 
subp subp independent split subp union set solutions sol subp respectively solution subp 
solution sol subp union solutions sol sol subp respectively outline proof 
part soundness union set solutions sol subp respectively solution subp subp union subp properties dependencies interference solutions different subproblems properties part completeness define sol set elements sol accomplishing tasks predecessors 
properties show overlap sol sol solution 
split algorithm split algorithm sets computed nodes planning tree search 
search process calls split algorithm completes current time step intends refined problem earlier time step 
point search defined passes sets arguments split algorithm 
algorithm shown 
general idea algorithm create implicitly dependency graph tasks tasks find connected components graph 
components represent independent subproblems 
algorithm scans tasks tasks task classified finds closure set tasks depends tasks closure worst case dependency tasks tasks checked 
cost single dependency check set facts planning problem complexity split algorithm tasks 
algorithm invoked time search process completes assignment tasks time step 
empirically graphhtn spent planning time algorithm 
finding solutions independent subproblems set independent subproblems subp subp subproblem subp searched sequence 
failure find solution subproblems means solution subp backtracking subp performed 
solving algorithm split tasks subgoals candidates tasks subp num mark candidates unclassified foreach task candidates candidates candidates unclassified define new subproblem subp num subp num num num subgoals mark classified num num candidates subgoals foreach 
procedure tasks subgoals candidates subgoals foreach task candidates depend add task closure tasks tasks subgoals subgoals subgoals mark classified tasks subgoals candidates subgoals foreach procedure depend return false properties hold return true 
split algorithm independent subproblem resulting assigning start time nodes planning tree participate solution 
result subproblems solved solution subtree marked extra merging effort required 
experimental comparison order examine value splitting planning problems independent subproblems compared performance graphhtn new splitting ability 
handling large domains important motivations htn planners performed tests set problems um translog domain andrews 
um translog domain inspired cmu domain veloso um translog deals various types packages vehicles procedures handling packages order magnitude larger cmu logistics 
um translog domain specified htn operators decomposition methods 
typical problems domain deal large number vehicles locations respectively test problems 
initial state test problems includes facts 
results performance tests described test results section 
translating htn problems strips style problems general htn planning strictly expressive strips style planning erol 
means strips style planning problem translated htn planning problem vice versa 
kind htn problems translatable include unbounded recursion methods um translog real life applications recursive methods 
domains translated principle strips representation 
order compare graphhtn action planners ipp blackbox defined algorithm translating non recursive htn domains strips style representation followed algorithm translating um translog strips 
resulting domain big ipp blackbox handle successfully 
second trial encoded um translog domain strips style domain hand directly initial problem description 
domain able run ipp set problems get performance results 
experiences summarized sections 
algorithm translating operators recursive methods exist domain htn planning domain translated strips style domain follows find root tasks domain tasks appear subtasks method 
example um translog domain transport root task 
decompose root task available htn methods 
recursion mean situation instance method ancestor planning tree instance method 
algorithm extended handle bounded recursion starting decomposition tasks initial task network translating problem just domain continue decompose generated tasks recursively tasks decomposed termination guaranteed recursion methods 
process translate occurrence method described paragraph translate occurrence primitive task ad described paragraph 
translating occurrences methods 
occurrence method translated strips operator om follows preconditions om assures completions subtasks decomposes task instance subtasks tk precondition om consist propositions completed tk completed tj completed artificial proposition added domain indicate completion tj task 
subtasks ordered preconditions produced subtasks appear method 
completion subtasks taken care translation order constraints described paragraph 
om single add effect completed indicates completion 
example see 
example door closed subtask method subtask generates precondition operator 
precondition specific represent exact occurrence method augmented additional arguments 
translating occurrences primitive tasks 
occurrence primitive task translation ot sets preconditions add effects add effects ot include proposition completed 
translating constraints 
order constraint instances subtasks translated adding precondition completed operator generated decomposition 
example load top method load subtask ordered door closed subtask 
result precondition load completed added operators generated decomposing door closed close door operator 
things shorter describing rest method constraints initially translated 
general contribute additional add effects preconditions existing operators 
translating planning problem 
htn planning problem htn domain specified initial task occurrence method load top package truck location door open load door closed formula om strips operator op load top method package truck location pre door closed completed load add load top completed translation occurrence method strips operator network performed initial state 
initial task network translated strips operator exactly way htn methods translated strips operators preconditions solve problem operator assure completion tasks initial task network 
solve problem single add effect solve 
strips planning problem specified initial state identical htn problem single goal solve problem completed 
limitations 
translation algorithm translate subset um translog domain strips style representation 
readability resulting domain poor 
result adding operators add effects preconditions maintain htn constraints 
addition real operators resulting plans include artificial operators represent methods 
quite easy filter artificial operators plan 
guarantee filtered plan minimal parallel length property usually guaranteed planners ipp blackbox 
performance ipp blackbox resulting problems poor 
able solve simplified versions test problems 
main difficulty planners large number instantiated actions 
strips operators represent occurrences htn methods occurrences primitive tasks include additional variables distinguish different occurrences method different occurrences task 
additional variables caused dramatic increase number instantiated actions 
overcome problems encoded um translog problem strips style problem hand directly initial problem description andrews 
manual encoding manual strips encoding um translog avoided artificial operators representing methods 
tried keep number instantiated actions small somewhat limited success 
limited expressivity strips required splitting general purpose operators drive specific operators drive regular drive adding artificial add effects artificial preconditions operators impose order requirements exist domain 
resulting domain compact generated translation algorithm 
ipp able solve planning problems domain invoking preprocessor nebel dimopoulos koehler 
filters initial facts operators relevant solving problem 
blackbox currently distributed preprocessor able solve problems domain 
performance results ipp tests results section 
performance issues experience exposed difficulties encoding big planning domains strips representation 
example illustrates difficulties 
example 
um translog required obtain permit transporting hazardous package starting actual procedure transporting package 
global requirement natural pre requisite actions involved transporting package drive load unload 
htn planning simply express requirement creating compound tasks pickup responsible preparation activities obtain permit carry responsible carrying package see illustration column 
order constraint tasks assures carry actions starts completion pickup actions 
strips representation clear advance action carrying package precondition permit added action come carrying phase 
actions open door 
permit added transport pickup carry obtain permit open door drive precondition open door package variable added open door operator open door truck package pre permit door closed add 
means open door package specific encodes global requirement 
situations kind cause problems encoding debugging strips style domain difficult 
basic operators encode global requirements complicated changes domain 
example basic operators open door changed global requirement encode changed removing requirement permit transporting hazardous package 
need add additional variables operators shown example increases significantly number instantiated actions 
tests results methodology experiments conducted 
compared performance graphhtn new ability split planning problem independent subproblems 
second compared graphhtn erol htn planner uses classic refinement search ipp koehler blackbox kautz selman 
tests performed mhz pentium ii mb ram 
performance results shown blackbox able solve problems machine 
set problems experiments 
problems um translog domain 
problems generated automatically packages problem patterns testing 
htn version um translog domain running graphhtn 
manual strips encoding um translog running ipp 
cpu time sec cpu time sec independence independence packages packages packages packages packages packages problem number problem number graphhtn ipp results presents graphically total cpu time number search nodes required solving problems graphhtn identifying independent subproblems 
note diagrams plotted logarithmic scale time number nodes 
number search nodes explored graphhtn independence component significantly smaller running graphhtn 
problems packages cpu time solving problems independence component significantly shorter solving 
problems packages building graph dominant time significant difference total running times 
presents graphically total cpu time number search nodes explored solving problems graphhtn ipp 
graphhtn version independence component 
comparison ipp graphhtn ran significantly faster explored significantly smaller number nodes 
comparison graphhtn plans optimal parallel length plans necessarily optimal 
graphhtn solved problems significantly faster 
furthermore able solve problems packages 
graphhtn written written lisp due big performance gap re coding number nodes independence independence solving problem identifying independent subproblems cpu time number search nodes packages packages packages packages packages packages problem number problem number number nodes graphhtn ipp graphhtn ipp cpu time number search nodes 
maximal value assigned problems solved tested planner memory problems probably big difference 
regarding number search nodes big difference graphhtn 
note amount space required exploring search node inherently bigger required exploring node graphhtn 
discussion presents new way extract knowledge htn planning problem disjunctive representation knowledge speed search 
define novel set properties associated nodes planning tree disjunctive data structure graphhtn planner represent possible decompositions htn planning problem 
show properties search split current refined problem independent subproblems 
show experimentally solving independent subproblems separately merging solutions planner achieves significant performance improvement alternative splitting problem 
approach propagating properties planning tree quite general believe possible propagating useful properties 
step examining disjunctive planners complex planning domains 
particular compared graphhtn ipp blackbox um translog domain contains complications large number operators large domains variables large initial state requirements desired order actions plan 
tested problems graphhtn significantly better performance ipp blackbox unable solve problems computer 
important advantages graphhtn ability search disjunctive information gathered problem prior search 
particular graphhtn information possible split problem independent subproblems 
comparison graphhtn action planners problematic um translog domain translated strips style representation 
htn problems um translog recursive method calls occur translation done automatically 
result translation non compact strips style domain big ipp blackbox handle 
hand alternative approach performing strips encoding hand directly domain description difficult error prone 
reasons limited expressivity strips language forces project high level requirements order tasks level actions 
um translog represent class planning problems solved better htn planning action planning 
approaches successfully action planning disjunctive planning adopted successfully improve efficiency htn planners 
plan explore additional opportunities htn specific properties examine alternative approaches searching planning tree 
acknowledgments wish jim hendler helpful input 
research supported part contracts army research laboratory daal naval research laboratory air force research laboratory nsf dmi 
andrews erol hendler 
um translog planning domain development benchmarking planning systems 
technical report department computer science university maryland college park cs tr 
blum furst 
fast planning planning graph analysis 
artificial intelligence 
currie tate 
plan control open planning architecture 
bsc expert systems conference cambridge university press 
desjardins 
coordinating planning activity information flow distributed planning system aaai fall symposium distributed continual planning aaai technical report fs aaai press 
erol hendler nau 
sound complete procedure hierarchical task network planning proc 
aips 
erol nau hendler 
htn planning complexity expressivity 
proc 
aaai 
kautz selman 
blackbox new approach application theorem proving problem solving 
working notes workshop planning combinatorial search held conjunction aips pittsburgh pa 
korf 
planning search quantitative approach 
artificial intelligence 
koehler nebel hoffman dimopoulos 
extending planning graphs adl subset 
proc 
ecp toulouse france 
lotem nau hendler 
planning graphs solving htn planning problems 
proc 
aaai mali kambhampati 
encoding htn planning propositional logic 
proc 
aips 
mali 
hierarchical task network planning satisfiability 
proc 
ecp 
nebel dimopoulos koehler 
proc 
ecp 
nau smith erol 
control strategies htn planning theory versus practice 
aaai iaai 
sacerdoti 
nonlinear nature plans 
proc 
ijcai 
hendler nau 
analyzing external conditions improve efficiency htn planning 
proc 
aaai 
veloso 
learning analogical reasoning general problem solving 
phd thesis school computer science carnegie mellon university 
technical report cmu cs 
yang nau hendler 
merging separately generated plans restricted interactions 
computational intelligence journal 
vol 
pp 


