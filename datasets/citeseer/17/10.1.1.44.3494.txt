foetus termination checker simple functional programs andreas abel july introduce simple functional language foetus lambda calculus tuples constructors pattern matching supplied termination checker 
checker tries find founded structural order parameters function prove termination 
components check algorithm function call extraction program text call graph completion finding lexical order function parameters 
html version contains ready run web examples 
informatics problem termination special interest part problem program verification instance 
halting problem undecidable method prove disprove termination programs systems termination checkers developed 
focused functional programs designed simple language foetus implemented termination prover 
foetus simplification munich type theory implementation partial type theory ala martin theoretical computer science institute computer science university 
munich germany email abel informatik uni muenchen de 
want supervisor thorsten altenkirch rolf friendly support technical questions 
german foetus abbreviation funktionale termination sprache 
expresses derived german term mum 
foetus language lof extended tuples constructors pattern matching 
syntax see section 
prove termination functional program founded order product function parameters arguments recursive call smaller corresponding input regarding order 
limited structural orderings 
foetus tries find order collecting recursive calls function belonging behaviour function arguments 
handle mutually recursive functions call graph constructed completed 
section introduces foetus body syntax type system 
section provides examples intuitively learn language see interpreter termination checker 
section explain heart foetus call extractor informally introduce call graph completion finding lexical order brain foetus 
formally described section 
foetus language foetus syntax foetus program consists terms definitions 
empty program term term evaluated definition definition processing input foetus evaluates terms stores definitions environment 
reserved words foetus language case 
special 
identifier may contain letters digits underscores 
starts small letter stands variable denotes constant 
term syntax 
denote variables constants foetus terms 
foetus language variable lambda tu application constructor case jc pattern matching tuple projection extra parentheses definitions 
definition statement form term body 
variables defined refer 
example 
foetus program defines addition natural numbers spanned constructors zero successor calculates 
add case 

add add note zero argument constructor syntax forces supply dummy variable pattern definition empty tuple definition 
foetus type system denote variables constants foetus terms oe oe oe foetus types type variables 
gamma oe oe denotes context 
judgement gamma oe means context gamma term type oe 
foetus language type formation 
oe type fc oe jc oe labeled sum type oe oe labeled product type fxg polymorphic type oe instantiation polymorphic type oe oe recursive type formation recursive type may appear strict oe define congruence types smallest congruence closed oe oe oe oe abbreviates oe oe 
substitute congruent types gamma oe oe gamma types rules system gamma oe free type variable gamma poly gamma gamma gamma poly gamma gamma oe typing rules foetus terms briefly introduce typing rules 
detailed explanation read book type theorie nps 
lambda abstraction 
gamma oe gammai gamma oe application 
gamma oe gamma oe gammae gamma tu oe foetus language constructor 
gamma oe fg gamma gamma fc oe jc oe pattern matching 
gamma fc oe jc oe gamma oe oe fg gamma gamma case fc jc oe 
gamma oe gamma gamma oe oe projection 
gamma oe oe gamma gamma oe 
gamma oe oe oe gamma oe oe gamma foetus type checking implemented terms entered typed 
course typed terms termination check produces valid results 
example 
known example non termination passes foetus termination checker typed 
foetus output passes termination check passes termination check examples examples addition multiplication natural numbers nat nat fo js nat nat define add mult nat nat nat add case 

add mult case 

add mult add mult foetus output add 
add add passes termination check lexical order mult 
mult mult passes termination check lexical order result result subtraction define predecessor function nat nat natural numbers sub nat nat nat 
note sub calculates delta gamma case 

sub case 

sub sub foetus output passes termination check sub 
sub sub passes termination check lexical order result examples division division div nat nat nat implemented follows functional languages note div calculates div div div div div just division natural numbers terminates divisor unequal recursive call function argument decreasing 
foetus recognizes direct structural decrease see sub 
prove termination div need proof sub bg 
case 

sub case 

sub div div case 
dummy 
div sub div sub div foetus output passes termination check sub 
sub sub passes termination check lexical order div passes termination check div 
div div fails termination check result foetus says div fails termination check div terminate 
div terminate div terminated get answer div passes termination check 
ackermann function primitive recursive ackermann function ack nat nat nat 
examples ack case 

ack case 

ack ack foetus output foetus revision ack 
ack ack 
ack ack passes termination check lexical order result list processing define lists type ff list list fnil hd ff tl list list known list processing functions map ff fi foldl ff fi fi fi fi implemented 
nil nil cons hd tl cons hd hd tl tl cons cons cons nil map list map case nil 
nil cons pair 
cons hd pair hd tl map pair tl map list map el el foldl list foldl case nil 
cons 
foldl hd tl foldl list rev list foldl cons nil list rev examples foetus output nil passes termination check cons passes termination check passes termination check map passes termination check map 
map map passes termination check lexical order result cons hd tl cons hd tl cons hd tl nil foldl passes termination check foldl 
foldl foldl passes termination check lexical order rev passes termination check result cons hd tl cons hd tl cons hd tl nil list flattening task transform list lists list elements list come elements second list 
example flatten 
version flatten list works fails termination check limited pattern matching abilities foetus bad style inefficient builds temporary list recursive call 
second version mutual recursive auxiliary function list passes termination check 
nil nil cons hd tl cons hd hd tl tl cons cons cons nil ll cons cons nil flatten case nil 
nil cons 
case hd nil 
flatten tl cons 
cons hd hd tl flatten cons hd tl tl tl flatten ll examples case nil 
nil cons 
hd tl ls case nil 
ls cons 
cons hd hd tl tl ls ll foetus output nil passes termination check cons passes termination check passes termination check ll passes termination check flatten 
flatten flatten 
flatten flatten fails termination check result cons hd tl cons hd tl cons hd tl cons hd tl cons hd tl cons hd tl nil 

passes termination check lexical order 


passes termination check lexical order result cons hd tl cons hd tl cons hd tl cons hd tl cons hd tl cons hd tl nil merge sort type bool ftrue define le nat nat nat bool merge ff ff bool follows merge le case nil 
cons 
case nil 
cons 
case le hd hd examples true 
cons hd hd tl merge le tl false 
cons hd hd tl merge le tl lenat case 
true 
case 
false 
lenat ii iii iv cons hd tl cons hd iii tl cons hd iv tl nil cons hd tl cons hd ii tl cons hd tl nil merge lenat foetus output merge 
merge 
merge merge 
merge merge 
merge merge passes termination check lexical order lenat 
lenat lenat passes termination check lexical order result cons hd tl cons hd tl cons hd tl cons hd tl cons hd tl cons hd tl nil parameter permutation list zipping function zip combines lists alternately elements form lists putting result list 
zip case nil 
cons 
cons hd hd tl zip tl examples zip cons hd tl cons hd tl nil cons hd tl cons hd tl nil foetus output zip 
zip 
zip 
zip zip 
zip 
zip zip 
zip zip fails termination check result cons hd tl cons hd tl cons hd tl cons hd tl nil recursion zip arguments decreasing arguments switched 
number recursive calls produces structural decrease 
foetus recognize zip terminating direct indirect recursive call arguments smaller structural lexical order 
course simple orders fulfill demanded criteria jl jl 
solution copy zip zip implement mutual recursion follows zip case nil 
cons 
cons hd hd tl zip tl zip case nil 
cons 
cons hd hd tl zip tl zip cons hd tl cons hd tl nil cons hd tl cons hd tl nil foetus output zip 
zip 
zip zip passes termination check lexical order zip 
zip 
zip zip passes termination check lexical order result cons hd tl cons hd tl cons hd tl cons hd tl nil tuple parameter example alternative version add nat nat nat shows foetus loses dependency information pack unpack tuples 
examples add xy case xy 
xy 
add xy foetus output add 
add add fails termination check transfinite addition ordinal numbers type ordinal numbers ord ord fo js ord nat ord ord ord ord ord implemented follows case 

lim 
lim foetus output 
passes termination check lexical order fibonacci numbers iterative version fib nat nat algorithm calculate fibonacci numbers fib fib 
parameter important termination second third parameter accumulators 
fib fn fn case 
fn 
fib add fn fn fn fib fib foetus output 
fib 
fib 
fib 
fib 
fib fib passes termination check lexical order fib passes termination check examples non terminating mutual recursion functions nat nat nat artificial example non termination designed show extent call graph completed assure correct results termination checker 
function function looks arguments add 
case 
case 


case 

case 

case 

case 

foetus output note combined call prevent termination 
call graph completion finds destroys lexical order possible 




passes termination check lexical order 









fails termination check 


termination checker outline 






fails termination check termination checker outline function call extraction task foetus check functions terminate 
foetus language functional direct loop constructs exist means form loops recursion 
program text function calls extracted find direct indirect recursive calls may cause termination problems 
heart foetus analyzer runs syntax tree foetus program looks applications 
consecutive applications gathered formed function call example function add 
applications add form call add 
see example add terminating recursive call argument decreased 
foetus stores call information arguments call example relate parameters calling function called 
distinguish kinds relations 
equal 
unknown includes greater 
abilities foetus recognise dependencies limited 
far cases considered 
constructor elimination 
variables constructor 
follows applied case constructs see example 

projection 
variables label ae relation ae follows ae component considered big entire tuple 

application 
variables vector terms arguments ae relation ae follows ya ae rule may strange looking applied example 
third case lim rule rule fz terminating 
formal description call graph extracted function calls form call graph 
multigraph vertex represents function edge vertex vertex call function function edges labeled dependency information see put call matrix 
call matrix call add add example note row represents call argument relations calling function parameters 
function calls function calls function indirectly calls call matrix combined call product matrices get completed call graph insert combined calls new edges original graph 
find function terminating collect calls completed call graph includes direct indirect calls 
lexical order exists function parameters recursive call decreases order parameters proven termination order call termination order 
call algorithms call graph completion finding lexical order brain foetus described precisely formally section 
formal description call matrix set relations equal relation unknown 
context calls means know call argument input parameter means equal means know relation 
operations delta defined table forms commutative rig element element 
operation understood combining parallel information relation www english term rig call 
probably play words compared ring rig misses inverse elements regarding addition 
cite ross moore see formal description simplifies operation delta serial combination combined 
delta simplified neutral regarding gives new information dominant strongest information 
regarding delta relation neutral dominant destroys information 
check table see relation overrides 
delta table operations define multiplication matrices usual delta thetam theta thetal thetal ij ij 
ij ik kj reasonable definition 
assume sets variables fx fy fz matrix ij ffl thetam reflecting relations ij ae ae matrix ffl thetal reflecting relations matrix product ab reflects relations ij delta delta im delta mj know intermediate variable delta intermediate variable continued 
www mq edu au ross maths quantum sect html rig set enriched monoid structures commutative written additively written multiplicatively equations hold ab ac ac ab natural numbers provide example rig 
ring rig additive monoid group 
integers provide example 
rig commutative multiplicative monoid commutative 
formal description definition 
call matrix matrix element different row 
cm ij ffl thetam ij ik 
reason define call matrices way ones foetus produces function call extraction see section 
foetus recognizes described cases call argument depend function parameter 
multiple imaginable min second call argument proposition assures matrices foetus deal call matrices 
proposition 
matrix multiplication matrices induces multiplication call matrices delta cm theta cm cm operation defined 
proof 
ij ffl cm ij ffl cm ab ij ffl thetal index element ith row different 
element exists 
rules rig ij ik kj consider ith row ij jl jl unequal element unequal 
ffl cm 
call graph ffl assume set ff identifiers functions arity ffl formal description definition 
form set calls follows ffl ffl ffl cm calls define partial operation combination calls ffi theta gamma delta 
ba meaning calls call matrix calls call matrix indirectly calls call matrix ba 
ffi applied calls common function partial 
ffi expanded sets calls ffi theta 
fc ffi ffl ffl ffl dom ffi combine call call ffi applicable form set combined calls 
ffi total function 
definition 
call graph graph vertices edges ae call graph complete ffi definition 
completion call graph call graph complete satisfying proposition 
completion call graph call graph ffl ffl ffi ffi formal description proof 
ffl ffi ffl ffi complete ffi ffi ffl ffi ffi ffl ffi ffi ffi ffi ffi ffl 
trivial 
complete gives ffi gain induction ffi ffi ffl implies ffi ffi ffl suitable ffl delta delta proposition 
completion algorithm call graph completion ffl sequence sets calls defined follows ffi ffl obviously grow monotonously 
proof 
show induction ffl obvious ffl ffl ffi ffi ffi ffi ffl follows ffl second set starting edges set reachable vertices set possible edges vertices limited number different call matrices fixed dimensions grow endlessly 
ffl exists third show particular ffl exists ffi ffi dm ffl em em em cases ffl delta delta formal description lexical order definition 
complete call graph function arity call delta ffl ae recursion behaviour function 
delta takes diagonal square matrices 
row set represents possible recursive call orders parameters altered call 
diagonals call matrices taken want know parameter relates old value call course finite subset identify lexical orders parameters permutations ffl arguments 
parameters relevant termination listed lexical order appear permutation sequence 
example fib argument considered prove termination order argument irrelevant permutations valid continuations lexical order 
note abbreviate notation permutations 
definition 
recursion behaviour function call permutation ffl termination order ffl definition wide 
cases look special termination orders definition 
inductive recursion behaviour function 
call permutation ffl termination order jbj implementation ffl 
ffl ffl gamma termination order fr ae gamma gamma gamma ffl gamma gamma ffl gamma gamma ffl gamma gamma ffl algorithm implemented foetus searches termination orders definition transfer definition 
termination order matching definition matches definition easily shown termination order type exists type 
example recursion behaviour 
type termination order types 
implementation foetus implemented sml 
new standard ml basis library ensure safe possibly optimized handling standard data structures lists parser foetus terms created ml lex ml yacc 
ml implementation currently standard ml new jersey version 
foetus lex foetus language token specification ml lex foetus grm foetus language grammar ml yacc aux sml auxiliary functions closure sml terms environment foetus sml values evaluation function hnf printing matrix sml polymorphic matrices necessary operations sml simple implementation analyse sml static analysis foetus code check sml termination check call graph top sml top level environment load sml loader foetus parser table foetus source files seen foetus brain call graph completion finding lexical order function arguments contributes automated termination proofs 
course current state toy gather experience subject 
improvements done foetus able recognize kinds dependencies see section 
ffl assignments 
constructs save values functions discouraged foetus stores relations concerning performs symbolic evaluation 
example case list cons pair 
hd pair hd tl pair tl foetus know hd list tl list 
simple assignments code shortening handled 
ffl tuple handling 
foetus trace dependencies tuples components 
moment define functions tuple parameter separate parameters expect termination proof see example 
ffl function results 
reason foetus prove termination div see example know 
gamma gamma 
shown sub function induction result dependency foetus bg 
furthermore call graph completion algorithm adopted prove termination parameter permuting functions zip see example 
foetus grown older described manner born adult program systems theorem provers alf isabelle lego 
bg jurgen jurgen giesl 
termination analysis partial functions 
proceedings third international static analysis symposium sas aachen germany lecture notes computer science springer verlag 
gie jurgen giesl 
termination nested mutually recursive algorithms 
journal automated reasoning 
nps bengt nordstrom kent petersson jan smith 
programming martin lof type theory 
clarendon press oxford 
pau lawrence paulson 
ml working programmer 
cambridge university press 
sli konrad slind 
function definition higher order logic 
proceedings tphols lncs 
sli konrad slind 
derivation induction schemes higherorder logic 
proceedings tphols lncs 
ttu alastair david turner 
ensuring streams flow 
michael johnson editor algebraic methodology software technology th international conference amast sydney australia december volume lecture notes computer science pages 
amast springer verlag december 
