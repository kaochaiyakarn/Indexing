specification execution transactional workflows marek rusinkiewicz amit sheth university houston bellcore houston tx piscataway nj marek cs uh edu amit ctt bellcore com basic transaction model evolved time incorporate complex transaction structures selectively modify atomicity isolation properties 
chapter discuss application transaction concepts activities involve coordinated execution multiple tasks possibly different types different processing entities 
applications referred transactional workflows 
chapter discuss specification workflows issues involved execution 
workflow 
workflows activities involving coordinated execution multiple tasks performed different processing entities 
task defines done specified number ways including textual description file email form message computer program 
processing entity performs tasks may person software system application program database management system 
specification workflow involves describing aspects constituent tasks processing entities execute relevant controlling coordinating execution 
requires specification relationships tasks execution requirements 
specified variety software paradigms rules constraints programs 
execution multiple tasks different processing entities may controlled human coordinator software system called workflow management system 
table gives examples workflows various computing environments 
discussion concentrate workflows involving processing entities dbmss software application systems 
enterprises multiple information processing systems cases developed independently automate different functions 
systems independently managed contain related overlapping data 
certain activities require participation multiple application systems databases 
activities characterized main components tasks processing entities constraints correctness criteria enforced appropriately coordinating execution tasks 
additional qualifications term workflow refer multi task activities 
workflows developed ad hoc methods desirable maintain safeguards traditional transactions related correctness computations data integrity 
multidatabase transaction constitutes special case workflow structuring isolation atomicity properties determined underlying transaction model 
term multidatabase transaction refer specific types workflows operate multiple database systems certain transactional characteristics 
multi system workflows considered addressed context transaction models developed distributed database management systems 
main problem need preserve autonomy participating systems 
systems multi system workflows designed stand operation normally provide information services supported part texas advanced research program number performed author short sabbatical eth zurich 
workflow typical typical processing application tasks entities mail routing email office computing loan processing form processing humans office computing application software purchase order processing form processing humans application office computing software dbmss service order processing transactions application systems telecommunication contracts dbmss product life cycle management transactions application software systems manufacturing dbmss table example workflows necessary execute distributed transactions supporting required transaction semantics 
furthermore facilities available may require complete rewriting existing systems extensive modifications applications software hardly attractive prospect considering complexity expense activity especially supporting going operations 
necessary take advantage facilities provided component systems developing new global mechanisms duplicate functionality local systems build model managing multi system workflows utilize known task structures coordination requirements collection tasks execution semantics systems execute tasks 
remainder chapter organized follows 
section briefly review related area multidatabase transaction workflow models 
section contains discussion issues related workflow specification 
show individual task specified review problems intertask dependencies atomicity requirements properties entities executing task impact execution 
section includes example illustrating simple multidatabase workflows specified multidatabase sql 
section discusses execution workflows 
review possible approaches workflow scheduling including problems concurrent execution recoverability 
related section briefly discuss evolution transaction models 
transaction models discussed section classified various characteristics including transaction structure intra transaction concurrency execution dependencies visibility durability isolation requirements failure atomicity correctness criteria concurrent execution 
discussion term traditional transactions refer transactions endowed atomicity consistency isolation durability acid properties 
extended transactions permit grouping operations hierarchical structures 
term relaxed transactions indicate transaction model relaxes acid requirements 
discuss relevant extended relaxed transaction models workflow models 
extended relaxed transaction models important step evolution basic transaction model extension flat single level transaction structure multi level structures 
nested transaction set subtransactions may recursively contain subtransactions forming transaction tree 
child transaction may start parent started parent transaction may terminate children terminate 
parent transaction aborted children aborted 
nested transactions provide full isolation global level permit increased modularity finer granularity failure handling higher degree intra transaction concurrency traditional transactions 
open nested transactions relax isolation requirements making results committed subtransactions visible concurrently executing nested transactions 
permit model higher level operations exploit application semantics especially commutativity operations 
addition extension internal transaction structure relaxed transaction models focus selective relaxation atomicity isolation may require serializability global correctness criterion 
frequently inter transaction execution dependencies constrain scheduling execution component transactions 
models motivated specific application environments attempt exploit application semantics 
relaxed transaction models form compensation 
subtransaction commit release resources global transaction successfully completes commits 
global transaction aborts failure atomicity may require effects committed subtransactions undone executing compensating subtransactions 
relaxing isolation multidatabase transactions may cause violation global consistency global serializability transactions may observe effects subtransactions compensated 
concept horizon compensation context multi level activities proposed 
model child operation compensated parent operation commits 
parent operation commits way undo effects child operation compensate entire parent operation 
concept saga introduced deal long lived transactions 
saga consists set acid subtransactions tn predefined order execution set compensating subtransactions ct ctn gamma corresponding tn gamma saga completes successfully subtransactions tn committed 
subtransactions say fails committed subtransactions gamma undone executing compensating subtransactions ct gamma ct sagas relax full isolation requirements increase inter transaction concurrency 
extension allowing nesting sagas proposed 
split join transactions designed open ended activities characterized uncertain usually long duration unpredictable development interaction activities 
transaction may split separate transactions resources divided join transaction resources merged 
split transactions provide mechanism direct resource transfer provide adaptive recovery part may committed completion transaction 
flexible transactions proposed transaction model suitable multidatabase environment 
flexible transaction set tasks set functionally equivalent subtransactions set execution dependencies subtransactions including failure dependencies success dependencies external dependencies 
relax isolation requirements flexible transactions compensation relax global atomicity requirements allowing transaction designer specify acceptable states termination flexible transaction subtransactions may aborted 
ipl language proposed specification flexible transactions user defined atomicity isolation 
includes features traditional programming languages type specification support specific data formats accepted produced subtransactions executing different software systems preference descriptors logical algebraic formulae controlling commitments transactions 
proposed mechanism support maintenance interdependent data multidatabase environment 
assumed consistency requirements specified collection data dependency descriptors 
contains description relationships data objects consistency requirements consistency restoration procedures 
transitive closure transaction respect main advantage transfer responsibility preserving consistency application programmer system 
reasoning various transaction models simplified acta metamodel 
acta captures important characteristics transaction models decide particular transaction execution history obeys set dependencies 
defining transaction particular set properties assuring execution history preserve properties remains difficult problem 
workflow models fundamental problem transaction models proposed provide predefined set properties may may required semantics particular activity 
problem adopting models designing implementing workflows systems involved processing workflow processing entities may provide support facilities implied transaction model 
furthermore extended relaxed transaction models geared mainly processing entities dbmss 
desire overcome limitations motivation development workflow models 
idea workflow traced job control language jcl batch operating systems os allowed user specify job collection steps 
step invocation program steps executed sequence 
steps executed conditionally example previous step successful failed 
simple idea subsequently expanded products research prototypes permitting structuring activity providing control concurrency commitment 
extensions allow designer specify data control flow tasks selectively choose transactional characteristics activity semantics 
contracts proposed mechanism grouping transactions activity 
contract consists set predefined actions acid properties called steps explicitly specified execution plan called script 
execution contract forward recoverable case failure state contract restored execution may continue 
addition relaxed isolation contracts provide relaxed atomicity contract may interrupted re instantiated 
issues related workflows addressed long running activities 
long running activity modeled set execution units may consist recursively activities top transactions transactions may spawn nested transactions 
control flow data flow activity may specified statically activity script dynamically event condition action eca rules 
model includes compensation communication execution units querying status activity exception handling 
proposal programmable transaction environment contains features workflows including support variety processing entities variety coordination correctness requirements 
enforcement intertask dependencies workflows discussed 
tasks modeled providing states significant events corresponding state transitions start commit rollback may forcible rejectable delayable 
intertask dependencies order dependencies existence dependencies significant events tasks formally specified computation tree logic ctl corresponding dependency automata automatically generated 
dependencies may enforced checking relevant dependency automata 
terms database related literature refer workflows task flow multi system applications application networked applications long running activities 
related topics discussed context cooperative activities cooperative problem solving 
specification workflows key issues specifying workflow ffl task specification execution structure task defined providing set externally observable execution states set transitions states 
addition characteristics processing entities relevant task execution requirements may defined 
ffl task coordination requirements coordination requirements usually expressed intertask execution dependencies data flow dependencies termination conditions workflow 
ffl execution correctness requirements execution requirements defined restrict execution workflow meet application specific correctness criteria 
include failure atomicity requirements execution atomicity requirements including visibility rules indicating results committed task visible concurrently executing workflows inter workflow concurrency control recovery requirements 
issues discussed subsections 
specification task workflow task workflow unit processed processing entity application system dbms 
task specified independently processing entity execute considering capabilities behavior processing entity 
case task specified execution specific entity specific type processing entities 
example task specification may include state execution may limited processing entities support state 
limit attention case task defined specific type processing entity 
aspects tasks need modeled purpose workflow management 
take example transaction executed dbms 
view point workflow details transaction describe sequential processing unnecessary 
task performs operations underlying database system 
task program transaction important correct 
correctness traditional transactions workflow level model internal operation task deal aspects task externally visible 
task structure defined providing ffl set externally visible execution states task ffl set legal transitions states ffl conditions enable transitions transition conditions specify intertask execution requirements 
model task state machine automaton behavior defined providing state transition diagram 
general task corresponding automaton different internal structure resulting different state transition diagram 
depends large extent characteristics system task executed 
properties processing entities responsible execution task presence absence phase commitment interface directly affect task structure definition workflow 
shows structure frequently encountered types tasks 
characteristics system executes task may influence properties task affecting structure 
example system executing task may guarantee analogous execution serialization order may allow workflow scheduler affect local serialization order tasks controlling commitment start submission order 
similarly system may guarantee idempotency allowing safe repetition task positive acknowledgment missing timed 
transitions various states task may affected various scheduling events 
transitions controlled scheduler responsible enforcing intertask dependencies 
example task submitted execution resulting state transition initial executing 
transitions controlled local system responsible execution task 
example executing task may unilaterally aborted system resulting state transition executing aborted 
states task may designated termination states 
task reaches state state transitions allowed 
task may various isolation properties 
example results incomplete task may visible concurrent tasks may deferred task commitment 
properties effect concurrency control recovery mechanism scheduler 
say system idempotent respect task type task executed times changing result 
examples idempotent tasks set counter allocate resource number process number increment counter allocate instance resource type process number 
crashed aborted 
gamma gamma gamma gamma gamma gamma hy phi phi phi phi phi phi gamma gamma gamma gamma gamma gamma delta delta delta delta delta delta delta delta delta delta delta regular program ims transaction rda transaction initial initial executing submitted crash initial executing prepared commit executing committed aborted committed aborted done examples task state transition diagrams partial output task may available concurrently executing tasks task may request input tasks 
assume tasks workflow communicate persistent variables local workflow 
variables may hold parameters task program 
different initial parameters task may result different executions task 
data flow subtransactions determined assigning values input output variables 
execution subtransaction effects state database value output variable 
depicts external view task 
task may parameters stored input variable may retrieve update data local system store results output variable may queried execution state 
xxxxxxxxx xz local system output variable input variable state view task workflow time execution state workflow defined collection states constituent tasks values variables including temporal 
execution workflow begins initial state 
initial state workflow specifies initialization parameters 
different initial states workflow may result different executions 
task coordination requirements tasks constituting workflow internal structure workflow control flow defined specifying task coordination requirements usually scheduling preconditions scheduler controllable transition task 
general statically defined determined dynamically execution 
ffl statically case tasks dependencies defined execution workflow starts 
relaxed transactions flexible transactions approach 
generalization strategy precondition execution task workflow possible tasks workflow dependencies known advance tasks preconditions satisfied executed 
approach reported 
preconditions may defined dependencies involving execution states tasks 
example task start task ended task abort task committed 
output values tasks 
example task start task returns value greater 
external variables modified external events part workflow may related events tasks workflow workflows 
examples conditions task started am gmt task started hours completion task 
terms execution dependencies data value dependencies temporal dependencies literature refer various scheduling preconditions 
dependencies combined regular logical connectors form complex scheduling preconditions 
contracts multidatabase transactions support priori specification dependencies 
ffl dynamically case task dependencies created execution workflow executing set rules 
examples long running activities 
events conditions affecting rule processing may change changes execution environment earlier task executions 
failure atomicity requirements workflow understanding semantics workflow consistency constraints workflow designer may specify failure atomicity requirements workflow 
traditional notion failure atomicity require failure task results failure workflow 
workflow cases survive failure tasks example executing functionally equivalent task site 
allow designer define failure atomicity requirements workflow 
system guarantee execution workflow terminate state satisfies failure atomicity requirements defined designer 
call states acceptable termination states workflow 
execution states workflow constitute set non acceptable termination states failure atomicity may violated 
acceptable termination state designated committed aborted 
committed acceptable termination state execution state objectives workflow achieved 
contrast aborted acceptable termination state valid termination state workflow failed achieve objectives 
aborted acceptable termination state reached undesirable effects partial execution workflow undone accordance failure atomicity requirements 
general task commit release resources workflow reaches termination state 
multitask transaction aborts failure atomicity may require effects completed tasks committed subtransactions undone executing compensating tasks subtransactions 
notions acceptable termination states scheduling dependencies express semantics compensation resorting special constructs required transaction models 
semantics compensation requires compensating transaction eventually completes execution successfully possibly number 
model described property compensating transactions defined appropriately specifying scheduling preconditions 
execution atomicity requirements workflow similarly failure atomicity requirements designer specify execution atomicity requirements workflow 
traditional transaction model require workflow constitute unit 
interleaved execution workflows effects executed serially order 
relaxing execution atomicity transactions centralized databases discussed 
transaction divided execution atomic steps interleaving concurrent transactions allowed steps 
workflow context tasks usually natural execution atomic steps execute separate processing entities 
data integrity constraints span boundaries individual databases consequence tasks accessing interrelated data constitute execution atomic unit 
example consider workflow transfers money accounts different banks 
avoid inconsistent retrievals tasks subtransactions accessing databases banks constitute execution atomic unit respect concurrent transactions 
specification multidatabase workflows extended sql multidatabase sql extension sql query language proposed access language loosely coupled multidatabase systems 
sql official de facto standard relational databases reasonable think testbed new emerging standard multidatabase environments 
basic idea providing sql new functions non procedural manipulation data different mutually non integrated relational databases 
subsection briefly discuss extensions proposed show specify failure atomicity requirements multidatabase workflows 
allows user change states multiple databases 
semantics multiple updates carefully defined 
example helps understanding problems involved implementation updates loosely coupled environment 
consider multidatabase system providing access databases airlines store information availability seats different flights databases car rental companies store information availability cars 
suppose want raise fares flights houston san antonio continental delta united 
update specified statement continental delta united update flights set rate rate source houston destination san antonio example statement specifies scope query update identifying databases accessed multiple update decomposed subtransactions executed local database systems continental delta united 
assume autonomous heterogeneous may different phase commitment pc protocols may support pc may provide visible pc interface 
system may forced abort local subquery reasons local conflicts failure deadlock 
result multiple update may leave multidatabase state inconsistent global user point view 
possibility check multiple update consistent access involved see happened 
address problem statement illustrated extended allow user specify desired level consistency execution particular multiple update 
multiple update shown modified follows continental vital delta united vital update flights set rate rate source houston destination san antonio semantics vital designators similar defined sub sagas 
databases query scope designated vital non vital default 
vital subqueries commit abort desired multidatabase consistency maintained 
multiple query successful vital subqueries commit 
fails vital subqueries rolled back 
execution considered incorrect vital subqueries committed 
non vital subqueries executed auto commit mode results effect success failure global multiple query 
subqueries non vital multiple query successful 
set vital databases called vital set 
failure atomicity enforced respect vital set 
described semantics vital designators applicable cases user wants include vital set databases support pc 
databases vital naming schema heterogeneities may exist environment provides mechanisms resolution 
possible enforce failure atomicity respect vital set 
done commits aborts related subquery global consistency violated 
possible solution problem compensation 
extended allows specification compensating actions individual data manipulation statements 
vital database scope query support pc user provide comp clause needed compensating actions specified 
example assuming continental database provide pc previous multiple update rewritten way continental vital delta united vital update flights set rate rate source houston destination san antonio comp continental update flights set rate rate source houston destination san antonio specification compensating action local update continental database original semantics vital designator preserved 
continental update aborted united update rolled back 
united update aborted continental update compensated 
vital designators compensation step direction specification multidatabase transactions relational environments 
queries specify vital subqueries compensating actions constitute small transactional units 
natural step specification complex transactions 
describe multidatabase transactions specified 
main idea expand commit statement allow specification failure atomicity requirements transactions 
example specify acceptable combination commitment tasks syntax commit continental national delta avis example global transaction corresponding workflow committed transactions submitted continental national databases commit transactions submitted delta avis databases commit 
cases global transaction aborted 
execution workflows workflow management system permit specification scheduling intertask dependencies 
addition concurrency recovery may supported case may possible integrate scheduler enforcing intertask dependencies relaxed transaction management system 
workflow management system consists scheduler task agents 
task agent controls execution task processing entity task agent task 
scheduler program processes workflows submitting various tasks execution monitoring various events evaluating conditions related intertask dependencies 
scheduler may submit task execution task agent request previously submitted task aborted 
case multidatabase transactions tasks subtransactions processing entities local dbmss 
accordance workflow specifications scheduler enforces scheduling dependencies responsible assuring tasks reaches acceptable termination state 
architectural approaches development workflow management system 
centralized approach single scheduler schedules tasks concurrently executing workflows 
partially distributed approach instance scheduler workflow 
issues concurrent execution separated scheduling function option natural choice 
fully distributed approach scheduler task agents coordinate execution communicating satisfy task dependencies workflow execution requirements 
scheduling workflow discuss objectives scheduler review approaches prototypes 
objectives scheduler main objectives scheduler assure ffl correctness scheduling 
scheduling process violate dependencies provided workflow specification 
additionally scheduler limited constraints imposed global concurrency control uncontrolled interleaving tasks belonging different workflows may lead incorrect results 
determining temporal scheduling dependencies satisfied particularly difficult 
scheduler aware presence temporal dependencies logical value scheduling predicates change dynamically action system 
time dependencies limit possible actions scheduler specifying task start am 
ffl safety 
scheduler guarantee workflow terminate specified acceptable termination states 
attempting execute workflow scheduler examine check may terminate non acceptable state 
scheduler guarantee workflow terminate acceptable state reject specifications attempting execute workflow 
example consider workflow consisting tasks represented subtransactions usual failure atomicity requirements indicating subtransactions committed assume provide prepared commit state compensating transactions execution strategies possible 
execute commits submit 
try 
try execute subtransactions concurrently 
cases second subtransaction aborts workflow non acceptable termination state 
true subtransaction commits aborts 
workflow specification considered unsafe rejected 
similarly course processing workflow scheduler discovers safe continuation workflow immediately aborted 
ffl optimal scheduling policy 
scheduler achieve acceptable termination state optimal way 
meaning optimal vary application application 
possibility define achieving goal shortest possible time 
alternatively may associate cost function execution task 
objective scheduler execute entire workflow minimal possible cost 
probabilities tasks commitment known advance scheduler find execution strategy yields maximal probability global commit 
ffl handling failures 
scheduler able reach acceptable termination state case failure 
example scheduler continue processing failure recovery happened providing forward recoverability 
scheduler abort workflow reach global abort states 
approaches require state information preserved case failure case subtransactions may need committed submitted execution compensating subtransactions 
scheduler log secure storage information state need recover proceed 
scheduling approaches schedulers multidatabase transactions described literature 
proposed solutions address issues identified 
useful special restricted cases 
exception schedulers primarily developed multidatabase transactions special type workflows 
problem attracted attention researchers comprehensive practical solution exists 
briefly review prototypes approaches 
ffl scheduler predicate petri nets model 
scheduler written flexible transactions 
scheduler uses predicate petri nets identify set subtransactions schedulable state 
construction petri net reflects structure precedence predicates associated subtransactions 
scheduler address safety optimality issues 
guarantee multidatabase transaction terminate acceptable termination state 
ffl executor flexible transactions logically parallel language 
scheduler flexible transactions achieves maximal available parallelism subtransactions execute transaction shortest time 
execution quite expensive case subtransaction committed program execute transactions compensate gamma 
method assumes subtransactions 
assumption hold safety scheduling guaranteed transaction non acceptable termination state 
ffl scheduler interpreter multidatabase transaction specification language 
underlying idea map transaction specifications set production rules logic clauses 
specification interpreted pseudocode directly control processing multidatabase transaction 
responsibilities transaction designer broader case high level transaction specifications translated logic program tedious error prone task 
example approach flexible transactions described vienna parallel logic vpl language multidatabase transaction specifications 
multidatabase transaction specified set executable vpl queries 
language powerful express serial parallel executions explicit commitment specify data exchange subtransactions 
prolog language vpl provides backtracking case means compensating aborting subtransactions 
solution tree searched terminating predicate satisfied tree traversed 
solution exists guarantees concerning optimality 
quality solution including correctness safety execution strategy depends large extent programmer wrote specifications 
ffl scheduler interpreter event condition action eca rules 
authors describe execution long running activities 
scheduler executes script augmented actions may triggered result eca rules 
similar approach discussed intertask dependencies multidatabase transactions implemented eca rules 
ffl scheduling game versus nature 
approach scheduling process modeled game scheduler environment represented described 
considered nature stochastic non hostile player 
move game means changing state subtransactions 
changes done scheduler depend accessed 
example scheduler submit subtransaction execute changing state initial executing 
abort executing subtransaction changing state executing aborted 
scheduler wins multidatabase transaction reaches acceptable termination state 
method exploits maximal available parallelism generally leads shortest execution time 
disadvantage approach may lead transactions executed unnecessarily compensated 
ffl scheduler finite state automaton 
model scheduler uses finite state automaton analyze dependencies subtransactions 
scheduler protocol analyzing tools determine reachability acceptable state 
approach guarantee correct safe processing strategy 
optimality criteria considered kind dependency implemented way provide optimal schedule 
current state development method suffers high computational complexity due state explosion 
multidatabase transactions composed large number subtransactions processed way 
scheduler partially distributed architecture 
ffl scheduling enforcing intertask dependencies temporal propositional logic 
carnot project carried mcc collaboration bellcore university houston task modeled collection significant events start commit rollback may forcible rejectable delayable 
transaction semantics defined order dependencies existence dependencies significant events tasks 
intertask dependencies specified constraints occurrence temporal order significant events related tasks 
temporal propositional logic called computational tree logic ctl specify dependencies discussed 
allows automatic generation automata enforce dependencies 
accepting rejecting delaying requests scheduler enforce dependencies 
scheduler provably correct safe 
scheduler centralized architecture high computational cost 
appropriate managing intertask dependencies additional optimization 
concurrent execution workflows assume task workflow executed control individual processing entity dbms provides local concurrency control extent required semantics task 
guarantees processing system left locally consistent state may sufficient guarantee global correctness concurrent interleaved execution workflows 
assuming workflow executed correctly concurrent execution multiple workflows correct sense equivalent running workflows time interference 
absence additional information constraints exist states multiple systems involved execution workflow properties workflows assuring equivalence requires enforcement global serializability global commitment workflows 
additional information failure isolation atomicity requirements workflow available weaker correctness criteria concurrent execution workflows may applicable 
discussion review basic concepts multidatabase transaction management applicable workflow management discuss possible extensions 
discuss application system semantics real world environment allows simple efficient concurrency control recovery methods 
global serializability 
global serializability requires tasks belonging different workflows relative serialization order sites execute 
assure global serializability violated local histories validated workflow management system 
problems determining local serialization order discussed literature multidatabase transactions 
main difficulty caused possibility indirect conflicts may caused local tasks executed outside global workflows 
possible mechanism detection inter workflow conflicts may ticket concept proposed 
global commitment 
say workflow globally committed reaches acceptable termination state 
assure failure atomicity workflow recovery procedures deal problems caused autonomy systems involved processing workflow 
difficulties arise local systems distinguish locally uncommitted tasks belong globally committed workflows uncommitted local tasks 
local system provides basic transaction management mechanisms failure local recovery procedures rollback locally uncommitted tasks belong globally committed workflows 
addition workflows locally committed task rolled back 
workflow recovery actions local system constitute new transactions point view local systems connection failed tasks supposed complete 
issues discussed context multidatabase transactions solutions proposed literature expanded workflow management 
relaxing global serializability requirements 
discussion assume specifications workflows provided designer initial parameters correct workflow executed isolation violate consistency 
workflow scheduler guarantees execution workflow proceeds accordance specification local concurrency controllers guarantee interleaved execution tasks preserves local consistency constraints 
workflow concurrency control mechanism guarantee global histories correct preserve multi system consistency constraints 
define class global histories considered correct workflow model described 
tasks various workflows issue operations may locally conflict operations workflows local transactions 
execution order committed conflicting operations local transactions tasks general transactions results serialization precedence transactions issued denoted oe 
serialization precedence relation transactions transitive define serializability correctness criterion concurrent execution workflows 
informally global history serializable local history serializable workflows tasks ik il belonging execution atomic unit tasks jk jl belonging execution atomic unit ik oet jk jl oet il global serializability requires serialization order workflows compatible processing entities 
task precedes task processing entity entities task precede task serializability requires tasks belonging execution atomic unit workflow compatible serialization orders local sites access 
allows global histories rejected global serializability 
operations task related operations tasks belong execution atomic units serialization precedence imposes serialization precedence tasks belong execution atomic unit tasks case global serializability 
example consider history 
assume workflow consists execution atomic units ft ft execution atomic units ft ft serialization precedence established processing entity effect serialization precedence processing entity 
hand tasks conflict serialized formal definition serializability mechanism ensure 
recovery workflow objective failure recovery workflow management enforce failure atomicity workflows 
recovery procedures sure failure occurs workflow processing components including scheduler workflow eventually reaches acceptable state possibly compensation 
may assume processing entities involved workflow local recovery systems handle local failures 
discuss handling failures workflow execution controllers scheduler concurrency controller 
order recover execution environment context failure recovery routines need restore state information time failure including information execution states task information scheduling dependencies concurrency controller 
appropriate status information logged stable storage 
oe oe 
workflow workflow intra workflow data flow serialization order example serializable execution workflows failure concurrency controller may detected timeout mechanisms status information reconstructed scanning logs 
assuming forward recoverability idempotency processing entities execution workflow may continue tasks completed 
need consider contents request queues 
mechanism providing functionality persistent pipes dec vms system queues may implemented mailboxes persistent message queues accessed virtual devices messages stored permanent storage lost case failure 
queues volatile storage unix queues may implemented sockets recovering contents queue schedulers re send requests 
support workflow execution basic approaches implementation workflow management system embedded approach requires exploits significant support processing entities specification enforcement dependencies example approach requiring processing entities support active data management features layering approach implements workflow control facilities top uniform application level interfaces entities developing modules support inter task dependencies workflow specifications approach provides limited workflow management facilities environment consisting transaction monitors event monitoring synchronizing facilities similar proposed corba 
approach aligned reported 
variants second approach narada carnot projects 
facilities provided projects may implement relaxed transaction workflow capabilities 
gte distributed object management dom project follow combination approaches distinguishing native dom objects data managed non dom systems support transactions dbmss support transactions systems 
execution multi system applications heterogeneous computing environment carried omnibase project 
basic contributions project workflow management development task specification language dol distributed execution environment called narada 
software architecture concept task specification language adapted expanded numerous projects including ernie bellcore purdue carnot mcc 
dol system consists resource directory dol engine collection local access managers lams 
resource directory contains date information services known dol engine 
information includes physical addresses communication protocols login information data transfer methods 
dol engine responsible executing dol programs communicating various services 
provides task activation task synchronization conditional execution data exchange lams commitment control local global tasks 
responsible opening closing connections participating lams setting communication channels sending local commands monitoring execution status 
lam acts proxy user processing entity manages provides abstraction service encompasses 
lams preserve autonomy processing entities 
dol engine communicates lams responsible executing requested local commands 
dol programs written directly users automatically generated software system 
dol engine receives dol program produces execution plan 
consults resource directory get relevant information invocation corresponding lams 
dol engine executes dol program invoking lams support corresponding services 
services database systems knowledge systems software packages dol engines 
lam executes commands successfully output may forwarded lam 
dol engine communicates lams high level communication protocol 
simplifies architecture allows addition new services modifying system modules 
project extended concept lam dol called remote system interface rsi 
developed variety heterogeneous software systems provide addition lam functionalities novel features ipl sophisticated format translation information exchange facilities coordination concurrent workflows termed global applications 
carnot goes developing support distributed services applications including relaxed transactions workflows 
main component called extensible services switch ess uses language called actor model 
supports interpretive control distributed applications high concurrency ultra lightweight processes 
control programs scripts interpreted site may send script site affect local control distributed application 
furthermore ess supports distributed processing abstractions easier development efficient implementation workflow relaxed transaction management 
communicate different communication resources tcp ip sna information resources commercial relational object oriented dbmss application services built 
summary hierarchical structures extended transaction models nested transactions multi level transactions rigid workflow applications 
basic problem development workflow management systems particular transaction model predefined set properties provided model may may required semantics workflow 
example intertask dependencies required semantics workflow may complex supported transaction model correctness guarantees global serializability provided may stronger needed 
problem adopting extended transaction models designing implementing workflows systems involved processing workflow processing entities may provide support facilities implied transaction model 
example multidatabase transaction models geared processing entities dbmss applicable entities provide local transaction management facilities 
may need define workflows incorporate non dbms processing entities clear workflow systems may able provide global data consistency guaranteed transactions 
desire overcome limitations motivation development workflow models 
opinion comprehensive transactional workflow system support multitask activities different tasks may different execution behavior properties tasks may executed different entities application user defined coordination execution different tasks including data exchange provided application user defined failure execution atomicity supported 
basic type transactional workflow system uses transactions tasks exploits support transaction execution provided systems similar extending relaxed transaction model intertask dependencies 
workflows may additionally require concurrency control support execution atomicity coordination requirements respect concurrent execution multiple workflows 
tasks transactions entities execute dbmss possible desirable borrow extensive extended relaxed transaction models 
needed tasks transactions entities provide transaction execution support workflow failure execution atomicity requirements exist 
may possible express workflow correctness criteria intertask dependencies may desirable incorporate workflow model 
expect evolution application development models provide extended transaction workflow capabilities suit needs complex applications accessing heterogeneous existing systems 
acknowledge collaboration members carnot project mcc attie huhns singh tomlinson woelk discussions krishnakumar ness bellcore weikum 
schek eth zurich university houston 
ansari ness rusinkiewicz sheth 
flexible transactions support telecommunication applications 
proceedings th international conference large data bases august 
ansari rusinkiewicz ness sheth 
executing multidatabase transactions 
proceedings th international conference system sciences hawaii january 
attie singh sheth rusinkiewicz 
specifying enforcing intertask dependencies 
proceedings th vldb conference 
breitbart georgakopoulos rusinkiewicz silberschatz 
rigorous transaction scheduling 
ieee transactions software engineering september 
breitbart silberschatz 
multidatabase update issues 
proceedings acm sigmod international conference management data june 
cameron ness sheth 
executor multidatabase transactions achieves maximal parallelism 
proceedings international workshop interoperability multidatabase systems april 
chakravarthy navathe tanaka 
meeting cooperative problem solving challenge database centered approach 
cooperating knowledge systems ed 
springer verlag 
chen ahmed elmagarmid 
ipl multidatabase transaction specification language 
proc 
th international conference distributed computing systems pittsburgh pa may 
chrysanthis ramamritham 
acta framework specifying reasoning transaction structure behavior 
proceedings acm sigmod conference management data 
chrysanthis ramamritham 
formalism extended transaction model 
proceedings th international conference vldb 
dayal hsu ladin 
organizing long running activities triggers transactions 
proceedings acm sigmod conference management data 
dayal hsu ladin 
transactional model long running activities 
proceedings th vldb conference september 
dyson 
workflow 
forbes november 
elmagarmid editor 
transaction models advanced database applications 
morgan kaufmann february 
elmagarmid chen 
remote system interfaces approach overcome heterogeneous barriers retain local autonomy integration heterogeneous systems 
international journal intelligent cooperative information systems 
appear 
elmagarmid leu litwin rusinkiewicz 
multidatabase transaction model 
proceedings th international conference vldb 
ozsu 
semantic knowledge transactions increase concurrency 
acm transactions database systems december 
garcia molina gawlick klein salem 
coordinating multi transaction activities 
technical report cs tr princeton university february 
garcia molina salem 
sagas 
proceedings acm sigmod conference management data 
garcia molina salem gawlick klein 
modeling long running activities nested sagas 
data engineering bulletin march 
georgakopoulos 
multidatabase recoverability recovery 
proceedings international workshop interoperability multidatabase systems april 
georgakopoulos hornick 
environment specification management extended transactions doms 
technical report september gte laboratories 
georgakopoulos rusinkiewicz litwin 
chronological scheduling transactions temporal dependencies 
technical report uh cs dept computer science university houston february 
georgakopoulos rusinkiewicz sheth 
ticket methods enforce serializability multidatabase transactions 
appear ieee transactions knowledge data engineering 
gray 
transaction concept virtues limitations 
proceedings th international conference vldb september 
rusinkiewicz omnibase design implementation multidatabase system ieee cs distributed processing newsletter volume number ansari jin rusinkiewicz 
narada environment specification execution multi system applications 
proceedings second international conference systems integration 
jin ness rusinkiewicz sheth 
concurrency control recovery multidatabase flows telecommunication applications 
proceedings sigmod conference may 
jin krishnakumar ness rusinkiewicz sheth 
supporting telecommunications applications multidatabase transactions 
bellcore technical memorandum submitted publication september 
klein 
advanced rule driven transaction management 
ieee compcon 
kuehn elmagarmid 
transaction specification multidatabase systems parallel logic programming 
proceedings international workshop interoperability multidatabase systems april 
korth levy silberschatz 
formal approach recovery compensating transactions 
proceedings th international conference vldb 
rusinkiewicz sheth thomas 
bounding effects compensation relaxed multi level serializability 
technical report uh cs dept computer science university houston march 

declarative framework capturing dynamic behavior heterogeneous interoperable information resource environment 
proceedings rd ride intl 
workshop interoperability multidatabase systems ims april 
lee mansfield sheth 
framework controlling cooperative agents 
ieee computer july 
litwin 
multidatabase language 
information sciences 
lynch 
multi level atomicity new correctness criterion database concurrency control 
acm transactions database systems december 
mehrotra rastogi breitbart korth silberschatz 
ensuring transaction atomicity multidatabase systems 
proceedings th acm sigact sigmod sigart symposium principles database systems 
moss 
nested transactions approach reliable distributed computing 
phd thesis mit press cambridge ma 
pu 
composition heterogeneous databases 
ieee proceedings th international conference vldb 
reuter 
contracts means extending control transaction boundaries 
proceedings rd intl 
workshop high performance transaction systems september 
rusinkiewicz elmagarmid leu litwin 
extending transaction model capture meaning 
sigmod record 
rusinkiewicz cichocki 
model multidatabase transactions 
international journal intelligent cooperative information systems vol rusinkiewicz elmagarmid loa 
distributed operational language specifying applications 
proceedings international conference systems integration 
sheth 
information modeling multidatabase systems data modeling 
proceedings st international conference information knowledge management november 
sheth rusinkiewicz 
manage interdependent data 


common architecture integrating distributed applications 
proceedings second international conference parallel distributed information systems january 
rusinkiewicz litwin 
execution extended multidatabase sql 
proceedings th international conference data engineering 
tomlinson attie sheth singh woelk 
workflow support carnot 
data engineering bulletin june 
weikum 
principles realization strategies multilevel transaction management 
acm tods march 
weikum schek 
concepts applications multilevel transactions open nested transactions 

woelk attie sheth singh tomlinson 
task scheduling intertask dependencies carnot 
proceedings sigmod conference may 
wolski 
pc agent method achieving serializability presence failures heterogeneous multidatabase 
proceedings conference february 

