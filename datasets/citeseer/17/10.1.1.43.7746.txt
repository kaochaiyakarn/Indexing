unification substitutions type inference bruce laboratory foundations computer science university edinburgh dcs ed ac uk 
traditional type inference type checking algorithms correctly typed programs results programs containing type errors unpredictable 
leads problem implementations type checkers inaccurate announcing apparent locations mistakes programs tending notice problems program mistake occurs earlier 
particular problem programming languages hindley milner type systems standard ml 
common technique type inference unification 
unifying types creates substitutions applied types type environments 
substitutions applied type environment influence type errors encountered particular subexpressions program 
defines operation unifying substitutions shows type inference algorithms modified operation delay application substitutions type environment 
removes bias detecting errors program 
different type inference algorithms hindley milner type systems modified way potential improved error reporting shown 
research concern actual generation messages follows type inference failure 
emphasis creating type inference algorithms fail way meaningful error messages generated 
modern programming languages equipped type system set rules assigning types parts programs 
type system implemented compilers purposes 
programs types rejected compilers user informed types programs assuring aspect correctness compiler uses type information optimise code 
focus uses type systems rejection programs types type errors inconsistencies 
difficulty programmers find programming program rejected information easily locate repair mistakes 
type checking algorithms different type systems unification operation 
takes types parameters returns substitution mapping type variables types types equal 
type checking algorithm applies substitutions free type variables type environment type checking subexpressions 
deals primarily family hindley milner type systems functional programming languages standard ml 
provide polymorphic types type inference concerned unification find types monomorphic parts program function parameters particular instances polymorphic functions 
process type checking programs implicitly typed languages standard ml process type inference reconstructing type constraints programmer required give explicitly typed language 
task performed unification substitution 
section shall see informing user reason type checking failure possible locations programmer may mistake inherently difficult task type systems 
hindley milner type inference users complain location problem compiler related location mistake 
example compiler reports apply line may caused pages ago 
section examines type inference algorithm shows apparent location errors wrong subtle left right bias detecting problems late code bias caused way unification substitutions 
solution problem conventional inference algorithm new type inference algorithm designed pragmatic perspective 
key idea algorithm symmetric treating subexpressions identically bias causing errors tend reported part program 
new algorithm rests novel concept unification substitutions allow symmetric treatment subexpressions 
section introduces operation unifying substitutions discusses remove left right bias type inference 
section presents variation classic type inference algorithm hindley milner type systems uses substitution unifying procedure 
show bias eliminated 
programmers frequently view programs slightly different way semantics languages compilers 
functional programming languages programmers write curried applications succession applications row 
programmer mentally parses program see curried expression mistakes related structure compiler sees hierarchy applications error messages view code 
desirable type checker view program similar manner programmer error messages relate programmer view program 
section shows new algorithm section extended treats entire curried expressions symmetrically 
functional programming languages constructions tuples type inference rules similar applications algorithm extended treat components tuples symmetrically 
applications new algorithm shown section 
summary section 
motivation type systems play important roles software development 
programmer simple static properties programs machine checked compiler optimise basis types 
important aspect type checking allows compiler reject programs guaranteed meaningful interpretation language semantics may run time errors 
problem burden correcting program lies programmer hands little help compiler give 
compilers typically tell programmer point program error generally part program programmer mistake unclear type checking failed point 
inherent problem hindley milner key features hindley milner type systems particular interest 
implicit typing means programmer need say type expression identifier type system inference algorithm infer types small number typing assertions needed 
polymorphic typing means types flexible 
example function take value type return value type 
case function type type denote polymorphic type scheme ff ff ff 
necessary programmer specify function polymorphic type inference discover fact 
point view finding location mistakes program features weaknesses 
way detect mistake find inconsistency parts program 
contrast explicit type systems inconsistencies typically names declarations types 
languages able establish identifier declaration incorrect possibilities expression may incorrect second may incorrect problem may lie context 
polymorphism program fragments contain mistakes type type programmer expected 
lead cascading effect spurious errors announced newly derived types conflict type derived mistake 
examples expressions consider simple calculus example 
function take real number return sum original number square root 
add sqrt error message type checker apply sqrt real real int 
programmer seeing message confused intended real mistake sqrt applied causes appear int 
source problem apparent look type environment expression checked inside add int int int sqrt real real programmer mistake integer addition wants add real numbers 
clearly case error message inappropriate equal evidence real int 
type checker incorrectly priority information derived leftmost subexpression right bias 
informative example type checker pointed inconsistency subexpressions falsely claiming internally inconsistent 
second example short fragment standard ml program intended create list flattening list lists list list foldl op op list concatenation function 
error message apply list foldl op required argument type int list list list actual argument type int list programmer message think list foldl expects list start value type environment contains list foldl 

list 
programmer intends int list 
list foldl fact expects parameters opposite list foldl 


list easy mistake sml programmer different libraries provide different variations fold function 
problem caused instantiating type lists taken op int list list soon list lists seen 
compiler complains final application inconsistency op 
better error message tell programmer parameters incompatible put 
classic example illustrate monomorphism function parameters true programmer written function expects identity function argument possible hindley milner type systems arguments polymorphically 
compiler faced expression type checks left right establishing type form int fi finding applied true bool 
programmer error message form apply int ff true bool 
message implies inconsistency inside true 
fact inconsistency subexpressions 
algorithm find inconsistency uses subexpressions true finding apparent mistake true 
alternative approaches problem number authors looked problem generating error messages appropriate parts programs 
johnson walz jw looked difficulty working unification fails 
applied method classic inference algorithm suffers left right bias 
ideas applied unification substitutions eliminate left right bias point unification fails generate improved error messages unification failed 
duggan bent db provided system recording substitutions unification 
interest producing meaningful messages unification fails interested making unification fail appropriate point 
bs provided explanation facility 
bernstein stark bs provide novel type inference algorithm unification type environments 
algorithm symmetric left right bias 
lee yi ly discuss folklore algorithm :10.1.1.29.4595
prove reject programs sooner classic algorithm 
suppose eliminate left right bias case 
application folklore algorithm may reject recursive call incompatible 
order remove left right bias rejection delayed entire expression examined 
type systems classic inference algorithm introductory discussion type systems inference algorithms car 
proofs algorithm correctness dam 
section begins summarising language type system remainder 
types type schemes type environments consider types built type variables ff fi types polymorphic type constants int real function type constructor 
form polymorphism hindley milner type systems arises type schemes 
types type variables universally quantified example ff ff fi 
type generic instance type scheme ff delta delta delta ff obtained substituting types type variables ff delta delta delta ff particularly concerned type schemes substitutions refer type variables universally quantified 
type inference starts type environment gamma map identifiers type schemes 
gamma augmented new terms example declaration terms removed gamma gamma term removed 
type schemes obtained types closing type type environment 
gamma closure gamma type scheme ff delta delta delta ff ff delta delta delta ff type variables occurring occur free gamma particular closing type type environment free type variables results type variable type universally quantified 
table components type systems 
component values type variables ff fi types ff int real type schemes oe ff delta delta delta ff type environments gamma fx oe delta delta delta xn oe ng language type system hindley milner type systems formulated non deterministic transition systems 
look simple calculus particularly interested rule deriving types applications 
type system 
fig 
syntax calculus 
type inference rule app states type environment gamma subexpression type function similarly type type environment suitable argument function application type non determinism case arises function argument type attempting show gamma way knowing sub derivation note inference rule tells order typeable conditions satisfied 
typeable typeable types compatible application 
desirable error messages describe mistake incompatibility 
saw section happen current type checkers 
announce incompatibility problem inside fig 
type derivation rules 
gamma gamma var gamma gamma gamma app gamma fx gamma abs gamma gamma fx gamma gamma substitutions addition types type schemes type environments type inference algorithms extensive substitutions 
substitution finite mapping type variables types 
substitutions denoted set mappings fff 
delta delta delta ff 
substitution represents means refining types 
know certain type containing type variables associated expression substitution associated apply substitution type refine 
classic algorithm new algorithm refining types substitutions 
substitutions meet formedness criteria 
definition formedness 
substitution said formed dom fv fg 
restriction prevents getting infinite types types contain 
substitutions composed 
substitution effect applying exists iff formed conjuncts formed necessary fv dom fg 
define ordering types iff type environment gamma instance gamma iff gamma gamma classic inference algorithm classic inference algorithm deterministic simulation derivation rules 
particular type environment expression attempts find type expression substitution types type variables expression type substituted type environment 
algorithm traverses structure expression building substitutions types shown 
concerned case algorithm handles function applications 
significant part case unification 
algorithm returns general substitution applied argument types produce type example int ff fi real fff 
real fi 
intg 
survey applications techniques unification 
type inference fails unifier exists 
inference fails failure unify implementations produce error messages indicating problem subexpression current interest 
result type inference shown programmer succeeds polymorphic type scheme 
returns type scheme gamma 
gamma typically free type variables type variables result type normally universally bound 
action algorithm satisfies soundness theorem completeness theorem 
theorem soundness 
gamma succeeds derivation gamma theorem completeness 
gamma gamma instance gamma type scheme gamma fig 
classic type inference algorithm gamma ff delta delta delta ff gamma fg fi ff delta delta delta fi ffn new type variables fi delta delta delta fi gamma gamma gamma fi new fi fi gamma gamma fx fig new fi sfi gamma gamma gamma fx gamma 
gamma succeeds 
gamma gamma rp gamma generic instance rp gamma 
proofs theorems dam 
revisit theorems algorithm modified 
source left right bias left right bias arises substitution applied type environment gamma type checking means identifier incorrectly correctly inference fail wrongly imply contains error 
table shows different ways application case fail interpreted 
concern possible differentiate inconsistencies inconsistencies inside table ways fail type check application expression 
point failure possible meanings recursive call gamma internal inconsistency incompatible gamma recursive call gamma internal inconsistency incompatible gamma inconsistency unification fi applied solution proposed delay applying substitutions gamma having means combining substitutions 
means described section 
algorithm unifying substitutions seen examples demonstrating left right bias seen algorithm works know bias arises case application 
objective new algorithm allow infer types substitutions subexpression independently 
new algorithm deals combining substitutions section shows modify section shows extend algorithm apply type inference algorithms type systems 
idea unifying substitutions treat subexpressions independently modified version recursive calls gamma gamma 
yield result pairs 
necessary check substitutions consistent apply terms resulting types free type variable domain substitution return formed substitution containing entries second requirements simply unwanted free type variables 
likewise third simply essence operations summarised requirements check substitutions consistent create substitution contains effect 
unify substitutions 
examples look algorithm unifying substitutions worthwhile seeing examples 
simplest case substitutions completely independent 
fff 
intg ffi 
flg fff 
int fi 
flg domains contain common element unify relevant types fff 
int fig fff 
fl ffi 
real fl 
intg note equivalent results obtained simply composing substitutions 
previous example occurred inside lambda term 
substitution produced comes ff type variable 
substitution unification fail example ffi 
ff ffi 
real real ff 
intg inconsistency instantiations ff case 
unification fail occurs error 
fff 
int fig ffi 
int ffg clearly substitutions imply ff fi map infinite types substitutions unified 
formal definition substitution unifies substitutions particular general unifier pair substitutions rs unifies augmented equivalent unifying substitution 
unified substitution effect ff ff ff ff ff 
algorithm algorithm computes general unifier pair substitutions 
see algorithm works note domain result consists parts shown 
algorithm introduced deals parts domain separately 
free variables range unifier free domains 
fig 
domain consists parts shaded 
disjoint parts domains free variables ranges domains overlap 
dom fv algorithm commented italics 
note terminate occurs error indicated fails 
verification shown compute general unifier pair substitutions 
theorems define property 
theorem 
pair substitutions succeeds returns unifying substitution 
theorem 
unifies 
succeeds returning 
rs proofs propositions extended version mca :10.1.1.43.7746
fig 
algorithm commented italics 
split domains disjoint parts dom gamma dom fff 
ff ff dom gamma dom fff 
ff ff dom dom note fv dom fg similarly start add terms time producing formed substitutions fff 
delta delta delta ff 
ng remove elements dom remove ff ff fv terminate occurs error fff 
gs unifier deal items ffi delta delta delta fi mg fi fi fi fv fv terminate occurs error vm implementation note proofs regarding algorithm show general unifier pair substitutions computable 
algorithm particularly efficient suitable representation substitutions compilers 
having explicit substitutions passed parameters returned functions common implement substitutions 
type variable represented apply substitution updated point type 
intended efficient representing types data types substitutions explicitly say lists 
substitution applied type soon created 
discussion worthwhile implementing substitutions 
glasgow haskell compiler pw spectacular speedups attained monadic arrays compiler tofte tof small project written standard ml type checker efficient imperative data structures 
representation types substitutions represents greedy strategy incompatible principle applied 
intention type inference algorithm introduced section avoid applying substitutions essential 
intention hand substitutions applied type soon substitution created 
great advantage representing substitutions explicitly type checker need apply immediately choose substitutions apply type 
gives potential variations conventional algorithms example type checker backtrack order find possible locations mistakes 
second advantage substitution contains important information help programmer debug program 
explicit substitutions allow easier manipulation analysis information 
possible represent types substitutions algorithm techniques type checkers applied speed 
new version know means unify substitutions seen possible look new type inference algorithm 
differs case applications fig 
algorithm case application 
gamma gamma gamma fi new fi fi stated earlier algorithm treats symmetrically features analogous manner addition correctness algorithm produce results verify necessary prove soundness completeness theorems theorems damas proved algorithm sound answer gives type parameter expression type environment obtained applying substitution original type environment 
theorem soundness 
gamma succeeds derivation gamma theorem proved mca :10.1.1.43.7746:10.1.1.43.7746
completeness result states type exists expression returns type general type known exist 
theorem completeness 
gamma gamma instance gamma type scheme gamma 
gamma succeeds 
gamma gamma rp gamma generic instance rp gamma 
proof theorem mca :10.1.1.43.7746
satisfies soundness completeness theorems know solutions theorems unique principal type scheme theorem dm know produces results corollary equivalent 
pair gamma gamma succeeds returns gamma succeeds returns 
interpreting failure argument possible create better error messages fails possible recall ways application case fail possible causes table 
particular gamma fails may caused incompatible mistake sort error message programmers find frustrating easy find original source problem 
consider possible causes failure application case table 
table ways fail type check application expression 
point failure possible meanings recursive call gamma internal inconsistency incompatible gamma recursive call gamma internal inconsistency incompatible gamma substitution unification inconsistency unification fi suitable argument clearly type checkers produce informative error message uses section explores uses type check larger expressions simple applications symmetrically example curried expressions tuples type inference algorithms 
curried expressions intention type check subexpressions independently compiler better estimate source inconsistencies 
coarse granularity considering components application 
extend examines program detail looking subexpressions time 
expressions functional programs composed curried applications form delta delta delta sequence values applied succession 
standard ml typed calculus treat expressions hierarchy applications delta delta delta delta delta delta shown part 
second part shows user views curried expressions 
modified section pattern recursive calls 
curried expression delta delta delta wish independently infer substitution type subexpression 
substitutions unified 
failure point indicates inconsistency subexpressions 
substitutions applications final result expression evaluated 
failure point indicates argument suitable 
curried expression size number substitutions unify 
extend deal sets substitutions pairs 
simple algorithm mca :10.1.1.43.7746
fig 
language semantics compiler view curried expressions differently programmer 
algorithm takes second view expressions 
semantic view pragmatic view operation new inference algorithm routine collect subexpression results list 
new algorithm generates unified substitution version sets substitutions checks application valid returning result type 
curried expression case algorithm 
fig 
algorithm case curried expressions 
gamma delta delta delta sn collect gamma delta delta delta sng delta delta delta fi new fi fi collect gamma append collect gamma gamma gamma tuples records tuples programming languages way representing data structures vectors temporary constructions pass parameters functions 
example standard ml basis library provides function list take expects pair integer list 
pair transient value pass values function 
programming languages record tuple types situation programmers complicated necessary remember arrangement parameters functions 
sufficient simply know information function requires know order parameters tuple 
type inference algorithm curried expressions extended handle arrangement subexpressions tuples 
trivial matter involving changing collect traverses appropriate syntactic structure remainder types tuple record required 
types substitutions subexpressions possible automatic program repair system attempt rearrange subexpressions try find similar program typed 
example list take expects tuple type int list easy see curried expression list take converted looking types subexpressions obvious ways rearrange 
type inference algorithm alternative type inference algorithm hindley milner type systems ly :10.1.1.29.4595
top algorithm attempts check expression type suitable context 
algorithm takes type environment gamma expressions target type returns substitution gamma case algorithm application expressions shown 
fig 
application case algorithm gamma gamma fi gamma fi clear algorithm suffers left right bias simple matter change remove bias seen 
fig 
application case modified gamma gamma fi gamma fi inference gamma fi fails implies function correct return type 
inference gamma fi fail gamma inconsistent typing gamma 
unification fails suitable argument inconsistency 
introduced concept unifying substitutions type inference 
algorithm defined 
proofs properties mca :10.1.1.43.7746
classic inference algorithm modified recursive calls type checking application expressions independent 
achieved proofs modified version correct mca :10.1.1.43.7746
new type inference algorithm advantage left right bias locations type errors type checking application expressions 
means type inconsistency function argument detected internal inconsistency argument 
form error message confusing programmers removed 
new inference algorithm extended deal complex syntactic structures curried expressions tuples 
remove left right bias type inference algorithms 
ian stark stephen gilmore commenting early versions 
supported epsrc research studentship 
bs mike ryan 
explaining type errors polymorphic languages 
acm letters programming languages systems march 
bs karen bernstein eugene stark 
debugging type errors full version 
technical report state university new york stony brook computer science department november 
www cs sunysb edu stark reports index html 
car luca cardelli 
basic polymorphic type checking 
science computer programming 
dam luis manuel martins damas 
type assignment programming languages 
phd thesis department computer science university edinburgh april 
cst 
db dominic duggan frederick bent 
explaining type inference 
science computer programming 
dm luis damas robin milner 
principal type schemes functional programs 
ninth annual symposium principles programming languages pages 
association computing machinery 
jw gregory johnson janet walz 
maximum flow approach anomaly isolation unification incremental type inference 
acm symposium principles programming languages number pages 
acm acm press 
kevin knight 
unification multidisciplinary survey 
acm computing surveys 
ly lee yi :10.1.1.29.4595
proofs folklore polymorphic type inference algorithm 
acm transactions programming languages systems 
accepted publication 
mca bruce :10.1.1.43.7746
unification substitutions type inference 
technical report ecs lfcs laboratory foundations computer science university edinburgh james clerk maxwell building kings buildings mayfield road edinburgh uk march 
pw peyton jones wadler 
imperative functional programming 
acm symposium principles programming languages number pages 
acm acm press january 
tof mads tofte 
lectures standard ml 
technical report ecs lfcs laboratory foundations computer science university edinburgh james clerk maxwell building kings buildings mayfield road edinburgh uk march 
