hypergraphs uniform diagram representation model mark minas lehrstuhl fur programmiersprachen universitat erlangen 
erlangen germany email minas informatik uni erlangen de preliminary proc 
th int 
workshop theory application graph transformations paderborn germany pages technical report univ paderborn tr ri nov working diagrams visual environments graphical diagram editors diagrams represented internal model 
graphs hypergraphs known concepts internal models 
shows hypergraphs uniformly wide range different diagram types hyperedges represent diagram components spatial relationships components 
proposes procedure translating diagrams hypergraph model graphical scanner procedure check hypergraph hypergraph grammar defining diagrams syntax parsing procedure 
procedures necessary hypergraph model visual environments support free hand editing user modify diagrams arbitrarily 
diagrams ancient form visual expression 
graphic displays certain level schematization emphasizing relevant aspects 
diagrams tools thought aids memory means instruction 
play important role complex situations represented 
computer science field diagram applications shneiderman diagrams message sequence charts entity relationship diagrams examples 
computers editing interactions diagrams internally represented formal model abstracts diagrams redundant visual information informations diagram readily available 
concepts internal models 
multisets tokens attributed symbols different kind graphs hypergraphs 
graphs typical examples graphs nodes represent tokens edges represent relationships tokens special graphs nodes distinct connection points edges representing connections hypergraphs diagen project visual tokens diagram components represented hyperedges connections nodes :10.1.1.47.6425
hyper graphs advantage formal visual concept 
furthermore powerful mechanisms graph transformation theory existence hyper graph parsers syntactic analysis 
extends hypergraphs context graphical diagram editors offering free hand editing 
free hand editing contrast syntax directed editing allows user arbitrarily arrange modify diagram components computer screen 
editor task distinguish syntactically correct diagrams incorrect ones re construct diagram syntactic information 
previous described diagrams internally represented hypergraphs diagram language specified hypergraph grammar :10.1.1.47.6425
approach limited due reasons hypergraph grammars restricted context free restricted context sensitive ones order allow efficient parsing 
hypergraphs represent diagrams arbitrary spatial relationships inside 
describes hypergraphs represent diagrams arbitrary spatial relationships 
hypergraphs uniform representation model wide range diagram languages 
order internal model describes specific tasks diagram editor scanning parsing user arranges set diagram components 
editor create resp 
update hypergraph represents arrangement components scanning step 
creating resp 
updating hypergraph editor check hypergraph syntactically correct hypergraph grammar parsing step 
rest organized follows section describes diagram languages demonstration examples 
section outlines hypergraphs represent diagrams arbitrary spatial relationships 
sections describe scanning parsing method necessary creating internal hypergraph model checking syntactic correctness 
section briefly outlines diagen project ideas fit 
related discussed section section concludes 
msc simple message sequence chart 
vex expressions lx lx xx 
numbers 
part diagram 
diagram language examples kinds diagrams message sequence charts msc vex expressions 
section briefly describes diagram 
msc language description interaction entities 
diagram msc describes messages interchanged process instances internal actions perform 
shows sample diagram msc 
vex visual language expressing expressions vex variable identifier represented empty circle labeling text may contained connected line called root node 
root node empty circle lines touching leading identifiers representing variable 
root node may internally tangential circle represents parameter abstraction included circle denotes free variable 
circle representing abstraction contains parameter circle vex sub diagram body 
application expressions depicted externally tangential circles arrow tangent point 
head arrow lies inside argument circle 
shows vex expressions lx lx xx 
general diagram consists set atomic diagram components spatially related 
shows msc vex expressions different concepts hypergraphs represent uniform straightforward way 
msc diagrams components surrounding boxes start boxes vertical lifelines message arrows action boxes labeling text 
vex expressions circles lines arrows labeling text 
spatial relationships composing diagram components different mscs vex expressions msc components simply dimensional shapes boxes text related connection objects lines arrows 
msc components combined attaching lines arrows boxes graph manner putting text near arrows boxes 
ways relating components vex expressions versatile circle touch contain arbitrary number lines arrows connecting circles arrows connect areas circles 
hypergraph representation diagrams hypergraphs proved intuitive means internally representing diagrams 
hypergraph generalization graph edges hyperedges connected fixed number nodes 
hyperedge type number connection points attach nodes 
say hyperedge visits nodes 
familiar directed graph seen hypergraph hyperedges visit exactly nodes 
specification diagram language hypergraph model consists mapping hyperedges diagram counterparts description valid hypergraph models 
specified hyper graph grammar see section 
specification mappings hyperedges diagram components quite obvious atomic diagram component represented hyperedge hyperedge represent component attachment areas areas connect components attachment areas 
msc hyperedge types msc start lifeline message action text representing surrounding boxes start boxes vertical lifelines message arrows action boxes labeling text 
surrounding box attachment areas borderline area lifelines subarea labeling text 
message attachment areas head tail arrow area labeling text 
diagram components similar attachment areas 
special consideration needed lifelines natural representation hyperedge representing lifeline 
hyperedge need actions incoming outgoing messages plus additional ones line 
dealing hyperedges variable number problems syntax definition 
represent lifeline segments events actions lifeline 
shows hypergraph representing msc shown 
better understanding carry names corresponding attachment areas 
easy way representing component connections sufficient general spatial relationships diagram components 
example consider vex 
vex diagrams consist circles labeling texts lines arrows represented corresponding hyperedges 
text hyperedges visiting single node text area represent labeling texts 
hyperedges representing arrows lines simply connect nodes representing corresponding points attachment area lines arrows 
vex circle attachment areas borderline inner area 
circles represented directed edges connecting nodes representing attachment areas see 
vex main spatial relationships relate circles additional hyperedge node attributes represent position size attributes omitted 
text message line name text lifeline msc msc simple name start lifeline name name msc line line line msc msc name env contains text msc message lifeline start text lifeline lifeline text name start action lifeline text hypergraph model msc diagram depicted 
nodes drawn black dots hyperedges ovals labeled lines connecting hyperedges visited nodes 

textual attributes containing labeling text represented text hyperedges 
area border circle circle attachment areas area border 
hypergraph representation consists circle hyperedge visiting area borderline node 
stands area borderline 
internally externally tangential contains 
circle may related arrow arrow head tail lies inside circle 
situation represented similar line circle border arrow hyperedge simply visits node represents circle area 
situation circle contained described simply visiting area node 
clear circle inner 
furthermore third circle contained outer visit area node loosing information second third circle related 
order loose information representing diagram internal hypergraph additional hyperedge types necessary directly represent spatial relationships 
vex touch inside hyperedges 
denotes undirected hyperedge connecting borderline nodes tangential circles denotes directed edge area node circle area node circle contains 
need direct representation circles internally externally tangential 
expressed touch edge border nodes circles inside edge area nodes circles internally tangential inside edge externally tangential 
order detection invalid diagrams possible level internal hypergraphs need additional intersect edge connects border nodes intersecting circles 
existence edge indicator invalid vex diagram 
figures show hypergraph representations vex diagrams 
result section hypergraph model diagram consists hyperedges representing diagram components nodes representing components circle circle circle inadequate representation spatial relationships circles 
diagrams hypergraph representation see text 
numbers corresponding circles hyperedges 
circle circle circle circle text text line circle touch touch inside arrow inside line hypergraph representation vex diagram 
nodes represented small circles edges ovals connected visited nodes 
edges diagram components gray label spatial relationship edges white 
textual attributes containing labeling text represented text hyperedges 
numbers 
refer circles 
areas 
spatial relationships diagram components modeled visiting nodes inserting additional hyperedges directly representing spatial relationships 
scanning diagram editors offering free hand editing diagram components directly arranged user created deleted dragged internal hypergraph model kept date 
graphical scanner task 
section describes scanning method adapted specific diagram languages 
previous sections msc vex diagrams demonstration examples 
intersecting attachment areas input scanning process set atomic diagram components specific set attachment areas 
connections spatial relationships diagram components 
component type circle vex different attachment area types different shapes borderline inner area circles vex 
attachment areas get connected intersect specific way 
attachment areas basically different kinds intersection possible case intersect omitted holds cases ffl ae ae type containing 
text line line circle touch circle circle touch inside inside inside circle arrow hypergraph representation vex diagram 
numbers 
refer circles 
ffl ae ae separated disconnected pieces type single intersection 
ffl ae ae separated disconnected pieces type multiple intersection vex differences intersection types essential circle contains type attachment areas circles areas 
circles touching intersection attachment areas circles 
circles intersecting syntactic error vex expression detected intersection attachment areas 
scanning procedure create hypergraph model set diagram components diagram component attachment areas hyperedge visits set nodes node attachment area :10.1.1.47.6425
check intersection pair attachment areas 
depending types attachment areas type intersection unify corresponding nodes distinct nodes single 
method extended extended hypergraph model cases additional hyperedges representing general spatial relationships inserted 
additional context taken account example vex shows consider functional application expressions touching circles arrow tangent point 
shows hypergraph model 
circles contains arrow attachment areas 
order obtain hypergraph extended scanning procedure contain rule unify circle area node arrow node corresponding attachment areas overlap 
circle contains arrow attachment areas 
rule require unify arrow head tail nodes area node circle 
obviously rule applied context 
similar problem arises vex expressions nested circles 
method described create large number inside edges 
result transitive closure set required inside edges 
select intersection edges hypergraph model connection areas find intersecting diagram components connection areas intersection graph hypergraph model connection areas step scanning method step scanning method obvious solution problems described consider nesting level intersection attachment areas circle circles containing left considerations 
general solution allows specification exactly behavior 
correct scanning method create hypergraph directly previous method 
create intermediate graph creating hypergraph see 
intermediate graph simply consists attachment areas nodes detected intersections explicit edges labeled intersection type 
intersection graph possible consider context unifying nodes adding hyperedges hypergraph 
scanning method works follows create intersection graph adding attachment areas diagram nodes 
pair intersecting attachment areas draw edge nodes 
intersection type edge label 
graph completed check edge intersection graph 
depending label context unify corresponding hypergraph nodes connect appropriate additional hyperedge 
remaining task specify action modifying hypergraph depending edge label edge context 
previous method intersection type intersection edge label types intersecting attachment areas determining right action 
action prohibited intersection edge certain context 
context represented graph 
formally scanning specification function theta theta action theta set attachment area types fc mg set intersection types action set actions hypergraph modifications set context graphs 
pair attachment area types intersection type consists action 
representing null operation expression lx ly action 
action action edges directed containing contained node edges undirected 
referring hypergraph nodes possible actions unify nodes draw inside edge node node 
empty graph graph attachment areas edges labeled intersection labels nodes labeled resp 
function scanning phase creation intersection graph follows edge intersection graph determine label edge source node target node attachment areas having types resp 
compute 

try match intersection graph nodes match resp 
match exist empty graph 
determine hypergraph nodes representing resp hypergraph model order modify hypergraph model 
vex attachment area types border point representing circle inner area borderline line arrow points labeling text area 
non null operations pairs theta brevity show specification case caused problems previous scanning method arrow point contained circle point area lx ly unify unify means unify nodes area point area graph detects situation arrow ends nested circle 
arrow get connected inner circle 
parsing diagrams represented hypergraphs 
order define diagram language terms hypergraph language hypergraph grammars appropriate means 
hypergraph parsers check syntactic correctness diagrams terms hypergraphs re construct syntactic structure 
hypergraph grammars restricted classes hypergraph grammars allowing efficient parsing briefly introduced 
restrictions turn rigid diagram languages vex 
section outlines parsing procedure applicable wider range hypergraph grammars 
hypergraph grammars special cases algebraic graph grammars hypergraph grammar hg consists disjoint finite sets nonterminal resp 
terminal hyperedge types finite set hypergraph productions starting hypergraph axiom containing nonterminal hyperedges 
production actions essentially transformation rules hypergraph model 
start name contains text lifeline env name start seq action name text msc line seq text name env msc contains line msc text message name seq seq lifeline lifeline env name contains lifeline seq seq lifeline contains name env msc msc lifeline lifeline seq seq seq lifeline seq lifeline name env contains productions hypergraph grammar mscs 
ovals depict terminal hyperedges rectangles nonterminal ones 
interface hypergraphs implicitly defined labeled nodes hyperedges contained lhs rhs time 
production depicted reversed message omitted 
algebraic hypergraph transformation rule hypergraphs called left hand side lhs right hand side rhs interface resp hypergraph morphisms injective production applied hypergraph finding subgraph redex removing sub merging rng exactly describe rhs fit 
resulting hypergraph called derived step 
usual hypergraph language hg set hypergraphs contain terminal hyperedges derived finite number steps exist efficient parsers restricted classes hypergraph grammars 
discussed efficient parsers context free restricted context sensitive hypergraph grammars similar context free string grammars context free hypergraph grammars defined terms productions context free production consists single nonterminal hyperedge lhs discrete interface containing node lhs injective morphisms :10.1.1.47.6425
contrast restricted contextsensitive hypergraph grammars consist context free embedding productions add hyperedges certain context 
shows productions restricted context sensitive grammar msc 
vex hypergraph model described section restricted contextsensitive hypergraph grammar 
grammar general hypergraph grammar definition easily created 
shows selection productions 
complete grammar consists pro vex fun abstr appl arrow var touch fun arrow fun abstr inside circle touch inside touch vex var inside inside vex appl inside var abstr appl vex selected hypergraph productions vex grammar 
representation productions 
circle touch circle circle circle circle circle inside inside touch fun vex inside appl inside inside touch vex inside inside arrow touch sample derivation vex grammar 
gray areas indicate redexes applied productions 

context free ones 
interface hypergraph consists nodes inside hyperedge 
special applied applicable 
application prohibited lhs nodes interface hypergraph 
host hypergraph additional edge visiting node corresponding unlabeled removing yield inconsistent hypergraph node removed leaving additional edge visited node gluing condition 
shows sample derivation diagram editor free hand editing parsing algorithm try reconstruct derivation starting hypergraph internal hypergraph model current diagram 
diagram valid parser succeeds 
context free restricted context sensitive hypergraph grammars problem efficiently decidable :10.1.1.47.6425
general grammar problem longer decidable 
certain restricted graph grammars layered graph grammars special parsing algorithms quite inefficient 
class reserved graph grammars proposed allows straight forward way parse hypergraphs 
derivation hypergraph literature mainly graphs simple form hypergraphs 
results graphs apply hypergraphs 
reserved graph grammars introduced zhang zhang special kind graphs hypergraphs 
reconstructed exchanging lhs rhs production reversed productions start derivation reversed productions derivation stops 
resulting hypergraph starting hypergraph valid 
parsing terminating founded ordering hypergraphs decreasing derivation step parsing 
furthermore resulting system reversed productions confluent derivations hypergraph conclude simple parser finds derivation hypergraph starting hypergraph exists derivation 
parser run dead 
confluence property crucial property frequently vex grammar hard fulfill 
propose simple effective extension graph grammars system reversed productions confluent extend productions appropriate context sufficient add appropriate negative application conditions affected productions 
motivated habel production matching lhs applicable nac satisfied 
nac simply hypergraph connected lhs reversed production 
nac satisfied embedding lhs host hypergraph nac hypergraph embedded 
course additional contexts modify add information hypergraph grammars original grammar longer description hypergraph language syntax 
adding adequate contexts yield confluence modify original grammar language easy 
fully fledged set reversed productions vex due size 
details see 
give example need additional contexts vex 
shows hypergraph reversed productions applicable 
reversed applied variable act function fun 
situation reversed may applied easily distinguished situation reversed may applied considering context arrow edge indicated reversed applied shows appropriately extended reversed productions 
diagen diagen described consists editor framework generator 
formal specification diagram language serves input generator creates custom components build framework graphical editor customized specified diagram language 
main features supported approach diagrams internally represented hypergraphs see section diagram language hypergraph arrow var fun vex var arrow vex inside var touch arrow inside arrow hypergraph overlapping redexes indicated gray area appropriately extended reversed see negative application condition indicated resp 
additional context 
language mapping hypergraphs visual representation diagrams 
previous context free hypergraph grammar restricted context sensitive describe hypergraph language :10.1.1.47.6425
nodes hyperedges carry attributes grammar productions augmented layout constraints attributes accessible production 
provides automatic user adjustable layout diagrams 
diagrams edited syntax directed manner 
diagrams context free share transformations derivation trees 
transformations may modify diagrams hypergraphs directly 
hide details user interactions user editor described certain interaction automata 
free hand editing supported 
user arbitrarily add delete move modify parts diagram drawing tool 
underlying hypergraph model modified accordingly hypergraph parser distinguishes correct diagrams incorrect ones keeping underlying hypergraph syntactic meta structure date 
free hand editing parser support relaxes need specify full set transformations diagrams syntax directed editing free hand editing unspecified diagram operations 
editing mode enhances usability editors rapid prototyping diagram editors possible extreme case specification diagram operations omitted completely 
currently ideas previous sections incorporated diagen order support free hand editing diagram languages arbitrary spatial relationships limited context free restricted context sensitive hypergraph grammars 
related related field tools creating diagram editors fields scanning algorithms hyper graph parsing 
list selects approaches 
field frameworks diagram editors related approaches closely related ones proposed visual environment rekers schurr genged taentzer object oriented hierarchy representing diagrams syntactic models uniform representation hypergraphs 
connecting visual components system uses attachment points connected lines 
presents similar general approach allows represent arbitrary spatial relationships components 
approach rekers schurr uses kinds graphs internal representations diagrams spatial relationship graph srg abstracts physical diagram layout represents higher level spatial relationships 
additionally syntax graph asg kept date srg representing diagram logical structure 
different connected context sensitive graph grammars define syntax 
free hand editing diagrams planned modify graph syntax directed editing going modify second 
graph modified accordingly 
diagen uses hypergraphs graphs allows natural diagram model 
furthermore restrict discussions graph diagrams 
considers diagrams arbitrary spatial relationships 
genged interactive tool creating editors graph diagram languages powerful graph transformation system 
diagrams arbitrary spatial relationships free hand editing graph parser supported 
ideas section related blostein 
describe scanning method uses graph rewriting create graphs representation mathematical formulas 
application graph transformation rules controlled spatial coordinates recognized symbols 
contrast approach depend overlapping attachment areas allow take account distant components 
approach general expense efficiency crucial context interactive applications diagram editors 
furthermore related hyper graph parsing approaches 
example lutz chart parser flowgraphs special kind diagrams 
flowgraphs considered special case hypergraphs 
chart parser top bottom context free flow grammars 
rekers schurr proposed graph parser general grammars called layered graph grammars 
parsing algorithm uses bottom top phase re construct derivation sequences graph 
zhang zhang proposed efficient parser context sensitive reserved graph grammars rekers schurr 
properties required hyper graph grammars quite restrictive 
hypergraph parsing procedure discussed uses parser relaxes re 
additional information negative application conditions provided 
reconsidered modelling diagrams hypergraphs done diagram editors diagen 
diagram editor internal hypergraph model processed syntax checking semantic evaluation scope 
discussed different ways model diagrams obtain diagrams connecting combining components 
model diagram editor supports free hand editing graphical scanner needed creates hypergraph model diagram currently edited 
scanning method 
scanning method specification diagram language describes relationships diagram components modeled edges hypergraph depending diagram components contexts 
approach hypergraphs flexible modelling concept suitable modelling large number different diagram languages 
outlined efficient method syntax checking 
diagrams syntax specified hypergraph grammar 
correctness diagram checked trying reduce diagram hypergraph grammar axiom reversed grammar productions transformation rules 
additional negative application conditions avoid dead ends 
simple efficient syntax checking procedure applicable wide range hypergraph grammars restricted context 
negative application conditions provided information 
far scanner incrementally hypergraph model re created scratch small diagram parts modified 
current problem tries obtain incremental scanner 
deals hypergraph model 
far hyperedges allowed visit fixed number nodes depending hyperedge type 
diagrams visiting arbitrary number nodes sense lifeline connecting points time message sequence charts 
natural model hyperedge representing time line 
hyperedge visit nodes model points time 
taentzer 
defining visual languages algebraic specification techniques graph grammars 
sept 
blostein 
recognition mathematical notation 
bunke wang editors handbook character recognition document image analysis chapter pages 
world scientific 
bottoni costabile levialdi 
formalising visual languages 
pages 
hall zorn 
programming visual expressions 
pages 
lucia 
framework syntactic models implementation visual languages 
pages 
ehrig 
algebraic theory graph grammars 
claus ehrig rozenberg editors graph grammars application computer science biology volume lecture notes computer science pages 
habel 
hyperedge replacement grammars languages volume lecture notes computer science 
springer verlag berlin 
habel heckel taentzer 
graph grammars negative application conditions 
fundamenta informaticae 
itu geneva 
recommendation message sequence chart msc 
lutz 
chart parsing flowgraphs 
proc 
th int 
conf 
artificial intelligence ijcai detroit michigan pages aug 
marriott 
constraint multiset grammars 
pages 
minas :10.1.1.47.6425
diagram editing hypergraph parser support 
pages 
minas 
high level visual language generating web structures 
page 
minas 
specification diagram editors providing layout adjustment minimal change 
pages 
minas 
diagen generator diagram editors providing direct manipulation execution diagrams 
pages 
shneiderman 
flowchart techniques structured programming 
sigplan notices aug 
rekers schurr 
graph grammar approach graphical parsing 
pages 
rekers schurr 
graph framework implementation visual environments 
pages 
richards 
fundamental design variables diagramming 
proc 
workshop thinking diagrams wales pages 

specifying animated diagram classes graph transformation systems 
diploma thesis univ erlangen germany 
german preparation 
workshop theory visual languages capri italy sept 
minas 
interaction really graphical user interfaces 
pages 
ieee symp 
visual languages bergen norway 
ieee computer society press aug 
ieee symp 
visual languages st louis missouri 
ieee computer society press oct 
ieee symp 
visual languages darmstadt germany 
ieee computer society press sept 
ieee symp 
visual languages boulder colorado 
ieee computer society press sept 
ieee symp 
visual languages capri italy 
ieee computer society press sept 

zhang zhang 
reserved graph grammar specification tool diagrammatic vpls 
pages 
