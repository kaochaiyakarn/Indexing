automatic dimensional inference mitchell wand college computer science northeastern university huntington avenue cn boston ma usa wand ccs northeastern edu patrick keefe icad massachusetts avenue cambridge ma 
number proposals integrate dimensional analysis existing compilers appears easy observation dimensional analysis fits neatly pattern ml style type inference 
show add dimensions simply typed lambda calculus show typable dimension preserving term principal type 
principal type unique choice basis 

fix number dimensions 
define set types vari expi expi expi vari expi expi expi gamma expi expi added new set types nn representing dimensional quantities 
set denote dimensions mlt usual way nn represents dimension usually denoted supported national science foundation number ccr 
cited wand keefe automatic dimensional inference computational logic honor alan robinson 
lassez plotkin eds mit press pp 

equality number expressions interpreted rationals equality type expressions interpreted symbolically equality number expressions 
note expi just linear combination number variables 
production expi expi expi 
unification algorithm important note property preserved substitution 
state types important constants 
follow names units denote dimensions kg sec intention kg denotes denotes meter numerical constants dimensionless type sec denotes dimensional quantity seconds 
full language proposal course engineered unnecessary 
arithmetic operators polymorphic types system example gamma general fixed exponent gamma type 
consider case general exponentiation transcendental functions 

language choose ordinary simply typed lambda calculus types 
language standard result typability reduces satisfiability theorem expression untyped lambda calculus type set type assumptions associating types identifiers fv effectively construct set equations type set type assumptions fv iff exists substitution associating types type variables model polymorphism usual way ascribing occurrence different instance fresh number variables polymorphic type 

result gives set equations type expressions number expressions solved 
solve type equations usual unification algorithm 
type equations eliminated left set equations linear combinations number variables 
solved linear algebra 
possible outcomes may solution meaning typing original expression may unique solution giving unique set dimensions may infinitely solutions 
case usual algorithms linear algebra give basis linear combination type variables rational coefficients solutions expressed 
get principal type unique change basis 
theorem language type number expressions decidable general unification problem 
proof algorithm parts 
solve type equations ordinary substitution 
solve resulting number equations 
order utilize result unification algorithm context need state invariant preserves 
give unification algorithm somewhat detail order show small modifications necessary order allow reader confirm invariant preserved 
algorithm input set equations output general unifier signal solutions 
algorithm variables set equations substitution oe 
algorithm satisfy invariant oe ffi oe ffi algorithm follows initialization set oe identity substitution vars 
clearly initialization establishes invariant 
loop step contains type equations go gaussian elimination step 
choose type equation transform case analysis just usual unification algorithm augmented case equation form 
sides identical delete equation 
identical halt solution 
solution clause invariant solution 
equation form delete equation add equations usual step conventional case 
equation form 
delete equation add number equations 
equation form type variable 
appears halt solution 
replace oe oe ffi delete equation substitute occurrences resulting set equations 
equation type expressions solution 
halt report solution 
usual unification algorithm easy see step preserves invariant decreases usual halting measure variables number symbols gaussian elimination step point set equations number expressions 
set linear equations number variables solved linear algebra 
set solutions halt report solution 
set solutions linear algebra gives substitution mapping dependent variables linear combinations independent variables basis 
choice values basis yields solution equations solution form 
gives general solution original equations unique choice basis 
qed 
example consider xyz gamma gamma sec deduce ff fi fl ff fi fl entire term type ff fi fl ff fi fl ff fi fl ff fi fl 
exponentiation transcendental functions 
general exponentiation appear fit neatly scheme yields dependent types exponents 
fundamental theorem dimensional analysis called pi theorem states dimensionally meaningful physical formula put form theta pi pi constant arbitrary dimensionless function pi dimensionless products physical quantities 
exponential appears physically meaningful formula applied dimensionless quantity 
adequate assign exponential function type gamma restricting physical expressiveness resulting system similarly trigonometric functions may safely assigned dimensionless type sin 
stated result terms simply typed lambda calculus easily adapted include ml rule type type assumptions find general type universally quantify type number variables appear type resulting type scheme associated type assumptions interesting extension add local dimensions 
add lambda calculus new construct type inference rule nn nn numerical types changed add trailing type inference done new dimension 
intention receives unit quantity new dimension 
example apple apple denotes apple scope 
apple orange apple orange illegal add apples oranges 
restriction return dimension prevents new dimension escaping scope 
baldwin implementation physical units sigplan notices august 
dimensional analysis yale university press 
buckingham phys 
rev 
cardelli basic polymorphic typechecking polymorphism newsletter jan 
appeared computing science tech 
rep bell laboratories murray hill nj 
damas milner principal type schemes functional programs conf 
rec 
ninth ann 
acm symp 
principles programming languages 
milner theory type polymorphism programming comp 
sys 
sci 

mohr programming pascal physical units sigplan notices december 
hilfinger ada package dimensional analysis acm toplas 
strong typing physical units sigplan notices march 
