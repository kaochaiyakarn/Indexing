functional programming january fl cambridge university press funct pearls monadic parsing haskell graham hutton university nottingham erik meijer university utrecht tutorial defining recursive descent parsers haskell 
spirit shopping combines material areas single source 
areas functional parsers burge wadler hutton fokker monads structure functional programs wadler wadler wadler special syntax monadic programs haskell jones peterson 
specifically shows define monadic parsers notation haskell 
course recursive descent parsers defined hand lack efficiency bottomup parsers generated machine aho mogensen gill marlow 
research applications simple recursive descent parser perfectly sufficient 
parser generators typically offer fixed set combinators describing grammars method described completely extensible parsers class values full power haskell available define new combinators special applications 
method excellent illustration elegance functional programming 
targeted level undergraduate student familiar haskell completed grammars parsing course 
knowledge functional parsers useful experience monads assumed 
haskell library derived available web www cs nott ac uk department staff bib html pearl type parsers defining type parsers newtype parser parser string 
string parser function takes string characters argument returns list results 
convention empty list results denotes failure parser non empty lists denote success 
case success result pair component value type produced parsing graham hutton erik meijer processing prefix argument string second component unparsed suffix argument string 
returning list results allows build parsers ambiguous grammars results returned argument string parsed different ways 
monad parsers parser define item successfully consumes character argument string non empty fails item parser char item parser cs 
case cs cs 
cs define combinators reflect monadic nature parsers 
haskell notion monad captured built class definition class monad return 



type constructor member class monad equipped return functions specified types 
type constructor parser instance monad class follows instance monad parser return parser cs 
cs parser cs 
concat parse cs cs parse cs parser return succeeds consuming argument string returns single value operator sequencing operator parsers 
function parsers defined parse parser parser applies parser argument string cs give list results form cs value cs string 
pair parser applied string cs 
result list lists concatenated give final list results 
return functions parsers satisfy simple laws return return na 
na 
fact laws hold monad just special case parsers 
laws assert modulo fact right argument involves binding operation return left right unit associative 
unit laws allow parsers simplified associativity law allows parentheses eliminated repeated 
functional pearls notation typical parser built structure 

pn 
parser natural operational reading apply parser call result value apply parser call result value apply parser pn call result value combine results applying semantic action parsers semantic action form return function true general 
example may necessary parse argument string result returned case combinator defined 
haskell provides special syntax defining parsers shape allowing expressed appealing form pn notation single line preferred making parentheses semi colons manner pn fact notation haskell monad just parsers 
subexpressions ai pi called generators generate values variables ai 
special case interested values produced generator ai pi generator abbreviated simply pi 
example parser consumes characters throws away second character returns pair defined follows parser char char item item item return choice combinators define combinators extend monadic nature parsers 
haskell notion monad zero monad zero plus captured built class definitions class monad 
zero graham hutton erik meijer class 
monadplus 

type constructor member class member class monad equipped value zero specified type 
similar way class monadplus builds class adding operation specified type 
type constructor parser instances classes follows instance parser zero parser cs 
instance monadplus parser parser cs 
parse cs parse cs parser zero fails argument strings returning results 
operator non deterministic choice operator parsers 
parser applies parsers argument string appends list results 
zero operations parsers satisfy simple laws zero zero laws fact hold monad zero plus 
laws assert zero left right unit associative 
special case parsers shown modulo binding involved zero left right zero distributes right provided ignore order results returned parsers distributes left zero zero const zero zero na 
zero laws allow parsers simplified distribution laws allow efficiency parsers improved 
parsers built return results argument string parsed different ways 
practice normally interested result 
reason define deterministic choice operator behaviour result returned parser 
parser 
parser parser cs 
case parse cs xs 
functional pearls laws hold 
case precondition left distribution law automatically satisfied 
item parser consumes single characters unconditionally 
allow conditional parsing define combinator sat takes predicate yields parser consumes single character satisfies predicate fails sat char 
bool 
parser char sat item return zero example parser specific characters defined follows char char 
parser char char sat similar way supplying suitable predicates sat define parsers digits lower case letters upper case letters 
recursion combinators number useful parser combinators defined recursively 
combinators fact defined arbitrary monads zero plus clarity defined special case parsers 
ffl parse specific string string string 
parser string string return string cs char string cs return cs ffl parse repeated applications parser combinator permits zero applications permits parser 
parser return parser 
parser return ffl parse repeated applications parser separated applications parser sep result values thrown away parser 
parser 
parser sep sep return parser 
parser 
parser sep sep return ffl parse repeated applications parser separated applications parser op result value operator assumed associate left combine results parsers graham hutton erik meijer parser 
parser 



parser op op return parser 
parser 


parser op rest rest op rest return combinators assume parsed operators associate right defined similar manner 
lexical combinators traditionally parsing usually preceded lexical phase transforms argument string sequence tokens 
lexical phase avoided defining suitable combinators 
section define combinators handle space tokens argument string 
combinators handle lexical issues comments keywords easily defined 
ffl parse string spaces tabs newlines space parser string space sat isspace ffl parse token parser throwing away trailing space token parser 
parser token space return ffl parse symbolic token symb string 
parser string symb cs token string cs ffl apply parser throwing away leading space apply parser 
string 
string apply parse space example illustrate combinators defined article simple example 
consider standard grammar arithmetic expressions built single digits functional pearls operators parentheses aho expr expr addop term term term term mulop factor factor factor digit expr digit addop mulop combinator implement left recursive production rules expr term grammar directly translated haskell program parses expressions evaluates integer value expr parser int addop parser int 
int 
int mulop parser int 
int 
int expr term addop term factor mulop factor digit symb expr symb return digit token sat return ord ord addop symb return symb return mulop symb return symb return div example evaluating apply expr gives singleton list results desired behaviour 
due luc duponcheel mark jones colin taylor philip wadler useful comments drafts article 
graham hutton erik meijer aho sethi ullman 

compilers principles techniques tools 
addison wesley 
burge 

recursive programming techniques 
addison wesley 
fokker jeroen 
may 
functional parsers 
lecture notes spring school functional programming 
gill andy marlow simon 
jan 
happy parser generator haskell 
university glasgow 
hutton graham 

higher order functions parsing 
journal functional programming 
jones mark 

system constructor classes overloading implicit higherorder polymorphism 
journal functional programming 
mogensen torben 

parser generator scanner generator gofer 
university copenhagen diku 
peterson john may 
haskell language report version 
research report yaleu dcs rr 
yale university 
wadler philip 

replace failure list successes 
proc 
conference functional programming computer architecture 
springer verlag 
wadler philip 

comprehending monads 
proc 
acm conference lisp functional programming 
wadler philip 

essence functional programming 
proc 
principles programming languages 
wadler philip 

monads functional programming 
broy manfred ed proc 
marktoberdorf summer school program design calculi 
springer verlag 
