appear proc 
eurocrypt lncs springer verlag berlin collision free accumulators fail signature schemes trees bari birgit pfitzmann hannover postfach hannover germany universit dortmund informatik dortmund germany email ls informatik uni dortmund de 
way accumulators introduced benaloh de mare accumulate large number values single authenticate input value need transmit 
way property sufficient applications 
generalize definition accumulators define construct collision free subtype 
application construct fail signature scheme time public keys accumulated short public key 
contrast previous constructions tree authentication length public key signatures independent number messages signed 
security digital signature schemes depends called computational assumptions factoring assumption 
somebody break assumption system get private key signer construct signatures messages chosen 
signer prove sign messages 
disadvantage overcome fail signature schemes 
schemes signer produce called proof forgery demonstrate sign message 
proof shows computational assumption broken fail system longer 
currently known basic constructions fail signature schemes fss schemes sign single message 
fss schemes message constructed time fss schemes tree authentication authenticate public time keys 
consequently length signatures scheme grows logarithmically number messages signed 
question done authors university hildesheim 
supported dfg german research foundation 
preliminary version available details bari 
avoided main gap known lower upper bounds complexity fail signature schemes 
accumulators solution problem large number values accumulated value authentication values additional value computed authenticate respect length additional value independent number values accumulated 
fss schemes accumulate public time keys length resulting public key signatures independent number messages 
accumulators defined way property output hard find suitable input 
unfortunately fss scheme adversary may able choose public keys values accumulated extent accumulated output 
define construct collision free accumulators 
take opportunity generalize accumulators defined contain properties needed purpose include newer accumulators 
new accumulators included modular fss scheme 
really scheme length public key signatures independent number messages 
goal constructing schemes trees similar efforts non fail provably secure signatures shorten signatures flat trees measures developed fss schemes 
organization section definitions constructions accumulators 
section describe conversion algorithms interface time fss scheme accumulator authenticate individual public time keys 
general construction accumulator fss scheme section 
example accumulator fss schemes follow section 
accumulators accumulators introduced new way summarizing large number values value 
accumulators defined properties need purposes generalize definition little 
define subtypes accumulators different levels security 
accumulators important subtype call elementary accumulators see section 
general accumulators definition 
family accumulators components sets accu keys contain possible keys security parameter number values accumulated probabilistic polynomial time algorithm accu gen chooses accumulator key accu keys 
choice uniformly random simply write examples accu keys independent sets yn containing suitable inputs accumulator key probabilistic polynomial time algorithm accu eval input accumulator key values yn yn outputs value auxiliary value aux algorithms 
write yn accu eval yn 
execution accu eval input yn yield output probabilistic polynomial time algorithm auth input aux computes value accu set accu needed authenticate write auth aux auth aux 
polynomial time algorithm authentic input accu checks yn accu accu authenticated output ok ok write authentic accu authentic accu 
additionally polynomial time algorithms input checks yn input accu checks accu accu require input authenticated output formally accu keys yn aux yn ng authentic gamma auth aux delta ok way property defined accumulators 
generalized definition means hard adversary values yn accumulation result value find value accu authenticates respect article informally considers slightly stronger property call strongly way 
means yn hard find pair accu authentic gamma accu delta ok fy yn attacker choose value 
importance strong way property recognized 
accumulator fss scheme need stronger property adversary able choose public time keys accumulated values yn 
definition 
family accumulators times collision free hard find yn value accu authenticated accu yn probabilistic polynomial time adversaries sufficiently large authentic gamma accu ok fy yn yn yn accu accu accu gen accu yn aux yn definition 
family accumulators collision free times 
elementary accumulators accumulators defined functions hn xn theta yn xn accumulator key 
repeated hn delta delta delta hn gamma hn delta delta delta delta yn result application hn inserted argument application hn yn yn accumulated value xn initial value start xn function hn create accumulator general definition initial value part key follows aux yn aux yn 
yn auxiliary output computation values accu function hn quasi commutative hn gamma hn delta hn gamma hn delta xn yn need property accumulator fss scheme function property easily construct algorithms create verify values accu auth gamma yn delta hn hn hn gamma hn gamma delta yn authentic accu ok iff hn accu case list values accu computed delta log applications hn tree evaluation 
done offline published 
examples subsections give examples accumulators 
elementary accumulator modifications fulfill collision freeness needed accumulator fss scheme 
elementary strongly way accumulator described 
short uses hash function generates long random output fixed length delta input security parameters 
transformed bitstring length far 
accumulate values yn corresponding strings multiplied modulo coordinatewise 
result bit zero zero bit place 
main advantage accumulator absence trapdoor information accumulators rsa assumption knows factors rsa modulus 
disadvantage long output long public key fss scheme 
rsa accumulator random oracle 
example accumulator elementary accumulator function hn mod definition 
family rsa called rsa accumulator random oracle accu keys rsa phi fi fi rsa mod zz psi rsa fy rsa yn delta delta deltay mod auth rsa gamma yn delta delta delta deltay gamma delta delta deltay mod authentic rsa accu ok iff accu modn rsa mod set rsa moduli length rsa 
difference original accumulator restriction input domain prime numbers 
addition prove collision freeness stronger rsa assumption 
assumption strong rsa assumption 
probabilistic polynomialtime algorithms sufficiently large gamma modn prime rsa mod zz delta gammac adversary usual rsa assumption may choose exponent extracts root 
aware corroboration hard break 
obvious attacks equivalent breaking problem believed hard adversary chooses random break rsa 
chooses random compute discrete logarithm 
tries find ord divides de gamma ord smallest mod 
break rsa random public exponent 
sufficient consider case prime factor set gamma mod obtain mod ord divides gamma 
attacker try choose special values rsa easier break 
exponents known 
attacks short secret exponents wien corresponds public exponent see way attacker influence corresponding secret exponent 
known attack short public exponents applies situations attacker sees messages encrypted exponent different moduli 
similarly new class attacks short public exponents applies situations attacker sees ciphertexts messages known polynomial relationship encrypted modulus 
theorem 
strong rsa assumption rsa collision free 
proof sketch 
adversary finds collision rsa finds yn accu accu delta delta deltay mod break strong rsa assumption follows delta delta delta yn th root constructed compute zz ar extended euclidean algorithm possible prime accu accu ay ra mod ut rsa accumulator random oracle 
second example uses name suggests random oracle omega 
asked compute omega new value oracle generates random number answer stores previous pairs answers asked 
practice replaces random oracle efficient hash function 
course replacement heuristic 
random oracle construct accumulator normal rsa assumption 
elementary accumulator uses function rsa omega omega gamma dist delta omega dist mod omega directly proof need exponents prime numbers 
append bits omega dist prime 
course possible values accept input suitable dist exists 
definition 
family sets membership decidable polynomial time 
contains values really want accumulate security parameter family called rsa accumulator random oracle accu keys rsa omega phi omega fi fi rsa mod omega ff zz div dlog ke zz psi rsa omega omega phi dist fi fi dist zz omega dist prime psi values accumulate pairs value want accumulate suffix turns hash value prime number 
rsa omega omega gamma dist dist delta omega dist delta delta delta omega yn dist mod auth rsa omega omega dist gamma dist dist delta omega dist delta delta delta omega gamma dist gamma delta omega dist delta delta delta omega yn dist mod authentic rsa omega omega gamma dist accu delta ok iff accu omega dist modn theorem 
accumulator collision free normal rsa assumption 
proof sketch 
show probabilistic polynomial time algorithms sufficiently large accu omega dist omega dist delta delta delta omega yn dist modn dist dist dist dist dist dist phi dist fi fi dist gamma omega dist prime psi accu zz dlog ke rsa mod omega ff zz div zz gamma accu dist dist dist delta omega omega means access oracle omega assume algorithm contradicts inequality construct algorithm omega calls omega successful sets omega dist omega dist computes th root extended euclidean algorithm values proof previous theorem 
exception equals 
oracle collision happen small probability 
sufficient prove probabilistic polynomial time algorithms sufficiently large prime dist dlog ke rsa mod omega ff zz div zz dist omega omega dist loss generality assume asked oracle omega 
number values asks bounded polynomial 
strategy uses choosing oracle queries amounts thing list random numbers ae select numbers ae dist new adversary list delta exponents extract root 
possible non negligible probability possible extract th root random new adversary inserts div random place list gamma random numbers appends values dist calls probability smaller factor delta gets th root recall 
ut proof shows result interesting practice function oracle perfect find accumulator collision find collision function weaker requirement oracle break strong rsa assumption 
conversion algorithm want collision free accumulators defined previous section accumulate public time keys fss scheme 
public time keys suitable input accumulator 
example rsa accumulator random oracle defined section needs prime numbers input known fss schemes uses prime numbers public time keys 
convert public time keys prime numbers accumulated accumulator 
course conversion done underlying time fss scheme accumulator 
prove security 
better simple conversion algorithm effect security interface fss scheme accumulator 
way get general modular construction collision free accumulator time fss scheme provided finds conversion algorithm 
examples instantiations section 
purpose family conversion algorithms components function calc pars computes security parameters accumulator oe underlying fss scheme input oe security parameters desired accumulator fss scheme number messages signed 
output fulfill oe oe polynomial time algorithm gen input oe accumulator key computes key par specifying individual member probabilistic polynomial time algorithm eval input conversion key par public time key pk outputs value pk yn suitable input accumulator key unsuitable 
success probability inverse polynomial examples constant 
write par pk eval par pk 
polynomial time inversion algorithm abbreviated gamma par gamma par gamma par pk delta pk par pk unsuitable 
note conversion time key necessarily deterministic inversion 
possible include random bits output par needed accumulator result gamma par unique 
show core simple example prim section 
converts input numbers prime numbers possible idea section parameter par small integer input algorithm prim checks dist gamma number dist prime 
returns dist unsuitable 
get back output inversion algorithm simply cuts significant bits 
example conversion algorithm course identity function conversion necessary 
accumulator fss scheme section describe accumulator fss scheme 
time fss scheme parameters oe family collision free accumulators parameters family conversion algorithms time fss scheme accumulator 
time fss scheme called time fss schemes 
generated center trusted recipients verified signer need trust center 
center recipients simplicity 
signer generate time key pairs wants 
security parameters oe chosen signer information theoretical security chosen center computational security recipients 
simplicity consider schemes fulfil simplified security criteria schemes theorem 
means proofs forgery depend 
natural chosen signer proof forgery show secret hidden 
secondly required signer accepts significant probability time key pair forgery probability forgery proved gammaoe construction key generation 
accumulator fss scheme gets oe input 
remaining security parameters calculated oe calc pars oe center generates algorithm gen oe time fss scheme 
accumulator key accu gen 
parameter conversion algorithm par gen oe 
signer verifies 
need verify accumulator key effect security 
weak accumulator key may easier adversary find accumulator collision forge signature 
problem signer show collision proof forgery 
global values part signer public key readability omit 
signer chooses key pairs sk pk underlying time fss scheme 
computes pk par pk pk yn pk unsuitable generate new key pair sk pk repeat computation pk signer computes main public key pk accumulator fss scheme accumulating pk pk aux pk pk publishes pk stores aux 
formally secret key sk contains secret time keys sk sk converted public keys pk pk auxiliary output aux signing 
signature th message pk accu time signature message time key sk pk accu needed authentication time public key pk value accu computed accu auth pk aux accu independent message precomputed computer idle 
testing 
value pk accu acceptable signature message iff 
acceptable time signature respect pk gamma par pk 
pk yn 
accu accu 
pk authenticates pk authentic pk pk accu ok proving forgeries 
pk accu acceptable signature message previously signed signer generate proof forgery follows 
pk gamma par pk fpk pk tries generate proof forgery time fss scheme 

shows accumulator collision proof gamma pk pk pk accu delta proof shows assumption accumulator broken 
verifying proofs forgery 

proof said proof forgery time fss scheme verifies 

proof accepted iff fulfills conditions pk pk pk pk pk pk yn accu accu authentic gamma pk pk accu delta ok pk aux pk pk 
security theorem 
accumulator fss scheme defined previous section secure signer recipients defined 
proof sketch 
information theoretic security signer show forgery forgery time fss scheme fulfil condition item proving forgeries provable probability pk fpk pk pk pk pk inversion gamma par deterministic 
value signer computes item accumulator collision 
forgery underlying time scheme signer prove error probability gammaoe gammaoe probability finds time key pair sk pk public time key forger generated time key pair probability gammaoe proof forgery underlying fss scheme independent number unsuitable public time keys generated forger gains information sk accumulation 
recipients want secure signatures accepted invalid 
possible adversary computes acceptable signature correctly proven forged signer signer incorrectly deny previously generated signature proof forgery 
sufficient show proof forgery computed 
computationally true proof forgery new scheme implies successful proof forgery underlying time fss scheme collision utilized accumulator 
parts security parameter guaranteed function calc pars possible polynomially restricted forger 
key pairs thrown away key generation help adversary proof 
ut examples construct examples accumulator fss schemes accumulators section 
underlying time fss scheme choose described 
discrete logarithm assumption 
public keys pairs elements group computing discrete logarithms assumed hard length bits security parameter algorithms accumulator fss schemes clear previous section soon fix conversion algorithms 
examples uses accumulator rsa needs prime numbers inputs convert time public keys prim interpreting bit number 
security parameters time fss scheme accumulator calculated oe calc pars oe dlog ke oe key conversion algorithm gen oe dlog functions guarantee converted public time keys domain accumulator parameters time fss scheme simply oe 
parameter accumulator set rsa modulus longer time fss key appended value dist length dist somewhat arbitrary value ensuring prime typically search interval 
second example rsa accumulator random oracle assumption 
accumulator needs pairs pk dist input conversion algorithm similar prim returns pk dist omega pk dist value prime 
security parameters computed oe calc pars oe oe key conversion algorithm gen gamma oe omega delta omega concretely means length rsa modulus accumulator independent length time keys oracle outputs appended values dist accumulated length oracle output adapted accordingly 
generalized definition accumulators definition collision free subtype 
constructed collision free accumulators stronger rsa assumption usual random oracle normal rsa assumption 
remind reader new assumption cryptology trusted certainly recommend version practice quite time 
accumulators construct fail signature schemes length public key signatures independent number messages signed additional cost signing small especially signature computed sent message known 
key generation takes significantly longer constructions trees 
avoid precomputation long secret key combine constructions top tree authentication 
way get flat trees similar 
instance accumulation pairs sk pk form tree levels structures generate structures lower level demand signing public keys secret keys upper level 
sign messages public key 
complete signature consists accumulation result lower level structure accumulator fss signatures described section 
acknowledgments michael waidner joachim biskup andreas pfitzmann ute von jan helpful comments 
bari bari mit fail ohne 
diplomarbeit institut ur informatik universit hildesheim july 
josh benaloh michael de mare way accumulators decentralized alternative digital signatures 
advances cryptology eurocrypt lncs pages 
springer verlag berlin 
mihir bellare phillip rogaway random oracles practical paradigm designing efficient protocols 
st acm conference computer communications security november pages 
acm press new york 
don coppersmith matthew franklin jacques michael reiter low exponent rsa related messages 
advances cryptology crypto lncs pages 
springer verlag berlin 
ronald cramer ivan damg ard new generation secure practical rsa signatures 
advances cryptology crypto lncs 
springer verlag berlin 
cynthia dwork moni naor efficient existentially unforgeable signature scheme application 
advances cryptology crypto lncs pages 
springer verlag berlin 
johan astad rsa low exponent public network 
advances cryptology crypto lncs pages 
springer verlag berlin 
ene van torben pedersen efficient fail signatures 
advances cryptology eurocrypt lncs pages 
springer verlag berlin 
ene van heijst torben pedersen birgit pfitzmann new constructions fail signatures lower bounds 
advances cryptology crypto lncs pages 
springer verlag berlin 
nyberg commutativity cryptography 
proceedings international workshop functional analysis trier university pages 
walter de gruyter berlin 
nyberg fast accumulated hashing 
rd fast software encryption workshop lncs pages 
springer verlag berlin 
torben pedersen birgit pfitzmann fail signatures 
appear siam journal computing april 
birgit pfitzmann fail signatures trees 
informatik berichte issn institut ur informatik universit hildesheim june 
birgit pfitzmann digital signature schemes general framework fail signatures 
lncs 
springer verlag berlin 
birgit pfitzmann michael waidner formal aspects fail signatures 
bericht fakult ur informatik universit karlsruhe december 
rsa ronald rivest adi shamir leonard adleman method obtaining digital signatures public key cryptosystems 
communications acm february 
adi shamir generation cryptographically strong pseudorandom sequences 
acm transaction computer systems february 
michael waidner birgit pfitzmann dining cryptographers disco unconditional sender recipient untraceability computationally secure 
advances cryptology eurocrypt lncs page 
springer verlag berlin 
wien michael wiener cryptanalysis short rsa secret exponents 
ieee transactions information theory may 

