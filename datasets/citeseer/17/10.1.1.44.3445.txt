tiger fast new hash function ross anderson eli biham cambridge university england email rja cl cam ac uk technion haifa israel email biham cs technion ac il 
cryptographic hash function block ciphers md initially quite attractive applications requiring fast software hashing 
collisions collision md 
casts doubt long functions variants ripe md md sha sha remain unbroken 
furthermore functions designed bit processors implemented efficiently new generation bit processors dec alpha 
new hash function believe secure designed run quickly bit processors slow existing machines 
motivation design requirements cryptographic hash functions important cryptographic protocols 
signature schemes role reduce amount data signed pre break properties multiplicative homomorphism exploited opponent 
short need efficient secure commercial applications need run quickly software common hardware platforms 
hash functions feedforward modes block ciphers pre main contenders functions md riv include md riv ripe md race sha nist sha nist 
family derivative mer 
collisions bs bs collision md dob 
attacks cast doubt security members families 
may speculate long function remain unbroken prudent start replacements 
performance point view functions mentioned designed bit processors 
generation processors bit words includes dec alpha series forthcoming processors intel hp ibm 
reasonable assume exception microcontrollers embedded applications majority systems bit processors years 
processors families hash functions implemented efficiently 
example md family uses bit rotations additions bit register handle bit value time decreases potential speed factor 
alpha architecture rotation operations bit bit 
considerations believe generation hash function secure 
way collision free multiplication free run quickly bit processors run slowly fielded bit machines intel insofar possible usable drop replacement md md sha sha 
proposal propose new hash function called tiger strong fast fast sha bit processors times faster bit dec alpha processors 
expected faster sha bit processors sha optimized bit machines proposal designed adequately word sizes 
main operation table lookup boxes bits bits 
bit machines implemented pair table lookups offset computation done 
operations bit additions subtractions bit multiplication small constants bit shifts logical operations xor 
operations twice slow bit machines exception shifts multiplications small constants times slower alpha processors special instructions multiply constants form sigma sigma 
drop compatibility adopt outer structure md family message padded single bit followed string message length bit word 
result divided bit blocks 
size hash value intermediate state words bits 
value chosen reasons 
bit words size multiple 
compatible applications sha hash size bits 
successful shortcut attacks existing hash functions attack intermediate state final hash value 
attacker typically chooses colliding values intermediate block propagates collision full function 
attacks intermediate hash values larger 
tiger full bits output may called tiger recommend new applications 
replacing functions existing applications suggest shorter variants 
tiger hash value bits result tiger compatibility sha sha 
tiger hash value bits result tiger compatibility md md ripe md variants hash functions block ciphers 
conjecture variants tiger collision free collisions tiger substantially effort 
believe way multiplication free 
efficiency function partially potential parallelism design 
md families operation depends directly result previous operation risc processors efficiently due pipeline stalls 
round tiger table lookup operations done parallel compilers best pipelining 
design allows efficient hardware implementation 
memory size required tiger slightly size boxes 
accommodated cache processor computation runs twice fast measured dec alpha 
size boxes delta delta kbytes size cache machines 
boxes kbytes required twice size cache alpha 
specification tiger computations bit words little endian complement representation 
bit registers called intermediate hash values 
registers initialized abcdef xf successive bit message block divided bit words 
computation performed update computation consists passes key schedule invertible transformation input data prevents attacker forcing sparse inputs rounds 
feedforward stage new values combined initial values give pass pass pass feedforward 
save abc saves value aa bb cc 
pass mul round mul round mul round mul round mul round mul round mul round mul round mul round mul mul ci ith byte 
note notation programming language denotes xor operator notation op means op operator op 
boxes take pages publish published electronically full source code available authors world wide web home pages 

key schedule xa abcdef 

logical arithmetic shift left shift right operators 

feedforward aa bb cc resultant registers bits intermediate hash value describes compression function 
black area denotes affected registers slanted lines point affecting bytes white area 
variables 

denote values 
second third passes respectively 
intermediate value hn taken output tiger 
security 
nonlinearity comes boxes bits bits 
better merely combining additions xors carry bits affects output bits just neighboring bits 

strong avalanche message bit affects registers rounds faster hash function 
avalanche bit words bit boxes faster shorter words 
save abc round round round round round round round round key schedule round round round round round round round round key schedule round round round round round round round round feedforward fig 

outline compression function tiger 
remarked shortcut attacks md target intermediate blocks 
increasing intermediate value bits helps thwart attacks 

key schedule ensures changing small number bits message affects bits various passes 
strong avalanche helps tiger resist attacks similar differential attack md changing certain bits message affects bits rounds small differences cancel pass 

multiplication register round contributes resistance attacks ensures bits inputs boxes previous rounds mixed boxes boxes different input difference 
multiplication prevents related key attacks hash function constant differs round 

feedforward prevents meet middle birthday attacks find preimages hash function complexity anyway 
summary put forward new hash function called tiger designed fast secure 
core rounds uses lookups bit boxes provide strong nonlinear avalanche plus number register operations increase diffusion differential attacks harder 
implemented efficiently bit bit machines 
fast sha sha full power bit machines times faster sha 
implemented bit machines faster sha 
outputs bit hash values 
compatibility existing hash functions suggest output truncated bits required compatibility existing applications 
believe shortened variants secure existing functions output length ultra cautious wish add extra passes tiger welcome suggest multiplicative constant extra passes 
call variants tiger tiger number passes number bits hash value 
usual suggesting new cryptographic primitive urge people study strength tiger appreciate attacks analysis comments 
information current status tiger updated copy implementations available authors home pages urls www cs technion ac il biham www cl cam ac uk users rja 
rj anderson classification hash functions codes ciphers proceedings fourth ima conference cryptography coding pp bs biham shamir differential cryptanalysis loki extended advances cryptology crypto pp bs biham shamir differential cryptanalysis data encryption standard springer biham new types cryptanalytic attacks related keys journal cryptology pp dob md collision free preprint september mer rc merkle fast software way hash function journal cryptology pp nist national institute standards technology secure hash standard fips department commerce january nist national institute standards technology secure hash standard fips department commerce april pre preneel analysis design cryptographic hash functions phd thesis catholic university leuven 
riv rl rivest md message digest algorithm advances cryptology crypto springer lncs pp internet rfc april riv rl rivest md message digest algorithm internet rfc april race integrity primitives secure information systems final report race integrity primitives evaluation ripe race springer lncs 
appendix source compression function tiger word word word word state block word state unsigned word block word state state state word block block block block block block block block word aa bb cc define aa bb cc define round mul xff xff xff xff xff xff xff xff mul define pass mul round mul round mul round mul round mul round mul round mul round mul round mul define xa abcdef define feedforward aa bb cc define compress pass pass pass feedforward compress state state state article processed macro package llncs style 
