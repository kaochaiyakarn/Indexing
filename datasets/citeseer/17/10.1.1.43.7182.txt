computational complexity agent design problems michael wooldridge department computer science university liverpool liverpool zf united kingdom wooldridge csc liv ac uk investigates computational complexity fundamental problem multi agent systems environment specification task construct agent successfully achieve task environment 
refer problem agent design 
formal model agents environments investigating various possible ways specifying tasks agents identify important classes tasks 
achievement tasks agent required bring specified set goal states maintenance tasks agent required avoid specified set states 
prove general case agent design problem pspace complete achievement maintenance tasks 
briefly discuss automatic synthesis agents task environment specifications conclude discussing related presenting 
approaches design agents operate autonomously environment 
approaches focus problem decision making fixed time bounds computational resource constraints 
result range software architectures autonomous agents increasing body evaluating architectures different environmental settings 
date agent community comparatively little attention basic computational problems underpin deployment agent systems 
focus particular problem call agent design 
agent design problem arises specification particular environment agent inhabit specification task 
agent design problem simply answering exists agent guaranteed successfully carry task environment 
course agent succeeds particular task environment necessarily succeed environment 
agent design problem involves consideration task environment properties 
analysis setting model agents environments formally define agent design problem 
model section considers various possible ways tasks specified 
conclude identifying common types tasks achievement tasks agent required bring specified set goal states maintenance tasks agent required avoid set states 
proceed analyse computational complexity agent design problem achievement maintenance tasks 
prove types tasks problem pspace complete general case 
section consider problem closely related agent design automatic synthesis agents task environment specifications 
briefly discuss implications agent design results synthesis algorithms focussing particularly possibility tasks specified logically 
discuss related ai computer science section section 
notation standard set theoretic logical notation possible augmented follows 
set set finite sequences denoted sequence obtained appending denoted 
write indicate element sequence write denote final element 
assume familiarity complexity theory :10.1.1.32.420
agents environments section formal model agents environments occupy model frame decision problems study 
systems interest consist agent situated particular environment agent interacts environment performing actions environment responds actions changes state 
assumed environment may finite set fe instantaneous states 
agents assumed repertoire possible actions available transform state environment 
ac finite set actions 
basic model agents interacting environments follows 
environment starts state agent begins choosing action perform state 
result action environment respond number possible states 
state result course agent know advance 
basis second state agent chooses action perform 
environment responds set possible states agent chooses action 
run agent environment sequence interleaved environment states actions set possible runs 
stand members order represent effect agent actions environment introduce state transformer function cf 
state transformer function maps run assumed action agent set possible environment states 
important points note definition 
environments assumed history dependent 
words state environment solely determined action performed agent current state environment 
actions earlier agent play part determining current state 
second note definition allows non determinism environment 
uncertainty result performing action state 
assumed action possible successor states case say allowable actions system ended run 
important assumption system guaranteed runs length polynomial size ac consider runs infinite length 
formally say environment env pair env set environment states state transformer function 
need introduce model agents inhabit systems 
architectures agents reported literature possibility directly models analysis 
order ensure results general possible choose model agents simply functions map runs assumed environment state actions cf 
pp ag ac notice environments implicitly nondeterministic agents assumed deterministic :10.1.1.52.5735
ag set agents 
say system pair containing agent environment 
system associated set possible runs denote set runs agent ag environment env ag env 
formally sequence represents run agent ag environment env iff 
ag empty sequence 
ag tasks agents build agents order carry tasks 
task carried specified 
obvious question specify tasks 
possibility associate utilities individual states task agent bring states maximise utility 
approach task specification simply function ir associated real value environment state 
similar approach markov decision processes 
main disadvantage approach assigns utilities local states difficult specify long term view assigning utilities individual states 
markov decision processes attempt overcome problem discounting states short term considered important states longer term approach known drawbacks 
possibility specify task function ir assigns utility individual states runs 
concerned agents operate independently long periods time approach appears appropriate purposes 
difficult define utility functions 
attempt assign real natural number utilities runs focus subset specifications utility function acts predicate runs 
formally say utility function ir predicate range set guarantees assign run true false 
run considered satisfy specification fails satisfy specification 
focus exclusively predicate specifications denote predicate specification write indicate run satisfies words true iff 
moment leave aside questions form predicate take expressed logical language 
similarly consider sorts tasks specified predicate specification return issues 
introduced key components required frame decision problems 
task environment defined pair henv env environment predicate runs 
set task environments 
task environment specifies properties system agent inhabit environment env criteria agent judged failed succeeded specification 
task environment henv write ag env denote subset ag env satisfy ag env fr ag env say agent ag succeeds task environment henv ag env ag env 
words ag succeeds henv run ag env satisfies specification note sense pessimistic definition success agent deemed succeed possible run agent environment satisfies specification 
required easily modify definition success extending state transformer function include probability distribution possible outcomes induce probability distribution runs 
define success agent probability specification satisfied agent 
ag env denote probability run occurs agent ag placed environment env 
probability ag env satisfied ag env simply ag env ag env ag env purposes assume task environments stochastic 
express basic decision problem consider remainder 
refer problem agent design 
agent design task environment henv answer exists agent succeeds henv 
complexity problem part determined way predicate represented 
example expressed undecidable logic corresponding agent design problem undecidable 
follows consider special cases agent design problem specification predicates expressed directly sets medium specification language 
particular consider tasks specified forms 
achievement tasks achieve state affairs 

maintenance tasks maintain state affairs 
subsections follow discuss types tasks detail 
achievement tasks intuitively achievement task specified number goal states agent required bring goal states care 
achievement tasks probably commonly studied form task artificial intelligence 
known ai problems blocks world achievement tasks 
task specified predicate achievement task identify subset environment states true just case occur agent successful guaranteed bring states run agent environment results states formally task environment henv specifies achievement task iff ag env predicate true iff exists refer set achievement task environment goal states task henv gi denote achievement achievement task environment goal states environment env 
decision problem corresponding agent design achievement tasks follows achievement agent design achievement task environment henv gi 
answer exists agent succeeds henv gi 
useful way think achievement agent design agent playing game environment 
terminology game theory exactly meant game nature 
environment agent state agent takes turn executing action environment responds state agent takes turn 
agent wins force environment goal states achievement design problem understood asking winning strategy played environment env bring type problem determining winning strategy player particular player game closely associated pspace complete problems pp :10.1.1.32.420
fact prove certain circumstances achievement agent design decision problem pspace complete 
order need consider environments encoded described decision problems 
understand meant consider input decision problems includes sort representation behaviour environment specifically environment state transformer function possible description table maps run action pairs corresponding possible resulting environment states fe verbose encoding clearly exponentially large size ac length runs bounded polynomial size ac finite 
encoding finding agent guaranteed achieve set goal states comparatively easy 
unfortunately course description environment usually available 
restrict attention environments state transformer function described tape turing machine input run action written tape output set possible resultant states written tape 
assumed compute resultant states turing machine requires number steps polynomial length input refer environment representations concise 
am indebted paul dunne drawing requirement attention suggesting solution 
assumption concise environment representations prove 
theorem achievement agent design pspace complete 
proof proof involves showing achievement agent design pspace polynomial space algorithm solves problem ii showing known pspace complete problem reduced achievement agent design polynomial time 
give design non deterministic polynomial space turing machine accepts instances problem successful outcome rejects 
inputs algorithm task environment henv gi run algorithm decides agent succeed environment current run 
initially run set empty sequence 
algorithm follows 
ends environment state accepts 
allowable actions rejects 
non deterministically choose action ac 
recursively call run 

accept accepts rejects 
algorithm non deterministically explores space possible agents guessing actions agent perform bring notice run polynomial size ac depth recursion stack polynomial size ac 
requires polynomial space 
follows achievement agent design non deterministic polynomial space 
remains note pspace achievement agent design pspace :10.1.1.32.420
ii reduce known pspace complete problem achievement agent design 
problem choose determining player winning strategy game generalised geography pp 
refer problem gg 
instance gg triple hn ni set nodes directed graph node gg player game players ii take turns starting select arc arc current node start play move changes current node players allowed visit nodes visited play ends player loser moves available 
goal gg determine player winning strategy 
gg similar structure achievement agent design exploit produce simple mapping instances hn ni gg task environments henv gi achievement agent design 
agent takes part player environment takes part player ii 
setting ac add element define singleton containing need define state transformer function environment idea directly encode arcs fng fe fn rg fn rg 
construction requires little explanation 
case deals situation agent illegal move case environment disallows moves game ends goal state achieved 
second case simply defines environment state corresponding move gg initial state gg 
third case player represented agent wins moves left player ii 
case environment returns indicating success 
fourth general case environment returns states corresponding possible moves 
construction exist agent succeed environment construct just case player winning strategy corresponding gg game 
construction clearly takes polynomial time conclude achievement agent design pspace hard done 
precise relationship class pspace class np problems may solved non deterministic polynomial time currently known 
known np pspace known inclusion strict np pspace strongly suspected strict 
generally believed pspace complete problems complex np complete problems 
leaving section observation achievement design problems achievement design problem henv easier problem henv leads lemma proof simple 
lemma henv henv instances achievement agent design exists agent succeeds respect henv exists agent succeeds respect henv maintenance tasks just predicate task environments characterised problems agent required bring state affairs classified problems agent required avoid state affairs 
extreme example consider nuclear reactor agent purpose ensure reactor enters state 
somewhat imagine software agent tasks ensure particular file simultaneously open reading writing 
refer task environments maintenance task environments 
task environment specification said maintenance task environment identify subset environment states false member occurs true 
formally henv maintenance task environment iff ag env 
refer failure set 
achievement task environments write henv bi denote maintenance task environment environment env failure set decision problem maintenance task environments corresponding agent design follows 
maintenance agent design maintenance task environment henv bi 
answer exists agent ag succeeds henv bi 
useful think maintenance agent design game 
time agent wins manages avoid environment role opponent attempting force agent agent successful winning strategy avoiding intuition suggests maintenance agent design harder achievement agent design 
achievement tasks agent required bring maintenance tasks environments agent avoid indefinitely 
result illustrates turns case problems complexity 
theorem maintenance agent design pspace complete 
proof show maintenance agent design pspace proceed theorem define nondeterministic polynomial space turing machine accepts just instances problem outcome 
construction similar theorem 
inputs task environment henv bi run 
theorem initially empty sequence 
algorithm follows 
ends environment state rejects 
allowable actions action ends run accepts 
non deterministically choose action ac 
recursively call run 

accept accepts rejects 
prove maintenance agent design complete pspace reduction gg 
details reduction similar theorem omit 
point note create state set fe addition need redefine fng fe fn rg fn rg 
case captures move gg second case captures agent making illegal move 
third case captures situation player ii environment available moves case agent wins 
final case available moves 
easy see agent avoid just case corresponding gg game win player construction done polynomial time follows maintenance agent design pspace hard done 
notice maintenance agent design problem henv easier problem henv reverse situation achievement agent design lemma corresponding lemma similarly easy prove 
lemma henv henv instances achievement agent design exists agent succeeds respect henv exists agent succeeds respect henv automatic synthesis agents knowing exists agent succeed task environment helpful helpful knowing agent hand 
obtain agent 
obvious answer manually implement agent specification 
possibilities see discussion 
try develop algorithm automatically synthesise agents task environment specifications 
try develop algorithm directly execute agent specifications order produce appropriate behaviour 
section briefly consider possibilities respect framework focussing primarily agent synthesis 
agent synthesis effect automatic programming goal program take input task environment task environment automatically generate agent succeeds environment 
formally agent synthesis algorithm syn understood function syn 
ag note function syn output agent output 
say synthesis algorithm sound returns agent agent succeeds task environment passed input 
say syn complete guaranteed return agent exists agent succeed task environment input 
sound complete synthesis algorithm output input henv agent exists succeed henv formally synthesis algorithm syn sound satisfies condition syn henv ag implies ag env ag env similarly syn complete satisfies condition ag ag ag env ag env implies syn henv intuitively soundness ensures synthesis algorithm delivers agents job correctly may deliver agents agents principle possible 
completeness ensures agent delivered agent possible guarantee agents job correctly 
ideally seek synthesis algorithms sound complete 
conditions soundness probably important point complete synthesis algorithms deliver buggy agents 
results comments computational complexity agent synthesis algorithms 
obvious sound complete synthesis algorithm implicitly solves pspace complete problem algorithm solve pspace complete agent design problems simply give task environment sound complete synthesis algorithm see output agent case answer agent design problem 
answer 
prepared relax soundness completeness conditions may able obtain algorithm acceptable complexity 
obtain interesting perspective synthesis agents view task specifications formulae logical language 
particular suppose logic models sequences states analogous runs 
temporal logic exactly logic models linear discrete temporal logic infinite linear discrete sequences states similar runs comment temporal logic section 
easy see specification implementable unsatisfiable unsatisfiable run satisfy sound complete synthesis algorithm satisfiability test predicate syn henv returns agent satisfiable 
implies computational complexity syn bad computational complexity satisfiability problem language expressed 
fact come surprise satisfiability problem linear discrete temporal logic kind pspace complete 
expressed logical form possibility synthesise agents doing constructive proof satisfiability specifications 
see section discussion 
conclude noting alternative synthesising agents specifications directly execute 
option explored detail literature 
example concept underpins concurrent metatem agent programming language 
leave consideration direct execution 
related formal model agents environments similar artificial intelligence example 
probably relevant mainstream computer science discussed application temporal logic reasoning systems 
temporal logic particularly applied specification non terminating systems 
temporal logic particularly appropriate specification systems allows designer succinctly express complex properties infinite sequences states 
identified decision problems agent design closely related problems studied computer science literature 
closest view pnueli rosner automatic synthesis reactive systems branching time temporal logic specifications 
specify reactive system terms order branching time temporal logic formula 
predicate characterises relationship inputs system outputs 
inputs may thought sequences environment states outputs corresponding sequences actions 
branching time temporal logic connective meaning paths possible futures 
specification intended express fact possible futures desired relationship holds inputs system outputs pnueli rosner show time complexity synthesis process doubly exponential size specification 
similar automatic synthesis techniques deployed develop concurrent system skeletons temporal logic specifications 
manna wolper algorithm takes input linear time temporal logic specification synchronization part concurrent system generates output program skeleton realizes specification 
similar reported clarke emerson synthesize synchronization skeletons branching time temporal logic ctl specifications 
artificial intelligence planning problem closely related achievement task environments 
strips archetypal planning system 
strips system capable description initial environment state specification goal achieved actions ac available agent generates sequence actions ac executed achieve states initial state goal state actions characterised declaratively strips subset order logic 
bylander showed propositional strips decision problem ac specified propositional logic exist ac achieves 
pspace complete 
renewed interest artificial intelligence planning community decision theoretic approaches planning 
popular approach involves representing agents environments partially observable markov decision processes pomdps 
put simply goal solving pomdp determine optimal policy acting environment uncertainty environment state non deterministic 
finding optimal policy pomdp problem similar agent design problem 
closely related tennenholtz moses multi entity model multi agent systems 
model define cooperative goal achievement cga problem crudely stated set benevolent agents goals plan set achieve goals 
show problem pspace complete 
problem similar flavour achievement implementation problem 
investigated agent design problem task environment consisting environment task specification exist agent successfully carry task environment particular defined different types tasks achievement tasks agent required bring set goal states maintenance tasks agent required avoid set states 
saw agent design problem types tasks pspace complete 
addition investigated implications result automatic synthesis agents task environment specifications 
related problems demand attention including example precise characterisation circumstances agent design problem tractable investigation verification problem agent ag achieve task environment env 
investigation stochastic environments development efficient synthesis algorithms development techniques directly executing agent specifications multi agent extensions 
benefitted enormously suggestions paul dunne wojciech rytter 
allen hendler tate editors 
readings planning 
morgan kaufmann publishers san mateo ca 
binmore 
fun games text game theory 
heath lexington ma 
blythe 
overview planning uncertainty 
wooldridge veloso editors artificial intelligence today lnai pages 
springer verlag berlin germany 
bylander 
computational complexity propositional strips planning 
artificial intelligence 
clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
kozen editor logics programs proceedings lncs volume pages 
springerverlag berlin germany 
fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge ma 
fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
fisher 
survey concurrent metatem language applications 
gabbay ohlbach editors temporal logic proceedings international conference lnai volume pages 
springer verlag berlin germany july 
genesereth nilsson 
logical foundations artificial intelligence 
morgan kaufmann publishers san mateo ca 
kaelbling littman cassandra 
planning acting partially observable stochastic domains 
artificial intelligence 
manna pnueli 
temporal logic reactive concurrent systems 
springer verlag berlin germany 
manna pnueli 
temporal verification reactive systems safety 
springer verlag berlin germany 
manna wolper 
synthesis communicating processes temporal logic specifications 
acm transactions programming languages systems jan 
papadimitriou :10.1.1.32.420
computational complexity 
addisonwesley reading ma 
pnueli rosner 
synthesis reactive module 
proceedings sixteenth acm symposium principles programming languages popl pages jan 
russell subramanian 
provably bounded optimal agents 
journal ai research 
sistla clarke 
complexity propositional linear temporal logics 
journal acm 
tennenholtz moses 
cooperation model preliminary report 
proceedings eleventh international joint conference artificial intelligence ijcai detroit mi 
wooldridge 
agent software engineering 
iee proceedings software engineering feb 
wooldridge jennings 
intelligent agents theory practice 
knowledge engineering review 
