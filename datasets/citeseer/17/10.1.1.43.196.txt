layered approach file system development john heidemann gerald popek department computer science university california los angeles technical report csd march discusses stackable layers approach file system design 
approach file system constructed layers implementing portion file system 
layer bounded identical interface framework 
symmetry interface coupled run time stack definition layer configuration flexible facilitate experimentation new file system development 
addition new file system functionality existing environments requires changes current interfaces 
address issue stackable layers joined extensible interface 
layer add interface existing layers continue function modification 
stackable architectures benefit new development techniques 
examines development methods unique stackable systems concludes analysis performance layered file systems 
utility modular structures systems software widely recognized 
numerous software development advantages including ease de sponsored defense advanced research projects agency contract number 
john heidemann sponsored usenix scholarship academic year gerald popek affiliated locus computing 
authors reached hall ucla los angeles ca electronic mail cs ucla edu popek cs ucla edu 
revised may 
velopment testing maintenance 
wish concentrate important aspect modular development ability independent parties contribute function innovation interfaces wisely chosen generally available compatibly maintained 
commonly operating systems especially benefit practice improvements may widely leveraged 
independent parties effectively surely sub groups development group served 
micro kernels protocol stacks important illustrative examples efforts develop suitable interfaces unix 
micro kernel mach chorus divides operating system parts core typically responsible providing virtual memory processing service remainder operating system services run framework provided core 
case mach unix merit core order total operating system kernel 
intra kernel boundary important structuring tool may widely available third parties build 
mach style interface set structure remaining better practices appear generally encouraged 
formal framework protocol stacks provided unix system streams goes step providing structure network communications software portions device support operating system 
interface protocol layers fixed syntax layer boundaries 
result third parties successfully built commercial quality layers integrate protocol modules 
mon communications software operating system represent kernel case structure allows multiple independent groups contribute communications functions 
believe ability reasons unix preferred base networking distributed systems software engineering commercial value micro kernels protocol stacks encouraging motivate consider analogous efforts parts system software 
examines services typically provided operating system file system obvious candidate introduce firm structure 
today entire file system substituted virtual file system vfs interface easy replace enhance separate portions file system keeping physical disk management installing new directory layer example 
file system easily compose operating system code arguably critical highly visible code internal structure enables third parties add value services major difference success host operating system allow rapid evolution services available users 
internal file system interface subject number serious requirements successful 
interface defined independent groups build services cross group coordination 
certainly interface extensible sense allowing new functions added old layers recognize functions explicitly handle 
new layers easy add 
rich flow control needed modules support sophisticated caching strategies 
important interface highly efficient file system tight loop users computations 
percent slow file system due composition half dozen layers software easily translate percent slowdown system making approach unacceptable 
research reported set provide interface file system software suitable wide heavy demanding situations maintaining characteristics mentioned 
envisioned situation filing service fact commercial systems adopted streams framework presumably similar reasons 
composed number independent layers provided developers working separately 
examples include physical disk directory management directory service selectively replicated files file versions encryption secure storage servers single system image synchronization group workstations compression layer long term caching service 
examples built stackable layers framework described 
cases replication discussed companion 
body describes stackable filing layers framework properties tried achieve performance results remaining experience gained far 
requirements layered interface success file system interface depends ability promote growth filing environments 
experiences existing file system interfaces stackable layering consider features critical layered interface 
extensibility 
interface extensible allowing addition new operations needed 
nearly interfaces adapt meet requirements 
example continuous evolution sun vnode interface described rosenthal 
current kernel interfaces discourage evolution 
addition new operation requires entire kernel source code availability modifications implementation existing file systems 
characteristics difficult third parties offer new file system services new file systems function concurrently 
ideally new file system functions added easily new device drivers today 

file systems frequently implement similar abstractions 
file systems coordinate disk access file directory allocation example 
file system module stacking effective method code reuse employing existing implementations known abstractions 
file system providing user services monolithic implementation separable services placed individual layers 
layers serve powerful os directory layer file layer disk layer simple file system stack 
building blocks 
layers bounded symmetric interfaces combining layers easy 
new functionality achieved simply slipping new layer currently available stacks 
example conventional disk file system provided stack layers 
base layer implements raw disk access 
middle layer provides inode level file support top layer provides hierarchical directory services 
illustrates stack 
stackable layering comprehensive user centered naming service replace hierarchical directory layer making low overhead file access layer compression layer inserted directory file layers provide twice apparent storage 
support stacking important consideration designing interface 
stacking difficult provide stacking extensible interface requires care 
consider 
interface supported file layer extended provide atomic commit example interface available directory layer layer completed commit service designed 
defined 
kernel interfaces described documentation relying programmer vigilance types contents arguments 
effective stackable layers approach insufficient 
meta data operation important allow stackable layers deal operations generic way 
information allow layer package operations execute address space 
relevant information interface available layer run time 
efficiency 
reuse layers enhanced layer encompasses abstractions 
layer crossing overhead significant modular filing environments suffer serious performance penalties relative non layered environments layers combined making layer reuse difficult 
layering strategy efficient impact file system design 
rich flow control 
file systems part passive responding user actions 
stackable file system user actions imagined passing layer stack processing 
occasionally user action needs pass stack sideways stack 
example cache invalidation multilayer system viewed lower layer calling upper layer purge cached data failure recovery distributed system typically requires consulting peers logical layer 
actions proceed naturally stack layers naturally progress sideways layers 
providing kind interaction framework file system interface minimizes number separate constructs required development 

file system interface effective complete control status file system 
remainder kernel intrude private contents file system data structures restrict interaction provided operations 
kernel try second guess file system 
optimizations assumptions status file system 
optimizations break confronted radically new file systems 
new interface original stackable file system efforts built standard file system interface 
progressed frustrated lack extensibility limited support file system stacking 
address issues adopted new interface 
discussing vnode interface common unix file system interface 
reviewing structure discuss modifications interface provide stacking extensibility 
examine new interface light goals section 
existing interface meet demand file systems kernel file system switch developed 
sun vnode interface example approach separating file systems remainder kernel object oriented interface 
versions vnode interface provided variants unix including sunos system release reno bsd 
interface successful supporting number file systems including berkeley fast file system system file system nfs variety file system services 
vnode interface consists primary data structures 
vfs structure identifies file system subtree files operating system 
vnode structures represent individual files file system 
provide data abstraction access data types restricted set operations convention file systems provide set operations 
vnode interface supports multiple file system implementations 
file systems provide set operations may implement different ways 
insure correct implementation invoked vnode vnode type associated operations vector 
vector lists vnode operation associating operation code implements 
operations vnode invoked indirect function call vector 
arguments operation simply parameters function call 
file systems interface configured unix mount mechanism 
mounting process connecting independent file system subtrees global file system name space 
subtree represents group files similar characteristics files disk partition remote host 
subtrees available mount system call 
allow configuration different kinds file system subtrees collection private data specific involved file system included mount system call 
example local file system list disk partition private data public data type count directly available efficiency 
significant actions provided vnode operations 
remote file system list host path name remote subtree 
mount mechanism provide file system stacking standard vnode interface 
sun microsystems nfs loopback translucent file systems take approach 
private data mount command identifies lower layer stack mount command creates new upper layer connects file system name space 
new interface concern existing vnode interface extensible little facilitate stacking 
meet needs new interface incorporates improvements standard interface 
provide extensibility construct operations vectors dynamically 
standard vnode interface operations vector defined convention 
file systems assume example open operation close operation second 
new interface constructs operations vectors dynamically operating system configured 
union supported operations taken operation assigned position vector 
custom operations vector built vnode type 
extensible interface complete set operations necessarily known file system implemented 
file system prepared handle general operations explicitly implement 
new interface layer provides default routine handle case 
layers base stack may log unknown operation return error default 
expect intermediate file system layers provide bypass routine pass unknown operations lower layer default 
default routine able handle different operations 
new interface supports ways 
passing operation arguments parameters subroutine implementing operation grouped structure pointer structure passed 
method allows arguments collectively identified generic pointer avoids repeatedly copying arguments passing layers file system stack 
second new parameter added operation 
argument contains meta information operation operation number os directory layer disk layer file layer file layer disk layer mirroring layer tree file system layers 
types arguments 
description information arguments structure extend object oriented style provided vnode interface implementation interface 
original interface gave user ability perform operations vnode regard type modification allows bypass routine forward operation lower level regard operation involved 
standard vnode interface new vnode interface constructs file system stacks file system granularity 
complete file system stack built creating layer mount command 
new layer name file system name space allowing potential user access level stack 
name serves identify layer layer mounted 
file system stacks necessarily linear 
trees possible file system lower layers 
shows tree file systems provide disk mirroring 
stack creation proceeds create mirroring layer names lower level layers provided mount call 
example shows get attributes vnode operation fstat system call 
operation invoked vop getattr macro 
macro expands encode operation arguments structure invoke operation indirectly operations vector 
assuming operation performed local disk ufs getattr routine called performs operation returns results user 
flow control observed earlier file systems usually passive responding operations user 
control typically flows user layers file system 
important applications file systems require richer flow control 
cache consistency algorithms distributed systems callbacks operations invoked client server inform client modified data 
similarly consider consistency layer connecting machines providing single system image semantics shared file system 
layer needs communicate consistency layers machines 
rpc protocol approach providing kind non linear flow control 
add interface file system attractive generalize vnode interface support non linear flow control 
considered different approaches providing functionality 
current method focuses providing richer flow control nfs protocol entirely satisfied degree transparency approach offers 
comparison layering methods ritchie introduced concept stackable protocols streams subsystem 
demonstrated flexibility symmetric interface provides protocol configuration widely adopted commercial unix systems 
concept stackable protocols applied widely kernel interfaces 
independently rosenthal developed prototype vnode interface streams stacking 
kernel applied concepts layered design late binding variety kernel interfaces 
compare layered design approaches standard vnode interface described 
struct vnode int int set configuration struct struct struct struct vnode avp struct struct define struct define vp va avp vp va vp vp va fstat struct int fd struct stat buf struct va vp fd vp va va buf ap struct ap struct inode ip ap vp ip ap va get stats declarations get attributes vnode operation fstat system call error handling code 
standard vnode interface new interface differs standard vnode interface support extensibility facilities stacking 
existing vnode interfaces provide support extensibility 
workstation vendors change interface releases operating system provide new filing facilities ability available third parties 
system release vnode interface acknowledges need extension reserving extra space operations vector 
space general mechanism provided coordinate multiple independent software vendors 
support creating new stacks old new interfaces similar 
operate file system granularity mount mechanism 
support new interface offers handling operations general way allows creation bypass routines making long term stackable development easier 
rosenthal stackable vnode interface rosenthal developed prototype file system supporting vnode stacking 
share goals approaches differ significantly points 
stacking occurs different granularities support dynamic change stacks methods extensibility differ 
rosenthal proposes stack vnode granularity file system granularity 
design allows vnodes file system completely different stacks 
design restricts stack composition file system basis vnodes file system similar stacks 
ability configure filing environment fine granularity principle desirable 
imagine files directory compressed encrypted compressed 
flexibility desirable requires underlying filing system typed files allow file identify stack separately 
currently filing system widely available 
additional complexity results managed practice clear 
area important research 
important difference rosenthal concerns stacks manipulated 
rosenthal allows new layers pushed active vnode 
user operations forwarded current top stack seeing new layer 
approach new layer new name file system name space see new layer user requests directed new name 
rosenthal approach advantage user see new layers created added stack operations automatically redirected stack top 
operations redirected 
file system layer may implement operations performing directly lower layer 
operations redirected 
methods invoke vnode operations provided going stack top redirection 
stacks communications protocols necessary right collection file stack layers order successfully manipulate filing environment 
generally stack read file semantic interpreters write file place 
encryption compression extended directory service encoded attributes write bits disk typically read bits default 
reason chose relatively static configuration method building stacks 
advantages result pushing popping stack layers run time 
top stack change clients pointers data linked vnode top disturbed 
example virtual memory manager operating systems accesses data file system 
file system client accesses files vnodes top stack retains pages belong file represented vnode linked memory 
stack top changed pointers change alternately page cache flushed introducing dynamic change environment typically static carefully weighed done surprises await 
furthermore question consider sequence reader maps file address space module pushed stack subsequent open followed reads done 
pages sunos virtual memory system indexed vnode file offset pages indexed vnode reads 
problem encountered rosenthal 
motivations dynamic layer manipulation 
approaches extensibility differ significantly rosenthal 
rosenthal employs versioning layer map version vnode interface 
layer provides compatibility mode layers old interface versions updated 
method possible interface gradual interface evolution permitted extensible design provides flexible alternative 
kernel kernel designed concept layered protocols 
originally focused network protocols addressed file systems 
scope kernel quite different 
kernel seeks provide complete new kernel environment targeted specifically file system portion existing unix systems 
kernel provides entire computing environment able provide kernel services homogeneous layered interface 
kernel provides number different protocols address issue evolution individual protocols 
experiences layered design effective stackable layering benefits techniques somewhat different traditional file system development 
section outlines lessons learned layer development 
layer composition possible ways structure file system layers 
encompassing rules layer selection layers reused implements defined abstraction 
layer design respect similar design filters unix shell 
illustrate point examples file system layering 
consider standard unix file system 
implements basic abstractions file system disk partition file level access os logical layer file layer disk layer transport layer disk layer file layer ficus stack layers 
left stack provides access local replica 
right stack shows addition transport layer allow remote replica access 
fixed names inode level access hierarchical directory service 
separated layers useful implementing file systems 
file systems databases afs ficus example enjoy efficient inode level file access overhead complication directories 
ficus replicated file system second example layered file system design 
shows construction ficus replicated file service 
composed cooperating layers logical layer exporting notion highly available file physical layer mapping replication standard unix file system 
layers transport service inserted provide access remote replicas 
physical layer composed services facility support additional file attributes map low level identifiers files support replication specific issues 
imagine improving ficus performance replacing identifier mapping facility inode level file access extended attribute facilities generally useful service 
possible separate functions physical layer isolated configurable layers 
interested dividing layer file mapping layer extended attributes layer ficus specific layer 
layers useful contexts 
cooperating layers previous section encouraged separation file systems small reusable layers 
services reusable occur middle special purpose file system 
example distributed file system may consist client server portion rpc service 
envision possible distributed file systems offering simple stateless service exact unix semantics file replication 
need rpc service service buried internals specific file system unavailable reuse 
cases call cooperating layers 
reusable service built layer rest split separate cooperating layers 
file system stack composed reusable layer placed 
encapsulated separate layer reusable layer available stacks 
ficus illustrates case placing optional transport layer cooperating layers 
details ficus implementation cooperating layers 
meta data meta data information operation place important part interface 
important reason current file system interfaces unsuitable stackable environment lack necessary meta data 
kernel interface important metadata identity operation types arguments 
information implementing bypass routine transport layer possible 
optimization helps metadata forms 
example rpc protocol may prefer list argument types speed bypass routine quickly access particular arguments 
duplicating information different forms improves performance 
network transparency transport layer stackable layer transfers operations address space 
object oriented flavor enhanced interface allows remote access network transparent programmer 
vnodes local remote file systems accept operations programmer may time 
transparency allows novel approaches configuring layers high performance local case described section 
transparency preserved extensible interface possible transport layers forward new operations address spaces just bypass routines forward operations lower layers address space 
moving operations address spaces requires type argument known network rpc protocol marshal operation arguments 
information part meta data carried operation described formal interface definition similar rpc interface specification 
addition description arguments operations operation assigned unique name universal identification similar rpc protocol numbers 
transport layer may thought semantics free rpc protocol stylized method marshaling delivering arguments 
nfs provides prototype transport layer 
providing monolithic networked file system layers top existing local file systems 
internally nfs uses vnode rpc interface 
nfs designed serve transport layer 
specialized remote file access 
stateless service complicates transport layer 
address protocol lack extensibility modified included support bypass routine 
uses transport layers transport layers powerful component construction distributed file systems 
configuration flexibility stackable environment transport layers additional applications 
role remote access provide bridge hardware software incompatibilities 
addition transport layers gain advantages micro kernel approach operating system design 
transport layers provide access resources available 
example new file system exist particular operating system 
mounting transport layer file system features new ser os development layer lower layer nfs server user level kernel level nfs client user system calls nfs protocol layer user level layer development transport layers 
vice available machines supporting transport layer 
similarly machine lacking hardware resources disk space machine data storage placing transport layer just disk level file system layer 
stackable layering natural complement micro kernel design 
layer thought server operations simply rpc messages servers 
fact new layer development usually takes form ucla 
shows strategy 
nfs transport layer serves rpc interface moving operations kernel user level file system server 
transport service user kernel layer allows userlevel calls lower level vnodes exist inside kernel 
result layers may developed executed user code 
rpc real cost careful caching provide performance kernel file system 
stackable layering offers valuable complement approach 
file system layers interact layer interface transport layers removed configuration affecting layer implementation 
file system run kernel avoiding rpc overhead 
stackable layering advantages micro kernel development available needed performance overhead rpc may removed production 
performance interface described implemented modification sunos 
implementations converting entire kernel new interface new interface new file systems supporting old interface rest kernel 
examine performance new interface consider classes benchmarks 
carefully examine costs particular parts new interface micro benchmarks 
consider interface modifications affect system performance comparing modified kernel unmodified kernel 
determine cost multiple layers new interface evaluate performance file system stack composed differing numbers layers 
compare implementation effort similar file systems new old interfaces 
timing data collected sun mb ram mb maxtor xt hard disks 
measurements section new interface new kernel section file systems 
micro benchmarks parts new vnode interface called vnode operation 
minimize total cost operation carefully optimized 
discuss portions interface method calling operation bypass routine 
evaluate performance portions interface consider number assembly language instructions generated implementation 
statistic rough indication true cost provides order magnitude comparison began considering cost invoking operation old new interfaces 
shows code calling operation 
sun platform original vnode calling sequence translates assembly language instructions new sequence requires instructions view factors machine architecture choice compiler significant impact figures 
architectures instructions significantly slower 
claim rough comparison statistics 
similar ratio sparc architectures overhead significant respect file system operations 
interested cost bypass routine 
imagine number filter file system layers adding characteristics file system stack 
file compression local disk caching examples services layers offer 
layers pass operations directly layer modifying user actions uncompress compressed file bring remote file local disk cache 
layers practical bypass routine inexpensive 
complete bypass routine design amounts assembly language instructions third instructions uncommon argument combinations reducing cost forwarding simple vnode operations instructions 
cost significantly simple subroutine call significant respect cost average file system operation 
investigate effects file system layering section examines performance impact multilayered file system 
interface performance encouraged results previous section anticipated low overhead stackable file system 
goal compare kernel supporting new interface standard kernel 
examine performance consider benchmarks modified andrew benchmark recursive copy remove large subdirectory trees 
addition examined effect adding multiple layers new interface 
andrew benchmark phases examines different file system activities 
unfortunately frustrated shortcomings benchmark 
phases brief making accurate evaluation phases difficult 
final compile phase relatively long machines compilation compute bound obscuring impact file system performance 
results benchmark seen table 
overhead phases averages slightly percent 
short run times benchmarks limit accuracy due timing granularity 
compile phase shows old sequence required instructions new 
figures produced free software foundation gcc compiler 
sun compiler bundled sunos produced instructions 
slight overhead 
attribute lower overhead fewer number file system operations done unit time phase benchmark 
get accurate assessment performance new interface examined additional benchmark 
benchmark employed phases doing recursive copy second recursive remove 
phases operate large amounts data mb usr include directory tree extend duration benchmark 
knew overhead occurred kernel measured system time exaggerate impact layering 
additional phase recursively copies data second recursively removes 
seen table overhead averages 
multiple layer performance stackable layers design philosophy advocates layers implement traditionally provided monolithic module cost layer transitions minimal serious file system implementations 
examine impact multi layer file system analyze performance file system stack number layers employed changes 
perform experiment began kernel modified support new interface file systems old interface rest kernel base stack placed conventional unix file system modified new interface 
layer mounted zero null layers merely forwards operations layer stack 
file system stacks ran benchmarks described section 
test illustrates worst case layer provides full layer overhead additional functionality 
shows results study 
seen performance varies nearly linearly number layers 
modified andrew benchmark shows elapsed time overhead layer 
alternate benchmarks recursive copy remove phases show overhead layer 
get better feel costs layering measured system time time spent kernel behalf process 
overhead kernel total time spent improve portability desired modify little kernel possible 
mapping interfaces automatically file system entered 
kernel tenth total time comparisons system time indicate higher overhead layer recursive copy remove 
overheads computed squares fits sample data yielding correlations system time benchmarks elapsed times 
differences benchmark overheads result differences ratio number vnode operations benchmark length 
elapsed time results indicate normal load usage layered file system architecture virtually undetectable 
system time costs imply heavy file system small overhead incurred numerous layers involved 
layer implementation effort goal stackable file systems interface ease job developing new file systems 
clearly importing functionality existing layers saves significant amount time 
ficus example borrows network transport low level disk storage facilities pre existing file systems great savings implementation effort 
addition code reuse hope implementing stackable file system framework easy building conventional file systems 
address questions compare similar file systems developed interface 
loopback file system sunos duplicates portion file system name space 
modifications copy name space appear 
file system provided sunos vnode interface 
null layer implemented new interface provides similar characteristics 
null layer forwards operations layer stack 
layer name visible file system name space null layer underlying file system accessible user 
table shows number lines code needed implement loopback file system null layer 
amount support code needed implementation similar implementations mount protocol 
null layer implementation vnode operations shorter loopback file system requires special case code pass operation 
services null layer provides general implementation handle added operations 
example pass layer null file system layer provides better functionality old interface new interface percent phase time rsd time rsd overhead copy table modified andrew benchmark results running kernels old new vnode interfaces 
time values seconds accurate second means time sample runs rsd indicates percent relative standard deviation oe overhead percent overhead new interface 
high relative standard deviations result poor timer granularity 
old interface new interface percent phase time rsd time rsd overhead recursive copy recursive remove table recursive copy remove benchmark results running kernels old new vnode interfaces 
time values seconds accurate tenth second means system time sample runs rsd indicates percent relative standard deviation overhead percent overhead new interface 
total overhead percent number layers cp sys squares fit rm sys squares fit mab elapsed cp elapsed rm elapsed performance file system stacks varying numbers layers new interface 
recursive copy recursive remove system times modified andrew benchmark mab times shown 
dotted lines indicate linear squares approximations data 
data point mean runs 
loopback null module file system layer node info subr total node defines vnode structure file system 
info provides declarations mounting 
subr implements node management utility routines 
implements file system mount protocol 
provides vnode operations 
table number lines code needed implement pass layer file system 
fewer lines code 
expect trend marked sophisticated file systems ability reuse existing functionality source code changes offers clear savings implementation effort 
current file systems suffer monolithic origins 
stackable layers modular approach appropriate 
existing file systems broken layers implements abstraction 
ufs divided layers implementing concept disk partition files directories 
new file systems built top need extend data structures lower levels 
nfs example needed add generation number inode replication ficus requires additions superblock inode directory entry 
new file system abstraction implemented corresponding data structure extensible allow layers build 
currently investigating methods file system data structures extensible 
vnode interface kernel interface files 
counterpart file systems vfs interface 
modifications vfs interface extensible need examined 
approach consideration file system vfs data structure special type vnode advantage mechanisms vnode extensibility 
important note currently slightly different versions vnode interface 
standardization core set vnode operations important widespread acceptance interface 
extensibility mechanisms described provide features widely agreed 
surprised successful stackable layers achieving goals set 
initial experience suggests represent interface defined third parties build value added layers new filing services replace services built manner 
gone example problems coordinating addition new operations worrying unimplemented services 
wide variety filing services provided interface 
services built small groups individuals short period time demonstrates power approach enable user filing environment evolve rapidly see rich improvements functionality 
time heavier enhancements employing extensive cross system filing protocols equally provided discussed companion 
retrofitting stackable layers unix systems equipped vfs interface reasonably straightforward 
part kernel needed modification directly related file system interface 
fact may reveal quality rest system modular construction definition implementation stackable layers reassuring 
decision limit stacks dynamically built constructed system startup somewhat controversial 
certainly limitation discussed earlier led simplification balance believe right choice point 
chose overload mount function construct file system stack 
choice allowed incremental development concepts existing naming facilities 
mount concepts complicates user view 
furthermore ability customize filing environment file file basis may desirable 
intend re examine decision 
fact benchmarks interest implementation perform gives promise wide modular filing structures feasible light earlier observations especially desirable 
acknowledgments authors tom page richard guy contributions concept stackable file systems 
acknowledge contributions yu guang wu implementation version null layer dieter wai mak contributions ficus file system 
mike accetta robert baron david golub richard rashid tevanian michael young 
mach new kernel foundation unix development 
usenix conference proceedings pages 
usenix june 
david hendricks 
filesystem software development 
usenix conference proceedings pages 
usenix june 
john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
norman hutchinson larry peterson mark abbott sean malley 
rpc kernel evaluating new design techniques 
proceedings twelfth symposium operating systems principles pages 
acm december 
kleiman 
vnodes architecture multiple file system types sun unix 
usenix conference proceedings pages 
usenix june 
john ousterhout 
aren operating systems faster fast hardware 
usenix conference proceedings pages 
usenix june 
thomas page jr richard guy gerald popek john heidemann 
architecture ficus scalable replicated file system 
technical report csd university california los angeles march 
larry peterson norman hutchinson sean malley herman rao 
kernel platform accessing internet resources 
ieee computer may 
dennis ritchie 
stream input output system 
bell laboratories technical journal october 
david rosenthal 
evolving vnode interface 
usenix conference proceedings pages 
usenix june 
marc rozier francois armand ivan michel marc fr ed eric herrmann claude kaiser sylvain pierre 
overview chorus distributed operating system 
technical report cs tr chorus syst emes april 
russel sandberg david goldberg steve kleiman dan walsh bob lyon 
design implementation sun network file system 
usenix conference proceedings pages 
usenix june 
david steere james kistler satyanarayanan 
efficient user level file cache management sun vnode interface 
usenix conference proceedings pages 
usenix june 

