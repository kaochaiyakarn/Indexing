assembly required compiling standard ml david tarditi peter lee anurag acharya school computer science carnegie mellon university pittsburgh pa portable target language implementing languages standard ml scheme 
previous efforts compiling languages produced efficient code compromised portability proper tail recursion 
show compile standard ml making compromises 
compilation technique converting standard ml continuation passing style calculus intermediate language compiling continuationpassing style calculus generated code achieves execution speed factor slower native code compiler 
generated code highly portable supports advanced features garbage collection class continuations 
analyze aspects compilation method lead observed slowdown suggest changes compilers better support compilation method 
categories subject descriptors programming languages processors compilers programming languages language classifications standard ml scheme general terms languages additional keywords phrases continuation passing style compilation profusion new computer architectures programming languages compiler writers increasingly faced making difficult compromises research partially supported national science foundation pyi ccr 
views contained document authors interpreted representing official policies expressed implied national science foundation government 
tween efficiency compiled programs retargetability compiler 
approach past compile programs programming language essence universal intermediate language 
efficient intermediate language allows relatively low level access machine number important respects machine independent 
furthermore usually safe assume compiler available general purpose machine 
bartlett shown possible compile scheme programs efficient programs 
approach constructs scheme mapped directly similar constructs conceptually simple approach leads certain compromises 
bartlett scheme implementation scheme fails reflect pragmatics language 
specifically proper tail recursion lost despite compile time analysis procedures tail recursive behavior 
second features class continuations garbage collection implemented assembly code 
main point compiling avoid machine dependencies 
led consider questions 
languages scheme standard ml support class procedures powerful control constructs exceptions class continuations compiled assembly language 
languages depend proper tail recursion faithfully compiled 
done unacceptable loss efficiency extensions necessary possible 
address questions describing experience compiling standard ml compiler compiles entire standard ml language efficient portable code 
doing completely avoided assembly language assumptions architecture pointers integers represented bits integer arithmetic complement 
compiler sml entirely standard ml new jersey compiler sml nj 
replaced code generator slightly modified runtime system 
modules sml nj compiler result compiler source code compatible sml nj compiler handles proposed extensions standard ml class continuations call cc asynchronous signal handling lightweight concurrent processes extension multiprocessing 
implementation tested number nontrivial programs including bootstrapping compiler generated code tested modification sun ibm rts motorola machine pc 
primary considerations design compiler decreasing runtime system written requires operating system compatible unix bsd 
order importance ability handle full language extensions faithfulness pragmatics language efficiency compiled code 
goals met completely 
price pay runtime overhead typically running time compared native machine code generated sml nj compiler 
describe basic approach discuss limitations optimizations improve significantly performance generated code 
followed performance analysis 
system available anonymous ftp soar cs cmu edu usr sml 
related number compilers target language developed 
example bartlett scheme compiler existing compiler cedar language successfully retargeted order improve portability cedar systems 
performance reported implementations sparc motorola machines 
compiler differs significantly important respects 
cedar simpler scheme standard ml crucial ways pragmatic requirement proper tail recursion functions class 
implementation exception handling cedar programs compiler generates code traverses call stack highly dependent particular machine compiler 
implementation machine dependent code completely portable wide class machines 
design compiler standard ml sml lexically scoped call value language higherorder functions 
sml polymorphic types automatically inferred checked compiler 
support developing large programs provided sophisticated modules system provides static type checking interfaces modules ada modula ii 
type safe dynamically scoped exception mechanism allows programs handle unusual deviant conditions 
garbage collection provided automate management heap storage 
clearly considerable semantic distance sml features dynamically scoped exceptions garbage collection higherorder functions pose significant problems efficient portable implementation sml proposed extensions sml class continuations concurrent processes increase semantic distance 
intermediate representation key element design sml decision replace code generator standard ml new jersey sml nj compiler produced code 
sml nj compiler publicly available freely modifiable compiler sml developed princeton university 
input sml nj code generator represented continuation passing closure passing style calculus 
reasons decision 
reason pragmatic 
compiler built person working summer 
time constraint necessary modify existing compiler 
second reason focusing translation continuation passing style programs techniques developed applicable languages particular scheme 
reason remarkable similarity programs represented continuation passing closure passing style programs 
programs translated highly portable code unclear code reasonably efficient 
continuation passing closure passing style calculus code generator refinement continuation passing style calculus cps 
program transformed cps adding continuation argument user functions 
continuation argument function represents program 
function finished computing result returning function calls continuation result argument 
programs transformed particular cps sml nj compiler satisfy syntactic invariants function calls nested tail recursive 
calls call return essentially call return 
function call considered goto arguments 
conversion scheme ml programs closure passing style performed simple transformation 
advantages cps intermediate representation 
intermediate values explicitly named 
second controlflow explicitly represented continuations 
easy implement exceptions class continuations 
third function calls turn jumps arguments tail recursion elimination achieved automatically 
addition sml nj compiler cps successfully rabbit orbit compilers 
continuation passing closure passing style calculus refinement cps environment operations explicit 
functions flattened lexical level explicit record operations represent operations closures 
description conversion cps programs continuation passing closure passing style may 
target machine continuation passing closure passing style program datatype cexp datatype value record value list lvar cexp var lvar select int value lvar cexp label lvar offset int value lvar cexp int int app value value list real string fix lvar lvar list cexp list cexp string string switch value cexp list value list lvar list cexp list internal representation cps standard ml new jersey compiler 
conceptually simple consisting heap set general purpose registers set reserved registers heap pointer heap limit pointer current exception handler arithmetic temporary storage 
instructions required typically conventional machines including loads stores logical operations arithmetic operations overflow checking floating point operations register register moves conditional branches jumps 
internal representation cps sml nj compiler shown 
continuation expressions values type cexp represent cps programs 
variants cexp type bind zero variables scope continuation expression 
variable names represented values type lvar 
record creates tuple values values binds tuple continues execution select selects ath field binds continues execution offset takes tuple bound binds new tuple starting ath field continues execution app applies arguments fix binds list potentially mutually recursive functions continues execution element tuple args body name function bound function args body 
switch case statement execution continues ath element applies primitive operator tuple values binds variables continues execution continuation expressions primitive operators include integer arithmetic operators floating point arithmetic integer relational operators floating point relational operators operators arrays 
example cps program shows simple sml source program cps intermediate representation 
convention intermediate representation shown simplified pseudocode style 
particular infix operators expanded true cps form 
note converted code remarkably similar code fun foo fun foo bar fun bar bar bar bar bar baz baz baz baz baz baz baz bar bar bar sml program intermediate representation fact function calls tail recursive 
compilation model may note lack stack target machine 
fact issue allow stack target machine fundamental design decision 
principle presence higher order functions means activation records procedures allocated heap environment structure structure tree 
practice heap allocation activation records common compilers cps representation example rabbit sml nj compilers 
suitable amount care stack store activation records 
leads possibility flattening functions sml program single lexical level mapping sml functions directly corresponding functions making call stack 
closures represented records containing function pointer environment function 
bartlett uses similar approach scheme unfortunately difficult implement garbage collection portable manner 
due fact finding roots garbage collection requires traversal stack 
difficult preserve proper tail recursion 
stack impossible obtain portable implementation call cc extension standard ml efficient stack approaches proposed 
longjmp setjmp features provided implementations provide functionality 
reasons adhere compilation model sml nj compiler uses heap allocation activation records stack 
compilers implement tail recursion optimization functions immediately tail recursive call 
generally fail mutually recursive tail calls tail calls functions known runtime quite frequent programming style higher order functions 
code generation straightforward implement target machine resources registers heap implemented integer arrays 
actual machine registers discussed section 
target machine instructions straightforward 
jump arithmetic operations overflow checking complicate matters 
recall function calls tail recursive cps conversion compiled jumps arguments passed registers 
implementation jump problematic labels class values particular store label memory jump arbitrary point program 
way obtain address block code encapsulate function 
function calls naively stack quickly overflow 
borrow mechanism rabbit compiler called handler 
refer apply procedure 
apply procedure emulates apply operation 
code execution begins apply procedure calling function executed 
function wants call function returns apply procedure address function call 
general function needs call function returns address apply procedure calls arguments functions passed memory simulated machine registers 
way depth stack activation records grows 
implementation integer arithmetic complicated fact overflow checking normally provided definition standard ml mandates overflow checking 
implement overflow checking bit level checks operands result 
register allocation spilling transformation sml nj compiler 
guarantees point program sufficient number registers available variables 
code generator performs register assignment fly register tracking 
variety heuristics order minimize shuffling registers function calls 
contains simplified version code generated sample sml code shown 
shows apply procedure stripped initialization code 
runtime interaction implementation cps target machine program supported modified version sml nj runtime system provides operating system services garbage collection asynchronous signal handling 
generated code sml nj runtime system coroutines 
purposes multiprocessing processor state threaded int foo bar baz int foo int int apply start return int bar int start int int baz int start int start baz return int bar return bar int bar return return baz code apply procedure simplified runtime system generated code 
far generated code concerned processor state maintained dedicated element register array 
execution begins runtime system transfers control generated code 
generated code transfer control back runtime system successful program completion requests operating system services machine faults floating point overflow garbage collection asynchronous signal handling 
code transfers control runtime system doing longjmp back apply procedure returning 
target longjmp set doing setjmp pass apply procedure 
course jump buffer part processor state 
beauty approach allows heart apply procedure extremely simple 
fact main loop procedure actual merely unrolled version code shown 
garbage collection initiated having generated code call garbage collector subroutine heap exhausted 
sml nj compiler compiler avoids heap checks allocation inserting single heap check function 
heap check accomplished adding heap pointer offset maximum amount allocation done path function checking value heap limit pointer 
true garbage collector called 
code generation ensures points roots register array 
optimizations number problems implementation described section 
generated code fails effective actual machine registers functions calls expensive arithmetic involves high overhead portable overflow checking 
subsections describe optimizations address problems 
register caching recall target machine registers implemented integer array 
global variables compilers move global variables real machine registers 
furthermore approach viable multiprocessor implementation 
effective real registers cache target machine registers local variables duration function calls 
depend compiler place local variables registers possible 
register caching optimization uses simple static count number uses register possible path function body decide cache target machine register duration function call 
consequence continuation passing closure passing style function bodies extended basic blocks 
words forward branches loops 
number uses path greater cache register 
careful caching certain registers valid machine fault occur 
registers heap pointer register exception continuation register 
cache exception continuation register heap pointer register spilled back corresponding global variable executing instruction may cause machine fault 
fortunately instructions may cause machine faults implementation division zero floating point operations need spill fairly rare 
function integration functions calls expensive function call involves return apply procedure call apply procedure target function 
involves jumps 
expense usually compilers implement return jump piece postlude code function cleans things actual jump back apply procedure 
addition values stored actual machine registers saved memory entry function restored exit 
fact occurs practice callee save systems apply procedure just variable live function calls 
true cost function call usually jumps indeterminate number loads stores 
order eliminate overhead analysis known functions 
known function possible call sites known 
call paths known function pass single function integrate body means gets placed body calls turn goto 
perform direct tail recursion elimination turning calls body gotos 
function integration useful avoiding passes apply function 
particular useful optimizing tight tail recursive loops 
computing call paths known function pass function cast classical problem computing dominators call graph multiple start nodes unknown function start node 
algorithm computing dominator information 
define maximal dominator function dominated 
captures intuitive concept highest level dominator 
compute set dominators known function 
known function easily proved fact unique maximal dominator maximal dominator integrate maximal dominator 
consider sml code 
functions bar baz known foo maximal dominator 
integrate bar baz foo 
shows pseudo cps code represents functions code generator 
shows simplified version code generated functions function integration register caching 
note mutually tail recursive functions compiled tight loop loop counter placed register 
redundant gotos appearing code optimized away compilers 
overflow checking integer arithmetic expensive compilers provide portable way integer overflow signal 
implementing addition subtraction portable overflow checking requires complicated explicit bitwise tests function call needed multiplication 
division comparisons branches suffice 
simplify overflow checks cases operand known compile time 
example overflow check addition reduced complicated boolean expression involving operators single comparison branch procedure call multiplication replaced compares branch 
int foo int register int goto bar bar bar return int goto baz baz baz return int goto bar optimized code benchmarks measure performance sml tested sml optimizations turned version sml nj compiler different architectures 
benchmark suite subset suite 
consists programs life program game life lex lexical analyzer generator yacc lalr parser generator implementation knuth bendix completion algorithm vliw instruction scheduler performs software pipelining register transfer machines 
programs range size lines sml code 
lex run lexical description standard ml yacc run grammar standard ml 
benchmarks run decstation mbytes memory sun mbytes 
built timing functions available sml nj system unix utility 
factored garbage collection costs numbers represent code speed 
garbage collection costs irrelevant sake comparison versions code generated sml cand sml nj compiler generate amount garbage garbage collector 
ignoring garbage collection costs fact slightly unfair sml programs generated sml live data sml nj programs sml nj system places compiled code heap 
code produced sml hand outside heap 
sml cand native code compiler high optimization settings provided sml nj compiler 
code compiled machines version gcc frame pointer flags 
tables show execution times various benchmark programs 
code generated system benchmark programs generally runs program sml nj ff opt fi fi ff unopt ffi ffi ff sec sec sec life lex yacc knu vliw table benchmarks decstation program sml nj ff opt fi fi ff unopt ffi ffi ff sec sec sec life lex yacc knu vliw table benchmarks sun program sml nj ff opt fi fi ff sec sec life lex yacc knu vliw table compilation times decstation half speed native code generated sml nj 
measured compilation times benchmarks show times reasonable 
compilation times include time spent sml cand time spent gcc compiling generated code 
compilations done decstation system optimization version sml nj compiler run settings described previously 
times shown table 
compilation times long programs lex yacc vliw factor slower sml nj times 
aspects compilation method lead observed slowdown benchmark programs 
possible source overhead comes loads stores register array 
possible source operations expensive implement assembly language jumps program ifc life lex yacc knu vliw table results instrumented programs program ifc life lex yacc knu vliw table frequency function calls integrated function calls program life lex yacc knu vliw table overhead register array usage implemented transfers apply procedure heap check native code typically requires single instruction requires conditional test branch 
added overhead integer arithmetic previous benchmark studies showed negligible effect 
order better understand nature sources overhead instrumented generated code 
instrumentation counts things number statements executed excluding assignment statements move values register array local variables number assignments register array number reads register array number function calls ifc number calls integrated functions 
results instrumenting benchmark programs table 
clear data function calls occur enormous frequency furthermore function calls transfer apply procedure 
table gives average number statements executed function including jump percentage function calls calls integrated functions turned gotos 
clear tremendous amount reading writing values register array relative total number statements executed 
table gives number reads writes fraction statement count 
reading writing expected small function bodies passing parameters memory register array 
overhead reduced greatly extending support global register variables modifying compilers support proper tail recursion 
global register variables allow eliminate register array 
generated code longer reads writes register array 
global register variables compatible multiprocessing multi threading naturally process global register variables distinct processes just processes distinct local register variables 
extending compilers support proper tail recursion form interprocedural goto allow eliminate apply procedure generated code 
generated code function calls function call mechanism 
experience shows possible compile languages scheme sml assembly language 
possible develop portable implementations languages sacrificing proper tail recursion inordinate amount efficiency 
aho sethi ullman 
compilers principles techniques tools 
addison wesley publishing 
appel 
runtime system 
lisp symbolic computation nov 
appel 
compiling continuations 
cambridge university press 
appel jim 
continuation passing closure passing style 
proceedings th annual acm symposium principles programming languages pages 
acm jan 
appel macqueen 
standard ml compiler 
kahn editor functional programming languages computer architecture volume pages 
springer verlag 
atkinson demers hauser jacobi kessler weiser 
experience creating portable cedar 
proceedings sigplan conference programming language design implementation pages 
acm 
bartlett 
scheme portable scheme compiler 
technical report dec western research laboratory hamilton avenue palo alto ca usa jan 
cooper morrisett 
adding threads standard ml 
technical report cmu cs school computer science carnegie mellon university dec 
duba harper macqueen 
typing class continuations ml 
proceedings th annual acm symposium principles programming languages 
acm jan 
hieb dybvig bruggeman 
representing control presence class continuations 
proceedings sigplan conference programming language design implementation pages 
acm 
kernighan ritchie 
programming language 
prentice hall nd edition 
kranz 
orbit optimizing compiler scheme 
phd thesis yale university feb 
kranz kelsey rees hudak philbin adams 
orbit optimizing compiler scheme 
proceedings sigplan conference programming language design implementation pages 
acm 
milner tofte harper 
definition standard ml 
mit press 
morrisett 
multiprocessor interface standard ml 
third international workshop standard ml 
school computer science carnegie mellon university september 
rees 
eds 
revised report algorithmic language scheme 
sigplan notices 
reppy 
asynchronous signals standard ml 
technical report department computer science cornell university aug 

register allocation procedure module boundaries 
proceedings sigplan conference programming language design implementation pages 
acm june 
stallman 
porting gnu cc 
gnu cc widely available compiler developed free software foundation sept 
steele jr rabbit compiler scheme study compiler optimization 
master thesis ai laboratory technical report ai tr massachusetts institute technology may 
