electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages coalgebraic reasoning classes object oriented languages bart jacobs department computer science university nijmegen box gl nijmegen netherlands bart cs kun nl note briefly discusses ideas developed theory coalgebras front tool called loop developed jointly dresden nijmegen reasoning back theorem prover classes objectoriented languages 
describe reasoning object oriented specifications java implementations examples 
key aspects object orientation objects instances class private state accessed modified operations usually called attributes methods class object 
precisely aspect forms starting point coalgebraic analysis classes objects object oriented setting see class seen coalgebra object class element state space coalgebra 
precisely coalgebra operation form carrier set state space functor determining interface operation example may int theta bool identified pair functions hc int theta bool operation may called attribute gives integer information states second operation may called method allows modify state boolean parameter 
coalgebraic approach way constructing elements state space observe modify existing states 
constructed objects 
coalgebraic approach object orientation operations attributes plus methods class understood jointly single coalgebra acting state space 
mentioned objects class elements state space 
coalgebraic class specification describes class research fellow royal netherlands academy arts sciences 
fl published elsevier science jacobs uninterpreted coalgebra satisfying certain assertions coalgebraic class implementation describes particular state space int theta bool specific coalgebra acting state space possibly satisfying assertions 
shall describe example class specification language coalgebraic class specification language loop tool logic object oriented programming 
shall examples implementations constructing concrete coalgebras models specifications 
theory coalgebras standard notions bisimulation invariant 
bisimulation binary relation state space coalgebra closed operations coalgebra 
similarly invariant unary predicate state space closed operations 
instance coalgebra hc relation theta bisimulation states bool states called bisimilar bisimulation 
bisimilar states observationally indistinguishable operations unable produce difference 
bisimilarity need mean actual equality states coalgebraic operations give limited access state space may leave certain internal differences undetected 
predicate invariant respect coalgebra hc states invariant gives property states true state remains true matter modifies state available coalgebraic operations 
notions bisimulation invariant fundamental theory dynamical systems automata processes 
form crucial ingredient theory coalgebras 
functor interface coalgebra determines precise formulation associated notions bisimulation invariant 
taken functor say int theta bool theta associated definitions bisimulation invariant slightly different 
ways define notion bisimulation invariant associated particular functor see 
setting inductive formulation polynomial structure coalgebraic specification algebraic specification key difference lies operations coalgebraic going state space algebraic going state space see discussion algebras coalgebras 
jacobs relevant 
ultimately ideas categorical logic see 
shall describe detail 
loop tool summer joint project ulrich hendrik dresden marieke huisman bart jacobs nijmegen development tool called loop reasoning classes 
loop tool works front tool theorem prover reads analyses transforms class certain format set logical theories 
loaded theorem prover provides setting reasoning support full power prover original class 
theorem prover currently back pvs possible produce suitable theories provers 
inputs accepted loop tool currently ffl class specifications especially designed coalgebraic class specification language 
discussed greater detail 
ffl java classes 
described publication 
shall briefly discuss examples loop tool inputs 
aside translating inputs loop tool generates suitable notions bisimulation invariant specific input class associated standard results stating invariants closed conjunctions universal quantification 
definitions bisimulation invariant help user formulating proving suitable properties classes consideration 
object oriented setting ways new classes constructed old see chapter pages inheritance class subclass relation aggregation class component client class relation 
discussing mechanisms loop tool lead far form course essential ingredients object oriented paradigm may 
loop classes gives presentation flag example hidden algebra see 
flag attribute describing status methods setting reverting 
type self specification describes state space considered black box 
attribute gives information states elements self methods set set revert modify state told interior self 
typical coalgebraic jacobs flag attribute self 
bool method setup self 
self self 
self revert self 
self assertion pvs setup pvs pvs revert constructor new bool 
self creation pvs forall bool new flag fig 

flag class specification specification 
flag attribute methods required satisfy obvious assertions 
name set contain keywords pvs delta delta delta indicate middle part delta delta delta regarded string back proof tool pvs 
additionally single constructor new parameter introducing intial state 
running loop tool example specification produces series pvs theories 
space restrictions prevent discussing shall focus theory describing interface theory introducing notion bisimulation flags 
prove property flags 
interface theory operations attributes plus methods analysed loop tool 
interface type formed functor underlying coalgebra 
generated pvs code follows 
type bool setup self self jacobs revert self right hand sides operations possibly currying collected labeled product called record indicated delta delta delta 
type self parameter type plays role state space 
functor type defined coalgebras form self 
self combine flag operations single function 
individual operations extracted obvious definitions self 
bool lambda self setup self 
self lambda self setup self 
self lambda self revert self 
self lambda self revert operations revert operations respect coalgebra indicated dependence definitions 
generated bisimulation theory pvs introduces notions bisimulation bisimilarity respect flag coalgebras respective state spaces self self 
functor lifted types relations definition structure functor self self 
bool 
self self 
bool lambda self self 
bool lambda rec self rec self rec rec setup rec setup rec rec rec revert rec revert rec bisimulation bisimilarity defined coalgebras var self 
self var self 
self bisimulation self self 
bool 
bool lambda self self 
bool forall self self implies self self 
bool lambda self self exists self self 
bool bisimulation additionally single coalgebra notions bisimulation bisimilarity generated definitions coalgebras var self 
self jacobs bisimulation self self 
bool 
bool bisimulation self self 
bool assertions flag specification collected single predicate coalgebra bool flag assertions wish develop theory flags simply declare coalgebra variable satisfying start proving things pvs 
example consider standard result hidden result reverting flag twice bisimilar behaviourally equal call original flag 
setting corresponds statement revert revert assumed coalgebra satisfying 
automatically generated definition bisimilarity 
consider ways proving pvs 
simply expanding definitions leads requirement prove exists self self 
bool bisimulation revert revert arbitrary choices pvs coalgebra state take self resulting proof obligations easily discharged flag assertions 
ii slightly way establish result characterising bisimilarity flags lemma iff part easy part uses instantiation 
required bisimilarity result reverting twice easy consequence lemma 
conclude briefly describe implementations flag specification constructing concrete coalgebras 
implementation uses booleans state space coalgebra final bool 
bool lambda bool setup true false revert jacobs probably obvious implementation fact final coalgebra satisfying assertions 
notice bisimilar states model equal property typical final models 
construct model bisimilar states need equal 
second implementation history model records values flag 
states may bisimilar equal values quite different different histories 
state space history model type list bool lists booleans coalgebra history list bool 
list bool lambda list bool cases null false cons setup cons true cons false revert cases null cons true null cons cons cons results lemma final lemma history establishing implementations satisfy flag assertions easy prove 
fact pvs automatically single grind command 
convenience constructor new discussion 
may added easily implementations final model simply identity function bool bool history model function bool list bool sending cons null example 
information specification language working loop tool may obtained 
development loop tool classes takes place dresden 
loop classes java mentioned loop tool translate java classes pvs code 
development done nijmegen contributions joachim van den berg martijn van graduate students 
jacobs class parent int void base class child extends parent int int void deriv base class grandchild extends child void base fig 

late binding example java way loop operates java classes similar operates classes implementation 
basically loop java class extract interface functor underlying fields java speak attributes methods class ii analyse inheritance component structure iii transform method definitions suitable equations iv generate pvs theories basis information including definitions invariant bisimulation appropriate input java class 
example third step consider java point class move method definition void move int da int db fst fst da snd snd db fst snd integer fields describing second coordinate point 
method definition translated assertion jacobs forall self da int db int move da db fst da snd db fst snd assignment operations generated fst snd 
sharp operation defined pvs prelude translation translation composition operation java 
obvious property prove method fst move da db fst da requires basic reasoning assignments 
things trivial 
consider example series java classes parent child grandchild 
declaration int child hides parent see section running deriv child affect parent child 
contrast running deriv grandchild affect child parent due late binding mechanism determines grandchild class deriv call redefined base method grandchild 
challenge prove right values running deriv child grandchild 
loop translation java classes pvs show method deriv terminates normally hang throw exception 
express values variables resulting state deriv terms values follows 
child coalgebra expressed result 
lemma norm deriv ns deriv ns deriv ns deriv assertion conjunction states running deriv arbitrary state normal terminates normally 
statements describe values variables super super class parent child coalgebra evaluated normal state accessed ns 
resulting running deriv 
grandchild coalgebra gc required result lemma norm deriv gc gc ns deriv gc gc ns deriv gc jacobs class counter private int max private int val int maximum return max void val max val val val void clear val counter int max fig 

counter class java gc ns deriv gc gc succeed proving lemmas pvs files generated loop tool certain special prelude pvs files define setting translation java classes 
lemmas proved entirely automatic rewriting basically proof commands needed load rewrite rules followed rewrite 
effort project goes formulating automatically generating suitable rewrite rules simple results ones handled proof commands pvs 
course complicated results involving loops require intelligence interaction verifier 
late binding java occuring example classes handled loop tool suitably repeating method definitions superclasses subclasses 
coalgebraic semantics java classes 
final emphasise appropriate coalgebraic definitions invariance bisimilarity generated translated java class 
consider example simple counter class 
feeding class jacobs loop tool leads series pvs theories suitable invariant definition invariant self 
bool 
bool lambda self 
bool forall self implies lifting functor predicates 
definition invariance generated way invariant predicates closed publicly available methods case maximum clear assignments private variables max val 
user may wish prove invariance result self 
bool lambda self max val val max lemma invariant amounts showing predicate val max holds state holds methods maximum clear counter coalgebra applied obvious easy prove 
marieke huisman feedback version note 
goguen malcolm 
extended hidden agenda 
editors proceedings conference intelligent systems semiotic perspective pages 
nat 
inst 
stand 
techn 
gosling jay steele 
java language specification 
addisonwesley 
huisman jacobs 
reasoning classes object oriented languages logical models tools 
ch 
hankin editor european symposium programming lect 
notes comp 
sci 
springer berlin 
hermida jacobs 
structural induction coinduction setting 
inf 
comp appear 
jacobs 
objects classes algebraically 
freitag jones lengauer 
schek editors object orientation parallelism persistence pages 
kluwer acad 
publ 
jacobs 
invariants bisimulations correctness coalgebraic refinements 
johnson editor algebraic methodology software jacobs technology number lect 
notes comp 
sci pages 
springer berlin 
jacobs rutten 
tutorial algebras induction 
eatcs bulletin 
meyer 
object oriented software construction 
prentice hall nd rev edition 
owre rushby shankar von henke 
formal verification fault tolerant architectures prolegomena design pvs 
ieee trans 
softw 
eng 
reichel 
approach object semantics terminal algebras 
math 
struct 
comp 
sci 
rutten 
universal coalgebra theory systems 
cwi report cs 
