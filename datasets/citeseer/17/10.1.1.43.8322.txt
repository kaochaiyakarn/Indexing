accurate binding time analysis imperative languages flow context return sensitivity luke hornof irisa campus universitaire de beaulieu rennes cedex france jacques noy ecole des mines de nantes rue alfred nantes cedex france binding time analysis determines line partial evaluator specialize program accuracy binding time information directly determines degree specialization 
designed implemented binding time analysis imperative language integrated partial evaluator called tempo 
binding time analysis includes number new features available existing partial evaluator imperative language critical specializing existing programs operating system components 
ffl flow sensitivity 
different binding time description computed program point allowing variable considered static program point dynamic 
ffl context sensitivity 
function call analyzed context call site generating multiple binding time annotated instances function definition 
ffl return sensitivity 
different binding time description computed sideeffects return value function 
key words partial evaluation binding time analysis imperative language 
current address university pennsylvania rd philadelphia pa 
automatic program specialization emerging key software engineering concept allows software generic sacrificing performance 
motivation tempo line partial evaluator demonstrate partial evaluation provide realistic basis automatic program specialization 
chosen deal widely language focus optimizing existing realistic applications 
main areas applications looking operating system code 
area conflict generality operating system definition deal wide variety situations performance especially acute 
surprising opportunities applying partial evaluation operating systems code identified 
discovered existing partial evaluation technology sufficiently advanced effectively specialize existing systems programs 
due lack accuracy binding time analyses dealing typical features imperative programs pointers aliases side effecting functions 
flow context return sensitivity necessary binding time analysis order successfully specialize systems programs 
sensitivity addressed :10.1.1.35.7909
basic idea specialization time value variable allowed computed certain contexts variable identifier 
accurate handling pointers structures essential single object force uses 
led develop analysis different phases 
phase determines parts program computed specialization time second phase determines actual transformations applied specialization time 
focuses phase analysis determines parts program static computed specialization time parts dynamic computed specialization time 
describes obtain flow context return sensitivity 
firstly flow sensitivity allows different binding time associated variable different program points variable allowed static point dynamic 
secondly systems code contains calls function occur different system states 
context sensitivity permits call analyzed respect specific state allowing different static values state exploited call 
system procedure typically returns sort constant error status 
return sensitivity allows binding time analysis take advantage constant return value system function contains dynamic side effects 
implemented inter procedural flow context return sensitive binding time analysis integrated tempo 
analysis deals wide subset including particular multiple returns pointers structures 
result significant existing applications handled little rewriting 
results analysis drive tempo compile time run time specializer 
extra precision obtained analysis able effectively specialize systems code 
applied successfully application domains domain specific language interpreters context run time specialization scientific programming image processing 
section sect 
explain flow context return sensitivity show improve precision binding time analysis 
details analysis sect 

existing applications analysis applied sect 

related addressed sect 
final remarks sect 

sensitivities look examples exhibit flow context return sensitivity 
example initial source program 
main function analyzed specialized called entry point 
function annotated ep examples 
notice entry point function may call functions cause functions analyzed specialized 
context program analyzed consists binding time alias information global variables parameters entry point 
context annotating source program follows variables entry point parameters static underlined dynamic binding time annotated aliases appear comments entry point 
show program annotated phase bindingtime analysis static constructs dynamic constructs underlined 
analysis determines action transformation apply construct specialization 
evaluate action instructs specializer evaluate construct instructs specializer 
action annotated program constructs evaluated underlined constructs 
show resulting specialized program 
source code int void int ep alias binding time annotated code int void int alias action annotated code int void int alias fx yg specialized code int void int fig 

flow sensitivity flow sensitivity imperative languages assignment statements update store 
call store manipulated static analysis state 
state function mapping memory locations variables structure fields array contents 
values 
flow sensitive analysis associates different state assignment 
case binding time analysis flow sensitivity allows locations read written multiple times associated different binding times different assignments 
defines pointwise division static dynamic locations 
example fig 
function analyzed initial binding time description specifying global variables parameter static dynamic 
variables read written multiple times 
middle function variable dynamic remains variable dynamic returns static assignment function 
left hand side assignment standard terminology lvalue 
denote contents location address 
specialization time address variable known considered static contents variable dynamic 
result seen example variables occur left hand side assignment static 
course program specialized run time specialization time execution time address variable may 
action analysis deal issue discussed 
pointers aliasing may create ambiguous definition assignment analysis statically determine location modified run time 
example assume pointer may point binding time annotated aliases appear comments dereferenced pointers 
assignment ambiguous assignment dynamic locations dynamic 
action annotations slightly differ binding time annotations 
static constructs evaluate constructs dynamic constructs constructs 
exceptions come incompatible execution time uses specialization time computations 
example assumed specialization takes place compile time value address execution time bound differ value defined specialization time 
result expression statement annotated 
reflected turn expression definition hidden occurrence formal argument annotated 
kind reasoning lead annotate static left hand side occurrences dynamic assignments 
details sensitive backward analysis discussed :10.1.1.35.7909
subsequent specialization phase guided action annotations 
evaluate constructs evaluated constructs 
evaluate statements disappear completely 
evaluate expressions evaluated resulting value reified residual code 
expressions statements 
context sensitivity context sensitivity enables function analyzed respect different states contexts producing annotated instance function context 
annotated instances separate exploit static values specific context 
context sensitive binding time analyses exist functional languages referred polyvariant analyses handle imperative language features global variables side effecting functions 
second example shows function contains sequence calls fig 

function analyzed initial binding time description specifying global variable dynamic 
context call consists static actual parameter static non local variable dynamic non local variable binding times non local variables appear comments 
instance function annotated respect context 
notice dynamic analyzing body creates different context second call 
second instance function created annotated respect new context 
third call context second call new instance created 
corresponding actions produced specialize program 
residual program different instance function produces different residual function definition 
third call context second call shares residual function definition 
return sensitivity return sensitivity allows function return static value function contains dynamic side effects 
third example shown fig 
function analyzed initial binding time description specifying global variable dynamic 
return sensitivity allows static value returned call site source code int void ep int binding time annotated code int void void int void int action annotated code int void void int void int specialized code int void void void fig 

context sensitivity source code int void ep int int return binding time annotated code int void int int return action annotated code int void int int return specialized code int void void fig 

return sensitivity turn enables multiplication considered static 
function definition indicate function contains dynamic side effects annotating identifier dynamic returns static value annotating return type int static 
call site identifier annotated static dynamic 
specializer exploits static return value returned perform multiplication call order side effects 
notice specialized definition parameter longer returns value 
domains const integer id identifier bop syntax exp const constant id variable lexp exp dereference exp bop exp binary expression lexp id variable exp dereference stmt lexp exp assignment exp stmt stmt conditional statement stmt exp loop stmt block id exp void function call id id exp non void function call return exp function return return void function return type spec int char 
base types type spec pointer type decl type spec id declaration func def type spec id decl stmt function definition program decl func def program fig 

syntax subset binding time analysis shall mentioned ideas precise describing bindingtime analysis data flow analysis framework see instance subset described fig 

sake conciseness subset contains limited number expressions statements 
note particular non void function calls assumed assign return value directly identifier subsequent calculations 
simplifies analysis restricting applicability 
assume programs transformed prior analysis needed conform constraint 
quite number constructs translated subset 
translation assignment comma conditional expressions straightforward translation loops loops 
choice loop basic loop inherited suif compiler front implementation tempo 
goto statements eliminated algorithm suggested hendren 
transformation returns structured programs control flow constructs single entry exit point analyzed compositional analyses 
important aspects dealt tempo structures arrays orthogonal current discussion omitted subset 
details intra procedural aspects analysis 
intra procedural aspects locations states refer sets values propagated analysis states 
states elements state location bt bt lattice upper bound operator stands undefined static dynamic 
intra procedural case absence structures location identifier provided identifiers renamed order unique 
actual memory location associated variable identifier modeled single location denoted identifier 
binary operator type state theta locations state resets set locations bottom element shall graph representation states 
application state modeled function lookup takes graph set pairs location binding time location returns corresponding binding time 
locations need occur graph 
location occur graph considered undefined lookup function returns 
lexp exp exp stmt stmt stmt exp stmt 
stmt sn return exp fig 

intra procedural binding time analysis data flow equations statements state loc bt loc defs state unambiguous defs state loc bt state loc defs state fig 

intra procedural binding time analysis transfer functions pre processing assume prior binding time analysis alias analysis definition analysis executed 
alias analysis gives dereference expression exp program point set aliases corresponding aliases set locations 
definition analysis computes statement program point set locations defs may defined assignment statement 
function unambiguous defs additionally computes assignment set locations unambiguously defined assignment 
single location associated left hand side assignment assignment unambiguous unambiguously defines location 
aliasing locations associated left hand side assignment 
assignment ambiguous defined location determined statically 
set locations unambiguously defined assignment empty 
information necessary bindingtime analysis capable detecting dynamic variable static assigned static value assignment unambiguous 
statements lexp exp bt bt bt exp stmt stmt bt bt bt bt stmt exp bt bt bt stmt 
stmt sn bt bt return exp bt bt expressions right hand side expression const bt id bt state lookup state id lexp bt state bt state exp bt state bt state loc aliases lookup state loc exp bop exp bt state bt state bt state left hand side expression id bt state exp bt state bt state fig 

intra procedural binding time analysis binding time annotations analysis assuming single function single return statement analysis propagates forward initial state returns input parameter formal parameter global variable declared static dynamic respectively location 
join operator binding time states defined pointwise application upper bound operator state function space range 
data flow equations relating state entry point statement program point state output statement fig 
transfer functions fig 

function describes evolution state caused data dependencies assignment program point location set possible definitions mapped assignment binding time bt see fig 

note assignment binding time depends input state 
assignment ambiguous safe approximation taken new binding time defined location upper bound previous binding time assignment binding time 
assignment unambiguous new binding time defined variable assignment binding time 
second transfer function takes control dependencies account compute state join points 
specializer duplicate continuations case tempo order prevent code explosion join points exist conditional statements loops 
compute proper safe approximation state join point binding time location possibly defined conditional loop statement upper bound previous binding time binding time conditional loop test bt state see fig 

test dynamic locations possibly defined scope test considered dynamic 
case static test join operation effect transfer function identity function 
instance consider case variable assigned static value branch conditional statement test dynamic 
specialization time value variable join point unknown 
execution time branch taken variable assigned static value keep value entering conditional statement 
variables need considered dynamic join point 
incidentally static variable dynamic conditional due dynamic test needs special treatment specialization order insure uses variable properly defined 
earlier solutions problem introduced explicit assignment statements known branch 
tempo uses alternative strategy variable original definition order handle complex constructs pointers arrays 
computing binding time annotations expressions statements see fig 
fairly straightforward 
notice distinction lefthand side right hand side expression 
prevents assigning specialization time static value variable contents static pointer 
second phase analysis dealing sensitivity say sense :10.1.1.35.7909
notice previously mentioned binding time right hand side dereference void function call id exp exp en ctx formal loc id bt ng loc lookup loc loc non locals id id ctx ctx def non locals id id ctx ret ret non void function call id id exp exp en ctx formal loc id bt ng loc lookup loc loc non locals id id ctx ctx def non locals id fid id ctx id lookup id ctx return id ctx ret ret void function return return fg ret ret non void function return return exp fg ret ret return bt function definition id formals body ret fg loc lookup ret loc loc def non locals fig 

inter procedural binding time analysis data flow equations expression depend binding time dereferenced expression 
depends binding times data possibly pointed expression 
inter procedural aspects function program points calling contexts order deal multiple functions new program points noted introduced function definitions 
context sensitivity obtained duplicating function definitions corresponding data flow equations different calling contexts encountered program function 
calling contexts binding times call input binding times actual parameters binding times nonlocal locations may function account nested calls 
way possible define return context call binding time returned value binding times non local locations may defined call account nested call 
number locations defined program finite contexts finite 
defined non local locations assume non local locations defined function computed pre processing phase similar inter procedural summary information 
note phase follow combined alias analysis 
righthand side respectively left hand side expression pointer potentially points locations locations considered respectively defined 
notion definition relates analysis actual executions 
particular case ambiguous definition pointer dereference locations potentially pointed pointer considered binding times compute binding times potentially defined locations 
function returns dealing function returns requires compute state returned function call propagate calling sites 
state components returned value values defined non local locations 
returned value handled introducing new type location 
non void return statement possibly duplicated function considered set binding time return location return 
return location considered unambiguously defined return statement 
dealt elegantly program transformation global variables pass returned values callees callers 
dealing multiple function returns led propagate return states 
point mix statement output different execution test return want dynamic fig 

effect introducing return paths paths path corresponding function return terms control graph connected exit node function standard path connected node representing statement 
instance consider code excerpt fig 

join point non returning paths single path corresponding false branch joined propagated statement output state conditional statement considered static static 
general returning paths joined account possibility return statements dynamic control 
result statement associated standard input output states return input output states 
output state function output state body meaningful part return defined non local locations return output state 
case multiple non void return statements upper bound various values return locations simply obtained making return location part return state output return statement 
course introducing return states replace prior goto elimination phase multiple return statements goto statements jumping single shared return statement standard analysis return states 
example applying transformation followed goto elimination fig 

single goto statement example simply eliminated setting flag goto conditionally execute statements goto statement see 
result restructuring program new paths may appear leading loss precision 
example execution apparently flow exit path exist original program see fig 

assume instance tests static assign static value variable assigns initial program return return multiple returns elimination ret goto ret return ret goto elimination goto ret goto 
goto 
goto ret return ret fig 

transforming programs multiple return statements gamma gamma gamma gamma gamma gamma ret gamma gamma gamma gamma gamma gamma oe gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma oe oe oe oe goto return ret goto return ret goto goto return fig 

effect goto elimination dynamic value variable 
analysis concludes exiting function static 
goto statements standard analysis determine dynamic see fig 

multiple return statements seen special case goto statements 
handling case specific way return states possible keep analysis compositional losing precision program restructuring 
analysis corresponding data flow equations fig 

functions non locals def non locals return non local defined non local locations respectively 
function calls calling context ctx puts part state relevant call computing binding time actual parameter associating corresponding formal parameter computing binding time non local location simple state lookup 
call formal loc id simply returns location associated th formal parameter function id output state call statement obtained updating binding times defined non local locations callee 
case non void function call binding time left hand side location additionally set binding time return location 
output state return statement state fg associates location binding time return state ret propagated exit point function 
return states propagated ret ret input output return states 
corresponding equations similar ones relating omitted fig 

assignment statement ret equal ret 
conditional statements loops blocks ret ret related exactly equations see fig 

particular transfer function deals return locations dynamic control 
function call annotated binding times binding time callee return location upper bound binding times callee defined non local locations summarizing side effects call 
depending annotations statement evaluated away binding times static rebuilt return dynamic reduced return static dynamic side effects 
case nonvoid function call void function call corresponding function definition function returning void 
function definition analyzed initializing return state ret fg setting input state function body input state function 
output state function computed extracting defined non local locations return state function body ret 
local locations returned longer scope non defined locations need returned modified function 
applications tempo partial evaluator specialize wide variety existing complex real world applications 
section summarize applications specialized tempo 
give couple examples taken applications show key features tempo binding time analysis described enable static data exploited 
specializing systems code main target tempo analyses designed 
previous shown specializing operating system components respect system states occur produce significant speedups 
validate assertion tempo specialize sun remote procedure call rpc 
common system components sun rpc generic structured layers 
remote procedure call fixed interpretive overhead eliminated 
client server functions specialized consist roughly lines code 
speedups marshaling round trip rpc obtained platform sun workstations connected atm link see 
specialization various approaches design application generators programs automatically translate specifications applications 
tempo plays key role approach specific application generated combining instantiating generic components 
approach involves defining machine interpreter contain interpretation overhead eliminated partial evaluation 
currently framework applied automatically generate device drivers video cards drivers server 
study machine implementation consists lines code roughly lines 
scientific algorithms image processing functions specialized tempo 
functions fast fourier transform cubic spline interpolation image dithering specialized producing significant speedups 
addition compile time specialization functions specialized run time tempo automatic template run time specializer 
compared operating systems application generation programs functions small consisting lines code 
give couple examples features flow sensitivity return sensitivity critical effectively specializing applications 
original source code dynamic expression statements considered dynamic transformed code dynamic expression common case value common case value statements considered static statements considered dynamic fig 

example binding time improvement relies flow sensitive analysis example illustrates binding time improvement relies flow sensitive analysis 
fig 
contains program fragment variable assigned dynamic value followed number statements assignment renders dynamic subsequent uses dynamic 
known certain values common program transformed way exploit information 
specifically conditional introduced determine fact equal common value 
explicitly adding assignment truth branch conditional copying statements branches statements truth branch specialized respect common value example binding time improvement possible binding time analysis flow sensitive proven useful sun rpc application generation 
apart binding time improvement current version tempo requires single change original sun rpc code 
change handling possible network failure goto statements way confounds goto elimination scheme 
second example shows return sensitivity crucial specialize excerpt sun rpc client code shown fig 

initial function int xdr bytes 

xdr int sizep return 
int xdr int struct str unsigned int 
return xdr long 
int xdr long struct str unsigned int ulp 
int op return int ulp int op return return 
int struct str int lp handy handy handy return private lp private private return fig 

return sensitivity operating systems code xdr bytes contains code encodes data client buffer making call xdr int checking return value success failure 
call interprocedurally arrive function actual encoding 
addition doing encoding performed assignment private function decrements client buffer size handy increments client buffer pointer private returns error value buffer full handy success value 
client buffer known specialization time binding time annotations fig 
produced 
seen assignment performs encoding considered dynamic data encoded known run time 
operations depend client buffer considered static 
example buffer overflow statically computed resulting return value propagated interprocedurally 
example intermediate function calls eliminated specialization initial statement reduced 
due fact return sensitivity allows static return values propagated interprocedurally despite fact functions contain dynamic side effects 
related number existing line partial evaluators imperative languages functional languages 
existing imperative binding time analyses flow insensitive single description binding time state maintained entire program 
case variable dynamic program single description dynamic variable considered dynamic program 
flow sensitive analysis 
alternative solution obtain flow sensitivity flow insensitive analysis intermediate program representation explicitly encodes flow dependencies single static assignment ssa :10.1.1.100.6361
example binding time analysis described simple imperative language obtains flow sensitivity program representation graph prg representation contains features ssa 
focus providing formal semantics proving safety conditions binding time analyses order establish semantic foundation implementation application issues considered 
interesting determine framework adapted handle real programs example treating realistic language containing pointers data structures functions 
additionally user wishes see analysis annotations resulting specialized program terms original source program user familiar required convert ssa prg code back original form 
idea flow sensitivity apply functional languages notion state updates 
similarly existing imperative binding time analyses context insensitive 
contexts calls function approximated single precise context 
parameter non local variable dynamic call site considered dynamic call site 
hand number existing binding time analyses functional languages context sensitive commonly referred polyvariant 
context sensitive binding time analysis imperative language complicated contexts include binding times nonlocal variables read function state updated respect non local variables written 
complicated possibility definitions ambiguous due aliasing 
return sensitivity prevents side effect binding time function interfering return binding time new concept previously explored 
discovered need return sensitivity applying partial evaluation specific application domain operating systems code 
return sensitivity applicable functional languages pure functions return value contain side effects 
different approach obtaining effective specialization imperative programs proposed research group 
directly treating imperative program original source program transformed functional representation 
existing partial evaluator functional language specialize program residual program transformed back original imperative language 
main advantage approach reusing existing mature partial evaluator avoids need design implement new partial evaluator 
initial results show approach may achieve high degree specialization flow context return sensitivity demonstrated small examples 
experimentation needed determine approach scaled handle size complexity existing realistic programs 
designed implemented binding time analysis imperative programs accurately handles complexities existing real istic software systems 
described precision obtained presenting binding time analysis flow context return sensitive 
validated approach applying partial evaluator existing realistic applications 
specifically studied identified opportunities specialization operating systems application generation scientific computations image processing successfully specialized programs domains partial evaluator binding time analysis 
authors julia lawall barbara moura scott thibault jan vitek anonymous reviewer comments drafts 
research supported part france telecom sept arpa nsf ccr 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
andersen 
self applicable program specialization 
partial evaluation semantics program manipulation pages san francisco ca usa june 
yale university new haven ct usa 
technical report yaleu dcs rr 
andersen 
program analysis specialization programming language 
phd thesis computer science department university copenhagen may 
diku technical report 
baier gluck 
partial evaluation numerical programs fortran 
acm sigplan workshop partial evaluation program manipulation pages orlando fl usa june 
technical report university melbourne australia 
barth 
practical interprocedural data flow analysis algorithm 
communications acm 
batory vivek thomas 
genvoca model software system generators 
ieee software september 
bell bellegarde hook kieburtz lewis mckinney oliva sheard tong walton zhou 
software design reliability reuse proof concept demonstration 
proceeding pages 

extracting polyvariant binding time analysis polyvariant specializer 
pepm pages 
consel 
polyvariant binding time analysis applicative languages 
pepm pages 
consel 
polyvariant binding time analysis applicative languages 
partial evaluation semantics program manipulation copenhagen denmark june pages 
new york acm 
consel hornof noel noy volanschi 
uniform approach compile time run time specialization 
danvy gluck thiemann editors partial evaluation international seminar dagstuhl castle number lecture notes computer science pages feb 
consel noel 
general approach run time specialization application conference record rd annual acm symposium principles programming languages pages st petersburg beach fl usa jan 
acm press 
consel pu walpole 
incremental specialization key high performance modularity portability operating systems 
pepm pages 
invited 
cytron rosen wegman zadeck :10.1.1.100.6361
efficiently computing static single assignment form control dependence graph 
acm transactions programming languages systems pages 
das reps van hentenryck 
semantic foundations bindingtime analysis imperative programs 
acm sigplan symposium partial evaluation semantics program manipulation pages la jolla ca usa 
acm press 
hendren 
taming control flow structured approach eliminating goto statements 
proceedings ieee international conference computer languages may 
futamura 
program evaluation generalized partial computation 
international conference fifth generation computer systems tokyo japan pages 
futamura 
generalized partial computation 
bj rner ershov jones editors partial evaluation mixed computation pages 
amsterdam north holland 
henglein mossin 
polymorphic binding time analysis 
sannella editor programming languages systems esop 
th european symposium programming edinburgh april lecture notes computer science vol 
pages 
berlin springer verlag 
hornof 
static analyses effective specialization realistic applications 
phd thesis universit de rennes june 
hornof noy consel :10.1.1.35.7909
effective specialization realistic programs sensitivity 
van hentenryck editor proceedings fourth international symposium static analysis sas volume lecture notes computer science pages paris france sept 
springerverlag 
jones gomard sestoft 
partial evaluation automatic program generation 
international series computer science 
prentice hall june 
marlowe ryder 
properties data flow frameworks 
acta informatica dec 
meyer 
techniques partial evaluation imperative languages 
partial evaluation semantics program manipulation pages new haven ct usa sept 
acm sigplan notices 
microsystem 
nfs network file system protocol specification 
rfc sun microsystem mar 
ftp ds internic net rfc txt 
moura 
bridging gap functional imperative languages 
phd thesis university rennes apr 
muller marlet volanschi consel pu goel 
fast optimized sun rpc automatic program specialization 
proceedings th international conference distributed computing systems amsterdam netherlands may 
ieee computer society press 
muller volanschi marlet 
scaling partial evaluation optimizing sun commercial rpc protocol 
acm sigplan symposium partial evaluation semantics program manipulation pages amsterdam netherlands june 
acm press 
pugh 
partial evaluation high level imperative programming languages applications hard real time systems 
conference record nineteenth annual acm sigplan sigact symposium principles programming languages pages albuquerque new mexico usa jan 
acm press 
noel hornof consel lawall 
automatic template runtime specialization implementation experimental study 
international conference computer languages pages chicago il may 
ieee computer society press 
available irisa report pi 
partial evaluation semantics program manipulation copenhagen denmark june 
acm press 
pu black consel cowan inouye walpole zhang 
optimistic incremental specialization streamlining commercial operating system 
proceedings acm symposium operating systems principles pages copper mountain resort usa dec 
acm operating systems reviews acm press 

polyvariant binding time analysis 
partial evaluation semantics program manipulation san francisco california june technical report yaleu dcs rr pages 
new haven ct yale university 
thibault consel 
framework application generator design 
editor proceedings symposium software reusability pages boston massachusetts usa may 
software engineering notes 
wilson french wilson amarasinghe anderson tjiang 
liao 
tseng hall lam hennessy 
suif infrastructure research parallelizing optimizing compilers 
acm sigplan notices dec 
