mosix scalable cluster file systems linux amnon barak ariel amnon computer science hebrew university jerusalem israel mosix cluster computing enhancement linux supports preemptive process migration 
presents mosix direct file system access dfsa provision improve performance cluster file systems migrating process file traditional way bringing file data process 
dfsa suitable clusters manage pool shared disks multiple machines 
dfsa possible migrate parallel processes client node file servers enabling parallel access different files 
dfsa file system maintains cache consistency 
file system currently available linux implemented mosix file system mfs prototype dfsa 
describes dfsa presents performance mfs dfsa 
advances cluster computing ability generate migrate parallel processes machines created need develop scalable cluster file systems support parallel access files cache consistency processes access file 
traditional network file systems nfs afs coda inadequate parallel processing rely central file servers 
new generation file systems global file system gfs xfs frangipani appropriate clusters systems distribute storage cache control cluster workstations provide means parallel file access cache consistency 
scalability file systems unknown 
presents new paradigm scalable cluster computing combines cluster file systems dynamic distribution 
target cluster consists multiple homogeneous nodes single cpu smp computers cooperatively allowing cluster wide resources available process enabling node access file execute process 
cluster file system consists subtrees placed different nodes allow parallel operations different files cache consistency 
key feature design cluster file systems ability bring migrate process file traditional way bringing file data process 
capability supported mosix linux load balancing creates new cluster computing approach provides easy environment improve performance scalability 
note existing packages distribution pvm mpi inadequate needs static fixed allocation processes nodes 
presents extensions mosix system handle cluster file systems combined dynamic distribution load balancing 
mosix particularly efficient distributing executing cpu bound processes 
due linux compatibility mosix scheme process distribution inefficient executing processes significant amount file operations 
overcomes inefficiencies mosix enhanced provision direct file system access dfsa better handling bound processes 
dfsa oriented system calls migrated process performed locally node process currently resides 
main advantage dfsa allows process moderate high volume migrate node performs take advantage local access data 
advantages include reduction communication overhead operations performed network greater flexibility migrate bound mixed cpu bound processes better load balancing 
net result proper distribution files cluster nodes possible migrate parallel processes client node file servers enable efficient parallel access different files 
correct operation dfsa requires file consistency processes run different nodes currently file systems provide 
file system gfs intend fully operational 
option developed prototype file system called mosix file system mfs treats files directories mosix cluster single file system 
hope file systems satisfy requirements available linux 
contributions organization main contributions 
show performance improvements migrating bound processes file server versus traditional remote paging methods 
second contribution demonstration operational cluster file system supports simple scalable scheme cache consistency number processes 
achieved performance common large complex operations large block sizes 
organized follows section gives short overview mosix relevant features 
section presents dfsa mfs 
section presents performance mfs dfsa vs nfs 
section 
mosix background mosix software package enhances linux kernel cluster computing capabilities 
main features preemptive process migration supervising algorithms load balancing memory 
mosix operates silently operations transparent applications just smp 
users run parallel sequential applications initiating processes node allow system assign reassign processes best available nodes execution application 
mosix cluster node server storing files time client executing processes 
run time environment cluster cooperating machines manage shared pool disks multiple machines file accessed node 
granularity distribution linux process 
system image model mosix process unique home node created usually login node user 
system image model computing cluster cc process run home node processes users session share execution environment home node 
processes migrate remote away home node local remote node resources possible continues interact user environment forwarding environment dependent system calls home node 
example assume user launches processes migrate away home node 
user executes ps report status processes including processes executing remote nodes 
outcome organization process regardless location mounted file system special provisions 
process migration mosix supports preemptive completely transparent process migration migrate process time available node 
process migrated system calls intercepted link layer remote node 
system call site independent executed remote node 
system call forwarded stub called deputy executes system call synchronously behalf process home node 
completion deputy returns result process remote node continues execution 
process migration policy particularly useful cpu bound processes inefficient processes intensive file operations 
due fact processes required communicate respective home node environment operation 
clearly cases processes better migrating 
section describes mechanism overcome problem 
direct file system access dfsa direct file system access dfsa re routing mechanism designed reduce extra overhead executing oriented system calls migrated process 
done allowing execution system calls locally process current node 
addition dfsa new algorithm takes account operations added mosix process distribution load balancing policy 
outcome provisions process performs moderate high volume encouraged migrate node obvious advantage bound mixed cpu processes greater flexibility migrate respective home nodes better load balancing 
mosix scheme distributed scalable allows processes simultaneously access different files pre allocated different nodes prior execution parallel processes 
bringing process file existing network file systems bring data file server client node network mosix algorithms attempt migrate process node file resides 
usually file operations performed process single file system 
mosix scheme significant advantages network file systems allows local file system 
clearly eliminates communication overhead process file server cost process migration 
note process migration algorithms monitor weight amount operations vs size process attempt optimize decision migrate process 
interesting research problem locate process performs operations files located different nodes 
naive solution migrate process node operations performed 
problem somewhat complicated wants balance load patterns operations vary time processes involved 
adaptive process allocation policy mosix attempts resolve cases 
dfsa works dfsa software switch determines execute file system calls migrated process current node home node 
function correctly dfsa requires chosen file systems symbolic links identically mounted named mount points 
implied user group id scheme identical cluster safe access violations occur file system accessed users id assigned different nodes 
dfsa checks file systems mounted mount flags type supported dfsa 
redirects system calls performed locally current node direct problematic system calls sharing opened files processes process home node 
dfsa continuously synchronize file status opening closing file position migrated process home node 
dfsa requirements dfsa file system satisfies properties ffl consistency process change file node nodes see change immediately access file 
server client model usually implies cache invalidation client nodes single virtual cache node server 
note sophisticated server may possibly lend cache particular files blocks particular node time 
file systems shared hardware may offer consistent solutions 
ffl time stamps files files file system consistent advancing clock deliberately set backwards regardless node modifications 
ffl file system ensure files directories cleared unlinked long process cluster holds open 
possible techniques achieve form garbage collection 
ffl extra functions file system linux come super block operations identify encapsulate finite identifying information dentry way sufficient able re establish open file directory node 
mosix file system mfs mosix requires file cache consistency processes run different nodes process group cooperating related processes appear operate different nodes 
run dfsa implemented prototype file system called mosix file system mfs 
mfs provides unified view files mounted file systems type nodes mosix cluster single file system 
example mount mfs mfs mount point file mfs usr tmp myfile refers file usr tmp myfile node 
mfs generic usr tmp may file system type scalable node mosix cluster potentially server client 
file systems mfs provides cache consistency maintaining cache server 
implement standard disk directory caches linux server passed clients 
main advantage approach provides simple scalable scheme cache consistency number processes 
advantage mfs approach allows raise client server interaction system call level common large complex operations opening files large block sizes 
obviously having cache client major drawback operations smaller block sizes 
performance section presents performance gains dfsa 
dfsa file system evaluated comparing performance mfs dfsa 
evaluated performance local operations nfs 
executed postmark benchmark simulates heavy file system loads large internet electronic mail server 
postmark creates large pool random size text files performs number transactions transaction consists pair smaller transactions 
performed predefined workload obtained 
executions performed cluster running mosix linux 
benchmark executed pair identical pentium mhz pcs ide disks machines different file access methods block sizes ranging bytes bytes 
table file systems access times sec 
data transfer block size access method kb kb kb kb kb local server mfs dfsa nfs mfs dfsa results benchmark shown table measurement represents average time seconds executions 
line table shows local execution times process files server node 
second line shows mfs dfsa times 
case benchmark started client node migrated server node 
third line shows nfs times client mosix home node server node 
line shows mfs dfsa times file operations performed client node server node mfs process migration dfsa disabled 
table follows mfs dfsa execution times slower local times measured block sizes average slowdown measured block sizes 
mfs dfsa times faster nfs times average speedup measured block sizes 
observe nfs slower local 
expected mfs dfsa times fourth row slower nfs times small block sizes 
block sizes larger mfs better performance nfs 
mfs reasonable alternative cluster file system supports cache consistency 
second benchmark shows performance file operations set client processes running node executing parallel file application communicates common file server 
specifically parallel program reads common database size mb main memory quad smp file server xeon mhz 
application executed different file systems shown kb block size 
benchmark executed locally server node 
application started simultaneously nodes pentium mhz time taken process complete recorded 
time sec 
number nodes local server mfs dfsa nfs mfs dfsa average read time common file quad smp file server results benchmark averaged different executions shown 
seen mfs dfsa times close local times 
fact mfs dfsa average slower local 
note overhead due extra software layer mfs 
seen nfs mfs dfsa times nearly identical nfs providing average better performance mfs dfsa 
obtained results follows mfs dfsa times faster nfs times faster mfs dfsa 
clearly results mfs dfsa provides better scalability nfs mfs dfsa 
new paradigm scalable cluster computing combines cluster file systems load balancing 
scheme allows migrated process directly access file systems current node allows bound process migrate node performs means proper distribution files cluster nodes possible migrate parallel processes client node file servers enable efficient parallel access different files 
showed scheme easy provides improved performance scalability 
correct operation scheme requires file consistency processes run different nodes 
suitable file system scheme global file system gfs allows multiple linux nodes share storage network 
gfs nodes sees network disks local gfs appears local file system 
attractive feature gfs exploits new interfaces fiber channel network attached storage 
followup project adjust gfs mosix dfsa 
similar extensions developed file systems meet dfsa requirements 
interesting explore means combine mfs storage area networks provide consistency connectivity options scalable cluster storage devices 
acknowledgments phil joyce university technology help 
research supported part ministry defense dr cambridge uk 
afs version 
www transarc com library documentation afs doc html 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
acm tran 
comp 
systems 
barak braverman 
memory scalable computing cluster 
journal microprocessors microsystems aug 
barak la 
scalable cluster computing mosix linux 
proc 
th annual linux expo pages may 
mosix scalable cluster computing linux 
www mosix org 
frangipani 
research compaq com src projects 
geist beguelin dongarra jiang manchek sunderam 
pvm parallel virtual machine 
mit press 
global file system gfs 
www org 
katcher 
postmark new file system benchmark 
www com 
nfs version protocol specification 
www faqs org rfcs rfc html 
peter 
parallel programming mpi 
morgan kaufmann pub 

coda file system 
www coda cs cmu edu 

