temporal triggers active databases prasad sistla ouri wolfson department electrical engineering computer science university illinois chicago chicago illinois propose languages called temporal logic ftl past temporal logic ptl specifying temporal triggers 
examples trigger conditions specified language value certain attribute increases minutes tuple satisfies certain predicate added database minutes tuple satisfying different condition added database 
triggers important monitor control applications 
addition languages algorithms processing trigger conditions specified languages procedures determining trigger conditions satisfied 
methods added temporal component existing database management systems 
preliminary prototype temporal component uses ftl language built top sybase running sun workstations 
index terms active databases triggers temporal logics algorithms modern systems traffic control securities trading communication networks increasingly dependent real time software applications monitor control 
center applications usually lies active database represents status system 
database continuously updated remote sensors software expected respond predefined conditions 
conditions refer evolution database state time database history 
example securities trading system may requested alert trader value particular stock database attribute research supported afosr 

ouri wolfson research supported nsf iri 
increases minutes 
call conditions temporal triggers triggers evolution database state time 
furthermore may want specify temporal triggers involve external events transaction transaction commit invocation method addition database history 
temporal trigger example value attribute increases time transaction commits time transaction starts 
existing database management systems provide capability specifying temporal triggers 
condition part rule terminology rule event condition action triple refers current database state transition database state sequence database states 
propose languages temporal logic called temporal logic ftl past temporal logic ptl specifying temporal triggers 
point section easier specify certain triggers ftl easier specify certain ptl 
temporal logic formalism specifying reasoning time varying properties systems appropriate language specifying temporal triggers 
main feature ftl ptl special operators apply exclusively time dimension 
temporal operators ftl nexttime eventually ones ptl previously examples trigger conditions specified languages tuple satisfies certain predicate added database minutes tuple satisfies condition added database 
value attribute stays certain threshold minutes 
period minutes different values database increase simultaneously 
addition languages methods processing trigger conditions specified languages procedures determining trigger conditions satisfied 
methods added temporal component existing database management systems follows 
temporal trigger specification identify set materialized views dbms traditional triggers 
dbms requested invoke temporal component materialized views changes see maintenance materialized views 
invoked temporal component determines trigger satisfied 
user notified associated action taken 
temporal component saves minimum amount information current database state order able determine invocations trigger condition satisfied 
implemented temporal component subset ftl top sybase dbms running sun stations 
temporal logic uses temporal operators refer database states past temporal logic uses temporal operators refer past database states 
proposal ftl ptl trigger specification languages experience net mate 
net mate aims develop software environment management large hundreds thousands interconnected computers communication networks 
fault network failure overload condition important goal network management automatically detect recover exceptional condition 
current network state net mate represented management information base mib 
process developing net mate faced need flexible specification language enables frequent changing trigger conditions triggers temporal capability offered proposed languages 
developed language temporal triggers language expressive power languages 
rest organized follows 
section give informal formal presentation language ftl illustrate application examples 
section algorithm detecting trigger conditions specified inthe language ftl demonstrate example 
section contains proof correctness algorithm optimization implementation issues 
section language ptl give algorithm detecting triggers specified language 
section discuss systems issues extensions 
section compare existing relevant 
temporal logic ftl model assume database composed variables various types relations objects refer variables database variables 
database state mapping associates value appropriate domain variable 
formulas logic ftl interpreted database histories 
database history finite sequence database states associated time stamp 
new database state added history database changes 
time stamp associated new database state denotes time change occurs fixed global clock assume time stamps history strictly increasing 
model refers database variables explicitly consider external events transaction transaction commit easily incorporate external events model assuming database special relation instance time contains external events occur time 
explained detail section 
notion time discrete slight modifications extend model case continuous time 
syntax formulas ftl basic temporal operators nexttime temporal operators eventually expressed terms basic operators 
symbols logic include various type names relations integers denote different types variables constants database 
assume set ary function symbols set ary relation symbols 
ary function symbol denotes function takes arguments particular types returns value 
example function symbols denoting addition multiplication integer type 
similarly binary relation symbols denoting arithmetic comparison operators 
functions symbols denote retrieval queries databases 
example consider relational query retrieves busy links relation called traffic link relation contains tuples consisting link name traffic link retrieve traffic link name traffic link traffic query represented function symbol busy links takes single argument binary relation returns unary relation 
functions arity zero denote constants relations arity zero denote propositions 
addition database variables assume set variable names called global variables variables associated type 
global variables assignment quantifier order capture values derived database different instants time 
specifically global variables retain results queries executed different states history 
variables clear define syntax semantics logic 
assume special database variable called time value denotes time stamp associated database state 
formulas logic formed function relation symbols database variables global variables logical symbols assignment quantifier square brackets temporal modal operators nexttime 
logic assignment quantifier 
binds global variable result query database states history 
term variable application function terms 
example time term variables binary function term query busy links specified term 
formed formulas logic defined follows 
terms appropriate type ary relational symbol formed formula 
formed formulas nexttime formed formulas global variable term type contain global variables term may represent query database 
global variable appearing global variables similar rigid variables formula free scope assignment quantifier form 
formula free global variables called trigger condition short trigger 
example formulas logic 
query called traffic link retrieves traffic link communication network formula asserts traffic link continues zero jumps traffic link traffic link 
formula uses assignment nexttime operators indicates update traffic link traffic link nexttime traffic link formula read follows global variable denotes value traffic link state value traffic link state equal notice global variable capture value traffic link state compared value traffic link state 
traditional database triggers fire certain update occurs traffic link increases 
example shows triggers elegantly specified logic nexttime assignment quantifier 
semantics intuitively semantics specified context 
state database trigger activated 
database state formula evaluated history starting satisfied trigger fired user notified associated action executed addition reactivated starting database state define formal semantics logic follows 
assume type logic associated domain variables type take values domain 
assume standard interpretation function relation symbols logic 
example denotes standard lessthan equal relation denotes standard addition integers 
global variables capture information various database states history 
reason define satisfaction formula state history respect evaluation evaluation mapping associates value global variable 
example consider formula mentioned traffic link nexttime traffic link satisfied traffic link updated 
satisfaction subformula traffic link depends result query retrieves traffic link current database value global variable value assigned value traffic link previous database state 
definition semantics proceeds inductively structure formula 
formula contains temporal operators assignment global variables quantifiers satisfaction state history depends exclusively values database variables state evaluation 
formula form satisfied state respect evaluation ae iff cases holds satisfied state exists state history satisfied continues satisfied 
formula form nexttime satisfied state respect evaluation iff state formula satisfied state history respect evaluation 
note formula nexttime satisfied state history 
formula form satisfied state respect evaluation iff formula satisfied state respect new evaluation assigns value term keeps values global variables unchanged 
formula form satisfied iff satisfied state formula form satisfied state iff satisfied state 
formulas additional propositional connectives disjunction logical implication defined additional temporal operators eventually defined follows 
temporal operator eventually asserts satisfied state defined true temporal operator asserts satisfied states including state defined eventually emphasize context implies evaluated database state processing algorithm avoids overhead specifying set materialized views database management system evaluation takes place materialized views changes update relevant occurs 
algorithm performing evaluation parameter set changes materialized views 
examples formula called overload uses assignment quantifier eventually operator 
indicates traffic link doubles minutes 
formula states exists state denote values traffic link time state exists state value traffic link time equal 
global variables 
split formula lines 
eventually time traffic link eventually traffic link time 
consider trigger fire traffic link doubles just traffic link doubles 
traffic link relation contains link names traffic link 
new trigger specified logic modest modification formula 
specifically formula asserts traffic link doubles minutes 
eventually time traffic link eventually query time formula query traditional database predicate 
refers relations gamma gamma link attributes name traffic 
predicate evaluates true tuple tuple gamma gamma link name name traffic traffic 
predicate easily specified relational query language sql 
logic explicitly time variable compare time different points history 
formulas readable omitting time variable formulas time constants subscripts temporal operators 
augment language bounded modal operators form positive constant 
intuitively asserts minutes formula holds continues hold 
bounded operators eventually gamma gammac abbreviation formula rue formal definitions operators 
formulas time time formal definitions bounded operators similar place 
bounded operators formula expressed eventually traffic link eventually gamma gamma traffic link logic expressive existing temporal database query languages temporal calculus 
example consider trigger simultaneous increase states condition period minutes traffic link doubles update traffic link doubles update 
trigger expressed temporal calculus 
trigger specified logic formula rue formula 
traffic link traffic link nexttime traffic link traffic link 
formula rue states property satisfied continuously minutes states property denote values traffic link traffic link state state traffic link traffic link 
detection trigger conditions ftl section method detecting trigger condition specified ftl satisfied database history 
denote trigger condition 
describe component added database management system order process condition component works follows 
presents database queries appear materialized views database management system 
component activated database management system database update occurs 
component uses algorithm determine trigger condition satisfied database history current state 
assumption database referred materialized views predicates referred formulas involve views global variables time variable 
informal description algorithm requirements graph algorithm maintains directed rooted acyclic graph called requirements graph 
nodes classified nodes nodes root node 
terminal nodes nodes having outgoing edges graph nodes 
node graph marked requirement 
requirement pair form ae component formula original formula negation formula ae evaluation global variables appear free recall evaluation mapping assigns values global variables assigned values instances materialized views past database states 
say requirement ae satisfied history history satisfies formula respect evaluation ae 
root node labeled requirement trigger formula 
graph considered syntax diagram boolean formula boolean variables representing terminal requirements requirements marking terminal nodes 
boolean formula denotes subsets terminal requirements need satisfied history order trigger condition satisfied entire history 
example illustrates intuition construction consider formula eventually predicates database state 
intuitively satisfied cases 
currently satisfied state means satisfied current state currently satisfied eventually satisfied history starting state 
cases decomposed subcases satisfied current state satisfied current state satisfied history starting state 
assume satisfied current database state satisfied 
analysis easy see way eventually currently satisfied history satisfies formulas eventually 
indicated graph nodes edges state update 
edge root nodes denoted edge node terminal node labelled edge terminal node labelled requirement eventually 
example nodes successor 
general nodes may successor 
example consider formula previous formula assume state satisfied satisfied 
case previous arguments difficult see nodes having additional terminal successor node marked requirement 
requirements graph case 
example evaluations empty due fact trigger global variables 
general may case 
evaluations terminal requirements capture information past history necessary order determine trigger condition holds 
say requirement ae temporal requirement contains temporal operator call nontemporal requirement 
note satisfaction nontemporal requirement depends current state history 
summary graph captures information past history needed monitor trigger condition 
specifies combination different terminal requirements need satisfied history order trigger satisfied 
overview assume database history starts trigger entered 
new update extends history appending new database state current history 
materialized views updated algorithm executed 
algorithm informed views changed changes 
algorithm accesses views execution 
ease exposition assume execution algorithm database updates allowed 
discussion section explain necessarily 
explained algorithm maintains requirements graph node graph marked requirement 
graph divided levels numbered starting onwards 
level corresponds th database update 
level divided nodes followed nodes 
edges graph connect nodes level nodes level nodes level nodes level 
example nodes form terminal nodes form single level 
root node node node level 
marking ae node level gamma denotes requirement history gamma st update 
trigger entered system graph initialized contain root node marked requirement 
gamma updates graph generated level gamma 
graph node level gamma terminal node 
temporal component invoked th update graph extended 
additionally labeling procedure executed 
procedure node labelled boolean values label label 
labels computed scratch invocation 
label pertains history th update label pertains history 
specifically label set true history th update satisfies requirement labelling set false 
label set true extension history th update satisfy requirement labelling set false 
discuss steps algorithm executed result th update detail 
consider terminal node requirements graph ae requirement marked 
procedure subsection applied requirement compute collection sets requirements 
non temporal requirements evaluated current database state 
containing non temporal requirements satisfied current database state immediately deleted means remaining non temporal requirements satisfied 
contains set requirements non temporal label set true set false 
non empty label set true set false 
note label set false label set false 
sets contain non temporal requirements sets deleted remaining satisfies condition 
contains temporal requirement nontemporal requirements satisfied current database state 
procedure values label label propagated upwards lower levels straight forward manner 
see step formal description 
label ffl set true procedure iff history th update satisfies trigger 
case trigger fired 
condition label ffl false implies history th update extension satisfy trigger 
label ffl false user notified trigger satisfied 
conditions satisfied graph extended level step formal description 
temporal component exited 
generating sets requirements input step algorithm single requirement form ae marking terminal node graph returns collection sets requirements 
requirement set returned collection non temporal requirement temporal requirement form nexttime ffi temporal formula requirement starts nexttime operator 
algorithm uses special state predicate called state 
predicate introduced convenience description algorithm interpreted database history 
temporal component exited requirements sets belonging refer predicate 
execution algorithm requirement sets may contain requirement form state ae 
presence requirements set indicates requirements set satisfied history state state state 
example execution algorithm requirements set contains requirements state ae ae requirements set indicates satisfied state satisfaction postponed state assumed state 
algorithm maintains collection sets requirements initialized contain singleton set ae execution step algorithm updates collection follows 
procedure algorithm chooses sets temporal requirement ae outermost connective formula nexttime operator 
takes actions depending outermost connective formula cases considered 
ffl outermost connective temporal operator formula satisfied current state satisfied current state satisfied current state satisfied state 
observation replace sets 
set obtained replacing pair ae pair ae corresponds possible way satisfying second set obtained replacing requirement ae requirements ae nexttime ae corresponds second possible way satisfying ffl outermost connective assignment quantifier formula satisfied respect evaluation ae iff formula satisfied respect evaluation ae value ae value term current database state variable value ae value ae 
value term current database state retrieved materialized views 
requirement ae replaced requirement ae 
ffl outermost connective clearly satisfied iff satisfied 
requirement ae replaced requirements ae ae 
ffl outermost connective order process case need push negation formula achieve effect considering outermost connective formula words consider outermost connective 
divide case subcases depending outermost connective formula outermost connective requirement ae satisfied iff requirement ae satisfied 
requirement ae replaced ae 
outermost connective case satisfied current state iff satisfied current state satisfied current state nexttime satisfied current state 
observation seen definition semantics operator 
case set replaced sets set obtained replacing requirement ae requirements ae ae second set obtained replacing requirement ae requirements ae nexttime ae 
outermost connective 
clearly satisfied iff satisfied 
set replaced sets set obtained replacing requirement ae ae second set obtained replacing requirement ae ae 
outermost connective assignment quantifier semantics assignment quantifier easy see satisfied iff satisfied 
requirement ae replaced requirement ae 
outermost connective nexttime nexttime case easy see formula nexttime satisfied iff state current state state history state predicate state satisfied current state nexttime satisfied state satisfied state 
set replaced sets 
set obtained replacing requirement ae state ae 
second set obtained replacing ae nexttime ae 
transformations collection carried requirements sets nontemporal form nexttime ae formula starts nexttime operator 
notice temporal requirements formulas start nexttime operator replaced algorithm 
replacement takes place formula newly added requirement starts nexttime operator length length formula requirement replaced 
reason easy see procedure terminates collection sets satisfying desired property 
termination procedure set contains requirement form state ae temporal requirement removed 
set contains conflicting requirements requirements form ae ae removed 
resulting collection requirements form state ae deleted sets 
resulting collection returned 
formal presentation formal description algorithm overviewed subsection 
algorithm maintains directed acyclic graph graph node maintain fields type mark level 
type denotes node node 
mark gives requirement associated field defined nodes 
level gives level number level created temporal component invoked th update database 
trigger entered initialized contain single node type mark level 
update algorithm executed 
algorithm uses procedure comp sets takes argument single requirement returns collection requirements sets 
function essentially implements algorithm subsection 
terminal node perform steps 
comp sets mark collection requirements sets property temporal requirement sets form nexttime ae 
delete sets nontemporal requirement satisfied current database state 
save 
set label label follows 
contains set requirements non temporal set label true set label false 
non empty set label true set label false 
delete sets contain non temporal requirements 

non terminal node compute label label terminal nodes nodes decreasing level numbers follows 
node resp node label label set conjunction resp disjunction corresponding values successors 

procedure sets label ffl true recall ffl denotes root node notify user trigger satisfied trigger initializing graph consist single node marked requirement exit temporal component 
label ffl false notify user trigger satisfied purge graph cases hold go step 
shown label ffl false label ffl false 

delete nodes label false 
remaining terminal node 

perform actions 
create new node graph set level level 
temporal requirement form nexttime ae 
exists node level level mark ae node introduced processing terminal node introduce edge create node level level mark ae introduce edge procedure comp sets 
takes argument requirement ae 
computes collection sets requirements 
initializes contain single set ae updates iterative procedure 
exists temporal requirement ae requirements set start nexttime operator replace ae requirements ae ae replace ae ae ae value term current database state global variable free ae ae replace set sets gamma ae ae gamma ae ae nexttime ae replace sets gamma ae ae gamma ae ae nexttime replace sets gamma ae state ae gamma ae nexttime ae replace sets gamma ae ae ae gamma ae ae nexttime ae replace requirement ae pair ae replace requirement ae ae delete set contains conflicting requirements requirements form ae ae 
delete set contains requirement form state ae temporal requirement 
delete requirement form state ae sets return final value example illustrate operation algorithm overload trigger formula section 
purpose exposition denote formula rewrite eventually traffic link time eventually traffic link time 
operation algorithm equivalences eventually true eventually true 
note subformulas trigger activated graph node marked requirement 
consider database history 
database state give value traffic link database variable appears history 
successive elements history pair component pair value traffic link second component value time 
history elements 
note history traffic link values times respectively 
example temporal component entered graph satisfies properties 
nodes successor formula conjunction subformulas containing temporal operators 
trigger satisfied history iff requirements marking terminal nodes satisfied history 
markings terminal nodes distinct identify terminal node requirement marks 
example denotes terminal node mark 
invocation temporal component give requirements mark terminal nodes showing entire graph addition show collection step step 
steps set singleton set simply show corresponding requirement contained 
requirement indicated triple pair evaluation empty case triple component gives formula give values variables respectively 
state terminal nodes step iteration comp sets contains nexttime iterations nexttime requirement processed iterations nexttime nexttime processed step nexttime nexttime step nexttime nexttime requirement satisfied state terminal nodes step second state terminal nodes step step nexttime step nexttime satisfied deleted step nexttime nexttime step nexttime nexttime deleted terminal nodes step third state step step nexttime step nexttime deleted step nexttime step nexttime deleted step nexttime nexttime step nexttime nexttime deleted terminal nodes step fourth state step nexttime requirement satisfied 
step label terminal node set true 
step label root node ffl set true trigger fired 
requirements graph third update shown 
ffl nodes nodes ffi nodes nodes 
correctness optimization correctness prove correctness previous algorithm discuss important optimization techniques 
theorem asserts correctness algorithm 
space limitations proof omitted 

theorem consider invocation temporal component 
history time trigger entered reactivated 
execution step algorithm indicates satisfaction trigger condition iff satisfies step algorithm indicates trigger satisfied possible history hh satisfy optimization algorithm optimized eliminate certain requirements sets satisfied 
example currently substitution values global variables occurs nontemporal formulas step algorithm 
resulting formulas satisfied current database state corresponding sets requirements eliminated 
modify algorithm substitute certain global variables variables containing past time values temporal formulas 
formulas unsatisfiable corresponding requirements sets eliminated step 
example substitution values temporal formula assume resulting formula eventually time constant 
recall time time stamp variable 
value current time stamp greater obvious current database state database states satisfy formula time stamp value increasing 
case corresponding requirement associated requirements set eliminated 
type optimization particularly useful formulas bounded temporal operators 
effect optimization overload example algorithm maintain traffic link minutes 
implementation briefly discuss implementation issues procedure particularly maintenance evaluations requirements sets 
describe data structures needed maintain evaluations facilities dbms 
discuss issue focusing relational data model ideas easily extended object oriented model 
implementation involves maintaining auxiliary relations object oriented model relations object class 
assume original trigger global variable exactly assignment form database query 
condition satisfied rename global variables satisfy 
clearly occurrences scope assignment quantifier free variables 
materialized view defined underlying database 
call query represents 
consider requirement form ae 
clearly satisfaction requirement depends values assigned global variables free requirement maintain values ae free free variables xm queries denoted variables respectively 
clearly ae value query past database state 
store requirement tuple component subformula st component follows 
value retrieved single value store ae st component tuple 
example consider overload trigger subsection 
trigger global variables queries assigned variables retrieve single values requirement set requirement 
instance requirement set subformula eventually traffic link time 
values respectively 
retrieves relation st component simply value past time stamp case ae retrieved selection followed projection operation auxiliary relation value precise paragraph 
define auxiliary relation intuitively captures tuples materialized view defined past database states follows 
retrieves ary relation attributes 
attributes denote tuple materialized view defined attributes time attributes beg time time specify time interval tuple materialized view valid 
tuple currently valid value attribute time large value say max 
initially set projection attributes view defined initial database state tuples value beg time attribute set initial time stamp value time attribute set max 
subsequently materialized view defined changes updated follows 
assume respectively sets tuples added deleted materialized view due change database state 
invocation passed parameters temporal component 
deriving new requirements sets major step updates auxiliary relations follows 
tuple tuple max added current time 
tuple components constitute time attribute value max tuple value time attribute changed gamma current time 
easy see query time selection followed projection 
selection set tuples condition beg time time satisfied 
attributes beg time time projected result 
implicit discussion tuples deleted auxiliary relation 
tuples deleted database time updated auxiliary relation 
bounded temporal operators tuples deleted auxiliary relations 
intuitively trigger condition refers history time window minutes tuples deleted database minutes ago deleted auxiliary relations 
algorithm modified take advantage optimization details scope 
complexity issues comment space time complexities algorithm 
consider different parameters analyzing complexity 
length trigger specification called length history called size view history called length history simply total number states history 
size view history defined size materialized views trigger entered plus total size updates views time trigger entered ends fires deleted result determination fire 
note increase length history 
total space algorithm consists auxiliary relations requirements graph 
size auxiliary relations bounded view history requirements graph levels level corresponds update point state 
number nodes level bounded follows 
corresponding requirement node level 
requirement consists subformula trigger specification evaluation global variables appearing number distinct bounded number distinct subformulas multiplied number distinct evaluations global variables 
number global variables bounded number distinct evaluations bounded follows number nodes level mn 
total number nodes requirements graph mn 
node successor nodes 
follows fact procedure comp sets subsection generates sets requirements invocation 
due fact evaluation requirement ae belonging set uniquely determined input requirement procedure current state database 
consequence total number sets returned collection bounded total number distinct subsets subformulas see total number nodes requirements graph mn 
size node graph 
size requirements graph cm small constant total space cm 
time complexity algorithm cm constants obtained follows 
total time taken invocation temporal component consists parts 
part evaluation nontemporal requirements auxiliary relations step algorithm 
evaluation done time polynomial sizes auxiliary relations 
total number evaluations shown cm take time cm 
second part time complexity involves extending requirements graph computing values label label done time linear size requirements graph 
trigger uses bounded temporal operators space time complexities current algorithm optimization subsection depends view history number updates bounded history 
performance enhanced combining multiple updates explained section transactions heading 
past temporal logic ptl previous sections considered ftl language specifying triggers 
section investigate past temporal logic ptl specification triggers 
algorithm monitoring triggers specified logic 
model syntax semantics model case ftl 
syntax ptl ftl temporal operator replaced past counter part operator nexttime replaced past counter part ptl formulas ptl formulas 
case ftl ptl formulas interpreted time stamped database histories 
semantics formula defined inductively structure formula 
formula satisfied state history respect evaluation ae iff cases holds satisfied respect ae exists past state satisfied respect ae continues satisfied respect ae satisfied states occurring including excluding 
formula satisfied state respect evaluation ae iff state satisfied state immediately precedes additional past operators previously gamma gamma past defined follows 
formula previously asserts past satisfied defined true formula gamma gamma past asserts satisfied past states including state defined previously trigger ptl simply ptl formula free global variables 
say history satisfies trigger state history satisfies respect empty evaluation 
examples example triggers specified ptl 
trigger fires current time past clock traffic link remained clock 
formula time denotes value time stamp associated database state 
time traffic link time 
trigger fired update traffic link occurs 
traffic link traffic link formula read follows 
value global variable denotes value traffic link current state value traffic link previous state equal formula called past overload specifies property overload trigger section 
indicates traffic link doubled minutes 
formula states denote values traffic link time latest state exists past state value traffic link time greater equal gamma 
global variables 
time traffic link previously traffic link time gamma 
case ftl augment ptl bounded operator positive constant 
intuitively asserts time past units time holds continues hold 
detection ptl triggers subsection outline approach detecting triggers specified ptl 
discuss implementation optimization techniques applied 
trigger 
basic idea algorithm eliminate temporal operators subformula trigger express subformula boolean expression involving results database queries past database states global variables appear free database history database state th update trigger entered 
subformula inductively define boolean formula follows 
ffl arithmetic relation symbol val val val result evaluating term database state global variables appearing left 
may evaluate constants true false may boolean valued expression involving global variables 
ffl ffl ffl defined follows 
update activation trigger false 
gamma ffl defined follows 
gamma 
ffl expression obtained substituting result executing query database state expression note computed incrementally inductively values gamma proper subformula computing subformulas previous values gamma different deleted 
trigger detection algorithm operates follows 
th update simply computes subformula fires trigger iff formula evaluates true 
discards previous values gamma subformula theorem proved induction theorem algorithm fires trigger th update iff formula satisfied state illustrate operation algorithm past overload trigger purpose exposition denote formula rewrite time traffic link previously traffic link time gamma 
operation algorithm equivalences previously true consider history subsection database state represented pair containing value traffic link time order 

give values simplification rearrangement 
false false false true analysis see evaluates true trigger gets fired 
noted formulas contains results database queries previous database states 
values queries maintained separate auxiliary relations implementation ftl triggers query values auxiliary relations selection operation uses time stamps 
time stamps maintained part formulas formulas maintained graph case ftl 
clearly size formulas keeps growing number updates 
optimization techniques similar case ftl triggers reduce size formulas suppose clause form free global variable constant assigned value time optimization technique 
value time greater clearly case clause get satisfied 
case replace clause constant false simplify formula 
illustrate considering previous example history 

states history 

false value time state obvious satisfied substituted values time replace clauses false simplify get 
method applied triggers formed bounded temporal operators allows keep bounded information past history 
discussion section discuss various issues concerning language processing algorithm 
external events section indicated external events user login user logout transaction commit easily handled model 
achieved having special relation object class called ext events contains instance time external events occur time 
assume external events instantaneous 
means relation non empty instance time instance clock tick relation change 
example time relation ext events contains tuple indicating login user time tuple ext events 
consider trigger value attribute remains positive user logged 
expressed ftl formula eventually user logs user logs trigger user logs user logs queries relation ext events 
check existence tuples indicate occurrence events login logout user reactivation triggers algorithms detecting triggers trigger fired trigger reactivated starting database state state new history 
reactivation trigger scratch means detection trigger condition selective 
example consider trigger condition overload mentioned section trigger satisfied traffic link doubles minutes 
suppose time traffic time 
time trigger fire user notified 
suppose time instances traffic 
trigger fire period technically speaking time overload condition satisfied traffic double value 
alternative strategy detects firings trigger continue previous activation trigger 
approach may cause firing trigger continuously example may undesirable 
avoided attaching additional conditions trigger specification 
example add auxiliary condition trigger stating minimum time difference successive firings trigger 
necessitates keeping additional variable records trigger fired 
new variable needs updated appropriately temporal component 
user may allowed select reactivation strategies discussed 
versus past considered different temporal logics ftl uses operators ptl uses past temporal operators 
noted cases consider history time trigger entered re activated latest update 
point view expressiveness known global variables logics expressive power 
certain types triggers specified concisely ftl concisely specified ptl 
example consider ftl trigger formula database predicates 
eventually formula 
intuitively trigger states instance satisfied point onward holds holds 
trigger fired satisfied 
specification trigger ptl complex 
consider different orders satisfied 
conjuncts length equivalent ptl formula exponential similarly ptl triggers concise specification ftl 
research interesting investigate logics permit past operators trigger 
transactions comment coupling database update resulting execution 
assumed temporal component invoked update 
question arising considered update 
propose define update set changes single committed transaction updates aborted transactions ignored 
possible options definition update omit 
example updates aborted transactions may important tracking security violations 
question arising 
invocation temporal component behalf transaction part active database literature studies coupling application transaction execution condition action part rule assume execution condition action part decoupled application transaction argued assumption natural conditions temporal triggers 
assume invocation temporal component executed separate transaction 
execution action part rule part transaction corresponding invocation temporal component separate transaction 
note trigger monitoring action part regarded application transaction 
method follows 
time trigger temporal component invocation executing system 
furthermore temporal component invocation transaction 
invocation temporal component behalf transaction gets commit time parameter 
invocation temporal component modified process triggers affected time 
case heavy application transactions activity number completed invocations may increasingly fall number committed application transactions 
words number pending invocations temporal component may grow unboundedly 
propose solve performance problem redefining update set changes multiple committed transactions 
specifically number pending temporal component invocations increases threshold replace pending invocations single invocation considers changes corresponding application transactions single update 
model update unique occurrence time 
example commit time application transaction 
scheme trades precision performance precision compromised occurrence time changes modified 
systems issues investigated subjects research 
generic triggers comment concerns collective specification multiple triggers formula 
collective specification called generic trigger 
example suppose user needs specify overload trigger link located chicago trigger link fire traffic link doubles minutes 
language support generic triggers allowing free database variables definition trigger recall definition trigger formula free variables 
different free variable triggers created assignment values free variables 
generic trigger specified query database state trigger free variables 
example generic trigger specified free variable trigger mentioned temporal trigger forms condition part rule 
free variables specification action part rule 
eventually traffic eventually gamma gamma traffic query defined retrieve location chicago 
initially free variable trigger generated value retrieved query initial database state 
subsequently view defined changes new links located chicago added existing links located chicago deleted 
new triggers activated corresponding new values added view old triggers deactivated corresponding values deleted view 
multiple triggers corresponding generic trigger share global variable auxiliary relations see subsection 
processing algorithm modified handle triggers corresponding generic trigger efficiently handling independently 
aggregates issue aggregates time trigger conditions 
example may want define trigger fires average value traffic link hour time exceeds certain threshold 
clearly specify ftl ptl right 
easily modify logics detection algorithms allow terms return simple aggregate values 
example aggregate function defined sum database variable nontemporal database predicate function state history returns sum values time database predicate satisfied 
research required specifying handling complex aggregate functions temporal predicates part aggregates temporal formula 
current project status implemented temporal component subset language ftl 
implementation top sybase dbms 
implementation consists subsystems 
subsystem takes input ftl trigger defines set sybase update triggers 
triggers fired sybase second subsystem invoked 
subsystem maintains requirements sets detects satisfaction ftl trigger 
observe implementation trigger processing mechanism necessary underlying database system supports materialized views 
assumption purpose ease exposition 
observe implementation necessitate modification sybase code 
comparison relevant literature order logic query languages order logic fol sql specify temporal triggers 
case relation type augmented time attribute separate relations containing representation current external events 
ftl ptl intuitive time attribute special properties monotonically increasing logics special operators dealing time naturally way natural language 
additionally triggers specified ftl ptl allow identify amount information needs saved time order monitor trigger perform monitoring incrementally 
hand fol approach enable easy identification minimal amount information specification naturally amenable incremental processing 
example illustrates point 
consider simple ftl formula 
order logic fol expressed starttime starttime starttime time trigger entered 
easy see fol formula complicated 
difficult determine past database information saved order determine satisfaction trigger minimize information 
straightforward way evaluate trigger save value time change evaluate formula scratch history changes evaluation performed change 
hand algorithm evaluates ftl formula follows 
trigger entered algorithm checks current database state satisfies trigger satisfied 
algorithm checks satisfied 
formula false satisfied 
satisfied procedure repeated database update changes clearly information saved database state evaluation incremental 
temporal logics closest 
chomicki considers order temporal logic past temporal operators specifying maintaining realtime dynamic integrity constraints relational databases 
similar ptl uses order quantifiers ptl uses assignment operator 
additionally processing algorithms chomicki works handle subclass formulas property subformulas domain independent see 
restriction limits applicability active databases 
example consider trigger condition past overload section 
expressed follows 
load link time previously load link time gamma subformula load link formula domain independent value load link satisfied infinite number values trigger processed algorithm 
chomicki logic processing method strongly tied relational model 
reason logic temporal operators embedded relational database queries 
contrast ftl ptl database queries functions temporal operators 
example query quantifier query allowed temporal operators specified language processed underlying dbms 
expressive power language depends expressive power query language underlying dbms 
additionally assumed existence materialized views studied particularly relational model concept materialized view applies data models 
difference approach chomicki concentrate issues maintaining triggers active databases concentrates maintaining integrity constraints 
address issues trigger reactivation integration transaction system addressed works 
length specifications triggers chomicki language proportional value time constants trigger 
obviously undesirable 
example consider trigger events occur order minutes 
way express trigger logic follows occurs minute occurs minutes occurs minutes occurs minutes 
occurs minutes occurs minute 
specification clauses 
trigger expressed concisely logic processing method space efficient uses unbounded past temporal operators purpose rectify problem 
contrast ftl formula concisely expresses trigger processed algorithm optimization subsection space efficient way 
currenttime eventually eventually currenttime formula global variable currenttime database variable gives value time 
formula states satisfied current state value currenttime eventually occurs followed additionally occurrence value currenttime equal 
considers temporal logic operators specifying dynamic integrity constraints 
procedure maintenance integrity subset logic 
logic called propositional temporal logic allow order quantifiers 
logic expressive allows quantifiers 
addition model time stamps associated database states 
due specify relative order occurrences different events easily specify absolute timing properties events event occurs minutes occurrence event event expressions event expressions ee interesting formalism specifying temporal triggers 
event expressions regular expressions 
consider basic events letters alphabet expression defines order basic events occur 
trigger specified regular expression delta delta fire occurs followed followed regular expressions temporal logic different widely accepted formalisms specification verification concurrent programs 
algebraic logic 
event expression processed constructing finite state automaton 
event expressions operators regular expressions negations easily shown see size automaton length event expression variables called attribute values terminology 
case space complexity algorithm suffer super exponential blow 
concentrated specifying efficiently processing absolute timing properties 
main algorithm proposed optimizations section maintain amount information needed monitoring trigger 
contrast explicitly address specification absolute timing properties 
may speculate order specify absolute timing properties events ee needs assume special clock tick event special event occurs clock tick 
clear efficiently process ee expressions 
difference logics ee discuss temporal properties database predicates attribute concentrate external events 
possible predicates incorporated language readily apparent 
addresses systems issues transactions update triggers triggers active databases relevant active databases triggers rule languages 
works lack temporal component sense 
concentrate specification triggers involve database states current previous 
contrast address general temporal aspects triggers 
temporal databases database literature area relevant temporal databases 
main difference temporal databases ftl designed triggers priori designed ad hoc queries 
temporal databases usually assumes explicit time attribute relation schemas proposes query languages temporal capabilities 
assume explicit time attribute associated relations objects database 
course attribute automatically added dbms relation schema object type 
prior having dbms create time stamped snapshot database relation tuple attribute value update 
approach taken 
approach reasonable updates infrequent dbms support query past history 
database updated frequently case real time monitor control applications maintaining past history feasible 
case triggers priori 
identify save information database history relevant determination trigger satisfied 
furthermore discard obsolete information example trigger value attribute increases minutes information obsolete minutes 
regular query languages designed cope arbitrary queries database history equipped information predefined triggers 
distinction existing works temporal databases concentrate relational model see example add qualifiers handle temporal aspects database 
contrast explained ftl independent underlying data model 
logic called temporal calculus proposed query language temporal databases 
logic expressive temporal calculus due capability nest temporal operators assignment quantifiers 
example consider trigger states condition period hour traffic link doubles update traffic link doubles update 
section demonstrated trigger expressed language expressed temporal calculus lacks assignment quantifier 
method evaluating trigger conditions method 
temporal logic areas interval logic maintenance temporal databases artificial intelligence 
emphasis research inference temporal knowledge specification temporal constraints 
assignment quantifier similar freeze quantifier defined 
alur henzinger real time logics complexity expressiveness proceedings fifth ieee symposium logic computer science pp 

larson wm 
tompa efficiently updating materialized views proceedings acm sigmod international conference management data washington may pp 


larson updated derived relations detecting irrelevant autonomously computable updates acm transactions database systems 
chomicki history checking dynamic integrity constraints ieee international conference data engineering phoenix arizona 
chomicki real time integrity constraints acm symposium principles database systems june 
cohen compiling complex database triggers proceedings acm sigmod 
ceri widom production rules parallel distributed database environments proceedings vldb 
chakravarthy research project active time constrained database management tr xerox advanced information technology 
dayal active database management systems proceedings third international conference data knowledge bases improving usability responsiveness jerusalem june 
dean temporal hierarchies efficiently maintain large temporal databases jacm oct 
bowman transact sql user guide document sybase 
sengupta wolfson yemini design network management system integrated network management ii krishnan zimmer ed elsevier science publishers 
north holland 
sengupta wolfson yemini network management environment appear special issue network operations management ieee network magazine computer communications 
gehani jagadish shmueli event specification active object oriented database acm sigmod 
gehani composite event specification active databases model implementation proceedings th international conference large databases aug 
hanson 
kim 
wang predicate matching algorithm database rule systems proceedings acm sigmod international conference management data atlantic city nj may pp 

henzinger half order modal logic prove real time properties proceedings ninth acm symposium principles distributed computing pp 
hanson widom overview production rules database systems research report rj ibm research division 
jensen mark roussopoulos incremental implementation model relational databases transaction time ieee trans 
knowledge data engineering dec 
kotz dittrich supporting semantic rules generalized event trigger mechanism proc 
edbt springer verlag lncs 
de simon making deductive database practical technology step forward proc 
acm sigmod international conf 
management data 
gunter saake monitoring dynamic integrity constraints temporal logic information systems 
gunter saake finite linear temporal logic specifying database dynamics lecture notes computer science springer verlag 
manna pnueli temporal logic reactive concurrent systems specification springer verlag 
qian wiederhold incremental recomputation active relational expressions ieee transactions knowledge data engineering 
risch monitoring database objects proc 
vldb aug 
real time interval logic reasoning executions real time programs proc 
acm sigsoft conf 
sellis ed special issue rule management processing expert database systems sigmod record sept 
segev event join optimization temporal relational databases proc 
vldb aug 
stonebraker goh potamianos rules procedures caching views database systems proc 
acm sigmod international conf 
management data 
snodgrass temporal query language tquel acm trans 
database systems 
snodgrass ed data engineering special issue temporal databases dec 
segev shoshani logical modeling temporal data proc 
acm sigmod international conf 
management data 
segev shoshani representation temporal data model relational environment th int 
conf 
statistical scientific data management june 
stockmeyer complexity decision procedures automata theory logic doctoral dissertation mit cambridge project mac technical report tr 
sistla wolfson temporal triggers active databases univ illinois chicago eecs dept tech 
report 
tuzhilin clifford temporal relational algebra basis temporal relational completeness proc 
th vldb conference 
ullman principles database knowledge base systems computer science press 
widom finkelstein set oriented production rules relational database systems proc 
acm sigmod international conf 
management data 
wolfson sengupta yemini managing communication networks monitoring databases ieee transactions software engineering vol 
sept pp 

yemini wolfson management complex distributed networked systems project synopsis proc 
st int 
conf 
parallel distributed information systems pdis dec 
