iteration abstraction sather stephan stephen omohundro david stoutamire clemens szyperski international computer science institute sather extends notion iterator powerful new way 
argue iteration abstractions belong class interfaces equal footing routines 
sather iterators derived clu iterators flexible better suited object oriented programming 
retain property iterators structured strictly bound controlling structured statement 
motivate describe construct simple examples 
compare iteration clu iterators cursors riders streams series generators coroutines blocks closures lambda expressions 
describe experiences iterators sather compiler libraries 
categories subject descriptors programming techniques object oriented programming programming languages language constructs features control structures coroutines logics meanings programs studies program constructs control primitives general terms languages design additional key words phrases general control structures iteration abstraction sather 
motivation sather object oriented language developed international computer science institute stoutamire omohundro 
clean simple syntax parameterized classes object oriented dispatch late binding multiple inheritance strong typing garbage collection 
originally derived eiffel aims achieve performance sacrificing elegance safety 
version language sather released may 
feedback users led design sather incorporated number new language constructs 
describes sather iterators form iteration abstraction 
original sather fairly conventional loop statement 
suffices basic iterative tasks felt need general construct 
sather libraries heavy cursor objects iterate contents container objects omohundro lim 
quite certain circumstances number problems described detail section 
section describes approaches riders closures streams series generators coroutines blocks 
authors addresses stephan credit suisse os ch zurich switzerland stephan ska com 
stephen omohundro nec research institute independence way princeton nj om research nj nec com 
david stoutamire international computer science institute center st suite berkeley ca icsi berkeley edu 
clemens szyperski school computing science queensland university technology gpo box brisbane qld australia szyperski qut edu au 
delta stephan language designers clu liskov guttag felt need encapsulate common operation iterating data structure 
typical loops sather loops initialize iteration variables repeatedly execute body loop updating variables way testing loop 
important examples pattern arise stepping elements container objects 
code initializing updating testing iteration variables complex error prone 
errors having initialization termination iteration errors common 
code step complex containers hash tables typically utilize detailed internal structure container causing duplication virtually code places 
observations argues making iteration operation part interface container class part code client container 
goal iterator design allow iterators programmed active style having explicitly encode control structure state required cursors iteration constructs 
sather iterator loop construct fits structured programming languages 
encapsulation iterator states decouples separate iteration processes allows nested 
name iterator initial design derived iterator construct clu language 
clu iterator routine may yield addition returning 
may called head special loop construct 
loop executed time iterator yields value 
termination iterator loop exits 
clu iterators deal simplest iteration situations stepping elements arrays containers limitations sather iterators remove iterator loop simple way step structures simultaneously clu 
way modify elements clu iterators support retrieval elements structure straightforward way add modify elements 
iterator arguments loop invariant clean way pass loop variant values iterator 
wanted sather iterators retain clean design clu iterators removing limitations 
similar clu sather iterators look routines may yield quit returning call 
routines sather equivalent methods goldberg robson member functions ellis stroustrup object oriented languages 
name routine comes sather roots eiffel meyer 
sather parlance method means routine iterator 
eiffel method arguments sather passed value 
sather iterators extend clu iterators important ways multiple iterators may invoked single loop may occur expressions loop restricted loop head 
allows stepping multiple structures simultaneously 
loop terminates iteration abstraction sather delta soon iterators terminates 
contrast clu sather provides hot iterator arguments reevaluated time control passed back iterator 
arguments may pass data iterator varies iteration 
contrast clu iterators may generate sequence values arguments allow classes define iterators modify successive elements structure consume sequence values 
sather iterator arguments hot declared keyword self hot 
rest organized follows 
section introduces sather iterator syntax gives simple examples motivation 
section describes iterators detail 
section compares iterators constructs serve similar purposes 
section describes experience iterators sather compiler libraries 

examples sather loop statement simple form loop 
iterators may called loop statements 
iterator called body executed quits yields 
yields return value returned loop execution continues routine call 
execution state iterator maintained 
call iterator transfer control statement yield 
local variables arguments retain previous values 
iterator quits yielding loop immediately broken execution continues statement follows loop 
order able distinguish visually iterator routine calls language requires iterator names exclamation mark 
alerts reader places control flow may change 
helpful iterators may occur expression loop 
trivial iterators class automatically provided iterators bool bool break 
may obtain standard forms loop functionality 
example 
defined pred bool yields pred true quits 
loop pred yield quit may obtain standard behaviour loop size delta stephan 
iterator takes single boolean argument evaluated iteration loop 
long argument evaluates true iterator yields 
example iterator yields returning value 
merely control loop 
argument evaluates false iterator quits breaks loop 
placing 
iterator loop form possible loop size note arbitrary placement iterator easy implement loops single conditional exit middle structured way called loops 
integer iterators integer class int defines number useful iterators including upto 
sather iterators routines implicit argument self denotes object routine invoked 
upto 
iterator self type int 
keep mind self implicitly argument iterator 
upto limit int int yield successive integers self including limit 
int self loop limit yield upto 
iterator place explicit initialization increment termination test previous loops 
example sum integers say loop upto useful iterator computing kind sum sum summand int int yield sum previous values summand 
int loop summand yield sum 
place explicit initialization previous loop values summed executing iteration abstraction sather delta loop sum upto example shows iterators part expressions just functions 
results yielded upto 
directly arguments sum 
note loop written loop int upto sum container iterators container classes sather libraries define iterators yield modify contained elements 
containers arrays simple containers complex implementation hash tables iterated sather compiler 
iteration construct client code appears container 
arrays variable size objects sather 
returns size current array bracketed index expressions values gamma serve access array elements 
array class arrays elements type includes iterators ind int yield indices self 
loop yield upto elt successively yield elements self 
loop yield ind set set elements successive values 
loop ind yield examples nested iterators iterator ind generates stream indices elt 
set 
index array 
nesting iterators allows formation new iterators abstracting existing ones 
set elements array array int constant value simply write loop set double elements write loop set elt 
object type copy stopping shorter loop set elt 
compute sum products elements arrays loop sum elt elt 
examples providing set 
elt 
composition iterators include sparse distributed cf 
arrays complex underlying data structures 
routines access write element separately knowledge set contiguous elements written allows delta stephan efficient implementation corresponding iterators compared single element accessor routines 
consider example block wise distributed matrix central directory pointing blocks matrices 
row column iterator matrix yields elements block consulting directory block containing elements row column 
accessing row column element wise requires directory access element leading potential bottleneck parallel implementation requiring explicit implementation suitable caching heuristics 
classes similarly define iterators part interfaces 
example hash tables able yield elements trees graphs iterators yield nodes depth breadth orders see inorder 

note simple array iterators merely convenient iterators complex data structures hidden internal representation indispensable tool reasons efficiency abstraction 

details iterator construct previous sections informally introduced iterator construct elements describe precisely 
defining key terms conclude defining construct terms 
loop statement 
control structure delimited keywords loop causing repeated execution enclosed statements 
loop termination controlled iterators called loop 
iterator method 
method name ends exclamation point 
iterator methods invoked loop statements 
addition constructs allowed routines return statements iterators may contain yield quit statements may arguments described 
iterator call 
textual call iterator loop statement 
denoted name iterator includes exclamation point followed list arguments 
iterator call bound innermost lexically enclosing loop statement 
argument 
arguments iterator methods marked keyword definition 
actual argument passed argument intended change value execution corresponding iterator call corresponding loop statement terminates 
value obtained call iterator subsequent calls 
ensure defined iteration state loop execution argument method dispatching self implicitly argument 
arguments allow implementation avoid redundant evaluations corresponding iterator arguments calling context 
hot argument 
arguments iterator methods marked keyword 
expression actual argument evaluated call 
yield statement 
yield statement denoted keyword yield may body iterator method 
execution causes control return values passed back calling loop statement resuming execution just iterator call 
quit statement 
quit statement denoted keyword quit may body iterator method 
execution causes corresponding loop iteration abstraction sather delta statement terminate immediately 
exiting body iterator method considered implicit execution quit statement 
textual iterator call maintains state execution iterator 
loop entered execution state enclosed iterator calls initialized 
time iterator call encountered execution loop arguments evaluated 
subsequent calls arguments retain earlier values expressions hot arguments re evaluated 
iterator called begins execution statement body 
yield statement executed control passed back caller current value return parameters returned 
subsequent call iterator resumes execution statement yield statement 
iterator executes quit reaches body control passes immediately enclosing loop caller 
case values returned 
interface class includes iterators equal footing routines 
routines iterators may define conditionally compiled preconditions postconditions 
preconditions checked call iterator 
postconditions checked iterator yields quits 
routines iterators may defined classes define interfaces compiler checks conformance 
iterators may called object oriented dispatch delaying particular choice iterator runtime 
allows iteration collections knowing implementing data structure compile time 
sather provides general non exception constructs 
important interaction loop statements exceptions 
loop statement bounds lifetime enclosed iterator calls termination may involve cleanup operations 
example loop exits space allocated iterator calls deallocated 
terminating action loop statement considered allowing non local exits exception raising 
reason sather protect statements similar try statements languages may contain iterator calls contain surrounding loop 
similarly yield permitted protect statement prevents creation dynamically protected regions overlap properly nesting time 

comparison approaches discussed ways sather iterators generalize clu iterators 
section compare sather iterators cursors riders streams series generators coroutines closures blocks 
generalized control structures idea generalizing iteration control structures goes back early generators ipl newell generators possibility lists conniver mcdermott sussman 
conniver includes activation records called frames class objects 
notion pattern generator defined possibility lists get value list 
special tokens possibility lists cause associated generator delta stephan invoked 
means lazily computing lists values 
generator yields new values option maintaining state quitting similar yield quit statements sather 
class frames allows generators side effects caller environment 
simulate variable arguments stream consuming iterators 
experience hairy control structures conniver lead unintelligible programs 
agree hewitt page hairy control structures possibility lists non local gotos assignments values internal variables procedures conniver 
alternative hewitt proposes lazy evaluation explicit delay pseudo function 
lazy evaluation allows effective handling multiple recursive data structures poses particularly difficult problem efficient implementations 
common lisp loop macro steele jr generalized iteration control structure 
contains iteration primitive authors imagine somewhat pl tradition built features loop clauses loop facility 
language definition explicitly states currently specified portable method users add extensions loop facility 
prevents loop macro support encapsulation data structure specific iteration procedures 
cursors riders iterators mentioned cursor objects way encapsulating iteration additional language constructs 
riders similar idea introduced oberon wirth gutknecht generalized szyperski 
idea define objects point container class may retrieve successive elements 
interfaces include routines create initialize increment test completion 
attributes cursor object maintain current state iteration 
may simple single index arrays complex traversal stack hash table recording nodes visited traversing trees graphs 
note ellis stroustrup call cursor objects iterators 
cursors quite certain circumstances quite cumbersome 
require maintaining parallel cursor object hierarchy alongside container class hierarchy 
normally required explicitly create garbage collect cursor objects 
cursors semantically confusing maintain location container indefinite period time container may change 
storage associated cursor explicit inconvenient describe nested recursive control structures 
cursors explicitly describe implementation prevent number important optimizations inner loops 
iterators avoid problems cursors part container class 
state iterators maintained duration single loop 
iterators may arbitrarily nested support recursion just routines 
iterator implementation manages storage stack heap multiple recursive iterators 
sather language doesn explicit pointers array iteration abstraction sather delta iterators compile efficient code pointer arithmetic 
streams series iterators share characteristics streams abelson 
class iterators form return value arguments yield potentially infinite stream values 
class form single argument return value accept potentially infinite stream values 
way iterators suspend transfer control yielding corresponds lazy evaluation semantics streams 
main difference iterators streams invocation iterator consume input produce output 
iterators mappings loop 
sieve eratosthenes generating successive prime numbers show power stream concept abelson pages 
conceptually simple algorithm control flow complex 
stream solution stream takes stream argument filters elements divisible element 
iterators allow implementation cf 

note divides example predicate returns true divides remainder false 
sieve int bool sieve successive primes 
int yield true loop divides yield false yield sieve primes int yield successive primes 
int loop sieve yield fig 

sieve eratosthenes iterator sieve tests stream values passed yields true value stream false multiples value recursively calls higher sieve values 
feeding sieve stream integers starting leads recursive iterator yields true prime numbers 
efficient pedagogical way implement sieve eratosthenes sather hints expressive power iterators 
delta stephan important difference streams iterators 
streams may passed half consumed state state iterator confined calling loop statement single call point loop 
possible suspend iteration loop resume internal state loop 
variant sather development university karlsruhe germany sather goos generalize iterators introducing class stream objects retain state loop termination 
common lisp incorporation series generators proposed defining iterative constructs steele jr 
constructs complex include large number built operations 
sather operations may implemented iterators encapsulated classes 
coroutines generators different approach view iterators body loop communicating sequential processes hoare tightly coupled communication channels form arguments results iterators 
preemption true parallel execution iterators may model iterators loop body coroutines wirth 
precisely iterators may thought structured coroutines 
languages coroutines call coroutines arbitrary fashion 
structured programming replaced transfer control goto statements structured loop constructs 
iterators structured coroutines respect freedom passing control 
suspending coroutine may transfer control waiting coroutine case iterators flow control structured loop statement 
iterators pass control back point call calling loop loop 
initialized loop entered signal return breaking loop 
coroutines added restriction returning caller called generators hierarchical coroutines marlin 
iterators share property 
just streams generator activation state bound single call point single loop 
generator may left half consumed state point picked 
mentioned section possible iterators 
blocks closures lambda expressions traditionally iteration abstraction supported object oriented languages providing anonymous blocks goldberg robson lambda expressions abelson closures sussman steele jr 
container classes provide methods apply block part elements 
execution block iterations controlled container class 
iterators control shared iterator calling loop 
example iterator loop body may abort iteration 
difference control apparent trying iterate synchronously multiple data structures 
consider task comparing elements trees pre order traversal 
classical fringe problem defined hewitt page 
simple solution iterators iteration abstraction sather delta shown 
class attr key private attr left right inorder yields elements order void self loop yield left inorder 
yield key loop yield right inorder 
closed inorder yields order void loop yield inorder 
yield void fringe bool returns self carry equal ordered sequence fringe elements loop closed inorder closed inorder void return void return false return true fig 

fringe problem traversing binary trees order sequence determine contain elements 
iterator inorder 
yield tree elements proper order 
general technique closing iterators iterator 
uses inorder 
yield sequence yields void quitting indicate structure reached 
routine steps elements trees simultaneously stopping determined trees equal fringes difference trees shorter fringe 
trees kept track size 
iterator necessary 
kind situation structure possible pass body routine trees execution 
cases requiring traversal multiple structures blocks closures impractical situation easily handled iterator construct 
approach clu allows single iterator loop 
closures implement generators multiple generators common loop traverse multiple structures simultaneously 
possible sather bound routines bound iterators 
cursors closures disadvantage unbounded lifetime closure state 
may compensated extensive compile time analysis explicit association iterators loops solves problem syntactically 
delta stephan summary comparisons constructs commonly iteration streams cursors built looping constructs common lisp variant complex explicitly passing loop body closure block 
main points comparing constructs sather iterators cursors harder suitable compiler optimizations passed built loop constructs general passing closures effectively support simultaneous traversal multiple data structures 
streams particular generators come closest sather iterators bound specific loop 

experience real power iterators really seen context large system classes 
section describes experience iterators freely distributed sather compiler libraries year 
sather libraries contained classes iterators extensively converting sather 
cases iterators allowed discover powerful new abstractions interacting class 
iteration bookkeeping occurs iterator definitions loop classes dramatically smaller 
iteration intensive classes vectors matrices dropped third size 
iterators bodies routines reduced concise single line code 
table number iterators loops sather compiler libraries include built iterators 
number iterators number loops percentage sather compiler written entirely sather 
table shows number iterators loops occurring version sather compiler libraries lines code 
built iterators break 

counted replaced traditional constructs languages 
majority nontrivial iterator validating importance iterators code 
percent loop clu iterators cases 
cases sather iterators eliminate need distinguished loop header allow iterators directly expressions simplifying code 
clu iterators allow hot arguments isn possible express iterators set 
loops percent iterators hot arguments expressed clu 
cursor objects language problem semantics usually defined container modified iterate 
sather iterators problem iterators libraries fail underlying suggestion anonymous referees 
iteration abstraction sather delta data structure modified 
presently way compiler detect situations 
inserting extra runtime checks problematic define conditions indicate misuse container iterators example setting flag iterating checking container modified 
parallel extension sather concurrent systems general ensure reader writer locking appropriate data structure 
solutions tedious error prone 
fortunately experience bugs arisen frequently practice may hold true novice sather programmers 
believe positive observation largely due structured nature iterators guaranteeing limited lifetime iteration state 
iterators powerful construct possible write obscure hard understand code 
sieve eratosthenes example 
novices misunderstanding iterator calls share state simply name 
example code loop elt 
elt 
prints identical columns elements self elements distributed shorter columns pitfall failure foresee code foo evaluated time set set 
terminates loop loop set foo seen misconceptions arise number individuals learning sather need explained 
sather supports higher order functions programming applicative style iterators provide cleaner solution 
iterators provide convenient lingua franca transmitting data disparate data structures having allocate space intermediate container object array linked list 

sather iterators new approach encapsulating iteration shown simple examples 
iterators eliminate common errors combining initialization progression termination abstraction need managed client code 
iterators proven useful practice extensively standard sather libraries user code 
iterators code simpler easier read error prone 
interfaces classes concise cursor classes abolished 
excited simplicity power iterators bring sather feel language designs benefit 
sather documentation compiler libraries available www icsi berkeley edu sather sather expressed reusing stream object calls 
delta stephan acknowledgments people involved sather design discussions 
ari particular suggestions improved design iterators 
jerry feldman chu lim heinz schmidt useful suggestions 
furthermore urs holzle robert careful reading providing valuable comments structure 
anonymous reviewers numerous comments led substantial improvements revised version 
abelson sussman sussman 
structure interpretation computer programs 
mit press 
ellis stroustrup 
annotated manual 
addisonwesley 
goldberg robson 
smalltalk language implementation 
addison wesley 
goos 
sather 
tech 
rep faculty computer science university karlsruhe 
hewitt 
viewing control structures patterns passing messages 
artificial intelligence 
hoare 
communicating sequential processes 
prentice hall 
liskov guttag 
abstraction specification program development 
mit press 
marlin 
coroutines programming methodology language design implementation 
springer verlag berlin 
mcdermott sussman 
conniver manual 
tech 
rep artificial intelligence memo may mit 
meyer 
object oriented software construction 
prentice hall 
feldman lim seidel 

layered extensions object oriented language efficient parallel computation 
tech 
rep tr december international computer science institute 
newell 
tech 
rep rand acm national conference boston ma 
omohundro lim 

sather language libraries 
tech 
rep tr march international computer science institute 
steele jr 
common lisp language nd ed 
digital press 
stoutamire omohundro 
sather 
tech 
rep www icsi berkeley edu sather international computer science institute 
sussman steele jr 
scheme interpreter extended lambda calculus 
tech 
rep artificial intelligence memo december mit 
szyperski 
insight object orientation operating systems volume informatik eth zurich 
verlag der zurich 
wirth 
programming modula 
springer 
wirth gutknecht 
project oberon design operating system compiler 
addison wesley 
received revised accepted 
