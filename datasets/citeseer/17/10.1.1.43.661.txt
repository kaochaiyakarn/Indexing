describing software architecture uml nord siemens corporate research princeton new jersey usa describes experience uml unified modeling language describe software architecture system 
works communicating static structure architecture elements architecture relations variability structure 
static properties readily described dynamic properties 
easily describe particular sequence activities general sequence 
addition ability show peer peer communication missing uml 
keywords software architecture uml architecture descriptions multiple views 
uml unified modeling language standard wide acceptance widely 
original purpose detailed design ability describe elements relations potentially applicable broadly 
describes experience uml describe software architecture system 
architecture descriptions wanted consistent clear notation readily accessible architects developers managers 
goal define formal architecture description language 
notation incomplete capture important aspects architecture 
start giving overview kinds information want capture software architecture description 
give example software architecture description part particular system image processing portion real time image acquisition system 
final section discusses strengths weaknesses uml describing architecture 
separate software architecture views conceptual module execution code 
separation study software archi proceedings working ifip conference software architecture 
ifip 
published kluwer academic publishers 
large systems experience designing reviewing architectures 
different views address different engineering concerns separation concerns helps architect sound decisions design trade offs 
notion kind separation unique software architecture date recognizes different architecture views focuses particular view order explore distinct characteristics distinguish bass 
approach separates architecture multiple views 
shaw focuses conceptual view shaw 
years great deal module view prieto diaz 
focuses execution view particular explores dynamic aspects system kramer 
code view explored context configuration management system building 
conceptual view describes architecture terms domain elements 
architect designs functional features system 
example common goal organize architecture functional features added removed modified 
important evolution supporting product line reuse generations product 
module view describes decomposition software organization layers 
important consideration limiting impact change external software hardware 
consideration focusing software engineers expertise order increase implementation efficiency 
execution view run time view system mapping modules run time images defining communication assigning physical resources 
resource usage performance key concerns execution view 
decisions link library shared library threads processes decisions may feed back module view require changes 
code view captures modules interfaces module view mapped source files run time images execution view mapped executable files 
partitioning files organized directories affect system increasingly important supporting multiple versions product lines 
views particular elements need described 
elements named interface attributes behavior relations described 
views configuration constrains elements defining roles play particular system 
configuration architect may want describe additional attributes behavior associated elements describe behavior configuration 
sections show uml describe views starting conceptual view code view 
explanation clearer example image acquisition system 
image acquisition system acquires set digitized images 
user controls acquisition selecting acquisition procedure set predefined procedures starting procedure adjusting acquisition 
raw data images captured hardware device camera sent image pipeline converted images 
image pipeline conversion composing raw data discrete images running standard imaging transformations improve images 
image pipeline portion system example 

conceptual architecture view basic elements conceptual view components ports interactions occur connectors roles define bound ports 
components connectors bound form configuration 
order bind port role configuration port role protocols compatible 
components decomposed components connectors 
elements associated behavior relations conceptual view summarized table 
table elements conceptual architecture view elements behavior relations component port connector role component functionality port protocol connector protocol role protocol component decomposition port role binding configuration uml diagram describes conceptual view image pipeline 
represented component ports controlling acquisition incoming raw data resulting images 
decomposed set components connectors bound form configuration 
components ports connectors stereotype class convention special symbols ports connectors leave stereotype components order diagrams easier read 
roles shown labels port connector associations 
convention association multiplicity specified assumed 
sender client server receiver conceptual configuration pipeline control 
framed output multiplicities components connectors bindings show set allowable configurations 
acquisition procedure distinct set processing steps represented component 
diagram shows general structure image pipeline acquisition procedures adhere 
stage pipeline followed subsequent stages represented 
stages connected port client server connector 
component multiplicity meaning acquisition procedure stages 
bound client server connectors association instance bound exactly client server instance 
client server instance bound port exactly bound client server instances pipeline 
similarly connectors oneto association 
bindings multiplicities conclude number client server 
stereotype effect new class modeling element introduced modeling time 
represents subclass existing modeling element form attributes relationships different intent 
permit limited graphical extension uml notation graphic icon graphic marker texture color associated stereotype uml 
source dest sender 
client server receiver elements bound legal configuration 
annotation source side show bound output stage stage 
output stage bound stages bound 
stage bound necessarily stage pipeline 
shows protocol ports follow 
adopted room notation showing incoming outgoing messages sequence diagram state diagram show legal sequences messages selic selic 
protocol incoming packet pd outgoing subscribe protocol port subscribe packet pd resource budgets attributes components connectors 
described attribute box appropriate class uml diagram table text 
conceptual view represent components ports connectors stereotyped classes 
decomposition shown nesting association bindings shown association 
uml class diagrams showing static configuration 
room protocol declarations uml sequence diagrams state diagrams showing protocols ports adhere 
uml sequence diagrams showing particular sequence interactions group components 

module architecture view module architecture view subsystems decomposed modules modules assigned layers accordance dependencies table 
configuration module view defines modules inherent relations combined particular product 
table elements module architecture view elements behavior relations module subsystem layer interface protocol module implements conceptual component subsystem decomposition module dependency table shows image pipeline conceptual elements mapped module elements 
notice ports connectors components combined module 
information shown uml class diagram mapping conceptual module elements shown explicit association 
table mapping conceptual module architecture views conceptual element subsystem module client server subsystem decomposed modules shown 
decomposition dictated modules correspondence conceptual elements decomposition 
nesting show decomposition stereotypes different type element 
uml component notation module module view modules physical modules source code 
decomposition dependencies pipeline modules derived conceptual elements associations 
shown 
part subsystem included order show dependencies subsystem 
uml notation show interface module clear modules dependent interface module module 
module module module module module module subsystem dependencies module module module module module module module layer layer module shows layers system 
dependencies modules subsystems show de layers diagram 
interface definition simple list interface methods 
information put inside class definition uml diagram 
generally prefer list separately class diagrams focus relations modules complete description modules 
module view represent modules stereotyped class subsystems layers stereotyped packages 
decomposition shown nesting association dependency uml dependency 
tables describing mapping conceptual module views 
uml package diagrams showing subsystem decomposition dependencies 
uml class diagrams showing dependencies modules 
uml package diagrams showing dependencies layers assignment modules layers 

execution architecture view execution architecture view describes modules combined particular product showing assigned run time images 
run time images communication paths bound form configuration 
table lists elements behavior relations execution view 
table elements execution architecture view elements behavior relations run time image communication path communication protocol run time image contains module binding configuration execution configuration image pipeline indicates just process multiple pipelines exist time 
pipeline process process additional pipeline stages 
stereotype uml class run time images 
stereotyped name platform element case process shared data 
originally uml active object notation process prefer stereotyped class 
reason want classes objects configuration diagram 
second reason active objects thread control passive objects run invoked uml 
distinction wanted describe wanted characterize run time image platform element process thread dynamic link library convey control flow information elements 
process module module ipc module process module ipc ipc process shared data module module module shared memory shared memory execution configuration image pipeline module diagram uses nesting show modules associated runtime image 
modules multiplicity assumed explicitly shown 
configuration multiple modules process processes 
multiple modules configuration reside process 
run time images multiplicity communication paths labeled show communication mechanisms 
implications conceptual configuration multiplicities run time images communication paths modules show allowable configurations single diagram 
uml class diagrams show dynamic behavior different diagrams show dynamic aspects configurations 
shows configuration pipeline imaging procedure 
processes implement pipeline created dynamically imaging procedure requested destroyed procedure completed 
uml sequence diagram shows pipeline created start procedure 
execution view represent run time images stereotyped classes communication paths associations 
module containment shown nesting association 
uml class diagrams showing static configuration 
uml sequence diagrams showing dynamic behavior configuration transition configurations 
uml state diagrams sequence diagrams showing protocol process module communication path 
image pipeline creation 
code architecture view code architecture view contains files directories module view configuration 
relations defined code view apply products just particular product 
code view elements relations listed table 
table elements code architecture view elements relations source intermediate executable directory module create create configure source implements module source includes source intermediate compiled run time image executable implements run time image executable linked intermediate modules interfaces module view partitioned source files particular programming language 
table shows mapping module interfaces public interfaces mapped file created additional file private interface module 
source files organized directories shown 
uml component notation represent files package notation directories 
files directories stereotypes clarify meaning 
uml component symbol source code components binary code components executable components uml 
believe create intention symbol closest notion file source intermediate executable 
table source files module module interface source file cpp shows include dependencies source files 
uml dependency notation relationships stereotype include diagram contains type dependency 
source files generate dependency example preprocessor uses source file generate 
source cpp source cpp source source source directory directory include dependencies source files source source source cpp source source directory run time images execution view relationship elements code view case executable files 
table shows run time images image pipeline mapped executable files 
mapping run time image contained dynamic link libraries libraries separate executable file 
table mapping run time image executable file run time image executable file exe exe executable files organized directories 
relationship executable files source files intermediate files 
executable file link dependencies object files links object file compile dependencies source files compiled 
dependencies shown 
directory executable exe directory object directory link compile directory directory directory executable exe link object object link link directory object directory executable compile compile compile directory source directory directory object directory directory directory object dependencies source object executable files directory code view represent source object executable files stereotyped classes directories stereotyped packages 
include compile link relationships shown stereotyped dependencies 
tables describe mapping elements module execution views elements code view 
uml component diagrams showing dependencies source intermediate executable files 

discussion table summarizes elements architecture views corresponding uml metamodel classes stereotype names 
relations architecture description elements uml associations dependencies 
generally create separate diagram kind relation combine execution configuration diagram 
table summary architecture description elements element uml metamodel class stereotype name component class component port class port connector class connector role label association port role protocol class protocol module class module subsystem package subsystem layer package layer run time image class process shared data thread communication path association source component source intermediate component object executable component executable directory package directory uml class object package component diagrams elements relations including interfaces attributes diagrams 
sequence diagrams state diagrams describe behavior 
configuration diagrams conceptual execution views uml class object diagrams added conventions help define semantics improve readability diagrams 
convention nesting indicate decomposition 
structure easier see layout difficult complex structures 
convention show recursive indefinite nesting easily described diagram depicts decomposition labeled association line objects 
semantic convention configuration diagram describes set possible configurations single point time 
systems generally defined modes start shut operational diagnosis recovery modes different configuration different diagram 
modes example operational mode configuration changes time case pipelines created destroyed acquisition procedure 
dynamic behavior described separately 
sequence diagram works describe start shut behavior 
important concern uml describe software architecture notation wide range semantics 
basic diagram uml class object diagram show aspects architecture 
stereotypes special symbols minimize confusion different views 
traditional uml design implementation classes system 
concerned notation describe software architecture run risk blurring distinction architecture implementation 
reason consistently particular conventions stereotypes special symbols architecture diagrams 
summary uml deficient describing correspondences graphical notation cumbersome straightforward mappings correspondence elements different views 
information efficiently described table table 
protocols ability show peer peer communication missing uml 
room describe protocols 
ports components nesting show relationship ports components visually somewhat misleading 
prefer notation similar notation interfaces module 
dynamic aspects structure general sequence activities uml worked describing static structure architecture variability conceptual configuration describes structure set pipelines 
particular sequence activities start behavior image pipeline 

bass clements kazman 
software architecture practice 
addison wesley massachusetts 
eriksson 
uml toolkit 
john wiley sons london 
fowler scott 
uml distilled 
applying standard object modeling language 
addison wesley massachusetts 
nord 
appear applied software architecture 
addison wesley massachusetts 
kramer magee 
evolving philosophers problem dynamic change management 
acm transactions software engineering 

view model architecture ieee software 
prieto diaz neighbors 
module interconnection languages 
journal systems software 

polylith software bus 
acm transactions programming languages systems 
selic ward 
real time object oriented modeling 
john wiley sons new york 
selic rumbaugh 
uml modeling complex real time systems 
www com uml uml html 
shaw garlan 
software architecture perspectives emerging discipline 
prentice hall 
nord 
software architecture industrial applications proceedings th international conference software engineering seattle wa 
uml uml notation guide version 
www rational com uml 
