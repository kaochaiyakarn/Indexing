synchronous asynchronous group communication long version cristian computer science engineering university california san diego cs ucsd edu distributed systems high service availability achieved letting group servers replicate service state servers fail surviving ones know service state continue provide service 
group communication services membership atomic broadcast proposed solve problem maintaining server state replica consistency 
group membership achieves agreement history server groups provide service time atomic broadcast achieves agreement history state updates performed group 
highly available systems support hard real time soft real time services interest understand synchronous hard real time asynchronous soft real time group communication services integrated 
contribute goal proposing common framework describing properties synchronous asynchronous group communication services comparing properties services provide simplify task replicated programming 
distributed systems high service availability achieved replicating service state multiple server processes 
server fails surviving ones continue provide service know current state 
group communication services membership atomic broadcast simplify maintenance state replica consistency despite random communication delays failures recoveries 
membership achieves agreement server groups provide service time atomic broadcast achieves agreement history state updates performed groups 
highly available systems provide hard soft real time application services interest understand synchronous hard real time asynchronous invited ieee workshop fault tolerant parallel distributed systems april honolulu hawaii 
partially supported ibm air force office scientific research sun microsystems 
soft real time group communication services integrated 
attempts contribute goal proposing common framework describing properties synchronous asynchronous group communication services comparing properties synchronous asynchronous group communication provide simplify replicated programming 
reflects practical experience design synchronous asynchronous group communication services complex system air traffic control advanced automation system 
simplicity consider unique application service implemented servers replicated fixed set processors servers processor form team servers 
correspondence servers processors allows ignore distinction server groups processor groups issues related multiplexing server level broadcasts groups top processor level broadcasts groups 
asynchronous system model team processors share storage 
communicate exchanging messages measuring passage time 
processors exchange messages datagram communication service 
messages get lost communication delays unbounded messages arrive destination known timeout delay constant 
datagram communication omission performance failure semantics 
processors access stable storage hardware clocks 
clocks measure time known accuracy running linear envelope real time 
servers scheduled run processors response trigger events message arrivals timeouts 
scheduling delays unbounded actual scheduling delays shorter known constant scheduling delays exceed servers suffer performance failures :10.1.1.54.9773
processors servers self checking mechanisms produce functionally erroneous outputs 
servers crash performance failure semantics 
interested highly available applications assume crashed servers eventually restart 
lower case letters denote processors servers run 
processor names totally ordered 
previously introduced bounds processor processor communication scheduling delays determine higher level worst case server server timeout delay ffi call distributed system satisfies hypotheses processors servers writing versions aas system installed great britain taiwan scheduled deployed january 
discussion decide means order achieve certain failure semantics interested reader referred section choosing failure semantics 
communications timed asynchronous system existing distributed systems timed asynchronous 
previously called systems simply asynchronous opposed synchronous systems investigated 
created confusion authors adjective asynchronous meaning 
difference comes fact services interest timed investigated time free 
introducing time bounds processor communication service specifications timed prescribe state transitions outputs occur response trigger events message arrivals timeouts real time intervals expected occur 
contrast specifications considered time free specify state input state output imposing constraint real time takes state transition output occur 
time free processor definition correct take arbitrary amount time months years react actual input 
weak definition correctness impossible processor decide processor correct crashed just slow 
consequence weak definition correctness impossibility implementing fundamental fault tolerant services consensus membership time free asynchronous systems 
services implementable timed asynchronous systems certain stability conditions hold 
practical systems required fault tolerant naturally timed timeouts existing distributed systems timed asynchronous 
examines timed asynchronous systems refer simply asynchronous text 
tuned production asynchronous systems allow timely communication time 
due congestion adverse phenomena processors may temporarily disconnected 
say processors connected time interval mean correct non crashed timely message sent ffi delivered ffi time units 
say disconnected mean message sent delivered crashed 
processors partially connected connected disconnected 
example transient network overload causes messages lost late partially connected 
communication processors modes connected disconnected partially connected 
formal definition timed asynchronous system model see 
true services encountered practice explicitly defined promises true services timed higher level service depends worst case human user fixes timeout delay deciding failure 
introduced allow external observer predict happens messages sent allow evaluate communication mode certain instant evaluation impossible processes predict 
stochastic methods may predict probability communication processors certain mode certain time intervals interest 
methods allow predict probability progress time intervals 
say asynchronous system stable mean processor fails restarts pairs processors connected disconnected connected relation processors transitive 
low failure rates achieved current processor communication technologies tuned asynchronous systems alternate long stability periods comparatively short instability intervals 
synchronous system model asynchronous systems characterized communication uncertainty server tries communicate times distinguish scenarios crashed slow messages lost slow messages lost slow may correct may receive messages synchronous systems real time diffusion communication correct processors certain 
processor diffuses message processor sending message copies parallel paths implementability real time diffusion service depends adding stronger assumptions asynchronous system model discussed 
communication delays smaller ffi scheduling delays processes implement diffusion broadcast smaller number communication components processors links faulty diffusion bounded known constant network possesses redundant paths processors receives copy message diffused despite faulty components 
rate diffusions initiated limited flow control methods rate smaller rate processors servers correctly receive process diffusion messages 
methods implementing real time diffusion point point broadcast networks discussed shown assumptions message diffused received processed computable network delay time constant depends network topology ffi :10.1.1.54.9773
say communication network diffusion synchronous simply synchronous ensures diffusion initiated correct processor reaches correct processors time units 
synchronous network enables processor clocks synchronized known maxi mum deviation ffl 
highlight commonalities synchronous asynchronous group communication protocols distinguish real time synchronized clock time 
important remember synchronous context section time means clock time asynchronous context section time means real time specified :10.1.1.31.5990:10.1.1.54.9773
diffusion clock synchronization enable implementation synchronous reliable broadcast service constant depending ffl ensures properties processor starts broadcasting message local time local times correct processors deliver delivers atomicity correct correct processors deliver termination messages broadcast team members delivered delivered integrity :10.1.1.54.9773
processor processor reliable broadcast defines new worst case bound server server broadcasts delta adds broadcast requirements order requirement messages delivered correct processors delivered order obtains synchronous atomic broadcast service 
protocols synchronous reliable atomic broadcast similar assume termination time delta 
simplicity assume messages available delivery broadcast service consumed instantaneously service users message scheduled delivery broadcast user time delta applied delta delta assumption allows simplify description group communication ignoring delays added process structuring rigorous analysis takes account delays message delivery deadlines actual message delivery times interested reader referred 
synchronous group communication motivate requirements synchronous membership group broadcast informally making generic service team introduced earlier 
give detailed properties characterize services 
motivating membership group broadcast requirements service exports queries side effects updates change service state 
updates assumed commutative 
service assumed deterministic behavior function initial state updates seen implementation point view approximated membership reliable atomic broadcast services implemented process team processor 
far 
moment current state replicated implementation defined group correct servers interpret requests service specific state resulting applying updates issued far considering unique service team refer brevity correct servers servers group members correctly running team members processes requests requests updates updates states states 
simplicity assume total system failures occur 
synchronous system correct processes connected maximize service availability membership service force correct processes date state replicas members current server group 
maximizes availability leads greatest potential load distribution servers 
example fp tg membership current server group client names start alphabet letters responsible replying service requests clients letter range handle ranges respectively 
requests queries reduces processing substantially query handled just server 
maintain consistency state update applied servers server send requesting client 
simple load distribution policy assumes fact group members agree group membership 
requests processed processed times 
correct load re distribution despite failures joins obtained achieving stronger agreement unique order failures joins occur 
see consider policy load re distribution server fails load re distributed surviving servers evenly possible 
example response failure load distribution new group surviving servers fq tg 
failure result new group fq tg load 
failure followed failure course result different history surviving groups different final load re distribution 
observe history surviving groups fq tg fq tg observe history fp tg fq tg handle requests clients range requests clients names start remain unhandled 
similar example motivate need agree order joins 
earlier proposed synchronous membership service achieve agreement history groups exist system time membership group :10.1.1.31.5990
obviously allow agreement membership differences exist successive groups achieve agreement unique history team member failures joins 
joining group different members called follows members brevity generally receive state update requests different unpredictable times 
update commutativity assumed maintain replica consistency members need agree unique order apply updates 
earlier proposed role synchronous atomic broadcast service achieve agreement unique history updates :10.1.1.54.9773
maintain consistency members agree service state join slight abuse language refer initial group state despite fact general different initial service state group exist initial state initial service state initial state groups defined inductively follows 
group succeeds group initial state final state final state result applying updates accepted members initial state members join know final state initial state newly started server joins having joined learn initial group state getting member member convenient think state transfer logically equivalent learning sequence updates accepted groups state receives result applying 
synchronous membership properties new groups team members created dynamically response server failure team member start events simplicity voluntary server departures involuntary failures 
time server joined group 
times team member may joined group example time starts moment joins group assume process initiates group join request time starts 
groups exist time uniquely identified group identifier drawn totally ordered set group identifiers essential distinguishing groups membership exist different times history system 
membership group definition subset team membership service specified defining state variables safety timeliness properties satisfies 
team member non crashed maintains membership state variables joined type boolean group type mem type subset meaning joined true joined group false joined true group yields identifier group joined mem yields local view membership group 
values state variables depend location domain point time examined time domain 
simplify presentation leave time domain variables presentation require members group agree local view membership write mem mean mem group member joined say group successor group exists member group joins leaving leaves group soon longer joined 
denote succ successor group relative equivalently succ say predecessor group relative write pred 
succ say successively joins groups 
membership interface consists join request upcalls 
process calls join request starting 
upcall client supplied state procedure asks value client local state transfer necessary newly started processes synchronous join protocol :10.1.1.31.5990
process starts responds state upcall supplying initial service state upcall new group client supplied procedure notifies client case server just joined new group upcall parameters supplied membership service mem initial state 
synchronous membership service required satisfy safety timeliness properties agreement group membership 
joined group agree membership joined joined group group mem mem 
recognition 
process joins groups recognized member joined mem 
monotonically increasing group identifiers 
successive groups monotonically increasing group identifiers succ 
addition justification 
joins group succ time contains new member mem mem started 
deletion justification 
joins group succ member predecessor group longer mem mem failed 
time value variables evaluated clear context example property understood joined joined group group mem mem property understood joined mem 
writing service properties notation represents service name superscript designates property type safety timeliness subscript differentiates different properties 
agreement linear history groups 
members common group stay correct join successor groups succ succ respectively successor groups 
bounded failure detection 
exists time constant member fails member correct joins new group mem 
bounded join delay 
exists time constant starts stays correct joins group joined processes correct 
group stability 
process failures joins occur server leaves group max 
synchronous membership protocols depend synchronous reliable broadcast specified earlier satisfy safety timeliness properties :10.1.1.31.5990
protocols local clock times group identifiers ensure lockstep progress sense members joining new group join local time delta 
values constants protocol example delta delta respectively period broadcasting am alive messages :10.1.1.31.5990
ensure servers confused close failures joins sufficient delay server crash restart max 
servers join common group agree unique subsequent history groups long stay correct 
group agree membership agree unique order failures joins occur timeliness properties bound time needed servers learn failures joins 
hand safety properties require new groups created response failures joins implies created groups maximal 
synchronous membership provides accurate date information processes correct 
particular service implement frequently needed service highly available leadership service :10.1.1.31.5990
synchronous leadership service required ensure existence leader point real time existence real time constant current leader fails real time new leader exists implement service sufficient process suffers performance failure real time stops communicating past real time delta gamma ffl group created membership service member smallest identifier play role leader 
leader election rules ensure delta ffl 
memberships successive groups contains deletions additions ordered arbitrary convention example total order team member names 
performance failures detected transformed crashes requests re joining new group suggested letting server process event scheduled processed local deadline local clock value awaken process synchronous group broadcast properties synchronous group broadcast service implemented members group created membership protocol satisfying previous specification add atomic broadcast protocols restriction update delivered member applied local state replica sender member resulting group atomic broadcast service interface :10.1.1.31.5990
call broadcast initiates broadcast calling server joined group signals exception 
call update notifies broadcast service user broadcast member current group 
synchronous group atomic broadcast service required satisfy safety timeliness properties delta time constant introduced section atomicity 
member broadcasts update time applied delta members correct delta applied member correct delta 
order 
team members applied updates applied applied 
causality 
depends causally applied correct team member applied team members 
termination 
correct member broadcasts time applied delta members correct delta 
integrity 
updates broadcast team member joined group applied team members 
update applied 
ig agreement initial group states 
starting process joins group 
member previously joined pred copy initial state set copy initial state reflect updates applied time joins copy initial state set 
ud updates precede departures 
member broadcasts fails surviving member applies learning failure 
ju updates follow joins 
member applies update broadcast team member members group learned join apply 
synchronous agreement update history 
correct servers joined group time histories updates applied respectively 

properties imply global synchronous group communication property mb agreement failures joins updates 
team members correct local time join group local time join group see sequence join failure update events 
easy understand property substantially simplifies programming replicated applications see example 
applications agree initial state undergo deterministic state transitions response upcalls new group update routines total order joins failures updates observed correct team members ensures consistency states point synchronized time 
asynchronous group communication synchronous group communication simplifies replicated programming considerably replica accurate date knowledge system state 
comes price need ensure hypotheses hold run time 
hypotheses false properties mentioned previously may violated 
asynchronous group communication services designed goals similar synchronous goals discussed earlier agree linear history server groups group agree initial state linear history updates successive groups ensure members correctly inherit replicated state maintained members communication uncertainty introduces number complications 
processes distinguish process communication failures achieve agreement linear history groups impose restriction kind groups contribute history 
example restrict groups contribute history majority groups group majority group members form numeric majority team members jp restriction fact order groups history line achieve ensure relying fact successive majority groups member common 
second possible design asynchronous protocols safety properties similar synchronous protocols timeliness properties satisfied asynchronous protocols weaker delays processes learn new updates joins failures bounded certain stability conditions hold 
stability condition considered system stability defined section 
weaker stability conditions majority stability delta stability investigated 
third delays unbounded asynchronous systems ensuring agreement initial group states requires synchronous case 
earlier explored suite increasingly strong asynchronous membership specifications 
protocols described generate minority majority groups expose groups membership service users restrict groups visible users majority groups 
round second round partition detection protocols successor relation groups seen membership service users branches joins groups split merge 
protocols construct linear history groups 
third round majority protocol protocol suite achieve agreement linear history completed majority groups group termed completed joined members 
successor relation majority groups short lived branches incomplete majority groups main linear branch completed majority groups 
round protocol achieves agreement linear history majority groups 
protocol allows branches history 
membership protocols allow state updates occur minority majority groups achieve group agreement state views held team members joined different groups exist time diverge 
round partition detection protocol enables team members detect potential divergences states merging groups 
potential conflicts detected methods automatically merge group states example updates commutative update replicated variable importance 
practical applications automatic conflict resolution feasible price generally paid allowing updates minority groups need manual conflict resolution 
updates allowed occur completed majority groups created round majority expensive round protocol achieve majority strict agreement unique history updates 
majority agreement ensures team members currently joined completed majority group agree unique history updates correct team members joined group divergent views history updates 
applications tolerate replica state divergence 
require stronger strict agreement 
strict agreement guarantees correct team members agree linear history updates ensuring time team member sees prefix issues related achieving partial group majority agreement update histories discussed 
article limit discuss strict agreement asynchronous agreement resembles synchronous agreement earlier 
agreeing linear history completed majority groups synchronous case groups created membership service uniquely identified group identifier drawn totally ordered set requirements universally quantified group minority majority group 
restrict attention majority groups mention explicitly 
state membership service defined replicated variables joined group mem meanings 
asynchronous membership service achieves agreement unique history completed majority groups satisfy safety properties introduced earlier 
timeliness properties satisfied weaker synchronous case conditionally bounded partition detection delay 
time constant team members disconnected system stable stays correct joined group mem 
conditionally bounded join delay 
time constant team members connected system stable joined common group constants provided round majority protocol ffi max jp ffi period probing network connectivity 
protocol uses rounds messages create new group group creator proposes team members second accept join third creator defines membership mem consisting accepting team members lets members effectively join addition properties mentioned membership protocol satisfies safety properties conditional stability groups 
system stable server leaves group max 
justification additions 
process joins new member predecessor group pred joined mem disconnected time left predecessor group pred 
justification deletions 
joins longer member predecessor group pred joined mem connected time left predecessor group pred 
join synchronization 
joins group member joined group 
predecessor notification 
joins majority group membership service notifies majority predecessor group pred pred highest majority group joined member 
agreement linear history completed majority groups 
completed majority groups 
ancestor ancestor group pred ancestor pred 
property properties ensure processes successively joined completed majority groups agree unique official history completed majority groups unique history joins failures seen members groups 
property allows member newly created majority group know correct view official history checking official history branch 
agreement unique order failures joins important servers joined completed groups official history branch act membership changes 
properties ensure incomplete groups system remains stable max time units unconditional timeliness property bounds time process joined incomplete group independently system stable bounded detection delay 
constant time joins group mem stays correct time joins learns leaves 
properties useful implementing asynchronous highly available leadership service satisfying requirements leader point real time exists time constant system stable majority processes connected leader 
shown implement service adding round majority membership protocol leader designation rule majority group process smallest identifier leader time units joins yields value works properties ensure leader existed previously completed majority group left joined knows new leader 
assumes process suffers performance failure real time detects stops communicating past real time 
asynchronous membership properties somewhat harder understand synchronous ones asynchronous membership accurate date 
bounds time needed learn joins failures groups created team member joins failures occur periods system instability 
groups created asynchronous membership service reflect connected correct physical process reality 
agreeing linear history updates strict agreement broadcast protocol easiest understand round train protocol 
protocol majority group train updates circulates members fixed cyclic order 
member wants broadcast update waits train appends update train lets train move twice update train 
update transported train applied member knows stable sees second time update seen time train unstable 
system stable jp gamma ffi time units sufficient group members apply update 
update broadcast rules ensure members agree unique history updates reflects order updates board train member appends update local view history knows majority team members know ensures system instability forces separate majority group new majority group member knows ensure appended history completed majority group joined members time assume system stability 
agree initial state train protocol keeps local states consistent time applies prefix history updates train 
meaning prefix defined follows 
local history updates applied group understood total mapping prefix subset kg natural numbers set possible updates kg gamma 
say local history updates applied prefix local history updates applied denoted oe domain dom included equal domain dom ordinal dom histories agree oe dom dom dom 
failures recoveries result creation process new completed majority group final local states members leave general synchronous case 
ensure agreement initial state proceed follows 
round proposal messages new group piggy backs request processes previously joined send state left fragment history unstable updates seen applied receiving states unstable history extensions piggy backed second round accept membership messages computes initial state applying state received extension 
initial state sent members piggy backed third round membership join messages 
initial group state computation protocol ensures members agree initial state state computed sent members 
ensures strict agreement update applied member longer seen member definition majority groups nonempty intersections applied initial state part history applied updates members 
addition asynchronous membership properties enumerated earlier round majority membership round train protocols satisfy broadcast properties ud ju earlier synchronous case 
ensure ud server majority group initial state learns mem trains stamped current group id trains group id accepted member 
property ju ensured allowing majority group member start broadcast attempt learns group membership 
train protocol satisfies properties time constant defined earlier integrity 
updates broadcast servers joined majority groups applied team members 
conditional termination 
member broadcasts system stable gamma max applied members 
ig agreement initial group state 
join completed majority group 
member joined preceding completed majority group copy initial state set copy initial state reflect updates applied member past completed majority group copy initial state set 
strict agreement update history 
correct team members histories updates applied real time respectively 
prefix prefix 
progress assumption process eventually connected majority correct processes sufficiently long time system stable time strict agreement protocol ensures atomicity property sb atomicity 
majority group member broadcasts applied team members applied team member 
progress assumption believe quite reasonable practice tuned asynchronous system similar majority stability assumption 
asynchronous group communication properties difficult understand synchronous ones substantially contribute simplifying distributed programming see example hypotheses render communication certain guaranteed true run time 
discussion synchronous asynchronous programming different system design philosophies assuming communication certain second assuming 
communication certainty implies strong easy understand safety timeliness properties simplify replicated programming substantially 
synchronous programming natural hard real time systems guarantees bounded reaction time events update arrivals failures joins 
price real time scheduling hardware redundancy techniques need probability violating hypotheses run time sufficiently small equivalently coverage assumptions sufficiently high 
asynchronous programming communication uncertainty fact umbrella programming paradigms differ underlying system models 
examples models time free model time free model augmented various failure detectors timed model considered implicitly named 
believe implemented asynchronous group communication systems implicitly variants timed asynchronous system model 
model assume distribution communication delays correct protocol satisfies safety invariants guaranteed progress underlying system satisfies certain stability conditions 
achieves clean separation logical correctness properties hold stochastic properties predict probability stability conditions true run time 
knowledge delay distributions needed estimating probability stability conditions true 
asynchronous programming natural soft real time systems guarantee bounded responses certain probability 
emphasized similarities synchronous asynchronous programming discussing strict agreement kind asynchronous agreement closest synchronous agreement 
reality field asynchronous group communication strict agreement extreme replicas agree group agreement replicas managed members different parallel groups disagree 
general stronger agreement achieved asynchronous protocol easier protocol understand 
price higher message time complexity 
conversely weaker agreement provided asynchronous protocol difficult understanding usage 
protocols achieve weak forms agreement group agreement called disconnected partitionable operation may require human intervention solve conflicts created diverging replicas 
group agreement protocols compensate user providing lower message time complexity higher update availability 
tradeoffs possible synchronous asynchronous programming various possible asynchronous agreement semantics understood 
needed different programming paradigms understandable unified framework 
intended contribution goal 
acknowledgment david powell suggesting adjective timed timed asynchronous system model inviting ieee workshop fault tolerant parallel distributed systems april honolulu hawaii 
research partially sponsored ibm air force office scientific research 
birman schiper stephenson 
lightweight causal atomic group multicast 
acm transactions computer systems aug 
carr 
tandem global update protocol 
tandem systems review jun 
chandra hadzilacos toueg charron bost 
impossibility group membership 
technical report computer science department cornell university ithaca new york october 
chandra hadzilacos toueg 
weakest failure detector solving consensus 
proceedings th acm symposium principles distributed computing pages aug 
chang maxemchuk 
reliable broadcast protocols 
acm transactions computer systems aug 
cristian 
probabilistic clock synchronization 
distributed computing 
early version ibm research report san jose rj 
cristian 
synchronous atomic broadcast redundant broadcast channels 
journal real time systems 
early version ibm research report san jose rj 
cristian 
asynchronous atomic broadcast 
ibm technical disclosure bulletin feb 
ieee workshop management replicated data houston tx nov 
cristian :10.1.1.31.5990
reaching agreement processor group membership synchronous distributed systems 
distributed computing 
early version ftcs kyoto 
cristian 
understanding fault tolerant distributed systems 
communications acm feb 
cristian 
automatic reconfiguration presence failures 
software engineering journal pages mar 
cristian strong dolev :10.1.1.54.9773
atomic broadcast simple message diffusion byzantine agreement 
information computation april 
early version ftcs june 
cristian 
fault tolerance advanced automation system 
proceedings twentieth symposium fault tolerant computing pages newcastle tyne uk jun 
cristian fetzer 
timed asynchronous systems formal model 
technical report cse ucsd 
available anonymous ftp cs ucsd edu pub team ps cristian mishra 
automatic service availability management asynchronous distributed systems 
proceedings second international workshop configurable distributed systems pittsburgh pa mar 
cristian schmuck 
agreeing processor group membership distributed systems 
technical report cse ucsd 
available anonymous ftp cs ucsd edu pub team ps macedo shrivastava 
newtop fault tolerant group communication protocol 
proceedings th international conference distributed systems vancouver canada may 
fetzer cristian 
fail awareness timed asynchronous systems 
technical report cse ucsd 
available anonymous ftp cs ucsd edu pub team ps fetzer cristian 
possibility consensus asynchronous systems 
pacific rim international symposium fault tolerant systems newport beach ca dec 
fischer lynch paterson 
impossibility distributed consensus faulty process 
journal acm apr 
hadzilacos toueg 
fault tolerant broadcasts related problems 
mullender editor distributed systems pages 
addison wesley 
jahanian rajkumar 
processor group membership protocols specification design implementation 
proc 
th symposium reliable distributed systems oct 
kaashoek tanenbaum 
group communication amoeba distributed system 
proc 
th int 
conf 
distributed computing systems pages may 
lamport 
time clocks ordering events distributed system 
communications acm jul 
malki amir dolev kramer 
transis approach high availability cluster communication 
technical report cs computer science department hebrew university jerusalem israel 
mishra peterson schlichting 
communication substrate fault tolerant distributed programs 
distributed systems engineering journal 
moser melliar smith agarwal 
totem fault tolerant multicast group communication system 
communications acm issue 
ping 
formal specification compositional verification atomic broadcast protocol 
real time systems 
powell 
failure mode assumptions assumption coverage 
proc symp 
fault tolerant computing pages boston ma jun 
satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee transactions computers apr 
schiper raynal 
group communication transactions distributed systems 
communications acm issue 
strong skeen cristian 
handshake protocols 
proceedings seventh international conference distributed computing systems pages berlin sep 
van renesse birman hickey 
design performance horus lightweight group communication system 
tr cornell univ dept computer science aug 
appendix comparison group communication properties properties synchronous asynchronous membership synchronous membership asynchronous majority membership agreement group membership joined group agree membership joined joined group group mem mem 
recognition joined mem 
monotonically increasing group identifiers succ 
addition justification joins succ mem mem started 
addition justification joins succ mem mem mem disconnected time left pred 
deletion justification joins succ mem mem failed 
deletion justification joins succ mem mem mem connected time left pred 
agreement linear history groups initially joined stay correct join succ succ respectively 
agreement linear history completed majority groups completed majority groups 
ancestor 
join synchronization process joins group member joined group predecessor notification joins group membership service notifies majority predecessor group pred 
bounded failure detection time constant member fails member correct joins new group mem 
conditionally bounded partition detection disconnected system stable correct joined group mem 
bounded join delay time constant starts stays correct joins group joined processes correct conditionally bounded join delay connected system stable joined common group bounded inconsistency detection time joins group mem time joins leaves 
group stability process failures joins occur server leaves group max 
conditional group stability system stable server leaves group max 
properties synchronous asynchronous atomic broadcast synchronous broadcast strict agreement asynchronous broadcast atomicity member broadcasts members correct delta apply delta applied member correct delta 
atomicity member broadcasts applied team members applied team member 
order team members applied updates applied applied causality depends causally applied correct team member applied team members 
integrity updates broadcast servers joined groups applied team members 
integrity updates broadcast servers joined majority groups applied team members 
termination update broadcast correct member applied members correct delta 
conditional termination member broadcasts system stable gamma max applied members ig agreement initial group state join starting 
member previously joined pred copy initial state set copy initial state reflect updates applied time joins copy initial state set ig agreement initial group state join completed majority group 
member joined preceeding completed majority group copy initial state set copy initial state reflect updates applied member past completed majority group copy initial state set ud updates precede departures member broadcasts fails surviving member applies learning failure 
ju updates follow joins member applies update broadcast members learned join applying synchronous agreement update history servers joined group histories updates applied local time respectively 

strict agreement update history correct team members histories updates applied real time respectively 
prefix prefix 
