infinite objects type theory thierry coquand programming methodology group 
department computer sciences 
chalmers university technology university goteborg 
goteborg sweden mail coquand cs chalmers se 
show infinite objects constructively understood consideration partial elements greatest explicit consideration proof objects 
proof system explanations 
analysis proof expressions structure program expressions pure functional lazy language variable constructor application abstraction case expressions local expressions 
usual explanation infinite objects relies greatest fixed points monotone operators existence justified impredicative proof tarski fixed point theorem 
proof theory infinite objects called induction principle originally due david park explained name instance reflects explanation 
constructively rely impredicative methods somewhat unsatisfactory see instance discussion tentative attempt direct understanding infinite objects 
interestingly explicit consideration proof objects plays essential role approach suggests alternative reasoning system 
particular notion constructors rules keeps fundamental importance proof systems founded objects appears derived notion proof systems induction notion secondary notion destructors elimination rules 
consequence strong normalisation property hold case closed term reduces canonical form 
briefly describe approach follows 
inductive predicate relation defined rules 
proofs programs principle represent constructors functional language dependent types proof represented functional expression 
research done esprit basic research action types proofs programs 
paid chalmers university goteborg 
programming language define function recursion corresponds proof result want prove recursively 
considered valid proof general satisfy conditions order correct 
describe simple syntactical check ensures correctness believe leads natural style proofs infinite lazy objects 
important application mind mechanisation reasoning programs processes analyse concrete examples literature 
illustrate increasingly recognized importance infinite proofs programming language semantics hope show addition infinite objects interesting extension type theory 
particular represent notion processes type theory 
general presentation type theory founded objects recall briefly basic notions type theory founded objects important extension infinite objects 
word expressions terms designing syntactical representations objects 
books contain detailed explanations describes addition case expressions pattern matching :10.1.1.39.3778
definitions general terms explicit details special instance guarded induction principle 
computation tree semantics inductive set defined constructors 
closed term type thought founded tree built constructors 
identify sets propositions 
constructors interpreted rules closed proof proposition founded proof tree built rules 
terms purely built constructors needs consider noncanonical expressions 
addition expressions done way closed term closed set reduced canonical form term form constructor associate natural way term tree built constructors require tree founded 
tree called computation tree term 
component closed term closed term type appears computation tree 
defines order relation closed terms called component ordering 
essential fact component ordering founded 
notions traced back brouwer idea fully analysed form proof 
notations follow 
examples set integers defined constructors closed element type finite object form consider type constructors nil closed element thought founded tree built constructors nil instance nil term components instances nil nil requirement able think closed elements tree definite branching may infinite imposes strong restriction type constructors 
set constructor type type condition strict positivity type constructors ensure think elements trees built constructors 
noncanonical constants give general way adding new noncanonical constant 
additions possible stages associate founded proof tree closed object 
new constant type xn definition xn expression built previously defined constants case expressions 
definition may recursive semantics term founded tree ensure recursive calls founded justify way 
notice simple syntactical check ensures exists lexicographic ordering arguments recursive calls founded lexicographic extension component ordering 
examples ackerman function defined equation follows schema definition recursive calls smaller lexicographic ordering 
add noncanonical constant 
soundness noticed follow semantics founded trees ensure closed term type defined set constructor 
definition canonical element type element reduces canonical form 
simple important look set theory proof system 
expresses form consistency proof system 
long add new rules justified semantics term wellfounded trees sure consistency rules 
infinite objects analogy proofs processes tempting think object type process possible behaviours emit integer form express needs integer input form show inert form nil reading computation tree element behaviour tree process associated 
reading restriction founded objects strong 
type defined mean consider processes eventually inert 
forbids instance process interactively asks integer outputs successor 
quite natural consider lazy elements thought arbitrary necessarily founded trees built constructors 
particular lazy term eventually reduce constructor form lazy proof seen consideration objects common analysis processes 
consideration necessarily founded objects arouse proof theory study proofs logic 
process recursively defined lazy element set sense considering lazy elements set omega constructor omega omega founded version type empty set omega contains recursively defined lazy element object called productive associate computation tree requiring computation tree founded 
productive object type omega reduce element constructor set omega similarly reduce element 
see founded objects special cases productive objects 
productive objects accessible component relation 
data type write stressing founded element general expressing productive element consider founded elements data type instance data type natural numbers understood means founded 
notion productivity clear case finitely branching trees main problem give finitary precise definition productivity 
give definition reviewing attempts adding infinite objects type theory 
simple surprising definition shall achieves goal infinitary considerations greatest fixed points infinite ordinals definition extracted notion convergence corresponds notion productivity 
problem addition infinite objects problems adding infinite objects type theory analysed martin lof 
basic problem expressed follows add infinite objects adding partial objects objects reduce canonical form 
recall condition crucial guarantee consistency type theory seen proof system 
instance correct define function omega omega equation 
reduce canonical form 
contrast definition clearly allowed element productive omega productive 
productive chain equalities give chain equalities simple syntactical criteria ensures preservation productivity restrictive 
analysis definition primitive recursive form justified general 
justification definition relies ultimately fact consider founded objects 
different view followed unexpected analogy addition infinite objects type theory non standard extensions non standard analysis 
explanation rejects circular definitions allow non founded definitions 

approach definition allowed 
implies existence closed terms canonical form 

despite problem possible establish consistency type theory extension 
paragraph suggest proof principle seen way defining functions necessarily founded objects 
new proof principle relies directly semantics object necessarily founded tree built constructors 
key example point basic difficulty find way defining functions ensures instances functions productive elements productive 
step course precise notion productivity 
order find definition analyse key example 
consider function defined equations nil nil clear intuitively productive productive 
convinced fact clear way 
answer may definition productivity greatest fixed point 
answer formally satisfactory argued impredicative tarski fixed point theorem satisfactory finitary explanation infinite objects 
noticed directly clear reduces canonical form productive 
furthermore see components form productive nil suggests definitions section 
guarded induction principle reducible elements order simplify discussion suppose introduced data types data type expressions built constructors data type lazy expressions built constructors nil hope clear discussion extends consideration inductively defined data types 
definition define direct components closed expression reduces nil direct component 
reduces direct component reduces direct components component component direct component 
definition element type productive iff components reduce nil element form element form define close expression reducible type type built data type expression type reducible iff expression reducible type reducible type type simply convertible finite expression type productive 
guarded definitions constant type set ground data type 
give sufficient condition recursive definition ensure reducible expression 
define guarded constructors expression means intuitively occurences form occur guarded constructors constructors 
case analysis occur guarded constructors form constructor guarded constructors iff guarded gamma constructors guarded constructors form guarded constructors iff guarded constructors case expression case guarded constructors iff occur guarded constructors form occur guarded constructor say guarded iff guarded constructors guarded induction principle guarded condition known recursive definition processes 
important points justification inductive notion productivity second proof principle 
setting importance notion comes result 
theorem xn ground data type guarded recursive definition xn expression built reducible constants reducible 
proof illustrate proof previous example hopefully generic 
consider defined equation case nil nil reducible reduces nil reduces reduces reduces nil direct components form reducible 
productive productive 
means reducible 
theorem read proof principle 
order establish proposition oe follows propositions oe oe build proof term natural deduction case analysis proven lemmas proposition want prove recursively provided recursive call guarded rules 
call proof principle guarded induction principle 
hope show examples reasoning principle quite flexible intuitive practice 
guarded induction principle ensure closed expressions reducible reduce canonical form 
particular implies closed proof way expressing correctness guarded induction principle 
remarks proof principle noticed criteria accept nested occurences function contrary wellfounded cases 
define function omega omega equation nested occurence right guarded 
case checked 
productive reduces term 
component term reduce canonical form 
combine test previous test founded recursive calls arguments explicitely assumed wellfounded 
situation occur example analysed infinite proof defined founded recursion evaluation relation 
guarded condition may restrictive especially definition functions infinite objects 
programs streams preserve productivity obey general guarded condition 
simple example 
consider set streams integer constructor cons define function map guarded equation map cons cons map consider equation cons map represent stream cons cons definition allowed guarded 
occurence right appears map map constructor 
think situation similar founded objects condition structurally smaller recursive calls capture usual definitions programs defined founded objects scope surprisingly large :10.1.1.39.3778
general case non guarded definitions turned easily definitions guarded 
previous attempt definition stream cons cons introduce function guarded definition cons furthermore intended application reasoning infinite objects programming 
application guarded condition give proof system powerful induction flexible examples tried 
trying understand intuitively going proofs induction guarded condition came proof principle 
summarize important guarded condition ensured simple syntactical check directly justified provide powerful proof principle reasoning infinite objects 
reformulation rule sets section express way understand inductively greatest fixed point 
follow terminology 
start set atoms set phi rules pairs write phi 
mean phi element phi called rule premisses monotone operator oe associated phi oe fx phi 
kernel oe oe fx oe greatest fixed point oe introduce natural notion equality streams 
relation eq eq cons map show conversely eq cons map implies eq proved cons map convertible expressions 
intuitively conversion derivation finite proof equality expressions infinite 
give purely inductive description oe case phi deterministic phi 
phi 
entail define phi set exists phi 
phi mean inductively phi phi element phi called direct component element phi component oe set exists rule defines set canonical elements 
alternative description oe oe fx phi oe oe set elements components canonical 
theorem oe oe proof oe oe phi fact phi deterministic components canonical 
shows inclusion oe oe conversely inclusion oe oe oe holds general oe oe hypothesis phi theorem shows possible define kernel rule set predicative way oe despite fact usual definition oe predicative 
take predicative defined instance 
simple examples proofs programs divergence introduce set expressions exp exp exp exp inductively defined relation eval exp eval eval predicate inf exp eval inf inf term inf 
defined guarded equation inf lazy proof inf example quite simple illustrates difference proof system proofs induction 
proof divergent induction consist finding predicate holds implies exists eval find invariant predicate 
contrast approach involve search suitable predicates analyses problem looking rule predicate inf divergence general start set binary relation describe inductively predicate accessibility acc acc acc consider founded elements predicate divergence inf inf inf classically subsets form partition intuitionistic framework expect general proof acc inf particular derive system results establish equivalence notions divergence fact element diverges converges 
quite interesting investigate problem detail intuitionistic point view guess equivalence really non equivalence indicates stronger notion divergence correct intuitionistic notion 
possible show subsets disjoint defining oe acc inf equation oe acc inf oe founded recursive call oe smaller second argument supposed founded 
course may proposition try prove proved case analysis may find appropriate lemmas 
hope founded infinite objects process finding lemmas helped analysis 
representation unreliable medium want build element thought unreliable medium asks integer input forgets outputs recursively 
introduce infinite oracle set constructors object set thought infinite stream form case computation tree term similar binary development real number 
equations define function equations satisfy guarded condition 
important representation able define predicate element contains infinitely ones specify unreliable medium fair 
definition recursion show example translate induction recursion proof system 
suppose map want build map satisfying usual recursive equations 
define oe guarded equations oe inl oe oe inr oe check oe form inl form inr representation recursion set indicates develop realisability semantics induction streams see way element coinductive type interpreted productive element 
fairness introduce inductively defined predicate event event means form 
rules event event event founded proof event thought finite term form gamma xn gamma inductively defined predicate event introduce predicate inf means contains infinitely ones development 
rule inf event inf inf proof inf thought infinite proof term form inf inf inf pn proof event xn gamma xn corresponds closely intuition means stream infinitely ones 
fair unreliable medium defined medium proof inf may interesting see far ideas adapted representation proofs process system cbs simulated simple way lazy functional language 
proof list iterates example taken 
define relation set stream integers constructor eq eq eq cons cons parenthesis illustrate proof principle showing eq transitive 
declare trans eq eq eq define guarded equation trans cons cons cons eq eq eq trans notice closed infinite proof eq infinite terms computation tree 
relation eq analogous bisimulation equivalence 
parenthesis problem show define guarded equation cons map defined guarded equation map cons cons map eq eq cons map define function eq cons map eq guarded equation cons eq cons map eq eq eq cons map read proof program transforms lazy proof tree establishes eq proof tree establishes eq map proof trees furthermore infinite built rule eq eq cons cons soundness type inference system test examples represented mechanized system problem soundness type inference system analysed 
corresponds version type theory possibly infinite objects peter aczel non founded set theory 
shall describe proof detail emphasize points freely notation 
formalism directly justified introduce object cl computation rule cl 
exp ff 
cl relation rule seen formalism rule relation expressions types 
case recursion rule page case proof differs see problem proving cl problem building infinite proof tree cl direct cl 
exp ff 
cl fact allowed guarded recursively cl mechanization discuss briefly mechanization system design interactive proof search 
section tentative partial implementations ideas described tried machine far 
starting point consider logical framework described type system refines type system lazy programming language 
step lazy functional language haskell lml dependent types 
particular lazy functional language introduce new data types constructors 
typing relation mean lazy element data type notation instance expressing founded element data type alternative notation typing judgement kind data types ones founded elements ones may productive elements 
associate data type second kind founded part 
general course definition recursive programs proofs lead inconsistent reasonings 
need introduce notion correct environment 
gives sufficient syntactic condition guarded environment valid semantic terms productive objects 
check ensures particular consistency environment seen logical theory complementary check structurally smaller recursive calls founded arguments :10.1.1.39.3778
believe system leads intuitive interactive proof system suited providing mechanical help development proofs relational natural semantics 
user introduces new sets predicates relations defined rule 
practice probably clearer relations elimination rules rules 
wants prove result builds noncanonical function gives name type 
case expression corresponds analysis hypotheses 
analysis generates subgoals analysed write solution 
possibility declaring proving local lemmas recursively defined corresponds addition local construct proof term language 
recursive reasoning allowed system points may lead inconsistency 
hope shown guarded proof induction principle quite natural way reasoning infinite objects 
duality guarded conditions infinite objects structurally smaller conditions complements categorical duality initial final objects basis notion inductive definition 
main point goes back lars impredicative notions necessary dealing infinite objects typically greatest fixed point infinite ordinals avoided altogether explicit consideration proof objects 
originally conceived mind proof system seen illustration basic idea initial idea came discussion eike ritter peter dybjer proof systems infinite objects discussions peter dybjer martin hofmann andy moran lars 
referees comments 

aczel 
inductive definitions 
barwise editor handbook mathematical logic elsevier 

aczel 
non founded sets csli lecture notes vol 
stanford 
th 
coquand 
pattern matching type theory 
proceedings meeting proof types 

cousot cousot 
inductive definitions semantics interpretation 
popl 

curry feys 
combinatory logic vol 

north holland publishing 

dahl 
verifiable programming 
prentice hall international 

dummett 
elements intuitionism 
oxford university press 

dybjer 
inductive families 
appear formal aspects computing 

girard 
proof theory logical complexity 
bibliopolis 


intensional characterization largest bisimulation 
theoretical computer science 


syntax infinite objects extension martin lof theory expressions 
lncs martin lof mints eds 

hugues moran 
semantics locally bottom avoiding choice 
proceedings functional programming workshop 

lorenzen 
logical reflection formalism 
journal symbolic logic 

lorenzen myhill 
constructive definition certain sets numbers 
journal symbolic logic 

martin lof 
intuitionistic type theory 
bibliopolis 
see martin lof constructive explanation addition non standard elements explicit consideration non standard proof objects example idea 

martin lof 
mathematics infinity 
lncs martin lof mints eds 

mendler panangaden constable 
infinite objects type theory 
proceeding logic computer science 

milner tofte 
induction relational semantics theoretical computer science 

milner 
communication concurrency prentice hall international 

nordstrom petersson smith 
programming martin lof type theory 

oxford university press 

park 
concurrency automata infinite sequences 
deussen editor proceedings th gi conference theoretical computer science lncs 

paulson 
induction recursion higher order logic 
draft university cambridge 

prasad 
programming broadcasts 
concur lncs 


fixed points type systems proceeding third meeting proofs types 

de roever 
backtracking greatest fixpoints formal description programming concepts neuhold ed north holland 


productivity recursive list functions 
acm transactions programming language systems vol 



realisability interpretation coinductive definitions program synthesis streams 
proceedings international conference fifth generation computer systems 
article processed macro package llncs style 
