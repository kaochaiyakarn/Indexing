induction domains calculi strachey contributions programming language engineering david schmidt computing information sciences department kansas state university nichols hall manhattan ks usa 

collaboration colleagues oxford christopher strachey pioneered analysis programming languages terms semantic features 
strachey contributions inductive definition semantics semantic domain definitions calculi semantic description consequences languages research described 
strachey impact computer programming mainstream outlined 
aren new programming languages designed programming language experts 
requirements marketing user support financial backing mean visibility viability new programming language depend non programming language issues 
academic discipline programming language design proven valuable insights techniques move mainstream period decades 
particular wave language design innovations syntax definition parsing theory simple data typing developed firmly implanted mainstream today 
longer needs justify language syntax lalr grammar data type checking relies propositional logic types 
practicing programmers know readily apply wave concepts daily efforts 
christopher strachey led second wave language design research emphasis shifted syntactic structure semantic structure 
second wave fully impacted mainstream community time writing preliminary felt 
software crises required full force hit 
denotational semantics strachey tried languages easier understand engineer 
strachey appreciated programming language appears isolation language evolves existing languages response unsatisfied programming problems 
strachey knew competent schmidt cis ksu edu 
supported nasa nag nsf ccr 
means wish underestimate roles played professor dana scott strachey oxford colleagues helped strachey refine ideas state precisely 
scott contributions particular appear strachey final difficult ultimately unfair attribute particular contribution precisely person 
language designer intuitively employs meta theory language design making meta theory explicit inserts solid engineering process 
document second wave contributions strachey major participant inductive definition semantics definitions calculi semantic description describe advances generated third wave research 
conclude speculating impact contributions programming language mainstream 
contributions denotational semantics century impact denotational semantics computing science properly appreciated 
time writing clear denotational semantics affected computing community denotational semantics demonstrated describe concisely elegantly language means programs mean 
axiomatic semantics denotational semantics clear programming language studied entity right 
method set standards day language designers match regardless techniques 
crucial technical contributions denotational semantics stand ffl inductive definition semantics meaning language construct defined terms meanings 
ffl semantic domain definitions values computed language programs grouped named sets manner resembling bnf definitions 
ffl calculus semantic description minimal meta language precise semantics encodes programs semantics language constructs 
contributions receives closer scrutiny sections follow 
inductive definition scott strachey described intent denotational semantics extending bnf semantics language construct syntax semantics expressed terms 
classic example inductive definition semantics arithmetic expressions displayed 
inductive structure bnf rule directs definition valuation function valuation equation appears syntax construction 
inductive definition available guise attribute grammars scott strachey adaptation form inductive definition symbolic logic model theory stronger impact 
bnf definition expression numeral succ semantic valuation functions expression integer plus numeral integer succ plus syntax semantics arithmetic succ succ plus succ succ plus succ plus succ plus plus plus succ plus plus plus plus plus plus plus calculating semantics arithmetic expression immediate benefit inductive definition elegant application means semantics substitution see 
substitutions train programmer understand language terms source language constructs underlying sequences machine operations constructs translate 
crucial advantage inductive definition proofs language properties conducted induction structure language bnf definition 
example readily prove expression syntax phrases meanings nonnegative integers 
inductive definition pattern gives language designer template language engineering syntactical construct receive semantic equation semantics specified automatically inductively 
tempting violate inductive engineering approach crucial moment defining semantics iterative construct staying true form forced understand iteration terms fortran elementary domains integer integers location storage locations derived domains environment identifier store location storable procedure store store characteristic domains location procedure expressible integer storable integer lisp elementary domains atom atomic values nil nil value derived domains environment identifier function environment expressible expressible list nil atom theta list characteristic domains expressible atom list function expressible semantic domains languages arguably fundamental notions od aeoe oe oe aeoe aeoe oe inductive definitions forced language designers confront mathematics iteration terms fixed point calculation 
semantic domain definitions strachey important individual contribution language engineering invention semantic domains name organize sets language semantic values 
denotational semantics bnf extended semantics semantic domain equations data typing extended semantics 
standard names expressible value value storable value environment store continuation semantic domains strachey created lexicon framework describing programming language expressibility advance syntax definitions valuation functions 
strachey noted varieties programming language language elementary derived characteristic domains 
elementary domains sets primitive values integers strings storage locations derived domains standard structures environments stores characteristic domains ones give language personality strachey values identifiers denote values expressions denote values stored 
presents comparison domains simple fortran lisp languages 
learn reading striking fortran language uses flat store integers saved 
locations statically scoped parameterless procedures named expressions evaluate integers 
apparent application fortran language numerical computing 
contrast lisp language lacks primary storage allows atoms lists dynamically scoped functions computed computed named 
lisp language clearly suited symbolic computation linear data structures 
strachey intended language designer listing semantic domain equations 
domains define language capabilities suggest syntax means characteristic domains 
exist taxonomies languages suggested typical declarative language rich collection collection imperative language exactly opposite balance 
occasionally encounters domain equation self referential list nil atom theta list fortunately recursions resolved usual inductive interpretation applies bnf definitions 
exception rule equation recursion lies left function space constructor function environment expressible expressible expressible atom list function discovery set satisfies definition isomorphism significant achievement attention surrounding particular problem generated unfortunate impression denotational semantics topic better left mathematicians language engineers 
course case semantic domains powerful engineering tool users need understand technicalities deeply practicing civil engineer needs understand foundations functional analysis solve differential equation 
calculi semantic description lambda calculus notation abstraction application identifier define semantics individual programming constructs strachey showed semantics elegant concise language construct meaning independent particular machine 
example 
semantics sequential composition commands lambda calculus application command store application second command result ae oe ae aeoe ae environment oe store command environment store store minimality lambda calculus semantics simple direct 
semantics reveals deep insights ffl usage environment implies command sequencing statically scoped bindings affect ffl usage store implies command sequencing truly sequential depends updates ffl stated terms function application command composition associative facts uncovered recourse specific machine models 
nested application expressed semantics command sequencing states pattern careful language designer repeat semantics declaration composition expression composition 
terse exactly correct depictions revelation compared counterparts machine operational semantics definitions 
course lambda notation meaning useful 
regard notation particularly chosen crucial computational property captured single reduction rule concept binding value name strachey built towers meaning encompassing storage creation update declaration processing abstraction encapsulation mechanisms data control flow 
scott justified reduction rule proving mathematical equality mathematical semantics lambda calculus abstraction expression denotes mathematical function 
scott exposed mathematical semantics loop see equation section understood fixed point solution recursively defined function regard partially ordered set stores 
language engineer need know underlying physics lambda calculus denotations perform useful language design 
achievements denotational semantics strachey fundamental contributions researchers able give semantic definitions languages ada algol algol lisp pascal scheme snobol 
important consequence strachey stimulation research theory programming languages 
prominent example tennent astute observation landin correspondence principle regarding semantics definition declaration definition parameter passing fact example recurring pattern semantics 
landin stated semantics declaration semantics parameter binding procedure 

tennent noted correspondence exposed uses semantical notational pattern semantics respective phrases 
tack tennent proposed situations semantical patterns design language internal coherency binding ffl abstraction principle elements semantically meaningful syntactic class named names invoked procedure named command module named declaration class named type structure 
ffl qualification principle semantically meaningful syntactic class may admit block construct hold local definitions command block command local definitions encapsulated module declaration local definitions class local state class local definitions 
ffl parameterization principle named phrase receive parameters semantically meaningful syntactic class procedures may receive command parameters declaration parameters type structure parameters 
tennent principles defined taxonomy binding mechanisms significant achievement evolution binding mechanisms important issue language design 
see gelernter jagannathan text excellent historical survey 
aware similar possibilities facets language definition mosses watt developed action semantics semantics metalanguage exist semantical patterns value flow binding flow control flow communication flow 
action semantics constitutes comprehensive body knowledge today programming languages assembled underlying semantical patterns 
success semantics metalanguage lambda calculus intensively studied programming language right 
opened door variety languages higher order ml hope lazy miranda haskell 
consequence renewed interest compiler generation rapid prototyping systems language implementation mechanically synthesized semantic definition written lambda calculus 
presence semantic domains semantics definition meant elegantly define language interpretation replacing semantic domain homomorphic image original 
generated significant series results generalized flow analysis techniques flowchart languages static analyses modern modular higher order languages 

third wave semantics research strachey fundamental contributions generated stream research call confluence third wave 
considered 
structure operational semantics inductive language definition strongest selling point denotational semantics stream research inductively defined semantics followed 
kahn natural semantics dispensed mathematical aspects denotational semantics especially functions values expressive power inductive derivability expressed logical style inference rules 
natural semantics definition command composition oe ae oe oe ae oe oe ae oe program semantics calculated proof theoretic derivation sequent oe ae oe asserts starting store oe command environment ae produce revised store oe oe ae understood order tabular data structures replacing intellectual novelty transparency 
likewise plotkin proposed structural operational semantics inductively defined variant term rewriting system redex contracted selected inductive derivability 
command composition expressed follows oe ae oe oe ae oe oe ae oe oe ae oe plotkin formulation triggered intensive interest proving properties programs employ parallelism parallelism encoded terms interleavings rules resemble 
rules gamma nil oelist gamma oe gamma oelist gamma oelist elimination rule gamma oelist gamma oe nil gamma oe oelist oe oe gamma cases nil assume oe oe computation rules cases nil nil assume oe cases nil assume oe cases nil assume oe itt definition type oelist type theory substantial benefits provided semantic domains led investigations 
stream research type theory consequence 
strachey domain calculus positive propositional calculus read logical connective theta read read oe 
type theory added universal existential quantification basic calculus type oe oe named collection functions lambda abstractions oe oe similarly existentially quantified type oe oe named pairs hw oe oe extension impredicative type theory oe replaced type type data types 
type theories quantifiers best define semantics languages parametric polymorphic functions encapsulation mechanisms 
striking type theories martin lof intuitionistic type theory new types defined demand terms style elimination rules 
rules accompanied computation rules describe computation proceeds elements type 
gives itt formulation type oelist cons lists 
striking rules define semantical elements type inductively cons list nil structure cons structure contains oe element cons structure 
rules define type canonical elements 
type elimination rule displays oe oe written pix oe oe oe oe written sigmax oe oe pattern disassembly canonical elements cons list disassembled cases analysis nil structure processed directly cons structure processed primitive recursion substructure 
computation rules show elimination rule cancels rule generates primitive recursive computation 
heavily subscripted data types state correctness properties 
example wish write function length returns length cons list argument 
asserting nil literally set correct lengths nil suggests length nil return answer 
nonempty list assume length returns lth lth assumption conclude plus lth length return plus lth 
itt function coding proof correctness correctness property stated function data type length cases nil assume lth plus lth elimination rule type check function validate typing length oelist 
itt provides domain driven proof theoretic definition computation 
syntax computation rule lambda calculus fact derived itt formulation logical implication operator oe 
semantic calculi lambda calculus expressed concept binding value name remarkable computation encoded style 
cost pays control flow data structuring concepts tedious codings calculus 
particular semantic feature intensively studied better design calculus expresses precisely feature 
building denotational semantics successes lambda calculus calculi developed intensive analysis particular semantic features 
examples calculi ffl calculus communicating systems calculus study process communication 
basic computation step takes form ffv jj ffx ffv jj process sends message channel ff 
ffl object calculus calculus study object message passing 
computation step looks self fl self object methods labelled receives message execute method self body dynamically resolved 
ffl ambient calculus calculus study agent transfer internet 
ffl security slam calculi calculi study secure communications 
just lambda calculus opened door intensive study binding data typings binding taxonomies binding specialized calculi listed initiated similar lines research specific language features designed 
calculus suggests paradigm computation language classified paradigm terms calculus provides elegant semantics 
initial studies multi paradigm languages terms specialized calculi 
impact mainstream innovations led strachey inductive definition semantics semantic domain definitions semantic calculi slowly clearly moving programming mainstream 
example reader java language specification manual core java language help notice book organization terms inductive definition 
semantic domains implicitly couched terminology data structures domains exist 
overt strachey appears definition standard ml inductive definition domains calculi primary tools exposition standard ml 
strachey principles crucial domain specific rapidly prototyped special purpose languages move center programming mainstream 
domain specific language built language core extended operations specialized application area 
semantic domain definitions crucial defining data operations applications area inductive definition key integrating language core application specific extensions 
fundamental strachey principles object design patterns best understood collection semantical notational patterns uses assemble programming language design patterns form calculus object program construction 
difficult imagine potentially unifying theory software architecture study large scale structure computer programs undertaken groundwork strachey laid 
inductive definition domains semantic calculi appear architectural specifications diagrams writes document program architecture 
christopher strachey ultimate achievement particular notation design principle subtle ways proposals lay paths taken generations follow 
paths explored 
neil jones taught denotational semantics peter mosses answered questions olivier danvy encouraged write 
olivier andrzej filinski stefan sokolowski read earlier drafts 
abadi cardelli 
theory objects 
springer berlin 
abadi gordon 
calculus cryptographic protocols spi calculus 
information computation 
barron 
study programming languages 
cambridge univ press 
bjrner 
formal description ada 
lecture notes computer science 
springer verlag 
burstall macqueen 
hope experimental applicative language 
technical report csr computer science dept university edinburgh 
cardelli 
abstractions mobile computation 
vitek jensen editors secure internet programming lecture notes computer science pages 
springer verlag 
cardelli wegner 
understanding types data abstraction polymorphism 
computing surveys 
cousot cousot 
interpretation unified lattice model static analysis programs 
proc 
th acm symp 
principles programming languages pages 
acm press 
cousot cousot 
higher order interpretation 
proc 
ieee int 
conf 
programming languages 
ieee press 
floyd 
assigning meanings programs 
symposia applied mathematics 
gamma design patterns elements reusable object oriented software 
addison wesley reading ma 
garlan shaw 
software architecture 
editors advances software engineering knowledge pages 
world scientific 
gelernter jagannathan 
programming linguistics 
mit press cambridge ma 
gordon 
semantic theory dynamic binding 
technical report stan cs computer science dept stanford univ 
gosling joy steele 
java language specification 
addison wesley reading ma 
gunter 
semantics programming languages 
mit press cambridge ma 
heintze riecke 
slam calculus programming secrecy integrity 
proc 
acm symp 
principles programming languages pages 
hoare 
axiomatic basis computer programming 
commun 
acm 
hoare 
notes data structuring 
dahl dijkstra hoare editors structured programming pages 
academic press 
hoare wirth 
axiomatic definition programming language pascal 
acta informatica 
jones nielson 
interpretation semantics tool program analysis 
abramsky gabbay maibaum editors handbook logic computer science vol 
pages 
oxford univ press 
kahn 
natural semantics 
proc 
stacs pages 
lecture notes computer science springer berlin 
knuth 
translation languages left right 
information control 
knuth 
semantics context free languages 
math 
systems theory 
vol 
landin 
programming languages 
communications acm 
lloyd 
combining functional logic programming languages 
bruynooghe editor logic programming proceedings symposium pages 
mit press 
milne strachey 
theory programming language semantics 
chapman hall 
milner 
communication concurrency 
prentice hall 
milner tofte 
commentary standard ml 
mit press 
milner tofte harper 
definition standard ml 
mit press 
mitchell 
foundations programming languages 
mit press cambridge massachusetts 
mosses 
mathematical semantics algol 
technical report technical monograph prg programming research group university oxford 
mosses 
action semantics 
cambridge tracts theoretical computer science 
cambridge university press 
mosses watt 
action semantics 
martin wirsing editor formal description programming concepts iii proc 
ifip tc working conference gl 

ifip north holland 
muchnick 
semantic comparison lisp scheme 
conf 
lisp functional programming pages 
acm 
naur 
revised report algorithmic language algol 
communications acm 
nielson 
denotational framework data flow analysis 
acta informatica 
nielson nielson hankin 
principles program analysis 
springer verlag 
nordstrom petersson smith 
programming martin lof type theory 
international series monographs computer science 
oxford university press 
plotkin 
structural approach operational semantics 
technical report fn computer science department aarhus university aarhus denmark september 
reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages 
north holland amsterdam 
reynolds 
notes lattice theoretic approach theory computation 
technical report computer science syracuse university 
schmidt 
denotational semantics methodology language development 
allyn bacon 
schmidt 
structure typed programming languages 
mit press 
scott 
outline mathematical theory computation 
technical report report prg prog 
research group oxford university 
scott strachey 
mathematical semantics computer languages 
fox editor proceedings symposium computers automata pages 
microwave research institute symposia series volume polytechnic institute brooklyn 
shaw garlan 
software architecture emerging discipline 
prentice hall 
strachey 
varieties programming language 
technical report prg prog 
research group oxford university 
tennent 
mathematical semantics snobol 
popl conference record st annual acm symposium principles programming languages pages 
tennent 
denotational description programming language pascal 
technical report dept computing information sciences queen university kingston ontario canada 
tennent 
language design methods semantic principles 
acta informatica 
tennent 
principles programming languages 
prentice hall international englewood cliffs new jersey 
thompson 
haskell craft functional programming 
addisonwesley reading ma 
turner 
overview miranda 
acm sigplan notices 

