tigris java cluster system matt welsh university california berkeley cs berkeley edu tigris high performance computation substrate clusters workstations implemented entirely java 
tigris automatically balances resource load cluster shielding applications asymmetries cpu network performance 
accomplished data ow programming model coupled queue 
meet performance challenges implementing system java jaguar system enables direct protected access hardware resources fast network interfaces disk java 
jaguar yields magnitude performance boost java native interface java bindings system resources 
demonstrate applicability tigris pass parallel disk disk sort exhibiting high performance 
java emerging attractive platform allowing heterogeneous resources harnessed large scale computation increasingly java pervasive core technology supporting applications diverse large parallel distributed databases high performance numerical computing internet portals electronic commerce 
java object orientation type safety exception handling model code mobility distributed computing primitives contribute popularity system novel component applications readily deployed 
systems enterprise java beans objectspace voyager jini demonstrative momentum java server computing landscape 
number outstanding issues inherent java server architectures 
rst inherent performance limitations current java runtime environments 
compilation techniques greatly enhanced java performance address entire issue garbage collection exploitation low level system resources remain outstanding performance problems 
java issues include memory footprint binding java operating system threads resource accounting 
bene ts java outweigh limits existing implementations various projects considered java server computing platform 
multispace employs cluster commodity workstations running java virtual machine scalable fault tolerant architecture novel internet services javelin harnesses spare cycles workstations running java perform large scale computation :10.1.1.26.4797:10.1.1.26.4797
promise java write run philosophy employed number internet agent systems nin 
investigating applicability java server computing environments tigris cluster computation system implemented java 
goal tigris facilitate development applications dynamically utilize workstation cluster resources high performance computing automatically balancing resource load cluster 
tigris borrows concepts river cluster system implemented berkeley network workstations 
java native execution control environment tigris believe cluster application development greatly simpli ed applications take advantage code mobility strong typing features java milieu 
order approach feasible important issues resolved 
important high speed communication facilities java 
address concern jaguar system enabling cient direct java access underlying hardware resources maintaining safety jvm sandbox 
jaguar overcomes high overhead java native interface commonly performing native machine operations 
accomplished specially modi ed just time jit compiler transforms java bytecodes machine code segments perform native operations low overhead communication 
tigris system modules disks distributed queue modules disks modules read data write data sort hash join sample river application 
key ideas tigris borrowed river system supporting cluster applications automatically balance cpu network disk load cluster 
river employs data ow programming model applications expressed series modules supporting simple input output interface 
modules communicate reservoirs channels data packets pushed pulled 
simple data transformation application consist distinct modules reads data disk le streams reservoir reads packets reservoir performs transformation data writes data reservoir back disk 
depicts scenario 
running multiple copies modules nodes cluster throughput data transformation scaled 
goal river automatically overcome cluster resource imbalance mask behavior application 
example node cluster heavily loaded form redistribution application may run rate slowest node 
larger heterogeneous cluster evident problem performance imbalance di cult prevent example location bad blocks disk seriously ect bandwidth 
especially true clusters utilize nodes varying cpu network disk capabilities 
apart hardware issues software cause performance asymmetry cluster example hot spots may arise data computation distribution application 
river addresses resource imbalance cluster mechanisms distributed queue dq balances consumers system graduated declustering gd mechanism adjusts load producers 
dq allows data ow autonomously adaptive rates producers consumers causing data ow computation gd data layout access mechanism allows producers share production data read multiple disks 
mirroring data sets disks disk imbalance automatically managed gd implementation 
tigris implementation river system java 
motivated reasons 
java natural platform build cluster applications reasons described 
second river attractive programming paradigm cluster internet service architectures investigated ninja project uc berkeley 
ninja relies heavily java runtime environment multispace mapping concepts river implementation java opportunity address issues java ninja service platform river programming model :10.1.1.26.4797:10.1.1.26.4797
felt river bene greatly integration java terms code simpli cation added exibility 
example java remote method invocation rmi control tigris components expressive simpler program lower level control mechanism 
implementation overview focus details tigris system di er original implementation river described 
tigris implemented entirely java 
clus ter node runs java virtual machine bootstrapped receptive execution environment called ispace :10.1.1.26.4797:10.1.1.26.4797
ispace allows new java classes pushed jvm remotely java remote method invocation 
security manager loaded ispace limit behavior untrusted java classes uploaded jvm example untrusted component allowed access lesystem directly 
allows exible security infrastructure constructed java classes running cluster nodes fewer capabilities access system resources trust 
public interface public string getname public void init config public void destroy public void water reservoir tigris module interface 
tigris modules implemented java classes implement interface shown 
interface provides small set methods module implement 
init destroy module initialization cleanup getname allows module provide unique name 
method core module functionality called new incoming data module process responsible generating outgoing data pushing data ow path module 
communication managed classes reservoir water 
reservoir class represents communications channel modules provides methods get put allow data items read written communications channel 
water class represents unit data read written reservoir unit processed module method 
water thought containing data bu ers accessed directly similarly java array java objects allocated 
allows contents water represent structure typed elds meaning java application untyped collection bytes integers 
subclassing reservoir water di erent communication mechanisms implemented tigris 
particular water implementation associated particular reservoir example case communications channel requires special handling data bu ers sent 
prototype implementation includes reservoir implementations provides reliable communications berkeley fast communications layer implemented myrinet system area network 
java binding tigris described section 
implements communications modules jvm passing data fifo queue memory 
associates get put reservoir operations data read written le respectively 
convenient way le waters initially created spring interface contains single method int size 
reservoir associated spring implementation capable creating waters sent reservoir 
allows reservoir implementation manage allocation waters eventually transmitted example reservoir may wish initialize data elds water implement particular communications protocol sequence numbers 
implementation water ensure module unable modify hidden elds water created limiting range data items accessed application 
select upstream select downstream module thread upstream reservoirs downstream reservoirs module module incoming data outgoing data operation 
module associated responsible repeatedly issuing get module upstream reservoir invoking arguments input water handle downstream reservoir new data sent 
single may upstream downstream reservoirs associated example implement communication topologies data ow graph application 
cornerstone distributed queue implementation tigris see 
di erent implementations implement di erent policies selecting reservoir invocation module method 
example implements roundrobin scheme selection upstream downstream reservoir iteration 
depicts operation main loop 
distributed queue implementation tigris dq implemented subclass balances load multiple downstream reservoirs 
way reservoirs tigris maintained modules unaware connectivity data ow graph 
implementations included prototype selects upstream downstream reservoir iteration round robin fashion 
selects upstream reservoir iteration round robin downstream reservoir randomized scheme 
algorithm maintains credit count downstream reservoir 
credit count decremented water sent reservoir incremented water processed destination 
iteration random reservoir chosen list downstream reservoirs 
reservoir zero credit count reservoir cho passing handle current reservoir module capable emitting zero waters iteration 
permits module obtain handle reservoir spring create new waters transmitted 
note module may decide re transmit water took input reservoir may capable directly transmitting arbitrary water example transmit reservoir responsible transforming water necessary making copy 
sen dq implementation original river implementation 
selects upstream reservoir iteration round robin downstream reservoir lottery scheme 
algorithm maintains credit count downstream reservoir 
iteration random number chosen range total number downstream reservoirs 
choice weighted value number credits belonging reservoir intuition reservoirs credits chosen allowing bandwidth naturally balanced multiple reservoirs 
initialization control tigris application controlled external agent contacts ispace cluster node java rmi communicates service running node 
provides methods create create reservoir add reservoir upstream downstream reservoir start 
way tigris application module connectivity graph grown runtime top receptive ispace environment hardcoded priori 
cluster node need running ispace service preloaded 
execution begins control agent issues command module ends conditions occur control agent issues module module reaches river condition 
river eor indicated module receiving null water input 
triggered producer pushing null water reservoir consumer event declaring eor condition 
module may indicate surrounding eor reached throwing method obviates need additional status value passed module controlling thread 
total bandwidth mbps number nodes optimal random selection round robin selection lottery selection number nodes perturbed total bandwidth perturbation ideal bandwidth queue performance 
distributed queue performance shows performance tigris distributed queue implementations scaling perturbation 
rst benchmark demonstrates dq implementations round robin randomized lottery number nodes passing data dq scaled 
reservoir type implements simple credit ow control scheme fast communications layer 
toend peak bandwidth mbyte sec 
case equal number nodes sending receiving data dq 
results show bandwidth loss optimal case node case 
partially due dq implementation case receiving node selects upstream reservoir receive data round robin manner 
receive operation non blocking require receiver test incoming data upstream reservoir packet arrives 
believe portion bandwidth loss due implementation number active vis increases network interface poll additional queues test incoming outgoing packets 
second benchmark tests performance lottery dq implementation receiving nodes arti cially loaded adding xed delay iteration receiving module method 
total bandwidth unperturbed case mbyte second nodes sending kb packets rate receivers dq mbyte sec node 
perturbation node limits receive bandwidth mbyte sec 
lottery dq balances bandwidth automatically nodes receiving higher rate nodes perturbed total bandwidth achieved 
total bandwidth obtained half nodes perturbed 
jaguar implementing tigris ciently design tigris greatly simpli ed java raises number issues important performance 
original river system implemented berkeley network workstations active messages ii fast communication substrate solaris mmap features perform disk important performance limitations java runtime environment overcome order tigris rival predecessor 
approach enable direct protected java access hardware resources jaguar 
java native interface programs expressed java bytecodes expressive incorporating notions strong typing exception handling thread synchronization machine independent nature representation restricts set actions ciently performed direct bytecode transformation 
java compiler technology advancing rapidly address concern general purpose computation performing optimizations loop unrolling cient usage machine registers cache memory 
certain operations require binding java bytecode machine representation generic compilation techniques apply 
issues arise wishes hardware resources fast network interfaces disk specialized machine instructions directly available java applications maintaining protection guarantees java environment 
traditionally java runtime environments enabled resources native code interface allows native methods implemented lower level programming language capable directly accessing resources say manipulating virtual memory addresses issuing system call traps 
native code interface ensures protection maintained java assuming native code trusted 
native code interface employed java runtimes incurs high overhead native method call sharing data java runtime native code environment costly 
example java native interface jni provided jvms sun microsystems way export region native virtual memory say java array 
new array allocated data copied jvm object heap 
gives results simple java native interface benchmark mhz pentium ii running linux jdk 
comparison similar tests conducted shown optimizations disabled compiling benchmark 
addition native code interface applies method invocations operations object eld new operator forth delegated native code 
transforming operations native code useful example java object thought mapping particular region virtual memory memory mapped le device eld read write operations ect memory region directly 
generally desire java object particular representation memory reasons ciency sharing data java hardware devices native libraries 
maintaining externalized representation java object data persistence communication 
approach deep rami cations binding java bytecode underlying hardware resources maintenance type safety java sandbox 
believe limitations discussed fundamental java arise result desire maintain platform independence java runtime environment allowing jvm hopefully native code uses easily ported systems 
straightforward jvm implementation transforms java bytecode generic machine instructions actions native code 
java native interface relatively portable maintains strong separation native code data internal jvm result higher overhead moving data execution java native code boundary 
opposite spectrum static java compilers emerging transform java bytecodes directly native machine code 
compilers job machine code optimization portability performance 
knowledge static java compiler addresses high overhead crossing native code interface perform special transformation java bytecode native code example implement native elds described 
order address issues introduce new system jaguar bridges gap java bytecode cient underlying hardware resources 
accomplished just time code transformation translates java bytecode machine code segments directly manipulate system resources maintaining type safety 
jaguar implemented context standard java just intime compiler reengineering jvm allowing seamless interoperation complete java runtime environment 
jaguar concepts fundamental concept embodied jaguar code mappings java bytecode native machine code 
mapping describes particular bytecode sequence corresponding machine code sequence generated bytecode encountered compilation 
example mapping transform bytecode invokevirtual specialized machine code fragment directly manipulates hardware resource way 
jaguar acronym java access generic underlying architectural resources 
benchmark java native interface comparable code void arg void return native method call sec sec void arg int return native method call sec sec int arg int return native method call sec sec int arg int return native method call sec sec byte java array copy sec sec memcpy byte java array copy sec sec memcpy byte java array copy sec sec memcpy byte java array copy sec byte java array copy sec byte java array copy sec comparison java native interface overheads 
jaguar code mappings applied virtually bytecode sequence limited fundamental ways system information determine mapping applied compile time 
impact bytecode transformation virtual methods see 
recognizing application certain mappings easier 
example mapping complex sequence add mult bytecodes say fast matrix multiply instruction certainly di cult recognizing method call particular object 
jaguar code mappings operations normally handled native method calls inlined directly compiled bytecode 
performance improvement impressive example invoking int argument int return value method machine code inlined jaguar costs sec mhz pentium ii operation jni costs sec 
normally java runtime resolves virtual method calls run time dispatching correct implementation type object invoked 
jaguar currently perform run time checks virtual method code mappings meaning incorrect code transformation may applied object cast superclasses 
feasible incorporate code transformations run time jump table jvm virtual method resolution workaround current prototype limit transformations virtual methods marked final prohibits overloading 
example example jaguar enabling cient access low level resources implemented java interface berkeley virtual interface architecture communications layer 
emerging standard user level network interfaces enable high bandwidth low latency communication workstation clusters specialized commodity interconnects 
accomplished eliminating data copies critical path circumventing operating system direct access network interface hardware de nes standard api applications interact network layer 
berkeley implemented myrinet system area network provides raw link speeds gbps generally ective bandwidth applications limited bus bandwidth 
myrinet network interface berkeley programmable board controller lanai megabyte sram program storage packet staging 
implementation described employs pci myrinet interface board dual mhz pentium ii systems running linux 
berkeley architecture shown 
user process may contain number virtual interfaces vis corresponds peer peer communications link 
vi pair transmit receive descriptor queues transmit receive doorbell corresponding queue 
mapped sram network interface polled lanai processor 
transmit data user builds descriptor appropriate transmit queue indicating location size vi nic sram tx rx tx rx mapped vi queues pair vi pinned ram buffers network myrinet nic mb sram mhz cpu user process berkeley architecture 
message send rings transmit doorbell writing pointer new transmit queue entry 
order receive data user pushes descriptor free bu er host memory receive queue similarly rings receive doorbell 
transmit free packet bu ers rst registered network interface operation performed kernel system call pins physical memory 
network interface performs virtual physical address translation consulting page maps host memory board translation lookaside bu er cache address mappings 
api provided includes routines post bu er transmit queue post bu er receive queue wait packet sent wait packet received routines handle vi setup tear memory registration forth 
exposing api java implemented java native interface reasons unnecessary costs 
copying data java expensive high overhead native method invocation dominate cost issuing api calls functions little manipulate couple pointers write small values 
cpu overhead dominant factor considering application sensitivity network interface performance maintaining minimal host overhead operations desirable 
implemented major components rst java library duplicating functionality second set jaguar code mappings translate low level operations descriptor queues fast machine code segments 
majority fact implemented java essentials handled jaguar code transformations 
consider operation method contained vi class 
java source code public int descr descr queue management omitted 
spin set descr return vip success essential function poll transmit doorbell ready written set value point transmit descriptor specifying data sent 
layout doorbell structure mapped sram network interface bit words rst pointer transmit descriptor second memory handle value associated registered memory region descriptor contained 
poll doorbell su cient test rst word nonzero 
update doorbell values written rst memory handle pointer virtual addresses process address space java application means generate virtual addresses directly 
fact wish prevent application specifying arbitrary address transmit receive descriptor say case memory internal jvm 
methods doorbell doorbell set implemented jaguar code mappings shown 
jaguar recognizes bytecode sequence invokevirtual doorbell set inlines machine code performs doorbell polling write functions respectively 
case machine code segment simply tests rst word doorbell non zero value pushes true false value java stack appropriate 
case set machine code segment writes words additional code maintain linked list outstanding transmit descriptors omitted space reasons 
javac public int descr descr 
poll set descr return vip success aload getfield invokevirtual aload getfield aload invokevirtual iconst return set ebx eax eax movl eax ebx movl eax ebx jaguar jit code rewrite eax movl edx eax dl java sourcecode java bytecode code set code jaguar code transformations 
doorbell appropriate order 
address doorbell mapped lanai sram stored private eld int vaddr doorbell class extracted doorbell object generated machine code 
similarly address memory handle descriptor object stored private elds class 
private elds ensures trusted code capable accessing values 
packet bu ers implemented class databuffer represents region registered virtual memory 
data bu er may manipulated manner similar java array methods forth 
methods implemented jaguar code mappings directly manipulate contents bu er virtual memory 
class contains private elds vaddr size keep track object address size memory handle respectively 
databuffer allocated special constructor allocates registers memory bu er memory managed jvm 
class container java objects described section 
performance demonstrate ciency approach mapping resources java implemented standard microbenchmarks pingpong measures round trip latency messages varying sizes bandwidth measures bandwidth obtained streaming packets network interfaces maximum rate 
results microbenchmarks java shown 
java pingpong benchmarks obtain identical performance minimal round trip time microseconds small messages 
bandwidth java obtains bandwidth achieved peaking mbyte sec kb packets 
lost ciency due higher loop method call overheads java 
aggressive optimization jit compiler jaguar able overcome issues 
reservoir type tigris implements simple credit ow control scheme coded entirely java 
obtains peak bandwidth mbyte sec raw performance 
pre serialized objects allows registered virtual memory region accessed databuffer class methods treat region array values 
structured objects transmitted received traditional approach java object serialization 
standard implementations java serialization quote costly alternatives note berkeley implement ow control reliable delivery applications expected implement protocols raw transport mechanisms provided 
bandwidth benchmark presumption ow control protocol assumes data received rapidly transmitted 
java rtt usec packet size bytes java packet size bytes microbenchmark results 
developed 
alternatives rely making copy java object objects referred 
cient serialization key problem overcome implementing highperformance communication persistence models java remote method invocation 
special jaguar code mappings implement pre serialized objects pso 
abstractly pso thought java object memory representation serialized 
pso eliminate copy steps serialization de serialization requiring object stored form ready storage communication 
sending pso communications link requires directly transmitting pre serialized object bu er memory 
receiver bu er data received need pointed pso 
pso implemented jaguar code mappings recognize putfield getfield accesses object question marshalling object data pre serialized form 
atomic elds byte long forth stored simple machine independent representation 
position eld pso bu er region determined manner similar struct eld stored location maintains alignment constraints common architectures example bit value stored bit word boundary 
shows code simple user de ned pso type memory layout pso 
object handled requiring pso associated container memory bu er acts backing store object pre serialized form 
multiple psos may share container containers nested 
databuffer class implements pso container 
pso thought occupying certain location container associated set size 
pso stored putfield bytecode psos container referenced object set container stored 
special null value stored indicating object recovered externally jvm 
note psos outside container non pso objects permitted simply unrecoverable outside jvm receiver pso sent communications channel 
rst time object read getfield new pso created maps container set 
stored set null outside range container null returned 
subsequent getfield accesses yield pso created original access 
object pso resolved lazily rst 
advantage received pso traversed java object created 
pre serialized objects limitations 
rst arbitrary java objects represented psos implementation depends jaguar code mappings putfield getfield operations particular classes 
possible integrate standard java object serializer psos allowing portions object jaguar serialized needed albeit higher cost 
second limitation atomic types pso container recoverable pso memory representation 
limiting 
java arrays simulated public class extends pso public static int jaguar redirected fields public int offset public byte offset public offset ff ff ff ff example pso memory layout 
generic class permits array operations 
believe ciency orded psos worthwhile programmers manage pso cross container 
finding right programming generality ciency case open research issue 
pso microbenchmarks benchmark time create list element sec read back list element rst pass sec read back list element second pass sec write element sec read element sec pre serialized object microbenchmarks 
shows results simple microbenchmark pre serialized object performance 
benchmark creates linked list objects structure shown megabyte container 
times shown list element creating list elements traversing element list rst time requires new java object created element second time simply returns cached java object 
shown timings reading writing element megabyte container 
supporting cross container pso feasible unsupported current prototype 
decided retain simplicity performance design building general cient implementation 
sample application order evaluate performance exibility low level mechanisms embodied jaguar design tigris system implemented parallel disk sorting benchmark 
datamation external sorting way measure memory communication performance complete system 
existence previous sorting results systems yields yardstick tigris system compared interested understanding functional properties tigris jaguar mechanisms context real application 
structure data write read data modules disks modules disks partition sort structure 
structure shown 
tigris sort implements pass disk disk parallel sort byte records contain byte key 
data initially striped input disks megabytes random data node 
application consists sets nodes 
partitioning nodes responsible reading data local disk partitioning record key partition buckets node transmitted sorting nodes sort entire data set write local disk 
results sorted dataset striped increasing key value sorting node disks 
partitioning implemented class continually reads bu er data local disk le partitions bu er number buckets key writes full buckets reservoir corresponding bucket 
buckets ushed communications channel le data exhausted 
actual partitioning records accomplished native method takes arguments pso container corresponding input le bu er array pso containers corresponding bucket 
data copying java necessary java native code directly manipulate contents pso containers 
sorting implemented contained 
module method saves copy packet received river signalled time packet single bu er sorts bu er writes sorted data disk 
sorting accomplished native method takes array pso containers corresponding packets received lifetime module 
data copy java required due pso containers 
file implemented class causes le memory mapped mmap system call address space jvm exposed java application pso container 
pso operations container correspond disk reads writes memory mapped le 
special method provided flush causes contents memory mapped le ushed disk 
approach limitations 
operating system linux allow bu er cache circumvented memory mapped les 
particular write ordering enforced 
currently linux provide raw disk mechanism provides features 
concerning details assume performance di erences arising negligible 
reasonable rst disk just component application appear limited 
secondly double bu ering sort data memory problematic small megabyte node data partitions dealt 
third write ordering important implementing parallel sort su cient ensure disk writes completed 
performance shows performance benchmark scaled nodes 
case half nodes con gured half megabytes data partitioned sorted node 
total time complete sort averaged milliseconds implies nodes added application data sorted constant time 
result feel tuning compete current holder datamation sort record millennium sort implemented hardware platform windows nt 
dominant cost datamation sort modern systems application startup results include cost starting tigris system 
question included startup measurements traditional implementations cost cold booting operating system measured 
related related area high performance java computation environments addresses major issues cient communication mechanisms language runtime extensions parallelism compilation techniques 
projects fall categories 
cient communication java investigated terms direct access bindings message passing libraries mpi fast implementations java rmi 
projects build jni bindings native libraries perform communication 
describes cient java rmi implementation accomplished careful coding fast serializer coded entirely java 
takes extreme approach compiling java application language moving run time overhead communication com total number nodes tigris sort bandwidth nodes amount sorted avg time node avg sort bandwidth node total sort bandwidth mbytes msec mbps mbps mbytes msec mbps mbps mbytes msec mbps mbps mbytes msec mbps mbps performance results 
pile time 
necessitates reengineering java run time resultant environment arguably true java static executable representing java sourcecode 
approach closest jaguar modi cations static java compiler build cient bindings hardware resources case commercial implementation jaguar takes generalized approach building mappings java bytecode native machine code context jit compiler running alongside standard jvm implementation 
various projects considered language extensions parallel distributed computing 
extension java providing transparent remote object access object mobility 
titanium dialect java large scale scienti computing focused static compilation automated techniques optimization parallel programs coded expressed titanium language 
models java parallel computing stealing jaws agents nin considered 
tigris rst data ow centric programming model knowledge explored java environment 
java compilation high performance applications focused primarily static compilation 
toba rst java bytecode translators commercial products ibm visualage java incorporate static java compilers 
sun hotspot dynamic jit compiler iteratively optimizes compiled java bytecodes execution patterns 
java compilers knowledge focus straightforward optimizations cpu memory usage provide cient garbage collection threads runtime system 
jaguar takes novel approach applying java bytecode transformation enable protected access hardware resources communications believe fundamental concepts jaguar incorporated compilation techniques 
challenges employing java high performance computation communication myriad 
hand clear mismatch existing java virtual machine implementations capabilities modern computer systems potential bene ts java terms software engineering exibility interoperability provide strong incentive ends meet 
java presents opportunity explore new design techniques re evaluate goals high performance system architecture 
tigris cluster substrate coded entirely java enables utilization resources cluster wide achieve high performance light cpu network imbalance 
overcome performance gap java runtime tigris communication needs developed jaguar system provides tight binding java bytecode native machine code access low level system resources 
pre serialized objects uses jaguar provide important performance bene ts tigris fast communication fast object serialization 
demonstrated resource intensive application implemented tigris data ow programming model 
initial performance analysis indicates java environment fact feasible applications requiring large scale parallel anon 
measure transaction processing power 
datamation february 
andrea arpaci dusseau arpaci dusseau david culler joseph hellerstein david patterson 
searching sorting record experiences tuning sort 
proceedings symposium parallel distributed tools 
arpaci dusseau anderson culler hellerstein patterson yelick 
cluster river making fast case common 

www cs berkeley edu postscript river ps 
geweke culler 
implementation analysis virtual interface architecture 
proceedings sc november 
philip joshua coates spencer low david culler 
millennium sort application windows nt dcom river primitives virtual interface architecture 
proceedings rd usenix windows nt symposium july 
chi chao chang thorsten von eicken 
interfacing java virtual interface architecture 
acm java grande conference june 
christiansen schauser wu 
javelin internet parallel computing java 
acm workshop java science engineering computation 
www cs ucsb edu schauser papers javelin pdf 
chun mainwaring culler 
virtual network transport protocols myrinet 
proceedings hot august 
consortium 
virtual interface architecture 
www org 
ibm 
ibm visualage java 
www software ibm com ad 
vladimir susan flynn hummel 
high performance parallel programming java exploiting native libraries 
acm workshop java high performance network computing 
gribble welsh culler brewer :10.1.1.26.4797:10.1.1.26.4797
multispace evolutionary platform infrastructural services 
proceedings th usenix annual technical conference monterey california 
objectspace objectspace voyager 
www objectspace com products voyager 
htm 
sun microsystems enterprise java beans technology 
java sun com products ejb 
sun microsystems java hotspot performance engine 
java sun com products hotspot index html 
sun microsystems java native interface speci cation 
java sun com products jdk docs guide jni index html 
sun microsystems jini connection technology 
www sun com jini 
jason maassen rob van ronald henri bal 
cient implementation java remote method invocation 
proceedings ppopp may 
martin vahdat culler anderson 
ects communication latency overhead bandwidth cluster architecture 
proceedings isca june 
christian michael philippsen bernhard 
cient rmi java 
acm java grande conference june 
university arizona sumatra project 
toba java compiler 
www cs arizona edu sumatra toba 
michael philippsen matthias zenger 
transparent remote objects java 
concurrency practice experience november 
uc berkeley ninja project 
uc berkeley ninja project 
ninja cs berkeley edu 
uc berkeley project 
uc berkeley network workstations project 
cs berkeley edu 
takagi satoshi matsuoka satoshi satoh 
nin parallel objects framework java 
acm workshop java high performance network computing 
www cs ucsb edu conferences java papers pdf 
woo mao 
berkeley jaws project 
www cs berkeley edu cs jaws html 
yelick pike miyamoto krishnamurthy hil nger graham gay colella aiken 
titanium high performance java dialect 
acm workshop java highperformance network computing february 
