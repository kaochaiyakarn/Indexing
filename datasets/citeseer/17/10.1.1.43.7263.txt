fast planning planning graph analysis avrim blum school computer science carnegie mellon university pittsburgh pa avrim cs cmu edu furst school computer science carnegie mellon university pittsburgh pa cs cmu edu final version artificial intelligence introduce new approach planning strips domains constructing analyzing compact structure call planning graph 
describe new planner graphplan uses paradigm 
graphplan returns partial order plan states valid plan exists 
provide empirical evidence favor approach showing graphplan outperforms total order planner prodigy partial order planner ucpop variety interesting natural artificial planning problems 
give empirical evidence plans produced graphplan quite sensible 
searches approach fundamentally different searches common planning methods provide new perspective planning problem 
keywords general purpose planning strips planning graph algorithms planning graph analysis 
introduce new planner graphplan plans strips domains 
algorithm paradigm call planning graph analysis 
approach immediately embarking search standard planning methods algorithm begins explicitly constructing compact structure call planning graph 
planning graph encodes planning problem way useful constraints inherent problem explicitly available reduce amount search needed 
furthermore planning graphs constructed quickly polynomial size built polynomial time 
worth pointing planning research sponsored part wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number 
author supported part nsf national young investigator ccr sloan foundation research fellowship 
second author supported part nsf ccr 
views contained document authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory united states government 
graph state space graph course huge 
fact state space graph plan path graph planning graph plan essentially flow network flow sense 
planning graphs closer spirit problem space graphs etzioni planning graphs domain information goals initial conditions problem explicit notion time 
planning graphs offer means organizing maintaining search information reminiscent efficient solutions dynamic programming problems 
planning graph analysis appears significant practical value solving planning problems inherent complexity strips planning pspace hard see bylander greater complexity standard dynamic programming problems 
provide empirical evidence variety natural artificial domains showing planning graph analysis able provide quite substantial improvement running time 
graphplan planner uses planning graph creates guide search plan 
search performs combines aspects total order partial order planners 
traditional total order planners graphplan strong commitments search 
considers action considers specific point time instance consider placing action move rocket london paris plan exactly time step 
hand partial order planners chapman mcallester rosenblitt barrett weld weld graphplan generates partially ordered plans 
instance veloso rocket problem plan graphplan finds form time step appropriately load objects rockets time step move rockets time step unload rockets 
semantics plan actions time step may performed desired order 
conceptually kind parallel plan knoblock imagine executing actions time steps workers needed load unload fly rockets 
valuable feature algorithm guarantees find shortest plan independent actions may take place time 
empirically subjectively sorts plans particularly sensible 
example stuart russell flat tire world goal fix flat tire return tools back came see ucpop domains list plan produced graphplan opens boot trunk step fetches tools spare tire step inflates spare nuts step forth closes boot step 
see 
significant feature algorithm particularly sensitive order goals planning task traditional approaches 
discussion issue section 
section empirical results demonstrate effectiveness graphplan variety interesting natural artificial domains 
extended appears blum furst definitions notation planning graph analysis applies strips planning domains fikes nilsson domains operators preconditions add effects delete effects rocket domain introduced veloso operators load unload move 
piece cargo loaded rocket rocket cargo location 
rocket may move fuel performing move operation uses fuel 
ucpop format operators define operator move parameters rocket place place precondition neq fuel effect fuel define operator unload parameters rocket place cargo precondition effect define operator load parameters rocket place cargo precondition effect typical problem rockets cargo start location goal moving cargo number destinations 
simple rocket domain 
conjuncts propositions parameters instantiated objects world 
operators create destroy objects time may represented discretely 
example 
specifically planning problem mean ffl strips domain set operators ffl set objects ffl set propositions literals called initial conditions ffl set problem goals propositions required true plan 
action mean fully instantiated operator 
instance operator put may instantiate specific action put object container 
action taken time adds world propositions add effects deletes propositions delete effects 
convenient think doing proposition time step special kind action call op frame action 
valid plans planning graphs define mean say set actions forms valid plan 
framework valid plan planning problem consists set actions specified times carried 
actions time actions time forth 
actions may specified occur time step long interfere 
specifically say actions interfere deletes precondition add effect 
linear plan independent parallel actions arranged order exactly outcome 
valid plan may perform action time preconditions initial conditions 
valid plan may perform action time plan preconditions true time op actions carry truth forward time may define proposition true time add effect action taken time gamma 
valid plan problem goals true final time step 
planning graphs planning graph similar valid plan requirement actions time step interfere 
essence type constraint graph encodes planning problem 
precisely planning graph directed leveled graph kinds nodes kinds edges 
levels alternate proposition levels containing proposition nodes labeled proposition action levels containing action nodes labeled action 
level planning graph proposition level consists node proposition initial conditions 
levels planning graph earliest latest propositions true time possible actions time propositions possibly true time possible actions time propositions possibly true time forth 
edges planning graph explicitly represent relations actions propositions 
action nodes action level connected precondition edges preconditions proposition level add edges add effects proposition level delete edges delete effects proposition level 
conditions imposed planning graph weaker imposed valid plans 
actions may exist action level preconditions exist requirement independence 
particular action level may knoblock describes interesting restrictive notion actions may occur time deletes add effect long add effects important reaching goals 
graph called leveled nodes partitioned disjoint sets ln edges connect nodes adjacent levels 
length path action level proposition level action level similar causal link partial order planner 
load load move fuel fuel fuel unload unload load load move actions time propositions time propositions time actions time propositions time actions time goals planning graph rocket problem rocket pieces cargo start location destination simplicity rocket parameter removed actions names 
delete edges represented dashed lines ops represented dots 
planning graph created graphplan problem action nodes second third action levels 
legally contain possible actions preconditions exist proposition level proposition may exist proposition level add effect action action level delete effect action action level 
allow op actions proposition appears proposition level may appear proposition level 
example planning graph 
requirements planning graphs weak easy create 
section describe graphplan constructs planning graphs domains problems 
particular planning graph action levels graphplan creates property valid plan exists fewer time steps plan exists subgraph planning graph 
worth noting planning graphs overly large 
see theorem 
exclusion relations planning graph nodes integral part planning graph analysis noticing propagating certain mutual exclusion relations nodes 
actions action level planning graph mutually exclusive valid plan possibly contain 
similarly propositions proposition level mutually exclusive valid plan possibly true 
identifying mutual exclusion relationships enormous help reducing search subgraph planning graph correspond valid plan 
graphplan notices records mutual exclusion relationships propagating planning graph simple rules 
rules guarantee find mutual exclusion relationships usually find large number 
specifically fact determining mutual exclusion relationships hard finding legal plan 
ways actions action level marked graphplan exclusive interference actions deletes precondition add effect 
just standard notion non independence depends operator definitions 
competing needs precondition action precondition action marked mutually exclusive previous proposition level 
propositions proposition level marked exclusive ways creating proposition exclusive ways creating proposition specifically marked exclusive action having add edge proposition marked exclusive action having add edge proposition instance rocket domain rocket london fuel rocket initial conditions actions move rocket london paris load alex rocket london time exclusive deletes proposition rocket london precondition second 
proposition rocket london proposition rocket paris exclusive time ways generating op exclusive ways generating second moving 
actions load alex rocket london load jason rocket paris assuming defined initial conditions jason paris time exclusive competing needs propositions rocket london rocket paris 
pair propositions may exclusive level planning graph may start exclusive early levels levels 
instance alex rocket london time alex rocket rocket paris exclusive time time 
power exclusion relations note competing needs notion exclusivity propositions just logical properties operators 
depend interplay operators initial conditions 
consider instance domain rocket domain having move operator 
useful notion item places time just function operators initial conditions specified item started different places continue places 
notion depends definition move fact item starts place 
mutual exclusion rules provide mechanism propagating notion graph 
reason time gamma place move actions perform time gamma exclusive moves different starting locations exclusive competing needs moves starting instance consider creating new artificial goals satisfying requires satisfying half original goals satisfying requires satisfying half 
determining mutually exclusive equivalent solving planning problem 
location exclusive delete preconditions place time propagating constraints allows system important fact planning 
generally different domains exclusion relations propagate variety intuitively useful facts problem graph 
description algorithm high level description basic algorithm 
starting planning graph single proposition level containing initial conditions graphplan runs stages 
stage graphplan takes planning graph stage gamma extends time step action level proposition level searches extended planning graph valid plan length graphplan search finds valid plan case halts determines goals achievable time case goes stage 
iteration extend search loop algorithm discovers plan proves plan having time steps fewer possible 
graphplan algorithm sound complete plan algorithm finds legal plan exists legal plan graphplan find 
section describe algorithm may augmented problem goals satisfiable valid plan planner guaranteed halt failure finite time 
termination guarantee provided partial order planners 
extending planning graphs initial conditions placed proposition level graph 
create generic action level 
operator way instantiating preconditions operator propositions previous level insert action node preconditions labeled mutually exclusive 
insert op actions insert precondition edges 
check action nodes exclusivity described section create actions am exclusive list action 
create generic proposition level simply look add effects actions previous level including ops place level propositions connecting appropriate add delete edges 
mark propositions exclusive ways generating exclusive ways generating second 
demonstrate theorem time taken algorithm create graph structure polynomial length problem description number time steps 
theorem consider planning problem objects propositions initial conditions strips operators having constant number formal parameters 
checking exclusions keeps graphplan instance inserting action unload alex rocket paris time rocket domain graph initial conditions specify alex rocket london 
length longest add list operators 
size level planning graph created graphplan time needed create graph polynomial proof 
largest number formal parameters operator 
operators create new objects number different propositions created instantiating operator 
maximum number nodes planning graph 
operator instantiated distinct ways maximum number nodes action level planning graph mn 
total size planning graph polynomial constant 
time needed create new action proposition level graph broken time instantiate operators possible ways preconditions previous proposition level time determine mutual exclusion relations actions time determine mutual exclusion relations level propositions 
clear time polynomial number nodes current level graph 
empirically part graph creation takes time determining exclusion relations 
empirically graph creation takes significant portion graphplan running time simpler problems total running time large anyway 
obvious improvement basic algorithm described implemented graphplan avoid searching proposition level created problem goals appear pair problem goals determined mutually exclusive 
searching plan planning graph graphplan searches valid plan backward chaining strategy 
planners uses level level approach order best mutual exclusion constraints 
particular set goals time attempts find set actions ops included time gamma having goals add effects 
preconditions actions form set subgoals time gamma having property goals achieved gamma steps original goals achieved steps 
goal set time gamma turns solvable graphplan tries find different set actions continuing succeeds proven original set goals solvable time order implement strategy graphplan uses recursive search method 
goal time arbitrary order select action time gamma achieving goal exclusive actions selected 
continue recursively goal time 
course fortune goal achieved previously selected action need select new action 
recursive call returns failure try different action achieving current goal forth returning failure actions tried 
finished goals time preconditions selected actions new goal set time gamma 
call goal set creation step 
graphplan continues procedure time step gamma 
forward checking improvement approach implemented graphplan helps modestly experiments action considered check sure goal ahead list cut 
words graphplan checks see goal ahead list actions creating exclusive actions currently selected 
goal graphplan knows needs back right away 
memoization additional aspect graphplan search set sub goals time determined solvable popping back recursion learned storing goal set time hash table 
similarly creates set subgoals time searching probes hash table see set proved unsolvable 
backs right away searching 
step addition speeding search needed termination check described section 
example concrete consider rocket problem initial conditions fueled rockets pieces cargo starting location goal move cargo location location problem graph grow contain action levels 
planner select goal say pick action time step unload rocket making true 
marks doable actions exclusive unload rocket time step 
planner selects goal say 
chooses goal true performing unload rocket time notice goal goal list completely cut ways making true exclusive actions committed 
graphplan select unload rocket 
planner done goals level creates new goal set previous time step consisting goals rocket rocket preconditions actions selected 
limited effect goal orderings strategy working subgoals somewhat breadth manner graphplan fairly insensitive goal orderings 
add final feature graphplan search strategy allow statement precise 
goal set time say non exclusive set actions time gamma minimal set actions achieving goal add effect action action removed add effects actions remaining contain modification graphplan strategy recurse minimal action sets 
set actions chosen graphplan achieve goal set minimal back right away 
instance say goals pick action achieving action choose achieve happens achieve 
minimal 
modification allows clean statement goal sets graphplan considers 
specifically state theorem 
theorem goal set time solvable steps 
matter ordering goals goal sets time gamma graphplan considers attempting achieve exactly preconditions minimal action sets time gamma achieving 
solvable steps graphplan may halt considering goal sets 
proof 
forced graphplan consider minimal action sets need show set examined 
set consider arbitrary ordering action achieving goal call goal 
action achieving goal achieved call goal 
generally action achieving goal achieved fa gamma call goal notice actions index way minimal 
ordering actions implies point recursion action chosen graphplan achieve goal occurs point action chosen achieve forth 
actions considered 
quantify limited effect goal ordering follows 
suppose graphplan currently attempting solve problem goals time unsuccessful 
total number goal sets examined search completely independent ordering goals 
effect goal ordering limited amount time takes average examine new goal set perform goal set creation step amount performed final stage problem goals solvable goal ordering may affect order goal sets examined 
addition theoretical statement empirically graphplan dependence goal ordering quite small significantly planners prodigy ucpop 
experimental results natural domains compared graphplan popular planners prodigy ucpop natural planning problems planning literature 
ran prodigy heuristics suggested stone carbonell carbonell personal communication somewhat unfair compare exact running times planners written different languages graphplan written planners compiled lisp partly ran prodigy ucpop faster machine memory ran graphplan decstation planners sparc 
gain useful information curvature plots problems size versus time comparing objective measures 
particular addition running time report graphplan number goal set creation steps number times creates goal set time gamma goal set time total cpu time sec number goals graphplan ucpop prodigy prodigy rockets problem number times selects non noop action try search 
somewhat analogous backward chaining steps taken total order planners 
rocket ran planners rocket domain described setup 
initial conditions locations london paris jfk rockets items cargo 
objects rockets cargo london rockets fuel 
goal get dn objects paris bn objects jfk 
goals ordered alternating destinations 
results experiment 
notice graphplan significantly outperforms planners domain 
graphplan domain main reasons planning graph grows time steps mutual exclusion relations allow small number commitments unloading rocket paris rocket jfk completely force remainder decisions 
particular graphplan performs goal set creation steps regardless number goals number non noop actions tried linear number goals 
size graph created linear number goals nodes total problem goals additional nodes goal 
running time graphplan completely unaffected goal ordering problem 
flat tire natural problem different sort stuart russell fixing flat tire scenario domain init flat tire problem ucpop distribution 
rocket domain valid plan solving problem requires time steps actions 
rocket domain graphplan pretty mutual exclusion propagation mutual exclusions critical ensure goal sets examined 
graphplan solves problem seconds depending goal ordering 
number goal set creation steps ranges minimum maximum number non noop actions tried ranges 
final graph created contains nodes 
ucpop prodigy solution step open boot step fetch wrench boot fetch pump boot fetch jack boot fetch wheel boot step inflate wheel loosen nuts hub step put away pump boot jack hub step undo nuts hub step remove wheel wheel hub step put wheel wheel hub put away wheel boot step nuts hub step jack hub step put away jack boot tighten nuts hub step put away wrench boot step close boot graphplan plan russell problem 
minutes problem standard goal ordering possible find goal orderings succeed quickly 
graphplan fast domain producing shortest partial order plan plan intuitively sensible 
shows plan produced graphplan problem 
monkey bananas ucpop distribution provides monkey bananas problems originally prodigy 
solution third 
srinivasan howe srinivasan howe show experimental results variety partial order planning heuristics domain 
report average running times sparc ipx common lisp seconds methods took seconds took seconds average problem 
report average number plans examined planners task called flaw selection ranging 
graphplan solves problems quickly seconds seconds second seconds unsolvable times decstation 
graphplan attempts non noop actions solving problem second 
unsolvable problem graphplan extends graph time steps point notices problem unsolvable graph leveled remain exclusive goals see section 
problem graphplan able report problem unsolvable performing search 
problems time spent graph creation 
graphs problems contain nodes respectively 
cpu time sec highest goal graphplan prodigy vb snlp vb link repeat domain veloso blythe cpu time sec number goals graphplan bw bw bw domain barrett weld fridge domain ucpop distribution provides refrigerator fixing domains 
graphplan takes seconds performs goal set creation steps attempts non noop actions 
second graphplan takes seconds performs goal set creation steps attempts actions 
problems graphs created contain nodes respectively 
srinivasan howe report times ranging seconds average number plans examined different methods consider 
artificial domains barrett weld veloso blythe define collection artificial domains intended distinguish performance characteristics various planners 
graphplan quite competitive best performance reported 
figures performance data interesting domains 
performance results figures planners taken figures respective papers 
note curves effectively coincide 
number goals graphplan bw bw bw domain barrett weld number goals graphplan bw bw bw domain barrett weld discussion experimental results major factors account graphplan efficiency 
order empirically derived importance mutual exclusion examples pairwise mutual exclusions relations able represent important constraints planning problem 
see discussion section propagating constraints effectively prunes large part search space 
consideration parallel plans cases rocket problem valid parallel plans relatively short compared length corresponding totally ordered plans 
cases cost planning graph construction cost search large 
fixing actions specific points time graphplan able record goal sets proves unreachable certain number time steps initial conditions 
low level costs constructing planning graph advance search graphplan avoids costs performing instantiations searching phase 
furthermore worth noting graph creation quite fast provably polynomial time takes significant fraction total time simpler problems total running time quite short case 
terminating unsolvable problems approximation graphplan conducts iteratively deepened search 
th stage algorithm sees valid parallel plan length equal described far valid plan exists prevents algorithm running forever infinite number stages 
describe simple efficient test added unsuccessful stage problem solution graphplan eventually halt say plan exists 
planning graphs level assume problem valid plan 
observe sequence planning graphs created eventually proposition level proposition levels exactly contain set propositions exclusivity relations 
reason follows 
op actions proposition appears proposition level appears proposition levels 
finite set propositions created strips style operators applied finite set initial conditions proposition level levels exactly set propositions op actions propositions appear level marked mutually exclusive marked mutually exclusive level 
proposition level proposition levels exactly set mutual exclusion relations fact hard see adjacent levels identical levels identical 
point say graph leveled 
quick easy test proposition level graph leveled 
problem goal appear level problem goals marked mutually exclusive level graphplan immediately say plan exists 
notice case graphplan able halt performing search 
happened unsolvable monkey bananas problem discussed section 
cases may plan exists simple test detect 
nice example blocks world blocks goals block top block block top block block top block goals achievable simultaneously 
need slightly sophisticated guarantee termination cases 
test guarantee termination mentioned earlier graphplan records goal sets considered level determined unsolvable 
collection sets stored level unsuccessful stage words unsuccessful stage graphplan determined things plan fewer steps goal sets true time goal sets achievable steps 
modification graphplan ensure termination just graph leveled level stage passed js gamma js output plan exists 
theorem graphplan outputs plan exists problem unsolvable 
proof 
easy direction problem unsolvable graphplan eventually say plan exists 
reason just number sets smaller number sets gamma finite maximum exponential number nodes level 
see direction suppose graph leveled level graphplan completed unsuccessful stage notice plan achieve set step earlier achieve set way graphplan works determined set unsolvable mapping sets time step determining unsolvable 
notice graph leveled gamma gamma levels graph matter additional levels graph 
suppose unsuccessful stage js gamma js implies gamma 
means order achieve set previously achieved set sets contained initial conditions problem unsolvable 
additional features discussed far basic algorithm graphplan 
describe additional features added natural way added options implementation discuss significance 
feature type reasoning quite natural framework 
reasoning current goal set contains goals true time non noop action initial conditions plan require steps 
instance reasoning path finding domain show take steps visit distinct places 
unfortunately finding largest subset goal set equivalent maximum clique problem think created edge propositions true step 
find maximal set greedy methods 
form reasoning turns useful traveling salesman problems goal visit nodes graph steps possible 
dense graphs complete graph problem easy graphplan reasoning quite slow pairwise exclusion relations propagate 
instance complete graph time steps goals form visited non exclusive 
reasoning graphplan performance respectable 
second feature concerns graph creation 
demonstrated theorem graph size polynomial may unnecessarily large irrelevant facts initial conditions 
way problem regression analysis going backward goals determine initial conditions may thrown 
instance rocket problem contains initial conditions rockets fuel number irrelevant observers method identify set aside 
course performing regression analysis takes amount time 
final feature currently implementation added easily ability information learned planning problem problem domain having initial conditions 
specifically graph memoized unsolvable goal sets re case 
discussion described novel planning algorithm graphplan 
algorithm uses ideas standard total order partial order planners differs significantly position representing planning problem graph structure structure analyze annotate play significantly improve efficiency 
performance problems tried indicate provide big savings 
believe significant gains come combining approach graphplan ideas heuristics learning methods developed planning literature 
specifically directions currently considering include learning learning techniques useful planning methods etzioni may 
addition new representation suggest learning approaches considered previously 
symmetry detection times planners behave poorly times symmetries exist problem planner utilize 
representing planning problem graph may allow new methods detecting symmetries drastically reduce search needed 
way searches problems easily solved forward direction reverse 
prodigy instance able create plan forward direction searches goals 
incorporate method planning similar manner 
involve solvable goal sets unsolvable ones 
information propagate graphplan propagates pairwise exclusion relations order speed search 
may sorts information propagated forward backward graph useful 
max flow algorithms original motivation approach planning graphs slight modification allow think planning certain kind maximum flow problem 
view planning flow problem requires additional constraints problem np hard particular constraint certain edges unused fully saturated corresponding fact action may performed performed partially performed 
algorithms max flow problem fast algorithms known cormen goldberg tarjan useful guiding planning process 
empirically approach solely max flow algorithms perform method backward chaining mutual exclusion relations described 
flow method may allow naturally incorporate aspects planning problem having different costs associated different actions natural way 
currently exploring flow algorithms combined current approach improve performance 
limitations open problems main limitation graphplan applies strips domains 
particular actions create new objects effect performing action determined statically 
kinds planning situations problem graph containing source sink nodes edge labeled capacity representing maximum amount fluid may flow edge 
legal flow node source sink flow equal flow 
goal flow fluid possible source sink exceeding capacities 
violate conditions 
instance actions allows planner dig hole arbitrary integral depth potentially infinitely objects created 
suppose action paint room red 
effect action determined statically set objects painted red depends happen room time 
open question planning graph analysis paradigm extended handle settings sorts actions 
second limitation roughly order perform graphplan requires pairwise mutual exclusion relations capture important constraints problem ability perform parallel actions significantly reduces depth graph 
luckily appears tends true natural problems 
section discussed case simple tsp problem occurs graphplan performs poorly extra ad hoc reasoning capabilities 
additional powerful types constraints added graphplan overcome difficult cases 
limitation worth mentioning guaranteeing find shortest possible plan graphplan problems difficult 
instance people solve puzzle usually methodical approach easy perform guarantee solution fewest moves 
find solution fewest moves difficult 
tradeoffs form plan quality speed planning incorporated planning graph analysis paradigm 
accessing graphplan graphplan including source code sample domains animations available www cs cmu edu avrim graphplan html 
jaime carbonell members cmu prodigy group helpful advice 
barrett weld barrett weld 
partial order planning evaluating possible efficiency gains 
artificial intelligence 
blum furst blum furst 
fast planning planning graph analysis 
ijcai pages montreal 
bylander bylander 
computational complexity propositional strips planning 
artificial intelligence 
carbonell personal communication carbonell 

personal communication 
chapman chapman 
planning conjunctive goals 
artificial intelligence 
cormen thomas cormen charles leiserson ronald rivest 
algorithms 
mit press mcgraw hill 
etzioni etzioni 
structural theory explanation learning 
phd thesis cmu december 
cmu cs 
fikes nilsson fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
goldberg tarjan andrew goldberg robert tarjan 
new approach maximum flow problem 
proceedings eighteenth annual acm symposium theory computing pages 
knoblock knoblock 
generating parallel execution plans partial order planner 
aips pages chicago 
mcallester rosenblitt mcallester rosenblitt 
systematic nonlinear planning 
proceedings th national conference artificial intelligence pages july 
srinivasan howe srinivasan howe 
comparison methods improving search efficiency partial order planner 
ijcai pages montreal 
stone stone veloso blythe 
need different domainindependent heuristics 
aips pages chicago 
veloso blythe veloso blythe 
examining causal link commitments partial order planning 
aips pages chicago 
veloso veloso 
nonlinear problem solving intelligent casual commitment 
technical report cmu cs carnegie mellon university december 
weld weld 
partial order planning 
ai magazine 

