integrating group communication transactions implementing persistent replicated objects little shrivastava department computing science university newcastle newcastle tyne ne ru england widely computational model constructing fault tolerant distributed applications employs atomic transactions controlling operations persistent objects 
considerable data replication techniques increasing availability persistent data manipulated control transactions 
process groups ordered group communications process groups short emerged model building available distributed applications 
high service availability achieved replicating service state multiple processes managed group communication infrastructure 
models seen rivals 
examines distributed transaction system profit process groups supporting replication objects 
general model distributed objects investigate objects replicated availability system supports transactions process groups system supports process groups transactions 
comparative evaluation reveals distributed transaction system exploit group communications obtaining flexible approach supporting replication objects 
key words distributed systems fault tolerance persistent objects group communication atomic transactions replication 
widely computational model constructing fault tolerant distributed applications employs atomic transactions atomic actions controlling operations persistent long lived objects 
considerable amount done data replication techniques increasing availability persistent data manipulated control transactions 
process group ordered group communications process groups short emerged model building available distributed applications 
high service availability achieved replicating service state multiple server processes managed underlying group communication infrastructure 
models seen rivals example suggested transactional systems better alternative process groups claim denied supporters process group approach 
attempts unify models main thrust enrich group communication transactional flavour 
explores role models building fault tolerant distributed applications 
focussed manner dealing just replication persistent objects exploring system design issues addressed previous studies 
approach exploring ways transactions group communications quite pragmatic investigate transaction systems process groups way round hinted 
envisage distributed applications increasingly rely called middleware services support naming concurrency control event management persistence corba industry backed distributed object architecture adopted transactions application structuring paradigm manipulating long lived objects transaction services available corba platforms alongside services mentioned 
addition availability corba group communication services possibility supporting object replication way 
applications programmed transactions worth investigating benefits gained exploiting group communication replicating transactional objects 
show case 
ideas transaction systems group communication supporting high availability distributed applications directly applicable corba similar architectures 
earlier version appeared 
presenting model distributed object system replication 
claim model universal representative sufficiently wide class real systems 
investigate objects replicated availability types systems system supports transactions process groups object replication approaches termed transaction tr short ii system supports process groups transactions object replication approaches termed group communication gc short 
evaluate approaches 
evaluation enables understand distributed transaction system exploit group communications obtaining flexible approach supporting replication objects 
assume special hardware support replication mirrored disks tightly coupled primary backup processor clusters consider just distributed collection processors secondary storage 

models 
assumptions assumed hardware components system computers nodes connected communication subsystem 
node assumed specified simply working crash 
crash node repaired finite amount time active 
node may stable crash proof non stable volatile storage just non stable storage 
data stored volatile storage assumed lost crash occurs data stored stable storage remains unaffected crash 
model communication environment asynchronous synchronous 
asynchronous environment connected correctly functioning processes capable communicating bounded unknown time time interval sending message reception receiver estimated accurately synchronous environment connected correctly functioning processes capable communicating bounded known time 
network said partitionable correctly functioning processes able communicate due physical breakdown crash gateway node network congestion 
asynchronous environment partitions timeouts network level ping mechanisms act accurate indication process failures failures synchronous environment assuming partitions judiciously chosen timeouts network level ping mechanisms act accurate indication process failures 
assumption asynchronous partitionable communication environment assume partition network eventually repaired 
consider case strong consistency requires states replicas regarded available mutually consistent persistent states available replicas required identical 
object replicas managed appropriate protocols ensure strong consistency 
distributed non replicated objects object instance class 
class defines set instance variables object contain operations methods determine externally visible behaviour object 
operations object access instance variables modify internal state object 
operation invocation remote object performed remote procedure call rpc 
assume objects persistent simply mean long lived entities 
objects assigned unique identifiers uids naming 
assume application specific naming service map application level object name string corresponding uid 
discuss naming scheme assume application obtain uids objects manipulating 
persistent object assumed held passive state state residing object store stable object repository activated demand invocation loading state object store volatile store associating object server process receiving rpc invocations 
able access persistent object application program able obtain information object location 
assume application program request information binding service presenting uid object 
application program client obtained location object direct invocations node 
responsibility node activate object object passive state 
number system services required support distributed computations structured objects 
enumerate rpc service provide object invocation facility object storage service provide stable storage repository object states state retrieved presenting service uid object 
binding service provides mapping uid necessary information required binding object information host name object server host name object store see 
binding service assumed run known address 
binding service object uid 
nodes invoke op uid node node object store server object binding 
assume persistent object node say functioning capable running server object effect require node access executable code object methods 
receives invocation client object passive object needs activated invocation performed requires allocating server necessary loading executable code object fetching object state object store 
assume node say object store contains state object require 
assume binding service maps uid location related information pair 
fig 
illustrates steps involved case object passive client presents uid object binding service sends invocation perform operation op node 
node allocates server gets state object store perform operation 
termination application new states objects migrated object stores 
assume objects shared clients object server responsible enforcing concurrency control objects shared read exclusive write 
example client invokes object invocation sent direct invocation activated copy managed object model set objects binding service requirement simple needs provide read access location information 
assume copy information held stable store see 
model goes long way supporting ability recover total crashes nodes crash system eventually bootstrap information held stable stores remaining consistent provided partitions eventually heal crashed nodes eventually recover 
inconsistency creep application unable terminate cleanly due crashes servers managed update stable stores transactions precisely avoid situation 
invocation client give rise nested invocations methods object contain calls objects 
activated object activating objects 
sake simplicity consider nesting subsequent discussions 
hint interesting extension model complicates matters 
assume nodes capable running object server object binding service list nodes 
guarantee consistent object sharing ensure object active active object server 
possible activation policy passive object binding service returns list enabling client select appropriate node 
object active service returns identity node object activated 
clearly object binding complicated requiring interaction object servers binding service related issues need addressed consider replication objects 

object replication scheme shown fig 
object potentially unavailable client communication paths get disrupted due partitions nodes hosting binding service crash 
assume direct control communication resources investigate exploitation redundancy form multiple machines capable running servers object multiple machines capable storing state object 
binding service needs maintain sufficient information replicas enable clients bound available replicas 
assume persistent object binding service maintains sets node related data sva object set contains names nodes capable running server ii sta set contains names nodes object stores contain states way information maintained binding service depend replication approach tr gc 
consider ways activating object assume currently passive 
single copy activated represents case state object replicated see fig 

activating consist creating server node member sva say loading state nodes sta 
server crashes new created node sva 
object server object states object state replication 
ii multiple copies activated activating consist creating servers nodes listed sva sva sva sva set nodes loading state object node sta 
server state replication 
process group group servers sva managed single entity 
known group management policies active replication active replication functioning members group perform processing 
course necessary functioning members receive client invocations order computation performed replica deterministic 
ii primary backup replication replica primary coordinator carries processing 
primary regularly checkpoints state remaining replicas cohorts 
failure primary detected cohorts elect new primary continue processing 
cases initial membership group sva 
partitions cause group broken sub groups majority subgroup members remains functioning sub groups delete 
clients access majority group continue forward progress 
binding service replicated times clients access majority name service replicas forward progress 

atomic transactions atomic transaction guarantees despite failures conducted scope performed undone 
atomic transactions known acid properties atomicity consistency isolation durability 
atomicity property ensures computation terminated normally committed producing intended results intended state changes objects involved aborted producing results state changes objects 
atomicity property may obtained appropriate backward error recovery invoked failure occurs masked 
typical failures causing computation aborted include node crashes communication failures continued loss messages 
assumed absence failures concurrency invocation operation produces consistent class specific state changes object 
transactions ensure consistent state changes objects take place despite concurrent access failures 
consistency property goes hand hand isolation property ensures freedom interference transaction accesses shared objects interfering transactions 
words effect concurrently executing transactions shown equivalent serial order execution 
form concurrency control policy enforced phase locking required ensure isolation consistency properties transactions 
reasonable assume transaction terminates normally results produced destroyed subsequent node crashes 
ensured durability property requires committed state changes new states objects modified transaction recorded stable crash proof storage 
phase commit protocol required termination transaction ensure objects updated transaction new states recorded stable storage transaction aborts updates get recorded 
atomic transactions nested effects nested transaction provisional commit abort outermost top level atomic transaction 

process groups group defined collection distributed entities objects processes member entity communicate members multicasting full membership group 
desirable property multicast atomic functioning members delivered message 
additional property interest guaranteeing total order functioning members delivered messages identical order 
example properties ideal replicated data management member manages copy data atomic delivery total order ensured copies data diverge 
discuss achieving properties presence failures simple 
suppose multicast interrupted due crash member making multicast result members receiving message 
member crashes ideally handled fault tolerant protocol manner member crash functioning members promptly observe crash event agree order event relative events system 
asynchronous environment impossible achieve members prone failures impossible guarantee functioning members reach agreement finite time 
impossibility stems inability process distinguish slow members crashed ones 
asynchronous protocols circumvent impossibility result permitting processes suspect process crashes reach agreement processes suspect crashed 
group needs services membership service executes agreement protocol ensure functioning members group identical views group membership 
membership service ensures sequence views installed functioning member processes group suspect identical 
network partitions lead group processes partition subgroups mutually unsuspecting processes 
primary partition membership service members subgroup primary subgroup continue function members subgroups deemed faulty 
normal way deciding primary select subgroup majority members original group 
partitionable membership service hand permits subgroups processes coexist merge see discussion partitionable membership service 
assume primary partition membership service 
failure model process groups differs transaction model important way member group fails crashing looses state members stable states 

tr gc replication comparative evaluation investigate replication schemes broadly similar functionality implemented tr system supports transactions process groups gc system supports process groups transactions compare 
single copy activation scheme state replication tr approach fig 

single server activated backup created failure original server suspected need rely group communication managing server 
primary backup replication scheme server state replication fig 
gc approach 
primary server processing backup takes primary fails scheme resembles single copy activation scheme tr 

tr replication stated replication scheme considered requires single copy object activated 
regards state replication replicated data management techniques go hand hand transaction commit processing provide integrated solution object state management 
binding service plays central role maintaining date sv st related group view information 
assume possible update sv st related information objects maintained naming binding service 
example possible exclude name node currently sta node contain latest committed state object say node crashed 
assume binding service built persistent objects state changes naturally performed control transactions 
assume service available discuss issues concerning replication 
overview simple case client accessing object assume object passive recorded binding service 
client binding request returns sets sva sta enabling client select appropriate server node 
client directs invocation node sva say allocates server loads state node sta 
discussed case non replicated objects see fig 

identity activated server registered binding service subsequent binding requests return place sva 
commit time attempt copy updated state object object stores nodes sta 
ensure sta contains names nodes mutually consistent states names nodes copy operation failed removed sta 
transaction abort crashes suspected crashed execution 
restarting transaction cause activated node sva 
aspects discussed help fig 
server unbind application server bind time binding performed nested transactions 
binding prior contacting binding service client say begins application level transaction 
guarantee consistency presence concurrent bind requests object binding atomic operation 
achieved performing binding related operations mentioned earlier transaction nested transaction server bind fig 

object passive manages get server binding service update record object active performed apart nested transaction time count object maintained service set indicating user 
subsequent bind request say activated object return address node 
part bind transaction try connect server succeeds count incremented bind transaction terminated 
unable connect suspects crash server free select node sva activate object entry replaced identity new node count 
note suspicion incorrect server functioning say temporary partition inconsistency object activated place resolved 
done commit time describe shortly 
application level transaction aborts binding binding related updates binding service undone 
unbind performed transaction see fig 
executed commit processing application level transaction 
client contacts binding service check binding inconsistency detected client aborts 
client decreases count 
count reaches zero server told object binding service treat object passive 
commit processing involves updating states held nodes sta 
names nodes updates fail removed set sta kept binding service 
ensures set maintains names node latest state object 
binding service available times 
requirement met replicating service distinct nodes 
eliminate requirement service requiring binding system replicated objects simplifying restrictions nodes storing sv st related data objects run servers ii client expected know locations nodes binding service addresses known iii client updates binding data allowed majority replicas updated client action aborts 
means client contact majority binding servers sure obtain binding information 
known quorum consensus replication approach 
forward progress possible majority assumption met application level processing block till nodes recover partitions heal 
summary binding service activate bind unbind objects consistent manner set nodes sv object provide redundancy server creation set nodes st provide redundancy storage 
long client access binding service object remains available provided client access node sva node access node sta 
final observation scheme illustrated fig 
shortcoming binding information concerning object remains locked entire duration application level transaction service access performed nested transactions 
considered concurrency control bottleneck alternative concurrency control scheme possible bind unbind transactions run nested top level transactions details discussed 

gc replication describe basics primary backup passive replication scheme process group discuss groups object model 
process groups explicitly deal message passing describe illustrate scheme terms messages treatment 
time primary backup passive replication 
assume clients know name primary replica group replica group members backups fig 

client sends request message primary 
primary carries updates state multicasts message containing state changes performed 
update states send primary messages 
primary sends response message 
primary suspected failed membership service group reformulate group primary removed 
deterministic algorithm members deciding primary 
atomic delivery property multicasts ensures backups remain step 
example assume primary crashes multicast delivered message delivered 
continuing scenario client waiting response eventually timeout 
assume finds name primary resends request 
primary received sends response message redoing 
returning object model referring fig 
see groups manage replicated object suggested server group state group denote gs gt respectively 
server group performs computation simplification possible need gt dispensed 
process group manages membership view information binding service longer required maintain current membership information activated groups 
binding service maintain information group activated activated group primary binding service maintains list st contain names nodes latest states persistent objects 
possible steps involved activating object 
client contacts binding service receives sets sva sta 
client constructs list nodes sva listed primary requests say create group creates group gs registers name primary binding service 
primary gs acts client obtain persistent state object node sta 
multicasts state members gs 
client sends requests primary gs normal object invocations handled discussed earlier respect fig 

group elects new primary newly elected primary registers identity binding service deleting name old 
client finishes explicitly sends disconnect invocation primary gs 
group object state persistent updating object stores named sta corresponds commit operation transaction system 
steps involved primary updates object stores named sta list nodes updates succeeded ii primary removes names nodes sta set maintained binding service 
group determines users possible calculate provided connected clients survive able communicate group primary group unregister name binding service group destroyed 
scheme forward progress possible despite partitions node failures provided primary subgroup gs survives remains connected client group able access binding service object store sta 
possible consistency guaranteed 
example suppose step ii group members crash call group failure result sta list binding service updated required 
case list guaranteed contain names nodes latest states persistent objects 
problem handled maintaining careful manner group configuration information stable store primary group configuration reconstructed group failure way group resume interrupted operation papers discuss enhance process groups capability recovering group failures 
problem remains support backward recovery client crashes automatic way restoring states objects 
binding service available quite simply assume process group members known addresses created start time remains operation 

integrated replication schemes 
comparative evaluation evaluate schemes discussed previous section considering effectiveness meeting requirements ability recover total crashes nodes crash system eventually bootstrap information held stable stores remaining consistent provided partitions eventually heal crashed nodes eventually recover availability objects remain accessible partitions nodes recovered 
replication transactions transactions ideally suited meeting requirement ability recover total crashes surprising designed specifically purpose 
transactions ensure shared information held stable store manipulated consistently despite failures 
powerful facility utilised building facilities directly supported transactions 
transactions provide direct support maintaining replica group related information build subsystem transactional binding service case exactly 
mechanism making binding service available heavyweight requiring clients read majority sure obtaining latest copy information 
transactions limited quite effective manner supporting availability 
way dealing server failures suspected real push problem application level transactions bound server affected transaction abort rebind new server forward progress 
transactions provide direct support agreeing failure suspicions consistency problem caused pushed applications 
scheme discussed inconsistent server bindings checked commit time offending transactions aborted 
replication group communications contrast transactions process groups provide elegant way managing replicas general case partitionable environments functioning processes wrongly suspected failed 
long formation primary server subgroup possible server failures masked clients 
coordinated backward recovery integral feature process groups direct way dealing client failures real suspected 
process groups directly support ability recover total crashes 
indicated earlier require enhancing process groups support maintaining views stable store groups reconstructed group failures 
summary transactions dealing total crashes extra effort required maintaining replica group related information ensuring inconsistent bindings occur due servers wrongly suspected crashed 
process groups managing replica server groups need additional support dealing total crashes client failures 

transaction systems process groups light analysis previous subsection discuss system models 
reasons investigate transaction systems process groups practical benefits gained 
assume transactions directly application programmers process groups essentially hidden application programmers 
transactions provide effective solution dealing exceptions masked abort retry 
approach dealing server failures recovering inconsistent bindings servers 
applications transactions way exploit transactions handling problems replication 
application known argument system design see application level mechanisms handling lower level problems 
argument preclude specific lower level mechanisms masking exceptions mechanisms enhance efficiency 
transaction system profitably process groups supporting replication ways supporting binding service replication process group members maintain binding service 
clients need contact primary need reading replicas voting eliminated 
ii fast switch failed server process group provide faster way switching backup event failure primary 
described previously transaction system entail transaction aborting rebinding 
commercial transaction systems fact primary backup process groups specialised manner primary secondary pair non partitionable communication environment carefully chosen timeouts relied failure detection 
process groups provide functionality general setting replicas partitionable communication environment 
iii supporting active replication active replication preferred choice supporting high availability services masking replica failures minimum time penalty considered highly desirable 
active replication requires functioning members server group receive client invocations order 
process group provide facility 
gb client gs process groups 
object stores general scheme exploitation process groups depicted fig 
gb group managing transactional binding service gs server groups created gs demand discussed earlier 
designed toolkit corba architecture mind 
default implementation supports pure transaction approach discussed section 
toolkit necessary hooks exploiting services process group corba group service enabling client precisely client proxy invoke group group specific multicasts required 

concluding remarks carried investigation understand transactions group communications process groups exploited construct high availability distributed applications 
particular investigated transaction system benefit underlying group communication system 
show transactions supporting replication persistent objects need process groups underlying infrastructure support process groups exploited effectively binding service replication providing faster switch backups supporting active replication 
investigated group communication fully replicated database system 
distributed system model different assumed unit replication entire database binding service required study reinforces observation transaction systems benefit group communication services 
supported part uk engineering physical sciences research council gr british telecom esprit working group broadcast project 
bernstein concurrency control recovery database systems addison wesley 
guerraoui felber system support object groups proceedings acm conference object oriented programming systems languages applications oopsla 
birman process group approach reliable computing cacm pp 
december 
moser melliar smith totem fault tolerant multicast group communication system cacm april pp 

narasimhan replica consistency corba objects partitionable distributed systems distributed systems engineering journal pp 

dolev malki transis approach high availability cluster communication cacm april pp 

macedo shrivastava newtop fault tolerant group communication protocol th ieee intl 
conf 
distributed computing systems vancouver may pp 

cristian synchronous asynchronous group communication cacm april pp 

cheriton skeen understanding limitations causally totally ordered communication proc 
th acm symp 
operating systems principles operating systems review pp 
december 
rebuttals cornell operating systems review january 
schiper raynal group communication transactions distributed systems cacm april 
felber guerraoui schiper implementation corba object group service theory practice object systems pp 

morgan shrivastava little design implementation corba fault tolerant object group service proceedings nd ifip international working conference distributed applications interoperable systems helsinki june 
little shrivastava understanding role atomic transactions group communications implementing persistent replicated objects advances persistent object systems ed 
morrison jordan atkinson morgan kaufman isbn pp 

schneider implementing fault tolerant services state machine approach tutorial acm computing surveys december pp 

fischer lynch paterson impossibility distributed consensus faulty process acm april pp 
chandra toueg unreliable failure detectors reliable distributed systems acm pp 

babaoglu montresor group communication partitionable systems specification algorithms chapter book 
gifford weighted voting replicated data th symposium operating system principles december 
little shrivastava maintaining information persistent replicated objects distributed system icdcs pittsburgh pp 
may 
little shrivastava object replication broadcast project deliverable report vol october dept computing science university newcastle tyne uk www newcastle research ec org broadcast trs year deliv html guerraoui schiper software replication fault tolerance ieee computer april pp 

dolev efficient message ordering dynamic networks acm symp 
principles distributed computing podc may 
shrivastava enhancing replica management services tolerate group failures nd ieee international symposium object oriented real time distributed computing saint malo may pp 

chapter book 
saltzer reed clark argument system design acm trans 
comp 
syst nov pp 

little shrivastava implementing high availability corba applications java ieee workshop internet applications san jose july 
kemme alonso suite replication protocols group communication primitives proc 
th ieee intl 
conf 
distributed computing systems icdcs amsterdam may pp 

