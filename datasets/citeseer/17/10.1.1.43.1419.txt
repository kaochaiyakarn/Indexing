erg ra models thms th emb ly rob lem giorgio gallo stefano pallottino dipartimento di informatica universit di pisa corso italia pisa italy consider problem finding optimal set feasible assembly operations order derive desired product set parts 
show optimal solutions different objective functions obtained means computationally efficient hypergraph algorithms 
particular consider case wants minimize duration unlimited degree parallelism 
new fast algorithm order assign operations robots optimal way degree parallelism bounded 
technical report tr march revised july research supported dell universit della ricerca scientifica tecnologica national project dei nei sistemi di 
robotic assembly systems types items produced assembling parts input properly defined assembly plan 
assembly plan sequence feasible assembly operations allow derive desired product parts 
feasible assembly operation operation connects sub assemblies order obtain new sub assembly final product note input parts considered sub assemblies cardinality 
systems type characterised high degree flexibility order allow quick switches type product recover easily errors unexpected events may require changes assembly plan 
crucial point capability generating updating assembly plans efficient way 
alternative ways represent relations different feasible assembly operations approaches find space feasible assembly operations optimal sequence yielding desired product proposed literature practice 
quite promising approach hypergraph models represent derive assembly plans 
directed hypergraphs proven elegant computationally efficient tool model solve relevant combinatorial optimization problems :10.1.1.54.829
attempt lay basic blocks theory directed hypergraphs 
consider assembly problem defined variants computationally efficient algorithms solution 
organized follows 
second section hypergraphs related concepts introduced 
section assembly problem formal way show hypergraphs model 
section particular problems considered problem finding minimum cost assembly problem finding minimum duration assembly hypothesis unlimited number robots working parallel section algorithm finds optimal sequencing operations assembly plan fixed number robots 
final comments directions section 

directed hypergraphs hyperpaths flows 
graphs directed hypergraph simply graph pair set nodes set arcs arc tail head 
size graph depends cardinality tails arcs size 
size graph bounded denotes maximum cardinality tails 
represented backward arc simply arc represented forward arc simply arc obtained arc reversing order tail head 
inverse graph graph obtained reversing order arc clearly inverse graph graph 
fig 
arc arc interesting subclass graphs class acyclic graphs graphs possible re number nodes way arc ut order called topological order 
graph fs vt denote forward star node bs denote backward star 
inverse graph forward star takes place backward star vice versa 

paths paths path od length graph sequence od nodes origin destination od respectively 
say node connected node graph path xy exists path od minimal acyclic graph xn connected node connected node path xy exists graph define paths paths reversing definitions introduced 
note node connected connected graph connected connected graph definitions connection introduced generalized follows set nodes say node connected graph connected obtained addition new origin node arc xs 
fs vt bs denote forward star backward star node path respectively 
note bs 

visits graph consider problem visiting graph backward fashion starting destination node order find nodes connected resulting procedure backward visit gives set paths having common destination paths define tree rooted paths described means successor function sv sv points arc efs follows node path 
easy check backward visit runs size time mt time maximum cardinality tails note visit belongs set paths having common destination sv 
procedure backward visit sv sv nil repeat select remove iq bs tt sv sv procedure 
consider case connection 
procedure path visit returns set paths containing nodes connected origin node paths define tree rooted case predecessor function pv 
counter arc gives number nodes tail removed procedure path visit pv pv nil repeat select remove iq fs pv pv procedure 
procedure path visit runs size time mt time 
path connecting origin destination call characteristic vector path function number distinct paths node destination 
easy prove characteristic vector solution recursive equations fs characteristic vector easily computed backward fashion procedure takes advantage acyclicity procedure visit inverse topological order fs procedure 
procedure visit runs size time time 

weighted graphs weighted graph arc assigned real value called weight 
path weighting function mean node function assigns weights nodes depending weights arcs 
weight chosen weighting function 
additive weighting functions weighting functions weight node written weight arc entering plus function weights tail nodes yv 
consider particular additive weighting functions distance value 
distance nodes yn defined recursive equations max xt ebs yn length value solution recursive equations xt ebs yn cost xt non negative real coefficient 
problem finding minimum weight paths origin nodes connected viewed natural generalization shortest path tree problem standard digraphs 
problem equivalent problem finding solution generalized bellman equations min ebs yn 
efficient algorithms solution arbitrary graphs 
consider simpler case graph acyclic 
particular case minimum weight path rooted node computed algorithm visits nodes topological order 
procedure sbt acyclic ebs pv procedure 
function chosen max function arc weights lengths minimum distance path obtained weighted sum arc costs chosen minimum value path obtained 
note cases evaluation runs time procedure sbt acyclic runs size time mt time 

hypergraph formulation assembly problem set distinct parts 
assembly item obtained properly connecting parts cardinality assembly number parts contains part assembly cardinality 
assumption parts assembled 
just assume assemblies connected order yield larger assembly assembly operation defined 
sake simplicity assume assemblies say unique way connect resulting assembly shall denote corresponding assembly operation called feasible operation assumption lead loss generality fact order deal case assembly obtained connecting alternative ways sub assemblies replace assembly number copies equal number different possible connection modes 
shall denote set feasible operations 
assembly assembly plan respect minimal set necessarily distinct assemblies pp elements feasible operation 
minimal mean proper subset assembly plan 
assembly plan defines unique way set operations performed derive product set parts shall denote set operations defined plan state assembly problem formal way set distinct parts set assemblies binary operation defined assembly operation weighting function cost duration defined set assembly operations distinguished element find assembly plan minimizes function weights operations 
assembly problem defined essence difference assumption parts distinct allows give compact representation problem terms hypergraphs show 
instance assembly problem acyclic graph associated pw qq node dummy node considered origin graph 
denote number nodes number arcs respectively 
graph acyclic arc go nodes corresponding assemblies smaller cardinalities node corresponding assembly larger fact cardinality equal sum cardinalities 
operation order represent operation arc consider assemblies distinct assemblies duplicating node corresponding topological order nodes easily obtained ordering nondecreasing cardinality associated assemblies ties broken arbitrarily 
proposition follows directly definitions path assembly plan states formal way correspondence instances assembly problem associated graphs 
proposition correspondence set paths set assembly plans 
proposition follows problem finding assembly plan reduced problem finding path proposition path arc number times operation corresponding performed assembly plan corresponding 
proof proof induction inverse topological order nodes path starting back clearly statement true characteristic value fact operation corresponding arc having head performed 
assume true nodes arc having node head performed times assembly plan corresponding recalling fs denote forward star characteristic value obtained fs equal number copies required operations input assemblies 
number times operation corresponding performed proof completed 
principle may contain nodes corresponding assemblies built means feasible operations starting parts assembly plan 
assemblies correspond nodes belong path 
delete nodes arcs incident saving storage needed represent assembly problem 
performed easily applying procedure backward visit returns set nodes connected fact node corresponds assembly definition obtained properly connecting parts connected easy check necessary sufficient condition belong path connected set nodes visited backward visit sub graph induced contains paths contained fact union 
clearly place allows save computer space save time solution assembly problem 
note computed linear time fact constant procedure backward visit runs time 
notice graph model assembly plan corresponds tree due fact model contains copies part number times part needed 
model number times part characteristic value path example consider types parts needed construction front wheel hub bicycle cone axle ball hub shell 
way parts assembled obtain hub described fig 
fig 
paths correspond alternative assembly plans parts indicated initials axle assemblies list parts contain due symmetry hub distinction right left side 
note paths value characteristic vector nodes exception parts value fact copies parts needed 
ca bh ca bh eca fig 

optimal assembly plans unlimited parallelism case consider problem find optimal assembly plan case unlimited number robots available 
objective function shall consider different cases case operation cost wants minimize total assembling cost case operation duration wants find minimum time needed construct final product 
shall distinction operations corresponding operation yields shall denoted 

minimum cost plan assume operation cost cost operation 
assembly plan cost obtaining different assemblies generated plan defined recursively pq 
formula defines particular value function problem finding minimum cost assembly plan reduces problem finding minimum value path solved algorithm sbt acyclic shown section 

minimum duration plan different type problem operation assigned execution time wants know minimum time needed order obtain desired product 
execution time duration operation time part available assembling units robots 
assume system unlimited degree parallelism assume perform parallel operations needed 
plan minimum time needed obtain assemblies recursive formula pq max 
formula defines distance function problem finding minimum duration assembly plan reduces problem finding minimum distance path solved algorithm sbt acyclic shown section 
optimal scheduling assembly plan practice number available robots fixed actual duration assembly plan larger algorithm sbt acyclic 
consider problem assign operations robots order minimize actual duration assembly plan number robots 
unfortunately problem np hard 
fact theorem holds 
theorem problem assigning operations belonging assembly plan robots order minimize total duration np hard 
proof reduction subset sum problem known np complete 
subset sum problem set integers partition subsets show polynomial reduction problem problem assigning optimally operations assembly plan robots exists 
assuming loss generality integer build assembly plan defined pp duration operations defined follows 
clearly subset sum problem solution optimal assignment operations assembly plan robots total duration equal solve polynomial time problem assigning operations assembly plan number robots order minimize total duration solve polynomial time subset sum problem 
assembly plan sake simplicity assume parts available time denote corresponding path characteristic vector shall denoted heuristic algorithm parallel assembly number robots assigns operations robots 
algorithm data structures 
number copies currently available assigned candidate operation number copies needed assembly plan output operations assigned robots output candidate operations 
functions implemented vectors ii set candidate operations contains operations currently ready performed assigned robot 
subroutine init initializes set vectors procedure init 
subroutine extract selects operation deletes defined 
iii list operations assigned robot assembly produced operation assigned robot completion time respectively 
initially procedure assign candidate operations arbitrarily assigned robots updated accordingly 
note clear problem trivial robots sufficient 
termination provides schedule th robot pa max completion time assembly plan 
subroutine append appends operation list updating accordingly defined 
iv priority queue contains indices robots currently working ordered non decreasing values 
procedure initializes indices robots assigned operation procedure assign 
procedures select min remove update perform typical operations priority queues selection minimum key element removal elements updating internal structure needed 
algorithm parallel assembly 
procedure parallel assembly pa init assign repeat select min exists append remove extract append update pa 
execution instruction select min corresponds fact robot completed operation total number selections equal total number operations performed order complete assembly plan number iterations algorithm equal total number operations performed 
number iq total number initial parts fact assembly operations reduces unit total number available subassemblies 
implemented heap algorithm parallel assembly runs 
fact iteration expensive operation heap updating performed logr time 
assume loss generality operations ordered way operation selected algorithm assigned robot operation operations ordered increasing value starting time solution provided algorithm 
denote time operation started schedule provided parallel assembly duration respectively 
clearly pa total completion time 
denote sum duration operations longest sequence operations starting output operation inputs operation corresponds longest path nodes tail head 
lemma holds true opt optimal minimum completion time 
lemma initialization phase parallel assembly yields optimal assignment optimal completion time pa opt 
trivial lower bound holds opt opt max max 
give upper bound pa operations removed note initialization removal operations performed removal remains empty 
observe total completion time interval pa partitioned intervals pa property interval number available operations operations currently executed belonging current set greater second interval number available operations equal define 
set set operations completed interval 
theorem holds theorem relative error solution provided parallel assembly bounded proof schedule provided parallel assembly robot working interruption interval pa 
robot performs operation th 
operation assigned robot belong starting time 
set operations belonging assigned robot ic pa ic 
inequalities derive fact time time robots continuously performing operations start time belong pa ic ic ic lemma follows rt pa pa opt opt ic ic ic ic operation available assigned robot operation uses input output remains true time pa defines path hypergraph ic 
follows rt pa proof completed 
far assumption procedure extract selects operation performed 
principle criterion goodness solution yielded algorithm strongly affected selection policy shown example fig 
operations unit duration 
fig 
algorithm starts 
operations selected increasing order indices case robots parallel assembly gives solution robot performs operations sequence sequence 
total completion time solution obtained 
easy see elements selected decreasing order indices robots assigned sequences completion time fact solution optimal 
reasonable selection policy procedure extract select iteration operation head connected root destination node longest maximum duration path policy lead example fig 
choice operations assigned robots respectively yielding optimal solution 
implement policy need know node head operations duration longest path root 
computed linear cost means top visit path visit starts root 
version parallel assembly call priority parallel assembly obtained allowing extractions insertions iteration operations currently available inserted operation extracted head connected root longest path 
version obtained properly implementing modifying repeat loop follows insert procedure inserts extract selects removes operation head connected root longest path repeat select min exists insert remove extract append update set maintained ordered partially ordered complexity algorithm increases 
instance binary heap implement factor logq added complexity step complexity 
worth noting case operation equal duration priority parallel assembly yields optimal schedule 
fact set obtained replacing operation number copies equal number times operation performed assembly plan partial order induced operations precedence relation represented directed tree rooted final operation 
selection policy priority parallel assembly corresponds select step nodes farthest root tree 
hu proved policy optimal case unit duration operations 

investigated formal way approach hypergraphs solution assembly problem 
particular shown minimum cost minimum duration assembly plans linear time algorithm proposed previous 
considered problem performing operations assembly plan fixed number robots order minimize completion time 
new algorithm problem runs logr time total number initial parts number robots 
relevant problems remain open 
theoretical experimental analysis different possible implementation alternatives set problem finding assembly plan minimizes total duration bounded degree parallelism 
fact algorithms problem solved heuristically constructing minimum duration plan unlimited parallelism assigning operations robots optimal way 
problems currently investigation addressed forthcoming 
bibliography ausiello sacc minimal representation directed hypergraphs siam computing 
baldwin 
lui de whitney integrated computer aid generating evaluating assembly sequences mechanical products ieee trans 
robotics automation 
coles glenn glenn complete bicycle manual crown publishers 
de whitney simplified generation mechanical assembly sequences robotics automation ra 
gallo longo nguyen pallottino gli un la di delle di 
gallo longo nguyen pallottino directed hypergraphs applications techn rept 
tr dipartimento di informatica universit di pisa forthcoming discrete applied mathematics 
gallo hypergraph approach logical inference datalog formulae techn rept 
tr dipartimento di informatica universit di pisa 
de mello sanderson graph representation assembly plans ieee trans 
robotics automation 
hu combinatorial algorithms addison wesley 
italiano line maintenance minimal directed hypergraphs proc 
italiano di informatica world science press 
jeroslow martin wang leontiev flows problems techn 
rept 
cc institute interdisciplinary engineering studies purdue university west lafayette 
torres combinatorial models searching knowledge bases acta 
