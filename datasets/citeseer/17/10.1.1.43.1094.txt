model checking clp giorgio andreas podelski max planck institut fur informatik im stadtwald saarbrucken germany mpi sb mpg de 
show constraint logic programming clp serve conceptual basis practical implementation platform model checking infinite state systems 
contributions semantics preserving translation concurrent systems clp programs method verifying safety liveness properties clp programs produced translation 
implemented method clp system verified known examples programs integers linear constraints opposed presburger arithmetic previous solutions 
automated verification methods today applied practical systems mcm 
reason success implicit representations finite sets states boolean formulas handled efficiently bdd bcm 
finiteness inherent restriction 
systems operate data values infinite domain intrinsically infinite state produce finite state model abstracting away crucial properties 
effort verifying systems see bw bgp cj hpr skr 
important research goal find appropriate data structures implicit representations infinite sets states design model checking algorithms perform practical examples 
obvious metaphor constraints useful unavoidable implicit representation sets states simply constraints represent relation states tuples values 
question concepts systems programming constraints class data structures see pod wal verification systems 
reported investigates constraint logic programming see jm conceptual basis practical implementation platform model checking 
translation concurrent systems infinite state spaces clp programs preserves semantics terms transition sequences 
formalism concurrent systems widely guarded command specification language shared variables promoted shankar sha 
translation exhibit connection states ground atoms sets states constrained facts pre condition operator logical consequence operator clp programs ctl properties safety liveness model theoretic denotational program semantics 
connection suggests natural approach model checking infinite state systems clp 
explore potential approach practically existing clp systems different constraint domains implementation platform 
implemented algorithm compute fixpoints clp programs constraint solvers reals booleans 
implementation amounts simple direct form meta programming input clp program constraints syntactic objects passed built constraint solver fixpoint iteration source transformation clp programs 
obtained experimental results examples infinite state programs examples quickly benchmarks community see bgp bgp skr sum ls 
experiments allow see clp tool solve considered verification problems acceptable time cost 
clp combines mathematical logical reasoning clp setting helps find optimizations natural directly implementable provably correct 
important verification hard problem undecidable general infinite state case requires fine tuning method 
experiments show surprisingly powerful time decision procedure presburger arithmetic approaches bgp skr bw verification problems needed polynomial time consistency entailment tests linear arithmetic constraints disjunction provided clp systems sufficient 
translating concurrent systems clp take bakery algorithm see bgp example concurrent program notation mp turn turn jj jj parallel execution subprograms defined repeat think turn turn wait turn turn turn critical section turn forever defined symmetrically 
algorithm ensures mutual exclusion property processes critical section point time 
integer values variables turn turn reachable states unbounded note process enter wait reset counter 
concurrent program directly encoded concurrent system scheme sha 
process associated control variable ranging control locations program labels 
data variables correspond program variables 
states tuples control data values think 
primed version variable action stands successor value 
omit conjuncts expressing value remains unchanged 
control variables wait data variables turn turn int 
intial condition think think turn turn events cond think action wait turn turn cond wait turn turn action cond wait turn action cond action think turn symmetrically process fig 

concurrent system specifying bakery algorithm scheme proposed translate concurrent system bakery algorithm clp program shown dummy predicate symbol think wait constants variables capitalized note separate conjuncts commas 
init turn turn think think turn turn think turn turn turn turn wait turn turn wait turn turn turn turn turn turn wait turn turn turn turn turn turn turn turn think turn turn 
symmetrically process fig 

clp program ps concurrent system 
reader familiar clp needs know 
clp program logical formula universally quantified reader familiar clp note proposing paradigm shift conjunction implications common call implications clauses write conjunction set 
reading usual order logic semantics 
give second reading non deterministic sequential program 
program states atoms applications predicate values think think 
successor state state atom atom direct logical consequence atom program formula 
case implication instance implications 
example state think think possible successor state wait think think think wait think instance implication instantiate variables think turn turn turn 
sequence atoms atom direct logical consequence successor sequence transition sequence program states called ground derivation clp program 
implicitly identify state concurrent system corresponding atom clp program ps example think think think 
observe transition sequences concurrent system exactly ground derivations clp program ps 
set predecessor states set states set direct logical consequences clp program ps show facts generally true characterize ctl properties terms denotational fixpoint semantics associated clp programs 
formalize connection concurrent systems clp programs 
assume variable exists variable primed version write tuple variables hx xn tuple values hd dn denote validity order formula wrt 
structure assignment ff ff 
usual ff 
denotes assignment variables mapped values examples section formulas interpreted domains integers reals 
note presentation structure concurrent system sense sha triple hv theta ei tuple control data variables theta formula called initial condition set pairs oei called events enabling condition formula action oe formula form expressions looking synthesis operational behavior programs viewed executable specifications interested analysis operational behavior clp programs obtained translation 
classical correspondence denotational semantics operational semantics ground derivations central 
primed variable appearing action represent value execution event 
examples notation cond action oe event oei omitting conjuncts form 
semantics concurrent system defined transition system states tuples values transition relation defined ff 
ff 

oe oei pre condition operator pre concurrent system defined transition relation pre fd exists hd translation clp programs view formulas enabling condition action constraints structure see jm 
introduce dummy predicate symbol arity init predicate arity 
definition translation concurrent systems clp programs concurrent program encoded clp program ps hv theta ei tuple variables ps fp oe oei theta direct consequence operator tp associated clp program see jm function defined follows applied set atoms yields set atoms direct logical consequences atoms formula formally tp fp instance clause sg obtain ground instance replacing variables values 
statement implicit convention identifying states atoms 
theorem adequacy translation 
ps state sequences transition system defined concurrent system exactly ground derivations clp program ps 
ii pre condition operator logical consequence operator associated ps formally pre tps note think turn turn notation examples equivalent turn turn think notation formal statements 
proof 
clause oe ps corresponds event oei 
instances form ff 

oe 
correspond directly pairs hd transition relation restricted event oei 
fact show induction length sequence transitions derivations ii directly definition 
aside translate clp program post post fp oe oei theta post condition operator logical consequence operator associated ps formally post post obtain characterization set reachable states fixpoint post expressing ctl properties clp temporal connectives ef exists exists globally af ag globally ctl computation tree logic express safety liveness properties transition systems 
eme identify temporal property set states satisfying 
notion constrained facts important 
constrained fact clause body contains constraint note instance constrained fact equivalent clause form true atom state 
set constrained facts write set instances clauses called meaning set states represented 
example meaning mut fp turn turn set states mut fp application ctl operator set constrained facts defined terms meaning example ef set states state reachable 
examples intuitive notation write ef ef mut 
example safety property consider mutual exclusion concurrent system processes critical section time expressed ag 
complement set states ef 
prove set equal fixpoint program ps phi mut obtain union clp program ps singleton set constrained facts mut compute fixpoint show contain initial state atom init 
example liveness property starvation freedom process time process waits enter critical section expressed ag wait af 
complement set states init turn turn think think turn turn think turn turn turn turn wait turn turn wait turn turn turn turn turn turn wait turn turn turn turn turn wait think turn turn turn turn wait wait turn turn wait wait turn turn turn turn wait turn turn wait wait turn turn turn wait turn turn wait turn turn turn wait think turn turn think think turn turn turn turn think wait turn turn think wait turn turn turn turn think turn turn think wait turn turn turn think turn turn think turn turn turn think think turn turn fig 

clp program ps ff concurrent system 
ef wait 
set states equal greatest fixpoint clp program ps ff 
obtain ps ff clp program ps transformation wrt 
set constrained facts turn turn think turn turn wait transformation amounts constrain clauses label ps label wait think clauses form removed 
give idea model checking method describe section intermediate step method computes set constrained facts set states equal greatest fixpoint clp program ps ff method uses set form third clp program ps phi fixpoint program equal ef wait 
details see corollary 
formalize general setting 
definition clp program set constrained facts define clp programs phi ff follows 
phi ff theorem ctl properties clp program semantics concurrent system translation clp program ps properties hold sets constrained facts ef lfp gfp proof 
follows fixpoint characterizations ctl properties see eme theorem 
duality af complement gfp ag complement lfp 
single important ctl properties examples order express mutual exclusion absence individual starvation respectively 
corollary safety liveness concurrent system satisfies safety property ag atom init fixpoint clp program ps phi 
ii satisfies liveness property ag af init fixpoint clp program ps phi set constrained facts denoting greatest fixpoint clp program ps ff constraints considered examples sets constrained facts effectively closed negation denoting complement 
conjunction denoting intersection implemented fp satisfiable dg 
defining model checking method important note temporal properties undecidable general class concurrent systems consider 
best hope semi algorithms sense wolper bw determining factor succeed instances verification needed fact similar situation decidable verification problems bw 
set constrained facts implicit representation possibly infinite set states assume finite 
replace operator tp sets atoms states operator sp sets constrained facts application sp effectively computable 
clp programs encoding concurrent system define sp follows note closed renaming variables clauses implicitly universally quantified xn xn 
sp fp satisfiable dg contains constrained facts contained sp 
sp operator introduced study non ground semantics clp programs gdl connection ground semantics investigated set ground instances fixpoint sp operator corresponding fixpoint tp operator formally lfp tp lfp gfp tp gfp sp theorem leads characterization ctl properties sp operator ef lfp gfp sp fff possibly non terminating model checker defined straightforward way 
consists manipulation constrained facts implicit representations general infinite sets states 
standard fixpoint iteration sp operators specific programs fixpoint definition ctl properties computed see corollary 
iteration starts representing empty set states fp trueg representing set states 
computation application sp operator set constrained facts consists scanning pairs clauses constrained facts checking satisfiability constraints produces new finite set constrained facts 
iteration yields possibly infinite sequence 
sets constrained facts 
iteration stops sets states represented equal formally fixpoint sp operator taken wrt 
subsumption ordering sets constrained facts 
say subsumed set states represented contained set states represented formally testing subsumption amounts testing entailment disjunctions constraints constraints 
interleave fixpoint iteration test membership state init intermediate results yields semi algorithm safety properties 
describe optimizations shown useful experiments described section 
point demonstrate clp setting combination mathematical logical reasoning allows find optimizations naturally 
local subsumption 
practical reasons may consider replacing subsumption local subsumption fixpoint test 
say locally subsumed constrained fact subsumed constrained fact testing local subsumption amounts testing entailment quadratically combinations constraints 
generally fixpoint test may strictly weaker efficient practically optimized entailment test constraints available modern clp systems theoretically 
linear arithmetic constraints example subsumption prohibitively hard np sri local subsumption polynomial sri 
study complexity local vs full subsumption clp techniques mah shows full subsumption np hard equivalent local subsumption 
elimination redundant facts 
call set constrained facts irredundant element subsumes 
keep sets constrained facts fixpoint iteration irredundant checking new constrained fact locally subsumed subsumes redundant constrained fact technique standard clp fixpoint computations 
strategies 
obtain different fixpoint evaluation strategies essentially mixed forms backward forward analysis applying transformations magic sets templates algorithm rss clp programs ps transformations natural context clp programs may viewed constraint data bases see rss rev 
application kind magic set transformation clp program ps phi clauses restricted form predicate body yields clp program new predicates init 
fp body body pg fep pg init trueg obtain soundness transformation wrt 
verification safety properties standard results rss say init lfp init lfp init lfp 
soundness continues hold replace constraints clauses constraints entailed obtain spectrum transformations different possibilities weaken constraints 
example weaken arithmetical constraints true iterations amount eliminating constrained facts label label locations label definitely reachable initial state 
abstraction 
define approximation sp operator style interpretation framework results guarantee obtain conservative approximations fixpoints ctl properties 
approximation turns method possibly non terminating af ag properties direction positive answer definite answer 
introduce new widening operator style ch termination guarantee define sp 
operator defined terms constrained facts 
example fp fp fp formally contains constrained fact obtained constrained fact removing conjuncts strictly entailed conjunct compatible constrained atom dm compatible means conjunction dm satisfiable 
condition restricts applications widening operator facts values control locations 
contrast standard widening operators ch refined versions hpr bgp operator directly implemented entailment test constraints furthermore applied fact fact requiring preliminary computation convex hull union polyhedra 
computationally expensive convex hull approximation may important factor wrt 
loss precision 
consider sets constrained atoms fp fp applied widening operators bgp ch hpr returns polyhedra denoted fact true 
contrast widening precise returns note constrained facts automatically induces partitioning state space wrt 
set control locations partitioning shown useful increase precision widening operator essentially reducing applicability see hpr bgp 
experimentation clp implemented model checking procedure described sicstus prolog clp library hol boolean constraint solvers implemented bdds 
extensive runtime database facilities storing retrieving constrained facts meta programming facilities interchangeability uninterpreted interpreted constraints expressions 
applied implementation infinite state verification problems benchmarks community see bgp bgp skr sum ls 
allowed evaluate performance implementation experiment evaluation strategies abstractions widenings compare solution previous solutions 
implement solving constraints integers needed model checking integer valued concurrent systems constraint solver reals 
trade theoretical practical gain efficiency extra abstraction 
abstraction yields yields conservative approximation ctl properties standard fixpoint theory 
experiments incur loss precision 
interesting generally characterize programs en ert ern art arn bakery bakery bakery ticket mut ast network fig 

benchmarks verification safety properties number clauses exact approximation widening elimination redundant facts execution time seconds number produced facts gamma needed non termination 
integer valued concurrent systems abstraction integer constraints reals precise 
briefly comment experimental results listed fig 

verification problems tested sun sparc station os 
mutual exclusion starvation freedom bakery algorithm see sect 
sect 
verified widening execution time starvation freedom 
versions bakery algorithm processes treated bgp maximum operator assignments priorities turn max turn turn encoded case case constraint representation 
program size grow exponentially number processes 
time cost reasonable experiments needed truly check scalability 
ticket algorithm see bgp similar ideas bakery algorithm 
priorities maintained global variables local variables 
bgp needed apply widening prove safety 
second experiment applied magic set transformation obtained proof 
proved starvation freedom applying widening outer fixpoint inner greatest fixpoint terminates abstraction 
algorithm mut ast see ls designed ensure mutual exclusion 
translated description network arbitrary non fixed number mut ast processes ls clp program proved safety abstraction network 
examples producer consumer algorithms 
algorithm see bgp coordinates system producers consumers connected buffer bounded size 
proved invariants difference produced consumed items equal number items currently buffer number free slots ranges zero maximum size buffer 
algorithm see bgp coordinates system producer consumer connected unbounded buffers 
proved invariant number consumed items produced ones 
prototypical version model checker sicstus source code code verification problems considered section outcomes fixpoint computations available url address www mpi sb mpg de clp html 
related attempts connect logic programming verification generality respect applicable concurrent systems temporal properties 
fr fribourg richardson clp programs gap order integer constraints rev order compute set reachable states decidable class infinite state systems 
constraints form needed examples gap order constraints 
fo fribourg olsen study reachability system integer counters 
approaches restricted safety properties 
rau describes clp style extension propositional calculus finite domain constraints model checking finite state systems 
singles class clp programs hybrid systems investigating formal connection hybrid system specifications note liveness properties timed hybrid automata directly expressed fixpoints sp operator clauses translating time transitions may loop 
gp gupta describe runs timed automata topdown operational semantics clp programs fixpoint semantics 
cp podelski show set program analysis terminating algorithm approximation ctl properties traditional logic programs specifying extensions pushdown processes 
rrr logic programming language tabling called xsb implement efficient local model checker finite state systems specified ccs value passing language 
integration tabling constraints possible principle promising potential 
described constraints symbolic representations states uppaal verification tool timed systems 
reasons syntax possible verify safety examples current version uppaal possibly extension 
note uppaal check bounded liveness properties excludes starvation freedom 
discuss verification procedures integer valued systems 
bgp bgp gerber pugh omega library presburger arithmetic implementation platform 
directly stimulated took examples verification problems 
exe cution times order magnitude shorter theirs probably compared manipulate formulas reals integers add extra abstraction general loss precision possible 
method extended composite approach bdds adaptation clp setting may interesting task 
chan anderson beame notkin incorporate efficient representation arithmetic constraints linear non linear bdds smv mcm 
method uses external constraint solver prune states unsatisfiable constraints 
combination boolean arithmetic constraints handling interplay control data variables promising idea fits ideally clp paradigm systems bbd boolean constraint solvers available 
explored connection fields verification programming languages specifically model checking clp 
reformulation safety liveness properties terms clp semantics novel translation concurrent systems clp programs 
define model checking procedure setting fixpoint operator infinite sets states fixpoint corresponding operator implicit representations formally related established results program semantics 
turned theoretical insights practical tool 
implementation clp system direct natural 
reason key operations fixpoint iteration testing entailment conjoining constraints satisfiability test 
operations central clp paradigm jm roughly take role read write operations constraints class data structures 
obtained experimental results example infinite state systems integers 
tool prototypical shown reasonable performance examples gives rise hope useful experiments 
edge tools may fact setting optimizations specific examples direct transparent experimentation flexible 
sense provides programming environment model checking 
note clp systems sicstus provide high level support building integrating new constraint solvers domain 
believe experience practical examples needed order estimate effect different fixpoint evaluation strategies different forms constraint weakening conservative approximations 
believe experimentation may useful look specialized implementations 

authors stephan pointing bgp christian help clp library hol richard gerber ramakrishnan fruitful discussions 
abdulla jonsson 

general decidability theorems infinite state systems 
proceedings eleventh annual symposium logic computer science lics pages 
ieee computer society press 
bcm burch clarke mcmillan dill hwang 
symbolic model checking states 
john mitchell editor proceedings fifth annual symposium logic computer science lics pages 
ieee society press 
gerber league 
verifying systems integer constraints boolean predicates composite approach 
proceedings acm sigsoft international symposium software testing analysis issta pages 
acm press 
bgp gerber pugh 
symbolic model checking systems presburger arithmetics 
orna grumberg editor proceedings ninth conference computer aided verification cav volume lncs pages 
springer verlag 
bgp gerber pugh 
model checking concurrent systems unbounded integer variables symbolic representations approximations experimental results 
technical report cs tr department computer science university maryland college park 
bw wolper 
symbolic verification periodic sets 
david dill editor proceedings sixth international conference computer aided verification cav volume lncs pages 
springer verlag 
bw wolper 
verifying systems infinite regular state space 
alan hu moshe vardi editors proceedings tenth conference computer aided verification cav volume lncs pages 
springer verlag 
chan anderson beame notkin 
combining constraint solving symbolic model checking class systems nonlinear constraints 
orna grumberg editor proceedings ninth conference computer aided verification cav volume lncs pages 
springer verlag 
ch cousot halbwachs 
automatic discovery linear restraints variables program 
proceedings fifth annual symposium principles programming languages popl pages 
acm press 
cj comon 
multiple counters automata safety analysis presburger arithmetics 
alan hu vardi editors proceedings tenth conference computer aided verification cav volume lncs pages 
springer verlag 
cp podelski 
set analysis reactive systems 
bernhard steffen editor proceedings international conference tools algorithms construction analysis systems tacas volume lncs pages 
springer verlag 
eme emerson 
temporal modal logic 
jan van leeuwen editor handbook theoretical computer science volume pages 
elsevier science 
fo fribourg olsen 
decompositional approach computing fixed point datalog programs counters 
journal constraints 
fr fribourg richardson 
symbolic verification gap order constraints 
technical report liens laboratoire informatique ecole normale superieure paris 
gdl levi 
observable semantics constraint logic programs 
journal logic computation 
gp gupta 
constraint approach specification verification real time systems 
proceedings th ieee real time systems symposium rtss 
ieee computer society 
henzinger 
ho wong toi 
hytech model checker hybrid systems 
orna grumberg editor proceedings ninth conference computer aided verification cav volume lncs pages 
springer verlag 
hol 
clp manual edition 
technical report tr austrian research institute artificial intelligence vienna 
hpr halbwachs 

verification real time systems linear relation analysis 
formal methods system design 
jm jaffar maher 
constraint logic programming survey 
journal logic programming 
larsen larsson pettersson yi 
efficient verification real time systems compact data structure state space reduction 
proceedings th ieee real time systems symposium rtss pages 
ieee computer society 
larsen pettersson yi 
uppaal nutshell 
international journal software tools technology transfer 
ls saidi 
automatic verification parameterized networks processes abstraction 
proceedings international workshop verification infinite state systems infinity available url cs uni dortmund de organization paste html 
mah maher 
constrained dependencies 
ugo montanari editor proceedings international conference principles practice constraint programming cp lecture notes computer science pages france september 
springer verlag 
mcm mcmillan 
symbolic model checking approach state explosion problem 
kluwer academic 
mp manna pnueli 
temporal verification reactive systems safety 
springer verlag 
maher ramakrishnan 
ej vu fixpoints logic programs 
ross lusk ewing overbeek editors proceedings north american conference logic programming pages 
mit press 
pod podelski editor 
constraint programming basics trends volume lncs 
springer verlag 
rau 
constraint language model checking 
podelski pod pages 
rev revesz 
closed form evaluation datalog queries integer gap order constraints 
theoretical computer science 
rrr ramakrishnan ramakrishnan ramakrishnan smolka swift warren 
efficient model checking tabled resolution 
orna grumberg editor proceedings ninth conference computer aided verification cav volume lncs pages 
springer verlag 
rss ramakrishnan srivastava sudarshan 
efficient bottom evaluation logic programs 
de wilde vandewalle editors computer systems software engineering state art chapter 
kluwer academic 
sha shankar 
assertional reasoning concurrent systems 
acm computing surveys 
skr ranjan 
comparison presburger engines reachability 
alan hu moshe vardi editors proceedings tenth conference computer aided verification cav volume lncs pages 
springer verlag 
sri srivastava 
subsumption indexing constraint query languages linear arithmetic constraints 
annals mathematics artificial intelligence 
sum sipma uribe manna 
deductive model checking 
alur henzinger editors proceedings eighth conference computer aided verification cav volume lncs pages 
springer verlag 

analysis hybrid systems clp 
eugene freuder editor proceedings principles practice constraint programming cp volume lncs pages 
springer verlag 
wal wallace 
practical applications constraint programming 
constraints 
article processed macro package llncs style 
