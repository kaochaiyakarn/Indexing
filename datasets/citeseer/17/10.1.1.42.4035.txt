executable temporal logic distributed michael fisher department computer science victoria university manchester oxford road manchester pl email michael cs man ac uk michael wooldridge department computing manchester metropolitan university street manchester gd email sun com ac uk dai themes societies organisations agents modeling communication adversarial cooperative systems describes concurrent metatem programming language temporal logic applies study distributed artificial intelligence dai 
concurrent metatem system consists number asynchronously executing objects able communicate broadcast message passing 
individual object directly executes specification desired behaviour 
specifications set temporal logic rules determining object may generate commitments subsequently attempts satisfy 
language provides novel powerful approach representing dai systems individual agents specified natural way temporal logic groups agents communicate broadcasting information 
begins discussing justifying concurrent metatem approach describes objects execution detail 
examples demonstrating utility concurrent metatem dai applications 
language contrasted contemporary dai testbeds 
describes novel programming language executable temporal logic demonstrates utility language tackling problems faced designers implementors distributed artificial intelligence dai systems 
language called concurrent metatem incorporates innovations distance dai programming languages 

idea executable temporal logics 
common traditional logic programming languages prolog concurrent metatem understood logical foundation intuitively simple operational semantics 
logical foundation temporal logic powerful corresponding classical logics 
spite extra expressive power temporal logic execution remains computationally viable languages executable temporal logics developed applied variety domains 
supported serc research gr 

novel model concurrency executable logics 
model differs radically logic languages uses notion active autonomous agents significant computational power communicating broadcast message passing concurrent metatem notion communicating intelligent agent intuitively simple understood logical foundation 
aware dai language testbed property 
remainder structured follows 
outline motivation research rationale concurrent metatem approach 
brief description concurrent metatem language example program fragments demonstrating utility language dai applications 
show variety cooperative structures described implemented concurrent metatem 
discuss concurrent metatem stands relation dai concurrent object programming languages testbeds 
identify avenues research 
motivation distributed ai relatively young discipline developed tools building experimenting evaluating ideas theories applications 
past decade frameworks building dai systems reported 
allow experimentation specific scenario provide extensions existing ai languages lisp comparatively fundamentally new languages proposed dai 
arguably successful dai languages part actor model computation example 
contention frameworks dai extensions existing ai languages useful experimentation ultimately viable tools building production dai systems 
argument justified motivate discussion introduce notion reactive system reactive systems systems adequately described relational functional view 
relational view regards programs functions initial state terminal state 
typically main role reactive systems maintain interaction environment described specified terms ongoing behaviour 
concurrent system studied behavioural means 
individual module concurrent system reactive subsystem interacting environment consists modules 
dai systems reactive precisely sense applications multi agent approach suited distributed sensing non terminating simply described functional view multi agent systems necessarily concurrent pnueli observes agent considered reactive system 
current usages term reactive system computer science 
oldest usage pnueli followers see description 
second researchers ai planning take reactive system capable responding rapidly environment word reactive taken synonymous responsive see 
term denote systems respond directly world reason explicitly see 
term sense indicated 
lisp prolog classic ai languages lend readily relational view computation reactive view lisp functional language computation viewed function evaluation prolog view computation goal directed backward theorem proving map comfortably reactive view systems 
attempt extend utility languages concurrent extensions defined 
just argued dai systems inherently reactive languages unsuited fundamental level dai system construction 
required completely new approach building intelligent reactive systems notion reactivity intrinsic 
pnueli proposed temporal logic tool reasoning reactive systems describing reactive system wish express properties request sent response eventually 
properties easily elegantly expressed temporal logic 
observed object concurrent metatem system directly executes temporal logic specification desired behaviour 
concept reactive system heart language 
concurrent metatem novel model concurrency executable logic 
previous concurrent logic paradigms fine grained parallelism concurrency concurrent metatem achieved coarse grained computational entities called objects 
objects concurrent metatem motivated logical foundation simple powerful intuitively appealing 
corollary giving objects logical foundation formally specifying verifying properties concurrent metatem systems realistic possibility 
concurrent metatem section describe concurrent metatem detail brief overview concurrent metatem system contains number concurrently executing objects able communicate asynchronous broadcast message passing 
object programmed giving temporal logic specification behaviour required exhibit 
objects directly execute specifications specification consists set rules temporal logic formulae form antecedent past consequent 
objects maintain record messages send internal actions perform object execution proceeds process continually determining past time antecedents rules satisfied recorded history 
antecedents rules fire commitments object subsequently attempts satisfy 
possible object commitments satisfied simultaneously case unsatisfied commitments carried moment time 
inter object communication managed interfaces object possesses 
interface determines messages object may send messages sent object accept 
object satisfies commitment internally consults interface see commitment corresponds message sent message broadcast objects 
receipt message object consult interface see message accepted message added history ignored 
alternative preliminary outline complete description concurrent metatem 
complete description concurrent metatem order introduce temporal logic non concurrent metatem 
give brief topics details see 
temporal logic discrete linear temporal logic called order metatem logic fml complete definition fml 
logic introduces new connectives classical logic enable reason time dependent properties reactive systems 
order fml incorporates particular model time states representing moments time form infinite discrete linear sequence 
constraint unique state representing time ensures models fml formulae isomorphic natural numbers 
classical component fml describe state 
example formula optimistic submit satisfied state optimistic acceptance just submitted 
temporal connectives relate states 
example uy satisfied state formula satisfied state state formula satisfied state satisfied satisfied 
dual connective connective 
mirrors behaviour past satisfied state formula satisfied state past state formula satisfied state states satisfied satisfied 
example optimistic acceptance initially optimistic submitted rejected moment 
particular state temporal constraint apply 
rejected optimistic submit optimistic basic temporal connectives fml weak time connective nexttime connective 
state satisfied state satisfied current state satisfied current state satisfied state sequence 
remaining temporal connectives defined terms basic set 
connective satisfied current state satisfied current state state connective satisfied current state satisfied current state states past past connectives mirroring connectives past 
binary connective somewhat similar connective second argument need satisfied operator similar connective second argument need satisfied 
note form temporal logic strict past time connectives 
example satisfied satisfied state past strict satisfied satisfied state state 
strong time connective similar weak time connective state formula form satisfied 
metatem metatem general framework executing temporal logics 
metatem programs just arbitrary fml formulae purposes program formula general form 
represents vector variables conjoined implications called rule 
restricted non strict past time temporal formula formula including past time time constraints non strict time formula formula including time time constraints 
metatem program set rules form 
process executing metatem program involves constructing model corresponding fml formula presence input program environment 
model constructed iteratively starting initial state state 
step program rules consulted see past time antecedents satisfied partial model constructed far components rules satisfied antecedents collected 
constraints properties model outstanding constraints generated previous steps construct current state 
outstanding constraints passed step 
state may levels non determinism 
non determinism execution classical disjunction constraint form may satisfied executing second execution process decide satisfy outstanding commitments generated execution formulae 
note satisfy formula satisfied state 
usually choose satisfy formulae soon possible 
satisfaction formula conflict satisfaction 
basic algorithm followed version metatem attempt satisfy eventualities formulae soon possible formulae passed forward previous states attempt satisfy oldest outstanding eventuality 
contradiction generated false executed system may backtrack previous choice point attempt construct model program different way 
backtracking undoes actions returns execution previous choice point 
choice points left execution fails signifying program unsatisfiable 
computational model concurrent metatem provides operational model communicating metatem processes cmp model 
mentioned earlier concurrent metatem system contains number asynchronously executing objects able communicate broadcast message passing 
object main attributes interface definition defines object may interact environment objects particular messages may send receive internal definition defines object may act definition met program set rules past form 
object interface definition contains components name object set predicate symbols called environment predicates symbols correspond messages object recognise process checking past input environment may required environment predicates appear component 
set predicate symbols called component predicates symbols correspond messages object may send 
example interface stack object defined follows 
stack pop push popped 
set environment predicates messages object recognises set component predicates messages object produce 
note sets need disjoint object may broadcast messages recognises case messages sent object recognised immediately 
execution object rules types predicate mentioned take specific operational interpretation follows 
environment predicates represent incoming messages 
environment predicate true corresponding message just received 
formula containing environment predicate request universally quantified variable satisfied message form request just received argument 
component predicates represent messages broadcast object 
component predicate satisfied side effect broadcasting corresponding message environment 
example formula offer satisfied offer component predicate message offer broadcast 
note predicates object environment component predicates internal predicates external effect 
part internal computation object correspond message sending message reception 
object commenced execution continually follows cycle reading incoming messages collecting rules fire left hand sides satisfied current history executing disjuncts represented conjunction right hand sides fired rules described 
individual objects execute asynchronously autonomous may execute independently incoming messages may change interface dynamically 
objects may backtrack proviso object may backtrack past broadcasting message 
consequently broadcasting message environment object effectively commits execution particular path 
basic cycle operation object thought period internal execution possibly involving backtracking followed appropriate broadcasts environment 
current status time writing full implementation propositional concurrent metatem developed 
implementation develop test numerous example systems including simulation railway network propositional versions examples see 
experience initial implementation guide implementation full order concurrent metatem 
examples section illustrate utility concurrent metatem building dai systems demonstrating ease elegance range strategies cooperative interaction coded language 
note aim propose strategies viable techniques cooperative interaction demonstrate plausible strategies coded language 
space restrictions prevent inclusion larger examples full desired 
requesting help consider agent call requires help solving particular problem solve 
imagine agents exist solve problem agent request environment offers help problem broadcasting message request 
offers help may forthcoming certain agents broadcast offers message offer representing offer object solve problem object predicates construct networks concurrent metatem objects cooperate various different ways 
benevolence probably simplest strategy cooperative interaction benevolence 
benevolence offer help agent requests 
strategy may encoded just program rules 
object skeleton required achieve strategy 
note rule numbers listed left hand side illustration part language similarly quantifiers 
obj request offer 
request offer self 

request offer self request offer self 
concurrent metatem program benevolent agent assuming object name provided self rule encodes significant part strategy ensuring help eventually requested 
rule simply ensures object offers help requested 
reactive systems terminology rule represents liveness property rule represents safety property 
note indication rules object offer long object eventually offer behaviour conformant rules 
example rules constraining object behaviour algorithm determine commitments expedited immediately offer see 
removed connective agent required offer help soon receives request 
concurrent metatem default strategy assigning truth values predicates assume predicate constrained false 
need rule omit rules 
multiple requests received agent broadcast offers requests 
realistic strategy restrict agent offer step 
restriction easily coded concurrent metatem 
qualified benevolence undoubtedly simple benevolence hardly suitable strategy base interactions world 
realistic scenario encompass possibility non helpful possibly antagonistic objects agents 
remain useful member society exploited 
simple solution introduce mechanism retaliation non cooperative behaviour punished 
simple strategy punishes non cooperative behaviour represented follows 
qualified benevolence 
initially assume agent friendly 

requested agent responded agent friendly friendly 

offer help friendly agent requests 
note strategy suspicious agents regarded friendly offered help asked 
simple matter code strategy concurrent metatem program rules 
need additional predicate friendly representing fact object regarded friendly 
omitting rules ensure agent initially regarded friendly program skeleton effects qualified benevolence strategy consists rules shown 
rule example defines conditions object obj request offer 

request self request self offer self friendly 
request friendly offer self 
concurrent metatem program qualified benevolent agent considered friendly agent friendly responded positively previous requests 
rule enhanced version benevolence liveness rule requiring agents friendly offered assistance 
obviously complex behaviours devised implemented concurrent metatem particularly account asynchronous nature agents system agents various organisations 
important aspect concurrent metatem systems due broadcast nature messages agent observe messages agents send 
form basis cooperative competitive scenarios agent form strategy sees agents doing 
lack space prevents giving larger example competitive scenario see outline simple cooperative system broadcasting messages concurrent metatem 
distributed problem solving final example look taken defines simple distributed problem solving system 
example particularly useful exhibiting interface definitions objects 
single agent called executive broadcasts problem group problem solvers 
problem solvers solve particular problem completely reply solution 
executive solution problem solved 
start problem 
solution solved 
problem solution 
problem solution 
problem solution 
problem solution 
problem solution 
problem solution 
distributed problem solving system problem solution solution 
solution problem solution 
problem solution 
problem solution 
additional problem solving agents define concurrent metatem system 
solve different problem executive poses solve desired problem doesn announce fact solution component proposition solve problem posed executive eventually reply solution 
look refinement system removed replaced agents solve problem manage individually 
agents called defined 
receives problem heard 
receives problem broadcasts fact solve part problem broadcasts solution 
sees knows solve part problem broadcasts solution 
related purpose section place concurrent metatem context contemporary dai research show stands relation field 
concurrent metatem respects similar shoham agent system 
agent attempt build agent oriented programming aop language 
aop new programming paradigm societal view computation central aop idea agents objects cognitive entities state best described terms mentalistic notions belief choice com agent concurrent metatem temporal logics logics quite different forms 
concurrent metatem tense logic approach adopted language concurrent metatem rules classical logic augmented set modal operators describing dynamic nature world 
agent method temporal arguments language contains terms directly referring time 
predicates modal operators date stamped time true 
styles temporal logic advantages disadvantages go relative merits approach 
agent concurrent metatem rule language novel concept rule 
languages rules object agent possesses determine object agent commitments 
aop commitment mentalistic interpretation formalisations 
contrast concurrent metatem gives commitment precise computational meaning see 
despite similarities agent concurrent metatem differ significant respects 
obvious distinguishing feature nature rules languages 
concurrent metatem rules explicit logical semantics separated past form 
agent rules developed logical semantics 
system extensively dai georgeff lansky procedural reasoning system prs employs elements belief desire intention bdi architecture partly formalised rao 
prs common concurrent metatem systems maintain beliefs world concurrent metatem beliefs past time temporal formulae knowledge areas prs loosely resemble concurrent metatem rules prs intentions resemble concurrent metatem commitments 
points difference notably prs logical basis execution elegant concurrent metatem 
elegance concurrent metatem come cheap prs flexible execution concurrent metatem higher potential time critical applications 
computational model underlying concurrent metatem somewhat similar employed autonomous agent model 
generally similarities actor model key differences ability objects concurrent metatem act non message driven way broadcast point point message passing 
comment mentalistic terminology 
agent prs free terms belief desire intention 
shoham argues terminology provides useful degree abstraction complex systems pp 
concurrent metatem employs terminology commitment see attempt relate terminology deeper theory agency shoham hopes aop 
comments described concurrent metatem programming language executable logic suited dai applications 
examples prototypical dai systems shown concurrent metatem useful particularly cooperative competitive groups agents 
time writing full implementation propositional concurrent metatem constructed experience system guide development full order implementation 
ongoing topics include complete formal definition language semantics see techniques specifying verifying concurrent metatem systems see organisational structure concurrent metatem efficient algorithms object execution meta level reasoning metatem concurrent metatem see language object rules containing belief component 
comment mentalistic notions 
abadi manna 
temporal logic programming 
journal symbolic computation 
agha 
actors model concurrent computation distributed systems 
mit press 
barringer fisher gabbay gough owens 
metatem framework programming temporal logic 
proceedings rex workshop stepwise refinement distributed systems models formalisms correctness netherlands june 
published lecture notes computer science volume springer verlag 
barringer fisher gabbay hunter 
meta reasoning executable temporal logic 
allen fikes sandewall editors proceedings principles knowledge representation reasoning kr cambridge massachusetts april 
morgan kaufmann 
ferber samuel 
multi agent testbed heterogeneous agents 
demazeau muller editors decentralized ai proceedings second european workshop modelling autonomous agents multi agent worlds maamaw 
elsevier north holland 
clark gregory 
relational language parallel programming 
shapiro editor concurrent prolog collected papers chapter pages 
mit press 
wavish 
experiment cooperation 
demazeau muller editors decentralized ai proceedings st european workshop modelling autonomous agents multi agent worlds maamaw 
elsevier north holland 
durfee 
coordination distributed problem solvers 
kluwer academic press 
emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science pages 
elsevier 
ferber carle 
actors agents reflective concurrent objects iv perspective 
ieee transactions systems man cybernetics december 
finger fisher owens 
metatem modelling reactive systems executable temporal logic 
submitted sixth international conference industrial engineering applications artificial intelligence expert systems iea 
fisher 
concurrent metatem language modeling reactive systems 
submitted parallel architectures languages europe parle 
fisher barringer 
concurrent metatem processes language distributed ai 
proceedings european simulation multiconference copenhagen denmark june 
fisher owens 
past executing temporal logic programs 
proceedings logic programming automated reasoning lpar st russia july 
published lecture notes computer science volume springer verlag 
fisher wooldridge 
specifying verifying distributed intelligent systems 
submitted european symposium validation verification knowledge systems 
fujita tanaka oka 
logic programming language temporal logic compilation prolog 
rd international conference logic programming pages july 
published lecture notes computer science vol springer verlag 
gasser hermann 
mace flexible testbed distributed ai research 
huhns editor distributed artificial intelligence 
pitman morgan kaufmann 
georgeff ingrand 
decision making embedded reasoning system 
proceedings eleventh international joint conference artificial intelligence ijcai detroit usa 
morgan kaufmann 
georgeff lansky 
reactive reasoning planning 
proceedings american association artificial intelligence aaai 
morgan kaufmann 
hewitt 
viewing control structures patterns passing messages 
artificial intelligence 
kaelbling 
architecture intelligent reactive systems 
georgeff lansky editors proceedings workshop reasoning actions plans 
morgan kaufmann 
ichikawa tokoro 
modelling autonomous agents groups 
demazeau muller editors decentralized ai proceedings european workshop modelling autonomous agents multi agent worlds maamaw 
elsevier north holland 
moszkowski 
executing temporal logic programs 
cambridge university press cambridge 
pnueli 
temporal logic programs 
proceedings eighteenth symposium foundations computer science 
pnueli 
specification development reactive systems 
information processing 
elsevier north holland 
rao georgeff 
modeling agents bdi architecture 
fikes sandewall editors international conference principles knowledge representation reasoning kr cambridge massachusetts april 
morgan kaufmann 
shapiro takeuchi 
object oriented programming concurrent prolog 
shapiro editor concurrent prolog collected papers chapter pages 
mit press 
shoham 
time action relation time knowledge action 
proceedings eleventh international joint conference artificial intelligence ijcai detroit usa 
morgan kaufman 
shoham 
agent oriented programming 
technical report stan cs department computer science stanford university california usa 
thomas shoham schwartz kraus 
preliminary thoughts agent description language 
international journal intelligent systems 

