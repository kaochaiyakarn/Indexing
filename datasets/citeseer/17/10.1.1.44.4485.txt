fully dynamic algorithms maintaining pairs shortest paths transitive closure digraphs valerie king department computer science university victoria box victoria bc canada email val csr uvic ca presents fully dynamic algorithms maintaining pairs shortest paths digraphs positive integer weights approximate shortest paths error factor ffl positive constant ffl amortized update time log log log error factor ffl amortized update time log bn ffl 
exact shortest paths amortized update time log 
query time exact approximate shortest distances exact approximate paths generated time proportional lengths 
fully dynamic transitive closure algorithm update time log query time 
previously known fully dynamic transitive closure algorithm fast query time sided error update time 
algorithms simple data structures deterministic 

problem fully dynamic graph algorithm data structure graph implements line sequence update operations insert delete edges graph answers queries property graph 
dynamic algorithm process queries quickly perform update operations faster computing scratch performed fastest static algorithm 
give fully dynamic algorithms problems directed graphs transitive closure approxi done author visiting berkeley icsi berkeley 
mate exact pairs shortest paths graphs edge weights positive integers bounded consequence pairs shortest path algorithm edge deletions 
data structures implements update operations ffl insert inserts set edges incident vertex ffl delete deletes arbitrary subset edges currently graph 
transitive closure query operation form ffl path current graph 
pairs shortest paths queries form ffl shortest distance 
ffl generate shortest path approximate pairs shortest paths queries form ffl upper bound shortest distance factor ffl shortest distance 
ffl generate path distance factor ffl shortest distance 
number vertices graph number edges initially graph 
update times amortized worst case sequence operations length 
query times proportional length output particular type queries run time 
algorithms deterministic 
transitive closure amortized update time log update 
previously known fully dynamic transitive closure algorithm fast query time randomized sided error update time gamma gamma usual exponent matrix multiplication 
method coppersmith winograd 
exact pairs shortest paths amortized update time log 
previously known fully dynamic algorithms general graphs 
fastest static algorithm exact distances directed graph runs time satisfies equation exponent multiplication theta matrix theta matrix 
smallest value known method 
approximate pairs shortest paths algorithms maintain paths distances bounded product error factor actual shortest distance 
amortized update time graphs unweighted edges error factor ffl positive ffl log log log 
weighted edges error factor ffl amortized update time log bn ffl 
fastest static algorithm approximate pairs shortest paths error factor ffl running time ffl log ffl 
pairs shortest paths edge deletions total cost mn deletion deletions 

techniques overview section show single source shortest path tree distance maintained sequence number edge deletions time md graph positive integer edge weights 
exact pairs shortest path algorithm edge deletions simply maintain forest shortest path trees depth nb 
show maintain exact pairs shortest paths insertions deletions distance vertex maintain single source shortest path tree depth vertices reach tree vertices reached 
call forest trees depth 
pair vertices keep count count number path length operation insert rebuild section show maintain transitive closure 
keep hierarchy lg forests trees depth edges construct forest level depend paths forest previous level 
section maintain approximate pairs shortest paths keeping hierarchy log log log forests trees depth lg depending error factor 
maintain exact shortest paths section maintaining forest trees depth nb 
update paths trees generate shortest paths 

related showed maintain breadthfirst search tree process number deletions time mn number edges number vertices 
henzinger king recognized data structure adapted directed graphs maintain reachability single vertex distances unweighted edges number edge deletions time md 
forest data structures part fully dynamic transitive closure algorithm amortized update time nm gamma 
nm 
exact shortest paths algorithm algorithm involves stitching short paths uses fast matrix 
randomized sided error slow query time log 
king designed dynamic transitive closure algorithm query time sided error 
maintain count number distinct paths pair vertices modular random prime acyclic graphs 
non acyclic graphs reduced acyclic case 
cost update ff ff size strongly connected component advantage algorithm size strongly connected component greater worst case update time matches amortized update time 
techniques king king devised exact shortest path algorithm unweighted graphs distances worst case update time 
incorporate king idea keeping count forest data structure henzinger king 
best amortized update times partially dynamic problems follows maintaining transitive closure insertions deletions deletions acyclic graphs maintaining shortest paths insertions positive integer weights greater nb log 
klein give fully dynamic algorithm allpairs shortest path problem planar graphs 
sum absolute values edge lengths time operation log nd 
reps consider problem maintaining shortest paths different model complexity running time terms parameter different input size 
algorithm maintaining single source shortest path similar short distances deletions case 
experimentally analyzed 
lower bounds dynamic transitive closure shortest paths problems considered researchers general models assumed restrictive imply lower bound algorithms 
see discussion works 
relevant lower bound log log log bound dynamic connectivity undirected graphs cell probe model henzinger fredman 

applications survey application graph algorithms data bases yannakakis discusses application partially dynamic transitive closure problems data bases 
regular path problem data bases corresponds computing transitive closure directed graph relation data base corresponds sets edges common endpoint directed graph 
number states finite automaton regular language 
new fully dynamic transitive closure algorithm new relation inserted nk log kn time 
deletion relation accomplished nk log kn time 
see 
question maintaining distances objects large data base posed 
reps investigated application dynamic shortest paths transitive closure algorithms data flow analysis compilers 
see 

exact pairs shortest paths small distances 
single source shortest path trees depth deletions section give deletions algorithm maintaining single source shortest path tree vertex depth graph edges weights positive integers 
tree edge deleted algorithm mimics dijkstra single source shortest path algorithm reinsert vertices subtree rooted vertex added shortest path tree distance minimal vertices tree 
goal spend time proportional sum degrees vertices distance changed deletion 
call vertex changed determined distance increased 
vertex settled joined source tree edges 
vertex uncertain examined determined distance changed 
vertex distances greater denotes distance deletion revised case revised distance deletion 
distance greater 
vertex maintains set containing vertices settled uncertain tree edge 
maintain min weight vertex minimizes expression 
data structure initialized computing shortest path tree forming vertex tree edge deleted graph removed shortest path tree 
vertex uncertain 
vertices subtree unexamined tree 
vertex uncertain stored heap key old distance changed unsettled stored key 
empty runs delete 
key minimal keys stored uncertain algorithm decides changed key 
changed settled 
settled descendants unexamined automatically reinserted tree 
edges intact 
key changed unsettled 
key minimal keys changed means key settled 
delete uncertain repeat empty 
delete min key 
uncertain key settle changed tree edge remove tree uncertain settle 
changed edge remove 
add key 
uncertain false settle add edge tree 
remove 
uncertain insert 

uncertain uncertain true add key 
proof correctness proof follows dijkstra algorithm minor differences 
note vertices need examined vertices subtree ancestor changed 
note follow dijkstra algorithm wish choose settled vertex minimizes 
vertices necessarily settled may uncertain unexamined 
needs argue minimality key delete min implies settled 
leave details reader 
analysis may implemented heap keys distance represented list 
certain runs time log settle runs log uncertain log degree changed 
changed runs time log degree 
cost running delete logd distances change total number edges stored reduced degree log increased 
worst case time deletion single edge degree log log 
sequence deletions increase times total charge degree log dm log vertices 
log incurred deletions distances change 
gives total cost md log 
faster implementation eliminate heaps save factor log amortized time 
sketch variation 
represented array set settled uncertain vertices weight heap replaced set changed unsettled vertices plus array set uncertain vertices note algorithm sequence minimum keys extracted heap nondecreasing 
keep pointer possible value minimum key 
delete run initially set 
value changed unsettled vertex examined see settled determined nonempty 
vertices examined uncertain vertices settled changed unsettled 
remain unsettled vertices incremented process repeated 
analysis faster implementation implementation reduces costs certain settle changed factor log distances source changed cost delete 
vertex distance source changed costs consider cost charged changed vertex cost incrementing incremented uncertain vertices settled gamma times 
introduces extra additive cost run delete 
total cost increments md deletions 
changed vertex examined time incremented vertex settled cost charged changed vertex implementation dw degree dw change distance worst case cost operation nd 
total cost deletions remains md cost vertex maximized distance increases time increased maximum cost degree 
total cost deletions degree md 
sections assume faster implementation 
drawbacks worst case performance extra costs incurred operation increasing edge weight described 
handling edge weight increases hard modify algorithm handle increase edge weight 
suppose weight increased 
edge inserting run delete 
implementation method cost delete log plus degree log increased 
edge increased times mb calls delete purpose increasing edge weights 
adding operation results cost mb log md leaves asymptotic total time unchanged 
second implementation method distances increased cost edge increase 
increase edge weight causes vertex increase distance source described extra additive cost 
occur times number edges weights increased 
total cost md nd 
operations increase edge weight increase value total cost nd sections discuss special operation increasing edge weights technique analysis follow easily described 
leave reader 
pairs shortest paths deletions maintain pairs shortest paths graph weights positive integers updates restricted edge deletions edge weight increases 
suffices maintain single source shortest path tree depth nb vertex 
shortest path vertex tree total cost processing deletions mn 
update operations amortized cost update operation 

forest trees show maintain pairs shortest paths distances pairs vertices distance apart 
algorithm maintain single source shortest path trees depth greater vertex vertices reach second vertices reachable distance tree distance tree define pair vertices depth keep count equal number list list vertices 
pair vertices keep set minimum count positive 

initialize suffices maintain trees vertex set count count 
ffl insert remove exist 
build maintain new new set edges current graph adjust count list accordingly 
call vertex center insert 
ffl delete process deleted edge tree data structure contains 
time vertex moves tree may need adjust count count list 
ffl answer query distance return 
ffl return shortest path vertex vertex list 
path shortest path 
analysis implementation details initialize maintain single source shortest path tree md 
original forest trees initialize count list time tree 
total cost maintain nd tree increase times total cost initializing maintaining initial forest trees 
insert trees destroyed recreated reset count list maintain tree md time 
time vertex moves tree example count list revised vertex gamma vertices 
vertex moves times tree maximum cost maintaining count lists modifications single shortest path tree 
cost may charged insert operation constructs single source shortest path trees 
total cost insert md 
determining takes longer time pair vertices charge delete operation cost updating 
alternatively maintain count heap extract minimum log time change count 
gives additional log factor reduces cost deletion 
total cost sequence del deletions ins insertions queries del ins log ins log depending implementation 
implementation amortized time update operation sequence length 
second amortized time log insertion insertions nd log deletion del ins 
proof correctness lemma algorithm maintains invariant invariant shortest path length vertex center insertion 
path proof edges graph time created included data structures 
edges currently graph data structures edges deleted built deleted data structures 
maintain shortest paths vertex vertex particular sum distance follows invariant accurate updating count list theorem pair vertices distance greater distance minimum count 

transitive closure maintain dlg ne forests contains pair breadthfirst search trees depth vertex define count 
pairs vertices forest maintain ffl count number vertices ffl list set vertices forest trees depth constructed previous section unweighted edges current graph 
maintain count gamma 
initially forest breadthfirst search trees depth constructed graph 
note count count 
different values distinguished keep count depths greater depth breadthfirst search trees 
routines insert delete defined previous section modified definition count forest insert adds uses set edges construct new trees delete deletes edges data structures insert set edges incident vertex insert note executing rebuild possible inserting edges incident may count gamma positive vertices initialization may longer case forest breadthfirst search trees depth constructed maintained graph 
delete set edges delete count changed proof correctness dist denote shortest distance current graph show lemma invariant holds invariant vertices count dist path follows theorem count iff path proof lemma proof induction count iff edge assume directions invariant true gamma 
suppose path length center insertion midpoint assume lies 
lies argument similar 
dist gamma dist gamma dist gamma center insertion inequalities true built true time 
induction count gamma count gamma count gamma positive built edges data structures 
count 
concludes direction proof 
suppose count path count implies 
edge inserted count gamma deleted count gamma 
count gamma 
induction assumption edge represents path path consisting concatenation 
analysis section see cost maintaining initial forest total maintain initial forests 
update operation requires update operation forest cost update operation total kn 
cost update dk sequence length 
dlg ne log 

approximate shortest path give approximate shortest path algorithm directed graphs graphs unweighted edges 
lg lg lg lg initialize maintain log log forests breadthfirst search trees depth vertex pairs vertices forest maintain ffl count number vertices ffl count gamma jg ffl list fv jg ffl pair minimal minimal count 
vertex breadthfirst search trees constructed previous section depth graph 
perform updates answer queries follows 
ffl insert set edges incident vertex delete arbitrary set edges routines definitions count list defined maintain 
ffl answer query approximate shortest path output jd gamma 
ffl generate approximate shortest path 
choose vertex list recursively determine approximate shortest paths edge path edge path 
proof correctness show 
lemma dist shortest distance current graph 
invariant holds invariant 
edge dist gamma 
path length dist jd gamma 
dist gamma gamma edge 
dist gamma gamma gamma path length greater proof prove invariant induction straightforward left reader 
invariant follows easily left reader 
invariant true 
assume true show true 
center insertion path length greater gamma partition path path segments length gamma gamma segments length gamma gamma side gamma segments length gamma gamma gamma segments length gamma gamma segments fewer edges 
case total segments 
segment length greater gamma gamma induction assumption segment represented edge represented edge constructed 
represented edge proof invariant similar proof invariant left reader 
invariant implies theorem 
theorem 
gamma gamma dist gamma gamma gamma gamma dist jd gamma jd gamma factor gamma actual distance bound length gamma log log gamma 
choosing lg lg lg lg get error ffl positive constant ffl 
analysis analysis transitive closure algorithm see cost maintaining initial forests 
update operation requires kn 
maintaining pair vertices performed 
cost update dk sequence length log log log lg lg log log 
reducing error sketch technique lowering error ffl ffl 
error worst small value greater 
reduce error add certain redundancy small path length represented lower level hierarchy forests 
trees distance count gamma dg 
define weight minimal count 
invariants follow length path refers sum weights edges path 
difference case path gamma case exact distance 
second case error factor greater gamma lg ln ffl log log error factor ffl 
update time increased factor trees depth maintained 
setting lg substituting update time log ffl 
graphs weighted edges weight gamma represent edge weighted jd weight add edge weighted furthermore shortest distance may bn maximum weight edge need increase number forests log nb log 
choosing log bn log ffl gives desired error 
setting lg bn substituting gives update time log bn log ffl 

exact shortest paths arbitrarily long paths graphs unweighted edges construct maintain forest breadthfirst search trees depth refer root subset ae blocker directed path starting root tree tree respectively exactly length contains vertex distinct root 
lemma blocker reachable shortest path may partitioned consecutive subpaths denotes subpath vertex vertex properties subpath consists path path proof prove induction length shortest path length greater suppose lemma true pairs lengths consider path length 
inserted edge path 
distance shortest path vertex distance edges graph time constructed leaf distance path equal shortest path passes shortest path containing path possible remainder path shorter appropriately partitioned induction 
vertex distance leaf distance element path path size induction lemma holds concatenation 
observe set elements subsets elements size element contained ld subsets 
show lemma blocker size log constructed deterministically time nd ln 
proof score vertex number leaves depth subtrees rooted vertex summed trees vertex appears nonroot 
total number leaves depth trees 
construct find vertex maximum score add remove subtrees tree appears 
number leaves remaining set trees reduced gamma ln selections blocker 
find scores suffices traverse tree postorder labeling parent node sum children labels 
revise score vertex added number leaves subtree tree subtree removed subtract score subtract ancestors 
running time algorithm vertex tree removed tree trees plus inserted cost tree visit ancestors total cost nd ln 
recall dist distance greater 
stitching algorithm 
construct blocker 
algorithm compute static allpairs shortest paths graph weight edge 
ss denote shortest distance computed algorithm 

min ss 
shortest path concatenation shortest path vertex minimizes expression 

min 
shortest path concatenation shortest path vertex minimizes expression 
analysis cost constructing blocker nd log 
cost performing stitching algorithm dominated cost step jsj log 
amortized cost update maintaining shortest paths length 
choosing jsj log gives amortized update time log 

exact shortest paths graphs weighted edges maintain pairs shortest distances weighted graphs algorithm described previously 
difference occurs definition size blocker bound maximum weight call subset ae blocker path starting root tree tree respectively length greater gamma contains vertex distinct root 
length refers sum weights edges path 
path contains gamma vertices excluding root 
construct similar way blocker size log 
cost stitching log cost update maintaining pairs shortest paths distance 
choosing jsj nb log gives running time log 
ausiello italiano spaccamela 
incremental algorithm minimal length paths 
proceedings acm siam symposium discrete algorithms soda pages 
buchsbaum kanellakis vitter 
data structure arc insertion regular path finding 
annals mathematics artificial intelligence 
coppersmith winograd 
matrix multiplication arithmetic progressions 
journal symbolic computation 

experimental analysis dynamic algorithms shortest path problem 
acm experimental algorithmics article 
goldman shivakumar venkatasubramanian garcia 
proximity search databases 
proceedings th vldb conference 
henzinger fredman 
lower bounds fully dynamic connectivity problems graphs 
algorithmica 
henzinger king 
fully dynamic closure 
th symposium foundations computer science focs 
italiano 
amortized efficiency path retrieval data structure 
theoretical computer science 
italiano 
finding paths deleting edges directed acyclic graphs 
information processing letters pages 
king 
fully dynamic algorithm maintaining transitive closure 
proceedings annual symposium theory computing stoc 
van leeuwen 
maintenance transitive closure transitive reduction graphs 
proc 
workshop graph theoretic concepts computer science pages 
lncs springer verlag 
ramalingam reps incremental algorithm generalization shortest path problem 
algorithms 
reps www cs wisc sim reps reps ramalingam 
computational complexity dynamic graph problems 
theoretical computer science 
zwick 
pairs shortest paths weighted directed graphs exact exact algorithms 
th symposium foundations computer science focs pages 
