combining partial order symmetry reductions allen emerson jha 
doron peled department computer science university texas austin tx usa school computer science carnegie mellon university pittsburgh pa usa bell laboratories lucent technologies mountain ave murray hill nj usa 
partial order reduction techniques reduce time memory model checking procedures quite popular 
partial order reduction techniques exploit independence actions 
symmetry reduction techniques exploit inherent structure system reduce state space explored model checking 
provide framework combining partial order symmetry reductions 
algorithms exploit reduction techniques simultaneously 
partial order methods exploit independence actions reduce state space explosion model checking concurrent systems 
basic idea set interleaving sequence actions define sequences equivalent reordering independent actions equivalent 
specifications distinguish equivalent sequences consider subset sequences equivalence class 
reduction generates state space includes sufficiently big subset sequences representing equivalent ones 
example assume actions ff fi independent 
independence means matter order finite state system executes actions ff fi 
sequence equivalent sequence 
algorithm considers sequence omit sequence 
methods exploring subset actions enabled state 
subset selected constraints guarantee representatives equivalence class generated 
research author supported nsf 
ccr semiconductor research contract dp 
reseach second author sponsored part national science foundation 
ccr semiconductor research contract dj wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa 
symmetry methods exploit architectural symmetry system 
example token ring composed identical components rotate ring processes affecting behavior system 
symmetry finite state system composed identical components 
symmetry exploited reachability analysis petri nets 
symmetry methods avoid state explosion model checking shown quite successful 
basic idea symmetry system induces equivalence relation state space system 
performing model checking discard state explored equivalent state combines symmetry partial order reduction techniques 
symmetry partial order methods explore different phenomena system possible techniques applied simultaneously obtaining better reduction applying separately 
show case 
related valmari suggested combine partial order reduction symmetry deadlock detection colored petri nets 
result shown interpreted generally combining reduction techniques preserving equivalence simulation relations 
respect generalize symmetry partial order reductions equivalence preserving reductions 
preserving reductions may involve somewhat different specialized proof similar ideas equivalence relations order preserve correctness checked property may applied 
effort put proofs combined reductions modular separating possible arguments concerning partial order reduction arguments concerning symmetry reduction 
organized follows section provides definitions 
section gives framework combining symmetry independence explain prove combined reduction algorithms 
section gives algorithm preserves ltl formulas nexttime operator 
section provides algorithm preserves ctl nexttime operator 
section concludes directions open problems 
due limited space results lemmas provided 
appear full version 
preliminaries section introduce various definitions 
subsection defines labeled transition system 
temporal logics ctl ctl ltl ltl defined 
reader referred syntax semantics logics 
subsection defines different preorders ltss 
subsection defines means actions independent 
labeled transition system ap set atomic propositions 
labeled transition system lts tuple act finite set states theta act theta transition relation ff written ff 
ap labeling function associates state set atomic propositions true state 
act finite set actions 
initial state 
function ff returns set ff successors ff iff ff action ff said enabled state exists state ff symbol en denotes set actions enabled state action ff called invisible iff ff 
basically invisible action change truth atomic propositions 
set invisible actions denoted set visible actions denoted vist various pre orders processes ltss act act relation theta called bisimulation conditions hold assume conditions hold ffl ffl arbitrary transition ff exists ff ffl symmetric condition holds roles reversed 
said bisimilar denoted exists bisimulation definition 
act act ltss 
theta relation 
consider paths ff ff delta delta delta fi fi delta delta delta paths called stuttering equivalent exists infinite sequences natural numbers delta delta delta delta delta delta condition true 
paths called stuttering equivalent stuttering equivalent 
refer set integers fi delta delta delta gamma fk delta delta delta gamma th blocks define notion stuttering bisimulation 
stuttering bisimulation similar bisimulation lts allowed take steps simulate path lts 
ltss act act relation theta called stuttering bisimulation conditions hold conditions hold ffl ffl path starting exists stuttering equivalent path starting see definition explanation stuttering equivalent 
ffl condition previous holds roles reversed 
said stuttering bisimilar exists stuttering bisimulation 
denote sb notice stuttering bisimulation relation distinguish states 
surprising stuttering bisimulation preserves truth ctl formula time operator 
proof theorem appeared 
theorem 
formula ctl 
stuttering bisimilar ltss 
stuttering bisimulation relation act act said stuttering path equivalent denoted spe path starting exists stuttering equivalent path starting symmetric condition holds roles reversed 
theorem 
formula ltl 
act act stuttering path equivalent ltss 
lemma 
implies sb similarly sb implies spe lemma 
pre orders sb spe transitive 
reconciling symmetry commutativity selection function structure definition 
act lts 
function selection function exists bisimulation relation theta implies say preserves bisimulation relation intuitively function picks representative equivalence class induced bisimulation selection function reduced state space consist representative states range edges definition 
selection function lts act define corresponding lts act manner 
ff exists ff 
show reduced state space bisimilar original state space 
theorem preserves ctl properties 
lemma 
lts act selection function bisimilar 
proof theta bisimulation selection function 
construct theta manner prove bisimulation relation 
assume obvious labels match 
assume ff need show ff exists ff 
definition ff transitivity implies assume ff need show ff definition implies exists ff exists ff fact recall bisimulation preserving transitivity implies independent actions define concept independent actions 
definition 
act lts 
independence relation actions irreflexive symmetric relation act theta act pair actions ff fi called independent actions hold fff fig en state ff fi en 
fff fig ent exists path ff fi iff exists path fi ff condition states ff fi independent executing ff state disable action fi 
second condition states independent actions commutative 
notice relation independence relation respect particular lts lemma states independence relation independence relation means independence relation independence relation performing partial order reduction lemma 
independence relation lts act bisimulation preserving selection function 
case independence relation corresponding lts denoted act 
proof independence relation prove independence relation bisimulation relation preserved assume ff fi corresponding conditions definition independence relation cases assume fff fig 
ff th 
prove fi 
definition exists ff independence relation fi en 
bisimulation preserving fi ent turn implies fi 
assume fff fig en th 
suppose exists path ff fi ff assume fi fi en construct path ff fi independence relation exists path fi ff transition ff exists 
transitivity fi ff path second part proof uses fact implies 
symmetry perm group permutations finite set say acts mean subgroup perm 
subgroup denote define concept symmetry group definition 
lts act group acting called symmetry group iff ff act oe ff iff oe ff oe 
oe oe 
notice interested checking temporal formula labeling function lts restricted atomic propositions occurring restrictions labelings hold atomic propositions occurring temporal formula interest 
say orbit iff exists oe oe theta theta orbit relation induced symmetry group lts act symmetry group acting define representative function function properties orbit 
orbit 
function maps state unique representative orbit 
lemma states bisimulation preserving selection function means entire framework automatically gives method combining partial order symmetry reductions 
easy show lemma 
assume lts act symmetry group acting representation function corresponding case bisimulation preserving selection function 
definition symmetry group subsection allow actions permuted 
overly restrictive 
allow symmetry group permute states actions simultaneously 
prove new seemingly powerful notion symmetry equivalent definition symmetry 
assume lts symmetry group definition 
construct lts relabeling actions symmetry group definition 
group perm theta perm act group permutations oe oe oe perm oe perm act 
permutation oe oe perm theta perm act ff act define oe ff oe ff 
definition 
lts act group perm theta perm act called symmetry group iff ff iff ff 
oe oe 
orbit action ff act denoted ff set ff ffi ff fi independence relation lts symmetry group definition 
define theta act theta act manner ff fi theta exists ff fi lemma states independence relation theta independence relation lemma 
act lts perm theta perm act symmetry group independence relation theta independence relation proof lemma omitted space restrictions 
assume working theta notice general theta larger lemma states property action invisible invariant orbit 
lemma 
oe arbitrary permutation action ff iff oe ff theta act denotes set orbits actions 
lts denoted act symmetry group perm theta perm act definition independence relation act theta act construct symmetry group perm lts denoted theta act independence relation theta act theta theta act manner 
ff iff ff oe iff exists oe oe oe ff fi iff ff ff fi fi ff fi lemma states definition loss generality 
lemma 
symmetry group lts definition 
constructed 
case symmetry group definition proof immediate construction algorithm preserving ltl act lts bisimulation preserving selection function 
section provide algorithm performs reduction reduction corresponding selection function simultaneously 
basically describe algorithm performs reduction lts act require explicit construction algorithm uses structure algorithm sake proof 
push expand node function expand node working set ample working set oe ff action ample working set working set ff new push expand node create edge ff fi mark explored 
expand node fig 

state space expansion algorithm routine new checks state explored 
function push pushes state search stack 
assume state marked explored line popped search stack 
called run algorithm execution algorithm sets ample en th chosen rules action ff dependent action ample exists path starting ff appears action ample appears 
ample proper subset actions enabled action ff ample holds state set ff th search stack 
ample proper subset en th actions ample visible theorem states run algorithm produces structure stuttering path equivalent theorem 
lts produced arbitrary run algorithm 
case spe proof see 
modify algorithm produce algorithm 
algorithm works lts modifications behaves performing partial order reduction lts algorithm constructed changing lines 
reproduce algorithm convenience mark changed lines 
called run push expand node function expand node working set ample working set oe ff action ample working set working set ff new push expand node create edge ff fi mark explored 
expand node fig 

state space expansion algorithm algorithm execution algorithm sets ample en chosen rules 
action ff dependent action ample exists path starting ff appears action ample appears 
ample proper subset actions enabled action ff ample holds state set ff search stack 
ample proper subset en actions ample visible lemma main theorem 
lemma 
act lts bisimulation preserving selection function 
corresponding lts 
conditions exists path ff ff delta delta delta exists path ff ff delta delta delta notice exactly actions appear paths 
action ff visible visible ent 
proof results direct consequence fact bisimilar see lemma 
prove run algorithm exists run algorithm runs produce lts 
emphasize algorithm exists sake proof 
practice implemented 
basic idea theorem run lockstep show ample sets satisfy conditions algorithm satisfy conditions algorithm step 
theorem 
run algorithm exists run algorithm lts produced runs 
proof construct run algorithm trace execution corresponding run algorithm 
point prove invariants hold run chooses set ample line satisfies conditions ample satisfies run state runs stacks states states marked explored 
initially invariants hold runs push stack 
lets say point execution run algorithm chooses set ample line satisfies conditions 
lemma ample satisfies conditions 
consider state ff th ff ample 
notice definition exists state ff 
obvious condition search stack 
ample considered run satisfies condition run notice lemma implies ample en ample en th advance runs assume consider states order loop starting line 
theorem states run algorithm produces lts stuttering path equivalent theorem 
arbitrary run algorithm 
lts produced run spe proof run algorithm produces lts run run exists theorem 
theorem spe lemmas imply spe notice theorem satisfy ltl formulas 
check specification ltl smaller lts 
algorithm preserving ctl algorithm previous section preserved existence equivalent paths initial state 
semantics branching time logics ctl computation trees 
logics distinguish branching structure node 
preserve branching time logics put stringent restrictions set ample considered algorithms 
call run algorithm ample satisfies condition addition conditions 
set ample singleton set ample en th 
similar manner call run algorithm ample satisfies condition addition conditions 
set ample singleton set ample en 
treatment exactly section 
skip proofs 
proofs lemma establish condition implies condition 
lts act called deterministic ff act jff 
assume lts question deterministic 
notice deterministic lts function lts 
restriction needed proof theorem 
theorem 
lts produced arbitrary run algorithm 
case sb proof see 
proof theorem exactly proof theorem 
theorem 
run algorithm exists run algorithm lts produced runs 
theorem states run algorithm produces lts stuttering bisimilar theorem 
arbitrary run algorithm 
lts produced run sb proof run algorithm produces lts run run exists theorem 
theorem sb lemmas sb notice theorem satisfy ctl formulas 
check specification ctl smaller lts example section example illustrate ideas 
shows solution process mutual exclusion problem 
denotes process neutral section 
trying region process signals process critical section 
dealing processes 
process transition sets auxiliary variable 
signals fact process move critical section 
symmetric transition appears process 
obvious exchanging indices symmetry system 
corresponding symmetry group 
possible actions corresponding transitions 
shown ff ff fi fi ffi ffi discussion subsection actions name different indices orbit action group example ff ff orbit 
renaming actions performing symmetry reductions get structure 
clear representative function notice action ff fi independent 
performing partial order reduction structure get structure 
fig 

token ring describes techniques combine partial order symmetry reduction methods 
implement methods existing verification tools try examples 
interesting problem derive symmetry independence information description lts verified 
presently verification systems rely user provide information 
investigate reduction techniques combined similar ideas 

browne clarke grumberg 
characterizing finite kripke structures propositional temporal logic 
theoretical computer science 

clarke emerson sistla 
automatic verification finitestate concurrent systems temporal logic specifications 
acm transactions programming languages systems april 

clarke jha 
exploiting symmetry temporal logic model checking 
courcoubetis 

courcoubetis editor 
proceedings fifth workshop computer aided verification volume lecture notes computer science 
springer verlag june 

allen emerson prasad sistla 
symmetry model checking 
courcoubetis 
fig 

quotient structure fig 

quotient structure po reduction 
rob gerth kuiper doron peled wojciech penczek 
partial order approach branching time logic model checking 
third israel symposium theory computing systems pages tel aviv israel 
ieee 

godefroid 
partial orders improve automatic verification methods 
kurshan clarke 

huber jensen jensen 
reachability trees high level petri nets 
rozenberg editor advances petri nets pages 

ip dill 
better verification symmetry 
editor proceedings eleventh international symposium computer hardware description languages applications 
north holland april 

kurshan clarke editors 
proceedings workshop computer aided verification 
springer verlag june 

doron peled 
model checking representatives 
th international conference computer aided verification greece number lncs pages crete greece 
springer verlag 

doron peled 
partial order reduction linear branching temporal logics process algebras 
partial orders methods verification dimacs princeton nj usa 
american mathematical society 


reachability analysis petri nets symmetries 
syst 
anal 
model 
simul 

valmari 
stubborn sets reduced state space generation 
proceedings tenth international conference application theory petri nets 

valmari 
stubborn attack state explosion problem 
kurshan clarke 

valmari 
stubborn sets colored petri nets 
proceedings th international conference application theory petri nets pages denmark 
article processed macro package llncs style 
