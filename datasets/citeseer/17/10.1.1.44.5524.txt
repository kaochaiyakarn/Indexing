object oriented database system manifesto malcolm atkinson university glasgow fran cois bancilhon david dewitt university wisconsin klaus dittrich university zurich david maier oregon graduate center stanley zdonik brown university attempts define object oriented database system 
describes main features characteristics system qualify objectoriented database system 
separated characteristics groups ffl mandatory ones system satisfy order termed objectoriented database system 
complex objects object identity encapsulation types classes inheritance overriding combined late binding extensibility computational completeness persistence secondary storage management concurrency recovery ad hoc query facility 
ffl optional ones added system better mandatory 
multiple inheritance type checking inferencing distribution design transactions versions 
ffl open points designer number choices 
programming paradigm representation system type system uniformity 
taken position expecting final word erect provisional landmark orient debate 
currently object oriented database systems oodbs receiving lot attention experimental theoretical considerable debate definition systems 
points characterize field stage lack common data model ii lack formal foundations iii strong experimental activity 
codd original codd gave clear specification relational database system data model query language specification exists object oriented database systems maier 
claiming complete object oriented data model exists proposals literature see albano richard carey examples consensus single 
opinion slowly converging gross characteristics family object oriented systems clear consensus objectoriented system object oriented database system 
second characteristic field lack strong theoretical framework 
compare object oriented programming logic programming equivalent van kowalski 
need solid underlying theory obvious semantics concepts types programs ill defined 
absence solid theoretical framework consensus data model impossible achieve 
lot experimental underway people building systems 
systems just prototypes bancilhon nixon banerjee skarra carey commercial products atwood maier base 
interest objectoriented databases driven needs design support systems cad case office information systems 
applications require databases handle complex data evolve gracefully provide high performance dictated interactive systems 
implementation situation analogous relational database systems start ups object oriented case 
relational systems disagreements specific points form query language relations sets bags distinctions cases superficial common underlying model 
people mainly developing implementation technology 
today simultaneously choosing specification system producing technology support implementation 
respect specification system darwinian approach hope set experimental prototypes built fit model emerge 
hope viable implementation technology model evolve simultaneously 
unfortunately flurry experimentation risk system emerging system fittest provide significant subset functionality demanded market 
classical unfortunate pattern computer field early product de facto standard disappears 
pattern true languages operating systems fortran lisp cobol sql examples situations 
note goal standardize languages refine terminology 
important agree definition object oriented database systems 
step goal suggests characteristics systems possess 
expect straw man invalidate confirm points mentioned 
note survey state art oodbs technology pretend assess current status technology merely proposes set definitions 
separated characteristics object oriented database systems categories mandatory ones system satisfy deserve label optional ones added system better mandatory open places designer select number equally acceptable solutions 
addition leeway best formulate characteristic mandatory optional 
rest organized follows 
section describes mandatory features oodbs 
section describes optional features section presents degrees freedom left system designers 
mandatory features golden rules object oriented database system satisfy criteria dbms object oriented system extent possible consistent current crop object oriented programming languages 
criterion translates features persistence secondary storage management concurrency recovery ad hoc query facility 
second translates features complex objects object identity encapsulation types classes inheritance overriding combined late binding extensibility computational completeness 
complex objects thou support complex objects complex objects built simpler ones applying constructors 
simplest objects objects integers characters byte strings length booleans floats add atomic types 
various complex object constructors tuples sets bags lists arrays examples 
minimal set constructors system set list tuple 
sets critical natural way representing collections real world 
tuples critical natural way representing properties entity 
course sets tuples important gained wide acceptance object constructors relational model 
lists arrays important capture order occurs real world arise scientific applications people need matrices time series data 
object constructors orthogonal constructor apply object 
constructors relational model orthogonal set construct applied tuples tuple constructor applied atomic values 
examples non normal form relational models top level construct relation 
note supporting complex objects requires appropriate operators provided dealing objects composition 
operations complex object propagate transitively components 
examples include retrieval deletion entire complex object production deep copy contrast shallow copy components replicated referenced copy object root 
additional operations complex objects may defined course users system see extensibility rule 
capability requires system provided provisions distinguishable types part general 
object identity thou support object identity object identity long existed programming languages 
concept databases hall maier price khoshafian copeland 
idea model object identity object existence independent value 
notions object equivalence exist objects identical object equal value 
implications object sharing object updates 
object sharing identity model objects share component 
pictorial representation complex object graph limited tree system object identity 
consider example person name age set children 
assume peter susan year old child named john 
real life situations may arise susan peter parent child children involved 
system identity peter represented peter john susan represented susan john 
way expressing peter susan parents child 
identity model structures share common part john fg capturing situations 
object updates assume peter susan parents child named john 
case updates susan son applied object john consequently peter son 
value system sub objects updated separately 
object identity powerful data manipulation primitive basis set tuple recursive complex object manipulation abiteboul kanellakis 
supporting object identity implies offering operations object assignment object copy deep shallow copy tests object identity object equality deep shallow equality 
course simulate object identity value system introducing explicit object identifiers 
approach places burden user insure uniqueness object identifiers maintain referential integrity burden significant operations garbage collection 
note identity models norm imperative programming languages object manipulated program identity updated 
identity comes name variable physical location memory 
concept quite new pure relational systems relations value 
encapsulation thou encapsulate objects idea encapsulation comes need cleanly distinguish specification implementation operation ii need modularity 
modularity necessary structure complex applications designed implemented team programmers 
necessary tool protection authorization 
views encapsulation programming language view original view concept originated database adaptation view 
idea encapsulation programming languages comes data types 
view object interface part implementation part 
interface part specification set operations performed object 
visible part object 
implementation part data part procedural part 
data part representation state object procedure part describes programming language implementation operation 
database translation principle object encapsulates program data 
database world clear structural part type part interface depends system programming language world data structure clearly part implementation interface 
consider instance employee 
relational system employee represented tuple 
queried relational language application programmer writes programs update record raise employee salary fire employee 
generally written imperative programming language embedded dml statements fourth generation language stored traditional file system database 
approach sharp distinction program data query language ad hoc queries programming language application programs 
object oriented system define employee object data part probably similar record defined relational system operation part consists raise fire operations operations access employee data 
storing set employees data operations stored database 
single model data operations information hidden 
operations outside specified interface performed 
restriction holds update retrieval operations 
encapsulation provides form logical data independence change im plementation type changing programs type 
application programs protected implementation changes lower layers system 
believe proper encapsulation obtained operations visible data implementation operations hidden objects 
cases encapsulation needed system significantly simplified system allows encapsulation violated certain conditions 
example ad hoc queries need encapsulation reduced issues maintainability important 
encapsulation mechanism provided oodbs appear cases enforcement appropriate 
types classes thou support types classes issue main categories object oriented systems supporting notion class supporting notion type 
category systems smalltalk goldberg robson gemstone maier vision generally systems smalltalk family orion banerjee flavors bobrow base base lore caseau generally systems derived lisp 
second category find systems stroustrup simula simula trellis owl schaffert atwood bancilhon 
type object oriented system summarizes common features set objects characteristics 
corresponds notion data type 
parts interface implementation implementations 
interface part visible users type implementation object seen type designer 
interface consists list operations signatures type input parameters type result 
type implementation consists data part operation part 
data part describes internal structure object data 
depending power system structure data part complex 
operation part consists procedures implement operations interface part 
programming languages types tools increase programmer productivity insuring program correctness 
forcing user declare types variables expressions manipulates system reasons correctness programs typing information 
type system designed carefully system type checking compile time deferred compile time 
types mainly compile time check correctness programs 
general type systems type class citizen special status modified run time 
notion class different type 
specification type run time notion 
contains aspects object factory object warehouse 
object factory create new objects performing operation new class cloning prototype object representative class 
object warehouse means attached class extension set objects instances class 
user manipulate warehouse applying operations elements class 
classes checking correctness program create manipulate objects 
systems employ class mechanism classes class citizens manipulated run time updated passed parameters 
cases providing system increased flexibility uniformity renders compile time type checking impossible 
course strong similarities classes types names meanings differences subtle systems 
feel choose approaches consider choice left designer system see section 
require system offer form data structuring mechanism classes types 
classical notion database schema replaced set classes set types 
feel necessary system automatically maintain extent type set objects type database extent type maintained system accessible user 
consider example rectangle type databases multiple users 
sense talk set rectangles maintained system perform operations 
think realistic ask user maintain manipulate set rectangles 
hand case type employee nice system automatically maintain employee extent 
class type hierarchies classes types inherit ancestors inheritance advantages powerful modeling tool gives concise precise description world helps factoring shared specifications implementations applications 
example help illustrate interest having system provide inheritance mechanism 
assume employees students 
employee name age salary die get married paid dull life employee 
student age name set grades 
die get married gpa computed 
relational system data base designer defines relation employee relation student writes code die marry pay operations employee relation writes code die marry gpa computation student relation 
application programmer writes programs 
object oriented system inheritance property recognize employees students persons common fact person specific 
introduce type person attributes name age write operations die marry type 
declare employees special types persons inherit attributes operations special attribute salary special operation pay 
similarly declare student special kind person specific set grades attribute special operation gpa computation 
case better structured concise description schema factored specification written programs factored implementation 
inheritance helps code reusability program level largest number objects share 
types inheritance substitution inheritance inclusion inheritance constraint inheritance specialization inheritance 
substitution inheritance say type inherits type perform operations objects type object type 
place object type substitute object type kind inheritance behavior values 
inclusion inheritance corresponds notion classification 
states subtype object type object type 
type inheritance structure operations 
example square type methods get set size filled square methods get set size fill color 
constraint inheritance subcase inclusion inheritance 
type subtype type consists objects type satisfy constraint 
example inheritance subclass person teenagers don fields operations persons obey specific constraints age restricted 
specialization inheritance type subtype type objects type objects type contains specific information 
examples persons employees information employees persons extra fields 
various degrees types inheritance provided existing systems prototypes prescribe specific style inheritance 
overriding overloading late binding thou bind prematurely contrast previous example cases wants name different operations 
consider example display operation takes object input displays screen 
depending type object want different display mechanisms 
object picture want appear screen 
object person want form tuple printed 
object graph want graphical representation 
consider problem displaying set type members unknown compile time 
application conventional system operations display person display bitmap display graph 
programmer test type object set corresponding display operation 
forces programmer aware possible types objects set aware associated display operation accordingly 
case type person display bitmap display bitmap graph display graph object oriented system define display operation object type level general type system 
display single name graphs persons pictures 
redefine implementation operation types type redefinition called overriding 
results single name display denoting different programs called overloading 
display set elements simply apply display operations system pick appropriate implementation run time 
display gain different advantage type implementors write number programs 
application programmer worry different programs 
addition code simpler case statement types 
code maintainable new type introduced new instance type added display program continue modification 
provided override display method new type 
order provide new functionality system bind operation names programs compile time 
operation names resolved translated program addresses run time 
delayed translation called called late binding 
note late binding type checking difficult cases impossible preclude completely 
computational completeness thou computationally complete programming language point view property obvious simply means express computable function dml database system 
database point view novelty sql instance complete 
advocating designers object oriented database systems design new programming languages computational completeness introduced reasonable connection existing programming languages 
systems existing programming language banerjee atwood bancilhon see bancilhon maier discussion problem 
note different resource complete able access resources system screen remote communication language 
system computationally complete able express complete application 
powerful database system stores retrieves data performs simple computations atomic values 
extensibility thou extensible database system comes set predefined types 
types programmers write applications 
set type extensible sense means define new types distinction usage system defined user defined types 
course strong difference way system user defined types supported system invisible application application programmer 
recall type definition includes definition operations types 
note encapsulation requirement implies mechanism defining new types 
requirement strengthens capability saying newly created types status existing ones 
require collection type constructors tuples sets lists extensible 
persistence thou remember thy data requirement evident database point view novelty programming language point view atkinson 
persistence ability programmer data survive execution process order eventually reuse process 
persistence orthogonal object independent type allowed persistent explicit translation 
implicit user explicitly move copy data persistent 
secondary storage management thou manage large databases secondary storage management classical feature database management systems 
usually supported set mechanisms 
include index management data clustering data buffering access path selection query optimization 
visible user simply performance features 
critical terms performance absence keep system performing tasks simply take time 
important point invisible 
application programmer write code maintain indices allocate disk storage move data disk main memory 
clear independence logical physical level system 
concurrency thou accept concurrent users respect management multiple users concurrently interacting system system offer level service current database systems provide 
insure harmonious coexistence users working simultaneously database 
system support standard notion atomicity sequence operations controlled sharing 
serializability operations offered strict alternatives may 
recovery thou recover hardware software failures system provide level service current database systems 
case hardware software failures system recover bring back coherent state data 
hardware failures include processor disk failures 
ad hoc query facility thou simple way querying data main problem provide functionality ad hoc query language 
require done form query language just service provided 
instance graphical browser sufficient fulfill functionality 
service consists allowing user ask simple queries database simply 
obvious yardstick course relational systems test take number representative relational queries check stated amount 
note facility supported data manipulation language subset 
believe query facility satisfy criteria high level able express words mouse clicks non trivial queries concisely 
implies reasonably declarative emphasize 
ii efficient 
formulation queries lend form query optimization 
iii application independent possible database 
requirements eliminates specific querying facilities application dependent require writing additional operations user defined type 
summary concludes list mandatory features distinction traditional object oriented database systems clear 
relational database systems satisfy rules 
database systems partially satisfy rules 
people argued object oriented database systems systems 
noted systems completely satisfy rules object constructors orthogonal object identity treated uniformly relationships restricted ii satisfy rules 
collection features authors reached consensus required optional 
features ffl view definition derived data ffl database administration utilities ffl integrity constraints ffl schema evolution facility 
optional features put heading things clearly improve system mandatory object oriented database system 
features object oriented nature multiple inheritance 
included category system objectoriented belong core requirements 
features simply database features design transaction management 
characteristics usually improve functionality data base system core requirement database systems unrelated object oriented aspect 
fact targeted serving new applications cad cam case office automation application oriented technology oriented 
object oriented database systems currently aiming new applications confusion features object oriented nature system 
multiple inheritance system provides multiple inheritance option 
agreement multiple inheritance object oriented community reached consider providing optional 
note decides support multiple inheritance possible solutions dealing problem conflict resolution 
type checking type inferencing degree type checking system perform compile time left open better 
optimal situation program accepted compiler produce run time type errors 
amount type inferencing left open system designer better ideal situation base types declared system infers temporary types 
distribution clear characteristic orthogonal object oriented nature system 
database system distributed 
design transactions new applications transaction model classical business oriented database system satisfactory transactions tend long usual serializability criterion adequate 
support design transactions long transactions nested transactions 
versions new applications cad cam case involve design activity require form versioning 
support versions 
providing versioning mechanism part core requirements system 
open choices system satisfies rules deserves oodbs label 
designing system lot design choices 
degrees freedom oodbs implementors 
characteristics differ mandatory ones sense consensus reached scientific community concerning 
differ optional features know alternatives object oriented 
programming paradigm see reason impose programming paradigm logic programming style bancilhon zaniolo functional programming style albano banerjee imperative programming style stroustrup eiffel atwood chosen programming paradigms 
solution system independent programming style support multiple programming paradigms skarra bancilhon 
course choice syntax free people argue forever write john hire john hire hire john hire john 
representation system representation system defined set atomic types set constructors 
gave minimal set atomic types constructors elementary types programming languages set tuple list constructors available describing representation objects extended different ways 
type system freedom respect type formers 
type formation facility require encapsulation 
type formers generic types type generator set arbitrary type restriction union arrow functions 
option type system second order 
type system variables richer type system objects 
uniformity heated debate degree uniformity expect systems type object 
method object 
notions treated differently 
view problem different levels implementation level programming language level interface level 
implementation level decide type information stored objects ad hoc system implemented 
issue relational database systems designers face decide store schema table ad hoc fashion 
decision performance ease implementation grounds 
decision independent taken level 
programming language level question types class entities semantics language 
debate concentrated question 
probably different styles uniformity syntactical semantical 
full uniformity level inconsistent static type checking 
interface level independent decision 
want user uniform view types objects methods semantics programming language notions different nature 
conversely different entities programming language views thing 
decision human factor criteria 
authors kim dittrich argue oodbs dbms underlying object oriented data model 
takes notion data model broad sense especially includes additional aspects going record orientation view certainly accordance approach 
dittrich dittrich introduce classification object oriented data models consequently oodbs supports complex objects model called structurally object oriented extensibility provided called behaviorally object oriented fully object oriented model offer features 
definition requires persistence disk management concurrency recovery implicitly assumes features applicable various classes total slightly liberal approach 
current systems prototypes fulfill requirements mandated definition anyway classification provides useful framework compare existing ongoing 
proposed collection defining characteristics object oriented database system 
best knowledge golden rules currently detailed definition object oriented database system 
choice characteristics interpretation experience specifying implementing current round systems 
experience design implementation formalization object oriented databases undoubtedly modify refine stance words don surprised hear authors current definition 
goal put forth concrete proposal debated analyzed scientific community 
rule thou question golden rules wish philippe gilbert paris kanellakis philippe richard fernando velez suggestions comments earlier drafts 
david maier partially supported nsf award ist sponsored tektronix foundation intel digital equipment logic mentor graphics xerox 
abiteboul kanellakis abiteboul kanellakis object identity query language primitive proceedings acm sigmod portland oregon june albano albano orsini galileo strongly typed interactive conceptual language acm tods vol june 
atkinson atkinson cockshott morrison approach persistent programming computer journal pp 
atwood atwood object oriented dbms design support applications report 
bancilhon bancilhon logic programming object oriented cocktail acm sigmod record pp 

bancilhon maier bancilhon maier multilanguage object oriented systems new answer old database problems generation computer ii editors north holland 
bancilhon bancilhon benzaken delobel pfeffer richard velez design implementation object oriented database system proceedings oodbs ii workshop bad frg september 
banerjee banerjee chou kim woelk kim data model issues object oriented applications acm tois january 
base base version introductory guide 
bobrow bobrow loops manual technical report lb vlsi knowledge systems area xerox palo alto research center 
carey carey dewitt richardson shekita object file management exodus extensible database system proceedings th vldb pp august 
carey carey dewitt data model query language exodus proceedings acm sigmod conference chicago june 
vision object oriented database management system proceedings workshop database programming languages france september caseau model reflective object oriented language sigplan notices special issue concurrent object oriented programming march 
codd codd relational model large shared data banks communication acm volume number june pp 
dittrich dittrich object oriented database system notions issues dittrich dayal 
eds proceedings international workshop object oriented database systems ieee computer science press dittrich dittrich preface dittrich 
ed advances objectoriented database systems lecture notes computer science vol springerverlag eiffel eiffel user manual interactive software engineering tr ei um 
iris object oriented database management system acm tois pp january 
hall hall todd relations entities modeling data base management systems nijssen ed pp north holland 
goldberg robson goldberg robson smalltalk language implementation addison wesley 
kim kim foundation object oriented databases mcc technical report 
khoshafian copeland khoshafian copeland object identity proceedings st acm oopsla conference portland oregon september richard richard database programming languages proceedings th vldb conference amsterdam august 
maier price maier price data model requirements engineering applications proceedings international workshop expert database systems ieee pp maier maier isn object oriented data model 
proceedings ifip th world computer conference san francisco ca august september 
maier maier stein development object oriented dbms report cs oregon graduate center april nixon nixon chung borgida mylopoulos stanley design compiler semantic data model technical note csri university toronto may 
simula simula manual schaffert schaffert cooper kilian trellis owl proceedings st oopsla conference portland oregon september skarra skarra zdonik reiss object server object oriented database system proceedings international workshop object oriented database system computer society press ieee pp 
stroustrup stroustrup programming language addison wesley 
van kowalski van kowalski semantics predicate logic programming language jacm vol pp 
october zaniolo zaniolo object oriented programming prolog proceedings workshop expert database systems 
