research proof carrying code mobile code security position peter lee george necula carnegie mellon university pittsburgh pennsylvania cs cmu edu darpa workshop foundations secure mobile code march advent world wide web rising popularity java programming language problem mobile code security focal points research computer science today 
allowing code installed dynamically executed host system provide flexible means access internal resources 
course idea installing executing new software system new 
new potential large number anonymous agents internet deliver extremely large number code objects hosts 
applications proposed active networks possible network packet transmitted network bridge router contain code installed executed bridge router 
problems solved uses mobile code practical 
particular interest position ffl host ensure mobile code damage example corrupting internal host data structures 
ffl host ensure mobile code resources cpu memory forth long time period 
ffl host assurances undue effort deleterious effect system performance 
course practical problems establish accountability authentication large scale mobile code environments 
thoughts regarding kinds issues separate essay 
position focus problem establish guarantees intrinsic behavior mobile programs 
sense view problem mobile code security problem construct efficient reliable software systems separate components want intimate efficient interactions software components come untrusted sources way certain invariants held component violated 
position theory programming languages including formal semantics type theory applications logic critical solving mobile code security problem 
illustrate possibilities programming language theory briefly describe extreme promising example proof carrying code pcc 
proof carrying code proof carrying code technique code consumer host verify code provided untrusted code producer untrusted internet agent adheres predefined set safety rules 
rules referred safety policy chosen code consumer way sufficient guarantees safe behavior programs 
key idea proof carrying code code producer required create formal safety proof attests fact code respects defined safety policy 
code consumer able simple fast proof validator check certainty proof valid foreign code safe execute 
implementation pcc contain elements formal specification language express safety policy formal semantics language untrusted code usually form logic relating programs specifications language express proofs algorithm validating proofs 
current implementation untrusted code form machine code dec alpha processor specifications written firstorder logic 
means relating machine code specifications form floyd verification condition generator extracts safety properties machine code program predicate order logic 
predicate proved code producer axioms inference rules supplied code consumer part safety policy 
edinburgh logical framework lf essentially typed lambda calculus encode check proofs 
basic tenet lf proofs represented expressions predicates types 
order check validity proof need typecheck representation 
proof validator lf typechecker extremely simple efficient independent particular safety policy logic 
realization pcc described detail :10.1.1.40.2507
note instances elements logic type theory programming language semantics arise realization pcc 
extended formal systems required order able guarantees safety approach 
fact able prove theorems guarantee safety pcc technique modulo correct implementation lf sound safety policy 
advantages proof carrying code advantages pcc mobile code 
large amount effort establishing formally proving safety mobile code entire burden doing shifted code producer 
code consumer hand perform fast simple easy trust proof checking process 
trustworthiness proof checker important advantage approaches involve complex compilers interpreters code consumer 
second code consumer care proofs constructed 
current experiments rely theorem prover general reason effort required proofs generated hand 
believe feasible build certifying compiler builds proofs automatically process compilation 

matter proofs generated important advantage consumer trust proof generation process 
third pcc programs sense modification accidental malicious result possible outcomes proof longer valid longer typecheck program rejected proof valid safety proof program program rejected proof valid safety proof program despite modifications 
third case behavior program changed guarantee safety holds 
fourth cryptography trusted third parties required pcc checking intrinsic properties code origin 
sense pcc programs self certifying 
hand pcc completely compatible approaches mobile code security 
example essay discuss trust management pcc mobile code security 
experience pcc determine correctness applying software fault isolation network packet filters :10.1.1.142.6054
engineering terms combining approaches leads different tradeoffs effort required proof generation cost slower runtime performance lead greater system design flexibility 
fifth untrusted code verified statically executed save execution time detect potentially hazardous operations early avoiding situations code consumer kill untrusted process acquired resources modified state 
advantages essentially statements advantage static checking dynamic checking 
believe static checking essential mobile code security system designers general somewhat limited view static checking 
early experience order gain experience pcc measure costs performed series experiments 
started simple practical applications machine code implementations network packet filters ip checksum routine 
early experiments safety policy focused fine grained memory safety 
packet filters times faster comparable filters implemented approaches safety proofs smaller bytes required ms dec alpha validated :10.1.1.142.6054
continued experimentation complex safety policies 
experiment active ping write extensions packet filters allocate deallocate memory acquire release locks send network packets 
addition memory safety check acquired resources released specified time bound 
put bounds quantity resources including total number packets sent total number instructions executed 
example safety proof increased kbytes validation time ms 
believe touched surface possible proof encoding techniques efficient representations possible 
limitations current research problems course serious obstacles making proof carrying code practical approach mobile code security 
basic obstacle generate proofs 
current experiments simple theorem prover doubts approach scale larger complex programs 
hand surprised ability generate proofs naive theorem prover programs active ping overly pessimistic 
believe notion certifying compiler critical scaling pcc approach main focus current research 
certifying compiler generate proof automatically target code 
idea show proof certain properties source program preserved target program 
easily obtained properties type safety compiled theorem proving needed possible imagine handling large programs 
note advantage pcc approach trust certifying compiler recipient target programs retain ability verify quickly easily safety code 
fundamental problem axiomatization arithmetic 
current experiments freely added axioms theorem prover proof checker needed basis 
clearly approach scale philosophical problem ad hoc extension logic allowed 
host willing computation check validity statements arithmetic appear proofs 
exact nature statements impact expressiveness proofs size proofs proof checking time key issues require depth development analysis experimentation 
matter language specifications logic prove safety programs 
far simple extensions firstorder logic possible logics temporal logic linear logic suitable practical applications demand example reasoning timing constraints 
great deal research experience needed 
see basic need great deal experimentation system logics developed 
basic questions big proofs get practice scaling achieved modular construction proofs programs answered experimental framework 
strongly encourage research experimentation 
summary position theory programming languages take include formal semantics type theory logic provides methods systems critical achieving high level security mobile code applications 
briefly described approach proof carrying code illustrates potential programming language theory arena essentially exploitation static checking 
difficult research problems solved believe past current results show potential warrant great deal 
feigenbaum lee 
trust management proof carrying code secure mobile code applications position 
submitted darpa workshop foundations secure mobile code monterey california march 
harper honsell plotkin 
framework defining logics 
journal association computing machinery vol 
january 
wahbe lucco anderson graham 
efficient software fault isolation 
proceedings th acm symposium operating systems principles december 
necula lee :10.1.1.142.6054
safe kernel extensions run time checking 
proceedings nd symposium operating system design implementation osdi seattle october 
necula lee :10.1.1.40.2507
proof carrying code 
technical report cmu cs school computer science carnegie mellon university september 
necula 
proof carrying code 
proceedings th annual acm sigplan sigact symposium principles programming languages popl paris january 
tennenhouse wetherall 
active network architecture 
computer communication review vol 
april 
