satlib online resource research sat holger hoos hoos cs ubc ca department computer science university british columbia vancouver canada thomas stuetzle informatik tu darmstadt de fg intellektik fb informatik tu darmstadt darmstadt germany 
satlib online resource sat related research established june 
core components benchmark suite sat instances collection sat solvers aim facilitate empirical research sat providing uniform test bed sat solvers freely available implementations high performing sat algorithms 
article give overview satlib particular describe current set benchmark problems 
currently main satlib web site www informatik tu darmstadt de ai satlib north american mirror site www cs ubc ca hoos satlib accessed frequently growing number researchers resulting access rates hits month 
increase usefulness satlib resource encourage members community utilise sat related research improve submitting new benchmark problems sat solvers bibliography entries 
keywords sat benchmark problems sat algorithms 
satisfiability problem propositional logic sat prominent problems artificial intelligence logic theoretical computer science various application areas 
past large body research focussed sat interest sat increasing witnessed growing number sat related papers published journals major conferences 
time particular ai empirical studies sat problems algorithms increasingly popular lead important insights nature problem dramatic improvements sat algorithms date solve hard instances thousands variables 
considering increasing interest sat created satlib online repository benchmark problems solvers sat 
original motivation satlib facilitate encourage empirical studies sat algorithms common set benchmark instances sat solver implementations order improve assessment new algorithmic ideas classes sat instances enhance comparability published empirical results 
advantages widely collections benchmark problems implementations algorithms recognised kluwer academic publishers 
printed netherlands 
satlib tex hoos areas computer science related fields consequently various collections established available online 
known examples tsplib containing variety tsp tsp related instances providing test instances variety problems operations research tptp collection problem instances theorem provers benchmark library constraints 
sat collections benchmark instances existing prior satlib benchmark collection second dimacs challenge collection beijing sat competition see www cirl uoregon edu crawford beijing 
benchmark sets available online static sense new problems added initial satlib created partly dated 
concept satlib provide just benchmark library sat increasingly comprehensive resource research including implementations results evaluation sat algorithms list people involved research sat pointers sat related web sites events annotated bibliography 
satlib meant open resource continuously extended 
sections give overview current release satlib 
particular motivate describe selection benchmark instances outline satlib solver collection state submission guidelines benchmark instances solvers bibliography entries 
discuss currently available components satlib annotated bibliography finish concluding remarks plans 

satlib benchmark suite obvious important function benchmark library facilitate set problem instances different studies enhance comparability respective results 
problem instances easily accessible usable experimental studies 
different situation csp exists widely format sat instances cnf format second dimacs benchmark challenge 
format currently accepted best performing sat solvers tools simple parse generate reasonably concise flexible portable different platforms human readable 
satlib benchmark instances currently offered cnf format 
generally benchmark sets contain large variety different types problem instances basis evaluating different types algorithms unbiased possible way 
furthermore different types studies focus problem instances different properties benchmark set useful support broader range 
tex satlib online resource research sat ies 
satlib offers different types problems randomly generated native sat instances sat encoded randomly generated problem instances domains instances direct applications sat sat encoded instances application domains 
problem types instances different sizes 
randomly generated instances random sat satlib provides standardised test sets sampled underlying distributions 
known distributions instance hardness may vary strongly sampled instances making standardised test sets available providing generators offers considerable advantages comparability reproducibility empirical results 
encoded instances avoid encodings increase difficulty solving instances significantly 
generally focus problem instances intrinsically hard difficult solve broad range algorithms avoid instances known trivially solvable 
easy instances useful illustrating investigating properties specific algorithms example polynomially solvable instances hard certain high performing algorithms believe general benchmark problems easily lead heavily biased evaluations assessments usefulness specific algorithms 
satlib benchmark collection comprises instances known hard wide range sat algorithms 
avoid known pitfalls benchmarking benchmark libraries generally static allow updated new challenging problems 
elaborated section satlib encourages submission retraction benchmark problems lives contribution people involved sat research 
give brief overview benchmark suite currently available satlib 

uniform random sat uniform random sat family sat instance distributions obtained randomly generating cnf formulae way instance variables clauses clauses constructed literals randomly drawn possible literals variables negations possible literal selected probability 
clauses accepted construction problem instance contain multiple copies literal tautological contain variable negation 
choice induces distribution random sat instances 
uniform random sat union distributions particularly interesting property uniform random sat occurrence phase transition phenomenon rapid change solubility observed systematically increasing decreasing number 
tex hoos es fixed problem size 
precisely small formulae underconstrained satisfiable reaching critical probability generating satisfiable instance drops sharply zero 
instances overconstrained unsatisfiable 
random sat phase transition occurs approximately large smaller critical clauses variable ratio slightly higher 
furthermore growing transition increasingly sharp 
empirical analyses show problem instances phase transition region uniform random sat tend particularly hard systematic sat solvers stochastic local search algorithms 
striving test algorithms hard problem instances researchers test sets sampled phase transition region uniform random sat see examples 
similar phase transition phenomena observed subclasses sat including uniform random sat gained popularity uniform random sat 
reasons prominent role sat prototypical syntactically particularly simple complete problem 
table uniform random sat test sets uf test sets contain satisfiable test sets unsatisfiable instances 
test set instances clause len vars clauses uf uf uf uf uf uf uf uf uf satlib included test sets satisfiable unsatisfiable instances sampled uniform random sat distributions solubility phase transition region ca 
clauses variable average instance hardness systematic stochastic local search algorithms maximal 
satisfiable unsatisfiable instances separated fast complete sat algorithms 
separation particularly advantageous evaluating incomplete sat algorithms determine unsatisfiability 
table shows characteristics test sets currently included satlib range variables instances 
tex satlib online resource research sat set test sets instances provided 

graph colouring graph colouring problem gcp known combinatorial problem graph theory graph fv set vertices set edges connecting vertices find colouring 
neighbouring vertices different colours 
transforming gcp sat decision variant encoded objective find colouring number colours 
optimisation variant searches colouring minimal number colours solved solving series decision problems 
satlib contains test sets flat random graphs vertices created joe culberson random graph generator available web cs ualberta ca joe coloring joe graph coloring page 
connectivity edges vertex graphs adjusted way instances maximal hardness average graph colouring algorithms heuristic 
test set contains instances vertex test set comprises instances 
gcp instances transformed sat straightforward efficient encoding known literature 
characteristic satlib test sets obtained shown table ii 
table ii 
sat encoded graph colouring test sets flat random graphs 
test set instances vertices edges colours vars clauses flat flat flat flat flat flat flat interesting class graph colouring problems obtained morphing regular ring lattices random graphs type morph graphs graph contains edges common fraction edges remaining edges fraction edges problems considered obtained morphing regular ring lattices vertices ordered cyclically vertex connected closest vertices ordering satlib tex hoos random graphs known class nm morphing ratio controls amount structure problem instances varying behaviour various algorithms depending degree structure randomness studied 
satlib contains test sets sw indicates morphing ratio test sets contains instances generated generator program provided toby walsh encoded sat encoding graph colouring instances described 
underlying graphs vertices edges regular ring lattice morphing connects vertex nearest neighbours cyclic ordering 
chromatic number graphs obtained varies 
special graph colouring program provided joe culberson filtered instances colours regular ring lattice morphed graph chromatic number 
additional test set sw contains unique problem instance corresponding ring lattice graph morphing ratio 
instances test sets satisfiable contain variable clauses 
show small instances hardest local search algorithms walksat higher instances extremely hard systematic search algorithms satz 

planning instances shown ai planning problems efficiently solved encoding sat finding models sat formulae standard sat algorithms 
approach shown competitive outperform state art general purpose planning algorithms :10.1.1.38.4843
satlib included sat encodings known planning domains blocks world domain logistics domain 
blocks world planning starting initial configuration number blocks moved reach goal situation logistics planning packages moved locations different cities trucks airplanes limited capacity 
benchmark set contains largest blocks world planning instances logistics planning instances henry kautz bart selman satplan distribution 
instances described table iii despite reductions mentioned large compared instances benchmark suite 
sat encoding generating benchmark instances relies critically techniques reducing size cnf formulae 
concern particular way defining propositional variables application known propositional reduction strategies unit propagation subsumption simplify formulae applying stochastic satlib tex satlib online resource research sat local search 
reductions computed polynomial time eliminate number propositional variables search space efficiently reduced 
details sat encoding generate benchmark instances 
table iii 
sat encoded blocks world planning logistics planning instances 
instance packages blocks plan steps vars clauses logistics logistics logistics logistics bw large bw large bw large bw large 
instances older benchmark sets satlib contains instances benchmark set established second dimacs challenge beijing sat competition 
benchmark sets contain satisfiable unsatisfiable instances widely different size hardness 
sat encoded instances problem domains including graph colouring boolean function learning test pattern generation vlsi circuits inductive inference furthermore number instances generated various random techniques 
space restrictions give detailed descriptions instances descriptions satlib 
noted larger dimacs beijing instances contain thousands variables clauses 
size indicative hardness 
course extensive evaluations different sat algorithms see chapter 
add chapter benchmark instances solved polynomial preprocessing techniques 
furthermore instances problems efficiently solved original problem domain hard current techniques solving sat problems 
aspects instance hardness far aware noted problem descriptions included satlib 
satlib tex hoos 
satlib solver collection satlib solvers collection contains original distributions powerful sat algorithms currently aware 
comprises solvers stochastic local search systematic search algorithms coded relatively easy compile run unix environment 
solvers included satlib generally accept dimacs cnf format satlib benchmark instances 
easily comparative analysis newly developed sat algorithms solving sat problems interest analysing relative advantages disadvantages different implementations 
solvers stochastic local search comprise probably best known families local search algorithms sat gsat walksat 
implementations available satlib cover basic algorithms numerous variants gwsat gsat tabu walksat tabu novelty novelty novelty novelty 
refer chapter 
add chapter detailed investigation performance stochastic local search algorithms sat 
systematic solvers variants known loveland procedure fall different categories 
underlying algorithms posit satz rely mainly powerful branching rules direct search 
including grasp rel sat sato various mechanisms techniques avoid disadvantages chronological backtracking 
high performing systematic solvers randomised improve performance satz rand rel sat rand variants basic implementations algorithms fall category 
note techniques algorithms combined various ways 
solvers currently available realise combinations currently extended incorporate techniques initially certain solvers 
generally past years development sat algorithms progressed rapidly expect new developments lead powerful solvers near 

submission guidelines increase usefulness scope satlib depend contributions members research community 
submissions help extend satlib benchmark suite challenging new instances particular sat encoded instances application solvers collection new high performing algorithms 
facilitate satlib testing satlib tex satlib online resource research sat evaluating sat algorithms ensure uniform format appearance ask contributors follow simple guidelines benchmark problems problem instances encoded dimacs cnf format 
description format examples available satlib benchmark section 
cnf files packaged tar gz zip files 
think sense divide set instances submitting packages distributed separately may bundle see fit 
provide information instances number variables clauses background problem class give evidence potential interest instance sat community hard specific class solvers stem interesting applications sat 
examples see descriptions benchmarks section satlib 
description send ideally form html document postscript pdf file 
please send research papers problem description description problem class benchmark problems taken main topic 
solvers solvers accept dimacs cnf format see bundled wrapper script preferably perl translates cnf input format accepted solver 
sources makefile unix linux environments bundled tar gz zip file 
provide information solver complete incomplete algorithm sketch 
possibly short description form html document 
may send research papers solver main topic 
ideally submit evaluation data solver applied satlib benchmark problems 
annotated bibliography please send entries plain text bibtex format 
submitted entries contain relevant information 
additionally include url available online short list keywords concise notes contents 
general instructions please send submissions email attachments hoos cs ubc ca 
submission included satlib automatically added people involved sat research section satlib 
want link home page added please send url link email address 
satlib tex hoos please patient 
try include submission satlib soon possible usually collect number update requests submissions releasing new version satlib 

satlib components benchmark suite solver collection satlib core components satlib provides number additional features intend support stimulate sat related research 
list people involved research sat gives easy access homepages available email addresses active members sat community 
list sat related events activities provides overview conferences workshops journal special issues 
satlib contains collection links related sites webpages specific sat sat related topics benchmark libraries 
support toby walsh ian gent version annotated bibliography sat added satlib 
individual entries contain bibliographic data urls electronic versions keywords notes contents papers 
currently bibliography incomplete 
hope support community useful resource facilitate access extensive collection publications sat may help finding locating relevant research papers providing orientation new members sat community 

developments described satlib online resource sat related research established 
satlib comprises benchmark library source code distributions number popular best performing sat algorithms known date 
core components aimed facilitating empirical studies sat algorithms past instrumental improving performance sat solvers enhancing understanding behaviour 
satlib contains various components including annotated bibliography publications sat provided support stimulate sat related research activities 
releases satlib hopefully provide extended benchmark collection new sat solvers considerably extended version annotated sat bibliography 
context rely support sat community continuing usefulness satlib resource crucially depends submissions feedback fellow researchers 
furthermore plan extend satlib various ways 
firstly intend provide tools satlib tex satlib online resource research sat implementations converters different formats sat problems implementations polynomial simplification strategies sat instances tools empirical evaluation performance sat solvers 
secondly want provide results performance various sat solvers particular ones available satlib satlib benchmark suite 
consider extend satlib problems tightly related sat max sat introduced stochastic sat dynamic sat problems 
generally hope satlib continue useful resource utilised supported sat community may contribute support advance sat related research 
members community contributed satlib 
particular people submitting benchmark problems solvers providing help way roberto bayardo wolfgang bibel james crawford joe culberson jon freeman ian gent carla gomes jens gottlieb henry kautz chu min li hans van marques da silva jussi rintanen bart selman geoff michael trick toby walsh joost zhang 
furthermore gratefully acknowledge support group computer science department darmstadt university technology germany laboratory computational intelligence computer science department university british columbia canada currently host satlib web site 
part supported postdoctoral fellowship awarded university british columbia holger hoos marie curie fellowship awarded thomas cec tmr contract 
erb gt 

bayardo jr schrag 
csp look back techniques solve real world sat instances 
proceedings aaai pages 
mit press 

crawford auton 
experimental results crossover point random sat 
artificial intelligence 

davis logemann loveland 
machine program theorem proofing 
communications acm 

de kleer 
comparison atms csp techniques 
proceedings ijcai pages 
morgan kaufmann publishers 

freeman 
improvements propositional satisfiability search algorithms 
phd thesis department computer information science university pennsylvania philadelphia 

gent hoos prosser walsh 
morphing combining structure randomness 
proceedings aaai pages 
mit press 
satlib tex hoos 
gent walsh 
understanding hill climbing procedures sat 
proceedings aaai pages 
mit press 

gomes selman kautz 
boosting combinatorial search trough randomization 
proceedings aaai pages 
mit press 

hogg 
refining phase transition combinatorial search 
artificial intelligence 

hooker 
needed empirical science algorithms 
operations research 

hooker 
testing heuristics wrong 
journal heuristics pages 

hoos 
stochastic local search methods models applications 
infix verlag sankt augustin germany 

hoos 
run time behaviour stochastic local search algorithms sat 
proceedings aaai pages 
mit press 

hoos neill 
stochastic local search methods dynamic sat initial investigation 
technical report tr computer science department university british columbia 

hoos 
characterisation behaviour stochastic local search algorithms sat 
artificial intelligence 

johnson trick editors 
cliques coloring satisfiability volume dimacs series discrete mathematics theoretical computer science 
american mathematical society 

kautz mcallester selman 
encoding plans propositional logic 
proceedings kr pages 

kautz selman 
pushing envelope planning propositional logic stochastic search 
proceedings aaai volume pages 
mit press 

kirkpatrick selman 
critical behavior satisfiability random boolean expressions 
science 

li anbulagan 
look ahead versus lock back satisfiability problems 
proceedings cp pages 
springer verlag 

littman initial experiments stochastic 
proceedings aaai pages 
mit press 

marques silva sakallah 
grasp search algorithm propositional satisfiability 
ieee transactions computers 


tabu search sat 
proceedings aaai pages 

mcallester selman kautz 
evidence invariants local search 
proceedings aaai pages 
mit press 

mitchell selman levesque 
hard easy distributions sat problems 
proceedings aaai pages 
mit press 

selman henry kautz cohen 
noise strategies improving local search 
proceedings aaai pages 
mit press 

selman levesque mitchell 
new method solving hard satisfiability problems 
proceedings aaai pages 
mit press 

yokoo 
adding constraints problem easier hill climbing algorithms analyzing landscapes csps 
proceedings cp pages 
springer verlag 

zhang 
sato efficient propositional prover 
proceedings cade pages 
vol lnai springer verlag 
satlib tex 
