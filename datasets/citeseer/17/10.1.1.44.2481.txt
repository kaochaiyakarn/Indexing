csp protocol analysis needham schroeder public key protocol steve schneider royal holloway university london technical report csd tr november department computer science egham surrey tw ex england contents presents general approach analysis verification authentication properties csp 
illustrated examination needham schroeder public key protocol 
aims develop specific theory appropriate analysis authentication protocols built top general csp semantic framework 
approach aims combine ability express protocols natural precise way ability reason formally properties exhibit 
contents csp notation general csp model authentication csp network description description enemy protocol participants users general proof strategy rank functions proof obligations specialised csp proof rules modelling needham schroeder protocol csp model protocol participants message space issues analysis needham schroeder protocol verification origin authentication flavours origin authentication property proof authentication property aside typing weak encryption mechanism proof authentication property failure authentication property verification responder authentication weak encryption mechanism contents lowe fix proof authentication property multiple runs repeated runs concurrent runs authentication discussion proofs theorem theorem authentication comes number flavours 
example gollmann gol identified different varieties authentication raises question particular authentication protocol kind authentication protocol designed kinds provides 
aim csp approach reduce questions security protocols properties questions concerning csp processes satisfy particular csp specifications 
approach forces separation properties protocols allows discussion meant particular kinds security property independently protocols intended achieve 
formal analysis entirely csp framework allows possibility verification protocols respect csp properties 
general csp framework proposed author described sch 
concerned theoretical foundations 
offers definitions security properties including anonymity 
means csp description protocol precisely defined semantics precise mathematical question protocol meets property 
verification carried addressed purpose 
approach taken firstly express protocol csp 
authentication property consider states events system restricted events occur 
establish defining suitable rank function messages shows messages particular rank circulate restricted system messages possible 
csp particularly suitable describing protocols level close level think 
contexts rank argument essentially amounts unreachability analysis proof particular word language 
strength approach formal link rank arguments natural description protocol 
formalisation protocol csp exposes issues forces design decisions may explicit original protocol description 
formalisation required authentication property likewise forces consideration precisely meant authentication 
useful know precise csp properties protocol guarantee 
strengths csp ease specialised theories constructed top semantic models 
allows particular specification statements defined terms standard semantics new proof rules appropriate specifications provided 
approach taken specify reason authentication properties agents inability generate particular messages 
standard proof rules support verification sound complete preferable develop specialised theory provides appropriate level abstraction supporting kind reasoning require 
csp notation csp language designed specifically description communication patterns concurrent system components interact message passing 
underpinned theory supports analysis systems described csp notation csp 
suited description analysis network protocols protocols described csp relevant aspects network 
interactions investigated certain aspects behaviour verified theory 
section introduces notation ideas 
particular traces model csp 
fuller language reader referred hoa 
events systems modelled terms events perform 
set possible events fixed analysis denoted sigma 
events may atomic structure may consist number distinct components 
example event put consists parts channel name put data value 
example events form consisting channel source destination message sets messages set messages fm single message elide set brackets define fmg example set events fi channel said type message sigma processes processes components systems 
entities described csp described terms possible events may engage 
process process engage events equivalent deadlock 
output able initially perform output channel behaves input accept input type channel behaves 
event event form process pronounced choice behave possible communications indexed form choice able behave arguments form nondeterministic choice process able behave indexed form processes may composed parallel 
set events process behaves acting concurrently requirement synchronise event synchronisation set events may performed process independently 
special form parallel operator components interact events jjj equivalent fg processes may recursively defined means equational definitions 
process names appear left hand side definitions csp expressions may include names appear right hand side 
example definition light light defines process light possible behaviour perform alternately 
mutually recursive processes may defined possibly infinite collection process names appear left hand side definitions csp csp notation expressions possibly involving names appear right 
example set definitions count count count count count define collection processes count number events downs ups 
process definitions may contain conditions separate difference cases 
collection count definitions fm count fm count readability subscripted information may appear bracketed line corresponding process example may written count 
full discussion single mutually recursive process definitions see das 
traces semantics process defined set sequences events traces may possibly perform 
examples traces include hi empty trace possible process hon oni possible trace light useful operator traces projection set events trace tr defined maximal subsequence tr events drawn singleton set fdg overload notation write tr tr fdg 
message extraction tr set channel names provides maximal sequence messages passed channels tr provides set messages tr passed channel may described sequence set comprehension tr hd tr di tr hm ffl tr tr fm tr hig tr sequence oe tr set events appearing sequence 
operator oe extends processes oe set events appear trace traces model traces traces say refinement written csp notation analysing processes specifications predicates traces process satisfies specification traces satisfy sat tr traces sat sat proof rules traces model csp associated proof system describing specifications processes terms specifications components 
proof rule csp operator 
example rule prefix operator sat tr sat tr hi tr hai tr tr particular application domains concerned specifications particular form 
cases possible give specialised proof rules specifications 
amounts developing specialised theory proof system application area 
benefits full generality proof rules required lemmas theorems built top traces model allow higher level reasoning 
approach taken key property maintains ae verification defined terms traces various proof rules provided deducing particular process descriptions meet property 
see specialised rules figures 
equations traces model csp supports number algebraic equivalences processes 
useful manipulating process descriptions form easier reason 
laws expressing useful identities 
purposes interested effect restricting particular events parallel combination 
equations 
rule restrict states restricting process set events perform effect 
rule restrict states restricting process set events distributes interleaving 
rule restrict states ways constructing system pi parallel combination processes restricting subset synchronisation set pi restricting processes placing result parallel 
rules restrict restrict concerned effect restriction inputs outputs 
equations process form user expanded 
referred explicitly order avoid cluttering proofs 
general csp model rule restrict oe rule restrict jjj jjj rule restrict rule restrict 
ft bg 
rule restrict 
equations restricted parallel combinations general csp model authentication message oriented approach authentication discussed sch 
authentication considers set messages authenticate set messages occurrence element preceded occurrence element sets taken disjoint 
trace specification may captured follows definition authenticates tr hi tr hi lemmas immediate consequences definition 
lemma sat authenticates sat tr hi lemma sat authenticates sat authenticates transitivity authentication follows definition general csp model lemma authenticates authenticates implies authenticates csp trace semantics support number proof rules establishing particular processes provide authentication 

rule auth sat authenticates rule auth prefix sat authenticates rule auth prefix sat authenticates sat authenticates rule auth choice sat authenticates sat authenticates rule auth parallel sat authenticates sat authenticates rule auth interleaves sat authenticates sat authenticates jjj sat authenticates rule auth recursion sat authenticates sat authenticates sat authenticates proof rules authentication general csp model soundness rules follows trace semantics operators formal definition authenticates may give informal justification soundness considering occurrence event intended provide evidence event previously occurred 
process fails satisfy authenticates event occurs event rule auth sound perform events perform rule auth prefix sound event performed event possible event occur event independent nature subsequent process restrictions placed rule rule applicable process rule auth prefix useful event auth prefix applicable 
case states event occurrence irrelevant authentication authentication guaranteed guaranteed rule auth choice states branch choice guarantees authentication property authenticates entire choice event occurs performed arms choice choice previously performed event rule auth parallel states single component parallel combination able guarantee authenticates involved occurrences events ensure entire parallel combination guarantees allow event occur event occurs 
restrictions rest system rule holds process description rule auth interleaves states components interleaved combination guarantee authenticates combination 
follows fact event occurs performed component processes previously performed event rule auth recursion mutually recursive processes states property authenticates preserved recursive calls variable sat authenticates function applied variables processes defined mutual recursion satisfy property authenticates rule special case general rule mutual recursion details see discussion das 
csp network description approach taken provide csp description dolev yao model 
assumed communications medium entirely control enemy block re address duplicate fake messages 
define generates relation describes new messages may derived existing ones means knowledge messages sufficient produce capture enemy ability fake messages 
sch roles passive medium active enemy described distinct csp processes enabled capabilities enemy separately described 
purposes preferable describe general csp model user user rec user trans rec enemy trans rec trans csp model network combination enemy medium single csp process enemy easier analysis 
set user consisting names agents network 
user associate process user describes user behaves 
process user communicates enemy means channel trans transmits messages channel rec receives messages 
oe user trans rec resulting network described follows net jjj user user trans rec enemy network pictured 
analysis protocol consider parties involved protocol user user describe respective roles play 
users connected system user obtain net user jjj user trans rec enemy retain names users set user retain potential enemy masquerade different user 
channels trans rec type user user message message trans thought node sending message destination source destination message 
message space message generally defined data type section refusals abstracted away sense input refused amounts making assumption deduced messages accepted 
reasonable assumption protocols currently perform tasks masking network traffic 
level abstraction assume messages accepted network 
felt unrealistic definition altered accordingly messages may input number messages network reaches capacity threshold 
attacks protocols apart denial service attacks tend exploit unexpected interactions messages traces model adequate capturing 
general csp model description enemy natural csp description dolev yao model separates essentially passive medium medium intruder intruder able read messages medium channel leak manipulate removing adding messages channels kill add 
approach taken sch 
passive medium containing set messages delivered defined medium rec medium ftg trans medium fj mg leak medium add medium fj mg kill medium ftg intruder possession information described set interacts medium channels leak add kill may described follows intruder leak intruder fug add intruder kill intruder combination medium intruder provides environment authentication protocol intended operate described medium leak add kill intruder add observe intruder remove message medium reading leak replaying kill replay message redirect messages removing original placing copy altered source destination fields 
follow elementary properties relation section fact source destinations message removed fi mg initially medium empty intruder possession initial information init description natural may considerably condensed equivalent form involving mutually recursive process enemy just channels trans rec 
enemy trans enemy fmg user rec enemy enemy fmg general csp model possible prove traces model medium leak add kill intruder add enemy arms choice correspond communications users enemy accept messages user trans provide user message generate source rec 
third choice corresponds message intercepted passed 
fact simplification traces model refusals modelled delay messages possible 
delaying message attack effect killing 
words attack relies killing message message case delayed attack 
context ability delay messages arbitrarily powerful ability kill messages drop nondeterministic choice line 
description trace semantics enemy 
easiest manipulate proofs enemy trans enemy fmg user rec enemy description enemy enemy init 
wished model enemy simply eavesdropper power add messages medium line choice messages generated user rec agents implementing protocols place restrictions messages may passed trans turn restricts possibilities messages passed rec 
position prove messages passed rec initial set init messages input trans theorem enemy sat init tr trans tr rec proof appendix protocol participants agents participants protocol modelled user user consisting csp implementations halves protocol 
generally participants trusted third parties activity described csp processes 
obviously description depend entirely protocol modelled 
technically justified result traces enemy traces enemy traces enemy enemy traces enemy 
general csp model users benefits csp approach processes representing users may included analysis need provide precise description 
possible define general description users assume actual behaviour refinement description 
course necessary confidence assumption appropriate 
general users may considered refinements un un user trans un rec un fmg set include information user initially available secret key various nonces 
approach entirely similar way model enemy 
general proof strategy rank functions order proof rank function ae message number key properties 
formalised theorem list properties keep mind attempting construct rank function 
message init rank greater message set rank ae message rank 
user prevented performing messages unable introduce messages rank rank function provides evidence messages rank circulate net generated 
observe rank function dependent descriptions users 
words dependent protocol particular property established 
enemy rank theorem rank function yields corollary corollary ae meets conditions enemy init sat ae tr trans ae tr rec general csp model security properties reduce properties messages passing trans rec 
ae message zis function defined messages lift sets sequences tr follows ae sg ae tr trg users maintaining positive rank result concerning enemy able generate messages rank lower possession 
proof proceed introducing user turn analysing description 
key specification user introduce messages rank messages received strictly positive rank messages transmits positive rank 
formally defined traces follows definition maintains ae ae tr trans ae tr rec init observe parameterised rank function ae user name specification states rank messages transmitted trans rank messages received rec rank messages init user meets specification introduce message rank system channel trans received channel rec 
users rank inference rule formalises assumption capabilities enemy rule ae un sat maintains ae un user user sat maintains ae general csp model theorem ae init ae ae ae user sat maintains ae net sat tr hi theorem net proof obligations obtain extremely specialised theorem applies authentication properties specific description net network 
theorem heart proof strategy 
provides sufficient list conditions achievement guarantees net sat authenticates theorem relies assumption oe user trans rec trans rec user user interaction enemy trans rec assumption built way modelling network 
discussed earlier authentication properties expressed csp form authenticates meaning event occurs event previously occurred 
generally set possible inputs particular node provides evidence occurrence set messages different node 
proof strategy adopt show occurrences events prevented net events possible 
words aim show messages generated resulting system description net 
having expressed requirement aim provide rank function ae associates value message message space 
function depend generation relation description user user protocol sets init property rank message 
prove message possible restricted system net rank greater allowing deduction message possible system 
apply theorem meet list requirements 
correspond assumptions confident proof obligations 
item assumption enemy assumption users confidence assumption depend nature ae messages rank 
item checked may established induction definition generates relation 
relies fact clauses defining completely determine messages generated known ones 
item shown particular set item proven modelling needham schroeder protocol cases user user 
assumed users 
specialised csp proof rules number rules concerning relationship various csp operators maintains ae specification 

sound respect csp traces model 
equations establishing various cases 
informally soundness justified follows 
rule sound unable violate maintains ae requires output message non positive rank perform output 
rule output states output provided process positive rank process satisfies maintains ae provided behaviour output violate 
rule input concerned behaviour process subsequent input 
requirement maintain positive rank concerned messages coming positive rank messages going positive rank 
particular incoming message cases consider input message rank subsequent behaviour irrelevant responsibility maintaining positive rank longer required message input positive rank subsequent process maintain positive rank 
rule states input process rec satisfies maintains ae input positive rank 
form input describes pattern matching implicit input process describes input patterns allowed 
rule choice states branch choice maintains positive rank entire choice 
modelling needham schroeder protocol csp model description needham schroeder public key protocol nes illustrated 
message point si sent point ri received 
version assumes public keys known 
full version involves communication parties trusted server obtain public keys 
modelling needham schroeder protocol rule sat maintains ae rule output sat maintains ae ae trans sat maintains ae rule input ae sat maintains ae rec sat maintains ae rule choice sat maintains ae sat maintains ae proof rules maintains ae protocol participants csp agents implement run protocol may modelled 
section purposes illustrating approach simplify analysis considering case initiator receiver 
model allow attacks parties act initiators senders 
assumption relaxed section party independently play role 
message space message space protocol follows raw user text nonce key message raw key message message message fact example public key cryptography space key split public keys public secret keys secret user user key public secret modelling needham schroeder protocol needham schroeder public key protocol user user trans rec 
trans user rec 
trans rec csp description needham schroeder protocol rules concerning way messages may generated existing ones fp fs equations equations message space 
natural ones describing relationship encryption decryption remove need reduce equality fmg covered modelling needham schroeder protocol properties associativity catenation equations capture possible properties encryption mechanisms 
example encryption distributing catenation quite significant weakness 
commutativity encryption necessary property 
assume rest equations message space explicitly stated define relation 
important ensure equations message space respected definition ae defined 
expect ae ae messages ae defined induction structure messages proof obligation 
issues number issues concerning way protocol modelled 
pattern matching message input corresponds assumption message fails match pattern ignored modelling blocking receipt accepting throwing away user processes simply engage message match pattern 
practice achievable especially cases agent decrypt message finding particular form 
affect ability enemy attack protocols described way 
typing messages implicit pattern matching 
type channel determines range possible messages match pattern 
permissible input code fragment rec described line protocol depends type correct run protocol nonce ability type messages input accept arbitrary message shall see section type input affect correctness protocol 
purposes assume inputs defined pattern matching conform expected type 
amounts assuming possible message type mistaken message type 
line pattern matching amounts message form accepted nonce claimed origin 
relies assumption user remember nonce sent associate received just ignored response sent reasonable assumption expect remember nonce anyway order check response correct 
apparent source message line match source message information information concerning originator protocol 
analysis needham schroeder protocol analysis needham schroeder protocol verification origin authentication authentication origin authentication message received authenticates earlier message occurred 
property user authenticating user requires engages protocol initiator initiator 
interested executions message form rec source message appears description required analysis description user restriction message source 
results user rec trans rec flavours origin authentication property different messages authenticated correspond different flavours authentication property 
prove properties 
discuss proof extend property shown hold low 
authenticating message rec number possibilities message authenticate 
rec authenticates trans corresponds requirement occurrence final message guarantees initiated protocol run nonce 
rec authenticates trans nonce corresponds requirement occurrence message guaranteed initiated protocol run possibly different nonce 
lemma yields implied property 

rec authenticates ftrans nonce corresponds requirement occurrence message guaranteed initiated protocol run possibly different user nonce 
lemma yields implied property property 

rec authenticates rec user nonce confirms received nonce challenge 
confirm initiated run 
rec authenticates trans confirms responded nonce challenge 

rec authenticates trans nonce authenticates responded challenge believed come necessarily nonce issued 
follows lemma implied property 
analysis needham schroeder protocol 
rec authenticates ftrans authenticates responded nonce challenge necessarily associate follows lemma implied property 

rec authenticates ftrans nonce authenticates responded nonce challenge words verifies live 
follows lemma implied property property 
proof authentication property introduce approach address easier properties property rec user nonce authenticated rec net rec user nonce sat tr rec hi order theorem provide rank function ae hold user rec user nonce sat maintains ae user rec user nonce sat maintains ae 
observe user rec user nonce user define rank function ae message messages 

rank function fact considering various constraints required satisfy 
author began assigning rank messages required positive rank rank messages required nonpositive rank 

users identities public keys assumed known assigned rank 
assume secret keys known apart amounts assumption agents really controlled enemy 
rank assigned secret keys apart assigned rank 
require ae order meet 
means ae enemy generate public key publically available 

hand positive rank broadcast protocol run 
suggests incrementing rank encrypting require encrypting decrement rank 
considerations proved sufficient produce satisfactory rank function 
function indicates secret keys known enemy challenge sends purposes authentication property nonce need secret property concerned nonce challenge 
immediate definition ae equations hold ae ae ae ae 
analysis needham schroeder protocol ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae gamma ae ae ae rank function verification property assume ae init 
reasonable assumption amounting claim enemy initially access obtain result consideration clause definition 
result follows fact defined smallest relation closed clauses 
ae ae ae observe ae 
rules restrict restrict yield user rec user nonce user trans rec nonce fn trans analyse description building stages 
analysis needham schroeder protocol firstly nonce fn ae rule output rule yield trans sat maintains ae ae nonce fn ae rule input gives rec nonce fn trans sat maintains ae application rule output ae yields trans rec nonce fn trans sat maintains ae rule choice deduce user rec user nonce sat maintains ae required 
rule rule input vacuous antecedent yield rec sat maintains ae ae ae ae obtain rule output line ae trans rec sat maintains ae provides antecedent rule input yield rec trans rec sat maintains ae words user sat maintains ae required 
completes proof rec authenticates rec user nonce properties ae proof side conditions proof rules 
ae nonce ae obtain line 
ae obtain line analysis needham schroeder protocol 
ae ae obtain line 
ae init required 
ae required proven receipt encrypted public key provides evidence received nonce encrypted public key message form rec pi proof works ae 
means authenticated secret key compromised 
sense fact known really required pi equation holds message space function ae remains defined ae ae ae 
words enemy able alter message sent different message capability affect authentication property 
pi proof works presence commutativity encryption equation respected rank function 
aside typing proof relies fact messages typed pattern matching built analysis user rec user nonce assumes inputs rec form nonce nonce 
words description user assumes message rejected nonce 
fact minimal assumption required simply user able recognise message form arbitrary messages extract message 
shall see able retain result weakening cost 
property rec authenticates rec user message appropriate version property verify net absence types message received user form arbitrary message description user analysed user rec user message user trans rec message message trans rank function longer appropriate process satisfy maintains ae ae 
particular require ae satisfies generalisation side condition listed ae message message oe ae true ae defined 
example nonce provides counterexample 
analysis needham schroeder protocol ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae gamma ae ae ae new rank function verification property counterexample excluded typing mechanism forces nonce restriction line true 
description user unchanged user rec trans rec ranges message nonce fresh rank function suitable establishing 
readily checked meets 
weak encryption mechanism observed rank function respected equations message space verifications rank function remained correct presence extra equations 
rank function respect equations 
means defined message space presence 
may try adapt definition rank function success indicate authentication property held presence extra equations 
alternatively difficulty adapting definition lead discovery attack exploits equations 
occurs case trace net rec user message net arises 
trace contains authenticating message rec message form rec user message rec trans rec trans rec analysis needham schroeder protocol corresponds attack trace establishes possibility takes nonce challenge completion protocol provide authentication received nonce challenge attack may regarded implausible absence typing nonce may known contain particular number bits 
form partial typing allows types distinguished nonce nonce nonce types may confused 
allow confusion key nonce nonce plausible strings bits particular length trace possible rec trans rec trans rec corresponds attack enemy obtain nonce challenge directly commutativity distributivity encryption allow enemy alter nonce challenge issued completion protocol run guarantee received nonce challenge form transmitted attacks possible assumption full typing messages fact rank function respects guarantee attacks 
attacks fail presence full typing point respond nonce challenge detects type mismatch blocks progress 
proof authentication property usual receipt message authenticate transmission related message 
turn attention verifying completion protocol authenticates responded nonce challenge words rec authenticates ftrans 
case analysis begins user ftrans user trans rec trans rank function ae defined suitable 
established properties described description user unchanged 
remains prove 
analysis needham schroeder protocol nonce case follows ae ae trans sat maintains ae second case immediate sat maintains ae trans sat maintains ae provides antecedent rule input yield rec trans sat maintains ae rule output ae trans rec trans sat maintains ae obtain rule choice user trans rec trans sat maintains ae completes proof 
failure authentication property previous verification shows protocol supports authentication responded nonce challenge arbitrary user specifically property rec authenticates trans captures stronger requirement 
lowe low established protocol establish requirement 
instructive see manifests framework 
observe rank function inappropriate rec authenticating trans possible user transmit messages rank form trans having received messages rank 
words process user trans satisfy maintains ae tells proofs extend cover case 
tell protocol meet authentication property exercise attempting define rank function may suggest attack highlights messages enemy generate break authentication property 
analysis needham schroeder protocol lowe attack corresponds trace net trans net rec trans rec trans rec contains authenticating message rec trans message authenticated 
corresponds attack user legitimate initiation protocol equivalently enemy possession keys initiate protocol run acts partner rank function ae meets 
verification responder authentication authentication requirements commonly run directions originator responder require form confidence origin messages receiving 
analysed verification originator depth preceding sections 
sake completeness examine authentication responder 
fact approach taken taken 
authentication responder analysis context message user having destination 
description user original description section message restricted user trans rec trans agent user original description 
aim verify rec nonce authenticates trans nonce 
words prove net trans nonce sat tr rec nonce hi rank function required verification defined 
properties easily checked rank function 
remains establish 
analysis needham schroeder protocol ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae rank function authentication observe user trans nonce user aim prove user sat maintains ae firstly see ae vacuous ae ae 
deduce application rule input rule output rule rec trans sat maintains ae ae may rule output obtain user sat maintains ae required 
process analysed user trans nonce rec trans rec ae ae 
second case obtain ae trans rec sat maintains ae analysis needham schroeder protocol obtain ae trans rec sat maintains ae gives conditions required application rule input yield user trans nonce sat maintains ae required 
weak encryption mechanism consider effect distributivity encryption time presence full typing messages 
allowed rank function longer defined 
particular find ae ae 
attempt avoid difficulty define ae problem case ae ae difficulty exposed lines points fact presence message system allow enemy construct message rank 
fact turns case find system net trans nonce allows trace rec trans rec trace corresponds attack authentication property line longer holds 
receipt response nonce challenge issued authenticate treated challenge coming illustrates necessity establishing rank function respects equations message space 
verification uses implicit assumption equations message space inconsistent rank function 
lowe fix lowe fix lowe observation low protocol trans authenticated rec led suggestion name user included second message protocol described follows proof authentication property order establish run protocol trans authenticated rec csp description user user trans rec trans user rec trans rec rank function described suitable application theorem meets properties 
particular user trans sat maintains ae user sat maintains ae proofs follow pattern section 
show section authentication properties follow protocol property established 
lowe amended protocol provides property retain amendment section analysis regard property 
multiple runs analysis performed system single run protocol take roles initiator responder respectively 
possible informally generalise verifications systems repeated runs protocol possible describe csp situation agents perform multiple runs protocol provide formal verification 
analysis single run allows attention focussed participants run 
case multiple runs appropriate model parties able engage runs parties restrict behaviour protocol run analysis 
approach shall take 
lowe fix ae ae ae ae ae ae ae ae ae ae ae message ae ae ae message ae ae ae rank function verification lowe amended protocol rule interleaves sat maintains ae sat maintains ae jjj sat maintains ae rule recursion sat maintains ae sat maintains ae sat maintains ae proof rules maintains ae issue addressed concerns requirement fresh nonce protocol run 
may modelled csp infinite sequence nonces kth run respectively 
kth run protocol defined terms occurs run th run commence 
requires proof rule recursive definitions 
recursive definitions form function csp process expressions containing instances various variables 
rule states shown sat maintains ae inductive assumption satisfy maintains ae may conclude recursive definition fact satisfy maintains ae repeated runs consider situation users may engage run time 
lowe fix users defined terms mutual recursion 
case model user prepared initiate respond fresh run protocol engaged particular run protocol 
protocol investigated arbitrary run provides authentication run kth run represent kth run protocol mutual recursion indexed individual process variables user user families mutually recursive definitions defining users respectively 
user user trans rec trans user rec trans rec user description user entirely similar trans rec place trans rec user user trans rec trans user rec trans rec user user user user user 
example prove equivalent property rec authenticates trans words kth run protocol initiated receipt final message authenticates sent message 
description user restricted reflect fact analysis respect run 
descriptions user user remain unchanged 
user rec trans rec user appropriate rank function 
rank function meets 
prove establish rec authenticates trans consider user restricted trans 
words aim prove user trans sat maintains ae lowe fix ae ae ae ae ae ae ae ae ae ae ae nonce ae ae ae nonce ae ae ae rank function verification kth run user trans user trans rec trans 
user trans rec trans rec 
user trans apply rule recursion 
assuming aim prove assumption definition lines satisfies maintains ae branch choice line shown satisfy maintains ae applying rules input output 
obtain firstly assumption rule output trans 
user trans sat maintains ae provided ae 
follows application rule input rec trans 
user trans sat maintains ae provided ae ae side condition easily checked 
application rule output observation lowe fix ae yields branch choice satisfies maintains ae similar application rules input output establishes second branch choice satisfies maintains ae condition required ae ae ae easily checked 
application rule choice find process definition expression user trans satisfies maintains ae follows application rule recursion user trans sat maintains ae required 
consider cases separately 
assuming user sat maintains ae case user rec trans rec user applications rule input empty side conditions application rule output observation ae yield rec trans rec user sat maintains ae assumption user sat maintains ae case case recursive equation user user trans rec trans user rec trans rec user proof identical provided user trans requirements ae required rules apply 
ae ae 
ae 
ae ae lowe fix arise branch choice third arises second branch 
checked bearing mind means required result follows application rule choice rule recursion 
true arbitrary deduce protocol run receipt nonce challenge authenticates appropriately sent party 
concurrent runs examine situation agent may engaged multiple protocol runs time 
modelled description user user allowing th run initiated point start th run 
particular user described user point th run protocol ready executed 
soon begins description enables th run concurrently run earlier runs proceeding 
processes user described follows user user trans user jjj rec trans rec user jjj trans rec description user entirely similar replacing 
user user trans user jjj rec trans rec user jjj trans rec define user user user user 
establish property rec authenticates trans description user restricted reflect situation analysing 
descriptions user user remain unchanged 
user rec user jjj trans rec rank function ae defined 
means 
prove order theorem yield authentication property holds 
lowe fix user trans user trans user trans jjj rec trans rec user trans jjj trans rec straightforward prove rec trans sat maintains ae ae ae 
inductive assumption user sat maintains ae rule interleaves yields user trans jjj rec trans sat maintains ae rules choice output fact ae yield branch choice satisfies maintains ae similar reasoning yields second branch choice satisfies maintains ae deduce process body equation user trans satisfies maintains ae conclude rule recursion user trans sat maintains ae required 
consider case separately case inductive hypothesis user sat maintains ae case user rec user jjj trans rec lowe fix application rule input empty side condition application rule output observation ae yields trans rec sat maintains ae rule interleave inductive hypothesis user yields user jjj trans rec sat maintains ae rec user jjj trans rec sat maintains ae rule recursion conclude user sat maintains ae case case recursive equation user user trans user jjj rec trans rec user jjj trans rec proof identical provided user trans 
requirements ae required rules input output applied section 
ae ae 
ae 
ae ae verified earlier proof 
obtain user sat maintains ae line yields user sat maintains ae required 
lowe fix authentication continue analysis protocol lowe fix description user engage multiple concurrent runs protocol general description protocol 
having established situation net sat rec authenticates trans observed range possibilities authenticating properties follow immediately virtue lemma 
aim establish properties 
consider property 
aim prove final message received kth protocol run authenticates received second message nonce appearing message received protocol run 
order perform analysis necessary name nonce received step user justified form giving name arbitrary variable treating fixed 
authentication provided whichever nonce received step fixed way modelled kth run user accepts initial nonce 
nonce description kth protocol run user follows user rec user jjj trans rec description user section 
rank function meets establishing net sat rec authenticates rec theorem 
proof structure section 
observe inclusion name message allows source message identified message rec rec user authenticated 
observe ae allowing possibility enemy initiate protocol run 
turn attention properties 
transitivity authentication lemma allows property rec authenticates rec established verify properties 
strategy illustrated 
benefits approach prove message form authenticates message form trans transitivity allow conclude authenticates result authenticates 
messages user rules concerning authentication single process required involved strategy developed theorem concerning authentication messages different users need deployed 
lowe fix ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae ae gamma ae ae ae rank function verification property auth auth authentication transitivity aim prove rec authenticates trans protocol runs described user 
assuming inductive hypothesis user 
user user trans user jjj rec trans rec user jjj trans rec consider branch choice particular user rec trans sat rec authenticates trans lowe fix rule auth prefix 
rule auth interleave application rule auth prefix obtain trans user jjj rec trans sat rec authenticates trans hand trans user jjj rec trans sat rec authenticates trans follows immediately rule auth prefix 
rule auth choice obtain user trans user jjj rec trans sat rec authenticates trans covers half definition user second half obtain applications rule auth prefix rule interleave rec user jjj trans rec sat rec authenticates trans obtain user sat rec authenticates trans arbitrary inductive hypothesis 
rule auth recursion yields user sat rec authenticates trans 
net user trans rec net net network excepting user may apply rule auth parallel obtain net sat rec authenticates trans lemma applied lines yields net sat rec authenticates trans property 
observed earlier properties weaker property follow immediately 
observe approach exploits transitivity establish property user trans authenticating rec 
words reason trans discussion authenticates rec contained entirely user description user allows trans situations consideration user behaviour required establish 
forces theorem 
authentication intra process messages established rules process isolation able guarantee property 
seen case authenticating guaranteed description user 
explicitly established authenticates true interested primarily inter process authentication interesting property right 
establish results concerning intra process authentication may combined inter process authentication properties yield results require 
discussion shown theory csp specialised provide theory reasoning authentication protocols 
process verification requires assumptions encryption mechanisms capability hostile agent explicit 
theory includes csp model framework containing protocol rules establishing authentication messages single agent general theorem deducing authentication agents properties respect rank function ae messages rules deriving required properties 
find construction rank function forces consideration precise reasons protocol expected 
respect reflect understanding protocol designer understanding precise explicit 
failed attempts construct rank function may provide insight protocol provide authentication 
weak encryption mechanism allows provide authentication saw section difficulty finding rank function may lead discovery attack happened 
csp language common process algebras ccs provides language suitable description protocols natural way 
abadi gordon abg observe kind approach combines precise solid foundation reasoning protocols clear relationship implementations 
benefit process algebra approach identify precisely authentication property required protocol 
may left vague original formulation protocol performing verification gives information properties hold pinning precisely properties provided protocol 
vital question properties obtained required scope formal analysis really assessed intended protocol 
security properties may captured csp specifications alternatively terms equivalences processes done abg network built protocol required equivalent network describes effect correct operation protocol equivalence means protocol operate correctly context written process algebra distinguish actual protocol specification 
discussion comparison approaches csp approach put forward author sch advocated encapsulation required properties terms interactions protocol agents users 
intention separate required properties way implementing 
property system described terms possible interactions environment internal events trans rec appear property description 
approach requires extra events connect authenticated appear protocol description captured user user descriptions follows user connect trans rec trans user rec trans rec authenticated top level requirement net trans rec sat authenticated authenticates connect essential proof strategy remain proposed highlevel description property purely terms interactions network environment 
proof rules remain unchanged additional assumption required messages rank introduced protocol agents environment guaranteed agents channels apart trans rec 
approach including additional control events protocol description appropriate abstracting away details protocol description providing clearer understanding protocol designer attempting achieve 
separation concerns allows authentication specifications formulated independently details particular protocol 
external events introduced csp approaches protocol analysis ros low wol 
case analysis performed additional external events nonce challenge ok message included finer distinctions different flavours authentication 
approach simply straightforward extension approach fact taken introducing special events introduced mark particular points run protocol pinpointing directly 
issue interest definition concerned matching occurrences events event occurred definition allows arbitrarily events occur breaking authentication 
lowe low discusses stronger version authentication requires authenticating event correspond different authenticated event terms requirement 
property important example authorisation financial transactions 
property captured strengthening definition follows discussion definition authenticates tr tr immediate authenticates authenticates tr hi tr tr tr hi 
techniques developed concerned non injective authentication 
extension deal area ongoing research 
approach contrasts roscoe calls intensional specifications mean protocol works expected sense 
properties expresses csp specifications independently protocol really correspond recipe providing specification appropriate particular protocol 
example gollmann identifies number authentication properties gol closest considered states origin messages protocol authenticated 
treat conjunction authentication properties authenticating authenticating authenticating stipulating authentication required protocol run complete 
examples ros gives canonical intensional specification interleavings messages different agents accordance messages protocol slightly weaker dow requires participant completes part protocol run participant engaged sequence events described protocol 
intensional properties formulated particular protocol csp terms independently protocol 
correspond recipes producing specification appropriate protocol 
approach providing rank function ae core proof complementary tools approaches low mil kmm ros search attacks 
results kind analysis provides useful information protocol correct alternatively gives bald statement attack 
appropriate debugging provide understanding protocol correct 
claim rank function provides basis understanding profitable explore interplay state exploration approaches proofs 
problem concerns relationship finite nature state space infinite possibilities attacks arise aspects possibility arbitrary depths encryption combining messages lowe low begun consider proof strategy general form protocol run establishing absence attack finite state space really imply attack possible infinite state space 
rank approach useful context 
approaches direct proof protocols indirect route establishing absence attacks tend formal languages describing security properties rules support reasoning statements language 
protocols modelled rules allow derivation new statements existing ones 
best known example language ban logic ban need protocols logic means link protocol logical treatment informal 
formal language described sym contains lower level primitives relate directly steps taken protocol supports reasoning concerning knowledge intruder particular stages 
language conjunction nrl protocol analyser check reachability negated requirements closer tools approaches 
approach proof reflecting feasible 
directions approach analysing verifying authentication protocols driven part consideration needham schroeder protocol 
verification done hand cryptographic mechanisms considered straightforward nonces public key encryption 
obvious need investigate csp handling security mechanisms timestamps investigate complicated protocols 
form mechanical assistance proof appears feasible bring benefits managing details proofs cumbersome track 
theory rules described theorem prover pvs osr support discharge proofs particular rank functions 
peter ryan irfan gavin lowe cathy meadows abraham sidiropoulos comments earlier forms 
pleasure bruno checking proofs pvs providing number corrections underlining necessity mechanical assistance proofs manageable 
funding research received defence research agency 
abg abadi gordon calculus cryptographic protocols spi calculus university cambridge draft 
ban burrows abadi needham logic authentication technical report src dec 
das davies schneider recursion induction real time processes formal aspects computing 
dow diffie van oorschot wiener authentication key exchanges designs codes cryptography 
dolev yao security public key protocols ieee transactions information theory 
gol gollmann mean entity authentication 
ieee computer society symposium research security privacy oakland 
proofs hoa hoare communicating sequential processes prentice hall 
kem kemmerer analyzing encryption protocols formal verification techniques ieee journal selected areas communications 
kmm kemmerer meadows millen systems cryptographic protocol analysis journal cryptology 
low lowe attack needham schroeder public key authentication protocol information processing letters 
low lowe breaking fixing needham schroeder public key protocol fdr tacas lncs 
low lowe hierarchy authentication specifications preparation 
mea meadows applying formal methods analysis key management protocol journal computer security 
mil millen interrogator model ieee computer society symposium research security privacy oakland 
nes needham schroeder encryption authentication large networks computers communications acm 
osr owre shankar rushby pvs specification language computer science lab sri international 
ros roscoe modelling verifying key exchange protocols csp fdr proceedings csfw ieee press 
ros roscoe intensional specifications security protocols proceedings csfw ieee press 
sch schneider security properties csp ieee computer society symposium research security privacy oakland 
sym syverson meadows formal language cryptographic protocol requirements designs codes cryptography 
wol woo lam semantic model authentication protocols ieee computer society symposium research security privacy oakland 
proofs theorem proof theorem enemy sat init tr trans tr rec proof prove easily mutual recursion induction enemy sat tr trans tr rec result follows fact enemy enemy init 
proofs theorem proof theorem ae init ae ae ae user sat maintains ae net sat tr hi proof assume contradiction hold net sat tr hi 
trace tr traces net tr hi 
tells ae messages tr rank 
tr prefix tr message message tr rank 
words tr trace point message rank occurs 
prefix closure traces processes tr trace net 
consider message tr form rec trans ae case rec tr trace enemy theorem init tr trans tr rec init tr trans tr definition tr ae tr trans messages tr apart rank greater yield ae forcing contradiction 
case trans tr tr ftrans rec ig 
subsequence tr user participates tr trace user 
maintains ae tr 
expanding definition find ae tr trans ae tr rec init follows ae ae tr rec init 
definition tr tr ae tr rec ae init find ae giving contradiction 
case find contradiction establishes theorem 
