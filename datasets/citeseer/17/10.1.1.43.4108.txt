active views jim richardson james richardson honeywell com agrawal agrawal honeywell com srivastava amazon com raja cs umn edu technical report idt honeywell technology center technology drive minneapolis mn march traditional information intensive applications passive maintain body information database repository 
users query update information information system idle 
trend active information systems inform users take actions new relevant information enters system 
examples include collaborative systems monitoring control systems variety application domains 
approaches providing active behavior generally involve notion event 
corba com java support events large literature active databases 
active views integrated set mechanisms constructing active information systems 
simple specific definition event event complete description change state specific identified object 
mechanisms view history object synchronization provide uniform treatment state state change state history arbitrary object types databases user interfaces sensors system 
view object state arbitrary computed function states source objects 
view provide information state events state changes level abstraction user application requires 
various forms event condition action eca rules views composable simple deterministic semantics 
histories object synchronization adaptations common database concepts arbitrary objects including views 
rigorously defines related concepts illustrates draws connections common object oriented concepts object implementation creation containment inheritance 
honeywell technology center minneapolis mn amazon com seattle wa leave university minnesota minneapolis mn university minnesota minneapolis mn supported part air force research laboratory information directorate contract 
mark afrl support encouragement 
table contents 
model objects types 
type specifications 
example stack 
behavior sequences requests 
relationship formal specification languages 
object equality 
compression functions 
distance functions 
examples set scalar 
object containment identifiers creation 
example record 
example 
objects values identifiers containment 
generating object identifiers predictably 
views 
view specifications 
example 
indirect view implementations inheritance 
histories 
history type specification 
object view history 
views histories information quality service 
histories views 
object synchronization 
type specification 
synchronizer view specification 
synchronizer view implementation 
discussion 
relationship active databases 


traditional information intensive applications passive maintain body information database repository 
users query update information information system idle 
trend active information systems inform users take actions new relevant information enters system 
examples include collaborative systems monitoring control systems variety application domains 
approaches providing active behavior generally involve notion event 
corba omg com chap java support events large literature active databases 
see wc survey 
active views integrated set mechanisms constructing active information systems 
simple specific definition event event complete description change state specific identified object 
mechanisms view history object synchronization provide uniform treatment state state change state history arbitrary object types databases user interfaces sensors system 
view object state function states source objects 
view provide information state events state changes level abstraction user application requires 
view object client application accesses meaningful updates view state operations defined type 
source object state updated view state changes maintain functional relationship 
similarly updating view state causes update source object states 
source object operations view object view function source object operations source object history operations source object history synchronizer target objects 
view 
history 
object synchronization extend conventional database concept view ways source objects need persistent 
source view objects arbitrary types just relations sets sequences system provided types 
functional relationship view source objects computable function just function defined system provided query language 
history record object past current states operations retrieving changes pairs states 
application database log concept arbitrary objects including views 
state changes defined object type type specific operations cause change object state 
object view history records view state changes view source objects 
object synchronization propagation source object state changes target objects 
synchronizer monitors source object history new state changes propagates set target objects 
source object view states target objects synchronized view state states view source objects 
mechanisms support construction active information systems way object history captures state changes events transmission interested recipients object synchronization 
information push 
alternatively client application access object state operations defined object type 
information pull 
client application may require computed transformation states state changes objects 
accomplished defining view objects view function performs required transformation 
shows active views military application generate animated map personal display 
state animated map defined equation map updates history aircraft position updates 
application active views synchronizer display map shows enemy flights region interest centered current location 
source objects digital map world situation database current locations known enemy aircraft gps receiver senses location 
animated map changes aircraft positions change region interest moves digital map changes region interest bridge destroyed 
implemented active views concepts widely divergent applications military air operations planning video capture storage display 
potential applications include industrial process monitoring shared collaborative workspaces 
implementation omg corba approach implemented object infrastructures microsoft ole com specialized systems 
equation declarative statement information need 
says mechanics updating map response changes source objects 
declarative nature view definitions speeds application development 
implementation provides library reusable view functions graphical tool composing new functions library elements 
run time system takes view definition instantiates efficient eventdriven mechanism updating animated map run time distributed system 
event oriented nature object synchronization provides rapid propagation state changes source objects application specific view functions information consumers 
remainder organized follows 
section presents model objects types forms basis active views 
sections define views histories object synchronization precisely discuss implementation approaches compare mechanisms individually similar concepts literature 
section compares active views integrated set mechanisms active databases currently defined literature 
section suggests areas 
model objects types object software entity interacts software entities request response protocol 
protocol client application may object sends object request 
request elicits response object may cause change object state 
request identifies operation performed object parameter values operation 
response may result exception indicator 
requests responses states mathematical values represented computer memory 
object implementation includes implementation state recorded implementation objects procedure receives request generates response request current states implementation objects 
may update states implementation objects 
close relationship object implementations views discussed section 
remainder section documents models object types equality creation containment common object oriented concepts active views deal realistic object oriented environment 
illustrate concepts examples 
type specifications type assertion object behavior viewed client applications 
defines contract object clients response object generate result particular request object state change 
form type specification 
relationship formal specification languages larch gh explained 
type specification consists state domain request domain response domain arbitrary mathematical sets 
transition domain sq st qt set state request pairs type defines object behavior 
type need define response object request state transition domain effectively defines precondition request 
state transition function st response function rt define new state response infix functions 
initial state st assume objects type specific known initial state 
subscript omitted type understood context 
parameter type type specification parameterized denoted pn value domain value drawn domain 
example stack stack type defines infinite capacity stack elements drawn value domain push pop isempty ok true false sq pop definition sq indicates result pop request empty stack defined 
state transition response functions defined follows mathematical notation adopted meyer theory programming languages text accessible non mathematicians including authors unfortunately print 
similar notation defined 
push xn push ok xn pop xn pop xn isempty xn xn isempty behavior sequences requests state transition response functions related functions 
show effect sequences requests object 
function computes effect object state sending sequence requests function 
computes sequence responses result sequence requests 




qn 


qn denotes sequence concatenation 
functions defined subset set sequences elements sq represents legal sequences requests sent object type object state defined inductively sq sq sq 
sq sq difference states set paths set elements change state object type sq 
may zero path state reachable state denoted assume elements reachable easy show states denotes pairwise concatenation elements arguments 
words paths include pass easy see transitive reflexive 
relationship formal specification languages form type specification intended replace specification languages larch designed expressiveness formal verification mind 
differs languages ways 
models requests values 
larch similar specification languages model requests applications functions invocations procedures methods 
modeling requests values allows reason easily sequences requests types deal form request history 
notation somewhat awkward 
second produce complete type specifications specifications completely determine behavior object type gh 
type state transition response functions define result request completely specific new state response 
sequence requests sent object type creation specifies behavior sequence state qn form type specification finite state transducer au state request response domains infinite 
qn sq object possible define constraints new state response specifying completely 
instance want specify set type operation returns arbitrary element set object removes element set 
example want specify stack type fixed capacity push requests fail leave actual capacity unspecified 
types specified larch form type specification 
restriction necessary purposes 
definitions view history object synchronization require completely specified types request applied object type known state resulting state completely predictable 
practice complete predictability achieved 
memory resource limitations hardware faults factors impossible guarantee object meets type specification times 
cover cases object able raise implementation exception signal implementation failed meet type specification 
implementation exceptions gracefully integrated active views mechanisms subject study 
object equality object synchronization requires defined notion object equality 
object oriented systems distinction shallow deep equality 
differ treatment object state 
objects equal states equal 
states include object equal refer object 
objects deeply equal states equal recursively states objects equal 
adopt shallow notion equality objects type equal states equal 
define equality objects type objects type synchronized 
want copy complex web interrelated objects keep copy synchronized original 
appear require deep equality doesn web constructed inside container object container objects synchronized shallow equality criterion 
see section discussion object containment 
compression functions compression function transforms sequence requests generally shorter sequence 
formally compression function type function properties 

qt words compression function generates sequence requests effect current state object original sequence applying compression second time sequence requests effect 
compression functions history type specification section 
example compression function type stack function defined recursively reduces length sequence leaves sequence unchanged 
xn push pop qn xn qn isempty xn pop pop push xn qn pop times times pop qn note compression function sensitive state stack pop request followed push request compressed stack element pop request removed 
shown compression function generates unique sequence requests 
possible define compression function insensitive object state stateless compression function stateless compression function simplifies implementation history 
defined equivalent sequences requests 
sequences requests equivalent type effects object type regardless state object sequences need cause responses object 
stack type push pop isempty equivalences lead stateless compression function push pop qn isempty qn qn stateless compression function clearly effective state sensitive compression function defined 
problem investigation identify class types stateless compression function defined sense compression function 
distance functions practice objects perfectly synchronized times delay time source object updated time target object brought back synchronization 
applications tolerate synchronization delay 
may tolerate synchronization inaccuracy target need exactly state source just close state 
notion accuracy common physical measurements numeric values 
wealthy bill gates 
round nearest 
delay accuracy measures quality service object synchronization discussed section 
define general notion distance function measure difference states objects 
distance function type function set real numbers 
properties states triangle inequality definition distance function differs usual definition ways 
ordinarily distance function symmetric defined pairs states 
need symmetric easier sense meaningful application domain change state object type reverse 
defined distance function part type specification distance function defined type 
stack distance states defined minimum number pop push operations required change stack state 
distance function generalized type min easy show satisfies properties distance function 
particular triangle inequality follows equation 
case stack type symmetric true types 
equation shows distance function type distance function coarse says states different 
examples broad class distance functions form 
words distance states computed sequence requests change state object type compressing computing distance compressed sequence requests 
distance functions equations expressed 
length 
min length compression function produces minimum length sequence requests 
compression function said support distance function expressed equation 
refined distance functions defined specific object types examples 
examples set scalar type specifications set scalar geographic location type set specifies behavior object state set values drawn domain state domain set power set set subsets specification trivial relies commonly understood mathematical notation 
insert delete member ok true false sq 
insert insert ok 
delete 
delete ok member 
member set type number equivalent request sequences insert insert insert insert insert insert insert insert delete delete insert insert insert delete delete insert delete delete delete delete delete delete delete member reasonable distance function minimum number insert delete requests needed change set object state state equation 
type scalar provides set get operations scalar values domain set integers set reals set character strings set larger values images set get operations sufficient 
assume domain distinguished value initial state objects type 
type specification set get ok sq set set ok get get scalar type equivalent request sequences set set set get result equivalences distance functions defined equations equivalent informative 
informative distance functions defined specific domains 
instance absolute value useful 
denotes subtraction state difference defined equation 
geographic location type models points earth identified latitude longitude 
gps sensor example object type 
lat long lat long lat long lat long lat long lat long move lat long lat long lat long ok lat long lat long lat long sq lat long move lat long lat lat lat lat lat long 
lat long lat long lat long lat long ok lat long 
move lat long lat lat long long mod lat long move lat long ok lat long 
lat long lat long lat long reasonable distance function type great circle distance 
object containment identifiers creation object oriented applications heavy object containment identifiers creation 
active views mechanisms view history synchronization settings 
particular possible define view collection related objects create history collection related objects synchronize states collections client programs may add remove operate objects collection 
principles model object containment identifiers creation 
object container contain object contained object meaning state part state change state change state 
container multiple contained objects 
number contained objects fixed container type specification 
alternatively container type specification include requests creating destroying contained objects 
objects created sending request container 
object container objects system created manner 

client application sends request contained object indirectly container 
container type may provide different forms request accessing different contained objects 
alternatively container type may provide request form invoke request value meaningful respect container distinguishes contained objects request request defined contained object type 

object part state object identifier object contained contain 
containment behavior structural relationship objects 
words container behavior response requests provides appearance contains objects 
views constructed provide different containment relationships set objects 
note object identifier meaningful respect particular container 
object oriented literature abounds assertions object identifiers globally unique 
true global uniqueness ensured context implicit uniqueness ensured address space oodbms networking environment 
context acts containing object 
various kinds containers sets arrays records single container object type 
examples illustrate model 
example record record contains fixed number objects different types 
contained objects distinguished field names object identifiers 
specify type record fields types respectively 
st stn invoke fi qt rti sq sn invoke fi si si sn 
invoke fi si 
ti sn si sn invoke fi si type set equivalent request sequences reflect independence record fields plus equivalent request sequences derived underlying types invoke invoke invoke invoke invoke invoke invoke invoke ti dn distance functions underlying field types reasonable distance function record type variations distance function root mean square maximum weighted sum possible 
example object type er contains objects type identifiers contained objects drawn domain state domain type er partial function state space st initially function completely undefined meaning container empty requests inserting creating new contained object deleting existing testing membership invoking operation existing contained object 
insert delete member invoke qt ok true false response rt sq insert request adds object initial state container assigns object identifier object identifier container replaced object initial state 
overriding union operator accomplishes replacement 
insert insert ok delete request removes object identifier container exists 
dom domain partial function set identifiers objects container 
delete dom 
delete dom ok member request tests container object identifier member member dom invoke request sends request contained object identifier assuming container 
state contained object part state container object changes specified type response specified type response value contained object wrapped form response guarantees response contained object ment confused response ment container 
contained object return response ment instance set invoke dom 
invoke dom response type er number request equivalences 
equivalences hold type set hold type 
addition invoke insert insert invoke insert insert invoke invoke delete delete invoke delete delete invoke delete invoke delete invoke invoke invoke invoke equivalence qm equivalence type er type corresponding invoke invoke invoke invoke number distance functions defined type er plausible distance function constructed distance function defined type states container distance function sums number object insertions required number object deletions required distances original final states object container states dom dom dom dom min dom dom added complexity third term account possibility cheaper overwrite existing object new object having identifier bring new object state bring existing object state state 
objects values identifiers containment worth drawing clear distinctions object value object object identifier object object containment 
distinctions literature vital precise definitions active views mechanisms 
consider object type er object type set object type set st contains set objects states value member set identifiers 
identifiers objects contained objects contain 
set values member possible send request member value generally value element mathematical set domain 
object software construct state 
receives requests modifies state returns responses specified type 
request response state object values 
object identifier value meaningful respect container object distinguishes contained objects 
object value specifically object identifier referenced object part state referring object 
er example illustrates principles model object containment identifiers creation listed earlier 
fifth principle containment behavior structure different containment relationships constructed views may surprising 
shows done 
object type er view objects defined 
precise specification view section 
basically contains object contains state changes invoke request sent state change apparent vice versa 
net effect contains objects merely 
ability construct different containment relationships provides significant flexibility active views mechanisms object states 
instance synchronized copy synchronized track insertions deletions object copy track insertions deletions updates states referenced objects 
outcome desirable application requirements 
requests set 
constructing containment relationship view generating object identifiers predictably general approaches generating object identifiers client provides identifier part request sends container create object container generates identifier part creation process returns client response 
er uses approach approach typical object oriented systems provide constructors object type 
object type container type completely specify container object behavior 
includes assignment object identifiers new contained objects created 
client provides identifier request requirement automatically fulfilled 
container generates identifier care taken ensure identifier generated completely container type sequence requests sent container far 
active views mechanisms particular object synchronization function properly request invoke request sent source target container objects may effect doesn contained object cases 
object oriented environments language run time environments orbs don predictable object identifier generation containers suitable source target objects object synchronization 
possible scheme track corresponding objects source target containers 
synchronization scheme intercept translate object set source container set target container 
scheme tailored specific container object type implementation type independent synchronization scheme difficult 
views view concept originated database management systems adopted contexts computer aided design tools multiple perspectives body information needed 
views uses meeting clients information needs providing client applications users information need mass accessible data 
management system evolution systems object types implement change time 
client application user create view objects meets information needs 
system evolves time view insulates client irrelevant changes underlying objects simplifying system evolution 
approach managing system evolution recognized long ago ansi sparc architecture tk get little attention today 
integration legacy applications databases legacy applications databases typically require provide information different format new system integrated 
views accomplish desired transformations 
information security views long relational databases define restricted subset database client may access 
relational databases view table state defined fixed set relational operations tables relations scalar operators column values 
object oriented database management systems represented odmg standard experimental systems multiview kr view defined fixed set operators collections sets sequences bags arrays arbitrary computed functions scalar values 
goal general definition views object oriented systems 
generalization view concept allows benefits views listed realized broader range applications 
view object state function states source objects informally functional relationship denoted view function 
precisely functional relationship states objects 
source view objects arbitrary type 
view function arbitrary perform kind information selection abstraction transformation 
client application sends request source object causes state change view object state changes maintain functional relationship similarly client application sends request view object causes state change source objects states change maintain functional relationship 
clients perceive state changes directly responses source view objects return response requests 
retain key characteristic views composed 
ability compose views means user define complex views simpler ones drawn view library 
ability compose views means algebraic properties view functions exploited improve system performance 
done extensively database query optimization area investigation general context 
views essential approach active information systems 
approach event change state object 
user application defines events interest creating view state changes events 
ability compose views simplifies task defining events interest 
view specification definition functional relationship view object set source objects definition relationship maintained requests sent objects 
shows graphical representation view specification arrows indicate direction functional relationship dotted lines indicate behavior specification implementation 
view implementation software realization view specification 
simplest form implementation called direct implementation represented graphically 
implementation single procedure solid arrows indicate direction requests sent request sent view object sent procedure generates response view object type 
receiving request sending response send requests source objects source objects responses compute response client 
access source objects states directly 
temporary storage computing response maintain state requests source objects 


graphical representation view specification 

graphical representation direct view implementation direct view implementation looks conventional notion object class object implementation 
true object implementation form view implementation view object type object type implemented view implementation class code source objects hold implementation state 
forms view implementation illustrated 
section approach view specification illustrate specification view illustrated 
discuss alternative methods implementing views 
view specifications view specification tuple tn qn si superscripts distinguish elements view specification different view specifications dropped ambiguity 
source object types 
qn sets requests client applications may send directly source objects opposed indirectly view 
direct client access source objects restricted forbidden 
general ti view implementation may send request source object view object type 
set requests client applications may send directly view object 
direct client access view object restricted requests change view state 
general qt view object state change due state change source objects 
view function 
signature st st view function maps state domains source objects state domain view object relationship sn invariant guaranteed hold times source object view object received request replied 
si source invariant 
predicate st constrains combined states source objects 
true times request processing 
degenerate case si may identically true 
update constraint 
predicate st st st st constrains source objects updated client sends request view object 
update constraint needed determine new states source objects 
constraint need completely specify source objects updated 
example partial specification 
type specification view specification parameterized 
occurs source view object types parameterized done parameterize functional relationship source view objects 
parameterized view specification denoted claimed earlier object implementation form view implementation 
elements view specification counterparts conventional object oriented terms 
type object implemented 
tn types objects implementation 
encapsulation requires access implementation interface qt encapsulation violated object implementation includes objects applications access directly 
called abstraction function si called implementation invariant 
obvious counterpart update constraint 
view specification meet conditions ensure consistent source view object type specifications 
conditions functional relationship source invariant hold initial values source view objects si tn third condition requires permissible request sent source object cause legal state transition view object st st si sn si si si si 
si sn stated earlier client application sends request source object responsible maintaining source invariant 
need consider requests source invariant true update occurs 
fourth condition requires permissible request view object explainable terms legal requests source objects st st si sn sn sn tn si sn sn sn source invariant assumed true prior request 
requests source objects maintain functional relationship restore source invariant observe update constraint 
may set requests source objects meet requirement view implementation free choose 
view specification allow source objects change state request sent view object change view state 
example illustrates 
ti example formal specification view introduced section illustrate construction container set object 
view defines relationship view object source objects having types set brevity omit view parameters clear request may sent source view objects types allow qt ti view function defines state view object terms state source objects 
types source view objects signature st st object container container set state object container state corresponding object respectively container mathematical terms states state partial function derived eliminating elements domain aren view choose impose constraints source objects states source invariant si words si identically true 
instance object corresponding objects container update constraint stated set rules form request type er specification type er insert request causes existing object identifier overwritten new object having identifier insert delete request delete object delete delete 
choose delete applications object container delete member request doesn affect state view object source object change state 
dangling object doesn exist view implementation may remove 
example partial specification view update behavior 
member dom invoke request view object passed source object object view 
deletion dangling permitted required invoke dom 
dom see show equation deals requests sent source objects satisfied 
equation requires permissible request sent source object cause legal state transition view object 
states source view objects request sent states request 
proof strategy show 
sequence requests applied view object expressing terms view function definition expressing terms type specifications expressing 
qn terms definition type specification view function complex case invoke request sent subcases 
subcase dom case changes state invoke request sent 

invoke subcase dom case changes state 

subcase dom case changes state 
proof trivial 
proofs requests similar 
show equation deals requests sent view object satisfied 
equation requires permissible request view object explainable terms legal requests source objects preserve source invariant observe update constraint 
proof strategy consider different forms request view object time particular request form identify sequence corresponding requests source objects show requests maintain source invariant observe view update invariant verify new source object states consistent new view object state defined view object state transition function 
example consider request invoke sent subcases depending value important subcase dom case sequences invoke respectively requests 
er invoke set source invariant si maintained identically true 
update constraint clearly satisfied 
proofs similar remaining subcases request invoke request forms sent view object sketch implementation view specification 
response insert request implementation sends insert request source objects required update constraint returns response ok response delete request sends member requests source objects determine dom response ment required view object type response ok case sends delete request required update constraint 
response member request determines returns appropriate response 
dangling sends request allowed update constraint 
dom delete response sends invoke request sends ment response client 
invoke request determines returns indirect view implementations inheritance dom response client 
implementation view specification sketched direct implementation single procedure realizes required behavior view object interactions source objects 
ways implement view specifications 
materialized views gm implementations view state maintained object separate source object 
primary motivation materialized view superior performance conventional virtual direct view implementation source updates rare compared queries view 
view specification direct implementation due constraints source objects types impose access states 
consider view specification sizeof view object type scalar non negative integer object source object type set domain client sends get request response size view specification implemented 
set type provides means client determine elements set exhaustively sending member request element domain count number true responses 
infinite impossible common finite domains integers floats unacceptably inefficient 
cases legitimate revise type specifications source objects provide better access source objects states 
type specifications refined appropriate meet legitimate application needs 
approach indirect view implementation shown 
approach assume set implemented linked list 
implementation implementation objects holds element list ts container list elements 
procedure implements set abstraction usual way 
integer object view implementation objects different procedure se count number elements list 
example relational dbmss indirect view implementations enforce functional relationship view derived table base tables defined 
instance view defined join base tables fact direct views underlying physical storage structures implement dbms computes structures 
generally indirect view implementation enforces view specification view object source objects implementing objects direct views objects scalar scalar sizeof set record val scalar 
indirect implementation sizeof view indirect views closely related usual notion implementation inheritance 
implementation inheritance object type specific type supertypes abstractions specific type 
apparent state object methods available manipulate state depend type object viewed 
state object supertype function state object specific type function called abstraction function lw 
stated earlier objects synchronized type 
object type definition synchronization difficult 
propose approach object exactly type 
object type defines state space initial state state changes response requests described section 
object type treated object supertype polymorphic assignment really different object 
direct views implementation objects ft fs indirect view indirect view function abstraction function 
polymorphic assignment generates words implementation inheritance specific form indirect view implementation 
histories history record object past current states operations retrieving changes pairs states 
application database log concept gr arbitrary objects 
examples histories include video clip history image sequence timestamped sensor readings aircraft trajectory history position output chemical process simulation 
views goal general definition histories object oriented systems allows various implementation approaches including efficient special purpose implementations 
common forms history abstractions value sequence time state value pairs 
form history provides operations determine object state specified time possibly sequence object states recorded specified time interval 
form common process data loggers record timestamped sensor values 
research temporal databases adopts value model history query evaluated specified time 
change sequence time state change pairs 
form history provides operations store retrieve sequence changes object state specified time interval 
database logs form 
changes course reconstruct state object specified time 
adopt change history abstraction state changes captured requests sent object 
gray reuter call logical logging gr 
reasons choice value history special case change history change complete replacement object state 
common small objects type scalar large objects manipulating state changes efficient manipulating states 
impractical record entire state database time database updated 
object types define implementation independent representation values state domains 
example stack object push pop requests incrementally modifying object state request reading writing object complete state 
hand object type defines possible state changes request domain object number histories 
section specifies type history object type section shows object type view object ho type history ho reflects changes state 
section shows histories defined views ho purpose doing achieve varying levels quality service object synchronization 
section discusses histories views essential generating events meet client applications needs 
history type specification type history type history domain state identifiers qt compression function 
state identifiers label select states history 
possible choices domains state identifiers depending application 
integers timestamps multi level version numbers transaction identifiers common state identifiers 
total order defined relative position states object history determined comparing state identifiers 
minimum element distance function measure difference state identifiers 
type specification history follows 
time state history form hn ln hn state identifiers strictly increasing order ln sequences requests drawn history represents sequence past states sn current state object type way sn words sequence requests applied object type moves object state formally state space type history qt qt initially history empty request response domains record append succ get ier ok request possible state sq request record appends request history compresses sequence requests recorded identified state 
ln 
record hn ln sn record ok shorthand expression history state defined equation 
compression function type process record requests including null compression function stateless compression function implementation simplified 
choice compression function affects history state transitions parameter type specification 
type specifications history completely specifies behavior object type 
essential active views mechanisms explained section 
request append identified state current state object state identifier greater state identifiers history hn ln 
append hn hn ln hn ln hn ln append hn ok requests succ get navigating sequence state identifiers accessing requests 
modify state history 
responses requests follows hn ln hn ln succ hk hk hn ln get hk ln hn ln object view history suppose object type history object ho type history ho state reflect current state 
accomplished view relationship ho object history view 
view parameters omit brevity 
choice compression function affect view definition 
elements view specification history record qt clients send request defined type cause view implementation send request record ho clients send requests form append succ get directly ho seen requests change state ho way changes state simplify view implementation forbid client send request record directly ho view function qt qt st defined follows hn ln ln just reflects fact state object determined sequence operations qm performed creation 
sequence ln compressed version original sequence guaranteed result state 
constraints view behavior required provided source view types view function si true true shows way implement view specification 
object implemented wrapper objects object type history object ho request sent procedure things sends request object returns response client sends request record ho implementation object real implementation type note procedure implements view specifications view object source object ho identity identity function view object source object 
identity ho history 
wrapper implementation history views histories information quality service history object views defined 
particular kind view useful object synchronization information quality service view 
synchronization works sending requests history source object target objects 
cases perfect synchronization required target objects states lag source object amount time time measured state identifiers 
target objects differ somewhat source object state difference measured distance function defined section 
general higher fidelity synchronization requires system resources possible trade synchronization fidelity resource requirements 
information quality service view dh dt defines view relationship sho view history object source history object sho type history parameters taken source view object types view additional parameters lag distance function state identifiers measure lag accuracy distance function states measure accuracy 
derived sho omitting past states sufficiently different terms earlier states included elements view specification straightforward history history si true record append clients may change state sending record append requests directly state changes induced requests sent sho corresponding state view function signature qt qt qt qt state source object sho form sh sl sh sl sl ss vs vh vl state identifiers vs ss form vl vh vh subsequence state identifiers sh sh precise definition somewhat complex 
define predicate included functions prev index included predicate indicates state identifiers sh included vh included true iff sh included vh function prev returns index element prior sh included vh ss true included dh shi dt ss 
sl sl 
prev max included compute included predicate included index function maps element prev index min index included ss vh corresponding element index construct view state vh vl vh vl vl vs sh sh index vh index vl ss prev index sl prev index vl ss sl sequence requests vl generated compressing sequences requests follow previous state identifier sh prev index sho depending values chosen compression lead considerable reduction number requests compared sho reduced synchronization resource requirements 
shows ways implement view specification 
requires compression function support distance function function qt dt 

see section wrapper procedure materialize wrapper receives requests source history object sho forwards real implementation sh source history object 
forwards requests view history object forwarding append request sends request request obtain vh vl state view 
computes dt vsm vsm 
vl equals vl vl compressed 
distance exceeds respective bound wrapper sends append request 
result state includes subset state identifiers sho requests sho compressed 
identity history sho history sho history history 
implementation view specification views histories possible 
instance process historians specialized data servers record timestamped sequences scalar values typically outputs sensors measure temperature pressure flow historians provide clients applications raw sequences recorded values sequences generated interpolation filtering functions applied raw sequences 
computed sequences really views underlying raw sequences 
histories views view object view history 
active information system history view needed client application informed object synchronization changes state view underlying source objects 
view function may perform significant information abstraction transformation meet client application needs 
shows view relationships view object source objects respective histories ho ho hon relationship defined arbitrary view specification relationship ho similar relationships source objects histories defined earlier 
relationship ho ho hon defined view specification relationship requires histories state identifier domain ho history 
ho history ho history 
view relationships view object source objects histories view specified follows history ti ci record append history history record si history true simplify view implementation view forbidding client send record request history object ho ho send request corresponding object simplification forbid client send append request source history object ho send request ho restriction enables view implementation ensure sequences state identifiers appear ho histories written hon identical 
words states sho sho restriction past states determined state identifier hm past states determined identifiers appear history ho hon restriction removed definition complex 
suggests single view specification particular single view function implied relationships various objects 
fact definition consistent relationships 
flexibility definition arises lack information ordering requests sent different source objects recorded histories ho ho common sequence state identifiers imposes degree order state identifiers appear sho sho states history objects ho ho hq sequences requests respectively strictly sequences requests sent sent objects 
don know requests interleaved time requests lack time ordering information typical asynchronous computing systems bm 
don know sequence state transitions view object underwent state identifiers compression function produces result possible sequences state transitions view object value completely determined 
constraint definition complete definition 
view function signature qt qt qt qt qt sequence state identifiers ho source objects histories state sho view history ho written sho sho sho constraint definition sequences requests sho generate history states consistent histories states view relationship 


tn lp lm ways implementing history view 
approach chosen depends specific properties source object types view implemented 
shows fairly general approach assumes direct implementation view specification procedure number objects procedures may appear daunting shaded objects real materialized objects rest views objects implemented procedures shown 
derivative history wrapper ho history 
derivative history wrapper ho history 
implementation history view ho history history synch ho history starting top bottom objects ho hon ho source objects histories view object history external clients 
procedures derivative keys view implementation 
purpose derivative intercept request sent compute requests added record requests reflect state change needed maintain relationship derivative access modify states source objects computing change 
procedure performs similar function intercepting requests sent computing corresponding requests sent source objects recording request ho procedure implements view specification shown 
ch procedure guarantees source view histories sequence state identifiers 
external client sends append request ho ch procedure intercepts request forwards source histories ho hon real view history record view simpler implementations history view possible specific source object types views 
instance consider source object type tn object vo type vo view function project maps state sn state vo history vo implemented virtual view history materialized view 
object synchronization object synchronization final piece active views puzzle come easy define 
purpose object synchronization propagate state changes source object target objects type states synchronized 
object synchronization similar usual notion event services defined corba omg com chap java ascribe specific meaning concept event event complete description change state specific identified object 
state changes object undergo requests defined object type 
corba com java event services allow various types events defined 
event types parameters carry instance specific information 
requirement event identify specific object source event complete description state change 
commonly event oriented pattern source object announce subscribers method invocation state changed exactly 
subscriber query source object determine new state 
gamma ghjv call observer pattern 
object synchronization different efficient way achieving event carries information state changed subscriber need query source 
cases event encodes difference source old new states 
recipient information various purposes highlight changes display 
observer pattern subscriber explicitly compare source old state stores locally new state gets source 
object synchronization differs usual notion event services way 
event services allow client application subscribe stream events emanate object 
subscriber receives events occur subscription starts 
events carry complete description source object state change information insufficient allow recipient track source object state recipient doesn know state source object time subscription took effect 
object synchronization solves problem synchronizing recipient state current state source object sending new events 
object synchronization uses history source object source state changes 
synchronizer procedure monitors history new state identifiers applies corresponding sequences requests target objects 
maintains record synchronization status target objects 
synchronization occur automatically explicit request client application 
stated earlier source target objects type 
type specifications completely define behavior object response requests target objects guaranteed state source object 
source synchronizer history sc record active boolean synchronizer procedure targets 
object synchronization objects view specification view implementation synchronizer procedure implementation er view specification 
view object object type name suggests provides requests controlling synchronization 
views specified far er notable state changes occur view source objects request sent view object state view object 
type specification er view specification 
shows example object synchronization aperiodic updates tabular display window changes database table 
database table window treated objects type table accept insert update delete operations 
updates database clients apply database table directly applied display maintain synchronization 
database table synchronizer history display window 
example object synchronization type specification type parameters domain state identifiers source object history domain object identifiers container object synchronization target objects contained 
state domain type records sequence state identifiers source object history target object boolean value true synchronization currently active object paused state identifier indicating current state object 
initially source object history empty target objects boolean type provides forms request 
permissible state object 
append insert delete synch pause tick sq ok append request adds new state identifier history 
client application send request object type directly underlying history object 
hn synchstatus 
append hn hn synchstatus hn synchstatus ok synchstatus append insert request adds object identified object identifier set synchronization target objects 
object assumed initial state type type synchronization source object 
hn synchstatus 
insert dom synchstatus hn synchstatus hn synchstatus false hn synchstatus insert dom synchstatus ok delete request removes object set hn synchstatus 
delete dom synchstatus hn synchstatus synchstatus hn synchstatus hn synchstatus delete ok synch request marks synchronization active target object brings target object recorded state source object hn synchstatus 
synch dom synchstatus hn synchstatus true hn hn synchstatus 
dom ok hn synchstatus synch synchstatus pause request marks synchronization inactive target object leaving object current state hn synchstatus 
pause dom synchstatus hn synchstatus false hn synchstatus synchstatus dom ok hn synchstatus pause synchstatus te request advances state target object source object state identified source history marks synchronization inactive target object hn synchstatus 
dom synchstatus hn synchstatus hn hn synchstatus hn synchstatus false synchstatus hn synchstatus dom synchstatus hn ok synchstatus tick request advances state target objects synchronization active recorded state source object 
tick request named implementations clock driven client application send request periodically object activate synchronization 
hn synchstatus 
tick synchstatus true true synchstatus hn synchstatus tick ok synchronizer view specification specification er view 
parameters view specification source object type domain state identifiers source object history domain object identifiers set target objects 
shown view source objects history object synchronization status object object contains synchronization targets 
synchronization status object consists record target object record field records synchronization currently active object field records state identifier represents current state target object history record active boolean view object type defined 
view specification imposes constraints requests clients may send ory sc clients may send requests directly may send insert delete member requests targets request invoke change state contained object history invoke 
view function synchronizer signature qt qt boolean boolean synchronizer st computes states source objects sequence state identifiers source object history synchronization status target object 
computation synchronization status allows possibility target object listed synchronization status object deleted target container target object inserted target container synchronization status object 
case target object assumed initial state type synchronization paused 
hn ln synchstatus hn synchstatus dom dom synchstatus false dom dom synchstatus need constraints behavior view si true true synchronizer view implementation shows direct implementation er view synchronizer procedure 
procedure works follows response requests sent sc object 
response append request procedure sends append request ory response insert request procedure sends member request targets determine existing target 
procedure returns response 
sends insert requests targets response delete request procedure sends delete requests targets response synch request procedure sends member request targets determine existing target 
procedure returns response 
sends member request determine entry target object created 
creates insert case sends invoke invoke active set true message turn synchronization target object 
sends invoke invoke get request determine current state target object 
sends get succ requests ory retrieve requests send target object 
logic pause te similar 
tick request poses small problem implementing requires way get identifiers objects contained targets states synchronized source object 
er type extended support functionality 
done implementing tick request similar implementing synch discussion object synchronization provides degrees freedom defining sequence events target object receives 
type source object 
source object available generates desired types events implement view object type generates events view function provides desired information selection abstraction transformation 
fact view history object synchronization view source object provides significant application flexibility 
instance suppose want synchronize relational databases identical sql schemas 
synchronize databases physical implementation level file structures indexes identical 
alternatively synchronize databases logical level tables identical contents different underlying physical structures optimized support different workloads 
logical level view physical level 
consider object type set state contains objects type object synchronization source object targets learn identifiers inserted deleted set 
alternatively view create object type er synchronization source targets learn changes states referenced objects 
alternatives useful 
video camera modeled object state array pixels state completely rewritten times second 
views object constructed feature extraction object recognition view functions camera state abstracted set features set recognized objects 
objects pixel array set features set recognized objects serve synchronization source depending application needs 
second degree freedom information quality service 
frequency magnitude state changes reported target objects adjusted view source object history appropriate selections various parameters 
see section quality service adjusted accommodate low bandwidth communications media computing communication resource constraints 
relationship active databases relationship individual active views mechanisms previous discussed previous sections 
compare active views usual notion active databases approach active information systems 
traditionally databases passive repositories alert user database changes 
changes recognized issuing query repeatedly 
obviously inefficient 
active database management systems defined database research literature extend conventional relational object oriented dbmss addition event condition action eca rules dgg 
numerous active dbms research prototypes developed wc 
basic form eca rules known triggers implemented commercial relational dbmss 
features semantics eca rules vary dbmss 
representative 
eca rule parts specification event required trigger rule condition evaluated rule triggered action perform condition true 
action may database update transaction abort signal application 
event represents change state dbms occurrence significance application 
event belongs event class 
active object oriented dbmss typically associate event classes operations defined object class event occurs operation invoked particular object 
event may defined occur operation executed 
active relational dbmss typically provide fixed set event classes table corresponding insert delete update operations 
eca rules applications including enforcing semantic integrity constraints rules detect database updated check integrity constraint violated abort transaction update database restore semantic integrity 
example insert operation rule condition check existence row key action abort transaction exists 
similarly rules verify foreign key constraints implement cascade update delete actions 
maintaining replicated data materialized views multiple copies database table object distributed system rules detect updates copy update copies immediately log update subsequent propagation 
materialized views local remote source database maintained similar fashion 
propagating database updates applications application number things information update display send mail message perform database updates application specific computation 
application processing visibility control dbms 
eca rules defined active databases powerful extension conventional dbmss 
eca rules major drawbacks compared active view mechanisms 
nondeterministic effect set rules differ depending rules fires 
result state database take number diverging trajectories 
active dbmss typically provide conflict resolution mechanism rule precedence priority reduce eliminate nondeterminism 
mechanisms add complexity rule execution semantics 
contrast behavior views histories object synchronization deterministic single exception state history view may incompletely determined states histories view source objects 
nondeterminism arises lack total order events distributed system 
nondeterminism limited sense history view consistent history source objects recorded state identifiers see equation 
second eca rules composable way defined compose sets rules larger rule bases reason composition 
experience rules expert systems brittle intellectually unmanageable number rules increases 
contrast views clean composition semantics mathematical composition view functions 
applications eca rules listed accomplished active views 
semantic integrity constraint predicate boolean valued function state database element 
predicate define view object state true integrity constraint holds 
view state updated incrementally changes underlying database view state false transaction dbms abort transaction 
recognized application materialized views gm 
active views obviously support data replication application notification 
research events opposed rules composed higher level events 
example snoop 
composite event occurs primitive events occur particular pattern time database table update followed clock reaching 
snoop provides operators sequence composing events 
active views accomplish equivalent event composition simply 
example suppose set primitive events composite event defined regular expression set primitive events 
composite event occurs sequence primitive events occurs matches regular expression 
known regular expression finite state automaton recognizes sequences symbols events defined regular expression 
see example au 
finite state automaton defined set states set input symbols events state transition function initial state set final states 
easily specify corresponding object type request domain set primitive events 
type response function return true object entered final state indicating composite event occurred false complex event composition operators generate composite events parameter values carried primitive events mapped object types 
believe reasoning states easier reasoning sequences events 
object oriented analysis design reasoning terms states invariants pre post conditions kr 
furthermore reasoning terms states allows employ understood notions function composition distance functions 
number ways current extended 
course develop substantial implementations active view concepts specific application domain 
number application domains involving monitoring control large scale dynamic systems active views benefit 
examples include information dissemination service client applications subscribe information variety sources 
client applications describe information needs terms compositions basic view functions specify information quality service requirements 
dissemination service algebraic properties view functions quality service requirements identify opportunities merge multiple clients requests reducing network bandwidth requirements 
distributed process control system controllers network gather measurements regular intervals hundreds thousands sensors 
process operators maintenance engineers process engineers need different views data raw sensor data data derived diagnostic state estimation algorithms 
shared collaborative workspace 
collaborators may different information needs roles collaboration required different synchronized views shared workspace 
time general purpose distributed situation awareness infrastructure developed retargeted multiple applications 
second direction develop significant library view implementations applications developed 
believe library wellunderstood broadly applicable mathematical concepts sets bags relations functions tuples concepts form basis larch libraries gh 
implementations compatible widely object libraries standard template library sl java foundation classes 
third direction extend active views mechanisms various ways 
instance bidirectional multi directional object synchronization provided 
currently object synchronization uni directional target objects may updated synchronizer result updates source object 
difficulty lies fact objects updated independently states may diverge general way reconciling differences 
general application specific reconciliation algorithms required gray supplied parameters general purpose services compression distance functions view 
fourth direction extend current database query processing techniques active views concepts 
power dbms considerably greater query involve data computed application specific view functions 
example process plant database allow client query process equipment health parameters pumps greater average load past month answering queries requires access historical plant data execution process equipment specific computations 
examples arise application domains military intelligence answering queries tanks miles requires combination image retrieval image processing data fusion 
client posing query perceive difference possibly response time querying stored computed data 
extensions ability express queries expressions involving relational algebra operators application specific view functions transform expressions query optimization techniques achieve better performance 
au aho ullman theory parsing translation compiling 
prentice hall 
bm babaoglu marzullo consistent global states distributed systems fundamental concepts mechanisms 
distributed systems mullender ed addison wesley 
cattell object database standard odmg 
morgan kaufmann 
chap chappell understanding activex ole 
microsoft press 
chakravarthy kim 
composite events active databases semantics contexts detection 
proc 
th int conf 
large data bases santiago de chile chile sept 
pp 

dgg dittrich eds 
active database management manifesto rulebase features 
proc 
rules database systems rids athens greece sept pp 

java nutshell nd ed 
reilly associates 
gh guttag horning larch languages tools formal specification 
springer verlag 
ghjv gamma helm johnson vlissides design patterns elements reusable object oriented software 
addison wesley longman 
gm gupta mumick maintenance materialized views problems techniques applications 
data engineering bulletin june 
gr gray reuter transaction processing concepts techniques 
morgan kaufmann 
gray gray dangers replication solution 
proc 
acm sigmod international conference management data montreal june 
kr kilov ross information modeling object oriented approach 
prentice hall 
kr kuno rundensteiner incremental maintenance materialized object oriented views multiview strategies performance evaluation 
ieee transactions knowledge data engineering september october 
lw liskov wing behavioral notion subtyping 
acm toplas november 
meyer theory programming languages prentice hall 
meyer object oriented software construction nd edition prentice hall 
omg object management group common object services specification www omg org library html 
paton dimensions active behavior 
proc 
rules database systems rids edinburgh scotland sept pp 

sl stepanov lee standard template library 
technical report hpl hewlett packard laboratories april 
spivey notation manual nd ed 
published author spivey ox ac uk mike 
tansel eds 
temporal databases theory design implementation benjamin cummings 
tk tsichritzis klug ansi sparc dbms framework report study group data base management systems afips press 
wc widom ceri eds 
active database systems triggers rules advanced database processing 
morgan kaufmann 

