supporting dynamic recon guration dynamictao re ective orb manuel rom fabio kon roy campbell department computer science university illinois urbana champaign west spring eld avenue urbana il usa kon rhc cs uiuc edu choices cs uiuc edu dynamictao report 
uiucdcs eng february report extended version appearing icdcs workshop middleware 
research supported national science foundation nsf 
manuel rom supported fulbright ramon foundation 
fabio kon supported part capes brazilian research agency proc 
supporting dynamic recon guration dynamictao re ective orb communication middleware systems provide solid basis construction distributed applications 
usually lack mechanisms runtime recon guration middleware engine 
performance distributed applications greatly ected dynamic changes characteristics environment memory cpu network availability 
existing communication middleware react front changes 
times applications knowledge decide front environmental change knowledge middleware allow recon guration 
developed dynamictao corba compliant re ective orb supports runtime recon guration 
dynamictao maintains explicit representation internal structure uses carry dynamic customization safely 
report describes problems encountered design implementation architectural framework supporting dynamic recon guration communication middleware 
describes dynamictao re ective middleware system supports dynamic application recon guration 
dynamic recon guration important long running applications environmental conditions change rapidly feasible application customize system restart 
achieving best results applications underlying middleware continuously tuned adapt changes environment 
existing middleware support dynamic recon guration customization limiting application performance manageability robustness 
customization support available typically limited static customization 
consider example mobile computer moves lan environment wireless environment 
result available bandwidth error characteristics change signi cantly 
ideally middleware switch bandwidth conserving mechanisms compressing requests trading cpu bandwidth 
existing middleware support adaptation 
application limited mechanisms provided middleware 
possible choose variety mechanisms application built design time customization started start time customization 
dynamic customization exempli ed commonly available 
lack support dynamic customization prevailing middleware corba applications take entire responsibility adaptation 
usually means adaptation performed 
re ection techniques possible create middleware layer adapt environmental changes 
applications optimized protocols policies having adapt 
adaptation pushed supporting middleware ssc ssc 
contents 
describes architecture implementation dynamictao demonstrates bene ts practical examples 
provide detailed explanation re ective orb section 
section opens overview discusses system architecture section dynamic con guration mechanism section consistency preservation section security safety section 
section describes bene ts automatic recon guration provides example 
discuss related section section conclude section 
dynamictao con gurable middleware infrastructure implemented re ective orb 
implementing new orb scratch opted tao sc developed washington university saint louis starting point 
tao portable exible extensible con gurable orb complies corba standard 
main bene ts tao completely designed implemented object oriented design patterns 
easier identify orb building blocks modify extend 
tao uses strategy design pattern ghjv encapsulate di erent aspects orb internal engine 
uses strategies aspects concurrency request demultiplexing scheduling connection management 
orb obtains strategies selected factories ghjv 
tao starts running reads con guration le speci es strategy factories 
uses factories create instances strategies requires 
tao primarily targeted avionics hard real time systems hls environment parameters known priori 
tao customized di erent kinds applications static customization done startup time 
lacks proper support recon guration 
wide range applications ected dynamic changes environment memory availability network bandwidth cpu load 
performance applications dealing multimedia mobile devices distributed parallel computing greatly improved di erent strategies di erent environmental conditions 
dynamictao tao extension supports recon guration assuring orb engine kept consistent 
achieved reifying dynamictao internal structure keeping explicit representation orb internal components dynamic interactions 
rei cation allows orb change speci strategies having restart execution 
architecture rei cation dynamictao achieved collection entities known component con kc 
component con holds dependencies certain component system components 
process running dynamictao orb contains component con instance called 
responsible maintaining instances orb servants running process 
addition instance orb contains customized component con called 
contains hooks implementations dynamictao strategies attached 
hooks mounting points speci strategy implementations available orb 
safety reasons require hook implementation attached moment 
show section association changed 
illustrates rei cation mechanism process containing single instance 
servant configurator servant configurator process boundary reifying dynamictao structure 
orb 
necessary individual strategies component con store dependencies orb instances strategies 
con may store client requests depend strategies 
information possible manage strategy recon guration consistently explain section 
component implementations shipped dynamically loadable libraries linked orb process runtime 
organized categories representing di erent aspects orb internal engine associated dynamictao hooks di erent types servant components 
implementations intend support category type checking ansi runtime type information rtti 
built dynamictao components ace wrappers dc operating system services 
dynamictao runs di erent platforms ace ported 
dynamictao architectural framework depicted gure 
persistent repository stores category implementations 
ers methods manipulating browsing creating deleting categories implementations category 
network broker receives recon guration requests network forwards dynamic service con 
contains shown gure supplies common operations dynamic con guration services runtime 
delegates functions speci component con certain 
minimized changes standard ace tao distribution delegating basic con guration tasks components ace framework ace service config process startup con guration les manage dynamic linking ace service repository manage loaded implementations js 
architectural framework enables development di erent kinds persistent repositories network brokers interact dynamic service con 
possible di erent naming schemes storing category implementations di erent communication local file system ace service repository ace service config network broker persistent repository administration panel dynamic service configurator process boundary data command flow servant configurator dynamictao components 
protocols remote con guration 
dynamic con guration dynamic service con exports corba idl interface remote local objects con gure components registered 
shows idl interface 
cases di cult recon gure implementation orb internal engine orb calls 
address problem implemented light weight socket network broker handle operations corba 
interface speci es operations performed implementations categories hooks con gurable components orb servants 
rst operations interface inspect dynamic structure domain retrieve information di erent abstractions 
load implementation dynamically loads starts implementation persistent repository hook implementation attaches hook components domain 
methods allow operations loaded implementations 
explain methods follow restrictions maintain system consistent 
upload implementation allows external entity send implementation stored local persistent repository linked running process attached hook 
delete implementation delete implementations stored orb persistent repository 
consider scenario user wants change way marshalling done implementation called fast 
steps required change behavior listed 

load implementation memory load implementation marshalling fast interface typedef sequence typedef sequence list loaded implementations list categories list implementations string get usage string string get info string string get hooked implementation string string list domain components list hooks string short load implementation string string string params void hook implementation string string string void suspend string void resume string void remove string void configure string string void upload implementation string string void delete implementation string interface 
attach implementation hook tao hook implementation fast tao new implementation attached orb starts 
section discuss happens 
consider user wants get speci information implementation attached orb scheduler hook 
steps required 
retrieve name implementation get hooked implementation tao scheduler 
previously returned name obtain speci information implementation get info corba object residing dynamictao implements idl interface described 
servants clients obtain method resolve initial corba standard orb interface 
shows sample code implementing rst scenario mentioned 
orb consistency goal minimal orb core running orb strategies servants dynamically updated 
supporting orb recon guration introduces important corba object var var var corba orb var orb orb corba orb init argc argv orb resolve initial var narrow var load implementation marshalling fast var hook implementation fast tao loading new issues exist dealing static startup con guration 
changing implementation runtime implies checking possible dependencies loaded implementations category dependencies clients old implementations nally con icts implementations category running orbs 
initial state new strategy may depend nal state old strategy going replaced 
recon guration operations executed immediately execution leave state orb inconsistent 
rest section provides speci details consistency issues related dynamictao switching strategy deleting strategy con operations 
aspects controlled orb remains stable operation completes 
changing strategy implies steps 
check new strategy implementation compatible remaining implementations 
implies checking strategies running orb cases strategies category orbs 
possible changing implementation certain orb requires changing implementations remote orbs implementations part distributed protocol 
second implementation may need transfer state new going replace 
consider changes strategy implementation ect client requests processed 
greatly depends category implementation 
case marshalling unmarshalling strategies example changes immediately ect subsequent request 
case concurrency strategies changing implementation ects new clients 
marshalling unmarshalling clear example implementation compatibility orbs distributed system 
marshalling strategy client orb changed unmarshalling strategy server orb changed accordingly 
example issues discussed section consider concurrency strategies supported dynamictao single threaded reactive sch thread connection thread pool 
user switches reactive thread connection strategies concurrency strategy special needs done 
dynamictao may simply load new strategy update proper hook unload old strategy continue 
old client requests complete concurrency policy dictated old strategy 
new requests utilize new policy 
switches thread pool strategy special care taken 
thread pool strategy developed maintains pool threads created strategy initialized 
threads shared incoming connection requests achieve level concurrency having runtime overhead creating new threads 
problem arises switches strategy strategy code strategy replaced immediately unloaded 
happens threads reused return thread pool strategy code time client connection completed 
problem solved keeping information threads executing client requests destroying connections complete 
thread destroyed thread pool strategy unloaded 
problem occurs replaces thread pool strategy new 
may incoming connection requests enqueued strategy waiting thread take 
solution memento pattern ghjv encapsulate old strategy state object passed new strategy 
object encapsulate queue waiting requests 
system simply passes object new strategy takes care enqueued requests 
cases possible replace remove strategy existing clients 
solution adopted keep di erent implementations strategy concurrently loaded orb 
old clients old strategies new clients new 
keep counter strategy garbage collection get rid old strategies anymore 
order support architecture implements version control 
time component implementation loaded dynamictao assigns version number 
implementation referenced concatenating name component category version number generated dynamictao mechanism guarantees unique 
version number verify newest implementation speci category 
entities older implementations confusion 
security safety allowing remote con guration re ective orbs address issues security safety carefully 
security refers mechanisms applied identify principals want modify orb safety implies new code attached orb capable crashing 
controlling access critical factor determining security applications infrastructure 
modifying con guration dynamictao servants malicious intruder easily compromise correctness application get access classi ed information protected resources 
corba interface utilize corba security service ensure access con guration operations controlled 
operations list domain components get info may available broad group trusted principals 
operations load implementation hook implementation restricted limited group principals administration privileges application system 
corba security service control access sensitive operations requiring authentication 
encrypt parameters sent method invocations socket network broker security controlled ssl authenticate principals encrypt message contents 
possible authenticate principal con guration interface guarantees implementation new strategy new servant run safely crash entire orb 
trusted principal hook faulty implementation crash orb 
order support safety extended dynamictao enable execution java code inside implemented jvm 
implementation provided limited access orb system services 
implementation crashes ect orb components 
jvm example safe execution environment mobile agents care orb recon guration implementing exible security policies active capabilities qc 
added module containing sun java virtual machine components attached 
servant orb component wishing run java code obtain interpreter contacting 
calls method interpret providing java byte code 
automatic recon guration re ective properties dynamictao possible customize implementation corba object model better support di erent kinds applications di erent environments 
automatic recon guration comprises set mechanisms monitor behavior orb trigger modi cations needed 
bene ts automatic recon guration classi ed major categories optimization customization error recovery 
optimization aims providing best performance conditions running components 
achieved analyzing environmental conditions applying heuristics decide recon guration 
example consider le server high speed network 
average number requests low best way handling requests single thread 
need create new thread new request arrives overhead thread management 
number requests increases probability requests blocking gets larger increasing service response time 
certain point cient switch thread request strategy 
overhead creating new thread impact performance requests serviced concurrently improving latency throughput 
dynamictao infrastructure le server monitoring component measuring average time request blocked 
time longer required creating new thread monitoring component trigger recon guration concurrency strategy switching single threaded thread request 
number requests decreases strategy switched back single threaded 
customization concerned critical changes environment software hardware 
optimization allows component run faster customization lets component adaptation new environment allows component manageability 
example user inserts pcmcia card laptop extra hardware capabilities added mobile computer 
note dynamictao change security policies bringing additional exibility security service 
aware changes available hardware resources applications utilize di erent algorithms policies protocols suitable new environment 
error recovery comprises detecting faulty behavior replacing faulty components improving component robustness 
dynamictao maintains explicit representation internal structure easier replace component malfunction detected 
mobile computer connected ethernet lan may automatically detect wired connection broken 
system switch radio connection 
case pro table dynamically load new communication strategy optimized di erent characteristics wireless connections 
related limitations existing corba implementations led corba extensions dealing speci aspects real time hls group communication ms fault tolerance maf 
goal provide generic infrastructure di erent kinds customization performed 
research groups addressed problem middleware customization different approaches 
aspectix open exible architecture adds exibility corba 
aspectix extends orb interface ering means dynamic recon guration 
fragmented object model client interacts fragment global object fragment implementation interface fragment interface 
global object con gured pro les turn specify aspects supported fragment implementations 
aspect speci semantics associated 
aspects compared dynamictao category implementations di erence dynamictao implementations added aspectix aspects 
fragment implementation support speci ed aspect fragment containing aspects replaced 
distributed adaptive run time dart rl provides framework applications modify internal behavior behavior services 
dart ers set services facilitate development distributed applications 
distinguishes internal application adaptation adaptive methods adaptation application environment re ective methods 
case adaptive methods applications er implementations methods 
special entity called selector chooses ective invocation 
turn re ective methods allow adaptation runtime environment 
calling re ective method call redirected set meta level objects manage run time services 
dart manager compared dynamictao stores adaptation information applications policies 
recon guration triggered controlled events maintain consistency 
entities known policies knowledge required recon gure applications 
policies dart manager access applications meta objects associated 
comera wl com extensible remote architecture provides framework microsoft com allows users modify aspects communication middleware run time 
relies custom interface exported com architecture design allows user speci ed components 
comera system developers customize middleware application requirements 
ongoing research group currently developing distributed operating system ers integrated architecture adaptation change fundamental premise adaptability fundamental goal 
project investigates creation generic framework development adaptive applications re ective orb described 
part ongoing dynamictao extending set orb aspects subject re ection 
plan implement category type checking support strong exible security produce minimal orbs run pdas embedded systems 
communication middleware proved helpful tool implementing distributed applications 
main drawback lack mechanism modify implementation dynamically 
recon guration allow applications run di erent environments highly optimized manner time 
developed re ective orb architecture possible safely change behavior middleware runtime 
allows tighter integration re ective orb applications running top 
part ongoing extending aspects dynamictao orb engine subject re ection 
infrastructure development adaptive applications 
argument src states applications know type mechanisms need achieve optimal performance 
dynamictao ers functionality needed applications deploy time optimal policies mechanisms 
acknowledgment 
authors ashish comments 
dc schmidt douglas adaptive communication environment 
proceedings sun user group conference san jose california december 
ghjv gamma helm johnson vlissides 
design patterns elements object oriented software 
addison wesley 
hauck becker geier meier 
aspectix aspect oriented corba compliant orb architecture 
proceedings ifip international conference distributed systems platforms open distributed processing middleware september 
hls tim harrison david levine douglas schmidt 
design performance real time corba object event service 
proceedings oopsla atlanta georgia october 
hls timothy harrison david levine douglas schmidt 
design performance real time corba object event service 
proceedings oopsla 
acm october 
js jain douglas schmidt 
dynamically con guring communication services service con guration pattern 
report magazine june 
kc fabio kon roy campbell 
role inter component dependence supporting automatic recon guration 
technical report uiucdcs department computer science university illinois urbana champaign december 
fabio kon ashish roy campbell carvalho robert moore francisco ballesteros 
re ective component operating system rapidly changing environments 
proceedings ecoop workshop re ective object oriented programming systems brussels belgium july 
maf ma eis 
adding group communication fault tolerance corba 
proceedings usenix conference object oriented technologies 
usenix association june 
ms ma eis douglas schmidt 
constructing reliable distributed communication systems corba 
ieee communications magazine february 
qc tin qian roy campbell 
dynamic agent security architecture mobile computers 
proceedings international conference parallel distributed computing networks australia december 
rl 
lea 
dart distributed adaptive run time 
proceedings ifip international conference distributed systems platforms open distributed processing middleware september 
sc douglas schmidt chris 
applying patterns develop extensible orb middleware 
ieee communications magazine 
appear available www cs wustl edu schmidt ace papers html 
sch douglas schmidt 
reactor object behavioral pattern concurrent event demultiplexing event handler dispatching 
proceedings st pattern languages programs conference august 
src saltzer reed clark 
arguments system design 
acm transactions computer systems november 
ssc ashish sane roy campbell 
re ective orbs supporting robust time critical distribution 
ecoop workshop re ective real time object oriented systems june 
ssc ashish sane roy campbell 
middleware 
proceedings ieee international conference distributed computing systems icdcs may 
wl wang lee 
comera com extensible remoting architecture 
proceedings th conference object oriented technologies systems coots 
usenix april 
