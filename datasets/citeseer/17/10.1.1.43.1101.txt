biting advancing front meets sphere packing xiang yang li shang hua teng 
key step finite element method generate high quality mesh small possible input domain 
meshing methods heuristics developed implemented 
methods advancing front delaunay triangulations quadtrees octrees popular ones 
advancing front uses simple data structures efficient 
unfortunately general provide guarantee size quality mesh produces 
hand circle packing delaunay methods generate shaped mesh size constant factor optimal 
new meshing algorithm biting method combines strengths advancing front circle packing 
prove generates high quality mesh size mesh constant factor optimal 
keywords 
unstructured mesh generation advancing front paving circle packing biting 
essential step numerical simulation physical engineering problems find proper discretization continuous domain 
problem mesh generation 
problems complex geometry boundaries solutions change rapidly need unstructured mesh varying local topology spacing order reduce problem size 
unstructured meshing algorithm uses elements properly chosen size shape adapt complex geometry solution accuracy 
doing generates meshes numerically sound small possible 
meshing methods heuristics developed implemented applied various applications steady state transient compressible inviscid flow simulations 
years meshing methods advancing front delaunay triangulations quadtrees octrees popular due effectiveness practical applications 
methods come equal strengths 
example advancing front uses simple data structures efficient relatively easy implement 
offers high quality point placement strategy integrity boundary 
unfortunately provide general guarantee size quality mesh produces 
hand methods quadtree octree refinement delaunay methods generate shaped mesh size constant factor optimal 
objective develop new meshing algorithm combines strengths advancing front provably meshing methods 
particular type delaunay method conjunction advancing front circle packing method 
constructs spaced point set computing circle packing domain uses delaunay triangulation point set final mesh 
methods developed generate spaced point set 
applies particle simulation find stable department computer science university illinois urbana champaign urbana il 
supported part nsf career award ccr alfred sloan research fellowship department energy university california subcontract number doe asci 
emails authors xli cs uiuc edu cs uiuc edu uiuc edu 
configuration set energetic circles 
second uses quadtree octree refinement obtain input domain applies properly defined maximal independent set create circle packing 
theory practice second approach faster 
show advancing front method efficiently construct quality circle packing 
high level new advancing front packing algorithm finds circle packing boundary domain grows packing interior domain 
time new circle added interior larger protection circle removed away domain circle overlap 
doing builds circle packing adding circles time layer time spirit standard advancing method new method uses advancing front construct circle packing mesh elements 
show advancing front method generate spaced point set delaunay triangulation shaped 
refer new method biting method show practical standard advancing front meshing methods 
organized follows 
section discusses control space specifies element sizes point densities mesh 
section reviews standard advancing front methods 
section covers circle packing method introduces definitions related theorems concerning connection quality delaunay triangulation quality circle packing 
section presents biting method proofs quality circle packing generates 
section gives details boundary protection complete proof main theorem 
control space domain omega differential equation defines desired local spacing domain specify example expected element size neighborhood point densities near point 
section discuss determine local spacing geometry omega numerical condition geometric features geometry boundary omega contributes local spacing shaped mesh 
dimensions assume omega planar straight line graph pslg collection line segments points plane closed intersection 
suppose omega described pslg ruppert introduced concept called local feature size 
definition pslg local feature size point lfs simply lfs radius smallest disk centered intersects non incident vertices segments note adding new steiner vertices change value lfs function determined input 
ruppert observed lfs changes slowly domain 
formally function lipschitz ff points domain jf gamma gamma yjj 
lipschitz lfs bounded 
addition lfs maximum sense 
lemma lipschitz function domain omega point omega lfs omega omega lfs omega 
common shape criterion mesh elements condition angles element small aspect ratio element bounded 
measure quality triangular element radius edge ratio defined 
quality measure define shaped meshes 
ruppert gave modified definition geodesic distance nearest non incident portions input handle arms situation 
geodesic distance measured shortest path stays domain triangulated 
definition ff shaped mesh mesh ff shaped constant ff minimum radius edge ratio elements bounded ff 
ways describe spacing function shaped mesh domain omega gamma ffl edge length function el point omega gamma el equal length longest edges mesh simplex elements contain note points lower dimensional faces simplex contained element 
ffl nearest neighbor function point omega gamma cases 
mesh point equal distance nearest mesh point 
mesh point equal distance second closest mesh point lemma ff shaped exists constants depending ff point omega el el numerical spacing numerical condition usually obtained priori error analysis posteriori error analysis initial numerical simulation 
defines numerical spacing functions denoted nsf point domain omega gamma value nsf interpolation viewpoint determined eigenvalues hessian matrix 
locally point approximated quadratic function dx dx dx hessian matrix matrix second partial derivatives 
spacing mesh points required accuracy discretization near depend reciprocal square root largest eigenvalues example adaptive numerical simulation estimate eigenvalue hessian matrix certain set points omega solution previous iteration expand spacing requirement points entire domain 
new spacing old spacing function deduced previous mesh get refinement coarsening factor mesh points 
simultaneous refinement coarsening method li generate mesh satisfies new control space requirement 
control spacing function local feature size lfs numerical condition nsf defines global control spacing function 
notice lipschitz nsf may bounded constant 
technique miller teng define new numerical spacing function nsf point nsf min nsf miny omega nsf jjx gamma yjj lipschitz nsf 
addition nsf best possible sense lipschitz function domain omega gamma nsf point wise omega gamma nsf point wise 
global control spacing function gns defined gns min lfs nsf gns stands geometric numerical spacing 
function gns captures numerical geometric requirements shaped adaptive mesh 
lemma ff ff lipschitz respectively omega ff ff lipschitz min max max ff ff lipschitz 
gns lipschitz 
mesh generation need compute spacing functions exactly 
common approach approximate gns store discrete values vertices background mesh quadtree octree decomposition domain 
need evaluate function arbitrary point domain simply interpolate discrete values 
advancing front methods advancing front methods construct mesh domain moving front boundary interior 
generates initial front typically constructing surface mesh boundary domain 
creates new elements time layer time updates front created faces element time model chooses face current front introduces new mesh element base face 
vertex front insert new steiner point interior additional vertex new element 
base face potentially faces front additional vertex existing removed front faces new element added front 
process repeated front empty fronts merged domain fully meshed 
note initial front single component 
example domain holes initial front built boundary hole 
selection base face placement new mesh vertex key steps advancing front method 
steps ensure new mesh element valid shaped keep front condition allow creation graceful elements 
faces clefts small faces priority picked base faces satisfy requirements 
base face chosen need decide place new vertex 
recall shaped triangular mesh points spaced implies base face place steiner point particular region near base face new element 
call region feasible region 
points feasible region new element slightly larger constant factor points 
control spacing function 
helps decide go larger new element smaller 
paving popular advancing front methods 
uses number operations tightly moving front ensure mesh validity quality 
operations include row choice closure check row generation smooth seam row adjustment intersection cleanup 
size elements mesh determined spacing nodes paving boundary propagates 
spacing paving boundary initially defined fixed node spacing corresponding exterior boundary 
advancing front methods combined delaunay quadtree octree refinements 
instance refinement techniques generate pretty domain decomposition input domain advancing front applied get mesh subdomain 
quadtree octree refinement generate set points creation new elements 
section show advancing front methods help delaunay mesh generation 
particular method construct high quality circle packing advancing front methods 
prove shaped mesh generated delaunay triangulation centers packing circles 
circle packing methods high level circle packing method fills input domain set circles centers provide vertex set quality delaunay mesh 
generate meshes various quality conditions 
example bern mitchell ruppert circle packing triangulate vertex polygonal region potentially holes element angle larger 
show triangles improving previous result uses triangles 
algorithm packs set circles domain gaps surrounded tangent circles 
defines mesh points union centers circles tangency points point gap locally points 
notice nonobtuse triangulation need consider control spacing function 
mesh may elements bad aspect ratio 
similar circle packing method developed bern eppstein quadrilateral meshes 
shimada gossard developed circle packing method called bubble mesh generate triangular meshes dimensions 
packing scheme simulation particles interact repulsive attractive forces 
define proximity force circles find stable configuration moving deleting circles 
method provide theoretical bound time algorithm quality mesh generate 
miller designed circle packing meshing method combines wellknown methods quadtree delaunay refinements 
apply balanced quadtree refinement approximate spacing function 
second set points domain define set overlapping circles 
compute maximal set non overlapping circles set obtain circle packing 
compute delaunay triangulation centers circles 
suppose desired edge length nearest neighbor function shaped mesh domain omega gamma introduce definitions capture quality circle packing 
denote circle centered point radius definition fi packing fi positive real constant 
set circles fi packing centers omega respect spacing function ffl point ffl interiors circles overlap ffl point omega circle overlaps fif 
structure theorem miller teng states equivalence relationship fi circle packing shaped meshes 
theorem circle packing shaped meshes 
positive constant fi exists constant ff depending fi spacing function lipschitz constant domain omega fi packing respect delaunay triangulation centers ff shaped mesh addition point omega theta constant theta depends fi 

positive constant ff exists constant fi depending ff ff shaped mesh set circles fb mesh point mg fi packing respect 
biting advancing front meets circle packing advancing front known practical mesh generation method 
unfortunately general provide guarantee size quality mesh produces 
hand circle packing methods generate shaped mesh size constant factor optimal 
cost packing circles particle simulation mis oversampled circles large 
section new scheme called biting method combines strengths advancing front circle packing 
uses advancing front generate quality circle packing mesh 
delaunay triangulation centers circles define final mesh 
equivalence shaped meshes circle packings show biting method construct shaped delaunay mesh size optimal constant factor 
biting scheme bite snapshot biting scheme initial pslg domain bites vertices polygon bite non original vertex biting layer boundary biting interior domain biting layer interior domain 
basic idea biting method compute control spacing function mesh 
try find point set constructing circle packing respect spacing function 
circle packing constructed advancing front method 
input domain boundary set initial advancing front 
biting method moves front boundary domain interior adds new mesh points process 
mesh points chosen define circle packing centers 
step place new point current front place interior remain domain 
time add point remove circle biting circle remaining interior domain 
boundary union biting circles remaining interior domain defines new front 
process called biting 
biting circle point constant decided 
subscribe constant denotes biting 
note biting circles different packing circles due technical reasons discussed section 
making sure biting process results circle packing simple idea step choose center advancing front remove biting circle 
removal biting circle ensures packing circles intersect packing circle center 
delaunay triangulation generate mesh resulting circle packing 
input domain small angle cut small angle approximate domain 
assume input domain acute input angle 
formal description biting method algorithm biting 
compute control spacing function omega combining local feature size numerical condition 
boundary domain initial front see 
vertex protection bite input vertices removing biting circles interior domain see modify front set segments arcs 
segments represented endpoints arcs represented center biting circle 

edge protection bite circles centered input boundary choose vertex front remove biting circle 
possible choose intersection circles initial boundary see 
assume circle biting circle intersects circle point boundary closest intersection points boundary boundary respectively 
note middle point segment check intersects 
remove interior remove 
see 
modify front introducing arc new biting circles removing intersection front 
repeat initial input boundaries 
interior biting choose vertex front remove biting circle see modify front introducing arc new biting circle removing intersection front 
repeat advancing front empty input domain covered biting circles 

construct delaunay triangulation centers biting circles final mesh 
boundary middle point biting order circles edge protection center biting circle intersection previous biting circle boundary point example intersection circle boundary middle point segment formed intersection circles point middle point segment intersects intersects 
usually advancing front represented circular list placed points 
method represented set arcs boundary segments 
choose steiner point front 
words front subset feasible region selection new mesh vertices making easier choose point 
intersection arcs arc boundary segment provides candidate new steiner point biting circle reduce interior 
isn way take bite apple 
center bite sharpest nose 
bite bite eat away boundary food move interior 
noting packing circle appeared biting method 
prove centers biting circles define circle packing carefully choose size packing circle 
quality guarantee biting scheme section show biting method generates shaped mesh 
size mesh constant factor optimal 
statement prove points placed biting method spaced centers fi packing respect lipschitz spacing function 
size optimality follows fact spacing function maximal 
point biting scheme generates define packing circle 
biting circles defined scheme overlap packing circle point chosen smaller biting circle 
focus particular point specification biting scheme biting circle positive constant 
choose positive constant define packing circle 
subscribe constant denotes packing 
see 
principle biting scheme largest constant satisfies constraint control spacing function resulting mesh optimal size 
similarly largest constant ensure packing circles overlap gaps packing circles minimized 
lemma ruppert suggests smaller 
lemma input vertex input pslg omega nn distance nearest input vertex lfs 
proof circle centered radius nn contains non incident input features pslg nn lfs 
defined biting scheme lfs nn 
lemma ensures packing circles input vertices omega intersect 
fact ff lipschitz spacing function implies local similarity close neighborhood point lemma ff lipschitz spacing function domain omega points omega jjx gamma yjj gamma ffc ffc lemma specifies relation biting constant packing constant lemma spacing function ff lipschitz jjx fl min interior circles flf flf intersect 
proof loss generality assume min 
ff lipschitz gamma yjj 
flf flf flf gamma yjj gamma fffl jjx gamma yjj gamma yjj 
lemma follows flf flf jjx gamma yjj 
biting scheme works control spacing function lipschitz condition 
assume spacing function biting scheme ff lipschitz domain omega gamma set biting circles generated biting scheme set corresponding packing circles defined constant lemma implies cp gamma ffc packing circles overlap 
lemma packing constant ffc overlap packing circles defined proof packing circles defined biting vertices 
biting scheme know implies jjx gamma yjj min 
ffc cp gamma ffc ffc 
lemma follows lemma 
biting circle protecting circle prevent point potentially conflicts chosen 
theorem shows biting method generates circle packing 
theorem circle packing fi ffc packing respect spacing function ffc 
proof biting scheme guarantees point domain omega covered biting circle biting circle covers jjy gamma xjj 
ff lipschitz gamma ffc 
noting ffc fic ffc gamma ffc ffc ffc gamma ffc ffc ffc gamma ffc gamma ffc ffc ffc jjx gamma yjj point circle overlaps fic large gap fi packing definition fi packing respect spacing function 
control spacing biting scheme lipschitz function 
lipschitz function 
lipschitz function 
follows theorems delaunay triangulation centers shaped mesh 
theorem biting method generates shaped mesh 
spacing conformation size guarantee section show nearest neighbor value point domain related control spacing function constant factor 
relation enables show biting scheme generates mesh size optimal constant factor 
assume required spacing function ff lipschitz 
gamma ffc subscribe denotes extension biting circle 
lemma know biting circles intersect jjx gamma yjj ffc 
words mesh vertex generated obtain lemma nearest neighbor mesh vertices 
lemma vertex mesh generated biting method nn satisfies gamma ffc nn gamma ffc biting circle packing circle biting circle biting circle biting circles packing circles biting circle packing circle centered point point covered biting circles example biting circle exist biting circle centered contained gamma ffc 
proof mesh vertex lies interior biting circle 
nn 
mesh vertex inside vertex jjy gamma xjj 
ff lipschitz gamma ffc 
jjy gamma xjj gamma ffc 
lemma point exterior circle biting circle overlap nn boundary covered biting circles 
see 
lemma follows property point domain covered biting circle 
show nearest neighbor function non mesh point domain linearly related control spacing function 
lemma assume point omega mesh vertex 
nn defined mesh generated biting method satisfies ffc nn gamma ffc gamma ffc proof biting circle say covers point mesh vertex 
see 
jjz gamma yjj jjz gamma xjj jjx gamma yjj 
nn max jjx gamma yjj jjz gamma yjj 
inequality gamma gamma yjj gamma ffc implies nn gamma ffc cases biting circle contains biting circles contain case assume 
jjy gamma holds mesh vertex 
ff lipschitz gamma ff jjy gamma 
mesh vertex jjy gamma ffc definition nearest neighbor function nn jjy gamma implies nn ffc second case assume biting circles contain see 
assume 
jjx gamma 
ff lipschitz ffc 
triangle inequality max jjy gamma xjj jjy gamma jjx gamma ffc 
second smallest distance set mesh vertices biting circles contain ffc 
addition analysis case smallest distance set mesh vertices biting circles contain ffc nn ffc consequently ffc nn gamma ffc lemma follows gamma ffc 
lemma miller prove size optimality generated mesh 
lemma size shaped mesh ff shaped mesh elements theta omega da nn lemma size mesh respect space control exists constant shaped mesh elements domain omega satisfies control spacing function omega da nn function deduced mesh generated biting method constant factor implies theorem 
theorem size mesh generated biting method constant factor optimal possible 
minimal angle mesh boundary protection theorems show biting scheme generates shaped mesh see theorem 
constant bound minimal angle derived may small 
section provide better analysis lower bound minimal angle 
analysis divide triangle elements subsets subset contains elements visible second subset contains elements completely visible elements close boundary 
see 
boundary boundary boundary triangles mesh triangle pqr subset 
triangle xyz second subset 
triangle pqr second subset circumcenter domain 
assume spacing function biting scheme ff lipschitz 
ffc control quality size mesh generated biting scheme 
proof assume practical scheme set 
minimal angle elements subset lemma bounds minimal angle triangles subset 
lemma pqr triangle element subset 
length shortest edge pqr radius circumcircle pqr gamma proof circumcenter pqr assume 
see 
jjc gamma xjj 
mesh delaunay triangulation interior circumcircle pqr jjx gamma ff lipschitz gamma gamma xjj 
jjc gamma xjj gamma ffc gamma ffc loss generality assume jjp gamma implying 
ff lipschitz ffr ffr 
gamma ffc gamma tr lemma follows 
consequently lemma 
lemma minimal angle triangle subset satisfies sin gamma boundary protection show mesh vertices generated biting scheme close boundary respect control spacing 
note scheme removes biting circles centered input vertices domain 
progressively removes biting circles centered points boundary domain 
cases selecting center new biting circle protecting boundary 
type choices intersection point previously selected biting circle input boundary 
case boundary biting circle 
label point 
call progressive circle 
see 
second type choices vertex middle point segment intersection boundary respectively 
label point 
call middle circle 
see 
consecutive mesh vertices input boundary generated biting scheme 
description know labeled 
biting order progressive circle previous circle middle circle boundary biting circles boundary center new biting circle labeled 
chosen prior 
center new biting circle labeled middle point segment formed intersection boundary 
boundary biting circles circles centered input boundary generated biting scheme 
contains progressive biting circles middle circles 
lemma guarantees progressive biting circles generate vertices close input boundary 
lemma assume labeled 
intersection points 
distance hr point boundary satisfies hr gamma gamma proof circle jjq gamma jj jjq gamma 
see 
angle formed segments gamma ffc sin jjq gamma gamma ffc gamma sin gamma gamma 
similarly ffc sin gamma sin min gamma gamma gamma gamma gamma lemma follows sin 
lemma guarantees middle circles generate vertices close input boundary 
lemma assume mesh vertex labeled 
intersection points 
distance hr point boundary satisfies hr gamma gamma gamma proof assumption lemma labeled middle point segment intersection points circle boundary respectively 
see 
biting scheme know intersects intersects 
select mesh vertex 
see 
jjq gamma 
jjp gamma jjq gamma 
analysis assume fixed 
ff lipschitz gamma gamma 
gamma ffc jjq gamma gamma ffc gamma similarly intersects contains segment jjq gamma 
easy show hr get smallest distance value setting smallest possible value setting largest possible value 
minimize maximize gamma 

area triangle qr note hr gamma gamma gamma gamma gamma gamma gamma gamma ff lipschitz lemma gamma 
words value satisfies gamma 
hr gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gammat gammat gamma gammat minimized gammat hr gamma gamma gamma similarly ratio hr achieves minimum gamma 
hr gamma gamma gamma gamma minimal angle elements second subset consider elements second subset 
xyz mesh element second subset 
circumcircle xyz center radius assume closest mesh vertices boundary separates xyz note may vertices fx zg 
intersection points 
hr distance point boundary segment jjp gamma jj 
half length chord boundary cut circumcircle 

see 
exists input boundary separates xyz need consider boundary closest xyz consecutive boundary mesh vertices generated biting scheme 
mesh vertex interior circumcircle triangle xyz contradiction delaunay property 
second 
assume boundary 
separates center element xyz angle formed xp obtuse 
jjp gamma xjj jjp gamma jj 
see 
biting circle 
contradiction assumption removed 
loss generality need analyze case labeled neighbor vertex boundary 
circumcircle contain contain points biting circle centered contradiction biting property 
lemma radius lemma proof contains gamma gamma hr gamma hr implies 
lemma gives upper bound lemma proof 
lemma 
notice increases monotonically decreases monotonically formula hr gamma gamma gamma gamma gammat gammat gamma gamma 

hr 
hr hr max give bound radius edge ratio triangles second subset 
lemma length shortest edge xyz 
gamma gamma gamma proof assume labeled 
assume shortest edge xyz edge xy 
notice jjx gamma yjj jjp gamma yjj boundary circle 
notice angle formed segment xp obtuse 
jjp gamma xjj jjp gamma jj 
ff lipschitz gamma gamma xjj gamma gamma jj 
gamma gamma jj 
combining cases gamma lemma gamma gamma 
note circle middle biting circle 
intersection point boundary jjq gamma jj 
gamma gamma 
gamma gamma gamma lemmas theorem bound minimal angle mesh generated biting scheme 
theorem minimal angle mesh generated biting scheme satisfies sin gamma proof lemma sin min gamma gamma gammat theorem follows fact gamma gamma gammat control spacing lipschitz minimal angle mesh positive ff lipschitz control spacing goals generating mesh 
goal bound value nn upper point domain 
goal bound minimal angle mesh elements 
unfortunately goals odds 
tradeoff 
example set mesh generated biting scheme property point omega gamma ff nn ff minimal angle asin set point omega gamma ff nn ff minimal angle asin new mesh generation scheme combines merits advancing front circle packing methods 
scheme biting method applies variations advancing front method generate quality circle packing constructs final mesh delaunay triangulation 
simple practical advancing front methods 
different previous approaches particle simulation maximal independent set mis oversampled points 
biting scheme theoretically efficient paving method explicitly maintains set candidates new mesh points handle case fronts meet 
circle packings new scheme resolves difficulty occurs standard advancing front method 
standard advancing front methods provide quality guarantee especially region fronts meet 
biting method provably size generated mesh constant factor optimal 
note biting method extended generate mesh replacing biting circle biting sphere 
main difficulty version biting protect input boundary face bad near boundary face 
possible approach classic advancing front method generate layer elements incident boundary face biting method generate point set remaining interior domain 
approaches solve problem reader refered 
aziz 
angle condition finite element method 
siam numer 
anal 
bern eppstein 
polynomial size non obtuse triangulation polygons 
int 
comp 
geom 
appl 
bern eppstein 
quadrilateral meshing circle packing 
th international meshing roundtable pages 
bern eppstein gilbert 
provably mesh generation 
st annual symposium foundations computer science ieee pages 
mitchell ruppert 
linear size nonobtuse triangulation polygons 
proc 
th symp 
computational geometry pages new york 

paving new approach automated quadrilateral mesh generation 
int 
jour 
numerical methods eng 
cheng dey edelsbrunner 
teng 
silver 
proc 
th acm symposium computational geometry 
appear 
chew 
guaranteed quality delaunay meshing short version 
th acm sym 
comp 
geometry pages 
paul chew 
parallel constrained delaunay meshing 
editors trends unstructured mesh generation pages 
frey 
surface mesh evaluation 
th international meshing roundtable pages 
li teng 
dynamic load balancing parallel adaptive mesh refinement 
th international symposium solving irregularly structured problems parallel pages berkeley 
li teng 
simultaneous refinement coarsening adaptive meshing moving boundaries 
th international meshing roundtable pages mich 
li teng 
biting spheres 
submitted th international meshing roundtable 

progress grid generation advancing front technique 
engineering computers 
parikh 
dimensional grid generation advancing front method 
int 
numer 
meth 
fluids 
miller 
teng 
optimal aspect ratio coarsening unstructured meshes 
th annual acm siam symposium discrete algorithms pages 
acm siam 
miller teng 
data generation geometric algorithms non uniform distributions 
international journal computational geometry applications 
accepted appear 
miller 
teng 
optimal coarsening unstructured meshes 
journal algorithms 
invited accepted special issue soda 
miller 
teng 
delaunay numerical method dimensions generation formulation partition 
proc 
th annu 
acm sympos 
theory comput pages 
miller 
teng 
radius edge condition control volume method 
siam numerical analysis 
accepted appear 
miller 
teng wang 
control volume meshes sphere packing generation refinement coarsening 
th international meshing roundtable pages 
sandia national laboratories 
mitchell vavasis 
quality mesh generation dimensions 
acm symposium computational geometry pages 
frey george 
delaunay tetrahedralization advancing front approach 
th international meshing roundtable 
ruppert 
new simple algorithm quality dimensional mesh generation 
third annual acm siam symposium discrete algorithms pages 
shewchuk 
tetrahedral mesh generation delaunay refinement 
th annual acm symposium computational geometry pages 
shimada 
physically mesh generation automated triangulation surfaces volumes bubble packing 
phd thesis mit cambridge 
shimada gossard 
bubble mesh automated triangular meshing non manifold geometry sphere packing 
third symp 
solid modeling appl pages 
shimada yamada itoh 
anisotropic triangular meshing parametric surfaces close packing ellipsoidal bubbles 
th international meshing roundtable pages 
strang fix 
analysis finite element method 
prentice hall 

spaced points numerical methods 
phd thesis carnegie mellon university 
teng wong 
unstructured mesh generation theory practice perspectives 
international journal computational geometry applications 
shephard 
modified quadtree approach finite element mesh generation 
ieee computer graphics applications volume pages 

