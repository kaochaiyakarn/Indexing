pi calculus dialogue games pcf hyland 
ong university cambridge oxford university computing laboratory mill lane cambridge wolfson building parks road oxford cb sb england ox qd england discs national university singapore game semantics unusual denotational semantics captures intensional algorithmic dynamical aspects computation 
ideal semantical framework seek unify analyses qualitative correctness quantitative efficiency properties programming languages 
reports arising construction order fully model scott functional programming language pcf kind person player opponent dialogue game questions answers ho 
model types interpreted games terms innocent strategies 
fully game model may said canonical semantical analysis sequential functional languages 
unfortunately relatively simple pcf terms precise description denotations strategies ho rapidly unwieldy opaque 
needed remedy situation expressive formal language lends succinct economical representation innocent strategies 
give just representation terms appropriately sorted polyadic calculus reading input actions opponent moves output actions player moves 
correspondence captures essential aspect dialogue game paradigm precisely representation may taken basis formal definition 
representation strategies gives encoding pcf calculus indirectly fully denotation pcf terms innocent strategies define recursion new encoding pcf calculus directly 
encodings pcf weakly bisimilar regarded compilation amounts efficient version compile time optimization 
appear proceedings th annual acm conference functional programming languages computer architecture la jolla california june 
martin pmms cam ac uk 
leave national university singapore 
lo comlab ox ac uk 
pcf observational preorder full abstraction functional language pcf sco plo essentially simply typed calculus augmented basic arithmetic conditionals fixed point operators type 
pcf types ranged defined grammar bnf pcf type unique representation form delta delta delta ff delta delta delta program ground type ff convention write delta delta delta ff 
operational semantics pcf formulated terms martin lof style evaluation relation appendix 
programs closed terms program type 
denotational model gamma pcf said order fully closed terms type observational preorder defined follows iff program context program value programs full abstraction problem pcf concerned search order fully model pcf 
problem studied intensively years plo mil cur ong 
sections set scene give racy overview category arenas innocent strategies section sketch fully game interpretation pcf section 
reader directed ho full account proofs results cited sections 
introduce pcf sorted polyadic calculus language describing dialogue games section 
innocent strategies represented terms section 
direct encoding pcf calculus section 
arenas innocent strategies dialogue games played players called player opponent 
kinds moves question answer question answer matching pairs left right parentheses meta variables represent moves respective kinds 
parenthetic notation reflects condition questions answered questions rules game dialogue games played set rules play starts raising opening question ends answered 
opening question may raised play 
moves alternately making move time 
play effect tracing dialogue questions answers observing principles civil conversation 
justification player allowed move provided justified question raised occurrence unique justifying question pending asked answered answer occurrence question expecting pending 
priority asked answered rule answer offered answer pending question 
games model proofs question winning player dialogue games 
dialogue game completely specified game tree 
paths tree represent legitimate plays game 
game tree stages ffl arena defines moves questions answers game nodes game tree spells move justifies 
data specific individual games common plays game 
ffl collection paths game tree defined sequences moves satisfying rules introduced game 
shall refer paths game tree legal positions arena question 
definition arena structure qn ans qn qn upside forest questions roots forest maximal elements 
questions depths questions depths questions 
questions depth called opening moves special status 
say question justifies say unique question immediately ordering 
ans set answers 
question associated set possible answers map qn ans gamma 
qn 
sake uniformity say question qn justifies answer moves arena elements ans qn 
forest partially ordered set lower set element finite total order 
forest forest forest questions stage play move necessarily available players moves may available justified enabled play unfolds 
notion justification formulated partial ordering questions 
precise informally expressed condition sequence moves opening move equipped pointer said satisfy initial subsequence delta question pointer points occurrence justifies occurrence pointed pending 
similarly initial subsequence delta answer pointer points occurrence occurrence pending possible answer say question similarly answer explicitly justified appropriate occurrence formed sequence sequence moves equipped auxiliary sequence pointers non opening move conditions satisfied 
construction arenas define product function space arenas 
product simply take obvious disjoint sum arenas directed graphs 
function space simplest draw picture 
picture opening move 
opening moves tree opening move graft copy forest questions place consider examples 
example natural numbers arena denoted abuse notation specified data 
singleton forest questions consists opening 
answers natural numbers delta delta delta possible answers question 
boolean arena defined similarly singleton forest questions opening question possible answers 
generally pcf type delta delta delta forest questions corresponding pcf arena shall systematically confuse pcf type interpretation arena inverted finite tree 
useful establish naming convention questions pcf arena 
take say 
draw tree questions 
questions identified finite sequence natural numbers obvious definition omit shown 
views legal positions intuitively strategy say method rule determines move position ends forest questions arena 
move 
strategy said history sensitive move determined function history play 
reject history sensitive strategies favour strategies operate basis certain abstraction history play called view 
player view view ppq formed sequence moves defined recursively 
range formed sequences moves segments formed sequences 
def opening move pq delta deltar delta def delta delta explicitly justifies pq delta def delta pq delta deltar delta def explicitly answers pq delta def delta example view formed sequence moves may shape delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta construction pattern delta respectively delta view question respectively answer explicitly justified question 
segments form delta delta delta view 
may read player ignores answers questions posed opponent 
dual definition view formed sequence omit 
recall legal positions arena paths associated game tree 
definition legal position arena wellformed sequence satisfies condition called visibility initial subsequence delta explicitly justifying question occurs view similarly initial subsequence delta question explicitly justifying occurs view example sequence moves associated pointers legal position arena 
question moves occurrences questions arena respectively 
example delta delta delta delta nq delta delta delta delta delta delta delta delta delta delta mq delta delta innocent strategies interested deterministic strategies playing dialogue games 
formally strategy oe arena non empty prefix closed collection legal positions satisfying conditions 
legal position 
determinacy oe player move delta delta oe 
contingent completeness oe opponent move move delta legal position oe 
strategy arena corresponds subtree game tree properties node labelled move offspring unique response 
note game trees inverted trees 
definition strategy oe innocent determined partial function certain kind mapping legal positions player move way legal position oe move move delta oe psq defined psq call function defining partial function innocent strategy oe 
clearly innocent strategies may specified defining functions 
category defined data objects category arenas maps arenas innocent strategies arena innocent strategies maps composed way reminiscent csp style hoa parallel composition plus hiding 
terminal object category empty game 
product function space arenas defined preceding corresponding categorical constructions 
arena collection innocent strategies ordered inclusion forms di domain 
major result ho theorem category ca cartesian closed enriched di domains example innocent strategies arena structure flat natural numbers cpo 
element undefined strategy 
innocent strategy denoting behaves follows response opening question returns answer play concludes 
fully game model pcf cpo enriched cartesian closed category natural numbers booleans gives rise model pcf see ls general picture ho part analysis specific pcf 
category interpretations abstraction application fixed point operator completely standardly determined categorical structure 
interpretation pcf term innocent strategy arena welldefined worked information far 
di domain consistently complete prime algebraic cpo satisfies axiom compact element dominates finitely elements 
trace delta 
example consider ft omega gamma omega type term type 
show legal position innocent strategy trace playing left xy 
main result ho theorem theorem hyland ong observational quotient category gives rise order extensional order fully universal model pcf 
proof strong definability theorem order isomorphism syntax finite canonical forms essentially pcf extended definition finite number cases ordered omega gamma hing semantics compact innocent strategies ordered inclusion strong definability result extends universality result modulo observational equivalence recursive innocent strategies pcf definable 
definition canonical form appendix 
problem representation innocent strategies formally defined certain collections legal positions 
observed may specified defining functions 
relatively simple pcf terms precise description denotations innocent strategies style quickly unwieldy opaque 
highly desirable expressive calculus lent economical description uniform strategies available 
question representation turn 
polyadic calculus calculus introduced milner mpw extension process algebra ccs processes similar results somewhat different games obtained independently abramsky jagadeesan malacaria ajm nic 
subsequently hearn riecke described construction fully model pcf kind logical relations 
changing structures may expressed naturally 
key features calculus may brought sharp relief contrasting comparing calculus 
calculus canonical calculation functions milner regard calculus step canonical treatment concurrent processes gives priority concept names 
calculus constants variables subsumed names 
names identify communication links computation represented purely communication names links 
linkage component agents system may changed result communication names neighbours 
distinctive feature calculus ostensibly weak communication capabilities contrast calculus transmitted passed calculus agent access agent names 
remarkably milner showed mil parsimonious communication constructs calculus expressive calculus 
pcf sorting shall focus polyadic calculus refer simply calculus introduced mil 
presuppose infinite collection names ranged symbols names sorted follows 
shall assume familiarity notion sort sorting mil 
set subject sorts defined ans ans qn qn pcf type sorts qn qn precisely sorts natural numbers questions boolean questions respectively ans ans sorts natural number answers boolean answers respectively 
denumerably names subject sort 
particular names sort ans include sort ans include recall object sorts just finite sequences subject sorts written delta delta delta sn 
sorting partial function subject sorts object sorts associates subject sort sort name vector name sort written carry transmit 
pcf sorting defined partial function 
delta delta delta qn delta delta delta 
delta delta delta qn delta delta delta 
qn 
qn qn 
ans qn 
ans pcf sorting name sort delta delta delta carry transmit sort delta delta delta qn 
note pcf sorting undefined ans ans effect name ans say appear subject action 
names effect program values 
shall call names value names 
pcf sorted terms calculus consists collection terms intuitively stand processes agents shall shall word agent interchangeably process sense mpw opposed mil defines agents syntactic subcategory processes 
range collection pi terms 
syntax pcf sorted terms defined grammar bnf zero term guarded term parallel composition replication delta delta delta xn restriction match delta delta delta xn defined agent recursion 
guarded terms terms prefixed actions 
kinds actions silent action delta delta delta yn input action xh delta delta delta yn free output action delta delta delta yn bound output action 
non silent actions sort delta delta delta known subject action qn called principal object subsidiary object action 
cases free name names delta delta delta yn free free output action bound 
collection names free names bound names process denoted fn bn respectively defined mpw 
bound output action may expressed terms restriction operation free output action xh follow notational convention mil notably guarded term abbreviated modulo pcf sorting calculus mpw extended polyadic features introduced mil replication mil 
note need summation constructor 
details definition meaning actions omitted may 
shall occasion consider infinitary version calculus involves parallel composition infinite number processes match construct 
cases associated match constructs infinite compositions mutually exclusive 
typically form delta delta delta pn delta delta delta shall abbreviate 
pm labelled transition relation late weak bisimulation labelled transition relation ff gamma 
terms ff ranges actions defined induction rules table appendix adapted mpw 
mil separate structural laws govern neighbourhood relation processes rules specify interaction 
key insight berry chemical machine bb defined directly congruence relation agents follows 
aware attractive new name constructor gamma equivalent bound output action prefer better suited purpose 
definition define structural congruence written congruence terms satisfying 
ff convertible 


delta delta delta xn permutation 
free 
subject action note case non standard 
structural laws preserved labelled reduction relation definition rule struct 
shall write relation gamma 
transition silent action simply write reflexive transitive closure 
shall assume definition weak late bisimulation mpw mil 
representing innocent strategies shall consider dialogue games pcf arenas arenas denotations pcf types 
ease exposition assume pcf type names sort include pcf variables type game reading actions recall legal position sequence moves equipped auxiliary sequence pointers satisfying conditions 
shall refer move information concerning justification pointers emanate point explicit move 
representation dialogue games calculus simple association explicit moves input actions explicit moves output actions 
ffl question type delta delta delta corresponds input action delta delta delta fn qn action encodes information question explicitly justified explicit question corresponding action contains subsidiary object 
subject marks source justification pointer emanating 
subsidiary object marks target justification pointer question comes explicitly justified ffl answer question represented free output action form ah name sort ans ans subject action question possible answer 
observe occurrence action marks source justification pointer emanating answer 

ah ch table translation legal position ffl question type delta delta delta bm represented bound output action delta delta delta gm qn subject indicates question explicitly justified explicit question subsidiary objects 
ffl answer question represented input action form sort ans ans example information give representation legal positions 
illustrate consider legal position arena see example 
table representation shown action corresponding move directly move picture 
note question say explicitly justified answer specific question 
case justification pointer represented marking source arrow subject input action corresponding marking target arrow subsidiary object output action corresponding 
justification pointer case similarly represented note target arrow principal object output action corresponding 
game reading actions questions answers gives rise completely adequate accurate representation legal positions 
important feature representation unique identification question move legal position new private name 
name principal object action representing question move 
case example observe questions order uniquely identified names respectively 
scheme may extended represent innocent strategies 
give informal explanation capabilities calculus employed give expression salient features innocent strategies 

generation new private links 
question opening question may asked repeatedly innocent strategy new names generated dynamically name unique specific instance question 

match 
just strategies may respond moves case analysis agents representing defined cases 
match constructs conjunction parallel composition implement facility 

replication 
innocent strategy may raise question repeatedly corresponding part responding strategy may need played times computation 
repetitive agents constructed replicate construct gamma calculus 

parallel composition 
composition strategies qua maps category corresponds parallel composition plus hiding replication 
exact representation strategies position spell exact representation innocent strategies infinitary calculus 
innocent strategy oe delta delta delta corresponds exactly possibly infinitary canonical form delta delta delta fn oe see theorem 
innocent strategy oe type name sort define term oe corresponds exactly oe sense precise 
definition generally strategy oe type delta delta delta ak ak delta delta delta ak define translation oe delta delta delta indicated free names delta delta delta fk form fk delta delta delta fk oe delta delta delta define translation oe 
oe delta delta delta recursion structure oe cf delta delta delta fk ak oe canonical form corresponding precisely oe see definition 
cases definition oe equivalently oe 
oe delta delta delta table 
note oe delta delta delta corresponds delta delta delta fk ak oe delta delta delta fk ak delta delta delta ak translation necessarily infinitary calculus 
compact strategies correspond finite canonical forms see ho part ii get translation calculus proper 
admissible traces trace agent sequence actions agent perform succession 
behaviour agent may described terms traces 
formally range terms 
trace sequence actions defined inductively follows oe cf delta delta delta fn oe omega gamma define oe delta delta delta fk delta delta delta fk 
oe program value define oe delta delta delta fk delta delta delta fk ah 
oe case delta delta delta yr 
rm delta delta delta cr delta delta delta jp innocent strategy type cf associated cf innocent strategy ae type rm ae define oe delta delta delta fk delta delta delta fk oe delta delta delta fk delta delta delta fk delta delta delta gr delta delta delta delta delta delta gr delta delta delta jb aem delta delta delta table definition encoding oe equivalently oe 
oe delta delta delta ffl ffl empty sequence trace zero agent ffl oe trace ff gamma 
ff delta oe trace trace term encoding innocent strategy interest 
disregard silent actions may thought compile time optimization anon 
intention capture traces describing behaviour agent interacts environment agents behaving accord pcf computation 
definition observable trace agent defined subsequence non silent actions obtained trace deleting actions 
observable trace oe said admissible satisfies conditions ffl oe sequence strictly alternating input output actions ffl action translate answer appears oe answers action translate pending question 
theorem tree legal positions corresponding innocent strategy oe isomorphic tree admissible traces oe way faithful correspondence moves actions explained start section 
generalized composition strategies suppose oe theta delta delta delta theta ak theta delta delta delta theta generalized composite strategies oe delta delta delta theta delta delta delta theta easily seen defined appealing cartesian closed structure category theorem result parallel composition plus hiding replication respective translates oe delta delta delta delta delta delta fk oe delta delta delta delta delta delta delta delta delta delta delta delta weakly bisimilar oe delta delta delta delta delta delta consider special case oe delta delta delta ak delta delta delta fk oe delta delta delta delta delta delta weakly bisimilar ffl ah case oe delta delta delta output ffl case oe delta delta delta undefined 
introduce notation terms write mean 
note silent reduction gamma 
preserves structural congruence rewrite previous special case 
corollary composite strategy oe delta delta delta innocent strategy arena oe delta delta delta delta delta delta uh ah encoding pcf calculus representation innocent strategies gives translation pcf calculus pcf term take denotation innocent strategy oe translate calculus oe shall call compact translation 
translation pcf calculus amounts kind compilation calculus may regarded description language system name passing processes structures may evolve dynamically 
compact encoding encoding pcf terms terms finite agents terms denote compact innocent strategies 
advantage shall see shortly corresponds efficient compilation 
section give direct encoding pcf calculus 
take pcf term type delta delta delta 
name define recursion term dse general form delta delta delta fn ah definition pcf sorting names delta delta delta fn sorts delta delta delta qn respectively sort ans def ah def ah ah delta delta delta def ah ah ah delta delta delta def ah ah dxe def delta delta delta fn delta delta delta gn df delta delta delta gn jb ah df se def delta delta delta fn vh delta delta delta fn dse def delta delta delta fn vh delta delta delta fn dse dye def delta delta delta fn delta delta delta gn df delta delta delta gn jb ah table definition direct encoding 
dse vh table encoding 
agent dse interacts environment communicating opening port expects receive vector names bound delta delta delta fn respectively 
note action dse engage 
suppose point interacting environment name instantiated final action agent send value name name instantiated bound name link definition recursive definition 
dse table 
fix opening port delta delta delta 
explanatory remarks connection definition order 
note shall definition dye represent variable occurring pcf term name appearing translate dse letter cause confusion 
ffl agent interacts environment port receipt link name say agent sends value name inactive zero agent 
ffl successor predecessor omitted test zero infinite objects compact innocent strategies 
ffl encoding pcf variable defined recursion type note sort effect encoding performed full expansion 
ffl case abstraction body type delta delta delta ffl assume application st type delta delta delta ffl take fix point constant type name sort delta delta delta note place agent defined recursion 
subterm occurring definition dye pcf variable translate application yf defined recursion 

dse encoding takes pcf infinitary calculus 
ways encoding modified maps calculus proper 
replaces constants succ pred zero 
obvious compact approximants pred zero respectively 
example evaluates provided way change way natural numbers program values encoded 
various possibilities discussed mil 
change destroy correspondence actions game moves main theme 
free names agent represents current knowledge linkage agents 
agent free name possibly perform silent action 
take pcf term opening port easy see recursion fn dse fv program performing action agent dse perform silent action 
example example encode 
note encoding shown table begins input action 
consider silent reduction uh name qn serves kind buffer 
easily reduces ch trace ch reduces ch bh ch ch definition corresponding garbage collection agent ch uh ch example consider type functional legal position innocent strategy denotation corresponding playing say shown 
trace compared term shown table weakly bisimilar direct encoding 
omit definition 
bhc ranging head normal forms pcf 
observe correspondence moves actions extends strategy translate 
soundness encoding properties translation 
summarize results 
concerns soundness encoding relative innocent strategy interpretation compact translation 
theorem take closed pcf term write innocent strategy interpretation oe 
tree admissible traces dse isomorphic tree admissible traces oe 
ii dse weakly bisimilar oe standard result cut rule valid pcf delta delta delta fk ak delta delta delta delta delta delta corresponding result translation proposition ds weakly bisimilar delta delta delta fk dse dt delta delta delta substitution pcf modelled generalized composition consequence theorem theorem ii 
term said deterministic theorem pcf program dse uh ah ii agent dse uh deterministic 
part theorem corollary theorem computational adequacy dialogue game interpretation pcf 
part ii proved case analysis syntactic shape pcf evaluation relation follows left weak reduction reduction strategy 
direct encoding pcf calculus reflects head reduction strategy pcf 
means reductions may take place head redex happens subterm abstraction 
note terms program type reduction strategies coincide 
directions encoding pcf kind milner studied encoding pure untyped calculus calculus mil 
considered translations lazy calculus ao plotkin call value calculus plo calculus 
comparing appropriate dialogue game encoding lazy calculus milner encoding clear conceptually quite unrelated apart idea representation calculus substitution parallel composition hiding replication common 
milner encoding simpler corresponds efficient implementation 
novelty encoding lies facility provides accurate representation innocent strategy denotation calculus terms calculus 
various ways described extended 
dialogue game model corresponding representation modified give interpretation call value lazy pcf 
programme carried untyped calculi example lazy calculus def eh jd ch jb ah table encoding optimized 
call value calculus 
somewhat different direction just begun explore ways representing strategies 
achieved representation complete accord dialogue game paradigm respects correspondence actions moves optimized capturing uniform parametric nature innocent strategies denotations terms 
mind various kinds tit strategies simply copies moves component play 
strategies nature occur various game models linear logic see bla aj ho 
useful generic calculus capable capturing general class schematic strategies 
suggested calculus lines sangiorgi higher order calculus san may fit requirements investigated matter 
polyadic calculus formal language representing innocent strategies construct fully game model pcf 
results show representation precise may taken basis formal definition innocent strategies 
direct encoding pcf calculus sound agrees fully innocent strategy interpretation 
received financial support epsrc research gr systematic programming semantics eu esprit basic research action project categorical logic computer science ii 
curien numerous insightful email fax messages game interpretation pcf david walker helpful comments draft 
aj abramsky jagadeesan 
games full completeness multiplicative linear logic 
journal symbolic logic 
ajm abramsky jagadeesan malacaria 
full abstraction pcf extended 
theoretical aspects computer software tacs sendai japan pages 
springerverlag 
lncs vol 

ao abramsky 
ong 
full abstraction lazy lambda calculus 
information computation 
bb berry boudol 
chemical machine 
conference record th annual acm symposium principles programming languages pages 
acm press 
connotation parametric opposed ad hoc polymorphism sense strachey see rey 
bla blass 
game semantics linear logic 
annals pure applied logic 
cur 
curien 
categorical combinators sequential algorithms functional programming 
birkhauser second edition 
progress theoretical computer science series 
ho hyland 
ong 
fair games full completeness multiplicative linear logic mix rule 
ftp able theory doc ic ac uk directory papers ong 
ho hyland 
ong 
full abstraction pcf ii iii 
preliminary version pages ftp able theory doc ic ac uk directory papers ong 
hoa hoare 
communicating sequential processes 
prentice hall 
ls lambek scott 
higher order categorical logic 
cambridge studies advanced mathematics 
cambridge university press 
mil milner 
fully models typed lambda calculus 
theoretical computer science 
mil milner 
communication concurrency 
prentice hall 
mil milner 
functions processes 
technical report inria 
mil milner 
polyadic calculus tutorial 
technical report ecs lfcs lfcs university edinburgh 
logic algebra specification edited bauer brauer schwichtenberg springer verlag 
mpw milner parrow walker 
calculus mobile processes ii 
information computation 
nic 
hereditarily sequential functionals 
proceedings symposium logical foundations computer science 
springer verlag 
lncs 
ong 
ong 
correspondence operational denotational semantics 
abramsky gabbay maibaum editors handbook logic computer science vol 
oxford univ press 
appear 
hearn riecke 
kripke logical relations pcf 
appear 
plo plotkin 
call name call value lambda calculus 
theoretical computer science 
plo plotkin 
lcf programming language 
theoretical computer science 
rey reynolds 
types abstraction parametric polymorphism 
information processing pages 
san sangiorgi 
expressing mobility process algebras order higher order paradigms 
technical report cst university edinburgh 
phd thesis 
sco scott 
type theoretical alternative cuch iswim 
theoretical computer science 
bohm festschrift special issue journal 
article widely circulated unpublished manuscript 
appendix pcf definition definition language pcf may various places see plo ong 
operational semantics pcf may defined induction rules ranges values constants abstractions read reduces value vt st cond fi cond fi succs preds preds zero zero sy canonical forms definition define infinitary language pcf augmented infinitary definition cases construct 
ease presentation assume program type 
typing rule governing case construct rm case 
rm operational semantics defined rule scheme addition define operational semantics pcf case 
rm pcf types delta delta delta define collection cf delta delta delta fn canonical forms cfs free variables appearing list delta delta delta fn follows 
ffl ground type omega program values cf 
ffl delta delta delta fn delta delta delta cr delta delta delta jp rm cf cf case delta delta delta yr 
rm cf note cf definition program type omega gamma number definition cases construct 
finite canonical form fcf canonical form occurrences case construct finite branches 
theorem pcf type delta delta delta order isomorphism innocent strategies oe ordered inclusion canonical forms oe cf delta delta delta fn ordered omega match ordering 
omit definition order oe 
oe cf 
gamma 
xh xh gamma 
par fl gamma 
fl gamma 
bn fl fn com xh gamma 
gamma 
gamma 
close gamma 
gamma 
gamma 
open xh gamma 
gamma 
res fl gamma 
fl gamma 
fl struct fl gamma 
fl gamma 
match fl gamma 
fl gamma 
table definition labelled transition relation fl gamma 
