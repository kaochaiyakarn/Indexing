functional transformation systems jan ralf joost visser university amsterdam kruislaan sj amsterdam netherlands cwi box gb amsterdam netherlands 
demonstrate functional programming platform developing integrated transformation systems typed scalable easy adaptable 
kernel functional transformation system certain language transformation framework generated language grammar 
framework provides fold traversal scheme adaptable basic traversals 
grammar parser pretty printer generated 
support storage interchange intermediate results 
software renovation case study illustrates approach practical value 
transformation systems systems implement program transformations essential application areas including software renovation reverse engineering domain specific language implementation program optimization 
transformations accompanying analyses usually implemented traversals syntax trees applying rewrite rules various nodes 
concerned construction functional transformation systems functional programming updatable folds 
aim integrated transformation systems systems supporting parsing pretty printing storage interchange intermediate results 
generator tool haskell programming supports approach construction transformation systems 
existing approaches suffer number drawbacks 
common platform transformation systems algebraic rewriting cf 

naive rewriting approach chosen transformation rules specified rewrite rules fixed built rewrite strategy innermost relied 
unfortunately naive approach provide sufficient control traversal behaviour practical 
transformation rules need cope concepts contexts conditions accumulators 
practice conceptual transformation rules traversal strategy encoded tangled way rewrite rules explicit function symbols traversals strong negative effects reusability modularity level abstraction 
rewriting explicit strategies solves problems tangling sacrifices typing 
functional programming benefits compared paradigms 
benefits include expressiveness high level abstraction due homepage www science uva nl declarative mathematical style safety powerful static type checks ample support reuse powerful abstraction mechanisms polymorphism higher order functions 
shows bring benefits area program transformation 
haskell 
structured follows 
section heart approach programming updatable fold algebras implement traversals involved transformation systems 
section develop architecture integrated transformation systems support parsing pretty printing 
section describe transformation system cobol renovation problem illustrate approach practical value 
programming updatable fold algebras functional approach transformation systems relies certain style implementing traversals involved program transformations program analyses hand style programming updatable fold algebras 
improvement existing approaches programming folds allow folds updated 
pragmatic consequence improvement implementing complex program transformations folds feasible 
section explain programming updatable fold algebras simple program transformation example followed general considerations 
reader assumed somewhat familiar functional programming haskell notion folds 
sample transformation shows haskell implementation program transformation 
purpose transformation simplify expressions applications constant functions eliminated 
transformation cf 
cfe analysis cf 
fv yields set free variables expression 
explain various parts program turn 
datatypes type expr top represent syntax expressions 
record type cata class fold fold functions model particular kind traversal catamorphisms 
recall catamorphism function replaces constructors functions recursively applying function parameters constructor 
cata contains function component constructor type expr 
type resembles type corresponding constructor type expr replaced type variables fold functions traverse syntax tree apply component cata node 
records crush collect values different instantiations type cata constitute specific catamorphisms 
see haskell refers haskell extended multi parameter type classes 
data type tvar string arrow type type data expr var string apply expr expr lambda string type expr data cata cata tvar string 
arrow 

var string 
apply 

lambda string 

class fold fold 

instance fold cata type fold alg tvar tvar alg fold alg arrow arrow alg fold alg fold alg instance fold cata expr fold alg var var alg fold alg apply apply alg fold alg fold alg fold alg lambda lambda alg fold alg fold alg cata type expr cata tvar tvar arrow arrow var var apply apply lambda lambda crush 

crush cata tvar 
arrow 
var 
apply 
lambda 
collect crush union cata string string collect var 
lambda 
filter fv expr fold expr cata type expr apply 
case lambda 
elem fv apply 
apply cfe expr 
expr cfe fold fig 

implementation constant function elimination crush collect specific particular program transformation hand 
embody generic behaviour refined implement actual traversals 
record instantiates parameters cata type expr constitutes type preserving traversal function 
precise represents transformation traverses input tree changing 
contrast parameterized record crush instantiates type cata type parameters yielding type type unifying traversal 
fact crush constitutes kind reduction monoid 
note neutral elements summed long crush updated 
collect instantiation crush empty list neutral element union operator 
function cfe describes actual transformation kind constant elimination 
traversal function applying fold updated component apply 
update models applications constant abstractions arbitrary expression reduces body abstractions 
transformation relies traversal function function fv describing analysis ree variables 
corresponding traversal applies fold collect updated components 
function variables component var updated function returns variable function component lambda updated function returns free variables accumulated recursively body variable abstraction 
note behaviour constructors inherited collect respectively 
scalability alternatives style 
program analysis fv program transformation cfe implemented ordinary functions pattern matching general recursion 
programming folds 
alternatively functions fv cfe implemented fold enumerating constructors functions replacing 
alternatives suffer scalability problem 
think complex syntax 
syntax modern languages java haskell sorts constructors speak languages cobol 
writing exhaustive traversal functions enumerating ingredients fold scratch scalable size traversal implementations sense proportional size syntax hand 
note simpler transformation systems require quite different traversal functions 
approach employ records crush collect 
records called basic fold algebras 
generic behaviour modelled reused large extent constituting actual traversals updating basic fold algebras 
separation basic fold algebras updates reason superior scalability respect programming effort approach transformation systems 
fold functions basic fold algebras derivable straightforward way syntax language hand 
updates supplied programmer 
effort involved writing updates independent size syntax 
proportional complexity desired functionality 
traversals concerned small number patterns specific way 
approach nutshell illustrates functional approach implementation traversals 
primary element picture system mutually recursive datatypes syntax case transformation system 
system number elements indicated grey rectangles derivable fold algebra type family fold functions tn number basic fold algebras am result am fold algebra algebra type fold functions tn programmer datatypes basic fold algebras update delta delta fig 

programming updatable fold algebras implement traversal contributing construction transformation system functional programmer performs steps 
write fold algebra update delta 
apply update basic fold algebra denoted delta 
feed resulting fold algebra fold function result traversal function delta applied term type produce result 
special case fold algebra constitutes type preserving traversal function result term type example system datatypes consisted type expr cata role fold algebra type basic fold algebras crush collect 
derived replacing constructor types occurrences datatypes type variables collecting resulting function types record type 
possible recursion scheme fold functions illustrated example scheme 
possible scheme paramorphisms 
case fold functions take fold algebra argument traverse second argument 
fold functions represent traversal scheme terms types fold algebra stores computations performed node traversal 
basic fold algebras model generic functionality reduction 
updated pointwise record update order derive fold algebras constituting actual traversals 
architecture functional transformation systems section discuss architecture integrated functional transformation systems depicted 
bold arrows indicate meta tools grey elements depict code generated meta tools 
architecture functional program works parse trees imports generic transformation library generated transformation framework 
transformation framework generated parser pretty printer grammar 
generated framework supports programming updatable fold algebras described previous section 
library generic transformation functional program pretty printer parser generated transformation framework grammar fig 

transformation systems parser pretty printer integration requirements architecture functional transformation systems stated 
various elements architecture discussed thoroughly 
requirements interested application functional transformation systems automated software renovation 
typical legacy system consists sev eral hundreds thousands lines code written dialects various programming languages combined grammars contain hundreds productions 
renovation systems requires scalability adaptability parsing unparsing pretty printing transformation technology 
demands application area formulate number requirements systems need fulfill 
transformation technology needed areas adaptive programming aspect oriented programming domain specific language implementation 
areas equally benefit fulfillment requirements 
scalability require scalability respects programming effort resource consumption 
issue discussed section 
resource consumption compilation generation processing transformation scale size legacy programs systems transformed renovation 
ease user transformational system able express intentions declarative fashion minimal encoding 
adaptability possible easily adapt reuse transformational programs 
instance cobol system possible adapt reuse renovation transformations cobol sql system 
transformational programs robust sense small language changes require small adaptations 
completeness transformation system support problems surrounding actual transformation 
system feature fully integrated scalable adaptable easy parsing unparsing pretty printing technology 
framework open integration necessarily functional components generic data control flow analysis 
grammars parsing current functional parsing technology comes flavours parsing combinator libraries cf 
parser generators ml yacc 
approaches fulfill demands scalability adaptability 
approaches offer integration pretty printing 
general remarks current parsing technology 
propose native functional parsing technology stateof art external non functional components purpose 
specifically propose sdf syntax definition formalism existing generalized lr parsing technology generic pretty printing technology comes sdf 
numerous applications technology proven scalable highly adaptable 
sdf highly modular allows mutually recursive modules distribution productions non terminal modules 
provides special constructs disambiguation prevents disambiguation syntax specification tangled 
sdf supported implements scannerless generalized lr parsing 
advantage generalized lr parsing copes general context free grammars just restricted subclass lr grammars 
class context free grammars modular contrast class lr grammars 
results avoidance maintenance problems dialects combination languages involved 
properties sdf ensure reusability adaptability 
highly declarative nature sdf absence grammar class restrictions provides better ease conventional parser generators 
representation parse trees parse trees produced generated parser consumed functional program 
applications mind need comments layout taken account transformation 
fact contracts software renovation projects specifically state comments layout original software preserved 
different techniques keep track comments layout include comments layout parse trees turn traversed terms 
choice needs representation parse trees generic typeful 
inside functional programs implementing transformation system course typeful representation datatypes derived language grammar 
interoperation parser pretty printer generic tools tree representation format aterm format 
tiny language specifically designed representation generic trees 
comes library offers extreme compression capabilities 
space efficiency offered aterms important intended application area objects transformation legacy systems large 
traversals heart functional transformation system architecture generator derives transformation framework consisting fold algebra types fold function families basic fold algebras described section 
generated code reappears central grey rectangle 
system datatypes directly supplied programmer generated grammar language hand 
generated datatypes available inspection programmers experience need arises 
due natural mapping grammars datatypes quite sufficient know grammar annotated constructors program actual traversals 
shows generated functional transformation framework imported functional programs implement traversals section 
library generic transformational code imported 
generic transformation library supplies example necessary code reading writing parse trees 
unparsing pretty printing distinguish unparsing pretty printing 
merely compute yield parse tree concatenating leaves string 
pretty printers apply formatting rules parse tree obtain representation contents string marked document formatted parse tree 
architecture unparsing supported generated transformation framework 
corresponds simple traversal relying representation parse trees comments layout 
pretty printing generic pretty printing technology available sdf 
technology consists generator derives default pretty print rules grammar 
user supply specific rules customize pretty print process 
generic component uses rules format parse trees map intermediate formatting language called box 
various back ends map box html pdf plain text back formatted parse tree 
unparsing generic pretty printing technology just described support preservation comments 
full support preservation layout lacking 
naive unparsing preserves existing layout cope newly introduced subtrees layout invalid transformations 
purpose kind incremental pretty printing needed 
open problem 
note preservation comments usually important preservation layout especially pretty printer available 
case study applied functional approach construction transformation systems software renovation project dutch bank 
actual project technology implementation actual conversion performed scripting languages certain extent manual methods 
functional approach shadow project find approach scales kind problem 
hope discuss full problem 
renovation project concerned data expansion problem cobol banking application lines code 
certain data fields identified name heuristics propagation rules expanded 
data field expansion implied code changes 
sense problem simple variant problem discussed extensively literature cf 

accompanying sources simplified version renovation problem 
deal just small fraction cobol simplify matters 
sources downloaded homepage www science uva nl data expansion problem sample cobol program illustrate data expansion problem 
changed lines code corresponding code fragments underlined 
certain data fields expanded pic pic application required digit values digit values fields 
course digit data fields expanded fields corresponding particular type usage 
identification division 
identification division 
program id little test 
program id little test 
data division 
data division 
working storage section 
working storage section 
seek name pic 
seek name pic 
name pic 
name pic 
name pic 
name pic 
name pic 
name pic 
procedure division 
procedure division 
move seek name name 
move seek name name 
move seek name name 
move seek name name 
name name display exception encountered display exception encountered run 
run 
fig 

sample program transformation idea determine affected fields propagation starting initial set called seek set 
initial set identified resorting naming conventions 
sample program assume seek set solely consists seek name declared line 
affected fields 
move statements lines suggest type usage fields name name seek name 
propagation looks fields involved patterns 
sample program set affected fields consists seek name name name 
transformed program picture masks seek name name expanded see lines 
mask pic preserved name affected type usage different 
mask pic preserved name field affected hold digits anyway 
line illustrates change implied data field expansion 
maximum value corresponding type usage tests error values 
value greater error value 
sample program field capable holding error values name 
assume data field expansion values regarded proper values 
line checking error values adapted 
structure transformation system illustrates structure transformation tool data expansion implemented functional approach described 
generator tool derive initial transformation framework cobol grammar 
course transformation system relies parsing unparsing support 
pic pic actual transformation parse picture mask expansion maximum adaptation affected set propagate seek set fig 

structure transformation system case study haskell function main function actual transformation 
function cobol programs parameterized seek set 
note start supposed start symbol cobol grammar 
seek set just list data names 
name qualification issues 
function set affected fields derived fixpoint computation traversal built parameterized fold algebra propagate 
basic transformations applied program 
corresponding traversals constituted parameterized fold algebras pic picture mask expansion max maximum adaptation 
fold algebras propagate pic discussed detail 
type trafo start 
start type names set name names 
trafo seek prog affected seek step fold max affected trafo 
fold pic affected trafo prog step known 
known union fold propagate known prog fig 

haskell main function actual transformation propagation presents parameterized fold algebra propagate constituting analysis deriving set set 
restrict looking affected fields move statements 
fold algebra derived basic fold algebra crush 
update crush emptyset union concerned move statements move stat 
traversals supported algebra members parameters original term second tuple intermediate results resulting folding subterms 
update second parameter needed move statement contain move statements contribute set 
case expression checks right patterns move operands 
membership tests elementof 
possibly return names contributing set 
propagate names 
unify names propagate known crush emptyset union 
case identifier identifier 
elementof known elementof known elementof known elementof known emptyset 
emptyset fig 

fold algebra constituting analysis computing set picture mask expansion take closer look transformation picture mask expansion constituted parameterized fold algebra pic defined 
fold algebra derived basic fold algebra modelling identity mapping 
algebra updated data descriptions data desc 
data field affected original data description preserved 
supplementary transformation fold traverse clauses data description expand picture masks accordingly 
concluding remarks proposed functional approach construction transformation systems 
approach provides strong expressive typing 
allows separation recursion schemes step rules 
reuse extensibility underlying pic names 
preserve pic affected 
elementof affected fold preserve mask 
case mask 

fig 

fold algebra constituting transformation picture mask expansion traversals supported abstraction update mechanisms 
technology described allows develop robust declarative adaptable transformation systems 
particular design decisions sure approach scalable complete far application area software renovation concerned 
demonstrated case study problem 
outlined approach supported generator tool 
functional transformation systems proposal fully integrated parsing unparsing pretty printing 
regardless fact theme program transformation systems long history receiving enormous attention cf 
functional approach construction transformation systems comes close fulfillment requirements essential application area consideration 
multi staged programming transformation systems explored state art expressiveness modern functional languages 
reasons languages just mature 
currently available haskell implementations considerable problems compilation generated transformation frameworks large grammars 
reason identified example ghc unfavourable complexity behaviour respect compilation labeled tuple types 
scalability problems addressed soon possible order obstruct haskell important application areas software renovation 
fundamental presentation scheme programming updatable fold algebras 
discuss elaborate issues derivation combinators programming updatable fold algebras combination folds monads 
point monads useful implementation program transformations 
example environment monad state monad useful propagate context information accumulate certain data generation fresh symbols 
mention topics 
different kinds modularity traversals discussed literature cf 
pointers 
solution fulfilling requirements scalability ease adaptability lacking 
optimization traversals short cutting recursion deserves attention 
full integration programming traversals functional language ambitious topic 
architecture supported assume derivation fold functions basic fold algebras corresponds generation haskell code datatypes grammars respectively 
contrast language provide derivable entities primitives 
categorical programming language charity fold operators supplied datatype language 
mutually recursive datatypes supported basic fold algebras supplied language 
authors de jonge valuable remarks draft 
ralf received partial support netherlands organization scientific research nwo generation program transformation systems project 

boyle 
program reusability program transformation 
ieee transactions software engineering sept 
special issue software reusability 

brand sellink verhoef 
generation components software renovation factories context free grammars 
science computer programming 

van den brand de jong klint olivier 
efficient annotated terms 
accepted publication software practice experience 

van den brand sellink verhoef 
current parsing techniques software renovation considered harmful 
tilley editors proceedings sixth international workshop program comprehension pages 
available adam wins uva nl ref ref html 

chikofsky cross 
reverse engineering design recovery taxonomy 
ieee software 

cockett spencer 
strong categorical datatypes seely editor international meeting category theory canadian mathematical society proceedings 
ams 

van deursen klint verhoef 
research issues renovation legacy systems 
finance editor fase volume lncs pages 
springer verlag mar 

henglein mossin niss tofte 
type theory year conversion tool 
acm editor popl 
proceedings th acm sigplan sigact principles programming languages january san antonio tx acm sigplan notices pages new york ny usa 
acm press 

heering hendriks klint rekers 
syntax definition formalism sdf manual 
sigplan notices 

de jonge 
pretty printer occasion 
ferguson gray scott editors proceedings nd international symposium constructing software engineering tools coset 
university australia 

kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
aksit matsuoka editors ecoop object oriented programming th european conference volume lncs pages finland june 
springerverlag 


declarative aspect oriented programming 
danvy editor proceedings pepm acm sigplan workshop partial evaluation semantics program manipulation pepm san antonio texas brics notes series ns pages jan 

visser 
dealing large bananas 
proc 
technical report universiteit utrecht july 
available www cwi nl ralf 

lieberherr 
adaptive object oriented software 
pws publishing 

meertens 
paramorphisms 
formal aspects computing 

meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
proc 
fpca volume lncs 
springer verlag 

meijer jeuring 
merging monads folds functional programming 
jeuring meijer editors advanced functional programming volume lncs pages 
springer verlag 


program transformation systems 
computing surveys sept 

rekers 
parser generation interactive environments 
phd thesis university amsterdam 

van den brand visser 
generation formatters contextfree languages 
acm transactions software engineering methodology january 

swierstra 
fast error correcting parser combinators short tutorial 
theory practice informatics th seminar current trends theory practice informatics number lncs 
springer verlag nov 

taha sheard 
multi stage programming explicit annotations 
proceedings acm sigplan symposium partial evaluation semantics program manipulation pepm volume acm sigplan notices pages new york june 
acm press 

tarditi appel 
ml yacc user manual version 

van deursen moonen 
type inference cobol systems 
working conference reverse engineering pages hawai usa oct 
ieee computer society ieee computer society press 

visser 
syntax definition language prototyping 
phd thesis university amsterdam sept 

visser benaissa tolmach 
building program optimizers rewriting strategies 
international conference functional programming icfp baltimore maryland 
acm sigplan pages sept 
