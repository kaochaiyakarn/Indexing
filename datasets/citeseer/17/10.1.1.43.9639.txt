merging logic programming web technology coordination approach enrico antonio andrea omicini dipartimento di elettronica informatica sistemistica universit di bologna viale bologna italy tel 
fax mail deis unibo www www lia deis unibo staff 
current www technology de facto standard platform groupware applications provides virtually effective coordination capabilities 
new applications demand higher level middleware services intelligent behaviours deductive capabilities effective coordination 
discuss possible extension current web architectures aim support integration logic conventional components introduce concept programmable communication abstraction 
framework current java architecture logic programming base linda coordination 
coordination medium may interpreted theory communication exploited reasoning communication introspection system state 
logic programming define reactions communication events allow communication abstraction behaviour extended tailored achieve specific coordination policies 
keywords world wide web internet java multi agent systems agents interaction coordination tuple spaces programmable coordination media extensible coordination abstractions 
industry academic realities growing demand groupware operative distributed applications videoconferencing remote remote people training education needs far simple document exchange 
providing resulting illusion cooperating applications working world wide web internet rapidly de facto standard hardware platform geographically distributed groupware applications 
success www support environment mainly due simplicity basic support mechanisms protocol data access html mark language page description url global naming scheme open architecture provides way integrate technologies cgi scripts java language window toolkit browser scripting languages javascript mime types browser helper applications basic framework 
forthcoming application areas demanding current www implementation provide 
fact new added value interactive services remote banking insurance health care revenue tellers public information access systems cultural events train flight schedules line reservations hotel booking road condition inquiry require higher level services referred middleware offering new abstractions compose new old programs complex software ensembles including particular facilities easily access geographically distributed information spaces personal communication tools interoperate heterogeneous data base management systems dbms 
reasons solutions emerging trying extend current www middleware capabilities support integration www technologies 
component technology dramatically altering way software systems built particular java architectural model just language internet applications providing www architectural currently lacking 
addition role central supporting rapid development new hybrid applications heterogeneous java visual basic components may asked cooperate ensemble 
respect issue javabeans technology currently definition de facto standard dynamic distributed component applications shown development bridge software allowing visual basic activex controls interoperate javabeans components embodiment corba architecture 
despite intrinsically distributed nature www know lacks coherent conceptual framework coordination capabilities essential create effective platform groupware operative information systems 
current definition java lacks general coordination model intended quoting glue binds separate activities ensemble efforts define global communication abstractions models javaspaces linda tuple spaces help filling gap 
fact remote method invocation rmi package available support remote object method invocation objects executing name space remote host relies basic point point communication protocol providing real higher level coordination abstractions 
applies corba widely adopted distributed object model platform 
approaches currently extend middleware capabilities aimed reuse existing metaphors technologies tools quickly port applications internet platform introduce really innovative abstractions specifically designed features platform 
hand forthcoming application areas require built mechanisms perform inferential activities 
reasoning capabilities clearly welcome instance remote banking applications provide extra information customers monitor system state consistency health care field expert systems features support diagnoses train flight schedule services find connections respecting customer defined constraints infer customer habit information improve service line reservation systems suggest alternatives find best price service combinations road condition monitoring systems suggest alternatives routes check expected critical conditions 
due known features respect knowledge representation handling logic programming quite natural choice provide extra intelligence demanded situations question form may integrated properly exploited www framework 
fact current www technology architecture may radically change models languages tools consequence integration logic programming 
logic programming provide short time contribution properly integrated current www architecture 
deductive capabilities suffice integration really useful effective coordination capabilities reasons outlined important deductive features 
coherently main approaches followed 
consists providing logic support service adding intelligence system changing existing architecture inserting ad hoc component 
idea exploiting coordination models introduce architecture providing bridge components inferential capabilities henceforth logic components conventional components 
second alternative general choice start component model introduce new software layer acting high level communication device viewpoint conventional components knowledge base viewpoint logic components 
fact agent coordination strategies result coordination competition individual agents difficult understand implement point point communication 
main goal extend current www architectures new component offers higher abstraction level object interaction order overcome low level event programming model web providing appropriate support inferential activities 
new component providing common language interaction capabilities logic conventional components key issue impose different coordination strategies top message passing paradigm 
reason software component supporting new layer dynamically programmable logic interaction usually spread interacting agents embedded coordination medium 
shown choice greatly improve design maintenance web systems 
short desired software layer designed coordination model allows logic agent reason available private common knowledge non logic agents access knowledge conventional messages 
application viewpoint provide program interface making possible logic components perform deductions time dependent environment offering time extendible behaviour order accommodate required coordination policy 
suitable starting point achieve goals represented coordination model meets requirements 
moving observation interactive systems simple sum parts adopts linda tuple spaces basic communication devices enhances aspects 
global distributed communication medium structured way directly constitute knowledge base logic components 
named logic tuple spaces communication channels allowing deductive activities performed set demo primitives defined coherent notion logic consequence time dependent environment 
non logic components components written java imperative languages access communication channels traditional way viewing conventional tuple spaces extra features 
component agent terminology access communication channels perception level 
second raises observability tuples operations tuples shifting observability level simple state observability provided javaspaces notification concept communication operations observability provides dynamic view system required distributed complex systems instance monitoring debugging purposes constitutes powerful mechanism build heterogeneous coordinated introspective component systems aims web technology 
concept exploited communication space programmable 
allowing user defined reactions triggered occurrence communication event possible extend execution communication operation read 
non intrusive way leaving semantics basic communication primitive untouched 
reaction execution model agents perceive effects single communication operation single step transition communication abstraction state behaviour coordination medium appear complex desired 
originally defined previous model just model working system currently implemented top sicstus prolog 
new software layer proposed introduced initially proper set interface components exploit available system providing abstraction layers necessary technological bridges 
discuss hybrid technology exploited provide web application deductive real coordination capabilities 
section briefly summarises current www technology coordination component technology viewpoints section summarises basics model section discusses approach deeply describing possible application scenarios 
final remarks reported section 
current www technology currently web server seen multi coordinated application exploits different communication protocols coordinate entities 
basic internet browser requests handled protocol provides fixed behaviour allows static pages consulted insufficient purposes 
fact people require specific information selected dynamically input data inserted means html forms 
case form data issued web server protocols post get web server able handle 
happens server interact external database means protocols 
platforms interaction achieved operating system facilities communication models activex controls ole 
order process input data dynamically build response page web server equipped ad hoc program typically program script written language perl visual basic script tcl tk platform specific shell languages interacts web server cgi common gateway interface interface protocol 
protocol needed communicate webmaster case operating systems models typically adopted properly extended instance microsoft extensions allow higher level interaction sophisticated site administration tools 
web server maintain state information request tricks writing html page request translated single transaction information available global coordination state 
obviously basic scheme introduces clear bottleneck puts computational load web server 
particular possible errors html input forms discovered form completely filled user analysed server side consuming server user time generating extra network traffic 
consequence active behaviours animations calculations 
coded html pages activities performed web server 
trend current www technology move computational load possible client side helping reduce web server load response times avoid unnecessary task 
java approach internet applications applets java terminology provided separate java programs code referenced inside html pages specific tag 
html pages continue describe page appearance behaviour description defined external applets executed java virtual machine jvm available extension netscape navigator plug internet explorer activex control widely internet browsers 
jvm deeply integrated browser environment user may hardly distinguish browser 
remains conceptually physically separate component interacts browser protocol defined applet handling 
consequently special extension required browser capability handling new tag downloading applet classes passing jvm execution 
script language approach behaviours executed response user events interleaved conventional html code pages describe just page appearance content 
done embedding simple event handlers directly html tags defining separate logical sections html page delimited tag inside behaviours encoded means script programs written principle adequate script language javascript visual basic script 
browser incorporate interpreter selected script language means issues introduced interaction viewpoint extra performed browser component 
script programs languages approach inherently different server side scripts executed separate interpreters interfaced web server cgi protocol implies completely different interaction scheme 

basics model coordination model founded linda model introduces notion generative communication promotes separation computation model coordination model shared memory communication abstraction called tuple space 
assume linda model known common extensions non blocking predicate version inp rd rdp primitives 
extends basic linda notion multiple logic tuple spaces 
logic tuple space collection order unitary clauses interpreted simple communication device knowledge repository reading suggests logic theory deductive activities performed current communication state 
introduces notion reactive tuple space programmable communication channel dynamically extended support arbitrarily complex behaviours keeping semantics basic communication primitives untouched 

deductions evolving logic theories consequence twofold nature communication devices conventional tuple spaces logic theories induce categorisation agents 
particular logic agents instance prolog agents aware nature tuple spaces logic theories perform logic proofs non logic agents instance java agents consider tuple spaces just conventional communication channels access traditional way pattern matching unification imperative languages provide notion variable binding 
dealing logic agents fundamental issue provide notion logic consequence allowing logic view clauses immutable truths coexist intrinsically transient nature knowledge tuple spaces 
precisely question ensure correctness completeness proof process 
basically addresses correctness issue introduces knowledge classification scheme distinguishing persistent knowledge refers time independent elements application domain transient knowledge refers part world may evolve agent life allowing logic proofs performed persistent knowledge 
result transient knowledge removed reason taken base deductions persistent knowledge logic inferences consequently retracted 
exploits predicates modularity sources predicate tuple space labelled implicitly explicitly represent transient persistent knowledge 
completeness issue critical faced providing special set logic proof primitives able keep new knowledge account backtracking 
addresses synchronisation issue captures idea may early deduce logic proof operations need properly synchronised starting deduction 
special set hybrid logic proof primitives provided wait synchronise suitable knowledge available logic proof starts 

reaction model reaction model aimed provide simple powerful way communication abstraction programmable dynamically extensible keeping semantics basic communication primitives untouched 
basic idea define communication channel communication events observable system level raising observability level state changes observability case conventional tuple spaces communication event observability tuples communication operations tuples 
tuple spaces capability triggering activities reactions specified communication events occur 
physical communication event associated logical events denoted unique name means special tuple map operation event 
multiple logical events associated physical event multiple physical events correspond logical event 
reactions specified tuples react event goal goal conjunction term predicates state primitives current op current tuple basic non blocking communication primitives 
multiple react refer logical event corresponding goals executed mutually independent atomic actions non deterministic order transaction semantics reaction succeeds subgoals executed successfully aborts 
course successful reactions produce effects 
reaction succeeds side effects associated carried simultaneously single transition tuple space state 
due transaction semantics reaction nesting allowed reactions triggered successful reaction executed successfully completed 
model ensures reactions executed serving agent triggered communication event agents perceive final result execution communication event related reactions 
way agents perceive response tuple space communication event single computational step single transition tuple space state longer forced simple fixed model standard linda complex required coordination policy 
reaction specification language founded communication pattern exploited agent interaction logic tuples basic operations tuple spaces agents principle dynamically manipulate communication abstraction behaviour possibly result deductions current coordination state system goals 

merging logic programming internet applications 
programmable logic tuple spaces software components basically proposal idea programmable logic tuple space software component java web architecture exploiting model kernel software layer 
adding tuple space component coordination features linda model available web applications 
higher abstraction level object interaction generative communication exploited linda known properties time uncoupling space uncoupling communicating agents 
way low level point point interaction model web overcome helping provide coordination weaknesses web platform 
choice adopting logic tuple space conventional possible interpret communication channel high level communication device knowledge base allowing heterogeneous logic non logic components coexist fruitfully interoperate 
chance opens new perspectives web applications intelligent components added impact system architecture 
reasonings proper representation relevant information communication events logic tuples tuple space application components aware existence logic tuple space component exploit inserting relevant knowledge 
obvious unavoidable drawback architectural restructuring implied insertion coordination medium existing architecture 
instance order insert logic tuple space component web server logic inferences done activity subsequent actions taken communication event protocol observable generating tuple tuple space 
requires web server slightly extended output tuple correspondence relevant protocol event interaction protocol remains untouched application server continue normally 
step define number role logic agents depending desired purposes network traffic monitoring page download statistics automatic mirroring exploit available coordination state perform required reasonings case studies 
logic tuple space provides interesting features availability programmable dynamically extensible tuple space possible implement coordination policies exploit global coordination medium 
feature particularly relevant component architecture web platform implies global system behaviour may changed intervening single components 
instance agents behave dining philosophers coordinating means programmable logic tuple space 
philosopher agent interacts communication abstraction simple protocol acquire release forks related low level handling put programmable tuple space 
way subsequent changes basic problem structure introducing concept meal time breakfast lunch dinner corresponding specific forks dealt simply re programming extensible logic tuple space change basic agent interaction protocol 
web platform philosophers easily java components possibly distributed internet coordinating programmable software component discussed 
generally components spread internet may aware existence logic programmable component decide exploit services simply downloading bridge software component may applet java bean conventional web ftp server 
way browser software component operating system application facto able interoperate component net programmable logic component coordination support 

web case studies case study consider case management large web server large companies deliver information software customers physically computers mapped url 
traffic peaks hours lower times different number servers running different times day 
addition extra communication channels may reserved telecommunication range hours paid correspondingly 
servers may disconnected time time maintenance failures 
cases dynamic adaptive behaviour system welcome 
particular may hire extra communication channels presence high traffic volume may keep servers working times 
hand server maintenance failure desirable requests diverted server backup computer 
interesting case study dynamic mirror service aimed reduce network traffic 
highly requested page file detected backed possibly geographically closer server rerouting subsequent requests new server 
conversely local copy remote highly requested page file certain conditions hold achieving proxy intelligent behaviour 
service delegated resource manager logic agent second assigned mirror manager logic agent 
resource manager asked keep traffic control may triggered new connection request 
purpose coordination component programmed translate occurrence event observable tuple form expected resource manager logic component 
reason current connections possibly origin applying rules decide activate pay new lines new servers conversely case disable traffic getting lower 
monitoring activity may notice server service case interesting behaviour patch situation re programming fly coordination component requests server dynamically redirected backup computer 
degree flexibility requires re design web server architecture actions influenced knowledge currently available tuple space priori defined 
means existing interaction protocol corresponding slight extension web server code discussed consisting reflecting tuple space relevant events longer sufficient communication occur tuple space coordination power fully exploited 
main components web server receiving client requests replying requests currently embedded single component interacting protocol uncoupled coordinated coordination medium achieving effective flexibility changing interaction policies leaving things unmodified external perception level 
obviously mirror manager structured similar way case relevant event single page file request opening new connection 
correspondingly tuple space programmed differently translate page request observable tuple proper form activate proper intelligent component 
agent check situation rules decide back page server proxy behaviour evaluate number requests worth local mirror 
related works world wide web internet offering standard support development middleware services demanding effective integration concepts methodologies mechanisms focusing attention architectural issues algorithmic aspects computation 
unsurprisingly object oriented programming model adopted model attention logic programming 
intrinsic complexity middleware software growing functionality requested underlying systems demand higher abstraction levels 
fact usually happens current www architectural model result abstraction process performed low level mechanisms 
programmer viewpoint means dealing concepts messages events event handlers need knowledge programming concepts reflective capabilities declarative computational models gradually emerging 
problem exploit logic programming having radically change systems available rapidly growing incremental methodology provided object oriented programming paradigm 
propose software component model way introduce logic agents context web systems short time 
key point consists providing new kind communication abstraction 
twofold interpretation logic tuple space possible support interaction heterogeneous agents providing bridge logic prolog conventional java agents 
systems linda interactor successfully deal issues providing access common logic tuple space java agents netscape applets 
exploits logic nature tuple space demo primitives safely integrate synchronisation issues logic proofs 
programmability feature tuple spaces easier design complex component architectures naturally shifting design focus agents coordination media 
specified terms order logic tuples reactions reuse communication language logic tuples agents intelligent agents chance dynamically alter coordination policies reasonings performed system state represented coordination medium 
intent provide tool allowing prolog agents run interact java agents conviction get benefits logic programming concretely perceived spread large interested community 
course price paid adapt logic programming model notion modifiable theory critical points faced order merge logic programming current internet technology 

ciancarini tolksdorf 
weaving web coordination 
coordination languages models international conference coordination italy april ciancarini hankin eds lecture notes computer science springer verlag berlin heidelberg germany pp 

isbn 
ciancarini 
coordination models software integrators 
acm computing surveys june 
carriero 
coordination languages significance 
communications acm february 
common gateway interface 
internet 
www com exchange irf cgi spec html object management group 
common object request broker architecture specification 
technical report omg july 
revision 
sun microsystems 
javascript language 
internet java sun com pr pr html 
generative communication linda 
acm transactions programming languages systems january 

java tutorial object oriented programming internet 
java series addison wesley 
isbn arnold gosling 
java programming language 
java series addison wesley 
isbn 
sun microsystems 
javabeans technology 
internet splash javasoft com beans sun microsystems 
javabeans bridge activex 
internet splash javasoft com beans bridge perl language documentation 
internet 
www cheque uq edu au misc perl perl html simon 
waite publishers 
sun microsystems 
remote method invocation specification 
internet javasoft com current doc rmi spec rmi intro doc html swedish institute computer science 
sicstus prolog user manual 
kista sweden 
internet www sics se isl sicstus html omicini 
agent communication control logic theories 
topics artificial intelligence proceedings fourth congress italian association artificial intelligence ai ia florence italy october gori soda eds lecture notes artificial intelligence springer verlag heidelberg germany pp 

isbn omicini 
logic tuple spaces coordination heterogeneous agents 
frontiers combining systems proceedings international workshop combining systems nchen germany march baader schulz eds applied logic series kluwer academic publishers boston usa pp 

isbn omicini 
extensible framework development coordinated applications 
coordination languages models international conference coordination italy april ciancarini hankin eds lecture notes computer science springer verlag berlin heidelberg germany pp 

isbn omicini 
designing multi agent systems extensible communication abstraction 
proceedings th workshop formal models agents di italy january 
cesta eds istituto di del cnr rome italy pp 
isbn 
appear lecture notes artificial intelligence springer verlag nd quarter 
omicini 
programmable coordination media 
proceedings coordination berlin germany september 
lecture notes computer science springer verlag berlin heidelberg germany 
appear 

multiple tuple spaces linda 
proceedings parle lecture notes computer science springer verlag 
ciancarini 
distributed programming logic tuple spaces 
new generation computing 
brogi ciancarini 
concurrent language shared prolog 
acm transactions programming languages systems january 
wegner 
interactive foundations computing 
technical report brown university providence ri august 

inside ole 
microsoft press nd edition sun microsystems 
model terms 
internet javasoft com javaspaces js spec js intro doc html sun microsystems 
specifications 
internet javasoft com javaspaces js spec js ops doc html sun microsystems 
transactions 
internet javasoft com javaspaces js spec js doc html sun microsystems 
utilities 
internet javasoft com javaspaces js spec js util doc html sun microsystems 
administering javaspaces 
internet javasoft com javaspaces js spec js admin doc html leblanc mellor crummey fowler 
analyzing parallel program executions multiple views 
journal parallel distributed computing pp 

siegel 
models monitoring debugging tools parallel distributed software 
journal parallel distributed computing pp 

tcl tk interface 
internet 
www tcl tk com dijkstra 
operating sequential processes 
academic press london 
de 
blackboard extensions prolog 
software practice experience vol 
january pp 
john wiley sons omicini 
robot control systems contextual logic programs 
logic programming formal methods practical applications eds elsevier science publisher pp 

isbn omicini 
multi agent framework programming environment autonomous robotics 
proceedings ieee international conference robotics automation icra san diego ca usa may 
ieee computer society press pp 

isbn de 
virtual world brokerage netscape 
clement info ca lp internet art html dahl de 
high level logic programming tools remote execution mobile code agents 
clement info ca html remote art html 
