concept dynamic analysis thomas ball bell laboratories lucent technologies research bell labs com 
dynamic analysis analysis properties running program 
explore new dynamic analyses program profiling frequency spectrum analysis 
show analyzing frequencies program entities single execution help programmers decompose program identify related computations find computations related specific input output characteristics program 
coverage concept analysis 
concept analysis test coverage data computes dynamic analogs static control flow relationships domination regions 
comparison dynamically computed relationships static counterparts point areas code requiring testing aid programmers understanding program test sets relate 
dynamic analysis analysis properties running program 
contrast static analysis examines program text derive properties hold executions dynamic analysis derives properties hold executions examination running program usually program instrumentation 
dynamic analysis prove program satisfies particular property detect violations properties provide useful information programmers behavior programs show 
usefulness dynamic analysis derives essential characteristics precision information dynamic analysis typically involves instrumenting program examine record certain aspects run time state 
instrumentation tuned collect precisely information needed address particular problem 
example analyze shape data structures created program lists trees dags instrumentation tool created record linkages heap allocated storage cells 
dependence program inputs thing dynamic analysis incomplete provides powerful mechanism relating program inputs outputs program behavior 
dynamic analysis straightforward relate changes program inputs changes internal program behavior program outputs directly observable linked program execution 
viewed light dynamic static analysis better termed input centric program centric analysis respectively 
dynamic static analyses complementary techniques number dimensions completeness 
general dynamic analyses generate dynamic program invariants properties true observed set executions 
static analysis may help determine dynamic invariants truly invariants program executions 
cases dynamic static analyses disagree possibilities 
dynamic analysis error cover sufficient number executions 
static analysis error analyzed infeasible paths paths execute 
dynamic analysis examines actual program executions suffer problem infeasible paths plague static analyses 
hand dynamic analysis definition considers fewer execution paths static analysis 
scope 
dynamic analysis examines long program path potential discover semantic dependencies program entities widely separated path time 
static analysis typically restricted scope program analyze effectively efficiently may trouble discovering dependencies distance 
precision 
dynamic analysis benefit examining concrete domain program execution 
static analysis domain order ensure termination analysis losing information start 
abstraction useful technique reducing run time overhead dynamic analysis reducing amount information recorded required termination 
illustrate discuss concepts dynamic analysis program profiles :10.1.1.111.6293
program profile counts number times program entities occur program execution 
example statement level profile counts times statement executes 
profiles recorded different levels objects methods procedures paths branches individual machine instructions 
profiling tools commonplace today compilers operating systems providing accompanying profiling toolsets 
propose new dynamic analyses program profiling frequency spectrum analysis fsa 
idea fsa analyzing frequencies program entities single execution help programmers decompose program identify related computations find computations related specific input output characteristics program 
demonstrate fsa small obfuscated program prints poem twelve days christmas 
case study path profiling technology monitor execution behavior program :10.1.1.116.6366
analysis created version program retains original program profile signature clearly explains operation original program 
coverage concept analysis cca 
show concept analysis applied coverage profiles naturally computes dynamic analogs static control flow relationships domination regions identifying dynamic control flow invariants set executions 
comparison dynamically invariant control flow relationships static counterparts point areas code requiring testing aid programmers understanding code test sets relate 
organized follows 
section presents basic ideas frequency spectrum analysis case study obfuscated program 
section reviews concept analysis shows different ways help understand relationships tests coverage information 
section discusses related 
section concludes 
frequency spectrum analysis section presents ideas frequency spectrum analysis fsa describes analysis help understand internal behavior obfuscated program 
meaning frequencies traditional program profiles performance tuning separate frequently executed parts program frequently parts 
delving bit deeper information program profiles frequencies program entities recorded profile fsa help programmer basic tasks partitioning program levels abstraction finding related computations find computations related specific attributes program input output 
section analysis obfuscated program general observations section 
table shows path profile obfuscated programs execution 
twelve paths executed path static identifier composed procedure name containing path path integer identifier procedure execution frequency shown 
paths sorted ascending order path id frequency path id frequency main main main main main main main main main main main main table 
path profile readable obfuscated program execution 
frequency 
path profile motivate fsa program output code 
section analyze paths frequencies related program output structure 
fsa simple observations frequencies relate program behavior low versus high frequencies 
relative execution frequencies program entities provide clues place hierarchy program abstractions 
example interface procedures sorting module generally called fewer times private procedures module invoke perform sort operation 
objectoriented programs methods implementing high level architectural pattern probably lower execution frequency methods implementing guts algorithm 
immediately see paths main main higher frequencies paths 
indicates paths involved highly repetitive computation 
related frequencies frequency clusters 
fact procedure foo called times may particularly noteworthy 
fact procedures foo bar called times usually mere coincidence 
basic idea related frequencies frequency clusters 
reason frequency clustering may procedure foo calls procedure bar procedure foobar calls foo bar 
explanations frequency cluster 
regardless underlying mechanism created cluster cluster interesting hint programmer dynamic relationships program entities may apparent static program structure 
frequency clusters partition program ways slicing traditional abstraction boundaries entities widely separated program text may related common frequency 
clusters immediately apparent path profile paths main main frequency paths main main frequency 
include stdio main char return main main main main main 
main main de dq nl nl nl nc nl rw ik nl wk nw kk nl nl ld de nl rw nc nw kd nr rl putchar main main main main main ek dc bk fig 

obfuscated program print poem twelve days christmas 
partial output program shown 
specific frequencies 
knowledge characteristics program input output greatly aid fsa 
example output program enumeration records probably program entity frequency size enumeration 
frequencies related input output domain program help programmer identify parts program responsible input output 
idea extended obvious directions 
example look frequencies indicate algorithm suggested 
suggested profiles contain wealth information rarely exploited programmers 
jon bentley series columns books writing efficient programs discusses execution counts tell interesting tales help programmers debug misbehaving programs tune performance behaved programs 
section explore idea detail case study 
case study understanding obfuscated program presents obfuscated program rounds holiday season author received twice 
program takes input produces poem twelve days christmas excerpt appendix 
section show fsa help determine program accomplishes printing poem create new noted special circumstance dynamic analysis static analysis 
information compute dynamic analysis profiles unavailable conventional static analyses 
include stdio main char main main main main main main main putchar main main main main main fig :10.1.1.138.7451:10.1.1.111.6293:10.1.1.111.6293:10.1.1.116.6366

readable version obfuscated program reformatting performing local syntactic substitutions turn expressions statements eliminating dead code 
lines containing calls uniquely numbered brackets 
cated program explains original program works 
restructuring program maintained original program computational signature possible 
possible rewrote program spirit original program substituting radically different piece code place didn happen 
making program readable understand program helpful able read 
program barely readable familiar language 
task reformat code indentation explicit readable rewriting conditional list expressions 
shows result local syntactic transformations 
readable obfuscated program consists function main arguments calls repeatedly 
second argument underscore legal variable name function main truly function update variables 
achieves goal solely values passed 
initial invocation program cause value parameter unix argument main count number arguments command line including name program 
program contains strings shown original program elided large string small string appear encode text poem 
path id frequency condition call lines main main main main main main main call lines main main main main main table :10.1.1.138.7451:10.1.1.111.6293:10.1.1.116.6366
summary twelve executed paths readable obfuscated program 
frequency spectrum analysis reverse engineering task important model mind help guide process 
twelve days christmas counting gifts approach poem program identifying various quantities arise poem natural structure verses days christmas 
unique strings repeated strings poem 
strings common structure day christmas partridge strings ordinals strings second twelfth gifts giving total unique strings 
occurrences presents partridge pear tree occurs verse 
strings printed occurrences common strings ordinals non partridge gifts characters printed output counted unix word count utility wc 
seen frequencies 
recall goal fsa frequencies obtained program profile aid understanding program 
idea execution counts help identify parts program responsible parts poem 
example program element execution count may indicate entity involved control number verses element execution count involved printing characters 
pp path profiling tool ammons ball larus capture intraprocedural path execution counts readable program 
program takes input path profile consider 
table repeats twelve executed paths path profile readable program table additional information 
program path uniquely identified conditions parameters lines path contain procedure calls referred call lines 
lines containing procedure calls code labelled brackets 
path condition procedure call lines path summarized table 
thing apparent table strong correlation path frequency call lines covers 
paths frequencies cover subsets call lines set path frequency greater covers different call line set 
closer examination code paths shows paths cluster main groups separated double lines table detailed path main executed initializes recursion 
paths main main main control printing verses 
particular path main represents verse path main middle verses path main verse 
sum paths frequencies number verses poem 
paths covers different set recursive calls main call lines 
paths helped identify certain calls responsible line verse call line starting inner loop iteration print list gifts call line 
printing single gift call line iterating outer loop call line 
paths main main control printing non partridge gifts verse 
note frequencies paths sum expected analysis poem 
paths inner loop program 
paths main main responsible printing string 
path frequency exact number strings predicted analyzing poem structure 
path main represents initialization passing large string parameter path main represents termination printing string separator 
paths main main print characters string 
path executes times 
paths frequency 
soon see 
anomalous paths main main large frequencies 
examination code reveals path main responsible skipping sub strings large string get intraprocedural paths follow control flow call site entry called procedure 
stay procedure effectively treating procedure call effect control flow 
th sub string 
sub string terminated character 
time th sub string printed linear scan large string done get sub string accounts path main high frequency 
path main scans small string finds character matches current character value argument printed point path main executes 
character positions small string equivalent translation character 
explains paths frequency 
path main initiation search small string find character translation path main performs translation printing character 
path main high frequency due fact small string scanned time character printed 
restructured program knowledge gained fsa manual examination program restructured program produce program shown 
keep recursive structure program intact different functions represent different tasks original program captured clustering paths 
change values relevant text strings list sub strings poem large string translation mapping small string 
original program value represent day christmas 
shifted match poem 
functions new program corresponding closely clusters paths identified old program main path main outer loop paths main main main inner loop paths main main print string paths main main output chars paths main main translate put char path main skip strings path main 
new program exact output old performance disadvantages 
show sense captured essence original program path profiled new program 
path profile new program shown table paths sorted ascending order frequency similar original profile table minor differences due restructuring 
summary known folk theorem computer science program transformed semantically equivalent program consisting single recursive function 
obfuscated days christmas program difficult understand 
parameter function main include stdio static char strings original set strings static char translate translation mapping define define original indices various strings enum onthe twelfth char int char skip strings separator return negative value return return find character translation buffer matching output translation void char char trans trans putchar trans trans void char return translate skip nth string print void printstring int strings print list gifts void int int printstring void int printstring onthe printstring ordinal ranges printstring day christmas 
print list gifts void main fig 

restructured twelve days christmas program 
path id frequency path id frequency main skip strings outer loop skip strings outer loop output chars inner loop translate put char inner loop skip strings output chars translate put char print string table 
path profile restructured program 
takes role program counter parameters overloaded different interpretations depending context 
fsa help separate set functions single function implements 
small case study illustrates essential features fsa low versus high frequencies partition program levels abstraction example printing verses compared scanning strings frequency clusters identify related computations program example paths comprising outer inner loops specific frequencies find computations related program observed behavior example paths responsible printing substring character 
analysis clearly leaves questions unanswered 
complex obfuscated program quite small 
fsa scale larger programs accompanying larger profiles 
number issues 
obfuscated program direct relationship attributes program output program behavior 
larger programs containing complex intermediate computations hope find direct relationships 
size profile issue generally lot noisy data surrounding data interested 
feel basic observations fsa low vs high frequency frequency clusters special frequencies continue useful larger programs experience show 
shortcoming case study obfuscated program inputs 
appearance frequency correlations different executions absolute frequency values different provide stronger evidence semantic relationships parts program 
section discuss approach help analyze multiple execution profiles compare relationships program executions static counterparts program source text 
coverage concept analysis previous section demonstrated analysis frequency spectrum single program execution help understanding decomposing program 
done executions examined 
section considers question restricted commonly type profile coverage profile records test run entities executed frequencies 
main result section show concept analysis applied coverage profiles naturally computes dynamic analogs static control flow relationships domination regions identifying dynamic control flow invariants set executions 
additionally comparison dynamically invariant control flow relationships static counterparts point areas code requiring testing aid programmers understanding code test sets relate 
concept analysis test coverage concept analysis technique identifying groups objects common attributes 
input concept analysis binary relation objects attributes 
relation represented boolean valued table rows represent objects columns represent attributes 
entry table true object attribute false 
purposes objects rows tests attributes columns program entities test may cover procedures statements branches paths program 
shows example test coverage table input concept analysis 
table shows coverage tests implementation red black tree data structure form balanced binary tree 
procedure names shortened table compact 
testing domain pair set tests set program entities concept test covers entities test outside covers entities equivalently concept entity covered test entity outside covered test stated way concepts determine maximal sets tests covering identical entities maximal sets entities covered identical tests 
concepts computed variety algorithms 
worst case table size rows columns may concepts worst case running time batch algorithm computes concepts exponential practice concept lattices concepts concepts 
table gives rise concepts shown 
concept tests procedures add rem common 
furthermore set procedures exactly tests common 
pair add rem procedures test add rem min succ concept tests procedures add rem min succ add rem min succ add rem add rem add rem add rem tests procs add rem min succ tests procs add rem min succ tests procs add rem tests procs add rem tests procs add rem tests procs add rem tests tests proc min succ tests proc tests proc proc add rem fig 

partial procedure coverage tests red black tree implementation concepts coverage information induces concept lattice full labelling tests procedures concept lattice minimal labelling 
concept set maximal set tests common entities add rem concept illustrates 
concepts ordered set inclusion tests entities 
set concepts forms complete partial order partial order referred concept lattice 
shows concept lattice concepts node concept 
concept arrow lattice 
concept labelled associated set tests set entities 
number important properties concept lattice test concept concept greater higher lattice 
furthermore entity concept lesser concept lower lattice 
running example test concept concepts 
procedure concept concepts 
test unique concept appears denoted 
similarly entity unique greatest concept appears denoted 
concept concept containing test 
similarly greatest concept containing procedure 
shows concept lattice labelled test entity appears exactly 
concept labelled test 
likewise concept labelled entity 
term concept lattice refer concept lattice labelled fashion 
information input table recovered concept lattice 
concepts control flow invariance section shows concept analysis test vs entities table provides dynamic analogs static control flow relationships domination regions 
concept analysis tests vs entities identifies dynamic control flow invariants entities set tests 
invariants dynamic guaranteed hold executions hold set observed executions tests 
comparison dynamic static control flow invariants program help develop new tests 
domination control flow implication domination binary relations control flow entities program identify execution entity implies execution 
consider control flow entities entity said dominate entity path program entry includes entity said postdominate entity path program exit includes entity entity dominates entity test covers cover postdominates case test covers cover execution entity statically implies execution entity dominates postdominates partial ordering concepts concept lattice provides equivalent control flow implication 
entity concept greater equal execution dynamically implies execution test covers covers example consider procedure min labels concept 
concept contains procedure greater test covers min covers 
lattice shows test executes min 
regions execution entity implies execution execution entity implies execution said occupy control flow region 
test separate execution entities execute 
regions partition set control flow entities program static domination relations defined 
precisely entities region dominates postdominates control flow implication concept lattice identifies entities execute set tests 
execute set tests 
dynamic region 
example concept lattice procedures min succ greatest concept execute 
procedures add rem share concept 
procedures occupy dynamic region 
comparing dynamic static information section shows comparison static dynamic control flow relations defined previous sections useful aid development new tests 
suppose program run set tests pair elements dynamically implies execution statically imply execution 
suppose different static regions 
may test covers entity cover entity hand execution statically implies execution occupy static region point trying find test covers cover example procedures min succ execute 
procedures different static regions red black tree program 
fact test separates execution 
particular type region known weak regions strong regions identify code executed number times 
example shows concept analysis provides intermediate point entity path coverage criteria 
entity coverage criteria statement branch coverage consider coverage entities isolation 
path coverage criteria consider sequences entities subsumes entity criteria infeasible paths greatly complicate determining sufficient level coverage concept analysis identifies entities execute set tests execution implies execution entities 
comparing set coverage information static regions program programmer determine entities execution try separate 
related dynamic discovery program invariants closely related 
instruments program record values variables take executions 
information input invariant detection engine checks number invariants variable constant value takes small number values variables value bounded range restated discover logical invariants set program executions types logical invariants identified input analysis engine 
frequency spectrum analysis identifies control flow invariants execution entities execute number times concept concept analysis test coverage information identifies control flow invariants set program executions 
control flow invariants may imply invariants ernst machinery discovers vice versa 
example control flow branch evaluates true control flow information implies variable value point program 
value invariance control flow invariance techniques discover quite complementary 
dynamic analysis exploring program executions concentrates dynamic differencing 
idea simple 
execution program generates different profile spectrum different set entities covered 
set course dependent input program reads interactions environment 
carefully controlling inputs program environment executes perturbing slightly observing differences sets covered entities determine parts code affected perturbations 
wilde proposed technique way determine code telephone call processing system responsible different call features caller id call waiting 
case different call scenarios generate different profile slight modifications set calling features enabled 
reps showed dynamic differencing find code dependent dates simply changing parts input program related dates years 
wilde reps techniques mainly program coverage 
reps proposed frequency information counts coverage refine analysis 
concept analysis test vs coverage information dynamic differencing test coverage taken extreme 
concept analysis provides full factoring coverage information exposes differences tests common 
addition computes number useful relations control flow correlation test subsumption single framework 
research done applying concept analysis aide understanding restructuring programs 
aware applies concept analysis machinery static relationships program procedure uses variable class inherits class machinery applies dynamic relationship test covers entity order help understanding execution behavior programs set tests 
general idea frequency spectrum analysis dynamic behavior programs help construct models behavior 
basic idea explored related settings 
example area formal methods techniques finite state machine synthesis proposed constructing finite state models set traces observed program behavior 
cook wolfe techniques reverse engineering software processes related techniques develop models traces multi process programs 
arena object oriented programs number efforts explored bridge gap programmer models oo behavior happens oo program execution 
efforts typically instrument oo program record message sends information gui help programmers understand traces build models 
shown frequency spectrum analysis concept analysis program profiles aid tasks program comprehension program restructuring new test development 
just program databases static program structure aided programmers testers jobs databases dynamic program behavior gathered history program provide valuable software production cycle 
questions dynamic data collected stored tasks data analysis support matters investigation 
jim larus comments earlier drafts 

ammons ball larus 
exploiting hardware performance counters flow context sensitive profiling 
acm sigplan notices june 
proceedings sigplan conference programming language design implementation 

ball 
region 
computing control dependences near linear time reducible control flow 
acm letters programming languages systems december 

ball larus 
optimally profiling tracing programs 
acm transactions programming languages systems july 

ball larus 
efficient path profiling 
proceedings micro pages december 

bentley 
writing efficient programs 
prentice hall englewood cliffs 

bentley 
programming pearls 
addison wesley reading ma 

biermann feldman 
synthesis finite state machines samples behavior 
ieee transactions computers june 

cook wolf 
discovering models software processes eventbased data 
acm transactions software engineering methodology july 

cook wolf 
event detection concurrency 
sixth acm sigsoft symposium foundations software engineering pages november 

davey priestley 
lattices order 
cambridge university press 

ernst cockrell griswold notkin 
dynamically discovering program invariants support program evolution 
st international conference software engineering pages los angeles ca may 

godin missaoui 
incremental concept formation algorithms galois concept lattices 
computational intelligence 

dean jerding john stasko thomas ball 
visualizing interactions program executions 
proceedings th international conference software engineering pages may 

larus ball 
rewriting executable files measure program behavior 
software practice experience february 

reps ball das larus 
program profiling software maintenance applications year problem 
proceedings esec fse sixth european software engineering conference fifth acm sigsoft symposium foundations software engineering lecture notes computer science zurich switzerland september 
springer verlag 

michael thomas reps identifying modules concept analysis 
international conference software maintenance pages bari italy october 

snelting tip 
reengineering class hierarchies concept analysis 
sixth acm sigsoft symposium foundations software engineering pages november 

gregor snelting 
reengineering configurations mathematical concept analysis 
acm transactions software engineering methodology april 

waddell ashley 
visualizing performance higher order programs 
proceedings st workshop program analysis software tools engineering acm sigplan notices july 

norman wilde 
faster reuse maintenance software reconnaissance 
technical report serc tr software engineering research center cse university florida cis department gainesville fl july 
appendix day christmas true love gave partridge pear tree 
second day christmas true love gave turtle partridge pear tree 
twelfth day christmas true love gave twelve eleven piping ladies dancing swimming laying gold rings calling birds french hens turtle partridge pear tree 
fig 

partial output obfuscated program 
