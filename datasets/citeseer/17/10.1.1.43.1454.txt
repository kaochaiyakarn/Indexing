database replication techniques parameter classification matthias fernando pedone andr schiper bettina kemme gustavo alonso partement de syst mes de communication software technology laboratory swiss federal institute technology lausanne hewlett packard laboratories ch lausanne switzerland palo alto ca usa data replication increasingly important topic databases deployed clusters workstations 
challenges database replication introduce replication severely affecting performance 
difficulty current database products lazy replication efficient compromise consistency 
alternative eager replication guarantees consistency existing protocols prohibitive cost 
order clarify current state art open new avenues research analyses existing eager techniques key parameters 
analysis distinguish classes eager replication protocols category discuss requirements capabilities cost 
contribution lies showing eager replication feasible spelling different aspects database replication protocol account 

distributed systems community software replication seen cost effective way increase availability 
database community replication performance fault tolerant purposes introducing constant trade consistency efficiency 
fact commercial research databases asynchronous replication model called lazy update model changes introduced transaction propagated sites transaction committed 
results minimal overhead inconsistencies copies may arise 
characteristic trade necessarily imply consistency important databases 
known users designers inconsistencies created lazy replication techniques difficult solve 
known incon research supported epfl ethz dragon project institute information systems swiss federal institute technology rich ch rich switzerland mail dragon epfl ch eliminated synchronous replication models called eager replication transaction copies commits 
unfortunately means trivial design efficient eager replication protocols 
practice serious limitations traditional data replication techniques deadlocks overhead lack scalability unrealistic assumptions database designers regard eager replication feasible option 
efficient eager replication protocols started appear 
new protocols group communication primitives results obtained far indicate approach solve problems associated eager data replication 
efforts main context 
years part dragon project focused enhancing database replication mechanisms advantage properties group communication primitives 
shown group communication embedded database part transaction manager guarantee execution transactions replicated data :10.1.1.56.3906
shown overhead associated group communication hidden cost executing transactions greatly enhancing performance 
results prove importance finding synergies distributed systems database replication techniques need common understanding models communities order address complex research issues 
part systematically explored space eager database replication strategies 
results obtained attempt clarify spectrum possible eager replication protocols point new directions research 
novel aspects classification schema integrates protocols databases distributed systems 
existing taxonomies data replication techniques take account broad spectrum replication schemes including weak consistency availability properties including techniques group communication considering simple cases 
classification concise existing attempts emphasises synergy communication transaction management 
benefits classification effort numerous 
allowed identify key components database replication protocol 
second led better understand role played component influence nature protocol 
strategies consider described literature 
third classification forms basis quantitative comparison various replication strategies identified endeavour currently engaged 
quantitative comparison shed light different aspects eager replication role transaction management group communication play implementing eager replication protocols 
rest structured follows 
section describes replicated database architecture system model 
section introduces classification parameters 
section discusses various replication techniques obtained combining parameters 
section describes role impact parameter concludes 

system model architecture consider set database clients set sn database servers see 
database fully replicated server si server contains copy database 
client connects database servers say si execute transaction 
transactions sequences read write operations followed commit abort operation 
transactions contain read operations called queries transactions contain read write requests called update transactions 
client connected database server si sends operations transaction si execution 
transaction submitted operation operation single message 
case called interactive transaction submitting operation client waits answer server results read request sends operation 
sending transaction single message called service request call procedure stored database servers 
transaction completed server si sends transaction outcome client connection client si closed 
transaction submitted operation operation outcome commit abort confirmation 
case service request transaction outcome includes results request 
si fails execution transaction transaction aborts 
case client retry execution connecting different database server sj server si si recovers 
correctness criterion transactions consider copy serializability 
ensures interleaved execution transactions equivalent serial execution transactions single copy database 
furthermore concentrate eager replication techniques 
eager replication updates propagated replicas boundaries transactions conflicts detected transaction commits 
approach provides client request client request client request server server network server server 
system architecture data consistency straightforward way 
database servers communicate pointto point communication 
provided group communication systems 
consider group communication primitives differ parameters reliability message delivery ordering 
regarding delivery guarantees reliable broadcast ensures message sent correct database server delivered correct database server eventually delivered correct database servers 
uniform reliable broadcast ensures message delivered server correct fail directly delivering message eventually delivered correct database servers 
regarding ordering semantics ordering requirements messages delivered arbitrary orders different sites total order delivery messages database servers deliver messages deliver order 
semantics provided called total order broadcast called atomic broadcast 

classification criteria eager replication protocols organised parameters determine nature properties protocol cases performance 
parameters server architecture primary copy update changes operations propagated servers operation transaction basis transaction termination protocol voting non voting 

server architecture key parameter consider transactions executed place 
gray identified possibilities primary copy replication requires specific site primary copy associated data item 
update data item sent primary copy processed executed analysed establish serialisation order 
primary copy propagates update results sites 
shown primary copy approaches closely resemble distributed systems known passive replication 
expected primary copy approaches introduce single point failure bottleneck 
limitations solved making protocol complicated 
primary crashes servers takes role primary requires election protocol 
similarly avoid bottlenecks databases single site primary data items 
data partitioned different sites primary different data subsets 
follows ignore aspects protocols orthogonal discussion 
update replication allows updates data item performed system 
updates concurrently arrive different copies data item happen primary copy 
property update approaches graceful dealing failures election protocol necessary continue processing 
similarly principle update introduces performance bottlenecks 
update may require site doing primary copy sites 
careful design update may affect performance primary copy approaches 

server interaction second parameter consider involves degree communication database servers execution transaction 
determines amount network traffic generated replication algorithm overhead processing transactions 
parameter expressed function number messages necessary handle operations transaction termination 
type primitive exchange messages play role determining properties protocol serialisation point view 
consider cases constant interaction corresponds techniques constant number messages synchronise servers transaction independently number operations transaction 
typically protocols category exchange single message transaction grouping operations transaction single message 
linear interaction typically corresponds techniques database server propagates operation transaction operation basis 
operations sent sql statements log records containing results having executed operation particular server 

transaction termination parameter consider way transactions terminate atomicity guaranteed 
distinguish cases voting termination requires extra round messages coordinate different replicas 
round complex atomic commitment protocol phase commitment protocol pc simple single confirmation message sent site 
non voting termination implies sites decide commit abort transaction 
non voting techniques require replicas behave deterministically 
restrictive may appear glance determinism affects transactions serialised respect 
transactions operations conflict executed different orders different sites 
issues related determinism databases communication primitives studied detail scope 

plethora replication techniques section explore combinations result classification parameters section 
case general framework replication techniques fit combination parameters described 
existing replication techniques matching combination listed 
combination requirements needed build replication technique fulfilling classification criteria 
requirements expressed communication infrastructure database system server 
requirements communication system usually ordering uniformity constraints delivery messages database servers 
database requirement determinism 
server interaction linear constant server architecture update primary backup 
different techniques summarises different classification parameters 
entry table represent possible combination parameters 
combination section discussing combination indicated 
determinism point 
important notion describing non voting replication techniques determinism 
different replica communicate check reached serial order need behave deterministic way point time ensure copy serialisability 
define determinism point point execution transaction processing deterministic 
formally determinism point dp transaction operation transaction operation dp executes deterministic way 
means dp executed execution rest transaction deterministic 
main implication point reached position transaction serial history determined 
notion determinism point related notion serialisation point 
serialisation points sp enforce strict ordering database system 
definition sp transaction executes sp transaction serial history 
words serialisation point transaction executed position transaction serial history known fixed 
serialisation point determinism points 
reverse true 
voting non voting voting transaction termination note determinism point property local database system replica depending form transaction accepted server type concurrency control database server different determinism points instance transaction dp dp commit dp abort 
update update techniques clients send requests server 
server contacted act delegate requests submitted client 
delegate process requests synchronise servers ensure copy serializability 
update constant interaction non voting techniques description shows basic structure replication technique 
discussion follows assume network interaction servers 
simplification description clearer leave important detail 
protocols category execute steps transaction starts delegate server 
transaction processed non deterministic way 
determinism point reached 
transaction sent servers atomic broadcast primitive 
processing continues replicas deterministic way 
replica terminates transaction way 
transaction processing determinism point delegate server server interaction total order broadcast server processing deterministic processing deterministic transaction transaction 
update constant interaction non voting 
previous works update constant interaction non voting model divided determinism point placed 
point determinism transaction transaction processing deterministic role delegate server simply forward transaction total order broadcast primitive step description really apply 
delegate simply acts proxy client contacting servers process client request 
approach closely correlates active replication 
early example approach 
technique described uses total order broadcast early determinism point extended certain forms optimistic transaction execution 
techniques determinism point transaction processing called certification techniques :10.1.1.56.3906
case transaction handled nondeterministic way delegate stage processing certification deterministic 
certification stage executed sites decides transaction committed aborted 
information read write operations sent sites order detect conflicts certification phase 
snapshot isolation serializability avoid conflicts read write operations certification phase restricted write operations 
cases certification phase deterministic 
requirements 
discuss correctness distinguishing transaction isolation copy serializability transaction atomicity databases commit transaction 
independently determinism point lies mechanism guarantee copy serializability 
total order broadcast acts guideline sites 
site guarantees local serialisation order follow total order sites produce serialisation order see total order 
differences protocols lie determinism point 
protocols place determinism point transaction total order suffices 
protocols place determinism point transaction things bit complicated 
particular confronted situations transaction needs aborted delegate server abort transactions seen sites 
protocol ensure soon transactions seen sites problems scheduling sites aborting transaction 
related techniques category need distributed deadlock detection system 
transactions sent step total order broadcast locks transaction acquired atomically order sites preventing deadlocks 
transaction atomicity enforced uniform reliable broadcast messages deterministic behavior different servers 
guarantees server delivers message commits transaction server deliver message uniformity commit transaction determinism 
discussion 
determinism point transactions usually implies datasets transactions known advance stored procedures 
sent sites invocation procedure 
follows sites execute procedure deterministically voting phase 
limitations approaches making sites completely deterministic difficult practice 
determinism points transactions feasible 
require know transactions advance implemented deferring writes transactions executing transaction shadow copy 
fact determinism point comes transaction implications 
main degree optimism execution 
servers accept transactions abort 
tradeoff early determinism points abort rate 
having determinism point early means low aborts due conflicts 
having point late implies having higher chances conflicts 
intermediate solutions determinism point middle transaction compromise 
way implementing solution execute reads transaction writes atomic deterministic step 
case determinism point write operation 
update constant interaction voting techniques description 
shows basic structure replication technique category 
technique similar previous section interactions done communication phase 
additionally final voting phase executed transaction execution ensure replicas agree outcome 
execution done way transaction processing delegate server server interaction broadcast processing processing server voting transaction transaction 
update replication constant interaction voting transaction starts delegate server 
transaction processed non deterministic way 
transaction broadcast servers 
processing continues replicas 
voting termination phase takes place 
replica terminates transaction voting protocol 

example technique delegate server broadcasts transaction sites immediately submitted total order broadcast total order derived synchronised clocks 
total order guideline site transactions 
final voting phase ensure atomicity case different types failures 
failures occur site pc protocol needed 
example constant interaction voting serializability protocol 
protocol transaction locally executed delegate site sent sites total order broadcast primitive 
delegate site decide transaction commit abort 
situation leading abort due serialisation problems local reads global writes seen sites delegate site needs communicate decision sites 
means voting pc protocol single message indicates delegate server committed aborted transaction 
consequence delegate site choice commit abort transaction unilaterally sites behave deterministically sense obey commit abort decision delegate 
third example optimised form pc described 
protocol write operations deferred transaction phase pc vote request contains transaction updates 
participants protocol respond vote obtain locks updates 
respond transaction aborted 
case interaction enhanced version pc protocol 
requirements 
principle protocols type form broadcast primitive 
type broadcast primitive determines voting phase 
primitive guarantee sites voting phase pc part phase discrepancies sites resolved 
furthermore distributed deadlocks occur resolved 
broadcast totally ordered requirements similar section need global deadlock detection 
atomicity guaranteed depends protocol 
pc guarantees atomicity 
primitive broadcasting transaction uniform 
discussion 
having voting phase relaxes determinism requirements database servers 
practice complete determinism database server difficult achieve protocols include voting phase form 
limited form determinism total order broadcast considerably simplifies protocols 
total order broadcast help decrease conflicts having voting phase consisting complete atomic commitment allows relax requirements total order uniformity 
weaker forms total order time total order total order condition maintained time performance failures occur order delivery happen 
performance failures detected corrected commit time advantage voting phase 
update linear interaction non voting techniques description 
category somewhat misleading 
implies round fate transactions agreed 
protocols fully deterministic 
sending operations time requires sites treat exactly way 
delegate site indicate transaction finished 
implies termination message 
assuming termination message voting general structure techniques category outlined transaction starts delegate server 
operation sent servers atomic broadcast 
operation executed servers 
items repeated transaction ends 
delegate sends termination message indicate transaction 
transaction total order broadcast processing processing operation operation delegate server total order broadcast server total order broadcast processing transaction processing operation transaction operation 
update linear interaction non voting 
example techniques 
operation reads included broadcast uniform total order sites sites behave deterministically order react identically operation 
techniques category similar replicated persistent objects 
requirements 
voting phase atomicity guaranteed sending operations uniform reliable broadcast 
copy serializability result local concurrency control mechanism site determinism sites 
sites fully deterministic deadlocks assumed resolvable deterministic fashion 
discussion 
technique major drawback requiring absolute determinism sites strong requirement 
addition considerable network overhead operation results totally ordered broadcast 
general technique pursued literature viable option 
update linear interaction voting techniques description 
form database replication technique studied literature 
variations best known read write technique 
shows interactions techniques category transaction starts delegate server 
operation broadcast quorum sites 
operation executed quorum 
items repeated transaction ends 
voting protocol executed 
replica terminates transaction voting protocol 

category includes traditional database replication protocols read write write quorums 
effort area devoted provide different ways build quorums 
surveys early solutions 
approaches mainly optimise quorum sizes communication costs analyse trade quorum sizes fault tolerance 
multicast primitives different ordering semantics 
authors propose algorithms reliable multicast causal multicast transaction broadcast processing processing operation operation delegate server broadcast broadcast server processing processing operation operation transaction voting transaction 
update linear interaction voting require atomic commitment protocol guarantee serializability 
requirements 
copy equivalence achieved executing read operation read quorum replicas write operation write quorum 
site follows local concurrency control protocol guarantees serializability typically phase locking timestamp algorithms 
atomicity guaranteed pc protocol voting phase 
discussion 
technique understood 
spite amount invested technique relevant practice 
reason high overhead linear number messages proven significantly limit scalability due deadlocks 
addition voting phase involves complete atomic commitment client gets response replica committed changes result long response times 

primary copy primary copy techniques clients send requests particular server 
server primary 
server executing transactions conflicts servers 
thing assured primary system time 
problem orthogonal general architecture discussed 
primary copy approach widely databases minimise conflicts transactions executed replicated data 
refer sites primary copy backups backups install changes sent primary 
site primary subset data backup data 
site called active backup 
site primary data called passive backup 
backup replication databases 
database techniques classified dimensions atomicity transactions safe safe recovery time hot cold standby 
example hot standby tandem remote data facility server primary uses single backup computer secondary backup 
normal operation client sends requests primary log records generated primary sent backup immediately applied 
backup exact replica primary allows backup take immediately failure primary 
secondary backup immediately install changes need primary fails 
takes time delay time primary fails time backup take 
reason backup apply changes arrive mechanism called cold standby 
achieve consistency normal mode operation follows transaction takes place primary log records sent secondary transaction applies log records secondary pc protocol guarantee combined atomicity transactions 
note participants involved primary backup optimisations pc implemented 
pc approach known safe similar aspects safe case 
contrary safe policy safe policy require primary wait secondary 
commits transaction independently 
course risk data loss backup takes practice safe policy preferred safe policy due lower overhead 
algorithms maintenance remote copies safe safe policies discussed respectively 
primary copy constant interaction non voting description 
techniques category generally correspond cold standby scenarios 
protocols general outline see transaction processing primary server server interaction fifo broadcast server transaction processing deterministic transaction 
primary copy constant interaction non voting transaction executed primary 
transaction terminates corresponding log records sent backups 
primary commits transaction waiting backups install changes 
backups eventually install changes 
concrete nature protocol depends type broadcast primitive 
simplest form protocol fifo delivery order ensure transaction changes installed backup order executed primary 
requirements 
case passive backups long transaction changes installed order primary backups consistently reflect happened primary 
primary sends changes fifo order producing correct histories backups 
holds case active backups long transactions access data executing site primary 
care taken transactions allowed read data executing site primary transaction distributed update data different primaries 
case scenario similar update server architectures primaries send changes fifo order total order necessary 
discussion 
lacking voting phase type protocols naturally cold standby primary way waiting secondaries apply changes 
primary implement safe approach committing transaction communication system guarantees transaction delivered backups 
ensures protocol safe 
primary commits transaction waiting protocol safe 
backups passive installing changes sent primary determinism simply requires install changes order arrive primary 
backups active executing transactions behalf rules prevent inconsistencies 
rules summarised follows local serialisation order contradict order remote transactions arrive 
ensuring sites produce conflict equivalent histories 
primary copy constant interaction voting description 
voting phase allows ensure primary backups install updates 
safe property achieved independently voting phase point voting phase atomicity purposes 
enforce hot standby behaviour see transaction processing primary server server interaction broadcast processing processing server voting transaction transaction 
primary copy constant interaction voting transaction executed primary 
transaction terminates corresponding log records broadcast backups 
primary initiates pc protocol 
transaction installed committed sites 
requirements 
compared primary copy constant interaction non voting requirements change voting phase 
primary waits backups installed transaction system hot standby 
discussion 
nature broadcast depends achieved 
principle voting phase way done pc requirement broadcast primitive transaction sent backups 
problem transaction abort pc 
pc greatly optimised synchronisation point guarantee atomic commitment 
open research question balance aspects terms cost overhead 
backups active pc allows minimise scheduling constraints 
experience shows minimising constraints results high abort rates 
probably best total order broadcast locally follow delivery oder avoid unnecessarily high abort rates 
primary copy linear interaction non voting description 
waiting transaction ends order propagate changes causes long response times primary waits sites safe hot standby 
protocol faster backups parallel primary 
order primary sends operations executed allowing backups start doing 
voting phase involved protocol follows see transaction broadcast processing processing operation operation primary server broadcast server broadcast processing transaction processing operation transaction operation 
primary copy linear interaction transaction starts primary 
read operations executed locally 
results write operations broadcast backups 
termination message indicates transaction 
requirements 
backups receive operations transactions careful order changes installed 
case passive backups primary produces correct histories sends operations serialisation order fifo delivery guarantee correctness 
general sent backups log records log records produced serialisation order primary need extra effort ensure property 
backups active transactions may access data primaries determinism achieved relying total order 
total order correctness assured 
termination message sent uniformly sites primary wait message received order ensure safe behavior 
protocol safe 
voting protocol cold standby depends backups install changes save disk 
discussion 
sending operation executed primary allows backups parallel introduces significant message overhead 
transactions typically update operations 
sustain throughput transactions second communication system capable supporting traffic broadcasts second system 
practice biggest bottleneck type protocols 
primary copy linear interaction voting description 
purpose introducing voting phase ensure hot standby behaviour transaction broadcast processing processing operation operation primary server broadcast broadcast server processing processing operation operation transaction voting transaction 
primary copy linear interaction voting transaction starts primary 
read operations executed locally 
results write operations broadcast backups 
primary starts pc protocol 
transaction installed committed sites 
requirements 
compared non voting correctness affected voting phase 
active backups free abort transaction propagate decision pc phase 
discussion 
pc transaction removes requirements broadcast primitive 
fact protocol similar traditional replication protocols discussions section context voting techniques apply 

discussion goals classification effort identify trade various replication techniques order identify promising approaches terms scalability efficiency 
lazy techniques ensure copy serialisability eager techniques ensure copy serialisability usually compared comparison expensive eager technique update linear interaction voting phase 
comparison lazy eager techniques unfair 
lazy technique perform better eager technique involve message overhead execution transaction 
eager replication efficient currently implemented commercial systems adequate techniques applied 
believe eager replication consistency guarantees flexibility attractive alternative lazy replication 
classification provided shows different alternatives compare allows draw clear 

server architecture primary copy vs update pointed update elegant solution theory introduce bottlenecks 
may come surprise replication protocols practice primary copy techniques 
reasons 
update necessarily distribute load sites 
data replicated sites need perform updates anyway 
means significant amount read operations load read operations local system scale server nodes added 
way improve performances update preprocess operations site send results sites 
way processing need done 
mechanisms place update attractive solution robust failures facilitates distributing load sites 

server interaction constant vs linear number messages exchanged transaction key aspect replication protocol 
pointed sending message operation quickly lead unacceptable traffic rates 
addition messages need processed site significantly increases load 
operations arrive different points time coordinating execution result correct complicated 
rule thumb say messages exchanged transaction better 
instance protocols linear interaction combination update largely infeasible databases 
exactly type protocols heavily criticised database community unrealistic 
primary copy case things bit different consequences messages exchanged negligible 
particular sending updates message transaction help propagate changes transactions commit sending updates operation basis implies operations aborted contribute overhead 
exchanging message transaction introduces problems 
protocols especially service requests data accessed known advance 
case implementation straightforward abort rates small 
ordinary transactions form optimism execute transaction delegate server determine serialisation order 
conflict rates high optimism result high abort rates 

transaction termination voting vs techniques non voting techniques demanding terms determinism requirements voting techniques 
protocols server independently guarantee serialisation servers 
typical way total order guideline 
general transactions conflict serialisation order indicated total order 
depending protocol sites need known different things order ensure global correctness voting 
protocols transaction read operations included sent 
protocols site performs equivalent global scheduling system long scheduling deterministic correctness guaranteed 
determinism implemented total order transactions 
terms voting techniques considered possibilities pc confirmation message sent delegate primary copy indicate transaction committed aborted 
confirmation message needed delegate server primary copy transaction unilaterally decide outcome transaction 
remote sites behave deterministically way able obey commit abort decision delegate server 
pc server reject transaction relaxing determinism requirements chance resolve things pc 
unfortunately shown cases coordination overhead higher conflict abort deadlock rates quickly bottleneck 
additionally voting provide atomicity take place sites completely executed transaction 
means delegate server waits slowest replicas finish processing returning result client increasing transaction response times considerably 

comparing characteristics families protocols drawn 
update potential distributing load sites 
second linear interactions significant source overhead realistically speaking options left approaches constant interactions 
important classification efforts 
database designers considered protocols ue ci ue ci nv categories 
promising approaches eager replication primary copy active backups similar behavior demand update 
results support claim strengthen current developments show reduce overhead group communication 
regarding determinism judicious choice determinism point helps designing protocols minimal additional cost possibility voting strategies determinism requirements greatly reduced 
part currently developing tools allow quantitative evaluation different categories analysed 
helps better understand cost different approaches 
parallel continue update constant interaction voting 
update constant interaction non voting 
exploring space solutions included ue ci ue ci nv categories 
agrawal alonso el abbadi 
exploiting atomic broadcast replicated databases 
proceedings europar europar passau germany 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
bernstein shipman 
concurrency control system distributed databases sdd 
acm transactions database systems march 
goyal hsiao 
efficient scheme providing high availability 
proceedings sigmod international conference management data pages may 

robustness crash distributed database non sharedmemory multi processor approach 
proceedings th vldb conference singapore 
breitbart garcia molina silberschatz 
overview multidatabase transaction management 
vldb journal june 
ceri keller samarati 
classification update methods replicated databases 
technical report cs tr stanford university computer science departement may 
chen pu 
structural classification integrated replica control mechanisms 
technical report cucs columbia university departement computer science new york ny 
cristian fetzer 
timed asynchronous distributed system model 
ieee transactions parallel distributed systems june 
davidson garcia molina skeen 
consistency partitioned networks 
acm computing surveys september 
fu cheung 
transaction replication scheme replicated database node autonomy 
proceedings international conference large databases santiago chile 
garcia molina 
epoch algorithms disaster recovery 
proceedings th vldb conference pages brisbane australia 
gray shasha neil 
dangers replication solution 
proceedings acm sigmod international conference management data pages montreal canada june 
sigmod 
gray reuter 
transaction processing concepts techniques 
data management systems 
morgan kaufmann publishers san mateo ca usa 
guerraoui schiper 
software replication fault tolerance 
ieee computer april 
ibm new orchard road ny usa 
db replication guide june 
number sc 
information systems research group eth rich laboratoire de syst mes exploitation lse epf lausanne 
dragon database replication group communication may 
www inf ethz ch department research dragon html 
kemme alonso 
new approach developing implementing eager database replication protocols 
acm transactions database systems 
appear 
kemme alonso 
suite database replication protocols group communication primitives 
proceedings th international conference distributed computing systems icdcs amsterdam netherlands may 
kemme pedone alonso schiper 
processing transactions optimistic atomic broadcast protocols 
proceedings international conference distributed computing systems austin texas june 
kumar segev 
cost availability tradeoffs replicated concurrency control 
acm transactions database systems march 
lindsay selinger gray lorie price wade 
notes distributed databases 
technical report rj ibm san jose research laboratory 
little shrivastava 
understanding role atomic transactions group communications implementing objects 
eighth international workshop persistent object systems design implementation august 
lyon 
design considerations replicated database systems disaster protection 
proceedings ieee compcon 
lyon 
tandem remote data facility 
proceedings ieee compcon 
oracle oracle parkway city ca 
oracle itm advanced replication november 
oracle technical white 
pedone 
database state machine group communication issues 
phd thesis cole polytechnique rale de lausanne switzerland 
pedone guerraoui schiper 
transaction reordering replicated databases 
proceedings th symposium reliable distributed systems srds durham north carolina usa october 
pedone guerraoui schiper 
exploiting atomic broadcast replicated databases 
proceedings europar europar september 
pedone schiper 
optimistic atomic broadcast 
proceedings th international symposium distributed computing disc september 
garcia molina 
reliable scheduling tmr database system 
acm transactions computer systems february 
setia tripathi 
fault tolerant algorithm replicated data management 
ieee transactions parallel distributed systems december 
schneider 
implementing fault tolerant services state machine approach tutorial 
acm computing surveys december 
agrawal el abbadi 
broadcast primitives replicated databases 
proceedings th ieee international conference distributed computing systems icdcs pages amsterdam netherlands may 
terry petersen theimer 
case non transparent replication example bayou 
bulletin technical data engineering december 

optimal replica control protocols exhibit symmetric operation availabilities 
proc 
int 
symp 
fault tolerant computing ftcs 
thomas 
majority consensus approach concurrency control multiple copy databases 
acm transactions database systems june 
pedone schiper kemme alonso 
understanding replication databases distributed systems 
proceedings th international conference distributed computing systems icdcs pages taipei taiwan april 
ieee computer society los alamitos california 
wilhelm schiper 
hierarchy totally ordered multicasts 
proceedings th ieee symposium reliable distributed systems srds bad germany september 
