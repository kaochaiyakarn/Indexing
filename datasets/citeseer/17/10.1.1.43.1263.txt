rectangular partitionings dimensions algorithms complexity applications muthukrishnan viswanath poosala torsten suel bell laboratories mountain avenue murray hill nj 
research bell labs com 
polytechnic university center brooklyn ny 
suel photon poly edu 

partitioning multi dimensional data set rectangular partitions subject certain constraints important problem arises database applications including histogram selectivity estimation load balancing construction index structures 
provably optimal efficient algorithms exist partitioning dimensional data multi dimensional problem received attention special cases 
result heuristic partitioning techniques practice understood come guarantees quality solution 
algorithmic complexity theoretic results fundamental problem partitioning dimensional array rectangular tiles arbitrary size way minimizes number tiles required satisfy constraint 
main results approximation algorithms partitioning problems provably approximate optimal solutions small constant factors run linear close linear time 
establish np hardness partitioning problems efficient polynomial time algorithms solving problems exactly 
discuss applications partitioning problems arise 
applications problem constructing multi dimensional histograms 
results example give efficient algorithm construct optimal histograms known accurate histograms selectivity estimation problems 
algorithms provide guaranteed bounds quality solution 
problems arising databases areas require partitioning multidimensional data set rectangular partitions tiles certain mathematical constraints satisfied 
constraints take form minimizing maximizing metric fixed number partitions conversely done author bell labs 
minimizing number partitions exceeding falling value metric 
problems quite challenging interesting metrics usually resorts heuristic approaches 
unfortunately approaches provide guarantees quality solution may adversely affect application 
algorithmic complexity theoretic results fundamental problem partitioning twodimensional arrays rectangular partitions tiles arbitrary sizes 
develop solutions offer guarantees quality solutions run small polynomial time near linear cases 
start examples 
example 
consider theta array fig 

partitioning tiles shown maximum sum elements fall tile 
different ways tile array tiles different maximum sums 
alternative ways evaluate partitioning considering maximum sum elements 
instance tile sum squares difference element tile average elements tile total values obtained tiles 
value shown fig 

different partitions induce different values 
example 
consider theta array fig 

theta tiling obtained partitioning rows intervals columns intervals fig 

partition maximum sum elements fall tile 
different partitions induce different values 
fig 

partitioning examples example arises data partitioning load balancing selectivity estimation example arises constructing known index structures 
list application scenarios briefly describe histogram context 
terms tile partition interchangeably rest 
example application histograms query optimizers require reasonably accurate estimates query result sizes order estimate costs various execution plans 
commercial database management systems histograms approximate data database order perform estimations 
histograms group attribute values subsets buckets approximate true attribute values frequencies summary statistics maintained bucket 
researchers proposed multi dimensional histograms approximating distributions multiple attributes 
approach involves partitioning multi dimensional space attribute values rectangular buckets various partitioning constraints 
leads partitioning problems sort consider 
particular known optimal histogram dimensions shown minimize selectivity estimation errors estimating result sizes classes queries corresponds alternative metric partitions example 
different types partitions different metrics evaluate partitions 
generic optimization problem arises application contexts follows 
partitioning problem 
dimensional array elements type partition sought metric evaluate partitions bound ffi 
problem produce partitioning array type sought minimal number rectangular tiles metric computed partition ffi 
partitioning problem extensively studied application scenarios database algorithms research communities various specialized forms 
known results heuristics provable guarantees provably efficient algorithms simple specific metrics tilings 
example little known complexity partitioning problem alternative metric example different types partitions problem fundamental histogram construction 
motivated state art formulate partitioning problem generality study difficulty various types partitions metrics relevance application scenarios 
contributions fold 

show partitioning problem np hard natural metrics partitionings arising database applications 
efficient polynomial time algorithms exist np central complexity question remains unresolved 
partitioning problem naturally defined dimensional arrays 
problems solved efficiently small polynomial time claim implies natural dimensional variants np hard :10.1.1.40.2576
partitioning problem fundamentally different go dimensional multidimensional arrays 

main technical results number algorithms complement negative results 
efficient near linear time algorithms approximately solving partitioning problem dimensions fairly general metrics different partitionings including arise database applications approximation bounds guaranteed small constants 
define partitioning problem state results formally section 
high level remarks results 

algorithms extend multiple dimensions similar near linear performance bounds 
may sound better take time linear size underlying dimensional array 
applications array may sparse algorithm works time linear number non zero entries preferable works time linear size array prohibitively expensive 
algorithms modified exploit sparseness input domain difficult 

limitations framework partitioning problems 
example application scenarios tiles may allowed overlap problem may covering array partitioning 
arises example building certain spatial indices trees 
results directly apply covering problems 
application scenarios may allowed permute rows columns input array 
results assume canonical ordering natural order numeric attributes database applications fixed 

despite limitations partitioning problems study general arise number important application scenarios databases 
problems histogram selectivity estimation grid file construction load balancing mentioned earlier applications database compression bulk loading hierarchical index structures partitioning spatial data problems outside databases domain partitioning scientific computation support data partitioning data parallel languages image video processing 
clarify applications histogram selectivity estimation discussions applications full version 
map 
rest organized follows 
formalize partitioning problem relate various application contexts section state results formally 
sections hardness algorithmic results different types partitions different metrics 
section discuss implications results applied area databases histogram selectivity estimation 
section concluding remarks 
problem formulation overview results partitioning problem definition theta array containing real numbers 
tile rectangular subarray 
partitioning array partitioning tiles definition partition element lies tile tiles overlap 
mentioned previous section partitioning schemes classified type partition metric functions outside tiles evaluate partition 
define criteria interesting instantiations 
type partitioning possible types partitionings dimensional array 
ones consider common ones arise database applications 
arbitrary restrictions arrangement tiles 

hierarchical hierarchical partition exists vertical horizontal separation array disjoint parts partitioning hierarchical 
hierarchical partitioning naturally represented hierarchy tree binary tree node represents subarray children represent partition subarray disjoint parts root represents 
theta rows columns partitioned disjoint intervals induced tiles form theta partitioning 
thought special case hierarchical partitioning tiling subarrays sibling nodes hierarchy tree dimension 
arbitrary hierarchical fig 

tilings quality metrics metrics defined tiling functions 

elementary function elementary function maps array elements tile real numbers 
common functions include id ii avg diff ja gamma aj average elements tile iii geo diff ja gamma geometric median elements tile iv sqr diff square avg diff 

heft function 
heft function defined tile elementary function elements tile 
common heft functions sum ii max maxa iii ratio maxa mina sum max common heft functions application scenarios 
notice heft intra tile function 
value evaluated heft function tile called heft 

cumulative function 
cumulative function defined entire set tiles combining heft function common cumulative functions sum max representing total maximum heft value tiles tiling respectively 
note cumulative function inter tile function 
partition metric combination functions gamma gamma example sum max id metric partition sum tiles maximum element tile 
section example max sum id metric alternative sum sum sqr diff metric example max sum id metric 
combination functions trivial example partitions identical id sum sum id metrics metrics nontrivial 
value metric evaluates array partition called metric value ambiguity heft partition 
optimization problem optimization problem consider follows type partition metric bound ffi determine partitioning type minimum number tiles metric value partition ffi 
related problem bound number tiles goal determine tiling tiles minimum metric value 
far np hardness concerned optimization problems identical np hard 
similarity extend efficient approximability problems 
consider version 
partitioning problems arising real applications mentioned fit naturally framework 
application histograms full detail section illustrate problem definition results solve important problem arising application 
preliminaries state properties metrics 
say heft function monotonic tiles example sum id monotonic provided array elements nonnegative 
heft functions arise applications monotonic 
say metric gamma superadditive holds 
disjoint tiles 
example sum diff superadditive requires nontrivial proof 
results hold superadditive metrics 
algorithms identify tiles required compute 
say represents time determine heft tile 
straightforward way consider element tile takes time worst case 
efficient method cases 
consider max heft function time preprocessing compute heft tile time 
omit details procedure 
sum heft functions holds elementary functions sqr diff id avg diff geo diff examples heft functions log 
follows state bounds terms applications arising databases sum sqr diff common heft function optimal histograms 
related partitioning problems studied extensively various application areas including databases parallel computing load balancing computational geometry clustering video compression block matching related papers variety application areas include 
review selection related relevant 
hardness results 
hardness results exist simple metric function max sum id proved np hard arbitrary partitions proved np hard theta partition 
np hardness results inspired abovementioned results 
basic gadgets reductions different ones derive different bounds various metrics 
algorithmic results 
dynamic programming find optimal results hierarchical partitions contexts 
sparse hierarchy approach provable guarantee appears new 
theta partition max sum id best known approximation log factor 
derived substantially improved bounds problem 
heuristic algorithms proposed problem 
applications focus prior database application histograms 
histograms studied quite extensively literature context approximating single attributes 
hand little multi dimensional histograms 
proposed heuristic hierarchical algorithm constructing multi dimensional equidepth histograms 
poosala extended definition multi dimensional histograms techniques optimal maxdiff provided sophisticated general hi partitioning algorithm called mhist 
algorithms provide guarantee quality partitioning 
hierarchical tilings section consider hierarchical partitioning problems 
recall problem produce hierarchical partition theta array metric value ffi minimum number tiles 
set 
upper bound time taken calculate heft value tile bounds terms focus exact algorithms approximate ones 
state results sum max metrics hold superadditive metric time bound identical sum metric 
exact algorithms theorem 
cumulative function max exists time algorithm solve hierarchical partitioning problem exactly 
cumulative function sum exists time algorithm solve hierarchical partitioning problem exactly number tiles optimum solution 
proof 
proof uses dynamic programming simple appeared example special case heft function 
include algorithms derived suitably modifying solution 
consider cumulative function max sum case simple modification 
define delta delta delta delta delta delta smallest number tiles needed partition region delta delta delta delta delta delta metric value ffi 
heft tile ffi delta delta delta delta delta delta 
equation delta delta delta delta delta delta min ix ky delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta need calculate delta delta delta delta delta delta 
dynamic programming technique calculate delta delta delta possible sub rectangles calculate values heft single tile 
take time time 
approximate algorithms section approximation algorithms computing hierarchical partitions sum max metrics modified superadditive metric algorithms section faster exact ones section 
algorithms rely natural known ideas rounding pruning informally describe 
strategies dynamic programming reduce number subproblems considered results dynamic programming solution 
easy implement technical crux analyses 
rounding structured way limit subset possible tiles 
achieved considering tiles endpoints multiples small number parameters 
ways perform rounding round dimensions possibly round endpoints tiles multiples parameters just rounding done hierarchically choice parameter values rounding techniques different levels 
general tradeoff solving partitioning problems terms combinations difficult state solutions employ interesting combinations obtain bounds 
rounding grid pattern 
fix parameter assume multiple description easily modified handle values define grid subset columns rows numbered delta delta delta grid columns rows grid 
refer row column row column respectively 
define hierarchical partition hierarchical partition tiles additionally satisfy conditions 
side endpoints rows columns side length multiple sides endpoints consecutive rows consecutive columns length hierarchical partitioning problem produce hierarchical partition theta array metric value ffi minimum number tiles 
follows argue points optimal hierarchical partition determined efficiently optimal hierarchical partition approximates hierarchical partition nicely 
lemma 
cumulative function max exists time algorithm solve hierarchical partitioning problem exactly 
cumulative function sum exists time algorithm solve hierarchical partitioning problem exactly number tiles optimum solution 
proof 
show proof max function proof sum function similar 
define delta delta delta gamma delta delta delta gamma smallest number tiles hierarchical partition region delta delta delta gamma delta delta delta gamma metric value ffi 
employ equation compute delta delta delta delta delta delta changes set values taken equation 
gamma takes values rows equation takes values holds values 
computation done dynamic programming technique calculate delta delta delta delta delta delta 
choosing optimized running time calculations total running time algorithm turns 
lemma 
consider hierarchical partition array tiles metric value ffi superadditive metric 
exists hierarchical partition tiles metric value ffi positive integer proof lemma omitted space constraints 
preceding lemmas conclude theorem 
cumulative function max exists time algorithm solving hierarchical partitioning problem returns hierarchical partition tiles metric value ffi minimum number tiles hierarchical partition metric value ffi metric superadditive 
cumulative function sum holds running time number tiles optimum solution 
algorithm faster theorem produces partitioning slightly larger number tiles 
improve running time increasing number tiles structured manner described 
rounding grid patterns 
sequence positive integers divides 
define hierarchical partition follows 
hierarchical partition sets permissible intervals side lengths tiles 
comprises intervals jl integers 
general comprises set intervals jl hl gamma jl gamma set comprises intervals defined additionally subintervals thereof 
hierarchical partitioning problem find hierarchical partition metric value ffi minimum number tiles 
solve problem dynamic programming solution somewhat involved 
analysis running time algorithm follows line lemma 
choose appropriately minimize running time turns geometric progression values 
claim consider hierarchical partition array tiles cumulative metric value ffi superadditive metric 
exists hierarchical partition tiles cumulative metric value ffi positive integer proof similar lemma 
lets conclude theorem 
cumulative function max exists ffl time algorithm solving hierarchical partitioning problem ffl tiles metric value ffi minimum number tiles hierarchical partition metric value ffi ffl chosen positive fraction cumulative metric superadditive 
choosing ffl appropriately get running time close desire linear applications see section 
achieved expense large number tiles 
different result may interest prove time algorithm approximates minimum number buckets log log factor superadditive metric 
natural idea explore approximate algorithms pruning 
pruning limits set tiles examined dynamic programming 
data dependent effectively examine tiles heft certain prune condition 
efficient pruning strategy rounding large tiles pruned 
different pruning conditions max sum 
due space constraints omit description conditions 
examples results obtain max metrics time algorithm factor approximation time algorithm factor approximation 
results max sum superadditive metrics 
arbitrary partitionings np hardness results subsection prove np hardness results metrics show minimizing partitioning tiles minimizes heft np hard 
fact proof implies limits approximability problem cases 
special case max sum id metric shown minimum heft approximated factor 
establish similar results different set metrics includes sum diff max max avg diff max max geo diff 
earlier proof reduction planar sat problem shown np complete number changes needed adapt argument types metrics 
similar results shown metrics restrict important ones proofs omitted 
theorem 
data distribution upper bound nphard find minimum heft rectangular partitioning tiles sum sum sqr diff metric approximate minimum heft rectangular partitioning tiles max max geo diff metric factor approximate minimum heft rectangular partitioning tiles max max avg diff metric factor 
approximate algorithms view hardness results section anticipate efficient polynomial time algorithms exactly solving partitioning problems arbitrary partitions natural metrics 
section focus developing efficient approximate algorithms 
approximations observation special metric 
lemma 
consider arbitrary partitioning dimensional array superadditive cumulative metric ffi tiles 
exists hierarchical partition cumulative metric ffi tiles 
proof 
shown arbitrary rectangular partition converted hierarchical splitting tile disjoint tiles 
apply procedure arbitrary partition resulting hierarchical partition tiles furthermore metric value hierarchical partition ffi superadditivity metric 
observation results section get 
similar results obtained sum cumulative function 
theorem 
cumulative function max say optimal solution arbitrary partitioning problem metric value ffi 
algorithm finds partition metric value ffi 
time solution tiles 

ffl time solution ffl tiles 
setting ffl appropriately obtain algorithm near linear running time 
note 
ideas time algorithm obtained approximates arbitrary partition twice buckets optimum large resulting algorithm impractical tiny values thetap partitioning schemes section consider theta partitioning problem defined earlier 
dimensional distribution metric value ffi interested finding minimum theta partitioning ffi 
theta partitioning determined set horizontal rows set vertical columns tile partition consists entries gamma gamma describe algorithms run linear nearly linear time compute solutions guaranteed small constant factor optimal 
algorithms provide interesting application framework approximating set cover set systems bounded vapnik chervonenkis vc dimension described goodrich see discussion section np hardness results special case max sum id metric charikar chekuri feder motwani shown np hard approximate minimum heft theta partitioning factor 
result extended interesting metrics including sum sum sqr diff max max avg diff max max geo diff 
point results obtained modifications hardness proof uses reduction balanced bipartite vertex cover problem 
results summarized theorem proof omitted space constraints 
theorem 
data distribution upper bound nphard approximate minimum heft theta partitioning avg diff max max geo diff metrics factor find minimum heft theta partitioning sum diff metric 
proof claim follows fairly simple modifications proof second claim requires additional accounting argument 
course result implies np hardness problem minimizing upper bound heft inapproximability result case 
preliminaries denote set rows columns theta distribution assume tile theta partitioning define corresponding subset consisting rows columns intersect intersecting row column 
weight function defined assigns real valued weight define subset definition 
weight function say theta partitioning ff tile satisfies ff delta 
ff partitionings correspond ffl nets originally introduced applications computational geometry 
upper bounds max metrics approximation results theta partitioning problem cumulative metric max metric heft partition largest heft tiles 
require heft function monotonic heft tile decrease grow size true interesting cases algorithm suppose maximum value ffi heft solution assume exists theta partitioning heft ffi value guessed binary search 
show algorithm computes theta partitioning heft ffi ffl delta chosen ffl 
algorithm max 
set weights elements 
repeat steps compute ff partitioning ff ffl 
find tile ffi 
exists terminate return solution 
multiply weights elements contained fi ffl 
analysis algorithm 
analyze performance algorithm steps show step implemented bound size resulting ff partitioning bound number iterations step analyze running time iteration 
theorem gives main result subsection 
lemma 
exists ff theta partitioning ff 
computed time 
proof simply set ff gamma horizontal starting top repeatedly choosing divider element sum weights rows encountered gamma surpasses ff delta set rows 
choose vertical analogous fashion 
ut lemma 
loop step max terminates log iterations 
proof proof similar lemma follows arguments 
note weight initially increases factor ffl delta ffl deltap iteration iteration multiply exception max max avg diff metric 
weights exactly sets factor ffl set total weight ffl deltap delta due definition ff goodness 
iterations upperbound ffl delta ffl delta ffl delta delta ffl delta exp ffl delta ffl delta ln exp denotes exponential function basis consider weight theta partitioning heft ffi assume exist 
note tile selected step heft larger ffi cut due monotonicity heft function 
implies element contained weight increased factor ffl 
ffl denotes number times weight corresponding element multiplied ffl 
convexity exponential function basis ffl lower bound delta ffl exp ln ffl delta ln subset implies ln ffl delta ln ffl delta delta ffl delta ln inequality ln ffl ffl ffl ffl shown imply delta ln ln ffl gamma ffl ffl ut lemma 
iteration step runs time delta time needed compute heft tile 
proof steps clearly run time 
step compute heft tiles find tile heft ffi 
ut theorem 
ffi ffl theta partitioning heft ffi ffl computed time delta delta log minimum number exists theta partitioning heft ffi time needed compute heft tile 
weight sum weights rows columns horizontal vertical respectively proof perform binary search value starting 
run algorithm max search 
algorithm terminate number iterations stated lemma know theta partitioning heft ffi increase small factor ffl 
total running time dominated time run max largest implies stated bound 
ut explained cases heft tile computed time performing steps preprocessing 
particular true case max sum id metric probably important metrics covered theorem get corollary 
note common case gives linear time bound 
corollary 
max sum id metric theta partitioning heft ffi ffl computed time log minimum number exists theta partitioning heft ffi 
discussion 
discuss relation algorithm 
simple reduction theta partitioning problem set cover problem resulting approximation ratio log known greedy algorithm set cover 
bound improved log algorithm approximating set cover case bounded vc dimension observing set system generated reduction vc dimension 
additionally construction ffl net set system lines lemma obtain approximation ratio running time delta log 
order get near linear running time describe modified algorithm operates directly data distribution materializing set system reduction set cover size theta worst case 
approximation ratio ffl obtained tightening analysis places 
approximating error 
important special case max metric arises partitioning data evenly tiles get significantly improved results problem approximating minimal heft theta partitioning upper bound best previous result achieved running time approximation ratio 
show results 
theorem 
ffi minimum heft theta partitioning 
time log compute theta partitioning heft ffi ffi ffl theta partitioning heft ffi ffi ffl chosen ffl 
note results come quite close lower bound approximability shown charikar chekuri feder motwani 
results fairly simple observation modify algorithm step search tile heft ffi ffi conclude optimum solution cut tile resp times order get heft ffi means step guarantees larger increase weight adjust choice parameters ff fi appropriately get result 
extensions 
results subsection easily extended theta partitionings non square input distributions 
particular case theta partitioning theta data distribution running time pq delta log approximation ratio remains 
easy extend techniques dimensions resulting approximation ratio ffl running time delta log result theorem 
input data higher dimensions usually sparse efficiency crucially depends exploiting sparseness 
algorithms subsection easiest solution implement computation heft tile represented term way exploits sparseness details depend particular metric 
upper bounds sum metrics approximation results case cumulative metric sum metric 
require heft function monotonic 
algorithm follows approach previous subsection 
contrast max case aware direct reduction sum case set cover problem surprising approach applies 
algorithm suppose maximum value ffi heft solution assume exists theta partitioning heft ffi algorithm computes theta partitioning heft ffi ffl delta chosen ffl 
algorithm sum 
set weights elements 
repeat steps compute ff partitioning ff ffl 
heft partitioning ffi terminate return solution 
select tile random probability picking tile proportional heft 
multiply weights elements contained fi ffl 
sketch analysis 
lemma provides main insight underlying analysis 
lemma 
probability tile chosen step cut proof set tiles cut tiles sum ffi monotonicity heft function imply heft ffi sum tiles ffi tile chosen probability proportional heft probability choosing tile ut lemma directly implies weight increased step probability results slightly weaker lower bound compared max case previous subsection 
deal weaker lower bound compute ff partitioning ff ffl ffl remainder analysis lines analysis max case get result 
theorem 
ffi ffl theta partitioning heft ffi ffl computed expected time delta delta log minimum number exists theta partitioning heft ffi time needed compute heft tile 
discussion extensions 
point algorithm easily deterministic modifying steps choosing particular tile random take tile increase weight elements factor proportional heft tile 
algorithm generalized yield trade approximation error approximation number cuts 
cases implemented steps performing appropriate preprocessing 
interesting example sum sum sqr diff metric models case wish form tiles containing similar values 
result extended theta partitionings higher dimensions resulting bounds max case 
example application results focus database application partitioning problems arise see implications results applications 
consider database relation numerical attributes 
visualized multidimensional array attribute dimension array element contains number tuples database associated attribute values 
joint frequency distribution database 
histograms partition distribution rectangular regions buck ets approximate region small amount space 
typically frequencies bucket approximated average 
histograms typically estimate result sizes relational queries 
errors estimation depend mainly 
theory optimal histograms developed number histograms identified optimal various queries operators 
histograms equidepth considered special cases partitioning problems results apply uniformly 
focus important class histograms optimal histogram provably accurate estimation problems 
definition 
optimal histogram number buckets optimal histogram number buckets bounded specified threshold having variance variance sum squared differences actual approximate frequencies 
alternately total variance optimal histogram number buckets total variance bounded specified threshold 
note joint distributions attributes version problem constructing optimal optimal histogram identical partitioning problem arbitrary partitions sum sum sqr diff metric 
applying general results partitioning problem derive results details 
identifying optimal optimal histogram arbitrary buckets nphard 

greedy mhist algorithm literature result arbitrarily poor histograms terms buckets total variance whichever optimized construct inputs induce worst case behavior 
fact applies greedy solutions design problem 

approximate minimum number buckets needed achieve threshold variance optimal histogram results section 
resulting algorithms near linear time produce small factor approximations 
considered complexity partitioning problems different partitions metrics 
problems fundamental arise application scenarios histogram selectivity estimation constructing grid files load balancing 
little known complexity problems special metrics heuristics proven guarantees quality solution 
show natural versions partitioning problem np hard efficient polynomial time exact solutions worst case 
main results positive ones 
highly efficient near linear time algorithms approximate solutions small constant factors different partitions metrics 
applied general results solving important problem arising query result size estimation identification optimal histograms dimensions 
existing greedy algorithms offer quality guarantees np hard problem approximate solutions partitioning problems imply known efficient algorithms problem guarantees 
investigating impact practice 


structured partitioning problems 
operations research 

arora 
polynomial time approximation schemes euclidean tsp geometric problems 
proc th ieee symp 
foundations computer science focs pages 


partitioning problems parallel pipelined distributed computing 
ieee transactions computers 

goodrich 
optimal set covers finite vc dimension 
proceedings th annual symposium computational geometry 

storer 
split merge parallel block matching algorithm 
charikar chekuri feder motwani 
personal communication 

clarkson 
las vegas algorithm linear programming dimension small 
proc 
th annual ieee symposium foundations computer science pages october 

amore 
optimal binary plane partition sets isothetic rectangles 
information proc 
letters 

fowler paterson tanimoto 
optimal packing covering plane np complete 
information proc 
letters 

fox johnson otto salmon walker 
solving problems concurrent processors volume 
prentice hall englewood cliffs new jersey 

grigni manne 
complexity generalized block distribution 
proc 
rd international workshop parallel algorithms irregularly structured problems irregular lecture notes computer science springer 

haussler welzl 
epsilon nets simplex range queries 
discrete computational geometry 

ioannidis 
universality serial histograms 
proc 
th int 
conf 
large databases pages december 

ioannidis poosala 
balancing histogram optimality practicality query result size estimation 
proc 
acm sigmod conf pages may 

jagadish koudas muthukrishnan poosala sevcik suel 
optimal histograms quality guarantees 
proc 
rd int 
conf 
large databases pages august 

jain jain 
displacement measurement application interframe coding 
ieee transactions communications 

ranka wang 
array decomposition nonuniform computational environments 
technical report syracuse university 

khanna muthukrishnan paterson 
approximating rectangle tiling packing 
proc symp 
discrete algorithms soda pages 

khanna muthukrishnan skiena 
efficient array partitioning 
proc 
intl 
colloq 
automata languages programming icalp pages 


optimization queries relational databases 
phd thesis case western reserve university sept 

lichtenstein 
planar formulae uses 
siam computing 

littlestone 
learning quickly irrelevant attributes abound new algorithm 
proceedings th annual symposium foundations computer science pages october 

manne 
load balancing parallel sparse matrix computations 
ph thesis department informatics university bergen norway 

manne 
partitioning array mesh processors 
proc 
workshop applied parallel computing industrial problems 


manning 
digital video coding block matching algorithms 
atlantis ucc dv html 

mitchell 
guillotine subdivisions approximate polygonal subdivisions simple method geometric mst problem 
proc 
acm siam symp 
discrete algorithms soda pages 

david dewitt 
equi depth histograms estimating selectivity factors multi dimensional queries 
proc 
acm sigmod conf pages 

nievergelt hinterberger sevcik 
grid file adaptable symmetric multikey file structure 
acm transactions database systems march 

muthukrishnan poosala suel 
rectangular partitionings dimensions algorithms complexity applications 
manuscript 

poosala ioannidis haas shekita 
improved histograms selectivity estimation range predicates 
proc 
acm sigmod conf pages june 

poosala 
histogram estimation techniques databases 
phd thesis univ wisconsin madison 

poosala ioannidis 
selectivity estimation attribute value independence assumption 
proc 
rd int 
conf 
large databases august 

shapiro connell 
accurate estimation number tuples satisfying condition 
proc 
acm sigmod conf pages 

welzl 
partition trees triangle counting range searching problems 
proceedings th annual symposium computational geometry pages june 
