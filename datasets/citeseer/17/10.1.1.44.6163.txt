practical segment intersection finite precision output john hobby bell laboratories mountain ave murray hill nj fundamental problem finding intersections set line segments plane numerous important applications 
reliable implementations need cope degenerate input limited precision 
representing intersection points fixed precision introduce extraneous intersections 
presents simple solutions problems shows impose modest performance penalty 
test data came data compression problem involving map database 
key words line segment intersection degeneracy data compression problem finding intersections set line segments plane fundamental computational geometry essential various applications hidden line elimination clipping windowing physical simulations 
possible applications include computer vision circuit design constructive solid geometry various computational geometry problems 
unfortunately standard algorithms properly practice designed exact real arithmetic 
possible run standard algorithms exact arithmetic resulting intersection points require additional precision rational arithmetic 
unappealing applications require computations involving intersection points practitioners insist approximate values points 
major difficulty introduce extraneous intersections shown 
intersection process scale invariant convenient integer grid 
original sweep line algorithm bentley ottmann finds intersections segments time log time number intersections 
brown modification reduces space requirement 
saving fairly modest pach sharir show original algorithm uses min log space 
chazelle edelsbrunner optimal log algorithm complicated unattractive practice 
randomized algorithms clarkson mulmuley simpler algorithm beat practice 
practical segment intersection algorithms need handle degeneracies segments parallel sweep line segments crossing point 
care taken basic operations accurate avoid topological inconsistencies due rounding error 
practical segment intersection finite precision output gamma gamma ffi gamma gamma ffi ffi original input result rounding intersection integer coordinates 
extraneous intersections marked circles 
careful implementation bentley ottmann algorithm problems harder deal complicated algorithm chazelle edelsbrunner 
interesting difficulty danger extraneous intersections illustrated 
naive approach run basic segment intersection algorithm output repeat new intersection points 
iteration input produces iteration produces third iteration leaves unchanged 
approach works reasonably common cases iteration count small guarantee small 
gamma gamma result finding extraneous intersection points rounding integer coordinates 
reliable solutions literature 
keep segments perfectly straight milenkovic shown impractical 
greene yao propose short line segments called hooks keep track segments need bent 
insert extra vertices ensure grid points lie practical segment intersection finite precision output strictly segment adjusted version 
number extra vertices needed depends length segment 
milenkovic proposed algorithms avoid dependence segment length 
involves rounding intersection points replacing segments polygonal lines determined shortest path condition 
intermediate points come segment endpoints rounded intersection points 
generalized version uses points 
milenkovic extended ideas solve difficult problem performing sequence geometric operations polygonal regions plane reliably limited precision 
sugihara completely different segment intersection algorithm starts delaunay triangulation uses incremental updates 
copes degeneracies extraneous intersections running time large term depends close segments get intersecting 
existing techniques avoiding extraneous intersections practice perception involve lot complicated machinery 
milenkovic shortest path technique probably quite practical underutilized papers give little detail contain lot material may discourage practitioners 
section presents conceptually simple alternative performs practice appeared print 
discuss handling degeneracies bentley ottmann sweep algorithm essential part practical segment intersection 
section shows algorithm performs test data derived data compression application 
proof algorithm avoids extraneous intersections delayed section 
section gives concluding remarks 
algorithm purpose algorithm take set line segments find intersection points insert appropriate segments 
intersection points rounded fixed grid scaled grid points integer coordinates 
convenient assume segment endpoints rounded grid points 
set points rounds grid point ae gamma gamma oe denotes minkowski sum 
region tolerance square point 
step bentley ottmann sweep line algorithm find intersection points 
set segment endpoints intersection points compute set dt rounding point nearest grid point dt contains points intersects time segment intersects tolerance square dt alter bending passes call operation inserting segment ss set sums short practical segment intersection finite precision output avoids extraneous intersections segments pass dangerously close dt points bending meet points dt shown 
proof works section 
ffi sample input points dt marked solid dots tolerance squares outlined dashed lines result inserting dt points avoid extraneous intersections 
intersecting segments tolerance squares bx tempting think intersections tolerance square dp examining data structures bentley ottmann sweep algorithm encounters say sweep line vertical moves left right 
problem segment question dp coordinate unit larger 
bentley ottmann sweep needs stay units ahead 
call bentley ottmann sweep pass follows pass 
way proceed treat pass separate problem 
add segments boundary tolerance square segment intersection algorithm find intersections original segments new segments 
pass done bentley ottmann algorithm intersection algorithm 
expensive 
original segments intersections tolerance squares new segments needed 
number know advance segments share endpoints new segments second intersection finding step slower 
course naive estimate overhead pass unacceptable practice 
best way reduce overhead information possible pass take advantage special properties tolerance squares 
may possible intersection algorithm discussion assumes pass sweep 
vertical edges tolerance squares need represented explicitly horizontal edges come batches start 
define batch contain tolerance square edges gamma practical segment intersection finite precision output illustrates segment starting crossing events give rise tolerance squares 
pass uses sweep line algorithm tolerance square edges horizontal dashed lines kept separate list tolerance edge list 
lists current segments main active list contains original segments exactly pass tolerance edge list contains tolerance square edges 
segments main list start edges tolerance edge list start gamma segments start gamma vertical slabs corresponding values called 
ffi ffi ffi ffi gamma batch tolerance squares segments starting crossing events responsible special coordinates marked dotted lines 
tolerance squares outlined dashed lines crossing events marked open circles 
pass processes batches time left right order algorithm batch assume batch gamma processed successfully 
operates main active list tolerance edge list sweep line reaches hammock 
happens steps 
complete algorithm processing batch starting main active list set gamma gamma ffl infinitesimal positive ffl algorithm essentially applying bentley ottmann algorithm original segments tolerance square edges new edges stored separate list crossings original segments tolerance square edges delayed hammock 
delay avoids need insert event queue separating tolerance edge list main active list easier maintain 
key information main active list new segment inserted saved pass main active list doubly linked list insertions deletions interchanges performed constant time 
step requires maintaining relative ordering tolerance edge list main active list compare tolerance square edge segments practical segment intersection finite precision output algorithm pass algorithm 
collect events pass coordinate starting stopping intersection point rounds 
create horizontal edges top bottom tolerance squares events sort values 
locate values main active list 
top bottom edges sigma main active list segments gamma insert segment 

update main active list valid gamma ffl 

relocate values horizontal tolerance edges main active list deduce segments crossed tolerance squares 
crossing insert point center tolerance square segment 

update main active list valid gamma ffl 
encountering vertical segment immediately walk tolerance edge list insert vertices vertical segment squares passed 

repeat step interchanges necessary achieve consistent ordering 
new vertex gets inserted time segment crosses top edge tolerance square bottom edge 
steps involve inserting deleting interchanging segments main active list reflect events pass 
pair segments interchanged tolerance square edges 
segment cross segment shown scan tolerance edge list find tolerance squares current hammock step step 
move tolerance square edges move edges type crossed edges bottom edges tolerance squares cause vertices inserted similarly edges crossed cause insertions top edges tolerance squares 
implementation details worth mentioning ffl active segment pointer tolerance square edge immediately edges pointers back segment 
pointers null segment upper neighbor segment tolerance square edge edge lower neighbor 
simplifies program zero segment edge pointers start step regenerate afterward 
ffl segment start event encountered step necessary store pointer edge corresponding tolerance square step locate new segment tolerance edge list 
practical segment intersection finite precision output segments tolerance square edges caught cross cross 
vertical dotted lines mark limits hammock 
ffl step locates new tolerance square edges main active list scan segment derived responsible event 
segment crosses gamma efficiency dictates careful choice 
possibilities include segment involved event segment new segment inserted starting event segments involved crossing event start segments inserted 
option start lower tolerance square edge wound 
ffl positively segments receive new vertices order ascending order downward segments descending means step go tolerance edge list looking segments cross tolerance square edge go list looking crossings opposite type 
similar discipline needed removing tolerance square edges segments cross 
theorem algorithm run time log number segment starting crossing events collected step number vertices inserted 
sorting step time 
proof 
event collected step times create pair tolerance square edges step update main active list step 
update takes constant time crossing events tolerance square edges moved 
movement similar processing steps charged vertices inserted 
remains show locating tolerance square edges main active list step takes time 
depends choice segments 
choosing final position lower tolerance square edge mean scanning main active list backtracking 
quite main active list segments start cross gamma suppose segment corresponding final position higher edge belongs just came event segment segments involved event segment crosses gamma segment set guarantees segment practical segment intersection finite precision output passed twice step scans main active list locate new tolerance square edges 
furthermore segments involved events gamma passed total time part step required 
handling degeneracies practical implementation bentley ottmann algorithm algorithm segments parallel sweep line segments share common intersection segments intersect endpoints 
basic ideas needed solve problems known treated adequately literature 
edelsbrunner simulation simplicity relevant immediately yield attractive solution 
degeneracies little effect algorithm long inherits valid sequence events bentley ottmann sweep 
tolerance squares contain bottom edges top edges segment hits sweepline treated tolerance edge coordinate algorithm needs changes order handle borderline cases segments intersecting tolerance squares 
bentley ottmann sweep handle degeneracies judicious key ideas add infinitesimal tilt sweepline shorten segment doubly infinitesimal amount trimming ends ignore confusion relative order crossing events 
infinitesimal shortening rule prevents pass reporting intersections segment endpoints 
harmless pass finds tolerance square intersections cases 
confusion relative order crossing events 
problem coincident crossings key idea best illustrated non degenerate situation 
crossings order erroneously scheduled algorithm just ignore erroneous crossing detects adjacent sweepline data structure 
processing crossing adjacent crossing rescheduled 
ffi ffi ffi segments crossings labeled order processed 
theorem bentley ottmann algorithm modified ignore crossing events segments involved adjacent event queue need maintain relative order crossing events 
algorithm finds intersections runs time log 
proof 
assume sweepline moves left right 
segment immediately segment sweepline structure slope greater algorithm ensures practical segment intersection finite precision output event queue crossing sweepline hits starting event value queue contains crossings values sweepline structure order times correct crossings occur 
crossings scheduled segments start cross total number scheduled segments actual crossings 
scheduling crossings ultimately get ignored increase asymptotic running time 
mean terms primitive operations support bentley ottmann sweep 
suppose sweepline vertical moves left right slope gamma ffl moves ffl direction infinitesimal positive ffl 
geometrical primitives suffice 
find point segments intersect 

decide intersection point right sweepline left endpoints segments involved 

decide events sweepline hits 

decide segment starting point existing segment 
consider primitives order 
intersection points computed accurately ensure correct results comparing coordinates segment endpoints 
suppose coordinates segment endpoints integers magnitude constant segments span constant delta intersection points rational coordinates denominators delta floating point relative accuracy part ll delta sufficient produce results compare correctly integers 
fact algorithm needs correct comparisons numbers form true requirement part ll delta intersection points need compare correctly theorem 
important tool implementing primitives slope comparison 
direction vectors segments deltax deltay deltax deltay suffices test sign deltay deltax gamma deltax deltay requires numbers size delta works vertical 
vertical segments deltay segments deltax treats vertical segments having slope 
second primitive deciding schedule crossing event segments adjacent sweep line 
idea reject crossing sweepline lower segment greater slope 
safely compute intersection point sure endpoints segments compare intersection precision order suffices input segments suitably adjusted endpoints required remain integer grid 
practical segment intersection finite precision output lexicographically segment endpoint sure third primitive simple lexicographic comparison points 
segment starting events point involved segment endpoint intersection point segments cross 
case tie events come crossing events starting events 
consequence infinitesimal shortening rule 
primitive involves comparing integer value intercept active segment sweepline 
segment vertical difference values rational number magnitude denominator delta relative accuracy part ll delta suffices evaluating sign numerator 
segment vertical comparison just value upper endpoint segment starting point lies vertical segment considered due infinitesimal shortening rule infinitesimal tilt sweepline 
rule forces sweepline advance infinitesimal amount slope comparison break ties values existing segment new segment starting point 
putting basic idea simple bentley ottmann sweep collects starting crossing events order performed passed algorithm batch time 
segment intersection algorithm substituted bentley ottmann clear handle degeneracies find tolerance square intersections efficiently 
algorithm uses events maintain segment order sweepline sweep pass crossings events swaps segments 
algorithm finds tolerance square intersections inserts corresponding vertices 
tricky geometric primitives tie breaking rules part initial bentley ottmann sweep 
bentley ottmann sweep monopoly complicated data structures 
time bound log requires sweepline balanced tree suggested simpler data structures attractive applications average number simultaneously active segments 
theorem allow event queue simplified 
algorithm needs crossing events sorted rounded coordinate 
restriction priority queue replaced fixed array starting events unordered lists crossing events interspersed event array point list crossing events belong immediately afterward 
time bound depends number segments intersection count number tolerance square intersections practical segment intersection finite precision output theorem total log spent algorithm 
practice small close total time algorithm essentially dominated log bentley ottmann 
theory dominate approach trivial upper bound segments collinear 
results algorithm implemented tested small highly degenerate input sets involving vertical segments coincident intersections 
larger input sets derived data compression problem involving government map database 
map database specifies roads rivers features polygonal lines defined sequences latitude longitude pairs multiples gamma degrees 
intersections indicated having latitude longitude pair appear representation road 
forces straight roads vertices polygonal representation shown 
essential step compressing database eliminate unnecessary vertices depend line segment intersection algorithm recover intersections decompression 
input segment intersection algorithm set polygonal approximations map features shown 
testing purposes polygonal approximations done wall danielsson algorithm maximum average error set gamma degrees latitude 
roads map database data points marked dots roads polygonal approximations bypass explicit intersections 
region shown meters meters 
application interesting map data contains degeneracies involves large numbers line segments needs decompressed quickly 
turns rounding intersections grid points generate extraneous intersections need carefully controlled correct connectivity preserved 
table summarizes test runs implementation sgi mhz mips processors 
overhead finding tolerance square intersections ranges factor practical segment intersection finite precision output smallest problem factor largest 
time bentley ottmann sweep dominates predicted section 
sweep run time latitude longitude ffl line total gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma table results test runs indicated portions map database preprocessed wall danielsson algorithm 
grid spacing ffl degrees latitude columns give number segments number intersection points number tolerance square intersections 
sweepline column gives average number segments sweepline columns give average run time seconds bentley ottmann bentley ottmann plus algorithm 
table covers wide range values grid spacing ffl 
coordinates integer multiples ffl large ffl values nearby intersection points round coordinates 
points collapsed lie input segment 
values table decline increasing ffl computed counting intermediate vertices added input segments 
main effect increasing ffl increase gap number extra vertices added avoid extraneous intersections 

data set number ranges gamma ffl gamma gamma ffl gamma comparison second iteration naive rounding ffl gamma increases intersection count third iteration finds intersections 
iterated naive rounding adds vertices takes seconds seconds 
ffl gamma numbers new vertices seconds 
practical segment intersection finite precision output extraneous intersection theorem original goal take set line segments break inserting intersection points nontrivial intersections remain 
standard algorithms bentley ottmann designed 
need show discretization rounding tolerance square intersections preserves property defined formally follows set line segments fully intersected unequal segments intersect endpoints 
discretization process depends set segment endpoints region gamma ae gamma gamma oe obtained negating coordinates points region section defining tolerance squares 
discretization operator maps real point set set segments ab exists segment dt gamma fa bg dt gamma result rounding points integer grid points 
set segments dt union 
theorem set segment endpoints fully intersected segment set dt fully intersected 
proof depends lemmas 
uses notation mean bx lemma line segment direction ff ff sigma points gamma ff ff proof 
points gamma form dx dy choosing ff positive slope ff gamma guarantees ff dx ff dy ff dx ff dy dx dy dx dy 
lemma segments endpoints intersect endpoints pair unequal segments oe oe dt intersect endpoints 
proof 
lemma guarantees coordinate system ff ff gammaff ff practical segment intersection finite precision output endpoints segments different coordinates 
points 
describe piecewise linear function interval gamma gamma gamma similar function discretization endpoints segments dt 
functions approximate lines fi fl fi fl contain lemma thought statement values 
intersect endpoints assume loss generality fi fl fi fl defined 
suffices show gammaj gammaj values interval happens endpoints segment common dt 
segments belong gamma difference gamma fi gamma fl limited range coordinates gamma ranges open semi open interval gamma gamma implies fi fl fi fl definition forces similar reasoning shows holds lemma follows 
theorem follows lemma 
segments belong dt lemma guarantees segments intersect allowed segments fully intersected set 
simple idea breaking segments intersect tolerance squares suffices eliminate extraneous intersections result rounding line segment intersections 
theorem require input segments start grid points idea rounding segment endpoints coarser grid useful data compression applications 
section gives practical algorithm bentley ottmann sweep 
gives simple efficient scheme handling degeneracies 
bentley ottmann sweep chosen practical importance ideas applied algorithms desired 
practical segment intersection finite precision output algorithm improves time output size bounds greene yao settling weaker relationship input output topologies 
greene yao show intersection redrawn line segments single point polygonal line 
lemma allows intersection set disjoint line segments proof show interleaving forces coordinates output segments ordered coordinates 
atts 
practical segment intersection finite precision output pankaj agarwal micha sharir 
red blue intersection detection algorithms applications motion planning collision detection 
siam journal computing april 
jon bentley thomas ottmann 
algorithms reporting counting geometric intersections 
ieee transactions computers september 
brown 
comments algorithms reporting counting geometric intersections 
ieee transactions computers february 
bernard chazelle herbert edelsbrunner 
optimal algorithm intersecting line segments plane 
journal acm january 
wei chiang chi yuan lo 
time efficient vlsi artwork analysis algorithms goalie 
ieee transactions computer aided design integrated circuits june 
kenneth clarkson 
applications random sampling computational geometry ii 
proceedings th annual acm symposium computational geometry pages new york june 
acm 
edelsbrunner overmars seidel 
methods computational geometry applied computer graphics 
computer vision graphics image processing october 
herbert edelsbrunner ernst peter 
technique cope degenerate cases geometric algorithms 
proceedings th annual acm symposium computational geometry pages new york june 
acm 
michael goodrich 
polygonal approach hidden line hidden surface elimination 
cvgip graphical models image processing january 
daniel greene frances yao 
finite resolution computational geometry 
proceedings th annual symposium foundations computer science pages 
ieee computer society october 
jaeger sprecher 
statistics structure solid fragments studied simulation 
applied physics june 
jerzy toussaint 
relative neighborhood graphs relatives 
proceedings ieee september 
harry mairson jorge stolfi 
reporting counting intersections sets line segments 
earnshaw editor theoretical foundations computer graphics cad pages 
springer verlag 
practical segment intersection finite precision output victor milenkovic 
double precision geometry general technique calculating line segment intersections rounded arithmetic 
proceedings th annual symposium foundations computer science pages 
ieee computer society october 
victor milenkovic 
rounding face lattices plane 
st canadian conference computational geometry 
victor milenkovic 
rounding face lattices dimensions 
jorge urrutia editor proceedings second canadian conference computational geometry pages ontario august 
university ottawa 
victor milenkovic 
robust polygon modeling 
computer aided design appear 
victor milenkovic lee 
finding compact coordinate representations polygons polyhedra 
ibm journal research development september 
mulmuley 
fast planar partition algorithm proceedings th annual symposium foundations computer science pages 
appear symbolic logic 
mulmuley 
computational geometry randomized algorithms 
prentice hall new york 
appear 
nievergelt preparata 
plane sweep algorithms intersecting figures 
communications acm october 
pach micha sharir 
vertical visibility arrangements segments queue size line sweeping algorithm 
siam journal computing june 
sugihara 
intersection delaunay triangulation 
ieee computer graphics applications march 
robert 
null object detection constructive solid geometry 
communications acm july 
tiger line census files technical documentation 
technical report bureau census dept commerce washington 
karin wall erik danielsson 
fast sequential method polygonal approximation digitized curves 
computer vision graphics image processing november 
ying fung wu peter widmayer wong 
rectilinear shortest paths minimum spanning trees presence rectilinear obstacles 
ieee transactions computers march 
practical segment intersection finite precision output john hobby bell laboratories mountain ave murray hill nj fundamental problem finding intersections set line segments plane numerous important applications 
reliable implementations need cope degenerate input limited precision 
representing intersection points fixed precision introduce extraneous intersections 
presents simple solutions problems shows impose modest performance penalty 
test data came data compression problem involving map database 
key words line segment intersection degeneracy data compression 
