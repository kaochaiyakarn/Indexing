memory consistency models david mosberger tr discusses memory consistency models influence software context parallel machines 
part review previous memory consistency models 
second part discusses issues arise due weakening memory consistency 
especially interested influence weakened consistency models language compiler runtime system design 
conclude tighter interaction parts memory system improve performance considerably 
department computer science university arizona tucson az updated version mos traditionally memory consistency models interest computer architects designing parallel machines 
goal model close possible model exhibited sequential machines 
model choice sequential consistency sc 
sequential consistency guarantees result execution processors operations processors executed sequential order operations individual processor appear sequence order specified program 
model severely restricts set possible optimizations 
example architecture high latency memory beneficial pipeline write accesses write buffers 
optimizations possible strict sc model 
simulations shown weaker models improve performance order percent strictly sequential model zb 
weakening memory consistency model goes hand hand change programming model 
general programming model restricted complicated consistency model weaker 
architecture employ weaker memory model software prepared deal new programming model 
consequently memory consistency models concern operating system language designers 
turn coin 
compiler normally considers memory accesses expensive tries replace accesses registers 
terms memory consistency model means certain accesses suddenly observable 
effect compilers implicitly generate weak memory consistency 
possible compiler knows exactly estimates conservatively points memory consistent 
example compilers typically write back register values function call ensuring consistency 
natural attempt implicit weakening explicit order memory system take advantage 
fact anticipated software gain weak model higher degree hardware enabling optimizations code scheduling delaying updates legal sc 
short weaker memory consistency models positive effect performance parallel shared memory machines 
benefit increases memory latency increases 
years processor performance increased significantly faster memory system performance 
addition memory latency increases number processors system increases 
shared memory implemented hardware software level 
case usually called memory dsm 
levels done reap benefits weaker models 
conjecture near parallel machines consistency models significantly weaker sc sit bz 
rest organized follows 
section discuss issues characteristic memory consistency models 
section consistency models implications programming model 
take look implementation options section 
section discusses influence weakened memory consistency models software 
particular discuss interactions weakened memory system software 
consistency model issues choosing appropriate memory consistency model mcm tradeoff minimizing memory access order constraints complexity programming model complexity memory model 
weakest possible memory returning read access previously written value value written 
memory system choose return values 
minimizing ordering constraints perfectly useful programming model 
implementing weaker models complex necessary keep track outstanding accesses restrict order execution accesses necessary 
surprising different mcm proposed new models expected 
unfortunately single hierarchy classify strictness consistency model 
define design space consistency models 
allows classify various models easily 
memory consistency models impose ordering restrictions accesses depending number attributes 
general attributes model distinguishes weaker model attributes model distinguish listed ffl location access ffl direction access read write ffl value transmitted access ffl causality access memory access shared private competing non competing synchronizing non synchronizing acquire release exclusive non exclusive access categories ffl category access causality attribute relation tells accesses potentially causally related lam occurred vice versa 
access category static property accesses 
useful possible categorization shown 
extension categorization 
memory access shared private 
private accesses easy deal don discuss 
shared accesses divided competing non competing accesses 
pair accesses competing access location write access ordered 
example accesses shared variables critical section non competing mutual exclusion guarantees ordering competing access synchronizing non synchronizing 
enforce order example delaying access previous accesses performed 
competing access synchronizing accesses 
chaotic relaxation algorithms example competing accesses imposing ordering constraints 
algorithms read accesses return value 
synchronizing accesses divided acquire release accesses 
acquire associated read release write synchronizing access 
atomic fetch phi operations usually treated acquiring read access followed non synchronizing write access 
acquire operation exclusive non exclusive 
multiple non exclusive acquire accesses granted exclusive acquire access delayed previous acquisitions released 
assuming accesses single processor appear sequentially consistent example critical region read accesses shared variables acquiring lock done non exclusively 
consistency models distinguish access categories employ different ordering constraints depending access category 
call models hybrid 
contrast models distinguish access categories called uniform 
motivation hybrid models engendered adve hill definition weak ordering ah hardware weakly ordered respect synchronization model appears sequentially consistent software obey synchronization model 
long synchronization model respected memory system appears sequentially consistent 
allows definition arbitrarily weak consistency models presenting reasonable programming model 
changes number severity constraints imposed synchronization model 
proposed models proceed define consistency models previously proposed 
give formal definitions models help understand model implications programming model 
formal descriptions example ahamad abj gharachorloo 
discuss uniform models hybrid models 
gives overview relationships uniform models 
arrow model indicates strict model labeled subsection described 
hybrid models described roughly decreasing order strictness 
triplets form denote memory access read access write access denotes accessed location transmitted value 
examples triplet identifies access uniquely 
memory locations assumed initial value zero 
execution histories diagrams line processor 
time corresponds horizontal axis increases right 
write accesses triplet diagram marks time issued read accesses denotes time completion 
asymmetry exists program know events 
know point time write performed point time read issued may prefetching hardware atomic consistency ac pram slow memory sequential consistency sc causal consistency cc cache consistency coherence processor consistency pc structure uniform models example 
diagram example execution history processor writes location processor subsequently observes write reading implies write access completed performed time issued observed word processor refer entities performing memory accesses 
cases replaced word process processes simply software abstraction physical processors 
atomic consistency ac strictest consistency models 
atomic consistency operations take effect point operation interval 
easiest think operation intervals dividing time non overlapping consecutive slots 
example clock cycle memory bus serve operation interval 
multiple accesses operation interval allowed causes problem reads writes location occur operation interval 
solution define read operations take effect read time write operations take effect write time 
called static atomic consistency ha 
dynamic ac operations take effect point operation interval long resulting history equivalent serial execution 
atomic consistency base model evaluating performance mcm 
sequential consistency sc sequential consistency defined lamport lam 
defined memory system sequentially consistent result execution operations processors executed sequential order operations individual processor appear sequence order specified program 
equivalent copy serializability concept concurrency control database systems bhg 
sequentially consistent system processors agree order observed effects 
legal execution history sc ac note processor reads value written 
course possible real physical system 
shows surprising flexibility sc model 
reason legal history atomic consistency write operations appear processor sequential consistency canonical memory consistency model long time 
multi processor machines implement slightly weaker model called processor consistency see 
causal consistency ahamad ha introduced causal consistency 
lamport lam defined notion potential causality capture flow information distributed system 
notion applied memory system interpreting write message send event read message read event 
memory causally consistent processors agree order causally related events 
causally unrelated events concurrent events observed different orders 
example legal execution history cc sc note causally related observed write furthermore observe accesses different orders legal sc 
uniform models cc appears difficult implement hardware 
probably explained fact models designed hardware implementation mind 
imply cc implementation necessarily performs worse implementation simpler uniform models 
pipelined ram pram lipton sandberg ls defined pipelined ram pram consistency model 
reader aware acronym pram shorthand parallel random access machine common pipelined ram consistency model 
reasoning led model follows consider multi processor processor local copy shared memory 
memory scalable access independent time takes access processors memories 
proposed read simply return value stored local copy memory 
write update local copy broadcast new value processors 
assuming constant time initiating broadcast operation goal making cost read write constant achieved 
terms ordering constraints equivalent requiring processors observe writes single processor order may disagree order writes different processors 
execution history legal pram cc observe writes different orders potentially causally related 
legal history cc 
cache consistency coherence cache consistency goo coherence synonymous avoid confusion causal consistency term coherence 
coherence location relative weakening sc 
recall sc processors agree sequential order execution accesses 
coherence requires accesses sequentially consistent location basis 
clearly sc implies coherence vice versa 
coherence strictly weaker sc 
example history coherent sequentially consistent clearly serial execution respects program order starts writing impossible read accesses return 
accesses linearized accesses 
history coherent sc 
essence coherence removes ordering constraints program order imposes accesses different memory locations 
processor consistency pc goodman proposed processor consistency goo 
unfortunately definition informal caused controversy exactly pc refers 
ahamad abj give formal definition pc removes ambiguity appears faithful translation goodman definition 
show pc defined dash group comparable goodman definition weaker stronger 
discuss dash version pc context release consistency rc pc refer goodman version pcd refer dash version 
goodman defined pc stronger coherence weaker sc 
pc interpreted combination coherence pram 
pc history coherent pram 
history pc coherent pram conditions satisfiable mutually consistent way 
easiest think pc consistency model requires history coherent pram simultaneously individually 
processors agree order writes processor disagree order writes different processors long writes different locations 
example coherence pc give history fails pc previous example goo notice observes accesses order observes accesses order disagree order writes location consistent ordering remove disagreement history fails pc 
differences pc sc subtle goodman claims applications give results models 
says existing multiprocessors vax satisfy pc sequential consistency goo 
ahamad prove tie breaker algorithm executes correctly pc bakery see description algorithms 
bershad bz mention processor consistent machines easier build sequentially consistent systems 
slow memory slow memory location relative weakening pram ha 
requires processors agree order observed writes single processor 
furthermore local writes visible immediately pram model 
name model chosen writes propagate slowly system 
slow memory probably weakest uniform consistency models interprocess communication 
ahamad mutual exclusion algorithm ha 
algorithm guarantees physical exclusion 
guarantee logical exclusion 
example processes subsequently granted access critical section wrote variables third process may enter critical region read value written value written looks simultaneous access critical section 
problem inherent slow memory knowledge access location performed infer accesses locations performed 
slow memory appear practical significance 
weak consistency wc weak consistency strict hybrid model discuss 
model originally proposed dubois dsb 
memory system weakly consistent enforces restrictions 
accesses synchronization variables sequentially consistent 
access synchronization variable issued processor previous data accesses performed 
access issued processor previous access synchronization variable performed notice meaning previous defined refers program order 
access precedes access processor executed access previously executed access synchronizing accesses fences 
time synchronizing access performs previous accesses processor guaranteed performed accesses processor guaranteed performed 
synchronization model corresponding access order constraints relatively simple 
program executing weakly consistent system appears sequentially consistent constraints observed ah zb 
data races competing accesses 
synchronization visible memory system note wc allow chaotic accesses chaotic relaxation algorithms 
algorithms changed avoid data races necessary mask chaotic accesses synchronizing accesses 
overly restrictive 
release consistency rc release consistency defined gharachorloo refinement wc sense competing accesses divided acquire release non synchronizing accesses 
competing accesses called special distinguish ordinary accesses 
non synchronizing accesses competing accesses serve synchronization purpose 
type access introduced able handle chaotic relaxation algorithms 
acquire access works synchronizing access wc fence delays accesses 
similarly release works synchronizing access wc fence delays previous accesses performed 
example worker arrived true release go skip od acquire go false ordinary coordinator fa arrived skip od arrived false af fa go true af barrier release consistency allows limited overlap executing critical sections possible wc 
subtle change special accesses executed pcd sc wc 
model concrete give example critical section coordinator barrier programmed rc see example show critical section implemented model test set locked rd acquire wr skip od critical section locked false release note labeling read modify write operation test set 
read labeled acquire write labeled stands access 
acquire label ensures access performed read completed label ensures write occurs pcd 
note legal unnecessarily restrictive mark write access release 
release label write access resetting locked flag ensures accesses critical sections performed time flag reset 
coordinator barrier considerably complicated 
important thing heart barrier realized release followed acquire critical section just opposite 
pseudo code barrier shown 
examples clear straight forward write synchronization primitives rc 
important realize primitives written forever 
typical programmer doesn need worry labeling accesses correctly high level synchronization primitives provided language operating system 
safe label program conservatively 
example compiler incomplete information available revert label reads acquire writes release 
entry consistency ec entry consistency model weaker rc bz 
imposes restrictions programming model 
ec rc shared variable needs associated synchronization variable 
synchronizing variable lock barrier 
association variable synchronization variable change dynamically program control 
note slow memory location relative weakening consistency model 
effect accesses different critical sections proceed concurrently possible rc 
feature ec refines acquire accesses exclusive non exclusive acquisitions 
increases potential concurrency non exclusive acquisitions synchronization variable granted concurrently 
rc entry consistency prepared handle chaotic accesses 
model specifically designed implemented software shared memory system 
implementations memory consistency models implementation memory consistency model stricter model allow 
example sc allows possibility read returning value hasn written see example discussed sequential consistency 
clearly implementation exhibit execution history 
general simpler implement slightly stricter model definition require 
especially true hardware realizations shared memories 
consistency model number implementation issues 
general questions ffl consistency unit 
ffl enforce eager lazy consistency 
ffl update invalidation protocol maintain consistency 
hardware implementations consistency unit typically word cache line 
software shared memories overhead consistency unit higher absolute terms memory page shared object structured variable segment chosen consistency unit 
notion eager versus lazy maintenance memory consistency appears invented independently bh bershad bz 
notion observation consistency protocol invoked time inconsistency arises inconsistency detected 
eager implementations lazy 
expected benefit lazy implementations process cached copy shared variable doesn access anymore process participate maintaining consistency variable 
lazy release consistency midway bz examples lazy implementations 
performance data available 
influence consistency model software mentioned earlier choosing memory consistency model tradeoff increasing concurrency decreasing ordering constraints implementation programming model complexity 
hybrid models memory system sequentially consistent long synchronization model respected 
software executing memory system provide information synchronization events memory system synchronization model match memory system model 
synchronization information provided programmer explicitly concurrent language compiler runtime system high level language 
software running hybrid memory system provide information execute correctly 
possible beneficial go point 
software provide information expected access pattern shared variable optimizations particular access pattern enabled resulting substantially improved performance 
munin providing fixed set sharing annotations 
annotation corresponds consistency protocol optimized particular access pattern 
similar approach taken chiba ckm annotate linda programs order select optimized protocol explicitly mean language possible program synchronization operations 
operations certain restrictions 
example weakest efficient protocol tuple tag process performing operations process performing read operations 
unfortunately far performance study advantage guided memory systems reported 
carter indicates munin performs matrix sor compared hand coded message passing algorithm comparison single protocol dsm strict dsm reported 
note change consistency model memory system lead quite subtle changes 
example zucker baer note analysis relax benchmark program realize program written compiled peak performance depends memory model 
example sc efficient schedule read access causing cache sequence read accesses hitting cache wc rc access scheduled read sequence 
chaotic accesses issue raised weaker consistency models chaotic accesses competing accesses 
current dsm systems handle 
munin midway special provisions chaotic accesses 
note algorithms accesses depend having fairly value available 
accesses variable unsynchronized reading return previously written value 
example application splash benchmark perform competing accesses return old values rin swg 
rc maintains accesses pcd safe conservative cases 
type algorithm non synchronizing competing accesses kind process needs neighbor data synchronizing neighbor process computes value stores neighbors data field 
effect type algorithm trades synchronization re computation 
expect having specialized consistency protocols chaotic accesses improve performance algorithms 
annotating compilers little done annotating parallel programs automatically 
general case determining access patterns shared variable undecidable 
unclear exactly access patterns useful distinguish direction done munin 
language designed easier infer certain aspects access pattern 
simple example constant object 
write accesses objects replicated processes needing consistency protocol 
example determining critical region contains write accesses shared variables 
ec information determines lock acquired exclusive non exclusive mode 
critical regions typically short contain function calls unbounded loops problem decided cases 
explicitly parallel languages mentioned explicitly parallel language mcm defines allowable memory access optimizations 
language depends directly memory consistency model allows implementation synchronization operations 
ac sc pc special constructs available 
wc memory barrier full fence operation sufficient 
memory barrier inserted program consistency memory enforced 
rc things complex 
access labeled category 
ec synchronization operations implemented locks barriers provided system 
shows clearly idea allow programmer implement synchronization primitives individual memory accesses 
language provide efficient primitive operations implement higher level synchronization operations 
locks barriers provided ec sufficient 
barriers clear single implementation sufficient possible applications 
example useful time processes joined barrier releasing 
ec construct implemented barriers terms locks methods inefficient direct implementation 
implicitly parallel languages implicitly parallel languages notion concurrent execution language level 
concurrency control typically implemented compiler generated calls runtime system 
needs done adapt new mcm change runtime system 
mentioned advantageous integrate consistency model compiler runtime system tightly 
compiler information synchronization concurrency structure program information available memory system 
jade rsl step direction 
runtime system process precise information accessed locations location read modified 
language allows express data accessed anymore 
unclear point exactly information provided memory system 
equally open information memory system provide runtime system 
example useful guide runtime system scheduler data cheaply available cached memory system 
central theme conscious thing 
applies distributed shared memories runtime systems compilers languages 
argued consistency models important weaker models beneficial performance 
weakened models uniform appear promising hybrid models 
current concentrate 
quite done area lack meaningful performance data surprising 
appears language compiler runtime system realms lot open questions warrant research 
expect tighter coupling memory system software result considerable performance improvements 
people provided useful comments drafts gregory andrews david vincent 
provided helpful information aspects memory consistency models brian bershad john carter kourosh gharachorloo james goodman bob janssens karen pieper martin rinard andy tanenbaum 
abj ahamad prince gil 
power processor consistency 
technical report git cc georgia institute technology atlanta ga usa 
ah sarita adve mark hill 
weak ordering new definition 
proceedings th annual international symposium computer architecture pages may 
ahamad john 
implementing programming causal distributed shared memory 
proceedings th international conference distributed computing systems pages may 
gregory andrews 
concurrent programming principles practice 
benjamin cummings menlo park 
bh lothar martin 
coherency model virtually shared memory 
international conference parallel processing volume ii pages 
bhg philip bernstein hadzilacos nathan goodman 
concurrency control recovery database systems 
addison wesley reading massachusetts 
bz brian bershad matthew 
midway shared memory parallel programming entry consistency distributed memory multiprocessors 
technical report cmu cs university 
john carter john bennett willy zwaenepoel 
implementation performance munin 
symposium operating system principles pages 
ckm shigeru chiba kato takashi masuda 
exploiting weak consistency implement distributed tuple space 
proceedings th international conference distributed computing systems pages june 
dsb dubois briggs 
memory access buffering multiprocessors 
proceedings thirteenth annual international symposium computer architecture pages june 
kourosh gharachorloo anoop gupta john hennessy 
performance evaluation memory consistency models shared memory multiprocessors 
acm sigplan notices april 
gharachorloo lenoski laudon phillip gibbons anoop gupta john hennessy 
memory consistency event ordering scalable shared memory multiprocessors 
computer architecture news june 
goo james goodman 
cache consistency sequential consistency 
technical report sci committee march 
ha ahamad 
slow memory weakening consistency enhance concurrency distributed shared memories 
proceedings th international conference distributed computing systems pages may 
keleher cox zwaenepoel 
lazy release consistency software distributed shared memory 
sigarch computer architecture news may 
lam leslie lamport 
time clocks ordering events distributed system 
communications acm 
lam leslie lamport 
multiprocessor computer correctly executes multiprocess programs 
ieee transactions computers september 
lenoski laudon gharachorloo 
weber gupta hennessy horowitz lam 
stanford dash multiprocessor 
ieee computer pages march 
ls lipton sandberg 
pram scalable shared memory 
technical report cs tr princeton university september 
mos david mosberger 
memory consistency models 
operating systems review january 
rin martin rinard september 
personal communication 
rsl martin rinard daniel scales monica lam 
jade high level machine independent language parallel programming 
september 
sit richard sites editor 
alpha architecture manual 
digital press burlington ma 
swg pal singh wolf dietrich weber anoop gupta 
splash stanford parallel applications shared memory 
technical report csl tr stanford university 
zb zucker 
baer 
performance study memory consistency models 
sigarch computer architecture news may 
