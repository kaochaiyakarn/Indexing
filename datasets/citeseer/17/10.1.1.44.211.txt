adaptive object oriented framework flexible adaptive communication protocols donald box douglas schmidt suda ics uci edu schmidt ics uci edu suda ics uci edu department information computer science university california irvine ca traditional transport systems adequately provide functionality flexibility required existing multimedia applications 
conventional protocol architectures static configuration relatively protocols incapable providing level performance channel capable producing performing processing needed application 
multimedia applications require transport systems configured match functional requirements diverse multimedia traffic sources capable adapting dynamism inherent multimedia applications heterogeneous internetworks 
describes adaptive transport system architecture support multimedia applications high speed networks 
adaptive system applies object oriented design implementation techniques build integrated framework protocol specification composition prototyping experimentation 
utilizes hierarchical specification technique allows policies communication session specified actual mechanisms carry policies 
monitoring analysis facilities provide rich environment controlled experimentation rapid prototyping integrated instrumentation 
traditional transport systems adequately provide functionality flexibility needed existing multimedia applications high speed networks 
applications currently accept wholesale functionality behavior available protocol tcp udp tp vmtp attempt provide transport subsystem building lower level communication service primitives 
due diversity application requirements paucity available protocols systems approach leads lowest common denominator solutions satisfy requirements narrow appeared proceedings fourth ifip conference high performance networking liege belgium december 
range target applications 
approach leads multiple ad hoc implementations easily extended modified shared 
places burden protocol processing application programmer may fluent design implementation communication protocols 
alleviate situation transport systems provide communication service flexible adaptive application diversity network diversity host system diversity 
application diversity distributed multimedia applications impose unique performance constraints underlying communication medium supporting transport system demanding dynamic previously encountered traditional data applications 
presence applications increases dynamism underlying network supporting transport systems due high degree variance traffic characteristics exhibited applications data sources highly bursty high bandwidth variable bit rate video sources relatively steady low bandwidth digitized voice sources short transactional sources 
transport systems providing communication service utilizes traditional communication protocol suites typically offer options respect quality service high throughput low delay functionality service reliable inorder data stream best effort datagram provided 
existing multimedia applications require various levels performance peak average bandwidth maximum delay low jitter behavior synchronization application delivery error correction adequately addressed existing systems 
network diversity diversity network characteristics encountered distributed multimedia applications due heterogeneity internetworking environments dynamic multipath routing fluctuations network state caused traffic sources described 
network characteristics vary network environments include channel speed mbps ethernet mbps fddi mbps mbps atm maximum data transfer unit octets ethernet octets octets atm available service types datagram virtual circuit multicast broad cast access control scheme csma cd switch 
network characteristics may vary dynamically lifetime association include aforementioned characteristics may fluctuate due change routing multipath routing change number location participants communication session 
additionally network characteristics packet loss rate delay vary greatly lifetime association due transient network congestion 
host system diversity large degree diversity exists degree nature support provided host systems communication protocols 
diversity appears available hardware cpu network interface memory hierarchy supporting system software 
software related issues scheduling mechanisms kernel lightweight processes vs streams service routines user kernel data delivery mechanisms bsd socket layer vs kernel upcall mechanism buffer management schemes bsd mbufs vs streams ts protocol composition demultiplexing mechanisms streams modules vs kernel protocol session objects 
hardware issues variable host systems include processor architectures uniprocessor vs shared memory multiprocessor vs message passing multiprocessor explicit support protocol processing performing protocol processing board processors specialized hardware assist single protocol function effects interrupts system performance number interrupts required move data host system memory network interface performance penalty processing due amount context processor save interrupts cache invalidation pipeline flushing 
adaptive system adaptive dynamically assembled protocol transformation validation environment 
adaptive system designed address diversity described providing flexible adaptive kernel protocol mechanisms provide framework protocol composition unified scheme specifying policies mechanisms provide communication services integrated environment specification collection presentation performance data 
shown adaptive main subsystems 
map applications networks transport systems interacts entities communication session select policies mechanisms satisfy application communication requirements diverse needs application dynamic state network 
section describes detail 

transport kernel objects tko tko instantiates precisely tailored transport system session contexts library reusable protocol mechanisms 
sessions maintain streams corresponds independent unidirectional data stream logical endpoints communication 
section describes tko detail 

uniform transport evaluation subsystem unites unites provides infrastructure traffic monitoring performance evaluation protocol instrumentation 
section describes unites detail 
adaptive design principles adequately supporting diversity application requirements network characteristics described section requires flexible transport system architecture provides communication service appropriate specific traffic sources underlying network technologies 
adaptive allows behavior communication session precisely tailored required service implementing protocol terms set independently protocol mechanisms 
independence achieved strict uniform interfaces set functionally similar mechanisms 
composition scheme facilitates controlled protocol experimentation holding mechanisms session constant effects choices subset mechanisms accurately observed undue interaction rest protocol 
example effect protocol performance due changing connection management function implicit timer explicit handshake attributed mechanism selection factors held constant 
previous comparisons various protocol mechanisms done largely implementations context complete protocol making difficult isolate single mechanism interactions rest system 
accurate may reached suitability mechanism controlled experimentation techniques 
flexible protocol engineering leveraging established software engineering techniques task correctly implementing communication protocol complex traditional implementation methods 
adaptive provides framework reusable mechanism objects allow protocols developed new existing component mechanisms independently implemented tested maintained 
adaptive implements protocol mechanisms tko network interface application api unites interface ui unites metric data umd tsi nmi acd scs tmc tsa notification remote data tsa data nse umd umd umd umd umd umd network ui ui ui application data application data host operating system hosts adaptive system architecture comply uniform interfaces allowing implementation protocol mechanism replaced go back replacing selective repeat error recovery written interface affecting implementation constituent mechanisms 
protocol mechanisms implemented objects encapsulate current state protocol operations performed implement mechanism unified data type 
instances data types instantiated configured run time provide desired protocol function 
implementing protocol mechanisms objects yields desirable results 
information hiding details specific internal implementation mechanism hidden uniform interface 
enforcing principle separation concerns uniform interface creates firewall mechanism clients application programmer protocol implementer mechanism provider mechanism implementer 
reuse inheritance mechanisms implemented terms classes commonality set mechanisms shared inheritance 
inheritance common base class provides portion mechanism shared members set mechanism implemented deriving new sub class base requires implementer provide portion mechanism distinguishes mechanism rest set 
technique allows reuse interface error reporting mechanisms share interface reporting packets missing reuse implementation stream synchronization mechanisms underlying implementation attaching new data streams 

rapid prototyping utilizing collection protocol mechanisms provided adaptive combined techniques described protocol designers rapidly develop new protocols specifying desired configuration available mechanisms 
alternatively protocol mechanism designers may library available mechanisms reliable consistent base new protocol mechanisms may designed prototyped tested 
adaptive protocol operation addition flexibility described transport system exhibit adaptability sufficiently accommodate dynamism exist application alternate coding schemes subject activity adding subtracting data streams participants communication session network bandwidth availability packet loss rate fluctuations latency variations due switch terrestrial satellite links 
adaptive protocol configurations capable classes adaptivity 
parametric adaptivity varies behavior communication session adjusting subset parameters inter packet gap transfer unit size remote context update rate 
parametric adaptivity suited transient changes state network due congestion quantitative changes application behavior sample rate increases decreases 

functional adaptivity varies behavior communication session changing subset mechanisms changing selective repeat go back error recovery schemes enabling disabling gap duplicate suppression 
functional adaptivity required adjust fundamental changes state network due sustained packet loss increased latency changes routing qualitative changes application behavior requirements changing video coding schemes may require different error detection behavior adding participants unicast data stream requires different error recovery mechanism 
quantitative adaptivity varies behavior communication session adding subtracting data streams 
quantitative adaptivity required accommodate multi stream applications selectively disable enable multiple medium sources teleconferencing application switches audio audio video 
quantitative adaptivity required accommodate multi user collaborative applications dynamically add subtract participants workgroup 
adaptive provides various mechanisms support types transport system adaptivity described 
explicit mechanism replacement support building protocol mechanisms uniform interfaces hide variance different implementations single protocol mechanism update remote contexts implemented multiple different policies periodic updates request updates 
described section providing explicit interface implementation support run time mechanism replacement adaptive offers efficient consistent framework adaptive protocol operation 

application feedback feedforward control providing callback mechanisms applications notified changes operating environment network transport system remote communication entities allowing manipulation running session configurations uniform interface protocol adaptivity placed direct application control 
described section adaptive provides facility multiple levels granularity scope 

network feedback utilizing information collected adaptive unites subsystem protocol adaptivity enabled various conditions observed underlying network local remote transport systems 
unites provides information state network packet loss rate channel utilization state local remote adaptive entities buffer utilization retransmission counts 
section describe metric collection facilities adaptive detail 
map applications networks transport systems adaptive transformational system configures instantiates transport system configurations application requirements network characteristics 
adaptive subsystem provides application programmatic interface api adaptive system adaptive communication descriptors 
provide flexible mechanism applications describe grade service requirements application transport system interactions instrumentation measurement configurations 
performs series transformations acd synthesize session configuration specification scs adaptive tko subsystem instantiate instrument communication session 
hierarchical specification flexible adaptive transport systems little utility lack effective facility applications specify characteristics required communication session 
various schemes specifying application quality service qos requirements error rate throughput delay functionality service fos requirements connection oriented vs connectionless best effort vs acknowledged vs reliable delivery exist 
existing schemes designed transport systems inflexible non adaptive diversity application network characteristics 
specification scheme provide applications adequate interface flexible adaptive transport services explicit support offered 
variable granularity qos fos parameters specification scheme provide fine grain control applications aware require precise specification communication session configuration 
grain macro level specification required applications aware detail session configuration 

application specification allow applications specify communication session terms application domain specification scheme provide sufficient insulation underlying protocol implementation 
application specification allows application specify high level communication policies deliver data reliably relies transport system decide actual mechanisms par arq fec 
fine grain course grain application policies protocol mechanisms conversational voice real time isochronous reliable byte stream forward error correction rate control mbps mean bandwidth max jitter sequence insensitive acknowledged datagram tcp recover lost data hierarchical specification 
mechanism specification provisions applications require low level control exact configuration communication session 
mechanism specification permits application bypass application specification scheme directly specifying mechanisms communication session 
provisions rejecting inconsistent protocol configurations resulting incomplete incompatible specifications 

application transport system interaction previous requirements primarily address initial configuration communication session 
effectively support diversity dynamism inherent multimedia applications explicit provisions system interactions required 
provisions take forms transport system application data delivery specifies policies mechanisms transport system deliver received data application 
entails dictating deliver data immediately reception periodically reception related data deliver data upcall mechanism read write system calls 
application guided adaptation specifies conditions transport system needs react delay exceeding threshold remote application requesting additional data stream connection actions taken change retransmission mechanism notify application callback 
section describes adaptive communication descriptor hierarchical interface flexible adaptive transport services satisfies aforementioned requirements 
adaptive communication descriptor acd applications request communication services adaptive providing set adaptive communication descriptors 
communication session application furnishes separate acd data stream describes behavior requested stream 
acd consists major components follows 
quality service qos qos contains quantitative description desired service 
allows application specify range values parameter minimum acceptable expected maximum expected mean expected variance providing set default values don care maximum allowed unknown applications capable providing complete information 
qos parameters include throughput connection duration delay jitter loss probability 

functionality service fos applications specify qualitative behavior desired service fos 
fos describes policies recover lost transport service class example applications average burst delay jitter order loss priority factor sens sens sens tolerance delivery cast interactive voice conversation low low high high low high isochronous tele conferencing mod mod high high low mod distributional full motion video comp high high high mod low mod isochronous full motion video raw high low high high low mod real time non isochronous manufacturing control mod mod high var high low file transfer mod low low high non real time telnet low high high low high non isochronous line transaction processing low high high low var remote file service low high high low var transport service classes data suppress duplicates encryption carried transport system 
contrast qos describes data transmitted fos describes processing done transmission reception 

data synchronization delivery dsd dds specifies policies synchronizing multiple data streams communication session tolerance intra stream drift acceptable action take loss synchronization mechanisms ultimately deliver data application read write calls upcalls application kernel direct routing device 

transport service adjustment tsa tsa allows applications participate dynamic configuration communication session 
tsa set condition action pairs condition specifies event application interested responding resource request denied latency exceeds ms action specifies response taken callback application call internal adaptive routine 
internal routines range macro level operations abort connection fine grain actions implement parametric functional em quantitative adaptivity 
provides special condition value conjunction functional adaptivity operations allows application escape normal configuration process hard wire protocol configuration 
session configuration results direct specification method validated adaptive guarantee meaningful protocol produced fundamental mechanism incompatibilities exist 

transport metric configuration tmc accommodate protocol development prototyping measurement tmc allows application specify performance metrics interested monitoring 
metric specified measured host system throughput stream transmission count transmission delay sampling reporting rate sample milliseconds report seconds reporting action taken add sample repository callback application 
tmc allows application adaptive services instrument communication session 
operation adaptive communication descriptors provide api adaptive 
created application passed adaptive transform configuration requests expressed terms application domain requirements session configuration specifier scs directly instantiate communication session 
transformation process examines parameters acd attempts match pre configured transport service class tsc represents common set communication requirements shared class applications real time interactive isochronous 
shows representative set transport service classes parameters encompass 
transport kernel objects tko transport kernel objects tko protocol composition framework provides flexible data transport service applications 
provides set uniform interfaces library mechanism implementations various functions required compose multimedia communication protocols 
tko implemented collection classes allow protocols composed objects implement mechanisms particular protocol configuration 
shown tko consists major subsystems 
tko operating services interface library tko set classes provide efficient uniform interface basic operating system services required protocols 
tko allows protocols implemented portable consistent manner 

tko mechanism class library tko mcl set classes provide implementations various protocol mechanisms comprise communication session 
tko mcl partitioned mechanism families allow alternate implementations protocol function share interface implementation 
remainder section describes subsystems 
tko operating services interface library tko implementing efficient communication protocols general purpose computers requires operating system support protocol development operation 
services required operating environment include scheduling buffer management multiplexing demultiplexing context management 
existing systems provide subset services bsd unix unix system streams kernel little consistency environments 
example previously mentioned systems provide form buffer management bsd mbuf streams kernel msg somewhat different semantics interfaces basic set operations logical vs physical copying appending truncating messages 
tko provides consistent interface basic operating system services tko mcl protocol implementations providing classes 
basic abstraction temporal events 
protocols respond temporal events retransmission timer expiration periodic update requests 
class defines infrastructure event management providing operations schedule happen cancel 
objects schedule happen times intermittent periodic may cancelled triggered happen asynchronously operating system timer facility 
accommodate synchronization multimedia applications protocols isochronous devices converters frame buffers allows periodic events enable disable drift compensation overcome fluctuations system scheduling services 

basic abstraction incoming outgoing network messages 
previous shown memory memory copying significant source transport system overhead 
form buffer management necessary avoid unnecessary copying moving messages protocol entities adding deleting headers trailers 
class provides uniform interface services create copy prepend split messages 
objects internally divided distinct regions header data 
data region supports efficient logical copying operations segmenting reassembling data chunks 
header region supports operations prepend efficiently prepend header information message strip 
explicit support provided combining separating component sub messages belonging multiple data streams subsequent delivery network application 

basic abstraction communication session 
protocol implementation retain collection state variables proper operation protocol 
environment includes information protocol maintain session basis addressing internal buffer management protocol specific operations mechanism associating state variables session global state specific protocol session associated specifically operations methods performed part protocol processing 
encapsulates information uniform interface allows basic protocol operations send recv control properly dispatched appropriate protocol function 
implemented parts global variables functions responsible creation management demultiplexing incoming appropriate instance variable functions responsible performing protocol specific operations incoming outgoing 
classes provide foundation operation composition protocols tko mechanism class library described 
tko mechanism class library tko mcl implemented class library reusable protocol mechanisms 
tko mcl class implementation single protocol function error detection encryption transmission control encapsulates state method needed perform desired function 
tko protocol composed multiple lightweight tko mcl objects performs different protocol function 
remainder section provides description tko mcl discusses performance enhancements available tko mcl protocol implementors 
tsi unites ui network subsystem tko nmi ui ui api application global tko mcl application host operating system transport kernel objects mechanism families efficiently support flexible configuration adaptive reconfiguration tko mcl organized inheritance hierarchy 
tko mcl takes advantage language mechanisms encapsulation bind operations associated context allowing object oriented protocol composition dynamic binding allow protocol operations transparently automatically selected run time inheritance allows multiple protocol mechanisms implemented specializations single mechanism 
shown tko mcl class hierarchy partitioned multiple mechanism families provides implementations protocol function error reporting encoding stream synchronization 
mechanism family consists distinct types classes single base class abc defines interface signature protocol mechanism optionally implements shared default behavior concrete derived classes derived represents particular implementation protocol function family represents 
mechanism family new mechanism implementations usually implemented deriving directly base class alternatively derived indirectly concrete derived class small amount behavior existing implementation needs changed 
derivation subclassing implementation technique offers advantages ffl shared interfaces allow multiple implementations transparently plugged perform protocol function 
interface consists collection methods member functions provide consistent controlled access services provided mechanism implementation 
dynamic binding virtual member functions ensures appropriate code executed class particular implementation instance 
detailed discussion appears section 
ffl shared implementations allow mechanism implementation expressed terms differences base class 
reusing existing implementations specialization allows new protocols implemented rapidly aids task protocol maintenance defects repaired base class automatically repaired derived classes 
shown tko mcl provides standard set mechanism families correspond basic mechanisms protocol processing connection management remote context management reliability management stream synchronization management transmission management 
reliability management mechanism family shown example composite component described section 
described family contains single base class defines basic interface mechanism multiple concrete derived classes represent specific policy decisions implement mechanism 
tko manager base classes tko manager concrete derived classes tko manager composite components bit error detection selective ack selective repeat ignore damaged pdus go back error recovery tsi connection management mechanism family transmission management mechanism family implicit timer explicit hand shake sliding window wait application ui network subsystem tko tk context rate control api nmi ui ui error detection error reporting gap duplicate detection selective nack cumulative ack periodic transmission remote context management mechanism family reliability management mechanism family application data forward error correct tko mechanism class library context architecture tko provides additional class links selection various tko mcl mechanism implementations form cohesive protocol 
tko utilizes unidirectional data stream combining multiple possibly different form communication session 
shown single object provide rendezvous point managing associated multiple data streams attached session 
maintains set pointers base classes tko mcl mechanism family 
operational created setting pointers instances appropriate concrete derived classes 
optimizations previously described maintain pointers base classes rely language mechanisms dynamically bind appropriate executable code run time 
studies shown possible efficiently implement operating systems communication protocols techniques adaptive tko provides optimizations streamline creation operation commonly instantiated protocol configurations 
composites shows reliability management implemented composite component 
composites allow multiple related mechanism families bundled larger mechanism 
composites useful enforcing relationships multiple sub mechanisms requiring go back error recovery cumulative acknowledgments allowing sub mechanisms independently cumulative acknowledgment sliding window flow control 
composites allow larger mechanism represent replaced operation greatly reduces complexity run time reconfiguration 
contexts tko allows entire commonly protocol configurations 
entails implementing class collection actual instances constituent mechanisms collection pointers instances created separately linked run time 
technique offers performance eliminating levels indirection due pointer dereference virtual function resolution allowing instances contexts cached faster instantiation 
uniform transport evaluation subsystem unites primary goals adaptive system provide framework controlled protocol experimentation 
adaptive provides integrated experimentation environment utilizing unites metric specification collection analysis presentation facilities 
performance data gathered unites evaluate various protocol mechanisms configurations respect level service provided application utilization underlying communication channel internal unites metric repository mean delay retransmissions packet loss rate cancel ok unites metric specification unites metric presentation unites architecture performance characteristics set protocol mechanisms 
shown unites metric repository stores collected performance data shared database minimize intrusion metric collection process 
users may access information interactive graphic displays unites run time library standard network management protocols snmp 
metric data available systemwide host connection basis 
performance monitoring process initiated application programs transport measurement component tmc parameter adaptive communication descriptor acd indicate metrics interested monitoring 
adaptive selectively instruments instantiated tko configurations automatically collects performance data operation system 
metric collection may specified independent communication session graphics language interface unites 
defines specification language indicates measurements collect traffic generate 
unites provides similar functionality unites metric specification language provides graphical interface allows complex metric collection configurations specified common user interface elements check boxes edit text fields buttons menus 
interface generate code subsequent modification directly configure unites metric collection configuration 
unites supports primary classes metrics black box white box 
black box metrics require knowledge interaction internal implementation protocol configuration 
black box metrics include host system metrics throughput latency jitter network metrics bit error rates network utilization packet lengths 
white box metrics require internal instrumentation protocol configuration may collected mechanism mechanism family connection application host system systemwide basis 
white box metrics include retransmission count buffer utilization instruction length scheduling dispatching overhead 
black box white box metrics contribute pinpointing performance bottlenecks protocol configurations 
summary adaptive provides integrated framework protocol composition evaluation experimentation 
utilizes object oriented design implementation techniques create infrastructure protocol composition allows flexible configuration adaptive reconfiguration communication protocols 
adaptive system integrates hierarchical specification application requirements protocol configurations monitoring reporting performance metrics create transport system capable adapting network application diversity dynamism 
currently designing implementing prototype implementation written runs system streams 
plan prototype experiment different transport system configurations support multimedia applications network voice video running different networks ethernet tree network fddi 
acknowledgments hung huang help designing adaptive system 
hutchinson peterson design kernel proceedings sigcomm symposium stanford calif pp 
august 
unix software operations unix system release programmer guide streams 
prentice hall 
leffler mckusick karels quarterman design implementation bsd unix operating system 
addison wesley 
jain schwartz transport protocol processing gbps rates proceedings symposium communications architectures protocols sigcomm philadelphia pa pp 
acm sept 
parallel protocol implementations transputers experiences osi tp osi xtp proceedings ieee workshop architecture implementation high performance communication subsystems feb 
porta schwartz design verification analysis high speed protocol parallel implementation architecture proceedings ieee workshop architecture implementation high performance communication subsystems feb 
kanakia cheriton vmp network adapter board nab high performance network communication multiprocessors proceedings symposium communications architectures protocols sigcomm stanford ca pp 
acm aug 
steenkiste analysis nectar communication processor proceedings ieee workshop architecture implementation high performance communication subsystems feb 
bailey peterson chip experiment hardware demultiplexing proceedings ieee workshop architecture implementation high performance communication subsystems feb 
schmidt box suda adaptive flexible adaptive transport system architecture support lightweight protocols multimedia applications highspeed networks proceedings st symposium high performance distributed computing hpdc syracuse new york pp 
ieee september 
stiller model flexible high performance communication subsystems tech 
rep tc ibm research division february 
versatile protocol processing multimedia communications th ieee comsoc international workshop multimedia communications monterey california pp 
ieee 
tschudin flexible protocol stacks proceedings symposium communications architectures protocols sigcomm zurich switzerland pp 
acm sept 
rudin williamson survey light weight transport protocols high speed networks ieee transactions communication vol 
pp 
november 
biersack comparison error control protocols high bandwidth delay product networks protocols high speed networks ii ifip 
performance study iso transport protocol ieee transactions computers vol 
pp 
march 
measured performance transport service lans computer networks isdn systems 
meyer object oriented software construction 
englewood cliffs nj prentice hall 
bjarne stroustrup ellis annotated manual 
addison wesley 
parnas clements weiss enhancing reusability information hiding itt proceeding workshop reusability programming 
stiller concept flexible high performance transport system telecommunications multimedia applications computer science pp 
oct 
ccitt geneva ccitt recommendation isdn service aspects 
ec application analysis research developement advanced communications technologies europe tech 
rep commission european communities xxx 
clark structuring systems upcalls proceedings th symposium operating system principles shark wa 
netravali design implementation high speed transport protocol ieee transactions communications 
clark jacobson analysis tcp processing overhead ieee communications magazine vol 
pp 
june 
malley abbott hutchinson peterson transparent blast facility journal internetworking vol 
december 
campbell russo johnson design multiprocessor operating system proceedings usenix workshop pp 
usenix association november 
zweig conduit communication abstraction proceedings nd usenix conference pp 
usenix association april 
ii monitoring tool distributed multiprocessor systems performance evaluation pp 

pink 
application protocols performance benchmarks ieee communications magazine vol 
pp 
june 
huang suda lan collision avoidance switch implementation simulation study proceedings th conference local computer networks 
