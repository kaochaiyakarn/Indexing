analyzing java software combining metrics program visualization software systems laboratory tampere university technology box fin tampere finland cs tut fi ping yu department computer science university victoria box victoria bc canada csr uvic ca muller department computer science university victoria box victoria bc canada csr uvic ca shimba prototype reverse engineering environment built support understanding java software 
shimba uses rigi sced analyze visualize explore static dynamic aspects respectively subject system 
static software artifacts dependencies extracted java byte code viewed directed graphs rigi reverse engineering environment 
static dependency graphs subject system annotated attributes software quality measures analyzed visualized scripts user programmable interface 
shimba extended chidamber kemerer suite object oriented metrics 
metrics measure properties classes inheritance hierarchy interaction classes subject system 
shimba primarily intended analysis exploration java software metrics tailored measure properties software components written java 
show metrics applied context systems reverse engineering environment 
static dependency graphs system investigation decorated measures obtained applying object oriented metrics selected software components 
shimba provides tools examine measures find software artifacts values range detect correlations different measures 
object oriented analysis subject java system investigated exporting measures spreadsheet 

software maintenance re engineering reuse involving large software systems complex costly risky mainly difficult time consuming task program comprehension 
reverse engineering tools built fifteen years help comprehension large software systems 
tools aid extraction software artifacts dependencies synthesis high level concepts 
tools provide support analyzing software systems automate mundane repetitive understanding operations 
advent object oriented programming languages smalltalk java object oriented design development methods widely adopted software industry 
popular object oriented programming panacea 
need assessing quality software systems changed 
just object oriented programming requires different approach compared imperative programming software metrics object oriented programs differ traditional software metrics 
object oriented metrics key metrics aim measure design code quality investigating coupling classes cohesion classes complexity classes complexity inheritance hierarchy 
metrics play significant role reverse engineering existing software system 
approach object oriented complexity metrics identify high low complexity parts subject system 
experienced maintainers assigned complex subsystems 
strategy identify complex tightly coupled parts subject software system 
parts difficult modify reuse candidates restructuring refactoring significant redesign 
metrics identify highly cohesive loosely coupled parts software potentially represent subsystems 
hierarchies subsystems form organizational axes software exploration turn program comprehension 
consider chidamber kemerer suite object oriented metrics aid reverse engineering understanding java software 
metrics measure properties classes inheritance hierarchy interaction subsystems 
metrics implemented shimba prototype reverse engineering environment analyze java software 
shimba supports exploration visualization analysis static dynamic reverse engineering 
static reverse engineering aims model structure subject software system dynamic reverse engineering intends model run time behavior 
shimba integrates reverse engineering environment rigi dynamic analysis engine sced extensible suite object oriented metrics 
consider static reverse engineering 
static information extracted byte code subject system analyzed rigi 
rigi uses graph model represent information software entities relationships attributes abstractions 
collection object oriented metrics operates directly java byte code 
metrics suite applied entire java program subsets individual packages classes 
resulting measures attached rigi graphs subject system simply stored files 
rigi user programmable built rigi command language rcl tcl tk 
queries analyses encoded rcl scripts operate subject system static dependency graph annotated object oriented complexity measures 
scripts flexible versatile tool explore investigate measures 
example script depicted allows reverse engineer identify parts subject software system metric desired value range 
script takes arguments type metric lowerbound upperbound 
argument type defines node type rigi graph 
accepted types correspond extracted java artifacts class interface method constructor static initialization block 
argument metric defines object oriented metric examined 
arguments lowerbound upperbound represent minimum maximum values respectively 
threshold value representing limit value argument threshold 
script selects nodes type type rigi graph higher value threshold metric 
example call script java select metric class cc 
tcl interpretable scripting language script library rigi easily extended new scripts added fly 
allows reverse engineer write scripts specific tasks scripts support analysis metric values 

script identifies parts target software metric desired value range 

object oriented metrics suite chidamber kemerer metrics suite contains object oriented metrics discussed extensively object oriented metrics literature 
distinguish metrics categories inheritance metrics communication metrics complexity metrics 
inheritance metrics examine inheritance hierarchy object oriented programs communication metrics estimate internal external communication software components complexity metrics measure logical structure complexity selected components 

inheritance metrics java inheritance hierarchy single tree classes inherit single root object class called java lang object 
purpose discussion distinguish foundation application classes separate inheritance tree parts 
foundation classes encompass classes part java development kit jdk java foundation classes classes java library 
application classes include application oriented classes 
goal measure design code qualities subject system take foundation classes account computing measures inheritance metrics 
include foundation classes skew results quality foundation classes 
applying metrics foundation classes provides solid base line compare measures derived application classes 
employ metrics evaluate quality inheritance hierarchy 
depth inheritance tree dit 
number children noc 
metrics introduced chidamber kemerer 
language single inheritance java depth class interface depth inheritance tree dit simply number ancestor classes interfaces number classes interfaces path single root class interface 
dit value class indicates ancestor classes potentially affect 
metric measures size design complexity class interface 
size class number methods instance variables class complexity class increases depth inheritance tree 
classes interfaces belonging foundations classes ignored root class interface considered extend implement class interface belonging subject system 
number children noc class number classes extend class 
interface noc sum number interfaces extend number classes implement 
noc value class number classes subtree classes potentially affected 
noc value class interface indicator design system affected changed 
classes interfaces high noc value maintained experienced software engineers 
dit noc numbers class indicators design complexity class 
inheritance metrics predict reusability design complexity 

communication metrics employ metrics measure coupling cohesion classes objects 
response class rfc 
coupling objects cbo 
lack cohesion methods lcom 
inheritance metrics metrics introduced chidamber kemerer seminal oopsla 
rfc measure size complexity class interaction communication class rest system 
rfc sum number methods class number external methods potentially called class 
compute number methods class count regular methods constructors static initialization blocks belong 
ignores calls members class 
class set member functions set member functions belonging classes called members rfc size set definition rfc metric treats calls external methods 
calling method super class add complexity calling method class 
example java default constructor super class called automatically constructors subclasses 
furthermore overloading method subclass typically contains call overloaded method super class 
goal cbo metric distinguish cases 
measures coupling class classes related inheritance 
compute cbo measure constructors methods taken account 
dependencies classes super class subclass relationship constitutes coupling including method calls constructor calls instance variable assignments kind instance variable accesses 
literature formulas introduced compute lack cohesion metric lcom 
adopted definition introduced analyze java programs 
measures lack cohesion dissimilarity methods class inherited methods including overloaded methods 
lcom value denotes number pairs methods shared instance variables minus number pairs share instance variables 
consider class set methods mm set data members accessed number methods access data attribute lcom defined follows lcom gamma gamma methods class logically related 
class exhibits low method cohesion indicates de sign class probably partitioned incorrectly 
case design improved class split classes individually higher cohesion 
lcom metric helps identify flaws design 

complexity metrics object oriented metric suites include traditional code complexity metrics 
employ cyclomatic complexity cc weighted methods class wmc metrics measure complexity control flow 
mccabe cyclomatic complexity assess logical structure complexity sequential algorithm method function procedure 
counts number test cases needed test method comprehensively 
cc metric metrics 
formula adopted henderson sellers compute cc cc gamma complexity graph number nodes edges respectively number disconnected components complexity graph single method control flow graph 
wmc defined sum complexities methods class inherited methods including overloaded methods 
henderson seller cyclomatic complexity cc compute complexity method 
wmc cc wmc proportional number methods class complexity logical structure methods 
higher class wmc measure difficult understand maintain 

collecting visualizing information software artifacts dependencies directly extracted java class files 
extracted information includes components classes interfaces methods constructors variables static initialization blocks 
extracted dependencies artifacts include extension relationships class extends class implementation relationships classes interfaces containment relationships class contains method call relationships method calls method access relationships method accesses variable assignment relationships method assigns value variable 
extractor written java uses public classes sun tools java package jdk 
java byte code extractors discussed instance 
rigi visualize constructed static dependency graphs 
rigi software artifacts depicted nodes relationships directed edges nodes 
different types nodes edges represented different colors 
shimba reverse engineering environment user interactively select subset metric suite applied 
measures computed software components current context artifacts static information extracted byte code 
measures added attribute values rigi nodes 
default attribute values nodes visible rigi analyzing graph 
examined graph editor selecting node opening pop dialog 
shown screen snapshot rigi session 
case user selected node de uni paderborn dis opened attribute visualization widget lists attribute values node 
measures node attributes rigi provides flexible powerful mechanisms analyze values static dependencies 

attribute values selected node examined rigi opening popup window 

threshold values object oriented metrics literature discusses language dependent heuristics threshold values correspond high low quality software components 
usually experiences software projects treated heuristics recommendations 
lorenz kidd propose threshold values object oriented metrics smalltalk experience selected smalltalk projects 
papers report experiences java projects 
result heuristics threshold values assessing java programs 
threshold values smalltalk probably better starting point java pure object oriented language 
fixed ranges threshold values java components recommend engineers assess java software experiment value ranges user programmable scripts provided shimba reverse engineering environment 
reverse engineer option running script called java select attributes thresh define initial threshold values 
script takes arguments type metric threshold 
script java select metric argument type defines node type rigi graph argument metrics defines object oriented metrics examined 
threshold value representing limit value argument threshold 
script selects nodes type rigi graph higher value type type rigi graph higher value threshold metric 
running script user quickly find software artifacts critical extreme measures classes complex 

applying metrics fujaba system gain experience object oriented metrics program understanding purposes analyzed fujaba system shimba 
fujaba developed university paderborn germany freely available downloadable web 
primary objective fujaba project environment round trip engineering unified modeling language uml story driven modeling sdm design patterns java 
investigated fujaba version 
extracting static information applying metrics suite resulted dependency graph software artifacts annotated computed measures 

extreme measures locate extreme measures ran rcl scripts 
shows methods highest cc values call displayed shimba 
nodes easily running java select attributes thresh script see section 
running script complex methods 
nodes selected names shown 
rest graph filtered 
note subgraph nodes bottom forms complex structure methods high cc values call 
java select attributes thresh script construct rigi graph search classes dit values higher 
graph includes inheritance hierarchy classes 
easily achieved running scripts standard rcl library rigi 

fujaba methods highest cc values investigated communication metrics rfc cbo lcom fujaba 
running java select attributes thresh script communication metrics readily apparent coupled classes respect rfc metric belong de uni paderborn fujaba uml package 
top classes highest rfc values classes belong package 
similar ratios obtained cbo lcom metrics respectively 
derive de uni paderborn fujaba uml largest packages fujaba correct 
high coupling measures encouraged take closer look measures generated package 
classes highest rfc cbo values listed table decreasing order original metric values 
table turn shows highest lcom measures package 
classes listed table inner classes 
fully qualified name inner class consists name owner class separated character name inner class 
rfc cbo umlclass umlclass table 
classes de uni paderborn fujaba uml package highest rfc cbo measures 
classes listed decreasing order measures 
values shown braces 
lcom umlclass table 
classes de uni paderborn fujaba uml package highest lcom measures 
classes listed decreasing order measures 
values shown braces 
examine dependencies class umlclass highest rfc value executed queries static dependency graph rcl scripts 
standard rcl script select identify classes coupled class umlclass 
script phases 
find methods constructors static initialization blocks class umlclass 
script find methods constructors static initialization blocks call dependency member functions 
script select owner classes member functions 
methods belong fujaba call dependency member functions class umlclass 
example methods class java lang string called 
couple rcl scripts methods collapsed high level rigi node represents package belong 
rest graph filtered 
exhibits resulting graph 
inheritance relationships shown indicate calls superclass methods form large part coupling 
cases calls considered harmful 

classes packages class umlclass coupled 

correlation metrics investigate measures exporting data spreadsheet 
enduser programmable rigi interface write measures file readable microsoft excel spreadsheet 
take advantage functions programming capability techniques excel provides 
depicts line diagram produced excel original communication measures package de uni paderborn fujaba uml 
diagram difficult conclude values different metrics correlate metrics different value ranges 
running rcl script static dependency graph normalized complexity communication measures order compare analyze generated measures effectively 
measure normalized subtracting mean dividing result standard deviation 
resulting values depicted zero mean unit deviation 
correlation metrics easier recognize diagram diagram 
complete investigation communication metrics study lcom metric 
original values rfc cbo lcom metrics classes de uni paderborn fujaba uml package 
de uni paderborn fujaba uml package 
lcom metric measures communication logical complexity 
useful compare lcom measures cc wmc measures 
exhibits line diagram produced excel normalized complexity measures classes de uni paderborn fujaba uml package 
compare graphs figures observe shapes lines figures similar classes high communication measures high complexity metric values 
obvious exception class rfc cbo values high cc wmc lcom measures low 
classes typically consists methods call called classes implement complicated algorithms 
case class 
figures illustrate fact class umlclass high measures communication complexity metrics 
examining size umlclass class umlclass java files observe umlclass class clearly largest class de uni paderborn fujaba uml package size umlclass java file double size second largest class 
study correlation metrics detail excel macro generate correlation matrix normalized measures 
table exhibits pairwise correlation values 
coefficient greater consider metrics correlated 
larger coefficient maximum correlated metrics 
note metrics cause high correlation coefficients cases 
instance coefficient wmc cc 
normalized measures applying rfc cbo lcom metrics classes de uni paderborn fujaba uml package 
explained fact cc calculate wmc 
cc wmc lcom rfc cbo noc dit cc wcm lcom rfc cbo noc dit table 
correlation matrix normalized measures 

related research software metrics including object oriented metrics reverse engineering reengineering environments help user analyze constructed views software investigated 
environments tool sets include mccabe reengineer mccabe associates provides views system architecture views interaction modules analysis source code 
metrics measure complexity structuredness software components 
results illustrated coloring views recognize exceptional metrics values 
approach run scripts execute queries dependency graphs 
shimba prototype environment supports dynamic static reverse engineering java software mccabe reengineer supports languages provides large set tools testing subject software assist re engineering process various ways 

normalized measures obtained applying cc wmc lcom metrics classes de uni paderborn fujaba uml package 
codecrawler platform built support program understanding combining metrics program visualization 
codecrawler provides views show selected structural aspects software simple twodimensional graph 
rigi nodes dependency graph represent software artifacts class 
able visualize metric values simultaneously single node size node render measurements width height position node render measurements coordinates color node gradient color white black visualize measurement 
approach visualization technique codecrawler able show static dependencies software time 
furthermore graph editable support querying techniques 
cs verilog supports static dynamic analysis software system 
able produce static call control graphs subject system 
shimba control graph information calculate cc wmc values graphs graphically 
addition call dependencies constructed dependency graph shimba contains information inheritance implementation variable accesses variable assignments 
quantitative information software metrics graphs generated help user diagnose defects 
large set metrics supported includes inheritance communication complexity metrics 
metric graphs identify components exceptional measures 
shimba exceptional measures identified making queries annotated static dependency graph 
introduce approach model requirement specification system implementation large distribute system 
approach combines forward reverse engineering techniques supports software maintenance 
shimba support forward engineering extended purpose 
example dynamic reverse engineering process results uml type sequence diagrams state diagrams visualized sced 
diagrams analysis design phases object oriented software construction 
size metrics code characteristic measurements 
values metric report 
tool called model entities relationships extracted code 
generate various kinds tree diagrams cross diagrams demand 
approach metrics directly mapped program visualization 
shimba add hoc queries supported 
usage queries limited fixed set questions asked 
shimba amount type queries limited 
queries construct different views target software 
supported 
hindsight reverse engineering tool produce different kinds reports charts diagrams help program understanding 
hindsight uses software metrics analyzing complexity subject system 
metrics cross reports exception reports diagrams metric charts 
metrics overlaid call graph 
shimba metrics annotated static dependency graph saved file readable example microsoft excel spreadsheet 
hindsight gives automated support analyzing impact code changes supports testing 
facilities supported shimba 

discussion approach apply object oriented metrics reverse engineering environment program understanding purposes 
combining metrics information graphical reverse engineering tool helps reverse engineering process analysis measures 
reverse engineering challenging tasks building views parsed static dependencies 
accomplished synthesizing high level components concepts represent software artifacts highly cohesive loosely coupled components 
metrics find parts support task effectively 
reverse engineering tool find software artifacts extreme exceptional measures 
values need rec order propose restructuring refactoring offending components 
shimba reverse engineering tool implement ideas combining metrics program understanding technology 
shimba contains rigi sced object oriented metrics suite 
rigi visualize static dependencies subject system nested graphs extracted java byte code 
graphs annotated measures obtained applying metrics suite subject system 
rigi provides extensible script library executing queries graph explore inspect modify 
contributed new scripts rcl scripting library identify extreme measures find measures fall range 
having identified interesting highly cohesive parts subject system reverse engineer investigate static dependency graph complex parts built related rest system measures related components 
different views subject software quickly generated scripts 
views help reverse engineer find answers questions 
furthermore measures normalized running script 
normalization needed correlate different metrics 
measures computed running metrics program integrated shimba reverse engineering environment 
metrics calculated rigi scripts 
information needed included static dependency graph new script calculates values adds information graph written added script library rigi dynamically desired 
possible metrics 
example cc metric computed control flow information usually included rigi graphs generated byte code extractor 
java compiler translates conditional statements specific binary instructions 
control flow determined examining usage instructions 
shimba supports dynamic reverse engineering 
run time analysis weight values method calls constructor invocations thrown exceptions added static rigi graphs 
weight values added node attributes way measures metrics suite 
provides information computing selected dynamic metrics 
example user calculate actual communication objects actual usage components 
investigated measures fujaba software discover big flaws design 
examining communication metrics rfc cbo lcom design flaws class structure information hiding strategy exhibited 
lcom measure class high rfc cbo values low suspected class unused variables variables properly selected class 
examining complexity metrics cc wmc complex data structures recognized 
inheritance metrics noc dit study inheritance hierarchy help estimating reusability extensibility subject system 
wish michael anonymous reviews helpful comments 
chidamber kemerer 
metrics suite objectoriented design 
ieee trans 
softw 
eng 
chidamber kemerer 
metrics suite object oriented design 
conference objectoriented programming systems languages applications oopsla pages 

unified modeling language notation guide 
www rational com 

controlling software projects 
yourdon press 
demeyer ducasse lanza 
hybrid reverse engineering approach combining metrics program visualization 
th working conference reverse engineering wcre pages 
fowler 
refactoring 
addison wesley 
graham 
migrating object technology 
addisonwesley 
henderson sellers 
object oriented metrics measures complexity 
prentice hall 

measuring coupling cohesion object oriented systems 
international symposium applied corporate computing 
li henry 
object oriented metrics predict maintainability 
sys 
softw 
lorenz kidd 
object oriented software metrics practical guide 
prentice hall 
mccabe 
complexity measure 
ieee trans 
softw 
eng 
muller orgun tilley uhl 
approach subsystem structure identification 
software maintenance research practice 
muller wong tilley 
understanding software systems reverse engineering technology 
nd association pour des sciences proceedings 
ousterhout 
tcl tk toolkit 
addison wesley 
mendelson 
sharpening global static analysis cope java 
cascon 
kontogiannis 
extracting java library subsets embedded systems 
rd european conference software maintenance reengineering 

fujaba homepage 
www uni paderborn de fachbereich ag schaefer ag dt pg fujaba fujaba html february 
rumbaugh jacobson booch 
unified modeling language manual 
addison wesley 

comprehending complex distributed object oriented software system report field 
th international workshop program comprehension iwpc 

relationships static dynamic models reverse engineering java software 
th working conference reverse engineering wcre pages 
tilley muller 
virtual subsystems project management 
ieee sixth international conference computer aided software engineering case pages 
ieee computer society press 
tilley muller 
virtual subsystems project management 
international journal software engineering knowledge engineering 

inside java virtual machine 
mcgraw hill 
wong 
rigi user manual version 
www rigi csc uvic ca rigi manual user html september 

