compass routing geometric networks evangelos kranakis school computer science carleton university ottawa canada singh jorge urrutia school information technology engineering university ottawa ottawa canada 
suppose traveler arrives city toronto wants walk famous cn tower free standing structures world 
assume visitor lacking map toronto standing crossing see cn tower streets sm choose start walk 
natural safe assumption visitor choose walk road points closest direction cn tower see 
close look maps numerous cities world show previous way explore new unknown city general yield walks close optimal ones travel location 
mathematical terms model map cities geometric graphs street intersections represented vertices graphs streets straight line segments 
compass routing geometric networks elemental form yields algorithm finding way cn tower 
compass routing suppose want travel initial vertex destination vertex information available point time coordinates destination current position directions edges incident vertex located 
starting recursive way choose traverse edge geometric graph incident current position closest slope line segment connecting vertex standing ties broken randomly 
graph shown compass routing produce path traveling compass routing 
study local routing algorithms geometric networks 
formally speaking suppose want travel vertex vertex geometric network 
routing algorithm called local routing algorithm satisfies conditions 
point time know coordinates starting position destination 
addition disposal finite amount storage keep constant number identifiers vertices network 
notice implies point time full knowledge topology entire network 

arrival vertex starting local information stored regarding neighbors edges connecting 
page information plus stored local memory choose edge incident traverse reach second vertex case 

allowed change local information stored notice particular left vertex return able determine visited identifier ones carry local memory 
recall remember constant number 
motivation condition imposed algorithms don want leave markers garbage vertices visited trying reach destination 
condition arises naturally sending information different nodes network 
example server connected web avoid keeping track messages passed server easily enormous amount memory heavily nodes quickly overload memory available sites 
problem study similarity problems explore graphs finding way maze leave markers indicating sections network visited 
respect algorithms ecologically sound sense don leave trail garbage walks 
interesting point assumption having geometric networks essential study straightforward prove arbitrary networks node list vertices adjacent local deterministic routing algorithms exist 
approach obtain local routing algorithms studied distributed networks compact routing algorithms interval routing boolean routing developed 
models store node network copy distributed algorithm 
schemes worst case storage intensive sense large amounts information may required store node order achieve pair shortest path routing see 
point view serious drawback previous approach topology networks algorithms developed assumed specific type cayley graphs 
goal developing routing algorithms applied existing communication networks restriction planar networks 
interesting note best network topology maps internet service providers internet backbone networks nationwide network modeled planar planar graphs see 
mention routing algorithms location destination studied framework wireless communication networks networks processors represent devices similar radio stations communicate sufficiently close see 
problems goal necessarily finding shortest path connecting vertices network sure information reaches destination 
compass routing true compass routing find path starting point geometric graph 
cases geometric graphs triangulations 
reader verify geometric graph shown try go compass routing travel cycle vertex set fv 
compass routing reach 
say geometric graph supports compass routing pair vertices compass routing starting produces path delaunay triangulation pn set points pn plane partitioning convex hull pn set triangles disjoint interiors page ffl vertices triangles points pn ffl triangle triangulation circle passing vertices contains point pn interior 
routing delaunay triangulations 
known elements pn general circular position pn defined 
rest section assume pn general circular position 
condition easily removed leaving results unchanged 
prove theorem pn set points plane pn supports compass routing 
proof suppose want go vertex vertex pn 
show compass routing chooses traverse edge sv pn distance strictly smaller distance pn finite number vertices prove eventually reach gamma line segment joining suppose intersects triangle vertices fs yg 
circle fs yg 
center mirror image respect line joining see 
ff fi angles formed gamma gamma gamma gamma respectively 
cases arise 
ff fi 
case compass routing choose edge sx straightforward see distance smaller 
fi ff 
intersection point open line segment joining point distance distance easy see lies open arc joining clockwise direction 
fi ff lie distance smaller distance compass routing ii obtain local information routing algorithm guarantees message eventually reach destination 
describe algorithm case geometric graphs embedded faces geometric graph convex unbounded assumed complement convex polygon see 
algorithm proceeds follows routing embedded geometric graphs 
compass routing ii 
starting determine face incident intersected line segment st joining pick edges incident start traversing edges find second edge say gamma boundary intersected st 
point update second face geometric graph containing gamma boundary 
traverse edges new find second edge gamma intersected st point update previous point 
iterate current step reach faces intersected st observe initially time update change value eventually reach face containing traverse boundary arrive show modify algorithm arbitrary geometric graphs 
observe vertices edges geometric graph induce partitioning plane set connected regions disjoint interiors necessarily convex called faces boundary faces closed polygonal admit edge page appear twice 
example graph shown polygonal bounding external face fv notice edge traversed twice suppose want travel vertex vertex calculate line segment joining determine face incident intersected st traverse polygonal determined checking line traversed intersects st calculate distance intersection point returning reach case need recall point polygonal bounding intersects st maximizes distance travel boundary reach point update second face face contains straightforward see eventually reach furthermore notice edge eof traversed twice regardless belongs determined faces graph shown traverse edges face bounded polygonal traverse edges external face polygonal point 
summarizing traveling theorem exists local information routing algorithm geometric graphs guarantees reach destination 
algorithm traverse linear number edges 
problem deciding planar graphs admit geometric embeddings compass routing produces shortest path pair vertices interesting 
direction proved trees embeddings outerplanar graphs 
general question developing shortest path local routing algorithms specific subfamilies planar graphs remains open 
atlas www ucl ac uk casa martin atlas isp maps html 
basagni woodward distance routing effect algorithm mobility proc 
mobicom 
universal routing schemes journal distributed computing pp 

frederickson designing networks compact routing tables algorithmica pp 

frederickson efficient message routing planar networks siam journal computing 
lower bounds shortest path interval routing proceedings pp 
santoro spirakis eds carleton university press 
ko vaidya location aided routing mobile ad hoc networks proc 
mobicom 
kranakis proceedings stacs pp 
puech reischuk eds vol 

kranakis boolean routing cayley networks proceedings santoro spirakis eds carleton university press 
santoro khatib labeling implicit routing networks computer journal 
stojmenovic liu geographic distance routing ad hoc wireless networks preprint site university ottawa 
page 
