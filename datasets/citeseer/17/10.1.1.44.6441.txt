balancing robustness efficiency unification augmented context free parsers large practical applications carolyn ros university pittsburgh pitt edu alon lavie carnegie mellon university cs cmu edu large practical nlp applications require robust analysis components effectively handle input extra grammatical 
effectiveness efficiency robust parser direct function main factors flexibility types disfluencies deviations grammar parser handle search parser search space possible interpretations techniques applied prune search space parse selection disambiguation methods resources evaluate rank potential parses sub parses parser cope extreme levels ambiguity introduced flexibility parameters 
chapter describe investigations balance flexibility efficiency context different robust parsers glr parser left corner chart parser unification augmented context free grammar formalism 
demonstrate combination beam search ambiguity packing statistical disambiguation provide flexible framework achieving balance robustness efficiency parsers 
investigations experimental results comparative performance evaluations parsers grammar spoken language english spontaneous scheduling task domain 
large practical nlp applications require robust analysis components effectively handle input extra grammatical 
regardless specific formalism grammar employ nlp systems process free unrestricted input prepared frequently encounter input deviates coverage pre developed grammar knowledge sources 
traditional parsing algorithms designed parse completely grammatical input sentences fail slightest deviation grammar unsuitable applications 
problem evident systems process spoken language 
spontaneous spoken language transcribed hand speech recognizer highly meaningful portions utterance surrounded variety phenomena disrupt grammaticality input stream 
common types extra grammaticality include repetitions false starts filled pauses idiosyncratic constructions speaker performance grammar covered particular system parsing grammar 
processing language requires analysis component robust various types disfluencies extract complete interpretation possible input 
researchers approached robust parsing problem variety different directions including symbolic statistical connec 
statistical connectionist approaches inherently robust trained automatically labeled corpora symbolic parsers capable performing deep detailed analysis linguistic principles 
symbolic parsers highly attractive tasks require deep understanding machine translation mt 
avoid failure faced extra grammatical input robust approaches symbolic parsing relax syntax grammar constraints 
cases semantic information compensate lack grammaticality order partially completely drive analysis process 
earliest approaches robust parsing involved hand coded grammar specific heuristics selecting subset analyses extend input word processed 
approaches making parser robust efficient redone hand new grammar developed 
hand coded heuristics constrains approaches handle cases consistent simplifying assumptions represented heuristics 
approaches robust parsing focus shallow partial parsing techniques 
attempting construct parse covering entire ungrammatical sentence approaches attempt construct analyses maximal contiguous portions input 
address computational expense problem limiting flexibility parsing algorithms 
result practical form robust parsing involving grammar specific heuristics limited potential coverage glr bounded free skipping approach 
evaluation demonstrates maximal contiguous analyses approach achieves acceptable translations glr beam skipping approach large scale machine translation evaluation 
principled approach problem robust symbolic parsing minimum distance parsing mdp 
faced input extra grammatical goal mdp parser find analysis corresponding grammatical input closest meaning input 
accomplished distance metric variety possible parser deletions insertions substitutions words input closest distance determined adjustable penalties 
full mdp parsers shown effective small applications small grammars approach scale large applications 
demonstrated previous large coverage grammars search space full mdp parser explore expands magnitudes render approach computationally infeasible 
attention shifted limited approaches consider restricted set parser maintain parsing efficiency 
research described investigation tradeoffs involved balancing robustness efficiency robust symbolic parsers 
effectiveness efficiency robust symbolic parsers direct function main factors flexibility types disfluencies deviations grammar parser handle search parser search space possible interpretations techniques applied prune search space parse selection disambiguation methods resources evaluate rank potential parses sub parses parser cope extreme levels ambiguity introduced flexibility parameters 
describe investigations balance flexibility efficiency context different robust parsers glr robust glr parser lcflex left corner chart parser 
parsers unification augmented context free grammar formalism 
demonstrate combination beam search ambiguity packing statistical disambiguation provide flexible framework achieving balance robustness efficiency parsers 
investigations experimental results comparative 
decl 
gamma gamma 
np 

agr agr subject form finite english grammar rule glr parser compiler performance evaluations parsers grammar spoken language english spontaneous scheduling task domain 
brief description underlying grammar formalism parsers fundamental parsing principles 
describe flexibility features robust parsers 
accompanied detailed investigations performance effects flexibility feature 
section discusses approach managing ambiguity disambiguation robust parsers 
planned research 
evaluations reported conducted english spontaneous scheduling domain grammar developed janus speech translation project 
grammar primarily semantic consists approximately rules accompanying lexicon approximately lexical entries 
grammar formalism attention decade unification formalisms lfg gpsg hpsg declarative theories describing structure natural language 
fundamental primitive formalisms unification feature representations 
practical systems structural analysis natural language designed support unification grammar specifications general cfg framework allows system incorporate known cfg parsing algorithms core system implementation 
examples systems core language engine cle alvey natural language tools anlt :10.1.1.14.634
underlying grammar formalism glr lcflex unification grammar formalism originally developed generalized lr parser compiler center machine translation carnegie mellon university 
formalism supports grammatical specification lfg framework consists context free grammar rules augmented feature bundles associated non terminals rules 
context free rule grammar formalism allows specification feature structure associated left hand side non terminal rule function feature structures associated non terminals right hand side rule 
run time parser computes actual feature values particular left hand side non terminal product operation creates left hand side non terminal identified constituents right hand side rule 
feature structure computation part specified implemented unification operations 
allows grammar constrain applicability context free rules 
lhs constituent context free rule created associated feature structure unification associated rule constituents successful 
example augmented grammar rule shown 
variable feature specification part rule bound left hand side non terminal decl contextfree part rule 
variables respectively bound right hand side constituents rule 
feature structures computed parse time attached corresponding parse node structures 
parsing input sentence parser returns list top parse nodes parse forest computed feature structure associated nodes 
glr parser glr parser robust extension generalized lr glr parser developed tomita 
tomita glr parsing algorithm evolved lr parsing techniques originally developed parsing programming languages late early 
lr parsers parse input bottom scanning left right producing rightmost derivation 
lr parsers driven table parsing actions pre compiled grammar 
tomita glr parsing algorithm extended original lr parsing algorithm case non lr languages parsing tables contain entries multiple parsing actions 
algorithm deterministically simulates non determinism introduced conflicting actions parsing table efficiently pursuing pseudo parallel fashion possible actions 
primary tool performing simulation efficiently graph structured stack gss 
gss data structure efficiently represents multiple parsing stacks correspond different sequences parsing actions 
additional techniques local ambiguity packing shared parse forests order efficiently represent various parse trees ambiguous sentences parsed 
local ambiguity packing collects multiple sub analyses category type derive substring single structure 
parsing actions may refer single structure represents entire collection sub parses packed sub parses separately 
shared packed forests allow common sub parses different analyses shared pointers 
primary type flexibility glr skipping words segments input string 
types skipping handled parser 
parser skip arbitrary prefix suffix input allowing complete analyses span entire input string 
refer feature parser inter analysis word skipping 
furthermore parser skip sequences words internal analysis 
refer feature intra analysis word skipping 
glr robust parser utilize free skipping approach constrained beam search technique grammar specific heuristics 
beam search keeps parser performance reasonable bounds 
making parser robust efficient completed needs done 
embodying simplifying assumptions analyses extend processing input word size beam bounds growth number analyses pursued parallel 
analysis possible amount skipping limits approach principle beam size larger 
needs backtracking avoids associated problems ambiguity packing 
glr parsing architecture demonstrated order magnitude efficient chart parsing architectures 
glr runtime performance suffers inefficiencies framework developed 
lcflex parser lcflex flexible left corner parser designed efficient robust interpretation 
approach robustness originally inspired earlier glr parser 
lcflex extended robustness capabilities glr supports various types flexibility including word skipping non terminal inserting flexible unification 
flexibility features easily controlled setting global parameters 
possible tailor parser behavior specific needs individual applications 
flexibility allowed parser greater robustness ambiguity computational expense terms time space 
ideally lcflex set order achieve desirable robustness versus efficiency trade 
trade application grammar genre dependent determining appropriate setting requires experimentation current version lcflex 
current research objectives semi automate process 
lcflex basic architecture left corner parsing algorithm described :10.1.1.14.634
uses reflexive transitive closure left corner relation top filtering bottom prediction order limit ambiguity enhance efficiency 
lcflex utilizes beam skipping technique similar previously developed glr parser 
glr lcflex searches maximal parsable subset sentence 
grammar independent approach robust parsing full sentences partial shallow parsing technique setting beam restricted level causes mimic shallow parsing approach 
lcflex implemented left corner parsing architecture order magnitude faster glr architecture 
added flexibility maintains computational advantage chart parsers lr parsers 
additionally incorporates efficiency measures part glr parser 
uses standard ambiguity packing algorithm augmented pruning step similar introduced 
pruning step eliminates packed analyses cover strictly subsumed subset portion sentence covered packed analysis 
ambiguity resolution lcflex uses adapted version statistical disambiguation approach discussed 
addition flexibility integral part glr parser lcflex embodies types flexibility 
addition skipping ability insert thought partial rule matching 
general inserting demonstrated impractical realistic sized applications sparingly useful applications language tutors grammar checkers arrive analysis extra grammatical input sentence determine extra grammatical :10.1.1.14.8710
lcflex set allow specific combinations insertions 
ability perform flexible unification 
complete flexible unification inefficient setting aside small set features soft features useful particularly language learning environments certain syntactic features tend acquired 
lcflex final flexibility feature level parsing mode allows construct partial analysis constrained level flexibility combine fragments partial parse running parser far constrained level flexibility 
level approach allows parser apply flexibility needed increasing efficiency parser 
word skipping glr lcflex spoken language particular repetitions false starts filled pauses noise surrounding islands parsable language word skipping essential form robustness 
word skipping featured prominently glr lcflex parser 
section describe word skipping approach constrained beam search technique implemented alternative parsing architectures demonstrating architecture independence approach 
translation evaluation demonstrates beam skipping approach effectively maximizes parser robustness keeping parser run time performance practical 
furthermore demonstrate lcflex implementation beam skipping maintains computational advantage lc parsers glr parsers 
word skipping glr glr accommodates intra analysis skipping allowing shift operations performed inactive state nodes gss shifting input symbol inactive state equivalent skipping words input encountered parser reached inactive state prior current word shifted 
glr lr previous reduce operations remain valid words input skipped reductions depend lookahead 
allowing parser consider possible internal skipping combinations computationally infeasible due explosion ambiguity 
glr uses beam search technique limit set words skipped parsing process 
purpose glr find maximal close maximal parsable subsets input applying adequate beam allow flexibility necessary recover desired parse 
beam search restricts parser pursuing beam fixed size parsing actions selected criterion locally minimizes number words skipped 
exists direct tradeoff amount search word skipping parser allowed pursue time space performance parser 
grammar determine smallest possible setting beam parameter allows parser find desired parses overwhelming majority cases 
word skipping lcflex glr lcflex able skip portions input sentences order search maximal portion construct analysis 
allows user control freely permitted skip searching maximal parsable subset input utterance 
glr lcflex incorporates inter analysis skipping intra analysis skipping forms skipping may separately 
inter analysis skipping lcflex allows analysis vertex chart 
way parser constructs analyses contiguous portion input possible 
inter analysis skipping accomplished lcflex modifying prediction mechanisms 
normally active edges created corresponding left hand side category predicted lcflex top bottom prediction mechanisms 
inter analysis skipping enabled goal category categories predicted vertex chart addition categories predicted active edges vertices 
allows full analyses vertex chart 
utterance processed analyses extracted chart searching inactive edges goal categories category 
inter analysis skipping turned analyses inactive state node internal gss top represented stacks 
vertex returned analyses word word 
extracted list analyses possible return subset largest analyses span maximum subset utterance 
way lcflex perform known partial parsers 
inter analysis skipping inadequate fails handle disfluencies appear analysis 
handle cases second type skipping intra analysis skipping allows parser skip words analysis 
intra analysis skipping lcflex accomplished copying active edges forward chart effect skipping words current vertex vertices edges copied 
word parsed active edges number previous vertices copied forward current vertex 
exact number previous vertices active edges copied determined parser different beams described bound number analyses pursued parser parallel 
alternative copying active edges forward search backwards chart active edges extend time inactive edge inserted 
necessary skipping portion sentence time inactive edge particular category inserted chart vertex 
approaching problem intra analysis skipping copying active edges forward allows parser skipping subset sentence multiple times 
intra analysis skipping controlled lcflex different types beams 
type beam maximum beam allows user specify words skipped single analysis 
second type beam best beam allows user specify number constrains number analyses pursues parallel glr 
true best beam sense limits absolute number analyses pursued parallel 
approximates bounding number active edges allowed vertex chart 
different beams separately 
lcflex allows great deal control skipping behavior 
evaluating effect word skipping bad ok perfect total acceptable robustness restarts glr beam glr beam lcflex level lcflex skip table translation quality alternative parsers conducted series empirical tests evaluate effect word skipping flexibility allowed parser runtime performance 
glr lcflex amount word skipping flexibility controlled parser search beam 
compared alternative settings parsers parse times translation quality text produced automatically generation component parser output 
complete test set contains sentences transcribed spontaneous speech task 
distribution sentence parse time log base scale sentence length glr beam glr beam glr restarts glr avg parse time vs sentence length glr various skipping settings lengths 
sentences subset sentences selected grading 
sentences contiguous sentences dialogues corpus 
selected set contiguous sentences order ensure realistic distribution sentence lengths domain vs domain sentences 
translation graded independent judges receiving grade perfect ok bad 
strategy number sentences assigned grade grader 
totals averaged arrive percentages table 
sentences test set determined domain 
percentages parentheses final column percentages acceptable translations domain sentences 
case glr tested parser different settings glr skipping allowed equivalent original non robust glr parser glr restarts allowing inter analysis skipping prefixes suffixes input string glr beam allowing inter analysis skipping parser search beam size glr beam search beam 
average parse times function sentence length tests appear 
expected greater levels skipping flexibility result increasing parse times 
interesting note glr beam slightly parse time log base scale sentence length lcflex skip lcflex skip lcflex skip lcflex level lc restarts lc avg parse time vs sentence length lcflex various skipping settings time consuming just allowing restarts allowing significant amount skipping 
fact experiments indicated glr beam usually flexible find correct analysis analysis recovered word skipping see translation quality evaluation results 
beam results significantly longer parse times approaching infeasible levels online parsing sentences length greater words 
lcflex conducted similar set experiments varying amounts skipping flexibility 
lcflex amount skipping flexibility controlled global skip parameter determines total number words allowed skipped process obtaining analysis 
tested parser different settings lc skipping allowed equivalent non robust left corner parser lc restarts allowing inter analysis skipping prefixes suffixes input string lcflex skip maximum words skipped analysis lcflex skip similar maximum skipped words lcflex skip similar maximum skipped words 
additionally tested lcflex level parsing mode discussed section 
average parse times function sentence length tests appear 
expected greater levels skipping flexibility result increasing parse times 
lcflex inter analysis parse time log base scale sentence length glr beam glr beam lcflex skip lcflex level lc restarts lc avg parse time vs sentence length lcflex compared glr skipping result significant increase parse time providing deal robustness 
level parsing performs slightly slower achieving sizable increase robustness 
skip parameter value incur significant time cost parse times remain feasible relatively long sentences 
increasing skip parameter improve translation quality produced 
note settings lcflex order magnitude faster glr 
see 
lcflex skip value similar speed glr skipping 
experiments indicate lcflex skip value flexibility roughly similar glr beam performing significantly shorter times 
inserting lcflex experience skipping important flexibility feature efficient robust parsing certain circumstances 
case speaker uses abbreviated form grammatical determiner dropped informal language 
cat clock indicate location approaching cat 
constructions modeled grammar doing leads unnecessary explosion ambiguity 
sentence length distribution sentence lengths distribution sentence lengths case determiner dropping analyses constructed noun phrase normally requiring determiner 
cases correct analysis constructed incorrect determiner constructed doubling number analyses including representation associated noun phrase 
types handled parser instance allowing parser insert words non terminals order complete partial rule match analyses constructed noun phrase question greater error eventually pruned 
parser aware fact analysis determiner correct determiner prevent explosion ambiguity arises modeling type ungrammaticality grammar 
lcflex limited insertions traditionally minimum distance parsers treated insertions deal 
insertions constrained previous approaches limiting number inserted nonterminals lehman prioritized agenda mechanism lcflex parser allow user control specific non terminal may inserted 
user may limit insertions just small number handful categories 
conducted set experiments parse time log base scale sentence length lcflex insert non terminal lcflex insert lc avg parse time vs sentence length lcflex various insertion settings evaluate effect word category insertions runtime performance lcflex parser 
mentioned earlier word category insertion costly form flexibility dramatically increases search space analyses considered parser 
demonstrated limited numbers general insertions infeasible practical sized grammar demonstrate lcflex style limited insertions demand high price speed 
insertions lcflex primarily controlled setting global parameter recompiling grammar 
order inserting efficient rule initial insertions compiled grammar associated left corner prediction table 
global parameter controls insertions set nil inserting disabled specification combinations non terminals inserted enabled 
specification association list nonterminals paired integers symbol 
indicates combination specified maximum number specified non terminals may inserted analysis 
example 
np 
det specifies noun phrase number determiners may inserted 
may specify disjunction constraints 

np 
det 
copula indicates copula determiner noun phrase may inserted 
example inserting necessary task speakers drop subject don hour slots 
grammar allow speaker drop subject constructions sentence ordinarily able parse 
displays correct structure construction grammar 
sentence parse inserting subject non terminal aux nonterminal subject gamma aux non terminal 
non terminal inserted dummy feature structure inserted analysis place normally constructed parser corresponding input words 
dummy feature structure feature dummy value 
dummy feature ensures inserting dummy feature structure cause unification constraint equations fail 
unification equation refers empty slot dummy feature structure value returned dummy 
constraint equations involving dummy value fail 
shows result unifications involving dummy feature structures 
rule application dummy feature structure unified result resulting feature structure dummy feature structure contains dummy feature value 
additional constraint equations unification augmentation part rule shown cause features dummy feature structure assigned values 
second rule application value adverb feature dummy feature structure passed result 
adverb slot dummy feature structure empty value dummy assigned 
subsequent constraint equations testing value adverb feature resulting feature structure fail 
allowing parser insert single non terminal symbol slightly decreases parser efficiency 
demonstrate evaluated effect inserting particular grammar category subject compared allowing insertion category analysis 
picked subject category evidence sentences example insertion particular category fact necessary recovering correct analysis 
average parse times function sentence length tests appear 
seen insertion subject category result noticeable tolerable effect runtime performance 
insertion arbitrary category results infeasible parse times 
algorithmic modifications lc parsing inserting non terminals insertions affect aspect parsing algorithm proceeds including conditions active edges created extended considered complete 
impact operation parser pervasive inserting comes greater computational expense skipping 
normally active edges corresponding rules created inactive edge category associated rule right hand side daughter inserted chart 
unconstrained insertions active edges created inactive edge category associated rule right hand side daughters inserted chart 
insertions constrained number terms non terminals allowed inserted doing right hand side category parser category right hand side daughter constraints insertions allow preceding right hand side daughters inserted 
insertions enabled top predictions computed modified version left corner relation computed left hand side category rule category right hand side daughter left hand side category category right hand side daughter trigger creating active edge 
don hour slots rule 
gamma aux 
subject 
aux children subject 
dummy aux 
root negative result gamma aux 
sentence type state verb form base aux dummy rule 
gamma erb 
gamma aux 
erb children gamma aux 
verb form base sentence type state aux dummy erb 
verb form base root result gamma erb 
verb root adverb dummy negative sentence type state aux dummy insertion example just non terminal symbols may inserted rule match non terminals may inserted 
insertions affect conditions edge may considered complete inactive 
long inserting remaining needed categories cause constraints insertions broken edge may inactive 
needed list non empty point corresponding active edge remains chart case remaining needed categories may constructed possible create similar inactive edge smaller insertion error 
non terminals may inserted middle rule matches 
inserting affects way active edges extended 
normally active edge vertex needed category extended inactive edge category inserted chart vertex insertions enabled active edge may extended inactive edge category inserted vertex long needed categories constraints insertion allow insertion categories preceding needed list 
selective flexible feature unification lcflex skipping inserting lend flexibility manner lcflex constructs structures sentences context free backbone portion lfg grammar formalism 
similarly selective flexible unification adds flexibility manner grammar formalism unification augmentations evaluated 
lcflex unification augmentations serve dual purpose enforcing grammatical constraints agreement building feature structure representation sentence 
extent feature unification grammar eliminate undesired analyses allowed context free portion grammar flexible unification allow desirable analyses case impossible construct parse 
selective flexible feature unification unification augmentations lfg grammar formalism eliminate large number incorrect analyses unconstrained flexible unification cause massive explosion ambiguity 
address problem primarily allowing users specify features lcflex treat soft features order evaluated 
evaluation demonstrates setting aside small number features soft features dramatically decrease parser efficiency 
lcflex allows users specify features set aside soft features setting global variable 
global variable nil flexible unification turned 
stores list lists soft features 
list features represents separate unification stage 
parse time edge complete unification part rule fired fires stages division features list lists 
successive stage resulting feature structure specified result unifications involving associated features 
parser fires successive stages finishes complete set stages stage fails 
point returns result successful unification stage 
fails unification stages returns indication stage failed 
example flexible feature unification useful sentence week look displayed 
problem sentence auxiliary parse time log base scale sentence length lc relax rule lc relax sentence type lc avg parse time vs sentence length lcflex various flexible unification settings dropped 
grammar allows attached question order form wh question 
text week look parses sentence analyzed statement question 
rule normally attach order form wh question fails tests sentence type feature 
sentences handled relaxing sentence type feature 
relaxing single feature sentence type slightly decreases parser efficiency demonstrated 
evaluation relaxing single specific feature compared allowing single rule application fail unification analysis 
case rule application failed dummy feature structure returned result unification 
notice efficient relaxing specific feature allowing single rule application fail 
demonstrates effectiveness selective flexible feature unification increasing parser flexibility compromising efficiency 
problem allowing features fail soft may cause infinite recursion grammar 
addition allowing user specify features treated soft features lcflex allows user specify rules may fail soft single parse 
accomplished setting separate global variable 
limiting set soft rule 
sentence 
wh gamma word 
gamma gamma look children wh gamma word 
sentence type query sentence type query ref frame gamma gamma look 
verb root look sentence type state type temporal specifier multiple definite name week frame special time result sentence 
frame speech act suggest sentence type query ref specifier multiple definite name week frame special time flexible unification example features possibly number rules allowed fail soft single analysis flexible unification handled efficient manner 
implementing selective flexible feature unification selective flexible unification accomplished lcflex modifying way grammar unification augmentations compiled lisp code 
grammar compiled grammar rule unification augmentation compiled lisp function constraint equation placed stages 
constraint equations involving soft features placed stage 
involving features list involving features subsequent lists placed second stage 
list constraint equations compiled separately lisp code 
lisp code placed overarching case statement set constraint equations applied dependent stage 
case statement placed lisp function associated grammar rule original list constraint equations taken 
parse time stage set function evaluated 
constraint equations involving soft features evaluated 
unification fails result returned 
unification said failed 
fail result returned regardless happens unification subsequent stages 
stage set previous result passed back lisp function 
constraint equations associated stage applied affect elaborating result previous stage passed 
unification fails previous result returned associated flexible unification error code gets inserted resulting edge unif slot 
fail stage set process cycles 
continues unification fails stage function evaluated stage 
complete result returned 
level parsing lcflex level parsing enhances lcflex efficiency allowing flexibility applied sentence needed basis 
simple idea parse sentence constrained level flexibility combine best partial analyses constructed pass higher level flexibility 
largest partial analyses extracted chart greedy shortest path algorithm 
second stage inactive edges corresponding best partial analyses constructed pass inserted second pass way edges corresponding lexical entries inserted pass 
effective sentence length second stage shorter stage 
additional flexibility applied places analysis really needed parse lower level flexibility parse time number edges created smaller level parsing level parsing 
conducted preliminary test lcflex level parsing mode 
stage enabled inter analysis skipping intra analysis skipping maximum skip limit 
second stage increased maximum skip limit 
run time performance translation quality level parsing experiment reported section 
managing ambiguity increasing parser flexibility increases amount ambiguity produced 
consequently increase flexibility general slows parser selecting best analysis challenging task 
managing ambiguity orthogonal issue robustness intimately related 
practical robust parser manage ambiguity effectively 
glr lcflex approach efficiency issue local ambiguity packing pruning selection issue statistical disambiguation 
specifics glr ambiguity packing pruning statistical disambiguation described depth 
focus techniques incorporated lcflex 
ambiguity packing pruning lcflex chart parser keeps track parse trees constructed course parsing process inactive edges stored chart 
grammar rule successfully applied corresponding inactive edge created 
inactive edge rule left hand side category category child starting position starting position child position position 
order parsing efficient possible lcflex attempts pack edges category starting positions 
attempts pack analyses span text result category 
packing edges reduces number rule applications parser attempt reducing parser time space requirements 
resulting packed edges complex feature structures non packed edges 
rule applications involve evaluating unification equations feature structures child edges 
parser fewer rule applications ambiguity packing turned rule application involving packed edges take longer complete corresponding rule application child edges 
increasing parser flexibility dimension exacerbates problem increases number analyses category span segment text 
ambiguity packing results significant savings time traditional non robust parsers sufficient robust parsers limited flexibility 
problem addressed lcflex glr pruning local analyses definitely result global analyses lesser quality 
pruning attractive directly addresses efficiency issue risky unification augmented grammar formalism lcflex clear local level analyses eliminated unification subsequent rule applications 
dangerous base decisions analyses prune statistical score context free portion analysis 
time reliable prune magnitude error level words skipped non terminals inserted flexible unifications local analyses analysis lower error locally may able included analyses higher global error level local analyses locally higher error level 
lcflex prunes heuristic adapted glr 
analyses pruned errors strictly subsume errors analyses category span text 
glr analyses pruned covered strict subset words covered analysis category spanning text 
lcflex allows flexibility dimensions glr needs correspondingly complex pruning heuristic takes account skipping insertions unification relaxations 
principle eliminating analyses errors strictly subsume errors similar analyses extended complex case 
pruning lcflex takes place stages 
stage analyses divided sets analyses insertion flexible unification errors 
sets pruning takes place skipping glr 
remaining analyses combined single set divided subsets time grouping analyses skipping inserting errors 
time analyses subset pruned contain flexible unification errors subsume analyses subset 
remaining analyses divided subsets time skipping flexible unification errors 
analyses insertion errors subsume analyses subset pruned 
statistical disambiguation glr statistical disambiguation lcflex select single analysis packed list analyses 
traditionally probabilistic context free grammars assign probabilities grammar rules 
researchers argued advantageous assign probabilities transitions parser actions lends context sensitivity score assigned rule application 
far principle implemented lr framework probabilities associated parser actions individual states 
probability assigned parser action depends state parser action performed 
chart parsers concrete equivalent states similar context sensitivity achieved assigning probabilities bigrams rule applications 
probability rule application dependent previous rule application 
sequences rule applications extracted analyses similarly action sequences extracted analyses glr 
postfix procedure parse tree extracted sequence rule applications corresponds order rules applied build parse tree 
rule transition bigrams trained lcflex way action probabilities trained glr 
training corpus contains sentences paired parse time log base scale sentence length glr disambiguation glr disambiguation lcflex disambiguation lcflex disambiguation parse times statistical disambiguation correct feature structures 
sentence parsed 
list produced analyses searched produces correct feature structure 
sequence rule applications extracted analysis 
counts rule application bigrams sequence incremented 
entire corpus processed counts smoothed turing method 
counts converted probabilities 
statistical disambiguation demonstrated effective approach selecting multiple alternative analyses comes significant cost terms run time performance 
displays parse times statistical disambiguation glr beam lcflex maximum skip limit 
directions described investigations effectively balance robustness computational efficiency general unified parsing framework unification large scale grammars 
investigations empirical evaluations conducted general robust parsers glr robust glr parser lcflex left corner chart parser 
focused spontaneous spoken language analysis task extra grammatical input extremely common 
investigation shows flexible skipping controlled beam search effective mechanism achieving robustness acceptable level computational cost 
lcflex tolerate relatively high levels skipping resulting high levels ambiguity maintaining online parsing times 
types flexibility investigated category insertion flexible unification help recover correct parse certain cases computation cost high 
experiments show types flexibility applied sparingly selective set insertion categories features 
specific appropriate sets insertion categories features relaxation grammar domain dependent 
flexible robust parsing framework general specified sets 
area research development automatic methods identifying appropriate insertion categories features relaxation machine learning techniques 
interesting direction research multi level parsing 
current lcflex parser supports level parsing allows construct partial analysis constrained level flexibility combine fragments partial parse running parser far constrained level flexibility 
experiments reported demonstrated level mode achieve comparable level robustness significantly lower computational cost 
suspect specific types levels flexibility applied parsing stage domain grammar dependent 
framework general support division labor parsing levels explore methods finding optimal settings grammar domain automatically 
investigate adding additional parsing levels result gains efficiency 
emphasized effective parse scoring disambiguation essential robust parsers glr lcflex 
framework parse scoring disambiguation current parsers model various types flexibility general uniform way 
develop parse scoring disambiguation model explicitly accounts various flexibility operations preferences particular structures constituent feature levels 
relative fitness scores applied constrain prune parser search parse selection disambiguation 
relative preference cost applying certain types flexibility accounted parse scoring model 
unified parse evaluation framework allow better apply machine learning techniques order automatically derive set optimal parameters specific domain application 
special due patient individuals lcflex beta testing phase sent helpful bug reports 
david schneider license copy lcflex written english second language tutoring system 
research detecting syntactic errors provided inspiration lcflex limited insertions selective flexible unification 
particular students robust parsing seminar class providing stimulating discussions getting involved extending lcflex capabilities 
people encouraged continue develop especially members circle vision dialogue tutoring systems inspires circle nsf funded center intelligent tutoring housed carnegie mellon university university pittsburgh 
continue goal robust efficient natural language understanding 
deepest gratitude belongs families particular eric rachel bob loving support possible 
research supported part office naval research cognitive neural sciences division national science foundation iri 
abney 
partial parsing finite state cascades 
proceedings eighth european summer school logic language information prague czech republic 
aho johnson 
lr parsing 
computing surveys 
ait 
incremental finite state parsing 
proceedings fifth conference applied natural language processing 
alshawi ed 
core language engine 
mit press cambridge ma 
bod 
spoken dialogue interpretation dop model 
proceedings coling acl 

feature structure parser learning parse spoken language 
proceedings coling 
carroll briscoe 
generalized probabilistic lr parsing natural language corpora unification grammars 
computational linguistics 
carroll :10.1.1.14.634
practical unification parsing natural language 
phd thesis university cambridge computer laboratory 
gazdar klein sag 
generalized phrase structured grammar 
blackwell oxford uk 
goodman 
parsing algorithms metrics 
proceedings th annual meeting association computational linguistics 
henderson lane 
connectionist architecture learning parse 
proceedings coling acl 
hipp 
design development spoken natural language dialog parsing systems 
phd thesis dept computer science duke university 
hobbs appelt bear tyson 
robust processing real world naturallanguage texts 
technical report sri international 
jain 
parsec connectionist learning architecture parsing speech 
phd thesis school computer science carnegie mellon university 
jain waibel 
incremental parsing modular recurrent connectionist networks 
editor advances neural information processing 
morgan kaufman publishers 
kaplan bresnan 
lexical functional grammar formal system grammatical representation 
mental representation grammatical relations pages 
mit press 
lavie 
grammar robust parser spontaneous speech 
phd thesis school computer science carnegie mellon university 
lehman 
adaptive parsing self extending natural language interfaces 
phd thesis school computer science carnegie mellon university 
magerman marcus 
parsing natural language mutual information statistics 
proceedings aaai 
mcdonald 
robust partial parsing incremental multi level processing rationales biases 
proceedings aaai spring symposium text intelligent systems current research text analysis information extraction retrieval 
paul jacobs ed technical report ge research development center ny crd 
mcdonald 
efficient chart algorithm partial parsing unrestricted texts 
proceedings rd conference applied natural language processing 
mcdonald 
efficiently parsing large corpora 
submitted acl workshop large corpora academic industrial perspectives 
mcdonald 
interplay syntactic semantic node labels partial parsing 
proceedings third international workshop parsing technologies 
miller stallard bobrow schwartz 
fully statistical approach natural language interfaces 
proceedings th annual meeting association computational linguistics 
neumann baur becker braun 
information extraction core system real world german text processing 
proceedings fifth conference applied natural language processing 
pietra epstein roukos ward 
fertility models statistical natural language understanding 
proceedings th annual meeting association computational linguistics 
pollard sag 
information syntax semantics vol 
fundamentals 
university chicago press chicago il 
ros 
robust interactive dialogue interpretation 
phd thesis school computer science carnegie mellon university 
ros lavie 
efficient distribution labor stage robust interpretation process 
proceedings second conference empirical methods natural language processing 
ros waibel 
recovering parser failures hybrid statistical symbolic approach 
klavans resnik editors balancing act combining symbolic statistical approaches language processing 

gorin 
adaptive language acquisition multi sensory device 
ieee transactions systems man cybernetics 
schneider mccoy :10.1.1.14.8710
recognizing syntactic errors writing second language learners 
proceedings coling acl 
tomita 
efficient parsing natural language fast algorithm practical systems 
kluwer academic publishers 
tomita 
efficient augmented context free parsing algorithm 
computational linguistics 
tomita 
generalized lr parser compiler version 
proceedings international conference computational linguistics coling pages helsinki finland 
van noord 
robust parsing head corner parser 
proceedings eighth european summer school logic language information prague czech republic 
worm 
model robust processing spontaneous speech integrating viable fragments 
proceedings coling acl 
aoki waibel kemp lavie mcnair polzin ros schultz suhm tomita waibel 
janus spontaneous speech translation 
proceedings international conference acoustics speech signal processing 
lavie mcnair polzin ros tomita waibel waibel ward 
advances janus speech translation system 
proceedings arpa human languages technology workshop 
