collective problem solving coordination society reactive agents liu cmu ri tr robotics institute carnegie mellon university pittsburgh pa june methodology called constraint partition coordinated reaction cp cr problem solution emerges evolving computational process group diverse interacting reactive agents 
problem characteristics utilized achieve problem solving asynchronous coordinated local interactions 
coordination mechanisms guide search space exploration society interacting agents facilitating rapid convergence solution 
domain problem solving constraint satisfaction 
applied methodology job shop scheduling non time windows np complete constraint satisfaction problem 
utility different types coordination information cp cr investigated 
addition experimental results benchmark suite problems show cp cr performed considerably compared centralized search scheduling techniques computational cost number problems solved 
research distributed artificial intelligence oriented multi agent systems composed sophisticated individuals 
agents categorized cognitive agents capabilities reason environment predict events choose possible actions exhibit goal driven behavior 
context problem solving line research called cooperative distributed problem solving cdps coordinated problem solving defined lesser corkill problem solving process involves loosely coupled distributed network problem solving nodes capable sophisticated problem solving cooperatively interact nodes solve single problem 
decker refers cdps coarse grained task level problem decompositions 
early cdps considers problems distributed interpretation air traffic control geographically dispersed communication bandwidth 
pointed durfee typical cdps applications involve problems consist set interdependent subproblems arise spatial temporal functional distribution data knowledge processing capabilities 
applications central problem solver considered inappropriate issues limited computation limited communication reliability 
cdps provides techniques achieve balance problem solving coordination leads acceptable system performance 
cdps research extended areas distributed planning control cooperating expert systems cognitive models cooperation 
fundamental strategy cdps divide conquer 
complex problems divided smaller parts reasonably solved compatible subproblem solutions integrated solution 
intricate interactions set subproblem solvers invalidate advantage reduced task complexity 
coordination complex little understood phenomenon regarded fundamental component intelligence 
cdps primarily developed problem applications centralization viable option focused coordination involving set sophisticated cognitive agents 
growing interest artificial life alife studying computational models agent societies composed simple agents interact asynchronously 
researchers area attempt synthesize simulate behaviors characteristic biological systems self organization learning adaptation evolution 
models global behaviors emerge organized local interactions individual simple agents 
field alife aims understanding spontaneous organization adaptation eventually building understanding mental processes 
enthusiasm growing viewing alife life implication bottom intelligence :10.1.1.12.1680
apart pure theoretical research application oriented researches alife strategies successfully demonstrated 
brooks proposed subsumption architecture insect robots coherent behaviors emerge subcomponents interacting world 
steels discussed emergent functionality function achieved indirectly interaction primitive components world 
kitano developed massively parallel memory approach natural language processing 
despite growing interest alife utility models problem solving fully explored 
alife provides new perspective developing effective problem solving techniques 
sophisticated agents perform top synthesis problem solving achieved bottom interaction society simple agents 
models problems represented configuration society reactive agents environment 
agents characterized situation action rules 
problem solution emerges result asynchronous local interactions society reactive agents 
computational economy reactive agents approach indicates potential problem solving efficiency scalability 
achieve efficient problem solving agents actions coordinated promote rapid convergence 
agents perform locally contained actions behaviors influenced passive communication agents 
developed computational framework collective problem solving society reactive agents 
problem solving viewed emergent functionality evolving process society diverse interacting coordinated reactive agents 
agents situated environment act stimulus response 
coordinated interactions simple flows information 
collective actions reactive agents potentially provide effective tool complex problem solving 
specifically development collective problem solving framework involves subjects ffl problem decomposition transformation problem society simple agents defined decomposition scheme 
agent assigned task corresponding small part problem 
situation action rules specify agents act achieve tasks 
problem solved agents achieve tasks simultaneously 
ffl interaction analysis problem mapped society agents intense interactions agents ensue 
order society move coherence influences agents actions need identified 
interactions viewed rich information sources exploited guide agents behaviors group coherence 
ffl coordination mechanism group behavior agents characterized coordination mechanism society 
problem solving purpose require group agents reach coherence order provide solution 
addition seek rapid convergence improve problem solving efficiency 
design coordination mechanism includes regulation policies communication agents 
effective coordination strategies useful coordination information focus study 
ffl behavior design agent behavior corresponds various actions performs achieve goal 
collective behavior agents represents problem solving activities group performs 
framework critical analyze agent interactions investigate useful information exchange agents coordinate highly distributed activities 
lead designing agents behaviors avoid harmful interactions agents react appropriately rapid group convergence 
ffl system investigations subjects follow construction collective problem solving system 
society agents created specification problem 
search performed form agents collective actions 
system expected perform efficient transformation initial disorder group coherence 
problem solved collective interactions society simple reactive agents 
problem domains collective problem solving framework constraint satisfaction problems csps 
problems theoretical practical interest parametric design resource allocation scheduling formulated csps 
csp defined set variables fx delta delta delta having corresponding domain fv delta delta delta set constraints fc delta delta delta 
constraint subset cartesian product theta delta delta delta theta specifies values variables compatible 
variable set constraint set constraints denoted vs set non duplicating variables restricted constraint set constraints 
solution csp assignment values instantiation variables constraints satisfied 
numerical csps subset csps constraints represented numerical relations quantitative variables usually fairly large domains possible values 
csps practical importance scheduling parametric design 
constraint satisfaction algorithms typically suffer feasibility efficiency problems due enormous search space 
general csps solved complementary approaches backtracking network consistency algorithms 
heuristic revision decomposition techniques csps proposed :10.1.1.31.8372
hand dai considered distributed csps variables csp distributed agents 
agent exclusive subset variables sole responsibility instantiate values 
approach provides decomposition scheme constraint type constraint connectivity 
results inter agent constraints variable may instantiated agent 
satisfying constraints agent instantiates modifies variable values coordination information supplied 
coordination agents facilitates effective problem solving 
approach called constraint partition coordinated reaction cp cr job shop scheduling collectively solved set agents simple local reactions effective coordination 
cp cr divides set subproblems constraint type assigns subproblem agent 
interaction characteristics agents identified 
agent coordination defines agent roles information exchange rules interaction 
problem solution emerges result evolving process group interacting coordinating agents 
remainder organized follows 
section illustrate similar approach 
section define cp cr model problem decomposition coordination mechanisms asynchronous search procedure specified 
sections describe application cp cr job shop scheduling non time windows comparative results previously studied test problems 
section conclude outline current cp cr 
related lot different areas distributed problem solving cooperative problem solving constraint satisfaction job shop scheduling related cp cr 
limit scope discussion utilize similar approaches 
particular focus approaches perform collective problem solving characteristics agent global view agent capable solving problem agent simple reactive agent responsible small part problem agents directly indirectly influence actions 
research utilizing social insects metaphor collective problem solving early stage pursued european researchers 
research efforts directed constructing systems composed reactive agents situated environment act stimulus response 
various approaches proposed problems ranging planning optimization 
existing reactive multi agent systems problem solving representative related research necessary motivation purposes briefly described 
colorni distributed optimization scheme travelling salesman problem tsp analogue ant colonies 
mechanism enables blind ants establish shortest route paths colony feeding sources employed 
moving ant lays substance varying quantity ground 
isolated ant moves essentially random may follow trail detects substance 
probability ant moves trail increases amount substance trail 
scheme required considerable number ants large number trials find best solution 
obtained respectable results mid sized tsps cities long computational time 
constructed model simple reactive agents resource allocation problems precedence constraints tasks 
model involves task resource agents interactions seeking maximal satisfaction terms getting resource allocation maximizing resource utilization respectively 
unsatisfied task agent chooses possible resource agents required allocated 
behavior resource agent simulated annealing algorithm tolerance local deterioration satisfaction progressively decreases 
experiments conducted randomly generated problems 
comparison established approaches offered 
ferber developed eco problem solving eps model problems decomposed solved interactions simple behavior eco agents 
eco agents behave specific programs simple behavior reactions environment continuously satisfaction state 
interactions agents characterized aggression concession 
problem solving seen production stable states dynamic system evolution due behavior simple agents 
application eps classical planning problems blocks world demonstrated 
drogoul applied eps model puzzle problem involves rearranging square tiles random initial configuration particular goal configuration square board containing tiles blank position 
tile modelled eco agent goal reach destined position 
behaviors eco agents characterized satisfied obligation flee 
satisfaction tiles prioritized heuristics solving row column furthest final position blank 
additional heuristics manhattan distances eco agent decision making direction movement 
experimentation showed system solve large puzzles puzzle reasonable time best record rta lrta puzzle 
system obtain optimal solutions solution lengths small puzzles approximately twice optimal solution lengths computed 
eps model cp cr share approach solving complex problems interactions simple reactive agents 
collective problem solving framework intends advance effectiveness approach exploiting local interactions 
relying goal prioritization entails serial operations developed effective coordination mechanism allows asynchronous agent activities 
second addition agents partial information environment useful coordination information agents investigated exploited facilitate rapid group coherence 
apart systems reactive agents organizational model asynchronous team team proposed 
team consists autonomous agents choose communicate team mates 
agents team divided categories construction agents modification agents deconstruction agents destruction agents 
agents oriented solution variation populations solutions 
populations data objects produced agents controlled herding consensus seeking strategies population kept explosion destruction agents mode changes agents 
shown successful applications solving large travelling salesman problems configuring task specific robots 
team agents communicate frequently cp cr explicitly utilizes local interactions reactive agents guide search 
simple coordination information constantly exchanged agents directly influences agents actions 
single solution candidate iteratively modified agents 
coordination mechanism regulates agents actions solution consensus 
addition cp cr includes decomposition scheme defines organization agents problem specifications 
constraint partition coordinated reaction developed collective problem solving framework called constraint partition coordinated reaction cp cr subset 
framework draws characteristics social insects colony functional decomposition task division effective coordination simple flows information 
cp cr society specialized coordinated reactive agents collectively solve 
agents situated environment react actions communicate leaving perceiving particular messages objects act 
solution emerges evolutionary interaction process society diverse agents 
specifically cp cr provides framework decompose set subproblems constraint type constraint connectivity identify interaction characteristics accordingly construct effective coordination mechanisms 
cp cr assumes types constraints 
constraint partition problem decomposition constraints label relations variables specify values variables restricted compatibility 
formally define constraint characteristics constraint type constraint connectivity 
definition constraint type cp cr quantitative constraints classified differences numerical compatibility variables 
identify types quantitative constraints 
black dot represents value assigned variable empty dot represents possible value variable shaded region open closed represents interval instantiation variable violate constraint 
adherence constraint exclusion constraint xi const xj xj const xi exclusion constraint inclusion constraint real line real line real line real line xi const xj xi const xj xj const xi constraint types classification 
adherence type constraint adherence type instantiation variable value restricts instantiation variable individual point domain 
example const 
exclusion type constraint exclusion type instantiation variable value restricts instantiation variable subsection certain distances example const const const const const 
exclusion type constraint exclusion type instantiation variable value restricts instantiation variable connected subsection domain boundary set example const 
inclusion type constraint inclusion type instantiation variable value restricts instantiation variable connected subsection domain boundaries set example gamma const gamma const const const 
illustrate definitions describe constraints known csps 
queen problem vertical diagonal attack constraints type 
zebra problem association constraints lives red house 
adherence type single occupancy constraints attribute pet color assigned house 
exclusion type 
definition constraint connectivity constraints said connected iff intersection variable sets empty 
implies constrained variables common 
connected vs vs 
definition constraint partition scheme decompose set subproblems constraint type constraint connectivity see 
types constraint grouping constraint bunch constraint cluster introduced decomposition scheme 
constraint bunch constraint type constraint type constraint network constraint bunch constraint clusters pb pc pc constraint partition constraint bunch set constraints constraint type 
define operator pb partitions constraint set set constraint bunches constraint type 
denote resulting set constraint bunches define operator denoted type identifies constraint type constraint bunch 
constraint bunch properties 
ffl pb fc ffl partition ffl type type constraint cluster set constraints constraint type connected 
define operator pc partitions set constraint bunches set constraint clusters constraint connectivity 
constraint cluster properties 
ffl pc fc ffl constraint clusters constraint type variables common ffl constraint cluster contains constraint constraint connected constraint constraint cluster constraint partition decomposed set subproblems concerned satisfaction constraints constraint cluster assigned agent 
solution subproblem instantiation variables constraint cluster constraints subproblem violated 
agent type corresponds constraint type 
constraint enforcement decoupled type agents 
agent full jurisdiction variables variable set assigned constraint cluster 
variable constrained type constraint jurisdiction agent 
agents responsible variable authority value independently change value 
value variable part solution agreed responsible agents sense agent seeks change 
subproblems solved solution 
society reactive agents framework cp cr problem solving transformed collective behaviors reactive agents 
variables regarded objects constitute agents environment 
instantiation variables characterizes particular state environment 
agent examines changes local environment variables responsibility seeks satisfaction ensuring constraint assigned constraint cluster violated 
agent detects constraint violations reacts changing instantiated values variables jurisdiction satisfied 
agents equipped primitive behavior 
activated agent reacts current state environment going examine resolve encode cycle see 
examines local view current environment values variables jurisdiction 
constraint violations changes variable instantiations resolve conflicts innate heuristics coordination information 
agents coordinate passive communication 
communicate directly 
agent reads writes coordination information objects jurisdiction 
coordination information object represents agent partial view current state environment consulted agents considering changing current instantiation variable resolve conflicts 
time agent activated ensured satisfaction writes view current instantiations variable jurisdiction coordination information 
examine local view encode information constraint violation 
resolve conflicts reaction agent idle activated agent reactive behavior agents classified perspective constraint type 
example job shop scheduling problems agent type responsible resolving capacity constraints agent type responsible resolving temporal precedence constraints 
variable jurisdiction agents different perspectives 
agents different types activated turn agents type activated simultaneously 
iteration cycle interval agents activated 
initial instantiation variables constructed subset agents 
agents arrive solution collective successive modifications 
agent agent agent agent environment perceive perceive perceive perceive evolving process initialization constraint type constraint type iteration cycle society reactive agents shows society reactive agents simple problem involves variables instantiations restricted constraints different types 
variables assigned subgroups agents subgroup responsible constraint type subgroup responsible constraint type 
subgroup agent charge subset variables connected variables type constraints 
example agent assigned variables agent assigned variable 
similarly agent responsible variable agent responsible variable 
variables constitute agents environment 
agents perceive local environment sense examine changes variables jurisdiction 
interaction analysis group agents searching instantiation variables accepted instances interaction set 
order facilitate group convergence sources results interaction instances analyzed controlled 
example shows particular state environment representing simple job shop scheduling problem includes jobs resources 
job job agent res resource agent 
box activity number representing number job second number representing sequence job third activity job 
single activity jurisdiction job agent job resource agent res particular state job agent satisfied precedence constraint violated 
order complete task job agent need change start time 
similarly suppose starts time res agent need change start time 
job time line job time line res 
res 
res 
release date due date job time line state environment instantiation variables analysis interactions leads intuitions 
agent action changing start time activity potentially satisfaction status 
minimize reciprocal harmful interactions agents actions take account preference regarding variable instantiation 
second solution constrained subproblem part global solution constrained subproblems serve anchor interactions 
third cyclic interactions prevented 
traditional constraint satisfaction literatures notion constrained variable possible values 
intuition instantiating constrained variable critical instantiating constrained variables instantiation correct instantiation large domain possible values 
extend intuition cp cr subset variables instantiated local perspective constrained reliable 
coordination mechanism coordinated group agents individual behavior regulated policies agents collective actions achieve common goals 
tasks solving complex large scale coordination mechanisms emphasize convergence efficiency exploiting characteristics agent group structure agent tasks communicated information 
coordination strategy developed coordination strategies promote rapid convergence considering principles interaction control 

disturbance agent resolving conflicts interactions initiated necessary way reduce chances causing concerned agents subsequently initiate interaction 

island reliability consensus reached process evolving coherent group decision making islands reliability modifying islands reliability group coherence perceived infeasible current assumptions 

loop prevention looping behaviors oscillatory value changes subset agents prevented 
disturbance disturbance corresponds attempt minimize ripple effects agents actions 
reach group coherence number unsatisfied agents operation cycle gradually reduced zero 
agent satisfied iteration cycle instantiates variables satisfy constraints actions may cause conflicts instantiations agents 
agent resolve conflicts way minimizes extent causing disturbances agents 
disturbance incorporated agent heuristics conflict resolution see section 
disturbance principle operationalized conflict resolution ways 
agent changes instantiated values variables possible 
second selected variable agent changes instantiated value deviates previous value possible 
island reliability island reliability subset variables consistent instantiated values part solution 
particular islands reliability correspond critical constraint clusters clusters variables flexibility satisfying constraints 
islands reliability provide anchoring reaching group coherence terms propagating promising partial solutions changed 
example job shop scheduling bottleneck blackboard systems hearsay ii speech understanding system notion solution islands conduct incremental opportunistic problem solving process 
partial solution islands emerge resource island reliability 
variable member island reliability called seed variable 
variable seed variable regular variable 
division seed regular variables reflects inherent structure problem 
division static complemented dynamic interactions different kinds agents described 
agent assumes role depending types variables controls 
dominant agents responsible seed variables charge making decisions islands reliability 
intermediate agents control variable sets including seed variables regular variables 
submissive agents responsible regular variables 
intermediate agents interact submissive agents group effort evolve instantiation regular variables compatible decisions dominant agents regarding seed variables 
counter associated regular variable records number times submissive agent changed value regular variable provides estimate search efforts intermediate submissive agents comply islands reliability 
intermediate agents monitor value counter associated regular variables jurisdiction 
counter conflicting regular variable exceeds threshold intermediate agent changing conflicting regular variable changes value seed variables 
response value changes seed variables result conflicts dominant agent modifies decisions islands reliability 
counters reset zero intermediate submissive agents resume efforts evolve compatible instantiation regular variables 
loop prevention principles disturbance islands reliability system exhibits types cyclic behavior 
subset intermediate submissive agents may involved cyclic value changes order find compatible instantiation dominant agents decisions 
secondly dominant agent may changing value seed variables cyclic way 
type looping behavior interrupted intermediate agents counter conflicting regular variable exceeds threshold 
prevent second type looping behavior dominant agent keeps history value changes repeat configuration variable instantiations 
coordination information coordination information agents associated variable responsible agents 
agent resolving constraint violations variable responsibility coordination information provided agents govern variable decision making 
types information disturbance information dominance information exchanged agents 
disturbance information reveals variable constrained agent regarding grow larger islands hoped hypothesis spanning entire solution structure 
cp cr islands reliability refer partial solutions local perspectives anchors interaction iterative solution repairing process different local perspectives 
potential value changes forms 
form disturbance information interval values variable may instantiated free conflicts 
form disturbance information value measures likelihood variable involving conflicts variable cluster instantiated value changed 
different disturbance information intermediate agents submissive agents innate heuristics disturbance 
dominance information indicates special status seed variables measures search effort intermediate submissive agents modification islands reliability 
search efforts estimated form number times value regular variable changed submissive agent 
type information intermediate agents recognize seed variables decide contest seed variables 
section describe agent behaves influence coordination information 
agents behavior design agents behavior incorporates coordination strategies coordination information 
agent role describe algorithmic process behaves 
dominant agents 
examine instantiations variables jurisdiction 
constraints satisfied 

resolve conflicts changing instantiated values seed variables way new value seed variable changed intermediate agent direction modification real line intermediate agent new configuration variable instantiations repeat old record 

record new configuration variable instantiations 
intermediate agents 
examine instantiations variables jurisdiction 
constraints satisfied go step 
resolve conflicts 
dominance information variables marked dominant agents recognize seed variables 
conflicts involving seed variables example job shop scheduling bottleneck resource agent finds capacity constraint violation due seed activity changed start time job agent bottleneck resource agent re arrange resource interval allocation seed activity start earlier start time set job agent 
ffl conflicting regular variable changed value domain satisfies constraint current instantiation seed variable change instantiated value seed variable 
ffl consult dominance information change counter conflicting regular variable written submissive agent 
counter exceeded threshold change instantiated value seed variable 
ffl change instantiated value regular variable 
conflicts involving regular variables ffl consult disturbance information value interval change counter regular variables written submissive agents 
change instantiated value regular variable magnitude disturbance 
conflicting variables changed value interval resolve conflict agent changes value variable 
agent chooses change variable changed frequently change counter lesser value 

encode disturbance information likelihood measure variable jurisdiction current instantiated values 
submissive agents 
examine instantiations variables jurisdiction 
constraints satisfied go step 
resolve conflicts 
consult disturbance information likelihood measure conflicting regular variables written intermediate agents 
change instantiated values regular variables magnitude disturbance 

encode dominance information change counter changed variables 
changed variable increase associated counter number represents agent certainty new value variable 
usually counter increased records number times agent changed value variable provides estimate search efforts intermediate submissive agents 
agent encounters intense conflict number variables involved conflicts short interval values resolve conflict set associated counters involved variables number larger threshold 
decisions dynamically critical areas propagated 

encode disturbance information value interval variable jurisdiction current instantiated values 
shows interaction pattern agents different roles 
dominant agents responsible consistent instantiation islands reliability 
solid loop represents frequent interactions intermediate submissive agents modify instantiation regular variables satisfy constraints try evolve compatible instantiation islands reliability 
dotted loop represents frequent interactions intermediate dominant agents occur intermediate agents change instantiation islands reliability dominant agents respond making changes necessary instantiation islands reliability sure consistent 
action flow switched solid loop dotted loop search efforts compatible instantiation regular variables reached threshold submissive agent identifies dynamic critical areas 
conditions perceived intermediate agents change frequency counter exceeds threshold 
typically action flow remains solid loops switched intermediate agents dotted loop immediately returns solid loops 
dominant agents intermediate agents regular variables islands reliability submissive agents compatible modify modify modify modify 
search efforts reach threshold 
dynamic critical areas identified interaction pattern coordinated group search point view search collective problem solving process coordinated localized heuristic search partially overlapping local search spaces values variables common responsibility agent 
process starts initial instantiation variables 
search proceeds agents interact seeking goals 
islands reliability provide means anchoring search providing long term stability partial solutions 
principle disturbance provides short term opportunistic search guidance 
search space explored local feedback 
group agents essentially performs search series modifications islands reliability 
configuration islands reliability intermediate submissive agents try evolve compatible instantiation regular activities 
search ends solution dominant agents exhausted possible instantiation seed variables 
cp cr provides general framework potentially applicable 
applied solve zebra problem classical test problem constraint satisfaction algorithms 
experimental results show cp cr obtained favorable performance terms number variable instantiations required compared number constraint satisfaction algorithms 
proposed research focus application cp cr job shop scheduling problems 
cp cr job shop scheduling job shop scheduling non time windows involves synchronization completion number jobs limited set resources machines 
job composed sequence activities operations specified processing time requires exclusive designated resource duration processing resources unit processing capacity 
job completed interval time window specified release due time 
solution problem schedule assigns start times activity satisfies temporal activity precedence release due date resource capacity constraints 
problem known np complete considered difficult csps 
traditional constraint satisfaction algorithms shown insufficient problem 
problem decomposition transformation job shop scheduling non time windows activity viewed quantitative variable value corresponding start time activity constraints expressed numerical relations variables 
cp cr applying pb operator partitions constraint set constraint bunches constraint bunch exclusion constraints express temporal precedence constraints activities job constraint bunch exclusion constraints express capacity constraints resources 
applying pc operator cp cr partitions constraint bunches set constraint clusters corresponding jobs resources 
job constraint cluster exclusion constraints assigned job agent 
job agent responsible enforcing temporal precedence constraints job 
similarly resource constraint cluster exclusion constraints assigned resource agent 
resource agent responsible enforcing capacity constraints resource 
scheduling problem number subproblems number agents equal sum number jobs plus number resources 
activity governed job agent resource agent 
manipulation zebra problem considered variables attributes domains numerical values house numbers constraints represented numerical relations variables equal equal release due dates constraints considered temporal precedence constraints activities fixed time points included exclusion constraint bunch 
activities job agents may result constraint violations resource agents viceversa 
coordination agents crucial prompt convergence final solution 
bottleneck resource contended resource resources corresponds critical constraint cluster 
set activities contending bottleneck resource constitute island reliability seed variables 
bottleneck resource agent assumes role dominant agent regular resource agent submissive agent 
assumption job activity contending bottleneck resources job agent intermediate agent 
coordination information job agent boundary temporal slack weight bottleneck tag resource slack change frequency resource agent activity consult write write consult coordination information coordination information written job agent activity referenced resource agent vice versa shown 
job agents provide coordination information resource agents 

boundary interval earliest start time latest finish time activity see 
represents temporal flexibility activity calculated initial activation job agents 
boundary disturbance information form value interval 
activity current finish time current start time order temporal slack activity time line time line activity latest finish time earliest start time activity boundary activity boundary activity release date due date release date due date activity coordination information boundary temporal slack 
temporal slack interval current finish time previous activity current start time activity see 
indicates temporal range activity may assigned causing temporal constraint violations 
guaranteed temporal slacks adjacent activities overlapping 
temporal slack disturbance information form value interval 

weight weighted sum relative temporal slack respect activity boundary relative temporal slack respect interval bound closest seed activities see 
measure likelihood activity bumping adjacent activity start time changed 
high weight represents job agent preference changing current start time activity 
weight disturbance information form likelihood value 
activity job higher weight activity job activities resource involved resource capacity conflict resource agent change start time activity start time activity 
release date due date job job length length length length length length weight activity due date temporal slack activity boundary activity restricted interval activity bound closest bottleneck activity bottleneck activity release date bottleneck activity time line time line coordination information weight resource agents provide coordination information job agents 

bottleneck tag tag marks activity uses bottleneck resource 
indicates seed variable status activity 
bottleneck tag dominance information 

resource slack interval current finish time previous activity current start time activity resource timeline see 
indicates range activity start time activity may changed causing capacity constraint violations 
guaranteed resource slacks adjacent activities overlapping 
resource slack disturbance information form value interval 
resource resource slack activity time line coordination information resource slack 
change frequency counter frequently start time regular activity set job agent changed submissive resource agent 
measures search effort job regular resource agents modification islands reliability 
addition submissive resource agents propagate decisions dynamically bottleneck resource intervals setting counter number larger threshold 
change frequency dominance information 
reaction heuristics agents reaction heuristics attempt minimize ripple effects causing conflicts agents result fixing current constraint violations 
conflict minimization achieved minimizing number extent activity start time changes 
reaction heuristics utilize perceived coordination information incorporate coordination strategies group behaviors 
reaction heuristics job agent job agents resolve conflicts considering conflict pairs 
conflict pair involves adjacent activities current start times violate precedence constraint see 
conflict pairs resolved 
conflict pair involving seed activity activity tighter constraints higher conflict resolution priority 
resolve conflict pair job agents essentially determine activity current start time changed 
conflict pair includes seed regular activity depending change frequency counter regular activity conflict pair threshold job agents change start time regular seed activity 
conflict pairs regular activities job agents take consideration additional factors value changes feasibility activity change frequency resource slack 
activities changed boundary resource slack job agents change activity 
job agents change activity change frequency 
conditions depending precedent relation activities start time selected activity changed value time activity start time activity minus duration selected activity 
job agent bottleneck conflict pair regular conflict pair activity activity activity activity regular conflict pair activity activity time line seed activity minus plus minus plus minus plus considered change start time conflict resolution job agent conflict pair activity activity resolved activity seed variable 
change frequency activity threshold start time activity changed addition distance current start time activity current time activity current start time 
start time activity changed subtraction current start time 
cases start time activity changed time activity 
resolve conflict pair activity activity start time activity changed subtraction current start time start time activity changed addition current start time 
decision boundary resource slack change frequency activities 
reaction heuristics regular resource agents resolve constraint violations resource agents re allocate contended resource intervals competing activities way resolve conflicts time keep changes start times activities minimum 
conflicted activities allocated sequence weights 
original resource intervals preempted activities adjacent resource interval boundaries allocated considering preference staying temporal slacks 
activity weight measure desire corresponding job agent keep activity current value activity start time decisions weight reflect group coordination 
resource agent conflict resolution time line sequence allocation activity activity activity activity activity activity highest weight activity lowest weight time line conflict resolution conflict resolution regular resource agent example activity preempted activity higher weight 
adjacent resource interval allocated activity 
addition resource agent perceives high resource contention particular time interval conflict involving activity activity activity allocates resource intervals assigns high change frequency activities dynamically changes priority instantiation 
reaction heuristics bottleneck resource agents resource agent conflict resolution conflict resolution time line time line latest finished time latest finished time resource agent conflict resolution conflict resolution time line time line latest finished time latest finished time ii conflict resolution bottleneck resource agent bottleneck resource agent high resource contention 
means time bottleneck resource agent resource slack activities 
start time seed activity changed capacity constraint violations occur 
bottleneck resource agent considers amount overlap activity resource intervals resource decide right shift activities re sequence activities current start times swapping changed activity appropriate activity 
ii changed activity swapped activity changed start time activity start time activity 
resource intervals allocated new sequence activity activity 
intuition heuristics keep changes minimum possible 
note new start time activity direction real line modification job agent activity 
system system operations system initialization done follows decomposition input scheduling problem resource job constraints creation corresponding resource job agents activation agents see 
initially job agent calculates boundary variable jurisdiction considering release due date constraints 
resource agent calculates contention ratio resource summing durations activities resource dividing interval length earliest latest time boundary activities 
ratio larger certain threshold resource agent concludes bottleneck resource agent 
problem divide problem create agents provide solution activate resource agents agents satisfied 
activate job agents solution initiate resource agents initiate job agents system control flow job shop scheduling notion bottleneck corresponds particular resource interval demanded activities exceeds resource capacity 
state art techniques emphasize capability identify dynamic bottlenecks arise construction solution 
approach notion bottleneck static fixed resource contention ratio corresponds resource entire interval specified bottleneck resource identified threshold value lowered contended resource identified 
problem 
exploit dynamic local interactions agents utilize notions static dynamic bottlenecks 
example static bottleneck regarded islands reliability 
regular resource agents able identify high resource contention particular time intervals dynamic bottlenecks assign high change frequency involved activities order propagate decisions 
activities jurisdiction bottleneck resource agent marked seed activities agent 
resource agent heuristically allocates earliest free resource interval activity jurisdiction activity boundary 
initial activation resource agents activities instantiated start time 
initial instantiation variables represents initial configuration solution 
subsequently job agents resource agents engage evolving process reacting constraint violations making changes current instantiation 
operation cycle job resource agents activated alternatively agents type activated simultaneously working independently 
agent finds constraint violations jurisdiction employs local reaction heuristics resolve violations 
process stops agents detect constraint violations iteration cycle 
system outputs current instantiation variables solution problem 
solution evolution res 
res 
res 
res 
res 
res 
job time line job time line job release date due date time line job time line job time line release date due date job time line simplified scenario shows solution evolution process simple problem resource regarded bottleneck resource 
resource agents allocate earliest possible free resource intervals activities construct initial configuration variable instantiation conflict free schedule point view resource agents 
dotted rectangular boxes represent start times assigned resource conducted experiments random initial configurations confirmed search barely affected starting point search procedure equal performance heuristic random initial configurations 
agents res res respectively 
job job agents satisfied current instantiation pairs violating precedence constraints 
job cf 
job agent changes start times cf 
shown solid rectangular box cf 
seed activity change frequency cf 
zero exceed threshold 
res agent finds capacity constraint violation shown dotted rectangular box conflict resolution changes start time higher weight 
agents satisfied current instantiation variables represents solution problem 
involved conflicts cycle point views resource agents number activities involved conflicts cycle point views number activities job agents conflicts evolution difficult problem shows solution evolution process terms occurred conflicts difficult problem involves jobs resources 
cycle resource agents construct initial instantiation variables includes islands reliability set dominant bottleneck resource agents 
cycle cycle intermediate job agents submissive regular resource agents try evolve compatible instantiation islands reliability instantiation variables activities bottleneck resource 
cycle job agents perceive effort having failed change values seed variables 
bottleneck resource agents respond constraint violations modifying instantiation islands reliability 
results sharp increase conflicting activities job agents cycle 
search compatible instantiation resumes modification islands reliability cycle 
cycle solution 
evaluation experimental results evaluated performance cp cr suite job shop scheduling csps proposed 
benchmark consists groups representing different scheduling conditions problems jobs activities resources 
group problems differs respects spread release due dates jobs number priori bottlenecks 
spread controlled varying amplitude intervals release due dates generated 
spread levels introduced wide narrow null release due date intervals collapsed single points 
aside different spread levels release due dates benchmark considered priori bottlenecks conditions 
problem benchmark feasible solution 
cp cr implemented system called cora coordinated reactive agents 
experimentally investigated effects coordination information system compared cora performance constraint priority dispatch scheduling methods investigated effects initial solution configuration system investigated cora scaling characteristics problems larger sizes 
effects coordination information order investigate effects coordination information system performance constructed set coordination configurations 
ffl represents configuration system ran coordination information 
boundary information initially activated resource agents allocate resource intervals random sequences 
job agents activated resolve conflicts randomly changing instantiation activities conflict pair 
similarly resource agents resolve conflicts random priority sequences 
ffl represents configuration boundary information available 
resource agents information heuristic initial allocation resource intervals 
initial schedule generated information available conflict resolutions 
ffl represents configuration boundary bottleneck tag information available 
resource agents boundary information heuristic initial allocation resource intervals 
job agents bottleneck tag information bias resolution conflict pairs 
ffl represents complete configuration coordination information provided resource agents job agents 
boundary heuristic initial allocation boundary tag boundary temporal slack weight bottleneck tag resource slack change frequency avg 
cycle 

solved avg 
performance coordination configuration coordination information number activity conflicts cycle ii comparative performance coordination configurations shows comparative performance different configurations suite benchmark problems 
additional coordination information configuration underlined 
number cycles system allowed limited 
conflicts cycle system gave solving problem 
system operations random nature ran problem times 
numbers reported average number problems solved means successful runs runs problem 
deterministic problem tried 
confirm adding coordination information enables system solve problems fewer cycles 
results shows utility coordination information 
ii shows different coordination configurations successful problem solving processes terms number activities involved conflicts cycle 
coordination information increases shape curve indicates steeper drop number conflicts fewer cycles 
indicates increasing rates convergence facilitated coordination information 
curve deterministic peak cycle 
reveals problem solved cycles instantiation modification activities bottleneck resources typically occurred 
curves exhibit peak system particular pattern interaction coordination configurations 
comparison scheduling techniques cora compared heuristic search scheduling techniques orr fss cps pcp 
orr fss incrementally constructs solution chronological backtracking search guided specialized variable value ordering heuristics 
orr fss improved version augmented intelligent backtracking technique 
min conflict iterative repair starts initial inconsistent solution searches space possible repairs min conflicts heuristic attempts minimize number constraint violations step :10.1.1.31.8372
conflict partition scheduling cps employs search space analysis methodology stochastic simulation iteratively prunes search space posting additional constraints 
precedence constraint posting pcp conducts search establishing sequencing constraints pairs activities resource slack heuristics 
addition frequently appreciated priority dispatch rules field operations research edd covert included comparison 
table reports number problems solved average cpu time spent benchmark problems technique 
note results orr fss orr fss cps pcp obtained published reports developers techniques 
exception implemented muscettola reported results randomly generated initial solutions 
cpu times obtained lisp implementations dec 
particular cora implemented successful problem solving processes averaged shown 
pcp performance sensitive parameters specify search bias 
clos common lisp object system 
cps orr fss orr fss implemented crl carnegie representation language underlying frame knowledge representation language 
cpu times cps orr fss orr fss divided published numbers estimate translating straight common lisp implementation 
pcp cpu times listed comparison cpu times lisp available 
reported cpu times second 
cora operate asynchronously sequentially implemented fair comparison 
results show cora works considerably compared techniques feasibility efficiency finding solution 
seconds seconds seconds total cps cora orr fss orr fss pcp avg 
cpu time seconds seconds seconds seconds seconds edd covert table performance comparison effects initial solution configuration cora essentially employs reactive agents iteratively repair current solution valid solution evolved 
agents local interactions direct solution repairing process different iterative improvement hill climbing methods local changes reduce cost function 
previous study indicates goodness rough initial solution great effects performance iterative improvement methods 
performance randomly generated initial solutions provides evidence observation 
order investigate effects initial solution configurations system performance conducted experiments heuristic random initial configurations 
heuristic initial configuration resource agents allocate free resource intervals activity earliest due date 
random initial configuration selection activity free resource intervals random eligible activities activities release dates current start time free resource interval 
cora ran problem randomly generated initial solution configurations 
table shows cora performance heuristic random initial solution configurations terms number cycles required find solution problem 
cora orr fss orr fss obtained times speedup implementation 
assumed factor common lisp implementations 
able solve problems heuristic random initial solution configurations 
problem category number cycles required find solution problem averaged 
results show cora equal performance heuristic random initial solution configurations 
experimentally confirmed cora barely effected starting point search 
heuristic random average table comparative performance initial solution configurations scaling characteristics asynchronous interactive nature cora render algorithmic complexity analysis 
order experimentally investigate cora scaling characteristics problem generator function producing benchmark problems produce sets problems involve variables factory jobs machines problem realistic size 
problems exhibit similar scheduling conditions benchmark problems 
shows cora performance larger sized problems exhibits favorable near linear scaling characteristics 
results indicate cora search mechanism polynomial size search space 
problem size cpu time cora scaling property evaluation primary purpose experiments evaluate utility cp cr tool divide conquer tightly coupled problems job shop scheduling 
cp cr provides framework decomposed assigned different problem solving agents disjoint functionality constraint types overlapping responsibility variable subsets 
decomposition leads utilization interaction characteristics exploited achieve problem solving asynchronous coordinated local interactions 
experimental results show cora facilitated coordination information efficiently performed divide conquer set job shop scheduling problems 
addition cora exhibits favorable properties performance relatively insensitive initial solution configuration computational cost near linear problem size 
furthermore mechanism collective operations cora readily implemented parallel processing kinds agents activated sequentially iteration cycle job agents resource agents current implementation 
result approximate time reducing factor enable cora outperform scheduling techniques comparison 
scheduling technique cora performs heuristic approximate search sense systematically try possible configurations 
centralized scheduling techniques employ similar search strategies cora distinguishes interaction driven search mechanism coordinated asynchronous local reactions 
heuristic approximate search provides middle ground generality domain independent search mechanisms efficiency domain specific heuristic rules 
rigidity pass attempt solution construction succeeds fails decisions revised approaches heuristic rules cora adapts constraint violations performs effective search solution 
opposed generic search approaches single search performed search space search knowledge obtained analyzing space step cora exploits local interactions analyzing problem characteristics conducts coordinated asynchronous local searches 
experimental results obtained various approaches concur observations 
approaches generic search techniques augmented domain specific heuristics orr fss orr fss cps required substantial amount computational effort 
solve problems sense failed find solution problem time limit set investigators 
approaches dispatch rules edd covert computationally efficient succeed problems 
pcp relies heuristic rules conduct pass search performance sensitive parameters specify search bias 
cora struck balance terms solving problems considerable efficiency 
cora exploits local interactions notion islands reliability showed perform quite problems clear resource bottlenecks 
problems clear bottlenecks resources loosely utilized say percents utilization expect cora perform efficiency selecting utilized resource islands reliability 
cora current mechanism dominant coordination may sufficient problems resources moderately utilized say percents utilization outstanding bottleneck 
interested developing sophisticated mechanism competing coordination investigate utility various scheduling conditions 
collective problem solving framework problem solving viewed emergent functionality evolving process society diverse interacting coordinated reactive agents 
show large scaled decomposed assigned different problem solving agents disjoint functionality constraint types overlapping responsibility variable subsets 
decomposition results utilization interaction characteristics achieve problem solving asynchronous coordinated local interactions 
application methodology job shop scheduling non time windows results performance 
experimental results show coordination mechanism incorporates search knowledge guides search space exploration society interacting agents facilitating rapid convergence solution independent initial configuration 
addition search complexity grows linearly problem size 
currently applying cp cr methodology constraint optimization problems cops 
preliminary experiments show encouraging results compared heuristic search simulated annealing techniques 
investigating utility cp cr domains different problem structures 
mark bedau 
philosophical aspects artificial life 
practice autonomous systems proceedings european conference artificial life pages paris france 
rodney brooks 
robust layered control system mobile robot 
ieee journal robotics automation ra april 
rodney brooks :10.1.1.12.1680
intelligence representation 
artificial intelligence 
cammarata mcarthur 
strategies cooperation distributed problem solving 
proceedings ijcai pages 
chaib draa moulin 
trends artificial intelligence 
artificial intelligence review 
alberto colorni marco dorigo maniezzo 
distributed optimization ant colonies 
practice autonomous systems proceedings european conference artificial life pages paris france 
meyer lesser 
multistage negotiation distributed planning 
readings distributed artificial intelligence pages 
morgan kaufmann san mateo ca 
corkill 
framework organizational self design distributed problem solving networks 
phd thesis university massachusetts amherst 
rina dechter 
network heuristics constraint satisfaction problems 
artificial intelligence 
rina dechter meiri judea pearl 
temporal constraint networks 
artificial intelligence 
decker durfee lesser 
evaluating research cooperative distributed problem solving 
distributed artificial intelligence vol 
pages 
pitman san francisco ca 
keith decker 
distributed problem solving techniques survey 
ieee transactions systems man cybernetics 
demazeau 
muller 
reactive intentional agents 
demazeau muller editors decentralized ai 
elsevier north holland 
drogoul christophe 
distributed approach puzzle solving 
proceedings th international workshop distributed ai 
edmund durfee victor lesser daniel corkill 
trends cooperative distributed problem solving 
ieee transactions knowledge data engineering 
erman hayes roth lesser reddy 
hearsay ii system integrating knowledge resolve uncertainty 
computer survey 
jacques ferber drogoul 
reactive multi agent systems simulation problem solving 
distributed artificial intelligence theory praxis pages 
kluwer academic boston 
stephanie forrest editor 
emergent computation self organizing collective cooperative phenomena natural artificial computing networks 
mit press 
eugene freuder paul 
inferred disjunctive constraints decompose constraint satisfaction problems 
proceedings ijcai pages 
garey johnson 
computers intractability guide theory np completeness 
freeman 
les gasser randall hill jr engineering coordinated problem solvers 
annual review computer science 
gerard verfaillie 
multi agent model resource allocation problem reactive approach 
proceedings ecai pages 
huhns 
multiagent truth maintenance 
ieee transactions system man cybernetics 
hiroaki kitano 
massive parallelism 
proceedings ijcai pages 
richard korf 
real time heuristic search 
artificial intelligence 
langton taylor farmer rasmussen editors 
artificial life ii 
addisonwesley 
christopher langton editor 
artificial life 
addison wesley 
lesser corkill 
distributed vehicle monitoring testbed tool investigating distributed problem solving networks 
ai mag 
lesser corkill 
distributed problem solving 
shapiro editor encyclopedia artificial intelligence pages 
wiley new york 
olivier 
consistency techniques numerical csps 
proceedings ijcai pages 
alan mackworth 
constraint satisfaction 
shapiro editor encyclopedia artificial intelligence pages 
wiley new york 
mcarthur cammarata 
framework distributed problem solving 
proceedings aaai pages 
jean meyer stewart wilson editors 
proceedings international conference simulation adaptive behavior animals animats 
mit press 
minton johnston philips laird :10.1.1.31.8372
minimizing conflicts heuristic repair method constraint satisfaction scheduling problems 
artificial intelligence 
minton johnston philips laird 
solving large scale constraint satisfaction scheduling problems heuristic repair method 
proceedings eighth national conference artificial intelligence 
paul morris 
density solutions equilibrium points queens problem 
proceedings aaai pages 
thomas morton david 
heuristic scheduling systems applications production systems project management 
john wiley sons new york 
nicola muscettola 
hsts integrated planning scheduling 
mark fox monte zweben editors knowledge scheduling 
morgan kaufmann 
bernard nadel 
constraint satisfaction algorithms 
computational intelligence 
van dyke parunak 
manufacturing experience contract net 
distributed artificial intelligence pages 
morgan kaufmann los altos 
norman sadeh 
look ahead techniques micro opportunistic job shop scheduling 
technical report cmu cs school computer science carnegie mellon university 
smith 
plan coordination support expert systems 
proceedings darpa knowledge planning workshop austin tx 
stephen smith cheng chung cheng 
slack heuristics constraint satisfaction scheduling 
proceedings aaai pages 
luc steels 
theory emergent functionality 
proceedings international conference simulation adaptive behavior animals animats pages 
mit press 
katia sycara 
resolving goal conflicts negotiation 
proceedings aaai pages 
katia sycara steve roth norman sadeh mark fox 
distributed constraint heuristic search 
ieee transactions system man cybernetics 

asynchronous teams 
technical report engineering design research center 
xiong norman sadeh katia sycara 
intelligent backtracking techniques job shop scheduling 
proceedings third international conference principles knowledge representation reasoning pages 
yokoo durfee ishida kuwabara 
distributed constraint satisfaction formalizing distributed problem solving 
proceedings th ieee international conference distributed computing systems pages 
zweben 
framework iterative improvement search algorithms suited constraint satisfaction problems 
proceedings aaai workshop reasoning 
