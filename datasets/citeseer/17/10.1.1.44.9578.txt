scan primitives vector computers siddhartha chatterjee guy blelloch marco zagha school computer science carnegie mellon university pittsburgh pa describes optimized implementation set scan called sums primitives single processor cray mp demonstrates leads greatly improved performance applications vectorized existing compiler technology 
algorithm implement scans algorithm parallel computers applicable minor modifications register vector computer 
cray mp asymptotic running time plus scan times vector add optimal 
important aspect implementation set segmented versions scans marginally expensive unsegmented versions 
segmented versions execute scan multiple data sets having pay vector startup cost set 
describes radix sorting routine scans times faster fortran version highly optimized library sort research sponsored avionics laboratory wright research development center aeronautical systems division afsc air force wright patterson afb ohio contract arpa order 
views contained document author interpreted representing official policies expressed implied government 
routine operations trees times faster corresponding versions connectionist learning algorithm times faster corresponding version sparse irregular networks 
vector supercomputers supply high computing power needed applications 
performance obtained machines critically depends ability produce code 
distinct approaches taken meet goal vectorization decks language support vector intrinsics seen proposed fortran standard 
cases focus speeding scientific computations characterized regular static data structures predominantly regular access patterns data structures 
alternatives effective problems create manipulate irregular dynamically varying data structures trees graphs 
scan prefix sum operations shown extremely powerful primitives designing parallel algorithms manipulating irregular dynamically changing data structures 
shows scan operations great benefit algorithms pipelined vector machines 
describes optimized implementation scan primitives cray mp gives performance numbers applications primitives see table 
approach design algorithms similar basic linear algebra subprograms blas developed context linear algebra computations algorithms set primitives implementations optimized having compiler try vectorize existing code 
remainder organized follows 
section introduces scan primitives reviews previous vectorizing scans 
section discusses implementation detail presents performance numbers 
section presents primitives applications primitives 
section 
cray mp cft trademarks cray research fortran code discussed compiled cft version 
code compiled cray pcc version xmp 
elt routine scan version scalar version plus scan int segmented plus scan int parallel radix sort bits branch sums root sums delete vertices table incremental processing times element primitives applications discussed scan scalar versions 
numbers single processor cray mp 
clock tick ns 
items marked written fortran marked written scan primitives scan primitive takes binary associative operator phi left identity phi sequence 
gamma elements returns sequence 
gamma phi phi 
phi 
phi gamma maximum operators scan primitives operators adequate applications discussed 
henceforth refer scan primitives scan max scan respectively 
example scan max scan gamma scan primitives come apl 
livermore loop scan addition binary associative operator 
call scans defined unsegmented scans 
applications execute scan operations multiple data sets 
paying large startup cost scan desirable put sets adjacent segments memory flags separate segments 
example head flags seg scan segmented versions scan execute scan independently segment pay startup cost 
section discusses tradeoff section gives example 
uses unsegmented segmented scans extensive 
list 

add arbitrary precision numbers 
numbers represented single machine word 

evaluate polynomials 

solve recurrences gamma gamma gamma livermore loops 

solve tridiagonal linear systems livermore loop 

pack array marked elements deleted pack intrinsic fortran 

find location minimum array livermore loop intrinsic fortran 

implement radix sorting algorithm see section 

implement quicksort algorithm 

perform lexical analysis 

implement operations trees finding depth vertex tree see section 

label components dimensional images 

draw line dimensional grid endpoints 

solve variety graph problems 
vector elements head flags lengths head pointers segmented vector ways describing segmentation 
head flags marks segment lengths specifies length segment head pointers points segment 

solve problems computational geometry 

efficiently support nested parallel structures cm lisp flat parallel machines 
comparison previous significant research parallel vector algorithms unsegmented scans 
parallel implementation scans perfect shuffle network suggested stone polynomial evaluation 
problem algorithm required log time processors 
required log arithmetic operations opposed serial algorithm 
stone showed optimal version algorithm context solving tridiagonal equations 
algorithm implemented log time log processors 
implemented cray mp algorithm results running times longer algorithm requires intermediate results written main memory read back 
approaches implementing scans vector machine cyclic reduction unrolling scalar loops larger constant factors implementation 
frequent linear recurrences scientific code motivated research finding efficient vectorizable methods scans 
instance livermore loops involve recurrences expressed terms scans 
state art vectorizing compilers recognize linear recurrences algorithms optimize loops 
segmented scans handled techniques 
reason performance unsegmented scalar plus scan table significantly better segmented plus scan 
special hardware support summation iteration type operators added vector machines hitachi example 
machine includes feedback connection output alu inputs support operations 
speed instructions slower vector instructions efforts vectorize scans primitives able realize small fraction peak performance 
techniques suggested handle segmented scans 
demonstrates specialized hardware essential effective existing hardware vectorize scan operations 
loop interchange technique vectorizing compilers vectorize inner loops interchanging order enclosing loops 
appears functionality provided segmented scans achieved loop interchange techniques 
true operations arrays segments corresponding rows columns array equal length 
techniques applicable irregular data structures graphs sparse matrices segments necessarily length 
performance dominated length longest segment 
performance loop interchange technique depends number segments bad small number segments performance segmented scan shown independent number 
implementing scan primitives section vectorizable algorithms unsegmented segmented scan primitives 
consider scan algorithms easily modified max scan changing addition operation maximum 
describe parallel algorithm plus scanning vector length processor processor processor processor sum scan sum processor processor processor processor executing scan elements processors 
processors 
phases 
processor sums elements gamma 
simplicity assume multiple 
call result sum 

vector sum scanned tree summing similar algorithm 

processor sums portion vector starting sum initial value accumulating partial sums 
partial sums written corresponding locations 
shows example details tree summing step omitted 
vectorize parallel algorithm consider element vector register processor 
scheme element vector register need sum elements gamma vector scanned 
operation vectorized traversing vector stride elementwise vector instructions sum sections 
useful consider vector elements organized rectangular fashion characterized parameters shown fig 

parameters characterize vector completely called shape factors 
gamma gamma 

gamma gamma 

gamma 
gamma gamma 
gamma gamma gamma rectangular organization vector length scan operations 
vector fully characterized specifying shape factors cell represents element vector 
cray mp length vector registers computation 
stride load vector register memory number iterations phase algorithm 
number iterations executed vector register length remaining gamma iterations executed length set gamma 
determining shape factors fig 
gamma equation underspecified purposes determining shape factors additional constraints choosing parameters ffl ffl chosen minimize bank conflicts allowed multiple banks constant determined number memory banks bank cycle time case cray mp 
ffl kept large possible upper bounded length vector registers case cray mp 
reason organizing data memory accesses constant stride bank conflicts avoided 
refer method traversal vector scan order usual unit stride traversal index order 
vector scan order traversal read elements order index order traversal read order 
algorithm unsegmented plus scan unsegmented scan algorithm mirrors parallel algorithm phases 
discussion assume purposes clarity 
algorithm needs modified decrement contents vector length register gamma iterations 
algorithm register vector machine 
implementation cray mp loops shown unrolled registers renamed avoid locking vector registers 
unrolling speeds phase factor 

phase elements summed columnwise producing sums 
gamma 
gamma 
gamma gamma 
gamma gamma gamma gamma 
gamma sums stored elements vector register initialized zero 
entire computation vectorizable pseudo code shows 
code vector registers vector length register set compute hold columnwise sums load sections source vector 
vector fetch stride vector add 
phase serial scan performed elements vector register 
computation new values elements follows gamma 
gamma gamma gamma gamma gamma gamma computation vectorized fixed cost operates elements cray mp 
executes vector register involve memory transfers 

phase elements summed columnwise current values initial offset follows vector fetch stride vector store stride vector add computation vectorizable 
values stored values resulting plus scan 
vectors identical affect correctness algorithm 
shows various stages example 
vector scan performed length purposes illustration organized 
noted phases algorithm implement standard reduction summation operation 
src vector organization phase initially iter iter iter phase dst phase iter iter iter dst stages execution unsegmented scan operation 
diagram shows organization source vector src intermediate states phase scan values phase values written destination vector dst phase 
algorithm segmented plus scan primitive segments identified bit vector flags set positions segments start 
cray mp store flags packed transposed representation similar rectangular representation vectors element bit long 
means flags stored words shown fig 

reduces storage required flags doubles speed code making effective vector mask register 
algorithm specific cray mp easily modified run vector machines 

gamma gammal 
gamma gammal 
gamma gamma 
gamma gamma gammal 
gamma gammal 
gamma gamma 
gamma gamma gammal compressed transposed representation segment flags 
cell represents bit column represents padding consisting bits 
row corresponds bit word compressed representation requires words storage 
implementation segmented plus scan similar unsegmented version change handle segments 
involves resetting running sum zero start new segment reached 
flags assumed compressed form shown 
phases algorithm follows 
description vector registers scalar register store flag information array containing compressed flags vm vector mask register 
loop unrolling register renaming required avoid locking vector registers 

phase pseudo code phase 
merge operation directly supported mp 
scalar instructions run overlapped vector instructions run chained fashion 
vector fetch stride flag fetch scalar src seg vector organization flags organization phase initially iter iter iter phase initially iter iter iter phase dst phase iter iter iter dst stages execution segmented scan operation 
diagram shows organizations source vector src flags seg intermediate states phase scan values phase values written destination vector dst phase 
flags bits vectors integers 
padding words compressed flags omitted clarity 
vm reset vector merge vm vector add flag bits scalar vm 
phase pseudo code phase follows th elt register th bit loop runs scalar mode cost small fixed involves memory transfers 

phase phase similar phase results written flags need ored 
vector fetch stride flag fetch scalar vm reset vector merge vm vector put stride vector add packed representation flags allows successive words loaded directly vector mask register vector merge reset values practice cache word sections flags vector register cut memory access costs 
shows various stages example 
vector scan performed length purposes illustration organized 
vector segments lengths respectively 
algorithm segmented copy scan useful segmented scan operations include max copy scans 
segmented copy scan copies values placed starting positions segments segment implemented manner similar segmented copy scan copies running value new value flag point way plus scan adds value running sum clears sum 
details similar segmented plus scan repeated 
results table presents timing results implementations scan primitives 
characterize performance operation numbers measure respectively incremental cost processing element clock cycles vector half performance length 
efforts concerned reducing asymptotically dominant factor running time 
primitives implemented cray assembler language cal set routines callable programming language 
loops unrolled scan defined section called implemented similar manner 
operation clocks element elements plus scan max scan seg copy scan seg plus scan table values various scan primitives 
values single processor cray mp 
twice avoid register reservation effects 
timing measurements taken system call multiple measurements taken smooth effects presence users system 
squares technique fit straight line points calculate theoretically unsegmented segmented plus scan cray mp algorithm cycles element assuming perfect chaining 
implementation unsegmented scan achieves rate cycles element peak throughput 
segmented scan implementation achieves cycles element peak rate 
segmented vs unsegmented scans clear effect segmented scan simulated performing unsegmented scan segments 
show generally undesirable 
consider vector length containing segments 
execution time vector operation equation superscripts indicate respectively segmented unsegmented versions scan operation times execute segmented scan operation methods delta set unsegmented scans runs faster delta delta gamma delta substituting values table gives indicates unsegmented algorithm implement segmented scan small number relatively long segments 
applications section discuss applications primitives sorting tree operations connectionist learning algorithm called back propagation 
applications chosen illustrate scan primitives problems regular 
introduce set primitives addition scans implemented building blocks applications 
primitives shown table semantics 
elementwise operations correspond directly elementwise vector instructions cray 
permutation operations implemented gather scatter instructions 
obviously wide variety operations choose selecting particular set 
operations considered primitive considerations generality ease implementation 
implemented cal compiler job vectorizing 
table shows performance primitives terms performance permutation operations data dependent possibility memory bank conflicts 
timed identity reverse unstructured permutations 
sorting example scan primitives consider simple radix sorting algorithm 
algorithm parallel version standard serial radix sort 
bit bit ext bit flags bit len split flags len vh split vh vh split vh vh split vh example split radix sort vector containing bit values 
notation signifies extracting th bit element 
algorithm loops bits keys starting lowest bit executing split operation iteration 
split operation packs keys corresponding bit bottom vector packs keys bit top vector 
maintains order groups 
sort works split operation sorts keys respect current bit maintains sorted order lower bits remember iterate upwards significant bit 
shows example sort code implement 
consider split operation implemented scan primitives see 
basic idea determine new index element permute elements new indices 
done pair scans follows 
plus scan inverse flags vector 
gives correct offset elements flag 
generate offsets elements put executing plus scan flags add initial element number elements 
select indices vectors original flags vector 
shows code implements split operation 
shows fortran implementation split operation 
available fortran compiler vectorize code 
performance parallel radix sort bit inputs shown table 
highly optimized library sort routine times faster sort written fortran 
mp split compress index vector instruction performance implementation 
interesting get performance instruction designed specifically split type operations 
tree algorithms section describes operations trees ffl branch sums tree values returns node sum children ffl root sums tree values returns node sum values path node root ffl delete vertices tree flag node deletes vertices flag set 
illustrates effects operations 
serial implementation operations straightforward vectorizing operations capability vectorizing compiler 
problem way turning multiple recursive calls loop introducing stack simulate recursion inhibits vectorization 
vectorize drastically alter representation tree algorithms 
description representation algorithms scope 
interested reader referred 
performance numbers vector serial versions operations shown table 
trees need binary balanced operations 
basic operations execute useful operations tree ffl determining depth vertex 
executed applying root sums operation tree value vertex 
ffl determining descendants vertex 
executed applying branch sums operation tree value vertex 
ffl passing flag set vertices descendants 
executed root sums operation tree vertices want descendants marked 
vertex number greater result marked 
ffl passing flag set leaves ancestors 
executed branch sums operation tree vertices want ancestors marked 
vertex number greater result marked 
connectionist learning algorithm final example illustrates segmented versions scan primitives examine forward propagation step connectionist learning algorithm called back propagation 
connectionist network models dynamic systems composed large number simple processing units connected weighted links state unit network depends states units unit connects 
values links connections determine unit affects 
behavior system modified adjusting values connections repeated application learning rule 
back propagation learning algorithm error correcting learning procedure multilayered network architectures 
information flows forward network input layer intermediate hidden layer output layer 
value unit determined computing weighted sum values units connected unit applying logistic function gammax result 
forward propagation rule recursively applied successively determine unit values layer 
forward propagation consists basic steps distributing activation values units respective fan weights multiplying activations weight values summing values weights layer units applying logistic function value 
dense matrix algorithms implement steps network regular dense efficiently sparse networks 
network represented directed graph forward propagation step proceeds follows 
activations input units clamped input text 
algorithm distributes activations weights copy scan operation weights multiply weight activations 
result sent output weights input weights unit layer permute 
plus scan sums input values layer units logistic function applied result unit processors determine unit activations 
forward propagation step applied layer links network 
set operations runs cycles element 
efficient implementations unsegmented segmented scan primitives vector machines shown leads greatly improved performance representative set applications 
primitives optimal asymptotic performance available application library function calls optimize primitives 
optimizations reduce temporary storage allocate resources better reduce redundant computation split operation run twice fast 
working compiler technology address issues 
looking multiple processors cray mp speed primitives 
demonstrated speeds primitives prospect higher throughputs methods mentioned strongly argue inclusion commonly available programming libraries languages 
believe scan primitives including segmented versions easily accessible included languages support vector intrinsics new fortran specification 
hope ideas suggest new data structures algorithmic techniques allow vector supercomputers effectively larger variety problems 
american national standards institute 
american national standard information systems programming language fortran march 
guy blelloch 
scans primitive parallel operations 
ieee transactions computers november 
guy blelloch 
vector models data parallel computing 
mit press cambridge ma 
guy blelloch james little 
parallel solutions geometric problems scan model computation 
proceedings international conference parallel processing pages vol august 
guy blelloch gary 
compiling collection oriented languages massively parallel computers 
journal parallel distributed computing february 
cray research heights minnesota 
symbolic machine instructions manual sr march 
daniel hillis guy steele jr data parallel algorithms 
communications acm december 

fast direct solution poisson equation fourier analysis 
journal association computing machinery january 
roger 
parallel computers architecture programming algorithms 
philadelphia pa second edition 
kenneth iverson 
programming language 
wiley new york 
knuth 
sorting searching 
addison wesley reading ma 
peter harold stone 
parallel algorithm efficient solution general class recurrence equations 
ieee transactions computers august 
richard ladner michael fischer 
parallel prefix computation 
journal association computing machinery october 
lawson hanson kincaid krogh 
basic linear algebra subprograms fortran usage 
acm transactions mathematical software september 
john levesque joel williamson 
guidebook fortran supercomputers 
academic press san diego ca 
james little guy blelloch todd cass 
algorithmic techniques computer vision fine grained parallel machine 
ieee transactions pami march 
yu 

algorithmic complexity discrete functions 
soviet physics doklady january 
constantine polychronopoulos 
parallel programming compilers 
kluwer academic publishers norwell ma 
harold stone 
parallel perfect shuffle 
ieee transactions computers 
harold stone 
parallel tridiagonal equation solvers 
acm transactions mathematical software december 
tanaka 
compiling techniques order linear recurrences vector computer 
proceedings supercomputing pages orlando florida november 
wada hiroshi shun 
high speed processing schemes summation type iteration type vector instructions hitachi supercomputer system 
proceedings acm conference supercomputing pages july 
guy steele jr connection machine lisp dialect common lisp data parallel programming 
proceedings second international conference supercomputing may 
operation eqv 
fortran kernels elementwise add sub neg max gt 
inv eq 
ext bit gbit sel eq 
distr permutation perm sel perm eq 
table vector primitives 
kernel loops elements vectors 
gbit intrinsic function extract bit word 
kernels vectorized change algorithm 
operation elt elts add sub neg max inv ext bit sel distr perm identity reverse unstructured identity unstructured sel perm identity table values vector primitives 
numbers single processor cray mp 
routine clocks element elements split operation parallel radix sort bits parallel radix sort bits table values split operation parallel radix sort routine 
numbers processor cray mp 
inv flags len plus scan len number flags sum len len setup correct offset flags sum plus scan flags len restore flags flags sum fix initial element sum sel index flags len perm result index len flags index result split operation packs elements corresponding flag position bottom vector packs elements top vector 
lowercase variables scalars capitalized variables vectors 
subroutine split dst src fl len integer dst src fl integer len index len fl eq 
dst index src index index endif len fl eq 
dst index src index index endif return split operation implemented fortran 
fortran compiler vectorize code 
vector version scalar version routine elt elts elt elts branch sums root sums delete vertices table values tree operations 
numbers processor cray mp 
original tree branch sums root sums delete vertices illustration tree operations 
delete vertices marks nodes deleted 
