linear continuations andrzej filinski school computer science carnegie mellon university pittsburgh pa andrzej cs cmu edu functional interpretation classical linear logic concept linear continuations 
non linear counterparts continuations lead model control inherently impose particular evaluation strategy 
additional structure expressed admitting closely controlled copying discarding continuations 
emphasize importance obtaining computationally appealing categorical models linear logic propose simple subcategory interpretation modality 
years considerable interest applications girard linear logic ll gir programming language design implementation 
time various mutated versions original system proposed share basic premise assumptions course formal proof necessarily arbitrary number times including zero deriving 
idea new numerous formalizations relevant implication known church original calculus required abstracted variable occur free body abstraction 
canonical ll restriction research sponsored part national science foundation ccr part avionics lab wright research development center aeronautical systems division afsc air force wright patterson afb oh contract arpa order 
views contained document author interpreted representing official policies expressed implied government 
appear popl strengthened assumptions exactly 
modal construct added representing hypotheses may restrictions 
striking consequence problematic negation involution identified loss constructivity 
advantages making linearity explicit functional languages convincingly argued laf hol wad 
primary benefits cited linear framework naturally express transparent destructive updates reduce eliminate need garbage collection 
stands contrast deducing information fact program analysis techniques interpretation 
program explicitly state piece data accessible single attempts copy discard considered type errors 
apart making intent clearer approach enhances modularity simplifies issues separate compilation linearity part visible interface deduced possibly non existent implementation 
notably applications exploit intuitionistic negation fragment ll 
essentially formalize notion linear data exactly specified 
remains potentially significant application keeping closer track resources linear control process evaluation explicit subject linearity constraints 
see classical linear logic permits control flow language including evaluation strategy modeled naturally basic concepts expressing data flow 
fact fundamental idea precisely reflect domain control world linear data tool class linear continuations 
approach complements implementation techniques strictness analysis treating sites exactly evaluation isolated islands linearity fundamentally non linear language theory linear control views linear constructs skeleton non linear features built 
somewhat paradoxically purely linear evaluation framework limit parallelism evaluation strategy presence firstclass continuations 
non linear constructs accommodated example pieces residual computation discardable knowledge internal structure model impose definite evaluation order 
proper formalization linearity especially control intuitively obvious rely category theory organizational tool guiding light 
particular formalizing linear control setting linear categories close relative ubiquitous cartesian closed categories cccs categorical semantics programming languages essentially linear categories classical ll cccs intuitionistic logic 
times try support categorical definitions results computational intuition 
organized follows section presents linear continuations categorical setting outlines role tying formally dual constructs 
section considers categorical interpretations modal operators ll significance obtaining simple models 
section outlines classical ll faithfully represent data types evaluation strategies functional languages varying interpretation negation 
section discusses connections related section summarizes main ideas suggests promising areas investigation 
linear categories section reviews common interpretation modality free classical linear logic linear category introduces concept class linear continuations paradigm reasoning functional interpretations categories 
reader unfamiliar category theory probably consult appendix terminology 
tensor products linear exponentials usual categorical presentations typed calculi build concept cartesian closure ls supplemented rich additional structure express refinements polymorphism dependent types 
core systems remains intuitionistic principle available data point number times possibly 
reasonable assumption cases excludes number useful categorical models possess weaker property symmetric monoidal closure corresponding linear calculi 
step defining categories calculi formalize fundamental concept aggregating single data definition symmetric monoidal category category equipped distinguished object unit bifunctor gamma omega gamma theta tensor product natural isomorphisms omega omega omega 
omega omega exch omega omega satisfying mac lane kelly coherence conditions mac 
coherence conditions formalize expected relations structural isomorphisms 
example identity ffi exch ida omega follow automatically naturality exch guaranteed coherence 
particular cartesian category symmetric monoidal terminal object unit categorical product tensor product 
natural product category tensor product categorical 
example consider category set sets partial functions designated element set unit cartesian product sets tensor product tensor product partial functions function omega 
defined iff defined 
products different categorical products set empty set terminal 
tensor products lack projections pairings characterizing categorical counterparts define exponentials usual way exploiting functoriality omega definition symmetric monoidal category called closed functor gamma omega right adjoint gamma linear exponential object abbreviation smcc category 
write counit adjunction ap application cur gamma currying giving adjunction equations ap ffi cur omega idb omega cur ap ffi omega idb conventions ordinary products exponentials operator omega binds tighter 
example set tensor product mentioned symmetric monoidal closed 
cartesian closed categorical product set right adjoint 
analogously cartesian closed categories cccs calculi express smcc morphisms concise lambda syntax extended tuple notation tensor products 
crucial property linear calculus data exactly leading naturally variable patterns abstractions laf 
example linear term free variable omega represents categorical morphism source cur ap omega ffi omega omega ffi omega omega omega adjunction equations correspond usual fij equivalence terms just ordinary calculi cartesian closure 
note product free fragment linear calculus corresponds combinatory logic usual basic combinators fx gx xy replaced linear combinators gx fxy abstracted variable exactly uses twice discards 
duality negation outlined categorical interpretation intuitionistic ll smcc provides semantical basis higher order functions linear data 
see negation operator classical ll interpreted extending internal language category construct reasoning control data 
consider natural categorical characterization terms dualizing objects due mart oliet meseguer mom mom 
despite apparent simplicity slightly stronger interpretation autonomous categories bar outlined seely see 
object smcc exists natural transformation 
think function function invertible definition object smcc called dualizing object natural transformation cur ap 
ffi exch 


natural isomorphism 
smcc dualizing object called classical 
write required inverse morphism evala 
giving pair equations evala ffi cur ap 
ffi exch 
ida cur ap 
ffi exch 
ffi evala id 
note particular 

combination 
usually abbreviated linear negation 
syntactically delta binds tighter prefix infix operator notation symbolizes orthogonal function space 
convenient negation cartesian closed category 
unfortunately fairly easy show ls observation usually credited joyal ccc dualizing object preorder contains morphism objects 
really need additional restrictions imposed linearity obtain non degenerate categories dualizing objects 
example category coherent spaces linear maps gir independent semantic interest classical smcc see mom 
introduce counterpart eval relation lisp construct name linear calculus special operator typing rule gamma 
gamma de categorical isomorphism equations correspond directly identities linear terms 


computational intuition equalities think value type representing function input value dual type logically represent function output call black hole function linear accepting continuation 
view construct adding class usable generality values continuations language calls argument current continuation represented non returning function 
linearity constraints eventually apply continuation typed value computation resumes just returned value 
words allows reify intangible evaluation context piece data 
assume initial continuation linear final result returned program 
particular result contains functional components applied exactly value appropriate type 
equation paraphrased capturing current continuation immediately applying abstracting current context evaluating context redundant 
second equivalently stated tells continuation applied de de evaluated context represented continuation captured passed argument 
seen way closely resembles scheme call cc rc operator version considered gri idea double negation elimination control operator non linear setting 
particular satisfies equations de de analogous felleisen rules operator allow bubble ds root term 
properties dualizing object consequences expected 
essentially linear continuations commute ensuring kind coherence linear terms guaranteed smcc axioms 
example linear request acceptors obtain value type omega different ways depending expression query easily check de words linear continuation passing style inherently pick arbitrary evaluation order tuple application components order imposed continuations discarded invoked multiple times 
property may provide link true parallelism continuation multiprogramming wan 
call cc operator essentially implement coroutine facility captured continuations applied twice 
thread control independent progress backtracking class continuations multiplex single processor 
linear continuations especially significant preemptive timer scheduling continuations captured switched asynchronously execution appear ordinary sequential code 
take negation suitably axiomatized tensor products primitives define linear exponential omega computational interpretation think functional value continuation accepting pair application context consisting typed argument typed return continuation 
linearity ensures return continuation eventually invoked linear functions return place call 
view functions continuations particularly useful replace linear negation call value negation get traditional scheme language functions need return exactly 
additives linear logic defines set additive connectives correspond categorical products coproducts 
intuitionistic subset axiomatized separately easily shown classical smcc terminal object binary products initial object binary coproducts phi vice versa category called linear 
computationally value type represents pair typed typed component computation choice point 
conversely value type phi value type type choice point creation 
reasons apparent section choose treat coproducts fundamental define phi instructive note equivalence explained naturally terms continuations product interpreted continuation accepting tagged requests reflected projection pairing morphisms fst inl snd inr hf gi case inl inr product equations follow directly ones coproduct negation 
similarly object information extracted 
modal operators fragment linear logic far expressive 
general computation need way express non linear uses data girard modal operators 
unfortunately semantic properties nearly understood pure linear fragment particular proposed categorical interpretation laf considered somewhat controversial see 
reason problems may intuitionistic fragment ll forced perform unrelated functions expressing data suspending potentially non terminating computations 
section see additional expressive power provided full classical linear logic modality allows properly separate concepts 
precisely consider class particularly simple categorical models may adequate model computation intuitionistic case look viable classical ll 
copying discarding data purely linear language datum exactly 
example term fx gx illegal appears twice body abstraction 
pure framework copy discard data certain types violating linearity 
example define type bool phi effect duplicate truth value function bool true true false false true false abbreviate inl inr respectively construct denotes coproduct casing morphism 
note encoding function argument evaluated exactly regardless global evaluation strategy 
course analogous expression discard boolean value 
importantly case boolean argument fact exactly adding explicit conditional change meaning expression identity true false just syntax counterpart coproduct uniqueness equation ffi inl ffi inr 
linear case integrates smoothly extension 
general copy discard finite tensor products component wise categorical coproducts copyable discardable objects 
recursively defined types phi form primitive recursion similarly copy discard natural numbers included primitive types associated copy discard functions lists trees types 
general way copy small function spaces bool bool categorical products bool bool internal structure inaccessible 
formalize distinction precise means copy discard value 
usual category theory provides tool form comonoids details mac laf just state key concepts definition commutative comonoid symmetric monoidal category consists object morphisms omega satisfying equations written applicative notation equations ensure mac comonoid exists unique structural morphism built isomorphisms definition omega delta delta delta omega 
morphism comonoids da 
db morphism respects structure satisfies db da value copied discarded natural require unique way doing 
simple subtle way ensuring provided definition symmetric monoidal category called pre cartesian forgetful functor category commutative comonoids full embedding determines full subcategory core generally letters objects subcategory 
effect definition associates object core unique way copy discard values type 
object unique comonoid drop copy omega morphisms objects morphisms comonoids 
coupled properties tensor products gives easily somewhat checked proposition pre cartesian symmetric monoidal category subcategory core fact cartesian terminal object tensor product omega categorical product core 
motivated result refer objects subcategory cartesian objects types 
objects usual projections pairing associated categorical products 
cartesian phi way copy discard data simply extend linear syntax allow multiple occurrences cartesian typed variables semantic ambiguity 
syntax slightly deceptive conversions valid free variables cartesian type morphism corresponding morphism comonoids commute copying 
notation occurring multiple times conceptual abbreviation purely linear term copying discarding explicit outlined section 
mean implemented way semantic properties defined expansion 
case exactly modality course armed categorical characterization copying discarding consider completion framework arbitrary types concept representations subcategory 
example category sets total functions clearly proper subcategory sets binary relations relation uniquely encoded function powerset 
analogously definition pre cartesian category called canonical core inclusion functor core 
right adjoint core 
explicitly adjunction assigns object object course core associated morphisms drop copy omega morphism reada object core morphism exists unique morphism code satisfying reada ffi code uniqueness expressed matching equation code reada ffi equivalent equation intuitively appealing pair core morphism code reada id code ffi code ffi expected computational interpretation products omega 
quickest somewhat obscure way verify note functor left adjoint inclusion preserves limits 
particular maps categorical products large category categorical products subcategory 
fortunately easily construct required isomorphisms explicitly 
object core isomorphism particular object deal multiple degrees 
computational interpretation framework pair consisting copyable discardable value representation type access function code pointer closure type copy discard value type copying discarding typed value representing 
course actual representation completely invisible category 
analogy may useful implement higher order functions simpler constructs build manipulate explicit closures price extensionality closures may represent function internal structure completely different 
similarly categorical equations governing permit change representation typed value time long reads value 
particular cartesian type change representation type just access function id convenient obvious choice immediately read words usual technique memoization applies presence class continuations 
linear calculus represent code gamma term free variables cartesian necessarily type 
conversely add new abstraction pattern body representing reada definitional extension notation represents additional categorical structure particular 
taken pre cartesian structure adjunction equations code gamma read correspond quite equalities linear terms fv syntactic similarity lisp scheme quote construct course purely coincidental 
purpose maintain simple correspondence terms functional type categorical morphisms operator reserved functorial action morphisms fx 
allow extend pattern fij equivalence patterns 
third verifies correctness substitution need occurs embedded value multiple times 
worth pointing discussion explicitly mention classical features category model reasonable ace left expressing potentially non terminating computations discardable continuations 
modality consider introduce partiality linear category definition write 
computationally interpret isomorphism continuation accepting accepting continuation eventually apply typed value 
represents continuation accepts continuation may freely discard copy 
evaluation typed term may return may return multiple times point different values 
non returning aspect common programming languages possibility infinite loops intuitionistic linear ones lafont live laf linear function loops forever sense broken promise apply return continuation passed 
say functions linear output input 
hand type system classical linear logic allows express function produces exactly result essentially totality condition mechanisms expressing input consumed exactly refinement strictness 
representing evaluation strategies section sketches application classical linear logic semantic basis traditional functional languages 
particular focus compound data types evaluation strategies represented constructs subcategory models classical linear logic previous section 
consider call value cbv call name cbn evaluation simple language product coproduct exponential exponential types arise naturally categorical models class continuations fil 
linear framework strategies seen essentially dual relation usually obscured asymmetries intuitionistic logic 
call value fairly convincing case cbv functional language representation firstclass continuations completeness product type falls naturally correspondence ordinary lambda calculi cccs 
modulo syntactic differences languages kind include functional subsets scheme rc versions standard ml new jersey 
cbv continuations class copyable discardable convenient introduce abbreviation call value negation note particular omega cbv continuation expecting value equivalent pair continuations case 
building concept negation interpret cbv term free variable linear morphism equivalently omega meaning cbv types base type theta omega phi omega omega omega type see 
example find 
note expressible types cartesian particular type cbv language 
means cbv term multiple free variables may number times usual 
actual translation cbv terms essentially typed uncurried version known continuation passing transform plo key observation resulting terms linear particular simply translation express multiple uses data original terms values involved cartesian representing type final answers cartesian appears function argument 
suggests continuation passing style ad hoc syntactic restriction non linear terms sense real meaning cbv terms natural intermediate representation compilation ste aj semantic analysis shi partial evaluation cd 
linear framework easily encompass trivial functions functions terminate escape values type omega 
cbv continuations necessarily strict virtue types 
furthermore observe fact categorical initial object category cbv types terms categorical coproduct 
cocartesian closure coproduct left adjoint functions return result curried distinguishing cases explicit return implicit return corresponding non local exit 
hand type denoted theta categorical product fst total 
define alternative lazy product language pi theta interpretation pi omega categorical product existence uniqueness mediating morphisms interesting parallel cbn coproducts see subsection 
call name similarly cbv consider models full cbn languages properties types cbn turn interfere significantly rest language provide notion class continuations appropriate strategy 
consider pure cbn language fil obtained exact mirror image cbv 
expression free variable represented linear morphism omega 
cbn terms free variables number times slightly different reason cbv 
cbn negation interpretation types base type theta omega girard notation denote omega note types cocartesian type expression 
means variables represent potentially nonterminating residual computations 
course connectives cbn expressed cost obscuring symmetry terms cbv connectives linear negation translation types likewise basis implementation 
easily checked cbn category fact cartesian closed terminal object theta product exponential 
behavior expect lazy 
fact way add proper coproducts language function fixpoint hp just lazy products cbv define conventional eager coproducts qb interpretation phi possible evaluate coproduct typed datum injection tag known forcing evaluation actual inject 

accounts possible non termination identical usual encoding intuitionistic ll gl 
particular bool bool phi 
phi 
booleans definable expected 
comparison related naturally builds girard fundamental linear logic gir 
question answer symmetry mentioned interpreted duality values continuations seen extreme cases linear functions 
interpretation modality free classical ll linear category see mom appears commonly accepted 
proposed categorical view types cofree coalgebras gl oriented intuitionistic subset ll 
additional structure classical ll notably availability types representing terms necessarily evaluate proper values allow conceptually computationally simpler models 
categorical pragmatic computational interpretations linear logic functional program ming language hol focused intuitionistic subset understanding classical version intimately linked parallelism communication abr reinforces dichotomy 
potential parallel evaluation exciting classical ll give better understanding control flow traditional sequential languages intuitionistic intuitionistic linear logic 
direction syntactic theories continuation calculi proposed tool formal reasoning call cc control operators 
striking connection operators classical logic pointed griffin gri convincingly related friedman translation cps transformations murthy mur 
hope analysis terms classical linearity possible derive results semantically supplementing current understanding cps translation essentially syntactic concept 
nis notes connection classical ll scheme languages presents somewhat involved translation typed terms call cc girard proof nets ll 
takes strongly syntax approach consider semantic implications linear control 
fact translation looks conceptually similar simply griffin murthy cbv cps translation classical intuitionistic logic followed girard translation intuitionistic linear logic 
independently motivated symmetry values continuations reported fil fil 
retrospect kind duality considered mirrors cbv cbn negations section underlying pure linear negation leading somewhat ad hoc axiomatization 
results obtained formed principal motivation investigation 
issues view linear negation representing class continuations linear 
particular dualizing construct categorical models classical linear logic interpreted call cc control operator 
building shown modality applied continuation types lets delineate class possibly non returning computations potentially discard return continuations 
allows decouple delayed evaluation types leads simpler subcategory interpretation 
sketched additional expressive power classical linear logic allows accurately represent data types control flow traditional functional programming languages 
clearly remains formalizing outlined 
full understanding linear continuations probably involve resolution closely related issues ffl polymorphism 
striking similarity isomorphisms 
linear categories parametric models second order polymorphic calculus rey coincidence formal connection important result 
ffl general cps transform 
changing codomain continuations information carrying type possible represent wide variety additional computational structure side effects backtracking way complementary computational monads mog 
preliminary results direction reported df topic far explored 
acknowledgments wish olivier danvy timothy griffin robert harper narciso mart oliet murthy benjamin pierce john reynolds insightful comments helpful suggestions various drafts 
abr samson abramsky 
computational interpretations linear logic 
imperial college research report doc department computing imperial college science technology medicine london uk 
aj andrew appel trevor jim 
continuation passing closure passing style 
proceedings sixteenth annual acm symposium principles programming languages pages austin texas january 
bar michael barr 
autonomous categories 
number lecture notes mathematics 
springerverlag 
cd charles consel olivier danvy 
better support static data flow 
proceedings conference functional programming computer architecture number lecture notes computer science pages cambridge massachusetts august 
df olivier danvy andrzej filinski 
abstracting control 
proceedings acm conference lisp functional programming pages nice france june 
bruce duba robert harper david macqueen 
typing class continuations ml 
proceedings eighteenth annual acm symposium principles programming languages pages orlando florida january 
matthias felleisen daniel friedman eugene kohlbecker bruce duba 
syntactic theory sequential control 
theoretical computer science 
fil andrzej filinski 
declarative continuations investigation duality programming language semantics 
david pitt editors category theory computer science number lecture notes computer science pages manchester uk september 
fil andrzej filinski 
declarative continuations categorical duality 
master thesis computer science department university copenhagen august 
diku report 
gir jean yves girard 
linear logic 
theoretical computer science 
gl jean yves girard yves lafont 
linear logic lazy computation 
proceedings tapsoft number lecture notes computer science pages pisa italy march 
gri timothy griffin 
formulae types notion control 
proceedings seventeenth annual acm symposium principles programming languages pages san francisco california january 
hol holmstrom 
linear functional language 
thomas johnsson simon peyton jones kent karlsson editors proceedings workshop implementation lazy functional languages pages sweden september 
chalmers university pmg report 
hp hagen axel poign 
note inconsistencies caused fixpoints cartesian closed category 
theoretical computer science 
laf yves lafont 
linear machine 
theoretical computer science 
laf yves lafont 
logiques cat egories machines 
phd thesis universit de paris vii paris france january 
ls joachim lambek philip scott 
higher order categorical logic volume cambridge studies advanced mathematics 
cambridge university press 
mac saunders mac lane 
categories working mathematician volume graduate texts mathematics 
springer verlag 
mog eugenio moggi 
computational lambdacalculus monads 
proceedings fourth annual symposium logic computer science pages pacific grove california june 
ieee 
mom narciso mart oliet jos meseguer 
duality closed linear categories 
technical report sri csl sri international menlo park california february 
mom narciso mart oliet jos meseguer 
petri nets linear logic 
mathematical structures computer science 
mur murthy 
evaluation semantics classical proofs 
proceedings sixth annual ieee symposium logic computer science amsterdam netherlands july 
nis shin ya 
programs continuations linear logic 
international conference theoretical aspects computer science pages sendai japan september 
plo gordon plotkin 
call name call value calculus 
theoretical computer science 
rc jonathan rees william clinger editors 
revised report algorithmic language scheme 
sigplan notices december 
rey john reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages 
ifip 
see robert seely 
linear logic autonomous categories cofree coalgebras 
john gray andre scedrov editors proceedings ams ims siam joint conference categories computer science logic volume contemporary mathematics pages boulder colorado 
american mathematical society 
shi olin shivers 
semantics scheme controlflow analysis 
proceedings symposium partial evaluation semantics program manipulation pages new haven connecticut june 
sigplan notices vol 

ste guy steele jr rabbit compiler scheme 
technical report ai tr intelligence laboratory massachusetts institute technology cambridge massachusetts may 
wad philip wadler 
linear types change world 
proceedings ifip tc working conference programming concepts methods pages sea israel april 
wan mitchell wand 
continuation multiprocessing 
conference record lisp conference pages stanford california august 
quick review categorical terminology please note appendix contains original material included help readers unfamiliar category theory follow technical contents 
definitions necessarily terse completely rigorous interested reader consult proper category theory full story 
category consists collection objects morphisms arrows pair morphisms composed ffi morphism composition associative ffi ffi ffi ffi object exists identity morphism id idb ffi ffi ida important class structures concrete categories objects sets structure morphisms maps 
examples include categories set sets total functions set sets partial functions grp groups group homomorphisms dom scott domains continuous functions similarly types functional language ml computable functions form category isomorphism morphism sided inverse gamma gamma ffi ida ffi gamma idb case say isomorphic written contexts isomorphic objects treated identical categorical properties 
subcategory category subset objects morphisms category example set subcategory set full subcategory contains morphisms original category source target objects subcategory category set finite sets total functions full subcategory set 
key observation category theory important concepts defined referring internal structure objects morphisms 
example categorical product objects object theta projections fst theta snd theta object morphisms exists unique pairing morphism hf gi theta satisfying fst ffi hf gi snd ffi hf gi uniqueness condition expressed equationally hfst ffi snd ffi hi theta terminal object property object exists unique morphism 
think terminal object nullary product particular theta object set categorical product objects cartesian product obvious projections pairing element set terminal 
happens dualize definitions reversing direction arrows 
coproduct consists object injections inl inr object morphisms exists unique casing morphism satisfying express uniqueness equation object initial object exists unique morphism initial object degenerate coproduct set disjoint tagged union sets coproduct empty set initial object 
category theory provides natural abstraction higher order functions exponential objects consists object application morphism ap theta morphism theta unique curried form cur property ap ffi ffi fst uniqueness equation cur set function space expected interpretations application currying 
category finite products called cartesian 
exponentials called cartesian closed commonly abbreviated ccc 
functor category category mapping objects objects morphisms morphisms respecting identity composition id id ffi ffi 
example functor list typ typ maps type type list function function maplist list list 
definition generalizes easily functors arguments particular functor variables called bifunctor 
binary products coproducts defined viewed bifunctors define actions morphisms theta hf ffi fst ffi 
exponential bifunctor contravariant reverses arrow direction argument 
natural transformation functors collection indexed objects morphisms jx morphism jb ffi ffi ja 
approximation think natural transformations programming language setting polymorphic functions 
example consider type indexed collection functions latten tree list 
zerop int bool function naturality ensures latten bool ffi maptree zerop maplist zerop ffi latten int tree int list bool 
unfortunately analogy extend directly higher order functions 
natural isomorphism natural transformation components isomorphisms 
functor right adjoint equivalently left adjoint exists natural transformation counit adjunction morphism exists unique morphism satisfying ffi example object functor theta right adjoint morphism ap theta function theta exists unique morphism cur satisfying thetaid categorical definitions products coproducts initial terminal objects examples adjoint situations 
