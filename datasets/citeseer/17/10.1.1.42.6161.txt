erlang style distributed haskell frank huch lehrstuhl fur informatik ii rwth aachen 
extension lazy functional programming language haskell distributed programming 
extension motivated untyped eager functional language erlang successfully development distributed systems 
communication processes asynchronous message passing comfortable access received messages pattern matching 
communication concurrent distributed processes programmed functions easy implement distributed systems 
implementation consists library extends io monad state mailbox process process identifier 
furthermore provides functions generating new processes communication concurrent distributed processes 
second part implementation preprocessor translates extended syntax distributed haskell pure haskell library 
distributed programming reasons applications distributed resources speed space needed application su cing computer 
inherent distribute character application distributed 
examples telephones cash dispenser bank server 
reliability fault tolerance increase reliability system arrange computers operate failure computers ect system behavior 
access special heterogeneous network special resources scanner printer accessed computer 
boom networks internet number distributed application increases 
particular applications inherent distribute character 
modern programming languages need support distributed programming 
want extend functional programming language haskell features elegant distributed programming 
comparison di erent approaches section shows advantages concept erlang introduced section 
extend haskell erlang style process concept called distributed haskell section implementation section 
conclude discuss section 
erlang erlang functional programming language developed ericsson 
reduction strategy call value erlang untyped 
erlang additional features concurrent distributed programming 
execution erlang program processes run concurrently 
processes communicate asynchronous message passing 
process identified unique process identifier pid messages send pid process mailbox incoming messages stored 
erlang provides comfortable access process elements mailbox pattern matching 
statement receive pat 
pat elements message queue stepwise matched patterns pat 
pat element mailbox matches pattern pat substitution removed mailbox 
receive statement reduces 
new processes created statement spawn 
vn 
reduction newly created process starts application 
vn exported function module arguments 
vn reduced values 
functional result spawn statement pid created process 
stored data types send processes 
process access pid function self 
example concurrent erlang program consider database module database 
export start 
start database 
database receive allocate key case lookup key fail free receive value database key succ allocated database lookup key lookup key database 
lookup fail lookup succ lookup xs lookup xs 
erlang untyped data structures built lists notated prolog tuples brackets 
furthermore atoms starting lowercase letter constructors arity zero 
variables erlang start prolog uppercase letter 
module database processes started calling spawning function start 
initial interface database process messages consisting triple flags allocate lookup key pid process request comes 
allocation message received key looked database 
key allocated message allocated returned requesting process database proceeds initial state 
answered requested key free database waits corresponding value stored 
main point implementation database guarantee mutual exclusion allocating new key 
entries get lost run problems clients try allocate key 
guarantee mutual exclusion di erent mechanisms erlang 
firstly proceed receive statement considers messages flag value 
react messages allocate 
messages stored mailbox database process 
ignored considered 
secondly check pid send message pid allocation message 
dynamic character pattern matching write variables erlang 
pattern matching pattern value variable newly introduced 
bound value pid 
matching succeeds triple received consists atom value value pid received 
values pids third component ignored 
function lookup defined pattern matching 
erlang nonlinear patterns allowed 
expresses comparison key looked keys entries pattern 
distributed programming erlang uses process concept concurrent programming 
distributed erlang system multiple nodes exist multiple computers internet 
erlang node processes executed concurrently 
distinguish nodes located computer node gets name started 
communication processes executed di erent nodes stays 
pid process contains node executed 
di erence distributed programming creation processes nodes communication independently started erlang processes 
erlang extended spawn statement spawn 
vn behaviour spawn new process started node name node followed symbol hostname computer node located 
extension easy distribute processes developed concurrent environment optimize speed application guarantee fault tolerance failure node 
creating processes di erent nodes expressive mechanism distributed programming applications inherent distributed hierarchical distribution possible 
examples telephony talk name servers cash 
processes started independently communication processes initiated runtime 
erlang realized global registration processes node 
statement register name pid globally registered name node executed 
communication independently started processes di erent nodes extended send operation name node message send process registered node name 
usually kind communication chosen contact 
pids exchanged messages send pids concurrent programming 
comparison erlang approaches approaches extending functional languages concurrent distributed programming 
compare main ones extension haskell erlang concurrent haskell provides methods start processes inside application synchronize mutable variables io monad 
top provides semaphores asynchronous channels message passing 
extending concept distributing haskell lead implementation problems 
concurrent haskell processes may synchronize mutable variable 
distributing processes synchronization leads problems clear mutable variable located 
furthermore clear processes waiting mutable variable set located reactivated 
better restrict readers synchronizing object mutable variable reader 
erlang synchronizing objects mailboxes processes read mailbox 
practical mutable variables low concept programmers choose features built top semaphores asynchronous message channels 
reactive systems necessary process react di erent messages di erent partners 
concurrent haskell allows process wait message channel 
message process may react send channel 
receiving message state process changes messages may react change 
example database process 
client allocated key database may react new requests anymore guarantee mutual exclusion 
concurrent haskell implemented channel requests clients block database 
processes know channels programming gets complex erlang uninteresting messages ignored bu ered mailbox 
group communication partners channels created concurrent haskell distribution gets hard 
go cgk extends haskell concurrent constraint programming special port concept internal external communication 
ports integrated io monad 
nondeterminism input output encapsulated io monad anymore 
furthermore user learn concurrent constraint programming programming paradigm 
ports go compared channels concurrent haskell 
port public network process send messages port 
read port 
may cause security problems distributed application implementation problem suspended processes waiting message port awaken 
yield problems implementing fault tolerant systems process computer port physically located crashes 
erlang problem mailboxes located read 
executable implementation go note available 
reacting multiple ports go provides fair merge ports 
process wait di erent messages di erent ports branch dependence incoming message 
ports type lead typing problems implementing distributed systems see section 
eden extension haskell concurrent parallel programming 
process concept added process fixed number input output channels communicate processes 
communication integrated io monad fair merge part eden processes behave nondeterministically 
processes suspend di erent input channels 
messages channels bu ered automatically 
react input channel possible merge channels lead problems merge go erlang untyped 
merge automatically implemented messages stored mailbox 
messages process reacts defined pattern matching 
dynamic character suspending channels eden 
pattern matching restricted finite set values 
erlang process example suspend number greater arbitrary value received 
values bu ered mailbox 
eden process suspend fixed number channels independently values received 
eden developed parallel programming programs hierarchical structure distributed programming gets di cult implement complex protocols eden erlang 
possible connect independently started processes eden 
needed distributed applications 
erlang language implementing distributed systems 
practice shows application implemented erlang 
main disadvantage erlang untyped 
approaches typed erlang mw aa 
successfully untyped erlang standard 
approaches haskell type system 
especially development sequential parts application yields safety program development 
extending haskell process concept erlang get advantages 
distributed systems developed easy erlang type system haskell program development safer erlang 
distributed haskell want extend haskell process concept erlang style 
process mailbox identified pid messages send process 
comfortable access messages mailbox provided matching 
distributed communication independent processes di erent nodes global registration message passing provided 
hand want typed language safety program development 
typing error erlang message usually yield runtime error deadlock 
prevented distributed haskell 
process concept main problem extending haskell erlang communication model communication erlang untyped typed haskell 
approach try define algebraic datatype messages processes exchange 
di erent constructors compared atoms flags erlang 
consider di erent client processes communicating database 
algebraic data types communication clients data type send messages database receive messages 
parts behaviour need di erent messages communication 
client know messages client uses 
database know messages 
need sub typing 
context means messages processes communicate part messages 
communication processes messages allowed 
definition processes introduce notation similar definition modules haskell process functions start process functions process started type io 
data type definition messages process communicate defined messages 

cm tm 
analogously definition algebraic data type 
constructor functions type 
tin msg msg type message process 
new processes created function spawn io io pid pid predefined type process identifiers 
messages distributed haskell send process identifiers erlang 
user functions send pid io value returned calculations 
receiving values pattern matching semantics erlang receive 
pn gn en syntax typing conventions case statement 
receive statement blocks process message received matches patterns 
combination pattern message chosen message removed mailbox corresponding right hand side executed 
practical reasons especially considering distribution communication distributed haskell strict 
erlang exists function self yields pid process 
possible haskell result depends process called 
provide function self io pid pid read 
define distributed haskell process behaves database defined erlang 
process database start messages alloc string pid value string pid lookup string pid allocated free string start io start database database string string io database receive alloc key pid case lookup key pid free receive value pid pid pid putstrln new entry key database key just pid allocated database lookup key pid putstrln lookup key pid lookup key database distributed communication distributed communication want primitives concurrent programming 
node process located encoded pid function way 
processes connect executed di erent nodes 
erlang processes globally registered node messages send registered process 
provide mechanism 
function register string io registers process node 
name string 
old registrations string overwritten 
values send registered processes functions hostname string io hostname string io defined analogously send hostname registered name pid 
example client process connect remote database way messages 
connect pid client server de database connect receive connect database communicate database database register name database started needs additional interface main receive statement connection remote process connect pid pid connect database communication left unchanged 
erlang possible start processes nodes 
possible distributed haskell problems implementation 
needed application possible start process creates processes fixed set functions corresponding messages send 
implementation module distributed want model erlang programming language 
model concurrent processes 
easily done top concurrent haskell 
process running distributed haskell process concurrent haskell 
distributed haskell processes additionally mailbox constant self access pid process 
model defined variation io monad extended state information stored 
newtype dist dist io instance monad dist return dist return dist return dist dist dist dist dist dist main function haskell program type io 
need function start monad io monad functions reading writing state function casting functions io monad monad 
dist io self dist return getvalue dist getvalue dist return dist dist return proc io dist proc dist return process distributed haskell run instance monad mailbox pid process stored state 
type messages receive fixed process 
model message queue list messages state monad 
communication processes node modeled easily asynchronous communication channels concurrent haskell 
state process contains channel incoming messages 
data pid mailbox inch type dio msg dist msg main ideas distributed haskell messages send pids independently node process executed 
encode ip address pids 
want allow pids parts messages 
simulate sub typing communicate strings message instance classes read show 
channels converted strings 
representation pids natural numbers 
process spawned new number generated 
pids defined follows newtype pid pid int deriving show read eq instance class eq needed useful check pids identical 
sending messages process spawned process gets channel state created 
conjunction pids channels global information stored state monad dio 
create server process starting distributed haskell database conjunctions 
server accessed message channels known state process 
message send pid node function send lookups corresponding channel database string representation value send channel 
send remote node string representation send socket corresponding ip address 
receiving value bit complicated 
want pattern matching access messages mailbox 
haskell pattern matching function definitions case statements 
model pattern matching receiving values receive takes function estimates values mailbox 
function expressed pattern matching lambda abstraction case statement 
express value mailbox matches type 
values mailbox estimated function 
yields just corresponding message removed mailbox result receive 
works terminate laziness 
result value estimated 
values queue receive waits new messages channel suspended concurrent haskell message send 
pattern matching receive statement translated function defined section 
communication distributed processes know added mechanism registered processes 
implemented accordingly conjunction pids underlying channels 
database registered processes corresponding pids operates concurrently 
distributed programming message send socket remote computer 
receive messages listen socket 
implemented concurrent processes forwards incoming messages target process 
translation haskell section describe distributed haskell program translated pure haskell program uses functions module distributed described 
firstly think model messages process haskell 
process communicates subset messages di erent processes messages 
way implementing collect messages put datatype 
process data type 
possible detect communication errors anymore process receive message testing messages accepted di cult 
want restrict messages process receives defined messages yield runtime error message received 
way model module system haskell 
data types defined module exported known inside module 
model process module allowed messages algebraic data type module 
data type type messages mailbox 
di erent processes di erent message types 
runtime processes communicate type messages changed 
implement runtime type system converting messages strings method show 
side message converted message type receiving process function read 
receiving process accept message get runtime error showing type error 
approach restricts communication order 
practical application su cient considering distributed communication implementation sending functions di cult 
translation head process definition database module main main import distributed data msg alloc string pid value string pid deriving show read extend type dio distributed haskell program type msg 
parameter needed mailbox part state process typed 
receive statement implemented higher order function takes estimation function elements mailbox parameter 
receive statement translated receive function follows receive receive case just 
pn gn en pn gn just en functions type io casted monad dio msg 
add function proc 
complete translation haskell module main main import distributed data msg alloc string pid value string pid lookup string pid allocated free string connect pid deriving show read main io main start register database database database string string dio msg database receive case alloc key pid just case lookup key pid free receive case value pid pid pid just proc putstrln new entry key database key just pid allocated database lookup key pid just proc putstrln lookup key pid lookup key database connect pid just pid connect database extended haskell concurrent distributed programming 
process concept motivated erlang 
easy distributed systems developed distribute haskell demonstrated example database 
implementation distributed haskell separated library functions distributed programming preprocessor translates distributed haskell programs pure haskell programs library 
progress preprocessor implemented 
want add mechanisms robust programming linking processes erlang 
messages distributed haskell statically typed 
runtime type system 
better having type system erlang want investigate checked compile time type system subtypes 
aa thomas arts joe armstrong 
practical type system erlang 
technical report erlang user conference september 
armstrong williams virding 
concurrent programming erlang 
prentice hall englewood cli nj 
ortega 
eden paradise functional concurrent programming 
lecture notes computer science 
cgk manuel chakravarty guo martin kohler 
distributed haskell go internet 
sato toyama editors proceedings third fuji international symposium functional logic programming pages 
world scientific publishers 
simon peyton jones haskell report 
technical report www haskell org 
simon peyton jones andrew gordon finne 
concurrent haskell 
conference record popl rd acm sigplan sigact symposium principles programming languages pages st petersburg beach florida january 
mw simon marlow philip wadler 
practical subtyping system erlang 
proceedings acm sigplan international conference functional programming pages amsterdam netherlands june 
