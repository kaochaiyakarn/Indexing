appears advances cryptology crypto proceedings lecture notes computer science vol 
springer verlag desmedt ed 
incremental cryptography case hashing signing bellare goldreich goldwasser october initiate investigation new kind efficiency cryptographic transformations 
idea having applied transformation document time update result modification proportional amount modification done obtains faster cryptographic primitives environments closely related documents undergoing cryptographic transformations 
provide basic definitions enabling treatment new notion 
exemplify approach suggesting incremental schemes hashing signing efficient new measure 
department computer science engineering mail code university california san diego gilman drive la jolla ca 
mail mihir cs ucsd edu 
department applied mathematics computer science weizmann institute science rehovot israel 
mail oded wisdom weizmann ac il 
research partially supported israel binational science foundation bsf jerusalem israel 
department applied mathematics computer science weizmann institute science rehovot israel mit laboratory computer science technology square cambridge ma usa 
mail shafi wisdom weizmann ac il 
research partially supported nsf ccr darpa 
initiate investigation incremental algorithms cryptographic functions 
idea digital signatures example signature easy update modification underlying message 
suppose signed message obtain signature oe 
change example replace block insert new block delete old 
modified message 
want update signature oe signature oe time update proportional amount change get simply signing anew 
wide range applications incrementality suitable environment documents undergoing cryptographic transformations altered versions documents undergone cryptographic transformations 
example suppose sending message different users text essentially header information want sign copy 
second example video traffic 
take advantage known fact successive video frames usually differ slightly 
third example authentication tags virus protection 
imagine user pc stores files remote possibly insecure host attacked virus 
user authenticates files detect modification virus 
user modifies files re authenticate incremental scheme useful 
type authentication virus protection vary 
choice may private key authentication scheme finger print 
envisage applications user signature checked full fledged digital signature desirable 
general clear incrementality nice property cryptographic primitive 
finger printing message authentication digital signatures hashing encryption 
problems considered quickly apparent incrementality presents large area research 
goal preliminary draw attention area lay basic definitions provide examples 
simplicity restrict scope ways 
focus just update operation underlying message replacement block 
second limit primitives consider digital signatures collision free hashing primitive approach 
view message sequence bit blocks 
mi denote replaced bit string problem collision free hashing design scheme exists efficient update algorithm algorithm hash function hash replacement request outputs hash mi modified message 
similarly signing update algorithm signing key sk message signature oe replacement request produce signature oe mi 
ideally case update time depend block size underlying security parameter length message 
scheme said ideally incremental possesses ideal update algorithm 
progress address operations messages insertion deletion blocks expand scope consider primitives finger printing message authentication 
see section information 
incremental collision free hashing pin point ideal incremental scheme collision free hashing hardness discrete logarithm groups prime order 
hashing block message block bits long bit string takes exponentiations updating takes exponentiations exponentiations modulo bit prime 
special case hash function number blocks constant analyzed chaum heijst pfitzmann 
brands provided proof security poly 
observation hash function possesses ideal update algorithm identifies time crucial know collision free hashing scheme ideally incremental 
additional contribution considering exact security reduction security proved presenting new reduction essentially optimal 
motivation impact result explained section practical enables user get level security smaller value security parameter leading greater efficiency 
note hash functions discuss ones public description 
description function provided adversary trying find collisions 
hash functions applications finger printing description function available collision finder 
incremental digital signatures ideal incremental hash function available ideal incremental signature scheme easily derived slight variation standard hash sign construction 
hash message incremental hash function get sign standard scheme get oe oe signature 
variation hash value included signature 
update update hash fast assumption sign new hash value scratch fast signing bit string 
evaluating security scheme scheme careful presence update algorithm entails new security considerations 
keeping philosophy adaptive chosen message attack allow adversary obtain examples signatures update algorithm 
general differently distributed signatures created signing algorithm extra power help adversary 
show scheme achieves call basic security 
addition able get examples signatures signing algorithm adversary point past message signature pair obtain result arbitrary update pair 
care taken formalizing update algorithm receives entire nb bit message input standard turing machine model read relevant part poly time 
assume ram type computation model formal definition allow update time depend log practical issues incrementality fundamentally practical concern measure efficiency 
clearly ideal incremental scheme win standard message sizes get larger 
practical concern cross point incrementality helps messages longer am get am inclined incremental scheme 
cross point schemes low interesting cf 
section 
prefer schemes low memory requirements 
signatures size proportional message permitted theoretical definitions really acceptable 
want schemes poly size signatures independent number message blocks 
consideration eliminates trivial incremental schemes tree hash signature scheme 
see section 
achieved constructions 
analyze state security results exactly opposed asymptotically strive best possible reductions 
interesting open question notion basic security assumption 
signer setting integrity messages signatures updating assured 
signer applies update algorithm update signature oe confident data tampered created 
reflected fact adversary attack update algorithm consists pointing past authentic message signature pair 
right assumption majority applications digital signatures 
example case am sending message parties different headers sign copy update obtain rest 
keep original copy signature machine update know original authentic 
situations want stronger form security 
example suppose remote editing file residing insecure machine time machine hit virus tamper data 
efficiency incrementally signing file time change 
run update algorithm sure data authentic 
impractical verify authenticity updating verification takes time depending point incrementality update signature quick 
formalize new notion security substitution attacks appropriate setting 
show substitution attacks break hash sign scheme hash function discrete log 
interesting ways illustrates strength new attacks shows standard construction hash sign insecure new setting 
leave open problem find ideal incremental signature schemes secure substitution attack 
exact security new 
majority theoretical works asymptotic statements exact tradeoffs derived proofs 
tradeoffs quite bad 
previous works explicitly address exact security concern tradeoff quality 

preliminaries follow notation algorithms probabilistic experiments originates refer reader detailed exposition 
briefly recall delta delta delta experiment running probabilistic algorithm letting output delta delta delta set strings output delta delta delta positive probability 
ppt denotes probabilistic polynomial time 
results require careful model computation 
traditional turing machine model case realistic ram model 
model algorithm delta delta delta random access inputs delta delta delta 
message viewed sequence blocks 
block size denoted domain blocks range 
denote number blocks space block messages 
understood th block replacement request form mi denote message consisting block replaced ll say updated incremented 
incremental collision free hashing families hash functions need extend usual definitions hash families allow independent consideration security parameter block size number blocks 
parameters denoted respectively 
string description particular hash function 
definition family hash functions specified pair algorithms 
ppt generator takes input outputs string polynomial time hash evaluation algorithm takes message outputs bit string called hash family clear context identify delta regard map particular write 
incrementality definition says update algorithm inch turn hash hash mi 
definition specify family hash functions 
say inch update algorithm running time delta delta delta ng case inch halts steps output equal mi 
inch augmentation triple inch 
notice definition requirement running time inch 
particular update algorithm just run mi compute output 
don wish exclude legitimate update algorithm 
course update algorithm interesting runs faster 
term incremental hash family loosely refer hash family possessing non trivial update algorithm 
say ideal update algorithm running time depend algorithm random access small number relevant memory blocks need ram model opposed turing machine model quick computation writing output back memory 
formal definition follows allows dependence time log blocks accessed ram quantity smaller say realistic situation view running time independent definition update algorithm inch ideal running time polynomial log ll say ideal incremental scheme possesses ideal update algorithm 
collision freeness incrementality necessitate additions usual notions attacks hash family 
contrast situation signatures presence incrementality introduce new security issues 
just usual notion collision freeness 
probabilistic algorithm discuss security experiment 
experiment describing attack run get 
run input ask execution outputs pair distinct messages say successful 
say succeeds ffl breaking experiment runs time successful probability ffl 
don say means scheme secure need stronger statements exact security cf 
theorem imply usual asymptotic notion 
fact hash function public captured fact adversary trying find collisions 
incremental hash family discrete log groups prime order fix ppt algorithm input outputs bit prime identifying group prime order set groups assume discrete log problem hard prime chosen 
groups cryptography croft harris schnorr chaum van antwerpen refer reader works choose groups 
particular appropriate assumptions distribution primes necessary done subgroup size may assume efficient group operations 
particular exponentiation takes time 
key fact prime order non trivial element generator 
index gp gamma denote discrete logarithm non trivial base group discrete log finder probabilistic algorithm experiment describing attack gamma gamma 
run input say successful output index gp 
way succeeds ffl breaking experiment halts steps successful probability ffl 
denote deltai encoding message blocks non zero integers 
specific set hmi plus number binary expansion prime length compute hmi non trivial hmi hash family update algorithm block size set equal security parameter 
formally algorithms output junk theorem addresses case 
hash family specified follows 
input generator runs get bit prime selects random gammaf outputs description hash function value hash function message def hm operations course group interest family stem efficiency compared example discrete log hash family 
brands mentions family context general exposition representation problem 
seemingly rare incremental property observe possesses time pinpoint crucial family sense answers question asked interesting uses representation problem constant 
define algorithm inch inch delta delta hmi easy see inch mi 
note inch random access nk bit description get poly log time similarly inputs 
output polynomial time computation bit inputs algorithm runs poly time 
ideal update algorithm security proof security takes form 
collision finder construct discrete log finder 
suppose succeeds ffl breaking 
question consider values ffl constructed algorithm succeeds ffl breaking 
previous works discussed asymptotic security sets fixed polynomial regards ffl ffl functions assumes ffl polynomial non negligible respectively shows ffl polynomial non negligible respectively 
practice important know exactly resources achievements compare may know size choose prime adversaries tolerate specific security parameter 
important strive tightest possible reduction means security obtained smaller value security parameter meaning greater efficiency 
want effort success close possible 
light look existing reductions see achieve 
proof applies case block messages fact grow exponentially reduction suitable purposes 
brands proposes reduction removes restriction achieves nk ffl ffl running time essentially optimal think larger additive terms nk correspond overhead coming simple unavoidable arithmetic operations 
loss success probability serious 
note particularly case may large 
successful high probability may conclude successful low probability 
improve reduction essentially optimal 
preserve current quality running time achieve success probability small constant factor big oh notation time theorem hides constant depends underlying machine model taken small reasonable setting 
denotes oracle machine depends proof family statement theorem say size proof shows small important practice 
inch augmentation theorem oracle machine true 
suppose collision finder succeeds ffl breaking 
discrete log finder def succeeds ffl breaking nk ffl ffl 
proof appendix efficiency hashing block message takes exponentiations equivalently multiplication message bit modulo bit prime 
quite number theory scheme 
compare standard hash functions md sha 
fix 
hashing scratch comparison md bits far better exponentiations 
assume setting frequent updates 
md choice hash scratch scheme update algorithm update hash exponentiations 
compare efficiency ask large time exponentiations bit numbers time evaluate md bit string 
computation yields reasonable value 
note heuristics vector chain addition compute hm faster doing modular exponentiations 
practical version small description size size description hash function nk depends message size assume large 
practice 
suggest way reduce size 
restriction standard hash function md inputs length set result evaluating description hash function just prime quickly compute 
loss efficiency negligible time arithmetic operations dwarfs md computation time 
construction ultimately viewed heuristic security discussed assuming random function 
extending proof security setting difficult conclude statement informal scheme just described satisfies theorem random oracle model 
discussed approach prove security random oracle model instantiate random oracle standard hash function yield provable security provides better guarantee purely heuristic design protocols designed manner secure practice 
refer reader suggestions functions instantiate incremental signing signature schemes definition signature scheme triple kgen sig vf algorithms 
polynomial delta delta delta called signature size ppt key generator kgen takes input outputs pair sk vk strings called respectively signing corresponding verifying keys 
ppt signing algorithm sig takes input sk outputs bit string called signature polynomial time verifying algorithm vf outputs bit satisfies vf vk oe oe sig sk 
assumption vf deterministic simplicity general consider probabilistic verifiers 
ll say signature scheme short signatures signature size depends case abuse notation write signature size 
incrementality update algorithm turn signature signature mi 
definition kgen sig vf signature scheme 
say update algorithm running time delta delta delta sk vk kgen ng vf vk oe case sk oe halts steps output oe satisfying vf vk mi oe 
augmentation kgen sig vf kgen sig vf 
note output sk oe required distributed way sig sk mi just return vf accept 
term incremental signature scheme loosely refer signature scheme possessing non trivial update algorithm 
ideality update algorithm defined analogy definition ideal incremental signature scheme possesses ideal update algorithm 
schemes prefer short signatures possible discuss update algorithms ideal ones signatures long 
case able output entire signature imagines modifies oe chosen places result view oe analogously define notion incremental verification 
leave reader 
basic security recall evaluating security signature schemes levels motivated differing security demands applications 
basic level suitable settings signer updating signature oe message guaranteed quantities authentic 
majority applications digital signatures assumption valid 
definition extends notion existential forgery adaptive chosen message attack allow adversary access sk delta delta delta 
necessary signatures produced different distribution produced sig adversary gain advantage seeing examples new distribution 
restriction updates authentic data captured fact incremental signing requests simply point message signature past 
experiment describing attack run kgen get keys sk vk 
initialize set ff 
run adversary input vk 
oracle queries answered follows 
suppose simple signing request form message oe sig sk return oe ff ff 
ff oe ff oe 
suppose incremental signing request form fi fi ffg 
oe sk fi oe fi return oe ff ff 
ff fi hj mi oe ff oe 
ask execution output pair oe legal legal ff say successful vf vk oe 
say succeeds sig ffl breaking basic attack experiment runs steps sig simple signing requests incremental signing requests succeeds probability ffl 
incremental signature schemes achieving basic security follows kgen sig vf denotes standard 
necessarily incremental signature scheme definition assumed secure existential forgery adaptive chosen message attack standard sense 
exact security discussed saying adversary succeeds ffl breaking adaptive chosen message attack attack runs time signing queries succeeds existential forgery probability ffl 
consider standard transformations 
incremental hash sign incremental hash function slight variation standard hash sign method yields incremental signature scheme 
security reconsidered light fact basic attacks allow attacks update algorithm 
luckily cause damage 
completeness provide details 
inch family hash functions update algorithm 
specify kgen sig vf follows 
input algorithm kgen runs sk vk kgen 
outputs signing key sk sk verifying key vk vk 
note keys original signature scheme chosen sign messages consisting bit block 
signature keys sig sk sig sk 
hash message signature original scheme 
including hash signature slight variation 
may redundant compute important incrementality 
note sig applied bit string 
verification key vk vk string oe oe algorithm vf outputs iff vf vk oe 
sk oe sk sk oe oe update algorithm updates hash inch 
computes scratch signature oe sig sk bit string original scheme 
outputs oe 
note signatures scheme short poly bits 
theorem says broken broken specifies exact security corresponding statement 
function represents time depending algorithms defining schemes 
viewed smaller exact value derived proof 
theorem oracle machines function true 
suppose succeeds sig ffl breaking basic attack sig true def succeeds delta ffl breaking adaptive chosen message attack def succeeds delta ffl breaking 
proof theorem appendix hardness discrete log implies existence standard 
non incremental signature schemes play role 
combining results section established existence incremental signature scheme short signatures hardness discrete log groups prime order 
construction practical result 
practical version el gamal scheme rsa role practical version hash function cf 
section role public file large hash function poly size 
isn necessary user publish hash function 
trusted center publish single hash function users 
user public file just original non incremental scheme poly 
tree hash scheme uses memory tree hash scheme probably thing comes mind asked find incremental signature scheme 
assuming simplicity recall scheme standard 
necessarily incremental collision free hash function message hashed binary tree construction 
stage adjacent blocks hashed yield single block halving number blocks stage 
lg stages final hash value 
signed standard scheme 
suppose store internal nodes tree formally include signature 
hash incremented just recomputing tree nodes indicated path updated block root tree 
security needs reconsidered allow adversary attack update algorithm cf 
section thought shows scheme satisfies basic security requirement 
signature long incrementality cost storing twice bits message 
scheme may incremental formal definition memory inefficient interesting applications 
want schemes short signatures prefer method section 
security substitution attacks provide stronger notion security incremental signature schemes suitable applications remote editing file insecure machine 
kgen sig vf augmented signature scheme 
adversary incremental signing requests new form supplies oe fi 
describe experiment provide explanation discussion 
experiment describing attack run kgen get keys sk vk 
initialize set ff 
run adversary input vk 
oracle queries answered follows 
suppose simple signing request form message oe sig sk return oe ff ff ff 
suppose incremental signing request form oe fi fi ffg 
oe sk oe return oe ff ff ff fi hj mi 
ask execution output pair oe legal legal ff say successful vf vk oe 
say succeeds sig ffl breaking substitution attack experiment runs steps sig simple signing requests incremental signing requests succeeds probability ffl 
recall assumption basic security signer applies update algorithm authentic data 
assuming situation assumption realistic example data insecure medium signer accesses update message signature sure tampered 
worst case assume adversarially tampered 
model adversary asked point fi message past requesting update supply update request 
novel element additionally supply oe taken mean substituted fi oe fi tampered data 
index fi reflected way query answered answer obtained applying sk delta delta delta message accompanying oe provides 
fi update signer view happening 
idea signer accepted update fi point view willingly signed fi hj mi 
words view set legal experiment messages signer believes signed 
notion existential forgery says successful outputs message previously queried sig sk delta passing verification 
recall intuition legitimately signed messages excluded 
discussion declare successful signature message legal 
attack help adversary 
reason designed inputs sk oe vf vk oe don know happens algorithm run strange inputs 
ask doesn simply check vf vk oe 
reason general defeat efficiency trying gain 
example ideal poly log time verification takes poly time 
important note view adversary having legitimately obtained signature mi signer believes signed fi hj mi 
successful substitution attack illustrate strength substitution attacks showing scheme section broken setting hash family section 
particular means scheme question applications remote editing file machine unexpectedly hit virus 
attack interesting illustrating substitution attacks 
interesting illustrating standard construction hash sign secure usual sense fails secure new setting 
simplicity assume messages consist just block attack easily generalizes arbitrary hash function described reduces simply hmi operations sk signing key standard scheme signature oe oe oe sig sk 
adversary begins simple signing request reply obtains form oe oe ha think signer having signed stored oe insecure medium 
set incremental signing request oe 
insecure medium changes asks signer substitute block message 
scheme signer applies hash update algorithm update hash ha delta gamma delta gammab re signs oe sig sk 
reply oe oe 
important note point signer really believes signed terms experiment section adversary simply output gamma oe forgery 
verification algorithm accept oe signature gamma point set messages signatures legally obtained legal fa cg 
appropriate choices suffices fa cg case gamma legal 
adversary successful scheme broken probability 
notice attack find collisions forge signatures sk don know attack applies instance hash sign paradigm sufficient show hash sign general secure substitution attack 
leave open problem design incremental signature scheme secure substitution attack restrictions signature short update algorithm ideal 
progress question described 
progress expand scope research directions 
consider complex update operations messages insertion new block message deletion existing block 
clearly important applications 
second consider primitives finger printing message authentication 
appropriately extend notion attack contexts 
main result finger printing scheme permits insertion deletion secure substitution attack 
acknowledgments hugo krawczyk informative discussions materiel 
done author ibm watson research center new york 
bellare kilian rogaway 
security cipher block chaining 
advances cryptology crypto proceedings lecture notes computer science vol 
springerverlag desmedt ed 
bellare rogaway 
random oracles practical paradigm designing efficient protocols 
proceedings annual conference computer communications security acm 
bellare goldreich goldwasser 
progress 
bos 
addition chain heuristics 
advances cryptology crypto proceedings lecture notes computer science vol 
springer verlag brassard ed 
brands 
efficient line electronic cash system representation problem 
cwi technical report cs 
chaum van antwerpen 
undeniable signatures 
advances cryptology crypto proceedings lecture notes computer science vol 
springer verlag brassard ed 
chaum heijst pfitzmann 
cryptographically strong undeniable signatures unconditionally secure signer 
advances cryptology crypto proceedings lecture notes computer science vol 
springer verlag feigenbaum ed 
croft harris 
public key cryptography re usable shared secrets 
cryptography coding clarendon press 
damg ard 
collision free hash functions public key signature schemes 
advances cryptology eurocrypt proceedings lecture notes computer science vol 
springer verlag chaum ed 
el gamal 
public key cryptosystem signature scheme discrete logarithms 
ieee trans 
info 
theory vol 

goldreich micali 
line line digital signatures 
manuscript 
preliminary version crypto 
goldreich levin 
hard predicate way functions 
proceedings annual symposium theory computing acm 
goldwasser micali rivest 
digital signature scheme secure adaptive chosen message attacks 
siam journal computing april 
impagliazzo levin luby 
pseudo random generation way functions 
proceedings annual symposium theory computing acm 
naor yung 
universal way hash functions cryptographic applications 
proceedings annual symposium theory computing acm 
rivest 
md message digest algorithm 
ietf network working group rfc april 
schnorr 
efficient identification signatures smart cards 
advances cryptology crypto proceedings lecture notes computer science vol 
springer verlag brassard ed 
proof theorem describe algorithm argue running time claimed success probability claimed 
inputs algorithm selects random gamma random 
sets sets 
invokes obtains distinct messages convenient set hm algorithm sets gamma arithmetic modulo quantity failed halts output 
assume non zero 
compute inverse mod 
ba mod inverse exists prime euclid algorithm 
outputs ff delta gamma mod halts 
invokes 
addition performs arithmetic modulo dominant part exponentiations 
accounts claimed running time 
turn justifying claimed success probability 
note distribution uniform independent distribution quantities generate 
messages equation collision 
probability ffl 
assuming collision definition re arranging terms get gammat gammat note left hand side claim probability 
raise sides equation power get ab bu gammat ff showing ff index gp 
remains justify claim 
argue informally 
technical fact 
technical fact 
numbers property 
independent random variables defined pr pr pr 
note distribution independent may think experiment game 
choose random obtain collision gamma choose random compute viewed way see technical fact stated 
proof theorem refer section description experiment describes attack 
leave reader check algorithms meet claim 
algorithm input verification key vk original scheme oracle access sig sk delta algorithm runs get sets vk vk runs input 
set ff 
oracle queries dealt follows suppose simple signing request lets ff ff ff computes ff invokes oracle obtain oe ff sig sk ff 
returns oe ff ff oe ff suppose incremental signing request fi 
lets ff ff ff fi hj mi 
computes ff inch fi fi invokes oracle obtain oe ff sig sk ff 
returns oe ff ff oe ff suppose eventually halts output oe oe oe 
outputs oe forgery halts 
algorithm input chosen algorithm lets sk vk kgen 
sets vk vk runs input 
oracle queries dealt follows suppose simple signing request lets ff ff ff computes ff oe ff sig sk ff 
returns oe ff ff oe ff suppose incremental signing request fi 
lets ff ff ff fi hj mi 
computes ff inch fi fi oe ff sig sk ff 
returns oe ff ff oe ff suppose eventually halts output oe oe oe 
fh ff halts arbitrary output chooses outputs halts 
