general purpose discrete event simulation pedro argenio joost pieter katoen ed brinksma dept computer science 
university twente 
box 
ae enschede 
netherlands 
brinksma cs utwente nl lehrstuhl fur informatik vii 
university erlangen 

erlangen 
germany 
katoen informatik uni erlangen de 
discuss stochastic process algebra discrete event simulation report prototype simulation algorithm implemented 
process algebraic techniques ers number advantages respect existing simulation techniques 
compositional nature allows fly construction simulation model current state need saved 
allows model simulate general purpose basis simulation algorithm applies founded process specified specifications amenable traditional process algebraic analysis functional behaviour absence deadlocks 
illustrate result simulation example nontrivial system 
simulation important technique analysing behaviour performance systems 
system interest available analysis case design stage simulation model provides easy way predict performance compare alternatives 
computer systems real time behaviour usually described discrete event models due fact relevant part state change continuously discrete way 
discrete event simulation carried general purpose languages simulation languages simulation packages 
relatively little ort characterise formal behaviour models described techniques 
exceptions 
formal aspect quite important helps obtain correct specification system studied 
weakness drawn attention researchers extending process algebras stochastic real time features 
approaches mainly followed focussed purely supported nwo sion project 
analytical study restricting called markovian process algebras 
addresses general case accepting simulation part analysis process 
introduced simple extension automata stochastic information borrowing ideas timed automata generalised processes :10.1.1.43.9418
addition introduced stochastic process algebra discrete event simulation named denoted discuss formal foundations simulation algorithm stochastic automata 
semantics terms stochastic automata immediate consequence simulate system described fact real advantage implementing algorithm directly simulation algorithm generate stochastic automaton thefly term parts stochastic automaton going generated moment needed advance 
systems described specified compositionally recursive specifications simulation processes principle possible 
simulation modelling language additional advantages 
hand allows principle description system simulation modelling task general purpose oriented 
generalpurpose mean contrast happens simulation packages restrict particular methodology queuing networks 
hand stochastic process algebra provides formal verification framework allows formal analysis functional correctness model studied 
consolidate results give non trivial example application simulation algorithm 
discuss modeling multiprocessor mainframe failures analyse performance implementation simulation algorithm 
organised follows 
sections recall stochastic automaton model semantics process algebra section introduces simulation algorithm foundations description current implementation 
multiprocessor mainframe example studied section 
section discuss related conclude 

alternative semantics stochastic automata see section resulted question posed 
victor nicola answering questions referees constructive remarks 
stochastic automaton model section discuss semantic basis simulation algorithm 
recall definition stochastic automata give semantics terms probabilistic transition systems 
starting order fix notation mention denotes set non negative integers ir set real numbers ir set non negative reals 
write ir nth cartesian product ir 
stochastic automata 
stochastic automaton model introduced theoretical concerns discussed 
extension traditional automaton model allows describe processes stochastic information 
basic idea borrowed generalised semi markov processes timed automata :10.1.1.43.9418
definition 
stochastic automaton tuple set locations initial location 
countable set clocks set actions fin set edges denote edge call trigger set fin clock setting function 
ir assigns clock distribution function write 
notice clock random variable distribution soon location entered clock initialised probability distribution function initialised clocks start counting rate 
clock expires reached value 
occurrence action controlled expiration clocks 
system location action happen soon clocks set expired 
location semantics 
semantics stochastic automaton terms probabilistic transition system pts short 
give definition pts define semantics stochastic automata 
definition 
sample space algebra probabilistic transition system tuple 
disjoint sets states initial state 
states called probabilistic states non deterministic 

set labels 
probabilistic transition relation probability measure 
labelled non deterministic transition relation 
denote 
notice defined total function 
probabilistic state exactly outgoing transition 
interest deal time information ptss set labels ir set action names ir set non negative real numbers intended denote relative time action takes place 
usually denote means action occurs right system idle time units 
define semantics stochastic automata 
order study performance system regarded closed system system considered complete external interaction needed 
kind system models components intended system environment interacts 
way activity system take place soon ready executed external agent may delay execution 
closed systems respond maximal progress property 
referred interpretation actual behaviour valuation function ir 
set valuations 
ir define 
def sa stochastic automaton 
cardinality take sample space set ir algebra respective borel algebra ir 
notice unique tuple 
xn ir simplify notation denote elements ir 
elements irrelevant 
definition 
interpretation sa initial valuation pts sa def ir ir obtained follows probabilistic transition relation defined prob def unique probability measure ir ir induced distribution functions def def indicator function defined def 
non deterministic transition relation defined rule act ir 


edge enabled valuation notation enabled induces non deterministic transition outgoing 
particular notice enabled valuation semantics definition uses di erent methodology defined 
semantics proven probabilistically bisimilar 
notice location valuation exactly probabilistic transition 
stochastic automaton sa valuation sa pts 
rule prob considers setting clocks 
values clocks assigned randomly probabilistic transition corresponds step 
indicator functions take care system stays location value clocks meant set remains unchanged 
clocks may randomly take value associated distribution function 
rule act explains case triggering edge 
occurrence action time edge check clocks trigger set expired time part considered satisfaction predicate 

case edge enabled 
edge active positive clock valuation previous way edge forced occur soon enabled 
maximal progress checked formula 


stochastic process algebra section recall definition semantics stochastic process algebra read 
main di erence majority stochastic process algebras deals kind probability distribution restricting exponential distributions 
syntax 
set actions set process variables set clocks clock name probability distribution function satisfying 
abbreviate xg definition 
syntax defined finite recursive specification set recursive equations form process represents inaction process perform action 
intended meaning named action prefixing action immediately enabled performed behaviour exhibited 
triggering condition process enabled soon clocks expire 
choice behaves 
execution fastest process process enabled selected 
known race condition 
fastest process uniquely determined non deterministic selection fastest processes 
clock setting operation sets clocks respective distribution functions 
choose lotos parallel composition 
table 
stochastic automata ck aq ck aq ack ap ck ap aq aq executes parallel synchronised actions synchronisation may happen synchronising actions enabled processes 
renaming operation process behaves actions renamed assume precedence operations 
section shorthand notation 
define stochastic prefixing xg def fact prefixing widely adopted stochastic process algebras 
semantics 
associate stochastic automaton sa term define di erent components sa order define automaton associated parallel composition introduce operation ck 
ck process behaves clock set 
usual structured operational semantics location corresponds term case extended ck 
clock setting function set edges defined smallest relation satisfying rules table 
function defined clock xg components defined syntax turns stochastic automata language equally expressive 
means finitely branching stochastic automaton corresponding guarded recursive term language reachable part stochastic automaton identical stochastic automaton hand 
recursive specification guarded implies variables appear context prefix 
stochastic automaton finitely branching location set outgoing edges finite 
assume contain name clashes clock variables 
severe restriction terms su er name clash properly renamed term name clash 
discrete event simulation processes process simulation algorithm returns possible execution 
execution calculated probabilities timing di erent clocks transitions plus additional machinery resolve inherent non determinism model 
subsection define theoretical foundations algorithm second part give simulation algorithm 
foundations 
basically execution pts path obtained traversing starting initial state 
definition 
pts 
execution finite infinite sequence 

support distribution function induced 
interpreted density function corresponding distribution function 

sequence finite ends non deterministic state 
denote exec set executions finite execution denotes non deterministic state execution 
restriction states probabilistic steps probable ones 
way consider execution probable paths 
general setting may interesting consider executions probability 
case want simulator generate probable executions 
second restriction defines non deterministic steps execution 
theoretically speaking notion non determinism important tells choice executing activity remain underspecified 
fact choice system dependent architecture dependent depends place system running 
performance system depend architecture executed 
words pts understood semantics specification system 
study performance system need consider particular implementation non determinism resolved way 
additional machinery put top system 
machinery known general schedulers particular adversaries context probabilistic transition systems 
particular implementation system pair adversary 
simulation algorithm going allows study performance particular implementation specification 
allow arbitrary distributions definition di erential operator quite involved prefer omit 
refer details 
adversary function schedules non deterministic transition past history system 
consider probabilistic adversaries definition changes adapt ptss style 
definition 
pts 
adversary scheduler partial function exec finite executions exec countable sample space satisfies def discrete probability measure discrete algebra 
execution stochastic automaton execution underlying semantics sa 
notice state sa transition fully determined state outgoing edges adapt notion adversaries image ranges edges stochastic automaton transitions associated pts 
definition 
sa stochastic automaton 
adversary scheduler sa partial function exec sa finite execution exec sa countable sample space satisfies enabled def discrete probability measure discrete algebra 
simulation algorithm 
simulation algorithm variable time advance procedure simulated time goes forward time transition triggered intervening time skipped 
structure simulation algorithm depicted 
inputs algorithm recursive specification adversary initial process root initial valuation root initial valuation relevant initial point algorithm form initial state pts sa state execution 
recursive specification relevant modules take care generating stochastic automaton :10.1.1.132.1448
fact stochastic automaton generated completely required parts order choose step simulated 
algorithm saves current location better current term adversary select edge calculate performance results calculate clocks set calculate outgoing edges recursive specification clocks values generate new calculate transition valuation fig :10.1.1.132.1448

schema simulation algorithm necessary information recover set clock set done module possible outgoing edges done module rules table :10.1.1.132.1448
calculating structure step valuation calculated 
point necessary save valuation module assigns clock xg random value distribution function rest clocks keep old value 
new valuation denoted 
represents randomly selected values 
fact module corresponds rule prob definition 
adversary module order select edge executed 
module takes possible edges calculated selects enabled see definition :10.1.1.132.1448
way sample space obtained adversary take care selecting possible edge executed definition 
module calculates transition rule act definition 
gives executed action timing location valuation determine step execution 
module user dependent 
gathers information execution determined simulation order calculate statistics user may require 
examples done refer section 
implemented prototype simulation algorithm functional language haskell 
assumed initial valuation constant function clock actual restriction specification typically free clock variables root process reasonable restriction unguarded recursive specifications allowed 
unguarded recursion yield infinite set load load failure load programmer user progr 
job user job fail queue progr 
queue user change phase load mainframe pm user job ready progr 
job ready fail repair maintenance get user job get progr 
job fig 

architecture mainframe system outgoing edges infinite set clock settings 
way modules finish computations 
restriction implementation deals adversaries history independent adversaries satisfy 
due fact nice idea save complete execution intended grow infinite 
history independent adversaries reduces dramatically complexity algorithm 
discuss improvements section 
notice modules require randomness 
purpose random number generator multiplicative linear congruential generator modulus multiplier calculated schrage algorithm see information 
example multiprocessor mainframe section discuss example adopted 
gives architecture multiprocessor mainframe serves purposes 
hand system maintain database process transactions submitted di erent users 
hand program development serve programmer requirements compilation testing 
system altered occurrence software failures 
easily write modular description system 
subsection give model description subsequently discuss type adversary give simulation results 
formal specification system parts mainframe maintenance module takes care repairing failures system load basically environment representing user programmer job arrivals occurrence failures 
system load mainframe maintain process load mainframe time user programmer sends job requirement failure occurs 
process maintain failure occurs repaired 
fail fail repair process load models user programmer load failure occurrences load process intended model variation load time load night di erent peak hours 
phases change weibull distribution function parameters denoted phases 
phase user jobs arrive exponential distribution rate notation second phase arrivals distributed third phase user job generated 
case job queued queue full system failed job simply rejected 
similarly programmer jobs arrive second phase failures originate respectively 
model occurrence system failure regardless errors induce failure 
processes follows 
xu reject xu reject xp reject xp reject distribution functions example chosen arbitrarily intention showing versatility simulator 
xf fail reject xf fail reject mainframe consists queues processors di erent processes fully synchronised actions fail repair failure occurs complete system repaired 
queues communicate processors time processors get user programmer job queue order process 
consider transferring job queue processor certain duration split action part part 
mainframe queues pm fifo queues user jobs programmer jobs 
symmetric varying length 
unique process scheme queue take advantage renaming operation 
queues nu fu np fp fu job fp job fu fp fu fp queue modelled set processes length queue number queued jobs 
queue blocking failure full 
case jobs rejected 
job fail repair job fail repair fail repair processors symmetric 
careful order avoid clock name clashes 
indices distinguish clock names 
processor gets user programmer job respective queue 
case process takes units time error distributed uniformly 
notice actions local processor 
consider activity takes part service time processor queue 
loading job processor executes 
execution time user job distributed gamma distribution parameters notation 
execution programmer job distributed 
failure induces processor abort activity 
system repaired processor restarts initial state 
pf pf pf pf pf pf fail repair process maintain simply repairs failure time occurs 
time distributed 
maintain fail repair maintain 
simulation details 
previous subsection model mainframe 
notice choices add specification 
component situation non determinism may arise actions reject 
reject user job exists chance mainframe may available moment 
consideration applies processes 
fact want reject lowest priority actions 
failure arbitrary event moment may disturb normal execution system 
reason failure wait enabled 
consider action fail highest priority 
user jobs usually short activities processed soon possible saving file processing small database transaction 
programmer jobs complicated tasks may involve compilation simulation testing system 
observation user jobs higher priority programmer jobs 
summarising consider priority relation defined strict partial order satisfying conditions reject reject fail fail fact criteria define adversary simulate multiprocessor mainframe 
reducing possible activities executed defined priorities nondeterminism remaining adversary resolve discrete uniform probability distribution 
formally define adversary follows 
sample space defined maximally possible def enabled table 
parameters studied mainframe architecture load processing nu np throughput programmer queue length user queue length throughput user jobs throughput programmer queue length user queue length throughput programmer jobs fig 

studying length queues auxiliary operation pri prune enabled edges lower probability enabled edges pri returns maximal elements order 
pri def adversary simply defined follows def pri pri simulation results 
set values di erent parameters table 
studied behaviour system di erent queue lengths 
ran simulations changing length queues 
see user programmer job throughputs stabilise user programmer queue length respectively queues larger values ect throughput notice planes pictures horizontal point 
fixed values respectively see table 
ran di erent simulations changing parameters related failure repairing 
cases took 
time set average coincides parameter simulation results depicted figures 
represents availability system percentage time mainframe processing jobs 
depicts throughput user jobs number jobs average repair time minutes fig 

availability average repair time minutes fig 

throughput user jobs successfully processed time unit 
cases lines exponential functions approximate obtained simulation values 
functions shape re sx appropriate constants 
calculate user job throughput simply count number occurrences action time unit 
determine availability count occurrences action fail time unit say fpm calculate fpm 
average repair time fpm fraction system unavailable time unit 
simulation algorithm allows direct calculation availability case method followed precise 
simulations carried method batch means consists running long simulation run discarding initial transient interval dividing remainder run batches subsamples 
took subsamples approximately minutes length 
values figures averages 
case calculated respective confidence interval 
proportionally widest confidence interval obtained case throughput confidence 
case counting failures widest confidence interval confidence 
mention system finite able automatically check deadlock free clock name clashes 
checking done simple inspection underlying stochastic automaton basically reduces applying expansion law second appropriate rules 
theory algorithms described 
plan include checking near 
discussions related 
approach formally validate simulation models investigate mapping high level language describing discrete event simulation models non stochastic process algebras 
studied translation process simulation language demos discrete event modelling simula tccs birtwistle process algebras basically ccs synchronous variant sccs provide denotational semantics demos 
works formalise probabilistic information original language role process algebra respect simulation di erent 
katoen generalised semi markov processes indirectly semantic model map non markovian stochastic process algebra event structures obtain subclass event structures called stochastic deterministic ones gsmp 
translation induces straightforward simulation algorithm 
say approach intermediate model event structures omitted accept non determinism inherent characteristic model resolved simulating 
mention actual implementation algorithm 
field stochastic process algebra harrison model simulate cache coherency protocol 
order simulate protocol compile specification code simulation libraries 
approach similar di erent stochastic process algebra adversaries resolve possible non determinism 

gave overview foundations showed simulate specifications written advantages modelling language fold 
fact process algebra allows formal verification functional correctness model studied 
example able automatically check system deadlock 
second advantage contrast simulation packages allows principle description process restricting particular method simulation modelling general purpose task 
compositional nature inherent ideas simulation allows fly construction simulation model 
implies simulation systems recursive specifications containing infinite equations possible 
simulation algorithm analyse di erent kinds single queues systems specified including infinite queues 
checked obtained results analytical solutions results satisfactory 
self checked results obtained mainframe example obtaining quite tight confidence intervals 
current state program library compiled specification module calculate performance results number 
adversary selected library explicitly defined 
specification terms haskell data type closely resembles notation 
plans incorporate adversaries part syntax 
idea encode probabilities transition operand parallel composition summation 
base ideas results 
encoding dynamic sense transition may induce di erent values probabilities step 
mentioned simulator prototype version 
turn serious tool done 
know algorithm optimal state space requirements current symbolic state valuations active clocks saved 
time complexity addressed searching optimal ways calculating selection transition triggered 
second place need reduce extra user 
implications 
hand try possible analysis performed module eliminate haskell overhead specification 
simulation program take scripts inputs containing specification including adversaries encoded term instructions desired analysis 
hand provide libraries commonly process macros queues loaders see section 
mention intention extending data 
definitely facilitate task modelling broadening scope specify analyse instance mobile systems protocols include significant data transfer 

alur dill 
theory timed automata 
theoretical computer science 

bernardo gorrieri 
tutorial empa theory concurrent processes nondeterminism priorities probabilities time 
theoretical computer science 

birtwistle 
process semantics simulation 
technical report university swansea 

argenio hermanns 
katoen 
parallel composition 
proc 
preliminary indianapolis usa tech 
rep csr pp 

school comp 
sci university birmingham 

argenio 
katoen brinksma 
stochastic automata model algebraic approach 
brinksma eds proc 
enschede netherlands tech 
rep ctit pp 

university twente 

argenio 
katoen brinksma 
algebraic approach specification stochastic systems extended 
gries 
de roever editors proc 
shelter island usa ifip series pp 

chapman hall 

field harrison 
automatic generation verifiable cache coherence simulation models high level specifications 
proc 
cats 
australian comp 
sci 
comm 

glynn 
gsmp formalism discrete event simulation 
proceedings ieee 

herzog 
application protocol performance analysis 
konig ed formale fur verteilte systeme fokus series 
publishers 

hansson 
time probability formal design distributed systems volume real time safety critical systems 
elsevier 

harrison 
stochastic process algebra discrete event simulation 
jean marie eds quantitative methods parallel systems esprit basic research series pp 

springer verlag 

report programming language haskell non strict purely functional language version april 
url haskell org 

herzog 
stochastic process algebras applied failure modelling 
proc 

university erlangen 


compositional approach performance modelling 
distinguished dissertation computer science 
cambridge university press 

jain 
art computer systems performance analysis 
john wiley sons 


katoen brinksma 
stochastic simulation event structures 
ed proc 
torino italy pp 

universita di torino 

lang 
real functional analysis volume graduate texts mathematics 
springer verlag rd edition 


integrating behavioural simulation modelling 
quantitative evaluation computing communication systems lncs pp 

springer verlag 

segala lynch 
probabilistic simulations probabilistic processes 
nordic journal computing :10.1.1.132.1448


regenerative stochastic simulation 
academic press 

vardi 
automatic verification probabilistic concurrent finite state programs 
th annual symposium focs portland oregon pp 

ieee computer society press 
