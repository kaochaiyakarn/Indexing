persistent relevance local operating system global applications jay lepreau bryan ford mike hibler department computer science university utah salt lake city ut www cs utah edu projects flux cs utah edu growth popularity loosely coupled distributed systems world wide web java systems solution issues software maintenance flexibility security changing research emphasis away traditional single node operating system issues 
apparently view traditional os issues solved problems minor problems 
contrast believe building vast distributed systems fragile infrastructure provided today operating systems analogous building sand 
outline supporting arguments views describe os design supports secure encapsulation foreign processes increasingly prevalent tomorrow distributed systems 
global applications require local systems global vision call papers conference envisions system allow hundreds millions ordinary citizens access global information participate applications unprecedented scale 
furthermore claimed systems software emphasis shift providing support applications 
agree argue burden software controlling local machine increase quantitatively new qualitative ways 
advances local operating systems essential component global systems 
hot distributed problems hot problems raised vision worldwide distribution catalog traditional issues distributed systems fault tolerance mobility naming resource location distributed soft real time large scale caching replication high speed networking distributed security partially federated domains varying trust administrative domains 
problems certainly real important difficult solve 
mosaic web succeeded spectacularly addressing single 
fact succeeded address issues tried address software portable easy install crucial reasons spread 
state web simply distributed filesystem done wrong 
research supported part advanced research projects agency number dabt 
web currently distributed system performance functionality limited distributed systems problems local operating systems problems 
transfers slow reasons connections re ad hoc caching replication link level resources simply overloaded multimedia output real time control fundamental names authorization authentication just starting deployed lack fault tolerance tolerable transactions entirely read standard mode interaction interactive human user ready interrupt problems occur 
resource locating services web crawlers search engines accessible quantity data small compared years 
failings susceptible huge improvements modest effort 
example caching connections easy implement reaps large benefits predictive caching historical access patterns site caching simple proxy servers sophisticated mechanisms hierarchical caching regional mirrors intelligently ordered resolution name address deployed 
link bandwidth increase dramatically due demand increased supply due telecommunications unites states lower costs due widespread adoption optical amplifiers long distance fiber links 
fixing fundamental distributed system performance problems cause underlying problems local operating system critical 
especially true servers apparent 
pressure server client capabilities increasingly severe analog data goes digital demand bandwidth increases 
client side vision internet appliance network computer just played 
small cheap possibly mobile stripped machines put premium efficient exploitation scarce local resources including electrical power 
thin clients combined internet appliance cellular phone memory virtually 
simultaneously thin clients put increasing burden servers computing storage control migrates central servers 
persistent local problems needs distributed systems heavy demands software local node 
heavy requirements may require entirely new approaches system structure emphasizing communication computation scout system 
heavy multimedia content require quality service resource management 
little reserve bandwidth atm switch reserving scheduling access disk network interface memory bus display server 
object oriented middleware corba induces terrible performance problems due poor match application needs control transport protocol 
severe challenge efficiently scarce resources thin clients simultaneously providing robust local resource management generality required internet 
system security important local system security today disaster inevitably worse increased machines nodes distributed system 
system security obviously crisis acute security alerts cert issued weekly 
situation popular os platforms don offer fully protected operating systems windows macos worse 
debate goes browsers ssl vs 
believe decisions matter little system security 
example relatively robust authentication mechanisms kerberos store session keys locations vulnerable local intruders local file shared memory 
attacks local lan may threaten keys example local memory may paged diskless workstation network ram vulnerable network sniffing 
today local os security mechanism lacking numerous areas 
vulnerabilities confidentiality integrity revealed weekly local systems vulnerable attacks crash critical components attacks availability problems don warrant announcements cert 
local systems attempt address problems denial service covert channels 
words true isolation subsystems achieved today systems 
security policy worse condition 
evident security research community years 
example ordinary non distributed systems apparent handle composing managing policy merely configuration files access modes 
interacting state security breaches arise 
far relevant formal security composability offer hope 
bankruptcy policy obvious wider community due issues surrounding executable content 
java sfi schemes safely executing untrusted foreign code currently effective way resolve tension functionality doing useful protection 
systems useful part simply animate data client screen 
need interesting typically query user exception blanket policy reading local files 
long way moderately useful tedious limited policy complex policy required fulfill vision applications cooperating world engaging complex compute tasks human loop file open call 
java java language offer type memory interface protection attempts solve part security problem 
particular runtime environment provides little way control memory cpu consumption aside ordinary pre emption 
supposed control fundamental design java security mechanism deficiencies detailed dean 
basic design deficiencies underlying causes holes exploited 
deficiencies include fundamental problems java supposed monitor invoked susceptible complete analysis test ii identified trusted computing base substantial diverse parts cooperate maintain security 
problems java systems provide truly robust security 
java security obtained ad hoc manner similar security today unix systems show similarly fragile behavior 
especially true aggressive security policies complexity environment inevitably increases due larger numbers sizes interacting java components 
strength java virtual machine provide today portability object code 
obvious advantages global applications 
unix unix provided widespread portability object code object code windows today 
clear similar happen number machines running say win effectively provide similar portability ordinary machine code 
related portability advantage obvious limitation java security limited programs written java limited languages compilable java virtual machine 
today networked environment users frequently run ordinary binaries net compile unchecked source hope programs harmless 
secure isolated controllable environment run arbitrary subsystem full speed common case doesn require target program special language design robustness great distributed systems 
local operating system distributed systems recursive virtual machines sections articulated local needs machines result participation distributed systems 
partly response needs especially security realm developing new operating system efficiently support recursive virtual machine rvm execution model 
mod ern operating systems provide concept virtual machines processes tasks allow virtual machines coexist single machine compete hardware resources 
os architecture unique allows virtual machines completely contain virtual machines supports recursion 
illustrate concept suppose take pc running say linux process linux box run pc hardware simulator 
suppose pc hardware simulator complete run real operating system 
boots second copy linux running machine simulator copy linux comes runs machine simulator running copy linux arrangement machine simulators little practical value performance level deep exponentially worse layers added 
performance problem didn exist arrangement number useful properties ffl parent virtual machines control aspect execution child virtual machines processes threads fully visible modifiable parent 
ffl child access consume resources parent owns 
example memory child access simply part data area parent machine simulator 
similarly cpu time child uses donated parent virtue parent running machine simulator code 
ffl child virtual machine descendents may contain completely encapsulated parent virtual machine invisible entities outside parent virtual machine visible ordinary dumb data parent virtual address space 
example runs ps command top level linux environment show single process level virtual machine 
encapsulation property provides number simplifying benefits discuss section 
basic goal os architecture provide environment important properties nested machine simulator arrangement instruction set emulation corresponding loss performance 
course technical restrictions child virtual machine processor architecture parent important practical properties model achievable 
note concept recursive virtual machines analogies unix hierarchical process organization parent processes create control child processes 
unix model falls far short true rvm model respects parent processes limited degree control children 
ii child processes allocate resources parent process doesn possibly 
iii child persist parent exits 
iv processes globally visible single process id namespace 
doesn mean unix process model isn useful fact useful 
true rvm model possible arbitrary user process completely control descendants 
provides flexibility power allows process level system isolate control arbitrary subsystems facility needed securely run arbitrary untrusted code 
software virtual machine architecture special hardware architectures proposed goal allow software virtual machines stacked efficiently normal hardware 
approach design architecture goal efficient layering appropriate software implementation 
components architecture standard non privileged machine instructions operations exported fluke microkernel set higher level common protocols 
virtual machine monitors vmms executed virtual machine efficiently create additional recursive virtual machines applications vmms run 
kernel properties fluke microkernel provides simple memory management scheduling ipc primitives similar conventional small microkernels keykos 
fluke kernel api enforce rvm model enables model ability process completely control children providing vital properties ffl kernel primitives completely relative implying global resources namespaces privileges 
required process sees exactly fluke api execution environment function fully privileged entity descendents 
ffl primitive kernel objects threads mappings owned associated specific processes 
required process find resources children 
fluke implementation obtains property associating kernel objects small chunks normal user memory 
fluke provides kernel primitive return pointers kernel objects associated particular range user memory child memory definition contained parent easy parent locate kernel objects 
control children constraining object creation parent remove special object create virtual memory permission attribute portions children memory 
ffl state contained primitive kernel objects plain data form ordinary programs regenerate objects 
required process get set complete state children located primitive objects 
microkernel api supports efficient recursion hierarchical process structuring ways 
memory resources virtual machine hierarchy gets explicit support relative memory mapping primitives allow address spaces efficiently composed address spaces 
cpu resources kernel provides primitive supports hierarchical scheduling models 
schedulers easily implementable ordinary user processes 
allow safe short circuiting hierarchy kernel provides global capability model supports selective interposition communication channels 
higher level common protocols capability model exploited common protocols set defined ipc interfaces provide resource management functionality higher level traditional virtual machines suited needs modern applications file handles device registers 
common protocols define children get higher level resources ancestors 
process parent port highest level interface parent child communication effectively acting name service child requests access services 
interface vmms interpose vmm selectively interposes interfaces necessary perform function 
overhead interposition minimal typically requests parent interface child initialization phase find interfaces interest 
parent interface currently provides methods obtain initial file descriptors stdin stdout stderr find filesystem manager find memory manager find process manager exit 
service discovery binding phase important feature model happens automatically cut irrelevant middle layers 
process vmm receives initial requests service classes child port 
vmm modifying behavior service class resource memory files process management simply returns port obtain service course obtained parent initialization time 
requests child service don involve parent way go straight parent particular resource port points may grandparent may tree 
parent modifying resource virtual memory manager turning physical memory virtual memory children passes new port services memory requests 
way obtain automatic cut hierarchy virtual machines key factor efficiency model 
complete virtual machine interface maintained level efficiency derives needing implement new changed functionality particular level 
security recursive virtual machines section outline security relevant features rvm model focusing mechanism policy 
rvm model flexible applied process arbitrary sub environments ii efficient interaction inside environment need involve security manager iii provide strong resource accounting control 
elaborate features 
proposed virtual machines security established uses classic virtual machines provide isolation guarantees subsystems 
provide ability nest virtual machines important worldwide applications 
machine runs untrusted applications requires number features operating system 
needs ability default isolate untrusted environment rest machine control interaction rest system decides allow 
needs ability control resource foreign process including cpu memory 
needs able provide facilities flexibly arbitrary user processes browsers need control children 
furthermore exist distributed systems consisting multiple layers loosely coupled interacting objects 
foreign applet invoke third site applet foreign 
applet need ability control second applet resource 
rvm model obviously matched arbitrary nesting security management domains 
ordinary user create protected sub environments arbitrary untrusted programs run giving access user files privileges 
rvm model takes known concept separation kernel function separate information domains generalizes provide flexible number separation kernels machine 
encapsulation property state inside virtual machine invisible outside parties primary benefits 
vastly simplifies management arbitrary multi process environments 
handling dynamic multi process environments normal os unix major complication monitoring schemes simply 
rvm model problem arises 
second operations entities inside particular virtual machine go full speed 
communicate freely parent getting involved communication environment monitored having keep track happens environment entire subsystems running machine isolated cleanly defined communication allowed subsystems 
example machine firewall trusted trusted applications easily implemented 
rvm model cleanly provide strong resource accounting control 
traditional kernels deal issue account system resources especially memory different os user processes system process generally able allocate resources largely independently 
system unix mach process fairly easily monitor activity child process directly creates extremely difficult monitor activity resource grandchild processes created child process 
similarly parent process kills child process sure activity started child terminated 
rvm model accounting control provided relatively straightforward manner 
outside security realm relevant wide area applications feature isolation resource control 
control useful resource reservation guaranteeing certain amount physical memory real time applications 
applications soft real time constraints play dominant role 
rvm model address covert channels 
storage channels problem parent complete control child sees collaboration throttled 
timing channels controllable arbitrary scheduling policies provided user level threads 
bandwidth covert timing channels needs minimized 
policies hierarchical enforcing rvm model arbitrary algorithms forcing fixed slice scheduling scheduler unused cycles slice switching thread security context 
related rvm model similar cambridge cap computer provided inefficiently aid hardware supported indirect capabilities 
cap computer supported arbitrarily deep process hierarchy parent processes completely virtualize memory cpu usage child processes trap system call handlers children 
cap computer enforced process hierarchy strictly allow communication paths cut layers system 
noted retrospect designers system weakness impractical performance reasons levels process hierarchy corresponding roughly supervisor user modes architectures uses recursive virtual machines explored tested system 
wagner describe tool interposes child process unix system calls unix process debugging facilities 
concentrated providing useful functionality working existing operating systems apparently achieved 
goal providing ability run untrusted binaries goals 
totally different technical approach differences 
interpose kernel services similar way universally reliably interpose kernel services interposition apparently driven priori knowledge list possible system calls 
system vulnerable underlying operating system implement new system call unaware 
inevitable version skew highly induce situation probably exists undocumented calls 
design provides choice level operate mediating task operate low level enforcing mandatory access control flexible policy operate high level os personality unix level controlling ipc operations ensures new os services get 
offer control resource standard unix provide ability change resource limits running process provides ability limit paging behavior just total amount memory example malicious process cycle memory way designed cause thrashing provide flexible scheduling children limits total amount cpu time 
difficult system provide single point control multi process environment monitoring process replicate child forks 
fundamental property design operations nested environment distinguished operations environments 
contrast check kernel operation 
design oriented providing support highly efficient interposition ipc kernel services 
performance measured excellent believe example applications exhibited low ratio system calls actual computing 
status defined detailed fluke api flexible kernel environment 
prototype fluke implementation running platform virtual machine monitors including demand paging virtual memory manager process manager providing subset posix functionality transparent debugger 
year constructing security manager provides encapsulated environment run untrusted applications 
plan implement browser java applet security policy example move complex policies 
collaborators national computer security center adding support traditional subject security 
intent develop means virtualize ensuing security identifiers preserving relativistic property interface 
expect formal release fluke calendar year 
believe burgeoning worldwide network demand crucial advances areas distributed systems increasingly heavy demands local operating system 
area isolation resource management places new demands 
believe developed operating system architecture efficiently address demand isolation resource control 
adl tabatabai lucco wahbe 
efficient language independent mobile programs 
proc 
acm sigplan symp 
programming language design implementation pages may 
bellovin merritt 
limitations kerberos authentication system 
proc 
winter usenix conference pages 
chankhunthod danzig neerdaels schwartz worrell 
hierarchical internet object cache 
proc 
usenix technical conference pages jan 
cheriton duda 
caching model operating system kernel functionality 
proc 
symp 
operating systems design implementation pages 
usenix association nov 
dean felten wallach 
java security hotjava netscape 
proc 
ieee symposium security privacy oakland ca may 
ford hibler 
fluke flexible kernel environment application programming interface draft 
pp 
university utah 
available ftp cs utah edu papers sa ps gz www cs utah edu projects flux fluke html sa html format 
ford hibler lepreau 
annotated interface definitions optimize rpc 
proc 
th acm symposium operating systems principles page 
poster 
ford hibler lepreau back goel 
microkernels meet recursive virtual machines 
technical report uucs university utah may 
ford 
flexible multi policy scheduling cpu inheritance 
technical report uucs university utah may 
gokhale schmidt 
measuring performance communication middleware high speed networks 
sigcomm san francisco ca august 
acm 
goldberg 
architecture virtual machines 
afips conf 
proc june 
gosling andh 

white 
technical report sun 
available java sun com doc language environment 
hardy 
keykos architecture 
operating systems review september 
jones leach draves barrera iii 
modular real time operating system 
proc 
fifth workshop hot topics operating systems may 
lauer 
recursive virtual machine architecture 
acm sigarch sigops workshop virtual computer systems pages march 
liedtke 
micro kernel construction 
proc 
th acm symposium operating systems principles pages copper mountain dec 

plans offer internet wireless phone 
new york times 
july 
mogul 
case persistent connection 
proc 
sigcomm conference pages aug 
mogul 
operating systems support busy internet services 
proc 
fifth workshop hot topics operating systems may 
mogul 
hinted caching web 
proc 
seventh acm sigops european workshop sept 
mosberger peterson 
making paths explicit scout operating system 
technical report university arizona dept computer science may 
popek kline 
verifiable secure operating systems software 
afips conf 
proc june 
schmidt harrison 
object oriented components high speed networking programming 
proc 
usenix conference object oriented technologies june 
wagner goldberg thomas 
secure environment untrusted helper applications 
proc 
th usenix unix security symposium 
wilkes needham 
cambridge cap computer operating system 
north holland ny 
yellin 
low level security java 
proc 
th int world wide web conference pages dec 
