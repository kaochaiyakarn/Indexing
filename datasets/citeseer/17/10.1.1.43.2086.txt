hytech model checker hybrid systems thomas henzinger pei hsin ho howard wong toi eecs department strategic cad labs cadence berkeley labs univ california berkeley intel oregon berkeley california eecs berkeley edu pho intel com howard cadence com hybrid system dynamical system behavior exhibits discrete continuous change 
hybrid automaton mathematical model hybrid systems combines single formalism automaton transitions capturing discrete change differential equations capturing continuous change 
hytech symbolic model checker linear hybrid automata subclass hybrid automata analyzed automatically computing polyhedral state sets 
key feature hytech ability perform parametric analysis determine values design parameters linear hybrid automaton satisfies temporal logic requirement 
hybrid system typically consists collection digital programs interact analog environment 
examples hybrid systems include manufacturing controllers automotive flight controllers medical equipment micro electromechanical systems robots 
systems occur mission critical applications formal guarantees absence logical timing errors desirable 
formal analysis mixed digital analog nature hybrid systems requires mathematical model incorporates discrete behavior computer programs continuous behavior environment variables time position temperature 
extensions discrete state transition models mixed discrete continuous behavior concentrated single important environment parameter real time 
model timed automaton finite automaton augmented finite number clocks real valued variables values change continuously constant rate :10.1.1.43.9418
timed automata successfully analyze real time protocols asynchronous circuits 
modeling general kinds hybrid systems hybrid automaton finite automaton finite number real valued variables change continuously specified differential equations differential inequalities general ways clocks :10.1.1.48.8089
analyzing hybrid systems build model checking technology formal model system checked fully automatically correctness respect requirement preliminary version appeared proceedings ninth international conference computer aided verification cav lecture notes computer science springer verlag pp 
extended version appeared software tools technology transfer special issue timed hybrid systems pp 

research supported part onr yip award nsf career award ccr nsf ccr afosr contract aro muri daah arpa nag src contract dc 
expressed temporal logic 
purpose entire state space system explored 
done considering state individually symbolically computing constraints represent state sets 
ability deal large state spaces symbolic model checking proven effective technique automatic analysis complex finite state transition systems 
years model checking approach extended classes infinite state transition systems including timed automata 
clock values range infinite domain nonnegative reals impossible enumerate states timed automaton symbolic representations state sets employed 
specifically symbolic model checking timed automaton requires manipulation certain linear constraints clock values disjunctions inequalities form gamma clock vectors inequality operator constant integer vector components bounded automaton 
finitely constraints computations required model checking guaranteed terminate 
admitting general linear constraints continuous variables disjunctions inequalities form ax constant matrix constant vector symbolic model checking method timed automata extended general class hybrid automata called linear hybrid automata 
linear hybrid automaton dynamics continuous variables defined linear differential inequalities form vector derivatives variables number possible constraints longer finite moving timed automata linear hybrid automata price pay increased generality loss guaranteed termination model checking 
method practical interest termination happens naturally examples enforced say considering behavior system bounded interval time 
model checking provide mere answer question system satisfies correctness requirement 
hytech provides diagnostic information aids design debugging 
system description contains design parameters values specified hytech computes necessary sufficient constraints parameter values guarantee correctness 
example railroad crossing compute exact cutoff point meters crossing train signal approach order gate closed time train passes crossing 
system fails satisfy correctness requirement hytech generates error trajectory illustrates time stamped sequence events leads violation requirement 
linear hybrid automata expressive compared formalisms model checking possible finite automata timed automata embedded applications meet linearity constraints 
cases conservatively approximate system linear hybrid automata approximate automaton satisfies correctness requirement original system satisfies requirement 
hand approximate system violates requirement generated error trajectory possible trajectory original system approximation refined 
consists sections 
section presents model hybrid automata section illustrates analysis techniques section briefly describes tool hytech 
simple thermostat running example demonstrate modeling approximation safety important realize definition linearity hybrid automata differs definition linearity commonly systems theory 
particular differential inequalities linear hybrid automata may depend value variables dynamics form prohibited 
gammax gammax turn turn thermostat automaton verification parametric analysis tool 
involved model checking procedures general temporal logic requirements theoretical results timed automata interested reader encouraged consult literature 
hybrid automata example simple thermostat euclidean dynamical system prescribes set real valued variables evolve time 
system state point number variables system trajectory curve called flow 
deterministic evolution real variables naturally prescribed initial condition differential equations example temperature heated plant may observe initial condition differential equation gammax 
nondeterministic evolution real valued variables prescribed differential inequalities :10.1.1.43.9418
contrast boolean dynamical system prescribes set boolean valued variables evolve time 
system state point number variables system trajectory sequence states pair consecutive states called jump 
nondeterministic evolution boolean variables naturally prescribed initial condition transition relation indicates state set possible successor states 
example status fon heater may observe initial condition transition relation heater may turned 
boolean dynamical system viewed finite automaton 
hybrid dynamical system real valued boolean valued variables say real variables boolean variables 
system state point theta system trajectory sequence flows jumps flows boolean part state stays constant real part state evolves time jumps entire state changes instantaneously 
describe hybrid dynamical systems hybrid automata 
hybrid automaton annotates control graph finite automaton conditions real valued variables 
node graph represents operating mode system annotated differential inequalities prescribe possible evolutions flows real variables system remains mode 
edge graph represents switch operating mode annotated condition prescribes possible changes jumps real variables system executes mode switch 
combine temperature heater fon obtain thermostat 
hybrid automaton operating modes heater mode heater mode 
initially heater temperature degrees 
heater temperature rises rate gammax degrees minute heater temperature falls rate gammax degrees minute 
heater turned temperature reaches degrees turned temperature falls degree 
due edge conditions assert mode switch may occur 
force mode switches forcing heater turned temperature reaches degrees annotate operating modes called invariant conditions addition annotation differential inequalities system remain mode long corresponding invariant condition satisfied 
invariant conditions operating modes prescribe mode switch occur temperature leaves operating interval degrees 
formal definition hybrid automaton system flow inv init jump sigma syn consists components variables finite ordered set fx real valued variables 
example thermostat automaton uses variable model plant temperature case 
control modes finite set control modes 
example thermostat automaton control modes flow conditions labeling function flow assigns flow condition control mode flow condition flow predicate variables dotted variable refers derivative respect time dx dt 
control hybrid automaton mode variables evolve differentiable curve points curve values variables derivatives satisfy flow condition flow 
example control mode thermostat automaton flow condition gammax control mode flow condition gammax 
invariant conditions labeling function inv assigns invariant condition control mode invariant condition inv predicate variables control hybrid automaton mode variables satisfy invariant condition inv 
example control modes thermostat automaton invariant condition 
initial conditions labeling function init assigns initial condition control mode initial condition init predicate variables control hybrid automaton may start control mode initial condition init true 
graphical representation automata initial conditions appear labels incoming arrows source modes initial conditions form false depicted 
example control mode thermostat automaton initial condition control mode initial condition false 
control switches finite multiset control switches 
control switch directed edge source mode target mode example thermostat automaton control switches 
jump conditions labeling function jump assigns jump condition control switch jump condition jump predicate variables fx unprimed symbol refers value variable control switch primed symbol refers value control switch 
jump condition relates values variables control switch possible values control switch 
graphical representation automata guarded assignments represent jump conditions example assuming guarded assignment stands jump condition notice variable assigned new value value jump equal value jump 
thermostat automaton control switch jump condition control switch jump condition events finite set sigma events labeling function syn assigns event sigma control switch example control switch thermostat automaton corresponds event turn control switch corresponds event turn 
thermostat example events permit synchronization jumps concurrent hybrid automata 
states trajectories state hybrid automaton pair consisting control mode vector represents value variable state admissible predicate inv true variable replaced value state initial predicate init true replaced example state thermostat automaton admissible state 
thermostat automaton exactly initial state 
consider pair admissible states 
pair jump control switch source mode target mode predicate jump true variable replaced value primed variable replaced value thermostat automaton exactly jumps 
pair flow nonnegative real ffi duration flow differentiable function ae ffi curve flow requirements hold 
endpoints ae ae ffi 
invariant condition time instants ffi state ae admissible 

flow condition ae ffi time derivative ae 
time instants ffi predicate flow true variable replaced th coordinate vector ae dotted variable replaced th coordinate ae 
example flows thermostat automaton 
jump say jump successor flow called flow successor notice admissible state flow successor flow duration 
trajectory hybrid automaton finite sequence admissible states state sequence initial state pair gammax turn turn gammax thermostat automaton augmented safety verification consecutive states sequence jump flow state reachable state trajectory usually case admissible states thermostat automaton reachable 
safety requirements safety requirement asserts bad happen evolution system 
safety requirements specified describing unsafe values value combinations system variables 
system satisfies safety requirement iff reachable states safe 
safety verification amounts computing set reachable states 
hybrid automata specify safety requirements state assertions 
state assertion hybrid automaton function assigns control mode predicate variables say state assertion true false state predicate true false variable replaced value states true called states 
example invariant conditions define state assertion inv inv states precisely admissible states similarly initial conditions define state assertion init true precisely initial states flow jump conditions define state assertions 
unsafe state assertion hybrid automaton satisfies safety requirement specified unsafe state assertion unsafe false reachable states variables control modes sufficient specify safety requirement system description needs augmented additional variables control modes called monitor automata executed concurrently system report unsafe state entered see 
example thermostat automaton consider requirement heater active minutes 
specify requirement need means representing total elapsed time say total accumulated time heater active say add auxiliary variables thermostat automaton way alter behavior automaton variable clock control modes measures elapsed time variable stopwatch measures accumulated time spent control mode 
augmented automaton shown 
specify unsafe states state assertion unsafe assigns predicate control modes 
hytech verify state assertion unsafe false reachable states augmented thermostat notice longer case admissible states reachable 
analysis hybrid automata computing reachable states check hybrid automaton satisfies safety requirement specified state assertion unsafe attempt compute state assertion reach true exactly reachable states check state reach unsafe true safety requirement violated produce error trajectory initial state unsafe state useful debugging system safety requirement satisfied 
attempt compute state assertion reach follows 
state assertion post state assertion true precisely jump flow successors states post true state iff exists state jump flow succeed computing state assertion post init characterized states reachable trajectories length single jump flow succeed computing state assertion post characterized states reachable trajectories length natural number find post equivalent true states conclude characterizes states reachable trajectories length reach notice admissible state flow successor state reachable trajectory length reachable trajectory length 
success computation reach hinges issues 
state assertion need able compute state assertion post 
done reasonably efficiently restricted class hybrid automata called linear hybrid automata 
second iterative computation reach converge finite number post applications 
guaranteed certain restricted classes linear hybrid automata class timed automata variables clocks 
address issue second issue theoretical practical interest verification attempt succeed exhausting available space time resources little value know unlimited resources computation converged 
convergence issue discussed refer interested reader literature decidability results subclasses linear hybrid automata 
linear hybrid automata hybrid automaton model expressive 
convenient providing formal descriptions hybrid systems generality model prohibits automatic analysis 
consider restricted class hybrid automata linear hybrid automata function post state assertions computed efficiently 
atomic linear predicate inequality rational constant linear combination variables rational coefficients gamma 
convex linear predicate finite conjunction linear inequalities 
linear predicate finite disjunction convex linear predicates 
hybrid automaton linear hybrid automaton satisfies requirements 
linearity control mode flow condition flow invariant condition inv initial condition init convex linear predicates 
control switch jump condition jump convex linear predicate 

flow independence control mode flow condition flow predicate variables contain variables 
second requirement ensures possible flows independent values variables depend control mode 
requirement quite limiting prohibits flow conditions permit kinds variables typically arise real time computing clocks clocks bounded drift gamma ffl ffl constant ffl 
state assertion linear control mode predicate linear 
linear hybrid automata theorem linear hybrid automaton linear state assertion post computed result linear state assertion linear hybrid automata flow curve replaced straight line endpoints 
theorem enables automatic analysis safety verification general temporal logic model checking linear hybrid automata 
nonlinear linear hybrid automata thermostat automaton linear hybrid automaton requirement flow independence violated control modes 
direct means automatically verifying nonlinear hybrid automata developed techniques replacing nonlinear hybrid automaton linear hybrid automaton 
technique called clock translation replaces variables cause nonlinearity clocks 
second technique called linear approximation replaces nonlinear predicates relaxed linear predicates 
clock translation idea clock translation value variable determined past value time elapsed variable value 
instance variable hybrid automaton clock translatable requirements hold 
solvability flow condition flow occurrences conjunct form 
integrable function constant sign invariant condition admissible states positive negative 
invariant initial jump condition occurrences conjuncts form inequality operators rational constants 
initialization control mode initial condition init implies constant control switch jump implies jump implies constant conditions value determined time reassigned constant value constant 
invariant initial jump conditions clock translatable variable translated conditions clock restarted reassigned constant 
necessary control modes may need duplicated account different constants 
variable thermostat automaton clock translatable 
clock translation results hybrid automaton 
control mode split control modes values may entering mode 
initial value turn ln turn ln turn ln ln ln ln clock translation thermostat automaton follows curve gamma gammat 
takes ln minutes reach threshold temperature degrees 
invariant condition mode translated ln mode 
jump condition switch translated jump condition ln switch 
translated jump condition resets clock differential equations prescribing evolution differ source target modes switch 
automaton control mode variable value follows curve gamma gammat ln minutes reaching value 
linear phase portrait approximation idea linear phase portrait approximation relax nonlinear flow invariant initial jump conditions weaker linear conditions nonlinear predicate replaced linear predicate implies example linear hybrid automaton linear phase portrait approximation thermostat automaton 
invariant initial jump conditions thermostat linear flow conditions need relaxed 
control mode invariant condition flow condition gammax imply derivative bounded bounded 
flow condition gammax relaxed linear condition 
similarly control mode nonlinear flow condition relaxed linear condition gamma gamma 
clock translation preserves trajectories system linear phase portrait approximation adds trajectories system 
prove relaxed system satisfies safety property sure original system satisfies property 
relaxed system violates safety property check discovered error trajectory valid trajectory original system 
analysis inconclusive approximation needs refined splitting control modes order gain accurate possible flows 
example control mode thermostat automaton split control modes flow condition gammax mode invariant condition mode invariant condition gamma gamma turn turn linear phase portrait approximation thermostat automaton gamma gamma turn turn tighter linear phase portrait approximation thermostat automaton control switch labeled :10.1.1.43.9418
relaxation yields linear flow conditions resulting linear hybrid automaton appears :10.1.1.43.9418
strictly trajectories original nonlinear automaton strictly fewer earlier approximation 
tighter linear approximations yield control modes analysis expensive 
safety verification thermostat recall wish verify heater active hour operation 
adding auxiliary variables described linear phase portrait approximation thermostat automaton obtain linear hybrid automaton 
ensure convergence computation reachable states conjunct added invariant conditions trajectories tracked minutes 
unsafe states specified linear state assertion unsafe assigns predicate control modes 
linear hybrid automaton strictly trajectories original nonlinear thermostat suffices prove safety requirement linear version 
write state assertion assigns predicate control mode assigns computation reachable states starts state assertion init false initial states control mode initially degrees 
compute state gamma gamma turn turn linear thermostat automaton safety verification state flow successors state inv true assertion post steps 
find jump successors states control switch requires degrees 
second find flow successors states 
purpose observe state assertion predicate ffi flow ffi ffi true values variables iff state flow successor state true assuming invariant condition inv true linear predicates existential quantifiers eliminated effectively 
particular obtain predicate ffi ffi ffi ffi ffi ffi ffi ffi ffi corresponds unbounded cone 
renaming primed symbols unprimed symbols intersecting invariant condition control mode obtain state flow successors state predicate corresponds shaded region 
predicate characterizes states control mode reached initial state single flow 
states control mode reached initial state single flow conclude post false compute post 
jump successors states states state assertion false true 
control switch may happen values changed jump simplifies 
closed flow successors flow successors states states conclude post computing post new jump successors new flow successors control mode 
addition flow successors control mode yields post control switch adds new jump successors post low mid range high monitor automaton mid range mid range gamma gamma low low gamma gamma high high gamma gamma turn turn parallel composition thermostat automaton monitor automaton disjunct part characterizes states reached jumps part characterizes states reached flows jump second disjunct part characterizes states reached flows jumps 
hytech performs computations fully automatically new jump successors new flow successors 
iterations returns linear state assertion reach true precisely reachable states 
hytech verifies variable free predicate reach unsafe false 
state reach unsafe true confirms thermostat satisfies safety requirement 
parallel composition monitors safety requirements specified state assertions 
thermostat example necessary original automaton variables order specify desired heater utilization requirement 
convenient build separate automaton called monitor role enter unsafe state precisely original system violates requirement 
monitor observe original system changing behavior 
reachability analysis performed parallel composition system monitor 
thermostat example consider task verifying temperature lies midrange minutes operation 
monitor automaton uses variable measure total elapsed time uses variable measure accumulated time temperature range 
unsafe states specified state assertion assigns predicate control modes monitor automaton 
parallel composition monitor automaton thermostat automaton depicted 
variable set compound automaton union variable sets component automata control graph compound automaton cartesian product component graphs 
control mode compound automaton corresponds control mode component automaton control mode second component automaton theta control modes example 
control switch compound automaton corresponds simultaneous control switches matching event labels component automata happen example control switch event label appearing event set component component automata 
notion parallel composition corresponds interleaving model discrete concurrent computation 
hytech constructs compound automaton automatically confirms desired safety requirement reachable states compound automaton correspond safe states monitor automaton 
parametric analysis high level system descriptions design parameters symbolic constants unknown fixed values 
parameters assigned values implementation phase design 
goal parametric analysis determine necessary sufficient constraints parameters safety violations occur 
merely verifying falsifying systems certain values design parameters quantitative information extracted aiding design process 
common uses parametric analysis include determining minimum maximum bounds variables finding cutoff values timers cutoff points placement sensors 
linear hybrid automaton design parameter ff represented variable value changes flow conditions imply ff jump conditions imply ff ff 
states trajectory parameter ff value value ff may differ trajectory trajectory 
value called safe ff add conjunct ff initial conditions unsafe state reachable 
case precisely trajectory state trajectory unsafe parameter ff value states trajectory 
value ff constant trajectory requirements equivalent single requirement state trajectory unsafe assigns value parameter ff 
predicate fffg reach unsafe predicate variable ff true precisely unsafe values ff 
reach unsafe linear state assertions existential quantifier eliminated effectively obtain negation linear predicate characterizes exactly safe values parameter ff 
multiple parameters handled analogously 
open closing train train leaves closed railroad gate controller automaton near gamma gamma gamma gamma train leaves train approaching gamma gamma far train automaton example railroad gate controller consider railroad gate controller figures 
controller modeled automaton lowers raises gate railroad crossing 
detects presence oncoming train closes gate time units measured local clock clock subject drift gate may closed time time units time units approaching train detected 
controller raises gate train exits vicinity crossing 
train modeled automaton 
approaches crossing speed meters time unit 
meters crossing sensor signals approach controller speed train reduced range meters time unit 
second sensor meters past crossing signals exit train 
train may return crossing route meters long 
complete system represented parallel composition controller automaton train automaton 
example event labels synchronize concurrent execution controller train control switches labeled train executed simultaneously ensuring controller receives approach signal train similarly control switches labeled train leaves executed simultaneously ensuring controller receives exit signal train control switches event labels executed individually 
resulting compound automaton shown 
gamma gamma approaching open far open gamma gamma gamma near closing gamma gamma gamma near closed train leaves gamma train parallel composition train automaton controller automaton control modes compound automaton reachable control graph path directed edges initial mode far open 
state mode satisfy state assertion reach modes excluded 
safety requirement interest asserts train meters crossing gate closed 
accordingly unsafe states specified state assertion assigns predicate false control modes compound automaton controller component closed assigns gamma control modes 
hytech automatically verifies property 
example parametric analysis determine advance notice controller requires order meet safety requirement 
purpose replace constant indicates location sensor detects oncoming trains parameter ff 
controller alerted approaching train ff meters crossing 
parametric train automaton shown 
hytech computes controller safety requirement necessary sufficient constraint correctness ff controller lower gate time warned approaching train train meters crossing 
example heater utilization thermostat example parametric analysis determine upper bound time heater active hour operation 
purpose introduce parameter ff specify unsafe states state assertion assigns predicate ff control modes 
hytech compute values ff unsafe state reachable 
largest ff value upper bound value minutes elapsed time 
linear phase portrait approximation hytech returns constraint ff implying thermostat active minutes hour 
accurate approximation hytech computes near gamma gamma gamma ff train ff gamma train leaves approaching far ff ff gamma gamma ff parametric train automaton tighter upper bound minutes 
linear phase portrait approximations thermostat automaton demonstrate safety verification parametric analysis 
clock translation thermostat automaton depicted 
hybrid automaton linear hybrid automaton description involves irrational constants ln 
linear phase portrait approximation applied automaton analyzed hytech 
example value ln approximately invariant ln mode may replaced constraint ln jump condition switch may replaced 
ln ln likewise approximated nearest hytech computes upper bound minutes heater utilization 
hytech give brief hytech detailed tutorial appears user guide 
hytech input file consists parts 
part contains textual description collection linear hybrid automata automatically composed analysis 
second part input contains sequence analysis commands 
analysis language simple language provides primitive data type state assertion variety operations including post boolean operators existential quantification 
gives user flexible framework writing state space exploration programs 
added convenience built macros reachability analysis parametric analysis conservative approximation state assertions generation error trajectories see 
example command lines taken analysis script determining thermostat duration ff heater active hour operation time location time units time location turn time location time units time location turn time location time units time location error trajectory unsafe alpha reachable reach forward init states bad alpha values omit locations hide non parameters reachable unsafe endhide prints spec 
violated parameter values print omit locations bad alpha values alpha values bad alpha values prints spec 
satisfied parameter values print omit locations alpha values line unsafe states specified 
states reachable initial states iteration post operator computed line 
command lines performs existential quantification order obtain predicate characterizes unsafe reachable states constraint parameters 
symbol appears line denotes negation operation 
statements lines produce output spec 
violated parameter values alpha spec 
satisfied parameter values alpha diagnostic information main benefits state space exploration tools lies ability generate error trajectories system fails satisfy requirement 
information debugging system 
system fails satisfy safety requirement error trajectory leads initial state unsafe state 
example thermostat heater active time minutes operation 
debugging trace demonstrates fact generated input commands unsafe reachable reach forward init states empty reachable unsafe print trace unsafe reachable prints safety property satisfied endif reachability analysis invoked lines backward pointers maintained indicate predecessor state reachable state 
information utilized command line constructs error trajectory 
hytech output appears 
corresponds trajectory represents state notice hytech output provides duration flows 
generated trajectory temperature increases slowly possible control mode reaches degrees minutes decreases fast possible control mode reaches degree minutes increases slowly possible time limit minutes 
state trajectory infer heater active exactly minutes elapsed time 
applications hytech number case studies primarily control applications including distri robot controller robot system manufacturing philips audio control protocol active structure controller generalized railroad controller nonlinear temperature controller predator prey ecology aircraft landing gear system steam boiler controller automotive engine chassis level controller 
corbett verified robot controllers written subset ada automatically translating linear hybrid automata analysis hytech 
currently experimenting modeling analysis timed circuits 
tools available simulation hybrid automata shift interpretation linear hybrid automata polka 
interpretation techniques enforce convergence fixpoint computations relaxing state assertions 
verification hybrid systems primarily discrete include clocks recommend specialized tools restricted class timed automata 
symbolic model checkers timed automata include kronos timed cospan timed uppaal 
systems algorithms specific clocks efficient clock systems general algorithms hytech 
analysis hybrid systems complexity primarily continuous domain recommend dynamics theory numerical tools case abstractions nonlinear hybrid automata linear hybrid automata crude reap full benefits automated analysis 
hytech successful applied systems involve intricate interplay discrete continuous dynamics 
availability early versions hytech built mathematica linear predicates represented manipulated symbolic formulas 
observation linear predicate variables defines union polyhedra current efficient generation hytech manipulates linear predicates calls library polyhedral operations 
hytech ported platforms digital workstations running ultrix digital unix hp workstations running hp ux sun workstations running sunos solaris pcs running linux 
hytech home page www eecs berkeley edu hytech includes source code executables online demo user guide graphical front courtesy members uppaal project numerous examples online versions papers pointers additional literature 
requests may sent hytech eecs berkeley edu 
alur courcoubetis dill 
model checking dense real time 
information computation 
alur courcoubetis halbwachs henzinger 
ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science 
alur courcoubetis henzinger 
ho 
hybrid automata algorithmic approach specification verification hybrid systems 
grossman nerode ravn rischel editors hybrid systems lecture notes computer science pages 
springer verlag 
alur dill :10.1.1.43.9418
theory timed automata 
theoretical computer science 
alur henzinger 
ho 
automatic symbolic verification embedded systems 
ieee transactions software engineering 
alur henzinger 
real time system discrete system clock variables 
software tools technology transfer 
alur kurshan 
timing analysis cospan 
alur henzinger sontag editors hybrid systems iii lecture notes computer science pages 
springer verlag 
sangiovanni vincentelli 
iterative algorithms formal verification embedded real time systems 
iccad international conference computer aided design pages 
bengtsson larsen larsson pettersson yi 
uppaal tool suite automatic verification real time systems 
alur henzinger sontag editors hybrid systems iii lecture notes computer science pages 
springer verlag 
burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation 
clarke emerson 
design synthesis synchronization skeletons temporal logic 
workshop logic programs lecture notes computer science 
springer verlag 
corbett 
timing analysis ada tasking programs 
ieee transactions software engineering 
olivero tripakis yovine 
tool kronos 
alur henzinger sontag editors hybrid systems iii lecture notes computer science pages 
springer verlag 
deshpande 
shift programming language run time system dynamic networks hybrid automata 
ieee transactions automatic control 
appear 
dill wong toi 
verification real time systems successive 
wolper editor cav computer aided verification lecture notes computer science pages 
springer verlag 
halbwachs raymond 

verification linear hybrid systems means convex approximation 
editor sas static analysis symposium lecture notes computer science pages 
springer verlag 
henzinger henzinger 
computing simulations finite infinite graphs 
proceedings rd annual symposium foundations computer science pages 
ieee computer society press 
henzinger 
hybrid automata finite bisimulations 
editors icalp automata languages programming lecture notes computer science pages 
springer verlag 
henzinger 
theory hybrid automata 
proceedings th annual symposium logic computer science pages 
ieee computer society press 
invited tutorial 
henzinger 
ho 
algorithmic analysis nonlinear hybrid systems 
wolper editor cav computer aided verification lecture notes computer science pages 
springer verlag 
henzinger 
ho 
hytech cornell hybrid technology tool 
antsaklis nerode kohn sastry editors hybrid systems ii lecture notes computer science pages 
springer verlag 
henzinger 
ho 
note interpretation strategies hybrid automata 
antsaklis nerode kohn sastry editors hybrid systems ii lecture notes computer science pages 
springer verlag 
henzinger 
ho wong toi 
hytech generation 
proceedings th annual real time systems symposium pages 
ieee computer society press 
henzinger 
ho wong toi 
user guide hytech 
brinksma cleaveland larsen margaria steffen editors tacas tools algorithms construction analysis systems lecture notes computer science pages 
springer verlag 
henzinger 
ho wong toi 
algorithmic analysis nonlinear hybrid systems 
ieee transactions automatic control 
appear 
henzinger 
state equivalences rectangular hybrid automata 
montanari sassone editors concur concurrency theory lecture notes computer science pages 
springer verlag 
henzinger 
discrete time control rectangular hybrid automata 
degano gorrieri marchetti spaccamela editors icalp automata languages programming lecture notes computer science pages 
springerverlag 
henzinger puri varaiya 
decidable hybrid automata 
proceedings th annual symposium theory computing pages 
acm press 
henzinger nicollin sifakis yovine 
symbolic model checking real time systems 
information computation 
special issue lics 
henzinger wong toi 
linear phase portrait approximations nonlinear hybrid systems 
alur henzinger sontag editors hybrid systems iii lecture notes computer science pages 
springer verlag 
henzinger wong toi 
hytech synthesize control parameters steam boiler 

abrial borger langmaack editors formal methods industrial applications specifying programming steam boiler control lecture notes computer science pages 
springer verlag 

ho 
automatic analysis hybrid systems 
phd thesis cornell university 

ho wong toi 
automated analysis audio control protocol 
wolper editor cav computer aided verification lecture notes computer science pages 
springer verlag 

theory rectangular hybrid automata 
phd thesis cornell university 


proving dynamic properties aerospace application 
proceedings th annual real time systems symposium pages 
ieee computer society press 
nicollin olivero sifakis yovine 
approach description analysis hybrid systems 
grossman nerode ravn rischel editors hybrid systems lecture notes computer science pages 
springer verlag 
sifakis 
specification verification concurrent systems cesar 
dezani ciancaglini montanari editors fifth international symposium programming lecture notes computer science pages 
springer verlag 
muller fuchs 
hytech verify automotive control system 
maler editor hart international workshop hybrid real time systems lecture notes computer science pages 
springer verlag 

