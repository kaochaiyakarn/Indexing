efficient object oriented variation statecharts formalism distributed real time systems room real time object oriented modeling methodology developed specifically dealing distributed real time systems object paradigm 
describing high level concurrent behavior systems room uses variation basic statechart visual formalism 
variation driven sets requirements 
wanted integrate powerful aspects object paradigm inheritance statechart formalism 
addition experience finite state machine descriptions felt statecharts potential specification implementation 
consequently filtered set basic statechart concepts modifying removing introducing new ones implementability state ofthe art technology 
result highly efficient expressive formalism applied early phases development analysis way implementation 
eliminates error prone paradigm shifts characterized traditional system development processes 
new formalism incorporated commercial toolset extensively design large number real time systems 

graphical finite state machine formalisms widely specify high level behavior complex realtime systems compact easily understood 
attempt implementation happens expressive power lost due complex nature real world systems 
example specification data communications protocol typically ignores various management issues initialization fault recovery associated software entity supports protocol 
merged original specification resulting finite state machine graph incom bran selic limited ontario canada 
statecharts variant finite state machine formalism reduces apparent complexity graphical representation finite state machine 
accomplished addition simple graphical representations certain common patterns finite state machine usage 
result complex subgraph basic finite state machine replaced single graphical construct 
remainder assume basic familiarity statechart formalism 
comprehensive descriptions 
majority cases statecharts far compact equivalent flat state machines enabling graphical representation extended implementation level systems 
benefits significant programming system behavior directly statechart form reap design benefits graphical representation eliminate errorprone manual step translating graphical design representation equivalent programming language implementation 
unfortunately originally defined statechart formalism basic concepts difficult implement real time systems 
applies particularly communication model 
objective define variant statechart formalism amenable direct implementation 
meant modifying replacing inherently difficult concepts tune currently available hardware software technologies 
example generally unrealistic apply concept broadcast communications lossy wide area network 
second major requirement motivated desire integrate statecharts object paradigm 
experience real time system design indicated object paradigm excellent fit real time domain 
particular real time applications naturally expressed net submitted ifip conference hardware description languages applications april ottawa canada works cooperating objects algorithmic form 
representation inherent object oriented systems 
addition object paradigm includes spectrum additional features complement 
example inheritance encapsulation polymorphism generally useful features potential improving productivity system reliability 
years developed conceptual framework real time system design things allowed meet major objectives described 
framework part system development methodology called real time object oriented modeling room 
brief overview fundamental aspects room provided section readers interested depth view consult 
focus remainder particular refinement statecharts developed room shall call want better name 
time substantial body experience supported commercial case tool called 
different real time projects 
summary experience provided section 

overview room room methodology developed primarily distributed real time systems 
focusing particular domain opposed general purpose felt retain compact highly expressive conceptual base 
decided evolutionary approach modeling concepts represent basic vocabulary room typically generalizations extensions concepts common real time domain 
result practitioners domain generally find concepts intuitive absorb difficulty 
fundamental objectives room removal conceptual discontinuities characterize traditional development processes 
discontinuities occur transitions phase development 
example outcome design phase typically design model 
input implementation model models usually formally related 
leads problems 
design model informal guarantee consistent 
design inconsistencies detected implementation difficult fix overwhelming intricacies implementation issues 
furthermore informal models easily misinterpreted semantics unclear 
design intent may properly conveyed 
informal model possibility enforcing design decisions implementation 
uncommon implementors shortcut designs ways impinge architectural integrity system evolutionary potential 
room avoids pitfalls specifying conceptual base formal 
contrast mathematically oriented formalisms stress expressive power cost completely ignoring implemen tation concerns room concepts carefully selected relatively easily efficient implementations retaining expressive power 
fact methodology restricted single domain easier achieve 
formal set concepts possible analyze models consistency completeness point development cycle 
done algorithmic means direct execution 
furthermore room concepts range layering concrete individual low level data structures formally interrelated possible span entire development cycle seamlessly set concepts eliminate conceptual discontinuities 
elimination conceptual discontinuities profound effect way development done 
traditional development processes tended phased phase focused conceptual base analysis model design model 
room appropriate talk activities phases development cycle 
basic activities analysis focuses problem understanding design implementation generates solution problem execution verification measures suitability solution problem 
effort analysis design implementation execution verification time indicated diagram moment activities performed emphasis changes cycle heavy 
argument strongly mathematical formalisms software hardware designers today necessary training properly 
situation rectified state educational system feel necessary deal current realities 
analysis initial part cycle 
clarity room concepts organized basic paradigms 
abstraction levels paradigm classifies modeling concepts scope encompass 
bottom detail level concepts traditional non concurrent programming languages 
level implementation detail occurs 
level concurrency level deals aggregates cooperating concurrent state machines 
highest system level concepts layering encompass entire system 
second paradigm called modeling dimensions paradigm identifies main aspects modeling structure behavior inheritance 
behavior specifies dynamic aspects system structure deals mainly architectural issues system decomposed relationship components inheritance reuse abstraction facility 
experience getting inheritance done properly requires careful dedicated effort equal prominence classical dimensions system design 

system level concurrency level detail level behavior inheritance structure belong concurrency abstraction level 
computational model enforce best described sets cooperating finite state machines 

structural concepts fundamental structural concept concurrency level actor 
actor represents active concurrent entity specific responsibility 
concurrency means actor exist operate parallel actors environment 
actor implementation completely hidden environment actors encapsulation shell 
order actor communicate environment encapsulation shell openings called ports information flow 
information exchanged packaged discrete units called messages 
model messages instances data types sole means communication available actor 
encapsulation shell behavior actor deduced outside observing flow messages ports 
conversely actor perception surroundings limited information received ports 
message actor ports port actor represents specialized interface actor 
major attributes port associated protocol consisting set valid message types allowed pass port set valid message exchange sequences port 
connect data connected disconnect disconnected message note richer definition object interface current object oriented languages limited simple data type signatures 
type interface appears different actors introduced concept protocol class 
protocol class common specification port instances respond protocol 
protocol classes organized inheritance hierarchy 
allows standard subclassing techniques provide abstractions refinements protocols reuse common protocol specifications 
actors implement complex functionality may broken component actors responsible subset functionality 
process decomposition carried arbitrary level 
concept bindings explicitly represent constrain valid communication relationships actors 
binding abstraction underlying communication channel carries messages actor 
bindings drawn ports mutually compatible protocols 
graphically bindings represented undirected arcs connecting ports actors decomposition frame 
general bindings indicate direction communications 
unidirectional bidirectional depending characteristics underlying communication service 
note ports appearing containing actor interface connected internal component actors equivalent concept delegation 
impose fundamental restriction actors layer communicate directly binding 
result decomposition structure architecture actor explicitly captures interactions component actors 
ensures architecture large systems directly visible corrupted result design decisions lower abstraction levels 
similar ports actor instance actor class template creating instances class 
actor classes organized class hierarchies entire system architectures subclassed reused standard inheritance mechanisms 
actor classes single inheritance 
may appear restrictive ability actor incorporate instances actor classes pass part object interface view preferable intricacies managing multiple inheritance 
order accommodate highly dynamic nature real time systems component actors specified dynamic 
actors automatically instantiated containing actor created 
may created destroyed control containing actor 
room notation dynamic actor indicated shaded rectangle actor diagram 

behavior actors structural entities provide logical containers behavior 
behavior actor just attributes 
attributes include set ports set component actors interconnection linkage behavior structure achieved ports 
port bound container actor called port port previous diagram directly accessible actor finitestate machine 
communication model note strong encapsulation actors eliminates possibility shared variables actors dictates pure message communication model 
advantage model general cover software hardware distributed systems 
event model defined arrival message port 
precisely event tuple port signal priority data port port event occurred signal unique application specific identifier captures semantics event message priority dispatch priority message sent data optional application specific passive object embedded message communications asynchronous synchronous 
asynchronous message communication nonblocking sending message sender simply continues activity 
case synchronous communication sender blocked receiver replies message 
reply message takes precedence messages may queued sender communication mode equivalent remote procedure call 
receiving 
addition ports behavior access service access points service provision points pertain layering feature system abstraction level 
omit discussing layered structures room 
distinction synchronous asynchronous communication 
primitive send reply message case receiver effectively decoupled communication mode sender 
means exact actor class synchronous asynchronous client server scenarios 
event processing model chosen run completion programming model behavior actors 
model actor normally receiving mode awaits incoming events 
event occurs actor responds performing activity appropriate event returns receiving mode await events 
new events occurs actor busy processing previous new event queued receiving port automatically resubmitted actor returns receiving mode 
message sent assigned priority 
general intent events higher priority get type precedence events lower priorities 
variety volatility scheduling policies real time systems semantics priorities viewed implementation issue 
approach taken events priorities actors 
departure traditional approach operating systems priorities assigned processes 
view multiplicity interfaces actor highly single actor simultaneously involved multiple concurrent independent threads activity 
example actor process servicing functional request time responding background type maintenance queries 
activities priority difficult define priority fit needs 
general event driven system feel reasonable assign priorities events 
behavior description event processing model just described easily adapted finite state machine formalism 
receiving mode actor mapped states event processing associated transitions 
event triggers transition performs event processing 
room leaves open detail level programming language specify details event handling 
toolset currently supports different object oriented languages special derivative smalltalk useful rapid prototyping rpl 
room finite state machine description consists attributes set ports set service access points set extended state variables set internal functions initial point set states set transitions 
example behavior description shown ports pc saps timing vars integer string func fa integer vars string integer ports ports appear interface containing actor 
interface ports bound internal component actor seen behavior 
example port defined communicates pc protocol class 
service access points similar ports communicate entities adjacent layers containing actor 
example timing facilities provided service access points layer placed beneath actor requires case example service access point provides access timing service 
ports service access points associated protocol 
fact distinction port service access point structural issue viewpoint behavior irrelevant 
message communication model service access points ports 
message arriving service access point handled exactly way message arriving port 
extended state variables instances passive detail level objects finite state machine maintain auxiliary information needs sustain events 
objects manipulated code inside transitions entry exit actions described 
actors fully encapsulated objects accessible actors issues concurrent access objects arise 
example shows sets variables set toplevel state machine state 
internal functions contain common code sequences shared event handling code 
example shows function fa type integer 
initial point source point initial transition 
transition automatically taken enclosing actor created 
typically code transition performs initialization operations 
note initial point equivalent state transient 
states basic statechart formalism allows state decomposed substates 
allows complex behavior uncovered gradually series nested behavior patterns 
feature combination concepts state history group transitions useful features basic statecharts 
state composed optional attributes set extended state variables entry action exit action set sub states set transitions 
features distinguishes states encapsulate contents 
inside state visible outside 
major advantage feature allows different refinements state captured inheritance 
encapsulation feature states means state represents lexical scope 
scoping rules states follow nesting hierarchy similar scoping rules block structured programming languages pascal 
extended state variables containing states accessible contained states way 
example available state contexts 
hand variable available context state 
state variable pertain local variable variable name enclosing scope 
consequence encapsulation transitions cut state boundaries transition broken different segments 
transition segments different scope access different set variables functions 
entry actions optional code segments automatically invoked transition enters state regardless transition taken state 
case segmented transition entry action performed external internal segments transition 
exit actions similar entry actions activated transition taken state 
case segmented transition entry action performed internal external segments 
execution time history state visited substate state 
support deep history history extends innermost level 
considered shallow history encountered situations practice indispensable 
notational convention transition terminates outside border state automatically goes history transition 
special symbol required history exists basic statechart formalism 
desired bypass history transition simply continued new transition segment desired substate initial point 
note concurrent states feature basic statecharts 
point discussed detail section 
transitions transition triggered arrival message event 
simple trigger specified tuple port signal guard means trigger enabled specified signal arrives specified port service access point provided optional boolean predicate guard true 
complex triggering conditions possible arrival set signals set ports trigger transition 
transition optionally code segment associated captures detail level behavior associated event handling 
group transitions transitions emanate border composite state transition emanating state example 
transitions apply equally substates explicitly overridden explained 
scoping rules enforced nesting states apply transitions triggers 
example guard condition access extended state variables functions scope recall ports service access points occur top level available scope 
keeping nested scoping transition triggers scoped way triggers innermost current state take precedence equivalent triggers higher scopes 
example actor state transition originating state take precedence group transition emanates state 
allows overriding group transitions commonly feature 
transition split multiple transition segments choice point transition example 

inheritance considering best apply inheritance chose combine structural inheritance scheme 
view behavior just attribute actor class albeit complex 
possible separate class hierarchies structure behavior decided structural attributes actor provide context behavior ports service access points 
subclass automatically inherits behavioral attributes parent class 
choosing inheritance scheme decided strict inheritance 
means new behavioral attributes added new states transitions variables inherited attributes overridden deleted 
view strict inheritance severely limiting practical applications guarantee behavioral equivalence parent class subclass 
example subclass adds just extra transition triggered timing signal longer claim behavior equivalent exact circumstances parent class 
common ways inheritance refine leaf states parent class decomposing substates subclass 
superclass captures gross behavior common subclasses variants inherit behavior refine detailed behavior 
example set functionally diverse components respond common control protocol 
case control protocol captured single common superclass 
subclasses add idiosyncratic behavior decompositions leaf states parent 
graphically grey rendering indicate inher 
strict inheritance disallows deletion modification inherited attributes subclass assumption subclass retain behavior parent removed 
addition new attributes allowed 
postulated possible substitute subclass place superclass adverse effect 
attributes local attributes drawn black pen 

related 
statecharts statecharts basic inspiration certain key differences 
placed specific structural framework object paradigm 
behavior descriptions fully encapsulated objects actors explicit multiple interfaces 
statecharts hand formal structural boundaries interfaces 
related underlying event model 
statecharts mechanism generation events implicit achieved called broadcast communication principle convey change state component instantaneously 
vaguely defined model intended free modeler concerned implementation issues 
distributed real time systems communication constraints represent dominant aspects design may quite dangerous ignore 
example various impossibility results demonstrated fundamental impact communication way systems designed just way implemented 
contrast room bases event communication models message passing paradigm common paradigms distributed systems practice 
reasons incorporate concept orthogonal concurrent states object 
considered principal features basic statecharts discovered great majority cases concurrent states replaced parent class subclass concurrent communicating actors sa sb furthermore case communication relationship concurrent components explicit 
potential difficulties implicit communication concurrent states possible inadvertently create couplings states 

object modeling technique rumbaugh object modeling technique omt general system development methodology incorporates basic statecharts techniques specifying behavior 
discusses inheritance statecharts model inheritance quite different 
omt substate viewed subclass containing state 
substate inherits transition containing state equivalent saying transition group transition terminology 
interpretation example transition emanating state inherited substates 

published introduces object oriented variant statecharts called closer model basic statecharts 
similar encapsulated object explicit interfaces 
distinction concurrent non concurrent objects 
probably motivated desire stay clear implementation concerns 
case communication model dealing distributed systems feel identification concurrency primary design issue faced early development cycle 
statecharts orthogonal concurrent states explicit communication model 
order accommodate model enforce restrictions communication chained 
deal dynamic structures 
sa sb 
experience years 
years available broader public commercial toolset called objec time supports room methodology 
writing different projects close people trained applying 
wide variety real time projects including specification protocol standards highlevel design distributed systems architectures modeling hybrid hardware software systems performance modeling design implementation industrial communication switching equipment 
general feedback user base quite positive requests modifications addition new concepts formalism particular statechart features eliminated 
commonly reported difficulty partitioning behavior objects embedded state machines tracking event flows span multiple objects time quite difficult follow 
view significant shortcoming object paradigm rectified 
promising development direction prof buhr carleton university 
harel statecharts visual formalism complex systems sci 
computer program vol 

harel pnueli schmidt sherman formal semantics statecharts proc 
nd ieee symp 
logic computer sci 
booch object oriented design applications redwood city ca benjamin cummings 
selic mcgee room object oriented methodology developing real time systems proc 
th workshop case montreal canada 
iso information processing systems open system interconnection lotos formal description technique temporal ordering observational behaviour may 
milner communication concurrency prentice hall 
fischer lynch patterson impossibility distributed faulty process journal acm april 
rumbaugh blaha premerlani eddy lorensen object oriented modeling design prentice hall 
coleman hayes bear introducing statecharts object oriented design ieee trans 
soft 
eng 
vol january 
buhr pictures play designing concurrent real time systems sce dept systems computer engineering carleton university july 
