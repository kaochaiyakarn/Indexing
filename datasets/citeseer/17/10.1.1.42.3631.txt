pass space efficient algorithm finding quantiles rakesh agrawal arun swami ibm almaden research center harry road san jose ca algorithm finding quantile values large unordered dataset unknown distribution 
algorithm features requires pass data ii space efficient uses small bounded amount memory independent number values dataset iii true quantile guaranteed lie lower upper bounds produced algorithm 
empirical evaluation synthetic data various distributions real data show bounds obtained quite tight 
algorithm applications database systems example database governors query optimization load balancing multiprocessor database systems data mining 
quantile ordered sequence data values smallest value fraction total values sequence lie 
accurate estimation number tuples satisfying predicate prerequisite query optimizer 
suggested query optimizers maintain information attribute values distribution quantiles estimation procedures proposed quantiles 
information quantiles useful balancing workload multiple processors parallel database system 
current address silicon graphics computer systems shoreline blvd mountain view ca 
probabilistic estimates quantile values adequate applications require guaranteed bounds quantile values 
example guaranteed bounds quantile values important operation governors relational database systems 
governors provide feedback users response times queries 
governor indicate expected response time provide upper bound response time 
example ibi provides kind feedback 
guaranteed bounds response times required governor guaranteed bounds quantile values estimate selectivities 
need predictive governors major user requirement 
example application guaranteed bounds quantile values cite algorithm mining association rules 
algorithm concurrently synthesizes functions form making pass relation subset attributes cut threshold depends values computation requires determination different quantile value guaranteed bounds 
desiderata cited applications yield desiderata algorithm finding quantiles ffl require prior knowledge data distribution 
ffl require pass data data may large fit memory 
ffl space efficient quantiles values attributes relation may need obtained 
ffl true quantile guaranteed lie lower upper bounds produced algorithm bounds tight 
algorithm features 
related straightforward method finding quantiles sort data pass sorted data find desired values 
large datasets sorting requires multiple passes data may incur large costs processing costs 
procedure repeated attribute relation quantiles desired making computationally expensive 
technique recursively uses linear median finding algorithm proposed 
avoids external sorting obtains accurate quantiles 
algorithm pass algorithm processes data blocks multiple times 
cost finding quantiles reduced random sampling 
idea take random sample data sort sample values sorted sample estimate quantile values 
quantile values produced random sampling guaranteed error bounds 
algorithm finding quantiles proposed 
algorithm maintains sorted stack quantile estimated values counts updates estimates new data values scanned piecewise parabolic curve fitting technique 
guarantees true quantile values technique 
munro paterson describe single pass multi pass algorithms determining quantiles call selection problem 
algorithms probabilistic may fail come correct bounds quantiles 
deterministic single pass algorithm describe requires storage storage order size data 
method estimating quantiles works follows 
range values partitioned intervals 
intervals known bins 
single pass data count values bin accumulated 
bins scanned lowest highest values quantiles determined counts bins 
method analyzed 
glance method appears meet criteria 
pass needed quantile guaranteed lie bin modest computational storage resources required 
problem data distribution known priori simple way determine boundaries bins 
determining bin boundaries hard determining quantile values 
absence knowledge bins equal width ranging minimum value maximum value 
problem may know minimum maximum values 
sampling approximate values requires 
minimum maximum values known problems arise values close fall bin high frequency 
scenario common real data clusters high frequency values tend occur 
multiple frequent values single bin may result highly inaccurate estimates quantile values 
algorithm propose require priori determination bin boundaries 
way viewing algorithm dynamic version algorithm bin boundaries determined fly continuously adjusted 
formal problem statement quantile problem 
quantile ordered sequence data values smallest value sequence fraction total values sequence lie 
express solution quantile problem terms problem 
fx large unordered dataset distribution known priori 
denote kxk cardinality theta kxk 
target count assuming kxk define problem leq problem equal 
find smallest value kx fx jx exact solution leq problem solves quantile problem 
approximate solution leq problem find value satisfying conditions may smallest value 
approximate solution provides upper bound quantile value 
consider problem am lt problem 
find largest value kx fx jx approximate solution am lt problem provides lower bound quantile value 
find approximate solutions leq am lt problems guaranteed bounds desired quantile 
solve am lt leq problems pass obtain lower upper bounds respectively quantile value solving problems different values pass obtain different quantile values symmetry obtain lower upper bounds quantile value solving approximately problems geq problem greater equal 
find largest value kx fx jx am gt problem greater 
find smallest value kx fx jx outline rest organized follows 
section describe generic algorithm customized solve problems described 
prove algorithm correct show example execution trace 
section empirical evaluation algorithm synthetic real data 
conclude summary section 
algorithm assume ease exposition input dataset set simple values 
general may ary relation functions including functions attribute values may defined maps tuples relation simple values 
maintaining separate set counters function proposed technique finding quantile values functions single pass 
generic algorithm show customized solve specific problems described section 
generic algorithm algorithm uses data structure ordered list elements maximum number elements assume 
element value count pair 
notations value count respectively refer value count fields list element interpretation fields count approximately count sequence entries fall value value 
list initially empty 
operator generic comparison operator specific section 
need computed input value iterating elements counts easily maintained incrementally 
omitted details avoid distracting reader main ideas algorithm 
customization generic algorithm ffl geq problem maintain increasing order value field elements 
operator comparison operator 
ffl leq problem maintain decreasing order value field elements 
operator comparison operator 
ffl am gt problem set kxk gamma 
solve leq problem new value ffl am lt problem set kxk gamma 
solve geq problem new value ordered list maximum user specified elements initialized empty forall values exists element suchthat value set count count number elements insert elsif value count discard element set gamma count gamma count count delete insert find value set count count count delete output value geq problem increasing order leq problem decreasing order am gt problem kxk gamma solve leq problem am lt problem kxk gamma solve geq problem generic algorithm customization remarks ffl values numeric leq am lt problems solved solving geq am gt problems negated values vice versa 
general need numeric negation values defined values ordered quantiles determined 
ffl multiple problems solved single pass maintaining separate list problem 
example show example execution algorithm geq problem 
interested finding largest value input values greater equal target count 
list structure allowed maximum elements 
number colon input value list colon shows state element list represented value count algorithm returns answer happens exact answer 
complexity time complexity algorithm kxk delta logk new value inserted sorted list size problem requires theta memory words 
experiments indicate see section small value sufficient estimate quantiles acceptable errors 
correctness discuss correctness algorithm geq problem 
correctness proofs problems similar 
lemma 
define element count computed point time 
values read 
target count maximum number elements input stream execution insert insert insert increment count delete absorbing count previous insert discard total count target increment count delete count remaining target insert delete count remaining target insert increment count delete count remaining target insert delete count remaining target insert discard total count target increment count delete count remaining target insert delete count remaining target algorithm returns sorted stream correct answer geq example elements times 
proof 
time algorithm discards input value value 
case contribute count contributes count element element value element value cases value increased value value remains unchanged value algorithm deletes element count added gamma count 
value remains unchanged equal delta delta delta gamma 
see equal consider case algorithm deletes element value falls value inserted position 
values old forgotten lemma 
processing input values proof 
input value discarded values processed contribute count equal value reduced deletion element cases element element deleted 
element deleted current value equal current value know element deleted count added gamma count 
value remains unchanged 
theorem 
algorithm correctly solves geq problem 
proof 
assumed kxk set processed lemma lemma values greater equal value 
algorithm correctly reports value result 
additional heuristics possible construct pathological cases proposed algorithm 
worst case error solving problems kxk gamma khk 
example geq problem worst case arises khk values input data stream consists khk gamma largest distinct values smallest value 
case largest khk gamma values occupy khk gamma positions smallest value occupy position 
heuristics avoid worst case behavior 
heuristics 
basic idea heuristics perturb way correctness compromised position opened avoid accumulating large count position 
heuristics 
input values heuristically chosen parameter gamma count gamma count count discard 
suppose input value incremented count count theta heuristically chosen parameter gamma count gamma count count discard 
suppose input value incremented count count theta gamma count gamma count count discard unfortunately heuristics improve accuracy 
fact degrade accuracy example shows 
assume khk consider input stream geq problem algorithm applied data stream gives answer exactly correct 
heuristic set applied data stream get answer 
fortunately results synthetic real data show empirically observed accuracy proposed algorithm 
worthwhile incur additional implementation complexity due heuristics 
experiments indicated average heuristics improve accuracy 
wish bruce lindsay suggesting version heuristic 
empirical evaluation conducted experiments empirically assess behavior algorithm 
show results experiments generated distributions uniform distribution zipf distribution 
zipf distribution choose zipf parameter corresponds distribution 
experimented distributions choosing different values zipf parameter similar results 
number values kxk 
number distinct values fixed kxk 
values positioned randomly quantile bounds determined 
denote number tuples estimated bounds quantile 
denote number tuples true bounds corresponding quantile 
note value quantile duplicated times relative error computed gamma kxk theta note algorithm gives bounds quantile values 
specific quantile value desired bounds purpose 
domain input values numeric take average bounds 
error report sum errors bounds true quantile value 
conservative error measurement sense reporting sum errors 
practice pick bounds quantile value incur errors 
number runs carried sequence data values varied changing seed 
run relative error described calculated 
error estimated averaging errors runs 
calculated confidence interval 
sufficient runs performed ensure confidence interval 
varying size varied maximum size steps keeping kxk fixed 
results experiment shown table 
observe reasonable size error rates quite flat 
remaining experiments fixed maximum size 
varying size input test hypothesis reasonable size case results error behavior different stream sizes different values kxk 
table uniform distribution zipfian distribution size size table varying size uniform distribution zipfian distribution kxk kxk table varying size input show errors measured change kxk varies 
see increasing number values stream affect error significantly maximum size kept fixed 
assume set byte integers 
count maintained bytes 
entry byte entry determine megabyte memory 
shows small bounded amount memory obtain accurate bounds quantiles 
algorithm attractive number values stream increases 
comparison random sampling compare accuracy algorithm random sampling random sampling technique estimate quantiles 
random sampling amount memory sample structures needed computing values 
errors produced algorithms shown table kxk size set 
see accuracy algorithm comparable random sampling 
addition true quantile values guaranteed lie bounds produced algorithm random sampling probabilistic algorithms unable provide 
uniform distribution zipfian distribution alg sampling alg sampling table comparison random sampling synthetic data reality check assessed accuracy behavior algorithm data obtained customer databases compared random sampling 
data sets values data set values 
results shown tables 
see algorithm somewhat accurate random sampling 
note real data differs synthetic data generated real data duplicates 
data distributions necessarily uniform zipfian 
data set data set data set alg sampling alg sampling alg sampling table comparison random sampling customer data sets data set data set data set alg sampling alg sampling alg sampling table comparison random sampling customer data sets summary algorithm estimating quantiles features ffl require prior knowledge data distribution 
ffl requires pass data 
ffl true quantile guaranteed lie lower upper bounds produced 
ffl bounds produced quite accurate shown errors observed experiments synthetic real data 
ffl space efficient 
accurate results obtained small bounded amount memory independent number values dataset 
shown case queries involving multiple attributes multi dimensional equi depth histograms superior equi width histogram algorithm multiple sorts proposed purpose 
finding multi dimensional equi depth histograms finding quantiles multi dimensions 
interesting explore algorithm proposed generalized multi dimensions 
probabilistic analysis proposed algorithm characterize average case behavior challenging open problem 
acknowledgments 
tomasz participation initial discussions 
peter haas bruce lindsay guy lohman larry stockmeyer comments 
agrawal imielinski swami mining associations sets items massive databases acm sigmod may 
blum time bounds selection journal computers systems 
cochran sampling techniques john wiley sons new york ny rd edition 
dewitt naughton schneider parallel sorting architecture probabilistic splitting st int conf 
parallel distributed information systems miami beach florida december 
srivastava equidepth partitioning data set finding medians technical report tr computer science dept univ minnesota 
jain chlamtac algorithm dynamic calculation quantiles histograms storing observations cacm vol 
oct 
dewitt equi depth histograms estimating selectivity factors multi dimensional queries acm sigmod chicago illinois june 
munro paterson selection sorting limited storage theoretical computer science vol 

piatetsky shapiro accurate estimation number tuples satisfying condition acm sigmod boston june 
schmeiser deutsch quantile estimation grouped data cell midpoint communications statistics simulation computation 
selinger astrahan chamberlin price access path selection relational database management system acm sigmod june 
zipf human behavior principle effort addison wesley reading ma 
