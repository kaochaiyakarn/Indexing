tree indexing multiple processors edward nai tam ada wai chee fu department computer science engineering chinese university hong kong hong kong mail cs cuhk hk investigates performance parallel tree spatial data high dimensional objects 
due large number bounding values bounding box tree disk page contain bounding box 
parallel binary tree pbr tree proposed facilitate costly node access 
analytical performance evaluation pbr tree 
improved multiplexed tree data proposed achieve high throughput short response time concurrent small range queries 
foreseen database management system dbms shall able handle lot new data representation 
multimedia data spatial data represented vectors multidimensional spaces 
typical operation spatial data involves range queries retrieve data objects intersecting user defined hyper rectangle search rectangle 
visual data image multimedia data 
features acquisition image includes image segmentation region detection image histogram 
features color texture shape indexing 
feature vector typically extracted image 
due high complexity representation multimedia data dbms able handle large index dimensions 
spatial data multidimensional space easily mapped linear space spatial access methods sam proposed handling data 
survey 
tree variants packed tree tree tree common cited sams 
tree tree tree height balanced tree structure 
due space limitations omit detail description tree 
maximum minimum number entries node respectively 
average number entries node 
tree contains index records height ln mn assume size bounding box representation large bounding box fits page 
searching done descending tree root node manner similar tree 
child nodes bounding boxes overlapping search rectangle accessed 
tree branching search path 
number pages accessed single data object ln mn performance searching improved shorter tree 
nodes accessed case branching cost query increases search rectangle size 
motivation need parallelism tree reasons 
increase database capacity 

increase throughput 

minimize response time 
high throughput short response time dbms parallelism tree satisfy requirements scalable distinguished processor bottleneck 
corollary queries large search rectangle activate processors possible 
minimum load queries small search rectangle activate processors processors handle concurrent queries 
proposed architecture complies requirements 
intended server serves multiple users submit queries small search rectangle concurrently 
data objects high dimensional spatial data key bounding box size equal page size 
propose hardware architecture consisting processors connected network 
processor attached disk 
sibling nodes tree distributed different pairs processors proximity index 
pair processors build parallel binary tree accessing hit subnodes parallel minimize node access time 
organized follows 
section surveys previous efforts parallelize file structure 
section proposes parallel binary tree way facilitate node access 
section analyzes behavior proposed structure 
section proposes multiplexed binary tree parallel indexing structure multimedia data 
section gives direction 
survey assume hardware architecture consists processors connected network processor local disk attached 
different approaches designing parallel tree 
independent trees 
super nodes 
node distribution multiplexed tree independent trees processor stores manipulates subset data set 
independent tree built processor 
searching executed processor separately 
types data distribution data distribution data objects assigned different processors round robin fashion 
data load processors equal 
maximum height tree ln mn gamma ln rj reduced constant factor 
retrieval data object independent tree requires ln gamma ln rj page accesses 
processors activated size search rectangle violates minimum load requirement 
space partitioning data objects inserted tree multidimensional space assigned processors 
objects may evenly distributed space possible data inserted tree processor bottleneck system 
super nodes scheme tree built large nodes supernode 
supernode containing dm entries partitioned subnodes 
subnode fits dm pages 
processor stores different subnode 
node accessed reading constitute subnodes parallel processor 
executed page access time 
similar design tree 
due large fanout node maximum height super node tree reduced lnm lr performance improved query small 
violates minimum load requirement processors activated regardless size query 
multiplexed mx tree root processor processor processor fig 

structure multiplexed tree scheme child nodes distributed processors see detail description 
assignment nodes proximity index 
proximity measurement similarity rectangles node assigned processor nodes stored proximity index 
pointer contains processor id tree level processor current node activates processors storing child nodes accessed level 
small query processors activated level 
large query overlaps bounding boxes nodes accessed parallel different processors 
idle processors serve queries 
fulfill scalability minimum load requirements 
processor needs pages access time access node ln mn pages accessed single data retrieval 
comparing super node mx tree response faster single small query small search rectangle 
complies requirements 
processor assignment algorithms survey processor assignment heuristics 
heuristics include round robin new node assigned processor round robin fashion 
minimum area heuristic tries balance area covered processor 
new node assigned processor smallest area covered 
minimum intersection heuristic tries minimize intersection area nodes assigned processor 
proximity index pi heuristic assign node processor lowest proximity index 
tree applies proximity index heuristic assignment algorithm 
detail description heuristics 
proximity index proximity measurement similarity dimensional rectangles defined probability query rectangle overlap rectangles 
number queries retrieving total number queries 
jqj jqj proximity index measures similarity rectangle set rectangles fr defined max proximity set sibling nodes having parent node stored processor 
low means improbable node accessed simultaneously query inserted 
binary tree parallel processing mentioned processor read pages node access tree 
typically entries overlap search rectangle small query page accesses wasted 
propose divide node subnodes introduce parallel processing binary tree 
show algorithm performs better sequential reading pages 
proposed architecture consist processors connected network disk attached 
approach requires little synchronization 
structure structure parallel binary tree pbr tree similar ordinary tree fanout 
node consists subnodes 
subnode contains tuple bounding rectangle 
non leaf nodes pointers child subnode containing node id leaf subnode contains pointer pointing binary tree processor id data object see null value 
subnodes node stored different processors say processor processor 
bounding rectangle denotes subtree data object pointed subnode overlaps search rectangle subtree rooted nodes processor nodes processor fig 

structure pbr tree searched 
interested data subtree 
similarly overlaps search rectangle subtree rooted searched 
processor number subnode stored ln gamma number leaf subnodes tree 
searching depth search approach applied 
processor starts searching root subnode processor processor 
processor examining subnode tuple finds overlaps query rectangle proceeds subnode pointed result checking boolean value overlap 
value sent message processor 
subtree traversed proceeds subtree pointed subnodes subtree pointed accessed message overlap alse received 
algorithm shown 
processor processor time time time subnode access message fig 

timing diagram example example subnode overlap query 
processor access subnode respectively see 
processor detects left branch see contain answer sends overlap alse processor access subnode accesses subnode returns result 
processor send overlap alse pn processor empty searching terminated 
similarly processor retrieve query completed 
searching current subnode current subnode root subnode pn set pointers pointing nodes stored result endif current subnode leaf node overlaps search rectangle add object pointed result endif overlaps search rectangle send overlap rue apply searching subnode pointed send overlap alse remove pointers subnodes rooted pn endif subnode pointed pn apply searching subnode pointed endif endif receiving message receiving message overlap alse remove pointers subnodes rooted pn endif fig 

algorithm binary tree cost small query pbr tree retrieve data page access time 
large query data objects retrieved processor read pages 
time complexity query gamma note time processor determine subnode accessed synchronization 
reduces communication cost 
performance analysis pbr tree performance erf pbr tree formulated erf possible path path expected access time variable name definition leaf subnodes leaf subnodes retrieved prob 
search rectangle bounding rectangle node child node height tree proportional number leaf subnodes value proportional query rectangle size 
possible combinations subnodes retrieved 
bounding rectangle parent nodes parent contains sparse area possible exists query rectangle overlapping parent objects inserted tree 
parameter probability processor inspecting node determines overlaps overlap child nodes node path path minimum set nodes visited root node leaf nodes query 
possible path assuming cost message passing computation negligible access time proportional maximum number subnodes pages accessed processors 
processor inspecting subnode tuple total number subnode accessed node pn leaf node pn path delta gamma path subnode accessed chosen algorithm shown 
pointer pointing subnodes removed pn overlaps see algorithm value usually larger 
root subnodes 
processor assigned pbr tree 
equation re written erf subnode access time possible path path max fa bg analysis evaluate performance pbr tree 
executed number simulation experiments basis mathematical cost model described equation 
assume subnode access costs page access performance erf pbr tree expressed term page access time 
parameter values parameter values ng access time speedup fig 

performance pbr tree fig 

access time comparing sequential reading pages pbr tree performs better see 
value smaller give shorter response time shorter tree height 
equation fewer values accumulated shorter tree 
larger gives higher speedup ln strictly increasing function 
access time pbr tree increases parameter nodes removed pn higher total number nodes accessed increased 
higher access time result 
approach access time close node access time nodes accessed 
access time drops dramatically small see size path small small fig 

access time multiplexed binary tree tree node fig 

tree tree better response time super node method lead higher throughput 
adopt general idea tree 
high dimensions node access involves sequential reading pages costly 
subnodes read may overlap query 
propose multiplexed binary tree accesses hit subnodes searching binary tree 
decompose tree node subnodes build small binary tree 
pair processors chosen accessing tree 
assignments processors proximity index binary trees built processors level nodes similarity 
searching searching algorithm similar tree 
tree node access activate processors 
example processor access root determine child nodes accessed searching binary tree 
activates processors responding child nodes processor instance 
performance small query tree takes lnf time access node 
large query needs gamma pages access time 
perform better tree especially small queries 
node access processors activated 
idle processors serve queries 
large query hit child nodes accessed parallel 
tree increase throughput especially large queries multi users environment 
propose multiplexed binary tree multi users environment 
node access accelerated parallel binary tree 
small query access node lnf pages access time compared pages access time tree 
processors activated node access multiple queries large queries executed parallel 
higher throughput super node method 
proposed multiplexed binary tree suitable method multiple users environment search rectangle size typically small 
direction includes applying idea pbr tree sam 
acknowledgment research sponsored partially xxxxx beckmann 
kriegel schneider seeger 
tree robust access method points rectangles 
proc 
acm sigmod pages september 
david dewitt jim gray 
parallel database systems database processing passing fad 
proc 
acm sigmod volume pages december 
gong zhang chuan 
image database system content capturing fast image indexing 
int 
conf 
multimedia computing systems pages 
guttman 
trees dynamic index structure spatial searching 
proc 
acm sigmod pages june 
ibrahim kamel christos faloutsos 
parallel trees 
proc 
acm sigmod pages june 
niblack barber equitz flickner petkovic yanker faloutsos taubin 
qbic project querying images content color texture shape 
spie conference storage retrieval image video databases pages 
kim 
parallel proceeding large node trees 
trans 
computers pages 
roussopoulos 
direct spatial search pictorial database packed trees 
proc 
acm sigmod pages may 
samet 
design analysis spatial data structures 
addison wesley 
bernhard seeger ake larson 
multi disk trees 
proc 
acm sigmod pages may 
sellis roussopoulos faloutsos 
tree dynamic index multi dimensional objects 
proc 
vldb conf pages england september 
