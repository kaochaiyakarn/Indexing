addressing dynamic issues program model checking willem visser riacs nasa ames research center moffett field ca usa riacs edu 
model checking real programs active research area 
programs exhibit characteristics model checking difficult complexity state dynamic nature programs 
address issues context java pathfinder jpf model checker 
firstly show state java program encoded efficiently encoding exploited improve model checking 
show symmetry reductions alleviate problems introduced dynamic nature java programs 
lastly show distributed model checking dynamic program achieved furthermore dynamic partitions state space improve model checking 
support findings results applying techniques jpf model checker 
software playing increasingly important role everyday lives sadly software failure 
nasa point painfully clear mars polar lander lost due software related problem estimated cost spa 
agree software failures caught design phase case design phase missing tools techniques analyze designs missing 
testing implementation number way finding errors software systems 
testing expensive importantly incapable finding subtle errors timing errors concurrent system 
model checking extensively find subtle errors hardware protocol designs cw hol 
model checking deemed inadequate analyze software code due high level detail code 
groups industry academia analyzing source code model checking 
source code model checkers translation source code input notation model checker bandera cdh java pathfinder hp dis java model checkers ax hol slam br model checkers 
drawback translation approach certain language constructs difficult translate tools dspin ax extended back model checker spin cases hol improve efficiency 
adopted different approach creating custom model checker java 
call tool java pathfinder henceforth referred jpf 
jpf explicit state model checker takes input java bytecode 
structured search algorithm uses special java virtual machine jv jpf execute bytecode instructions time 
order implement depth algorithm jv jpf needs backtracking capability 
tool written java executed java virtual machine just jvm 
executing bytecode analyze java analyze programs source code libraries code loaded web languages bytecode translations exist cd 
jpf integrated bandera system cdh case bandera doesn need translation tool able handle java directly bandera functionality slicing abstraction available improve model checking 
looks history model checking input notations clear evolution simple guarded command style notations ones complex data structures 
believe trend continue soon complex dynamic data structures features typical programming languages common place 
purpose highlight difficulties possible solutions encountered developing efficient model checker handle dynamically evolving software systems 
hope help developing similar systems 
clear static analysis system model checking greatly benefit verification slicing system respect certain property checked finding independent statements allow partial order reductions focus purely dynamic optimizations prior information required 
interested reader referred discuss static analysis partial order reductions techniques abstraction jpf employs doing model checking 
model checking software considered hard due complexity state system premise state model checking god sto 
address problem section showing large state collapsed smaller exploited improve explicit state model checking novel form symmetry reductions state reduce size state space lastly garbage collection improves model checking 
state space explosion problem reduced goes away 
memory larger programs checked 
section extend distributed model checking algorithm spin ls exploits memory number workstations dynamic context java 
section contains directions 
complexity state issues address complexity state 
limitation current model checking tools handle dynamic structures 
fact dspin extension model checking spin hol back java model checker tool dis introduces direct support dynamic allocation 
representation state creating model checker free choose representation state 
aim able handle dynamic allocation efficiently maintain representation close possible suggested programming language 
state composed main components static area array entries class loaded 
entry contains values static fields class monitor associated 
monitor contains information lock class thread holding lock threads waiting lock new class needs loaded new entry static area created fields monitor initialized 
loaded class unloaded execution instruction unloaded backtracking step 
dynamic area array entries object 
entry contains values fields monitor associated 
objects created explicitly specific bytecode instructions 
object created entry added dynamic area fields monitor initialized 
objects destroyed explicitly java removed referenced anymore see section 
thread list list containing information relative thread 
contains status thread information scheduler stack frames created method calls 
new entry created new thread created modified time execution bytecode instruction changes state thread stack frames 
components dynamic grow shrink freely execution program imposing limit size state 
novel feature spin process allocated dynamically dspin data allocated dynamically limit imposed size state 
fields monitor structures static area 
collapsing state dynamic features java language class loading object creation method invocation require complex data structure record state system see example state structure previous section 
furthermore order efficient explicit state model checking needs record states visited hash table 
examples table clearly see inefficient store states original complex form relatively simple java programs kb state required 
tool spin state compression option clear systems require complex state description compression requirement 
collapse algorithm successful state compression spin hol decided extend jpf 
rationale collapse method new state generated large parts state unchanged 
call state stored difference predecessor states need compared determine state visited inefficient 
collapse associate particular part state index 
state collapsed list indexes indicating components compose state 
decomposition unique comparing indexes possible determine state equality 
order generate indexes created set pools 
pool ordered set repetitions 
time state needs stored collapsed component inserted pool pool returns index corresponds position component pool 
element pool added index copy pool returned 
assumption size pool small single component appears states 
spin pools state components global variables processes asynchronous channels 
asynchronous channels counterpart java think global variables static fields spin processes java threads similar 
imply try state compression include pool static area dynamic area threads 
inefficient components structure exploited 
example assignment field object dynamic area thread change create large new pool entries 
pool stack frame thread monitor fields data entry field assignment change stack frame entry method assignment leaving frames thread collapse old values fields entry 
deciding components compress pick components examples tables available jpf webpage ase arc nasa gov jpf change order get maximum benefit 
choose pool fields data static dynamic area monitor data shared static dynamic area method stack frames lastly thread information thread status seldom changes 
seen table compression algorithm number different elements pools quite small reduction memory requirements impressive 
note execution time reduced 
new state stored compared states see visited 
operation highly inefficient uncompressed states compared complexity states quite efficient compressed states arrays integers compared 
states transitions pools entries memory time state size mb sec bytes compression collapse optimized backtrack states transitions pools entries memory time state size mb sec bytes compression collapse optimized backtrack table 
comparison jpf compression collapse optimized backtrack optimizing backtrack compression jpf usable clearly slow memory run time handle large examples 
profiling system revealed problem way handled backtracking 
spin decided store copy state depth stack backtracking purposes spin uses backwards transition unwind moves backtracking state change large copy previous state 
reason bytecode level java statement correspond bytecode instructions unwinding bytecode instruction complicated 
graph shows memory usage optimizing backtracking varies visit new states reached 
graph different scale depth stack shown 
evident memory usage strictly related depth stack uncompressed state stored stack 
memory usage memory usage stack depth fig 

memory usage bytes execution optimized backtracking 
stack depth represented different scale simple novel solution store compressed state stack reverse collapse operation recreate original state backtracking 
fact store compressed state stack leave state hash table 
reconstructing state quite straight forward collapsed information contains indexes different components state just need put back reverse lookup pools original component corresponding index retrieved 
efficiency components changed restored 
shows memory usage introducing optimization backtrack 
slight dependency memory stack depth jpf executes bytecode instructions typically don level atomicity model checking java statement line java code transition 
memory store states 
interesting see memory usage optimization intersect stack depth comes zero close 
table contains results obtained optimized backtracking technique 
evident memory usage optimized see amount memory search finished 
execution time considerably reduced necessary put copy state stack anymore 
exploiting symmetries symmetries model checking reduce size state space ej id bdh 
basic idea visit subset state space representative state space symmetry relation influence properties checked 
typically symmetry reductions exploit structure system analyzed identical processes scalar sets bdh id 
keeping focus exploit symmetries inherent dynamic systems address symmetry issues underlying state representation symmetry state 
class public static int value class public static int value symmetry states transitions class main extends thread public static void main string args new main true start new main false start public int private boolean public main boolean public void run value value fig 

static area symmetry reduction specifically want exploit symmetry classes loaded static area objects created dynamic area 
recall section static dynamic area implemented arrays exact position class object arrays relevant comparing states 
nondeterminism concurrency environment cause classes loaded objects created different orders different execution paths 
comparing possible permutations array entries comparing states computationally expensive decided canonization function achieve efficient symmetry reductions 
idea state generated calculate canonical representation state representation state comparisons 
canonization function known technique achieving symmetry reductions bdh id calculating function expensive 
interested limited form symmetry reduction calculate canonical state representation efficiently imposing order entries static dynamic areas 
due dynamic nature java programs ordering calculated model checking 
position classes objects ordering require positions change inefficient 
idea dynamically map class object position static dynamic array class object loaded created 
backtracking mapping preserved reused executing different path 
shows piece code classes loaded static fields accessed 
threads executing accessing different class 
depending scheduling class loaded class vice versa 
symmetry reduction classes allocated static area order loaded interleavings lead different states occupies position front symmetry reduction keep mapping class names positions respect class got loaded see reduction number states see table 
note classes chosen alphabetical ordering violate condition positions change due ordering 
class names unique simple mapping names positions sufficient achieve canonical representation static area 
dynamic area quite straight forward objects names different objects created easily identified 
guess bytecode instruction created object identify works fine see results long instruction executed execution path 
allocation instructions executed create object allocation loop 
deal added identifier object occurrences instruction number times instruction executed 
note occurrence number incremented allocation decremented allocation backtracked 
class extends thread public object public void run new object class extends thread public object public void run new object class main public static void main string args new start new start symmetry states transitions fig 

dynamic area symmetry reduction sufficient identify object lead efficient symmetry reduction results 
bytecode instruction executed different threads 
number occurrences thread executes instruction depends interleaving position object dynamic area 
way address problem add identifier object thread created objects count number occurrences instruction thread separately see row table 
basic approach applied static dynamic areas 
dynamic area unique identifier object position dynamic area necessary information bytecode instruction created object number occurrences instruction thread created object order create dynamic ordering 
showed results small examples section difference symmetry reductions realistic examples quite symmetry reductions example table states symmetry reduction fold reduction 
furthermore time overhead non existent applying symmetry reduction example reductions see increase execution time 
symmetry reduction orthogonal kind symmetries structure system 
note id bdh don require extension model checker input language order achieve efficient symmetry reductions 
lastly symmetries exploited due different interleavings thread execution 
partial order reduction techniques avoid exploring interleavings mitigate effect symmetry reduction 
method reduce symmetries class extends thread public object public void run main class extends thread public object public void run main class main public static void main string args new start new start public static object return new object symmetry states transitions thread fig 

instruction called different threads avoided partial order reductions importantly applied requiring expensive static analysis determine transition independence 
garbage collection java offer primitive deallocate object 
created object continue exist garbage collected 
object garbage collected available 
public class main public static void main string args object true new object fig 

simple example infinite states want model check software written java need take account garbage collection 
java programs rely presence simple examples see infinite number states garbage collection allocation increases size state causing infinite state space 
garbage collection model checking introduced implemented algorithms counting mark sweep jpf 
results table show counting mark sweep perform implementation 
examples analyzed creates temporary objects adds elements list removes creating objects collected creates double linked list loses pointer 
examples include concurrency threads executing operations concurrently 
table reported number states number transitions memory usage verification execution time number objects collected number times algorithm activated mark sweep 
memory time gc states transitions mb sec objects runs gc mark sweep count memory time gc states transitions mb sec objects runs gc mark sweep count memory time gc states transitions mb sec objects runs gc mark sweep count table 
results obtained gc example heavily affected garbage collection 
fact temporary objects created quite common java adds extra information state equivalent states different garbage collection active 
memory requirement algorithms mark sweep slightly faster ratio objects collected run quite high case examples 
second example shows overhead introduced algorithms example produce object collected 
extra memory algorithms true execution time 
mark sweet algorithm activated times reflected higher execution time transitions cause algorithm executed 
algorithm activated instruction produce garbage unfortunately bytecode instructions 
example leads considerations 
count algorithm able detect cycles garbage 
consequence garbage detected algorithm 
secondly garbage mark sweep algorithm state space reduced reason states garbage removed different variables program 
reduction memory states garbage collected smaller 
note case dspin necessary store complete state stack garbage collection state changed irreversible way need collapsed version state stored stack 
distributed memory explicit state model checking suffers state explosion problem analyzing software programs problem severe due higher level detail programs 
order deal issue different solutions tried distributed model checking ls sd 
section improved technique adapted dynamic nature systems checked tool 
ls presents distributed memory implementation spin 
goal analyze issues implementing distributed model checker input model dynamic system order guide development parallel model checker 
algorithm ls extends standard depth visit algorithm distributed visit algorithm 
new algorithm longer depth visits states paths system 
real issue algorithm allow ltl model checking limitation overcome bbs 
basic idea divide state space partitions 
node workstation store states belong partitions 
time new state reached partition function determine node owner state state sent storage analysis state successors 
state visited node visit continues depth node 
node starting state belongs start visit waiting incoming messages 
search completed nodes waiting messages sent received 
major issue algorithm picking partition function minimizes memory required node time limits number messages required nodes 
improvements algorithm ls adapted system modification 
making tool operational worked extensions mainly aiming reduce communication overhead 
ls modification algorithm called sibling storing reduces number messages sent 
time new state needs sent node sibling reached local copy state sent kept local hash table 
encountered messages need sent know received node 
issue technique number siblings grow quickly consume memory space allocated store actual local states 
developed modified version technique called sibling caching stores siblings cache 
empty space left cache element discarded new sibling added 
technique proved quite effective see table limited size cache performs terms messages avoided complete sibling storing 
table shows traditional partition algorithm uses hash function complete system state partitioning augmented number optimizations techniques compares respect memory usage percentage transitions generates messages lastly time taken 
memory mb messages time sec normal distributed sibling storing sibling caching sibling caching sibling caching children lookahead children lookahead sibling storing children lookahead sibling caching children lookahead sibling caching children lookahead sibling caching table 
results different optimizations example extension developed called children lookahead 
technique tries avoid sending messages due short paths fall node state space 
seen state gamma followed state generates message node node 
node receives new state generates successor node needs stored node second message generated 
message avoided node checked successors state belonging operation expensive state generated node 
successor generates node node avoided message fig 

example children lookahead order technique necessary clearly specify going take care state 
message sent sender check states successors sent state 
hand receiver skip state belonging sender falls generation starting received state 
algorithm works parties involved sender just ignore states belonging third party receiver send state correct node avoiding duplication 
important node check possible states belonging generation state sent third node 
technique avoids messages runs state node part state space technique generalized arbitrary number steps corresponding number generations need checked 
exists trade number generations checked number possible messages avoided time overhead necessary generate successors grows exponentially respect number generations 
results seen table example executed different combinations techniques sibling storing reduces number messages consistently sibling caching increasing size cache table percentage messages gets closer results obtained storing 
children lookahead ap pers effective orthogonal techniques 
results terms message reduction mirrored reduction execution time 
memory usage higher sibling storing decrease caching minimum sibling algorithm 
experimental results give anomalous behavior able explain 
state transfer difference spin jpf execution time spent spin storing state uses time jpf execution bytecode instructions expensive operation 
due part fact jpf transitions complex spin 
difference affect design distributed version tools 
ls communication protocol nodes designed path sent identify state needs visited 
consistent assumption steps executed efficiently spin 
hand jpf execution step time consuming sound efficient send state need path 
jpf state complex structure includes 
early stages development tried send states time necessary translate states sent socket high 
choice send path information reconstruct state destination node 
sending path moment believe doing implementation parallel architecture sending states viable 
possibility currently exploring send compressed version state 
state efficiently compressed tool storing effective send compressed state network 
moment possible pools compression local node impossible correctly reconstruct state receiving node 
possible approach particularly interesting parallel environment applicable distributed centralize pools compression 
way indexes components state global compressed state easily quickly transferred nodes 
order reduce communication node keep copy entries accessed centralized pool new entry added communication necessary 
partitioning partitioning crucial point distributed algorithm ls 
partitioning aims achieve contrasting goals obvious trade reduce number message need transmitted maintain fair partitioning memory required node 
ls heuristics determine partition function suggested 
ler complete approach problem tool automatically generate partition function static analysis input model 
dynamic nature systems address kind tools difficult implement due complexity static analysis required 
focus partition functions calculated dynamically compare static partitioning functions require static analysis 
ler partition functions classified static partitioning verification run changes possible run time dynamic partition function adapted run time information gathered execution better suit system model checked 
kinds partition functions advantages disadvantages static partitioning require communication determine node state belongs hard come function achieves equal partitions low communication 
hand dynamic partitioning requires higher level communication complexity allows versatility model dependent equal partition size 
partition functions ls static algorithm rely assumption 
static partitioning especially problematic dynamic system hard extrapolate behavior structure system 
dynamic approach dependent system structure appropriate analyzing dynamic systems 
static partitioning examples static partitioning table results 
important see section partition functions basis dynamic ones 
results table example workstations 
different partition functions reported column followed percentage total memory workstation percentage transitions cause messages sent lastly time taken 
global hash code partition function uses hash function determine partition function applied state partition result modulo number partitions 
solution gives fair division state space nodes time number messages generated pretty high 
possible approach locality principle ls partition function relies information particular thread memory messages time sec global hash code local hash code local hash code local hash code program counter program counter program counters program counters table 
different static partition functions example thread scheduled possible reach state generates message 
step created partition function local hash code applies hash function thread list 
implies value objects included hashing process stack frames thread status threads 
step limited process specific thread indicated number table 
results terms message ratio function applied thread list step program counters change applied single thread messages reduced 
choice thread important thread zero usually bad choice included table main thread simply create threads compose real system 
general reduction messages obtained sacrifice fairness partition 
said ler tool generate partition function static analysis 
unfortunately tool applied uses flow control graph thread accessible spin 
idea current state process determine partition state belongs similar path tried program counter threads 
static analysis approach just hashed program counter 
sight program counter equivalent current state promela process stack approach thread program counter 
tried program counter topmost stack frame rows saying program counter partition function tried approach function program counters stack frame rows marked program counters 
result reduction percentage messages higher function applied specific thread 
note main thread thread zero shown start rest system leads unbalanced partitioning 
interesting observation information calculate partitioning case partition fair creates messages see global hash code local hash code little information see program counter similar problems 
just information give best results local hash code thread program counters thread 
dynamic partitioning great advantage dynamic partitioning prior knowledge static analysis system necessary run time information keep partitioning fair 
dynamic partitioning just means states stored node certain moment 
general dynamic partition function initially assign subset state space node certain condition arises instance lack main memory reassign states different node 
assume time node knows state supposed stored 
means node need interrogate node know state visited send legitimate owner 
assumption dropped limited time reassignment condition nodes relay incoming states belong anymore correct designated node 
issue arises point represent partition function change time 
necessary sort table specify state stored 
obvious granularity table single state size table order magnitude size state space 
states grouped called groups states classes 
clear classification equivalent partitioning 
assumption techniques determining static partition functions determine classification function 
important classes need exact size 
fact number classes greater number partitions partition consists set classes run time classes grouped partitions partition size big part class assigned node 
important minimize number potential messages classes strong trade 
solves problem having excellent partition function average classification function give optimal results 
reassignment issued states visited belong different partition discarded 
efficient distributed environment transfer information network 
node states assigned rediscover states met influencing result computation just extending search states may visited 
table show results obtained different dynamic partition functions static ones previous section 
half classes initially assigned node necessary reassigned 
comparing results static partition results table memory messages time sec global hash code local hash code local hash code local hash code program counter program counter program counters program counters table 
results dynamic partition classes split equally 
clear case dynamic partition achieves similar better memory distribution runtime 
important issue decide reassignment necessary option start number states stored partition big compared currently stored 
idea having greater amount states stored partition necessarily problem memory comes exhaustion 
better wait memory issue keep partition size visit class size change instance states visited close verification 
issue memory abundant nodes communicate intensively states divided equally possible starting 
possible optimization store states initially node reassignment dynamic algorithm obtaining better partitioning 
approach leaves node completely useless time node exhausts memory resources starts splitting state space 
disadvantage lot need redone time class reassigned part state space visited lost 
table show results doing form dynamic partitioning fairness partitioning messages time reduced 
possible way avoid having idle workstations assign node set states belong visit store states 
way nodes start visiting state space time need send messages states stored hash table 
memory issue states belong discarded space local states messages needs sent nodes falling part state space 
technique similar sibling storing difference states stored sending message 
fact successors memory messages time sec global hash code local hash code local hash code local hash code program counter program counter program counters program counters table 
results having node start classes 
state fully visited node search correct state discarded 
clarify technique suppose nodes 
initially workstations start visit reach moment time memory scarce 
point node discard part state space 
assume simplicity classes defined node keep reject 
minimum amount coordination avoid reject class nodes class stored hash table 
suppose simplicity nodes got exact point visit decided reassign classes state lost node keeping rejected see 
node node node node reassignment fig 

states visited discarded simplification realistic scenario number states lost surely quite limited compared situation node running reassignment started 
classes partitions exist dynamic techniques applied 
time class stored specific node shared set 
memory scarce shared class discarded making sure ahead time everybody discard time non shared class transfered node 
table shows results form dynamic partitioning note messages time reduced table 
memory messages time sec global hash code local hash code local hash code local hash code program counter program counter program counters program counters table 
results having nodes start 
program model checking area active research importance software failures increasing 
model checking software presents specific issues due complexity dynamic nature programs 
translation approaches adequately deal rely underlying tools designed exploit programs specific characteristics 
developed model checking tool programming language java input notation order able overcome limitation 
introduced representation state respects paradigm underlying input notation 
order able explore state space reasonable size developed compression algorithm exploits structure system state 
novel approach efficient backtracking reconstructs state compressed version stack 
novel approach symmetry introduced exploits symmetries inherent state representation 
garbage collection discussed way reduce state space 
applying state space reduction techniques programs large memory single workstation distributed memory algorithm overcome 
show existing distributed model checking algorithm extended reduce communication overhead dynamic memory balancing 
show results supporting claim dynamic parti state space multiple workstations suited analyzing dynamic java programs 
focussed techniques applied prior knowledge system structure 
believe reduction techniques priori static analysis system slicing partial order reductions abstractions improve model checking process applied possible 
intend investigate combination static dynamic reduction techniques combat state explosion 
furthermore believe parallel model checking popular due machines widespread 
currently extending distributed model checking algorithm parallel shared memory architecture sgi origin 
bbs 
distributed ltl model checking spin 
technical report rs faculty informatics university 
bdh dams 
symmetric spin 
proc 
th international spin workshop volume lncs 
springer verlag september 
nick benton andrew kennedy george russell 
compiling standard ml java bytecodes 
sigplan notices september 
lohse payer 
model checking industrial hardware design 
proc 
nd design automation conference 
br thomas ball sriram rajamani 
bebop symbolic model checker boolean programs 
proc 
th international spin workshop volume lncs pages 
springer verlag september 
cd clausen danvy 
compiling proper tail recursion class continuations scheme java virtual machine 
journal language translation april 
cdh corbett dwyer hatcliff laubach pasareanu zheng 
bandera extracting finite state models java source code 
proc 
nd international conference software engineering june 
edmund clarke allen emerson jha prasad sistla 
symmetry reductions model checking 
proc 
th international conference computer aided verification volume lncs pages 
springer verlag 
edmund clarke jha 
exploiting symmetries temporal logic model checking 
proc 
th international conference computer aided verification volume lncs 
springer verlag 
cw edmund clarke wing 
formal methods state art directions 
technical report cmu cs carnegie mellon university 
dis claudio radu iosif riccardo 
deadlock detection tool concurrent java programs 
software practice experience 
ej emerson jutla 
symmetry model checking 
proc 
th international conference computer aided verification volume lncs 
springer verlag 
god patrice godefroid 
verisoft tool automatic analysis concurrent reactive software 
proc th international conference computer aided verification volume lncs pages 
springer verlag june 
hol gerard holzmann 
design validation computer protocols 
prentice hall 
hol gerard holzmann 
spin model checker 
ieee transactions software engineering may 
hol gerard holzmann 
state compression spin recursive indexing compression training runs 
proc 
th international spin workshop april 
hol gerard holzmann 
logic verification ansi code spin 
proc 
th international spin workshop volume lncs 
springerverlag september 
hp klaus havelund thomas 
model checking java programs java pathfinder 
international journal software tools technology transfer april 
id norris ip david dill 
better verification symmetry 
formal methods system design august 
radu iosif riccardo 
dspin dynamic extension spin 
proc 
th international spin workshop volume lncs pages 
springer verlag september 
radu iosif riccardo 
garbage collection model checking 
proc 
th international spin workshop volume lncs pages 
springer verlag september 
ler 
model checking di formale ambiente 
master thesis politecnico di torino may 
ls riccardo 
distributed memory model checking spin 
proc 
th international spin workshop volume lncs 
springer verlag 
sd ulrich stern david dill 
parallelizing murphi verifier 
proc 
th international conference computer aided verification volume lncs pages 
springer verlag june 
spa 
premature engine cutoff cause mars polar lander failure 
www com html march 
sto scott stoller 
model checking multi threaded distributed java programs 
proc 
th international spin workshop volume lncs pages 
springer verlag september 
tucker taft 
programming internet ada 
ada europe international conference reliable software technologies volume lncs pages 
springer verlag june 
willem visser klaus havelund guillaume brat seung park 
model checking programs 
proc 
th ieee international conference automated software engineering september 
