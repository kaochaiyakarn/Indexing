recognition multi agent interaction video surveillance ivanov bobick mit media laboratory cambridge ma usa describes probabilistic syntactic approach detection recognition temporally extended activities interactions multiple agents 
complete system consisting adaptive tracker event generator parser performs segmentation labeling surveillance video parking lot system correctly identifies activities pick drop involve person vehicle interactions 
main contributions extending parsing algorithm handle multi agent interactions single parser providing general mechanism consistency pruning developing efficient incremental parsing algorithm 
research area visual surveillance quickly approaching area complex activities framed extended context 
methods identifying simple movements available importance contextual methods increases 
systems activities movements recognized detected meaning affected temporally extended interpretation 
see 
global context recovered complete sequence beliefs component influenced interpretation 
example class object may uncertain viewed isolation participating interaction object plays part car belief class label car reinforced 
describes probabilistic syntactic approach detection recognition temporally extended activities interactions multiple agents 
technical contribution extension previous results stochastic parsing activities handle parallel input streams enforce consistency 
stochastic parsing handles noisy uncertain classifications primitive events integrating coherent interpretation 
parallel input streams consistency checking allows detect high level interactions multiple objects 
second significant component development general consistency pruning mechanism eliminates syntactically valid domain inconsistent interpretations 
enforces example temporal consistency events interpretation domain shown constraint far car move time tracker loses track vehicle time new vehicle acquired 
demonstrate utility capabilities stochastic parsing activities general showing results real time surveillance system multiple activities place simultaneously system correctly identifies activities pick drop involve person vehicle interactions 
related research area recognition long term complex activities relatively new 
courtney developed system detecting activities closed environment 
activities include person leaving object room room 
brand showed results detecting manipulations video deterministic context free grammar 
techniques nonprobabilistic required relatively high quality low level detectors 
oliver rosario developed system detecting people interactions modeled interactions coupled hidden markov model course research multi agent simulation produce synthetic training data train chmm modeling interaction 
relation representation multi agent simulation viewed structured stochastic grammar description interactions 
research done area syntactic pattern recognition foundation built 
earley developed efficient parsing mechanism probabilistic form stolcke :10.1.1.14.2859
aho peterson described basis syntactic error correction 
multi valued string parsing main topic bunke 
earlier demonstrated scfgs successfully parsing gestural input musical conducting 
potential objection domains grammatical structure goal show relatively complex activities described compactly grammar 
probabilistic parsing interactions visual surveillance requires tracking analysis multiple objects exist scene 
labeling interactions entails formulating model interactions object centered scene centered setting 
solution challenging problem chose scfg parsing approach 
syntactic pattern recognition area activity detection motivated inherent sequentiality domain 
fact hidden markov models hmms popular solution gesture recognition tasks 
relation hmms scfgs simply derived relations finite state machines context free parsers 
generative capabilities fsm extending set regular languages contextfree grammars context free languages generate 
similar relation exists probabilistic finite state machines hmms scfgs 
descriptive generative advantage comes course computational cost 
argue computational complexity generative power importance 
idea approach presumes structure priori component states defined recovery part interpretation task 
address recognition activities explicit knowledge simply encode typically stochastic grammar 
advantage encoding possible recovery intermediate action structures 
example drop contains component state car coming 
method detecting drop guaranteed label event car 
general idea approach presently describing follows 
observe scene track moving blobs allowing tracker probabilistic object identities labeling performed object appearance properties track 
probabilistically map tracks set predetermined events 
time event occurs attempt explain event context tracking concurrent hypotheses confirmed higher probability 
list performed tracker 
full track labeling delegated tracker data necessary analyze object trajectories appearance readily available level 
implemented event generator takes object track produces generally multi valued pair events corresponding track points 
events concurrent uncertain see section 
scfg parser performs task described 
accepts events parses accordance provided scfg 
grammar encodes rules describing expected structure activities 
parsing algorithm proceed discussion contribution briefly review parsing algorithm 
general intuition algorithm developed considering reading symbol input parser generates set hypotheses possible symbol prediction step 
symbol read scanning hypotheses get confirmed get discarded completion 
process repeats final condition met 
remainder section section re iteration algorithm available skipped reader familiar algorithm earlier :10.1.1.14.2859
input symbol parser keeps set states collectively describe current pending derivations 
state production rule augmented additional markers marker indicates starting position input string rule currently applied marker shows current position parser string 
position parser inside rule corresponds shown symbol denote state non terminals arbitrary sequences terminals non terminals 
scfg parsing algorithm state carries forward inner probabilities denoted respectively :10.1.1.14.2859
called prefix probability probability parsed string position probability sub string starting parsing begins initializing state set initial state generated root production rule 
prediction prediction step hypothesize possible continuation input current position parse state production rule left corner relationship exists rule prediction produces state xk computed xk reflexive transitive closure matrix left corner relation complete details :10.1.1.14.2859
scanning scanning step reads input symbol matches pending states iteration 
input symbol pending derivations expect advanced state set xk xk expect eliminated 
completion set scanned states completion updates parser positions pending derivations xk 
xk computed xk ru 
xk ru 
reflective transitive closure matrix unit production relation :10.1.1.14.2859
precise reachable chain rules 
handling uncertainty uncertainty input stream handled parser manner described 
input symbol group events posted likelihood 
scanning step event group events likelihood produce new state xk xk likelihoods incorporated parse multiplying forward inner probabilities corresponding states xk xk final state parse reached viterbi maximization event group yielded maximum likelihood parse 
object enters scene person enter events generated simultaneously 
parse completed part parse selected 
object behaved car car enter event selected 
note technique successfully handles substitution errors 
order account deletion insertion errors transform scfg robust form done automatically 
terminal grammar replaced pre terminal production rule rewriting pre terminal terminal terminal noise skip noise rule introduced accounts terminal place skip 
skip 
rules effectively ignore syntactic noise input preserving symbols stream 
enforcing track consistency associated event track representing temporally consecutive detections object scene 
parse valid sequence events need grammatical tracks associated events temporally spatially consistent 
consistency sequence tracks contained parse determined compatibility endpoints 
track inconsistency incrementally prunes incorrect grammatical sequences 
temporal consistency algorithm described presents convenient pruning mechanism 
approach introduce consistency attributes contain tracking data pertinent samples parser state kth ith events input dx dy dx dy low mark attribute group high mark group 
attributes contain frame number time stamp position object image velocity 
event input stream contains tracking data associated moment object 
low mark start track high mark 
propagated prediction scanning completion shown 
prediction prediction simply marks expected substring initial values xk scanning scanning reads terminal input stream sets high marks scanned states high mark terminal expanding range state 
addition predicted states expecting terminal sets low mark low mark scanned terminal xk xk ha xk ha low high mark attributes terminal respectively 
completion completion step advances high mark completed state completing state extending range completed non terminal xk 
xk completion performed complete states subject consistency constrains enforced filtering routine 
filtering completion step presents opportunity check tracks consistency 
check implemented filtering routine takes completing state completes evaluates cost operation 
cost computed form multiplicative penalty function 
computation position object constant velocity model attribute state completed attribute completing state dr dr dx dy position velocity track time track time start second 
multiplicative penalty function computed distance projected position position object low mark completing state exp rp rp temporal consistency enforced rejecting states time stamp greater time stamp completing state scale parameter experimentally 
penalty function incorporated computation forward inner probabilities follows rp xk ru 
rp xk ru 
unit production relation closure matrix :10.1.1.14.2859
concurrency sequential machine approach sources concurrency parser account 
concurrent events due probabilistic nature event labels 

concurrent parses occur tracing derivations unrelated object tracks 

concurrent tracks part interaction multiple objects 
parsing mechanism described handles points 
concurrent events handled usual manner multi valued input string 
performing interleaved consistency check serialized events 
predecessor class new sample check performed predecessor 
dashed lines show inter track consistency check 
events connected solid lines joined object identity 
problem addressed implemented earlier 
concurrent parses traced added benefit error correction robust grammar 
new framework concurrent tracks occur derivation grammar describes interaction objects 
case need describe interactions cars people 
difficulty fact events input stream correspond different entities 
entities consistent tracks events related objects input stream interleaved consistency check account 
accomplish modify parser ways 
assign class label production rule grammar 
instance production car track car class label 
implement simple search filtering routine section search state completed child state having class attribute completing state 
high mark extracted child state penalty function computed attribute high mark state 
shows interleaved consistency check performed string serialized events 
noted rule class confused object class 
rule class necessarily related object class case instance needs handle interactions mechanism different class labels attached rules corresponding participant 
run time incremental parsing run time parser potentially infinite input stream 
limits computational complexity pruning states probabilities falling certain limit keeping parsing chart fixed sufficient length 
account fact string start place input stream simply seed state set initial state see section 
final state achieved viterbi parse automatically yield starting position string having maximum likelihood 
parser chart need re parsed sample 
fact algorithm conveniently sped performing parse incrementally 
step current state parser encodes history seed states window 
task just perform iteration new sample discarding state set chart 
procedure effectively prunes derivations longer length chosen window 
means additional condition added filtering routine states having index state set chart rejected completion recognition system recognition system described consists main components tracker tracking event generator parser 
system easily distributed tested sgi indy running parser event generator sgi running tracker 
system assures real time performance processing data video camera vcr 
tracker tracker recognition system developed chris stauffer mit ai lab 
description tracker 
tracker implements adaptive background model tolerant slow lighting changes 
tracker detects objects scene presence motion camera view 
motion persists small predetermined number frames object detected new track container created accumulate tracking data related object 
tracker assigns unique id newly object tracks changes objects appearance position velocity reporting tracking event generator 
appearance trajectory properties tracker probabilistically assigns object class label car person 
note length chart indexed events time 
system value pruning threshold chart size chosen cutting chart prunes active states 
tracking event generator formulate interactions objects terms tracker states object trajectories described 
tracker loose object find need reason identity newly object 
set primitive tracker states object lost object forms alphabet interaction parser form grammar 
formulation preserving identity object scene important parser 
identity preserved tracker simple inside consistent tracks 
task associating disjoint pieces tracks falls parser 
event generator performs simple mapping tracks set events passed parser 
events generated simple environment model way 
track began area objects tend enter scene car enter person enter events generated 
events marked corresponding likelihoods account errors classification 
instance person track reported tracker likelihood event person enter event likelihood posted parser 
complementary event car enter posted time slot likelihood 
track entry areas car person events generated 

track ended exit areas person exit events produced 

track exit areas car lost person lost events posted 

object velocity dropped certain threshold event generated 
note track endpoint represented pair concurrent events accounts classification errors 
parser select depending results parse maximum probability 
typically track tracker observed object long certain class membership 
enter events likelihoods close 
contrast time object disappears lost data accurate classification decision 
consequently class likelihoods exit lost events track car track person track car track car car pickup car car drop car pickup enter car car car exit enter car car enter car enter car hidden car hidden car lost car lost car car exit car exit car hidden car exit car exit car exit skip car exit car lost car lost skip car lost car car skip car person lost person lost skip person lost drop branch simplified grammar describing interactions parking lot 
typically committal enter 
experimental results show results system run data collected parking lot carnegie mellon university 
system runs real time processing data live video feed video tape 
tracker event generator run mhz sgi machine 
parser runs mhz sgi indy 
tracker runs approximately fps images 
generally exhibited unbroken tracks cases occlusions extreme lighting changes 
events mapped hand coded probabilistic classifier object type car person aspect ratio object 
parser requires interaction structure described terms stochastic context free grammar 
partial listing grammar employed system parking lot monitoring task shown 
labels capitals non terminals terminals primitives written small letters 
square brackets enclose probabilities associated production rule 
probabilities reflect typicality corresponding production rule sequence primitives represents 
high level non terminals car person person car drop semantic action blocks associated shown brevity 
action simple script outputs corresponding label drop available data related non terminal starting video frame time stamp 
semantic action invoked final state reached resulting maximum probability parse includes corresponding non terminal 
production rule probabilities manually set plausible values domain 
learning probabilities interesting problem planned 
observations showed grammatical spatial consistency requirements eliminate majority incorrect interpretations 
results system quite insensitive precise values probabilities 
test data consisted approximately minutes video showing high level events dropoff pick 
events staged real environment real traffic concurrently staged events 
reason staging events examples minutes video 
drop offs pick ups performed people unfamiliar system 
resulting parses output real time 
figures show sequence consecutive detections high level events 
sequence shown demonstrates capability system parse concurrent activities interactions 
main event sequence dropoff 
monitoring activity system detected unrelated high level events instances person event 
shows temporal extent activities shown figures 
parses traced primitives hold track data 
consequently complete track reconstructed shown white traces figures 
longest segment video event generator produces events exact count depends reaction tracker video noise 
tuning environment map event generator convert tracks events high level interactions correctly detected 
showed approach labeling highlevel activities stochastic context free parser 
main contributions include 
extending parsing algorithm handle concurrent events single parser 
implementing efficient incremental parsing scheme 
providing general mechanism consistency pruning 
demonstration results real surveillance data 
issues address accurate modeling environment 
currently tracks mapped events non probabilistic map environment 
results high sensitivity event generation subtle changes timing tracker 
planning learning rule probabilities observing environment extended period time 
help accurate modeling traffic patterns performance tracker 
aho peterson 
minimum distance errorcorrecting parser context free languages 
siam journal computing 
bobick ivanov 
action recognition probabilistic parsing 
proc 
comp 
vis 
pattern rec pages santa barbara ca 
brand 
understanding manipulation video 
pages 

brand oliver 
coupled hidden markov models complex action recognition 
cvpr pages puerto rico 
ieee 
bunke 
parsing multivalued strings application image waveform recognition 
structural pattern 
courtney 
automatic video indexing object motion analysis 
pr 
jay clark earley 
efficient context free parsing algorithm 
ph carnegie mellon university 
grimson stauffer romano lee 
adaptive tracking classify monitor activities 
comp 
vis 
pattern rec pages santa ca 
ieee 
ivanov bobick 
probabilistic parsing action recognition 
technical report tr mit media lab vision modeling group 
oliver barbara rosario alex pentland 
statistical modeling human interactions 
cvpr interpretation visual motion workshop pages santa barbara ca 
ieee 
stolcke :10.1.1.14.2859
efficient probabilistic context free parsing algorithm computes prefix probabilities 
computational linguistics 
event uid avg 
size class frame drop results track mapping runs system 
subsets events outlined picture correspond drive drop 
interpretation data shown 
car passed scene drop performed 
corresponding track shown sequence white pixels 
person passing 
person left car exited scene 
moment system information emit drive label 
car leaves scene 
conditions drop satisfied label emitted 
car performing drop exits scene yields car passing shown 
temporal extent actions shown 
actions related people shown white 
top line picture corresponds label bottom 
car primitives drawn black 
clearly demonstrates concurrency events 
primitive events abbreviated follows ce car enter cs car cx car exit pe person enter pf person px person exit 

