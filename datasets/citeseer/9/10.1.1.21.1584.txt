hierarchical internet object cache chankhunthod peter danzig chuck neerdaels computer science department university southern california discusses design performance hierarchical proxy cache designed internet information systems scale better 
design motivated earlier trace driven simulation study internet traffic 
believe conventional wisdom benefits hierarchical file caching merit costs warrants reconsideration internet environment 
cache implementation supports highly concurrent stream requests 
performance measurements show cache outperforms popular internet cache implementations order magnitude concurrent load 
measurements indicate hierarchy measurably increase access latency 
software configured web server accelerator data httpd times faster netscape ncsa servers 
relate experience fitting cache increasingly complex operational world internet information systems including issues related security transparency cache role file systems support ubiquitous wide area information systems 
software developers perceive network bandwidth connectivity free commodities internet information services ftp gopher www designed caching support core protocols 
consequence popular www ftp servers 
example ncsa home mosaic moved multi node cluster servers meet demand 
nasa jet propulsion laboratory wide area network links saturated demand levy comet images july runs node sparc center just keep demand college basketball scores 
distributing load away server hot spots caching save bandwidth reduce latency protect network clients erroneously loop generate repeated requests 
describes design performance harvest cache designed internet information services scale better 
cache implementation michael schwartz kurt worrell computer science department university colorado boulder optimized support highly concurrent stream requests minimal queuing os level resources nonblocking application level threading virtual memory management domain naming system dns cache 
high performance harvest cache paired existing servers httpd increase document server throughput order magnitude 
individual caches interconnected hierarchically mirror internetwork topology implementing design motivated earlier nsfnet trace driven simulation study 
hierarchical web versus file system caches study internet traffic showed hierarchical caching ftp files eliminate half file transfers internet wide area network links 

contrast hierarchical caching studies blaze alonso muntz honeyman showed hierarchical caches best achieve hit rates cut file server workload half 
believe different reached study file system studies lay workloads traced 
study traced wide area ftp traffic switch near nsfnet backbone 
contrast blaze alonso muntz honeyman traced lan workstation file system traffic 
workstation file systems share large relatively static collection files gcc internet exhibits high degree read sharing rapidly evolving set popular objects 
lan utility files rarely change day period studies little value hierarchical caching flat file caches workstation shared file file stayed local cache indefinitely upper level caches saw low hit rates 
contrast workstation file systems ftp www gopher facilitate read sharing autonomously owned rapidly evolving object spaces 
half nsfnet ftp traffic due sharing readonly objects internet topology tends organized hierarchically hierarchical caching yield hit rate reduce server load dramatically 
claffy braun reported similar statistics www traffic displaced ftp traffic largest contributor internet traffic second cost cache lower internet information systems traditional caching alex file system harvest cache caches ftp files alex hierarchical cache 
compare alex harvest section 
applications 
page fault take times longer service hitting ram ram hit rate keep average access speed twice cost ram hit 
contrast typical hit cost ratio internet information systems hit ratio suffice keep average cost twice hit cost 
internet object caching addresses latency reduction 
noted file system papers hierarchical caching moves load server hot spots 
mentioned file system papers commercial sites proxy access web ftp space proxy caches concern internet security 
internet sites forced hierarchical object caches 
harvest cache years growing collection sites internet proxy cache httpd accelerator 
experiences time highlight important issues 
cache policy choices difficult prevalence information systems provide standard means setting object time live ttl values standard specifying objects non cacheable 
example popular create www pages modify content time retrieved returning date access count 
objects cached 
second wide area network environment link capacity congestion vary greatly cache topology important 
third cache administratively decentralized environment security privacy important 
fourth widespread location dependent names form uniform resource locators urls difficult distinguish duplicated aliased objects 
large number implementations clients servers leads errors worsen cache behavior 
discuss issues depth 
design section describes design harvest cache fast efficient portable transparent 
cache hierarchy reduce wide area network bandwidth demand reduce load internet information servers caches resolve misses caches higher hierarchy illustrated 
addition parent child relationships illustrated cache supports notion siblings 
caches level hierarchy provided distribute cache server load 
cache hierarchy independently decides fetch object home site parent sibling caches simple resolution protocol works follows 
url contains configurable list substrings object fetched directly object home cache hierarchy 
feature force cache resolve non cacheable urls local urls directly object home 
similarly url domain name matches configurable list substrings object resolved particular parent bound domain 
rough estimate observation takes second browser netscape load object disk render display remote object takes seconds retrieved displayed 
object cache stub network regional network stub network stub network stub network regional network backbone network stub network stub network regional network stub network hierarchical cache arrangement 
stub network cache receives request url misses performs remote procedure call siblings parents checking url hits sibling parent 
cache retrieves object site lowest measured latency 
additionally cache option enabled tricks referenced url home site implementing resolution protocol 
option enabled cache hit message udp echo port object home machine 
object home message looks cache hit generated remote cache object 
option allows cache retrieve object home site happens closer sibling parent caches 
cache resolves sibling parent home site return udp hit packet parent return udp message caches home udp hit packet fails arrive seconds 
cache wait home machine time transmitting soon parent sibling caches responded 
resolution protocol goal cache resolve object source cache home provide efficiently 
protocol really heuristic fast response ping indicates low latency bandwidth important large objects 
shown section hierarchies deep caches add little noticeable access latency 
case cache adds noticeable latency parents fail child cache detected 
case object delayed seconds parent child cache timeout 
hierarchy root caches responsible clients 
keep root caches servers overloaded recommend hierarchy terminate place regional backbone network bandwidth plentiful 
cache access protocols cache supports access protocols encapsulating connectionless proxy 
encapsulating protocol encapsulates cache cache data exchanges permit error detection checksums eventually digital signatures 
protocol enables parent cache transmit object remaining time live child cache 
cache uses udp connectionless protocol implement parent child resolution protocol 
protocol permits caches exchange small objects establishing tcp connection efficiency 
encapsulating connectionless protocols support reliability proxy protocol protocol supported web browsers 
arrangement clients request objects standard information access protocols ftp gopher cache process 
term proxy arose mechanism primarily allow clients interact www firewall gateway 
cacheable objects wide variety internet information systems leads number cases objects cached 
absence standard specifying ttls objects harvest cache chooses cache number types objects 
example objects password protected cached 
application gateway discards retrieved object soon delivered 
cache similarly discards url name implies object cacheable see harvest user manual details cacheable objects 
possible limit size largest cacheable object large ftp objects purge smaller objects cache 
unique object naming url name object uniquely url plus mime header issued request uniquely identify object 
example www server may return text version postscript object client browser able view postscript 
believe capability widely currently cache insist request mime headers match request hits cache 
negative caching reduce costs repeated failures erroneously looping clients implemented forms negative caching 
dns lookup failure occurs cache negative result minutes chosen transient internet conditions typically resolved quickly 
second object retrieval failure occurs cache negative result parameterized period time default minutes 
cache awareness started designing cache anticipated clients decide resolving object indirectly parent cache directly object home 
created version mosaic resolve objects multiple caches illustrated 
months reconsidered mime stands multipurpose internet mail extensions 
originally developed multimedia mail systems adopted passing typing meta data clients servers 
client server cache cache cache client cache aware client cache cache cache proxy caching client server dropped idea number new web clients cello lynx netscape 
web client completely cache aware support access ip firewalls illustrated 
clients send requests proxy server proxy server decides best resolve 
advantages disadvantages approach cache awareness 
cache unaware clients simpler configure just set proxy bindings users understand needed provide web service firewalls 
hand cache aware clients permit permit load balancing avoid single point failure caused proxy caching noted section allow wider range security error checking 
security privacy proxy caching effect proxy caching web security privacy 
www browsers support various authorization mechanisms encoded mime headers exchanged browser server 
basic authorization mechanism involves clear text exchange passwords 
protection eavesdropping public key authorization mechanism available 
server announces public key clear text rest exchange encrypted privacy 
mechanism vulnerable ip spoofing server masquerade desired server mechanism invulnerable eavesdroppers 
thirdly want privacy authentication pgp mechanism available public key exchange done externally 
basic authentication exchange follows dialog 
client get url 
server unauthorized authentication failed 
client get url authorization bit encoded name password 
server returns reply unauthorized forbidden security mechanisms explain cache transparently passes protocol browser server 
server passes unauthorized message cache cache forwards back client url cache 
client browser desired security model prompts username password get url authentication authorization encoded request mime header 
cache detects authorization related mime header treats kind non cacheable object returns retrieved document client records object 
note clear text basic authorization model including cache snoop authorization data 
cache weaken weak model 
public key pgp models cache eavesdroppers interpret authentication data 
proxy caching defeats ip address authentication requests appear come cache sip address client ip addresses spoofed consider liability asset sorts 
prevent servers encrypting applying digital signature documents 
final issue web objects digitally signed system administrator insert invalid data proxy cache 
trust people run caches just trust people run dns servers packet switches route servers 
proxy caching seriously weaken web privacy 
threading efficiency portability unix platforms cache implements non blocking disk network abstractions directly atop bsd select loop 
cache avoids forking misses ftp urls retrieve ftp urls external process complexity protocol difficult fit select loop state machine 
cache implements dns cache dns cache misses performs non blocking dns lookups currently respecting dns ttls 
referenced bytes pour cache bytes simultaneously forwarded sites referenced object written disk non blocking way cache stall takes virtual memory page fault cache avoids page faults managing size vm image see section 
cache employs non preemptive run completion scheduling internally need file data structure locking 
clients appears multi threaded 
memory management cache keeps meta data cached objects url ttl counts disk file various flags virtual memory 
consumes bytes strlen url object machines bit words cache plan replace variable length url fixed length md reducing number bytes object 
keep exceptionally hot objects loaded virtual memory option enabled 
quantity vm dedicated hot object storage exceeds parameterized high water mark cache discards hot objects lru vm usage hits low water mark 
note objects reside disk just vm image reclaimed 
hot object vm cache particularly useful cache deployed httpd accelerator discussed section 
cache write write back 
objects hot object vm cache appear disk 
considered memory mapping files represent objects apply technique lead page faults 
objects brought cache non blocking despite extra copies 
objects cache referenced hash table keyed url 
cacheable objects remain cached ttl expires evicted cache replacement policy user manually evicts clicking browser reload button mechanism discussed section 
touches expired web object cache refreshes object ttl get modified 
cache keeps url object data structures virtual memory stores object disk 
decision grounds memory buy performance server system meta data objects consume mb real memory 
site afford memory cache optimized memory space performance 
disk management disk space exceeds high water mark cache enters garbage collection mode 
mode dozen cache cache discards oldest objects encountered row object hash table 
disk usage drops low water mark cache exits garbage collection mode 
disk usage reaches configured immediately discards oldest objects row hash table 
cache manages multiple disks attempts balance load 
creates numbered directories disk rotates object creation various disks directories 
average directory cache manages disks objects stores numbered files 
directory entries average bytes average directory may grow kb disk blocks 
number files directory increased decrease directory size reduce file system overhead 
performance compare performance harvest cache cern proxy cache evaluate httpd accelerator performance gain netscape ncsa cern web servers 
attempt attribute performance improvement various design decisions laid section evaluate latency degradation faulting objects hierarchical caches 
measurements section taken sparc model sparc model workstations 
see harvest high performance due disk directory structure choice place meta data vm threaded design 
distribution harvest cache cern cache time msec measure harvest cern median ms ms average ms ms cumulative distribution cache response times hits concurrent clients 
vertical axis plots fraction events take time recorded horizontal axis 
example time cern cache returns hit ms time harvest cache returns object hits ms cern long response time tail average response time significantly larger median response time 
harvest vs cern cache evaluation dependent particular hit rate evaluate cache performance separately hits misses list urls 
sites know hit rate measurements evaluate gain 
alternatively reader compute expected savings hit rates provided earlier wide area network traffic measurement studies 
figures show cumulative distribution response times hits misses respectively 
reports median average response times 
note cern response time tail extends seconds average times median 
discussion give cern benefit doubt discuss median average response times 
compute clients concurrently referenced unique objects various sizes types internet locations initially empty cache 
total objects faulted cache way 
cache warm clients concurrently referenced objects random order compute 
cache hierarchy 
figures show harvest cache order magnitude faster cern cache hits average twice fast misses 
discuss reasons performance difference section 
chose concurrent clients represent heavily accessed internet server 
example jpl server holding levy comet images received peak approximately requests second objects retrieved ranged kbytes 
misses difference harvest cern caches response time dominated distribution harvest cache cern cache time msec cumulative distribution cache response times misses concurrent clients urls 
remote retrieval costs 
note bump upper right corner 
bump comes approximately objects attempted retrieve timed causing response time seconds due unreachable remote dns servers unreachable remote object servers 
harvest cern caches experience long timeout time object retrieval requested harvest cache negative dns object caching mechanisms avoid repeated timeouts issued minutes failed request 
important caches high hierarchy long timeouts tie file descriptors limited system resources needed serve concurrent clients 
httpd accelerator order magnitude performance improvement hits suggests harvest cache serve httpd accelerator 
configuration cache site primary httpd server port forwarding misses site real httpd port 
web administrator renames non cacheable urls httpd port 
cacheable objects html pages gifs served harvest cache non cacheable objects queries cgi bin programs served true httpd port 
site workload biased cacheable objects configuration dramatically reduce site web workload 
approach sense reasons 
running httpd accelerator front httpd object accelerator cache hits go cache misses go native httpd 
second httpd servers process forms queries accelerator simpler common case fast 
may practical feasible change myriad httpd implementations efficient techniques advocated sites easily deploy accelerator existing httpd 
benefit running httpd accelerator depends site specific workload cacheable non cacheable objects note httpd accelerator degrade site performance 
note objects don appear cacheable glance cached slight loss transparency 
example demanding workload access non cacheable objects sport distribution httpd accelerator httpd accel hit httpd accel ncsa httpd httpd time msec response time httpd accelerator versus native httpd workload hits 
scores stock quotes possible users tolerate short refresh delay seconds 
httpd accelerator vs ncsa demonstrates performance harvest cache configured httpd accelerator 
experiment faulted objects harvest cache measured response time harvest cache versus ncsa httpd 
notice harvest serves documents hit httpd accelerator median milliseconds medians netscape ncsa httpd ms objects harvest adds ms ncsa netscape ms median access times 
note restart httpd accelerator simply objects companion web server 
reason added performance disk store file system 
httpd accelerator serve small objects second 
measured having clients concurrently fetching different url random order warm cache 
note faster implied average response time explain 
decomposing cache performance decompose harvest cache various design elements contribute performance 
goal explain roughly ms difference median roughly ms difference average response times hits experiment summarized 
factor difference cern median average response time apparent cern long response time tail occurs concurrent access cern cache operating right knee performance curve 
response time median value corresponds queueing delay os resources disk accesses cpu cycles 
explain ms difference cern harvest median response times see table 
establishing tearing tcp connection client cache contributes large part harvest cache response time 
recall tcp way handshakes add round trip transmission time connection round trip time 
factor savings msec 
ram meta data hot object ram cache threading dns lookup cache total table back envelope breakdown performance improvements harvest cache serve small objects second ms object median response time measured cache clients ms means ms round trip time attributable tcp connection management 
ms shared cern harvest cache 
measured savings implementing threading measuring cost unix process opens single file bin ls 
measured savings caching dns lookups time perform dns lookups names pre faulted dns server local network 
computed savings keeping object meta data vm counting file system accesses cern cache retrieving metadata unix file system 
computed savings caching hot objects vm measuring file system accesses cern cache retrieve hot objects excluding hits os buffer pool 
measured number file system operations driving cold caches workload different objects 
measured number file system operations needed retrieve objects warm caches 
workload measures costs writing objects disk hit workload measures costs accessing meta data objects 
sunos instruments nfs better instruments directly connected file systems ran experiment nfs mounted file system 
cern cache averages file system operations object metadata manipulations file system operations object reading object data 
course convert operation counts elapsed times depend size state write back policy os buffer pool core inode table 
particular reduce actual disk dedicating extra memory file system buffering 
coarse estimate table assumes disk operations average ms half file system operations result disk operations ms average cost file system operation 
cache hierarchy vs latency benefits hierarchical caching reduced network bandwidth consumption reduced access latency improved resiliency come price 
caches higher hierarchy field misses descendents 
equilibrium hit rate leaf cache means half leaf get resolved second level cache directly object source 
hits higher level cache better long second third level caches performance bottleneck 
higher level caches overloaded increase access latency reduce 
running dedicated sparc harvest cache distribution cached flat levels levels flat levels levels time msec effect cache hierarchy cache response time 
respond udp hit queries second deliver small objects second deliver mbits second clients 
today regional network speeds mbit second harvest cache feed data users times faster regional network get data cache 
clearly harvest cache performance bottleneck 
alternative way look problem october america online network served objects hour peak load 
depending hit rate half dozen harvest caches support entire aol workload 
shows response time distribution faulting object zero levels hierarchical caching 
read parts access times ms correspond hits level cache 
access times ms due hierarchical wind way multiple caches remote web server 
measurements gathered concurrent clients referencing objects random order initially cold caches 
caches communicated ethernet lan distant objects 
result workload client faults object multiple caches clients see level hit object 
hit workload average latency increases milliseconds cache level pick point cdf axis read horizontally graph cross level level level lines 
hit workload level adds milliseconds latency 
course upper level caches saturated network connection upper level cache slow latencies increase 
particular experiment correspond real workload point cache hierarchies significantly reduce cache performance cache misses 
cache consistency harvest cache patterned internet domain naming system employs ttl cache consistency 
domain naming system alex file system harvest cache return stale data 
object mime header conveys expiration time harvest respects 
object mime header conveys modification time harvest sets object ttl half time elapsed object modified 
object carries time stamp cache assigns default ttl regular expression url matches 
specify expiration times gopher ftp provide mechanism owners specify ttls 
harvest cache fetches gopher ftp object assigns default ttl regular expression 
ttl expires cache marks object expired 
objects cache revalidate expired objects get fetch 
get modified fetches propagated correctly hierarchy 
believe web caches implement hierarchical invalidation schemes sites exporting data simply set appropriate expiration times 
say hierarchical invalidation afs call back invalidations requires state internet basic unreliability scale complicate stateful services 
data additional studies support position 
object lifetimes absence server specified object expiration times set cache default ttl frequently get modified versus simply returning cached value 
question answers 
service providers obligated keep cached data consistent promise get modified cached value minutes old 
leave question user reload command 
quick study web data reveals internet object lifetimes vary widely single mechanism suffice 
illustrate periodically sampled modification times objects distributed internet sites month period 
mean lifetime objects days html text objects images days respectively objects unknown types averaged days 
objects updated days objects dynamically updated 
www objects may volatile time lifetime variance suggests single ttl applied objects optimal 
note time modifications particular objects quite variable 
reinforces need picking cache ttls modification times grow large 
absence object owner provided ttls caches grow object ttls default minimum default maximum binary exponential backoff 
time object ttl expires get modified 
hierarchical invalidation large distributed environments internet systems designers typically willing live degree cache inconsistency reduce server hot spots network traffic retrieval latency 
evaluate hierarchical invalidation schemes internet caching traces internet web traffic topology current internet backbone 
absence explicit expiration times modification times study default cache ttl days stale 
network cost hierarchical invalidation exceeded savings web caching default cache ttls shorter days 
note achieving working hierarchical invalidation scheme easy 
hierarchical invalidation requires support data providers caches 
second invalidation widely shared objects cause bursts synchronization traffic 
hierarchical invalidation prevent stale require considerable complexity deal machine failures 
believe hierarchical invalidation practically replace ttl consistency wide area distributed environment 
part reluctance recommend hierarchical invalidation stems current informal nature internet information 
data available internet today cause problems stale copies retrieved internet evolves support mission critical needs may sense try overcome hurdles implementing hybrid hierarchical invalidation mechanism applications demand data coherence 
experience transparency goals speed efficiency portability transparency true transparency difficult achieve 
web clients expect caches firewall gateways translate ftp gopher documents html transfer cache simply forwarding referenced objects 
causes problems 
transfers mime header specifying object size appear object 
ftp gopher servers tell object size transferring object 
raises problem cache read entire object begins forwarding data get mime header right start forwarding data soon possible possibly dropping size specifying mime header 
cache reads entire object forwarding cache may inject latency retrieval worse client may time terminate transfer lead user believe url unavailable 
decided support size specification avoid timeout problem 
related problem arises object exceeds configured maximum cacheable object size 
fetching object exceeds maximum object size cache releases object disk store continues forward object waiting clients 
feature fortunate consequence protecting cache web applications send endless streams terminated explicit user actions 
web clients requesting url transmit mime header details viewer capabilities 
mime headers differ mosaic netscape user user 
variable mime headers impact performance transparency 
happens mosaic mime headers range bytes kilobyte frequently fragmented ip packets 
netscape mime headers shorter fit single ip packet 
seemingly inconsequential details major impact force trade transparency performance 
user object netscape re mosaic mime headers differ officially treat separate objects 
likewise mosaic users naming url generate different mime headers 
means url hit parent sibling cache correctness dictates requested mime headers compared 
essentially correctness dictates cache hit rate zero difference optional field mime header user agent means cached objects different url name object url plus mime header 
correctness cache save url object mime header 
testing complete mime headers parent sibling udp ping protocol expensive wasteful 
reasons compare mime headers 
second servers completely implement protocol close connection client reading client entire mime header 
underlying operating system issues tcp reset control message leads cache believe request failed 
longer client mime header higher probability occurs 
means mime headers cause problem frequently netscape mime headers 
reason receives tcp reset mosaic transparently re issues request short netscape length mime header 
leaves transparency failure cache propagate tcp resets clients 
cache returns warning message requested object may truncated due non conforming server 
third current servers mark objects ttl assist cache consistency 
absence help servers cache applies set rules determine requested url dynamically evaluated uncacheable object 
news services replace objects times single day object urls imply object cacheable 
user hits client reload button mosaic netscape client issues request url adds don return cache mime header forces cache hierarchically fault fresh copy item 
reload button intrusive aspect cache users 
fourth mosaic netscape contain small mistake proxy gopher implementations 
months periodically re reported bug netscape communications ncsa organizations chose fix bug 
eventually modified cache avoid client bugs forcing cache translate gopher ftp protocols properly formatted html 
note harvest cache encapsulating protocol see section supports features protocol sacrifices name transparency 
may change cache cache exchanges encapsulating protocol 
deployment harvest caches get placed production networks continue learn subtle lessons 
lesson interaction dns negative cache 
users distant objects occasionally cache dns resolver times reports lookup failure cache adds ip address negative ip cache 
seconds user queries dns directly server returns quick result 
happened course nameserver resolves name time cache gives time frustrated user queries name server directly 
negative cache continue report url unresolvable configured negative caching interval 
needless say quickly dramatically decreased default negative cache interval 
times harvest caches dns name managed resolve inconsistent secondary name server domain 
frustrated user resolves name directly may get reply different consistent secondary server 
user reports bug harvest declares name bad 
caches serving intense workloads overflowed operating system open file table exhausted available tcp port number space 
solve problems stopped accepting connections new clients approach file descriptor open file table limit 
added watchdog timers shut clients servers refused close connections 
people port cache various flavors unix struggle get non blocking disk correctly specified 
deploying web cache harvest netscape cern regional network internet service provider tricky business 
web providers customize pages particular browsers maintaining high cache hit rate harder harder 
open systems vs file systems problems faced implementing harvest object cache solved decade ago operating systems community realm distributed file systems 
question naturally arises just file system dump web example transarc proposes afs replacement 
afs clearly provides better caching replication management security properties current web 
reached point exponential growth characterizes parts internet infrastructure case tcp ip dns ftp gopher www protocols services 
internet community prefer rediscover re implement technologies operating systems community long ago solved 
part answer certainly engineers reinvent wheel naturally lazy build simplest possible system satisfy immediate goals 
deeper believe answer internet protocols services widespread characterizing qualities simplicity installation openness 
complex proprietary piece software afs fails tests 
see basic structural issue believe file systems wrong abstraction ubiquitous information systems 
bundle collection features consistency caching way overkill applications way modify feature set change code operating system provide mechanisms allow applications selective control features offered kernel build time options 
internet community chosen loosely coupled way select features la carte construction component technologies 
afs global information service internet users chose wealth session protocols gopher presentation layer services kerberos pgp lempel ziv compression separate cache replication services 
lead poor choices running web caching support economics push internet better technical configuration distant 
rapidly changing competitive multi vendor environment realistic combine features component technologies wrap complete set operating system 
related orts great deal research caching 
restrict discussion wide area network caching efforts 
earliest efforts support caching widearea network environment domain naming system 
general file object cache dns supports name lookup results server server client server resolver client library provide client caching timeouts cache consistency 
afs provides wide area file system environment supporting file caching 
harvest cache afs handles cache consistency server callback scheme exhibits scaling problems environment objects globally popular 
harvest cache implementation currently available uses timeouts cache consistency experimented hierarchical invalidation scheme see section 
harvest implements general caching interface allowing objects cached variety access protocols ftp gopher afs caches single afs access protocol 
gwertzman seltzer investigated mechanism called geographical push caching server chooses replicate documents function observed traffic patterns 
approach advantage choice cache place copies server global knowledge behavior 
contrast bestavros explored idea letting clients choice cache applicationlevel knowledge user profiles locally configured descriptions organizational boundaries 
choice motivated finding cache performance improved biasing cache replacement policy favor heavily shared local documents 
bestavros explored mechanism distributing popular documents server knowledge 
number simulation studies caching large environments 
trace driven simulations alonso blaze showed server load reduced 
muntz honeyman showed caching hierarchy help typical unix workloads 
years ago demonstrated ftp access patterns exhibit significant sharing calculated early nsfnet traffic caused repeated access read ftp objects 
network object including cern cache netscape client cache 
netscape currently uses mb default disk cache client improve client performance single user high hit rate affect network traffic substantially 
cern cache effort improve client performance allowing alternate access points heavily popular objects 
compared client cache additional benefit distributing traffic approach forking server lacks required scalability 
harvest unique systems support caching hierarchy high performance implementation 
hierarchical approach distributes reduces traffic non blocking non forking architecture provides greater scalability 
increase server performance client performance 
cate alex file system completed explosive growth web exports cache anonymous ftp space nfs interface 
performance alex caches ip addresses keeps object meta data memory caches ftp connections remote servers stream fetches multiple files 
alex uses ttl consistency caching files tenth elapsed time file fetched file creation modification date 
architecture harvest cache similar alex ways harvest caches ip addresses keeps meta data memory implements similar life time object consistency algorithm 
harvest stream connections gopher web servers protocols support streaming access 
contrast alex exports ftp files udp nfs protocol harvest exports gopher ftp web objects proxy interface implemented web browsers 
furthermore harvest cache supports hierarchical caching implements consistency protocol tailored web objects serves fast httpd accelerator 
summary internet information systems evolved rapidly postponed performance scalability sake functionality easy deployment 
continue meet exponentially growing demand new infrastructure 
designed harvest hierarchical object cache 
presents measurements show harvest cache achieves better order magnitude performance improvement proxy caches 
demonstrates inherently slow protocol popular implementations ignored sage advice common case fast 
hierarchical caching distributes load away server hot spots raised globally popular information objects reduces access latency protects network erroneous clients 
high performance particularly important higher levels cache hierarchy may experience heavy service request rates 
internet autonomy scale difficult challenges way design build system software 
software accepted de facto standards merits deficiencies may live forever 
reason real world complexities internet face difficult design decisions 
maze protocols independent software implementations known bugs comprise internet upper layers frequently force tradeoffs design operational transparency 
discusses tradeoffs forced 
software measurement data availability harvest cache runs operating systems including sunos solaris dec osf hp ux sgi linux ibm aix 
binary source distributions cache available excalibur usc edu 
test code list urls employed performance evaluation available excalibur usc edu experiments 
reader get information harvest system harvest cs colorado edu 
acknowledgments supported part advanced research projects agency contract number dabt 
danzig supported part air force office scientific research award number hughes aircraft nasa project subcontract number ecs national science foundation institutional infrastructure number cda 
schwartz supported part national science foundation numbers ncr ncr equipment sun microsystems collaborative research program university colorado office vice academic affairs 
chuck neerdaels supported hbp nih mh da 
information contained necessarily reflect position policy government sponsors research 
official endorsement inferred 
john noll writing initial cache prototype 
darren hardy duane wessels done integrating cache harvest system 
rafael alonso matthew blaze 
long term caching strategies large distributed file systems 
proceedings usenix summer conference pages june 
rafael alonso matthew blaze 
dynamic hierarchical caching large scale distributed file systems 
proceedings international conference distributed computing systems june 
azer bestavros 
demand document dissemination world wide web 
computer science department boston university february 
available ftp cs ftp bu edu techreports webserver dissemination ps nathaniel borenstein ned freed 
rfc mime multipurpose internet mail extensions part mechanisms specifying describing format internet message bodies september 
mic bowman peter danzig darren hardy udi manber michael schwartz 
harvest information discovery access system 
proceedings second international world wide web conference pages october 
available ftp ftp cs colorado edu pub cs techreports schwartz harvest conf ps paul de bra reiner post 
information retrieval world wide web making client searching feasible 
available www win tue nl win cs www www html 
hans werner braun kimberly claffy 
web traffic characterization assessment impact caching documents ncsa web server 
second international world wide web conference october 
vincent cate 
alex global filesystem 
proceedings usenix file systems workshop pages may 
peter danzig katia obraczka anant kumar 
analysis wide area name server traffic study domain name system 
acm sigcomm conference pages august 
peter danzig michael schwartz richard hall 
case caching file objects inside internetworks 
acm sigcomm conference pages september 
bestavros application level document caching internet 
workshop services distributed networked environments summer 
available ftp cs ftp bu edu techreports caching ps january 
james gwertzman margo seltzer 
case geographical push caching 
hotos conference 
available ftp das ftp harvard edu techreports tr ps gz 
darren hardy michael schwartz duane wessels 
harvest user manual september 
version 
available harvest cs colorado edu 
john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
lampson 
hints computer system design 
operating systems review oct 
ari luotonen henrik frystyk tim berners lee 
cern httpd public domain hypertext proxy server caching 
available info cern ch hypertext www daemon status html 
paul mockapetris 
rfc domain names implementation specification 
technical report university southern california information sciences institute november 
muntz honeyman 
multi level caching distributed file systems cache ain trash 
proceedings usenix winter conference pages january 
mic bowman alfred spector 
information sharing wide area file system 
transarc july 
available ftp grand central org darpa arpa papers usenix ps 
kurt jeffery worrell 
invalidation large scale network object caches 
department computer science university colorado boulder colorado december 
thesis available ftp ftp cs colorado edu pub cs techreports schwartz ps chankhunthod received eng electrical engineering chiang mai university thailand computer engineering university southern california 
currently ph candidate computer engineering university southern california 
shortly receiving eng joined faculty department engineering chiang mai university currently leave extending education 
currently research assistant networking distributed system laboratory university southern california 
research focuses computer networking distributed systems 
contacted usc edu 
peter danzig received applied physics university california davis ph computer science university california berkeley 
currently assistant professor southern california 
research addresses building scalable internet information systems flow congestion admission control algorithms internet 
served acm sigcomm acm sig metrics program committees associate editor internetworking research experience 
contacted danzig usc edu 
neerdaels received aerospace engineering mechanics university minnesota minneapolis 
years defense industry continued education computer science university southern california 
left university member technical staff proxy development netscape communications reached netscape com 
ca michael schwartz received ph computer science university washington time joined faculty computer science department university colorado boulder 
schwartz research focuses international scale networks distributed systems 
built experimented dozen information systems chairs irtf research group resource discovery built harvest system 
schwartz editorial board ieee acm transactions networking guest editor ieee journal selected communication special issue global internet 
schwartz joined home silicon valley startup doing internet cable currently leading directory service effort 
schwartz reached schwartz home net 
