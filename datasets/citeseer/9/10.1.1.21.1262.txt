agent oriented analysis message uml giovanni caire telecom italia lab reiss turin italy giovanni caire com francisco garijo jorge gomez juan vargas madrid spain tid es presents message uml agent oriented software engineering methodology illustrates analysis case study 
methodology covers mas analysis design intended mainstream software engineering departments 
message extends uml contributing agent knowledge level concepts diagrams notations viewing 
diagrams extend uml class activity diagrams 
categories subject descriptors software engineering requirements specifications methodologies 
general terms languages documentation 
keywords agent methodology uml analysis 

agent oriented software engineering agent oriented ao approach promises ability construct flexible systems complex sophisticated behaviour combining highly modular components 
intelligence components agents capacity social interaction results multi agent system mas capabilities simple sum agents 
availability agent oriented development toolkits allowed technology assessed industrial 
case studies carried yielding promising results permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
conference month city state 
copyright acm 
francisco paulo pt de porto portugal pt paul kearney jamie stark park heath ip re uk paul kearney bt com richard evans research kestrel house place dublin ireland re philippe massonet av 
georges tre belgium info ucl ac aroused industrial interest technology 
software engineering methodologies designed object oriented approach 
engineering commercial mas requires availability agent oriented software engineering aose methodologies 
mas systems implemented object component technology near widely accepted agent programming language emerges 
case viewed detailed level agent relatively complex object component 
considering house pile bricks convenient view house terms higher level concepts living room kitchen bedroom 
agent viewed level structures come focus conventional objects components 
agent orientation paradigm analysis design system organisation 
agentoriented modelling language provide primitives describing higher level structures inspiration derives cognitive psychology social modelling artificial intelligence 
message methodology engineering systems software agents aose methodology builds current software engineering best practices covering analysis design mas appropriate mainstream software engineering departments 
defined concepts notation uml appropriate 
comparison approaches aose methodology divided broad categories 
category aims apply existing software engineering methodologies aose 
auml example defines extensions uml notations suited agent concepts 
auml extended uml interaction diagrams handle agent interaction protocols 
notation useful adopted message year collaborative project funded 
research organisation owned european telecommunications companies www de 
message concept agent centre specifying object behaviour terms interaction protocols agent 
second category aims developing methodology agent theory mainly covering analysis design 
typically methodologies define number models analysis design gaia mas commonkads 
gaia methodology analysis models design models 
analysis models defined concepts represent subset concepts required agent oriented analysis 
design models clearly explained authors envisage oo methods detailed design 
mas common kads models analysis design 
models comprehensive method lacks unifying semantic framework notation 
addition goal analysis techniques shown useful :10.1.1.36.7311
techniques range informal formal analysis cover functional non functional goal analysis 
message combines best features approaches 
outline contributions message uml methodology covers mas analysis design designed mainstream software engineering departments 
article focuses analysis mas message uml 
section describes principal knowledge level agent oriented message concepts describes different views analysis model 
section describes message analysis process 
section describes analysis case study message uml notation 
diagram types introduced organisation goal task delegation workflow interaction domain 
extensions uml class diagrams task diagram extends uml activity diagram 
schemas textually describe concepts illustrated 
contributions message agent knowledge level concepts diagrams viewing concepts analysis model added uml 
case study focuses illustrating new agent related concepts new diagrams visualise 
complete case study involve existing uml notation addition new notation 

message description extending uml agent modelling uml convenient starting point agent oriented modelling language reasons uml widely accepted de facto standard objectoriented modelling software engineers trained commercial software tools available support extendable 
object agent oriented paradigms highly compatible 
agent oriented concepts readily defined terms object oriented ones 
uml meta model uml uses mof metamodelling language extendable 
message modelling language related uml follows 
shares common metamodelling language metametamodel uml mof 
extends uml metamodel knowledge level agentoriented concepts 
complete description relationship message metamodel uml metamodel 
main message concepts foundations uml concepts model message entities detailed micro level 
structural standpoint objects attributes operations realised methods behavioural point view state machines 
main uml behavioural concepts define physics message worldview action event state 
world seen collection 
full description world state consists description state statemachine point time 
evolution world time described fully description world state specific point time list events world participates time 
full description referred world history 
situation knowledge macro level analogue world state 
knowledge level concepts message knowledge level entity concepts fall main categories activity 
main types agent agent atomic autonomous entity capable performing potentially useful function 
functional capability captured agent services 
service knowledge level analogue object operation 
quality autonomy means agent actions solely dictated external events interactions motivation 
capture motivation attribute named purpose 
purpose example influence agent agrees request perform service way provides service 
specialisations agent 
organisation organisation group agents working common purpose 
virtual entity sense system individual computational entity corresponding organisation services provided purpose achieved collectively constituent agents 
structure expressed power relationships relationships constituents behaviour ordination mechanisms expressed interactions constituents 
role distinction role agent analogous interface object class role describes external characteristics agent particular context 
agent may capable playing roles multiple agents may able play role 
roles indirect agents 
useful defining reusable patterns 
resource resource represent non autonomous entities databases external programs agents 
standard object oriented concepts adequate modelling resources 
main types activity task task knowledge level unit activity single prime performer 
task set pairs situations describing pre post conditions 
task performed precondition valid expect associated postcondition hold task completed 
composite tasks expressed terms causally linked sub tasks may different performers parent task 
tasks uml activity diagrams show temporal dependencies sub tasks 
interaction message concept interaction borrows heavily gaia methodology 
interaction definition participant purpose participants collectively aim achieve 
purpose typically reach consistent view aspect problem domain agree terms service exchange results services 
defines pattern message exchange associated interaction 
internal architecture agent typically models derived cognitive psychology 
message intended applicable variety agent cognitive architectures 
basic model difficult say meaningful 
suppose architecture separates inference mechanism knowledge base working memory 
knowledge base contains fixed slowly changing domain problem solving knowledge declarative form 
working memory contains transient sensed derived information 
view working memory database holding instances contents define agent mental state purposes focus type goal 
goal goal associates agent situation 
goal instance agent working memory agent intends bring situation referenced goal 
goals intrinsic agent identity derived purpose 
persist life agent 
transient tactical goals 
useful express purpose terms utility function associates goodness values situations 
target situation goal estimated maximise utility determined dynamically 
note agent knowledge base needs include rules governing assertion deletion tactical goals 
fairly standard rule assert goal provide service agent agrees agent 
simple important concepts message object encapsulating chunk information message 
agent oriented concept message differs object orient number respects 
uml message causal link chain behaviour indicating action performed object triggers action object 
message message object communicated agents 
transmission message takes finite time requires action performed sender receiver 
attributes message specify sender receiver speech act categorising message terms intent sender content 
message concepts gives informal agent centric overview concepts interrelated 
information entity goal describes describes stateof resource perceives event plays performs role agent generates affects action provides acquaintance implements communicative action message concepts service task analysis model views analysis model complex network inter related classes instances derived concepts defined message uml metamodel 
message defines number views focus overlapping sub sets entity relationship concepts 
organisation view ov shows agents organisations roles resources system environment coarse grained relationships aggregation power acquaintance relationships 
acquaintance relationship indicates existence interaction involving entities concerned 
goal task view shows goals tasks situations dependencies 
goals tasks attributes type situation linked logical dependencies form graphs show decomposition high level goals sub goals tasks performed achieve goals 
graphs showing temporal dependencies drawn uml activity diagram notation useful 
agent role view av focuses individual agents roles 
agent role uses schemata supported diagrams characteristics goals responsible events needs sense resources controls tasks knows perform behaviour rules interaction view iv interaction agents roles shows initiator collaborators motivator generally goal initiator responsible relevant information supplied achieved participant events trigger interaction relevant effects interaction agent responsible new goal 
larger chains interaction system corresponding uses cases considered 
domain view dv shows domain specific concepts relations relevant system development system dealing making travel arrangements view show concepts trip flight ticket hotel 
provisional ideas notation diagrams schemas visualise views illustrated case study section 

analysis process purpose analysis produce model collection models system developed environment agreed analyst customer stakeholders 
aids communication development team customer provides basis design proceed confidence 
analysis models produced stepwise refinement 
refinement approach top level decomposition referred level 
initial level concerned defining system developed respect stakeholders environment 
system viewed set organisations interact resources actors organisations 
actors may human users existing agents 
subsequent stages refinement result creation models level level 
level modelling process starts building organisation goal task views 
views act inputs creating agent role domain views 
interaction view built input models 
level model gives view system environment global functionality 
granularity level focuses identification entities relationships metamodel 
details internal structure behaviour entities progressively added levels 
level structure behaviour entities organisation agents tasks goals domain entities defined additional levels defined analysing specific aspects system dealing functional requirements non functional requirements performance distribution fault tolerance security 
consistency subsequent levels 
message project level level considered 
analysis refinement strategies strategies possible refining level models 
organisation centred approaches focus analysing properties system structure services offered global tasks goals main roles resources 
agents needed achieving goals appear naturally refinement process 
operation possible conflicts conflict resolution may analysed 
agent centred approaches focus identification agents needed providing system functionality 
suitable organisation identified system requirements 
interaction oriented approaches suggest progressive refinement interaction scenarios characterise internal external behaviour organisation agents 
scenarios source characterising task goal messages protocols domain entities 
goal task decomposition approaches functional decomposition 
system roles goals tasks systematically analysed order determine resolution conditions problemsolving methods decomposition failure treatment 
task preconditions task structures task output task post condition may determine domain entities needed 
goals tasks performed agents playing certain roles 
consequently looking structure goal tasks goal task view decisions appropriate agents organisation structure achieving goals tasks 
experience message shows different views system leave analyst free choose appropriate strategy 
practice combination refinement strategies frequent loop backs 
analysis process start ov switch av continue iv 
results analysis specific interaction scenarios may lead reconsider part ov starting refining adapting ov constituents 

message uml case study section illustrates message uml concepts views case study 
message diagrams introduced proposed notations 
analysis process illustrated describing level refining level 
case study description system development knowledge management system team engineers telecom operator toc perform equipment installation maintenance operations territory 
context engineer team gets list jobs assigned ordination centre performs sequentially moving territory van 
job fills proper form reports type problem problem solved 
forms sent back ordination centre relevant information stored database 
toc owns database storing technical documentation equipment deployed fields 
requirements toc wants improve efficiency process giving engineer proper wireless terminal developing system distributed terminals terrestrial network automatically notifies engineers jobs assigned automatically request retrieves relevant documentation job carried 
automatically request identifies engineers team provide help job performed proper skills solved similar problems possible engineer directly receive assistance qualified engineer 
allows engineers report performed jobs filling electronic form relevant information directly inserted report database 
appropriateness agent approach case study documentation relevant job proactively provided engineer going perform job system developed requires components show high degree autonomy 
impossible exactly foresee possible faults happen equipment maintained goal oriented behaviour needed 
finding engineer proper skills provide assistance certain job may require form negotiation distributed ordination 
level analysis organisation view analysis starts level viewing system developed black box focusing relationships entities environment users stakeholders resources 
diagrams level organisation view reported examples showing main system point view structural acquaintance relationship toc 
describes structural relationships level organisation diagram 
diagram shows knowledge management km system owned toc 
engineer part team teams toc 
noticed organisation diagram uml class diagram proper icons associated different stereotypes 
level system development km system seen organisation analysed level 
resource zation equipment km system class role doc database coord 
center report database team engineer structural relationships system 
shows acquaintance relationships level organization diagram 
km system interacts roles system administrator engineer external systems resources technical documentation db retrieve documentation report db insert job reports filled engineers 
interacts coordination center get list jobs perform 
engineer interacts engineers get direct help 
noticed engineer interact directly documentation db report db 
interactions carried km system 
system 
retrieves documentation doc database acquaintance km system report database coord 
center engineer stores reports installs maintains equipment acquaintance relationships goal task view goal view main goal system providing assistance engineers decomposed goal decomposition diagram 
goal decomp 
decomp 
known documentation provided documentation job identified engineer assisted qualified engineer identified documentation job retrieved goal decomposition documentation diagram shows main goal system satisfied relevant documentation current job provided name qualified engineer possibly request direct help identified 
goal turn satisfied job performed known documentation required perform job identified retrieved documentation assisted engineer 
decomposition goal shown 
alternative decompositions modelled decomposition notation illustrated 
alternatively conjunction goal decomposition useful analyse service realised partially ordered set tasks 
example shows workflow tasks implementing identify qualified engineer service means task diagram uml activity diagram tasks shown activities 
task service identify required skills identify engineers service required user activate direct connection task workflow score engineers level analysis organization view moving level level analysis focuses system identifying glance main pieces functionality required seen roles types agents 
approach followed simple case study consider roles initially define agents populate system roles agent play design process 
developer free start identifying agents analysis 
engineer communicator coord 
center skills manager assistant job report database report manager doc database doc 
manager acquaintance relationships shows level acquaintance relationships organization diagram 
skills manager maintains knowledge engineer skills basis jobs carries 
interaction assistants requires contract net identify engineer right skills provide assistance job 
agent role view delegation workflow structure diagrams textual agent role schemas useful describe view 
delegation structure diagram shows sub goals obtained decomposing goal organisation assigned agents roles included organisation 
clearly diagram strictly related consistent goal decomposition diagram showing decomposition organisation goal organisation diagram showing agents roles inside organisation 
parent pane structure pane job perform known child pane assistant km system engineer assisted documentation job retrieved documentation job identified doc 
manager delegation structure documentation communicator shows delegation diagram 
root leaves decomposition parent organisation goal shown 
similarly workflow structure diagram shows roles organisation perform tasks necessary implement service provided organisation 
agent role agent role schema describes characteristics 
analysis level information typically quite informal free text preferred graphical notation 
schema describes assistant role 
role schema assistant goals capability learning capability required keep profile engineer updated basis completed job 
knowledge beliefs profile skills engineer evaluate engineer provide help colleague requesting assistance profile agent requirements role played agent assists engineer 
interaction view view highlights agents roles need communicate leaving details communication takes place design process 
interaction view typically refined iterations long new interactions discovered 
conveniently expressed means number interaction diagrams 
diagrams interaction centric diagram interaction show initiator responders motivator goal initiator interaction plus optional information trigger condition information achieved supplied participant 
picture shows example interaction diagram describing documentation request interaction assistant documentation manager roles 
shows interaction diagram 
interaction initiator documentation collaborator doc 
assistant request manager supplies achieves documentation job retrieved job document motivator interactions uses supplies details interaction protocol messages exchanged roles represented auml sequence diagram 
domain view domain view conveniently represented means typical uml class diagrams classes represent domain specific concepts named association represent domain specific relations 
typically built parallel views adding new concepts relations long needed views 
shows provides simplified example related considered case study 
job installation maintenance refers equipment describes domain document 
message uml aose methodology illustrated analysis case study 
message extends uml contributing agent knowledge level concepts diagrams notations viewing 
diagrams extend uml class activity diagrams 
methodology covers mas analysis design designed mainstream software engineering departments 
section described principal knowledge level agent oriented message concepts described message specification organised terms analysis model views 
overlapping views defined analysis model organisation goal task agent role interaction domain 
section described message analysis process 
section described analysis case study message uml notation 
diagrams illustrated organisation goal decomposition task delegation workflow interaction domain 
schemas textually describe concepts illustrated 
complete analysis model complete message diagrams existing uml notation auml sequence diagrams describe role agent interactions 

acknowledgments authors project support project contributors past 

omg unified modeling language specification version 
object management group www rational com uml resources documentation index june 
bauer response omg analysis design task force uml request information extending uml specification agent interaction protocols ftp ftp omg org pub docs ad pdf omg december 
omg meta object facility mof specification 
ftp ftp omg org pub docs ad pdf september 
dardenne van lamsweerde fickas goal directed requirements acquisition :10.1.1.36.7311
science computer programming vol 
north holland 
message website www de public projects series htm wooldridge jennings kinny gaia methodology agent oriented analysis design 
kluwer academic press 
garijo gonzalez analysis design multiagent systems mas commonkads 
intelligent agents iv agent theories architectures languages singh rao wooldridge eds lecture notes computer science 
gonzalez survey agent oriented methodologies 
agent theories architectures languages 
odell van dyke parunak bauer extending uml agents 
proc 
agent oriented information systems workshop th national conference artificial intelligence wagner lesperance yu eds 

mylopoulos chung liao wang yu exploring alternatives requirements analysis 
ieee software vol 

