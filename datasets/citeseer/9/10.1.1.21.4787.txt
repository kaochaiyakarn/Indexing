key storage secure networks martin dyer school computer studies university leeds leeds trevor fenner department computer science college university london london alan frieze department mathematics carnegie mellon university pittsburgh andrew thomason department pure mathematics mathematical statistics university cambridge cambridge november consider systems keys encrypting messages derived pairwise intersections sets private keys issued users 
give improved bounds storage requirements systems type secure communication large network 
supported nato rg supported nsf ccr nato rg problem secure communication network multiple users considered blom mitchell piper li gong wheeler authors 
papers consider solution key distribution centre kdc principle issue unique cryptographic key pairs users network choose communication 
suppose ng set users 
possible pairs large direct implementation involve storage keys 
modern computer networks fact large current trends increase number users attached networks 
mitchell piper inspired proposal blom considered scheme kdc stores global set keys jkj issues user subset keys 
assume keys numbered arbitrarily directory need secure lists numbers keys held user 
user wishes communicate user key constructed set keys contained 
information numbered keys users hold exchanged secure communication 
insist user true required keys clearly available users single user 
keys transformed possibly way function key encrypt communication users mitchell piper discuss various schemes require keys total opposed required direct implementation 
li gong wheeler give di erent scheme requiring keys total user required hold keys 
call schemes type discussed set intersection schemes 
section demonstrate existence set intersection schemes requiring log keys total fortiori user hold log keys 
show optimal constant factors 
constant factors course important applications show quite reasonable size scheme 
construction application probabilistic method combinatorics 
simple robust method obtaining combinatorial constructions deserves widely known cryptography community 
section give experimental evaluations proposals demonstrate practical feasibility 
counter possible objections random methods show section necessary construction derandomized method conditional probabilities 
known diculty set intersection schemes problem collusion 
members group jw choose disclose keys number user may possess subset keys group communicate clearly compromises network secure communication users examine problem section give upper lower bounds number keys required ensure network security groups colluders section consider generalization problem communication groups users section concluding remarks 
space ecient key storage system lg log rst simple result appears di erent form 
lemma set intersection scheme requires user hold lg keys lg keys total 
proof user lg keys form distinct nonempty subsets keys 
di erent intersection users 
pairs users key intersections form set antichain 
follows bk implies lg 
demonstration number keys needed order log somewhat delicate argument crude proof lemma erd os frankl showed lg keys needed 
fact exist set intersection schemes users log keys 
shall show probabilistic arguments nd schemes 
note argument similiar delicate shall employ erd os frankl shown existence schemes lg keys 
aim show schemes bigger constructed easily 
show theorem exists set intersection scheme requiring lg ne keys total 
proof suppose sets generated randomly way 
random variable indicator event bad triple triple expected number bad triples js rs upper bound probability existence bad triple 
independent bernoulli variables pr pr bad triple minimized choosing 
lg easy check pr bad triple lg generate sets randomly manner probability scheme generate 
observe may check generated scheme required properties 
done computation checking triples ensure bad 
feasible small easily implemented parallel 
fact checking problem easily seen class nc eciently parallelizable problems 
may observed scheme generated checked randomized parallel computation 
generating checking parallel complexity class rnc 
practical schemes practical point view moral previous section set intersection schemes best generated random 
example instructive compare bound theorem 
matrix schemes require keys 
lg 
say lg ne seventh key requirement 
total number keys stored users method approximately lg smaller say 
lest appear disadvantage method observed comparisons entirely fair scheme proven free bad triples total number keys stored case method gives smaller total say 
bound estimates probabilities may pessimistic small practice fact better theorem imply 
chose simple random model theoretical analysis easy practice ecient choose models 
particular select user random subset keys selecting probability better give user random subset size xed best value choose minimises probability randomly chosen triple bad sense proof theorem 
probability size intersection usually minimum value substituted demonstrate existence scheme users fewer keys required theorem 
small values gain striking 
users theorem proof shows existence scheme keys number keys rising users users users 
dramatically method choosing sets allows gures reduced keys keys keys keys respectively 
table gives data table column labelled thm 
gives upper bound number keys required proof theorem column labelled sets gives improved upper bound method choosing sets 
method genuinely practical 
users schemes generated tested sun sparcstation minutes rising minutes users increase time doubling number users 
larger numbers users user asked check keys performing checking computation distributed manner users user check keys hours sequential time sparc 
course user need check keys secure communication table existence set intersection schemes number keys required users thm 
sets risk risk users anticipates communicating second user 
large number users envisaged value chosen ensure probability incorrect scheme generated say users suce 
veri ed checking holds 
values ensuring randomly chosen collection sets give set intersection scheme users probability risk column table risk column analogous meaning 
ecient way generate schemes practice select suitable value compute best value randomly select subsets size stopping forms bad triple previous choices 
way quite large schemes relatively keys 
bad choice early method susceptible bad luck allowing random choice failed choice choice necessary speci ed limit number successive failures stopping 
method call retry method tried practice results summarised table 
value keys column table set intersection schemes retry method number users keys fails min mean max number failures allowed fails column attempts generate schemes method 
table shows minimum mean maximum number users nal schemes 
note number keys needed number users dramatically table instance scheme users keys just minutes computer time 
derandomization practice believe ecient randomized scheme practically acceptable see section theoretical point view wish dispense requirement randomization 
easily achieved method conditional probabilities 
theorem set intersection scheme theorem generated time deterministic algorithm storage 
proof suppose construct sets xing time major order minor order ensure initially probability bad triple 
come previous xed 
unknown bernoulli random variables probability 
assume value stage 
try turn cases evaluate expected value 
reader may check accomplished computation products sum stored updated changes 
expected values calculated way clearly pe 
proceed variable 
may choose arbitrarily 
obviously terminate constructed desired scheme 
algorithm takes nk time 
may observed complexity checking randomized construction 
important di erence practical point view 
derandomized algorithm appear eciently parallelizable 
problem collusion consider collusion problem mentioned section 
rst establish lower bound context 
theorem set intersection scheme secure colluders lg lg keys 
proof communicating sets cw possible colluding sets 

cw suppose take possible intersections pairs sets unions intersections form set antichain 
sets 
aw bw 
cw dw contradicts 
note pairs left right contradiction pairs 
pair pairs right side 
pair may select pair set choices allows construct contradiction required 
bk bound follows easy manipulations 
note set families set contained union studied greater depth erd os frankl 
simple argument see growing linearly number potential colluders 
dicult achieve 
randomized achieve theorem exists set intersection scheme secure colluders ln keys 
proof suppose choose sets randomly probabilities notation proof theorem probability successful collusion xed sets cw pr 
cw minimized putting giving pr 
cw exp kw expected number successful 
exp kw 
ln corollary exists set intersection scheme secure colluders ln ne keys 
proof method theorem derandomized section 
theorem obtain scheme guaranteed secure colluders network users keys 
user keys average 
guaranteed secure large colluders scheme requires keys user holding keys 
keys total user holding 
multimap scheme requires user keys requires keys total 
gives keys user having 
scheme multimap scheme require keys user scheme needs just keys keys multimap 
corresponding gures keys user holding average keys scheme keys user holding scheme keys user holding multimap scheme 
drawback randomized construction derandomization 
wish check scheme meets security speci cation computational burden grow 
clearly infeasible large small 
practical point view answer probabilities suciently small 
show expense keys construct schemes checkable time little required basic scheme section 
theorem exists set intersection scheme secure colluders requiring ln ne keys total checked constructed deterministically time 
proof choose sets ln probability 
communicating sets sucient ensure set jc bj ja bj clearly implies collection cw 
bound probability follows version cherno bound tails binomial distribution 
see example 
pr ja bj exp ln pr exist xed pr ja cj pr ja cj proof see bollob theorem ii 
pr exist follows scheme exists nonzero probability 
checking derandomization scheme involves establishing conditions triples 
achieved similar method discussed theorem 
practical versions schemes suggested developed section 
groups users mitchell piper consider generalization problem considered subset users size needs key known members group 
key constructed intersections sets taken time pairs done far 
call schemes intersection schemes 
set intersection scheme intersection scheme 
methods readily generalize situation 
may prove lower bound analogous theorem 
theorem intersection scheme secure colluders lg lg lg 
proof method theorem consider intersections sets taken time avoid cumbersome notation introduce temporary terminology 
word block mean set keys assigned users group intersection blocks 
term collusion mean set groups 
sets formed unions groups possible collusion antichain 
union collusion contained 
show implies contradiction security assumption suppose union collusion contained collusion group clearly appear blocks forming group group group select block union blocks contains intersection giving contradiction 
bk implies giving bound 
corresponding theorem theorem exists intersection scheme secure colluders ln keys 
proof proof similar theorem 
selecting sets randomly probability probability successful collusion pr 

cw minimized putting 
exp kg expected number successful exp kg ln construction required 
concluding remarks basic scheme propose small factor times optimal 
practice method section better 
exceedingly dicult nd deterministic combinatorial constructions having required property small 
collusion proof schemes harder produce 
note order growth upper bound corollary opposed lower bound theorem 
establishing correct order growth remains open question 
crucial question bound theorem large appreciable bound theorem larger 
consider groups section situation worse 
possible criticism scheme comparison block designs set intersections vary size 
really practical diculty required pad intersections standard length dummy keys known users 
methods checking derandomization clearly practicable relatively small massive parallelism available 
practice schemes propose generated randomly large ensuring failure probabilities remain small 
may raise questions practical production large numbers random bits 
question raised myriad successful applications random numbers 
usual practice employ suitably guaranteed pseudo random source path follow 
pseudo randomness unnecessary device quantum theory nature subject continual unavoidable random uctuation 
randomized algorithms constructions widely addition widespread random simulations 
consequently clear need development cheap physical devices generating truly random bits ways generating pseudo random bits 
modest example devices allow schemes proposed generated simply conveniently easily extended desired 

authors dr helpful discussions 
angluin valiant fast probabilistic algorithms hamiltonian circuits matchings journal computer system sciences 
blom non public key distribution advances cryptology proceedings eurocrypt plenum press new york pp 
blom optimal class symmetric key generation systems advances cryptology proceedings eurocrypt lecture notes computer science springer verlag berlin pp 
bollob random graphs academic press london 
erd os frankl families nite sets set covered union journal combinatorial theory ser 

erd os frankl families nite sets set covered union israel journal mathematics 
li gong wheeler matrix key storage scheme journal cryptology 
mitchell piper key storage secure networks discrete applied mathematics 
spencer lectures probabilistic method siam philadelphia 

