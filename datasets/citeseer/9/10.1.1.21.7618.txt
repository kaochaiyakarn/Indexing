workflow recovery johann eder walter liebhart institut fur informatik universitat klagenfurt austria email feder ifi uni ac workflow management systems wfmss basic technology organizations perform daily business processes workflows 
consistent reliable execution processes crucial organizations 
claim achieved integrating transactional features especially workflow transactions wfmss 
idea discuss detail advanced workflow recovery concepts necessary reliable consistent execution business processes presence failures exceptions 
additionally distinguish different workflow types adequate recovery concepts 

business processes typically consist multiple activities performed valid sequence 
activities represent unit specific application program phone call may characterized heterogeneous autonomous distributed 
workflow management systems wfmss expected control execution business processes 
sense wfms represents cooperative information system handles ordination operation activities constituting business process 
process activity strong influence success process 
severe problems may arise failures occur activity behave expected manner 
wfmss able react flexible failures ensure correct reliable execution processes presence concurrency failures 
pointed current commercial wfmss support functionality 
similar problems discussed database research supported project workflow transactions sponsored cse systems computer software engineering gmbh klagenfurt austria area idea transactions solved problems 
unfortunately concepts directly applicable workflow domain offer valuable ideas concepts relevant wfmss 
guarantee reliable consistent workflow executions kind transactions wfmss unavoidable 
differences traditional database transactions advanced transaction models call workflow transactions 
contrast advanced transaction models workflow transactions focus issues consistency business point view database point view 
motivating example workflow transactions wfmss illustrated 
ab ab ab undo ab abort connection 
connection success failure 
motivation workflow transactions example stresses complex simple workflow trying handle possible failures explicitly process description 
workflow right side example represents simple workflow left side extended possible failure paths 
course possible intended workflow designers model failures process description case complex soon especially original process complex 
introducing workflow transactions wfmss problem minimized considerably workflow transactions support automation failure handling runtime means right side computed automatically runtime 
detailed overview workflow recovery concepts necessary transaction workflow execution 
necessity advantages workflow transactions discussed introducing workflow model wamo 
model point relevant recovery concepts introduce recovery concepts go model 
section workflow activity model wamo briefly discussed related 
section points specific workflow characteristics influence workflow recovery 
section discuss workflow recovery concepts detail 
section describes possible realization concepts workflow recovery section concludes 

current approaches section short overview wamo model illustrate recovery concepts 
additionally discuss related mention relevant approaches area transaction workflows 

workflow activity model wamo workflow activity model wamo enables workflow designer easily model complex business processes simple straightforward manner 
basic idea decompose complex business process smaller units activities consist ideally preexisting tasks 
additionally simple control structures enriched transactional features allow definition failure tolerant processes 
wamo metamodel incorporates traditional workflow modeling features transactional features 
workflow typically consists multiple activities data objects agents 
activities represent description units business process 
data objects complex forms represent information exchanged activities 
agent human computer system responsible execution activity 
wamo supports hierarchical structuring workflows complex activities consist sub activities representing subprocesses 
furthermore certain activity may take part activities especially times activity enhances re usability 
new workflows easily composed re activities 
additionally complex activities support modeling control structures behavior activities 
wamo offers simple powerful control structures sequence parallel nesting ranked choice free choice 
choice constructs enable modeling alternative contingency activities 
alternative activity executed immediate previous activity fails 
contrast ranked choice execution order free choice list computed dynamically run time 
elementary activities called tasks activities decomposable 
workflow designers point view black boxes perform real workflow 
rest discussion distinguish tasks activities really necessary 
term activity clear context complex activity meant elementary task 
run time activities associated unique identifiers previous described control structures define execution order activities 
activities tasks different execution states execution failed compensated additionally able react specific events start compensate 
correct execution order activities fully control advanced transaction manager 
underlying advanced transactional features easy handle workflow designer process specification example ffl control structures control structures simple expressive mechanisms handle activity coordination requirements intra workflow dependencies 
ffl transaction specific features tasks specified detailed type force parameter 
additionally activities essential successful termination corresponding parent activity defined non vital 
wamo transactional features focus primarily consistency business processes contrast similar features advanced transaction models example focus consistency multi database systems 
type force parameters task necessary workflow recovery compensation 
type workflow designer specifies specific task behaves case compensation 
possibilities type means committed task need compensated necessary application point view 
type means committed task undone corresponding compensation task side effects sense inverse operation 
type compensatable means compensation task leads sideeffects money transfer back transfer transfer fees 
type critical means task terminated undone compensated effects irreversible current context drilling hole mailing sensitive information 
tasks real world situations expected terminate successfully open account print document may take attempts 
wamo offers task specific parameter force 
tasks simplify recovery actions case failure repeated re executed times specified workflow designer positive acknowledgment achieved process execution stops manual intervention 
important transaction relevant feature concept vital non vital activities order specify importance specific parent activity 
non vital activity fails workflow continue forward progress compensation actions 
normally activities workflow essential vital parent activity 
case vital activity fails compensation mechanism activated concept explained detail section 
previous mentioned concepts currently integrated prototype wfms 

related integration transactions workflows motivated research efforts concerning database transaction models advanced applications example summarized 
stated models developed database point view preserving consistency shared database transactions main objective 
basic fact models attempt traditional transactions building blocks focus specific applications restrictive transactional features rigid compensation policies restrict applicability workflow domain 
concepts advanced transaction concepts applied directly 
major expanding advanced transaction models workflow requirements done area transactional workflows 
mainly influenced database point view leads restrictive models 
modern wfmss support complex long running business processes heterogeneous distributed environment 
pointed systems lack ability ensure correctness reliability workflow execution presence failures 
currently approaches overcome shortcoming 
meteor project computational model workflows captures behavior transactional non transactional tasks different type 
additionally languages designed address important issues inter task dependencies data formatting data exchange error handling recovery 
example ibm exotica project aims exploring research areas advanced transaction management concepts client server architectures mobile computing context workflow management 
goal incorporate results commercial wfms ibm flowmark concerning workflow recovery research activities name 
discussion 
additionally necessity workflow recovery concepts slightly addressed 
specific area 
especially concept business transactions introduced describes basic workflow recovery ideas detail partial backward recovery 
exists broad discussion workflow recovery may seen deeper step important workflow area 

workflow characteristics influencing workflow recovery order discuss workflow recovery concepts detail necessary analyze areas influence recovery process 
believe possible general solution workflow recovery exist different workflow types demand different recovery approaches 
briefly workflow classification architecture helps identify possible workflow types 
second recovery actions necessary existence failures exceptions 
absolutely necessary analyze important failure types may occur workflow execution 
flowmark trademark international business machines 
workflow classification exists general accepted classification framework workflows processes workflow systems 
classifications focuses specific aspects difficult probably impossible give commonly accepted classification 
workflows characterized continuum human oriented system oriented workflows 
case workflow mainly performed human agents 
wfms expected support coordination collaboration humans responsible consistent workflow results 
second case workflows characterized highly automated computation intensive processes involve integration heterogeneous autonomous distributed information systems 
human influence limited system oriented workflows include software various concurrency control recovery techniques ensure consistency reliability 
classification distinguishes ad hoc administrative production workflow 
main differences types comprise predictability workflows tasks workflow controlled human controlled automated requirements wfms functionality 
previous classification ad hoc administrative workflows closer human oriented spectrum production workflows trip reservation loan requests insurance claims telecommunication processes represent complex business processes communicate different information systems closer system oriented continuum 
see subsection classification approach leads similar results points specific features relevant recovery concepts 
classification pillars static dynamic aspects workflow 
static aspects workflow static aspects workflow comprise components extracted workflow metamodel 
wamo metamodel workflow essentially consists activities data objects agents refer section 
look detailed components ffl activities activities especially tasks describe real items process 
step distinguish manual automatic interactive non interactive tasks 
manual tasks performed mainly human agents 
includes particular manual start manual termination tasks 
performed manual task fully control human agent making phone call writing letter wfmss support performing limited general reduced provide agent appropriate standard tools text processor 
side automatic tasks better supported wfms sense system start automatically task compute step process 
interactive automatic tasks associated specific programs software applications executed responsible human agent selected task worklist 
task execution agent communicates interactively associated program 
soon program terminates task reaches termination state 
non interactive automatic tasks specific batch programs fully executed control wfms program started automatically wfms executed completely human interaction 
ffl data objects workflow different kinds data primarily depending wfms knows semantics data relevant 
distinguish data manipulated tasks data needed process execution scheduling 
course different kinds data necessarily disjunctive amount loan loan request workflow tasks workflow scheduling order find correct path process 
precisely workflow application find data types application case data application data consumed produced various tasks applications workflow 
reasonable classify application data structured unstructured semi structured data order investigate easy type data process specification 
classification easy conclude structured data formatted data form suitable application specific usage process definitions 
process data process data necessary define control execution workflows 
typical examples state tasks start time task 
ffl agents important function wfms assign tasks agents eligible carry 
modeling definition agents composes simple sophisticated approaches 
classification distinguish human machine agents 
dynamic aspects workflow execution workflow mainly comprises answer question activity executed data 
questions termed functional behavioral organizational informational data perspectives 
want emphasize temporal execution order various activities workflow central topic 
perception informally define workflow definition execution correct activity sequences 
sequences defined follows ffl ad hoc corresponding formalism approach correct activity sequences determined human agents ad hoc workflow execution run time 
additionally distinguish correct sequences defined predefined activities 
case workflow composed defined parts run time case agents possibility define new activities workflows run time 
concept valid wfmss activities agents email wfmss 
terminology agent decide triggered order perform corresponds activity 
ffl corresponding formalism valid activity sequences defined workflow modeling time build time workflow designer 
wfmss offer corresponding modeling tools allow definition business processes special formalism 
different formalisms discussed 
main differences various formalisms depend available process information access structured application data 
workflow types investigating workflow systems processes support classification identified main types workflows call document oriented process oriented workflows 
ffl document oriented workflows primarily composed manual tasks unstructured semistructured data elements especially documents 
task ordering coordination predefined roughly build time fly process execution 
execution document oriented processes mainly controlled workflow participants 
decide specific task performed task executed case set potential successor tasks execute task 
requirements wfmss area support coordination collaboration humans responsible consistent execution results 
ffl process oriented workflows populated automatic tasks manipulate structured semi structured data objects 
processes tend complex adequate formalisms necessary define 
wfmss handle processes expected control coordinate execution tasks little human intervention 
various features concerning robustness concurrency recovery necessary guarantee reliable consistent execution 
course requirements restrict user flexibility executing workflows 

failure exceptions practical experiences proven handling failures exceptions requires lot time costs 
reason adequate treatment problematic key success factor cooperative information systems especially wfmss 
different types failures identify potential failure sources give summarizing classification various failure classes 
potential failure sources workflow comprise workflow engine failures activity failures communication failures see 
wf controller 
basic failure sources 
workflow engine controller failures system breakdown lead abnormal termination workflow execution 
goal recovery restore latest consistent state system order resume process execution 
may exactly state time failure occurred latest consistent state immediately failure new consistent state failure 
cases handled kind crash recovery 
means example worklists brought state time failure occurred previous consistent state see 
third case means activities active client time failure occurred may terminated 
activities aborted case workflow engine failure 
crash recovery extended kind forward recovery brings system new state 
updating worklists process execution continued 
reduce amount case recovery workflow engine failure advisable keep process relevant information database management system order recovery facility database 
prototype workflow system build top dbms simplifies crash recovery treatment 
problem distributed activities executed autonomously workflow engine failure precisely discussed 

activity failures comprise failures activity 
activity failures primary subject discussed precisely rest 

communication failures scheduler activities source type failure workflow execution 
coordinated execution distributed activities demands stable communication scheduler activities 
example scheduler starts activity scheduler wants informed result operation 
middleware components tp monitors support handling requirements 
stated concentrate discussion primarily activity failures extend communication failures 
purpose briefly results failure classification discussed 
main classes failures concerning activities identified system failures semantic failures 
ffl system failures comprise information technology application failures lead abnormal termination activity system breakdown division zero deadlocks activity aborts 
ffl semantic failures comprise exceptions business process caused information technology lead negative abnormal termination activity activity hotel reservation fails hotel booked hotel reservation interrupted user 
activity involved semantic failure activity fails 

concepts workflow recovery business process typically consists multiple activities activities strong influence success process 
severe problems may occur activity behave expected manner 
workflows may complex activities general highly distributed heterogeneous autonomous advanced recovery concepts necessary adequate failure exception handling 
wfmss expected support reliable consistent execution workflows pointed wfmss lack functionality 
notable exceptions ibm flowmark offers primitive recovery concepts 
summing main goal workflow recovery restore automatically possible consistent process state system semantic failure possible performed long durations lost process execution continued 

recovery system failures system failure causes non regular abnormal termination abort active activities precisely active tasks 
situation happens wfms proceed regular process execution 
workflow recovery manager apply forward recovery comprises crash recovery forward execution 
crash recovery means inconsistent execution results interrupted probably half way executed tasks removed 
cases kind rollback necessary 
general responsible task internal rollback process tasks treated black boxes expected responsible correct recovery local recovery system 
presume ideal behavior tasks necessarily failure atomic able handle situations 
forward execution means process execution resumed closest consistent point failure occurred 
implicitly means forward execution applied crash recovery 
previous concepts investigate specific recovery techniques workflow execution 
investigation distinguishes different task types ffl automatic tasks forward recovery concerning aborted automatic tasks comprises restart task 
possible interrupted task failure atomic means task rolled back automatically rollback necessary task idempotent task formally checks loan request form 
idempotent tasks executed times changing result comfortable feature workflow execution 
start alternative task 
task restarted system failure may necessary start task removes inconsistent side effects interrupted task tries perform original goal alternative way 
manual intervention task failure atomic exists alternative task manual intervention necessary 
means example informs human agent example process owner repairs failure 
ffl manual tasks forward recovery manual tasks primarily performed workflow participant responsible task phone call interrupted agent responsible take appropriate recovery measures new phone call restart word processor load file manually 
limited possibilities automate forward recovery manual tasks 
increase success rate correct automatic task recovery system failure able restart retry alternative task times 
number possible restarts defined workflow administrator 
recovery interrupted task feasible specified retry time limits recovery procedure semantic failures invoked task fails system failure migrates semantic failure 

recovery semantic failures semantic logical failure occurs activity fails commits unsuccessfully authorized agent wants undo parts active process 
case decide inconsistent state reached 
depending decision complex recovery procedure started process execution continued 
decision failed activity produced inconsistent state process depends importance activity process 
purpose workflow designer define process definition activity vital 
vital activity fails inconsistent state reached 
fact agent triggered undo initiates complex recovery procedure 
main challenge semantically rollback completed activities normally inverse order consistent process state reached workflow continued executing alternative path terminated 

recovery concepts document oriented workflows document oriented workflow reason recovery failure activity changed situation world outside system unexpected exception 
exception may example cause approved business trip cancelled 
transaction exception failure mechanisms available wfms see ffl undo undo operation allows agent undo done far active task 
problems possible undo task second primitive recovery concepts available tasks manual type restore old document version 
ffl back back operation executes undo operation task active process transferred back preceding process step document returned agent charge preceding task additional information explaining reason back operation 
new old agent possibility update parts task order continue process execution back operation 
ffl backward recover authorized agents possibility interrupt active process delegate process back previous passed state semantics single backward process comprises steps visual display backward recover mode process enters backward explicit visible involved agents 
backward recovery process inverse order process executed inverse order semantically undoing previous executed activities 
activities need compensated skipped 
decision route required activities compensated agent initiated backward recover mode activity order add change parts 
completed agent determine step process may execution alternative path back operation 
forward execution back backward recover agent decide continue process execution forward direction normally alternative path 
project workflow transactions currently discuss integration concepts commercial wfms cse workflow 
recovery concepts process oriented workflows general workflows structured hierarchically order facilitate workflow modeling support reuse 
workflows terminology complex activities may consist logical dependent sub activities 
means complex activity comprises determine success non success parent activity 
parent activity succeeds vital sub activities succeed 
process execution activity fails commits unsuccessfully decide process reached inconsistent state 
decision easy inconsistent state reached activity fails relationship parent vital words vital activity fails 
summing semantic failure possibilities support failure tolerant process execution ffl forward execution failed activity vital relationship positive consistent termination corresponding parent activity achieved easily making forward progress ignoring failed activity executing remaining child activities 
fail non vital activity tolerated consistency preserving measures 
workflow trademark cse systems computer software engineering gmbh ffl backward recovery failed activity vital relationship complex recovery procedure necessary order reach consistent state 
fail vital sub activity execution remaining child activities obsolete 
controlled rollback initiated 
means previous child activities terminated successfully undone correct way 
course possible require human intervention 
problem irreversible side effects discussed solutions safe process schemas introduced 
recovery process current level terminated successful committed brother activities failed activity rolled back semantically parent activity terminate unsuccessfully 
course may initiate backward recovery process higher level 
similar concepts concerning backward recovery discussed 
approach collection activities defined sphere joint means activities run syntactically successful activities compensated 
activities belong sphere may spread process additionally spheres may overlap compensation process hand flexible hand complex difficult 
ffl forward recovery cases combination backward recovery forward execution applied 
steps similar forward recovery concept system failures reasonable terminology forward recovery current context 
soon consistent state reached non vital parent activity fails enforce regular process execution probably execution path order forward progress 
wamo offers choice activities ideal point change backward forward execution 
possibility undo parts workflow contrast advanced transaction models undo complete workflows 

realization requirements integration transaction specific features wfms requires certain functionality wfms 
section overview relevant wfms requirements necessary integration workflow transactions 
course con cepts required partial integration workflow transactions intended 
ffl nested workflow modeling reasons reusability aspects hierarchical representation complex workflows important feature 
complex workflow decomposed smaller sub workflows activities elementary workflows called tasks wamo remaining 
workflows containing workflows called composite workflows 
wamo composite workflows called complex activities 
execution hierarchical structured workflow starts top level workflow hierarchy executing underlying layer sub workflows 
complex activities logical units determine ordination data flow requirements sub activities 
realization transactional concepts wamo explicitly demands nested workflows 
ffl state activities mentioned nested workflows distinguished inner nodes activities leaf nodes tasks 
main difference types activities fully controllable wfms transaction manager scheduler tasks partially controllable similar ideas discussed 
means example state activity set commit successfully workflow transaction manager soon sub activities terminated regularly state started task determined corresponding processing entity 
order enable transaction workflow execution existence different states activities tasks necessary 
event state diagram activities tasks wamo illustrated 
intermediate activity state start state final state start active compensated compensating error aborted aborting committed unsuccessfully committed successfully compensate succeed fail fail succeed abort succeed fail 
event state diagram activities activity started initial state 
start event changes state activity active 
corresponding executed 
child activities finished activity terminates 
regular case activity commit successfully succeed commit unsuccessfully fail 
termination states fully controlled workflow controller 
result course depend termination states child activities 
regular case possible activity aborted external event user system 
state activity changed aborting means active child activities aborted successfully committed child activities semantically rolled back compensated 
semantic roll back supported workflows activities equipped corresponding compensation concepts details see 
active abort fail succeed start start state final state intermediate task state succeeded failed aborted 
event state diagram tasks tasks elementary activities directly executed processing entity 
workflow controller start task determine execution result task 
general task succeed sense commit successfully fail sense commit unsuccessfully 
additionally task terminate abnormally abort 
react different termination states corresponding distinction necessary 
ffl restart information tasks system failure task may inconsistent undefined state means uncommitted side effects exist system 
able remove inconsistencies resume process execution nearest consistent point failure occurred 
needs information specified workflow designer process modeling time task started abnormal task termination alternative sequence 
task restarted system failure 
manual intervention necessary 
ffl compensation tasks case backward recovery may necessary compensate semantically undo committed tasks 
reason wamo introduces task specific type parameter 
idea associate tasks corresponding compensation inverse tasks executed case original task undone semantically 
kinds compensation explained subsection 
original tasks compensation tasks written way easily reused workflows 
additionally emphasized easier define compensation tasks respectively generate automatically structured data see subsection manipulated workflow 
wamo tasks associated corresponding compensation tasks 
complex activities responsible correct compensation child activities model extended easily way complex activities complex compensation activities 
concepts similar idea discrete integral compensation 
order guarantee consistent recovery process necessary compensation tasks terminate successfully manual intervention required 
ffl initiation recovery process recovery process initiated manually human agent automatically system logical failure 
manual initiation general triggered activating back backward recover function 
functions major impact workflow execution appropriate authorization rules necessary 
means example specific agents authorized backward recover function authorization profile changes dynamically process execution 
automatic initiation recovery process triggered system failure logical failure user cancel command 
ffl controlling recovery process controlling recovery process central topic transaction workflow execution 
inverse execution process backward recovery important forward execution business process 
backward recovery process comprises features initiation backward recovery process explained 
backward execution path executed path 
general backward path inverse forward path 
process history absolutely necessary 
means example execution states activities workflow stored persistently 
tasks type skipped backward execution 
compensation tasks provided proper application process data 
backward process terminates soon closest consistent point reached 
ffl logging mentioned workflow execution demands extensive logging activities 
course wfms logging information reused transaction execution 
data logged kept workflow database 
logging comprises main areas logging process data complex recovery procedure needs information state activities tasks execution history agents performed various activities 
normally information gathered system process monitoring tracking 
logging application data control flow aspects data flow workflow major interest recovery process 
compensation activities provided proper data case activation 
distinguish data extensions necessary compensation activity data explicitly added user purpose compensation process especially workflows input data original activity activities output data original activity activities 

workflow management systems basic technology organizations perform daily business processes workflows 
processes tend long duration involve users tools heterogeneous distributed environments 
claim consistent reliable execution workflows achieved integrating transactions workflow transactions wfmss 
main difference traditional database transactions workflow transactions fact goal database transactions transform data consistent state consistent state presence failures concurrent access workflow transactions aim transform business processes consistent state consistent state 
idea workflow transactions discussed detail advanced workflow recovery concepts necessary reliable consistent execution workflows presence failures exceptions 
analyzed different failure sources failure classes influence determine recovery concepts 
additionally distinguish main classes workflows document oriented process oriented different requirements workflow recovery 
alonso agrawal abbadi mohan 
exotica handling disconnected clients workflow management system 
proc 
rd int 
conference cooperative information systems vienna austria may 
alonso kamath agrawal abbadi mohan 
advanced transaction models workflow contexts 
technical report ibm almaden research center 
alonso kamath agrawal abbadi mohan 
failure handling large scale workflow management systems 
technical report ibm almaden research center 
breitbart 
schek weikum 
merging application centric data centric approaches support transaction oriented multi system workflows 
sigmod record sep 
buchmann hornick georgakopoulos manola 
transaction model active distributed object systems 
elmagarmid editor database transaction models advanced applications 
morgan kaufmann 
bussler 
policy resolution workflow management systems 
digital technical journal 
eder 
workflow system active databases 
editors con workflow management challenges paradigms products pages 
oldenbourg linz austria 
eder liebhart 
workflow activity model wamo 
proc 
rd int 
conference cooperative information systems vienna austria may 
eder liebhart 
workflow classification framework 
technical report university klagenfurt department informatics jan 
elmagarmid 
database transaction models advanced applications 
morgan kaufmann publishers 
georgakopoulos hornick 
overview workflow management process modeling workflow automation 
elmagarmid editor distributed parallel databases volume 
kluwer academic pub boston 
gray reuter 
transaction processing concepts techniques 
morgan kaufmann 
hsu 
special issue workflow extended transaction systems 
bulletin technical committee data engineering june 
jablonski 
functional behavioral aspects process modelling workflow systems 
editors con workflow management challenges paradigms products 
oldenburg 
jin ness sheth 
concurrency control recovery multidatabase flows telecommunication applications 
sigmod may 
kamath ramamritham 
modeling correctness system issues supporting advanced database applications workflow management systems 
technical report university massachusetts 
korth levy silberschatz 
formal approach recovery compensating 
editor proc 
th int 
conference large data bases brisbane australia 
krishnakumar 
managing heterogeneous multi system tasks support enterprise wide operations 
elmagarmid editor distributed parallel databases volume 
leymann 
supporting business transactions partial backward recovery workflow management systems 
lausen editor gi technik und wissenschaft dresden mar 
springer verlag 
leymann 
fur workflow management systeme 
becker editor und workflow management 
thomson germany 

kind workflow software 
nov 
mohan agrawal alonso abbadi kamath 
exotica project advanced transaction management workflow systems 
acm bulletin 
rusinkiewicz elmagarmid leu 
extending transaction model capture meaning 
acm sigmod record mar 
rusinkiewicz 
transactional workflows 
bulletin technical committee data engineering 
vogel 
backtracking office procedures 
tjoa ramos editors proc 
int 
conference database expert system applications dexa 
springer verlag 
reuter 
contract model 
elmagarmid editor database transaction models advanced applications 
morgan kaufmann 
