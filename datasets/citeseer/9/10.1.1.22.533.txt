minimisation vs recursion partial continuous functionals ulrich berger department computer science university wales swansea study relationship minimisation recursion partial continuous functionals nite types 
prove type level minimisation weaker recursion 
known ways extending schemata primitive recursive functions partial recursive functions obtained 
recursion minimisation 
kleene extended higher types recursion schemata minimisation recursion 
kleene showed type recursion coincide type weaker 
bergstra proved total continuous functionals kleene kreisel schemata weaker recursive continuity having recursive associate 
results interpretation computations total continuous functionals common interpret partial continuous functionals 
normann showed di erence proving new interpretation powerful recursive continuity restricted total continuous functional normann 
precise normann works functional language pcf plotkin essentially shown platek equivalent partial continuous functionals 
shown relationship minimisation recursion ected choice underlying domain 
prove type level minimisation weaker recursion 
result deduce types minimisation denotationally operationally weaker pcf 
giving section basic de nitions starter new short proof computable monotone function type level recursive parallel result rst proved trakhtenbrot 
section contains main result discussed section conclude discussing open problems arising higher types 
partial continuous functionals hierarchy partial continuous functionals family ective domains scott gls de ned 



ffg domains partial integers boolean values respectively 
denotes domain continuous functions exponential cartesian closed category scott ershov domains continuous functions 
union functional type mean element 
writing mean functional type 
functional type called computable computable element ective scott ershov domain compact approximations recursively enumerable 
range base types type 

written simply 
iterated application written fx 
de ne 
level type de ned usual lev lev lev max lev lev 
level functional level 
functional explicitely de nable set functionals de ned elements application abstraction 
frequently omit type information long recovered context 
functional type level called monotone function 
monotone functions frequently see plotkin 
range natural numbers 
tt ff tt ff 


set called set basic functions 
recursive de nitions modelled xed point operators xed point ff 
ng functional de nable functional programming language pcf plotkin explicitely de nable basic functions xed point operators 
functional recursive explicitely de nable basic functions primitive recursor 
minimisation functional tt ff functional recursive set functionals recursive functional 
notions pcf de nable computable de ned similarly 
implications known recursive pcf de nable computable course implications hold relativised set functionals 
strict function monotone function follows ordinary recursion theory strict function computable recursive 
monotone functions sazonov proved monotone function pcf computable ectively sequential function vuillemin 
trakhtenbrot shown ectively sequential functions precisely de nable computable strict functions composition 
computable strict functions recursive theorem sazonov trakhtenbrot monotone function nable recursive 
monotone function parallel de ned tt tt tt ff ff ff 
note tt tt tt 
sequential pcf de nable computable trivially 
trakhtenbrot showed computable monotone functions recursive trakhtenbrot 
give new short proof result 
theorem trakhtenbrot monotone function computable recursive 
proof 
show computable monotone function recursive 
prove rst boolean valued functions type vote functional maj de ned maj arguments equal maj 
trakhtenbrot trakhtenbrot 
maj de ned dual parallel notation maj andw andw obviously suces prove statement 
base types computable monotone function strict explicitely de nable maj computable strict functions 
prove induction length 
strict assertion holds trivially 
strict de ne computable monotone function 
furthermore de ne computable monotone function 
clearly strict induction hypothesis explicitely de nable maj computable strict functions 
easily veri es maj tt ff far shown boolean valued computable monotone function recursive 
arbitrary computable monotone function 
de ne graph eq eq strict equality 
boolean valued computable monotone function recursive 
de ne 
recursion type level type level recursion strong pcf longer true type level strong sense pcf de nable functional level recursive functional coinciding pcf de nable arguments 
holds allow recursive arbitrary monotone functions 
set monotone functions fd lev 
lemma recursive 
natural number proof 
set functionals type length base type may vary recursive denotation simply typed term constants elements known normalisation theorem simply typed calculus term may assumed long normal form form long normal form free variables analysing terms arrives inductive generation set arbitrary 
course equations read rules inductive de nition equation de ned equation assertion lemma proved induction inductive de nition treat rules trivial similar simpler 
assume 
set 
induction hypothesis assume 
set 

case set 


choice 
assume 
induction hypothesis job 
assume set 
induction hypothesis greater equal assume 

minimal 


done 
done 
assume 
set 
ff may take minimal ff 
theorem pcf de nable functional functional type recursive pcf de nable 
proof 
de ne recursively 
clearly pcf de nable 
recursive 
di ers 

lemma de ne strict 
clearly pcf de nable 
corollary view recursion obvious way subsystem pcf 
notion operational equivalence taken plotkin 
corollary closed pcf term type level operationally equivalent recursive term 
proof 
pcf term de ning functional theorem 
recursive term operationally follow adequacy result plotkin value de nes functional agrees pcf de nable arguments 
theorem impossible 
rounding section brie review known results computability total functionals type level 
functional total total de nition induction type level 
known total computable functional type level recursive sense recursive functional agreeing total arguments 
fact slightly general statement holds 
lemma computable functional type level recursive functional agreeing strict total arguments 
proof 
assume 
computable primitive recursive enumeration pairs nite strict function de ne domain domain de ned 
doesn exist 
clearly recursive coincides strict total arguments 
total function extension strict total function immediately implies total computable functional type level recursive 
higher types open problems conclude discussing known relationship minimisation recursion higher types proposing open problems studied 

bergstra shown type recursion weaker interpreted total continuous functionals 
carries interpretation partial continuous functionals mean interpretation recursion pcf pcf de nes total continuous functionals recursion 
con rm details checked 

de ned recursion explicit closure basic functions minimisation operator primitive recursor may ask happens replace primitive higher types 
odel 
known computational power strictly increases 
case 

similarly may consider subsystems pcf full pcf xed point operators type level allowed 
pcf form proper hierarchy 
bergstra bergstra computability continuity nite types phd thesis university utrecht odel odel uber eine noch nicht ben erweiterung des dialectica gls gri om hansen mathematical theory domains cambridge university press kleene kleene recursive functionals quanti ers nite type kleene kleene countable functionals constructivity mathematics north holland amsterdam 
kreisel kreisel interpretation analysis means constructive functionals nite types constructivity mathematics north holland amsterdam normann normann computability partial continuous functionals appear journal symbolic logic platek platek foundations recursion theory department mathematics stanford university plotkin plotkin lcf considered programming language tcs sazonov sazonov sequentially computable functionals symposium lambda calculus computer science theory lncs scott scott domains denotational semantics automata languages programming trakhtenbrot trakhtenbrot relationships classes monotonic functions theoretical computer science vuillemin vuillemin correct optimal implementations recursion simple programming language journal computer system science 
