institut de recherche en informatique campus universitaire de beaulieu rennes cedex france issn bossa dsl framework application specific scheduling policies luciano porto barreto gilles muller institut de recherche en informatique campus de beaulieu rennes cedex france tl 
fax www irisa fr bossa dsl framework application specific scheduling policies luciano porto barreto gilles muller th eme calcul projet compose publication interne mars pages developing specializing existing process schedulers new needs tedious errorprone due lack modularity inherent complexity scheduling mechanisms 
propose framework domain specific language implementation scheduling policies 
framework permits installation basic scheduling policies called virtual schedulers development application specific policies tailor virtual scheduler application specific requirements 
illustrate approach concrete examples show specialization reuse scheduling policies accomplished retaining os robustness 
key words process scheduling operating systems domain specific languages esum research partially supported france telecom project 
centre national de la recherche scientifique institut national de recherche en informatique universit de rennes de rennes en automatique unit de recherche de rennes bossa une infrastructure bas sur les langages edi es pour la conception des esum ou adapter un de processus pour un est une aux 
est du la complexit des au de des 
dans cet article nous une architecture pour impl de 
cette architecture qui sur un langage edi ce domaine le probl eme en deux 
une part elle permet de une de base ee 
part elle permet de une sp application dont le role est de sp 
nous cette approche par des qui qu il est possible de de sp des sans pour la dans le processus de des syst emes exploitation 
mots cl es de processus syst emes exploitation langages edi es bossa dsl framework application specific scheduling policies motivation emerging computing models applications continuously challenging operating system scheduler 
multimedia applications require predictable performance stringent timing guarantees 
embedded systems need minimize power consumption 
network routers demand isolated execution active network programs 
multiprocessor applications call processor affinity allocation performance driven allocation 
meeting requirements requires specialized scheduling policies traditional scheduling infrastructures unable provide 
operating systems rely fixed general purpose process scheduling infrastructure unable satisfy diverse cpu requirements applications 
second os schedulers provide opaque interface application developers priority values period 
interface unable capture increasing complexity application requirements 
application may alternate computing behaviors lifetime interactive cpu bound bound 
unpredictability difficult build scheduler able identify behavioral changes adapt operation accordingly 
important applications provide additional information enhance decision heuristics scheduler 
overcome problems research projects introduced innovative scheduling infrastructures 
approaches provided specific scheduling properties adaptive scheduling strategies 
example fair share schedulers enable unbiased cpu distribution cumulative service guarantees 
hierarchical proportional share schedulers enforce load insulation allows firewall protection different schedulers 
properties proposals rate controlled progress schedulers provide additional support adaptation allowing applications regulate cpu observation system resources performance driven metrics related application execution :10.1.1.40.7300
difficult application developers isolate specialize scheduling policies provided infrastructures 
existing infrastructures lack clear separation basic scheduling policies application specific policies 
furthermore scheduling infrastructures implement sophisticated strategies generally trade extensibility simplicity regard application developers 
clear need customized scheduling policies lack tools capture design singularities schedulers ease development process 
believe task fulfilling specific application requirements eased developer able choose collection basic schedulers specialized application specific needs 
limitations existing schedulers suggest need software framework developer easily write choose customize scheduler infrastructure 
pi luciano porto barreto gilles muller design framework development adaptable process scheduling infrastructures 
framework permits development installation basic scheduling policies specialized application specific policies 
writing schedulers requires deep os knowledge involves development low level os code clocks timers process queues frequently crosscuts multiple kernel mechanisms process synchronization file system device driver operations system calls 
effectively implement scheduler developers aware sites order instrument kernel accordingly 
consequently developing extending scheduling infrastructures new functionalities tedious error prone 
base approach domain specific language dsl 
dsl high level language provides appropriate abstractions captures domain expertise eases program development 
implementing os dsl improves os robustness code readable maintainable amenable verification properties 
target specialize process schedulers application soft real time requirements able specify adequate regulation strategies cpu requirements 
address multiprocessor scheduling distributed scheduling framework extended purposes 
contributions follows ffl design modular framework architecture development scheduling policies 
framework permits implementation basic schedulers called virtual schedulers application specific policies tailor virtual scheduler application specific needs 
ffl describe developers write application specific policies adapt virtual schedulers dsl named bossa 
bossa provides abstractions operating systems internals easing development maintenance reuse scheduling policies 
ffl illustrate approach realistic examples existing schedulers show scheduling policies safely deployed framework 
organized follows 
section describes execution model framework 
sections framework components describe concrete examples scheduling policies written bossa 
section describe ensure safe policy execution 
section concludes going 
irisa bossa dsl framework application specific scheduling policies related years research process scheduling predominantly concentrated engineering new mechanisms fix deficiencies existing scheduler infrastructures behalf certain applications 
works resulted ingenious scheduling algorithms proposals aimed reducing implementation effort schedulers 
section approaches proposed new mechanisms easing construction process schedulers 
spin os customized installation dynamic kernel extensions called spindles 
spindles written enhanced version modula 
applying restrictions modula performing static dynamic verifications modula code spin achieves extensibility guaranteeing kernel extensions safe 
spin provides mechanisms writing user level schedulers thread packages executed kernel space possible replace global kernel scheduler 
kernel scheduler default round robin priority scheduler 
spin provides programming model development general os services approach fine grained bossa especially tailored writing process schedulers 
candea jones designed loadable scheduler infrastructure windows nt 
scheduler nt driver written basic primitives writing scheduler 
register scheduler kernel inform address function called new process needs chosen 
provides simple timeout mechanism activating scheduler specific time 
kernel primitives simplify development simple schedulers coarsegrained limited allow construction elaborate scheduling policies 
limitation supports simultaneous schedulers schedulers native nt scheduler 
schedulers assumed trusted extensions verification properties safety guarantees 
rtlinux hard real time linux variant primarily focuses providing system timing predictability applications 
rtlinux real time processes implemented loadable kernel modules precedence linux processes 
viewpoint rtlinux kernel linux considered low priority process 
consequently ordinary linux processes windows shells executed real time process requesting cpu 
real time processes execute kernel mode access kernel functions data structures process run queue 
carefully manipulating realtime priorities system run queue possible develop customized schedulers control execution set processes processes system 
drawback undetected programming errors scheduler module crash os 
language develop rtlinux modules aggravates problem especially terms memory access errors due eventual misuse pointers 
ford introduced hierarchical scheduling framework scheduler process cpu time processes 
perform cpu donation scheduler invokes special primitive called schedule takes parameters process pi luciano porto barreto gilles muller run condition specifies scheduler donating process woken 
kernel uses ipc messages communicate process scheduler process creation 
rtlinux writing schedulers requires programming schedulers written developed hierarchical loadable scheduler hls architecture possible dynamically load schedulers kernel windows 
schedulers written specialized api intended ease development effort hiding os details 
likewise loadable schedulers considered trusted entities assumed correctly implemented 
verification mechanisms help programmer 
execution model framework architecture relies basic components virtual schedulers vss ii application specific policies 
consider process minimal schedulable entity 
process system associated vs initialization process registers virtual scheduler joining existing vs loading new vs joining 
virtual scheduler loadable kernel module controls execution set processes 
vs manages processes selecting process execution determining cpu quantum 
submit processes execution vs invokes dispatch primitive causes low level context switching 
permit coexistence multiple independent schedulers vss stacked forming tree hierarchy 
topmost vs hierarchy called root vs vs registered root vs vs hierarchy 
vs registers vs including root vs way ordinary process 
application developer specializes vs writing application specific policy asp 
asp defines collection event handlers triggered particular process 
allow asp communicate vs virtual scheduler provides set functions call vs interface 
application specific policies bossa programs evaluated just time jit compiler running kernel 
process registers vs jit compiler translates asp specification machine code 
execution machine code controlled vs jit compiler able perform static dynamic verification asp code 
examples verifications include checking bounds type mismatches parameters passed asp vs virtual schedulers virtual scheduler vs kernel module controls execution collection processes 
depending characteristics vs may implement diverse regulation functions irisa bossa dsl framework application specific scheduling policies process admission control 
functions generally apply processes running supervision vs regulation functions frequently ensure certain properties 
instance vs may ensure process deadlines missed cpu fairly distributed processes 
implement regulation functions vs maintains local state information registered process 
vs provides interface 
interface consists list functions events specification application specific policy 
asp uses interface functions exchange data vs functions provide local view process state stored vs viewpoint asp vs interface visible part vs vs export interfaces 
asp registered processes access vs interface 
describe interface rate scheduler arc 
rate interface consists functions 
functions set retrieve process attributes maintained vs period rate 
vs period represents time interval ms rate value denotes cpu time request period 
values vs compute cpu quantum process 
vs rate base scheduler interface int int period int int float rate int rate vs interface application specific policies application specific policy asp bossa program specializes behavior vs respect specific application needs 
example vs specialization rate interface define asp regulating process rate function 
asp computes values uses interface communicate values vs bossa event action model 
adopted event action model asp code typically executed response process related events process creation blocking unblocking cpu quantum expiration 
asp organized parts list global variable declarations ii collection event handlers 
event handlers pi luciano porto barreto gilles muller executed periodically response specific os events 
possible define asp functions event handlers 
bossa provides language syntax la relies abstractions events ii application specific policy variables 
abstractions 
events bossa provides classes events writing 
events temporal events system events 
note order event handlers defined asp impose order evaluated 
temporal events 
temporal event group actions need periodically executed process 
typically compute application specific metrics periodically passed vs example temporal event process perform periodic regulation cpu requirements 
illustrate approach presenting adaptive cpu allocation strategies proposed yau lam tuning execution video player application 
assume video player process bound rate vs defined 
specialized policy described declares global variables temporal event handler function 
temporal event handler code executed seconds 
handler computes laxity value denotes amount unused cpu time process monitoring interval 
application specific strategy decrease process rate laxity value greater upper bound defined 
note update rate value vs may changed value 
updated value passed vs calling 
analyzing asp code bossa compiler statically verifies type argument type defined function 
system events 
system event define actions executed specific os event related process occurs 
examples system events include completion semaphore unblocking timer expiration 
system events particularly useful inserting applicationspecific code computes process metrics response os events 
example computation laxity value described 
computing laxity process requires maintaining cumulative value cpu time monitoring interval 
obtain value need record cpu time process time process question preempted 
implement adjustment defining system event handler 
event handler specification updates value time preemption event occurs 
assume preemption event exported vs interface 
variable system variable defined section provides cumulative cpu time executed process 
irisa bossa dsl framework application specific scheduling policies float time int int int laxity laxity laxity int int lax lax return lax application specific policy arc scheduler preemption updating process preemption application specific policy variables application specific policy declare global variables variables local event handler 
variables bossa provides classes variables event handler 
variables system variables process variables 
system variables 
system variables read variables provide information certain os data cpu tick counters current time 
example 
process variables 
process variables read variables related data residing address space process 
consider process variables asp aliases variables application process execution 
process variable typically serves indicator represents meaningful notion application progress 
process pi luciano porto barreto gilles muller variables statically allocated visible asp stub functions 
moment support functions collect values dynamically allocated variables 
illustrate process variables asp proposed controlling cpu requirements video player application 
asp designed ogi progress scheduler steere 
model ogi vs interface consists functions int period int proportion 
proportion parameter denotes fraction period similar rate value defined vs interface different range specification parts 
asp strategy define progress video player terms input output levels shared memory queues 
progress metric called queue pressure calculated function shown 
function periodically invoked temporal event handler omitted 
event handler uses queue pressure values compute new process proportion 
updated proportion value passed vs function 
float function float int delta foreach delta level size role producer delta delta return queue pressure computation access shared memory queue objects function specify data type called 
data type corresponds type shared memory queues defined application process 
type information bossa compiler able generate stub functions collecting data application process 
application type contains level size role producer consumer queue 
queue information collected function 
function queue pressure values updated bounded foreach loop 
loop traverses process objects type 
efficiency reasons execution asp possible collect process variables involved process mapped memory 
approach save copy process variable kernel space time process preempted 
irisa bossa dsl framework application specific scheduling policies instant process variable contains value process variable context switch time involved process 
robustness dsls successful improving safety development device drivers memory coherence protocols packet filters active network applications 
plan execute vss kernel need guarantee inserted code jeopardize os integrity 
ensure policy robustness construction verification 
approach consists restricting language dsl programs safe 
second approach analyses policy code verify properties 
framework guarantee bossa code perform harmful modification system data structures code 
achieve suppressing pointers language enforcing read semantics process system variables 
dsl compiler performs verification asp code checking bounds data type mismatches parameters passed vs interface function 
allowed unbounded loops recursive functions 
constraint ensures event handlers terminate 
excessive overheads eventually caused heavyweight prevented ways establishing fixed quota event handling evaluation defining minimum interval temporal events penalizing process execution event handlers 
implementation fundamental goals defined bossa achieve flexibility performance 
flexibility needed allow vss dynamically loaded executed kernel 
requirement unsuitable static compilation model 
employing conventional interpretation scheme appropriate introduce severe performance penalties 
important mind scheduling code modern oses executed hundreds times second inefficient scheduler implementation easily degrade systems performance 
solution provide flexibility retaining performance implement jit compiler runs kernel 
jit compiler translates asp code machine code executed kernel 
approach particularly inspired previous experience plan dsl development active network policies 
likewise plan believe kernel jit compiler appropriate provide flexible efficient implementation bossa 
pi luciano porto barreto gilles muller going design framework development application specific scheduling infrastructures 
currently implementing bossa linux 
extend bossa writing virtual schedulers investigate appropriate abstractions properties composition scheduling hierarchies 
plan assess framework conducting experiments scheduling infrastructures real workloads 
evaluate bossa analyzing behavior soft real time applications video players 
acknowledgments julia helpful comments earlier versions 
michael 
linux realtime operating system 
master thesis new mexico institute mining technology june 
mccanne graham 
bpf exploiting global data flow optimization generalized packet filter architecture 
proceedings acm sigcomm pages september 
bershad savage pardyak sirer fiuczynski becker eggers chambers 
extensibility safety performance spin operating system 
proceedings th symposium operating systems principles pages copper mountain colorado december 
bruno gabber silberschatz 
move rear list scheduling new scheduling algorithm providing qos guarantees 
proceedings acm multimedia seattle washington november 
george candea michael jones 
loadable scheduler support scheduling 
proceedings nd usenix windows nt symposium pages berkeley august 
satish chandra bradley richards james larus 
teapot domain specific language writing cache coherence protocols 
ieee transactions software engineering may june 

performance driven processor allocation 
proceedings fourth symposium operating systems design implementation san diego california october 
irisa bossa dsl framework application specific scheduling policies douceur bolosky 
progress regulation low importance processes 
sosp pages 
duda cheriton 
borrowed virtual time bvt scheduling supporting latency sensitive threads general purpose scheduler 
sosp pages 
bryan ford sai 
cpu inheritance scheduling 
osdi pages 
goyal guo vin 
hierarchical cpu scheduler multimedia operating systems 
osdi pages 
chih han lin hao hua chu klara nahrstedt 
soft real time scheduling server windows nt 
proceedings nd usenix windows nt symposium pages berkeley august 
joseph hellerstein 
achieving service rate objectives decay usage scheduling 
ieee transactions software engineering august 
kay 
fair share scheduler 
communications acm january 
lorch smith 
scheduling techniques reducing processor energy macos 
wireless networks october 
mercer savage tokuda 
processor capacity reserves operating system support multimedia applications 
proceedings international conference multimedia computing systems boston ma usa may pages 
ere consel marlet muller 
devil idl hardware programming 
th symposium operating systems design implementation osdi pages 
usenix association october 
muller consel marlet barreto ere 
robust oses appliances new approach domain specific languages 
proceedings acm sigops european workshop ew pages denmark september 
wall 
svr unix scheduler unacceptable multimedia applications 
proceedings th international workshop network operating systems support digital audio video pages november 
jason monica lam 
design implementation evaluation smart scheduler multimedia applications 
proceedings acm symposium operating systems principles pages st malo france october 
pi luciano porto barreto gilles muller proceedings symposium operating systems design implementation 
proceedings second symposium operating systems design implementation seattle washington october 
david petrou john garth gibson 
implementing lottery scheduling matching specializations traditional schedulers 
proceedings usenix annual technical conference usenix pages berkeley ca june 
andy larry peterson scott karlin 
scheduling computations software router 
proceedings sigmetrics june 
appear 
john 
hierarchical scheduling support soft real time applications general purpose operating systems 
phd thesis university virginia 
john john stankovic 
augmented cpu reservations predictable execution general purpose operating systems 
proceedings th real time technology applications symposium taipei taiwan may 
proceedings acm symposium operating systems principles kiawah island sc december 
david steere goel joshua dylan mcnamee calton pu jonathan walpole 
feedback driven proportion allocator real rate scheduling 
proceedings rd symposium operating design implementation osdi pages february 
swaminathan 
real time task scheduling energy aware embedded systems 
proceedings ieee real time systems symposium rtss progress session november orlando fl usa 
thibault consel lawall marlet muller 
static dynamic program compilation interpreter specialization 
higher order symbolic computation 
thibault consel muller 
safe efficient active network programming 
th ieee symposium reliable distributed systems pages west lafayette indiana october 
thibault marlet consel 
domain specific languages design implementation application video device drivers generation 
ieee transactions software engineering may june 
irisa bossa dsl framework application specific scheduling policies raj john zahorjan 
implications cache affinity processor scheduling multiprogrammed shared memory multiprocessors 
proceedings th acm symposium operating systems principles pages october 
carl waldspurger william weihl 
lottery scheduling flexible resource management 
osdi pages 
mark weiser alan demers brent welch scott shenker 
scheduling reduced cpu energy 
osdi pages 
david yau simon lam 
adaptive rate controlled scheduling multimedia applications 
ieee acm transactions networking august 
pi 
