nested graph model representation manipulation complex objects alexandra poulovassilis department computer science king college london strand london wc ls mail alex uk ac kcl dcs mark levene department computer science university college london gower street london wc bt mail levene uk ac ucl cs trends database research object oriented deductive databases graph user interfaces 
draw trends data model call hypernode model 
single data structure model hypernode graph nodes graphs 
hypernodes typed types nested graphs 
give theoretical foundations hypernodes types show type checking tractable 
show conventional type forming operators simulated graph types including cyclic types 
hypernode model comes equipped rule query language called hyperlog complete respect computation update 
define operational semantics hyperlog show evaluation hyperlog programs intractable general case identify cases evaluation performed efficiently 
discuss hyperlog supporting database browsing essential feature hypertext databases 
compare graph data models previous graph models hypernode model provides inherent support data abstraction nesting graphs 
briefly discuss implementation dbms hypernode model 
categories subject descriptors data structures graphs 
database management logical design data models 
database management languages query languages 
general terms design languages additional key words phrases nested graph complex object types rule query update language object store 

database research focussed deductive object oriented databases 
deductive databases extend relational data model rule computation 
rules enable derivation intentional tuples stored extensional tuples 
derived tuples purely querying purposes inserted database 
conversely object oriented databases start semantic data model typically supports object identity inheritance complex objects extend features methods encapsulation object oriented programming 
deductive object oriented database largely complementary 
support extensionally intentionally defined relations fundamental data abstraction concepts classification identification inheritance encapsulation 
conversely support abstraction concepts support relations naturally 
research aimed integrating paradigms 
integration generally taken route extending logic deductive database languages features object identity sets functions methods inheritance 
contrast report graph approach integration 
graphs key advantages firstly graphs formally defined understood structures secondly widely accepted graph formalisms considerably enhance usability complex systems 
graphs conjunction number conventional data models example hierarchical network models entity relationship model extension thereof complex objects various semantic data models 
graphs hypergraphs data modelling tool right :10.1.1.26.857
give comparison approach section 
directed graphs foundation hypertext databases 
databases graphs consisting nodes refer units stored information typically text named links 
link connects nodes source destination 
links traversed forwards source destination backwards destination source 
process traversing named links examining text associated nodes called browsing 
typically simple query facility consisting string search provided identify initial set nodes prior browsing 
feature hypertext dynamic creation new nodes links 
motivated previous research outlined developed graph data model called hypernode model supports object identity arbitrarily complex objects suited implementation hypertext databases 
contrast graph models nested possibly recursively defined graphs termed hypernodes 
hypernode pair nodes directed edges nodes hypernodes 
graph models hypernode model provides inherent support nesting information 
labels hypernodes unique serve object identifiers 
illustrate hypernode 
represents couple consisting people children nested hypernodes 
show children person visible exposed hypernodes labelled 
observe figures hypernodes differ hypergraphs generalise nodes hypernodes opposed generalising edges hyperedges 
name bob surname smith child person person name mary surname jones child person person person couple fig 

example hypernode 
name jill surname smith child person person name jack surname jones child person person fig 

hypernodes 
note labels superscripted tags couple person respectively 
explain sequel tags indicate types associated hypernodes 
types give means defining database schemas enforcing constraints structure content hypernodes 
types represented nested graphs queried updated formalism hypernodes 
note node person denotes 
hypernode model comes equipped computationally powerful declarative language called hyperlog 
model language share features deductive object oriented databases 
common deductive database languages hyperlog rule supports derivations database updates 
common objectoriented databases hypernode model supports arbitrarily complex objects data abstraction concepts classification types identification unique labels encapsulation nesting graphs 
showed structural inheritance supported naturally nested graph structures nested hypergraphs treatment equally applicable simpler nested graphs hypernode model 
showed methods supported parametrised hyperlog programs 
hypernode model supports main features hypertext databases strings arbitrary length supported primitive type unstructured text represented 
text node hypernode encapsulated number hypernodes text shared 
sets text fragments easily represented nodes hypernode 
annotated links represented hypernode single incoming edge source node single outgoing edge destination node hypernode encapsulate annotation information example actual link label description semantics link creator link date creation 
nesting hypernodes abstraction tool greatly facilitates design browsing densely connected database graphs unique model 
hyperlog support database browsing general purpose declarative querying 
facility create contexts browsing 
introduced hypernode model 
expand directions including expressiveness representation computation efficiency inference support hypertext implementation issues 
describe extending model include types extending hyperlog perform deletions insertions 
outline follows 
section discuss fundamentals hypernode model hypernodes types 
discuss representational expressiveness type checking complexity 
section give syntax semantics hyperlog 
discuss complexity evaluating hyperlog programs computational update expressiveness 
show hyperlog database browsing 
section compare graph languages models 
section briefly describe prototype implementation 
conclude section summary results 

hypernode model section discuss fundamentals model hypernodes types 
define hypernodes repositories section 
define types type repositories section examine efficiency type checking 
section illustrate types extended example flights bookings database 
section discuss representational expressiveness model 
hypernodes hypernode repositories section introduce underlying data structure hypernode model hypernode 
define hypernode repository set graph defining equations 
define hypernodes values assigned indeterminates set equations solved 
recalling definition directed graph directed graph ordered pair finite set nodes finite set directed edges 
simplicity terms graph directed graph interchangeably 
similarly terms edge directed edge 
notation interchangeably edges 
purposes hypernode model need disjoint sets constants finite set primitive nodes countably infinite set labels assume set includes alphanumeric strings 
elements denoted identifiers start lowercase letter 
elements denoted identifiers start uppercase letter 
graphs hypernode model defined equations form graph 
term equations hypernode equations 
examples labels name spouse title ms floyd primitive nodes name spouse name spouse title initial surname ms floyd title ms initial surname floyd title initial surname title initial surname hypernode repository simply repository finite set hypernode equations satisfying conditions equations left hand side label appearing right hand side equation exists equation label left hand side 
hypernode repository hr denote labels hr set labels appearing equations hr prim hr set primitive nodes appearing equations hr 
example equations satisfy criteria hypernode repository 
note condition corresponds entity integrity requirement equation viewed representing real world entity 
similarly condition corresponds referential integrity requirement requires existing entities referenced 
hypernode repositories viewed storing set graphs may graphs labels 
alternatively hypernode repositories just sets equations unique solution indeterminates labels defined domain 
domain universe founded sets hypernode equations may defined example equations defining 
appeal aczel theory non founded sets solve hypernode repositories 
founded sets subsume founded sets including circular sets sets may contain 
shown set set defining equations hypernode repository special case unique solution universe non founded sets 
hypernode repository hr unique solution universe non founded sets 
solution assigns label left hand side equation non founded set 
term set hypernode denote hyp hr simply hyp hr understood context 
hypernode hyp ordered pair set primitive nodes hypernodes note ordered pair viewed set 
example hypernode repository consisting equations ignoring node sets graphs simplicity hyp title ms initial surname floyd hyp title initial surname hyp name title ms initial surname floyd spouse name title ms initial surname floyd spouse name title initial surname spouse hyp name title initial surname spouse name title initial surname spouse name title ms initial surname floyd spouse 
note sets hyp hyp founded ones sets hyp hyp founded ones contain 
types type repositories sections extend model incorporate types graphs 
define type equations type repositories types analogy hypernode equations hypernode repositories hypernodes 
define means hypernode particular type show testing hypernode repository typedness performed polynomial time respect size repository 
section illustrate types extended example flights bookings database 
purpose defining types assume availability disjoint sets constants finite set primitive types tp primitive node unique primitive type tp countably infinite set type labels tl label hypernode repository tagged unique type label tl types object identifiers object oriented databases 
analogy primitive nodes labels distinguish primitive types type labels identifiers start lowercase letter identifiers start uppercase letter 
assume type primitive distinguished primitive node denoting 
see node model missing incomplete information 
assume set primitive types includes type string 
types defined means equations form tl graph tp tl 
call equations type equations 
type repository tr finite set type equations satisfying conditions hypernode repositories section 
appeal theory non founded sets solve type repositories assign values tl universe non founded sets 
call values types denote hyp tr hyp tr understood context 
values take form pair set primitive types types 
reasonable assumption primitive nodes labels distinct primitive types type labels 
tp tl overlap data hypernodes meta data types hypernode type repositories merged repository 
uniform storage data meta data means meta data queried updated formalism data hyperlog 
typings hypernodes defined recursively follows 
hypernode type say type exists homomorphism preserves types satisfies conditions 
conditions stipulate hypernode contain nodes edges conform nodes edges intended type conditions stipulate hypernode contain instance node edge intended type 
conditions restrictive primitive nodes place missing information 
typings individual hypernodes generalised typings hypernode repositories follows 
hypernode repository hr typed respect type repository tr label labels hr hyp hr type hyp tr 
theorem states testing hypernode repository typedness tractable 
result follows observing order test hypernode repository typedness fix homomorphism map primitive nodes labels types check criteria equation hr 
equations hr checked maximum nodes edges right hand side hypernode type equation test achieved time proportional mn theorem 
testing hypernode repository hr typed respect type repository tr performed time polynomial number equations hr maximum size individual equations 
flights bookings database example illustrate types consider database stores information bookings flights passengers 
schema database specified type flight bookings schema 
equation pictorial representations graphs interchangeably 
omit type tags labels understood context 
fig 

example schema 
rf fc tc pt flight bookings schema airlines airports flight bookings schema contains types rf shown represents routes flights fly route followed number flights 
ii pt shown represents passengers tickets passenger bought tickets 
iii tc shown represents tickets coupons ticket consists number coupons 
notice sharing graph ticket graphs tc pt 
iv fc shown represents flights coupons flight booked number coupons 
airlines airports shown contain known airlines airports respectively 
fig 

routes flights fly 
rf airport airline nat att att airline att flight att route date flight date dep att time dep att time fig 

passengers tickets 
passenger dependents att name name att passenger pt ticket date issue att fare att date fare fig 

tickets coupons 
status class status att class att fare date fare att date issue att coupon ticket tc fig 

flights coupons 
time time dep att date dep att flight fc status class status att class att date coupon fig 

set types airlines airports 
airports airport airline airlines remaining types needed fully specify flight bookings schema airline airport shown time date fare name shown nat shown 
fig 

types airport airline 
airline airport name att code att string name att code att string fig 

types date fare time name 
string string nat hours att minutes att time surname att initial att title att nat amount att currency att nat year att month att day att name fare date observations types fig 

natural numbers type 
nat nat edges types represent attributes example flight route 
adopt convention primitive types att represent attribute names 
primitive node primitive type node appears instances 
example primitive nodes flight airline appearing assumed type flight att airline att respectively 
practice user introduce new primitive types set tp time populate types introducing new primitive nodes set 
ii edges types represent binary relationships example rf 
general relationships due fact instances defined homomorphic type 
cardinality constraints enforced update programs give example section 
iii possible define recursive types example passenger dependents type passenger nat contains 
iv type nat represent natural numbers hypernode model 
represented hypernode contains primitive node nat successive natural numbers successive nestings see 
describe calculations performed numbers section 
hypernode type flight bookings schema flight bookings database 
typical instance node types rf pt tc fc airlines airports representing route flights passenger tickets ticket coupons flight coupons relations airlines airports 
note flight bookings schema schema design hypernode model comparable entity relationship er approach 
fundamental differences modelling approaches stressed 
firstly types directly model complex objects may hierarchical cyclic modelled directly er diagrams 
secondly types encapsulate types example flight bookings schema encapsulates rf tc fc pt airlines airports ticket encapsulates date fare 
encapsulation encourages step wise schema design cases schema large interconnections renders schema easier display comprehend 
illustrate specific instances types 
show hypernodes versions 
note type route version conditions section violated 
amended type route replacing name flight adding edge airline air specifying edges attributes att att resulting 
fig 

routes 
paris london air airline flight london athens air flight airline air airline name airport air flight airline show natural numbers 
show hypernodes air air type airline 
note air codes 
fig 

natural numbers 
nat fig 

airlines 
air ba british name code code oa olympic air olympic show hypernodes european american asian 
european american type airlines asian violates condition type corrected adding primitive node airline fig 

sets airlines european ans american incorrectly typed asian 
air air asian american european airline show hypernodes pt pt type pt 
note dependents nested finite depth 
show hypernodes type name type fare type date 
enforcement meaningful dates achieved defining appropriate primitive types day fig 

instances passenger ticket relationship 
passenger pt pt fare date issue name dependents dependents name date issue fare month year update programs 
fig 

names fare date 
smith smith sterling amount currency title initial surname surname initial title year day month expressiveness representation types type checking constitute powerful data modelling integrity checking tool allow database schemas represented enforced 
storage level optimisations carried type information 
hypernode model type complete sense allowed type forming operator graph definition applied arbitrarily times 
cyclic types passenger cyclic hypernodes section supported 
bearing points mind show conventional type forming operators simulated graph definition 
type represent set type set hypernodes type contain nodes type empty set type represented hypernode empty 
types airlines airports instances european american illustrate set types 
types attribute names flight att airline att att att represent record type types route flight time date fare name shown illustrate record types 
note record type bipartite graph 
note construction differs usual idea record attributes multi valued may edge emanating instance type enforcement single values encoded update programs hyperlog 
record type represent relation type set 
component types record type may record types nested relations represented 
types flight ticket illustrate nested relation types 
types represent mapping type types rf pt tc fc shown figures illustrate mapping types 
example type nat nat nat 
example instances nat nat identity function id maps natural number mapping greater maps natural number smaller natural numbers id greater note partial mappings represented violating type correctness long edge mapping 
example mapping greater element source edge maximal number sink edge 
types represent tuple type 
record type attribute types contain primitive constants second nth respectively 
general types type defined 
instances heterogeneous sets isolated nodes arising participate edge edges arising edges 

manipulation hypernodes section introduce hyperlog declarative query update language hypernode model 
hyperlog programs consist sets rules 
body rule consists number graphs called queries may contain variables act templates matched equations hypernode repository 
head rule query indicates updates undertaken match graphs body 
evaluation program comprises repeated matching set rules hypernode repository updates inferred 
section describe syntax hyperlog 
section define matching queries rule bodies hypernode repository section describe inference updates queries heads rules 
section define operational semantics hyperlog program fixpoint operator 
address efficiency expressiveness issues hyperlog sections address efficiency inference computational update expressiveness 
conclude section brief discussion database browsing supported hyperlog 
chosen rule language hypernode model main reasons 
firstly high level declarative nature language blends graph data model 
secondly language expressive see fact complete respect computation database update 
consequence programs frequently invoked optimised built compromising semantics language 
candidates optimisation arithmetic functions database browsing functions 

syntax hyperlog purposes hyperlog assume countably infinite set variables available 
denote elements uppercase identifiers alphabet 
assume set variables set labels disjoint 
assume variables typed superscripted type tp tl 
omit superscripts understood context 
hyperlog rule possibly empty set graphs body single graph head 
call graphs queries 
query may variable label may variables node set 
nodes edges may negated meaning absent intuitively 
formally query equation form graph 
ii disjoint union sets 
contains positive nodes contains negative nodes 
iii disjoint union sets 
contains positive edges contains negative edges 
iv implies 
condition iv restricts edges positive nodes clearly positive edge containing negative absent node impossible edge contain negative node negative edges containing negative nodes meaningless 
simplicity denote node edge examples queries route flight nat air airline flight noy nat informally finds route flight number routes airline air route flight nat flight nat informally checks route flight number greater nat nat nat finds numbers greater equal greater mapping section 
hyperlog program finite set rules rule expression form queries 
example give program ignoring node sets graphs simplicity generates transitive dependents passengers places information mapping trans deps passengers passengers trans deps yx passenger passenger trans deps yx trans deps pass pass passenger passenger passenger hyperlog program represented labelled graph follows 
rule add node set graphs body add edge set edge body assume labels body drawn set program rule names prog members distinct set hypernode labels set type labels tl 
example program represented graph shown deps prog body body unique identifiers drawn prog subsequent figures programs dispense outer program label 
note rule heads shared rules graphical representation programs 
give example rule bodies shared 
semantics shared rule head disjunction head inferred bodies true 
conversely semantics shared rule body conjunction rule heads inferred rule body true 
note graphical representations programs hypernodes typed graphs encapsulated required unique labels example graphs label trans deps 

queries rule bodies queries bodies rules act templates matched equations hypernode repository 
defining matching process need concept substitution variables constants appropriate type 
substitution set assignments distinct variable distinct element type application substitution query equation qq resulting substitution left hand side right hand side query hypernode repository hr query match query respect repository substitution variables query constants drawn labels hr prim hr exists equation qq hr satisfying nq 
ii nq 
iii eq 
iv eq extend definition set queries substitution match set queries match query taken separately 
note definition assuming herbrand universe closed world assumption 
allows infer negation node edge absence positive match non monotonic formalisms 
example hypernode repository containing routes flight airline air 
flight 
flight airline air 
flight 
flight airline air 
flight 
sets possible matches queries route flight airline nat air flight noy route flight flight route flight flight route air respectively 

queries rule heads query head rule indicates updates undertaken match queries body rule 
rule program may modify equations hypernode repository adding deleting nodes edges right hand side positive negative nodes edges head furthermore may variables appearing head appear body denote set variables new case head match equation repository set new equations generated positive variable new labels left hand sides new equations hitherto unused hypernode repository program chosen non deterministically 
consists number rules 
sets new labels generated sets variables new 
new pairwise disjoint 
clearly new labels may left dangling execution program relax condition definition hypernode repositories section assume equation null dangling label null graph null defined follows type null illustrate hypernode programs 
program deps prog generates transitive dependents passengers places information mapping trans deps 
pass pass trans deps trans deps fig 

program generate dependents 
deps prog passenger dependents passenger passenger passenger dependents body body program generates greater relation natural numbers 
assumes natural numbers contained node set distinguished hypernode label numbers 
program places result hypernode passengers paying fare ticket 
program adds passenger dependents passenger deleting null value fig 

program generate greater relation 
nat nat nat nat nat nat nat nat body body nat nat greater numbers greater greater numbers nat fig 

program find passengers paying 
passenger body amount nat ticket passenger pt fare fare greater nat currency passengers result body amount nat ticket passenger pt fare fare greater nat currency passengers result recorded dependent 
note edge passenger deleted 
note semantics update program passenger number dependents 
fig 

program add dependents 
passenger passenger dependents passenger program replaces old time departure flight fl flight new time time type correctness fl old time fl 
program illustrates cardinality time dep attribute limited 
fig 

program replace time departure flight fl 
time time dep flight fl fl time dep time final program restructures information passengers stored number mappings functional data modelling hypernode passenger relational data modelling 
fig 

program restructure passenger information number mappings 
pass string pass string pass string pass pass body surnames titles deps string string string surname initial title passenger name passenger name dependents initials conclude section noting possible write hyperlog rule deletes equation 
practice garbage collection achieved outside hyperlog 

operational semantics hyperlog programs section specify operational semantics hyperlog ary operator infer hr hyperlog program hr hypernode repository 
infer hr returns new hypernode repository differs hr insertions deletions inferred hr firing parallel rules operator fix hr computes fixpoint respect hr successive application infer hr 
defining binary operators sets equations sets equations hr hr hr hr consists equation hr hr labels hr labels hr ii pair equations hr hr left hand side equation hr hr consists equation hr labels hr ii pair equations hr hr left hand side equation 
rule program head query 
match set queries 
new substitution new defined follows new new 
ii matches new arbitrary matches 
iii new new new labels superscripted appropriate type 
denote singleton set new pos singleton set new neg 
note equation neg may right hand side graph may case edge case 
define main operator infer hr hr rp pos rp neg provided set inferred insertions set inferred deletions intersect provided rp pos rp neg rp pos wish inferences presence conflicts want declarative semantics 
equality hold define infer hr old hypernode repository hr 
conclude defining operator fix hr computes fixpoint hypernode program respect hypernode repository hr fix hr hr ii fix hr infer fix hr iii fix hr fix hr fix hr fix hr hr fix hr 
proposition states fix hr hypernode repository satisfies conditions section 
proof proposition follows easily definition infer hr proposition 
fix hr hypernode repository 
course computation fixpoint terminate 
example program generates successor nat natural number nat assuming representation natural numbers assuming nat nat repository 
clearly program carry generating successors ad infinitum 
nat nat nat nat rule contains variable head body way nontermination arise 
example program inserts deletes ad infinitum couple person person couple person person proposition states computation fix hr terminate resulting repository unique generation new labels choice substitutions new proof follows observation non deterministic steps infer hr 
proposition 
fix hr unique drawing new labels choice new conclude section noting fix hr defined ignores type correctness new repository 
fact static type checking programs performed fixpoint computed program rule type correct rule type correct query partially typed query partially typed graph satisfies conditions section respect type number observations 
firstly verifying queries body rule partially typed prevents evaluation programs priori type incorrect 
secondly queries heads rule partially typed contain insertions hypernode repository fix hr typed recall section null graph null assumed dangling labels type 
thirdly deletions rule heads may cause conditions section violated 
situation allowed occur signaling run time error inserting part operator partially typed graphs appropriate nodes edges null 
order simplify program specification adopted solution 

efficiency inference section examine efficiency infer hr operator 
observing infer hr decidable repository hr finite number matches query respect hr due fact finite number constants drawn hr 
furthermore rule match body new chosen arbitrarily finite number existing substitutions obtained finite number new labels 
consider aspects efficiency infer hr complexity finding match query respect hypernode repository potential number matches query 
theorem states finding match query respect hypernode repository general npcomplete 
theorem 
finding substitution match query respect repository hr npcomplete 
proof 
show np hardness showing problem contains sub graph isomorphism known np complete sub problem 
positive query form elements variables type equation hr 
result follows required mapping 
show problem np 
query guess substitution query respect hr 
equation hr left hand side qq done 
remains show testing equation qq hr match query performed time polynomial size 
result follows examining definition match section see testing performed time proportional 
despite negative result finding match expensive case certain graphs 
example case graphs repository graphs queries trees problem solved polynomial time size repository 
practice data record corresponding graphs repository forests see example graphs previous examples 
forest equivalent tree root label graph matching queries tractable 
respect number matches query may exist exponential number matches example query elements variables type equation number matches 
negated nodes queries lead complexity 
consider example matching rule body person string clearly may large number matches string constants database name person 
problem avoided allowing variables appear negatively body rule appearing positively 
rule variable appearing appears construct substitutions matching positive information technique commonly known range restriction 
example range restrict strings rule body names people person string person name negative variables problem negative information negative constant nodes lead additional complexity occur query variable label 
consider example matching rule body person jim cases hyperlog evaluator type information search matches hypernodes type person 
reducing cost finding matches positive information problematic 
clearly query variables greater number possible substitutions variables 
type tags variables narrow number choices 
edge information help 
addition record data attribute values polynomially bounded single valued attributes number matches query polynomial size repository 
expressiveness computation clearly hyperlog powerful language respect expressiveness computations updates 
fact computationally complete update complete 
demonstrate computational completeness hyperlog showing simulate counter programs known computationally complete 
counter programs manipulate natural numbers stored variables called counters 
operations allowed counters counters denotes assignment 
addition counter programs support sequential composition goto statement conditional counter variable 
simulate counters hyperlog equations distinguished left hand side ctr nat ctr nat ctr nat say 
recall natural numbers represented successive nestings primitive node nat nat 
sequence firing rules counter program set distinguished labels step step step step 
current step contained node set hypernode label seq steps steps step 
start program hypernode assumed seq step 
example assigning zero counter ctr achieved inserting node set deleting non zero element ctr ctr nat nat assigning value ctr counter ctr achieved rule ctr ctr nat ctr nat adding ctr achieved rules may generate new natural number nat nat ctr nat ctr ctr nat nat subtracting ctr achieved rule ctr ctr nat nat testing ctr zero achieved query ctr body rule 
sequential firing rules conditional goto achieved associating steps rules updating seq hypernode current step 
example assuming program steps step ctr step goto step ctr step 
step goto statement step simulated rule seq step step ctr seq step conclude section examining expressiveness hyperlog respect database updates 
define update context define concept update completeness analogy previous relational databases 
type repository tr define set inst tr contain hypernode repositories typed respect tr 
define update partial recursive mapping inst tr inst tr generic 
introduced intuitively means apart set distinguished constants may empty set structure database relevant update values constants database 
case update generic holds finite set constants types contained prim tr labels tr hr inst tr isomorphism maps primitive nodes primitive nodes labels labels invariant hr equal hr renaming newly generated labels 
set may thought constants primitive nodes labels appear explicitly update program 
query language update complete hypernode model precisely defines set updates defined 
update completeness hyperlog particular follows similar results logic languages comparable semantics 
hyperlog database browsing considered querying updating database partially specifying contents hypernodes 
contrast browsing allows user navigate structure database independent actual values 
case hypernode model navigation follow edges forwards backwards descend node parent graph ascend parent graph node 
show navigational operators implemented hyperlog 
general difficult user predict types hypernodes encountered browsing database 
order facilitate browsing introduce type super type type consider hypernode primitive node type 
define types context current hyp current node current hyp current node instances type context typically contain nodes type current hyp contains hypernode type current node contains specific node hypernode 
current context recorded hypernode cur context context cur hyp current hyp cur node current node cur hyp contains current hypernode navigation cur node contains specific node current hypernode currently browsed 
current hypernode updated hypernode old say hypernode new rule cur hyp new old similarly current node updated old new rule cur node new old cur hyp new observe rule verifies new current node node set current hypernode 
order navigate forwards store hypernode cur current node nodes connected current node edges outgoing initialise previous contents cur rule cur cur store nodes cur rule cur cur node cur hyp xy similarly order navigate backwards store hypernode cur current node nodes connected current node edges incoming initialise previous contents cur cur store previous nodes cur rule cur cur node cur hyp yx order navigate upwards store hypernode cur current node hypernodes containing current hypernode initialise previous contents cur rule cur cur hyp order navigate downwards store hypernode cur current node nodes contained node set current node primitive node initialise previous contents cur rule cur cur node browsing hyperlog investigated 
particular shown hyperlog support declarative querying content structure hypertext database 
database constructed associating hypernodes fragments text hypernodes store named links fragments 
history hypernode records user navigation database 
number alternative trails set stored 
navigational functions supported include display hypernode associated text operators described 

comparison related section compare hypernode model hyperlog related languages models 
logic database language iql semantics hyperlog partly derived 
consider graph data models :10.1.1.26.857
consider hypergraph models 
iql incorporates object identities typed rule query language update complete 
fixpoint semantics hyperlog similar discussed label generation semantics differ iql invention object identities generate new labels necessary consequence new graphs inferred iql generation object identity assignment value independent events 
iql types constructed tuple set union intersection constructors hyperlog generalpurpose graph constructor simulate 
compare hypernode model graph data models logical data model ldm graphlog 
ldm database schemas directed graphs instances consist column tables associates entities particular type values 
ldm schema graphs types node basic primitive data types composition tuple types collection set types represent tuple types set types general purpose graph constructor 
graphlog query language operating database comprises directed labelled graph semantic net 
edges graph represent predicates 
hyperlog graphlog queries formulated graphs edges annotated predicates transitive closures thereof generally regular expressions 
query graphs matched database graph return sub graphs thereof 
graphically represented functional data model associated transformation language 
embeds semantics nodes edges graph nodes printable non printable edges single valued multi valued 
queries transformation language graphs called patterns match sub graphs total instance graph matching queries hypernode repository 
contrast hyperlog rule updates instance graph updated graphically represented primitive operations add delete node edge operation called abstraction incorporated patterns 
summary feature common models database consists single flat graph 
drawback practice complex objects consisting inter connected nodes hard user clear way 
contrast hypernode database consists set nested graphs 
unique feature model provides inherent support data abstraction ability represent real world object separate database entity 
allow abstraction operation generates non printable entity connects related entities level nesting set graphs graph 
graphlog label edges hypernode model 
attain data modelling expressiveness encapsulating edges label graphlog hypernode similar label 
example represent set edges ticket ticket ticket hypernode ticket conclude section review hypergraph data models comparison model 
observe hypergraphs modelled hypernodes encapsulating contents hyperedge hypernode 
contrast multi level nesting provided hypernodes easily captured hypergraphs 
hypergraphs model page oriented hypertext databases 
nodes hypergraph associated pages information 
hyperedge consists related set labelled directed edges 
nodes directed edges shared hyperedges 
querying hypergraph navigational uses number predefined operators browsing forwards backwards directed edges set marked nodes marking new set nodes reading set pages associated current marked nodes querying current state saving resetting current states 
views created database hypergraph updated number primitive operators 
hypernode model hypergraphs typed updates semantically constrained 
hyperlog querying database content supported 
hypergraph model data access aims integrate browsing querying 
model entities represented nodes relationships hyperedges 
resulting hypergraph transient lasting duration query session 
starts consisting hyperedge containing database entities hyperedges added response user queries 
stage hypergraph traversed moving hyperedges hyperedge hyperedge common node 
number differences 
firstly database entities assumed type stored tuples single flat relation 
secondly attributes entities represented graphically hypergraph exist underlying relation 
thirdly browsing graph querying consists specifying boolean valued expressions values attributes hybrid model browsing querying obtained 
described data model called graphically represented object oriented data model values 
real world entities represented means instances object schemas 
showed representation object schemas means hypergraphs leads natural formalisation notions subobject sharing structural inheritance 
showed instances object schemas represented hypergraphs labelled object identifiers 
conceptual data model influenced development hypernode model 
superseded types hyperlog implementation 

system architecture implementation currently coming year project goal implement prototype dbms hypernode model tailor needs hypertext databases 
architecture system shown 
graph user interface hyperlog evaluator transient hypernode store storage manager index manager interface interface 

hypernode database system architecture 
architecture storage manager stores hypernodes types programs index manager supports efficiently operations label return unique graph ii primitive node return set labels equation iii label return set labels equation detailed description storage manager appears 
briefly storage manager supports number object stores object store containing graphs type 
object stores reserved storage types programs 
associated object store label table maps labels physical addresses graphs define implementing operation 
operation ii implemented simple prefix btree operation iii implemented extendible hashing scheme 
operations invoked hyperlog evaluator matching queries 
evaluator computes fixpoint program respect repository verifying program correctly typed 
updated hypernodes transient hypernode store inference step 
evaluator currently uses bottom naive evaluation hyperlog programs looking optimising fixpoint computation drawing existing optimisation techniques logic database languages semi naive evaluation 

summary hypernode model graph data model stores nested graphs form equations manipulates rule language 
key innovations model formal foundation graphs set theory graphs levels user interface physical level inherent support data modelling concepts object identity complex objects encapsulation provision types type checking associated query language hyperlog support querying browsing allows derivations database updates uniform storage data hypernodes meta data types procedural data hyperlog programs 
examined efficiency type checking shown performed polynomial time 
examined expressiveness representation computation update model shown hyperlog computationally update complete 
evaluation hyperlog programs intractable general case discussed cases evaluation tractable 
compared model graphbased models 
comparison highlighted advantages nested graphs type instance levels 
briefly discussed prototype dbms architecture implementation 
current research effort directed tailoring hypernode dbms needs hypertext 
includes optimisation hyperlog support versioning provision special purpose access methods implement efficiently browsing text retrieval operations 
hypernode project supported financially science engineering research council number gr 

abiteboul vianu procedural declarative database update languages 
proceedings acm symposium principles database systems austin texas 

abiteboul kanellakis object identity query language primitive 
proceedings acm sigmod international conference management data portland oregon 

abiteboul vianu fixpoint extensions order logic datalog languages 
proceedings symposium logic computer science 

aczel non founded sets 
center study language information csli lecture notes stanford ca 


beeri formal models object oriented databases 


berge graphs hypergraphs 
north holland amsterdam 

ceri gottlob tanca logic programming databases surveys computer science springerverlag 

chandra harel computable queries relational data bases 
journal computer system sciences 

chen 
entity relationship model unified view data 
acm transactions database systems 

codd extending database relational model capture meaning 
acm transactions database systems 

conklin hypertext survey 
ieee computer 

consens mendelzon graphlog visual formalism real life recursion 
proceedings acm symposium principles database systems nashville tennessee 

dearden hypertext database implemented hypernode model 
sc 
thesis dept computer science university college london 

proceedings international conference deductive object oriented databases 

garey johnson computers intractability guide theory np completeness 
freeman new york 

griffith principles representation semantic networks 
acm transactions database systems 

gyssens paredaens van gucht graph oriented object database model 
proceedings acm symposium principles database systems nashville tennessee 

harel algorithmics spirit computing addison wesley reading ma 


harel visual formalisms 
communications acm 

hull king semantic database modelling survey applications research issues 
acm computing surveys 

hull su untyped sets invention computable queries 
proceedings acm symposium principles database systems philadelphia penn 


kim object oriented databases definition research directions 
ieee transactions knowledge data engineering 

kuper vardi new approach database logic 
proceedings acm symposium principles database systems waterloo 

levene poulovassilis hypernode model associated query language 
proceedings th ieee computer society press 

levene poulovassilis object oriented data model formalised hypergraphs 
data knowledge engineering 

naqvi tsur logical language data knowledge bases 
computer science press new york 

parent spaccapietra complex object modelling entity relationship approach nested relations complex objects databases abiteboul fischer 
schek ed springer verlag berlin 

przymusinska przymusinski semantic issues deductive databases logic programs 
formal techniques artificial intelligence banerji 
ed elsevier science amsterdam 

reiter closed world databases 
logic databases gallaire minker 
ed plenum press new york 

schek 
scholl relational model relation valued attributes 
information systems 

shipman functional data model data language 
acm transactions database systems 

shriver wegner 
ed 
research directions object oriented programming 
mit press cambridge ma 


tompa data model flexible hypertext database systems 
acm transactions information systems 

tuv poulovassilis levene storage manager hypernode model 
proceedings advances database systems lecture notes computer science springer verlag 

ullman principles database knowledge base systems 
computer science press rockville md 


shepherd transient hypergraph model data access 
acm transactions information systems 

wong lochovsky 
ed 
object oriented languages applications databases 
acm press frontier series new york 
