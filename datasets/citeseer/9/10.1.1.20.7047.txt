spin feature interaction analysis case study calder miller department computing science university glasgow glasgow scotland 

show spin applied analyse behaviour real software artifact feature interaction telecommunications services 
demonstrate minimal abstraction techniques greatly reduce cost model checking analysis performed automatically scripts 
keywords telecommunications services promela spin communicating processes distributed systems formal modelling analysis reasoning techniques feature interaction software development feature component additional functionality additional main body code 
typically features added incrementally di erent developers 
consequence adding features way feature interaction feature ects modi es behaviour feature 
cases feature interaction quite acceptable desirable cases interactions lead unpredictable undesirable results 
problem known telecommunications services domain example see exhibits domains email electronic point sales 
techniques deal feature interactions characterised design time run time interaction detection resolution 
concentrate detection design time resolution achieved re design 
proliferation features services automated detection techniques essential 
investigate feasibility promela spin 
approach involves considering service features different levels abstraction communicating nite state automata temporal logic formulae represented promela speci cations labelled transition systems uchi automata 
contributions levels including low level call service model promela permits truly independent call control processes asynchronous communication asymmetric call control facility adding features structured way state space reduction techniques promela result tractable overcoming classic state explosion problems interaction analysis basic call service features involving users full functionality 
types analysis static dynamic completely automated making extensive perl scripts generate model checking runs 
related discussed 
approach interaction detection role spin section section contains feature interaction analysis 
sections give overview nite state automata temporal properties promela implementation basic call service state space reduction techniques 
sections contain overview features implementations 
interaction analysis described sections section discuss promela models spin model checking runs required analysis automated 
conclude section 
related model checking feature interaction analysis investigated smv caesar cospan spin :10.1.1.98.1514
promela model extracted mechanically call processing software code details model dicult compare results 
smv authors restricted subscribers service full functionality plus users half functionality due state explosion problems 
similar reasons call control independent 
regard benchmark aim demonstrate similar set properties context 
cospan features basic service described level temporal descriptions 
state explosion avoided interactions arising implementation detail race conditions detected 
layered approach permits detection interactions level building earlier rst author process algebra :10.1.1.98.1514
su ered limitations state explosion lack explicit asynchronous communication limitations motivated current investigation promela spin 
initial attempts model basic call service promela spin described 
approach approach phases rst phase consider basic call service depicted gure 
aim rst phase develop right level abstraction basic service ensure ective reasoning techniques proceeding add features 
state space state space implement bc communicating finite state automata basic call validate idle 

optimise denote develop properties promela 
basic service implement bc communicating finite state automata validate idle 

optimise denote develop properties promela basic call features dynamic analysis inline 
static analysis rpq basic service features cfu fig 

approach starting point top left hand side gure automata properties 
need complete speci cations virtue approach example allows avoid frame problem 
promela description rhs gure regarded implementation crucial step validation implementation checking satisfaction properties spin 
initial attempts fail due state explosion examination underlying state space bottom gure leads discover simple ective state reduction strategies code optimisation 
second phase add features depicted gure 
starting point nite state automata properties 
promela implementation augmented new feature behaviour primarily inline function see section validated 
interaction detection analysis takes forms static analysis syntactic inspection promela code dynamic analysis reasoning combinations sets logical formulae con gurations feature subscribers spin 
results analysis interaction detection 
distinction analyses discussed detail section 
background features interactions control progress calls provided service exchange stored program control exchange 
software respond events handset hook sending control signals devices lines ringing tone line engaged 
service collection functionality usually self sustaining 
feature additional functionality example call forwarding capability ring back free user said subscribe feature 
features added basic service may interactions behavioural modi cations features ered service features ered service 
example user subscribes call waiting cw call forward busy cfb engaged call happens incoming call 
full details features mentioned section 
call forwarded cw feature clearly compromised vice versa 
case subscriber expectations met 
example single user single component interaction con icting features subscribed single user 
subtle interactions occur user subscriber involved referred multiple user multiple component interactions 
consider user subscribes originating call screening ocs user screening list user subscribes cfb user calls call forwarded prescribed cfb ocs compromised 
call forwarded converse 
kind interactions particularly dicult detect resolve di erent features activated di erent stages call 
ideally interactions detected resolved service creation time may possible third party legacy services involved example see 
basic call service gives diagrammatic representation automaton basic call service intelligent networks model distributed functional plane 
states left idle state represent terminating behaviour states right represent originating behaviour 
events observable service subscribers label transitions user initiated events terminal device handset handset plain font network initiated events engaged italics 
note ring events oring originating terminating ring tone respectively call behaviour asymmetric 
transitions labelled 
automata communicate order coordinate call set clear 
implement communication associate channel call process 
channel capacity message pair consisting idle calling dial oring oring connect disconnect dial terminating originating dial disconnect busy dial engaged dial dial dialling fig 

basic call states events channel name party call status bit status connection 
describes messages interpreted 
basic call service properties ltl give set temporal properties describing behaviour basic call service 
doing comments ltl spin 
spin ltl converter conversion tool possible check property holds executions executions 
universal quanti er implicit ltl formulas check ltl property natural choose executions option 
wish check contents channel interpretation free engaged connected attempting connection channel contains empty engaged connected connected terminating party fig 

states communication channel protocol property say holds state execution path possible showing hip holds executions true claim violation equivalent 
property notation mean path place usual implicit paths 
additionally spin prove properties form true state relative process 
true time process active 
done judicious spin operator details omitted 
shorthand mean global state process local transition 
addition operators weak precedes de ned fwg fug fpg fug ltl alongside property 
involves referring variables 
dialled connect contained promela code extract section 
symbols denote predicates example dialled 
provides representation ltl converter requires properties way 
property connection users possible 
connect property dial receive engaged tone returning idle state 

wq dialled network event engaged user idle 
property busy tone ringing tone directly time process active follow calling 
event call network event engaged network event oring 
property dialled number number connection attempt 
dialled partner chan name 
property dial busy number busy line clears call attempted hear engaged tone returning idle state 

wq dialled event dial full chan name event call len chan name user idle network event engaged note operator len de ne preference function empty 
spin disallows negation functions arises claim 
property call having just time process active dialled number 
user calling event dial 
basic call service promela code call process see gure described promela instantiation parameterised proctype user declared proctype user byte selfid chan self promela state formalism event 
represent events ect variables states calling dialling labels 
transition implemented compound statements group atomic statement concluding goto 
example original promela code described associated idle dialling calling states outgoing transitions 
full optimised code contact authors 
global local variables parameters self explanatory 
note passing variable intend reason updated atomic statement steps ecient atomic steps suitable allow process jump label scope 
numerous assertions code particularly points entering new call state reading writing communication channels 
idle atomic assert dev assert partner selfid null attempt call receive empty self event selfid dev selfid self self goto dialling connection attempted go originating party full self self incoming call full partner selfid partner selfid messchan self call attempt messchan null messbit goto self messchan messbit call attempt cancelled partner selfid null partnerid messchan null messbit goto idle fi empty partner selfid self messchan messbit call attempt cancelled partner selfid null partnerid messchan null messbit goto idle fi fi dialling atomic assert dev assert full self assert partner selfid null dial go event selfid dial dial nondeterministic choice called party partner selfid zero dialled selfid partnerid partner selfid dialled selfid partnerid partner selfid dialled selfid partnerid partner selfid dialled selfid partnerid partnerid fi event selfid dev selfid self messchan messbit assert messchan self messchan null messbit goto idle go dialling fi calling check number called process atomic event selfid call assert dev assert full self partnerid goto unobtainable partner selfid self goto busy invalid partner partner selfid self partnerid empty partner selfid partner selfid self self messchan messbit self partner selfid goto valid partner write token partner channel full partner selfid goto busy valid partner engaged fi fi atomic assert full self assert full partner selfid connection established connect selfid partnerid goto number call processes run concurrently 
example assuming global communication channels zero network call processes atomic run user zero run user run user run user options state space reduction techniques initial attempts validate properties network call processes fail state explosion 
section examine causes applicability standard solutions promela code transformed optimised reduce size state space 
spin options default partial order reduction por option applied reduce size state space suciently 
due scarcity statically de ned safe operations see model 
assignments local variables embedded large atomic statements safe 
furthermore non destructive read operations test contents channel prevents assignment exclusive read send status channels 
test crucial behaviour depends exact contents channel 
states compressed minimised automaton encoding ma compression com 
necessary de ne maximum size state vector course implies searched entire space 
nd reasonable value choosing uncompressed value reported preliminary veri cation deliberate assertion violation 
ma com give signi cant memory reduction trade terms time simply unacceptable 
state space reduction strategies simple ective way reduce state space ensure visit call state visit underlying promela state 
means variables possible initialised reset initial value promela loops 
example virtually call state possible return idle 
reduction variables messchan messbit initialised rst visit label call state subsequent visits 
global states previously distinguished due di erent values variables di erent visits idle call state identi ed 
largest reduction variables routinely reset progressing call state 
unfortunately possible result variables wish reason updated atomic statement discussed section 
solution add state variables 
example added new state variables network event event progression idle 
occurrence goto idle goto 
note default data ow optimisation option available spin attempts variables automatically option increases size state space model 
due initial values variables non zero type mtype example 
spin data ow optimisation resets variables zero 
switch option variables manually 
size state space greatly reduced update global variable needed veri cation commented 
furthermore including event variables say variable needed veri cation see example property size state space increased unnecessarily large amount 
example prove property holds user interested value event event need updated 
inline function event action introduced enable update speci variables 
allows update value event value leave event variables set default value 
example event action inline inline event action selfid event selfid selfid skip fi inline de nition merely commented event variables needed veri cation 
inline function included handle network event variables way 
note reduction implemented spin 
spin issue warning variable situations reduction bene cial 
transformations refer code optimisation lead dramatic reduction underlying state space search depth required reduced percent initial value involve abstraction away original model 
contrary said reduce level abstraction 
abstraction methods see example techniques simple merely involve making simple checks states unintentionally introduced 
believe kinds state space explosions uncommon 
spin users aware may introducing spurious states coding problem promela 
basic call service validation possible verify properties listed section gbyte memory limit 
state compression 
veri cation property took longest mins greater search depth reached case 
partially due fact event network event variables process consideration included property 
addition operator precludes partial order reduction helped reduce complexity case 
features state space tractable commence second phase adding number features basic service 
features set features added include cfu call forward unconditional calls subscriber phone diverted phone 
cfb call forward busy calls subscriber phone diverted phone subscriber busy 
ocs originating call screening calls subscriber numbers prede ned list inhibited 
assume list user contain ods originating dial screening 
dialling numbers prede ned list subscriber inhibited 
assume list user contain tcs terminating call screening calls subscriber number prede ned list inhibited 
assume list user contain rbwf ring back free subscriber option call recorded caller phone 
features straightforward implement originating call behaviour pay phone terminating call behaviour teen line 
give details features 
give automata features gure give additional behaviour prescribed rbwf feature 
automaton appears non deterministic dial event associated data 
data determines choice result transition 
notice feature introduces new call state feature 
idle dialing calling dial callback dial fig 

part finite state automaton rbwf temporal properties features properties features dicult express basic service 
order accurately re ect behaviour feature great attention paid scope property corresponding ltl formula 
example property see essential cfb feature invoked forwarding party full communication channel whilst dialling party dialling state 
expressed stating forwarding party full channel continuously states rst occur dialling party enters dialling state second dialling party emerges dialling state 
values variables depend particular pair features corresponding property analysed 
variables updated prior veri cation manually editing promela code directly automatically running model generating script see section 
property cfu assume user forwards user rings user connection attempted user hangs 

rpq dialled partner chan name dev 
property cfb assume user forwards user rings user busy connection attempted user hangs 

rpq dialled full chan name partner chan name user dialling dev 
property ocs assume user user screening list 
connection user user possible 
connect 
property ods assume user user screening list 
user may dial user dialled property tcs assume user user screening list 
connection user user possible 
connect 
property rbwf assume user automatic call back 
possible attempted call eventually result successful call dialling rpq dialled dialled connect event call 
features promela relevant changes need promela model 
observations implement features included feature lookup function see implements features computes transitive closure forwarding relations features apply call state 
distinguish call dial screening means call user prohibited regardless dialled means dials call proceed connected means 
case desirable screening motivated billing 
example user dials local leg forwards calls trunk leg pay local leg 
currently restrict size lists screened callers relating ocs ods tcs features 
assume impossible single user subscribe screening feature 
sucient demonstrate feature interactions limits size state space 
addition rbwf straightforward increases complexity underlying state space greatly 
due addition new state fact involves recording structure indexed call processes connection attempt 
issue just new global variable call states previously identi ed distinguished contents record see discussion variable section 
ensure variables initialised default value 
particularly useful user subscribe particular feature 
value denote unobtainable number incorrect number denote button press rbwf 
additional value increase state space 
implementation features feature lookup inline order enable add features easily code relating feature behaviour included inline de nition 
feature lookup inline de ned follows inline feature lookup part chan part id st st st dial ods selfid part id st st st st dial rbwf selfid part id st st part id st st dial cfu part id part id cfu part id part chan chan name part id part id st st dial cfb part id len part chan part id cfb part id part chan chan name part id st st call ocs selfid part id st st st st call tcs part id selfid st st break od parameters part chan part id st take values current partner partnerid state user call feature lookup inline 
statements feature lookup pertaining features currently active automatically commented see section 
note sense feature lookup encapsulates centralised intelligence switch knowledge status processes data concerning feature con guration 
hand argue spirit switch hand maintain feature interactions simply detected completely distributed architecture 
feature validation feature validated spin veri cation appropriate set properties 
veri cation took place minutes took place gbyte memory limit 
brevity give details 
static analysis static analysis analysis structure feature descriptions examination syntax 
speci cally look overlapping guards guards evaluate true assignment variables diverging consequences 
operational explanation detection shared triggers features 
collected additional feature behaviour inline feature lookup need consider overlapping guards function 
overlap consequences diverge non determinism potential interaction 
example consider overlap cfu cfb part id st st dial cfu part id part id cfu part id part chan chan name part id part id st st dial cfb part id len part chan part id cfb part id part chan chan name part id overlap occurs assignment st st dial cfu part id len part chan cfb part id 
rst consequent assigns part id second assigns part id clearly divergent interaction 
interactions distinguished considering roles part id selfid indices 
index feature subscription cfu part id cfb part id interaction di erent indices 
example interaction clearly 
overlap possible 
example consider rst choices st st dial ods selfid part id st st st st dial rbwf selfid part id st st valid number screening list overlap interaction 
pairs consider clauses st dial leading pairs clauses st call leading pair 
results static analysis tables gure 
indicates interaction indicates 
tables symmetric 
rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf fig 

feature interaction results static analysis static analysis simple ective mechanism nding interactions arise new non determinism 
equational reasoning techniques process nding overlapping guards known superposition automated 
process considering consequent statements divergent dicult complete solution require thorough axiomatic description promela language 
possible automate relatively ective approach simple assignment 
purposes rely manual inspection function feature lookup 
case note ease contribution static analysis depends structure speci cation 
turn attention dynamic form analysis 
dynamic analysis dynamic analysis depends logical properties satis ed pairs users subscribing combinations features 
consider users 
con guration scenario subscribes feature subscribe feature features interact property holds longer holds presence feature formally stated property 
interaction 
note constraints 
note analysis pairwise known way interactions 
rst sight may limiting empirical evidence suggests little motivation generalise way interactions detectable way interaction exceedingly rare 
initial approach consider property candidate 
easy see case features interact 
selective approach required consider properties associated features examination features consider properties interaction resulting violation property written 
dynamic analysis feature interaction results tables gure gives interactions pairs features case case 
row labelled feature means property violated indicates violation occurred 
features interact position position 
bc excluded feature interacts way 
rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf fig 

feature interaction results dynamic analysis new interactions detected dynamic analysis associated rbwf feature 
example rbwf cfu interaction cfu feature prevents record variable pertaining subscriber set non default value 
subscriber unable perform ring back 
tables symmetric 
example ods cfu interaction cfu ods interaction 
understand observe static analysis detects interaction assignment ods cfu 
dynamic analysis detects interaction violation analysis script see section generates exactly scenario ods cfu interaction user rings user 
consider computations feature lookup takes ods branch 
understand ods having precedence 
interaction case property property satis ed 
computation cfu branch taken case cfu precedence property violated user dialled user call forwarded user clearly property satis ed 
understanding property violated give designer strong hints resolve interaction 
interactions uncovered dynamic analysis depend properties features modelled 
properties adequate expect statically detected interaction detected dynamically vice versa 
borne case study 
may regard static analysis step cheap method uncovering interactions providing indication set behavioural properties 
note properties complete descriptions particular state happen frame problem 
example expect cf tcs interaction case tcs block forwarded call partner variable set appropriately satisfying property 
strengthen property cfu insist connection just setting partner appropriately 
simple forwarded party may engaged forwarded feature kind feature possibilities endless 
consider cfu property quite adequate 
automatic model generation feature interaction originally features added basic call model global variables manually turned 
commented replaced local variables needed veri cation 
addition features led variables requiring selectively turned set di erent values 
example originating call screening feature selected orig call array included elements set appropriate values 
addition feature lookup inline amended include lines pertaining originating call screening feature 
ring back free feature chosen entire call state commented 
making necessary changes spin run extremely time consuming error prone 
perl script enable perform changes automatically 
speci cally enables generate combination features properties model template le 
generated model includes header containing information features properties chosen particular case easier monitor model checking runs 
dynamic feature interaction analysis combinatorially explosive consider pairs features combinations suitable instantiations free variables occurring properties 
example case gives di erent scenarios valid 
ease burden speed process perl script enable systematic selection pairs features parameters generation corresponding model automatic spin veri cation model recording feature interaction results 
note scenarios leading feature interactions recorded 
depending property concerned report error properties errors property spin veri cation indicates interaction 
interaction search interactions commences 
interaction pair features considered 
example output demonstrates complete results cfu cfb property 
features new combination features cfu cfb feature meaningless new combination features cfu cfb property parameters errors parameters errors parameters errors parameters errors new combination features cfu cfb property parameters errors feature interaction new combination features cfu cfb potential loop test new combination features cfu cfb feature meaningless new combination features cfu cfb property parameters errors feature interaction directions promela spin analyse behaviour software artifact feature interaction service 
approach involves di erent levels abstraction communicating nite state automata temporal logic formulae represented promela speci cations labelled transition systems uchi automata 
demonstrated approach analysis basic call service features involving users full functionality 
types analysis static dynamic completely automated making extensive perl scripts generate spin runs 
distinction static dynamic analysis important comprehensive provides simple ective initial step check temporal properties depends 
state explosion major concern feature interaction analysis understanding promela model optimised order generate tractable state spaces important 
outlined simple ective state space reduction technique promela away system modelled contrary may understood reducing gap promela representation system investigation 
technique involves variables results reduction cent state space 
overcome classic state explosion problems interaction analysis results considerably extensive 
believe reduction technique perl scripts useful spin community general 
note understanding interaction occurs help redesign process 
example static analysis indicates shared triggers dynamic analysis indicates built precedences features results analysis symmetric 
indicate alter precedences features order resolve interactions 
structured way topic 
authors gerard holzmann help advice revelation project glasgow computing resources 
second author supported daphne jackson fellowship epsrc 

bouma velthuijsen editors 
feature interactions telecommunications systems 
ios press amsterdam may 

calder magill editors 
feature interactions telecommunications software systems volume vi 
ios press amsterdam 

calder magill 
hybrid approach software interworking problems managing interactions legacy evolving telecommunications software 
iee proceedings software june 

mu calder alice miller 
analysing basic call protocol promela 
pages 

cameron gri eth 
lin 
feature interaction benchmark 
pages may 

clarke long 
model checking abstraction 
acm transactions programming languages systems september 

courcoubetis editor 
proceedings fifth international conference computer aided veri cation cav volume lecture notes computer science greece june july 
springer verlag 

dini logrippo editors 
feature interactions telecommunication networks iv 
ios press amsterdam june 


stutter invariant languages automata temporal logic 
pages 

felty 
feature speci cation automatic con ict detection 
pages may 

susanne graf claire 
tool symbolic program veri 
pages year 

nicolas halbwachs doron peled editors 
proceedings eleventh international conference computer aided veri cation cav volume lecture notes computer science trento italy july 
springer verlag 

heitmeyer james jr kirby bruce labaw archer ramesh bharadwaj 
abstraction model checking detect safety violations requirements speci cations 
ieee transactions software engineering november 

editors 
proceedings seventh international conference formal description techniques forte volume international federation information processing berne switzerland october 
kluwer academic publishers 

gerard holzmann elie ahmed editors 
proceedings th workshop automata theoretic veri cation spin model checker spin paris france november 

gerard holzmann 
model checker spin 
ieee transactions software engineering may 

gerard holzmann doron peled 
improvement formal veri cation 
pages 

holzmann margaret smith 
practical method veri cation event driven software 
proceedings international conference software engineering icse pages los angeles ca usa may 
acm press 

distributed functional plane architecture itu edition march 

bouma editors 
feature interactions telecommunications software systems ios press amsterdam september 

magill rei results second feature interaction contest 
pages may 

ryan 
plug play features 
pages 

thomas 
modelling analysing user views telecommunications services 
pages 
