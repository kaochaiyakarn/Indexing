functional vs object oriented distributed languages 
loidl trinder department computing electrical engineering heriot watt university scotland hw ac uk department computer science marburg university germany informatik uni marburg de improved network technology growing infrastructure interconnected computer systems generated resurgence interest distributed languages 
java example modern object oriented distributed language design automatic dynamic memory management strong types enhance safety inheritance facilitate code reuse 
theoretically non strict functional languages er additional bene ts constructing distributed systems 
languages sophisticated polymorphic type systems enhance safety distributed systems 
highly dynamic model distribution data transfer demand relatively high degree distribution transparency runtime system managing details data transfer potential safely distribution control primitives higher order polymorphic functions 
bene ts distributed functional languages bought price elaborate implementation 
distributed functional language designs robust long lived implementations notable exceptions include erlang cla haskell ports hn 
authors represent groups implemented non strict distributed functional languages haskell ph eden glasgow distributed haskell gdh ptl 
full evaluates distributed language features eden gdh comparison java case studies factory multiuser game 
distributed languages java dsms supports distribution remote method invocation rmi api allows java programs invoke methods remote objects 
supported research gr epsrc british council daad travel project apart fellowship austrian academy sciences 
dynamic class loading allows load code demand particular code loaded internet facilitating client server style distribution 
gdh ptl supports parallel distributed computation classes threads purely functional threads side ecting threads 
thread creation explicit remote fork primitive creates thread named processing element pe 
communication synchronisation implicit threads pe share variables threads pes 
data transfer lazy immediately required portion data structure transferred required thread 
threads explicitly communicate synchronise polymorphic semaphores mvars abstractions built top channels bu ers 
thread location exposed program level program resources unique pe 
eden uses explicit processes implicit communication stream channels 
pre de ned process merge allows communication 
lean communication achieved eager sending protocol communication connections built dynamic reply channels 
memory distributed global sharing pes local sharing pe 
complex process nets constructed realize transformational reactive systems 
factory distributed enables users privileged superuser di erent locations cooperate solving factory scheduling problems simulator kit 
factory distributed multiple clients connecting central server maintains central con guration information 
interaction diagram showing communication clients server 
investigated di erent implementations system depicted server represented shared synchronised state server process managing internal state operating queue messages clients 
java implementation wil uses shared synchronised state maintain list users simulation state 
client applets connect rmi operate server state server information passed back clients rmi client side message queues 
gdh implementation uses shared synchronised state protecting server state mvar pe ensure mutual exclusion 
clients pes remote fork manipulate server state 
contrast java gdh implementation instantiate exact number clients program starts 
eden server implemented process 
client processes connected streams chat protocol transactions communicated 
contrast gdh communication implicit reducing code size independent central monad 
embedding side ects setting frontend user computations low level primitive unsafeperformio set new state thread 
sync call return async client server clients client connect name chat mesg load sim xfer su su su sim sim mesg mesg su su add users su su remove user disconnect fig 

communication overview factory 
comparing implementations amount code communication similar remote calls 
unsurprising equivalence rmi remote fork 
furthermore additional calls connect server java directly correspond explicit calls client instantiation program startup gdh eden 
multiuser geographical game constructing multiuser geographical game gdh allows users navigate virtual world interact users 
game example class distributed applications including multiuser distance learning environments games map architecture exploration 
essence game similar classic game rst phase player places troops second phase players take turns searching opponent troops 
multiple players allowed interacting gui client pe 
implementation client explicitly central server game state coordinated 
players move time period introducing soft realtime limits application 
players place troops search interact world map 
data model standard multi layered geographic information systems gis maps bm 
layers representing di erent aspects geographic area overlayed fashion represent world 
data stored spatial data structure quad tree sam data transferred players machine re ects interest speci layers regions 
implementation data distributed pes chat mesg load sim disconnect remove user sim sim mesg mesg su su add users client connect name server queue xfer su client state process es remove user load sim disconnect chat mesg connect name server sim sim mesg mesg su su add users ack client queue queue xfer su client process es process fig 

shared synchronised state 
server process 
avoid bottleneck centralised data improves scalability 
communication necessary access data implicit information transfered demand gui renders particular view world 
discussion discuss gdh eden implemented distributed functional languages evaluate usefulness distinctive language features distributed applications implemented languages construction 
simple distributed programs explicit communication functional object oriented programming models remarkably similar communication eden explicit 
sophisticated distributed programs bene advanced features functional languages implicitly shared data lazy dynamic data transfer pes 
ortega mall en pe na 
eden coordination model distributed memory systems 
workshop high level parallel programming models hips pages 
ieee computer science press geneva switzerland april 
url www mathematik uni marburg de inf eden 
bm mcdonnell 
principles geographical information systems 
oxford university press 
cla 
distributed programming erlang 
international symposium parallel symbolic computation linz september 
dsms monk snyder 
java javascript programmers 
john wiley sons new york 
hn huch 
distributed programming haskell ports 
draft ifl th international workshop implementation functional languages aachen germany september 
kit 
analysis component interaction distribution facility simulation 

ph peterson hammond report programming language haskell version april 
url www haskell org 
ptl trinder 
loidl 
design implementation glasgow distributed haskell 
draft ifl th international workshop implementation functional languages aachen germany september 
url www hw ac uk dsg gdh 
sam samet 
applications spatial data structures 
addison wesley 
wil wilcox 
object oriented factory simulation java 
master thesis department computer science edinburgh university 
