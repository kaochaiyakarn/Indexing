replicated database recovery multicast communication dept computer engineering santa clara university santa clara ca acm org database replication update capability maintaining global synchronization isolation long thought impractical 
protocols proposed distributed replicated databases take advantage atomic broadcast systems simplify message passing conflict resolution hopes making replication efficient 
presents global recovery algorithms handle site failures protocols broadcast system providing virtual synchrony 
database replication topic interest years 
replication improved performance availability fault tolerance distributed systems advantages realized replicated databases contend multi item multi operation transactions acid properties 
difficult obtain performance database replication updates processed site copy serializability enforced 
lead research primary copy models restrict updates occur schemes relax consistency atomicity isolation requirements 
distributed database researchers explored traditional read write update protocols phase locking pl global time stamp variations quorums lazy update propagation 
numerous difficulties coping strategies summarized 
researchers proposed group broadcast multicast communications replica update enforce determinism alleviate problems update replication 
reason protocols commercial systems areas defined 
areas recovery 
research date multicast protocols assumed sites fail fail failed simply stopped recover 
recovery addition new sites considered sites update re synchronize database copies copying entire database site 
consumes time bandwidth normal update operations database system interrupted 
replicated database systems compensate having larger number database servers necessary normal operations 
way servers go possible wait convenient time interrupt system unavailable server sites recovering 
propose recovery mechanism replica update protocols classification update non voting 
goal recovery mechanisms minimize system time disruption caused failures 
organized follows 
section presents system model 
section presents replica update protocols run system 
section presents global recovery methods protocols 
conclude section 
dr clare luce professor computer engineering santa clara university system model assumptions consider highly available database server internet environment 
server implemented single database may easily congested bottleneck 
replicate copies database hot spot pages multiple server sites connected local area network 
assume users interact database invoking transactions server copies 
consider simple transactions sequences read write operations data items preserve acid properties atomicity consistency isolation durability 
transaction originate server site site initiating home site 
concurrency control locally enforced database management system dbms server sites strict phase locking 
sufficient ensure correctness presence replication transaction initiated database copies update protocol needed ensure copy serializability 
multi copy database appear users single copy database 
assume sites connected efficient network sort atomic multicast system providing virtual synchrony 
systems built provide atomic broadcast message passing processes distributed system lan totem amoeba 
atomic broadcast systems proposed provide services internet wireless networks 
communication subsystem connecting provides primitives broadcast messages group sites 
group broadcast multicast services ensure reliable totally ordered message delivery processes sites 
order achieve ordered delivery messages messages received site delayed delivered application delivered proper order 
consider atomic broadcast properties site broadcasts message primitive ensures message delivered operational sites 
furthermore site delivers message operational sites deliver property 
message delivered broadcast 
messages total order 
site delivers broadcast message sites deliver message addition providing message ordering reliability multicast systems keep track group membership report site failures 
site dbms local recovery mechanism transactions committed site durable survive site failures assume site failure equivalent loss power site contents volatile memory lost 
order accomplish database kept type stable storage parts database brought cache volatile memory needed read modified 
transaction modifies data modified data flushed stable database record update written recovery log non volatile medium transaction committed 
failure recovery log update stable database effects uncommitted transactions may flushed stable database undone effects committed transactions written stable database applied 
call local recovery 
global recovery refers process bringing site failed gone local recovery date respect rest sites distributed database system 
necessary allow distributed system continue process updates sites failed 
restrict number potentially faulty sites specific multicast systems may restriction 
assume case site communication failures primary group identified group membership mechanism continues process database updates subgroup knows non primary process updates waits rejoin primary group 
communication system providing virtual synchrony keeps track group membership broadcasts messages members sites group 
set sites currently operational called current view 
time failure recovery member sites causes change view communication system sends view change message member 
property basic systems processes sites moving view view deliver set messages view message delivered view sites deliver 
problem addressed multicast protocols phase commit atomic commit protocol transaction committed operational sites despite failure replicas 
failed site recovers knowledge inconsistent copy database 
current global recovery mechanism sending complete copy current state database network system activity suspended inefficient lead excessive system unavailability database large 
existing replica update protocols atomic multicast briefly describe replicated data update protocols atomic broadcast primitives means communication replicas ensure copy serializability 
protocols proposed summarized 
protocols reading copy writing copies replicated objects 
idea underlying protocols communication subsystem guarantees totally ordered broadcasts operations processed site order 
protocols execute read operations locally multicast write operations 
read operation executed locally obtaining read lock write operations broadcast copies database 
database copies go exact states respect read locks respect write locks 
write operations take precedence read operations 
atomic broadcast property need employ atomic commitment protocol 
atomic broadcast tools quite expensive terms message passing overhead compared point point communication 
due order guarantees multiple rounds message passing may needed multicast system 
replicated data protocols exploit total order guarantees attain advantages 
message delivery guaranteed need wait acknowledgments operation requests required point point communication schemes 
state operation executed identical sites response operations 
phase commit protocol ensure atomic commitment needed sites uniformly decisions 
elimination explicit acknowledgments phase commit application level reduce communication cost 
similar operations performed multicast system lower level lower level operations efficient 
main problems encountered phase locking distributed environment need distributed deadlock detection 
protocols global deadlock impossible 
multicast protocols cause unnecessary transaction aborts 
drawback weighed advantage having worry deadlocks 
study indicated unnecessary aborts serious disadvantage 
broadcast writes protocol read operation executed locally obtaining read lock write operation broadcast copies database 
lock manager site delivers write request checks lock granted 
granting successful operation executed 
lock granted requested data page locked readers writer 
write operation takes precedence readers local transactions 
ensures deadlock cycle involving read operations 
write operations performed globally cycle involving write operations detected site system resolved consistently 
terminates broadcasting commit request site commit abort decision request delivered 
delayed broadcast delayed broadcast protocol localizes transaction execution deferring update operations commit time single message updates sent sites 
transaction executes read operation locally write operation deferred complete 
done reads calculations broadcasts deferred writes sites 
receiving write message lock manager site includes home site obtains write locks described writes executed writes executed home site broadcasts commit operation sites 
terminates delivery execution commit request site 
deadlocks possible protocol 
write locks transaction requested single atomic step local lock manager preventing cycle write requests 
conflicts read locks dealt aborting transaction read lock 
need check deadlocks 
single broadcast protocol write operations known sites eventually executed extra broadcast commit operation avoided 
single broadcast single broadcast protocol maintains version number page database 
transaction executes read operation locally write operation deferred ready commit delayed broadcast 
site initiated ready commit read transaction decision commit done locally message broadcast delayed broadcast 
update transaction site broadcasts identity set pages read version numbers set pages written new values 
receiving set reads writes lock manager site checks version items read obsolete versions pages greater versions read 
aborted 
proceeds attempt atomically write locks 
write lock granted due conflict read operation reading transaction aborted receives lock 
write locks obtained executes write operations increments version numbers data item 
terminates soon obtains write locks successfully executes write operations 
failure recovery simplest protocol recovery standpoint single broadcast global recovery method single broadcast 
recovery algorithm delayed broadcast broadcast writes protocols methods developed single broadcast add 
single broadcast recovery multicast message delivered database corresponding transaction executed committed aborted 
termination request implicit message message delivered database application subsequent failure site affect disposition transaction 
examine happens site fails 
multicast subsystem detect failure membership protocol create new view excluding failed site 
operational sites receive view change message say transaction commit request message delivered view delivered sites part transaction committed aborted sites site failed excluded call recovers locally effects transaction database 
re joins group view installed 
effects transactions committed database effects transactions committed database 
recover doing complete database transfer operational site probably time consuming line short time rate updates low complete data transfer needed 
attempt avoid doing complete database transfer possible processing update transactions sites delayed global recovery 
group communication systems virtual synchrony provide recovery mechanism failed recovered members 
mechanisms log delivered messages member recovers missed messages replayed recovering site 
mechanism global recovery database sites single broadcast protocol 
group communication system provide global recovery designate sites update message loggers 
logger database site log messages intelligently 
example messages having transactions ultimately aborted need logged 
logger database site logs view changes transaction commit records 
message change log ordered list records different recovery log maintained dbms site local recovery 
broadcast message delivered indicates view change logger entry change log indicating membership changes 
broadcast message delivered indicating update transaction added change log 
transaction read stale data entry removed transaction aborted 
transaction executed committed 
change log follows multicast communication system detects membership change site added view update transaction messages delivered site new site exchanged messages logger sites logger signaled global recovery complete 
logger sees view change message followed request new site brought date 
logger looks view member tell logger logger merely verifies 
absent group long logger longer record view completely new site complete database downloaded transactions committed view member say view sent order committed 
easily done sending part log recorded recording view view changes change delete site view processing continue interruption 
committed transactions previous view remain committed sites view transactions commit new view remembered logger 
view change add add delete processing new updates delayed new sites brought date 
site started transaction performed reads broadcast writes delivers view change message continue processing broadcast writes implied commit request 
request delivered view new sites joined group updated 
transaction need aborted failure participants 
summarize recovery failed site local recovery including replay recovery log undo partial effects uncommitted transactions stable copy database redo committed transactions stable database 
broadcast message requesting response principal logger global recovery 
receive process recovery information logger site 
acknowledge logger recovery complete 
global recovery consists views recovering site create checkpoint completion view inform logger 
way fails completing global recovery time attempts global recovery number views processed smaller 
successfully completes global recovery acknowledges logger 
logger broadcasts message sites telling normal operations 
delayed broadcast recovery single broadcast protocol requires versioning data items write commit message checked reads stale values cause transaction aborted 
delayed broadcast protocol requirement similar replication protocol kemme alonso 
implementation postgresql similar protocol broadcasts transaction 
protocols earlier papers recover failed site doing complete database transfer 
principles recovery delayed broadcast protocol applied similar protocols 
record type information view change fs sm write request view change fs sm commit request write commit various transactions write request view change fs smg table multicast system records produced example delayed broadcast protocol transaction going new view installed provides additional complication 
transaction may broadcast writes broadcast commit request view change occurs fact may aborted home site 
transaction originated going broadcast delivered write operations requested commit site fails consider aborted recovers 
correct sites abort going transactions sites deleted new view 
going transactions correct site 
going transactions non failed sites aborted multicast system recovery mechanism 
example going transaction non failed site aborted 
result transactions example multicast system create message log replayed recovery looks table 
problem site recovers records log view sent get commit request write operations commit 
write operations lost undone local recovery part incomplete transaction 
abort going transactions view change delivered member recovery mechanism multicast system 
recovers re admitted group view change brought date getting transactions committed view broadcasts transaction done view 
example view installed site begins transaction site broadcasts writes delivered view installed deleted view site completes transaction broadcasting commit request transactions committed site begins transaction site broadcasts writes delivered view installed rejoins group logger recovery mechanism brings date sending messages view site completes transaction broadcasting commit request example necessary abort going transactions correct sites just participants fails home site correct database sites loggers additions logging protocol 
ways handle problem example 
puts greater processing burden loggers view change 
loggers additional processing view change offer record type information view change fs sm write request view change fs sm commit request write commit various transactions write request view change fs smg table log records produced example log update second method shifts burden home sites going transactions 
log update method method call log update loggers examine message logs database state view change see going transactions non failed sites 
logger mark transactions termination message commit abort delivered message resulted successful commit logger find record containing writes transaction copy view change record 
sequence messages example produces partial log shown table 
view installed logger notes progress 
transaction aborted earlier writes record deleted abort request logged 
commit request received case record number logger finds record writes records information view change record 
information view change record indicates previous writes transaction terminates view 
rejoins view record number logger begins replay log locating appropriate view start record 
information concerning previous writes sent followed 
record may previous writes fields corresponding transactions terminated view replayed order originally received determined record numbers 
possible earlier writes transaction commits view longer log sites active part log garbage collected 
normal case transaction multicasts write operations usually ready commit 
happen logger determines database items values written transaction logger create previous writes field view change record 
drawback method loggers keep logs previous views site missing group case write messages transactions terminated view 
method correct message stream replayed recovering site original order recreating conditions sites failed 
commit order committed transactions 
effects aborted transactions undone non failed sites aborted affect database state fact included loggers log effect 
effect broadcast transaction aborted abort local transactions holding conflicting read locks 
recovering site initiating transactions locally effect 
alternatively logger included writes located earlier log commit request style single broadcast message 
produce result log method require additional processing lock recovery manager explained section 
augmented broadcast ab method second method call augmented broadcast ab shifts additional processing home sites going transactions requires change recovery lock management algorithm 
site going type record site originating site transaction type integer writes commit ab setof augmented broadcast messages record type information view change fs sm write request view change fs sm ab commit request write commit various transactions write request view change fs smg table log records produced example ab method transaction new view installed modifies protocol committing transactions write requests included commit request transactions broadcast writes earlier view 
sites operational view change ignore writes process commit request 
sites loggers log augmented message 
augmented broadcast calls modification message protocol transactions progress view change occurs adding write information final commit request message 
table shows log records produced ab method example 
example transactions write data item illustrates lock management changes recovery 
transaction aborted home site delivered write requests conflicting transaction write request delivered 
delivered cause abort conflicting read lock holder 
logger include writes messages view broadcast commit request case local write locks successfully obtained held commit 
receives writes commit augmented broadcast message part recovery possible obtain write locks perform operations 
write data item sites fail see operations affecting event required action writes delivered locks writes writes delivered waits write lock commit delivered commits lock granted commit delivered commits releases lock situation different site lost updates failed 
recovers point completes local recovery see sequence logger global recovery 
event required action writes delivered locks writes ab delivered undo write give lock locks writes commits 
return lock commit delivered commits releases lock global recovery lock manager able undo writes committed transac example view installed site begins transaction performs read site broadcasts writes site begins transaction performs read site broadcasts writes sites including deliver writes view installed deleted view sites including deliver writes site sk broadcasts writes delivered sites site completes transaction broadcasting commit request augmented writes site completes transaction broadcasting abort request site sk completes transaction broadcasting commit request augmented view installed rejoins group logger brings date sending messages log view example tion necessary free locks perform actions specified augmented broadcast redo effects transaction 
broadcast writes recovery broadcast writes protocol simple extension popular phase locking protocols currently centralized databases 
potential supporting general transaction types distributed database 
delayed broadcast protocol recovery consider going transactions view change occurred 
actual number going transactions may small insignificant transaction normally delays broadcast writes ready commit 
broadcast writes protocol number going transactions large protocol calls write operation multicast soon requested transaction delaying 
shown advantage broadcast writes protocol replica update protocol multicast greatest transactions long respect cost broadcast 
reasonable assume view change occurs going transactions better abort going transactions view change 
database sites loggers relying recovery mechanism provided multicast system significant benefit 
augmented broadcast global recovery method delayed broadcast protocol broadcast writes 
augmented broadcast final broadcast transaction commit request affected need augment set write items values 
method works delayed broadcast 
log update method broadcast writes logger careful remove messages log transaction aborted reason 
case delayed broadcast transactions aborted time termination request removed log 
broadcast writes protocol transactions aborted sites deadlocks 
write requests transactions cause deadlock operational sites abort transactions transaction aborted site 
writes aborted transaction included update portion view change record 
write transaction aborted logged replayed recovering site example care taken 
example transactions view site fails new view installed 
transaction performs write operation causes deadlock detected sites deterministic detection resolution algorithm 
sites abort exchanging messages 
transaction gets committed 
recovers joins group view part global recovery site instructed perform write data item transaction know aborted 
avoid confusion messages transaction aborted reason removed log just explicit abort message commit request refused 
record example deleted 
example log update view installed site broadcasts delivers write site broadcasts delivers write site broadcasts delivers write writes commits view changes view installed deleted view site broadcasts delivers write site operational sites abort site broadcasts delivers commit view installed rejoins group logger brings date sending messages log view follows record view fs write record write record commit example broadcast writes discussion issues global recovery remain explored 
issue logger management 
reasons fault tolerance logger site 
simplicity assume fixed number logger sites determined advance probability failures 
sites may fixed may change time 
designate loggers primary logger recovering site directed 
new site wants join recovery process logger site takes role primary 
case new newly recovered site know logger communicate complete global update 
problem reduced problem distributed election solutions literature 
issue dealt big log log garbage collected 
sites new distributed system require complete database transfer 
system started site failed need log single broadcast protocol augmented broadcast method 
view change message sent site dropped group logger logging 
logger store view change record number missing sites view 
site recovers requests logged records successfully completes global recovery count missing sites decremented views recovery 
count goes zero logger knows records longer needed deleted 
problem site fails recover 
long logger record messages hopes site recover ask 
efficient solutions global recovery replicated database systems replica update protocols rely atomic multicast communication systems 
recovery methods alleviate problem lengthy system unavailability unnecessary disruption caused server site failures 
agrawal alonso el abbadi 
exploiting atomic broadcast replicated databases 
proceedings international conference euro par pages 
amir moser melliar smith agarwal 
totem single ring ordering membership protocol 
acm transactions computer systems november 
bartoli 
group multicast distributed mobile systems unreliable wireless network 
proceedings th ieee symposium reliable distributed systems srds pages october 
bernstein newcomer 
principles transaction processing 
morgan kaufmann 
hadzilacos toueg 
fault tolerant broadcast related problems 
mullender editor distributed systems chapter pages 
addison wesley 
agrawal el abbadi 
performance database replication group multicast 
proceedings ieee th international symposium fault tolerant computing ftcs pages june 
agrawal el abbadi 
multicast communication reduce deadlock replicated databases 
proceedings th ieee international symposium reliable distributed systems srds pages october 
frans kaashoek tanenbaum 
group communication amoeba distributed operating systems 
proceedings th intl conference distributed computing systems pages may 
kemme alonso 
suite database replication protocols group communication 
proceedings th international conference distributed computing systems icdcs pages may 
kemme alonso 
transactions messages events merging group communication database systems 
proceedings third european research seminar advances distributed systems april 
kemme alonso 
don lazy consistent postgres new way implement database replication 
proceedings th international conference large databases vldb september 
moser amir melliar smith agarwal 
extended virtual synchrony 
proceedings th international conference distributed computing systems pages 
paul lin bhattacharyya 
reliable multicast transport protocol rmtp 
ieee journal selected areas communications april 
sussman keidar marzullo 
optimistic virtual synchrony 
proceedings th ieee symposium reliable distributed systems srds pages october 
pedone schiper kemme alonso 
database replication techniques parameter classification 
proceedings th ieee international symposium reliable distributed systems srds pages october 
pedone schiper kemme alonso 
understanding replication databases distributed systems 
proceedings th international conference distributed computing systems icdcs pages taipei taiwan april 
ieee computer society technical distributed processing 

