model checker spin detect feature interactions telecommunications services calder miller department computing science university glasgow glasgow scotland 
model checker spin applied analysis feature interactions design telecommunications services 
application area challenging model checking formulating right temporal properties distributed system dicult state spaces quickly intractable 
demonstrate express properties ltl give minimal abstraction techniques greatly reduce cost model checking 
show analysis performed automatically scripts 
key words promela spin communicating processes distributed systems model checking feature interaction telecommunications services 
software development feature component additional functionality additional main body code 
typically features added incrementally various stages life cycle usually di erent developers 
consequence adding features way feature interaction feature ects modi es behaviour feature 
cases feature interaction quite acceptable desirable cases interactions lead unpredictable undesirable results 
problem known telecommunications services domain example see mu calder email address dcs gla ac uk calder miller 
preprint submitted elsevier science june exhibits known domains email electronic point sales 
expect interactions issue generation systems example grid technologies 
important range techniques dealing 
techniques deal feature interactions characterised design time run time interaction detection resolution 
concentrate detection interactions design time resolution redesign 
proliferation features telecommunications services automated detection techniques essential 
investigate feasibility speci cation modelling approach model checking techniques feature interaction detection pots plain old telephony services 
known pots domain believe ideal domain test feasibility approach 
choose model checker spin suitability associated high level description language promela specifying software systems 
preliminary results system involving features reported 
model checking involves constructing nite model system checking desired property holds model exploring state space model 
theorem proving hand involves deriving theorems set axioms 
ideally suited domain telecommunications services inherently concurrent model essentially labelled transition system generated automatically high level description service 
consequently high level promela descriptions modi ed little cost seldom case theorem proving approach theorems underlying theory changes 
approach involves considering service features di erent levels abstraction communicating nite state automata temporal logic formulae represented promela speci cations labelled transition systems uchi automata 
contributions ways including low level call service model promela permits truly independent call control processes asynchronous communication asymmetric call control facility adding features structured way state space reduction techniques promela result tractable overcoming classic state explosion problems technique implementing relativised temporal operator depends constituent processes linear temporal logic spin interaction analysis basic call service features involving users full functionality 
types analysis static dynamic completely automated making extensive perl scripts generate model checking runs 
additionally results may serve provide useful guidance modelchecking application domains 
organised follows 
approach interaction detection role spin section 
give short overview telecommunications services language promela detail spin search veri cation algorithms 
sections give overview nite state automata temporal properties basic service 
section give promela implementation basic call service optimisations reduce state space section validate basic service 
sections give similar descriptions implementation features 
static dynamic interaction analysis respectively introduced sections 
section automate dynamic analysis model generation give results 
section discuss role static dynamic analysis 
directions section 
results contained 
include greater implementation detail provide background material relating spin 
addition analysis concerns features considered 
related model checking feature interaction analysis investigated example smv caesar cospan spin 
promela model extracted mechanically call processing software code details model dicult compare results 
authors restricted subscribers service full functionality plus users half functionality due state space explosion problems 
similar reasons call control independent 
regard benchmark aim demonstrate similar set properties context 
features basic service described level abstraction temporal descriptions 
state space explosion avoided interactions arising implementation detail race conditions detected 
layered approach permits detection interactions arising implementation detail building earlier rst author process algebra employed 
su ered limitations state space implement bc communicating finite state automata basic call validate idle 

denote develop properties promela optimise fig 

approach basic service imposed state explosion lack explicit asynchronous communication limitations motivated current investigation promela spin 
approach approach phases rst phase consider basic call service depicted 
aim rst phase develop right level abstraction basic service ensure ective reasoning techniques proceeding add features 
starting point top left hand side gure automata properties 
need complete speci cations virtue approach example allows avoid frame problem 
promela description middle regarded implementation crucial step validation implementation 
done checking satisfaction properties spin 
initial attempts fail due state space explosion examination underlying state state space implement bc communicating finite state automata validate dynamic analysis idle 

inline 
optimise denote develop properties promela basic call features static analysis fig 

approach basic service features space far right leads discover simple ective optimisations 
second phase add features depicted 
starting point nite state automata properties 
promela implementation augmented new feature behaviour primarily line functions see section promela validated time feature properties 
leads ultimate goal interaction analysis takes forms static analysis involving syntactic inspection promela code dynamic analysis involving reasoning combinations sets logical formulae con gurations feature subscribers spin 
forms analysis indicated 
results analysis interaction detection clear indication possible resolution 
relationship types analysis discussed section 
background telecommunications services control progress calls provided service exchange stored program control exchange 
service responds events handset hook sending control signals devices lines ringing tone line engaged 
service collection functionality usually self sustaining 
feature additional functionality example call forwarding capability ring back free user said subscribe feature 
features added basic service may interactions behavioural modi cations features ered service features ered service 
example user subscribes call waiting cw call forward busy cfb engaged call happen incoming call 
full details features mentioned section 
call forwarded cw feature clearly compromised vice versa 
case subscriber expectations met 
example single user single component interaction con icting features subscribed single user 
subtle interactions occur user subscriber involved referred multiple user multiple component interactions 
example consider scenario user subscribes originating call screening ocs user screening list user subscribes cfb user calls call forwarded prescribed feature cfb feature ocs compromised 
clearly call forwarded cfb feature compromised 
kind interactions dicult detect resolve particularly di erent features may activated di erent stages call cycle 
ideally interactions detected resolved service creation time may possible third party legacy services involved example see 
distributed systems perspectives network varying levels abstraction 
chosen examine user perspective basic call service intelligent networks model distributed functional plane 
promela spin section intended give overview promela spin 
detailed description search algorithms parameters included interest non spin expert omitted readers familiar promela spin 
promela process meta language high level state language modelling communicating concurrent processes 
imperative language additional constructs non determinism asynchronous synchronous communication dynamic process creation mobile connections communication channels contain communication channels 
language powerful expressive 
spin model checker promela provides reasoning mechanisms assertion checking acceptance progress states cycle detection satisfaction linear temporal logic ltl formulae 
high quality model checkers include smv murphi fdr 
choose spin primarily rich expressive power promela suitability modelling software processes 
choose smv example modelling languages extended smv synchronous verilog designed hardware mind 
languages allow model software naturally include asynchronous communication explicit concurrency primitives 
depth rst search order perform veri cation model spin converts promela speci cation labelled transition system lts 
lts de ned triple nite set states distinguished initial state nite set transitions set pairs transition lts corresponds execution speci atomic statement concurrent processes 
lts represented graph state graph nodes correspond states directed edges correspond transitions basic depth rst search check deadlock assertion violations explores state graph associated starting initial state successively progressing edges graph back tracking previously visited state reached error entire search space explored 
partial order reduction partial order reduction por see technique diminish time memory requirements model checking concurrent processes 
observation execution sequences traces concurrent program divided equivalence classes members indistinguishable respect property checked 
ensuring trace equivalence class executed reduced search por ensures redundant performed truth property preserved 
traditional exhaustive depth rst search state space concurrent system involves exploration transitions enabled state encountered search 
crux por algorithm described fact cases sucient explore subset enabled transitions state reduce total number execution paths explored 
subset called ample set exists states certain conditions satis ed 
implementation por spin see involves identi cation various categories promela statement statically marked safe conditionally safe transitions 
subset transitions enabled state ample consists entirely safe transitions successor state arising transitions encountered current execution 
statements transitions marked safe essentially assignments local variables exclusive channel read send operation 
channel said exclusive read access process annotated xr process read channel 
similarly channel said exclusive send access annotated xs 
parameters options spin veri cation important parameter needs set veri cation run maximum search depth value determines maximum distance path starting initial state depth rst search explore 
set value length greatest path initial state full search search truncated 
case search reaches depth error message maximum search depth small reported search back track reaches previously unvisited state 
means state reachable initial state path length explored 
debugging purposes truncated search suitable 
error reported successive runs performed determine smallest value error caught 
search truncated error occur near maximum search depth 
veri cation maximum search depth guided simulation provide description shortest path error 
hand debugging errors believed model full search space search performed show errors depth 
case truncated search suitable set value greater length greatest execution sequence 
especially conservation memory crucial important care taken set maximum depth small size possible avoid provision unnecessarily large current search state storage search stack 
reachable state corresponding state vector unique characterisation state consisting sequence bits memory 
depth rst search states usually stored hash table 
size hash table determined estimated state space size parameter 
set high memory required hash table great veri cation possible 
value set low hash table large accommodate reached states 
general advisable leave parameter set default value minimised automaton encoding combined compression options selected 
compression method individual state encoded ecient way 
memory required individual stored state reduced memory required hash table remains unchanged 
ma encoding com hash table value estimated state space size parameter irrelevant 
ma encoding com combined small hash table required compression individual states 
prudent set estimated state space size parameter low value 
employ omit description 
weak fairness option ensures process transition remains enabled eventually execute 
algorithm variant ag algorithm involves construction extended state space consisting copies original state space number processes 
clearly additional memory time requirements algorithm great avoided possible see section 
temporal reasoning spin enabling search state space check deadlock assertion violations spin allows checking satisfaction ltl formula execution paths 
mechanism doing claims processes describe undesirable behaviour uchi automata automata accept system execution execution forces pass accepting states nitely 
full details claims uchi automata 
give brief overview mechanisms involved description employed 
standard ltl formulae constructed set atomic propositions standard boolean operators temporal operators hi eventually strong 
propositions include process control label meaning process label label 
spin verify ltl property rst spin ltl converter alternative see section translates ltl formulae promela syntax 
translation claim encodes uchi acceptance condition 
spin veri cation claim converted uchi automaton 
uchi automaton consisting synchronous product lts corresponding concurrent system model uchi automaton corresponding claim constructed 
depth rst search explores state graph associated new uchi automaton 
original ltl formula hold depth rst search catch execution sequence true 
form safety property sequence contain acceptance state true 
case claim said complete 
alternatively form hip liveness property sequence contain cycle repeated nitely true 
case claim said contain acceptance cycle 
case claim said matched 
spin ltl converter possible check property holds executions executions 
universal quanti er implicit ltl formulas check ltl property natural choose executions option 
wish check property say holds state execution path 
possible ltl 
spin show holds executions true claim violation equivalent 
listing idle calling dial oring oring connect disconnect dial terminating originating dial disconnect busy dial engaged dial dial dialling fig 

basic call states events properties section shorthand meaning path mean hip executions true 
concludes background material ready rst phase approach description basic call service 
basic call service gives diagrammatic representation automaton basic call service 
states left idle state represent terminating behaviour states right represent originating behaviour 
events observable service subscribers label transitions user initiated events terminal device handset handset plain font events engaged italics 
note ring events oring originating terminating ring tone respectively 
re ects fact ringing tone generated terminal device 
transitions labelled 
example unlabelled transition originating state calling dial simply observable event associated transition 
automata communicate behaviour call process originating party ects behaviour call process terminating party 
adopt formal notation describe communication mechanism extended nite state automata describe informally follows 
communication channel associated call process automata 
channel capacity message pair consisting channel name party call status bit status contents channel interpretation free engaged connected attempting connection channel contains empty engaged connected connected terminating party fig 

states communications channel protocol connection 
confusing refer communication channel associated call process channel communication channel empty associated call process connected attempting connect call process 
communication channel empty associated call process engaged call necessarily connected user 
interpretation messages described comprehensively 
communication channels coordinate call set clear 
basic protocol call set follows assuming engaged call 
goes hook message placed channel dialling message sent channel receives message message sent channel status bit message channel changed connection established 
clear close side connection going hook message removed communication channel status bit message channel 
connected state free close connection 
hand channel close connection re ecting real life situation 
goes hook connected connection status remains unchanged basic call service properties section give set temporal properties basic call service 
doing explain form propositions addition new temporal operator 
propositions propositions spin version ltl may refer values global variables process counters 
examples example user idle meaning incarnation process user process identi er label idle 
process identi ers simply global variables initialised process instantiated captured assignment promela run command 
propositions assume variables include arrays connect recording presence connection users dialled recording number dialled leaving idle state event network event user initiated network initiated events respectively 
chan name process identi er channel name associated user process respectively 
relativised operator model checking temporal operator ltl caution due problems stuttering equivalence properties involving guaranteed closed stuttering see example 
consequently valuable state reduction strategy partial order reduction see section applicable presence great fact rare property holds global state distributed system 
operator little distributed system required relativised refer state relative particular constituent process 
operator allow formalise properties process reads channel action increment variable 
note global state process updates di erent variable 
propose spin relativised operators implemented judicious built global variable ltl operator 
variable holds value internal process number process transition 
formulae involve operator shown stutter closed partial order reduction veri cation properties general variable precludes partial order reduction 
introduce operator shorthand meaning global state process local transition rst global state move 
general refer different states occurring time 
property form true time process transition true expressed ltl follows 
jj de ned expressed simply 
basic call service temporal properties described sections respectively shorthand notation path respect process 
order allow compact representation properties introduce operators weak precedes de ned follows fwg fug fpg fug ltl alongside property 
involves referring variables 
dialled connect contained promela code extract section 
symbols denote predicates example dialled 
provides representation ltl converter requires properties way 
property connection users possible 
connect property dial receive engaged tone returning idle state 

wq dialled chan name network event engaged user idle 
property busy tone ringing tone directly time process active follow calling 
event call network event engaged network event oring 
property dialled number number connection attempt 
dialled partner chan name 
property dial busy number busy line clears call attempted hear engaged tone returning idle state 

jj wq dialled event dial full chan name event call len chan name user idle network event engaged note operator len de ne preference function empty 
spin disallows negation functions arises claim 
property call having just time process active dialled number 
user calling event dial 
note property hold sequences connection may possible example line service constantly engaged originator goes hook connection 
great care taken ensure temporal formula expresses precisely property form enable reason ecient way 
example tempting express property dialled chan name network event engaged see 
formula problematic ways 
hand satis ed situation caller dialled number failed hear engaged tone result heard engaged tone ultimately albeit di erent call 
result longer search time nd error 
hand formula cause error reported caller dialled number simply failed progress nitely 
avoid unwanted scenario weak fairness option required see section causing huge increase search depth time 
operator situation crucial 
basic call service promela call process see gure described promela instantiation parameterised proctype user declared proctype user byte selfid chan self promela state formalism event 
represent events ect variables states calling dialling labels 
transition implemented compound statements group atomic statement concluding goto 
example promela code associated idle dialing calling states outgoing transitions 
global local variables parameters include self explanatory selfid partnerid communication channels self partner variables dev dialled event network event 
addition messchan messbit local variables reading messages channel null allows default value partner variable call process engaged call 
value strictly necessary modelling purposes valuable reasoning 
variable may intend reason updated atomic statement variables may course updated required 
addition steps deterministic sequences code executed ecient atomic steps suitable allow process jump label scope 
note numerous line assertions code particularly points entering new call state reading writing communication channels 
idle atomic assert dev assert partner selfid null attempt call receive empty self event selfid dev selfid self self goto dialing connection attempted go originating party full self self incoming call full partner selfid partner selfid messchan self call attempt messchan null messbit goto self messchan messbit call attempt cancelled partner selfid null partnerid messchan null messbit goto idle fi empty partner selfid self messchan messbit call attempt cancelled partner selfid null partnerid messchan null messbit goto idle fi fi dialing atomic assert dev assert full self assert partner selfid null dial go event selfid dial dial nondeterministic choice called party partner selfid zero dialled selfid partnerid partner selfid dialled selfid partnerid partner selfid dialled selfid partnerid partner selfid dialled selfid partnerid partnerid fi event selfid dev selfid self messchan messbit assert messchan self messchan null messbit goto idle go dialling fi calling check number called process atomic event selfid call assert dev assert full self partnerid goto unobtainable partner selfid self goto busy invalid partner partner selfid self partnerid empty partner selfid partner selfid self self messchan messbit self partner selfid goto valid partner write token partner channel full partner selfid goto busy valid partner engaged fi fi atomic assert full self assert full partner selfid connection established connect selfid partnerid goto number call processes run concurrently 
example assuming global communication channels zero network call processes atomic run user zero run user run user run user options state space reduction initial attempts validate properties network call processes fail state space explosion 
section examine causes state space explosion applicability standard solutions involving con guring spin promela code transformed optimise state space 
fully optimised code including features appendix 
spin options obvious standard optimisation apply por see section limited ect model 
closer examination shows hardly surprising 
statements statically de ned safe spin assignments local variables exclusive channel read send operations 
rare embedded atomic statements safe component statements safe 
appear channel instances declared xs 
declare dedicated channels pairs processes annotate appropriately left problem non destructive read test length channel violates xr property 
test crucial behaviour depends exact contents channel 
small gains minimal 
statements embedded unsafe atomic statements clearly retrograde step reduce atomicity 
states compressed minimised automaton encoding ma compression com see section 
necessary de ne maximum size state vector course implies searched entire space 
nd reasonable value choosing uncompressed value reported preliminary veri cation deliberate assertion violation 
ma com give signi cant memory reduction trade terms time simply unacceptable example hours depth reached order state space reductions simple ective way reduce state space ensure visit call state visit underlying promela state 
means variables possible initialised reset initial value promela loops 
example virtually call state possible return idle 
reduction variables messchan messbit initialised rst visit label call state subsequent visits 
global states previously distinguished due di erent values variables di erent visits idle call state identi ed 
largest reduction variables routinely reset progressing call state 
unfortunately possible result variable wish reason updated atomic statement discussed 
solution add state variables 
example added new state variables network event event progression idle 
occurrence goto idle goto 
note default data ow optimisation option available spin attempts variables automatically option increases size state space model 
due initial values variables non zero type mtype example 
spin data ow optimisation resets variables zero 
switch option variables manually 
merely commenting update event variables variable needed veri cation see example property size state space increased unnecessarily large amount 
example prove property holds user interested value event event need updated 
inline function event action introduced enable update speci variables 
allows update value event value leave event variables set default value 
example event action inline inline event action selfid event selfid selfid skip fi inline de nition merely commented event variables needed veri cation 
inline function included handle network event variables way 
note reduction implemented spin spin issue warning variable situations reduction bene cial 
transformations lead dramatic reduction underlying state space search depth required reduced percent initial value involve abstraction away original model 
contrary said reduce level abstraction 
abstraction methods see example techniques simple merely involve making simple checks unnecessary states unintentionally introduced 
believe kinds state space explosions uncommon 
spin users aware may introducing spurious states coding problem promela 
note structure claims uchi automata ect eciency consistency results 
conversion tool shortly implemented spin 
uchi automata case tend smaller contain fewer states led faster detection bad paths properties 
basic call service validation possible verify properties fairly quickly gbyte memory limit 
state compression 
property executions option selected properties executions option selected 
veri cation property path containing expected claim violation search depth case 
properties search entire search space showed errors 
partial order reduction applied search completed maximum search depth stored states case 
search completed minutes 
failure apply partial order reduction resulted increase maximum search depth reached corresponding increase number stored states 
veri cation property took longer minutes required greater search depth reached states explored 
partially due fact event network event variables process consideration included property 
addition operator precludes partial order reduction helped reduce complexity case 
features state space tractable commence second phase adding number features basic service 
features set features added include cfu call forward unconditional calls subscriber phone diverted phone 
cfb call forward busy calls subscriber phone diverted phone subscriber busy 
ocs originating call screening calls subscriber numbers prede ned list inhibited 
assume list user contain ods originating dial screening 
dialling numbers prede ned list subscriber inhibited 
assume list user contain tcs terminating call screening calls subscriber number prede ned list inhibited 
assume list user contain rbwf ring back free subscriber option call recorded caller phone 
oco originating calls subscriber able originating party call 
oring dial busy idle dial dial disconnect disconnect terminating originating dialing calling connect oring dial callback engaged dial fig 

finite state automaton rbwf tco terminating calls subscriber able terminating party call 
note examples services er features oco tco pay phone teen line respectively 
give automata features give example 
illustrates change user perceived behaviour user subscribes ring back free feature 
temporal properties features properties features dicult express basic service 
order accurately re ect behaviour feature great attention paid scope property corresponding ltl formula see example 
example property essential cfb feature invoked forwarding party full communication channel whilst dialling party dialling state 
expressed stating forwarding party full channel continuously states rst occur dialling party enters dialling state second dialling party emerges dialling state 
values variables depend particular pair features corresponding property analysed 
variables updated prior veri cation manually editing promela code directly automatically running script see section 
property cfu assume user forwards user rings user connection attempted user hangs 

rpq dialled partner chan name dev 
property cfb assume user forwards user rings user busy connection attempted user hangs 

rpq dialled full chan name partner chan name user dialling dev 
property ocs assume user user screening list 
connection user user possible 
connect 
property ods assume user user screening list 
user may dial user dialled property tcs assume user user screening list 
connection user user possible 
connect 
property rbwf assume user rbwf 
possible attempted call eventually result successful call dialling rpq dialled dialled connect event call 
property oco assume user oco 
connection user user possible 
connect 
property tco assume user tco 
connection user user possible 
connect 
features promela give details implementation features promela draw attention important aspects implement features included feature lookup function see implements features computes transitive closure forwarding relations features apply call state 
distinguish call dial screening means call user prohibited regardless dialled means dials call proceed connected means 
case desirable screening motivated billing 
example user dials local leg forwards calls trunk leg pay local leg 
currently restrict size lists screened callers relating ocs ods tcs features 
assume impossible single user subscribe screening feature 
sucient demonstrate feature interactions limits size state space 
addition rbwf straightforward increases complexity underlying state space greatly 
involves recording structure indexed call processes connection attempt 
issue just new global variable call states previously identi ed distinguished contents record discussion variable 
ensure variables initialised default value 
particularly useful user subscribe particular feature 
value denote unobtainable number incorrect number denote button press rbwf 
additional value increase state space 
implementation features feature lookup inline order enable add features easily code relating feature behaviour included inline de nition 
spin inline de nition de ned level proctype declaration 
inline invocation inline call performed syntax procedure call imperative language parameters inline de nition typically names variables 
body inline expanded body user proctype point invocation 
feature lookup de ned follows inline feature lookup part chan part id st st st idle term call selfid st st blocked st st ods selfid part id st st st st rbwf selfid part id st st part id st st cfu part id part id cfu part id part chan chan name part id part id st st cfb part id len part chan part id cfb part id part chan chan name part id st st call oco part id st st st st call ocs selfid part id st st st st call tcs part id selfid st st break od parameters part chan part id st take values current partner partnerid state user call feature lookup inline 
statements feature lookup pertaining features currently active automatically commented see section 
note may regard feature lookup encapsulating centralised intelligence switch knowledge status processes data concerning feature con guration 
hand argue spirit switch hand maintain feature interactions simply detected completely distributed architecture 
bc cfu cfb ocs ods tcs property property property property property property property property property property property property rbwf oco tco property property fig 

results property validation feature validation feature validated spin veri cation appropriate set properties 
consider property associated feature basic call properties feature properties appropriate 
gure dash denotes property appropriate example property depend data relevant feature 
indicates suitable set parameters property satis ed 
ease presentation comparison bc considered feature 
static analysis static analysis analysis structure feature descriptions examination promela descriptions 
analysis interaction de ned follows 
de nition interaction overlapping guards guards evaluate true assignment variables lead diverging consequences 
words overlap consequences diverge non determinism potential interaction 
operational explanation trying detect shared triggers features 
shared trigger known concept seldom expressed way 
collected additional feature behaviour inline feature lookup need consider overlapping guards function 
example consider overlap cfu cfb part id st st dial cfu part id part id cfu part id part chan chan name part id part id st st dial cfb part id len part chan part id cfb part id part chan chan name part id overlap occurs assignment st st dial cfu part id len part chan cfb part id rst choice consequently assigns part id second assigns part id clearly divergent interaction 
interactions distinguished considering roles part id selfid indices 
index feature subscription cfu part id cfb part id interaction di erent indices 
example interaction clearly 
interactions static analysis relatively rare shared triggers lead di erent reasons action overlaps 
overlaps process superposition subtle 
example consider choices st st dial ods selfid part id st st st st dial rbwf selfid part id st st overlap valid number screening list interaction 
pairs consider clauses st dial leading pairs clauses st call leading pairs 
results static analysis tables gure 
indicates interaction indicates 
tables symmetric 
static analysis simple ective mechanism nding interactions arise new non determinism 
depends structure speci cation dynamic form analysis 
rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf oco tco oco tco fig 

feature interaction results static analysis rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf oco tco oco tco fig 

feature interaction results static analysis dynamic analysis dynamic analysis analysis logical properties satis ed pairs users subscribing combinations features 
analysis interaction de ned follows 
de nition user processes con guration scenario subscribes feature subscribes feature features interact property holds longer holds presence feature formally property 
interaction 
note constraints 
interaction resulting violation property written 
analysis pairwise known way interactions 
rst sight may limiting empirical evidence suggests little motivation generalise way interactions detectable way interaction exceedingly rare 
similar approach dynamic analysis taken example 
naive approach consider property candidate 
easy see lead features interacting 
selective approach required consider properties associated features examination features consider properties automatic model generation feature interaction originally features added basic call model global variables manually turned 
commented replaced local variables needed veri cation 
addition features led variables requiring selectively turned set di erent values 
example originating call screening feature selected orig call array included elements set appropriate values 
addition feature lookup inline amended include lines pertaining originating call screening feature 
ring back free feature chosen entire call state commented 
making necessary changes spin run extremely timeconsuming error prone 
perl script enable perform changes automatically 
speci cally enables generate combination features properties model template le 
generated model includes header containing information features properties chosen particular case easier monitor model checking runs 
dynamic feature interaction analysis combinatorially explosive consider pairs features combinations suitable instantiations free variables occurring properties 
example case gives di erent scenarios valid 
ease burden speed process perl script enable systematic selection pairs features parameters generation corresponding model automatic spin veri cation model recording feature interaction results 
note scenarios leading feature interactions recorded 
depending property concerned report error properties errors property spin veri cation indicates interaction 
interaction search interactions commences 
interaction pair features considered 
example output demonstrates complete results cfu cfb property 
features new combination features cfu cfb feature meaningless new combination features cfu cfb property parameters errors parameters errors parameters errors parameters errors new combination features cfu cfb property parameters errors feature interaction new combination features cfu cfb potential loop test new combination features cfu cfb feature meaningless new combination features cfu cfb property parameters errors feature interaction dynamic analysis feature interaction results tables gure give interactions automated model generation analysis pairs features case case 
row labelled feature means property violated indicates violation occurred 
features interact position position 
bc excluded feature interacts way 
new interactions detected dynamic analysis associated rbwf feature 
example rbwf cfu rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf oco tco oco tco fig 

feature interaction results dynamic analysis rbwf cfu cfb ocs ods tcs cfu cfb ods ocs tcs rbwf oco tco oco tco fig 

feature interaction results dynamic analysis interaction cfu feature prevents record variable pertaining subscriber set non default value 
subscriber unable perform ring back 
tables symmetric 
example ods cfu interaction cf ods interaction 
understand observe static analysis detects interaction assignment ods cfu 
dynamic analysis detects interaction violation analysis script see section generates exactly scenario ods cfu interaction user rings user 
consider computations feature lookup takes ods branch 
understand ods having precedence 
interaction case property property satis ed 
computation sequence cfu branch taken case cfu precedence property violated user dialled user call forwarded user clearly property satis ed 
understanding property violated give designer strong hints resolve interaction 
role static dynamic analysis interactions dynamic analysis depend properties features modelled 
properties adequate expect statically detected interaction detected dynamically vice versa 
borne analysis 
may regard static analysis step inexpensive method uncovering interactions providing indication set behavioural properties 
note properties complete descriptions particular state happen frame problem 
example expect cf tcs interaction case tcs block forwarded call partner variable set appropriately satisfying property 
strengthen property cfu insist connection just setting partner appropriately 
simple forwarded party may engaged forwarded feature kind feature possibilities endless 
consider cfu property quite adequate 
order illustrate contributions analyses better consider examples interaction detected 
ods cfu static analysis detects interaction ods cfu 
dynamic analysis detects interaction 
trace feature lookup takes ods branch interaction cfu property violated get stage user attempting ring user 
understand ods having precedence 
trace cfu branch taken case cfu precedence ods property violated user dialled user call forwarded user 
ocs cfu static dynamic analysis detects interaction 
static case obvious ocs case refers call state cfu case refers dial state 
disjoint states overlap 
expect detect interaction dynamically thinking scenario described ocs cfu user rings user 
property violated 
violation clue comes static analysis cfu triggered properly whilst dial state call state ocs stops call progressing 
property cfu ful lled attempt appropriate call call blocked 
properties satis ed interaction 
example highlights fact properties complete descriptions insist connection cfu 
illustrates complete descriptions level appropriate 
important note particular speci cation detail feature ect interaction results associated feature 
example chosen implement oco feature dialing state calling state far interactions exhibited 
example static interaction ods oco dynamic interaction cfa oco 
comparison feature interaction results unfortunately dicult compare interaction analysis results researchers model apparently features actual speci cation detail profoundly ect result seen 
compared results contest run conjunction fiw feature interaction workshop 
results broadly speaking similar note interpretation rbwf di erent contest 
directions approach feature interaction detection involves modelling service di erent levels abstraction communicating nite state automata temporal logic formulae represented promela speci cations labelled transition systems uchi automata 
considered modelling analysing basic call service features involving users full functionality 
types analysis static dynamic model checking spin completely automated making extensive perl scripts generate spin runs 
application area challenging model checking reasons formulating right temporal properties distributed systems dicult state spaces realistic model quickly intractable 
demonstrated relativised properties important distributed systems implemented ltl spin promela model optimised losing operational detail 
outlined simple ective state space reduction technique promela away system modelled 
contrary may understood reducing gap promela representation system investigation 
technique involves variables results reduction cent statespace 
overcome classic state explosion problems interaction analysis results considerably extensive 
believe reduction technique perl scripts useful spin community general 
analysis technique property violation reasoning model checking provides counter example gain understanding interaction occurs 
service model lowlevel quickly see operational aspects 
local global variables causing interaction help redesign process 
example static analysis indicates shared triggers dynamic analysis indicates precedences features results analysis symmetric 
indicate alter precedences features order resolve interactions 
observe proved results user processes able generalise results number user processes 
currently investigation 
authors gerard holzmann help advice revelation project glasgow providing computing resources 
supported daphne jackson fellowship funded uk engineering physical sciences research council microsoft research 
dragon 
partial order reduction presence rendez vous communication weak fairness 
pages 
bouma velthuijsen editors 
feature interactions telecommunications systems 
ios press amsterdam may 
calder magill editors 
feature interactions telecommunications software systems volume vi 
ios press amsterdam 
calder magill 
hybrid approach software interworking problems managing interactions legacy evolving telecommunications software 
iee proceedings software june 
calder miller 
spin feature interaction analysis case study 
pages 
mu calder alice miller 
analysing basic call protocol promela 
pages 
cameron gri eth 
lin 
feature interaction benchmark 
pages may 
choueka 
theories automata tapes simpli ed approach 
journal computer system sciences 
clarke long 
model checking abstraction 
acm transactions programming languages systems september 
courcoubetis editor 
proceedings fifth international conference computer aided veri cation cav volume lecture notes computer science greece june july 
springer verlag 
dams gerth editors 
theoretical practical aspects spin model checking proceedings th th international spin workshops volume lecture notes computer science 
springerverlag 
dill drexler hu yang 
protocol veri cation hardware design aid 
ieee international conference computer design vlsi computers processors pages 
dini logrippo editors 
feature interactions telecommunication networks iv 
ios press amsterdam june 
matthew dwyer george avrunin james corbett 
property speci cation patterns nite state veri cation 
proceedings second international workshop formal methods software practice pages 
acm press march 
dwyer editor 
proceedings th international spin workshop spin volume lecture notes computer science toronto canada may 
springer verlag 

stutter invariant languages automata temporal logic 
pages 
felty 
feature speci cation automatic con ict detection 
pages may 
gerth peled vardi wolper 
simple automatic veri cation linear temporal logic 
proceedings th international conference protocol speci cation testing veri cation pages 
chapman hall warsaw poland 
godefroid 
partial order methods veri cation concurrent systems volume lecture notes computer science 
springer verlag 
susanne graf claire 
tool symbolic program veri 
pages 
grid forum 
www sdsc edu papers intr gf pdf 
nicolas halbwachs doron peled editors 
proceedings eleventh international conference computer aided veri cation cav volume lecture notes computer science trento italy july 
springerverlag 
heitmeyer james jr kirby bruce labaw archer ramesh bharadwaj 
abstraction model checking detect safety violations requirements speci cations 
ieee transactions software engineering november 
editors 
proceedings seventh international conference formal description techniques forte volume international federation information processing berne switzerland october 
kluwer academic publishers 
gerard holzmann elie ahmed editors 
proceedings th workshop automata theoretic veri cation spin model checker spin paris france november 
gerard holzmann 
design validation protocols tutorial 
computer networks isdn systems 
gerard holzmann 
model checker spin 
ieee transactions software engineering may 
gerard holzmann doron peled 
improvement formal veri cation 
pages 
holzmann margaret smith 
practical method veri cation event driven software 
proceedings international conference software engineering icse pages los angeles ca usa may 
acm press 
distributed functional plane architecture itu edition march 
bouma editors 
feature interactions telecommunications software systems ios press amsterdam september 
magill rei results second feature interaction contest 
pages may 
manna pnueli 
tools rules practicing veri er 
technical report stan cs stanford university june 
mcmillan 
symbolic model checking 
kluwer academic publishers 
peled 
combining partial order reductions model checking 
formal methods system design 
doron peled 
partial order reduction linear branching temporal logics process algebras 
pages 
doron peled thomas wilke pierre wolper 
algorithmic approach checking closure properties temporal logic speci cations regular languages 
theoretical computer science 
doron peled vaughan pratt gerard holzmann editors 
proceedings dimacs workshop partial order methods veri cation volume dimacs series discrete mathematics theoretical computer science 
american mathematical society 
ryan 
plug play features 
pages 
roscoe 
model checking csp 
roscoe editor classical mind essays honour hoare chapter pages 
prentice hall international 
thomas 
modelling analysing user views telecommunications services 
pages 
appendix basic service features give optimised code basic service plus features 
code pertaining feature behaviour commented 
mtype dial call oring engaged connected disconnect callback st idle st blocked st st st st call chan null chan bit chan zero chan bit chan chan bit chan chan bit chan chan bit chan chan name convert number channel name byte call forward ith member arrays switched byte call forward busy default value user byte orig call screen feature byte orig dial screen identity user byte term call screen user forwards cant call cant called byte ring back free set byte orig call set byte term call set byte record mtype dev byte dialled mtype network event mtype event chan partner typedef array byte array connect bytes total short simple basic call protocol rings goes put channel dials free puts channel channel goes put channel connected disconnect removes token channel removes token channel inline feature lookup id st st st idle term call selfid st st blocked st st orig dial screen selfid id st st st st ring back free selfid id st st id st st call forward id id call forward id chan name id id st st call forward busy id len id call forward busy id chan name id st st call orig call screen selfid id st st st st call term call screen id selfid st st st st call orig call id st st break od inline event action selfid event selfid selfid skip fi inline network ev action selfid network event selfid selfid skip fi proctype user byte selfid chan self start user chan messchan null bit messbit mtype state mtype dev byte partnerid idle atomic assert dev assert partner selfid null attempt call receive empty self state st idle feature lookup partner selfid partnerid state state st blocked state goto idle state fi event action dev self self goto dialing connection attempted go originating party full self self incoming call full partner selfid partner selfid messchan self call attempt messchan null messbit goto self messchan messbit call attempt cancelled partner selfid null partnerid messchan null messbit goto fi empty partner selfid self messchan messbit call attempt cancelled partner selfid null partnerid messchan null messbit goto fi fi dialing atomic assert dev assert full self assert partner selfid null dialing go event action dial dial nondeterministic choice called party partner selfid zero dialled selfid partnerid partner selfid dialled selfid partnerid partner selfid dialled selfid partnerid partner selfid dialled selfid partnerid partnerid fi state st feature lookup partner selfid partnerid state state st state partner selfid null partnerid dialled selfid goto unobtainable state st state goto state st partnerid state goto calling state st partnerid state partner selfid null partnerid dialled selfid goto unobtainable fi event action dev self messchan messbit assert messchan self messchan null messbit goto go dialling fi calling check number called process atomic event action call assert dev assert full self record partnerid selfid state st call feature lookup partner selfid partnerid state state st state partner selfid null partnerid dialled selfid goto unobtainable state st call state skip fi partner selfid self goto busy invalid partner partner selfid self empty partner selfid partner selfid self self messchan messbit self partner selfid messchan null messbit goto valid partner write token partner channel full partner selfid goto busy valid partner engaged fi fi busy number called engaged go trivial dial atomic assert full self network ev action engaged event action dev self messchan messbit assert messchan self partner selfid null partnerid messchan null dialled selfid messbit goto go cancel connection attempt event action dial goto busy trivial dial fi comment entire state acb switched just comment events needed nest comments remember atomic printf msc caller user record selfid self assert messchan self self messchan messbit dev dialled selfid partner selfid null partnerid messchan null messbit event action goto record selfid messchan null messbit partner selfid chan name record selfid partnerid record selfid event action callback goto calling fi unobtainable number called unobtainable go trivial dial atomic assert full self assert partner selfid null assert partnerid assert dialled selfid network ev action event action dev self messchan messbit assert messchan self messchan null messbit goto go cancel connection attempt event action dial goto busy trivial dial fi called party ringing atomic assert full partner selfid assert full self assert dev network ev action oring self assert messchan partner selfid messchan null check channel messbit messbit goto correct token messbit goto wrong token connected try messbit goto give event action dial messbit goto trivial dial fi abandon call attempt atomic assert full partner selfid assert full self assert dev event action dev self messchan messbit partner selfid messchan messbit partner selfid messchan partner selfid null partnerid dialled selfid messchan null messbit goto give go atomic assert full self assert full partner selfid connection established connect selfid partnerid goto disconnect call atomic assert full self assert full partner selfid event action dev self messchan messbit empty channel assert messchan partner selfid assert messbit partner selfid messchan messbit empty partner channel assert messchan self assert messbit disconnect partner partner selfid messchan connect selfid partnerid partner selfid null dialled selfid partnerid messchan null messbit goto atomic assert dev full self device rings connection attempt cancelled empty channel partner selfid messchan self network ev action messchan null messbit goto skip attempt cancelled fi network ev action disconnect self messchan messbit partner selfid null partnerid dialled selfid messchan null messbit goto proceed connection connect attempt cancelled atomic assert full self full partner selfid partner selfid messchan self connection proceeding assert messbit self messchan messbit assert messchan partner selfid assert messbit event action dev partner selfid messchan messbit partner selfid self establish connection self partner selfid messchan null messbit goto wrong message connection cancelled network ev action disconnect self messchan messbit event action dev partner selfid null dialled selfid partnerid messchan null messbit goto fi empty partner selfid connection cancelled network ev action disconnect self messchan messbit event action dev partner selfid null partnerid dialled selfid messchan null messbit goto fi check originator terminated call atomic self messbit dev trivial handset event action dev messchan null messbit goto messbit dev trivial handset event action dev messchan null messbit goto messbit dev connection terminated self messchan messbit partner selfid null partnerid dialled selfid messchan null messbit goto messbit dev network ev action disconnect disconnect tone event action dev connection terminated self messchan messbit partner selfid null dialled selfid partnerid messchan null messbit goto fi atomic network ev action event action goto idle user init atomic partner null partner null partner null partner null chan name zero chan name chan name chan name switch features default value user feature set id user forwarded screened call forward busy call forward busy call forward busy call forward busy call forward call forward call forward call forward orig dial screen orig dial screen orig dial screen orig dial screen orig call screen orig call screen orig call screen orig call screen term call screen term call screen term call screen term call screen ring back free ring back free ring back free ring back free orig call orig call orig call orig call term call term call term call term call run user zero run user run orig user run term user 
