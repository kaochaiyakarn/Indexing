theory interpretation simple type theory william farmer mitre burlington road bedford ma usa farmer mitre org october 
theory interpretation logical technique relating axiomatic theory important applications mathematics computer science logic 
presents method theory interpretation version simple type theory called lutins admits partial functions subtypes 
method patterned standard approach theory interpretation rstorder logic 
method nonclassical version simple type theory intended guide theory interpretation classical simple type theories predicate logics partial functions 
theory interpretation theory interpreted syntactic mapping fundamental logical technique important applications mathematics computer science logic 
interpretation theory theory mapping expressions expressions preserves validity sentences 
called source theory target theory interpretation respectively 
logic interpretations prove metamathematical properties theories compare theories terms strength 
mathematics theorems problems transported context interpretations 
computer science interpretations rigorous supported mitre sponsored research program 
published heering eds higher order algebra logic term rewriting selected papers international workshop hoa amsterdam netherlands september lecture notes computer science vol 
springer verlag berlin pp 

theory interpretations kind called translations theory morphisms realizations 
take theory set sentences formal language necessarily closed logical consequence 
sentences called axioms theory 
tool documenting verifying system speci cation re nement 
interpretations exclusively employed theoreticians 
implementors discovering interpretations useful organizing supporting mathematical reasoning automated reasoning systems mechanical theorem provers computer system speci cation veri cation environments 
interpretations extensively success imps interactive mathematical proof system :10.1.1.36.8717:10.1.1.37.5713
fundamental component programming veri cation environments iota obj 
theory interpretation primarily studied applied context rst order predicate logic 
logic textbooks enderton monk eld fairly standard approach theory interpretation rst order logic 
approach revolves special class interpretations behaved syntactically semantically 
suppose interpretation class 
kind homomorphism preserves structure terms formulas completely determined associates sorts constants objects de ne way extracting model model wealth writing theory interpretation rst order logic subject seriously explored higher order logic type theory 
reasons study theory interpretation higher order logic 
higher order logic increasingly important computer science mechanized mathematics 
second higher order logic expressive rst order logic space interpretations richer higher order logic rst order logic 
means techniques theory interpretation powerful higher order logic rst order logic technique verifying theory model conservative extension exhibiting interpretation xes 
known widely form higher order logic simple type theory 
built support functions hierarchy function types full quanti cation functions usually notation specifying functions convenient logic formalizing mathematics 
reason logical basis automated reasoning systems including hol imps isabelle pvs tps 
spite popularity utility developed approach theory interpretation simple type theory 
goal develop method theory interpretation simple type theory patterned standard rst order approach 
want method handle interpretations base type type individuals source theory associated possibly higher order type subtype target theory 
rst order logic interpretation associates base types types merely interpretation associates universe implicit type individuals source theory universe target theory 
interpretation kind alter quanti ers expressions source theory 
interpretation associates base types subtypes associates universe source theory unary predicate target theory 
interpretation kind quanti ers expressions source theory 
example interpretation associates universe source theory predicate natural theory interpretations associate base type subtype part type 
example suppose theory group base type denoting set group elements theory eld base type denoting set eld elements interpretation group structure interpreted structure multiplicative group associate subtype consisting nonzero eld elements 
natural translation group operation expression denoting multiplication operation restricted nonzero eld elements 
see associating base types subtypes leads functions restricted domains 
example worked detail section 
interpretations associate base types full types considered easy lift rst order notion theory interpretation simple type theory 
hand associating base types subtypes messy simple type theory deal functions restricted domains seen 
restricting domain function unproblematic informal mathematics completely satisfactory way done classical predicate logic expressions directly denote partial functions 
see discussion various ways dealing partial functions predicate logic 
rst order logic partial functions avoided quanti ers 
approach complicated simple type theory just quanti ers relativized particular predicates functions corresponding universal existential quanti cation relativized 
method theory interpretation formulated version simple type theory called lutins supports partial functions subtypes 
chosen lutins classical simple type pragmatic reasons 
pointed partial functions naturally arise interpretations associate base types subtypes 
consequently interpretations kind formalized directly logic admits partial functions lutins 
second lutins contains subtypes interpretation lutins relativize quanti ers variable binders provided appropriate subtypes de ned 
logic pronounced word french 
imps interactive theorem proving system lutins implemented rigorously extensively tested 
clearly ective logic formalizing wide range mathematics 
method nonclassical form simple type theory expect useful guide theory interpretation classical simple type theories predicate logics admit partial functions 
organized follows 
overview discussion examples standard approach theory interpretation rst order logic sections 
section gives quick pf version simple type theory partial functions subtypes lutins 
syntax semantics lutins section 
notion theory interpretation lutins de ned section 
section contains examples lutins interpretations groups elds 
interpretation relative satis ability theorems lutins proved section 
brief section 
comparisons method theory interpretation standard approach rst order logic places 
theory interpretation order logic section presents outline standard approach theory interpretation rst order logic 
part shall adopt section de nitions notation rst order logic equality 
expression rst order language theory term formula ary expression function expression form fx xn expression 
fx xn expression function 
term respectively formula function term respectively formula 
terms denotes result simultaneously substituting free occurrences rst order theory 
standard translation pair closed formula function form fx represents unary predicate function nonlogical constants nonlogical constants expressions expression functions 
individual constant symbol individual constant symbol closed term 

ary function symbol ary function symbol closed ary term function 

ary relation symbol ary relation symbol closed ary formula function 

binary relation symbol denotes equality relation 
standard translation rest section 
expression translation written expression de ned inductively 
variable 

individual constant symbol 

ary function relation symbol 



fx xg 

fx xg 
standard translation associates universe source theory closed unary predicate target theory nonlogical constants source theory closed expressions appropriate type target theory variables logical connectives 
quanti ers relativized unary predicate fx xg 
relativization quanti ers standard translation preserves structure rst order syntax 
standard translation viewed homomorphism expressions source theory expressions target theory 
standard interpretation valid sentence valid interpretation maps valid sentences valid sentences 
theorem gives sucient condition standard translation standard interpretation 
obligation sentences 
axiom 


individual constant symbol 

xn xn function symbol kinds obligations called order axiom universe nonemptiness individual constant symbol function symbol obligations 
meaning individual constant symbol obligation interpretation universe contains interpretation individual constant symbol meaning function symbol obligation interpretation universe closed interpretation function symbol 
note kinds obligations trivially valid fx xg 
theorem standard interpretation theorem standard translation standard interpretation obligations valid interpretable standard sense standard interpretation theorem important consequence interpretability 
theorem standard relative satis ability interpretable satis able satis able 
key idea proof theorem standard interpretation extract model model standard interpretation theorem standard relative satis ability theorem chief theorems standard approach theory interpretation rst order logic 
virtue validity preserving homomorphism standard interpretation syntactically semantically embeds source theory target theory 
standard interpretations compare strength theories strong interpretable standard interpretations long logic prove metamathematical properties rst order theories mainly relative consistency decidability undecidability 
example classic tarski mostowski robinson illustrates undecidability reduced undecidability constructing appropriate standard interpretation theory standard interpretations see 
simple examples section contains examples standard rst order interpretations 
examples simple illustrate power versatility theory interpretation 
rst example interpretation theory nonstrict partial order theory strict total order 
example po theory consisting sentences rst order language binary relation symbol 
re exivity 

transitivity 
xyz 
antisymmetry 
xy po clearly speci es nonstrict partial order 
similarly theory consisting sentences rst order language binary relation symbol 
irre exivity 

transitivity 
xyz 

xy clearly speci es strict total order 
standard translation po fx xg fx clearly interpretation po standard interpretation theorem 
links di erent axiomatizations di erent axioms di erent formal languages mathematical domain notion order relation theorems proved po nonstrict partial order transformed corresponding theorems strict total order words serves conduit theorems freely transported mathematical formalization 
interpretations manner informally areas mathematics transport theorems concrete contexts move problem convenient setting examples see 
interpretations sort fundamental little theories version axiom method mathematical reasoning performed network theories linked interpretations entirely single big theory zermelo fraenkel set theory 
describe little theories approach argue favor implementation mechanical theorem provers 
establishes re nement po 
re nes po ways models special kind partial order total order atomic relation decomposed compound relation built 
sort re nement de nition done reverse 
re nement basic technique computer science specifying building computer systems 
theory interpretation excellent tool computer system development re nement examples see 
interpretation example formalizes symmetry left right multiplication monoid 
example theory consisting sentences rst order language binary function constant individual constant 
associativity 
xyz 
left identity 

right identity 
standard formulation theory monoid 
standard translation fx xg fx xg homomorphism expressions terms formulas expressions alters terms 
expression mapped expression symmetric respect reversing argument order 
instance maps left identity axiom right identity axiom vice versa 
consequently interpretation standard interpretation theorem 
interpretations allow reason symmetry mechanized mathematics systems 
illustration suppose sentences want prove symmetric way 
informal mathematics rst construct proof prove simply noting proof symmetric proof bothered construct proof new learned 
mechanized mathematics system interpretations proving nd interpretation formalizes symmetry maps just informal mathematics bother produce proof know valid image theorem interpretation 
veri cation mapping really interpretation ectively veri cation particular kind reasoning symmetry valid 
interpretation example associates universe monoid singleton set identity element 
example standard translation fx feg structure monoid easy see interpretation 
denotes proper subset universe quanti ers 
example notice xes primitive constants 
act verifying interpretation equivalent proving feg standard interpretation xes primitive constants source theory restricts universe source theory called relativization 
commonly set theory establish relative consistency 
pf pf version simple type theory partial functions subtypes 
section gives quick syntax semantics pf section introduces user friendly version pf called lutins 
see full de nitive presentation pf preliminary de nitions de ning machinery specify various symbols pf language 
particular set type subtype symbols built set base type subtype symbols set de ned 
set symbols containing symbol 
set de ned inductively 



subset de ned inductively 



total function smallest binary relation 


re exive 
transitive 

noetherian ascending sequence members 
eventually stationary noetherian obviously antisymmetric 
partial order noetherian 
tagged symbol symbol tagged member 
tagged symbol symbol tag written tagged symbol written 
tagged symbols distinct sort systems types subtypes pf language called sorts 
syntactically form partial order 
semantics partial order sorts mapping takes sort nonempty set takes order relation set inclusion 
sort system pf pair nite set symbols bm total function 
bm 


noetherian 
sort system member type system member bm 
sorts bm bm bm called atomic sorts compound sorts base types function types system respectively 
type propositions type individuals 
enclosing sort sort 
sort system 
shall mean 
set types de nition sort system implies unique called type type denoted 
sort kind respectively respectively 
denote set kind 
upper bound written upper bound partial order atomic sort just single enclosing sort upper bound sorts type de ned 
standard sort frame set fd sg nonempty domains sets 
ft fg 



kind set partial functions 

kind set total functions 
hb 
see de nition type de ned inductively 

function maps tuple ha follows de nition standard sort frame languages language pf tuple 
sort system pf 
disjoint countable sets pairwise distinct tagged symbols members called variables constants respectively 

nite subset 
members called logical constants variables denoted rest section language pf sort system set types expression sort nite sequence members de ned inductively 
expression sort 
expression sort expressions sort ff expression sort 
distinct variables expression sort fx bg expression sort 
expressions denoted expressions sort denoted free variable closed expression similar notions de ned obvious way 
formula expression sort 
sentence closed formula 
intuitively expression ff denotation denotes value function denoted applied arguments denoted expression fx xn bg denotes function value arguments xn denotation generally depends xn denotation unde ned 
abbreviations provide notation major logical operations pf ff fx fx fx fx fg fg fx fx fp fx fx fx fx fx ifx fx fx ifx fx fx ifx occur parentheses expressions may suppressed meaning lost 
standard models de ne semantics pf general models standard models 
interested standard models semantics 
describing objects logical constants intended denote 
fd sg standard sort frame fix 
identity relation total function descriptor total function de nite description function partial function descriptor unde ned 
de nite description function total function descriptor 
standard model pair fd sg fd sg standard sort frame function maps element identity relation de nite description function assignment function maps element assignment distinct variables 

assignment fx fd sg standard model exists binary function assignment expression conditions satis ed assignments expressions 


ff equal de ned hv 

ff equal 
fx partial function de ned unde ned 

fx total function 
ha called value respect 
intuitively means denotation value respect 
intuitively partial valuation function 
closed expression clear depend meaningful 
formula valid assignment theories theory pf pair language pf set sentences members called axioms denote theories 

standard model standard model member valid 
satis able standard sense standard model sentence semantic theorem standard sense written valid standard model lutins lutins logic unde ned terms inference natural style logic imps 
essentially pf plus additional expression constructors de ned terms primitive notions pf function application abstraction equality de nite description 
section gives brief presentation syntax semantics lutins 
detailed presentation slightly di erent version lutins 
assume concept notation de ned previous section pf de ned lutins obvious way explicitly de ned section 
reader aware lutins called pf 
syntax language lutins tuple language pf language lutins language pf remainder section language lutins sort system set types possibility confusion components language denoted sort system set types denoted respectively 
version lutins expression constructors apply lambda equals quasi equals iota iota true false implies iff form forall forsome defined defined undefined 
expression sort nite sequence variables constants expression constructors sorts punctuation symbols de ned inductively 
expression sort 
expression sort expressions sort expression sort 
distinct variables expression sort bg expression sort 

expressions sort respectively bg quasi bg expressions sort 

variables kind respectively expression sort cg iota cg expressions sort respectively 

expressions sort bg bg cg expressions sort 

distinct variables expression sort bg bg expressions sort 

expression sort defined expressions sort 

expressions sort respectively cg expression sort 
kind expression sort 
kind expression sort expressions variables constants called compound expressions 
length expression written jaj number occurrences expression constructors set expressions respectively denoted respectively set expressions denoted 
semantics semantics lutins de ned terms standard models semantics pf mapping de ned statements 


bg fx 


quasi 

fx ifx iota iota 

fg true 

fg false 









bg 

bg 

fa cg iff form 

bg fx 
bg fx 
defined 




notice sort expression model standard model fd sg model valuation function respect binary function assignments expressions de ned clearly assignment expression partial valuation function respect formula valid assignment fd model 
expansion written subfunction extension written expansion reduct subfunction theory interpretation lutins seen rst order predicate logic interpretation theory certain kind homomorphism expressions preserves validity sentences 
section de ne interpretation lutins theory similar notion standard rst order interpretation 
rst de ne notion translation source theory target theory 
translation determined primitive symbols source theory atomic sorts variables constants source theory associated objects target theory 
de nition atomic sorts associated sorts closed unary predicates variables associated variables constants associated closed expressions appropriate sort 
interpretation de ned translation maps theorem source theory theorem target theory 
notion translation lutins extends notion translation pf de ned ways lutins translation directly handles expression constructors lutins pf translation handles just constructors corresponding apply lambda 
lutins translation associate atomic sort sort closed unary predicate pf translation associate atomic sort sort 
section heart 
complexity de nitions result allowing sorts associated unary predicates 
quasi sorts de ne quasi sort closed unary predicate expression sort form 
denote set quasi sorts language 
domain written de ned sort provided condition written de ned need quasi sort constructor denoted 
building compound quasi sorts analogous 
sort constructor building compound sorts 

quasi sort extension model set partial functions 
dn extension 
de ned follows 

choose distinct variables qn occur de nitions andf qn qn kind kind qn ggg de ne qn cgg clearly formed member proposition 



translations theory lutins 
function canonical extension de ned inductively 






translation pair 

sort type kind 

variable sort 

injective 
closed expression type 
normal obviously normal 
translation rest section 
translation written member de ned inductively 

fa apply equals quasi equals true false implies iff form defined 

fx bg lambda iota iota forall forsome 
fx bg ggg lambda gg forall gg forsome iota iota andf sort undefined kind 

undefined 

defined defined inf proposition 
kind 


implies 
proof proof proposition 
proposition 
formed member type 

sort constant occurring sort 
proof induction ja proceeding notion interpretation shall comments de nition translation mapping plays role standard translation 
variables source theory mapped variables target theory standard lutins translation 
rst order logic variables ectively sort 
consequently uniformly mapped need domain standard translation 
variables di erent sorts sorted logic lutins think variable form uniformly mapped mapping clearly injective exists variables 
de nition mapping variables speci ed explicitly 
simple type theory uniform syntax rst order logic de nition constants complicated lutins translation standard translation 
normal lutins translation preserves structure lutins syntax seen clearly de nition 
cases nonnormal lutins translation constructor defined variable binding constructors lambda iota iota forall forsome 
expression constructors relativization de ned obvious way 
particular relativization lambda expression bg produces expression lambda appropriate restriction translation interpretations interpretation theorem theorem interpretable interpretation pre obligation theorems 
axiom 

defined 
defined infx gg obligation sentence pre obligation 
kinds pre obligations obligations called order axiom sort nonemptiness constant sort sort inclusion pre obligations obligations 
note sort nonemptiness obligations trivially theorems normal 
rst kinds obligations correspond closely kinds obligations standard rst order translation constant sort obligations correspond individual constant symbol function symbol obligations 
standard translation obligations corresponding sort inclusion obligations subtypes rst order logic 
obligations serve purpose lutins translations standard translations obligations translation theorems target theory translation interpretation 
result proved lutins section 
examples involving groups fields section construct interpretations theory group theory eld 
employ abbreviations bg 

de ne ag vg cg theory group 
ag 
identity function 

cg fe mul inv 
usual set axioms group 
de ne af theory eld 
af 
identity function 


usual set axioms eld 
vg languages determined conditions 
example interpretation 


mul 
inv gg 
shows elements eld form group addition 
example interpretation 


mul ggg 

inv gg 
shows nonzero elements eld form group multiplication 
associated quasi sort nonnormal quanti ers expressions notice mul associated restriction nonzero elements inv unde ned de ne af fa extension 

infx gg 
obtained de ning atomic sort extension quasi sort example interpretation 


mul 
inv gg 
shows nonzero elements eld form group multiplication 
certain sense renditions interpretation 
associates sort syntactically economical particular normal nonnormal 
examples illustrate nonnormal translation transformed normal translation 
lutins admits subtypes nonnormal translation normalized way long willing de ne new atomic sorts 
general idea follows 
suppose translation nonnormal 
add new atomic sort new axiom says rede ne resulting translation obviously normal 
construction described detail section 
nonnormal translations unnecessary lutins restriction de ning atomic sorts 
practice strict avoidance nonnormal translations easily lead theories large number atomic sorts 
interpretation satis ability theorems prove section interpretation relative satis ability theorems lutins 
establishes sucient condition translation interpretation says theory interpretable satis able theory satis able 
correspond respectively standard interpretation theorem theorem standard relative satis ability theorem rst order logic 
proofs interpretation relative satis ability theorems pf proved 
lutins theory 
pf theories translations lutins theory pf theory 
proposition lutins theory model 
model standard model 
sentences proof assignment formula de nition 
identity implies identity imply 
suppose normal lutins translation de ned 




easily veri ed pf translation translation key lemma section lemma normal lutins translation constant sort sort inclusion obligations theorem model assignment 
expressions 
sentences proof lemma requires technical lemma lemma normal lutins translation constant sort sort inclusion obligations theorem model assignment 
type 
upper bound sorts ifx 
sort proof follows lemmas section 
proof lemma part follows part proposition 
proof induction jej 
basis 
assume jej hold identity holds holds holds identity induction step 
assume jej compound expression expression constructor 
defined defined defined inf defined de nition application normal lutins translation expression de nition induction hypothesis lemma 
derivation similar expression constructors equals quasi equals defined 
derivations expression constructors require lemma 
completes proof 
special case interpretation theorem lemma semantic interpretation theorem pf imply interpretation theorem lutins restricted normal translations theorem normal lutins translation interpretation obligations theorem proof normal lutins translation obligations theorem showing interpretation 
obligation 
form axiom constant sort sort inclusion pre obligation 
hypothesis 
holds proposition holds lemma 
obligation theorem pf interpretation semantic interpretation theorem pf theorem 
theorem implies hold proposition holds pf interpretation holds lemma 
sequence implications shows maps theorem theorem interpretation 
translation properties strengthen theorem full interpretation theorem lutins show arbitrary lutins translation transformed normal translation 
lutins translation key idea add new atomic sorts theory 


appropriate set new variables 

fa ag infx ggg de nitional extension new atomic sorts axiomatically de ned quasi sorts range 
consequently proposition easy prove 
proposition suppose sort nonemptiness obligation theorem 
model expands model 
model reduces model translation 




clearly normal 
notice normal 
lemma models respectively expansion assignments assignments proof induction jej 
lemma suppose sort nonemptiness obligation theorem sentences proof proposition lemma 
theorems theorem interpretation theorem translation interpretation obligations theorem proof lutins translation obligations theorem construct theory normal translation 
source theory pre obligations 
obligation theorem lemma 
normal interpretation theorem 
implies interpretation lemma 
theorem relative satis ability interpretable satis able satis able 
proof lutins interpretation model construct theory normal translation 
proposition model expansion interpretation 
standard model proposition 
lemma interpretation proof theorem interpretation 
standard model relative satis ability pf theorem 
model proposition satis able 
developed method theory interpretation lutins version simple type theory supports partial functions subtypes 
method embodies principal characteristics standard approach theory interpretation rst order logic translation kind homomorphism determined primitive symbols source theory associated objects target theory 
sort symbols associated unary predicates translation expression may involve relativization variable binding constructors universal existential quanti ers 
translation interpretation obligations translation theorems target theory interpretation theorem 
theory interpretable satis able theory satis able relative satis ability 
method logic partial functions subtypes advantages standard rst order approach functions restricted domains naturally arise interpretations associate base types subtypes handled directly partial functions 
relativization variable binding constructors avoided completely provided appropriate sort symbols de ned 
method intended guide theory interpretation classical simple type theories predicate logics admit partial functions 
acknowledgments am grateful suggestions received referees 
ideas grew conversations dr joshua guttman dr javier thayer course developing imps 

andrews 
mathematical logic type theory truth proof 
academic press 

andrews pfenning 
tps theorem proving system system 
stickel editor th international conference automated deduction volume lecture notes computer science pages 
springer verlag 

chang keisler 
model theory 
north holland 

church 
formulation simple theory types 
journal symbolic logic 

craigen meisels 
tool verifying software 
proceedings th international conference software engineering icse singapore 
ieee computer society press 

craigen meisels 
overview 
technical report cp ora 

enderton 
mathematical logic 
academic press 

farmer 
partial functions version church simple theory types 
journal symbolic logic 

farmer 
simple type theory partial functions subtypes 
annals pure applied logic 

farmer guttman thayer 
imps system description 
kapur editor automated deduction cade volume lecture notes computer science pages 
springer verlag 

farmer guttman thayer 
little theories 
kapur editor automated deduction cade volume lecture notes computer science pages 
springer verlag 

farmer guttman thayer 
imps interactive mathematical proof system 
journal automated reasoning 

giunchiglia walsh 
theory abstraction 
arti cial intelligence 

goguen winkler 
introducing obj 
technical report sri csl sri international august 

gordon 
hol proof generating system higher order logic 
birtwistle editors vlsi speci cation veri cation synthesis pages 
kluwer dordrecht netherlands 

guttman 
proposed interface logic veri cation environments 
technical report mitre 

harper pfenning 
module system programming language lf logical framework 
journal functional programming 
forthcoming 

hilbert 
foundations geometry 
open court chicago 

kunen 
set theory independence proofs 
north holland 

levy 
approach compiler correctness interpretation theories 
phd thesis university california los angeles 
technical report atr aerospace el segundo california 

maibaum veloso sadler 
theory data types program development bridging gap 
ehrig floyd nivat thatcher editors formal methods software development volume volume lecture notes computer science pages 
springer verlag 

monk 
mathematical logic 
springer verlag 


lattice interpretability types theories 
journal symbolic logic 

nakajima editors 
iota programming system volume lecture notes computer science 
springer verlag 

nipkow paulson 
isabelle 
kapur editor automated deduction cade volume lecture notes computer science pages 
springer verlag 

owre rushby shankar 
pvs prototype veri cation system 
kapur editor automated deduction cade volume lecture notes computer science pages 
springer verlag 

rushby von henke owre 
formal speci cation veri cation 
technical report sri csl sri international 

eld 
mathematical logic 
addison wesley 

smith lowry 
algorithmic theories design tactics 
science computer programming 


interpretability elementary theories 
hintikka editors logic foundations mathematics computability theory pages 
reidel 


interpretability axiomatizability 
bulletin de acad des sciences 

tarski mostowski robinson 
undecidable theories 
northholland 

maibaum 
speci cation computer programs 
addison wesley 

van pearce 
mathematical characterization interpretation theories 
logica studia 


formal modeling veri cation microprocessors 
ieee transactions computers 
forthcoming 


theories hol 
gordon editors proceedings international workshop hol theorem prover applications 
north holland november 
article processed macro package llncs style 
