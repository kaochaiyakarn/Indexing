simulation suite internet nodes ability integrate arbitrary quality service behavior klaus jochen university karlsruhe institute telematics karlsruhe germany email informatik uni karlsruhe de keywords internet protocol quality service packet scheduling parallelism protocol processing years internet community spent lot research efforts investigating kinds mechanisms provide better services traditional best effort delivery 
simulating behavior internet routers hosts modified qos behavior important ways prove guarantees 
existing models available common simulation tools implemented modular way reuse easily principles new internet services 
modular simulation suite complete internet nodes realistic simulation internet protocol underlying layers 
ip model designed detailed way covering features protocol including mechanisms icmp multicast network simulation models 
model considers hardware restrictions ip processing computers 
second feature simulation suite ability build quality service behavior 
supported elementary qos models combined integrated flexibly 
simplicity design modular reusable models supported modular architecture chosen simulation environment simulation tool 
reasons network simulation tools modeling new networking concepts validation functionality efficiency scalability global networks internet 
quality service qos concept particularly differentiated services architecture developed internet years 
architecture designed small building blocks called hop behaviors phb composed form quality service behavior adequate simulation differentiated services model requires feature quickly build models elementary entities 
additionally purpose analyze behavior qos concepts internet realistic way 
instance real hardware limited number cpus process small number packets time 
implementing simulation suite simulation environment section chosen 
shown simulation environment suitable simulate complex systems internet nodes realistic way consideration number cpus restriction process packet node 
allows design modular simulation models combined reused flexible way 
section simulation model internet nodes 
allows composition models granular hierarchy 
possible build quality service behavior reusing concatenating basic qos behavior elements 
concept shown section conclude fifth section 
currently notion realistic simulation suite qos behavior internet extended integrating aspects internet systems traffic generators common applications ftp multimedia applications transport protocols tcp simulation model 
sake clarity concentrates network mechanisms 
simulation tool free object oriented modular discrete event simulation des tool available 
des systems especially suitable simulation computer systems communication protocols processing functionalities protocol proceeding modeled discrete steps 
simulation system consists class libraries forming simulation kernel interface user environments 
model compiled linked libraries resulting executable file 
object oriented approach allows flexible extension base classes provided simulation kernel 
simulated models composed hierarchically nested modules 
types modules called simple modules form lowest hierarchy level implement activity module 
simple modules arbitrarily put compound modules second module type 
distinction module types distinction model description 
model topology hierarchy modules connections defined ned network environment description simple easy understand style language 
ned compiler transforms ned definition module code 
simple module activities implemented code 
code implements module algorithm communication modules message sending 
chosen simulation tool internet simulation provides flexible hierarchy concepts algorithms modeled modular reusable fashion 
ned description new composed model created coding necessary 
tools ns lot coding effort spent extending module hierarchy class definitions implemented 
computer system internet node consist hierarchy arbitrary granularity 
advantage traffic generators may included easily layer measurements single layers taken independently 
contrast simulation tools protocol processing supported cases possible model packet processing done real computer system 
wanted get realistic internet simulation modeled packet processing times internet router model cf 
section 
ns processing time spent routing module expect realistic behavior 
modular object oriented concept enables flexibility sense building blocks exchanged extended 
building block simple module possible choose process style protocol style modeling 
different parts computing communication systems connected easily 
idea flexibility allows model new networking concepts include model done simulation quality service mechanisms refer sec 

simulation internet protocol highest level abstraction simulation ip network consists ip nodes 
ip nodes represent routers hosts 
organization allows easy re combining different components new network 
ip node structure hierarchy www telnet routing table nfs tcp udp output queue output queue transport audio video output queue processor manager error handling output queue eth fddi ppp ppp components ip node simulation model ip node simulation model computer capable understanding internet protocol represented compound module 
modules responsible simulation internet protocol structured similar way processing ip datagrams real operation system organized allow protocol processing done ns 
structure linux kernel chosen model simulation ip node 
individual changes linux kernel result local changes simulation model 
ip network module mandatory ip node represents network layers node 
upper layers transport protocols applications optional 
usually hosts may absent routers 
ip network module may connections ip nodes point point links shared medium simulation entities 
processor manager module obligatory 
handles user kernel process time scheduling ensures ip node kernel process running specific instance time 
processor manager sure number running user processes limited number processors ip node 
processor manager responsibility allow ip datagram processed kernel simultaneously 
number processors system configured 
system kernel user processes claim processor kernel atomic operation 
processing time operation processor kernel process 
ip node processor second user process claim processor atomic operation 
atomic operation process finished kernel processor gets released 
claiming releasing processor kernel done sending message processor manager waiting 
kernel processor free processor manager sends message back requesting module 
kernel processors event making subsequent events put waiting queue 
kernel processor released event queue gets claim processor kernel 
mechanism simulation prevents parallelism event handling system realistic real system 
ensures ip datagrams arriving network cards processed subsequently kernel simultaneously 
feature available event simulation systems 
similar functionality modeled finite state machines approach extensible respect number processors 
different approach presents simulation suite inherent modeling kernel behavior allow easy integration new networking concepts 
existence processor manager module required functionality turned optionally model 
network module ip node contains handling mac ppp layer ip layer 
layers ip queues located allow kernel store packets coming going network ces 
ip layer maintains central input queue going ip processing module separate output queue network interface connected ip processing module 
architecture chosen real systems 
routing table module acts database network interface routing information 
routing network information file loaded initialization time file node 
ip processing protocol hooks ip processing module contains components internet protocol 
handles packets transport layer datagrams ip queues network interfaces 
submodules ip processing compound modules structured way processing datagram simulation resembles closely way linux kernel handles processing ip datagrams 
instance submodule routing determines output port datagram passes local deliver delivered upper layers 
local deliver removes ip header delivers transport packet required control information source destination address transport layer 
icmp module handles icmp messages resulting internal errors instance bit error occurred transmission ttl reaches icmp queries ping timestamp queries application layer 
fragmentation module allows fragmentation diagram fragments basis mtu assigned output network interface 
header fragment equal original datagram save fragmentation information 
fragmentation fragment forwarded sequentially output module corresponding output port 
network interface output module 
modules pre routing routing local deliver ip send ip output contain hook extending protocols behavior qos modules 
detailed described section 
packet structure simulation environment offers encapsulation packets packets 
mechanism allows layer en packets upper layers add header trailer information 
length adjusted information packet passed upper layer 
way tcp udp packets ip datagrams mac frames represented exactly fashion real network 
access fields yields results reality bit wise representation packet 
processing ip datagrams local deliver ip routing pre routing icmp ip multicast output processing ip datagrams ip send ip fragmentation output output dotted connections ip processing diagram describe path ip datagrams transport layer 
fat connections mark incoming outgoing ip datagrams network interfaces 
datagram passes routing module core ip processing 

ip datagrams sent originally ip node created ip send passed routing fragmentation output modules 
inserted output queue specific network interface 

ip datagrams destined ip node arrive input queue pre routing passed routing local deliver ip header stripped packet passed transport layer 

ip datagrams simply routed ip node arrive pre routing passed routing fragmentation output modules 
evaluation processor manager impact processor manager tested scenario generating packet bursts points measuring time take arrival 
times cases processor manager enables processor manager disabled compared expected second run take longer gives realistic time processor manager prevents non realistic parallel processing multiple packets kernel 
scenario set follows sender sender sender router receiver receiver receiver scenario network sender nodes sends burst packets receiver nodes 
application layer network produce latency 
latency induced modules pre routing routing output queues ip layer router 
delay set module amounting total delay router 
separate experiments tested bandwidth mbit bandwidth mbit link 
delay experiments 
bottleneck scenario router 
sender nodes send datagrams time handle multiple incoming datagrams simultaneously 
version processor manager turned datagram processed routing processed 
second run second datagram queued left ip processing 
network interfaces usually equipped processors handling frames physical network insertion ip input queue happen parallel 
result experiment shown 
line speed mbit mbit time proc 
man ms ms time proc 
man ms ms time difference ms ms relative time diff results simulation considering parallelism ip processing expected time cases lower case processor manager turned 
difference case mbit link insignificant difference faster line significant 
result explained case slow link router delay matters little 
case router faster process arriving datagrams lines line capable transmitting new ones 
second case router fast process incoming packets arrived 
result new arriving datagrams wait input queue older ones completely processed 
case parallel processing datagrams modules routing output queue allowed faster forwarding 
behavior unrealistic software ip router process multiple datagrams time 
case processor manager enabled gives realistic simulation result marks difference 
building quality service behavior elementary qos models goal simulation model offer elementary qos modules internet protocol stack combined linked common qos elements traffic shaper token bucket classifier suite offers variety queues scheduling mechanisms priority queueing round robin qos elements called behavior elements 
section detailed classification 
main principle building simulation suite possibility build new qos behavior quickly existing pool elementary behavior elements 
done varying elementary models connecting special manner 
example motivate architecture proposed model token bucket widely model meter certain network flow monitor conformance service level agreements slas 
traditionally token bucket meters incoming flows conformance 
negotiated rate exceeded packets forwarded discarded 
method metering flow known scenarios af phb diffserv networks packets discarded 
marked lower priority enqueued alternate queue lower priority 
scenario token buckets combined control peak rate average rate 
existing simulations new token bucket models marker priority queueing model developed 
secondly problem integrate qos elements right position protocol stack 
instance important token bucket working ip layer routing done output queue certain interface 
case packets forwarded ip considered token bucket meter case packets leaving interface 
third case packets leaving host considered 
obvious protocol ip lot possible places integrate qos behavior identified 
result fast development models simulating new network behavior new qos behaviors time consuming existing simulation models modeled complete architectures 
time new models developed implemented 
reuse existing models easy 
modular architecture elementary qos models individual linking solve problems allow build immediately qos behavior internet router host implementing new models 
existing pool elementary qos behaviors complete implementation internet protocol offer hand real ip behavior hand possibility build evaluate rapidly new qos behavior 
sections basic architecture simulation environment 
principle hooks strategic places including qos elements protocol stacks explained 
subsequently different kinds types rules concatenate introduced 
illustrate architecture example appendix ned configuration file ip forward hook listed 
service classes distinguished premium class offering high priority service low delay 
flows premium class leaky bucket shaped output interface 
second class offer better service best effort statistical guarantee bandwidth 
achieved weighted fair queueing scheduler 
metering done token bucket 
non conforming packets discarded degraded best effort service builds third service class 
classification service classes done classifier 
example possible implementation known bit architecture described details 
keep example simple hooks shown 
ip forward classifier enqueue eth codepoint classifier dequeue eth leaky bucket token bucket red priority queueing weighted fair qu 
shaper enqueue fifo enqueue fifo enqueue marker dropper marker marker dropper shaping dequeue fifo dequeue fifo dequeue shaping queue fifo queue fifo queue example configuration basic qos behavior elements protocol hooks qos behavior introduced existing protocol basic problem place protocol extended new behavior elements 
regarding internet protocol strategic points identified 
points called hooks 
differ set packets passing point routing hook represents set packets leaving ip node interface forwarded created host pre routing packets arriving network interface pass hook routing processed local packets upper layers routing processed 
forward forwarded packets pass hook routing 
local hook packets upper layers routing processed 
post routing hook packets forwarded upper layers leaving network interface 
network interface additional hooks identified enqueue xx dequeue xx xx name interface 
located output queue network interface card nic right point add specific behaviors operating outgoing queues priority queueing shaping 
refer fig 

focus internet protocol underlying layer 
building simulation models transport protocols udp tcp internet applications ftp traffic models 
models hooks added easily adequate places integrate qos behavior 
described hook place protocol qos behavior added 
behavior elements included hook elementary models offering certain behavior 
described 
behavior elements behavior element comparable black box offers specific basic behavior 
consists gate gates certain processing behavior inside 
gate packets enter box receive certain manipulation inside module 
dependent calculation box packet leaves certain gate 
behaviors concatenated 
consequently treatment packet receives decides way proceed quality receives 
kinds gates behavior elements hooks distinguished packet gates abbreviated gates 
main difference packet gates ip packets exchanged non packet gates messages request packets exchanged 
main rule gates kind connected 
different types gates described detailed section 
kinds behavior elements distinguished ref 
fig 
conventional behaviors elementary qos elements operates ip packets 
shown fig 
gate gates depends particular behavior element 
interconnected fulfilling requirements 
example token bucket marker dropper classifier random early detection red deq disc enq deq queue interfaces behavior elements packet packet different classes behavior elements queue queue queues known packet queues 
packets enqueued dequeued kind behaviors 
types queues exist fifo shaping enqueue behavior enq specialized packet queue 
queue identified name enqueue behavior 
special characteristic enqueue behavior missing gate 
packet inserted queue dropped 
enq connected gates module 
detailed procedure exchanging messages packets behavior elements described section 
dequeue behavior deq dequeue packet certain queue 
fifo dequeue module removes packet named queue sends gate 
deq modules connected gate dequeue hook dequeue discipline 
deq kinds connected packet gate 
dequeue discipline deq disc dequeue discipline strategy choose dequeue behavior serving queue 
dequeue disciplines playing important role reaching different service classes network 
examples dequeue disciplines priority queueing weighted fair queueing round robin interactions behavior elements just types simple mesh behavior elements built connected hooks 
important understand packet traverses mesh interactions occur behavior elements 
section describes sequence events example concatenations behavior elements 
interactions junction behavior elements packet gates arranged hook ip packet token bucket ip packet marked discard marker dropper follows ip packet goes recursively back hook interactions junction new model create new qos behavior 
connections gates ip packets exchanged 
fig 
shows example 
hook sends ip packet token bucket 
module completed operations packet send module connected dedicated port 
means example sla conform packet case leave gate profile leave gate dropper 
module connected dedicated port port packet sent back previous module packet came 
see packet traverses chain recursively back hook normal protocol processing continued 
normal procedure possible exceptions 
packet reaches enq enqueue queue 
second exception dropper marks packet discarding 
cases modules won send back ip packet hook packet enqueued message discard packet message 
discarding packet done hook hook dropped informed loss packet 
token bucket put back tokens packet bucket transmitted 
interactions non packet gates junctions deq discs deq disc deq packets exchanged 
dequeue disciplines decide deq asked dequeue packet queue 
mechanism triggered dequeue hook sending request packet message dequeue discipline directly deq scheduling algorithm 
hook request packet wfq ip packet priority queueing fifo dequeue request packet message packet message interactions junctions deq disc deq deq disc decides gates packet request proceed 
combination deq discs built deq called 
fig 
priority queueing module asks gate highest priority 
module connected gate proceeds scheduling mechanism 
fig 
wfq module asks gate 
possible chain deq discs conclude dequeue discipline executes request packet queue 
success connected packet sent gate deq 
follows procedure described previously meshes 
deq receives back packet sent recursively back trough deq discs dequeue hook 
packet dequeued deq returns packet message previous deq disc indicating dequeue operation failed 
deq disc choose algorithm gate request packet returns packet message predecessor 
successful dequeue hook starts transmission packet interface 
mentioned triggered dequeue hook 
normally packet request messages initiated network interface finished transmission previous packet able transmit packet 
interface idle start new request 
enqueue hook initiate packet request just inserted packet output queues interface 
indication starts request nic idle state 
described mechanism similar linux os 
model simulating behavior internet protocol suite simply creating quality service mechanism 
model partial aspect super model internet protocol layers tcp udp applications simulate behavior internet routers hosts 
special decisions designing model consideration cpus parallel processing packets shown important topic realistic simulations protocol behavior internet 
creation evaluation quality service mechanisms easily done elementary qos models concatenating correct way 
common models queue scheduling priority queueing weighted fair queueing round robin metering token leaky bucket classifying multi header field ds codepoint forming network traffic provided 
simulation suite available public 
everybody offer possibility evaluate models increase pool available models 
steven blake david black mark carlson davies zheng wang walter weiss 
architecture differentiated services 
rfc december 
roland klaus 
evaluation differentiated services implementation linux 
proceedings th ifip workshop quality service london june 
ieee 
van jacobson kathleen nichols lixia zhang 
differentiated services architecture internet 
rfc july 
ravi 
quality service ip simulation 
bacon gmu edu 
lin mckeown 
simulation study ip switching 
acm computer communication review october 
acm sigcomm sept 
murphy 
diffserv additions ns 
www dcu ns diffserv ind ex html july 
diffserv model ns 
www nortel com ctl ns release zip 
varga 
discrete event simulation system 
www hit bme hu phd htm 
wang kung 
simple methodology constructing extensible high fidelity tcp ip network simulators 
proceedings ieee infocom new york march 
klaus ulrich 
internet simulation suite 
www uni karlsruhe de 
