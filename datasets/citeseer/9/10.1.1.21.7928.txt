processor reconfiguration instruction set metamorphosis compiler architecture peter athanas harvey silverman virginia polytechnic institute state university brown university bradley department electrical engineering laboratory engineering man machine systems hall division engineering blacksburg virginia providence rhode island athanas cc vt edu hfs lems brown edu computationally intensive tasks spend nearly execution time small fraction executable code 
new hardware software system called prism improves performance computationally intensive tasks utilizing information extracted compile time synthesize new operations augment functionality core processor 
integrating adaptation general purpose computer reap performance benefits applicationspecific processors retain general purpose nature accommodating wide variety tasks 
newly synthesized operations targeted ram logic devices provide mechanism fast processor reconfiguration 
proof concept system called prism consisting specialized configuration compiler reconfigurable hardware platform 
compilation performance results provided confirm concept viability demonstrate significant speed conventional general purpose architectures 
keywords adaptive architectures reconfigurable instruction sets performance improvements general purpose computers logic synthesis general purpose computers designed primary goal providing acceptable performance wide variety tasks providing high performance specific tasks 
performance machines ultimately depends capabilities processing platform match computational characteristics applications 
application requires computational power achieved generalpurpose platform driven application specific computer architecture fundamental capabilities machine designed particular class algorithms 
tasks suited particular application specific machine perform execution performance tasks outside targeted class usually poor 
characteristic common nearly computationally intensive applications tend spend execution time small portion executable code 
efforts improve performance tasks best spent small frequently accessed portions sparsely accessed sections 
substantial performance gains achieved allowing configuration fundamental operations processor adapt portions program consume execution time 
doing segments processing platform reconfigure add new capabilities accommodate individual applications 
architecture reap performance benefits application specific architectures tuning architecture individual tasks retain general purpose nature able change dynamically match character wide diversity tasks 
architecture compiler components general purpose computing platform called prism 
prism acronym processor reconfiguration instruction set metamorphosis intended improve performance computationally intensive tasks information extracted program compilation synthesize new operations augment functionality processor 
motivation adaptation general purpose machine section ii discussion previous 
proof concept system called prism consists special compiler called configuration compiler hardware platform examined section iii 
section iv provides experimental results demonstrating benefits prism concept 
ii adaptation previous motivation idea incorporating means adaptation computer long digital computer 
estrin proposed machine architecture consisting fixed general purpose core appended inventory high speed substructures 
fixed portion computer centered minimum vocabulary machine characteristics common applications 
rack substructures application specific computational elements provided means tuning fixed core applicationspecific tasks 
unfortunately substructure library offer finite number alternatives choose high level language compiler intending substructures required great deal complexity 
large machines built writable control stores 
substantial decoding required implement large complex instruction sets machines 
writable control store offered way utilizing faster access time ram structures allowed easy microcode maintenance machines field 
agrawala introduced method task adaptation machines writable control stores new machine microcode generated compiletime information derived user program 
compiler proposed defined new set instructions better suited task generated interpret new instructions 
late memory technology advanced point entire programs compiled essentially microcode resident machine fast store risc machines 
rendered large machines obsolete 
feasibility utility providing means adaptation modern generalpurpose machines demonstrated example see 
papers speed achieved essentially replacing portions applications previously executed software custom designed hardware structures computation fraction time 
order keep processing platforms general purpose field programmable gate arrays fpgas mechanism containing augmented instructions 
devices functionally equivalent medium density addition reprogrammed times 
logic functionality fpga determined output ram cells distributed device turn modified software control 
cases conventional processor augmented fpgas connected processor bus coprocessor 
despite relative simplicity processing platforms claims fold improvement reported adding instructions generalpurpose machine 
specifically authors claimed couple orders magnitude improvement image processing tasks authors claimed time throughput increase vax adding ability compare large strings 
major barriers prevented early root mainstream computing 
programmer expected know computationally inten sive portions existed program 
may overwhelming problem programmers idea portions code dominate execution time 
candidates identified programmer assumed hardware design expertise define synthesize hardware structures new operations 
furthermore order specify new structures programmer forced leave programming environment language hardware description language schematic entry system describe new structures 
adaptive system viable identification synthesis operations need merged compilation process fully automated 
ii adaptive architecture compiler selecting designing appropriate programming language providing suitable hardware platform identification synthesis enhanced operations accomplished automatically program compilation 
consequence language specify software functionality specify hardware structures 
responsibility compiler programmer decide portions application synthesized 
performance gain achieved time required evaluate function newly adapted hardware time required compute operation software 
insure benefit lifetime program executable processing overhead imposed architecture added compilation time reconfigurable resource initialization time exceed total savings achieved methods procedure automatically synthesizing candidate functions similar behavioral silicon compilation 
process involves transformation high level behavioral description task structural efficient physical description functionally equivalent 
compilation high level language specification efficient hardware implementation difficult problem 
reason programmer limited fundamental operations inherent high level language convey concepts algorithm 
functions simple complicated expressed combination limited set boolean arithmetic operations provided high level language 
functions easily expressed simple operations 
example consider function hamming written illustrated 
function defined accepts unsigned integers returns number equal costs compilation initialization may moot applications execute frequently possess real time execution constraints 
short hamming unsigned short returns hamming distance 
hamming distance metric determined sum absolute bitwise difference operands 
register short loop counter 
xor intermediate xor 
result final return value result xor sizeof short result xor result xor xor 
return result hamming metric written hamming distance 
primitive perform hamming metric expressing functional set expensive operation compared say integer addition application depends heavily function obviously benefit underlying processor supported function high level language compiler capable utilizing 
manufacturers general purpose microprocessors generally include instructions hamming functions repertoire reasoning clear 
instruction rare occurrence general purpose instruction mix allocation area silicon functions justified 
manufacturers strive create number different ways express function depending factors ways computationally efficient 
independent expressed efficient method execution direct hardware evaluation 
overview prism configuration compiler processing platform 
shown dotted lines identified portions input specification transformed equivalent hardware structures 
instruction sets complete sense instructions implemented set synthesized sequence included instructions 
support argument suppose hamming instruction included particular microprocessor repertoire 
utilize high level language high level language compiler required recognize function call written infinite permutations compile single instruction 
compiler operation may impossible certainly cost effective relative compiler execution time compiler development time just sake rare instruction 
problem approached reverse 
statistically determining native capabilities processor priori general purpose instruction mix statistics fixing silicon determines compile time set operations best suits application 
identified attempt synthesize operations subsequent execution 
simplest form adaptive processing platform constructed conventional microprocessor augmented appropriately array fpgas reap full benefits architecture reconfigurable resource integrated closely core cpu maximize data bandwidth 
difficult component develop system specialized compiler configuration compiler collection complex components examined section 
iii prism prototype system configuration compiler special compiler accepts program input produces hardware image software image 
hardware image consists physical specifications program reconfigurable platform 
software image similar function executable image produced conventional compiler consists machine code ready execution processor code integrates newly synthesized elements execution instruction stream 
relationship components illustrated 
newly generated hardware augments capabilities processor subsequent calls function evaluated function native capability host microprocessor 
prism proof concept system consists configuration compiler reconfigurable hardware platform developed demonstrate viability incorporating adaptation general purpose machine 
information regarding operation compiler sidebar titled prism configuration compiler 
architecture assumed processing platform consists reconfigurable resource integrated closely central processing core 
core processor responsible execution software images coordinating execution synthesized operations 
realize reconfigurable media slower propagation times lower effective gate densities asic counterpart 
reconfigurability aspect devices adds signal propagation delay loading longer critical paths consumes significant device area 
optimum execution performance balance exist executed software executed hardware 
suggests data pass central processor reconfigurable media 
execute synthesized structure steps required 
input arguments pass processor reconfigurable medium 
transfer time governed bandwidth bus interconnecting components 

reconfigurable medium executes operation 
non sequential structures time takes inputs propagate output 

output operation returned processor 
state information generated may stay reconfigurable resource 
gain performance achieved sum times average time needed evaluate function software 
need steps easily pipelined operate concurrently processor activities 
prism hardware platform attempt reconfigurable platform intentionally simple demonstrate utility architecture 
consisted existing processor board armstrong processing node mhz processor second board consisted primarily xilinx fpgas provide excellent means enabling system reconfigure second software control 
boards interconnected bit bus 
synthesized operations evaluated processor explicitly moving function input arguments appropriate fpga bank immediately moving computed result back processor board 
operation accomplished wait states required processor clock cycles complete 
despite gross inefficiencies data movement prototype system exhibited surprisingly performance shown section 
iv results table summarizes compilation run time performance example functions may encountered number applications 
functions identifiable reader useful target functions benefit common applications obscure 
experiments sun optimizing compiler generate code trials prism generate software image trials utilizing prism 
speed achieved prism versus conventional software evaluation listed functions column table 
table see call synthesized hamming function require th time execute prism system evaluated entirely software host processor 
interesting note function common bit reversal routine fft algorithms requires loop logical shifting operations written written case 
compiled configuration function requires logic merely reassignment input pins outputs 
note compile times examples minutes sun sparc ipc workstation 
short compilation time important design issue insure viability prism concept 
actual performance benefit applications functions dependent frequently synthesized structures referenced application 
example function performs core computation digital circuit discrete event simulator 
digital circuit simulator application spent execution time calling executing software prism application perform times faster note prism platform hindered performance relatively slow interface processor core reconfigurable media 
modern microprocessors capable higher bus transfer rates transfer data reconfigurable devices significantly time prototype system 
planned problem curtailed reducing number cycles speed factor case derived application amdahl law gamma delta required access reconfigurable media factor 
additional order magnitude improvement expected 
prism proof concept system certain functions paramount operation compiler demonstrated documented may incorporated version compiler 
time input source code configuration compiler constrained major limitations ffl state global variables currently supported boundary candidate functions passed function arguments local automatic variables may declared freely 
ffl limitations proof concept system require sum sizes input arguments bits fewer 
likewise size return value limited bits 
ffl exit condition loops independent input arguments 
ffl floating point types operations currently supported 
ffl synthesized structure evaluate function directly single cycle 
sequential devices feedback paths currently synthesized structures 
ffl constructs implemented 
include popular switch case constructs 
limitations offer substantial challenge research development full scale compiler 
architecture high level language compiler potential significantly improving execution performance applications 
achieved allowing configuration fundamental operations core processing system adapt computationally intensive portions targeted application 
viability having compilers generate hardware configurations conjunction executable code means user take advantage performance increase offered application specific hardware having hardware designer 
newly synthesized operations targeted ram logic devices provide mechanism fast processor reconfiguration 
function description compilation utilization speed name input bytes output bytes time mins xc fpga factor hamming calculates hamming metric 
bit reversal function 
neuron input net function 
multiply accumulate function 
logic simulation engine function 
ecc error correction coder decoder 
find find input 
piecewise section piecewise linear seg 
computes base log 
table compilation performance results various functions prism compiler running sun sparc ipc workstation 
speed factors represent speed improvement executing mhz armstrong node prism relative node prism 
compilation times include target place route times 
prototype system utilizes commercially available xilinx fpgas facilitate reconfiguration 
excellent devices demonstrating prism principles fpga device designed specifically exploit features architecture support shadow configurations fixed input output structure faster reconfiguration time may essential supporting conventional operating system concepts context switching debugging resource sharing 
implementation prism system developed brown university laboratory engineering man machine systems lems complete operational 
full scale version configuration compiler hardware platform currently development 
hennessy patterson 
computer architecture quantitative approach 
morgan kaufmann publishers 
estrin 
organization computer systems fixed plus variable structure computer 
proceedings western joint computer conference pages 
agrawala 
dynamic problem oriented redefinition computer architecture microprogramming 
ieee transactions computers november 
gokhale holmes kunze lopresti lucas olsen 
building highly parallel programmable logic array 
ieee computer january 
bertin 
programmable active memories 
digital equipment paris research laboratory june 
xilinx san jose california 
programmable gate arrays users book 
gajski 
silicon compilation 
addison wesley reading massachusetts 
tanaka 
harp fortran silicon 
ieee transactions computer aided design june 
silverman 
system application software armstrong multiprocessor 
ieee computer june 

