integrating structured data text relational approach david grossman office information technology washington dc email osf gmu edu frieder department computer science george mason university fairfax va email cs gmu edu david holmes global information systems rockville maryland david roberts office information technology washington dc email seas edu integrate structured data text unchanged standard relational model 
started premise relational system implement information retrieval ir system 
implementing prototype verify premise began investigate performance parallel relational database system application 
tested effect query reduction accuracy queries reduced prior implementation incurring significant loss precision recall 
reduction serves improve run time performance 
comparing results special purpose ir system conclude relational model offers scalable performance includes ability integrate structured data text portable fashion 
increasingly applications integrate structured unstructured data responding requests find articles containing vehicle sales published journals subscribers 
identifying articles containing specified terms requires search unstructured data circulation data stored structured data relational database 
developed prototype integrate structured data text combined resources government industry academia 
key aspects described prototype currently deployed real users part larger system internal revenue service 
supported part national science foundation contract number iri telephone connection 
approach uses relational database system structured data text 
protects large investment relational systems avoiding need purchase special purpose text search systems integrate relational systems 
additionally versions major relational database systems optimized parallel machines available developers employ described approach achieve benefits parallel processing special purpose software 
parallel implementations relational database systems common parallel implementations information retrieval ir systems rare 
implementing information retrieval relational database application provides portable parallel means implementing information retrieval algorithms 
show relational system ir incurs greater overhead special purpose ir systems object oriented database systems 
observed average overhead ratio index file document collection full text application special purpose systems typically ratio 
clearly applications overhead relational model excessive applications described approach cost effective 
additionally constantly increasing availability lower cost storage increasing computational resources cost storage smaller portion total system cost 
evaluate approach implemented prototype sequential database system parallel database machine processors 
implemented tests tipster document collection queries associated 
standard set queries currently available benchmarking information retrieval systems 

encouraged performance measurements pentium mhz processor queries standard megabyte text collection wall street journal articles obtained result seconds 
machine compared relational approach information retrieval system accesses structured data lotus notes 
majority test queries relational approach provided superior performance special purpose commercial system 
parallel machine typically observed processor workloads percent 
believe parallel processing provides scalable method achieve run time performance 
idea relational model implement traditional ir functionality new 
essentially prior efforts suggested changes sql approaches unavailable users database systems reduce portability applications written systems 
additionally change sql removes developer ability leverage investments legacy applications 
previous unchanged sql reported focused solely bibliographic document collections direct predecessor efforts 
working example concerned integration structured data text illustrate discussion documents similar tipster document collection test queries 
effectiveness relational systems structured data established test performance structured data 
example includes relatively little structured data 
show integrate structured data follows substantially complicated structured data integrated conventional techniques 
relations represent document shown 
doc contains structured information document 
doc term models traditional inverted index commercial information retrieval systems 
doc term prox proximity searches 
idf refers automatically assigned weight inverse document frequency assigned term document collection 
standard definition idf 
query contains terms sample query 
term contains frequently occurring terms excluded doc term doc term prox relation basis noise terms 
section provides details relations descriptions 
documents similar taken tipster collection 
modified slightly improve clarity doc 
docno 
wsj docno 
hl 
italy commercial vehicle sales hl 
dd 
dd 

turin italy 
text 
commercial vehicle sales italy rose february year earlier units provisional figures italian association auto makers 
sales association expected rise additional july 
text 
doc 
doc 
docno 
wsj docno 
hl 
ford sho speed vehicle hl 
dd 
dd 

george atlanta 
text 
ford motor announced sho longer include speed vehicle 
text 
doc 
doc doc id doc name date wsj turin italy wsj georgia atlanta doc term doc term prox idf doc id term tf commercial vehicle sales italy rose february year earlier provisional figures italian association auto makers expected additional july 
vehicle 
doc id term offset commercial vehicle sales italy rose february year earlier provisional figures italian association auto makers sales association expected rise additional july 
vehicle 
term idf additional association auto commercial earlier expected february figures italian italy july makers provisional rose sales vehicle year query term term tf vehicle sales term 
structured data text example 
doc contains structured data date doc term doc term prox contain unstructured data 
query structured unstructured data list documents contain terms vehicle sales written january implemented sql ex select doc id doc doc term term vehicle sales date doc id doc id information retrieval relational database systems historical progression prior area described terms extensions structured query language sql proposed user defined operators 
extensions sql relational systems text processing began original implementations relational model 
unpublished manuscript written blair discusses sequel research language precursor sql 
sequel perform boolean keyword retrievals find documents contain word vehicle 
published area macleod crawford 
sequel queries perform keyword searches described sequel extensions accomplish relevance ranking set documents query 
extensions relational model assist ir application proposed macleod 
relevance function assigning measure relevance document query discussed 
relevance function attribute appropriate weight term query document 
weighted retrieval higher weight assigned term significant document query 
discussion weighted boolean retrieval see salton 
tf attribute example doc term query relations serve simplistically assigned weight 
requires extensions relational model includes done nf relational extensions 
systems relations may nested data non normal form 
previous shown embedded relations may model inverted indexes 
embedded relations intended reduce syntactic complexity sql queries required normalized relations 
illustrates embedded relations assist representation hierarchical constructs text 
additionally new simplified query language proposed 
embedded relations provides interesting solution problem integrating structured data text non standard extensions standard relational model required clear query optimization nested relational queries implemented 
user defined operators interest text applications strictly commercial relational database systems diminished user defined operators proposed application specific operations 
operators provide function required application provided database system 
stonebraker examined utility user defined operators text editing application 
thesis described user defined operators typical information retrieval functionality keyword searches proximity searches 
additionally database optimizer enhancements query optimization user defined operators analyzed 
process adding proposed user defined operators required access entire address space dbms operator impact database integrity security 
additionally operator implemented site implemented reducing application portability 
advanced ir functionality unchanged sql today attention standard sql ir processing 
remainder describe advanced ir processing strictly unchanged standard sql 
prior included extensions multiple joins required perform boolean search 
queries developed fixed syntactic length require increasing number joins 
theoretically possible execute join relations implementations impose limits number relations join fall necessary execute query 
describe sql queries standard sql fixed syntactic length compute boolean searches proximity searches relevance ranking 
queries depends structures working example 
essentially query developed perform construction relation models inverted index 
doc term relation models inverted index proximity information 
doc term prox relation models inverted index contains proximity data 
boolean retrieval query computes boolean standard fixed sql ex select doc id doc term query term term group doc id having count term select count query query example works eliminating terms doc term query 
clause filters terms doc term query 
ensures consider documents terms query 
document contains terms query tuples result set result set doc id term 
result set constructed document 
group query partitions result set separate subsets form example 
group contains terms query 
wish return documents contain terms query 
having clause eliminates groups cardinality different query 
ensures terms query group corresponds particular document 
point assumed query contain duplicate terms doc term contain duplicate terms document 
somewhat unrealistic especially considering need proximity searches 
assumed text preprocessor created relations removed duplicates documents queries 
section proximity search method multiple occurrences term document 
account possibility duplicates necessary modify having clause example having count distinct doc term term 
distinct causes duplicate terms document removed 
new query ex select doc id doc term query term term group doc id having count distinct term select count query note boolean constructed removing having clause example 
sql compute tand threshold retrieves documents contain specified terms condition obtained modifying having clause ex select doc id doc term query term term group doc id having count distinct term proximity searches ir systems provide proximity searching basic capability 
slight modification doc term facilitates searches 
proximity request documents contain terms term window size width 
term window size width begins ith term document continues width gamma term 
implement proximity searches doc term prox 
relation similar doc term addition new attribute offset 
doc term prox tuple term original text excluding doc terms filtered preprocessor 
require user place search terms query 
relations doc term prox query established query example find documents contain term window size width includes terms query 
choose definition simpler forms proximity searches show documents contain term term words viewed subset query 
term window may thought sliding window starting term document 
query insists terms query contained document occurrence term query fall term window size width 
document number example terms vehicle italy occur positions respectively 
query requiring terms window size greater equal retrieve document 
specifying width greater maximum document length eliminates proximity constraints results query equivalent query example 
query uses unchanged sql single join perform proximity search ex select doc id doc term prox doc term prox term select term query term select term query doc id doc id offset offset width gamma group doc id term offset having count distinct term select count query query example eliminates terms doc term prox query 
done conditions clause 
necessary join doc term prox evaluate distance term document terms 
third clause condition ensures compare distance terms distinct documents 
document contains terms corresponding term positions tuples conditions clause evaluate true doc id term offset doc id term offset fourth condition clause removes tuples size width 
condition enforces proximity constraint 
rest query similar example 
group partitions result sets corresponding doc id term offset 
having eliminates groups cardinality equivalent cardinality query 
necessary distinct having clause ensure term window contain repeated occurrences terms 
consider request find documents containing terms vehicle sales term window size 
query relation constructed tuple terms 
doc term prox consider execution query example 
conditions clause eliminate terms query 
conditions true tuples doc id term offset doc id term offset vehicle vehicle vehicle sales vehicle sales sales vehicle sales sales sales sales sales vehicle sales sales sales sales vehicle vehicle fourth condition uses difference offset offset eliminates tuples result negative difference fall outside term window 
tuples entire clause evaluate true doc id term offset doc id term offset vehicle vehicle vehicle sales sales sales sales sales vehicle vehicle group partitions result set document id term offset 
double lines illustrate partitioning fixes starting point term window places terms window particular group 
doc id term offset doc id term offset vehicle vehicle vehicle sales sales sales sales sales vehicle vehicle having removes groups contain term window cardinality equal query example 
example group starts offset document contains tuples 
distinct ensures duplicate terms term window counted 
document number returned query 
noted execution clause group may intertwined actual sequence operations may correspond steps described 
explain logic query query entire clause evaluated followed group having 
syntactically query example complex important note invariant regardless number query terms 
additionally single join doc term prox required regardless size query 
computing relevance unchanged sql boolean proximity searches commercial ir systems 
vector space model widely chosen implement unchanged sql rank documents vector space model 
boolean searches simply retrieve documents match particular condition 
relevance ranking algorithm ranks documents retrieved may examined user order computed relevance query 
sufficiently large answer set user able examine documents returned 
vector space model frequently compute measure relevance query document 
vector space model works representing document query term occurrence vector 
cartesian distance query document vector rank documents 
idea documents closest query relevant 
vector document size contains entry term entire document collection 
component vector contains weight computed term document collection 
document term assigned weight frequently occurs entire collection appears document 
weight term document increases appears document appears documents 
key addition database schema required relevance ranking idf relation 
relation stores inverse document frequency idf distinct term document collection 
computed idf log df number documents collection df number documents contain term details definition may 
query provides vector space ranking documents query composed terms query relation 
query simple dot product computation 
variations dot product including dice cosine jaccard computed variations query 
example assumes query relation extended include attributes term tf store terms query number occurrences term 
ex select doc id sum tf idf tf idf query doc term idf term term term term group doc id order desc query example fixed length need developed 
practical experimentation shows query performs variety relational systems 
results provide details performance query 
sequential results study performance approach measured run time accuracy relational database system microsoft sql server running mhz dell pentium megabytes ram windows nt 
evaluated queries wall street journal portion collection comprising megabytes text 
queries required trec conference 
results obtained default system parameters meant provide initial overview actual performance 
additional tuning improve response time 
relational results text preprocessor accepts sgml marked tipster documents outputs flat files form relations 
preprocessor removes terms numbers special characters 
additionally upper case letters translated lower case 
subsequently dbms vendor supplied load utility move data flat files dbms 
comparison implemented queries lotus notes 
chose notes product comparison offers integration structured data text uses search engine topic verity improve search performance 
performance approach dramatically affected selectivity query terms 
frequently occurring terms result degraded performance due required obtain occurrences 
measure impact term selectivity query measure term selectivity vary original query 
terms query sorted frequency entire document collection 
subsequently query variations developed including frequent terms original query varies size query 
refer query threshold 
threshold percent applied original query terms results frequent terms applied reduced query 
execution time performance measurement number relevant documents retrieved important 
system misses relevant documents useless regardless execution speed 
hypothesis query reduction varying thresholds improves run time performance affecting accuracy 
premise queries contain terms occur frequently serve degrade run time performance possibly degrade accuracy 
reducing query remove terms improve run time accuracy 
variations doc term sql server implemented 
full length terms described preceding sections numerical term identifiers 
term identifiers numerical values represent character terms 
average term length collection characters byte term identifier full length terms reduces length tuple bytes 
hypothesis term identifiers improve run time performance 
maintenance term identifiers complicated requires generation term dictionary updated new documents added collection 
tested different inverted indices constructed lotus notes 
product allows users optionally choose stemming removal frequently prefixes suffixes term means building index 
intuitively stemming improve accuracy queries searching term running match documents contain run 
stemming reduces accuracy terms sting stemmed meaningless syllables may falsely match non related terms 
run time results sql server lotus notes 
tested query thresholds experiments 
known bug lotus notes impossible implement queries produce large result set unable obtain results threshold 
seen query threshold increases performance systems degrades 
note threshold reached rate increase number relevant documents retrieved significantly decreases see 
dramatic increase run time shown threshold greater depending application merits high greater thresholds may questionable 
lower thresholds terms query performance sql server superior lotus notes 
threshold sql server performance degrades dramatically 
suspect fact lotus notes uses efficient inverted index lotus notes provide better performance thresholds higher 
overhead costs modeling inverted index relation increase dramatically term selectivity increases 
term occurs times inverted index requires overhead infrequent term relational implementation cost 
doc term relation large term occurs times relation requires large amounts obtain term 
performance relational model query thresholds lower 
threshold percent sql server sql server term notes notes stem theta theta theta theta theta theta average response time varying query thresholds threshold percent sql server notes stem notes number relevant documents retrieved recall theta theta theta theta theta theta theta theta theta theta theta theta precision recall sql server varying query thresholds recall theta theta theta theta theta theta theta theta theta theta theta theta precision recall lotus notes varying query thresholds evaluation retrieval accuracy summarized figures 
indicates number relevant documents obtained queries 
low query thresholds number relevant documents low systems 
increase query threshold number documents retrieved increases dramatically 
reflects additional accuracy obtained adding relatively infrequently occurring terms query 
believe terms assist finding relevant documents relatively infrequent probably noise words 
threshold increases reasonable suspect progressively useful terms added query interestingly number relevant documents increase 
despite dramatically increased required compute higher thresholds yield significantly relevant documents 
figures results standard information retrieval measures precision recall measure accuracy 
precision refers ratio retrieved documents relevant recall refers ratio relevant documents retrieved 
term identifiers result accuracy terms documents retrieved accuracy results implementation sql server provided 
provides precision recall values notes experiment stemming superior result lotus notes 
line figures indicates separate threshold 
low thresholds precision recall relatively low infrequent terms added precision recall increase high thresholds noise terms added precision recall continue increase 
noted relational approach yields performance thresholds 
seen accuracy improve thresholds increased 
relational approach may viable experiments shown may necessary implement thresholds 
parallel results study applicability parallel processing approach measured run time processor dbc 
dbc commercial database machine implements relational database system multiple processors units 
spreading computational requirements number processors goal provide scalable approach large relational database problems 
hypothesis sql implement relevance ranking result balanced workload processors 
parallel information retrieval mature technology 
initial efforts discussed special issue information processing management 
relational model relevance ranking possible mature technology 
sequential approach runtime performance dramatically affected selectivity terms query 
running queries threshold required hour running queries threshold required day 
implemented queries obtain sequential results roughly gigabytes tipster collection 
largest portion collection contains known relevance results 
collecting results query sum cpu time disk processors computed 
highest sum largest factor response time query complete processing completed 
contains maximum cpu obtained queries 
threshold percent dbc max cpu time varying query thresholds accuracy results gigabyte collection summarized figures 
indicates number relevant documents obtained queries retrieval cutoffs documents 
increase threshold large number relevant documents 
continues increase threshold 
move observe dropoff number relevant documents level threshold 
gives precision recall cutoff 
threshold percent dbc number relevant documents retrieved gb hypothesis parallel approach queries run balanced fashion workload processor approximately equal 
balance critical approach truly scalable 
table indicates amount processor load imbalance cpu time disk max min measured query threshold 
seen workloads processors fifteen percent balance 
workload balanced evenly existing processors processors added response time reduced 
due resource limitations unable empirically validate scalability hypothesis 
percent processor imbalance recall theta theta theta theta theta theta theta theta theta theta theta theta precision recall dbc 
gb threshold cpu time disk note data loading improved dbc dbc utility processors ensures data distributed processor fashion prescribed indexes 
typically able load largest relation speed rows second 
comparison experience intel pentium processor running microsoft sql server windows nt typically loads data bulk copy facility rate rows second 
overhead typically storage overhead viewed primary disadvantage relational ir implementations 
document identifier term replicated numerous times doc term appear storage requirements substantial 
observed storage overhead required sql server lotus notes implementations megabyte data storage overhead lotus notes vs sql server system megabytes overhead ratio lotus notes stemming lotus notes stemming sql server sql server terms inverted index lotus notes clearly efficient terms storage 
additional overhead sql server may acceptable additional functionality provided approach 
term identifiers reduces storage overhead surprisingly response time dramatically improve 
computational overhead updating separate term dictionary order assign term identifiers appears large justify associated savings storage 
table indicates storage requirements relations parallel machine 
simplify data loading operation allow easily run experiments different portions collection constructed doc term relations different portions tipster collection 
obtain final results implemented sql section union merge results 
dbc uses hash indices extra storage required index fixed thirteen byte overhead assigned tuple maintain internal hash identifier 
observed storage overhead sections storage overhead dbc section dbms mb original mb avg 
terms doc 
overhead ratio ap disk ap disk doe disk fr disk fr disk wsj disk wsj disk ziff disk ziff disk total gigabytes text relational structures implement required gigabytes storage storage ratio 
key amount relational storage number terms document 
number terms increases likelihood repetition increases 
term repeated document cnt attribute updated new tuple added doc term 
portion collection large documents terms document federal register lowest storage overhead ratios 
portion collection smallest documents department energy abstracts storage overhead ratio 
storage overhead relational system higher inverted index trend industry dramatic reductions cost disk space 
potential reduced software development time ability implement new functionality standard sql potential parallel machine overhead may acceptable applications 
described unchanged sql capable performing variety boolean keyword searches proximity searches relevance ranking 
queries requires fixed number joins regardless number terms query 
possible consider relational model tool ir queries terms 
implementation details experimental prototype compared popular commercial product 
run time results comparable query thresh olds percent approach provides additional functionality unchanged sql may integrate structured data text 
relational approach lends parallel processing relational dbms implemented parallel machines 
results indicate approach scalable believe feasible implement approach large document collections terabyte range parallel dbms approach 
currently working test approach larger document collections 
measured secondary storage overhead required implement relational approach roughly factor compared traditional ir systems 
overhead may acceptable functional advantages approach 
simplistic term identifier approach yielded storage improvement 
reasonable expect sophisticated storage reduction techniques reduce storage requirements 
additionally shown term information retrieval algorithms sql 
approaches grams thesauri passage retrieval implemented straightforward manner latest results text retrieval evaluation conference clear approaches improve precision recall 
terms run time performance additional processing results substantially higher run time 
degrade run time performance obtain improvements accuracy prototype 
explore relational implementation approaches shown yield improvements precision recall 
special issue parallel processing information processing management volume number 
sql ds systems programming manual 

proceedings fourth text retrieval evaluation conference 
stonebraker jeff anton eric hanson 
extending database system procedures 
acm transactions database systems september 
blair 
square specifying queries relational expressions document retrieval language 
unpublished working university california berkeley 
blair 
extended relational retrieval model 
information processing management 
goyal desai sadri 
non normal form universal relations application information retrieval systems 
information systems 
donna harman 
overview third text retrieval conference 
proceedings third text retrieval conference 
lynch stonebraker 
extended user defined indexing application textual databases 
proceedings th vldb conference pages 
macleod 
relational approach modular information retrieval systems design 
proceedings asis annual meeting 
macleod 
sequel language document retrieval 
journal american society information science pages september 

straightforward nf relational interface applications information retrieval 
information processing management 
informix online dynamic server performance guide may 
salton 
parallel text search methods 
communications acm pages february 
salton 
automatic text processing 
addison wesley 
salton yang wong 
vector space model information retrieval 
communications acm 
schek 
data structures integrated data base management information retrieval system 
proceedings eighth international conference large data bases pages september 
stonebraker lynn guttman 
document processing relational database system 
acm transactions office information systems april 

