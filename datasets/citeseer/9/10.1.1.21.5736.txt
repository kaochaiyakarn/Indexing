tcp veno congestion control heterogeneous networks fu thesis submitted partial fulfillment requirements degree doctor philosophy information engineering chinese university hong kong july chinese university hong kong holds copyright thesis 
person intending part materials thesis proposed publication seek copyright release dean graduate school 
ii tcp ip tcp ip tcp tcp tcp veno tcp tcp veno tcp tcp veno veno adsl iii tcp veno tcp veno www tcp veno veno tcp reno tcp veno iv success internet attributed directly large number useful applications running 
tcp ip underlying communication protocols enabling applications 
despite widespread deployment protocols tcp ip continues hot research topic teams academia industry 
centered adapting protocols wireless environments ease deployment convenience users high bandwidth brought maturing advanced technologies ieee lan 
big wave mobile internet wireless play necessary part internet infrastructure corner 
original tcp design assumes packet loss induced congestion 
assumption lead significant performance degradation wireless networks random loss due environmental noise 
detrimental effect random loss tcp performance known outstanding problem remains unsolved 
dissertation proposes studies novel congestion control mechanism called tcp veno able deal random loss effectively 
veno differs conventional tcp major way monitors congestion level estimation algorithm uses knowledge refine congestion control algorithm tcp 
specifically refines multiplicative decrease algorithm reno setting congestion threshold key control parameter tcp perceived congestion level network fixed drop factor packet loss detected refines linear increase algorithm attempting stay longer operating region bandwidth fully utilized 
extensive network testbed experiments live internet measurements conducted consistently show veno achieve significant performance improvement reno different scenarios 
throughput improvement high typical wireless setting random loss 
detailed investigation indicates improvements brought harms concurrently running reno connections veno connections achieve higher throughput bandwidth reno connections anyway 
addition wireless networks veno achieve better improvement relative reno high latency networks networks including satellite links asymmetric networks networks adsl access link 
importantly tcp veno involves modification sender requiring changes receiver protocol stack intermediate router nodes 
easily deployed 
operator web server example replace protocol stack veno requiring clients 
comprehensive study leads veno achieve better performance reno loss high latency asymmetric environments coexist concurrent reno connections degrading performance reno connections deployed easily minor modifications sender side algorithm 
project called global internet measurement environments launched measure tcp veno performance large scale 
tcp veno implemented netbsd enhanced version selective sack option implemented netbsd seeing www broadband cuhk edu hk site details 
vi family memory ms kan dao yun grandmother vii years started postgraduate education chinese university hong kong sit back think number people influenced helped complete dissertation am overwhelmed 
doubt impossible help 
hope remember helped difficult rewarding process 
foremost supervisor prof student years ago leading involve exciting research area 
perfect writing skills creative idea quick thinking impress deeply 
ideal advisor respect terms technical advice terms professional advice 
particularly gives invaluable suggestions timely support research 
choice career path greatly influenced hope live high standards 
benefited greatly group research partners chung ling chi lui hung invaluable simulations experiments happy discussions 
thesis possible 
comments dr vern paxson lawrence berkeley lab anonymous reviewers sigcomm proven valuable 
special prof tony lee prof jack lee serving qualifying exam dissertation committees prof michael chang serving dissertation committee 
study period chance contact prof tony lee times 
deep thinking insightful views research society broadened outlook taught lot 
viii particularly express sincere gratitude prof victor li university hong kong ph student zhang chen kind help research testing 
am indebted prof peter kind help live internet measurement insight comments seminar prof bob li interest switch new angle attending class switching theory 
hope day join research area 
serious academic image prof wing wong am grateful prof raymond yeung leading information engineering department prof tang xiao ou care ta 
lot practical testing required stage research express alan peter ken gordon provide valuable suggestions convenience quickly setting testbed 
am grateful dr wong ji long prof li xing hua university kind help project allow install sites testing 
ms leung ms man tang ms moon cheung ms leung general office kind provide numerous help care study period 
efforts possible 
happy times particular times monthly gathering different restaurants missed forever long remember colleagues broadband lab past chung lui hung dr chan man chi dr yue dr philip li sze ho pang denny yip siu jun patrick wu walter yang qing zhang liang nam chung ho friends 
really lucky ph study period set www china net support prof prof kenneth young prof kuo prof wing wong prof peter department technicians 
site popular site world ix overseas chinese students including taiwan singapore hong kong 
achievements obtained tremendous support help old new friends gi ming yang yang shi jun zhou hai gong wu feng dr zhou chong hua dr dong 
jiang bin zhen bin yu qing liu dan yu xing tong dr zhang huan hong kong zhu qing liu canada wang jun chen xia dr wang ji long friends usa europe 
dr li dr song li hua dr zhang huan dr ma yi guang li qiang li give lot happy times study period express faithful friend physical advisor yao li provide invaluable help body training 
zhou dao hong dr yan dong sheng sharing stock trading experience missed times sharing dr simon chan leung ada chow husband give wife invaluable help care 
remember friends sun microsystem sum frank lau howard wang carl pan zhu colleagues networking center shanghai tong university 
special prof kan min prof huang hung chia invaluable care kind help studying working period shanghai friends example forever 
owe special debt gratitude parents family 
reason able get far 
words express gratitude parents sisters give support love country 
value hard taught overcome life 
wife zhang qiao give support love want excel 
baby enriches life 
contents chapter background problem statements motivation contributions dissertation performance degradation tcp vegas asymmetric networks tcp veno structures dissertation chapter review congestion controls tcp reno overview aimd additive increase multiplicative decrease algorithm algorithms tcp reno slow start fast retransmit fast recovery retransmission timeout tcp reno variants summary tcp vegas overview vegas congestion avoidance mechanism algorithms vegas new retransmission mechanism modified slow start congestion avoidance mechanisms suffering tcp vegas xi chapter tcp veno mechanism asymmetry rerouting problem persistent congestion overview distinguishing congestive non congestive state set ssthresh veno ai refined additive increase algorithm initial slow start chapter experimental evaluation overview experiment settings performance evaluation tcp veno evolution wireless networks impact random loss rate impact normalized buffering impact propagation delay multiple exiting connections tcp reno veno tcp veno evolution asymmetric networks window evolution tcp reno tcp veno comparison veno reno asymmetric networks internet measurement measurement tcp veno wireless lan measurement tcp veno performance wan enhancing tcp veno sack option chapter tcp veno implementation overview state estimation evolution phase iss ss ai ff xii filter calculation estimated number packets bottleneck buffer window adjustment refining additive increase refining multiplicative decrease chapter veno instance class tcp protocols desirability veno practical standpoint deployability compatibility flexibility summary summary contributions directions recommendations drafts xiii list tables table throughput utilization tcp vegas reno table throughput utilization tcp vegas reno reverse buffer size table number retransmitted packets number timeout occurrences number triggered fast retransmit table number retransmitted packets number timeout occurrence number triggered fast retransmit table throughput utilization tcp veno reno asymmetric networks random loss table throughput utilization tcp veno reno asymmetric networks random loss table measurements cu tsu tcp reno tcp veno table measurements cu hku tcp reno tcp veno table characteristics tcp veno reno vegas xiv list figures tcp reno window evolution rough evolution tcp reno slow start fast retransmit algorithm vegas window evolution simulation topology tcp throughput versus degree asymmetric network acks vegas connections different rtt packet sequence number window evolution existing reno vegas window evolution tcp vegas network configuration veno window evolution reno window evolution tcp veno evolution tcp reno evolution real networks experiment network topology average sending rate different loss probability ranging tcp reno tcp veno comparison throughput tcp veno tcp reno networks different packet loss rates throughput vs normalized buffer size non lossy networks lossy networks loss rate pkt throughput vs propagation delay non lossy networks throughput vs propagation delay lossy networks loss rate pkt sequence packet sent evolution vs time xv fig 
average throughput vs number mixed reno veno connections non lossy network lossy network window evolution asymmetric network random loss tcp reno tcp veno window evolution asymmetric network random loss tcp reno tcp veno link utilization vs bandwidth asymmetry random loss link utilization vs bandwidth asymmetry random loss wireless lan topology wireless lan measurement wan measurement topology main functions tcp ip layer evo state evolution tcp connection simple flow chart tcp output function part flow chart tcp input function xvi chapter background transmission control protocol tcp reliable connection oriented order protocol 
tcp connection virtual circuit computers conceptually telephone connection reliable data transmission 
sending host divides data stream segments 
segment labeled explicit sequence number guarantee ordering reliability 
host receives segment sends cumulative acknowledgment ack return notifying sender data preceding segment sequence number received 
segment received receiver sends indicating sequence number segment expected 
outstanding data acknowledged period time sender timeout retransmit unacknowledged segments 
early tcp implementations simple sliding window flow control mechanism congestion control 
observing series congestion collapses jacobson jac introduced innovative congestion control mechanisms tcp :10.1.1.15.3262
tcp version called tcp tahoe includes slow start additive increase multiplicative decrease fast retransmit algorithms 
years fast recovery algorithm added tahoe form new tcp version called tcp reno 
tcp reno currently dominating tcp version deployed internet 
dissertation term tcp refers tcp reno indicated 
tcp window refers amount outstanding data transmitted sender 
roughly window divided round trip time maximum throughput achieved time 
controlling window size carefully sender control amount traffic pumps network congestion level network 
transmission process sender generally increases window size linearly exponentially packet loss experienced point window reduced large amount single step window increased gradually 
way tcp continually probes network maximum potential transmission rate packet loss indicate transmission rate exceeded available bandwidth network 
congestion control algorithms turned successful preventing congestion collapse allow applications run robust manner internet years 
exaggeration say tcp key technology underpinning success internet 
jacobson pioneering considerable research done 
specifically early periods researchers attempted come ideal congestion control mechanism combat tcp inherent oscillation problem resulted additive increase multiplicative decrease algorithm jac :10.1.1.15.3262
works include dual wc card jain tri wc packet pair kes tcp vegas bop bp cca tcp santa cruz pj :10.1.1.133.3305
considering practical deployment issues performance heterogeneous networks congestion control mechanisms proposed early periods compare tcp reno may certain negative impacts 
tcp reno remains dominant algorithm practice 
late periods researchers turn refining recovery algorithm embedded tcp reno packet loss detected 
fruitful results achieved 
new proposals included tcp newreno hoe fh sack ff fl mmfr fack mm lk rate halving mm lt abf 
algorithms designed replace reno congestion control mechanism enhance fast recovery algorithm 
basic functionality tcp recommended rfc rfc rfc rfc 
tcp extensions recommended rfc rfc rfc 
recommendations proposed time frame years 
problem statements motivation internet grown tremendously 
clear tcp congestion avoidance mechanisms jac jac necessary powerful sufficient provide service circumstances 
instance wireless networks traditional assumption packet loss indicator network congestion may invalid bit errors main reason packet loss 
likewise asymmetric networks adsl directions connection vastly different bandwidth previous implicit assumption congestion happens forward path longer valid 
tcp performance may suffer current heterogeneous internet assumptions valid lms 
subsection summarize main challenges currently faced tcp latest progress 
random loss tcp default behavior motivated jac jac defined bra ste aps assume packet losses due congestion trigger congestion control algorithms losses detected 
large fraction losses due transmission bit errors case wireless communications packet losses longer indicators congestion 
loss induced bit errors non congestion reasons referred random loss defined lm 
particular random loss leads significant throughput deterioration tcp connection pf ft product random loss probability pf square product bandwidth delay larger lm 
past decade efforts eliminate negative impacts caused random loss 
try hide non congestion related losses tcp sender 
idea approaches problem local wireless part link solved locally splitting bb snoop bal different link layer solutions pa 
attempt tcp sender aware existing wireless hops packet losses due congestion 
sender avoid invoking congestion control algorithm non congestion related losses occur eln bal ecn flo freeze tcp gm tcp hack blk wk 
aforementioned solutions yield performance improvement 
potential practical setting limited 
main considerations inter operation existing infrastructure 
realize goal ideally changes required intermediate routers routers belong organizations making unavailable modifications 
practical difficulty greatly limit deployment intermediate node techniques eln ecn 
wireless links referred lossy links characterized high bit error rates opposed wired links bit error rates low 
second important practical consideration encrypted traffic 
network security important encryption adopted widely 
ip payload encrypted intermediate nodes base station router may know traffic carried payload tcp 
approach snoop bal new snoop hy splitting bb depends base station perform mediation fail traffic encrypted destroy semantics 
schemes tcp hack blk decoupling approach wk proposed true semantics require intermediaries participate flow control 
knowledge packet corruption occurs packet occurs data header portion packet data portion usually larger header portion bytes 
schemes devised recover uncorrupted headers receiver determine packet corruption congestion taken place network 
notification receiver sender retransmit corrupted segment immediately prevent sharp reductions sending rate 
algorithms achieve significant improvement lossy networks deployments concerns requiring changes sender receiver 
known sack tcp variants mm fmmp mm quickly recover multiple packet losses single window round trip time significant benefit burst loss situations 
sack sender performs congestion control reduces window sharply packet loss detected 
obviously may unnecessarily lower throughput nature loss random loss congestion loss 
result random losses considerable small average window size small number outstanding segments 
compared solutions implemented tcp level link level solutions lossy networks pa proposed 
forward error correction fec codes automatic retransmission systems arq wireless link 
fec introduces relatively constant coding delay bandwidth overhead path correct forms bit corruptions 
arq uses resend control mechanism similar tcp cause tcp integrate extended latencies rtt estimate causing assume far higher latency path case may trigger retransmission time arq retransmitting data 
mechanisms inadequate allow tcp function efficiently forms wireless systems 
asymmetry today internet common tcp throughput limited congestion reverse path 
asymmetric networks adsl capacity reverse path significantly lower forward path 
defined lms say tcp connection experiences asymmetry ratio forward data rate data packets second reverse data rate acks second larger 
tcp reno depends reception acks pacing forward data sending rate 
acks arrive sender fast data sending rate throttled forward path congestion free resulting utilization available bandwidth forward path lms 
quite number efforts looking performance issue tcp asymmetric networks 
studied tcp reno performance function normalized asymmetry ratio factor lms showed asymmetry exacerbates reno performance 
multiple connections share link reverse path congested unfair allocation bandwidth difference connections quite considerable 
year balakrishnan proposed schemes acc af sa af reducing acks frequency smoothing infrequent arrivals acks received improve tcp performance asymmetry 
acc ack congestion control uses gateways reverse link aid congestion control 
tries detect impending congestion tracking average queue size time window past informs receiver dynamically vary delayed ack factor decrease frequency acks constrained reverse link 
similarly af ack filtering router technique remove fraction possibly earlier accumulated acks reverse buffer reduces ack rate 
acc af reduce negative asymmetric effects extent tcp slow growth window size tcp window increase number acks amount acks 
sa sender adaptation ar ack reconstruction proposed reduce negative impact caused reduced ack frequency 
biggest problem schemes may require changes tcp sending side receiving side addition bottleneck gateway 
modifications destroy semantics tcp restrict wide deployment real networks 
contrast header compression jac implemented ip layer points physical link violate tcp congestion control mechanisms 
general principle scheme packet headers flow identical values slowly changing values 
replacing header fields connection identifier agreed compressor decompressor tcp ip packet headers compressed bytes bytes 
way degree asymmetry significantly reduced tcp performance degrade 
scheme requires operation terminal router asymmetric link difficulties widespread deployment 
viable solution called ace ack cwnd estimation proposed deal asymmetric problem 
assumption long rtt significantly larger amount time needed send window packets tcp sender send close window worth packets round trip duration 
turn implies receiver estimate congestion window cwnd counting number packets received round trip time 
cwnd estimation receiving side tcp receiver vary number packets acknowledged ack reduce number acks transmitted narrow bandwidth link 
asymmetry influence alleviated extent 
solution obvious advantage previous works glp aer bal require special network support modification tcp receiver stack 
authors implemented ace linux platform tested small testbed network 
performance improved significantly high degree asymmetry 
higher latency earth orbit geo satellite links characterized high latency 
satellites usually placed altitude km resulting oneway link delay ms round trip delay approximately ms 
high latency may significantly increase slow start duration especially transient period hk ags deteriorates performance short file transfer substantial way 
approach reducing amount time required slow start large initial window segments recommended rfc 
researchers investigated potential caching congestion information order start new connection larger initial window size pk tou 
method overcome tcp inefficiencies higher latency environment multiple tcp flows transfer file 
tcp connections speed slow start times provide large congestion window il hah 
multiple tcp connections improve tcp performance situations may cause congestive collapse due aggressive behaviors addressed ff 
currently short file transfer due web access takes large portion internet traffic 
approaches tcp including spoofing stp hk attempt reduce overcome adverse effects higher latency networks adding gateways hide negative impacts caused higher latency links 
known higher latency causes unfairness fj connections traversing higher latency networks compete connections 
connections small rtt round trip time increase rate quickly grab available bandwidth 
bias goes long rtt connections factor rtt lms 
short modifying network routers isolate protect competing flows viable solution proposed date 
lot additional summarized rfc exploited 
include byte counting versus ack counting senders delayed acks slow start sack fack red ecn contributions dissertation contributions dissertation divided areas study performance degradation tcp vegas asymmetric networks 
tcp veno congestion control mechanism proposed deal heterogeneity internet particularly wireless networks 
veno implemented validated measurements real networks live internet contribution takes small part written thesis 
second contribution partially inspired study 
vegas uses innovative congestion avoidance algorithm maintain backlog data queue size bottleneck link lower threshold upper threshold 
shortcoming congestion avoidance packet loss avoidance algorithm embedded vegas compete tcp reno tries grab bandwidth possible packet loss detected 
vegas widely deployed practice large installed base reno particular current heterogeneous internet fcl 
trying maintain equilibrium packet backlog level vegas needs estimate backlog amount 
run innovative backlog estimation formula vegas conjunction basic algorithm reno trying maintain equilibrium backlog level know backlog level time packet loss detected 
gives indication cause loss 
roughly backlog level high loss due congestion backlog level low loss caused random phenomena 
knowledge reduce window size accordingly 
insight essence veno algorithm proposed thesis 
performance degradation tcp vegas asymmetric networks area principal contributions summarized follows 
study tcp vegas performance asymmetric networks demonstrate vegas erroneously converges operating region available bandwidth utilized large margin 
analysis simulation show fundamental reason vegas degradation proactive congestion detection mechanism 
contrast throughput improvement claimed bp vegas throughput significantly lower reno asymmetric networks comparatively reno suffers network asymmetry performance degradation severe :10.1.1.41.8565
worse connections running vegas reno exist compete network vegas experiences large negative bias suffers severe penalty 
difficult deploy vegas practice large installed base reno stack current internet 
tcp veno main contribution thesis new version tcp protocol called tcp veno proposed 
improve tcp performance quite significantly heterogeneous networks particularly wireless links form part networks 
proposing idea tcp veno key innovation veno enhancement reno congestion control algorithm estimated state connection vegas 
scheme significantly reduces blind reduction tcp window regardless cause packet loss 
refined additive decrease algorithm proposed veno improves utilization bandwidth conservative mechanism aggressive 
positive effects quite significant asymmetric networks networks 
specifically veno differs conventional tcp ways refines multiplicative decrease algorithm reno setting slow start threshold ssthresh perceived state connection congestive non congestive fixed drop factor packet loss occurs uses refined linear increase algorithm adjust congestion window evolution congestion avoidance 
implementing veno tcp netbsd tcp veno implemented making small modifications source codes tcp senders packet backlog estimation 
similar tcp vegas veno maintains timestamp queue outstanding segments 
veno perform accurate rtt calculation obtain accurate estimation network state 
timestamp structure defined veno record sent segment length sending time millisecond resolution 
note clock resolution conventional tcp ms coarse grained demonstrating advantages tcp veno experiments real networks live internet conducted numerous experiments real networks 
results experiments clearly indicate tcp veno achieve significant improvement adversely affecting concurrent tcp connections network 
improvement obtained wireless networks asymmetric networks high latency networks 
live internet measurements conducted computers located hong kong united states china validate tcp veno 
salient feature veno require inspection inception tcp packets intermediate nodes 
modification legacy tcp reno stack restricted sending side making deployment veno quite easy context large reno 
instance owners web server wants leverage better performance veno needs substitute tcp stack server requiring client computers 
structures dissertation structure thesis follows 
chapter review tcp reno tcp vegas 
section review reno congestion control algorithms slow start additive increase multiplicative decrease algorithm retransmit timer timeout exponential back mechanism 
variants reno tcp discussed section 
section go vegas innovative congestion avoidance mechanism interpret angle 
study vegas performance asymmetric networks section measurement rtt calculate actual expected rate 
tcp veno time system call millisecond resolution record sending time sent segment 
demonstrate vegas erroneously converges operating region available bandwidth largely utilized 
chapter propose tcp veno potential way deal heterogeneity networks 
veno circumvents fundamental problem accurately differentiating congestion loss non congestion loss congestion state discrimination 
refined additive decrease algorithm proposed veno 
chapter contains numerous experimental results validate efficiency tcp veno 
comprehensive evaluation veno performance studied lossy networks asymmetric networks high latency networks 
tests real networks demonstrate veno improved performance attributed better utilization bottleneck link performance concurrent reno connections suffer existence veno networks 
live internet measurements back results 
chapter discuss tcp veno enhanced selective sack option 
implementations veno chapter 
discuss estimate connection state tcp veno code implement veno refined additive increase refined multiplicative decrease mechanisms state estimation 
chapter generalize state estimation tcp veno bigger picture 
argue desirability veno various practical 
conclude main dissertation point needs done 
chapter review congestion controls best effort network internet notion admission control resource reservation control imposed network load total number packets reside network 
best effort network higher network load called congested 
network state queued packets built router interface buffers may lead buffer overflowing due limited buffer size router 
compared random loss defined lm due bit errors non congestion reasons dropped packet induced buffer overflowing called congestion loss 
network points sharing best effort network need respond congestion implementing congestion control ensure network stability 
network may driven congestion collapse network load stays extremely high throughput reduced close zero rfc 
objective congestion control network endpoints estimate probing network available bandwidth ensuring network stability 
past decades main congestion control algorithms proposed tested real networks 
called tcp reno widely today called tcp vegas 
tcp reno tries detect available bandwidth continually increasing window size buffers connection path network segments lost 
congestion detection tcp reno uses self induced packet loss signal indicate network congested reduces sending window accordingly 
reno implementations mechanisms detect incipient stages congestion losses occur attempt prevent loss 
mechanism reactive proactive respect 
reno congestion control kind reactive congestion control mechanisms 
appealing alternative widely adopted predict congestion happen reduce rate hosts send data just packets discarded due buffer overflow 
vegas employs incipient congestion detection steers system away congestion loss occurs 
attempts prevent congestion loss 
contrast reno reactive congestion control kind proactive congestion control mechanisms 
subsection summarize congestion control mechanisms embedded tcp reno tcp vegas hope illuminate possible implications tcp veno design chapter 
tcp reno overview tcp reno jac jac slow start congestion avoidance algorithms widely deployed internet 
fig slow start phase window incremented ack received packet loss experienced point window halved linear increase algorithm takes packet loss experienced 
additive increase multiplicative decrease leads periodic oscillations congestion window round trip delay queue length bottleneck buffer path 
additive increase multiplicative decrease aimd algorithm governs major portion evolution tcp connection short file transfers 

tcp reno window evolution section draws heavily related rfcs published papers 
aimd additive increase multiplicative decrease algorithm aimd algorithm adjustment phases 
traffic load steady decreasing algorithm probing phase 
internal traffic increases linearly absorb released resources probes state bottleneck 
congestion signal duplicate acks retransmit timer timeout received algorithm decreases window size half 
dramatic reduction speed adjustment congestion occurs leads large oscillations transmission rate 
pattern continually increasing decreasing congestion window continues lifetime connection 
fact plot value cwnd window size function time get sawtooth pattern illustrated 
important thing understand additive increase multiplicative decrease source willing reduce congestion window faster rate willing increase congestion window 
contrast additive increase additive decrease strategy window incremented packet ack arrives decreased timeout occurs 
shown cj additive increase multiplicative decrease necessary condition congestion control mechanism stable 
kb time seconds fig 
rough evolution tcp reno details aimd algorithm described follows new data acknowledged cwnd congestion window increased 
specifically cwnd larger ssthresh slow start threshold cwnd incremented cwnd time ack received segment size cwnd maintained bytes 
linear growth cwnd 
increase cwnd segment round trip time regardless acks received round trip time 
congestion occurs congestion indicated packet loss detected retransmission timer timeout reception thee duplicate acks half current window size saved ssthresh 
called md multiplicative decrease algorithm 
additionally congestion indicated timeout cwnd set segment slow start 
scheme tcp slowly increases congestion window size data lost congestion window halved 
helps drain excess packets network 
pattern increase decrease constrains window fluctuate system equilibrium 
changes network may disturb equilibrium multiplicative decrease scheme helps return data transmission near equilibrium point 
sense threshold ssthresh estimator system equilibrium point 
choice key performance aimd algorithm 
algorithms tcp reno slow start tcp slow start initiated start tcp connection retransmission timeout 
objective slow start enable tcp sender discover available bandwidth gradually increasing amount data injected network initial window size segment prevents tcp sender network large burst data 
slow start efficient self clocking mechanism automatically adjusts system bandwidth delay variations start connection 
fig 

slow start tcp implementation tcp window minimum congestion window cwnd receiver advertised window segments 
initially sender starts transmitting segment waits ack 
ack received congestion window incremented segments sent 
segments acknowledged congestion window increased 
provides exponential growth cwnd 
sense name slow start misnomer 
slow start tcp quickly reach approximate equilibrium point network system 
point capacity internet reached intermediate router start discarding packets 
tells sender congestion window gotten large ends slow start phase 
point fast recovery loss detected duplicate acks slow start timeout occurs may take setting ssthresh half loss window hoe ad proposed estimated initial ssthresh reduce overcome severe buffer overflow caused exponential growth congestion window 
accuracy sender side estimated ssthresh greatly limited ap compared estimation receiver side ap results scalability problem yielding better estimation sender side estimation :10.1.1.28.9234
viable solution called smooth start proposed smooth transition exponential linear growth phases congestion window ssthresh estimator estimated ssthresh inaccurate date 
simple sender smooth start reduces chance buffer overflow produces bursty traffic slow start 
needs verified real networks 
tcp uses acks pace transmission packets 
uses arrival ack signal packets left network safe insert new packet network adding level congestion 
tcp said self clocking 
rfc suggests initial window size segments rfc suggests min max bytes order reduce duration startup period specifically connections running long propagation delay networks 
loss window lw loss window size congestion window tcp sender detects loss duplicate acks retransmission timer 
fast retransmit fast recovery idea fast retransmit straightforward 
time data packet arrives receiving side receiver responds sequence number acknowledged 
packet arrives order tcp acknowledge data contains earlier data arrived tcp resends sent time 
second transmission called duplicate ack 
tcp generates duplicate acknowledgments dupack segment received 
fig 
fast retransmit algorithm illustrates duplicate acks lead fast retransmit 
example destination receives packets packet lost network 
destination send duplicate ack packet packet arrives packet arrives 
simplify example think terms packet worrying sequence numbers byte 
sender sees third duplicate ack packet reception single dupack sufficient evidence segment lost datagram networks duplicate acks received row strong indication segment lost 
tcp performs retransmission appears missing segment waiting retransmission sent receiver gotten packet retransmits packet 
note retransmitted copy packet arrives destination sends cumulative ack including packet back source 
fast retransmit fast recovery algorithms usually implemented 
fast retransmit algorithm triggered duplicate acks received ssthresh set half window fast recovery algorithm governs transmission data non duplicate ack arrives 
retransmit lost segment set cwnd ssthresh plus artificially inflates congestion window number segments left network receiver buffered 
additional duplicate ack received increment cwnd 
artificially inflates congestion window order reflect additional segment left network 
transmit segment allowed new value cwnd receiver advertised window 
ack acknowledges intermediate segments sent lost segment receipt third duplicate ack cwnd set ssthresh termed window 
fast recovery phase ai additive increase algorithm takes starting latest setting ssthresh 
timer expire 
threshold dupacks chosen compromise danger spurious loss detection timely loss recovery 
sender maximum segment size size largest segment sender transmit 
value maximum transmission unit network path mtu discovery md algorithm rmss see item factors 
size include tcp ip headers options 
fast retransmit efficient heuristic triggers retransmission dropped packet sooner regular timeout mechanism 
fast retransmit mechanism designed replace regular timeouts just enhance facility 
chapter discuss tcp veno refines congestion indicator perform accurate window adjustment fixed drop factor window reduction reno 
retransmission timeout tcp maintains estimate round trip time rtt time takes segment travel sender receiver plus time takes ack data travel receiver sender 
variable rto retransmit time maintains value time wait ack sending segment timing retransmitting segment 
rto small tcp retransmit segments unnecessarily 
estimate large actual throughput low segment gets lost sender retransmit timer goes 
estimate mean smoothed round trip time maintained low pass filter 
assume rtt smoothed rtt estimate rtt measured rtt received ack non retransmitted segment 
mean deviation close estimate standard deviation computed order filter rtt rtt set equation 
smoothed rtt updated rtt rtt rtt value suggested 
jacobson jac suggests rto computed rto rtt traditionally tcp implementations taken rtt measurement time typically rtt :10.1.1.15.3262
timestamp option ack rtt sample 
rfc suggests tcp connections utilizing large congestion windows take rtt samples window data avoid aliasing effects estimated rtt 
tcp implementation take rtt measurement rtt 
fairly modest congestion window sizes research suggests timing segment lead better rtt estimator ap :10.1.1.28.9234
note tcp retransmit timer coarse granularity 
typical value timer granularity ms adverse effect short rtt connections 
example ms rtt connection waits ms timeout trigger 
significantly impacts throughput 
number research studies variable rtt connections conducted different timer granularity values determine best value 
researchers ap pa shown finer clock granularities msec perform somewhat better coarse granularities karn timer back algorithm kp 
algorithm doubles rto value backs retransmission timer expires retransmitted packet 
timer backoff regarded resort connection leave congestive state 
tcp reno variants multiple losses occur window fast retransmit fast recovery algorithms able quickly recover missing packet hoe ff 
order quickly recover packet losses number enhanced loss recovery algorithms proposed sack ff fl mmfr fack mm newreno hoe fh lk 
partial trigger retransmissions hoe tcp selective sack option mmfr 
acks cover new data data outstanding loss detected worthwhile emphasize despite sophisticated recovery algorithm employed tcp reno variants halve window size packet loss detected fast retransmit 
effect unnecessarily lowering throughput loss due bit errors network congestion 
specifically links wireless high error rates suffering obvious 
tcp newreno reno partial acks bring sender fast recovery resulting timeout case multiple segment losses 
newreno tcp sender receives partial ack come fast recovery ff fh hoe 
assumes segment immediately acknowledged segment lost lost segment retransmitted 
multiple segment loss scenario newreno tcp wait retransmission timeout continues retransmit lost segments time receives partial ack 
newreno multiple fast retransmit single window data occur retransmit timeout ff 
rfc allowed newreno modification tcp fast recovery phase 
sack tcp way deal multiple segment losses tell sender segments arrived receiver 
selective acknowledgments sack exactly 
receiver uses ack sack option indicate sender contiguous block data received order receiver 
sack extension duplicate sack fmm added sack tcp option 
allows tcp data receiver sack option report receipt duplicate segments 
environment minimal packet replication network sack allows tcp sender reasonable inferences round trip time packet retransmitted retransmission necessary unnecessary 
sack blocks received sender maintain image receiver queue segments missing receiver 
scoreboard set track transmitted received packets previous information sack option 
transmitted segment scoreboard records sequence number flag bit indicates segment 
segment bit turned require retransmit segments bit sequence number highest segment available retransmission 
segment removed retransmission buffer cumulatively acknowledged 
sack tcp implementation uses congestion control algorithms reno newreno 
main difference sack reno behavior event multiple segment losses 
sack tcp refines fast retransmit fast recovery strategy tcp reno multiple lost packets single window recovered rtt 
tcp fack forward acknowledgments fack mm mm developed decouple congestion control algorithms data recovery algorithms uses sack accurately control outstanding data network bursty reno sack recover episodes heavy loss better reno sack 
name forward acks comes fact algorithm keeps track correctly received data highest sequence number 
version fack rate halving mm 
limited transmit number researchers mor bps bal lk observed tcp loss recovery strategies congestion window tcp sender small 
duplicate acks arrive receiver fast retransmit algorithm triggered situation occurs congestion window small large number segments window lost 
tcp sender previously data queued transmission limited transmit algorithm calls tcp sender transmit new data arrival consecutive duplicate acks 
detailed limited transmit algorithm described rfc 
bps roughly retransmissions sent busy web server sent rto expires handled fast retransmit 
addition rto retransmissions avoided sack course continue disambiguate reordering genuine loss 
contrast limited transmit algorithm rto retransmissions dataset avoided 
summary section review tcp reno algorithms aimd slow start fast retransmit fast recovery retransmit timer timeout mechanism 
tcp congestion avoidance strategy additive increase multiplicative decrease mean additional errors encountered congestion window recovers completely percent reduction effect downward spiral congestion window due additional percent reductions 
downward spiral hold congestion window capacity path endpoints error rate decreases allowing full recovery additive increase 
full recovery consecutively sharp reduction window spend round trip times tcp employs sluggish additive increase algorithm increase segment rtt 
course downward spiral occurs error rate constantly high congestion window remains small 
differentiating random loss congestion loss particularly important action tcp take cases entirely different case random loss need tcp adjust congestion window 
hand tcp sender detects congestion immediately reduce congestion window avoid making congestion worse tcp vegas overview tcp reno repeatedly increases load imposes network effort find point congestion occurs backs point 
words tcp needs create losses find available bandwidth connection 
contrast tcp vegas employs quite different congestion control tcp reno 
basic idea vegas detect early stage congestion routers source destination packet loss occurs incipient congestion predicted observing difference expected throughput actual throughput additively decrease sending rate incipient congestion detected additively increase sending rate incipient congestion detected keep unchanged 
window evolution tcp vegas shows smooth compared tcp reno seeing captured mbytes file transfer distant hosts internet 
noticed section heavily drawn published papers fcl 
cam kbps ime seconds fig vegas window evolution vegas congestion avoidance mechanism intuitively tcp window size cwnd increases throughput connection increase 
congestion measured throughput close expected throughput measured throughput smaller expected throughput 
vegas attempts predict onset congestion monitoring difference measured throughput expected throughput diff expected actual expected cwnd basertt basertt minimum measured rtt round trip times 
usually rtt segment sent connection actual measured throughput sender cwnd rtt rtt actual round trip time tagged packet 
strictly speaking expected defined best possible throughput basertt minimum measured rtt 
shall adhere term previous papers vegas 
essence vegas bop bp increment cwnd diff basertt smaller preset value decrement diff basertt larger preset value detailed diff basertt cwnd increase congestion window size diff basertt cwnd cwnd decrease congestion window size cwnd cwnd congestion window remains unchanged constant values packet unit set experimentation 
vegas main idea try maintain extra data queue size bottleneck router buffer lower threshold upper threshold order reach high throughput avoid packet overflow 
see vegas attempts maintain queue size bottleneck link range consider 
queue size zero rtt basertt 
basertt basically sum transmission delays propagation delays forward reverse paths queuing delay equal zero 
backlog queue denoted forward path available capacity rtt basertt 
estimated cwnd rtt vegas 
approximated cwnd basertt rtt diff basertt 
estimated vegas decrements cwnd smaller estimated vegas increases cwnd larger leave cwnd unchanged 
see vegas attempts keep 
rewrite rtt basertt basertt bandwidth delay product bdp cwnd just backlog starts build bottleneck link 
substituting cwnd rtt left side cwnd bdp see source increments decrements window total backlog 
may interpretation tcp vegas 
algorithms vegas section brief retransmission mechanism modified slow start algorithm embedded tcp vegas 
details please refer bop bp 
new retransmission mechanism vegas employs new retransmission strategy bop detecting packet loss earlier reno decreases cwnd multiplicatively factor reno receiving duplicate ack vegas resends corresponding segment having wait duplicate acks reno segment fine grain timer expired 
vegas records millisecond resolution timestamp segment transmits 
receiving ack vegas retrieves corresponding segment timestamp calculates segments rtt millisecond resolution 
vegas computes fine retransmission timer timeout just reno computes coarse grain average rtt plus times variance 
contains reno coarse grained timeout code case mechanisms fail recognize lost segment 
retransmitted segment acknowledged vegas reduces congestion window multiplicatively drop factor 
non duplicate ack received second retransmission vegas checks see time interval segment sent larger fine retransmission timer timeout value 
vegas retransmits segment 
technique vegas tries avoid consecutive invocations window reduction multiple packet losses occur rtt 
modified slow start vegas uses modified slow start algorithm 
original slow start congestion avoidance need losses realize onset congestion network 
modified slow start tries find correct window size incurring loss 
done exponentially increasing window rtt rtt calculate diff change congestion window 
soon vegas detects queue buildup slow start transitions congestion avoidance stage 
congestion avoidance mechanisms tcp window size queue length exhibit clear oscillating behaviors traffic demands exceed available resources 
oscillation inherent additive increase multiplicative decrease algorithm measure probing resource changes 
jac tends push utilization bottleneck maximum 
efforts congestion control mechanisms dual wc card jain tri wc cam tcp vegas bop bp paid steering system away periodic congestion losses hope connection operates equilibrium point 
considering tremendous heterogeneity internet ideal congestion controls fail real networks 
window jain card jain approach increased segment size decreased eighth gradient delay window curve evaluate optimal point system 
performance window control mechanism studied deterministic simulation model connection wide area network 
note window changes adjustment oscillates optimal point 
dual scheme wc defines optimal point queue length corresponding delay congestion signal 
congestion window normally uses fine tuning adjust window size increases cwnd ack received 
algorithm decrease congestion window eighth current rtt greater average minimum maximum rtts seen far rtt 
timeout detected algorithm assumes substantial traffic increase severe congestion occurred 
uses reduce window size similar tahoe timeout action cwnd set ssthresh set half window 
tri scheme proposed wc searches operating point continuous evaluation current throughput gradient 
rtt tri increases window size segment compares throughput achieved throughput window segment smaller 
difference determines increase decrease window 
tcp santa cruz pg designed transmission media heterogeneity mind 
timestamp option rfc operates summing relative delays session updating measurements discrete intervals 
bandwidth probing closely related packet pair kes uses spacing acks determine available bandwidth networks :10.1.1.133.3305
similar proactive cam vegas bp monitoring available bandwidth permits detection incipient stage congestion allows congestion window increase decrease response early warning signs reach target optimal operating point 
suffering tcp vegas tcp vegas bop bp employs fundamentally different congestion control algorithm reno proposed claim percent throughput improvement reno 
author adl reproduced claims bop bp showed vegas offered higher throughput reno reducing packet loss need retransmission 
researchers demonstrated tcp vegas outperformed reno means analysis simulation 
tcp vegas suffers problems inherently employed congestion avoidance mechanism 
section mainly address suffering related tcp vegas asymmetry problem rerouting problem persistent problem 
defined lms say tcp connection experiences asymmetry ratio forward data rate data packets second reverse data rate acks second larger lms 
vegas erroneously converges operating region available bandwidth forward path utilized large margin fcl 
second problem issue rerouting 
tcp vegas uses estimate propagation delay basertt adjust window size important tcp vegas connection able accurate estimation 
rerouting path may change propagation delay connection result substantial decrease throughput 
third important issue stability tcp vegas 
tcp vegas connection attempts keep packets network estimation propagation delay lead connections inadvertently keep packets network causing persistent congestion 
la el 
investigated issues 
asymmetry subsection skipped readers read fcl vegas asymmetric suffering content part covered 
initial stage thesis study tcp vegas performance degradation asymmetric networks fcl point degradation fundamentally due vegas proactive congestion control mechanism 
show vegas connections experience large negative bias competing reno connections bandwidth bottleneck link 
simulation topology seen follows 
packet src mbps router ms mbps router mbps ms mbps fig 
simulation topology ack dst 
shows simulation network 
drop tail routers 
src tcp senders dst tcp receivers 
links labeled bandwidth capacity delay 
forward link routers capacity data packets second propagation delay seconds fifo buffer size bf packets 
reverse link transmit acks second propagation delay seconds fifo buffer hold br acks 
section ns simulator developed lawrence berkeley lab test performance reno veno 
simulations assuming source infinite data send receiver receives data packet generates ack contains sequence number expected packet 
typical data packet size typical ack size bytes 
normalized asymmetric factor lms defined asymmetric network 
example forward link bandwidth mbps reverse link bandwidth kbps size data packets acks respectively kbytes acks bytes 
packets acks 
know case asymmetric network bottleneck link reverse link forward link 
referring equation section rtt ack backlog queue reverse link 
estimated cwnd rtt 
vegas algorithm zoom equilibrium state ack fluctuates data flow rate packets second 
extra capacity forward link left unused 
utilization forward link caused bandwidth limitation reverse link principle sender able send data forward direction 
vegas distinguish bottlenecks forward link reverse link zooms suboptimal solution case 
asymmetric situation proactive congestion control algorithm attempting prevent ack loss packet loss 
throughput degradation tcp vegas asymmetric networks table shows changes reno vegas throughput utilization different asymmetric degree 
see non asymmetric network tcp vegas outperforms reno forward utilization higher reno bop bp adl 
asymmetric environment quite different 
vegas throughput deteriorates seriously reno forward link utilization lower reno 
table throughput utilization tcp vegas reno mbps bf packets br acks ms throughput pkt throughput ratio forward link utilization vegas reno asymmetry order better understand trend asymmetry effect fig 
shows vegas reno throughputs function fixed reverse link speed acks system model considered link delay ms 
vegas throughput min 
larger forward link capacity heavily utilized 
simulation shows reno throughput nearly larger 
fig 
tcp throughput versus degree asymmetric network acks note fig 
reno vegas full capacity forward path 
higher degree asymmetry severe penalty throughput suffers 
reno shows better adaptability asymmetric networks vegas suffers 
reverse buffer size effects tcp vegas asymmetric networks asymmetric networks vegas tries maintain acks reverse buffer 
table contains simulation results clearly show tcp throughput varies reverse buffer size 
table throughput utilization tcp vegas reno reverse buffer size packets acks bf ms br acks reno vegas throughput packets forward link utilization tcp vegas reno performance gets worse larger reverse buffer size br 
intuition follows 
vegas small reverse buffer br increase drop rate acks set simulation 
missing acks effect increasing reverse link speed 
receiver skipped sending acks 
reverse buffer size usually set table vegas algorithm prevent ack drop throttling transmission data packets sender 
absolute term buffer size really small expect network equipment larger buffer size 
expect vegas performance poor practice done 
comparison simulated reno results shown table 
note reno throughput affected reverse buffer size 
dropping acks slow window increase tcp reno reno window increase number acks received amount acks received lms 
different vegas conservative window adjusting policy aggressive policy reno alleviate asymmetry effect extent 
reno shows better results vegas 
table find vegas utilization forward link significantly lower reno especially reverse buffer size relatively small 
multiple connections asymmetric networks argues vegas throughput depend propagation delay reno bias favor connections long delays 
hm concludes vegas provides fair services connections independent different propagation delay 
asymmetric networks vegas keeps fairness property total throughput limited min 
fig 

vegas connections different rtt pkts bf br ms connections network model started sequential order src dst round trip propagation delay ms src dst round trip propagation delay ms src dst round trip propagation delay ms 
seen differences connections smaller vegas 
reno tcp widely deployed current internet better evaluate vegas evolution practical environments need study compatibility reno connections vegas connections addition compatibility vegas connections 
ahn adl observed vegas receive fair share bandwidth due conservative congestion control mechanism competing reno connections 
mo mla explained tcp reno leaves little buffer connections aggressive nature tcp vegas conservative tries occupy little buffer space 
asymmetric networks vegas connection competing reno connection 
vegas biased reno nearly able transmit data packets seen fig 
shows vast throughput difference reno vegas connection exist network 
fig 

packet sequence number window evolution existing reno vegas pkts bf br ms vegas uses proactive congestion control mechanism prevent self induced packet losses 
kind loss prevention completely negative asymmetric environments vegas conservatively maintains smaller ack queue size reverse path data packets queue forward path seeing 
reno connection joins aggressive window growth lead reno acks accumulated revere buffer regardless ack losses 
behavior aggressive competition forward path non asymmetric networks window increased overflow occurs forward path point reno window cut halves 
intermittent ack loss asymmetric networks cause reno throttle data sending rate forward direction cumulative property acks 
continue increase cwnd 
course loss acks vegas connection improves vegas throughput extent 
accumulating acks buffer cause observed rtt increase continuously lead vegas decrease window quickly 
referring 
tcp reno connection uses reverse buffer space bottleneck node signal congestion actual forward buffer overflow occurs timeouts induced ack loss reno window larger vega tcp vegas falsely regards accumulation acks reverse path signal onset congestion adapts window conservatively 
summary investigation reno shows flexibility adaptability vegas asymmetric networks 
asymmetry significantly degrades vegas throughput causes incompatibility tcp vegas reno 
modification proactive congestion control mechanism vegas face large challenges deployed internet currently quite heterogeneous 
rerouting problem problem tcp vegas handle rerouting connection 
recall tcp vegas basertt smallest round trip delay estimate propagation delay path 
routing path connection changed round trip delay changed 
new routing path shorter propagation delay cause serious problem tcp vegas packets experience shorter round trip delay basertt updated 
hand new route connection longer propagation delay connection able tell increase round trip delay due congestion network change route 
knowledge host interpret increase round trip delay sign congestion network decrease window size 
opposite source 
persistent congestion tcp vegas uses basertt estimate propagation delay route performance sensitive accuracy basertt 
connections overestimate propagation delay due incorrect basertt substantial impact performance tcp vegas 
consider scenario connections overestimate propagation delays possibly drive system persistently congested state 
suppose connection starts existing connections network congested queues backed 
due queuing delay backlogged packets packets new connection may experience round trip delays considerably larger actual propagation delay path 
new connection set window size value believes expected number backlogged packets lies fact backlogged packets due inaccurate estimation propagation delay path 
scenario repeat new connection possible causes system remain persistent congestion 
exactly opposite desirable scenario 
network congested want new connections congestion level worse 
situation may arise tcp reno tcp tahoe 
happen tcp vegas due fine tuned congestion avoidance mechanism 
chapter tcp veno mechanism overview tcp reliable connection oriented protocol implements flow control means sliding window algorithm 
tahoe reno tcp jac jac ss slow start ca congestion avoidance algorithms adjust window size enjoyed success date 
algorithms increasingly stretched emergence heterogeneity internet 
assumption packet loss indicator network congestion may apply heterogeneous networks packet loss may induced noise link error reasons network congestion 
defined lm call packet loss random loss 
propose congestion control mechanism suitable networks heterogeneous properties called tcp veno 
requires modification tcp sender interoperable existing tcp improvement achieved having connection employ tcp veno 
algorithm differs conventional tcp ways dynamically adjusts slow start threshold ssthresh perceived state connection congestive non congestive opposed fixed drop factor reno tahoe vegas packet loss encountered uses refined linear increase algorithm adjust congestion window evolution congestion avoidance 
refer implementation tcp tcp veno 
section refined multiplicative decrease algorithm tcp veno addressed 
section proposes refined additive increase algorithm veno section slow start veno 
distinguishing congestive non congestive state set ssthresh differentiating congestion loss non congestion loss fundamental problem remains unsolved tcp 
ability perform different measures type loss yield significant performance improvement 
section put forward technique solve problem 
past decade efforts eliminate negative impacts caused random loss 
solutions divided main categories 
consists hiding lossy parts networks splitting snooping improving link quality fec adg ags 
second type solutions enhance tcp recovery techniques deal packet losses 
example sack tcp ff fl mmfr flo variants fack mm sack fmmp rate halving mm recover multiple packet losses single window round trip time 
recovery techniques newreno fh ff hoe lk sending rate sack tcp connection halved packet loss detected 
effect unnecessarily lowering throughput loss due bit errors network congestion 
efforts proactive congestion control bp wc kes jain helps steer system away congestion avoiding packet congestion loss 
systems occurrences packet losses due random bit errors congestion 
tcp vegas example 
tcp vegas sender compares measured expected actual rates detect impending congestion 
fig 
window evolution tcp vegas shows conceptually throughput versus congestion window cwnd curve tcp vegas connection network configuration supposing traffic links generated single connection src dst 
maximum forward path throughput unit packets second forward link capacity packets maximum reverse path throughput unit acks second forward link capacity acks 
adhere terms expected rate actual rate basertt adopted bp 
cwnd small actual throughput keep expected throughput diff basertt cwnd basertt cwnd rtt basertt updated rtt equal basertt basertt propagation delay connection links 
crucial point cwnd seeing fig actual rate growth slower expected rate growth tcp window increasing 
queue starts build bottleneck router buffer rtt starts move value due queuing delay 
queue allowed overflow congestion loss incurred 
vegas uses diff basertt estimate number packets accumulated bottleneck buffer 
upper threshold packets queuing processing vegas thinks tcp connection evolved congestive state proactively reduces window linearly segment rtt 
lower threshold packets queuing vegas increase window linearly 
window keeps unchanged set set terms buffers 
ideal window adjustment vegas avoid packet overflowing reaches maximum utilization bottleneck link 
packet losses vegas considered induced non congestion reasons 
similar reno rigidly interprets packet losses due congestion vegas rigidly interprets packet losses due reasons 
matter fact considering tremendous heterogeneities current internet implicit assumptions rigid interpretations wrong course tcp transmission 
vegas scheme provides clue differentiate congestive non congestive state basic reno scheme 
allows modify reno scheme accordingly form called veno scheme 
algorithm setting ssthresh depending congestive non congestive state detected packet loss occurs packet loss detected fast retransmit diff basertt random loss due bit errors occurred ssthresh ssthresh congestive loss occurred packet loss detected retransmit timeout timer ssthresh set half current window slow start performed performs action reno corresponds window size packet loss detected fast retransmit retransmit timeout timer 
fundamentally different tcp vegas window adjustment tries constraint window fluctuation system equilibrium tcp veno uses incipient congestion detection method estimate network state congestive non congestive refines multiplicative decrease mechanism reno 
bp diff basertt declare connection experiencing congestion packet losses incurred state due non congestion reasons window reduced 
diff basertt hand packet losses considered induced congestion reason 
packet losses really caused network congestion fact connection trapped congestive state extent packets accumulated bottleneck buffer waiting processing available bandwidth fully utilized time 
window halved similar reno 
implicit state indication tcp veno adopts flexible congestion avoidance mechanism current window halved sense congestion may network may relax network know congested 
implementation approximate order quick bit shift computations 
say tcp connection congestive state available bandwidth connection path fully utilized packets accumulated bottleneck queue processing note clock resolution conventional tcp ms coarse grained measurement rtt calculate actual expected rate 
tcp veno millisecond resolution timestamp recorded segment transmits connection leaves initial slow start stage 
detailed implementation discussed section 
shows window evolution single connection network depicted 
random loss rate induced bottleneck link maximum segment size bytes round trip delay ms bottleneck bandwidth kbps 
time packet loss due bit errors veno reduces current window factor 
packet losses induced bit errors due network congestion reached maximum window size packets connection 
cases regard congestion loss tcp connection trapped congestive state 
window halved 
referring lower curve packets queuing processing bottleneck router 
time packet loss occurs due buffer overflowing veno sets ssthresh 
contrast referring reno mechanically halves window packet loss occurs 
fig 
network configuration veno window evolution reno window evolution extensive experiments real networks live internet measurements chapter verify heuristic method distinguish packet loss types extent lossy environments obtains improved performance 
may doubt improvement attributes aggressive window adjusting mechanism packet loss 
chapter argue veno works harmonically reno steal bandwidth reno connections non lossy environment 
veno ai refined additive increase algorithm veno refines additive increase phase reno forcing tcp connection stay longer operating region bandwidth fully utilized 
reduces self induced congestion loss reno 
implementation simple follows additive increase period diff basertt available bandwidth utilized cwnd cwnd cwnd new ack received diff basertt available bandwidth fully utilized cwnd cwnd cwnd new ack received figures show window evolution veno reno connection experiments campus network 
client host red hat linux lab modem pool university computer service center connect server host netbsd reno server host netbsd veno located lab 
round trip time server client server client network configuration ms detected traceroute 
files kbytes downloaded server client server client sequential order 
considering modem speed kbps set maximum segment size bytes order see window evolution clearly 
fig 
tcp veno evolution tcp reno evolution real networks seen veno employs reno linear window increase algorithm cwnd cwnd cwnd new received ack tcp connection switched congestion avoidance phase slow start time recovery phase ends time growth speed kept critical point time estimated number bottleneck buffer packets calculated diff basertt seeing lower curve 
veno window growth rate halved increases cwnd new ack received new ack received 
fact tcp veno regards critical point alert network congestion occur continues probe extra bandwidth slower window growth rate packet loss occurs 
sharp contrast vegas window decreasing scheme adopted critical point reached 
subtle difference called refined additive increase rai algorithm yields performance improvement deferring congestion loss decreases occurrences congestion 
evident trace experiment congestion loss decreased excluding packet losses resulted initial slow start 
see cycles window oscillation veno reno 
refined additive increase algorithm combines advantages reactive proactive congestion control mechanisms 
tcp veno benefits lot distinguishing network states 
may ask question conservative window increasing policy linear increase phase justify angles 
referring vegas interpretation diff basertt implication available bandwidth utilized time network trapped state congestion impending packets bottleneck buffer 
decrease window growth rate order leave space joining connections 
traffic joining refined additive increase algorithm defers early coming self induced congestion loss force tcp connection stay equilibrium region longer utilizing bottleneck link available bandwidth utilized connection time 
second reno widely deployed current internet modified tcp version conform specifications defined rfc rfc rfc 
difficult introduced current internet 
veno continues increase window imminent congestion monitored slower growth speed reno obviously complies reno satisfies rule addressed rfc standards 
initial slow start start phase connection tcp reno exponentially increases sending rate packet loss experienced 
loss taken implicit signal rate grown large papers hoe pax ad attempt determine amount bandwidth available new connection order avoid surge packet loss 
ap analyzed algorithms evaluated efficiencies detail :10.1.1.28.9234:10.1.1.28.9234
tcp veno employs initial slow start reno doing estimation initial ssthresh advance 
reason simple start phase sufficient dealing short lived flows dominating current internet traffic 
note modifications veno described section section apply initial slow start stage 
emphasize veno refines aimd mechanism reno version 
parts reno including initial slow start fast retransmit fast recovery computation retransmission timeout back algorithm remain intact 
chapter experimental evaluation overview throughput fairness main metrics tcp evaluation 
chapter reports analyzes results real network experiments live internet measurements 
results show tcp veno achieve significant improvements throughput wireless networks asymmetric networks high latency networks 
study veno behavior competing reno connections bandwidth bottleneck link network experiments 
extensive real network experiments live internet measurements give strong indication tcp veno connections exist reno connections 
demonstrated veno better throughput attributed better utilization available bandwidth stealing bandwidth tcp reno connections 
discuss enhance tcp veno incorporating sack option cfl 
data dissertation generated tool developed called capture tcp stack variable analyze collected data help tools tcpdump dump ws 
refer www broadband cuhk edu hk site details 
conclude veno significant throughput improvements reno different networks compatible current de facto standard reno tcp 
section experiment settings 
section evaluate tcp veno performance various angles 
section live internet measurements included validate tcp veno 
section enhancement tcp veno incorporating sack option 
experiment settings shows experimental network dummynet hb 
src tcp senders run tcp reno veno netbsd 
dst tcp receivers red hat linux installed 
links labeled bandwidth capacity delay 
drop tail router set freebsd embedded hb command configure forward buffer size bf backward buffer size br fifo discipline forward bottleneck bandwidth propagation delay reverse bottleneck bandwidth propagation delay different random packet drop rates artificially induced embedded system command freebsd 
experiments assume sources infinite data send 
packet direction src src mbps ms mbps ms performance evaluation experiment network topology section study performance tcp veno lossy networks asymmetric networks networks higher latency 
extensive experiment results demonstrate tcp veno compatible current de facto tcp significant throughput improvement different networks 
tcp veno evolution wireless networks br dummynet bf study effect random packet loss tcp veno performance 
compared reno veno shows significant improvements situations 
dst mbps ms dst ack direction impact random loss rate fig 
shows evolution average sending rate tcp connection running network model different loss probabilities ranging buffer size router set link speed mbit round trip propagation delay ms 
maximum segment size bytes 
axis sending rate tcp connection axis time axis segment loss probability 
duration experiments 
packet loss rate relatively smaller evolutions veno reno similar 
loss rate close pkts corresponds bit error rate bit segment size bytes bit segment size bytes veno shows significant improvements tcp reno 
sending rate averaged interval ms 
average sending rate different loss probability ranging tcp reno tcp veno better observe throughput difference tcp reno tcp veno different packet loss rates throughput vs loss rate ranging pkts plotted 
mbytes file transferred run 
parameters experiment setting 
shown throughput tcp veno higher tcp reno different random loss probabilities 
particular loss rate pkts throughput tcp veno kb higher tcp reno kb 
mainly due veno refined multiplicative decrease algorithm performs smart window adjustment current state estimation connection blindly halving window fast retransmit triggered 
throughput kbytes bw mbps rtt ms buffer size packet loss rate reno veno fig 
comparison throughput tcp veno tcp reno networks different packet loss rates 
addition see results diagram 
result tcp connection running lower lossy environments loss rate pkt veno obtains small throughput improvement reno result heavy lossy environment close pkt veno throughput reno matter fact low random loss situation effect congestion loss dominates veno performs window reduction reno drop factor 
random loss heavy tcp reno tcp veno maintain self clocking experience frequent timeouts timeout situations tcp veno tcp reno operate algorithm 
explanations verified experiment data 
known throughput measurement straightforward metric gauge performance tcp 
capture detailed behavior tcp connections 
addressed af real networks researchers may need measure loss rate evaluate modified tcp aggressive 
improvement tcp algorithm due overly aggressive behavior expense tcp connections throughput performance tcp algorithm throughput networks may low 
practice loss rate approximated measurement number retransmitted packets depending timeouts experienced tcp connection fast retransmit triggered 
developed statistics easily obtained seeing table 
table number retransmitted packets number timeout occurrences number triggered fast retransmit mbps ms rtt ms file size random loss pkts reno veno throughput kb timeout triggered fast 
triggered retransmitted 
pkts referring table tcp veno generally retransmits fewer packets experiences fewer timeouts triggers fewer fast retransmits reno 
reduced retransmitted packets indicate bandwidth efficiently utilized 
similarly reduced timeouts indicate tcp save wasting idle time connection improve utilization bandwidth 
timeout caused multiple packet losses window 
dealt sack option referring section 
number triggered fast retransmit indicates connection aggressive conservative 
specifically packet reordering seldom occurs fast transmit mainly triggered packet loss due buffer overflow 
window increased aggressively fast retransmits triggered vice versa 
referring table veno behavior conservative reno verified multiple connections experiments section live internet measurement section 
specifically referring mechanisms addressed chapter refined additive increase rai refined multiplicative decrease rmd small throughput improvement lower loss environment loss rate pkts mainly caused rai slows growth rate additive increase extends connection duration system equilibrium resulting reduced congestion loss reduced timeout 
higher loss environment loss rate close pkts veno significant improvement reno mainly achieved rmd performs window reduction connection deemed non congestive state 
exception case loss rate pkts timeout occurrence retransmitted packets number triggered fast retransmit experienced veno little reno 
explanation tcp veno reno suffer timeout severely due frequent multiple packet losses single window chu studied improve tcp veno situation incorporating sack options 
kind heavy loss rarely occurs practical situation considering error recovery techniques fec arq employed link level 
general veno throughput improvement reno achieved efficient utilization bandwidth aggressively grabbing bandwidth 
impact normalized buffering lm normalized buffer size usually defined ratio bottleneck buffer size bandwidth delay product bdp physical meaning normalized buffer size follows 
bandwidth delay product interpreted amount buffered data transmission pipeline sender receiver congestion 
maximum amount data transiently buffered transmission link queuing router buffer 
normalized buffer size relates maximum amount buffered data bottleneck queue relative amount data flowing transmission links connection path 
subsection impact different normalized size investigated studying throughput changes retransmitted packets 
shows throughput vs normalized buffer size network configuration set mbit propagation round trip delay ms maximum segment size bytes bottleneck buffer size ranges respectively corresponding normalized buffer size 
file size mbytes 
throughput kbytes random loss bw mbps rtt ms normalized buffer size delay means propagation delay experienced tcp connection veno reno throughput kbytes random loss rate bw mbps rtt ms normalized buffer size veno reno fig 
throughput vs normalized buffer size non lossy networks lossy networks loss rate packets obvious difference tcp reno tcp veno non lossy networks 
lossy networks show tcp veno obtains significant improvement tcp reno 
better understand evolution tcp veno connection reno connection tool table show number retransmitted packets timeouts experienced tcp connection number triggered fast retransmit 
table number retransmitted packets number timeout occurrence number triggered fast retransmit mbps ms rtt ms file size mo random loss lossy reno veno normalized buffer size bursty loss efficiently dealt tcp sack options ff referring section 
throughput kb retransmitted 
pks timeout triggered fast 
triggered throughput kb retransmitted 
pks timeout triggered fast 
triggered noticed reno veno suffer severe degradation performance normalized buffer small matter networks non lossy lossy employed seen 
referring table number retransmitted packets significantly higher normalized buffer 
bursty loss due small bottleneck buffer dominates part packet losses 
frequently experiencing multiple packet losses single window veno tcps reno tcps maintain self clocking turn timeout recovery scheme recover lost packets 
situation heavy loss severely degrades performance tcp reno veno 
real networks small buffer rare 
normalized buffer large timeout frequency significantly reduced fast retransmit dominates packet loss recovery 
referring table normalized buffer size number triggered fast retransmit significantly higher timeout occurrence regardless connection running lossy non lossy networks 
notice non lossy environment number triggered fast retransmit number timeout occurrence number retransmitted packets veno connection experiences experienced reno connection 
statistic data clearly indicate veno tcp employing refined aimd bit conservative reno tcp better utilization bottleneck link 
contrast lossy networks veno bit aggressive experiences fast retransmit packets retransmitted employing refined additive increase multiplicative decrease algorithm 
aggressiveness allows tcp veno achieve improvement reno seen table 
aggressive behavior reasonable cause bias reno connections see section 
note occurrences retransmitted packets retransmit timer timeout fast retransmit non lossy networks 
maximum socket buffer size limited advertised window receiver buffer size kb 
buffer size larger maximum socket buffer size generally buffer overflow occur buffer size larger maximum possible window size 
impact propagation delay experiment series section investigates impact propagation delay tcp veno performance 
setup resembles setup previous experiments 
varied round propagation delays ms ms ms ms ms ms ms corresponding bottleneck buffer size 
normalized buffer sizes 
considering satellites orbit geo way propagation delay ms choose ms maximum round trip propagation delay 
parameters configured way 
random loss generated network 
veno reno evolves similar behavior networks different propagation delay 
suffer degradation high latency 
throughput kbytes throughput kbytes packet loss rate bw mbps normalized buffer size rtt ms reno veno packet loss rate bw mbps normalized buffer size rtt ms reno veno fig 
throughput vs propagation delay non lossy networks lossy networks loss rate packets shows tcp veno obtains significant improvement tcp reno lossy networks different propagation delays 
round trip propagation ms veno obtains throughput kb improvement reno kb multiple exiting connections tcp reno tcp veno throughput retransmitted packets metrics transport protocol evaluated 
metric fairness important goal tcp design connection fairly share bottleneck 
fairness defined jain follows 
fairness bi bi bi fraction bandwidth taken connection shared bottleneck link total number connections traversing bottleneck link simultaneously 
value fairness ranges corresponding equal best allocation connections 
experiment subsection topology maximum segment size bytes 
verify compatibility tcp veno tcp reno run mixture tcp connections see captions sharing common bottleneck link mbps bf br round trip time ms 
shows sequence number evolution reno connections run simultaneously transferring mbytes files shows results reno connections red curve veno connections blue curve run nearly starting time transfer mbytes file 
random loss assumed cases 
shown graphs veno competes resources reno fair manner stealing bandwidth reno 
fig 
sequence packet sent evolution vs time reno connections random loss networks reno veno connections random loss networks reno veno connections networks random loss reno veno connections networks random loss show results experiments random loss rate observe evolution reno connections close negatively biased veno connections 
veno exhibits significantly superior performance reno connections 
time evolution diagram conclude veno improvement reno connections attributable efficient utilization available bandwidth brought stealing bandwidth aggressively reno connections 
careful examination see veno connections share bandwidth fair manner 
fairness veno connections compatibility reno connections supported data 
throughput kbytes throughput kbytes random loss random loss reno veno reno veno fig 
average throughput vs number mixed reno veno connections non lossy network lossy network measured throughput total connections mixture reno veno connections non lossy lossy networks network configuration rtt ms bottleneck bandwidth mbps buffer size 
shows average throughput connection tcp reno tcp veno 
axis represents number reno connection mix 
example point marked axis experiment includes reno connections veno connections 
lower curve diagram average throughput reno connections upper average throughput veno connections 
illustrate standard deviation different combination reno veno 
diagrams important results obtained 
result fairness metrics 
points reno connections veno connections reno veno fair standard deviation small 
combination fairness property reno connections veno connections kept small standard deviation induced 
second important result curves nearly horizontal regardless combination reno veno connections 
significance observation bandwidth reno connections starved counterpart connections tcp veno vice versa matter network environments employed 
third important result veno obtains little higher throughput reno non lossy environments 
lossy networks significant improvement reno 
achievements attributed efficient utilization available bandwidth 
tcp veno evolution asymmetric networks section study tcp veno performance asymmetric networks 
experiment results clearly show tcp veno suffers significantly degradation tcp reno asymmetric situations 
definition asymmetry refer section 
window evolution tcp reno tcp veno shows veno reno congestion window evolution random loss 
data segment size bytes 
forward bottleneck link mbps backward bottleneck link kbps bandwidth asymmetric factor 
round trip propagation delay set ms buffer size bf br 
tcp veno transfer mbytes file seconds improvement tcp reno transfer time seconds 
transmission period veno retransmits packets reno packets 
veno experiences triggers fast retransmit reno times 
experiences timeout 
results indicate veno higher throughput obtained better utilization link 
reno veno window evolution veno stays longer additive increase phase experiences fewer oscillations reno 
obviously brought veno refined additive increase algorithm 
aggressive reno ai obtains improvement asymmetric networks contrary intuition 
fig 
window evolution asymmetric network random loss tcp reno tcp veno shows window evolution tcp veno reno asymmetric networks random loss rate 
situation veno finish transferring mbytes file seconds improvement compared reno transfer duration seconds 
veno retransmits lost packets experiences timeouts triggers fast retransmit contrast reno packet retransmissions timeouts fast retransmits 
data verify veno improvement achievement attributed efficient utilization bottleneck bandwidth 
veno window evolution shows fewer oscillations smaller oscillation amplitude reno fig 
window evolution asymmetric network random loss tcp reno tcp veno comparison tcp veno tcp reno asymmetric networks better understand veno behavior asymmetric networks experiments conducted 
table shows throughput changes different asymmetric factors 
set experiments reverse bottleneck bandwidth fixed kbps forward bandwidth varied asymmetric factor 
round propagation delay set ms 
forward reverse buffer sizes 
throughput mbps forward link utilization utilization improvement percentage 
pkts 
table throughput utilization tcp veno reno kbps bf br ms random loss reno veno asymmetry forward link utilization forward link non lossy network bandwidth asymmetric factor reno veno fig 
link utilization vs bandwidth asymmetry random loss referring table higher asymmetric factor lower utilization forward bandwidth 
reno veno performance suffers asymmetry veno experiences degradation improvement reno 
retransmitted packets reduced nearly half compared reno 
conducted set experiments asymmetric network random loss rate pkts bottleneck links forward path reverse path 
network configuration parameters 
network environment tcp veno benefits refined additive increase algorithm refined multiplicative decrease algorithm 
referring veno throughput obtains improvement reno compared improvement non lossy environment 
time veno suffers lost packets percentage retransmitted packets veno relatively smaller 
throughput mbps forward link utilization utilization improvement percentage 
pkts table throughput utilization tcp veno reno kbps bf br ms random loss forward link reno veno asymmetry utilization forward link lossy network reno veno bandwidth asymmetric factor fig 
link utilization vs bandwidth asymmetry random loss internet measurement small scale tests conducted preceding section order understand behavior tcp veno different situations 
live internet measurements section 
performance tcp veno wireless lans wans measured 
measurement tcp veno wireless lan designed meet needs mobile users require continuous wireless lan connectivity 
experiment base station model networking adapter model plugged laptop snap antenna see experiment topology 
fig 
wireless lan topology base station located room laptop room 
distance meters 
laptop client download mbytes file data server connected ethernet switch 
round trip time laptop server ms traced traceroute 
shows throughput measurements day 
wireless link laptop base station embedded tcp connection path 
generally throughput veno connection kbps improvement reno kbps contrast maximum data rate mbps 
throughput kbps experiment testing times fig 
wireless lan measurement average retransmitted packets veno connection packets reduction compared packets reno connection 
average timeout occurrences reduced times times run 
developed tool average number triggered fast retransmit greatly reduced times times corresponding reduction 
gathered data strongly suggests veno improvement reno attributed efficient utilization bottleneck bandwidth congestion loss reduction timeout reduction 
matter fact ways veno connection refined aimd employed conservative reno connection particular non lossy lower loss situations 
confirmed wan experiment 
veno reno measurement tcp veno performance wan conduct live internet measurement internet 
set server cu chinese univ hong kong tcp veno reno installed clients separately located tsu hua university china hku hong kong university uc berkeley 
fig 
wan measurement topology mbytes file transferred hosts set testing 
table shows results sets tests cu tsu different periods day 
sets tests day run experiments reno veno time slot indicated table 
experiment tcp reno connection tested finished tcp veno connection started minute 
mean intervals experiments minutes 
experiments repeat experiments finished 
values throughput timeout retransmitted packets trigger number fast retransmit showed column table averaged times experiments reno veno 
totally ran experiments days implementation users able choose different tcp versions socket function 
monday friday 
general trends results days similar 
table shows measurement results day 
round trip time traced traceroute tsu cu ms ms variations different experiments 
maximum segment size bytes 
table measurements cu tsu tcp reno tcp veno measurement time slots reno veno throughput kb timeout triggered fast 
triggered retransmitted 
pkts mbytes file transferred hku host cu host 
table shows sets testing day 
set experiments reno veno conducted indicated time slot 
experiment tcp reno connection tested finished tcp veno connection started minute 
mean intervals experiments minutes 
values throughput timeout retransmitted packets trigger number fast retransmit showed column table averaged times experiments reno veno 
totally ran experiments days monday friday 
general trends results days similar 
table shows measurement results day 
round trip traced traceroute hku cu ms ms variations different time slot 
maximum segment size bytes 
table measurements cu hku tcp reno tcp veno measurement time slots reno veno throughput kb timeout triggered fast 
triggered retransmitted 
pks seeing table veno achieves bit higher throughput reno wired internet 
previous analysis section improved throughput attributed efficient utilization network bandwidth aggressively grabbing bandwidth measured statistic data timeouts experienced retransmitted packets triggers fast retransmit veno connections reduced 
enhancing tcp veno sack option section experiments related enhancing tcp veno integrating sack option summarized 
details thesis chu 
segment loss experienced window data segment recovered rtt similar suffering reno tcp 
past years lot advanced recovery techniques hoe ff fl mmfr flo proposed solve drawback 
sack tcp efficiently quickly recover multiple packet losses round trip time 
combining retransmission strategy sack tcp congestion control policy tcp veno enhanced sack tcp version proposed called sack 
main difference sack tcp sack change sack tcp aimd additive increase multiplicative decrease tcp veno refined aimd 
similar tcp veno sack detects utilization available bandwidth network estimating amount data packets bottleneck buffer distinguish packet loss due network congestion bit errors controls amount sending window reduced accordingly 
additionally tries stay longer equilibrium region network available bandwidth fully utilized additive increase phase order reduce congestion losses experienced tcp connection 
researcher chu investigated performance sack different network conditions conducting experiments real networks 
results show proposed solution utilize network bandwidth independent packet loss probability network buffer size propagation delay 
sack increase throughput sack tcp 
fairness compatibility issues studied 
multiple sack sack tcp connections share network bandwidth bandwidth acquired connections roughly random loss 
random loss sack connections achieve higher throughput 
experiments show improvement sack due better efficiency aggressiveness grabbing bandwidth connections 
general qualitative performance improvement sack tcp veno sack tcp reno similar tcp veno tcp reno 
introducing sack veno furnishes better algorithm deal bursty packet losses prevalent wireless network losses may occur burst due environmental noise 
chapter tcp veno implementation overview tcp provides connection oriented reliable byte stream service points application 
includes files different function implementations header files numerous tcp definitions extra files tcp veno tcp veno added tcp part netbsd tcp veno implementation 
shows basic architecture interactions application tcp ip layers 
tcp input tcp output main functions tcp layer 
tcp input called ip layer datagram received protocol field tcp functions tcp init tcp tcp tcp timers tcp implemented tcp layer 
header files define tcp control block structure tcp header structure ste 
large function ip layer responsible verification incoming packets option processing forwarding packet reassembly passing transport messages contained datagrams tcp layer seeing ste 
important note transport level processing packet occurs processing loop 
queuing incoming packets ip tcp bsd unix queuing svr streams implementations tcp ip 
executed software interrupt 
largest piece code tcp functions responds various input segments current state connection 
tcp output function called segment needs sent connection 
tcp input numerous calls function tcp functions tcp tcp timers tcp input 
fig 
main functions tcp ip layer green part tcp veno implemented adding small amounts code tcp input tcp output 
respective additional modules referred filter filter 
similar tcp vegas timestamp structure called defined record sent segment length sending time millisecond resolution veno maintains timestamp queue outstanding segments 
timestamps created modified filter filter 
veno perform accurate rtt computations precise estimation network state 
section computing fine round trip time outstanding packet discuss estimate connection state tcp veno codes 
section address implement veno refined additive increase multiplicative decrease mechanism state estimation 
state estimation accurately implement tcp veno section subdivide evolution tcp connection different phases veno iss veno ss veno ai veno ff 
section describe functions filter filter embedded tcp tcp output 
estimate network states congestive non congestive difference expected rate actual rate 
evolution phase iss ss ai ff variable evo state indicate evolution phase tcp connection 
connection initial slow start phase veno iss slow start phase excluding initial slow start phase veno ss additive increase phase veno ai fast retransmit fast recovery veno ff 
shows transition diagram different phases 
note clock resolution conventional tcp ms gives coarse grained measurements rtt 
tcp veno time system called millisecond resolution record sending time sent segment 
evo state evolution tcp connection connection starts congestion window initialized segment new ack increases window segment 
tcp initial slow start phase evo state veno iss 
cwnd larger ssthresh window increased segment round trip time 
connection additive increase period evo state set veno ai 
packet loss detected reception dupacks initial slow start phase fast retransmit fast recovery triggered evo state set veno ff 
packet loss detected timeout retransmit timer connection move slow start phase ssthresh half loss window 
variable evo state set veno ss 
similarly evo state change veno ai veno ff different phases specific events occur 
filter described previously main function filter filter try manipulate timestamp queue structure follows 
struct int vs len segment length int vs time segment sent milliseconds resolution int vs transmits times segment sent struct vs timestamp timestamp queue array stores current outstanding segment length vs len sent time vs structure 
filter function tcp output called segment needs sent connection 
referring half function determines reason send segment 
function returns sending segment 
simple flow chart tcp output function half tcp output sends segment fills fields mss option timestamp option window sale factor tcp header 
passed filter implemented veno send vp len function inside file tcp veno function veno send uses system command record sending time packet length len packet sent insert created queue packet sequence number 
note parameter veno send indicates difference sequence number segment send segment ack received set tcp snd nxt tcp snd una 
parameter len veno send indicates length data transmitted set min snd sb cc win 
parameter vp pointer veno control block structure 
ip output called transport packet ip layer 
tcp output function check data sent 
function loops tries send segment 
looping continues data send condition receiver advertised window stops transmission 
filter filter tcp veno mainly implemented veno receive function called tcp input function inside file tcp input tcp input called new ack received 
fig part flow chart tcp input function filter filter compute accurate round trip time packet 
segment transmission sending time stored queue 
corresponding ack received sent time packet queue read filter veno receive 
packet fine rtt equal current time minus sent time 
time filter deletes corresponding timestamp queue tcp input sent drop command clear acked data socket sender buffer 
calculation estimated number packets bottleneck buffer congestion usually occurs queues routers network empty 
determine network fully utilized number packet bottleneck buffer estimated 
packets bottleneck buffer may imply available bandwidth 
network utilized 
estimate network state define veno control block structure inside file tcp veno follows 
struct int buffer packet estimated packet bottleneck buffer int number rtt count number rtt veno ai int actual rate int expect rate veno timer stuff int rtt int time syn sent 
set rtt beg connection tcp seq tagged sequence number perform estimation number packets rtt int rtt began int basertt current base rtt usually minimum int get average int rtt rtt interval obtained fine rtt received segment cumulatively add fine rtt cumulatively add received ack sequence received ack larger tagged data sequence number indicating tagged rtt tagged data starting send smooth rtt fine granularity reduce spike tagged rtt 
actual rate actual rate calculated number sent packets tagged rtt snd nxt divided smooth rtt 
expected rate time outstanding data snd nxt snd una divided basertt minimum packet rtt resetting reset new rtt veno ff turns 
noted actual rate actual rate expected rate expect rate calculated rtt ack received 
actual rate expected rate easily estimate number accumulated packets buffer packet bottleneck buffer formula expect rate actual rate basertt 
variables initialized zero loop continues 
value buffer packet estimate state network congestive congestive 
worthwhile emphasize buffer packet calculated veno ai phase different vegas 
window adjustment section show implement refined additive increase algorithm state estimation 
estimated number accumulated packets bottleneck buffer previous section implementation refined multiplicative decrease algorithm considered section 
refining additive increase veno connection running veno ai phase window increment segment rtt rtt chosen depending state estimation connection 
specifically buffer packet segments declare connection non congestive state congestion window increased segment rtt reno additive increase algorithm 
hand buffer packet larger equal segments implying network available bandwidth fully utilized connection trapped congestion state 
change increase congestion window rtt rtt 
source codes refined additive increase follows register int cw tp snd cwnd register int incr tp cw tp snd ssthresh vp buffer packet tp incr incr incr cw vp number rtt incr incr incr cw vp number rtt vp number rtt incr vp evo state veno ai tp snd cwnd min cw incr tcp tp snd scale refining multiplicative decrease dupacks tp dupacks received fast retransmit triggered 
tcp reno window cut half setting win min tp snd wnd tp snd cwnd tp 
tcp veno reduces window estimated number segment bottleneck buffer buffer packet 
buffer packet segments declare connection congestive state 
window halved 
window reduced factor win min tp snd wnd tp snd cwnd tp 
variable evo state set veno ff indicating connection evolving fast retransmit fast recovery phase 
new ack received evo state set veno ai 
tp dupacks tcp seq tp snd nxt int win vp evo state veno ai vp buffer packet tp vp evo state veno iss vp evo state veno ff vp buffer packet tp win min tp snd wnd tp snd cwnd tp vp evo state veno ai vp buffer packet tp vp evo state veno ss vp evo state veno ff vp buffer packet tp win min tp snd wnd tp snd cwnd tp win win tp snd ssthresh win tp tp timer tp rtt tp snd nxt ti ti ack tp snd cwnd tp evolution connection state enter ff state tp vp evo state veno ff vp basertt vp number rtt vp buffer packet void tcp output tp goto drop retransmission timer timeout window halved 
variable evo state set veno ss slow start takes 
source codes shown function tcp timers inside file tcp timer case int win min tp snd wnd tp snd cwnd tp win win tp snd cwnd tp evolution connection state enter slow start state regardless previous state tp vp evo state veno ss vp cong detect basertt vp number rtt tp snd ssthresh win tp tp dupacks void tcp output tp break chapter conclude thesis section look veno bigger picture 
specifically veno considered belonging class protocols adapt congestion window estimation congestion state veno state estimator particular method 
section argue desirability veno various practical 
summary contributions thesis section directions section 
veno instance class tcp protocols tcp veno estimates connection state additive increase phase state estimation supplementary information decide refine additive increase step window reduced fast retransmit triggered 
add boolean state variable con state indicate connection experiencing congestion 
con state set true connection trapped estimation relatively easy accurate phase window gradually increased 
congestive state set false 
way rewrite tcp veno algorithm follows 
additive increase period diff basertt random loss due bit errors occurred con state false diff basertt con state true con state false available bandwidth utilized cwnd cwnd cwnd new ack received con state true available bandwidth fully utilized cwnd cwnd cwnd new ack received packet loss detected fast retransmit con state false ssthresh ssthresh congestive loss occurred additive increase period growth rate halved con state true 
dupacks received window reduced percent con state false window halved con state true 
veno refines data driven recovery scheme tcp reno carefully estimating current network state 
timeout occurs window sharply halved previous tcp 
tcp veno implementation network state con state determined difference expected rate actual rate 
fact determined predictive congestion detections packet pair kes pbm ap reactive congestion detection schemes packet loss combinations schemes observed changes link layer gm :10.1.1.133.3305:10.1.1.28.9234
obviously compared accurately making packet losses due congestion due bit errors non congestion reasons relatively simple tcp connection differentiate congestion state non congestion state 
tcp veno proposes enhance reno aimd algorithm estimated network state congestive non congestive 
improve tcp performance error prone wireless networks popular approach try hide non congestion related loss tcp sender strong link layer recovery control rlp tulip pa 
result losses seen tcp sender caused congestion changes required existing sender implementation 
coordination inner control loop link layer error recovery data link level outer control loop error recovery tcp level undesirable competition introduced may result spurious retransmissions error recovery run link layer discussed drawbacks overcome having link network layer signal transport layer specific events link outages cell handovers signal fading tcp sender aware properties wireless link adapt accordingly 
approaches called cross layer approaches snoop bal freeze tcp gm try information sent lower layer distinguish congestion loss non congestion loss tune tcp evolution 
similar cross layer approaches obtained information lower layer update state variable con state tcp connection 
furthermore idea generalized 
state monitor daemon deployed tcp sender responsible collecting detecting network state information different methods different layers 
carefully filtering noise kalman filter kes fuzzy filter kk network state correctly determined :10.1.1.133.3305
radio link protocol rlp tcp provides reliable byte stream service link layer 
worthwhile mention transport level monitoring distort application performance needn change codes application software 
information network status sought monitor tcp level application probably able available bandwidth efficiently bol 
desirability veno practical standpoint practical standpoint basic aspects considered tcp designs deployability compatibility flexibility described subsections 
deployability improved tcp worthwhile easy deploy existing internet 
modifying legacy tcp design ask question modification design amenable easy deployment real networks 
realize goal ideally little preferably changes required intermediate routers 
ends communicating terminals preferred side requires changes party interested enhanced performance incorporate new algorithm requiring forcing peers adopt changes 
generally preferred sender sends large volume data receivers modify algorithm web server receivers 
practical constraint related encrypted traffic 
network security important encryption adopted widely 
cases ip payload encrypted intermediate nodes base station router may know traffic carried payload tcp 
approach depends base station perform mediation fail traffic encrypted destroy semantics 
real networks support rfc tcp implementations widespread md 
proposed schemes rm depend timestamp option rfc may greatly limited practice 
comparatively simple modification tcp sender stack veno easily deployable real networks 
party interested enhanced performance single installing veno stack cooperation side 
compatibility compatibility refers newly introduced tcp compatible legacy tcp sense cause detrimental effects legacy tcp vice versa running concurrent network 
referring tcp reno connection uses buffer space available buffer bottleneck node competing tcp vegas connection 
particularly vast throughput difference shows compete asymmetric networks fcl see section 
vegas compatible reno 
algorithms aggressive reno achieve improvement expense reno 
example opens multiple connections place web browsers 
ff 
algorithms compatible reno 
comparatively veno exists reno stealing bandwidth reno 
improvement attributed efficient utilization available bandwidth 
verified small scale networks live internet see chapters 
veno compatible reno 
flexibility flexibility refers tcp deal range different environments effectively including environments long propagation delay random packet loss bandwidth asymmetry 
flexible tcp efficiently utilize bandwidth different networks 
tcp algorithms certain situation 
example tcp reno works wired networks suffer severe degradation erroneous interpretation random packet loss congestion packet loss 
vegas algorithm asymmetric networks estimates forward bandwidth incorrectly fcl 
certainly difficult categorically declare tcp flexible flexible flexibility matter degree depends different situations tcp deal effectively 
contend veno flexible tcp reno vegas 
veno obtains significant improvement throughput performance wireless networks obtains higher throughput asymmetric networks throughput reno high latency networks 
summary table summarizes characteristics tcp reno vegas veno different networks mutual compatibility flexibility different networks 
flexibility table characteristics tcp veno reno vegas reno vegas veno normal general general better reno different wireless bad networks asymmetric general bad better reno compatibility reno bad modification required sending side sending side congestion control summary contributions proactive reactive thesis proposed studied novel congestion control mechanism called tcp veno able deal random loss effectively 
main contributions described idea tcp veno 
tcp veno differs conventional tcp ways refines multiplicative decrease algorithm reno setting slow start threshold perceived state connection congestive non congestive fixed drop factor packet loss occurs uses refined linear increase algorithm adjust congestion window evolution congestion avoidance 
idea tcp veno straightforward hindsight obvious started 
combines elements opposing tcp camps reno uses reactive congestion control vegas uses proactive congestion control 
veno considered reactive algorithm certainly aim eliminate packet loss totally idea state estimation vegas formulate better strategies deal packet loss stay optimal operating region longer 
demonstration advantages tcp veno extensive experiments 
numerous experiments conducted real networks live internet different areas hong kong china united states 
detailed investigations clearly indicate tcp veno achieve significant improvement adversely affecting concurrent tcp connections network 
improvement obtained wireless networks asymmetric networks high latency networks 
contrast algorithms proposed tested real networks bv bv bv 
implementation veno tcp netbsd 
veno implemented kernel netbsd 
similar tcp vegas veno maintains timestamp queue outstanding segments perform accurate rtt calculation obtain accurate estimation network states 
small modifications reno needed implement veno 
directions interesting directions 
networks bit error channels bandwidth asymmetry forward path reverse path 
veno performance routers enabled red random early detection mechanism contrast traditional queue management algorithm tail drop drop packets buffer full red random early detection algorithm drops arriving packets probabilistically buffer full 
goal give tcp connections early indication impending congestion 
current routers implemented red mechanism rfc strongly recommend internet routers implement active queue management mechanism red manage queue lengths reduce latency reduce packet dropping avoid lock phenomena internet 
worthwhile study performance veno red installed routers 
applications tcp veno current tcp reno widely support applications services verified wired networks 
particular focus veno performs actual applications www mail run 

global internet measurement environment conclude mention network measurement environment called set run experiments thesis 
goal verify reliability robustness tcp veno internet related technology multicast audio video streaming 
currently measurements conducted connections chinese univ lawrence berkeley lab chinese univ tsinghua univ chinese univ univ hong kong 
continuing effort enlarge include universities world test performance tcp veno internet technology large scale 
bibliography abf rfc allman balakrishnan floyd enhancing tcp loss recovery limited transmit ad aron druschel 
tcp improving startup dynamics adaptive timers congestion control technical report tr rice university computer science adg allman dawkins glover ongoing tcp research related satellites rfc february adl jong ahn peter danzig zhen liu yan evaluation tcp vegas emulation experiment acm sigcomm computer communications review vol pp august af mark allman aaron falk effective evaluation tcp sigcomm ags allman glover sanchez enhancing tcp satellite channels standard mechanisms bcp rfc january 
mark allman web servers view transport layer june ap allman paxson estimating network path properties proceedings acm sigcomm :10.1.1.28.9234
aps allman paxson richard stevens tcp congestion control rfc april 
bal hari balakrishnan challenges reliable data transport heterogeneous wireless networks ph thesis bb badrinath tcp indirect tcp mobile host technical dcs tr rutgers university october 
bb badrinath tcp indirect tcp mobile hosts proceedings icdcs pp 
may 
pravin bhagwat bhattacharya arvind krishna satish tripathi enhancing throughput wireless lans channel state dependent packet scheduling proc 
ieee pages march 
bk balakrishnan katz explicit loss notification wireless web performance proceedings ieee globecom 
bakshi krishna vaidya pradhan improving performance tcp wireless networks technical report texas university 
blk lee kumar tcp hack tcp header checksum option improve performance lossy links infocom bol framework network aware applications ph thesis bop brakmo sean malley larry peterson tcp vegas new techniques congestion detection avoidance proceedings acm sigcomm pp october bp brakmo larry peterson tcp vegas congestion avoidance global internet ieee journal selected areas communications vol pp october bp brakmo peterson performance problems bsd tcp acm computer communication review vol 
october 
balakrishnan padmanabhan katz effects tcp ip performance proceedings infocom bps bennett partridge packet reordering pathological network behavior ieee acm transactions networking ber 
bpsk balakrishnan padmanabhan katz comparison mechanisms improving tcp performance wireless links acm sigcomm august 
bpsk hari balakrishnan venkat padmanabhan srinivasan seshan randy katz 
comparison mechanisms improving tcp performance wireless links ieee acm transactions networking december 
bs brown singh tcp tcp mobile cellular networks acm computer communication review vol 
october 
balakrishnan seshan katz improving reliable transport hand performance cellular wireless networks acm baltzer wireless networks bv biaz vaidya statistics distinguish congestion corruption negative result texas university technical report august 
bv biaz vaidya sender heuristics distinguishing congestion losses wireless transmission losses texas university technical report june 
bv biaz vaidya discriminating congestion losses wireless losses inter arrival times receiver texas university technical report june 
bvp bakshi krishna vaidya pradhan improving performance tcp wireless networks technical report texas university 
cfl chung fu chang sack enhanced version sack tcp chu chung sack enhanced version sack tcp phil thesis www broadband cuhk edu hk ci caceres iftode improving performance reliable transport protocol mobile computing environment ieee journal selected areas communication june 
cj 
chiu jain analysis increase decrease algorithms congestion avoidance computer computer networks isdn systems vol 

clp window prediction mechanism improving tcp wireless asymmetric links clark lambert zhang netblt bulk data transfer protocol proceedings acm sigcomm 
zorzi wireless tcp performance link layer fec arq icc desimone chuah yue throughput performance transport layer protocols wireless lans proc 
globecom december 
dawkins vaidya performance implications links errors september draft ietf error txt miller travis tcp extensions space communications proceedings acm mobicom 
dump www tcpdump org es eckhardt steenkiste improving wireless lan performance adaptive local error control proceedings ieee icnp fcl performance degradation tcp vegas asymmetric networks remedies icc ff kevin fall sally floyd 
simulation comparisons tahoe reno sack tcp 
computer communication review july 
url ftp ftp ee lbl gov papers sacks ps 
ff kevin fall sally floyd simulation comparisons tahoe reno sack tcp computer communication review july 
ff sally floyd kevin fall 
promoting congestion control internet ieee acm transactions networking august fh floyd henderson newreno modification tcp fast recovery algorithm rfc april 
fj floyd jacobson traffic phase effects packet switched gateways internetworking res 
experience vol 
pp 
sept fj floyd jacobson synchronization periodic routing messages ieee acm transactions networking vol 
april 
fj floyd jacobson link sharing resource management models packet networks ieee acm transactions networking vol 
august 
fk tcp congestion control overview survey ongoing research flo floyd congestion control principle rfc sept flo floyd tcp successive fast retransmits 
technical report october 
url ftp ftp ee lbl gov papers ps 
flo sally floyd tcp explicit congestion notification acm computer communication review vol 
october 
fmm floyd mahdavi mathis podolsky romanow extension selective sack option tcp aug internet draft fmmp sally floyd jamshid mahdavi matt mathis matthew podolsky allyn romanow extension selective sack option tcp august 
approved proposed standard available www ietf org draft floyd sack txt gm tom james freeze tcp true tcp enhancement mechanism mobile environments infocom hb freebsd handbook freebsd org handbook index html th 
gross 
tcp vegas revisited infocomm hk henderson randy katz transport protocols internet compatible satellite networks ieee journal selected areas communications 
vol 
feb hk henderson katz transport protocols internet compatible satellite networks ieee journal selected areas communication vol 
pp 
february 
hmm go hasegawa murata fairness stability congestion control mechanism tcp infocom 
volume page vol hoe hoe improving start behavior congestion control scheme tcp acm sigcomm august 
url www acm org sigcomm sigcomm program html hy jian hao hu yeung hierarchical cache design enhancing tcp heterogeneous networks wired wireless links jac van jacobson 
congestion avoidance control 
sigcomm acm 
aug 
jac jacobson modified tcp congestion avoidance algorithm interest mailing list april 
jai jain delay approach congestion avoidance interconnected heterogeneous computer networks acm computer communication review vol 
october 
jk jacobson karels congestion avoidance control revised version jac 
kes keshav :10.1.1.133.3305
control theoretic approach flow control sigcomm sept kk keshav fuzzy prediction timeseries proc 
ieee conference fuzzy systems fuzz ieee march 
kp karn partridge improving round trip time estimates reliable transport protocols proceedings acm sigcomm 
lk ludwig katz eifel algorithm making tcp robust spurious retransmissions acm computer communication review vol 
january 
lk dong lin kung tcp fast strategies analysis improvements infocomm ludwig konrad joseph optimizing performance reliable flows wireless links pp 
proceedings acm ieee mobicom 
ludwig konrad joseph katz optimizing performance reliable flows wireless links appear acm baltzer wireless networks journal special issue selected papers acm ieee mobicom revised version lm lakshman madhow performance tcp ip networks high bandwidth delay products random loss ieee acm transactions networking vol 
june 
lms lakshman madhow bernhard window error recovery flow control slow channel study tcp ip performance infocom 
steven low larry peterson wang understanding tcp vegas theory practice citeseer nj nec com low understanding html lr ludwig link layer enhancements tcp ip gsm pp 
proceedings ieee infocom 
ludwig konrad oden joseph multi layer tracing tcp reliable wireless link pp 
proceedings acm sigmetrics 
ls ludwig eifel retransmission timer progress available iceberg cs berkeley edu november 
lud ludwig case flow adaptive wireless links technical report ucb csd university california berkeley may 
richard la jean venkat anantharam 
issues tcp vegas 
available www path berkeley edu july md dawkins wireless networking ietf internet draft august 
mj mccanne jacobson bsd packet filter new architecture user level packet capture proceedings winter usenix conference mey 
meyer tcp performance gprs proceedings ieee wcnc 
mo richard la venkat anantharam jean analysis comparison tcp reno vegas infocom page vol mm mathis mahdavi forward acknowledgment refining tcp congestion control proceedings sigcomm august stanford ca 
available www psc edu networking papers papers html mm mathis mahdavi tcp rate halving bounding parameters available www psc edu networking papers current mmfr mathis mahdavi floyd romanow tcp selective options rfc october 
mog mogul observing tcp dynamics real networks proceedings acm sigcomm matt mathis jeff semke jamshid mahdavi kevin rate halving algorithm tcp congestion control june draft rate halving txt mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm acm computer communication review vol 
july 
murata control theoretical analysis window flow control mechanism tcp ip networks www nal ics es osaka ac jp pa rfc vern paxson mark allman computing tcp retransmission timer pa jj garcia luna aceves improving tcp performance wireless networks link layer www cse ucsc edu research readings html pax vern paxson 
automated packet trace analysis tcp implementations 
proceedings acm sigcomm september 
pax paxson measurements analysis internet dynamics ph 
dissertation university california berkeley april 
pax paxson automated packet trace analysis tcp implementations proceedings acm sigcomm 
pax paxson internet packet dynamics proceedings acm sigcomm 
pax paxson routing behavior internet ieee acm transactions networking vol 
october 
pen tcp wired cum wireless environments ieee communications surveys vol 
fourth quarter 
pg garcia luna aceves improving tcp congestion control internet heterogeneous transmission media proceeding ieee icnp 
mailing list working group performance implications link characteristics internet engineering task force nasa gov list archive pj garcia luna aceves improving tcp congestion control internets heterogeneous transmission media computer engineering dept university california rizzo dummynet simple approach evaluation network protocols acm computer communication review jan www iet unipi luigi ip rm ibrahim matta wtcp efficient transmission control protocol networks wireless links technical report nu ccs northeastern university july 
rm raman steven mccanne model analysis protocol framework soft state communication sigcomm sf reinforcement tcp error recovery wireless communication acm computer communication review vol 
april 
shenker fundamental design issues internet ieee journal selected areas communication vol 
pp 
sep 
lakshman choudhury design considerations supporting tcp flow queuing proc 
ieee infocom pp 
srm floyd 
jacobson mccanne liu zhang reliable multicast framework light weight sessions application level framing 
acm sigcomm pp 
ste stevens tcp ip illustrated volume protocols addison wesley november 
tbp ge energy throughput tradeoffs tcp error control strategies proceeding ieee symposium computers communications wc wang crowcroft 
new congestion control scheme slow start search tri acm computer communication review jan wk wang kung 

tcp decoupling improving tcp performance wireless networks wireless network ws wright stevens tcp ip illustrated volume implementation addison wesley january 
wang xin douglas reeves kang shin simple refinement slow start tcp congestion control wang xin reeves shin 
ieee computers communications yb yavatkar bhagwat improving performance tcp mobile internetworks proc 
ieee workshop mobile computing systems applications santa cruz ca december 
zhang ryu dao satellite communications global internet issues pitfalls potential proc 
inet zhang shenker clark observations dynamics congestion control algorithm effects way traffic proceedings acm sigcomm journal vol 
pp 
december 
recommendations drafts rfc postel user datagram protocol rfc august 
rfc postel internet protocol rfc september 
rfc postel internet control message protocol rfc september 
rfc postel transmission control protocol rfc september 
rfc nagle congestion control ip tcp internet works rfc january 
rfc postel 
host source quench source quench introduced delay squid jul rfc braden requirements internet hosts communication layers rfc october 
rfc jacobson compressing tcp ip headers low speed serial links rfc february 
rfc mogul deering path mtu discovery rfc november 
rfc jacobson braden borman tcp extensions high performance rfc may 
rfc simpson point point protocol rfc july 
rfc rand ppp reliable transmission rfc july 
rfc schulzrinne casner frederick jacobsen rtp transport proto col real time applications rfc january 
rfc stevens 
tcp slow start congestion avoidance fast retransmit fast recovery algorithms 
january 
rfc rfc perkins ip mobility support rfc october 
rfc mathis mahdavi floyd romanow tcp selective options rfc october 
rfc touch 
tcp control block interdependence 
april 
rfc braden clark crowcroft davie deering estrin floyd jacobson partridge peterson ramakrishnan shenker wroclawski zhang recommendations queue management congestion avoidance internet april 
rfc parker 
testing tools tcp implementors 
august 
rfc kent atkinson security architecture internet protocol rfc november 
rfc deering internet protocol version ipv specification rfc december 
rfc ramakrishnan floyd proposal add explicit congestion notification ecn ip rfc january 
rfc pink ip header compression rfc february 
rfc casner jacobson compressing ip udp rtp headers low speed serial links february rfc paxson allman dawson fenner semke volz 
known tcp implementation problems 
march 
rfc allman paxson stevens tcp congestion control rfc april 
rfc floyd henderson newreno modification tcp fast recovery algorithm april rfc allman dawkins glover ongoing tcp research related satellites february rfc floyd mahdavi mathis podolsky extension selective sack option tcp july rfc floyd 
congestion control principles 
september 
rfc paxson allman computing tcp retransmission timer november rfc 
tcp problems path mtu discovery 
september 
rfc mitzel 
overview iab wireless internetworking workshop december 
rfc allman balakrishnan floyd enhancing tcp loss recovery limited transmit january rfc balakrishnan seshan 
congestion manager 
june 

