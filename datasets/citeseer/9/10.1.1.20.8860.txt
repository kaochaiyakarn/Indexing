supporting rapid prototyping frequent reliable deployment evolving components jonathan cook department computer science new mexico state university las cruces nm usa cs nmsu edu rapid system prototyping need quickly deploy new versions software components test systems order get feedback new versions operate system 
compounding multiple con gurations various versions may need tested 
incompatibilities component versions cause serious loss time ort errors tracked testbed recon gured known working versions 
developing hercules framework safely reliably deploy evolve component systems executing controlling multiple versions software components run time 
hercules naturally lls need rapid system prototyping enhance streamline process developing component system 

problems system development maintenance magni ed rapid prototyping process version management version compatibility assurance 
knowing changes successive versions components knowing versions components compatible composed testable system con guration 
dependencies component versions serve limit amount parallel development achieved team wait compat supported part national science foundation ccr department education 
content information necessarily re ect position policy government ocial endorsement inferred 
ible changes new component versions tested 
developing framework run time management multiple versions software components improve rapid prototyping development process 
framework called hercules decouples problem version change compatibility management deployment testing new component versions system 
allows component system rapidly evolved various versions independent components 
teams enabled develop component independently rapid prototyping process moves smoother faster 
give overview hercules framework detail applied rapid prototyping development process 
focussed software components hardware components engineering needs side rapid system prototyping process 

overview hercules section presents overview hercules framework provides foundation supporting ecient rapid prototyping process 
depth presentation hercules 
system development changed part new versions components installed replacing old versions 
version upgrade meant enhancement newer versions break existing relied functionality 
faults impede development process worst cause failure user site detected 
key insight approach suc versions component constitute system albeit independence assumption true multi versioned systems 
version component er 
new version ers speci xes known encountered problems old version 
multiple new versions di erent problem 
dismiss old version faulty seen fail fact old version ers proven reliable behavior outside known errors 
protect system incidental errors created new versions 
era frameworks components swapped run time reason simply ignore version history component comes time evolve 
treat component versions special multi versioned system know speci di erences versions 
running speci ed set versions just latest increase reliability entire system evolution process 
essence approach take task formally specify subdomain new version changes corrects behavior parent exhibiting 
install new version keep old version line 
invocation component system run multiple versions component parallel select computational result version speci ed subdomain contains invocation gather statistics logging information versions correctness 
remove older versions newer ones suf ciently demonstrated reliability 
new version component created meant address speci conditions subdomain existing version failed 
call subdomain entire domain component execute subdomain new version intended di er behavior parent 
specifying subdomain formally constraint expression detect run time invocations 
new version component assumed producing correct answer old version result external system result new version 
invocation outside subdomain new version produces result di erent old version assumed new version broken correct behavior existing version result external system produced existing version new version 
manner system reliability increased evolution process 
note evaluating correctness result component regard speci cation 
deciding version component assumed correct particular subdomain meant address 
version called authoritative version particular subdomain 
invocation version produces result authoritative version correct invocation 
logging number times version produces correct result point decide new version reliable take old version line 
presentation concerned versions component approach considers general task having arbitrary number versions component running relate 
note proposing version programming scheme independent versions executed voting scheme determine result 
focusing dependent related versions environment takes advantage intended di erences versions naturally arise development 
scheme di erent recovery blocks specifying subdomain new version addresses recovery blocks assertions actual correctness result 
recovery blocks concerned successive versions evolving systems geared version programming ideas di erent attempts computation 
related simplex architecture upgrading real time controllers 
shows hercules framework propose highly reliable component upgrading 
external system uses component component versions place arbiter acts assuming authoritative version correct subdomain unrealistic presumably tested speci cally change 
deciding results trivial equality comparison data types problem domains need expressive tests deciding values equal oating point numbers 
complex return values objects functions pose interesting research problems 
calling component version version constraint evaluator middleware invoke component receive results arbiter 
hercules framework 
system image single component 
arbiter invokes component versions request arrives sends selected result back system 
select result arbiter uses constraint evaluator ce providing invocation parameters component state information ce 
ce evaluates formal speci cations version addressed subdomain decides version component authoritative produce correct result 
arbiter selects result send back external system logs statistics versions produced presumably correct result 
arbiter contains component management facilities dynamically adding removing versions repairing restarting version needs 
natural place imagine implementing arbiter middleware layer component systems corba frameworks frameworks allow run time control mediation components provide management facilities 
completed initial prototype corba java prototype tcl programming language 

applying hercules rapid prototyping rapid prototyping development process goals developers release changes updates soon possible system prototype constantly re ects current state development 
developers di erent components free possible external constraints order achieve maximal process parallelism 
goals con ict 
achieve parallelism component changes held back system integration development individual components constantly sync 
having releases component changes system build increases number times synchronization individual component changes needs done 
hercules framework ideal tool alleviate con ict goals 
isolating changes individual components minor change component released system build fear breaking system 
system test constantly running 
incompatible incorrect changes component soon detected system hercules framework report component versions agreement 

component development process shows process component evolution envision 
system evolved new requirements implemented 
new version component created tested speci domain 
domain may speci ed version constructed part change order speci cation place testing domain may change testing decided version constructed operates di erent domain originally speci ed 
new version installed system test system runs gathers statistics running versions 
chosen points time engineer inspect statistics versions component may take di erent actions doing 
existing version removed faulty existing version removed obsolete statistics show descendants correctly implement behavior 
domain create new version test new version specify version domain install new version run system gather statistics evaluate statistics modify domain constraints version remove version obsolete remove version faulty decide new requirements 
component upgrading process 
constraints version modi ed decided operating correctly larger domain failing part domain 
new version component may created installed 
process system test protected incidental errors break result downtime ecient process 
evolving component done worry impact change dependencies component changes alleviated 
important note framework process allow automation 
statistics evaluation moved running system rule action speci cations automated decisions component faulty remove obsolete actions speci ed require human intervention 

formal specification subdomain order hercules component development process willing create subdomain constraint speci cations determine version authoritative 
form formal speci cation may cause readers consider method costly terms ort 
aspects method alleviate concern 
speci cation domain behavior 
typically hears formal speci cation way unambiguously detail behavior system order understand better open various model checking analyses verify goodness 
hercules specify behavior domains values range 
burdensome task 
second speci cations subdomains new component version di ers parent 
quite useful acts part documentation change useful hercules framework 
actuality akin assert macro asserting domain di erence versions assuming relationship behavior domains 
certainly place full formal methods model checking system development want discount toolsets methods 
er approach complement development tools available 

interface changes component course changes component internal immediately compatible older versions 
necessary change interface component cause incompatibilities invoking invoked components 
normal method handling upgrade components interface time providing component upgraded 
system migrated old interface new interface 
rst glance situation hercules prepared handle possible solutions exploring 
operate assumption new interface completely old interface 
presumably component role radically di erent subsumes old component responsibilities 
picture domain new component new interface overlaps domain old component 
mapping old interface new interface provided vice versa invocations fall old component domain 
example speci function call interface changed parameters allowing new behavior taken advantage probably default values new parameters substituted incoming invocation old interface 
expect hercules allow components changing interface deployed separately component implements changing interface 
aspects 
rst dependent components old interface 
invocations mapped new interface arbiter 
phase old version running authoritative old domain new component essentially checked correctness old domain 
components interface upgraded start new interface 
case new component invoked full interface arbiter 
invocation mapped old interface new parameters set default values old component invoked mapping back old interface 
simply invocation falls old domain uses new interface 
invocation outside old domain truly new functionality new domain older versions invoked arbiter newest version invoked 
expected far implements functionality new domain 
eventually new component shown operating correctly old domain component versions left invoke old interface older component versions removed system process migrating new interface complete 

overhead concerns framework performance concerns naturally arise 
having direct execution single component version introduced arbiter constraint evaluator execution multiple versions component 
additions certainly change expected performance system 
cases system distributed parallel machine overlapping execution part framework multiple component versions enhance response time 
expect types systems dominant paradigm 
component frameworks libraries support methods machines 
cases techniques alleviate performance penalty 
case single authoritative version determined version run rst result returned system 
threads separate running system idle cpu time versions run log correctness 
require state preservation inputs invocation 
investigating applicability delaying execution non authoritative versions type limits encountered 
system real time constraints performance tracked number versions run limited arbiter ensure time constraints met 
limitation run reliable versions current statistics 
techniques previous non real time settings improve performance take form con guration parameters framework 
exploring types con gurable options best limiting versions run real time guarantees achieved 

example application example application consider problem wheel steering automobile 
just turning front wheels wheels turn 
front wheels directly controlled steering wheel computation performed decide rear wheels turn relation front wheels 
computation uses angle front wheels speed automobile traveling determine angle rear wheels turn 
shows graphical depiction application hercules control window interaction point engineer control inspect multiple versions components 
example versions component responsible calculating turning angle rear wheels 
initial prototype version computed simple linear relation reality slow speed rear wheels need turn opposite front wheels tighter turning radius higher speeds need turn front wheels slide lanes maintain forward trajectory 
second third prototype versions added second correct basic high speed action domain speci cation speed third smooth continuity errors second domain speci cation 
shown hercules window third version authoritative invocations 
speci domain purposely addressed parent small 
correct agreed authoritative version invocation closer 
hercules tcl action 
inspection reveal error domain error computation error 
version operating correctly previous removed system performed safely development component 

hercules framework managing run time evolution components 
hercules allows multiple versions components transparently active system enhances reliability system isolating single version faults 
capability improves rapid prototyping development process decoupling component development orts allowing new versions components deployed test environment quickly constraints 
hercules framework initial phases implemented initial ideas proof concept 
actively involved building complete implementations framework exploring domains helpful 

anonymous reviewers helpful comments 

avizienis 
version approach faulttolerant software 
ieee transactions software engineering 
brilliant knight leveson 
analysis faults version software experiment 
ieee transactions software engineering 
cook 
highly reliable upgrading components 
proceedings st international conference software engineering pages may 
kramer 
maintaining node consistency face dynamic change 
proceedings third international conference con gurable distributed systems pages 
ieee computer society press may 
hauptmann 
line fly software replacement 
proceedings third international conference con gurable distributed systems pages 
ieee computer society press may 
horning lauer melliar smith randell 
program structure error detection recovery 
lecture notes computer science 
kramer magee 
evolving philosophers problem dynamic change management 
ieee transactions software engineering nov 

polylith software bus 
acm transactions programming languages systems jan 
sha rajkumar 
evolving dependable real time systems 
componentbased software engineering selected papers software engineering institute pages 
ieee computer society press 
reprinted proc 
aerospace applications conf 
warren sommerville 
model dynamic con guration preserves application integrity 
proceedings third international conference con gurable distributed systems pages 
ieee computer society press may 
