cs technical report august game agent christoph markus gross computer science department eth zurich switzerland mail inf ethz ch graphics ethz ch institute visual computing table contents purpose report 

overview 
artificial life alife definition 
alife fields 
alife history 
artificial intelligence overview 
adaptation learning 
genetic evolutionary algorithms 
simulated annealing 
neural networks learning examples 
reinforcement learning 
support vector machines 
learning techniques 
problem solving 
problem formulation 
acting 
searching 
comparison search strategies 
knowledge 
knowledge representation 
building knowledge base 
planning 
uncertain knowledge 
communication 
games entertainment games 
classical games 
pure computer games 
game characters 
game development 
cinematography 
agents definition 
environments 
autonomous agents 
simple reactive agents 
goal agents 
utility agents 
game agents 
behavior modeling eth zurich cs technical report institute visual computing behavior 
character modeling 
cognitive modeling 
presentation motion capturing 
procedural generation movements 
kinematics 
inverse kinematics spacetime constraints 
physics movements 
motion controlling 
approaches 
expressive animation 
principles animation 
research 
agent modeling 
requirements 
resources 
basic approach 
perception 
inference 
operator selection 
operator modeling 
path planning 
purpose report objective report give reader survey state art techniques academic research field artificial life simulation complex emergent behavior central point investigation 
furthermore games artificial intelligence concept agents focussed give classification comparison modern techniques simulate animate creatures life forms 
report meant fully complete topics remain 
invention computers man tried form kind intelligence 
field artificial intelligence ai produced interesting techniques classification learning problem solving controlling physical movements searching huge information spaces modeling planning 
artificial life alife new field research 
involves different academic disciplines artificial intelligence biology genetics sociology 
goal recreate behavioral characteristics living systems observations natural life 
research results ai alife 
today computer graphics possible render nearly real world looking scenes gives entertainment industry new possibilities produce entertaining movies games 
non interactive form needs computation time negligible movements graphical requirements considered main problem perfect possible 
interactive form entertainment player decisions control progress plot 
interactivity computation time major hurdle find balance realism reactivity 
alife computer graphics possible create new types agents fashionable way dimensional computer graphics autonomous intelligent characteristics 
process challenging agents spawn characteristics movement cognition reasoning expression emotion motivation learning social behavior areas 
eth zurich cs technical report institute visual computing 
overview chapter look artificial life definition applications 
chapter focus artificial intelligence part artificial life applications 
discuss adaptation learning theories consider problem solving knowledge representation planning uncertainty communication 
chapter overviews games goal platform especially characters 
additionally short look cinematography chapter 
game characters mind consider agents fundamental concept build manifold characters creatures 
chapter tries find definition agents environment presenting simple agent architectures lead specific game agent discussion 
extensive review current behavior character modeling chapter covers cognitive modeling research result 
chapter deals motion synthesis general discussed respect presentation behaviors terms expressive animation chapter 
chapter discusses agent architectures respect implementation specific issues 
requirements consumption main parts agent covered perception inference acting 
artificial life artificial life alife new interesting field research 
involves academic disciplines artificial intelligence ai biology genetics psychology social sciences 
alife studies natural life attempting recreate behavioral characteristics living systems 
alife definition artificial life lacks proper definition covers different disciplines researcher sees field perspective 
langton provides approaches definition definition remains short study man systems exhibit behaviors characteristic natural living systems extends definition futuristic outlook artificial life field study devoted understanding life attempting fundamental dynamical principles underlying biological phenomena recreating dynamics physical media computers making accessible new kinds experimental manipulation testing 
addition providing new ways study biological phenomena associated life earth life know artificial life allows extend studies larger domain bio logic possible life life ray look different viewpoint suggest bottom approach top artificial life enterprise understanding biology constructing biological phenomena artificial components breaking natural life forms component parts 
synthetic reductionist approach alife described attempt understand high level behavior simple lowlevel rules 
goal alife detect rules observations reproduce behavior machine computer 
eth zurich cs technical report institute visual computing 
artificial life langton describes goals alife alife views life property organization matter property matter organized 
biology largely concerned material basis life alife concerned formal basis life 
starts bottom viewing organism large population simple machines works upwards synthetically constructing large aggregates simple rule governed objects interact nonlinearly support life global dynamics 
key concept alife emergent behavior goes states course principle assumption alife logical form organism separated material basis construction property imagine basic principles living organism uncovered material realize life irrelevant 
alife fields theories alife develop applications robotics spacecraft medicine nano technology industrial fabrication assembly 
generally alife split main areas autonomous agents alife simulators 
autonomous agents software programs designed pursue goals individually teams interactively user control 
alife simulators generally smaller programs written order extend research alife 
lists different applications alife everyday life virtual reality vr robotics telerobotics traffic control education military information agents entertainment survey focus entertainment applications games movies 
games alife ai incorporated increasingly probably important part games 
special effects movies rely alife theories 
example craig reynolds famous boids movies generate creature movement groups 
alife history provide short overview alife techniques previous 
cellular automaton array cells finite number states 
state variable property information 
receiving input neighboring cells cell uses local set rules determine state reaction 
alife history eth zurich cs technical report institute visual computing state cells updated simultaneously state entire array advances discrete timesteps 
john von neumann cellular automata goal achieve self reproduction 
problem machine reproduction universal constructor robot 
told explicitly 
machine description alleged self reproducing machine constructor needs understand supposed reproducing machine including description 
von neumann arrays cells represent organism 
cell possible states different combinations states defined behavior system 
effect local behaviors caused global behavior emerge self reproducing structure interacted neighboring cells changed states 
eventually organism duplicate main body resulting identical creatures capable self reproduction 
systems named lindenmayer developed 
try produce fractal patterns seen nature 
obtain desired self similarity set simple rules executed repetitively 
system mainly consists variables constants rules start sequence 
conway similar approach neumann famous game life 
suspected cellular automata cells states emerge computing capabilities despite simpler structure 
key simplicity rules dictating survival birth death 
number possible states reduced alive dead 
mentioned craig reynolds proposed individual approach simulate aggregate motion flock birds herd land animals school fish 
nature entity decides individually course depending perception dynamic environment set behaviors programmed 
aggregate motion result dense interaction relatively simple behaviors 
results impressive times movies games 
karl sims evolved virtual creatures able move behave dimensional dynamical environments 
morphology neural system generated automatically genetic algorithms see section 
different fitness functions able direct evolution specific behaviors swimming walking jumping 
chris uses similar approach phd produce robot configurations specific tasks 
eth zurich cs technical report institute visual computing 
artificial life overview artificial intelligence artificial intelligence ai researchers try construct intelligent machines operate humans 
areas computer science ai probably covers largest number fields psychology economics physics 
difficult define 
russel norvig classifies different definitions ai distinguishing behavior system acting vs thinking way behaves human vs rational 
distinction leads different approaches ai acting humanly category basically area turing test applied test human characteristics program 
test consists main aspects natural language processing knowledge representation automated reasoning machine learning 
note test test physical abilities 
done total turing test works connection computer vision robotics 
thinking humanly category covered field cognitive science brings computer models ai experimental techniques psychology 
goal imitate human thinking closely possible 
solution problem interesting program achieves solution 
thinking rationally field ai aristotle codify right thinking 
famous lead field logic 
main obstacles pointed 
easy handle uncertain things obviously exist world second big difference able solve problem principle doing practice 
acting rationally acting rationally means acting achieve goals beliefs 
category leads rational agent approach 
agent perceives acts 
correct inference category part rational 
point suggest humans irrational sense emotionally unstable 
note systematic errors human reasoning normal human beings example chess 
eth zurich cs technical report institute visual computing 
artificial intelligence agent 
rational agent needs possibilities decisions provably correct things events reasonably said involve inference reflexes 
jon doyle divide day ai research primary overlapping areas knowledge representation articulation learning adaptation deliberation planning acting speech language processing image understanding synthesis manipulation locomotion seeks autonomous agents robots multiagent systems cognitive modeling mathematical foundations research projects cover just minor number areas totally suitable solution possible desired rational agent 
concentrate aspects areas sections 
gain insight learning techniques go decision making problem solving 
take look planning acting guides complex ai systems frameworks 
adaptation learning chapter give reader overview self adapting techniques genetic evolution learning 
genetic evolutionary algorithms genetic algorithms ga solve complex problem degrees freedom normal computational power sufficient search domain possible states get best solution 
class algorithms finds best solution 
nature algorithm stems evolution theory basic rules important development natural entity plant creature generations combination process combining genetic information entity information parent form new 
mutation recombination process genetic information partly changed recombined considering direct impact life form 
selection process survival fittest life forms survive better 
main process genetic algorithms function defined evaluate fitness life form 

term agent widely chapter 
try define chapter 
definition reader think software robot act autonomously 
adaptation learning eth zurich cs technical report institute visual computing main task building ga solution particular problem find fitness function gives value fitness solution instance 
ga specific task code variables problem chromosomes obtain possibility combination mutation 
important inverse function maps certain set chromosomes instance solution space chromosomes mutated instance evaluated 
ga start random set chromosomes evaluated recombined respect fitness values way chromosomes better value target problem better chances reproduce 
leads local extrema domain possible states mutation recombination process help overcome barriers find regions better solutions actual 
see survey ga whitley tutorial gas 
mitchell forest list various forms problems ga successfully applied optimization numerical automatic programming evolving computer programs design cellular automata sorting networks machine robot learning classification prediction tasks weather forecast rules classifier systems symbolic production systems control robots economic models model process innovation development bidding strategies emergence economic markets immune system models somatic mutation discovery multi gene families ecological models biological arms races host parasite evolution symbiosis flow 
designing ga difficult 
mentioned tasks defining fitness function chromosome coding harik considers size population parameter 
provide model predicting convergence quality ga depending size 
gas various research projects draw natural looking graphics evolve virtual creatures simulate ant colony evolution generate robot configurations 
balakrishnan ga design neural networks yamauchi explore ga evolve neural networks capable sequential behavior learning 
simulated annealing simulated annealing considered similar approach find local extrema unknown multi dimensional space 
genetic algorithms general optimization method stochastically simulates slow cooling physical system 
main idea temperature measure flexibility choosing step 
temperature steps get smaller smaller minimal solution near optima 
martin otto combine simulated annealing local search heuristics order find solution faster 
boese simulated annealing neural networks discussed section 
neural networks learning examples genetic algorithms simulated annealing neural networks nn group algorithms derived natural phenomenon 
nn try simulate part natural brain neurons synapses dendrites 
consists layers called units layer input layer output layer 
layers middle called hidden layers 
layer unit neuron connected weighted eth zurich cs technical report institute visual computing 
artificial intelligence joint unit layer 
unit sums incoming signals produces output signal continuous discrete dependent activation function assigned units 
activation function usually chosen step sign sigmoid function 
learning nn process updating weights units 
nns trained give desired output specific input stimulus applying training examples available 
different algorithms supervised unsupervised training usually variation back propagation learning 
difficulties nn arise deciding structure nn number input output units number size hidden layers 
ripley provides pattern recognition issues nn 
minsky papert show limits approach 
applications nn arise different areas handwritten character recognition driving 
controllers different tasks back parking truck trailer landing space shuttle moon surface animated dolphin learning swimming implemented nn 
game creatures inscape uses heterogeneous nn simulate brain 
initial model contains approximately neurons grouped lobes interconnected roughly synapses 
research nn done various ways provide examples 
sontag briefly surveys results relevant suitability nn models dynamical systems controllers nonlinear plants 
lecun improves performance nn removing unimportant weights 
yamauchi genetic algorithms evolve continuous time recurrent nns capable sequential behavior learning 
mathias replaces batch model learning interactive teaching model obtain better performance learning 
balakrishnan discusses evolutionary designs neural architectures simulated annealing nn show cooling strategy necessarily decreases monotonically zero 
schnitger deepen memory complexity nn 
reinforcement learning contrast neural networks learning process examples reinforcement learning rl uses success failure reward punishment indicators result 
trial error interaction performed 
process described littman provides large survey rl summarize historical basis field broad selection current 
rl task learning successful function 
main difficulty originates fact desired function completely unknown 
reinforcement gives fuzzy rating exact reason success failure unknown 
consider chess playing agent looses game 
intuitiveness reason determine moves poorly chosen 
furthermore distinguishes passive active learning 
passive learner simply watches world going active learner act learned information 
problem task exploration 
task designed carefully obtain equilibrium exploration tion 
problem bases fact agent choose action 
take appropriate action choose non optimal actions receive better reward action sequence 
question leads called bandit problem 
algorithms overcoming problem problem solving eth zurich cs technical report institute visual computing statistical analysis sequences auer advisory full control payoffs 
applications rl arise fields 
lists game playing robotics controlling major areas 
research done example social reinforcement agent capable learning preferences number users online chat 
verifies game designs playing strategies rl 
evolved decision making agents working large data sets able communicate order optimize performance 
support vector machines supporting vector machines svm classification technique developed bell labs 
alternative training technique polynomial radial basis function multi layer perceptron classifiers 
solves quadratic programming problem linear inequality equality constraints obtain weights network 
compared neural networks svm solve non convex unconstrained minimization problem obtain better generalization performance 
hand svm require large amount memory quadratic form completely dense memory needed grows square number data points 
svm classification recognition problems face detection text categorization 
list online available applications provided www com isabelle projects svm html 
faloutsos uses svm determine preconditions controllers skeleton movements 
states advantages svms better performance learning rate competing methods nn 
stated obvious disadvantage enormous memory consumption algorithm 
learning techniques ram presents overview goal driven learning techniques 
researchers support view learning process strongly influenced learner goal fundamental tenet goal driven learning learning largely active strategic process learner human machine attempts identify satisfy information needs context tasks goals prior knowledge capabilities environmental opportunities learning addresses issues role utility goals learning justification models cognitive results goal processes deciding learn guiding learning learning process pragmatic implications goal driven learning design instructional environments 
problem solving section shows agent act establishing goals considering sequences actions achieve goals 
goal set means achieving goal called problem process exploring means called search 
goal formulated necessary consider actions states considered 
specified search sequence transitions actions eth zurich cs technical report institute visual computing 
artificial intelligence lead desired goal state started 
returns solution form action sequence carried 
problem formulation task problem formulation issue process 
specifies essentially different types problems single state problems multi state problems contingency problems exploration problems 
single state problems 
world accessible agent sensors give information tell exactly state possible action determines exactly state agent able find sequence actions lead goal state 
multiple state problems 
considering world agent sensors provide information ensure agent current state 
act uncertainty start search multiple states search common solution 
agent reason set states single state 
contingency problems 
turns fixed action reach certain goal current problem solved current state 
agent sensors receive new information execution phase help solve problem 
notice agent calculate tree actions single action sequence 
general branch tree deals possible contingency arise 
problems real physical world problems exact prediction impossible 
exploration problems 
imagine lost foreign country map information effects ones actions agent experiment gradually refine knowledge effects actions possible states 
blind selection actions lead dangerous situations 
agent survives learns map environment solve subsequent problems 
problem collection informations agent decisions 
basic elements actions states 
actions seen operators states successor functions 
initial state known 
state space consists states reached initial state applying sequence actions 
goal test applied state returns true goal state 
multiple ways reach certain goal path cost function provided select lowest costs 
define datatype represent problems datatype problem initial state operators goal test path cost function problem datatype 
task faced newborn babies 
problem solving eth zurich cs technical report institute visual computing acting afore mentioned problem formulations lead question particular point time selecting action 
single state multiple state problems generate sequence actions lead goal state applied search finished 
similar algorithms find solution 
discussed section 
contingency problems lead directly solution sequence 
agent act guaranteed plan 
useful better start executing see contingencies arise considering advance possible contingencies 
called interleaving search execution 
searching searching solution basically generation new sets states applying operators 
process called expanding state 
different states reached state choice state expand determined search strategy 
choice right search strategy important 
take criteria account find appropriate strategy completeness guaranteed find solution 
time complexity long take find solution 
space complexity memory need perform search 
optimality strategy find highest quality solution different solutions 
furthermore distinguishes uninformed informed search 
case information steps path cost considerations search space direction maximal depth 
formalized considerations called heuristics 
comparison search strategies table presents evaluation different uninformed search strategies 
breadth searches nodes expanded root node depth searches branch tree 
uniform cost expands lowest cost node fringe 
depth limited search avoids pitfalls depth setting cutoff depth 
iterative deepening tries possible depth limits ascending way 
bidirectional attempt eth zurich cs technical report institute visual computing 
artificial intelligence searches simultaneously initial state goal state stops searches meet middle 
criterion breadth applicable informed search methods usually evaluation function returns number describe desirability expanding node 
best search uses classification expands node best evaluation 
simplest best search strategies minimize estimated cost reach goal 
need heuristic function 
resulting algorithm called greedy search 
approach minimize total path cost leads called search 
unfortunately search complete optimal 
gives path cost initial state node estimated cost cheapest path goal provides estimated cost cheapest solution optimally efficient heuristic function 
optimal algorithm guaranteed expand fewer nodes 
discussed chapter respect implementation 
choice heuristic function difficult task 
cases different heuristics applicable best 
discusses appropriate questions concerning choice heuristic function 
additionally size memory restricts cases choice search strategy 
state memory conserving search strategies ida sma 
deals aspect 
iterative improvement algorithms gradient descent search simulated annealing provide practical approach problems path goal state irrelevant queens vlsi layout 
knowledge uniform cost depth depth limited section showed agent goals search solutions reach goal 
leads sophisticated behavior simple reactive agent 
focus general logical reasoning 
central component knowledge agent knowledge base kb 
set representations facts world 
individual representation called sentence 
way add new sentences query known 
commonly called iterative deepening bidirectional time space optimal 
complete 
bm bl bd table evaluation different uninformed search strategies 
branching factor depth solution maximum depth depth limit gn hn knowledge eth zurich cs technical report institute visual computing tell ask 
determine follows kb job inference mechanism main component knowledge agent 
point describe knowledge agent levels knowledge level epistemological level 
describe agent saying knows 
logical level knowledge encoded sentences 
implementation level level runs agent architecture 
choice implementation important efficiency performance agent irrelevant logical knowledge level 
agent initial program starts perceiving built adding sentences represent designer knowledge environment 
called declarative approach system building 
design learning mechanisms output general knowledge environment series percepts 
hooking learning mechanism knowledge agent agent fully autonomous 
michael van lent john laird name knowledge important parts ai engine games 
call general kb game independent knowledge 
furthermore state cause unrealistic behavior game agents unrealistic missing knowledge kb 
knowledge representation jon doyle assert knowledge representation key direction ai problem formalizing knowledge remains principal challenges ai research 
current successful knowledge systems rely carefully limiting scope domain formalized knowledge order tractable collect codify correct knowledge 
current formalizations 
fail support integration aims ai research ways overcoming limitations forms major task ai research forces consideration fundamental issues knowledge representation subject knowledge representation task represent knowledge way computer 
aspects representation syntax semantics 
syntax determines write knowledge memory semantics describe meaning content sentence semantics syntax defined precisely call language logic 
additionally needs proof theory set rules entailments set sentences 
classifies logics ontological epistemological commitments 
word ontology means particular theory nature existence 
ontological commitments nature reality epistemological ones eth zurich cs technical report institute visual computing 
artificial intelligence possible states knowledge agent 
table classifies subset known logic languages 
language ontological commitment exists world building knowledge base building kb task knowledge engineering steps considered order obtain clear correct kb decide talk 
understand domain know objects facts need talked ignored 
decide vocabulary predicates functions constants 
translate important domain level concepts logic level names 
encode general knowledge domain 
writing logical sentences axioms terms ontology see accomplish goals terms precise humans agree interpretation 
second possible run inference procedures automatically derive consequences kb 
encode description specific problem instance 
involve writing atomic sentences instances concepts part ontology 
pose queries inference procedure get answers 
reward far 
derive facts kb interested knowing 
steps known ontological engineering 
steps determine kind things exist determine specific properties interrelationships 
deepen field ontological thoughts measures places processes times intervals actions objects substances mental events mental objects 
planning planning agent differs problem solving agent representation goals states actions 
explicit logical representations enables planner direct deliberations sensibly 
introduce simple planning agent situation calculus 
addition partial order hierarchical conditional planning discussed second part section 
assuming world state accessible agent build complete representation world 
goal agent generate plan suitable planning algorithm execute 
epistemological commitment agent believes facts propositional logic facts true false unknown order logic facts objects relations true false unknown temporal logic facts objects relations times true false unknown probability logic facts degree belief fuzzy logic degree truth degree belief table formal languages ontological epistemological commitments 

classification environment discussed section 
planning eth zurich cs technical report institute visual computing outline simple planning agent 
agent perceives function percept returns action static kb knowledge base plan initially counter indicating time initially local goal current current state tell kb percept current kb ask kb current kb empty action noop action rest tell kb action return action simple planning agent world updates kb gets current state description back 
generates goal transformed plan sequence actions 
plan agent keeps executing finished 
agent notifies kb executed step keep kb date 
discuss usefulness algorithm 
reflect 
problem solving agent difficulties choose action appropriate certain situation planning agent connect states actions order logic 
example consider task buy items 
agent actions choose branching factor search tree thousands millions problem solving agent eliminate actions considerations 
supermarket agent consider buying apples milk cheese going sleep reading book 
furthermore problem solving agent start execution plan plan complete 
planning agent uses order logic represent states goals actions 
enables planner direct connections states actions 
example planning agent consider actions include goal state example buy goal milk 
situation calculus provides approach planning algorithm 
today planners restricted language known strips extensions thereof 
strips language eth zurich cs technical report institute visual computing 
artificial intelligence states goals described conjunctions function free ground literals 
actions operators consist components action description precondition effect 
plan various ways 
imagine search situation space initial situation planner goal state regressive planner 
alternative search plan space suitable plan 
start simple incomplete plan call partial plan 
representations plans manifold 
consider example putting pair shoes 
shoe come 
principle commitment says choices really necessary 
reduces amount backtracking 
want sure putting right sock comes putting right shoe 
uncorrelated left sock shoe 
partial order planner represent plans actions ordered respect steps 
totally ordered plan derived plan called linearization 
provide large chapter partial order planning 
hierarchical planning approach decomposing planning multiple levels abstraction 
higher level planner may find sequence places go lower level concrete movement instructions effectors agent 
resolving plan directly lower level produce longer plan 
lowest level primitive operators complete plan executed directly agent 
conditional planning deals incomplete information constructing conditional plan accounts possible situation 
agents decides sensory information conditions evaluate hold 
approach incomplete incorrect information execution monitoring 
agent monitors happening decide going things went wrong 
case replanning done find new plan unexpected situation 
conditional planning introduces sensing actions cause relevant conditions known agent 
uncertain knowledge order logic able handle mentioned problems tasks problem arises order logic 
agents access truth environment act uncertainty 
consider example agent planning drive airport 
find plan says airport reached minutes accident traffic jam 
find plan stating leave home minutes airplane starts 
increase agents belief get time increase probability longer wait 
rational decision depends relative importance various goals likelihood degree achieved 
agent provide degree belief relevant sentences probability theory deal 
degree belief strongly coupled evidence stands acquisition sensory information 
distinguishes prior unconditional probability evidence obtained posterior conditional probability 
distinguish various possible plans agent needs utility theory represent reason preferences 
preferences expressed utilities combined 
strips named pioneering planning algorithm known stanford research institute problem solver 
despite term problem solver program call planner 

utility sense quality useful communication eth zurich cs technical report institute visual computing probabilities decision theory 
fundamental idea agent rational chooses action yields highest expected utility averaged possible outcomes action 
called principle maximum expected utility 
probabilities leads subjects conditional probability joint probability bayes rule discuss 
reader referred 
inference uncertainty strongly coupled belief networks data structure represent dependence variables give concise specification joint probability distribution 
belief network graph holds 
set random variables nodes network 
set directed links arrows connects pairs nodes 
intuitive meaning arrow node node direct influence 
node conditional probability table quantifies effects parents node 
parents node ar nodes arrows pointing 

graph directed cycles dag rules generate compact representation beliefs relationships 
order nodes inserted affects number links influences complexity inference 
belief networks inference different ways diagnostic inference concludes effects causes 
causal inference opposite direction 
inference infers causes common effect 
mixed inference combines 
furthermore sensitivity analysis performed understand aspects modeled situation greatest impact probabilities 
mentioned utility theory roots economics money utility 
theory provides axioms determine preference different states 
classify theses states needs utility function maps states real numbers 
specific attributes function depends specified example agent energy level money combination 
research raja focus constructing framework robust agent control open environments soft real time scheduling approach satisfies aspects problem solving 
communication multiple agents act environment communicate order gain advantage collective individual 
provide list different possible communication acts inform part world explored agent exploring 
done making statements 

common name 
bayesian network probabilistic network causal network knowledge map 
eth zurich cs technical report institute visual computing 
artificial intelligence query agents particular aspects world 
typically done asking questions 
answer questions 
kind informing 
request command agents perform actions 
seen indirect speech act performed 
promise things offer deals 
acknowledge requests offers 
share feelings experiences 
intention transferring information hearer action communication purpose establishing trust social ties 
free communication obtained definition suitable lexicon grammar 
jon doyle writes strategic directions ai efficient natural communication holds key promises computers relying command languages menus textual display traditional media potential applications 
ai long addressed issues contributed great progress realizing linguistic visual communication mechanisms involving multiple modalities including natural language gestures graphics 
general form abilities lies far current scientific understanding computer technology research communicating agents done simulated colonies ants parunak brueckner decentralized method motion planning inspired synthetic pheromones insect populations 
approach solve classical problem central control 
demazeau proposes interaction language associated different interaction protocols 
illustrates social individual control issues 

pheromone scent produced sensible nose special receptors 

find bank river crossed capable carrying people 
number outnumber bank river 
problem plan sequence moves gets people safely river 
games entertainment chapter give reader short commercial computer games entertainment respect alife artificial intelligence 
define term game classify common genres games 
words game characters game development finish chapter remarks computer cinematography issues 
games provide definition game term game refers simulations wholly partly basis player decisions includes wide area different styles games classified number players opponents 
games player solitaire discussed survey due non existence players decisions 
player games interesting decisions player consider opponents possible reactions create computational problem trying predict minor number draws 
multi player games considered report classified main categories classical games chess checkers pure computer games person fps simulations sport simulations deeply investigated researchers simple clear rules finite board state computational feasible 
large number possible moves impossible create database containing position perfect move winning situation 
computer games differ 
games player interactively steering avatars virtual world overcome obstacles opponents 
eth zurich cs technical report institute visual computing 
games entertainment classical games famous chess game ibm deep blue gary kasparov board gaming received huge amount publicity 
games chess checkers go require computer think ahead current state game 
goal predict move opponent pick 
computer needs rating possible moves 
obtain computer searches tree possible moves assigns node value indicate gain sequence moves node 
move minimizes opponents maximal move chosen perform 
tree called minimax tree 
extension algorithm alpha beta pruning prunes parts tree considered search value node small 
chapter provides overview algorithms 
refutation algorithm assumption computer opponent set heuristics determine move take 
assumption playing humans 
weakness limited depth search tree moves ahead considered 
see advantages positional game gain move clear game 
completely solved sense possible state game marked winning loosing draw game 
example ralf gasser member prof nievergelt group eth zurich showed draw game played perfectly players 
pure computer games computer games player controls usually virtual avatar moves behaves inside virtual world 
games time available calculate behavior usually short task computationally expensive 
games finite state machines fsm model behavior players avatar opponents 
fsm usually states keep compact 
state behavior avatar predefined deterministic 
leads computational needs fast 
playing game times model obviously weak produce surprise 
fun factor avatar huge number different enemies puzzles levels 
simulation non player characters npc requires intelligent modeling behavior 
person shooter games quake doom role playing games final fantasy sport games opponents behave humans 
done fsm compact fast deterministic code 
especially determinism regarded necessity prediction game behavior development debugging process easier 
puzzles rely fact opponents appear situation 
games half life descent quake iii unreal tournament incorporated path planning tactics enemies human 
laird 
respect defined rating 
tactics mentioned game get positional advantages 
lost match games eth zurich cs technical report institute visual computing implemented enemies quake ii strengths weaknesses human players 
laird van lent list categories computer games action games involve human player controlling character virtual environment 
role playing games human play different types characters 
adventure games emphasize puzzle solving fighting 
strategy games player controls units military origin opponents 
god games player god control simulated world 
team sports player part team plays combination coach player 
individual sports player competes directly players 
action games ai control enemies 
years realism graphics competitive aspect run course better ai point comparison 
action games longer single player games extended team player games network 
teams built human ai players 
action games role playing games ai control enemies player avatar 
similar way adventure games 
ai create realistic goal driven characters player interact appropriately progress game 
laird van lent state holy grail interactive fiction computer director dynamically adjust story plot actions humans 
today games fixed scripts little variability force player essentially linear stories 
strategy games hand similar cellular automata introduced chapter 
large number entities controlled simple rules emerge complex behavior collective 
ai roles control behavior controlled units strategic opponent play type game 
god games differ strategy games respect incorporated ai 
ai controls behavior individual characters world directed player 
various possible scenarios model 
examples towns various versions people families sims upcoming sophisticated animals creatures 
simulates economical social growth development town large number citizens second simulates small number humans different skills virtual home furnished individually 
example provides virtual pets neural network sensory motor coordination behavior selection artificial biochemistry models simple metabolism hormonal system influences neural network ontogenetic development 
information network detail biochemistry stored genetic code allowing evolutionary development 
team sports games ai similar way strategy games 
control individual players second take part opponents 
usually human controls 
laird van lent point behavior meant autonomous units meant act soldiers follow orders 
eth zurich cs technical report institute visual computing 
games entertainment key player ball guiding player soccer computer controls members team 
team tactics collective behavior influence behavior individual player 
additional ai role gives play play color commentary game 
examples team sports soccer football nfl ice hockey individual sports games need similar ai techniques action games opponents enemies strategic opponents 
examples boarding tony hawk pro 
game characters different kinds computer games provided previous section 
focus roles different computer driven game characters 
laird van lent claim human level ai systems ones heard ai hal space odyssey data star trek cp star wars 
capabilities integrate seamlessly human skills real time response robustness autonomous intelligent interaction environment planning communication natural language common sense reasoning creativity learning 
declare computer games human level ai killer application constraints required realism 
provide list different basic roles tactical enemies general ai problems solved navigation path planning spatial reasoning temporal reasoning 
need perception system capabilities humans 
partners involve similar ai techniques tactical enemies 
enemies emphasize autonomy partners emphasize effortless cooperation coordination player partner 
partner ai coordinate behavior understand teamwork model goals human adapt style 
support characters usually sophisticated ai characters promise improve games 
theses characters need exist virtual world generally play human role world provide useful step human level ai 
interact adapt human players provide human 
strategic opponents advantages game developers resort cheating obtain challenging opponent 
advantages strategic opponents predictable easily beaten weaknesses 
team sports games opponents style play match real world team human player knowledgeable 
tasks strategic opponents divided categories allocating resources issuing unit control commands 
ai driven units strategy games god games team sports games 
generally high level command player carried 
large number simulated units computational needs kept low 
controlled fsms augmented path planning path 
game development eth zurich cs technical report institute visual computing role commentators observe actions generate natural language comments suitable describe action 
obvious challenge create natural language description going action game 
description may include moment moment action key tactical strategy events require complex plan recognition deep understanding game 
michael van lent john laird effective artificial intelligence engine support agents reactive context specific flexible realistic easy develop 
state current computer games usually excel requirements falling short 
conclude game agents described display properties 
research school advocates knowledge acquisition approach building characters uses model classification techniques learning method 
game development developing game challenging task 
modern computer games development decide kind machine game run console ordinary pc 
possibilities different developing 
console games expect hardware fixed speed conditions ordinary pc 
pc differs cpu speed graphics capabilities memory size input devices 
main stage pc game development process testing compatibility 
return pc offer hardware console state art graphics accelerator game impressive novel effects 
determined hardware console development process pure console game differs described 
development team single goal find setup interactive gameplay uses exactly resources available single instruction 
main constraint setup framerate fixed certain value 
processing geometric detail priority simulation calculations deal remaining cpu time 
simulation intelligent behavior game opponents remains simple state driven process mainly deterministic computationally intensive 
examine reinforcement learning design new strategy game 
intelligently generated self playing sequences determine various initial board configurations 
machine priori knowledge restricted rules design verification strategy adapted simple games 
cinematography years computer animated movies popular 
toy story bug life antz final fantasy monsters ice age popular movies 
kind movie uses computer animations 
action movie uses computer generated animations create realistic looking scenes impossible filmed real world parc matrix titanic 
presently difficult task genre animation human movements reason completely computer animated movies look animated cartoon eth zurich cs technical report institute visual computing 
games entertainment realworld movie 
final fantasy fully computer generated movie presenting realistic humans main actors animals 
main requirement games computational resources time step animations movies calculated line needs computation exceeds games far 
demand realistic looking graphics motions higher movies 
models cinematography precise detailed game characters 
chapter provide overview motion synthesis game 
agents concept agents relatively new computer science 
try give reader short overview agents 
doyle strategic directions ai contains section covering agents building integrated agents perceive act extant complex dynamic environments requires integrating wide range subfields ai computing research 
major areas ai computing research play essential roles robots planning sensing learning high performance numerical computing interacting multiple databases networks 
robots working informational environments require little investment additional expensive unreliable robotic hardware existing computer systems networks provide sensors effectors 
scaling operation autonomous robots complicated tasks 
requires integration perception action reasoning 
marriage abilities aims produce robots combine high level programmability traditional ai systems fault tolerance current autonomous robots order find definition agent consider wooldridge remarking :10.1.1.119.2204
question agent 
embarrassing agent computing community just way question intelligence 
embarrassing mainstream ai community 
problem term widely 
attempts produce single universally accepted definition ll try find definition notion agents 
classify environments agents ll introduce concepts autonomous agents 
discuss game agents special type agents 
definition despite statement wooldridge considers question presents notions agency weak strong 

doyle refers hardware software systems robots 
eth zurich cs technical report institute visual computing 
agents weak notion agency wooldridge general way term agent denote system hardware software properties autonomy agents operate direct intervention humans kind control actions internal states 
social ability agents interact agents possibly humans kind agent communication language 
reactivity agents perceive environment may physical world user graphical ui collection agents internet combined respond timely fashion changes occur 
pro activeness agents simply act response environment able exhibit goaldirected behavior initiative 
wooldridge presents definition softbots software agents etzioni softbot agent interacts software environment sensing commands interpreting environment feedback 
softbot effectors commands meant change external environment state 
softbot sensors commands meant provide 
information stronger notion agency wooldridge presents stronger notion agency 
mean agent computer system addition having properties identified conceptualized implemented concepts usually applied humans 
ai researchers gone considered emotional agents environments important issue constructing agent environment agent act 
lists principal distinctions environments accessible vs inaccessible agent access complete environment said accessible 
agent maintain internal state keep track world 
deterministic vs nondeterministic state environment completely determined current state chosen action environment deterministic 
environment agent worry uncertainty accessible 
inaccessible environments implicitly nondeterministic 
episodic vs episodic environment agent experience divided episodes 
episode consists agent perceiving acting 
quality action depends just episode 
episodic environments simpler agent need think ahead 
autonomous agents eth zurich cs technical report institute visual computing static vs dynamic environment change agent say environment dynamic agent static 
static environments easy deal agent need keep looking world deciding action need worry passage time 
discrete vs continuous limited number distinct clearly defined percepts actions say environment discrete 
chess discrete taxi driving continuous 
classification inaccessible nondeterministic dynamic continuous environment hardest case 
actions real world deterministic practical purposes seen nondeterministic eventual unpredictable events 
autonomous agents stated overview chapter agent perceives acts environment perceived information 
split agent architecture agent program maps percepts actions 
ideal agent takes action expected maximize performance measure percept sequence seen far 
agent autonomous extent action choices depend experience knowledge built designer 
shortly introduce different types agents techniques 
reflex agents respond immediately percepts goal agents act achieve goal 
utility agents try maximize happiness expressed called utility function 
principle agent program mainly consists tasks executed repeatedly 
perception agent gets actual information environment sense new situation action 

inference agent infers respect percepts world done 

selection agent selects actions considering possible step 
acting selected action performed 
lent refers inference mechanism central component ai engine sets forth constraints components meet 
job knowledge machine apply knowledge knowledge base current situation decide internal external actions 
characteristic details inference machine implements think step decision cycle internal actions act step 
lent inference mechanism simple reactive agent 
just selection rule sensory input 
sophisticated approach uses internal memory represent current state goal state reached 
additionally knowledge base contain scripted actions denote sequence basic actions executed script action selected 

example real world fulfils conditions 
eth zurich cs technical report institute visual computing 
agents usually inference mechanism divided hierarchical ordered levels 
example lent ai engine game agents uses levels top level goals modes behavior second level represents high level tactics achieve top level goals lower level contains steps sub steps called behaviors implement tactics 
nareyek presents classification autonomous agents respect computer games 
simple reactive agent triggering agents states deliberative agents goals plans 
furthermore hybrid agents anytime agents classified 
discuss different architectures agents deeper look requirements game agents 
simple reactive agents reactive agent fig 
responds immediately percepts 
decision simple reflex agent called condition action rules simple relations 
humans reflexes example closing eyes approaching 
knowledge agent encoded rules 
flocks herds schools provide approach group behavior path planning flocks reactive behavior 
entities hold internal state react environment simple rules separation alignment cohesion avoidance 
algorithm games movies emerges natural movement behavior group animals 
agents implemented efficiently range applicability narrow 
simple environments need internal state arises keep track specific information complete access environment guaranteed fig 

sims evolving virtual creatures simple action selection mechanism need internal states possibility distinguish possible states 

referred reflex agent 
autonomous agents eth zurich cs technical report institute visual computing reflex agent internal state goal agents knowing state environment decide 
agent extended sort goal information agent combine possible outcome actions order choose actions lead goal state 
resulting agent architecture goal agent show 
seen agent goal agent needs search planning unit find appropriate sequence actions 
agent efficient far flexible 
specify certain goal agent adapts plan goal 
dynamic environments replanning necessary changes environment 
nareyek describes goal deliberative calls agents requirements respect game agents follows goals world model containing information application requirements consequences actions represented explicitly 
internal refinement planning system uses world model information build eth zurich cs technical report institute visual computing 
agents plan achieves agent goals 
great deal research done planning wide range planning systems developed strips ucpop graphplan satplan 
basic planning problem initial world description partial description goal world set actions operators map partial world description partial world description 
solution sequence actions leading initial world description goal world description called plan 
problem enriched including aspects temporal uncertainty issues requiring optimization certain properties 
problem deliberative agents lack speed 
time situation different anticipated agent planning process plan recomputed 
computing plans time consuming considering real time requirements complex environment question research example presents goal directed navigation path planning real time 
utility agents dealing goals generate high quality behavior 
goal state reached multiple action sequences specification way take 
need general performance measure arises 
seen utility theory provides solution problem 
utility function provide appropriate trade goals provide way likelihood success weighed importance goals 
agent architecture concerning approach known utility agent fig 

utility agent game agents seen previous chapter games interactive user driven 
placing agents classical game environment implications 
restricts game agents eth zurich cs technical report institute visual computing processing time agent second requires sort communication agent character controlling mechanism agent game character 
environment games accessible nondeterministic 
games static distributed multi player games highly dynamic depending implementation 
games discrete continuous jump run game discrete flight simulator continuous 
accessible environment perception part decision cycle tough 
opposition real world perception robots game agents access description world 
game agents lack certain plausibility example see walls hear noises room closed doors 
perception system implement filter function separate perceivable objects 
cheating obtain intelligent agents inference mechanism resources knowledge cpu time 
lent states cost having realistic agents require knowledge better tactics behaviors challenge human opponents 
perception discussed chapter 
problem arises hard real time constraints games 
game responsive user input provide decent frame rate inference mechanism cpu time 
nareyek states need continuous transition reaction planning 
matter agent computed plan available 
achieved improving plan iteratively 
agent called execute action improves current plan computation time limit reached executes action 
short term computation horizons primitive plans reactions available longer computation times improve optimize agent plan 
time available agent computations intelligent behavior 
furthermore iterative improvement enables planning process easily adapt plan changed unexpected situations 
class agents important computer games applications fact nareyek talking anytime agents anytime algorithms chapter 
chapter detailed discussion various aspects game agents environment 
shortly research respect game agents related issues lent discusses issues artificial intelligence engine game agents 
nareyek discusses requirements intelligent game agents 
blumberg brain architecture simulate smart creatures animals game environment 
furthermore discusses new challenges character ai games 
john laird discusses interactive computer games respect human level ai 
robotic soccer research provided noteworthy results adapted game agents sports games 
example coelho presents coordination strategies simulated robot soccer stone presents architecture action selection robotic soccer 
eth zurich cs technical report institute visual computing 
agents behavior modeling modeling agent behavior internal representation difficult single solution diversity natural behavior animals humans 
ll try define requirements aspects behavior modeling respect game agents animals humans 
ll overview different research topics researchers tried model specific behavior introduced part 
part covers cognitive modeling novel method high level behavior modeling 
behavior years simulation animal human behavior research topic 
starting reynolds simulation flocks herds schools researchers began investigate behavior 
individual behavior researched different areas mainly animals 
motion simple animals snakes worms followed moving synthetic evolved animals simple connected boxes fishes snakes dolphins 
evolving ant colony ant pheromone communication explored 
fishes investigated physics locomotion perception perception learning cognition collective behavior 
predator prey behavior investigated fishes 
social behavior emotions learning wolves social group research results 
games artificial creatures commercial game creatures presents inhabitants virtual world evolve biochemistry energy modelling behavior 
years new directions motivations emotions behavior personalities universal characters 
various brain architectures discussed presents layered brain architecture artificial intelligence engine 
discuss topic chapter 
shehory evaluated modeling techniques agent systems states modeling technique adhere 
preciseness 
model unambiguous users misinterpret 

accessibility 
experts novices able understand model 
eth zurich cs technical report institute visual computing 
behavior modeling 
expressiveness 
modeling technique structure knowledge data flow control flow interaction external systems 

modularity 
existing parts modified new specification requirements arise 

complexity management 
model support easy integration highlevel low level requirements 

executability testability 
model implemented prototyping system simulation capacity order demonstrate intended behavior 


refining model provided possible dedicated path 

analyzability 
model support tools check internal consistency implications model 

openness 
modeling technique provide basis coupling specific architecture infrastructure programming language 
keep thoughts mind concentrating game agents behavior modeling methods requirements 
john laird written short design goals autonomous synthetic characters regard computer games 
large part devoted behavior agents quote parts variety complexity agent behavioral capabilities determined underlying architecture determines total space possible behaviors knowledge encoded character determines specific behaviors character combine obvious vague goal provide great gameplay 
leads holy grail character designers produce characters behavior indistinguishable human behavior course point observed behavior human really immaterial underlying implementation produces behavior 
games profitable approach usually find computationally inexpensive approximations say cheat getting caught burke seek creatures robust reactive adaptable honest expressive sensible scalable behavior 
furthermore laird subsumes capabilities define dimension variability research appreciated 
points taken 
human sensing 
character abilities seeing walls abilities hot hearing running quiet room 
unfortunately realistic models sensing difficult computationally expensive implement 

human actions 
character able perform actions environment correspond roughly human similar environment 

human level reaction times 
humans respond instantaneously changes environment take arbitrarily long respond 

spatial reasoning 
games cartesian grids spatial reasoning straightforward 
topology game standpoint character complex obstacle shortcuts third dimension added 
behavior eth zurich cs technical report institute visual computing 
memory 
current game characters described sight mind leads behavior 
complex characters need maintain memories world model world changes time 

common sense reasoning 
classes reasoning ai completely ill defined 
viable approach determine knowledge necessary tactics wish encode character encode necessary common sense knowledge support tactics 
insufficient wish develop characters develop tactics 

goals 
characters purpose goal trying achieve 
multiple goals character decide pursue actions pursue multiple goals 
goals drive actions character 

tactics 
character variety tactics methods applied achieving goals 

planning 
planning provides ability try actions internal discover consequences avoid death destruction 
benefits planning compiled knowledge base know world goals 
communication coordination 
games underlying goals characters require cooperate characters possibly human player 
characters need communicate realistic ways coordinate behavior humans 
learning 
games learning avoided 
issue characters prolonged interactions human players 
learning difficult implement lead unexpected undesirable behavior carefully controlled 
unpredictable behavior 
capabilities covered non determinism important illusion unpredictability 
depends context 
right thing predictable fine 
character sufficiently broad rich set fine grained responses behavior may difficult predict 
personality 
personality thought distinguishes character gross characteristics physical build general mental capability 
establishes style influences activities 
theory mount factors influencing style openness 
emotions 
unfortunately comprehensive computational models emotions impact behavior 
triggers anger 
anger impact behaviors 
personality expression influence emotion may critical creating illusion human behavior 
physiological 
addition emotions physiological changes happen people turn impacts behavior 
computer games collective component health level health rarely changes behavior character goes zero character dies 
include fatigue heat chemicals radiation 
kind research done regarding capabilities part section 
focus ones easy implement appropriate founded model exists research progress 
eth zurich cs technical report institute visual computing 
behavior modeling character modeling chapter discuss implementation specific details earlier workings 
general agent architectures described previous chapters widely base extensions enhancements allow sophisticated behavior peculiar characteristics accelerate computation 
redundant previously order obtain list modeling approaches 
sensing sensing perception thought different things 
sensing action getting stimulus perception decides meaning stimulus 
perception games usually problem completely accessible environment 
robots agents open environments task difficult ones 
just consider visual perception speech recognition examples 
burke biologically inspired brain architecture clearly distinguishes skills resulting call sensory honesty 
sensor system processes sensed data appears origin creature point view 
include removing culling transforming 
stimulus sensed perceived principally classification problem 
important part architecture 
type self perception important simulate awareness emotional state self action 
form sensing anticipation 
laird presents agent quake ii uses soar architecture cognitive calculations 
agent anticipates opponents actions internally predicting tactics 
zhang template pattern driven approach situation awareness assessment virtual humans 
represent situations tree structured organizational spatial structures 
situation list possible actions reduces search costs fraction costs unstructured search 
reduce load virtual pilots significantly reducing focused attention pilot response time percent 
closely related emotions expectations prediction emerging confusion surprise 
expectations originate discontinuous perception disappearing object 
expectations covered kline blumberg describe improve reactive agents respect believability robustness enabling generation short term observation expectations react appropriately violations expectations 
burke group states kind behavior uniquely adopted human brains 
introduce object persistence 
percept data observed value predicated previous observations observed 
prediction depends kind percept type data carries 
function approximation technique extrapolated position determined applied object 
predictions imply expectations creature acts anticipation event said intentions 
actions perception agent choose action going execute 
simplest case just update state agent knowledge base world model 
consider case look locomotion actions 
covered deeper chapters 
just give short overview natural locomotion research projects 
generation artificial locomotion developed artificial character modeling eth zurich cs technical report institute visual computing fishes tu terzopoulos uses different parametrized motor controllers steer virtual fish dynamic environment 
different approach uses neural networks control effectors fishes parking cars lunar lander 
rose technique generate smooth transitions segments human body motion combination spacetime constraints inverse kinematic constraints 
applied technique human body model degrees freedom created basis motions cyclic data seamless motion transitions 
characterizing motions emotional expressiveness control behavior extension system 
done parametrized motions called verbs controlling parameters called adverbs 
verbs combined verbs verb graph smooth transitions 
approach parametrized action representation par badler bridge gap natural language instructions virtual agent 
par gives complete description action described detail chapter 
approach simulating dynamically altering behavior 
spatial reasoning task path planning discussed detail chapter 
prediction moving objects discussed sensing section 
memory burke state psychologists distinguish different kinds memory 
procedural memory label skill learning example learning play piano throw baseball 
type memory declarative memory allows remember facts name chris pen table 
declarative memory broken long term memory stores important facts events working memory tracks state environment relevant immediate task 
common sense reasoning leslie valiant describes architecture designing systems acquire manipulate large amounts called commonsense knowledge 
theoretical approach explicit requirements basic computation tasks performed 
architecture designed computationally tractable large databases 
attribute efficient learning algorithms allow learning examples large dimensional systems fundamental approach 
goals goal oriented behavior discussed chapter respect agents 
additionally researchers investigated motivations 
canamero burt model motivational behavior intelligent agents 
tomlinson motivations expressive autonomous cinematography model desired shot elements 
yoon motivation driven learning motivation system composes parts drive system affect system 
drive system includes drives depending internal states sensory induced drives 
highest level affect system composes parts represent valence stance arousal 
tactics eth zurich cs technical report institute visual computing 
behavior modeling van lent laird human soar architecture uses goals tactics behaviors hierarchical order tree levels 
top operators represent agent goals modes behavior 
operators second level represent high level tactics agent uses achieve top level goals 
lower level operators steps sub steps called behaviors agent implement tactics 
cycle system select operator active level hierarchy 
laird extended system added anticipation tactics 
tactics include collecting attacking retreating chasing hunting 
selecting tactic entails selection appropriate actions hierarchical manner 
provided goal agent tries anticipate opponents behavior order get advantage 
planning task planning introduced chapter 
communication collaboration communication covered section 
consider social behavior collaboration modeling sub problem communication research dealt issues 
doyle list sociology economics politics linguistics philosophy academic sources collaborative behavior 
primary contexts mentioned important ai understanding dialogue constructing intelligent assistants supporting collaborative group designing artificial societies concentrate aspect introduces design perspective economics seeking tailor preferences agents protocols interaction environmental constraints automatically yield collaboration noninterference desirable properties group behavior 
flocks herds schools research begun study collective behavior agents 
kube zhang try control multiple behavior autonomous robots 
observations studies social insects proposes simple mechanisms invoke group behavior common task non interference follow behavior keep group environmental cues invoke group behavior allowing group behavior groups permit single agent invoke behavior group 
demazeau presents interaction language interaction protocols 
tried simulate schooling behavior neural network controllers succeeded finding suitable evaluation function schooling 
modeled implemented biologically inspired behavior 
means central organizational unit controls individual agents robots 
weiss describes novel algorithm activity coordination combines joint planning joint learning 
dautenhahn puts research social intelligent agents broader context humans perceive interact social world 
phylogenetic evolutionary ontogenetic developmental issues discussed respect social origin primate human intelligence culture 
theory empathy research primate social brain 
mentioned earlier parunak pheromone inspired approach invoke collective behavior decentralized fashion 
research covered coordination strategies simulated robot soccer social role awareness animated agents social reinforcement learning social behavior group wolves 
continued burke 
artificial agent famous game quake 
character modeling eth zurich cs technical report institute visual computing extends system ability express emotional states learn behaviors novel social contexts form context specific emotional memories 
learning seen ai chapter learning studied long time possible learn specific reactions clearly defined environment 
researchers tried simulate learning locomotion grzeszczuk dolphin parking car lunar lander terzopoulos fishes sims virtual creatures simple boxes 
general approaches studied motivation driven learning collaborative learning social reinforcement learning hierarchical multi agent reinforcement learning 
conspicuous deals opposite learning say forgetting 
personality modeling personality difficult problem due existence appropriate models psychology social psychology suit computational background 
years research started dealing personality 
start modeling behavior personalities respect object oriented programming 
goal encapsulate behavior propose concept personalities design programming model stand behavior enables reuse different places inheritance hierarchy 
personality programming paradigm model psychological effect 
wilson presents artificial emotion engine designed generate variety rich emotional behaviors autonomous believable interactive characters 
divides emotions layers behavior 
top level reactions momentary emotions 
level moods precisely cumulative effect mentioned momentary emotions 
underlying layers personality general behavior layer active 
personality defined genetic environmental differences brain structures individuals model defines characters personality area cartesian space axes defined fear efa space 
introduce beliefs obligations intentions desires boid architecture 
architecture resolves conflicts components way conflicts resolved determines agent type personality single minded stable agent intentions override desires obligations open minded unstable agent desires obligations override intentions selfish agents desires override obligations social agents obligations override desires lists possible conflicts resolved respect agents type 
emotions stated wilson emotions product personality 
researchers tried find suitable models emotions impact actions behavior 
personality young topic computer related research 
reilly phd thesis presents large diversified architecture believable emotional social agents 
different emotions modeled achieve believable environment interactive plots 
eth zurich cs technical report institute visual computing 
behavior modeling canamero modeled motivations emotions dimensional agents emotions triggered certain events produce specified amount hormones physiological effects 
different types emotions fear anger happiness sadness boredom interest 
research group describes agent architecture integrates emotions drives behaviors focuses modeling aspects emotions fundamental components process decision making 
emotional memories obtain possibility choose actions depending emotional state driving inference process emotion dependent direction 
ventura proposes model agent functioning reasoning emotions 
complex unfiltered structured representation termed cognitive image simple basic built termed perceptual image model 
study iterated prisoner dilemma ipd paradigm studying emergence cooperation individual agents 
extend problem adding modeling emotions divided categories 
attraction bounded objects includes emotions love hate 
second consequences events classified respect happy respect agent hope implicate satisfaction disappointment fear confirmed fear relief joy distress 
furthermore pride admiration shame reproach included model 
artificial emotion engine wilson models joy sadness fear anger surprise disgust possible emotional reactions 
mentioned personality modulates reactions 
reactions triggered signals punishment reward levels motivational needs 
gratch marsella try model simulate engaging believable characters populate virtual worlds 
blumberg emphasize influence emotions decision making visions planning perceiving emotions simply coloring physiological effects motion stance 
secondary emotions curiosity considered go traditional happiness sadness models express subtle aspects character mental state 
pack wolves tomlinson shows emotional behavior 
project dimensional categorical approach emotions 
maps range emotional phenomena explicitly dimensioned space pleasure arousal dominance model 
separates emotional phenomena set basic emotions example fear anger sadness happiness disgust surprise 
emotions influence style taken actions verbs adverbs model 
emotions essential creatures social interactions introduce context specific emotional memories cause return emotional state similar experienced previous encounters specific environmental stimuli dominant wolf 
csem stores value confidence enable appropriate behavior 
seen discussing perception issues expectation prediction closely related emotions emerge confusion surprise 
blumberg introduced system predicts perceptions compares prediction 
ipd non zero sum game analyze cooperation 
players choose cooperate defect 
cooperate gains 
cooperates defects cooperative player lose wins cooperating 
defecting gets 
cognitive modeling eth zurich cs technical report institute visual computing perceived data 
creatures expectations surprised relieved disappointed confused frightened misled 
cognitive modeling john funge famous siggraph introduces cognitive models go behavioral models govern character knows knowledge acquired plan actions help building cognitive models cognitive modelling language cml introduced enables definition domain knowledge specified terms actions preconditions effects 
additionally characters behavior directed terms defined goals 
animator just specify behavior outline character reasoning automatically detailed sequence actions satisfying specification 
cml built situation calculus describes changing worlds sorted order logic maps precisely 
consists situations changing properties known fluents primitive actions precondition axioms effect axioms 
cml assumes closed world effect axioms enumerate possible ways world change 
necessary define effects happen 
complex actions set recursively defined operators search tree pruned exhaustive search speed 
introduces interval valued epistemic fluents ive fluents describe uncertainty quantity change time 
sensing corresponds making intervals narrower performed current interval large sensor value imprecise 
approach demonstrated automated cinematography camera cognitive character chooses appropriate shot direction clipping dialogue 
world populated multiple rex behaves sheep dog 
example shows physics world predator shark 
knowledge successfully escape shark slower adversary 
subsequent funge discusses approach usability computer games interactive entertainment 
language postulated allows define behavior characters terms mental state knowledge goals intentions contains primitives communication automatically update characters mental states appropriately communication occurs 
ensures characters introspect mental states agent goal agents know goal 
gives characters explicit knowledge physical environment construct execute plans achieve goals environment necessary 
requirements cognitive interactive real time multi character system encountered 
characters constrained search plans certain length 
necessitates formulation goal expresses partial success ultimate goal periodic re planning current plan outdated 
providing problem specific heuristics mentioned complex actions help increase length plan 
eth zurich cs technical report institute visual computing 
behavior modeling 
underlying reactive behavior substrate act backup system plan computed time 
backup system lacks sophistication move character closer fulfilling goals prevent character doing stupid 

planning necessary frame 
reactive system responsible executing plan monitoring execution check plan assumptions significantly diverged 
chen presents logical approach high level agent control similar funge try define implement cognitive model animated agents chen event calculus ec funge situation calculus 
formalisms share basic ontology atomic actions fluents ec advantage representing actual actions particular actions duration 
feature ec ability assimilate narrative description course events adjust effects actions time line narrative precise additive fashion 
presentation task animal human motion synthesis challenging result look natural smooth authentic believable 
sensitive detecting anomalies everyday physics motions usually complex introduced techniques unsatisfying 
real time environments generation motions classified basic classes prerecorded motion playback procedural generation motions simulated physical environment 
approach uses technique called motion capturing obtain desired position sequence body certain motion motion cycle 
uses spline curves similar techniques model smooth motion trajectory spacetime previously defined postures 
emotion motion generation discussed chapter risk outlook competition 
daily motions consist task shape impression movement tell movement 
consider walk movement extrema sad slow sluggish style happy faster 
considered walking huge difference perception 
motion capturing motion capturing simplest methods obtain realistic smooth natural looking motion 
motion sequences recorded actors wearing suits marks important joints head shoulders elbow hip knee feet 
actors captured acting desired manner 
traces marks space reconstructed recorded images applied synthetic model human 
technique applied artificial animals dinosaur people don know exact way motions 
actor imitate animals motions 
movies extended method concurrent actors facilitate composition scenes multiple interacting actors placed artificial environment 
motion capturing produce natural looking movements natural 
hand captured motion applied scenes differ original setup 
imagine person going 
motion captured steeper eth zurich cs technical report institute visual computing 
presentation stair target scene difficult adapt original motion new requirements 
humans easily determine motion human lacks naturalness habituation human 
recorded motion fit exactly desired scene environment obstacles 
procedural generation movements different scenes require different movements 
think procedurally generating required positions main body parts reach impression proper movement 
addition interactive game prerecorded motion sequence movements predefined 
anyway game uses predefined motions keep computational expenses minimum goal hard achieve 
stated movements differ time due emotional state actor 
kinematics physical constraints procedural generation movements impossible 
consider arbitrary arm movement try model movement part shoulder front thumb part functions positions angles 
combining approximative movements parts usually won fit exactly holes emerge 
approach better movements kinematical constraints joints limbs 
kinematical models hierarchical skeleton represent structure animated object 
joints represented edges tree limbs represented nodes 
limb multiple joints connect limbs 
re positioning limb node children updated hierarchical structure 
forward generation simple movement easy 
generation goal oriented movements non trivial simple approach fails limbs fingers predicted directly 
inverse kinematics spacetime constraints solve problem control mentioned inverse kinematics 
start fixed task find trajectory spacetime matches constraints 
usually constraints termed spacetime constraints 
course trajectory collision free adds additional constraints problem 
cohen ngo discuss inverse kinematic problem provide useful solutions 
koga system manages multiple cooperating arms move object collision free trajectory goal configuration 
additionally approach realistic looking human arm movement planner 
rose efficient generation motion transitions spacetime constraints applicable models degrees freedom human models 
system uses combination inverse kinematics supporting limbs dynamics see section limb 
gleicher presents system edit pre recorded motions spacetime constraints 
procedural generation zurich cs technical report institute visual com physics movements kinematics approach keeps model breaking 
movement constructed repositioning limbs physical reason 
lead unnatural movements incorrect contact environment 
physics movements rely forces torques applied model time 
resulting movement model forward integration actual state time 
process commonly known rigid body simulation 
important part rigid body simulation detection collisions rigid objects intersect deform collision point temporary joint 
system solve system equations joints equality constraints contact points inequality constraints 
additionally coefficient coefficient friction specified adds inequality constraints system 
presents overview different methods solve system equations runtimes method runtime equality constraints 
lcp acyclic 
penalty 
impulse 
acyclic 

imagine realistic looking natural movements hard generate 
movements obey physical laws computation exact amount forces torques apply remains key point 
additionally problem stated occurs specified goal configuration reached leads inverse dynamics problem discuss report 
zoran popovic remarkable siggraph related topic interactive manipulation rigid body simulation 
presents system enables user interactively manipulate physically motion point spacetime 
researchers dynamics approaches animation simulation agents 
auslander presents motion synthesis hodgins animates human athletics laszlo animates balancing walking 
sims virtual creatures evolve dynamics environment 

state consists position velocity acceleration axis rotations axes 
runtime inequality constraints table summary dynamics simulation methods eth zurich cs technical report institute visual computing 
presentation motion controlling motion controlling divide conquer approach widely 
desired movement decomposed form desired movement 
composition single motion pieces complex movement blending movements novel movement non trivial tasks discussed section 
composition main problem composition motion pieces configuration contact points motion inbetween supplied animator computed 
raibert hodgins system animating dynamic legged locomotion 
main controllers simulate running various characters biped robot kangaroo 
responsible legs step exchanging support called hopping control 
second provides balance regulate running speed called speed control maintains body upright position called posture control 
hodgins visual impressive animated human athletics running bicycling controlled high level common basis 
auslander controller automatic motion synthesis enables user couple motion controllers dimensional called star man consists sticks arranged star 
system consists enhanced controllers started different configurations order obtain larger goal configuration space composite motion scripting language define fitness function synthesis search heuristic finds combining trajectory spacetime 
tu artificial fishes movement generated superposition basic motion controllers 
forward swimming turning left right 
controllers need parameter speed angle 
rose presents efficient generation motion transitions spacetime constraints 
approach systems degrees freedom human model 
motion transitions generated kinematics dynamics 
motion root body determined motion non supporting limbs generated spacetime constraints 
supporting limbs leg floor controlled optimization method solve inverse kinematics problem entire transition time just point time 
enhanced system adding verbs adverbs discussed section 
faloutsos composable controllers physics character animation 
system composed simple supervising controller controllers considered black boxes 
controller provides preand postconditions expected performance measure 
main controller select possible controllers precondition new needed 
postcondition defines range states final state character execution 
performance measure needed detect failure point execution 
approach impressive character capable balancing making protective steps arm movements sitting various ways evolved 
blending problem generate movement style walking slowly versus walking fast simple walking movement 
approaches approaches eth zurich cs technical report institute visual computing distinct movements interpolated 
basis movements synchronized way order prevent 
second extracts single basis movement walking styles separately applies style basis movement 
emotion animation bases fourier principles 
fourier expansions actual human behaviors build basis novel movements 
approach style mood movement walking extracted applied movement running 
addition speed step length hip position modeled controlled 
style machines brand approaches problem large number different motion captures common elements small number stylistic degrees freedom learned 
learned model synthesize novel motions process inter extrapolation 
approaches popovic physically motion transformation proposes novel approach problem 
motion captured data mapped simplified human model longer dynamically correct 
resolve algorithm searches spacetime optimization solution comes close possible mapped motion 
model edited spacetime reused generate novel motions 
example foot contact points varied order get longer step size 
expressive animation modeling simulating artificial characters issue corresponding presentation behavior screen accurate adaptable believable fashion additional task 
look general approaches especially facial expressions 
appropriate models action representation chapter 
principles animation john significant principles traditional animation applied computer animation 
points understanding fundamental principles traditional animation essential producing computer animation lists eleven fundamental principles 
squash stretch 
defining rigidity mass object distorting shape action 

timing 
spacing actions define weight size objects personality characters 

anticipation 
preparation action 

staging 
idea clear 

follow overlapping action 
termination action establishing relationship action 

straight ahead action pose pose action 
contrasting approaches creation movement 
eth zurich cs technical report institute visual computing 
presentation 
slow 
spacing inbetween frames achieve subtlety timing movement 

arcs 
visual path action natural movement 

exaggeration 
essence idea design action 
secondary action 
action object resulting action 
appeal 
creating design action audience enjoys watching 
research emotion human animation 
fourier expansions experimental data actual human behaviors serve basis method interpolate extrapolate human 
transitions walking running vice versa rendered smoothly performed realistically 
superposition human behaviors shown efficient technique generating rich variations human 
addition step length speed hip position modeled interactively controlled 
achieved transitions natural expected human locomotion just morphing effect atomic 
vaughan understanding movement addresses relation emotions movement theatre psychology order provide designers movements basic characteristics movements 
points different characteristics important computer animation path area direction speed 
time norman badler charles rose tried formulate parameterized action model order bridge gap natural language instructions virtual agent carrying 
badler parametrized action representation par rose model called verbs adverbs 
par includes slots types information occur linguistically adjuncts main verb phrase 
slots include spatio temporal information paths store room manner information expressed adverbs quickly carefully applicability terminating conditions inherent specified door open 
verbs adverbs model rose calls motions verbs parameters control adverbs 
verbs combined verbs form verb graph smooth transitions 
combination radial basis functions low order polynomials create interpolation space example motions 
kinematic constraints avoid unnatural motions 
allows animated exhibit impressive variety behaviors 
chi postulate looking psychological notion gesture insufficient capture movement qualities needed animated characters 
advocate domain movement observation science especially laban movement analysis lma effort shape components provide valuable parameters form execution qualitative aspects movements 
system called emote expressive motion engine applies principles independently defined underlying movements 
lma major components body space shape effort relationship 
components constitute textual symbolic language describing movement 
effort shape computational model effort comprises motion factors space weight time flow 
shape component involves distinct qualities change form movement shape flow movement shaping 
brand hertzmann approach problem synthetic motion generation learning motion patterns highly varied set motion captured sequences 
learning pro expressive animation eth zurich cs technical report institute visual computing cess identifies common elements sequences different style element performed small number stylistic degrees freedom span variations dataset 
learned model synthesize novel motion data interpolation extrapolation styles 
burke specify basic competencies motor system system simple gestures noticeable discontinuities locomotion eye head body orientation order represent attendance 
necessary produce variety movements needed performing actions 
looking movements longer time period illusion life break character fails interact environment eventually repeats animation 
order get expressive characters list expanded parametrized motor actions support new motor actions ability create new animations fly 
vague specification considered elements implemented effects 
eth zurich cs technical report institute visual computing 
presentation agent modeling chapter presents approaches agent design 
short requirements agent design considered 
remarks resource issues followed various basic approaches agent architecture 
main components agent perception system inference machine operators path planning motor system investigated detail 
previously mentioned examples systems detailed fashion 
try concentrate implementation specific topics show different approaches 
designing agent architecture non trivial task 
considerations taken respect large number requirements constraints 
wooldridge maes defines agent architectures follows particular methodology building agents 
specifies 
agent decomposed construction set component modules modules interact 
total set modules interactions provide answer question sensor data current internal state agent determine actions 
internal state agent 
architecture encompasses techniques algorithms support methodology follows specific collection software hardware modules typically designated boxes arrows indicating data control flow modules 
view architecture general methodology designating particular modular decompositions particular tasks shehory sturm summarize characteristics agent system points 
autonomy 
agents responsible activities 
self controllability supported system 
eth zurich cs technical report institute visual computing 
agent modeling 
complexity 
stated agent systems basically collection complex components 
requires strong expressive power layers details 
model modular support complexity management describe complex nature agent 

adaptability 
dynamic environment agent adapt behavior accordingly 

concurrency 
agents may perform actions time system designed parallel processing system 
parallelism concurrency required included model 

distribution 
multi agent systems distributed independent hosts support networking aspects 

communication richness 
communication agent environment agents information sources characterized type content architecture 
integrated agent model 
requirements kept mind continue specify requirements game agent architecture 
requirements burke seeks agents robust reactive adaptable honest expressive sensible scalable 
order achieve goals agent able decide partial knowledge react justifiable time learn experiences show surprise unexpected happens personality display common sense group agents 
travis lists criteria architecture supporting human agents games 
games emphasize similar aspects human performance human characteristics underlying performance represented highly reusable architecture 

main consideration building computer player enabling play game effectively 
agent architecture facilitate constructing capable agents incorporating sophisticated ai mechanisms selecting controlling action 

architecture emphasize limitations temporal characteristics human performance tend game relevant 

games differ aspects human performance worth representing 
developing particular game agent easy turn ignore human attributes currently relevant 
divides architecture human resource architecture provides human sensing methods memory agent architecture mainly consists reactive planner 
find similar distinctive modules approaches 
lent asks reactive context specific flexible realistic easy develop agents computer games 
context specific means agent selected actions correspond prior sensor input actions 
flexibility requires possibility achieve goal means different tactics different low level behaviors tactics 
realism means agent strengths weaknesses humans 
reusability knowledge considered main aspect easy developing 
resources eth zurich cs technical report institute visual computing resources computational resources computer games limited mainly real time constraint 
laird discusses point respect cpu memory 
cpu 
extreme actions selected precompiled lookup table extreme action require inference planning longer cycle rendering subsystem 
number active agents influences amount cpu time available agent 
number entities increases behavior forced simple behavior 
hierarchical decomposition entities groups subgroup companies level detail planning module problem attenuated 
usually percent cpu time available ai real time game strategy games usually significantly 
memory 
laird distinguishes types memory costs runtime architecture may need memory hold code executed ai architecture include knowledge runtime state 
second long term behavioral knowledge program storage tactics actions runtime state denotes memory cost 
amount storage required hold internal dynamic data structures behavior knowledge 
includes sensory information internal state map information 
consider memory constraints important cpu constraints game consoles pcs equipped memory 
basic approach game creatures implements open approach aims genetic inheritance really suitable investigation respect modularization agent 
look focus approach 
brain consists lobes consist neurons interconnected dendrites 
main parts distinguished attention lobe decision making part 
direct creatures attention object 
limits creature verb object actions opposed subject verb object actions reduces sensory neural processing acceptable levels 
decision making part divided perception lobe concept lobe decision lobe 
refines modular approach biology mind consists multiple interacting modules 
sensory information fetched sensory system passes relevant sensory information percepts perception system working memory 
percept memory objects stored 
action system selects action actual percept memory objects groups list scanned deterministic action selection action active default actions selected 
internal blackboard mechanism selected action possibly propagated navigation system decomposed motor tasks 
applied agent 
burke extend approach proprioceptive channel connects blackboard back sensory system emulate self perception 
chen behavior specification language bsl similar funge cml approach integrated agent architecture 
model layered control modules 
motor layer provides appearance motion planning layer implements 
lobe part biological brain 
eth zurich cs technical report institute visual computing 
agent modeling brain architecture burke simplified agent architecture chen brain responsible motor perception low level action control 
reactive layer responds unexpected events 
bsl interpreter planning layer reason achieve agent goals 
reactive layer prevents planning layer stopping goal reasonable time 
different approaches represent commonly ways research tried build artificial brains control autonomous agents 
modular neural network approach really open adaption learning lacks 
second tries split system multiple control units responsible certain task 
guaranteed difficult find open representation easily add new behavior 
decomposition modules responsible general task 
mix approaches tries find solution control openness 
perception eth zurich cs technical report institute visual computing perception step agent cycle sensing perception 
burke clearly distinguishes sensing perception sensing part system decide input relevant agent object outside field view irrelevant perception mechanism transforms sensed data agents space inserts sensed information knowledge base 
computer vision provides algorithms visual perception interpretation input images 
games simulations problem omitted world accessible care incoming fuzzy information 
especially vision audio sensory system designed carefully order obtain nearly agent 
processing sensory information done various styles 
tu terzopoulos neural inspired architectures artificial fishes task map sensory information input neurons proper way 
tu implements vision temperature sensor uses subsystem rejects unimportant sensory information 
vision sensor simulated computer vision algorithms ideas primate vision apparatus 
phd thesis focuses motion generation presents hardware accelerated synthetic vision sensor renders low resolution image agents viewpoint order find objects line sight 
object rendered different color objects rendered different colors image result list visible objects 
additionally presents algorithm sensing dynamic environ sense plan control loop dynamic environments ments 
problem hidden moving objects arises immediately 
trick re run vision sensor objects agent expects see result get set vm containing objects visible 
difference sets depicts set objects disappeared 
challenges character ai games discusses relevant issues perception sensing 
important part discussion treats sensory honesty 

example position object transformed world coordinates relative coordinate system origin agent point view 
eth zurich cs technical report institute visual computing 
agent modeling considered fundamental principle believable agents 
sensory honesty deals perceived perceived 
occluded objects visible coordinates object relative coordinates global world coordinates 
produces basic separation state world view state agent 
forces agent intelligent assumptions evolving world includes anticipation imagination 
situation assessment investigated zhang 
views situation assessment classification task appropriate situation templates tested match current situation 
construct object patterns sensed entities 
approach tries hierarchical nearest neighbor search fails 
second approach uses situation templates 
selects possibly relevant templates builds set patterns template chooses highest relevance function value 
approach uses priori knowledge guidance observed objects variables 
process show 
situation recognition zhang inference task inference complex manifold 
goal predict behavior meets requirements environment agent 
logical reasoning deduction planning learning builds base inference machine 
different approaches reasoning order logic predicate calculus situation calculus spatial reasoning reasoning uncertainty 
game agent infer situation calculus order set correct plan achieve certain goal 
order faces main problems game environments highly dynamic complex hard predict user input 
second amount processing time inference strongly limited cpu time mentioned 
dynamic world plan generated situation calculus fail execution due external changes unpredictable generation 
replanning mechanism provided started agent realizes unexpected situation recognizes change assumptions 
real time environments inference mechanism simply search tree possible states goal state suspend important processes rendering simulation 
goal inference mechanism provide time inference eth zurich cs technical report institute visual computing answer relevant question done 
algorithms known anytime algorithms 
anytime algorithm algorithm interrupted time quality result returned interruption increases processing time 
primary advantage anytime planner agent afforded complete control planning process 
anytime planning goal oriented agent behavior 
points algorithms hardly find optimal complete solution deems advantage disadvantage humans seldomly behave complete rationality instance interrupting forward chaining total order planner result plan fragment take agent start state point environment search space 
may guarantee point closer desired goal state start point 
total order regression planner interrupted resulting plan plan arbitrary point search space goal state guarantee agent get point 
outcome different partial order planner 
theses results useless generating behavior agent htn planner basis anytime planner presents anytime algorithm reasoning uncertainty 
presents algorithm maze solving agent perfect noisy sensors actuators 
operator selection closely related inference mechanism task operator selection 
burke specifies essential issues addressed designing action selection mechanism fundamental representation actions system 
second system choose action perform third choice modified allow learn experience 
issue discussed section 
deeper look second 
sims fishes creatures abstraction actions 
system relies neural network connects input sensors internal functional neurons effectors directly artificial muscles 
depending fitness function creature evolves swimming walking jumping behavior 
contrast hodgins uses state machine animated human athletics 
state machine determines sequence constraints motions running athlete 
emotional agents network self interested behaviors selected value computed independently behavior 
proposed model able select multiple behaviors time perform simultaneously 
expressive autonomous cinematography system uses similar approach 
mutual exclusion behaviors system calculates value behavior depending currently active behavior order obviate oscillation behaviors closely matched values 
call effect behavioral aliasing 
burke states agent able perform action time 
combinations actions possible permitted 
proposed selection mechanism uses see section calculate relevance depicts importance action 
relevance depends state action 
action inactive considered active 

htn planner hierarchical task network planner takes partially ordered set tasks actions uses schemata reduce tasks substituting networks tasks actions actions remain 
tasks actions interfere critic functions perform arbitrary plan transformation repairs 
eth zurich cs technical report institute visual computing 
agent modeling grouped 
actions permitted run simultaneously group allows action run relevance larger zero 
groups arbitrate competing 
divided list default list 
action returning highest relevance wins executed 
action list returns positive relevance actions default list taken account compete probabilistically basis specified value 
aylett presents motivation planning algorithm shown 
motivation planning system aylett states motivations long term aims objectives drives emotional states depending domain 
motivations associated weight changes time provides driving force directing generation goals satisfy motivation 
motivations allow agent evaluate plans generates achieve goals choose alternative plans motivations modeled set tuples name weight 
hashtable links name possible action parameters motivations supports undermines 
way action contributes motivation represented sets pros cons 
set tuples name strength giving name motivation degree action supports undermines 
step goal action selected executed 
goals actions selected importance effort deadline 
cycle agent decide invest planning executing 
stone presents architecture action selection robotic soccer relies competing actions evaluate score action highest score selected executed 
problem outcome action foreseeable set heuristics allow robot passing shooting dribbling moving tactical position ball 
won lead sophisticated game high level tactics team playing considered evaluation 
inference eth zurich cs technical report institute visual computing operator modeling consider operators hierarchical order major part knowledge base knowledge facts operators 
includes tactics plans complex actions atomic actions 
examine modeling operators actions order obtain requirements entities 
spector technical report reactive planning multi level architecture defines generic operator consist components shown concept format operator monitors remarkable trigger effect success failure suspension resetting 
steps denote necessary sub operators operator indicates ordering constraints steps 
expect list indicates necessary forms successfully complete operator 
expectations depend sub operators 
introduced section burke actions similar contain parts mirror questions long 
shows example 
trigger context corresponds example fundamental action representation expect list example action steps context consumers 
novel thing determines action 
continuation action time period state achieved 
seen chapter badler parametrized action representation par precise focused human language instruction medium 
displayed picture required component action represented specified 
eth zurich cs technical report institute visual computing 
agent modeling syntactic representation par path planning important issue game agents path planning virtual world 
task find sequence basic motor instructions forward turn right turn left purpose finding path actual position goal position 
single agent task usually solved path planning algorithm 
different algorithms finds shortest exists relatively fast 
provides short explanation 
describes speed aesthetic issues 
davis discusses path planning game star trek 
rates promising algorithm choice decomposition environment important 
approach uses quadtree spatially decompose playing field greatly reduces cells needs search 
presents real time path planning algorithm goal directed navigation 
renders line top projection scene obstacles height range character uses circular disk representing character find collision free trajectory 
task computable time moving obstacles replanning line 
path module generates motion path 
eth zurich cs technical report institute visual computing paul 
framework integrating intelligent tutoring systems gaming simulation proceedings winter simulation conference 
atkin westbrook cohen 
capture flag military simulation meets computer games papers aaai spring symposium artificial intelligence computer games pages 
aaai press 
auer cesa bianchi freund schapire 
gambling casino adversarial multi armed bandit problem proc 
th annual symposium foundations computer science pages 
ieee computer society press los alamitos ca 
auslander fukunaga christensen hsu reiss marks ngo 
experience controller automatic motion synthesis articulated figures acm transactions graphics tog 
aylett 
agent continuous proceedings th workshop uk planning scheduling special interest group 
badler bourne palmer shi schuler 
parameterized action representation virtual human agents workshop embodied conversational characters lake tahoe ca 
balakrishnan honavar 
evolutionary design neural architectures preliminary taxonomy guide literature technical report department computer science iowa state university ames iowa 
bordini 
framework simulation agents emotions proceedings fifth international conference autonomous agents pages 
acm press 
schuler badler joshi palmer 
dynamically altering agent behaviors natural language instructions proceedings fourth international conference autonomous agents pages 
acm press 
lieberherr mezini 
modeling behavior personalities 
boese kahng 
simulated annealing neural networks cooling strategy reconsidered 
brand hertzmann 
style machines proceedings th annual conference computer graphics interactive techniques pages 
acm press addison wesley publishing 
eth zurich cs technical report institute visual computing dastani huang der van torre 
boid architecture conflicts beliefs obligations intentions desires proceedings fifth international conference autonomous agents pages 
acm press 
burges 
simplified support vector decision rules international conference machine learning pages 
burges 
tutorial support vector machines pattern recognition data mining knowledge discovery 
burke downie ivanov blumberg 
art architecture virtual brain proceedings game developers conference pages 
burt 
modelling motivational behaviour intelligent agents virtual worlds 
mark 
game programming gems 
charles river media ma 
steve rabin 
ai game programming wisdom 
charles river media ma 
canamero 
modeling motivations emotions basis intelligent behavior johnson editor proceedings international conference autonomous agents new york ny pages 
acm press 
chen 
logical approach high level agent control proceedings fifth international conference autonomous agents pages 
acm press 
chi costa zhao badler 
emote model effort shape proceedings th annual conference computer graphics interactive techniques pages 
acm press addison wesley publishing 
coelho 
evolving coordination strategies simulated robot soccer proceedings fifth international conference autonomous agents pages 
acm press 
cohen 
interactive spacetime control animation proceedings th annual conference computer graphics interactive techniques pages 
acm press 
collins jefferson 
simulated evolution langton taylor farmer rasmussen editors artificial life ii pages 
addison wesley redwood city ca 
creatures 

www creatures uk 
dautenhahn 
socially intelligent agents primate social brain science social minds proceedings aaai fall symposium socially intelligent agents 
aaai press 
davis 
warp speed path planning star trek aaai spring symposium technical report aaai spring symposium 
demazeau 
interactions collective behavior agent systems 
eth zurich cs technical report institute visual computing doyle dean strategic directions artificial intelligence acm computing surveys 
etzioni lesh segal 
building softbots unix preliminary report 
faloutsos van de panne terzopoulos 
composable controllers physics character animation proceedings th annual conference computer graphics interactive techniques pages 
acm press 
frank 
explanation count papers aaai spring symposium artificial intelligence computer games pages 
aaai press 
funge 
cognitive modeling games animation communications acm 
funge tu terzopoulos 
cognitive modeling knowledge reasoning planning intelligent characters proceedings th annual conference computer graphics interactive techniques pages 
acm press addison wesley publishing 
grand cliff malhotra 
creatures artificial life autonomous software agents home entertainment proceedings international conference autonomous agents pages 
acm press 
gratch marsella 
tears fears modeling emotions emotional behaviors synthetic agents proceedings fifth international conference autonomous agents pages 
acm press 

simulating creature behavior investigation 
bsc sheffield hallam university 
grzeszczuk terzopoulos 
automated learning muscle actuated locomotion control abstraction proceedings nd annual conference computer graphics interactive techniques pages 
acm press 
grzeszczuk terzopoulos hinton 
fast neural network emulation control physics models proceedings th annual conference computer graphics interactive techniques pages 
acm press 
hahn 
realistic animation rigid bodies proceedings th annual conference computer graphics interactive techniques pages 
acm press 
harik cantu paz goldberg miller 
gambler ruin problem genetic algorithms sizing populations proceedings ieee conference evolutionary computation ieee world congress computational intelligence 

real time goal oriented computer game agents 

anytime planning agent behavior 
hodgins brogan brien 
animating human athletics proceedings nd annual conference computer graphics interactive techniques pages 
acm press 
eth zurich cs technical report institute visual computing poole 
anytime algorithm decision making uncertainty 
isaacs cohen 
controlling dynamic simulation kinematic constraints proceedings th annual conference computer graphics interactive techniques pages 
acm press 
isbell shelton kearns singh stone 
social reinforcement learning agent 
blumberg 
new challenges character ai games aaai spring symposium ai interactive entertainment 
burke downie blumberg 
layered brain architecture synthetic characters ijcai august 
joachims 
text categorization support vector machines learning relevant features dellec rouveirol editors proceedings ecml th european conference machine learning number pages chemnitz de 
springer verlag heidelberg de 
littman moore 
learning survey journal intelligence research 

verifying game designs playing strategies reinforcement learning selected areas cryptography pages 
kline blumberg 
observation expectation generation response believable reactive agents proceedings fourth international conference autonomous agents pages 
acm press 
koga kondo 
latombe 
planning motions intentions proceedings st annual conference computer graphics interactive techniques pages 
acm press 
kube zhang 
collective robotic intelligence international conference simulation adaptive behaviour pages 

goal directed navigation animated characters real time path planning control pages 

autonomous agents real time animation 
ph thesis department computer science standford university 
laird lent 
human level ai killer application interactive computer games ai magazine 
laird 
design goals autonomous synthetic creatures 
laird 
knows re going adding anticipation proceedings fifth international conference autonomous agents pages 
acm press 
langton 
artificial life 
langton taylor farmer rasmussen 
artificial life ii 
eth zurich cs technical report institute visual computing 
principles traditional animation applied computer animation proceedings th annual conference computer graphics interactive techniques pages 
acm press 
laszlo van de panne fiume 
limit cycle control application animation balancing walking proceedings rd annual conference computer graphics interactive techniques pages 
acm press 
lecun boser denker henderson howard hubbard jackel 
handwritten digit recognition back propagation network touretzky editor neural information processing systems volume 
morgan kaufman 
lecun denker solla howard jackel 
optimal brain damage touretzky editor advances neural information processing systems ii san mateo ca 
morgan kauffman 

phd thesis automated synthesis optimization robot configurations evolutionary approach 
lin reiter 
forget greiner subramanian editors working notes aaai fall symposium relevance pages menlo park california 
american association artificial intelligence 
machado paiva prada 
wolf angry just hungry proceedings fifth international conference autonomous agents pages 
acm press 
mahadevan 
hierarchical multi agent reinforcement learning proceedings fifth international conference autonomous agents pages 
acm press 
martin otto 
combining simulated annealing local search heuristics combinatoric optimization 
mondada 
probabilistic modelling bio inspired collective experiment real robots 
mathias 
interactive model teaching 
miller 
motion dynamics snakes worms proceedings th annual conference computer graphics interactive techniques pages 
acm press 
schnitger 
neural networks efficient associative memory proceedings eleventh annual conference computational learning theory pages 
acm press 
minsky papert 
perceptrons 
mit press 
mitchell forrest 
genetic algorithms artificial life artificial life 

graphical environment virtual creatures masters thesis computer science departement eth rich 
nareyek 
intelligent agents computer games 
eth zurich cs technical report institute visual computing ngo marks 
spacetime constraints revisited computer graphics annual conference series 
osuna freund girosi 
support vector machines training applications technical report aim mit ai lab center biological computational learning dept brain cognitive sciences 
parunak brueckner 
ant synthetic pheromones distributed motion control proceedings fourth international conference autonomous agents pages barcelona catalonia spain 
acm press 

building characters form knowledge acquisition 
pomerleau 
alvinn autonomous land vehicle neural network advances neural information processing systems 
morgan kaufmann 
popovic seitz erdmann popovic witkin 
interactive manipulation rigid body simulations proceedings th annual conference computer graphics interactive techniques pages 
acm press addison wesley publishing 
popovic witkin 
physically motion transformation proceedings th annual conference computer graphics interactive techniques pages 
acm press addison wesley publishing 
ishizuka 
social role awareness animated agents proceedings fifth international conference autonomous agents pages 
acm press 
raibert hodgins 
animation dynamic legged locomotion proceedings th annual conference computer graphics interactive techniques pages 
acm press 
raja lesser wagner 
robust agent control open environments proceedings fourth international conference autonomous agents pages 
acm press 
ram leake 
goal driven learning 
ray 
artificial life tool biological inquiry 
reilly 
believable social emotional agents technical report ph thesis 
technical report cmu cs may school computer science carnegie mellon university pittsburgh pa 
reynolds 
flocks herds schools distributed behavioral model proceedings th annual conference computer graphics interactive techniques pages 
acm press 
rhodes 
stable rigid body physics proceedings game developers conference march san jose ca 
ripley 
pattern recognition neural networks 
cambridge university press cambridge 
eth zurich cs technical report institute visual computing rose cohen 
verbs adverbs multidimensional motion interpolation ieee computer graphics applications 
rose cohen 
efficient generation motion transitions spacetime constraints computer graphics annual conference series 
russel norvig 
artificial intelligence modern approach 
prenticehall 
shehory sturm 
evaluation modeling techniques agent systems proceedings fifth international conference autonomous agents pages 
acm press 

electronic arts 
ea 
www com 
sims 
artificial evolution computer graphics proceedings th annual conference computer graphics interactive techniques pages 
acm press 
sims 
evolving virtual creatures proceedings st annual conference computer graphics interactive techniques pages 
acm press 
sims 
electronic arts 
ea 
ea com 

electronic arts 
ea 
www com 
soar 
soar homepage 
ai eecs umich edu soar 
sontag 
neural nets systems models controllers 
spector hendler 
knowledge strata reactive planning multi level technical report cs tr department computer science university maryland college park md november 
stone mcallester 
architecture action selection robotic soccer proceedings fifth international conference autonomous agents pages 
acm press 
terzopoulos grzeszczuk 
perception learning artificial animals proceedings fifth international conference synthesis simulation living systems pages 

evolutionary algorithms sanchez editors evolvable hardware evolutionary engineering approach pages berlin 
springer 
tomlinson blumberg 
social behavior emotion learning pack virtual wolves 
tomlinson blumberg nain 
expressive autonomous cinematography interactive virtual environments proceedings fourth international conference autonomous agents pages 
acm press 
travis 
human computer opponents 
tu terzopoulos 
artificial fishes physics locomotion perception behavior computer graphics annual conference series 
eth zurich cs technical report institute visual computing takeuchi 
fourier principles emotion human animation proceedings nd annual conference computer graphics interactive techniques pages 
acm press 
valiant 
architecture cognitive computation technical report tr center research computing technology harvard university cambridge ma 
van lent laird 
developing artificial intelligence engine 
vaughan 
understanding movement conference proceedings human factors computing systems pages 
acm press 
vel 
robots emotional memories decision making 
ventura 
emotion agents technical report ao para ao grau de em cnica de 
weiss 
planning learning proceedings fourth international conference autonomous agents pages 
acm press 
whitley 
genetic algorithm tutorial technical report cs department computer science colorado state university 
wilson 
artificial emotion engine 
spacetime constraints 
motion editing spacetime constraints proceedings symposium interactive graphics pages ff 
acm press 
wooldridge jennings 
intelligent agents theory practice knowledge engineering review 
yamauchi beer 
sequential behaviour learning evolved dynamical neural networks 

yoon blumberg schneider 
motivation driven learning interactive synthetic characters proceedings fourth international conference autonomous agents pages 
acm press 
yu 
evolving messaging decision making agents proceedings fifth international conference autonomous agents pages 
acm press 
cliff bruten 
evolving collective behaviours synthetic fish animals animats proceedings fourth international conference simulation adaptive behavior sab pages 
mit press bradford books 
zhang randal hill 
template pattern driven approach situation awareness assessment virtual humans proceedings fourth international conference autonomous agents pages 
acm press 
zilberstein russell 
anytime sensing planning action practical model robot control ijcai pages 

