viewing objects patterns communicating agents oscar nierstrasz michael papathomas universit de gen centre universitaire informatique rue du lac ch geneva switzerland mail oscar michael cui unige ch oscar tel fax experience developing concurrent object oriented language researchers identified key problems design concurrency model compatible mechanisms object oriented programming 
propose approach language design executable notation describing behaviour communicating agents extended syntactic patterns encapsulate language constructs 
indicate various language models accommodated mechanisms inheritance modeled 
introduce new notion types characterizes concurrent objects terms externally visible behaviour 

message passing model communication object oriented languages appears naturally support concurrent execution autonomous objects 
fact led researchers try exploit autonomy developing concurrent object oriented languages 
various forms active message passing objects passive objects proposed implemented 
unfortunately approaches succeeded resolving basic conflicts concurrency mechanisms encapsulation needed safe reuse object oriented code 
claim difficulty language design problem due largely lack widely accepted understood models concurrency tools prototyping languages understanding reuse criteria encapsulated software propose practical approach design concurrent object oriented languages defined computational model communicating agents milner ccs hoare csp 
compact executable notation called abacus characterizes behav 
acm 
proceedings oopsla ecoop ottawa oct sigplan notices vol 
pp 

permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
nierstrasz papathomas agents terms possible communications agents 
various object models easily captured varying mapping objects agents varying communication patterns may take place 
programming language constructs designed mapping syntactic patterns behavioural patterns 
mappings straightforward translations executable notation lead rapid prototype language interpreter 
sections introduce notation outline objects may modeled 
shall describe design space approaches object oriented concurrency detailing specific requirements consistent model concurrent objects 
show classes inheritance genericity modelled patterns behaviour argue need explicit reuse criteria associated concurrent objects 
demonstrate signatures inadequate express valid reuse concurrent objects propose new approach views types subtypes partial specifications externally visible behaviour objects 

viewing objects communicating agents take position objects active passive regardless particular object model language naturally modeled communicating agents 
agent entity may change state communicates agent 
complex agents encapsulate collection cooperating agents may change state due hidden internal communications 
communication synchronous occurring exist matching input output offers communicate agents 
concurrency reactive behaviour easily captured model 
model fully sense agents external behaviour viewed equivalent 
designed implemented prolog executable notation called abacus modelled closely ccs csp 
behaviour expression specifies behaviour agent system agents indicating current input output offers agent replacement behaviour agent offer accepted 
behaviour expression consists event names agent names composed follows offer output replacement behaviour offer input replacement behave exclusive choice may communicate concurrent composition nil offers additionally operators help encapsulate systems cooperating agents 
include restriction relabelling hide relabel selected offers label prefixing filtering define scopes prefixed offers visible details see 
event names appear context input output offers 
agent name appears behaviour expression may 
behaviour expression viewing objects patterns communicating agents binds name expression follows 
operators highest precedence followed order formal semantics abacus easily specified set transition rules 
rules implemented straightforward way prolog specifying behaviour expression events may take place replacement expression 
exploit prolog examples follow functors agent names lists tuples event names 
trivial example behaviour expression nil nil permits communication event take place agents specified nil nil net replacement nil nil note nil nil equivalent nil happen 
order define programming language map language constructs behavioural patterns denotational fashion 
term pattern refer function evaluates abacus agents 
arguments may arbitrary values agents syntactic patterns language defined 
give flavour approach provide short examples defining semantics statements programming language 
stmt pattern takes arguments statement continuation agent perform rest computation 
example skip statement semantics skip simply continuation stmt skip cont cont 
follow prolog convention indicating variables identifiers leading uppercase character 
semi colon statement separator 
interpretation simply agent interprets continuation agent interprets stmt cont stmt stmt cont 
suppose boolean expressions computed agents terminate output offer true false 
specify command follows stmt bool cont expr bool true stmt cont false stmt cont 
example agent expr bool evaluates expression bool outputs value true false 
second agent consumes value agent selectively evaluates appropriate clause command 
complete illustration approach refer reader abacus specification sal agha simple actor language developed explain actor model 
framework relatively straightforward express variety object models 
convenient model messages compound events expressed lists tuples 
model consider restrictions nierstrasz papathomas object agent unique identity 
communicates objects sending call reply messages compound events receiver explicitly identified 
call messages client object identity client server object identity server form server msg client reply messages client identity client form object identity id characterized behavioural pattern accept id id msg client 
call id client reply id client call id client server msg id wait id client wait id client id reply 
call id client reply id client reply id client client reply accept id client reply accept id object id accept request client issue requests server objects eventually reply client 
pattern accept id partial specification behaviour says contents messages objects servers 
guarantees new requests accepted pending request 
thread control seen trace call reply events control point object states call reply 
note idea defining objects agents conform certain patterns behaviour similar minsky approach characterizing behaviour set laws 
introducing variations accept id considering different sets laws express behaviour active passive objects multi threaded objects asynchronously communicating objects objects variety concurrency control mechanisms 

design space concurrent object models encapsulation single threaded passive objects reasonably understood true concurrent objects 
depending way concurrency handled language encapsulation may violated number ways 
simplest case take object designed single threaded application expose multiple concurrent clients concurrent execution methods compromise object internal consistency 
hand object able protect concurrent requests may necessary expose implementation details order protect integrity clients example avoid deadlock 
language design offer reasonable encapsulation model concurrent objects suggest minimal set criteria met protection objects guaranteed internal consistency independently environment presence multiple threads 
scheduling object able selectively refuse delay certain requests basis internal state depending contents request message 
viewing objects patterns communicating agents interleaving desired external behaviour object constrain internal behaviour example internal concurrency permitted multiple readers methods cause state changes 
mechanisms suspending interleaving threads compromise consistency nearby objects enclosing objects subclass instances 
protection scheduling naturally modeled agents exercise complete control times messages accept 
example single slot buffer identity trivially specified buf put value prod prod ok get cons cons value buf producer send put value messages waiting ok response consumer send get messages picking value response 
elaborate scheduling requests effected internal message queues 
interleaving threads modeled relaxing restriction objects respond accepting new requests 
internal concurrency straightforward model view complex agents composed primitive agents 
criteria mind may consider design space language classes 
orthogonal approach objects concurrency constructs independent smalltalk emerald trellis owl 
semaphores locks monitors judiciously utilized achieve object protection 

heterogeneous approach data objects similar sequential languages protected concurrent objects supported 
protection concurrent objects may accomplished transactions pal considering objects active approach 

homogeneous approach threads explicitly associated objects independent programming construct 
hybrid pool abcl fall category 
objects conforming language classes easily modeled communicating agents simply varying synchronization policies observed 
example objects orthogonal class accept request time creating internal agent perform method associated request 
method agents synchronize consulting semaphore lock agents lock name acquire name release name lock name scheduling interleaving threads facilitated introducing asynchrony sending accepting calls replies resulting variety communication styles asynchronous call client object creates messenger agent delivers message client free continue activity 
message queues server object contains autonomous queue agent filters queues requests server schedule multiple requests 
nierstrasz papathomas asynchronous reply server object creates messenger deliver reply server immediately switch request 
futures actual client accepting reply picked agent saves reply needed client asks reply received block 
language classes concurrency mechanisms may technically equivalent terms expressive power profound differences terms convenience packaging objects re 
concrete example version support satisfactory mechanisms scheduling interleaving concurrent threads 
result implementation bounded buffer complex interface usual put get operations producer consumer required check return value put get order find buffer empty full suspend activity necessary 
wake method invoked asynchronously buffer supplied 
problem corrected version providing monitor synchronization mechanism enabled buffer suspend client threads buffer empty full 
way integrity buffer depend clients behaved 

software composition reusable patterns mechanisms notably responsible reusability object oriented software object classes class inheritance genericity classes objects instances object class template objects share internal structure methods responding clients requests 
class inheritance subclasses defined incremental modifications superclasses share structure methods 
genericity generic class template object class parameterized names object classes specification 
mechanisms viewed means reusing behavioural pattern encapsulated parameterized syntactic pattern 
object classes templates objects parameterized initialization values object instance generated calling constructor class optionally supplying values initialize new object 
generic classes straightforward extension idea main difference parameters may object classes just values 
generic container class list generate example list integers list windows 
view inheritance way distinguishing different ways class may generate objects generate subclasses 
consider example object model object consists control agent implementing methods hidden set concurrent agents implementing instance variables 
class defined pattern follows viewing objects patterns communicating agents id id shall ignore sake brevity initialization variables object protect instance variables accessed objects 
done restriction operator mentioned earlier hide communication offers involving instance variables may filtering hide selected offers communicate outside world 
pattern id generate objects 
order define subclass need concept generator template class parameterized additional behaviour methods instance variables id id class instantiated generator binding additional behaviour nil id id nil nil subclass hand created supplying parameters behaviour additional instance variables methods 
permit subclassing create subclass generator adding new behaviour possibly introducing new parameters id id id id id nil nil subclass pattern id results directly defined id id id overriding inherited methods instance variables handled way constructors permit default initialization instance variables overridden default behaviour method instance variable desired simply re assigned 
support means abacus overriding name conflict resolution multiple inheritance possible explicitly stating inherit 
note approach resembles somewhat cook uses generators wrappers develop denotational semantics functional objects 
functional objects pure values directly model side effects reactive behaviour contrast case communicating agents semantic target 
argue inheritance object oriented languages subsumed parameterized software templates feel modeling inheritance terms incremental modifications behaviour communicating agents helps expose semantic confusion design inheritance mechanism language leads robust language design 

viewing types partial specifications behaviour key problem designing concurrency model consistent principles object oriented programming package concurrent objects instantiation inheritance safely applied violating encapsulation 
signatures provide nierstrasz papathomas view objects hiding implementation details furnish useful notions substitutability subtyping type checking 
unfortunately signatures fail provide information externally visible behaviour objects guarantee valid 
propose new notion types partial specifications external behaviour extends substitutability subtyping concurrent objects 
signature list operations messages understood object argument return types subtype may add operations permit existing operations accept wider range argument types restrict range values returned operations 
signatures inadequate describe possible interactions concurrent objects clients primarily take account variations behaviour time mutability operation allows set state object argument value set included subtype signature subtype refines value space specific arguments required put client error see discussion aging functions 
changing roles object presently conforms type specification may longer conform viewed subtype person may signature compatible 
scheduling concurrent objects exhibit non uniform service availability attempt schedule requests 
bounded buffer may support read operation guarantee request return matching write issued 
interleaving signatures way capture interactions object multiple concurrent clients 
client point view type specify just information object express valid patterns communication 
interpret context meaning client server sends inappropriate messages safety requests serviced liveness 
convenient think types subtypes terms partial specifications behaviour substitutability 
view say object type saying true 
furthermore type know objects satisfy satisfy say subtype effect type describes software contract object clients subtype simply stronger contract 
client expects object type may substitute object subtype domain communicating agents concurrent type partially specifies possible interactions agent peers 
consider example partial specification single slot buffers buf id id put prod prod ok buf id buf id id get cons cons buf id says buf alternately accepts requests producers consumers says values returned consumer unbound 
implementation single slot buffer buf earlier satisfies specification sense producers viewing objects patterns communicating agents consumers expect object type buf satisfied buf 
note buf equivalently viewed specification non deterministic agent provides random values consumers 
sense buf simply deterministic buf 
interestingly signatures completely subsumed view types id id put prod prod ok id id get cons cons id partial specification unbounded buffer limit number put requests 
permits buffer return arbitrary values buffer empty 
note viewed subtype buf object satisfies safely object type buf expected 
define subtype relation subtype properties 
accepts input offers 
presents output offers 
input output offer replacement sr offer expected clients replacement tr event sr tr 
offer offer criteria apply computation paths reachable communications client 
example second condition doesn apply responses request client permit 
criteria conclude id buf id 
note treat input output offers asymmetrically contrast observation equivalence 
justify view noting input offers correspond safety conditions messages client safely send output offers correspond liveness conditions range possible values client expect reply 
unfortunately conditions appear necessary sufficient 
example consider agent behaves just buf blocks consumer tries get value producer puts buf get cons nil agent conform buf requirements non deterministically deadlock presence concurrent producers consumers 
constraints services specified types subtypes appear necessary resolve problem 
framework understanding concurrent types plan investigate precisely kinds specifications useful characterizing reuse criteria circumstances type checking feasible practical 
types allowed specify type checking equivalent program verification 
attempted unify object types message types objects agents messages events pure values 
particular object sent part contents message objects nierstrasz papathomas values may send object id value representing state object value representing behaviour object object 
message contents values type checking communications handled traditional way 
promising directions reconsider path expressions means describe behaviour lines restricted form temporal logic states express external behaviour object terms liveness safety conditions 
presently investigating properties interaction conformance characterizes agents terms possible interactions set observers 

concluding remarks clean integration concurrency features object oriented languages open problem 
proposed model design concurrent object oriented languages communicating agents compact executable notation semantic target language specification 
large variety powerful expressive mechanisms proposed included various languages proved difficult devise approach sufficiently powerful easily express solutions standard concurrency problems minimizes difficulties reusing concurrent objects inheritance mechanisms software composition 
claim majority problems result particular choice concurrency mechanisms lack methods encapsulating objects specifying reuse criteria 
rectify situation propose new notion object type characterizes concurrent objects terms externally visible behaviour 
working design new generation concurrent object oriented language identifying attempting resolve key conflicts concurrency objectoriented software composition 
continuing abacus platform exploring various models concurrent objects 
developing pattern language permit syntactic patterns bound behavioural patterns abacus 
developing polymorphic type model concurrent objects partially specifies behaviour objects terms safety liveness conditions interactions clients 
viewing objects patterns communicating agents agha actors model concurrent computation distributed systems mit press cambridge massachusetts 
america pool parallel object oriented language object oriented concurrent programming ed 
yonezawa tokoro pp 
mit press cambridge massachusetts 
bj object management system acm sigplan notices proceedings oopsla vol 
pp 
nov 
black hutchinson jul levy carter distribution data types emerald ieee transactions software engineering vol 
se pp 
jan 
van den bos parallel object language protocols acm sigplan notices proceedings oopsla vol 
pp 
oct 

briot yonezawa inheritance synchronization concurrent oop proceedings european conference object oriented programming pp 
paris france june 
campbell habermann specification process synchronization path expressions operating systems international symposium ed 
kaiser lecture notes computer science pp 
springer verlag 
cardelli wegner understanding types data abstraction polymorphism acm computing surveys vol 
pp 
dec 
wm 
cook denotational semantics inheritance acm sigplan notices proceedings oopsla vol 
pp 
oct 
tomlinson type theories object oriented programming acm computing surveys vol 
pp 
march 
goldberg robson smalltalk language implementation addison wesley may 
gordon denotational description programming languages springer verlag 
hoare communicating sequential processes prentice hall 
kafura lee inheritance actor concurrent object oriented languages proceedings third european conference object oriented programming pp 
cambridge university press nottingham july 
kristensen madsen ller pedersen nygaard beta programming language research directions object oriented programming ed 
shriver wegner pp 
mit press cambridge massachusetts 
lamport specifying concurrent program modules acm toplas vol 
pp 
april 
lieberman concurrent object oriented programming act object oriented concurrent programming ed 
yonezawa tokoro pp 
mit press cambridge massachusetts 
liskov herlihy gilbert limitations synchronous communication static process structure languages distributed computing th symposium principles programming languages st petersburg beach florida jan 
meyer object oriented software construction prentice hall 
milner communication concurrency prentice hall 
minsky law approach object oriented programming acm sig plan notices proceedings oopsla vol 
pp 
dec 
moss kohler concurrency features trellis owl language proceedings european conference object oriented programming pp 
paris france june 
nierstrasz active objects hybrid acm sigplan notices proceedings oopsla vol 
pp 
dec 
nierstrasz papathomas nierstrasz guide specifying concurrent behaviour abacus object management ed 
tsichritzis centre universitaire informatique university geneva july submitted publication 
nierstrasz papathomas type theory active objects object management ed 
tsichritzis centre universitaire informatique university geneva july working 
papathomas concurrency issues object oriented programming languages object oriented development ed 
tsichritzis pp 
centre universitaire informatique university geneva july 
papathomas integrating concurrency object oriented programming evaluation hybrid object management ed 
tsichritzis centre universitaire informatique university geneva july 
tomlinson singh inheritance synchronization enabled sets acm sigplan notices proceedings oopsla vol 
pp 
oct 
wegner zdonik inheritance incremental modification mechanism isn proceedings european conference object oriented programming ed 
nygaard lecture notes computer science pp 
springer verlag oslo august 
tokoro concurrent programming object oriented concurrent programming ed 
yonezawa tokoro pp 
mit press cambridge massachusetts 
tokoro experience evolution acm sigplan notices proceedings oopsla vol 
pp 
dec 
yonezawa briot object oriented concurrent programming abcl acm sigplan notices proceedings oopsla vol 
pp 
nov 
