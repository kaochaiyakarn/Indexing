optimized priority assignment tasks messages distributed hard real time systems jos javier garc michael gonz lez harbour departamento de electr universidad de spain advances analysis distributed realtime systems possible predict hard realtime requirements met 
difficult find feasible priority assignment utilization levels cpus communication networks pushed near limits 
presents new heuristic algorithm optimizing assignment priorities tasks messages distributed hard realtime systems 
algorithm knowledge parameters influence worst case response time distributed application 
algorithm compared simulated annealing general optimization technique discrete functions previously solving similar problems 
average heuristic algorithm executes orders magnitude faster simulated annealing finds better solutions finds solutions cases method fails 

distributed real time systems increasing importance today control systems low cost networking facilities allow interconnection multiple devices controllers single large system 
typical architecture distributed real time control system consists processor nodes interconnected interconnection networks 
system software composed concurrent tasks statically allocated processing nodes effects dynamic node allocation difficult supported part de ciencia spanish government rob predict hard real time systems 
task may exchange messages tasks node different nodes 
messages exchanged tasks different nodes statically allocated particular network 
tasks allocated node may share data resources usual synchronization mechanisms shared memory systems 
task system activated arrival triggering event may generated external environment timer arrival message task 
events associated timing requirement deadline maximum response time allowed arrival event final completion 
execution response event tasks may need executed nodes messages exchanged network 
timing requirements may imposed individual actions 
order possible predict worst case response times possible schedule activities processing node priority approach allows processing activities shorter deadlines higher priority activities longer deadlines 
analysis technique assess schedulability real time system called rate monotonic analysis rma defined single processor systems 
rma techniques applied distributed systems modeling network processor message task 
problems appear distributed systems considered 
important task message allocation assignment priorities 
describe solution solve issues discrete optimization algorithm simulated annealing find close optimum solution problem 
represents optimization existing techniques assignment priorities distributed hard real time systems 
organized follows 
section provide quick review model distributed system analysis method 
section describes new heuristic algorithm optimizing assignment priorities distributed real time systems 
section compare results algorithm simulated annealing showing algorithm finds better solutions time 
section give 

system model current analysis techniques real time distributed system multiple processing resources cpus communication resources backplane buses lans serial lines 
problem scheduling analyzing response time concurrent programs running processing resources known 
assume fixed priority preemptive scheduling rate monotonic analysis rma analyze worst case timing behavior 
scheduling analyzing worst case response time communication resources established 
network standards suited real time communications support scheduling messages 
network standards accomplish hard real time communications token bus fddi non standard networks developed accomplish preemptive priority scheduling 
university developed software tool allows accomplish preemptive priority scheduling standard communication subsystems vme bus point point serial lines rs rs 
analysis message traffic communication resources carried rma techniques cpus 
consequence distributed system treat messages communication resources exactly tasks processing resources small amount non preemption taken account messages preempted packet boundaries 
hard real time system model assume event sequences arrive system known advance worst case rates events hard real time requirements know 
impossible guarantee schedulability system advance compile time 
assume tasks statically assigned processors similarly messages communication networks 
hard realtime systems tasks tied specific processors presence special hardware devices needed tasks 
event arrives system generates response form sequence actions 
actions may task task portion executed processor message sent network 
usually action response task running particular processor 
task may activate task different processor message turn activates task processor 
timing requirements consider global deadlines start arrival event met particular actions sequence 
call global deadlines distinguish local deadlines relative activation particular action response 
call ij global deadline action ij relative arrival event ij local deadline action ij relative activation ij 
global deadline corresponding action response called deadline 
model described suited represent large number real time architectures practice 
example system clientserver approach portion task invokes service remote server may decomposed actions action invoking service message sent server server action reply message action invoking server 
shows example decomposition distributed system nodes network 
model allow tasks synchronize activated combinations events 
eliminate restrictions currently way 
general worst case analysis distributed system open issue approach analyze processing communication resource system independent 
cpu network cpu task task task task task task server server server server 
modelling tasks invoke remote servers approach pessimistic sense actual worst case may take advantage fact phases timing relationships actions different responses interrelated 
considering phase action independent may build situation worse worst case 
slightly pessimistic method allows guarantee schedulability real time systems 
analysis system described carried normal rma techniques account effect jitter 
messages activated execution tasks activation time perfectly periodic depends completion time triggering task variable 
happens tasks activated arrival message 
solution issue addressed including effects deferred activation called jitter schedulability analysis 
event ei define period ti inverse worst case rate event may arrive system 
action aij response event ei define global worst case response time rij relative arrival event sum local response times previous actions ij rik rik local response time action aik relative activation aik 
calculation local response times assume worst case jitter jik equal variation response time previous action 
assume variation equal global worst case response time previous action rik general best case response time arbitrarily small 
call ri global worst case response time action response 
analysis recursive response time depends jitter jitter depends response time described analysis carried iterative way stable solution jitter terms response times reached 
note determine schedulability system global response times ri compared global deadlines di 

heuristic algorithm optimized priority assignment solution problem optimizing assignment priorities known uniprocessors 
liu layland proved rate monotonic priorities sets independent periodic tasks deadline task equal period 
leung whitehead proved deadline monotonic priorities case deadlines equal periods 
audsley provided algorithm capable finding solution existed problem assigning priorities deadlines larger task periods 
multiprocessor distributed systems problem complicated strong interaction response times actions different resources 
treated problems priority assignment task allocation combined discrete optimization problem simulated annealing suitable optimization technique 
propose new heuristic algorithm heuristic optimized priority assignment takes advantage knowledge factors influence timing behavior find optimized solution priority assignment problem opposed simulated annealing technique general purpose 
algorithm distribution global deadlines response different actions compose response 
action assigned artificial local deadline deadline monotonic priorities assigned resource analysis system carried 
result analysis new intermediate deadlines calculated 
iteration proceeds suitable solution stopping condition reached 
algorithm assign initial local deadlines loop assign priorities deadlines calculate worst case response times exit stopping criterion calculate new local deadlines loop initial local deadlines assigned way preserves deadline ik actions ik response 
possible assignment distribute deadline proportionally worst case execution time action ik 
local deadlines known action assignment priorities carried independently resource deadline monotonic priority assignment assigning highest priority action shortest deadline 
priorities assigned system analyzed technique described mentioned section 
analysis provides worst case response times action priority assignment 
solution suitable stopping condition reached algorithm terminates 
new local deadlines calculated redistributing global deadlines actions response 
redistribution takes account excess action intuitively measures distance separates action schedulability 
new intermediate deadlines obtained function factors hand excess action relative actions response hand excess action relative actions resource 
action ij define excess excess response time exc ij ij ij ri di ij ij ij ri di excess compute time exc ij ij ij ij ij ij ij ij ij sij slack time action aij defined amount execution time negative sign subtracted action aij meet local deadline dij schedulable amount execution time may added action aij continue schedulable schedulable 
notice excess may negative indicating associated action meets timing requirements comfortably 
reason having different definitions excess particular action aij algorithm behave differently 
definition excess response time leads faster solutions calculating slack time complex operation 
second definition leads better solutions deadlines smaller periods slack time better representation excess 
algorithm start definition number iterations finding solution try second 
reason distinguishing cases dij ti dij ti local deadlines larger periods jitter strong influence response time action aij lower priority tasks 
deadlines equal periods impact jitter strong important excess slack response time 
excess equations modified support case particular actions global deadlines final deadline 
case difference global response times actions ij global deadline 
similar way difference global deadlines processing communications resource pr define excess resource exc pr ij pr exc ij addition define maximum excess resources maximum excess actions belonging particular response mex pr max pr mex max exc pr exc ij definitions excess times calculate new local deadline action function old local deadline action excess action excess resource action belongs new old ij ij exc pr mex pr exc ij mex kr ka constants control relative influence resource action components calculation new deadline 
smaller constants higher influence appropriate values constants 
algorithm start values kr ka change values reach feasible solution 
new local deadlines obtained actions response adjust proportionally fit global deadlines 
deadline ij ij new dik stopping criteria algorithm limit maximum number iterations consecutive deadline assignments identical case algorithm continue providing solution suitable solution 
algorithm finds priority assignment system schedulable capable finding better optimized solution executing iterations 
determine solution compared define scheduling index function worst distance worst case response times global deadlines response index intermediate action global deadline similar term included equations calculating minimum maximum global deadline minus global response time action 
negative values scheduling index represent solutions system positive zero values index represent schedulable solutions 
larger index better schedulability system terms distance response times deadlines 
min schedulable max schedulable 
comparison heuristic algorithm simulated annealing section compare performance heuristic algorithm simulated annealing technique 
simulated annealing global optimization technique attempts find lowest point energy landscape 
successfully discrete network network network 
example distributed real time system optimization problems 
assign priorities allocate tasks processors hard real time distributed systems 
compared performance heuristic algorithm simulated annealing redefined energy function allow annealing algorithm optimize schedulable solution 
energy function negative scheduling index defined neighbor function consisted choosing 
structure event sequences example resource cpu network selecting actions tasks messages exchanging priorities 
comparison platform example distributed system processors interconnected networks 
processor send messages processor networks 
system respond event sequences 
event generates sequence tasks messages shown 
assignment tasks processors messages networks shown table 
define timing requirements events system 
apply heuristic algorithm simulated annealing problem assigning priorities system 
purpose implemented task message 
comparison heuristic algorithm simulated annealing software tool written ada apply methods parametric description real time system 
tool allows gradually increment load resources order reach limit algorithms provide schedulable solutions 
just realize large problem mention number possible priority assignments problem order shows comparison performance algorithms example described 
range resource utilizations chosen close limit algorithms fail find feasible solution 
graph shows algorithm execution time scheduling index 
recall scheduling index represents solution terms worst distance deadlines processor processor processor processor processor processor processor processor network network network table 
assignment tasks processors messages networks corresponding worst case response times 
negative scheduling indexes represent failure find schedulable solution 
noticed cases simulated annealing able find solution heuristic algorithm able find 
solution simulated annealing may depend initial guess priority assignment repeated algorithm times give chance find solution expense processing time 
important results derived graph 
heuristic algorithm finds better solutions simulated annealing 
second important execution time algorithm average orders magnitude time spent simulated annealing 
example total cpu time consumed algorithms generate points graph heuristic algorithm annealing algorithm analysis tool applied examples similar results 
comparison methods noticed low utilizations methods find feasible solution quickly heuristic algorithm finds better solutions 
utilization resources high problem harder difference performance heuristic algorithm simulated annealing enormous 
difference favor heuristic algorithm larger deadlines larger task periods 
common situation distributed systems 

propose heuristic algorithm assigning priorities distributed hard real time systems 
shown method find feasible optimized solutions small amount time situations utilization resources high number solutions small 
compared algorithm simulated annealing general purpose discrete optimization algorithm previously address problem 
results comparison method orders magnitude faster average finds feasible solutions cases simulated annealing fails 
especially noticeable utilizations high deadlines responses larger periods events activate 
promising performance proposed heuristic algorithm plan apply problems 
currently working analysis complex systems systems actions different responses synchronize share resources interact actions sophisticated ways example activated combinations events 
plan eliminate current restriction forces consecutive actions resource collapsed single action share priority 
try find similar algorithm solve problem allocating tasks processors messages communication networks 
acknowledgments referees valuable comments inputs 
agrawal chen zhao architecture impact fddi network scheduling hard real time traffic 
workshop architectural aspects real time systems december 
audsley optimal priority assignment feasibility static priority tasks arbitrary start times dept computer science report 
university york december 
garc de de paso de para sistemas de tiempo real phd thesis university preparation 
klein pollak gonz lez harbour practitioner handbook real time systems analysis 
kluwer academic pub 
leung whitehead complexity fixed priority scheduling periodic real time tasks performance evaluation dec pp 
liu layland scheduling algorithms multiprogramming hard real time environment 
journal acm pp 
sha systematic approach designing distributed real time systems 
ieee computer september pp 

lehoczky advanced real time scheduling ieee token ring 
proceedings ieee real time systems symposium 
burns wellings allocating real time tasks 
np hard problem easy 
real time systems journal vol may 
clark holistic schedulability analysis distributed hard real time systems 
microprogramming vol 
nos pp 
april 
