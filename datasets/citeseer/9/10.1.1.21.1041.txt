simple question answering system richard cooper stefan ger department computing imperial college science technology medicine queen gate london sw bz england doc ic ac uk 
describe simple question answering system written perl uses cmu link parser sleator temperley princeton university wordnet miller rex system xml parsing cameron managing gigabyte search engine witten moffat bell 
msc project cooper 
main task question answering providing short answer natural language query supported document underlying document collection 
question answering systems approach problem information extraction angle exception 
describe structure workings system 
section concerned line preparation documents pure information retrieval task identifying potentially relevant paragraphs 
section details question time processing 
indexing documents document repository cleaned sgml mark obtain raw contents 
dollar pound signs replaced words dollars pounds respectively line financial times archive uses transformations 
raw news articles split paragraphs individual newspaper indication 
indentation newline ap newswire foreign broadcast information service wall street journal special marker san jose news long line paragraph los angeles times fact line right justified signifies paragraph financial times 
paragraphs fed managing gigabytes search engine stand documents original number 
effect get passage retrieval document retrieval 
question processing actual question processing executed long pipeline perl modules xml mark entities communicate information modules 
start pipeline question far away moon 
shows structure data flow modules involved 
news articles tipster trec cds see trec nist gov sentence splitter tokenizer link parser question focus answer type keyword extraction paragraph retrieval mg sentence splitter tokenizer candidate answer extraction answer scoring answer weighting answer ranking far away moon 
sentence splitter tokenizer ap moon miles ap om distance miles photo sh moon distance miles probably la altitude miles discover ap ay miles question processing data flow sentence splitter tokenizer implemented modules 
marks individual sentences set heuristics detecting sentence question mark exclamation mark full preceded word list abbreviations text 
tokenizer treats certain leading trailing punctuation separate entities 
words containing digits separated headed currency dm pounds abbreviation pounds tree tokens pounds link parser link parser annotate structure question 
link tree appended tokenized question 
get sentence far away moon parse pos pos pos pos pos pos link name xp link name wq link name pf link name mvp link name sis link name ds link name rw parse sentence question focus identify question types give fairly clear indication type answer describe define 
example answer question usually person group people 
keywords question words clear expected answer type name 
example consider questions time train arriving city train stopping name driver train 
problem solved defining concept called question focus 
question focus phrase question disambiguates emphasizes type answer expected 
example questions question foci shown bold 
cases question focus tells directly time city looked 
third case know driver type person person name sought 
purpose system question focus defined noun group word name question word ambiguous type 
normally question words start question queen elizabeth ii born 
city declaration independence located 
macintosh computers consider cases 
question mark moon inserted 
answer type focus question possible decide answer type answer concept 
question question word determines module uses question focus 
describe define describe define easiest question words process 
map directly answer type 
answer types question words time place reason description definition respectively 
cases question words imply answer concept person 
subtleties worth mentioning point 
firstly questions looking group people 
group named group won 
manchester list beat fred 
tom dick harry combination beat england relay 
america canada 
stage system correctly handle questions looks single person response question 
secondly important exception rule questions answer concept person 
consider example bill gates 
example question looking description person 
accordingly rules exception returns description answer type 
name name question words extremely ambiguous comes determining question answer concept 
answer type questions depends entirely question focus 
pseudo code illustrates algorithm wordnet contains remove word name exit hyponyms set hyponyms wordnet person hyponyms person idea define answer type list direct hyponyms 
question type bridge golden gate bridge answer type bridge expanded wordnet include bailey bridge cantilever bridge covered bridge lift bridge pedestrian bridge bridge bridge floating bridge rope bridge steel arch bridge suspension bridge trestle bridge truss bridge 
example length added data stream 
questions answer type defined word example old age quantity long distance 
word match rules default answer type manner chosen socrates die 
keyword extraction lists place names proper names names entities recognized marked special symbols 
simple non structured knowledge goes far identifying uk country london city tony blair person lists encode relationship entities known priori london capital uk 
recognized entities speed temperature money place city country person year time length reason number quoted name obvious meaning marked entity 
order avoid inferences potentially predefined sgml tags sources special mark ups form person tony blair person 
paragraph retrieval managing gigabytes document paragraph lookup stage information answer type possible keywords extract documents paragraphs text database contain answers question 
problem lookup stage overcome balance getting sufficient documents guarantee presence answer getting process timely fashion 
problem defines main task document paragraph lookup stage choose subset possible keywords query database 
system defines subsets documents retrieve 
attempts find subset returns number documents bound 
soon subset chosen final query rest search abandoned 
complete search subset subset closest range chosen 
attempts reduce amount searching need done choosing subsets defined weights assigned keyword 
subset module query document paragraph repository real add texts retrieved output stream 
candidate answer extraction paragraphs extracted document repository sentence split tokenized preparation processing 
candidate answer extraction module job markup regions texts answers 
question answer concept looked wordnet hyponyms 
regular expression built disjunction hyponyms region text matches regular expression marked candidate answer 
exceptions rule detailed sections 
person answer concept person set hyponyms includes terms consumer creator defender guardian words 
intent person question looking specific name person 
case person questions hyponyms set computed regular expression matches names 
description describe define questions result answer concept description 
answer types person date descriptions hard define terms words 
attempt mark descriptions piece text employ sophisticated nlp techniques system 
consequently system uses simpler technique extract regions text descriptions 
noticed entity introduced text followed comma description bill gates head microsoft said today 
light descriptions defined comma punctuation mark 
comes scoring answers descriptions immediately preceded thing describing scored highly 
simple na approach results possible 
example top answers questions shown brackets steve jobs 
founder chairman apple computer steve 
olympic gold nelson 
president african national congress 
general cases wordnet coverage great cover possible answer especially answer types contain infinite number answers length 
deal eventualities common answer types extra subtypes added wordnet describe regular expression general case 
example match explicitly named companies general case sequence proper nouns plc son 
length match number followed unit length miles km ft answer scoring candidate answers identified variety heuristics evaluate candidate real answer 
heuristics score comma word 
comma follows candidate answer score number words comma appear question ii score punctuation 
scores punctuation mark immediately follows candidate zero iii score sentence 
computes number question words sentence candidate answer iv score description 
answer concept looked description score number words immediately preceding candidate answer appear question score description 
similar score question counting question words appear candidate answer 
heuristic unique identifier process candidate associated set id score pairs 
things system scoring heuristics implemented pipeline modules 
heuristic different module scans input ca tags candidate answer computes appropriate score adds score tag 
scoring heuristic completely independent rest stage processing scores kept separate regard single final score 
means order activate unimportant removed new ones added affecting 
answer weighting scores calculated need combined final score 
system final score simply linear combination heuristic scores coefficients set hand reflect perceived importance various scores weight score comma word weight score punctuation weight score sentence weight score description weight score description 
answer ranking candidate answer weight characters context final answers extracted text sorted weight assigned rank placed final answers outside document text 
stage thing happens 
set answers contains duplicates top ranking kept duplicates removed 
possible modifications process considered included version system 
firstly answers identical higher ranked ones removed 
ideally replaced powerful system removed answers referred entity answer 
strong version system probably require anaphora resolution document collection split paragraphs scope system 
weaker version removed answers probably referred entity answer implemented simple rules abbreviation word substitution 
example ms smith person linda smith just linda 
alternatively trec systems suggested presence multiple instances answer strengthen likelihood answer correct 
implement 
despite apparent simplicity system compared favorably systems competing trec 
little natural language processing 
link parser analysis proportion questions deal ambiguous answer types candidate answer extraction 
tune system training cases trec qa track 
carry failure analysis trec questions reason assume scope improvement changing parameters introducing better ranking mechanism deploying natural language processing techniques 
cameron 

rex xml shallow parsing regular expressions 
technical report school computing simon fraser university 
cooper 

high precision information retrieval 
msc thesis imperial college 
miller 

wordnet lexical database english 
communications acm 
sleator temperley 
parsing english link grammar 
technical report cmu cs computer science mellon university 
witten moffat bell 
managing gigabytes 
morgan kaufmann publishers 
partially supported epsrc uk 

