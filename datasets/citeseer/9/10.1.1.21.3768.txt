bdds automated deduction jean goubault joachim posegga bull corporate research center rue jean es les sous bois france jean goubault bull fr universitat karlsruhe institut fur logik und karlsruhe germany posegga ira uka de 
bdds binary decision diagrams succesful tool handling boolean functions attracted attention automated deduction specialists 
give overview bdds automated deduction perspective showing done propositional order logic discuss parallels known methods tableaux resolution 
bdds binary decision diagrams succesful tool handling boolean functions extensively hardware verification burch truth maintenance systems madre coudert various domains superseded previously known methods 
surprisingly attracted attention automated deduction specialists 
aim show bdds profitably domain 
shall briefly bdd proof methods doesn emphasize technique particular 
give overview bdds automated deduction perspective demonstrate various ways propositional order classical logic 
regards propositional part recall done bdds logic referring reader literature results facts 
order part new aims showing bdds rich structure different ways including tableaux resolution techniques 
plan follows section defines bdds recalls history briefly goes defining logical operations reduction techniques bdds 
section discusses theoretical practical time space complexities 
section show bdds relate semantic tableaux approaches benefit 
principles proving bdds order logic section similar tableaux common points resolution corresponds slight change point view bdds 
section 
proc 
ismis charlotte springer lnai 
bdds 
bdds nested expressions represented graphs successfully applied various domains hardware verification see instance burch mcmillan 
expressions basically case analysis truth value atoms formula 
natural way reasoning logical formulae resembles way humans deal logic fixes certain proposition reasons consequences follow true false 
bdds provide convenient efficient tool implementing form reasoning 
literature usually refers early claude shannon origin bdds 
shannon introduced special normal form boolean functions 
objective convenient efficient representation implementing boolean functions switching circuits 
idea expressions new principle shannon described boole 
normal forms considered church pp 
ff introduced ternary operator form called conditioned disjunction 
church interest connective observation provides primitive basis propositional logic 
hard command view enormous amount literature subject bryant gives 
various notations expressing literature notation resembles prolog syntax definition connective 
def alternatively understood ab ac 
expressions bdds represent logical connectives allowed 
ease exposition distinguish bdd expression represents treat bdds ordinary logical formulae 
recall propositional atoms propositional variables order atoms applications predicate symbols lists terms 
definition bdds 
language propositional order logic atomic formulae assume language contain atomic truth values true false 
set bdds denoted bdd defined smallest set bdd bdd oe oe bdd 
shall letters calligraphic alphabet denote elements bdd sequel 

expression representation bdd 
formulae defined conveniently represented binary trees binary graphs condition expression drawn node edges positive edge labeled negative edge labeled gamma lead part part respectively 
shows example binary tree corresponds 


left hand side 
formula logically equivalent smallest instance pigeon hole formulae 
nodes labeled identify sequel 
formula represented compact way graph tree graph shares identical subtrees smaller 
shown right hand side 
occurs graph twice corresponding tree 
leaves definition shared 
note tree graph denote expression just different representations 
sequel assume bdds represented graphs share maximally graphs contain multiple occurrences subgraph 
note size graph corresponding tree differ exponentially practice important graph representation graphical representation formulae pigeon hole instance nodes tree posegga 

bdds bdds form logical basis propositional logic see church 
say bdd represents formula logically equivalent 
bdds represent quantifier free formulae order logic see bdd left hand side right hand side discussed section lemma 
quantifier free formula order logic logically equivalent bdd paths bdds important concept relates bdd semantics path bdd sequence signed nodes leads root leaves 
paths lead leaves called paths paths lead leaves called paths 
path regarded conjunction literals gamma signs treated negation signs dropped 
path case consistent inconsistent example consider right path bdd path inconsistent 
proposition 
bdd logically equivalent disjunction paths logically equivalent disjunction paths 
proposition see posegga proof follows bdd contains disjunctive normal form regarded formula dnf negation 
regard paths disjunctions literals signs reversed cnf conjunction paths 
paths form point view cnf negated bdd 
take dnf perspective procedure determining satisfiability bdd easily set corollary 
bdd substitution oe paths goe inconsistent inconsistent 
conversely substitution oe paths goe inconsistent tautology 
example bdd inconsistent paths inconsistent 
ways convert arbitrary logical formula logically equivalent bdd recursively rewrite subformulae bdds combine formulae connectives 
properties operator show done posegga proposition 
bdd bdd ffi binary logical connective ffi 
ffi ffi equivalence shows move negation leaves bdds negation signs removed leaves bdd 
bdd negated inverting leaves operation carried descending leaves appropriate datastructure set implemented require constant effort 
powerful rule applies binary connective 
compute conjunction bdds example recursively apply rule ab moved leaves simplified 
means conjunctively combining bdds corresponds inserting bdd leaf 
symmetrically disjunctions handled replacing leaf 
operations carried constant time 
orderings bdds bdds defined may contain redundancy paths may multiple occurrences atoms may multiple occurrences subgraphs representing propositionally equivalent subformulas 
definition reduced bdds 
bdd called reduced atom occurs path contain multiple occurrences subgraphs 
example left graph violates conditions right graph violates condition 
course possible eliminate redundancies graph reasonable avoid advance constructing bdd 
ordered bdds known technique achieve definition ordered bdds reduced ordered bdds 
atoms total ordering bdd called ordered bdd paths respect 
ordered bdd reduced called reduced ordered bdd robdd 
robdds important property paths consistent 
fixed ordering atoms gives unique normal form boolean functions 
note consequence derivation robdd propositional formula np hard inconsistent formula yield robdd consisting single node 
words derivation robdd formula decision procedure propositional logic 
derivation robdds described extensively literature brace give brief account 
negation obeys equation logical connectives ffi obey new equations 
robdd robdd ffi construct ffi ffi ffi construct ffi ffi ffi construct ffi ffi construct defined identical 
reading equations rules left right recursively defines procedure computing ffi construct operation responsible maintaining bdds reduced 
induction structure quantifier free formulae leads procedure bdd 
bdd maps quantifier free formulae robdds algorithms deriving robdds usually defined propositional formulae 
order apply quantifier free formulae order logic regard atoms simply propositional variables 
complexity build non ordered bdd fast just combine bdds subformulae conjunction disjunction negation done constant time operations leaves 
building robdds reducing bdds canonical form complex 
recall results 
notice operations robdds take time linear negation quadratic binary operations size operands 
better representations yield constant time negation 
bdds form logical basis solve sat propositional satisfiability problem resp 
propositional validity problem building robdd comparing resp 

comparing robdd polynomial time operation shows building robdd np hard conp hard 
particular means robdds exponentially sized worst case may need exponential time built 
precise bound robdd atomic formulae 
unfortunately upper bound mean value size robdds coudert probability distribution considers robdd equally probable 
short robdds exponential size theory 
surprise practice huge robdds rarely occur coudert mcmillan 
robdds hardware verification time problems hand np complete model checking ctl formulae instance harder np conp model checking problems ctl modal calculus emerson pspace complete 
recall pspace class decision problems solvable polynomial space contains np conp full polynomial hierarchy garey johnson 
trick robdds usable practice trick choice ordering robdd works cases exists ordering mcmillan produces robdd reasonable size produces intermediate robdds needed build final reasonable amount space 
problems ordering exists formula describing binary multiplier instance bryant finding optimal ordering hard best known procedure needs exponential running time mcmillan usually heuristics related application domain developed :10.1.1.1.5124
particular translating formulae written textual form robdds ordering textual occurrences propositional variables occurrence variable occurs left occurrence variable attempts layout textual formula inside bdd control possible explosion robdd built 
put way attempt explaining average case size estimates 
robdd close non ordered bdd built replacement leaves previous section 
bdds semantic tableaux widely unknown non ordered bdds quite closely related proof procedures 
shortly investigate relation bdds semantic tableaux 
restricted considering propositional logic negation normal form results carried forward general order formulae 
key considering bdds tableaux common perspective understand relation paths branches purpose represent potential models subsequently eliminated proof search 
assume want prove propositional formula inconsistent 
seen paths bdd disjunctive normal form bdd seen logical formula built bdd disjunction paths disjunctive normal form similar semantic tableaux expansion tableau formula regarded subsequently deriving dnf rest section denote tf fully expanded tableau propositional formula denote non ordered bdd denotes set branches tf pi pi denote set paths leaves leaves notation convenient definition 
kn lm paths bdd branches tableau fi def kn fi carried forward sets paths branches defining fi def fk fi lg observe fkg fi means conjunctively adding comparison treatment conjunctions disjunctions show branches paths correspond pi logically equivalent seen formulae 
proven formally structural induction restrict consideration giving key idea different cases recursion step proof see posegga schmitt details 
treatment conjunctions assume formula form ab fully expanded tableaux ta tb build ab appending tb branch ta means gamma ab delta fi tb 
bdds similar operation applied represent conjunction bdds replacing leaf results conjunction bdds 
terms paths replacement means pi fi pi corresponds happens tableau 
treatment disjunctions treatment disjunctions bdds different standard tableaux corresponds tableaux lemma generation see agostino lemma generation tableaux 
way achieve modify standard fi rule tableau calculus ab rule branches fully expanded tableau ab ta fi tb 
bdds handle disjunctions replacing leaves bdd ab results replacing leaf resulting paths pi pi fi pi 
pi pi get result tableaux 
consideration shows important difference representation formulae bdds tableaux case fi rule lemmata tableau expand formula separately independently 
bdds represent models counter models structure put simply replacement leaves representing disjunction ab bdds attaches models counter models represented efficient models tableaux effort proof search tableaux avoided bdds 

cases especially order case desirable avoid lemma generation simple trick bdd formalism turns lemma generation bdds new atom appear representing disjunction 
note treatment disjunctions preserves satisfiability equivalence 
effect avoid lemma generation effect described 
treat disjunction way bdds simulate semantic tableaux 
order bdds shall see section various proof search methods order logic rebuilt bdds improve 
preliminaries bdds order logic framework apply herbrand theorem 
shall stick tradition reason terms unsatisfiability 
shall assume formulae interest skolem normal form 
semantic version herbrand theorem proposition herbrand skolem godel 
formula form xn delta quantifier free unsatisfiable exists integer substitutions oe oe oe oe propositionally unsatisfiable 
ae denotes generic renaming mapping variables indexed variables define fold copy formula ae ae previous theorem states unsatisfiable instance fold copy propositionally unsatisfiable check propositional unsatisfiability just reducing ordered bdd instance comparing result 
nice thing bdds readily contain structure needed build wealth various proof search methods 
explore considering various ways find instance bdd reduces 
making paths unsatisfiable take bdd phi necessarily ordered reduced built linear time methods section typically representing way choose oe reduces say oe refuting substitution having oe unify atomic subformulae phi 
seen paths reduces paths propositionally unsatisfiable 
paths regarded conjunctions literals unsatisfiable oe unifies complementary opposite signs literals 
approach reminiscent tableau methods fitting connection method bibel method andrews 
consider fl ffi rules govern treatment quantifiers extension amplification skolemization connections ff fi rules essentially build disjunctive normal forms trying close branches analogue paths fly 
bdds complete expansions tableaux lemmata posegga 
difference tableaux expand demand bdds built entirely memory 
tight correspondence tableaux bdds bdds provide compact representation tableaux posegga posegga schmitt 
conceptually quite roughly previous method looks trying find propositionally unsatisfiable instance robdd phi initialize oe empty substitution 
path phi choose complementary literals gammaa path 
unify aoe oe yielding oe fails procedure fails 
set oe oeoe go back step 
restricted extension case free variable tableaux 
non deterministic procedure failure normally implemented backtracking depth search 
course don expand paths fully traverse space paths 
traversing space partial paths paths coming root necessarily reaching leaf extending paths necessary produces lower number paths close just tableaux connection method 
pseudo prolog code achieve close path path close path path close path 
close leaf leaf extend path second parameter close current branch tableau initially denotes membership sound unification 
extend build extension steps procedure 
quantifier free bdds means continue descending root variant bdd currently considering 
means expanding conjunction proposition step 
narrow search space represent quantifiers bdds posegga posegga schmitt 
idea borrowed fl formulae semantic tableaux extend definition bdd delta bdd 
yields nested bdds shown right hand side 
descend nested bdds enter instance extensions paths contain non negated occurrences 
reflects fl expansion rule tableaux 
prolog best implemented iterative deepening depth search 
posegga shows backtracking quite efficiently implemented compilation approach 
eliminating paths approach close previous consists closing paths succession eliminating 
don keep phi static search reduce respect equalities atoms induced unifiers reducing number paths 
induces change representation need robdds 
define definition induced equivalence relations general unifiers 
set atoms 
substitution oe induces equivalence relation oe defined oe aoe oe unifies oe 
equivalence relation induced substitution exists general substitution oe substitutions inducing instances 
call oe general unifier 
usually set atoms appearing bdd phi 
existence uniqueness oe trivial generalization robinson theorem existence uniqueness general unifiers robinson 
notice equivalence relations general unifiers close bijection equivalence relations ordered logical pointwise implication substitutions ordered instance order oe galois connection 
time new substitution oe see effect bdd phi dispense rewriting atoms phi aoe followed propositional reduction building equivalence relation oe choosing canonical element equivalence class rewriting atom phi canonical class reducing new bdd 
way keep applications oe implicit 
interesting practice rewrite atom smallest highest bdd oe note scheme section changed robdd phi evolves course computation initialize oe empty substitution 
exists path phi choose complementary literals gammaa path 
unify aoe oe yielding oe fails procedure fails 
set oe oeoe replace phi reduced version phi replaced go back step 
compare previous scheme 
previously basically clever way traversing space paths factoring common prefixes partial paths fixed order item 
procedure eliminates paths arbitrary order simply asked choose path eliminate remaining 
smart previous method glance consider full paths partial ones 
scheme path chosen step effectively eliminated new robdd built step 
number paths exponential number atoms rewriting step rewrites atom average pass step eliminates exponential number paths 
reduction step takes time polynomial number nodes phi point bdds usually number paths 
inference section pay having lower inference rate 
approach see goubault differs tableaux connections sense underlying formula phi evolves search refuting substitution doing test propositional unsatisfiability incrementally new parts final substitution 
reach completeness incorporate extension amplification rule modifies current bdd phi conjunction new copy ae initial body achieve iterative deepening depth search 
general just need search method interleaves extensions searches instantiation fairly 
eliminating atomic subformulae looking back method section see identifying particular obstacle unsatisfiability phi existence paths building method aimed eliminating obstacle 
paths possible obstacle unsatisfiability robdds 
particular propositionally unsatisfiable robdd paths sports atomic formula 
think atoms alternative obstacle propositional unsatisfiability robdds 
eliminate atom robdd phi 
cases substitution oe reduces unifies atom phi say unnecessary refuting substitutions instances general unifier atom phi 
second case restrict consider atoms complementary phi sense exists path going gammaa gammaa case assuming unnecessary reduces phi oe phi oe reduce truth value aoe independent truth values substituted atoms writing delta phi reduced obdd phi phi delta phi oe reduce 
conversely delta phi oe reduces phi propositionally entails delta phi reduces 
proof search method striving eliminate atoms paths looks initialize oe empty substitution 
exists atom occurring robdd phi replace phi delta phi involve go back step choose complementary atom phi unifies general unifier oe 
set oe oeoe replace phi reduced version phi replaced go back step 
step number distinct general unifiers oe atom atoms phi choice different actions actions instantiate oe different oe reduce phi accordingly plus action replace phi delta phi 
procedure choices non deterministically typically backtracking 
points procedure akin resolution precisely decoupled extension amplification steps instantiation reduction steps chang resolution chang lee 
roughly resolution rigid variables variables instantiated 
resolution rule propositional simplification tool need robdds way eliminating unnecessary atoms building resolvents atoms eliminated 
paths analogous clauses delta phi just concatenations paths phi going going gammaa excluded section shown 
computing delta phi means computing robdd resolvents clauses phi resolving deducible clauses produced instantiation phi substitutions looking unifiers atoms 
similarity resolution appears special cases procedure 
instance atom unifies complementary atom phi choice eliminate transform phi delta phi 
case occurs positively resp 
negatively paths phi elimination pure literal resp 
gammaa 
general case replacing phi delta phi unifiable generalization pure literal rule 
call atoms pure atoms transformation phi delta phi pure atom elimination 
previous methods choose path cared eliminate free choose atom wish 
pure atoms chosen reduce size phi introducing non determinism 
general chosen selection function just linear strategy resolution kowalski 
linear resolution setof support strategies adapted bdd case new techniques instance subtraction information control easily implemented bdds goubault 
pointed bdds automated deduction 
bdds rich structure different points view possible yielding different ways looking refuting substitutions bdds related known proof methods tableaux section resolution section 
firmly believe bdds useful propositional tool promising structuring device implementation technique order logic 
hope contribute bringing research bdds automated deduction closer 
areas undoubtedly benefit 
andrews 

theorem proving general 
acm 
bibel 

automated theorem proving 
nd revised edn 
vieweg 
boole 

investigation laws thought founded mathematical theories logic probabilities 
new york dover 
edition 
brace bryant 

efficient implementation bdd package 
pages th dac 
bryant 

graph algorithms boolean function manipulation 
ieee trans 
computers 
bryant 

symbolic boolean manipulation ordered binary decision diagrams 
tech 
rept 
cmu 
burch clarke mcmillan dill hwang 

symbolic model checking states 
th lics 
chang lee 

symbolic logic mechanical theorem proving 
computer science classics 
academic press 
church 

mathematical logic 
vol 

princeton nj princeton university press 
th printing coudert 

siam une pour la de syst emes 
ph thesis enst paris 
agostino 

tableaux improvement truth tables 
cut free proofs 
logic language information 


estimation de dans les bdd 
phil 
thesis ecole polytechnique palaiseau france 
emerson 

temporal modal logic 
elsevier 
chap 

fitting 

order logic automated theorem proving 
springer 
garey johnson 

computers intractability guide theory np completeness 
freeman goubault 

syntax independent connections 
basin 
ed workshop theorem proving analytic tableaux related methods 
max planck institut fur informatik 
goubault 

proving bdds control information 
cade 
kowalski 

linear resolution selection function 
ai 
madre coudert 

logically complete reasoning maintenance system logical constraint solver 
th ijcai 
mcmillan 

symbolic model checking approach state explosion problem 
ph thesis cmu 
posegga 

compiling proof search semantic tableaux 
pages th ismis 
lnai vol 

trondheim norway springer 
posegga 

mit fur 
infix verlag frg 
posegga schmitt 

automated deduction shannon graphs 
submitted 
robinson 

machine oriented logic resolution principle 
acm 
shannon 

symbolic analysis relay switching circuits 
transactions 
