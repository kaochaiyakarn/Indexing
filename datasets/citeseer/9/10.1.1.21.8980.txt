dynamic slicing method maintenance large programs rp des tam ly nos thy research group artificial intelligence university hungary cc hu different program slicing methods maintenance reverse engineering testing debugging 
slicing algorithms classified static slicing dynamic slicing methods 
applications computation dynamic slices preferable produce precise results 
introduce new forward global method computing backward dynamic slices programs 
parallel program execution algorithm determines dynamic slices program instruction 
propose solution problems specific language pointers function calls 
main advantage algorithm applied real size programs memory requirements proportional number different memory locations program cases far smaller size execution history fact absolute upper bound algorithm 
keywords software reverse engineering dynamic slicing 
program slicing methods widely maintenance reverse engineering testing debugging :10.1.1.39.1532
slice consists statements predicates affect variables set program point 
slice may executable program subset program code 
case behaviour reduced program respect variable program point original program 
second case slice contains set statements influence value variable point 
slicing algorithms classified dealing backward slicing 
statically available information static slicing compute statements influence value variable occurrence specific program input dynamic slice 
determine change place program affect behavior parts program important task software maintainer 
decomposition slices useful making change piece software unwanted side effects 
decomposition slice variable consists statements may affect value point captures computations variable independent program location 
advantage decomposition slices making modification program unaffected part program determined 
program slicing useful reduce cost regression testing 
techniques program understanding locate safety critical code may interleaved entire system 
slicing approach able identify code contributes value variables part safety critical component 
problems reverse engineering consists understanding current design program way design differs original design 
program slices assist type re abstraction 
program represented lattice slices ordered slice relation lattice guide engineer places reverse engineering efforts concentrated 
static slicing approaches applications mentioned 
realistic programs static slices may large due complexities determining precise data control dependences 
problems static resolution aliases due procedure calls pointer variables array 
hand aliasing easily resolved observing execution behavior dynamic slicing 
dynamic slicing approach approximate static slices constructing union program slices variable program large number test runs 
different dynamic slicing methods introduced 
agrawal horgan precise dynamic slicing method graph representation dynamic dependences 
graph called dynamic dependence graph ddg includes distinct vertex occurrence statement 
dynamic slice created ddg respect variable contains statements influence variable 
refer slice ddg slice 
major drawback approach size ddg unbounded 
agrawal horgan suggested method reducing size ddg reduced ddg may huge execution different dynamic slices :10.1.1.20.9646
method agrawal applied real size applications test case millions execution steps may performed 
introduced method forward computation backward dynamic slices iteration method slices available variables execution point 
method applicable toy programs entry procedure scalar variables simple assignment statements 
main contribution current basic algorithm extended slicing real programs 
extended algorithm presents solution handling pointers function calls interprocedural slicing jump statements due space constraints 
main advantage approach applied real size programs memory requirements algorithm proportional number different memory locations program size execution history number steps instructions program execution 
experiences preliminary test results show number different memory addresses substantially lesser size execution history 
organized follows 
section basic concepts dynamic slicing 
section provides introductory description algorithm simple programs 
extension algorithm real programs detail section 
section discusses relations 
developed prototype algorithm 
section summarizes experience implementation research highlighted 

dynamic slicing goal dynamic slices determine statements precisely may contain program faults assuming failure revealed input 
prior description different dynamic slicing approaches background necessary demonstrated example 
feasible path executed referred execution history denoted 
input case example 
corresponding execution history 
see execution history contains instructions order executed gives serial number instruction executed th step referred execution position 
distinguish multiple occurrences instruction execution history concept action pair written serial number instruction exe cution position 
example action output statement example input 
define dynamic slicing criterion triple denotes input action execution history set variables dynamic dependences computed 
agrawal horgan defined dynamic slicing follows execution history program test case variable dynamic slice respect set statements execution effect value observed execution 
agrawal horgan introduced new method uses dynamic dependence graph ddg take account different occurrences statement may affected different set statements due redefinitions variables 
ddg distinct vertex occurrence statement execution history 
graph precise dynamic slice created 
main drawback ddg size graph 
number vertices ddg equal number executed statements unbounded 
improve size complexity algorithm agrawal horgan suggested method reducing number vertices ddg 
idea method new vertex created create new dynamic slice 
size reduced graph bounded number different dynamic slices 
shown number different dynamic slices worst case number statements :10.1.1.20.9646:10.1.1.20.9646
compute precise dynamic slice slicing cri ddg slicing method get dynamic slice program 
include stdio include stdio int int void main void main 
scanf 
scanf 
scanf 
scanf 


















printf 
printf 
simple program 
framed statements give dynamic slice 
forward computation dynamic slices simplicity dynamic slice algorithm programs steps 
computation backward dynamic slice described programs simple statements 
algorithm extended derive dynamic slice real programs section 
algorithm forward means obtain necessary information dynamic slice instruction soon instruction executed 
consequence method global instruction executed obtain dynamic slice instructions processed previously 
contrary methods involving backward processing compute slices selected instruction variables instruction 
global slicing useful testing program maintenance 
algorithm necessitate dynamic dependence graph 
compute store set statements affect currently executed instruction 
way avoid superfluous information may unbounded 
prior algorithm basic concepts notations overviewed introduced 
clarity rely cases necessary modifications 
demonstrate concepts dynamic slicing applying example program 
apply program representation considers definition variables addition considers direct control dependences 
refer program representation program representation 
instruction original program expression follows serial number instruction variable gets new value instruction case assignment statements 
output statement predicate denotes newly generated output variable predicate variable name output predicate respectively see example 
variable predicate variable instruction directly control dependent 
note predicate variable 
entry statement defined exactly predicate variable 
example representation shown 
denote predicate variables denotes output variable value depends variable output statement 
derive dynamic slice respect input related execution history representation program follows 
process 
representation program instruction execution history starting 
processing instruction derive set contains statements affect instruction executed 
applying program representation effect data control dependences treated way 
instruction executed related set derived determine definition serial number instruction newly assigned variable denoted simply definition variable serial number instruction defined considering instruction 
obviously processing instruction execution position subsequent executions defined time 
predicates means definition evaluation predicate 
dynamic slices determined follows 
assume running program input 
instruction executed position contains exactly statements involved dynamic slice slicing criterion sets determined equation derived determine value assignment predicate instructions note computation order strict determine consider occured execution position consider program yin loop 
see dynamic slice determination dynamic dependence graph may huge program representation requires space original source code method creates dynamic slice application ddg 
formalization forward dynamic slice algorithm 
program dynamicslice initialize sets number elements eh current element endfor output sets definition variables 
dynamic slice algorithm note construction execution history achieved instrumenting input program executing instrumented code 
instrumentation procedure discussed section 
illustrate method applying example program 
execution history 
execution values computed action final slice program obtained union 

dynamic slicing real programs previous section introduced algorithm forward computation dynamic slices 
simplicity method simple programs intraprocedural scalar variables assignment statements 
section extend algorithm real programs 
means solution problems pointers function calls jump statements 
necessity handling pointers prompts slightly extend meaning slicing criterion 
means example want compute dynamic slice pointer dereference seeking dynamic dependences memory location simply variable original definition 
see slice include dependences pointer dereferenced memory location 
note handling arrays structure members traced back slicing memory locations case pointers 
complete handling programs includes handling jump statements goto switch break continue 
algorithm capable slicing programs due space constraints technique detail full version technical report 
method slicing programs involves main steps analyzing input program representation created static dependences program program instrumented creating necessary runtime information 
instrumented program compiled executed way trace execution created contains dynamic information needed dynamic slice algorithm 
denoted 
dynamic slice algorithm executed certain slicing criterion previously created representation 
previous section representation defined program instruction 
programs representation contain sequence items instruction needed instruction expression values assigned new values 
note sequence order important values previous item subsequent sets 
sequence order determined execution order evaluation corresponding subexpressions order evaluation subexpressions defined language rely parsing sequence determined context free grammar 
defined variable variables meanings 
see example program scalar variables 
regular global local variables constant address scope declared 
predicate variables 
denoted serial number predicate instruction described previous section 
output variables 
denoted 
definition output variables kind dummy variables generated places set regular variable takes value 
include function calls return values neglected single expression statements sideeffects simplicity output statements 
dereference variables 
denoted global counter dereference occurrence 
notion dereference variables memory address gets value pointer array structure member 
function call argument variables 
variables denoted function name function argument parameter number 
argument variable defined function call site entry point function 
function call return variables 
denoted function name 
return variable defined exit point function function caller returning 

see example program statically computed representation notation described 
order compute dynamic slice static representation need gather dynamic information actual execution program 
done instrumenting original program code basically alternatives type instrumentation source level object code level 
algorithm source level instrumentation chosen ease portability different platforms mapping slice results original source code 
may argue object level instrumentation result faster execution instrumented code system library calls handled completely 
include stdio int 
int int int 


return 
int int 

return void main int 

scanf 
scanf 




printf 
printf 
example program static representation relevant points program certain dump actions create dump file called program 
instrumentation performed way compiling instrumented program behave identically original code 
contains necessary information actual execution administrative information program execution memory addresses scalar variables actual values pointers beginnings endings functions determined representation program execution derive dynamic slice respect slicing criterion 
process perform different actions element 
actual element administrative element necessary computations internal representations maintaining stack visible variables block scopes 
element element corresponding sequence processed follows 
item sequence determine corresponding dynamic dependences memory locations variables predicates derive set contains statements affect instruction executed equations note computation order strict seen previous section 
case function calls actual sequence processed single iteration algorithm processing single element fly 
cases remaining sequence positions stacked function returned remaining sequence items processed see formalized algorithm 
values determined corresponding statically computed values follows conversions apply scalar variable memory location determined dereference variable value memory location corresponding pointer predicate variable determined supplementing predicate variable corresponds depth stack denoted needed case recursive functions predicate considered different different instances function cases 
give formalization dynamic slice algorithm complete programs 
illustrate method applying example program shown slicing criterion input get execution history 
dual elements correspond function call return parameter passing virtual statements 
parameter passing treated statements action caller puts parameter function call stack called function takes value returning value interpreted similarly 
values computed execution shown 
numbers form xxxxxxx memory addresses supplied 
final slice program obtained union actual result depicted 
slice contains lines marked bullets column 
observe dynamic slice contains statements influenced value memory location pointed byp fact value scalar 
point interest observe dynamic slice criterion second column lines contains statements influence value scalars statements influence values globals included return values andg dependent constant values 
note computation necessitates separate execution algorithm method global specific input slices variables definition point determined simultaneously 
program initialize sets actual item nil lines case current line function mark push actual item actual item nil function mark pop actual item eh element current action actual item item resolve unresolved memory address actual item endcase actual item processed compute actual item actual item item endwhile endfor output sets definition memory locations true static function calls actual item position item nil item unresolved memory address 

dynamic slice algorithm programs 
related method computation dynamic slices significantly differs approach 
method takes account different occurrences statement may affected different set statements 
approach uses dynamic dependence graph 
graph precise dynamic slice computed mentioned earlier size may unbounded 
agrawal horgan proposed reduced ddg method 
size reduced graphs bounded number different dynamic slices see section details action ddg reduced ddg methods 
simple program called different dynamic slices number statements program :10.1.1.20.9646
example shows reduced ddg may huge programs 
korel introduced forward method determining dynamic program slices 
algorithm computes executable program slices 
cases slices accurate computed forward dynamic slicing algorithm 
executable dynamic slices may produce inaccurate results presence loops :10.1.1.20.9646
method korel notion removable blocks 
idea approach program execution exit block algorithm determines executed block included dynamic slice 
excellent comparison different dynamic slicing methods :10.1.1.20.9646

summary different program slicing methods maintenance reverse engineering testing debugging 
slicing algorithms classified static slicing dynamic slicing methods 
applications computation dynamic slices preferable produce precise results 
experimental results show 
values computed execution 
dynamic slice program expected executed nodes entire program 
methods dynamic slicing introduced literature internal representation execution program dynamic dependences called dynamic dependence graph ddg 
main disadvantage methods size unbounded includes distinct vertex instance statement execution 
introduced new forward global method computing backward dynamic slices programs 
parallel program execution algorithm determines dynamic slices program instruction 
proposed solution problems specific language pointers function calls 
main advantage algorithm applied real size programs memory requirements proportional number different memory locations program cases far smaller size execution history fact absolute upper bound algorithm 
developed prototype system implemented forward dynamic slicing algorithm language 
assumptions memory requirements algorithm turned true preliminary test results 
include stdio int 
int int int 


return 
int int 

return void main int 

scanf 
scanf 




printf 
printf 
dynamic slices computed andb tested system input programs separate executions different slicing criterions 
average number different memory locations size execution histories 
computed ratio test execution computed average value large execution histories ratios 
largest execution history consisted actions 
goal obtain empirical data size dynamic slices large programs 
selected set programs large number test cases program 
going construct union dynamic slices variable program test runs obtain approximation decomposition slices 
mentioned earlier decomposition slices useful software maintenance reverse engineering 
wish extend approach compute dynamic slices programs 
authors wish acknowledge including implementation testing algorithm 
supported 
agrawal horgan 
dynamic program slicing 
sigplan notices pages 
agrawal horgan london 
incremental regression testing 
proceedings ieee conference software maintenance montreal canada 
beck 
program interface slicing reverse engineering 
proceeding fifteenth international conference software engineering 
proceedings working conference reverse engineering 

des zs 
cs 
thy 
forward computation dynamic slices programs 
technical report tr 
binkley gallagher 
program slicing 
advances computers 
marvin zelkowitz editor academic press san diego ca 
gallagher lyle 
program slicing software maintenance 
ieee transactions software engineering 
thy 
des forg cs 
efficient relevant slicing method debugging 
proceedings th european software engineering conference esec pages toulouse france sept 
lncs 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems 
kamkar 
overview comparative classification program slicing techniques 
systems software 
korel laski 
dynamic slicing computer programs 
journal systems software 
korel 
forward computation dynamic program slices 
proceedings international symposium software testing analysis issta seattle washington aug 
harrold 
selecting tests identifying test coverage requirements modified software 
proceedings issta pages seattle washington aug 
tip :10.1.1.20.9646
survey program slicing techniques 
journal programming languages sept 
venkatesh 
experimental results dynamic slicing programs 
acm transactions programming languages systems mar 
weiser 
program slicing 
ieee transactions software engineering se 
