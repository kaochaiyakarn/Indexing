ieee transactions software engineering vol 

april statemate working environment development complex reactive systems david harel member amnon naamad amir pnueli michal rivi sherman mark trakhtenbrot provides overview statemate system constructed past years authors colleagues ad cad subsidiary logix statemate set tools heavy graphical orientation tended specification analysis design documentation large complex reactive systems real time embedded sys tems control communication systems interactive software hardware 
enables user prepare analyze debug diagram matic precise descriptions system development interrelated points view capturing structure functionality behavior 
views represented graphical languages intricate language statecharts depict reactive behavior time 
addition statecharts main novelty statemate fact understands entire descriptions perfectly point able analyze crucial dynamic properties carry rigorous ex simulations described system create run ning code automatically 
features invaluable comes quality reliability final outcome 
index terms code generation executable specifications functional decomposition reactive systems statecharts statemate 
systems see characterized owing complexity intricate nature reactions discrete occurrences 
compu tational parts systems assumed dealt means reactive control driven parts considered problematic 
examples reactive systems include kinds realtime computer embedded systems control plants communication systems interactive software varying nature vlsi circuits 
common notion reactive behavior system adequately described specifying output results set inputs requires specifying relationship inputs outputs time 
typically descriptions involve complex sequences events received may revised november 
recommended belady 
supported pan bird foundation israel ministry industry commerce 
harel pnueli logix burlington 
ma ad cad 
rehovot 
israel 
department applied mathematics computer science weizmann institute science 
rehovot 
israel 

naamad 
sherman 
trakhtenbrot logix 
burlington 
ma 
ad cad 
rehovot 
israel 
ieee log number 
statemate registered trademark logix 
actions conditions information flow ex plicit timing constraints combine form sys tem behavior 
fair say problem finding methods aid development systems satisfactorily solved 
standard structured analysis structured design methods adequately deal dynamics reactive systems pro posed deal primarily data driven applications functional decomposition data flow description sufficient 
methods extended deal real time systems see approach developed independently viewed consistent ideas 
see comparisons 
commercially available tools real time system design 
large sophisticated graphics editors model certain aspects reactive systems user little resulting descrip tions testing syntactic consistency completeness producing various kinds output re ports 
systems helpful organizing designer thoughts communicating thoughts generally considered severely comes difficult task preparing reliable specifications designs satisfy require ments behave time expected satisfactory final system constructed relative ease 
draw analogy discipline conventional programming acute need reactive system analog programming environment comes complete powerful programming lan guage useful program editor syntax checker importantly working compiler interpreter extensive debugging facilities 
programs written checked syntax errors run tested debugged thoroughly analyzed set free thing real world 
problems arising design typical reactive system far difficult ideas described conceived 
ieee ieee transactions software engineering vol 


april arising preparation typical computational data processing program 
reactive systems highly concurrent distributed fall quite naturally multiple levels detail usually display unpredictable catastrophic behavior unanticipated circumstances 
development phases systems laden misunderstandings customers users various members design team life cycle replete trouble shooting cations enhancements 
languages reactive systems specified ought clear intuitive amenable generation inspection modification humans precise rigorous amenable validation simulation analysis computers 
languages ought possible move easily cient semantic underpinnings initial stages requirements specification prototyping design form basis modifications maintenance stages 
underlying principles adopted clarity intuition greatly enhanced adoption visual languages bulk description effort behavioral aspects included 
need precision rigor leads naturally notion visual formalisms languages highly visual nature depending small number carefully chosen diagrammatic para time admit formal se mantics provides feature graphical non graphical alike precise unambiguous meaning 
reactive systems means possible prepare intuitive comprehensive specifications analyzed simulated debugged stage aid compute support system 
describes ideas statemate computerized environment development reactive systems adheres principles 
reader referred additional material system particularly 
ii 
statemate glance underlying premise statemate need specify analyze system development sud sequel separate related points view structural behavioral 
closely linked shall see constitute ceptual model sud 
see fig 

structural view provides hierarchical de composition sud physical components called modules identifies information flows chunks data control signals flow physical links exist modules 
word physical taken general module actual piece hardware systems fig 

structure statemate model 
subroutines packages tasks software parts 
conceptual model sud consists hierarchy activities complete details data items control signals flow significantly control activities specify behavior 
little explicit 
activity hierarchy flow information control activities constitute functional view essentially called functional decomposition sud 
functional view specify dynamics say activities activated terminate carried parallel 
true data flow functional view specify data flow 
example identified automatic teller machine identify customer report balance data item account number flow implied specified item flow flow response flow initiated activity requested 
words functional view provides decomposition activities possible flow formation says virtually activities associated inputs outputs con continued behavior sud 
behavioral view third spec ify control activities 
level activity hierarchy controlling particular level 
controllers responsible specifying things happen sud reacts time 
things controlling statechart start activities generate new events change values variables 
sense harel eta statemate complex reactive systems activities active data flowed respond events test values conditions variables 
connections activities control seen section iii elaborate multifaceted conceptual model regarded closely knit aggregate 
relationship conceptual model physical view hand far simpler consists essentially specifying modules implement activities 
views structural functional behavioral statemate provides graphical diagram matic languages module charts activity charts state charts spectively 
languages common set simple graphical conventions see come complete graphics editors check syntactic validity specifications developed importantly formal semantics embed ded 
languages described detail section iii detail statecharts de scribed 
fig 
illustrates structure state mate 
database central obtains input graphics editors editor forms language additional information specified shall see 
interesting parts statemate analysis capabilities described sections iv 
mentioned 
entire approach gov desire enable user run debug analyze specifications designs result graphical languages 
database constructed possible rigorously execute specification retrieve information variety kinds description sud provided user 
special tools provided pur poses means querying database retrieving information execution ability simulation control language allowing user emu late sud environment execute specifica tions interactively batch programmed mode graphic animated response break points desired set dynamic tests reachability detection deadlock nondeterminism exhaustive executions auto matic translation specification high level pro gramming language ada yielding code linked real simulated target environment 
statemate development exten sion early commercially avail able late 
currently available versions run sun apollo vax color workstations networks 
ideas methods embodied statemate field tested successfully number large real world development projects 
mission specific avionics system color significantly enhance appeal state mate 
monochrome versions arc available 
statecharts project manage fig 

structure statemate 
ads 
code code fighter aircraft designed israel aircraft industries specified part statecharts see 
reader referred case study statemate application pro cess modeling described comparative evaluation 
iii 
statemate section highlights graphical languages forms language user statemate employs specify sud 
formal syntax semantics features 
reader referred comprehensive description detailed treatment language statecharts 
described help simple example early warning system sequel ability take measurements external sensor compare prespecified upper lower limits warn user measured value ex limits 
structural view sud described language module charts describe sud mod ules physical components environment modules parts purpose specifi cation deemed external sud clusters data control signals may flow 
modules depicted rectilinear shapes storage modules rectangles dashed sides 
en capture submodule relationship 
environment modules appear dashed line rectangles external sud 
information flow rep resented labeled arrows 
various kinds endpoint 
ieee transactions software engineering 
vol 


april operator ult fault otc fig 
module chart early warning system 
connectors appear chars lengthy arrows denote compound chunks data 
fig 
par module char early warn ing system 
specifies self explanatory fashion modules subsystems main com ponent man machine interface mmi signal handler operator terminal sensor timer alarm considered external system 
mmi decomposed submodules shown 
storage module name shared data information flowing modules specified 
turning conceptual modeling functional decom position sud captured language activity charts 
graphically similar module chars rectilinear shapes stand activities functions carried system 
solid arrows represent flow data items dashed arrows capture flow control items 
see fig 

typical activity accept input items produce output items active time spans inner workings specified lower level decomposition 
activities atomic basic reside lowest level may described simple input output transformations means code high level programming language 
activity charts may contain additional kinds objects data stores control activities 
data stores thought representing databases data structures buffers variables various kinds physical containers reservoirs typically correspond storage modules module char 
represent ability store data items flow produce items outputs request 
displaying module charts activity charts screen 
employ different conventions regarding color arrow type 
user distinguish quite easily 

example 
arrows module chars drawn rectilinear parallel axes 
activity chars drawn smooth spline functions 
ic fig 

activity chart 
control activities constitute behavioral view system appear activity char empty boxes 
control activity may appear inside ac tivity level shown fig 

contents control activities described third graphical languages statecharts discuss 
general control activity ability control sibling activities essentially sensing status issuing commands 
example fig 
control activity things perform actions cause star sense started stopped appropriate events conditions 
various consequences occurrences integrated semantics activity charts language fact respectively suspend stopping respectively suspension parent activity 
turn behavioral view 
statecharts introduced see extension conventional finite state machines fsm vi state transition diagrams 
conventional state diagrams inappropriate behavioral description complex control suffer fiat unstructured inherently sequential nature give rise exponential blow number states small extensions system cause able growth number states considered 
problems overcome statecharts supporting harel statemate complex reactive systems repeated decomposition states substates fashion combined instantaneous broadcast communication mechanism 
important facet extensions ability transitions leave enter states level 
consider fig 
equivalent 
fig 
states clustered new state arrow leaving denotes high level interrupt effect prescribing exit system happens new state arrow entering appear un cause entry fact meaning relies internal default arrow attached causes entrance turning decomposition consider fig 
fig 
equivalent 
state system unspecified entrance relies default arrows enter pair occurrence example lead new pair lead 
meaning transitions appearing including entrances exits deduced comparing fig 

worth mentioning decomposition call orthogonal state components carried level states convenient allowing single level sets communicating fsm 
orthogonality feature statecharts solve state blow problem making possible de scribe independent concurrent state see 
orthogonal state decomposition eliminates need multiple control activities single ac tivity done 
general syntax expression labeling transi tion statechart event triggers transition condition guards transition taken un true occurs action carried precisely transition taken 
optional 
events conditions considered inputs actions outputs correspondence subtle ordinary fsm due intricate nature statecharts relationship activities 
ex ample appears action transition appears triggering event transition orthogonal component executing action transition immediately cause second transition taken simultaneously 
expression simply primitive action cause transitions spe cial action start causes activity start 
similarly simply external primitive event special event stopped occurs causes transition take place fig 

decomposition 
fig 

decomposition 
stops stopped 
table shows selection special events conditions actions appear part labels transition 
noted syntax closed boolean combinations example legal label entered active suspend notice incorporated extension fsm approach conventional variables 
changing value allowed event standard comparisons allowed conditions assignment statements allowed actions 
allowing actions appear transitions appear associated entrance exit state state course level 
association currently specified forms language discussed 
associate action resume entrance state activ ity resumed entered 
special constructs appearing table serve link control activities objects appearing activity chart part way behavior associated functionality data flow 
facets association ability specify activity place state saying started entering state stopped leaving 
connection stated forms 
power control sense status activities limited scoping rule control activity appear way 
statecharts seen generalize mealy moore automata see lo 
ieee transactions software engineering 
vol 


april terminal msgs sensor timer 
range signal measurements compare fault terminal fig 

activity chart early warning system 
table special events conditions actions referring events conditions actions jr tcd start opl ed hm ging suspend resume data items read exp written condition true true alse ci event action sc ule nl time units ing level activities flow question 
fig 
example events actions appear statechart st rs wr 
ones referring say st 
appear 
scoping mechanism hiding information intended help making specifications modular amenable kind division required large proj ects 
scoping role easily overridden explicitly flowing events actions shall get details 
fig 
shows activity chart early warning sys tem 
user operator terminal send corn 
fig 
abbreviations elements ap table st started rs 
resume tm timeout 
statemate recognizes abbreviations 
mands control activity formation flow form specified consist set exe cute reset instructions 
operator send upper lower required limits get check set 
limits stored data store range subsequently compare report fault activities 
item req limits compound data item stands pair containing required upper lower limits 
special activity get measurements receive signal sensor clock reading timer translates time stamped digital value sample sent comparing activity 
range signal value sent controller re port fault activity respectively 
responsible sending alarm formatting sending user appropriate message 
second fig 
self explanatory 
important emphasize fig 
required provide dynamic behavioral information role controlling statecharts 
fig 
example shows possible statechart highlevel control activity fig 
reader able comprehend quite easily 
connections activity charts statecharts intricate resulting tightly knit conceptual model 
contrast connections model structural view 
assign implementational responsibility part appropriate parts 
done associating modules activities storage modules data stores 
example associations main module implements control activity signal handler harel eta statemate complex reactive systems control set connected 
reading signal connect go halt fig 

statechart high level activity warning system 
implements get measurements compare mmi implements set report fault 
mmi send err implemented output proc submodule set main 
associations input forms activities 
turn forms language 
special form maintained elements descrip tion additional information input 
includes nature lengthy definitions compound events conditions type structure data items 
fig 
shows example form data item fields self explanatory 
consists field possible structure data items components attribute fields possible associate attributes items units precision certain kinds data items names personnel responsible specification certain high level ele ments 
attributes recognizable retrieval tools statemate able play role evaluation documentation model shall see 
color graphical editors charts languages continuously check input syntactic sound ness database updated graphical elements introduced 
editors mouse menu support wide range possibilities including move copy stretch hide reveal zoom options appli cable single multiple elements charts selected number ways 
form selected element viewed updated special forms editor appropriate graphical edi tor 
dat item definition structure record list group ae type float consists name attn value fig 

form data item 
extensive consistency completeness tests subtle static tests carried session 
examples include checking informa tion flow module chart consistent activity chart listing modules outputs ac started identifying cyclic defi nitions elements events con ditions 
iv 
queries 
reports documents section describe tools available retrieving formatting information model 
statemate provides querying tool object list generator user retrieve information database 
works generating lists elements satisfy certain criteria 
times keeps pending list gets modified user refines cri asks list elements type 
example starting empty pending list ask states controlling statechart activity resulting list promptly new pending list 
list refined asking states attribute named responsibility value jim brown 
ask activities started states 
query language face appear bounded expressive power conjunctive queries 
supports certain kinds transitive closures ancestor descendent relationships states activities directly comparable tive queries shown subset general fixpoint queries see 
charts constitute sud description plotted 
user control portion chart plotted size depth 
addition user ask kinds fixed format reports compiled directly description sud database displayed ieee transactions soi engineering 
vol 


april tion screen output alphanumeric terminal printer 
projected speak part description retrievable query language 
words user may queries capture say set activities particular interest request report applied activities list 
reports currently imple mented data dictionaries various kinds textual protocols states activities contain infor mation relevant interface diagrams tree ver sions various hierarchies called diagrams 
certain parameters user control various aspects reports produced depth trees tree reports keys dictionaries sorted 
addition fixed format reports statemate document generation language users tai lor documents 
programs written language produce documents particular structure contents appearance 
uses language design document template containing formatting commands desired word processor interleaved incorporate information model 
instructions activate queries query language retrieve information routines extract graphical charts format template 
document generation program pre pared advance run document needed 
templates particular documents available ready user 
include main parts dod standards 
programmed documents generated stage de velopment complete model portions thereof 
executions mc lss turn analysis capabilities state mate constitute main novelties 
tried set underlying philosophy detail emphasizing analysis capabilities 
heart ability carry step sud dynamic behavior consequences taken account 
step briefly unit dynamic behavior sud legal status 
status captures system cur rently active states activities current values variables conditions step environ ment activities generate external events change truth values conditions update variables data items 
potentially intricate form statemate description sud take changes effect status triggering transitions statecharts activating deactivating activities modifying data items 
clearly changes turn may cause 
standard word processors supported 
portion statemate responsible calculating effect step contains involved algorithmic procedures reflect formal semantics defined mathematically modeling lan guages 
particular semantics statecharts adopted described somewhat dif ferent described stan dard examples equivalent 
basic way running sud step step interactive fashion 
step user gener ates external events changes conditions carries actions changing values variables emulating environment system 
assumed occurred single step 
user gives go command statemate responds transforming sud new resulting status 
typically statecharts screen hap activity chart 
currently ac tive states activities highlighted special coloring 
ability run dynamic scenarios ob vious value debugging mechanism specification stage 
find system response ex pected go back model change modifying statechart example run scenario 
times want able see model executing circumstances care spell detail 
see perform random conditions typical typical situations 
pow notion executing model achieved idea programmed executions 
specially tai simulation control language scl de signed incorporated statemate enabling user retain general control executions pro exploit tool take details 
programs scl look little conventional programs high level language employ variables support control structures combined nested 
control simulation reading events changes previously prepared files generating say random sampling variety probability distributions 
kinds breakpoints incorporated program caus ing execution take certain actions particular situations come 
actions range incrementing counters accumulate statistics performance switching interactive mode user return programmed execution simple command way ex lengthy calculation constituting basic activity left unspecified modeling sud 
system highlight states activities lowest level visible 
harel statemate complex reactive systems executions stopped intervening changes effects events gen erated prescribed probabilities checked computational parts sud environment emulated 
simulated executions trace database maintained records changes status sud 
trace data base reviewed filed away printed discarded course important inspecting execution effects line 
variety simulation reports produced pans information gathered execution proceeds instructions scl program pans taken trace database execution ends 
may view progress programmed execution graphically just interactive case color codes continuously update displayed charts 
result visually pleasing discrete animation behavior sud 
part sud simulated inter active programmed mode restricted scope 
example simulate activity rest statemate specification considered nonexistent duration simulation 
need wait entire sud specified initiating executions simulations user start simulating running description moment portion available syntactically intact checked static tests 
simulation user typically provide events items information external speci fied portion internal complete specification 
general carefully prepared scl program test specification sud wide range test data emulate environment unspecified pans sud check specification time critical performance efficiency general debug identify subtle run time errors 
needless say kinds errors discovered way quite dif ferent syntactic completeness consistency checks form highlights available tools system design statemate carries routinely 
important keep mind role scl programs oversee execution model intended replace 
scl modeling language language serves analysis capabilities 
compared simulation languages sense term programs con model 
statemate fully execute steps dynamic behavior scl programs writ visual tools support animated executions 
see 
example 
control scenarios tempting provide ability execute scenarios long number possibilities manageable order test crucial dynamic properties 
state mate programmed provide number dynamic tests proceed essentially carry ing exhaustive brute force sets executions 
include reachability nondeterminism deadlock usage transitions 
ini tial configuration target condition test 
seeks se quences external events occurrences lead initial status satisfies condition producing sequences exist stating 
important stress run time dynamic merely test boxes diagram connected arrows 
applies dynamic tests 
realize limit values variables finite sets number scenarios tested exhaustive execution quickly unmanageable 
means portion model testing sufficiently small external connections ways able complete exhaustive test 
dynamic tests critical isolated parts model 
larger parts re quire exhaustive testing may limit scope test instructing example ignore external events avoid simulating details cer tain activities 
reachability test suc number occasions 
real world sit uation analyzing part specification trigger mechanism certain deployed missile system reachability test discovered new sequence events unknown design team 
leading firing missile 
reachability test cated way attaching watchdog statecharts model tested 
test possible reach situations temporal dynamic nature adding watchdog statechart enters special state situation case arises 
reachability test run original statechart new added orthogonal component condition sought specified 
additional feature planned ver sion ability verify statemate specification formula temporal logic 
vi 
code generation rapid prototyping model sud constructed executed analyzed satisfaction designer statemate instructed translate automatically code high level programming lan guage 
analogous compilation program high level language executability model analogous interpretation 
currently trans ieee transactions software engineering 
vol 


april lations ada supported 
technically activity chart controlling statecharts translated means need wait entire model ready produce code portions thereof 
code supplied bottom level basic activities appropriately linked gen erated code resulting complete running version system 
term result prototype code generated automatically reflects design decisions process preparing conceptual model 
may efficient final real time code runs faster executions model just compiled code runs faster interpreted code 
plans call enhancing code generator ability incorporate decisions interactively human designer various opti mization features 
add interesting way exploit statemate analyzing model construct special statecharts part model role test model 
course test suites watchdog statecharts described earlier output final code 
main uses prototype code ob serving sud performing circumstances close final environment 
code ported executed actual target environment realistic cases simulated version tar get environment 
linked prototype code soft panels graphical mock ups control panels dials gauges represent actual user interface final system 
panels appear screen manipulated mouse keyboard 
conventional prototypes systems soft panels driven written code prepared especially prototype code generated automatically statemate model typically thoroughly tested subjected code generation 
idea feature goals go development team 
envision mock ups sud driven prototype code part communication customer contractor contractor subcontractor 
unreasonable require run ning version system deliverables certain development stages preliminary de sign review 
associated code generation facility debug ging mechanism user trace executing pans code back statemate model 
breakpoints inserted run code chosen events occur point may examine model configuration states activities modify elements conditions data items prior resuming run 
course substantial problems arise running code changes statemate model recompiled ada rerun 
simulations trace files requested changes desired elements recorded 
continuing analogy conventional compilation generation code statemate model debugging facility termed source level debugging 
code generation facility bringing model gradually closer final software implementation 
done incremental substitution increasingly larger parts system re placed code process interleaved making design decisions 
procedure hope discuss fully subsequent dif ferent conventional integration medium changed conceptual model code integration carried 
consequence need testing validation intermediate steps carried statemate 
plan enrich code generator ability yield vhdl code 
enable hardware designers statemate specification early design stages stages 
silicon compilation carried code generated automatically state mate specification 
vii 
say statemate system combines principles theses feel guide attempts design support tools system development 
long advocated need executable specifications second advan tage visual formalisms 
far fi st goes development complex systems allowed progress untested requirements specifications 
ways model sud desired level detail manner fully executable able allows deep comprehensive test ing debugging static dynamic nature prior process building system 
add dynamic analysis capabilities statemate go far normally taken meaning term executable specification simple ability animate diagram step step ion 
second principle believe visual turn crucial ingredient continuous search natural powerful ways ex computers 
feeling progress graphical hardware combined capabilities human visual system result significant change way carry complex engineering activities 
surviving approaches believe diagrammatic nature formal rigorous syntax semantics 
acknowledgment group israel aircraft industries suggestions time harel statemate complex reactive systems constructive criticism lengthy period statemate system developed 
way project gotten started dr listed author consulting iai early 
action led invention statecharts mid decision form start statemate early 
grateful technical staff members past turning ideas described real working system 
include bernstein cohen cohen fogel hay hirsch levin maron pnueli pnueli schmidt 
addition special pleasant manager imaginable contributing experience expertise phases 
bird foundation office chief scientist israel ministry industry commerce financial help 
referees pro vided helpful comments penultimate version 
chandra harel 
structure complexity rela tional queries cornput 

sci vol 
pp 


chandra merlin optimal implementation queries relational databases proc 
th acm np 
theory computing boulder 

pp 

graf 
building visual designer environment principles visual programming systems 

chang ed 
englewood cliffs nj prentice hall 
pp 

harel 
statecharts visual formalism complex systems sci 
cornput 
program vol 

pp 

appeared preliminary form rep cs weizmann inst 
sci rehovot 
feb 
visual formalisms 
commun 
acm vol 

pp 
go harel pnueli 
development reactive systems logics models concurrent systems apt ed 
new york springer verlag pp 

harel 
pnueli 
schmidt sherman formal semantics statecharts proc 
nd ieee symp 
logic com puter science 
new york ieee press 
pp 

harley structured analysis method real time systems proc 
syrup dec 
strategies real time system specifi cation 
new york 

hopcroft ullman 
theory 
languages 

reading 
ma addison wesley 
humphrey kellner 
software process modeling principles entity process models proc 
lnt 
conf 
software eng 
pittsburgh 
pa new york ieee press 

pp 

languages statemate logix burlington ma 
tech 
rep 

statemate approach complex systems logix burlington 
ma 
tech 
rep 

semantics logix burlington 
ma 
tech 
rep 

lano 
technique software design trw series software engi 
amsterdam 
netherlands north holland 
kessler 
embedded computer systems analysis method 
manuscript 
israel aircraft industries nov 

method analysis complex embedded systems software proc 
structured techn assoc 
conf 
sta 
univ chicago 
chicago 
il 
may 
pp 

pnueli 
applications temporal logic specification verification reactive systems survey current trends current trends concurrency lecture notes computer science 
vol 

de bakker eds 
berlin springer verlag 

pp 

smith 
statemate cruise control case study proc 
th int 
ieee cornput 
software 
conf 
new york ieee press 

pp 

ward 
transformation schema extension data flow diagram represent control timing 
ieee trans 
software eng 
vol 
se 
pp 

ward development real time sys tems 
new york yourdon 
wood wood comparative evaluations specification methods real time systems software eng 
inst carnegie mellon univ pittsburgh pa tech 
rep cmu sei tr dec 
david harel received sc 
degree mathematics bar university sc 
degree computer science tei aviv university ph degree com puter science massachusetts institute technology 
currently professor weizmann institute science israel chairman applied mathematics com puter science 
founder chief scientist logix burlington 
ma 
research staff ibm research center yorktown heights ny visiting professor carnegie mellon university department computer science 
research interests include logics programs theory systems engineering visual languages topics published widely 
editorial boards information computation acm press addison wesley book series 
book science computing exploring nature power algorithms published addison wesley 
dr harel member association computing machinery ieee computer society 
received sc 
degree ap plied mathematics tei aviv university 
previous positions developed operating systems weizmann institute science vice president product development mini systems developed software 

israel 
founder vice president operations ad cad subsidiary logix burlington ma 
amnon naamad received sc 
degree mathematics sc 
degree computer science tel aviv university 
respectively 
ph degree com puter science northwestern university 
currently project leader ad cad subsidiary logix bur 
ma 
responsible development simulation dynamic analysis tools statemate system 
cur rently developing translator statemate descriptions hard ware specification languages vhdl 
ieee transactions software engineering 
vol 


brandeis university 
research interests clude specification verification reactive systems special em temporal logic introduced computer science 
published widely topics 
editorial boards science computer programming springer verlag lecture notes computer science series 
dr member association computing machinery ieee computer society 
amir pnueli received ph degree applied mathematics weizmann institute sci ence rehovot 
israel 
currently professor computer science weizmann institute science 
founder chief scientist logix burlington ma 
chief sci mini systems visiting professor departments computer science stanford university harvard university michal received sc 
degree mathematics physics hebrew university sc 
degree computer science weizmann institute science 
years experience de complex real time systems various places 
product manager statemate system ad cad subsidiary logix 
burlington 
ma 
interests methods specification design real time systems 
rivi sherman received sc 
degree mathematics tel aviv university sc 
degree ph degrees computer sci ence weizmann institute science 
respectively 
currently technical staff israel spent years researcher university southern cali information sciences institute los 
project leader ad cad subsidiary logix bur 
responsible development version statemate system 
international marketing received de gree urban studies columbia university sc 
degree public manage ment carnegie mellon university 
years worked software development 
particularly database systems 
project leaders ad cad subsidiary logix burlington ma responsible database systems aspects statemate system 
involved statemate 
mark trakhtenbrot received sc 
degree computer science university ph degree institute cybernetics 
project manager rehovot israel developing implementing ada pdl 
currently project leader ad cad subsidiary logix 
burlington ma responsible development prototyping code generation capabilities statemate 
interests methodologies tools software systems engineer ing 
