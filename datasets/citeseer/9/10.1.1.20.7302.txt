ant algorithm new pheromone evaluation rule total tardiness problems daniel merkle martin middendorf institute applied computer science formal description methods university karlsruhe germany merkle aifb uni karlsruhe de 
ant colony optimization evolutionary method applied scheduling problems 
propose aco algorithm single machine total weighted tardiness problem 
compared existing aco algorithm unweighted total tardiness problem algorithm improvements 
main novelty algorithm ants guided way solutions sums pheromone values 
allows ants take account pheromone values making earlier decisions 
ant colony optimization aco evolutionary metaheuristic solve combinatorial optimization problems principles communicative behaviour real ant colonies overview see 
aco approach applied scheduling problems job shop flow shop single machine total tardiness problem 
bullnheimer compared aco algorithm heuristics solve single machine total tardiness problem decomposition heuristics interchange heuristics simulated annealing 
shown aco algorithm optimal solution benchmark problems heuristics benchmark problems generated method benchmarks problems 
propose alternative improved ways solve single machine total tardiness problem aco 
study weighted version total tardiness problem 
aco algorithms generations artificial ants search solutions 
ant generation builds solution step step going probabilistic decisions solution 
general ants solution mark paths decision space putting amount pheromone edges path 
ants generation attracted pheromone search solution space near solutions 
addition pheromone values ants usually guided problem specific heuristic evaluating possible decisions 
approach solve scheduling problems aco algorithms pheromone matrix ft ij pheromone added element ij pheromone matrix solution job ith job machine 
ants generation directly value ij estimate desirability placing job ith job machine computing new solution 
propose different approach 
value ij ants kj compute probability placing job ith machine 
problem ij occur ant chose job ith job schedule 
values small job scheduled ith place possibly long due date 
happen kj note approach differs nearly ant algorithms proposed far base possible decision ant pheromone values 
uses pheromone values estimate quality possible decision 
ants optimal decisions possible heuristic modification heuristic 
organized follows 
single machine total weighted tardiness problem defined section 
section describe aco algorithm unweighted problem 
pheromone summation rule introduced section 
section contains variants improvements 
choice parameter values algorithms test runs test instances described section 
results reported section 
section 
single machine total weighted tardiness problem single machine total weighted tardiness problem find jobs job processing time due date weight non preemptive machine schedule minimizes delta maxf gamma completion time job called total weighted tardiness schedule 
unweighted case ng single machine total tardiness problem smttp 
known smttp np hard weak sense np hard strong sense 
pseudopolynomial time algorithm case weights agree processing times implies 
observe result implies smttp pseudopolynomial time solvable 
overview different heuristics see 
aco algorithm smttp aco algorithm bullnheimer described section 
general idea adapt aco algorithm called acs tsp traveling salesperson problem dorigo smttp 
generation ants constructs solution 
ant selects jobs order appear schedule 
selection job ant uses heuristic information pheromone information 
heuristic information denoted ij pheromone information denoted ij indicator job place schedule 
heuristic value generated problem dependent heuristic pheromone information stems ants solutions 
probability parameter algorithm ant chooses job set jobs scheduled far maximizes ij ff ij fi ff fi constants determine relative influence pheromone values heuristic values decision ant 
probability gamma job chosen probability distribution determined ij ij ff ij fi ih ff ih fi heuristic values ij computed modified due date rule mdd ij total processing time jobs scheduled 
ant selected job local pheromone update performed element pheromone matrix ij gamma ae delta ij ae delta constant ae ae delta total tardiness schedule obtained jobs ordered earliest due date heuristic edd falling values value initialize elements pheromone matrix 
ants constructed solution best solutions improved opt strategy 
opt strategy considers swaps pairs jobs sequence 
checked derived schedule new best solution far 
best solution far update pheromone matrix 
old pheromone ij gamma ae delta ij reason old pheromone strong influence 
job schedule best solution far amount pheromone added element ij pheromone matrix place job schedule 
amount pheromone added ae total tardiness best schedule ij ij ae delta algorithm stops stopping criterion met certain number generations done best solution changed generations 
pheromone summation rule section describe new approach pheromone values aco algorithm smttp 
general high pheromone value ij means advantageous put job place schedule 
assume chance ant chooses put job place schedule low pheromone value ih job high pheromone value ij 
order high chance solution necessary ant place job late schedule small due date 
extend heuristic values lj force ant choose soon 
problem occurs values lj small solutions job place 
product lj ff delta lj fi small ant choose soon 
case ant useless solution having high total tardiness value 
handle problem propose pheromone value ij influence decisions choosing job place simple way guaranty influence sum pheromone values job row matrix row deciding job place pheromone summation rule modified decision formulas 
ant chooses job place schedule probability job maximizes kj ff delta kj fi probability gamma job chosen probability distribution determined ij kj ff delta ij fi kh ff delta ih fi variations improvements section describe variations improvements aco algorithm 
modified heuristic problem heuristic values formula values larger due deciding jobs place schedule placing jobs start schedule 
consequence heuristic differences jobs general small schedule 
avoid effect modified values ij gamma weighted problem multiplied value right side equation weight job note jobs small weighted processing time high heuristic value deterministic scheduling due dates consider construction schedule unweighted problem smttp 
assume jobs scheduled 
assume sum processing times jobs scheduled far lies due date due date due date smaller larger case easy show optimal schedule jobs due date scheduling job due date long sum processing times scheduled jobs jobs due date optimal schedule jobs ordered increasing processing times 
ants apply deterministic rule possible say ants locally deterministic 
ants switch probabilistic deterministic behaviour 
test instances parameters tested different variants aco algorithms benchmark instances size jobs included library 
benchmark instances generated follows job integer processing time taken randomly interval integer weight taken randomly interval integer due date taken randomly interval delta gamma tf gamma rdd delta gamma tf rdd value rdd relative range due dates determines length interval due dates taken 
tf tardiness factor determines relative position centre interval values tf rdd chosen set 
benchmark set contains instances combination tf rdd values 
unweighted problem smttp benchmark instances ignored different weights 
results compared best known results benchmark instances 
parameters test runs ff fi ae 
number ants generation 
test performed runs instance 
run stopped generations 
opt strategy improve best solution generation differs slightly opt strategy 
pair jobs checked exactly swap jobs improves schedule 
swap improves schedule fixed immediately 
tried exactly swaps generation 
acs smttp short acs denotes algorithm described section new opt strategy described paragraph 
algorithm acs sigma similar acs uses pheromone summation rule described section 
algorithm acs similar acs uses new heuristic section 
algorithm similar acs additionally uses deterministic strategy section scheduling due dates 
algorithms combinations new features denoted acs xyz sigma dg acs sigma uses new heuristic pheromone summation rule 
shortness write acs xyz acs xyz 
experimental results influence pheromone summation rule called sigma rule modified heuristic tested weighted unweighted problem instances 
parameter influence results performed tests 
table shows results 
average total tardiness values aco algorithms compared average total tardiness best known solutions 
average total tardiness instance best solutions 
table shows acs sigmah performed better acs acs sigma performed better acs holds cases 
cases difference total tardiness values compared best known solutions lower aco algorithm sigma rule acs sigmah compared acs 
aco algorithms sigma rule instances better total tardiness counterparts sigma rule times 
differences total tardiness values compared best known values generations shown 
best solution acs sigmah average generations seconds mhz pentium ii processor 
table shows aco algorithms modified heuristic performed cases better counterparts heuristic 
advantage modified heuristic smaller acs sigmah smaller difference optimal total tardiness acs sigma compared smaller difference 
table 
influence pheromone summation rule new heuristic solution quality 
total tardiness average difference total tardiness best solutions average test runs instances runs instance better comparisons acs sigmah acs respectively acs sigma acs number instances smaller average total tardiness average instances runs instance 
weighted acs sigmah acs acs sigma acs total tardiness better table shows results unweighted problem smttp 
results compared average best total tardiness values unweighted instances 
similarly weighted problem cases aco algorithms sigma rule better counterparts sigma rule 
modified heuristic performed better cases heuristic 
opt strategy significantly influences quality solutions compared acs sigmah acs opt strategy 
results table table smttp 
case acs sigmah performed significantly better acs unweighted case 
case acs slightly better average total tardiness acs sigmah difference acs acs sigmah 
hand acs sigmah instances better solutions acs instances acs sigmah better solutions acs acs performed better acs sigmah instances 
fig 

average difference total tardiness best solutions generations 
acs sigmah acs acs sigma acs table 
influence pheromone summation rule new heuristic solution quality smttp 
total tardiness average difference total tardiness best solutions average test runs instances runs instance better table 
unweighted acs sigmah acs acs sigma acs total tardiness better table 
influence pheromone summation rule new heuristic solution quality opt 
total tardiness table better table comparison acs sigmah acs 
pt weighted acs sigmah acs total tardiness better table 
influence pheromone summation rule new heuristic solution quality smttp opt 
total tardiness table better table comparison acs sigmah acs 
pt unweighted acs sigmah acs total tardiness better influence deterministic strategy scheduling due dates smttp minor influence results unweighted benchmark instances library 
reason instances small gaps due dates 
deterministic strategy come play rarely 
created new test instances due dates large gap 
changed problem instances library follows 
jobs ordered due dates due dates jobs set due date job 
average best total tardiness values modified instances 
table shows acs performed better acs sigmah acs hd performed better acs 
acs algorithm profit deterministic scheduling due dates 
table 
influence deterministic strategy due dates solution quality smttp problem instances modified due dates 
total tardiness table better table comparison acs sigmah acs 
unweighted acs sigmah acs acs acs hd total tardiness better introduced new method pheromone values ant colony optimization aco algorithm single machine total weighted tardiness problem 
aco algorithm pheromone summation rule gives better solutions benchmark counterpart summation rule 
holds unweighted total tardiness problem 
proposed new heuristic ants searching solution 
unweighted problem shown aco algorithm profit ants switch deterministic behaviour case optimal decisions standard probabilistic behaviour 

bauer bullnheimer hartl strauss ant colony optimization approach single machine total tardiness problem proceedings congress evolutionary computation cec july washington usa 

colorni dorigo maniezzo trubian ant system job shop scheduling belgian journal operations research statistics computer science 

potts van de velde iterated dynasearch algorithm single machine total weighted tardiness scheduling problem submitted informs journal computing 

potts van local search heuristics single machine total weighted tardiness scheduling problem informs journal computing 

dorigo di caro ant colony optimization meta heuristic corne dorigo glover eds new ideas optimization mcgraw hill 

dorigo gambardella ant colony system cooperative learning approach travelling salesman problem ieee trans 
evolutionary comp 

dorigo maniezzo colorni ant system optimization colony cooperating agents ieee trans 
systems man cybernetics part 

du 
leung minimizing total tardiness machine np hard mathematics operations research 

forsyth wren ant system bus driver scheduling report university leeds school computer studies 

lawler pseudopolynomial algorithm sequencing jobs minimize total tardiness annals discrete mathematics 

middendorf ant system shortest common supersequence problem corne dorigo glover eds new ideas optimization mcgraw hill 

potts van single machine tardiness sequencing heuristics iee transactions 
stutzle ant approach flow shop problem proc 
th european congress intelligent techniques soft computing vol 
verlag mainz aachen 

ms ic ac uk html 
