space time trade offs hash coding allowable errors burton bloom computer usage newton upper falls mass trade offs certain computational factors hash coding analyzed 
paradigm problem con sidered testing series messages membership set messages 
new hash coding methods examined compared par ticular conventional hash coding method 
computational factors considered size hash area space time required identify message set reject time allowable error frequency 
new methods intended reduce amount space required contain hash coded information associated conventional methods 
reduction space accomplished exploiting possibility small fraction errors commission may tolerable applications particular applications large amount data involved core resident hash area consequently feasible conventional methods 
applications envisaged performance improved smaller core resident hash area conjunction new methods necessary secondary time consuming test catch small fraction errors associated new methods 
example discussed illustrates possible areas application new methods 
analysis paradigm problem demonstrates lowing small number test messages falsely identified members set permit smaller hash area increasing reject time 
key words phrases hash coding hash addressing scatter storage searching storage layout retrieval trade offs retrieval efficiency storage efficiency cr categories conventional hash coding hash area organized cells iterative pseudorandom computational process generate set messages hash addresses empty cells messages stored 
messages tested similar process part performed author affiliated computer america cambridge massachusetts 
iteratively generating hash addresses cells 
con tents cells compared test mes sages 
match indicates test message member set empty cell indicates opposite 
reader assumed familiar similar conventional hash coding methods 
new hash coding methods introduced suggested applications great majority messages tested belong set 
applications appropriate consider unit time called reject time average time required classify test message set 
furthermore contents cell general recognized matching test message examining part message appropriate assumption introduced concerning time required access bits hash area 
addition computational factors reject time space hash area size considers third computational factor allowable fraction errors 
shown allowing small number test messages falsely identified members set permit smaller hash area increasing reject time 
practical applications reduction hash area size may difference maintaining hash area core processed quickly having put slow access bulk storage device disk 
methods reducing hash area size allowing errors introduced 
trade hash area size fraction allowable errors analyzed method resulting space time trade offs 
reader note new methods intended alternatives conventional hash coding meth ods application area hash coding cur rently symbol table management 
intended possible exploit bene fits hash coding techniques certain areas con error free methods suffer need hash areas large core resident consequently infeasible 
order gain substantial reductions hash area size introducing excessive reject times error free performance associated conventional methods sacrificed 
application areas error free performance necessity new methods applicable 
sample application type application allowing errors expected permit useful reduction hash area size may characterized follows 
suppose program perform computational process large number distinct eases 
suppose great majority cases process simple small communications acm volume number july difficult identify minority process cated 
useful hash code identifiers minority set cases case proc easily tested membership minority set 
particular case rejected hap pen time simple process 
case rejected subjected follow test determine member minority set allowable error 
allowing errors kind hash area may small procedure practical 
example type application consider program automatic hyphenation 
assume simple rules properly percent english words dictionary lookup re quired percent 
suppose dictionary big fit available core memory kept disk 
allowing words falsely identified belonging percent hash area percent small fit core 
allowable error occurred test word disk simple rules 
needless disk access rare occurrence frequency related size core resident hash area 
sample application analyzed detail 
conventional hash coding method point departure review conventional hash coding method errors permitted 
assume storing set messages bits long 
organize hash area cells bits extra bit cell flag cell empty 
purpose message treated bit object bit set 
storing procedure fol lows generate pseudorandom number called hash address say manner de message consideration 
check kth cell see empty 
store message kth cell 
continue generate additional hash addresses empty cell message stored 
method testing new message membership similar storing message 
sequence hash addresses generated random number generation technique occurs 

cell stored identical message tested 
case new message belongs set said accepted 

empty cell 
case new message belong set said rejected 
hash coding methods allowable errors method derived natural way con error free method 
hash area organ ized cells cells smaller con taining code entire message 
code generated message size depends permissible fraction errors 
intuitively see cell size increase allowable fraction errors gets smaller 
fraction errors suf small approximately cells large contain entire message re errors 
represents allowable fraction errors assumed 
having decided size cell say chosen expected fraction errors close smaller hash area organized cells bits 
message coded bit code necessarily unique codes stored tested manner similar conventional error free method 
bit code set 
codes unique original messages errors commission may arise 
comp gets away conventional concept organizing hash area cells 
hash area considered individual addressable bits addresses 
assumed bits hash area set 
message set stored hash coded number distinct bit addresses say ad 
bits addressed ad set 
test new message sequence bit addresses say 
ad generated manner storing message 
bits new message accepted 
bits zero message rejected 
intuitively seen point diminishing returns larger smaller expected fraction errors 
point diminishing returns occurs increasing causes fraction bits hash field grow large 
increased priori likelihood bit accessed outweighs effect adding additional bit tested half bits hash field half shown 
consequently hash field size minimum possible expected fraction errors method precludes error free performance possible modifying method small allowable fraction errors computational factors allowable fraction errors 
factor respect size hash area reduced permitting messages falsely identified members set messages 
repre volume number july communications acm sen fraction errors na nt number messages message space accepted members set number messages set nt total number distinct messages message space 
space 
basic space factor number bits hash area 
analyzing effect time factor changing value suitable normalized measure space factor introduced 
normalized measure separate effects time due number messages message set allowable fraction errors effects time due size hash area 
separation effects permit clearer picture space time trade offs 
time 
time factor average time required reject message member set 
measuring factor unit time required calculate single bit address hash area access addressed bit appropriate test bit contents 
conventional hash coding method test comparison addressed bit hash area corresponding bit message 
method test comparison hash area bit corresponding bit code derived message 
method test simply determine contents hash area bit 
analysis follow assumed unit time methods bits hash area 
time factor measured units called normalized time measure space time trade offs analyzed respect factor 
normalized time measure mean set messages set messages identified correctly falsely members reader note strong assumption time generate successive hash coded bit addresses method assumed time suc increment single hash coded cell address method 
furthermore conventional computers able access memory comparisons chunks bytes words 
size chunk varies machine 
order establish desired mathematical comparisons fixed unit accessibility comparability required simplest single bit unit 
reader wishes analyze comparative performance methods machine unit wishes include effects multiple hash codings message readily done similar method analysis single bit unit 
set messages identified nonmembers mi ith message ti time required reject ith message 
analysis conventional hash coding method hash area bits organized cells bits cells filled messages represent fraction cells empty 
solving yields calculate normalized time measure represents expected number bits tested typical rejection procedure 
equals expected number bits tested nonempty cell accessed abandoned 
hash addressed cell contains message message tested average discovered say bits tested 
procedure effect starts 
represents fraction cells empty probability accessing nonempty cell probability accessing empty cell 
nonempty cell accessed expected number bits tested represents expected number bits tested rejecting nonempty accessed cell represents expected number bits tested procedure repeated 
empty cell accessed bit tested dis cover fact 

order calculate value note con ditional probability bits cell match message tested th bit match cell contains message message tested 
reader remember bit message matches bit nonempty cell consequently exponent case 
expected value approxi mated sum 
equation represents space time trade conventional hash coding method 
communications ofthe acm volume number july analysis method hash area contains bits organized cells bits 
manner analogous conventional method establish equations fraction empty cells 

remains derive relations corresponding ex pected fraction errors terms terms 
message tested member set messages erroneously accepted member sequence hash addresses generated test message contains code say generated test message hash address generated earlier sequence hash address empty cell 
expected fraction test messages members erroneously accepted 
tl log logs logs logs equation represents trade offs computational factors method 
analysis method represent expected proportion bits hash area bits set messages hash stored number distinct bits set message set 

message set falsely accepted bits tested 
expected fraction test messages result errors 
assuming certainly case take log base sides eq 
obtain approxi mately logs log logs 
logs log 
log logs logs derive relationship normalized time measure 
bits tested bits tested xth tested bit 
occurs probability 
approximate value expected value num ber bits tested rejected test message 

logs 

logs logs logs lit equation represents trade offs computational factors method 
comparison methods compare relative space time trade offs methods useful introduce normalized space measure logs 
normalized eliminate influence size set messages allowable fraction errors substituting relation eqs 
gives log logs logs log note 
lim superiority method method seen directly examining graph versus curves eq 
lower bound limit equation eq 
curves illustrate space time trade offs methods assuming fixed value expected fraction errors fixed number messages reader note superiority method method depends assumption constant time address ing accessing testing bits hash area 
result may longer hold effects accessing chunks calculating additional hash coded bit addresses taken account 
volume number july communications acm method increase corresponds de crease fraction bits hash field messages hash coded 
maintain fixed value decrease corresponds increase number bits tested message appro priate adjustment hash area size 
directly proportional hash area size shown eq 

increases correspondingly decreases decrease point diminishing returns reached 
point diminishing returns illustrated smallest 
method ii ii lil ii normalized time measure fig 
means smallest hash area method occurs half bits half 
value corresponding log 
analysis hyphenation sample application section calculate nominal size hash area solving sample automated hyphenation prob lem 
concluded method better method compare conventional method method 
assume words hyphenated program words table expected performance hyphen ation application hash coding method various values allowable fraction errors allowable fraction size hash area dish errors bits saved hyphenated application simple rules 
words require dictionary 
reasonable estimate bits average required represent words conventional hash coding method 
assume time factor acceptable find eq 
hash area bits size 
large practical core contained hash area 
method allowable error fre quency say smallest possible hash area having see eq 
problem solved hash area bits size suitable core hash area 
choice access required disk resident dictionary approximately words hyphen ated approximately percent cases 
constitutes reduction percent number disk accesses required typical conventional ap proach completely disk resident hash area dictionary 
table shows alternative choices value affect size core resident hash area disk accesses saved compared typical conventional approach 
acknowledgments 
author wishes express oliver selfridge helpful sug writing 
received october revised april 
organization symbol tables 
comm 
acm feb 

maurer improved hash code scatter storage 
comm 
acm jan 

morris scatter storage techniques 
comm 
acm jan 
communications acm volume number july 
