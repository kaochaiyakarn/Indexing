challenges prevailing pessimism scalability partial order planning pop algorithms presenting novel heuristic control techniques competitive state art plan synthesis algorithms 
key insight techniques responsible efficiency currently successful planners viz distance heuristics reachability analysis disjunctive constraint handling adapted dramatically improve efficiency pop algorithm 
implement ideas variant ucpop called repop empirical results show addition dominating ucpop repop convincingly outperforms graphplan parallel domains 
plans generated repop tend better generated graphplan state search planners terms execution flexibility 
strides scaling planning centered dominant themes heuristic state space planners exemplified hsp csp planners exemplified graphplan satplan stark contrast planning research years ago efforts focused scaling partial order planners :10.1.1.16.5803:10.1.1.43.7263
despite efforts partial order planners continue extremely slow competitive fastest state search planners 
advances plan synthesis generally mis interpreted establishing state space csp approaches pop approaches 
despite current scale problems partial order planning remains attractive state space csp planning reasons 
commitment inherent partial order planning open planning frameworks 
evidenced fact existing architectures integrating planning execution information gathering scheduling partial order planners 
research supported part nsf iri afosr nasa nag ncc 
david smith malik ghallab austin tate dan weld terry zimmerman srivastava minh ijcai referees critical comments previous drafts 
ucpop repop 
repop source code available eas asu edu repop html 
partial order planning nguyen kambhampati department computer science engineering arizona state university tempe az email rao asu edu smith argues pop frameworks offer promising approach handling domains durative actions temporal resource constraints compared planning approaches 
fact known implementations planning systems capable handling temporal durative constraints including ixtet nasa rax pop algorithms 
simpler planning domains partial order planners search output partially ordered plans offer higher degree execution flexibility 
contrast known state space planners find parallel plans efficiently csp planners graphplan generate restricted class parallel plans see section 
foregoing motivates need improving efficiency pop algorithms 
show insights techniques responsible advances plan synthesis years context state csp planners largely adaptable pop algorithms 
particular novel methods adapting distance heuristics reachability analysis disjunctive constraint processing techniques pop algorithms 
heuristics basis ranking partial plans flaw selection methods 
techniques efficiently enforcing consistency partial plans detecting implicit conflicts resolving 
methods help scale pop algorithms dramatically making competitive respect state space planners preserving flexibility 
empirical studies showing repop version ucpop enhanced ideas perform competitively existing approaches planning domains 
particular repop appears scale better graphplan parallel domains tried 
importantly solutions repop generates generally shorter length provide significantly execution flexibility 
organized follows 
section briefly review basics pop algorithm 
section describes distance heuristics adapted rank partial plans 
section shows unsafe links flaws generalized resolved efficiently 
section reports empirical evaluations techniques described 
section discusses related section summarizes contributions 
background partial order planning consider simple strips representation classical planning problems initial world state goal state set deterministic actions 
action precondition list effect list denoted respectively planning problem involves finding plan executed initial state achieve goal 
tutorial pop algorithms 
provide brief review 
pop algorithms seen searching space partial plans 
partial plan tuple set ground actions set ordering constraints set causal links 
causal link form denotes commitment planner precondition action supported effect action 
set open conditions set unsafe links 
open condition form causal link 
loosely speaking open conditions preconditions actions partial plan achieved current partial plan 
causal link called unsafe exists action consistent 
case said threaten causal link 
open conditions unsafe links called flaws partial plan 
solution plan seen partial plan flaws 
pop algorithm starts null partial plan keeps refining solution plan 
null partial plan contains dummy actions preconditions correspond top level goals problem effects correspond conditions initial state 
null plan causal links unsafe link flaws open condition flaws corresponding preconditions top level goals 
refinement step involves selecting flaw partial plan resolving resulting new partial plan 
flaw chosen open condition action needs selected achieves 
new action action 
sets need updated respect 
secondly flaw chosen unsafe link threatened action repaired promotion adding ordering constraint adding 
efficiency pop algorithms depends critically way partial plans selected search queue strategies select resolve flaws 
section distance heuristics ranking partial plans search queue 
section introduces disjunctive constraint representation efficiently handling unsafe link flaws reachability analysis generalizing notion unsafe links include implicit conflicts plan 
heuristics ranking partial plans choosing plan search queue refinement naturally interested plans lead solution minimum number refinements partial order planners capable handling partially instantiated action instances restrict attention ground action instances 
strictly speaking seen set steps step mapped action instance 
flaw resolutions 
handle unsafe links significantly different way standard ucpop see section remaining category flaws resolved open condition flaws 
consequently way ranking plans search queue estimate minimum number new actions needed resolve open condition flaws 
definition partial plan denote minimum number new actions need added solution plan 
seen number actions executed initial state order achieve set subgoals 
sense similar estimating number actions needed achieve state initial state state search planners significant differences propositions necessarily world state ii set actions achieve conflict set actions causal links :10.1.1.16.5803
known heuristic estimating involves simply counting number open conditions partial plan 
heuristic open conditions heuristic estimate admissible informed domains treats open condition equally 
particular ineffective open conditions require actions achieve 
closer estimate function insisting admissibility 
need take better account subgoal interactions 
accounting negative interactions estimating tricky complicated fact subgoals may state 
start ignoring negative interactions 
immediate consequences set unsafe links empty 
ii actions needed achieving set subgoals conflicts set actions causal links 
iii subgoal achieved initial state untrue 
consequences matter subgoals necessarily world state minimum number actions needed achieving set subgoals temporal ordering minimum cost achieving state comprising subgoals 
foregoing justifies adaptation heuristic estimators ranking goodness states state search planners 
early heuristic estimators state search ignore negative interactions stronger assumption subgoal independence :10.1.1.16.5803
ones account positive interactions subgoals ignoring negative interactions 
class heuristics focus partial order planning 
specifically account positive interactions exploit ideas estimating cost achieving set subgoals serial planning graph 
specifically build planning graph starting initial state 
index level planning graph proposition appears index level propositions appear 
proposition assume readers familiar planning graph data structure graphplan algorithm :10.1.1.43.7263
possibly proposition achieved execution 
action planning graph achieves level achieve adding plan 
changes set goals achieved express cost terms cost 
strictly smaller recursively applying equation right hand side eventually express terms zero costs actions 
process quite efficient number applications bounded heuristic relax heuristic computed recurrence relation 
heuristic estimate plans search queue ranked evaluation function parameter increase greediness heuristic search set default 
enforcing consistency partial plans consistency partial plan ensured handling unsafe links 
section describe ways improving phase 
involves posting disjunctive constraints resolve unsafe links 
second involves detecting implicit conflicts unsafe links reachability analysis 
disjunctive representation ordering constraints normally unsafe link conflict action resolved promotion demotion splitting current partial plan partial plans constraint constraint 
problem premature splitting single failing plan gets unnecessarily multiplied descendant plans poisoning search queue significantly 
better idea proposed resolve unsafe link posting disjunctive ordering constraint captures promotion demotion possibilities incrementally simplify constraints propagation techniques 
way detect failing plans get selected refinement 
specifically unsafe causal link conflict action resolved simply adding disjunctive ordering constraint plan 
procedure simplifying disjunctive orderings 
open condition selected resolved adding new action reusing action partial plan add new ordering constraint followed repeated application constraint propagation rules false propagation rules done part pop algorithm ensure transitive consistency ordering constraints 
third rule unit propagation rule ordering constraints 
propagation reduces disjunction detects infeasible plans ahead time 
open conditions established disjunctive constraints left plan remaining disjunctive constraints split search space 
detecting resolving implicit conflicts reachability analysis unsafe link detection resolution steps pop algorithm meant enforce consistency partial plan times weak detect implicit inconsistencies 
particular procedure assumes link threatened action effect 
effect precondition legal state true 
detecting resolving implicit interactions quite helpful inconsistent partial plans search space 
order implicit conflict detection described need partial information properties reachable states 
interestingly reachability information played significant role scale state space planners motivating development procedures identifying mutex constraints state invariants memos shall henceforth term mutex denote types reachability information 
simple way producing reachability information expand graphplan planning graph structure armed mutex propagation procedure :10.1.1.43.7263
mutexes level graph levels state invariants 
exploiting reachability information check consistency partial plans requires identifying feasibility world states eventual execution partial plan pass 
partial order plans normally explicit state information associated possible provide partial characterization states execution pass 
specifically define general notion cutsets follows definition cutsets pre post cutsets action plan defined set conditions exists link necessarily necessarily pre post cutsets action seen partial description world states hold action 
partial descriptions violate properties reachable states clearly partial plan refined executable solution 
proposition exists cutset contains mutex partial plan provably invalid pruned search queue 
proposition allows detect prune inconsistent plans inefficient wait plan inconsistent 
detecting resolving implicit conflicts essentially active approach prevents partial plan inconsistent proposition 
specifically generalize notion unsafe links follows definition action said conflict causal link consistent contains mutex 
causal link unsafe conflict action partial plan 
notions conflict unsafe link subsume original notions threat unsafe link introduced section implies mutex 
generalized notion unsafe links result detecting larger number implicit conflicts unsafe links partial plan 
implicit conflicts detected resolved posting disjunctive orderings described previous subsection 
shall see combination disjunctive constraints detection implicit conflicts reachability information leads quite robust improvements planning performance 
empirical evaluation implemented techniques introduced top ucpop popular partial order planning algorithm 
call resulting planner repop 
mentioned section ucpop repop ground action instances deal variable binding constraints 
ucpop repop lifo order open condition flaws selected resolution 
empirical studies compare repop ucpop graphplan represent currently popular approaches csp search state space search plan synthesis :10.1.1.43.7263
planners written lisp 
case graphplan lisp implementation original algorithm enhanced ebl capabilities 
state art heuristic regression state search planner shown significantly faster hsp :10.1.1.16.5803
empirical studies conducted mhz pentium iii mb ram running linux 
test suite problems taken benchmark planning domains literature 
including gripper rocket world blocks world logistics parallel domains admit solutions loosely ordered steps grid world travel world admit serial solutions 
efficiency synthesis table report total running times repop algorithm including preprocessing time computing mutex constraints bilevel planning graph structures 
table shows re pop exhibits dramatic improvements base planner ucpop gripper logistics rocket domains parallel domains instance repop able comfortably generate plans actions logistics gripper domains feat significantly reach partial order planners 
interesting comparison repop non partial order planners 
parallel domains repop manages outperform graphplan 
repop trails state search planners planners generate serial plans 
despite impressive performance repop parallel domains remains ineffective serial domains including grid puzzle travel world admit totally ordered plan solutions 
suspect part reason may inability heuristics adequately account negative interactions 
normal open conditions heuristic better relaxed heuristic problems 
may possible commitment strategies employed pop algorithms burden serial domains eventually actions need ordered respect 
matter domains pop algorithms supposed offer advantages parallel domains planner perspective actions durations making serial parallel distinction moot want solution output planner offer degree scheduling flexibility 
plan quality evaluated quality plans generated repop plan quality seen important issue favoring pop algorithms 
quantify quality plans generated consider metrics cumulative cost actions included plan ii minimum time needed executing plan iii scheduling execution flexibility plan 
actions uniform cost action cost equal number actions plan 
table shows re pop produces plans lower action cost compared graphplan problem rocket ext 
measure minimum execution time terms makespan plan loosely defined minimum number time steps needed execute plan possibility concurrent execution consideration 
makespan plans produced graphplan just number steps plan makespan plans produced state space planners equal number actions plan 
partially ordered plan generated repop makespan simply length longest path specifically earliest start time step instantaneous action 
compute start initializing repeatedly update fixpoint rule 
table shows solution plans generated repop highly parallel makespans plans significantly smaller total number actions 
graphplan solutions smaller makespans problems expense having substantially larger number actions 
parallel plan generated graphplan inf inf partially ordered plan example illustrating execution flexibility partially ordered plans graphplan parallel plans 
measure execution flexibility plan terms number actions plan precedence relations 
higher measure higher number orders plan executed scheduled 
illustrates parallel plan partially ordered plan generated graphplan repop respectively 
plans actions makespan value noticeably flexible problem ucpop repop graphplan time time flex time flex time gripper gripper min gripper gripper rocket ext rocket ext logistics logistics logistics logistics bw large bw large bw large travel simple grid simple grid simple grid table time shows total running times cpu seconds includes time required preprocessing 
dashed entries denote problems solution hours mb 
parenthesized entries blocks world travel grid domains indicate performance repop heuristic 
action cost time cost respectively solution plans 
flex execution flexibility measure plan see 
implies ordering constraints 
capture flexibility define action number actions plan direct indirect ordering constraint 
defined average value actions plan 
easy see serial plan consequently example easy see executed ways table reports value solution plans 
seen plans generated repop substantially larger average values graphplan blocks world logistics similar values gripper 
graphplan produces flexible plan problem rocket domain 
problem ucpop ce hp hp ce gripper gripper gripper gripper rocket ext rocket ext logistics logistics logistics logistics table ablation studies evaluate individual effectiveness new techniques heuristic ranking partial plans hp consistency enforcement ce 
entry shows number partial plans generated expanded 
note repop essentially ucpop hp ce 
means solution generating nodes 
discussion plan quality mention possible post processing techniques improve quality plans produced state space csp planners 
post processing addition np hard general provide satisfactory solution online integration planner modules schedulers executors 
ablation studies evaluate individual effectiveness acceleration techniques viz heuristic functions ranking partial plans hp consistency enforcement ce table shows number partial plans generated expanded search techniques added original ucpop 
restrict focus parallel domains repop offer significant advantages 
logistics rocket domains heuristic accounts largest fraction improvement ucpop 
interestingly fails help scale ucpop small problems gripper domain 
search spends time exploring inconsistent partial plans failing realize left right gripper carry ball 
problem alleviated consistency enforcement ce techniques detection resolution implicit conflicts conflict 
result re pop comfortably solve large gripper problems gripper 
consistency enforcement techniques reachability analysis disjunctive constraint representation appear complement 
instance problem logistics reachability analysis heuristic solution generating nodes 
disjunctive representation number generated nodes reduced times 
related previous research efforts aimed accelerating partial order planners 
techniques approach current level performance offered repop important ideas separately introduced previous efforts related complementary techniques 
ixtet uses distance heuristic estimates select possible resolutions open condition flaw evaluation technique provided 
interesting note ixtet distance heuristics precedes independent re discovery context state search planners mcdermott bonet geffner :10.1.1.16.5803
bylander describes relaxation heuristic linear planning pop effective 
idea postponing resolution unsafe links posting disjunctive constraints pursued smith peot kambhampati yang 
shows effectiveness idea enhanced significantly generalizing notion conflicts include indirect conflicts 
notion action proposition mutexes defined smith weld temporal graphplan related notion indirect conflicts introduced section 
significant amount flaw selection strategies order open condition flaws selected resolved may fruitfully combined repop 
techniques recognizing suspending recursion looping search may useful addition repop 
successes scaling classical planning csp state space search approaches generally mis interpreted side scalability partial order planning 
consequently years pop paradigm despite known flexibility advantages 
challenged trend demonstrating techniques responsible effectiveness state search csp approaches exploited improve efficiency partial order planners dramatically 
applying ideas distance heuristics disjunctive representations planning constraints reachability analysis achieved impressive performance partial order planner called repop number parallel planning domains 
empirical studies show repop convincingly outperform graphplan parallel domains plans generated repop execution flexibility 
interesting reasons 
real world planning domains tend loose ordering actions 
secondly ability generating loosely ordered plans important hybrid methods involve line integration planning scheduling 
avenues extending 
partial plan selection heuristics take negative interactions account 
may reason unsatisfactory performance repop serial domains 
way account negative interactions considering currently involves partial state information provided pre post cutsets actions 
suggests cost achieving partial states quantified terms level planning graph propositions comprising states mutex relations 
idea pursuing ary state invariants detected detect resolve indirect conflicts plan 
ambitious extension pursuing involves considering general versions pop algorithms including handle partially instantiated actions actions conditional effects durations 
backstrom 
computational aspects reordering plans 
jair 
vol 

pp 

blum furst :10.1.1.43.7263
fast planning planning graph analysis 
artificial intelligence 


bonet geffner :10.1.1.16.5803
planning heuristic search new results 
proc 
ecp 
bylander 
linear programming heuristic optimal planning 
proc 
aaai 
fox long 
automatic inference state invariants tim 
jair 
vol 


ghallab 
representation control ix 
proc 
aips 
gerevini schubert 
inferring state constraints domain independent planning 
proc 
aaai 
geffner 
admissible heuristics optimal planning 
proc 
aips 
hoffman nebel 
ff planning system fast plan generation heuristic search 
submitted 
johnson morris muscettola rajan 
planning interplanetary space theory practice 
proc 
aips 
joslin pollack 
cost flaw repair plan refinement strategy partial order planning 
proc 
aaai 
joslin pollack 
passive active decision postponement plan generation 
proc 
rd european conf 
planning 

gerevini schubert 
accelerating partial order planners techniques effective search control pruning 
jair 
kautz selman 
pushing envelope planning propositional logic stochastic search 
proc 
aaai 
kambhampati knoblock yang 
planning refinement search unified framework evaluating design tradeoffs partial order planning 
artificial intelligence 
kambhampati yang 
role disjunctive representations constraint propagation refinement planning proc 
kr 
kambhampati 
planning graph dynamic csp exploiting ebl csp techniques graphplan 
jair 
vol 

pp 


long fox 
efficient implementation plan graph stan 
jair 
mcallester rosenblitt 
systematic nonlinear planning 
proc 
aaai 
mcdermott 
regression graphs control search planning 
artificial intelligence 
nguyen kambhampati 
extracting effective admissible state space heuristics planning graph 
proc 
aaai 
nguyen kambhampati 
planning graph basis deriving heuristics plan synthesis state space csp search 
appear artificial intelligence 
peot smith 
threat removal strategies planning 
proc 
aaai 
smith peot 
suspending recursion causal link planning 
proc 
aips 
smith frank jonsson 
bridging gap planning scheduling 
knowledge engineering review 

smith weld 
temporal planning mutual exclusion reasoning 
proc 
ijcai 
weld 
commitment planning 
ai magazine 
