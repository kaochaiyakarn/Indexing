card bytecode veri cation java card xavier leroy trusted logic rue du versailles france xavier leroy trusted logic fr 
presents novel approach problem bytecode veri cation java card applets 
owing low memory requirements veri cation algorithm rst embedded smart card increasing tremendously security post issuance downloading applets java cards 
java card architecture smart cards bring major innovations smart card world rst java cards run multiple applications communicate shared objects second new applications called applets downloaded card post issuance 
features bring considerable exibility card raise major security issues 
malicious applet downloaded card mount variety attacks leaking con information outside pins secret cryptographic keys modifying sensitive information balance electronic purse interfering honest applications card causing malfunction 
security issues raised applet downloading known area web applets generally mobile code distributed systems 
solution put forward java programming environment execute applets called sandbox insulation layer preventing direct access hardware resources implementing suitable access control policy 
security sandbox model relies components 
applets compiled machine executable code bytecode virtual machine 
virtual machine manipulates higherlevel secure abstractions data hardware processor object memory addresses 

applets direct access hardware resources serial port carefully designed set api classes methods perform suitable access control performing interactions outside world behalf applet 
performed author full time trusted logic 
currently inria rocquencourt domaine de voluceau le chesnay france part time consultant trusted logic 

downloading bytecode applet subject static analysis called bytecode veri cation purpose sure code applet typed attempt bypass protections performing ill typed operations run time forging object integers illegal casting object class calling directly private methods api jumping middle api method jumping data code 
java card architecture features components sandbox model applets executed java card virtual machine java card runtime environment provides required access control particular rewall 
component bytecode veri er missing shall see bytecode veri cation done web applets complex expensive process requiring large amounts working memory believed impossible implement smart card 
approaches considered lack card bytecode veri cation 
rst rely card tools trusted compilers converters card bytecode veri ers produce typed bytecode applets 
cryptographic signature attests typedness applet card downloading restricted signed applets 
drawback approach extend trusted computing base include card components 
cryptographic signature raises delicate practical issues deploy signature keys 
legal issues takes liability buggy applet produced faulty card tools 
second workaround perform type checks dynamically applet execution 
called defensive virtual machine approach 
virtual machine computes results bytecode instructions keeps track types data manipulates performs additional safety checks instruction 
drawbacks approach dynamic type checks expensive terms execution speed memory requirements storing extra typing information takes signi cant space 
dedicated hardware checks faster reduce memory requirements 
approach challenge popular belief card bytecode veri cation unfeasible 
describe novel bytecode veri cation algorithm java card applets simple low memory requirements implemented smart card 
distinguishing feature algorithm rely card bytecode transformations purpose facilitate card veri cation 
auxiliary consistency checks cap le structure described lack space bytecode veri er described heart trusted logic card cap le veri er 
product rst currently kind allows secure execution run time speed penalty non signed applets java cards 
remainder organized follows 
section reviews traditional bytecode veri cation algorithm analyzes suitable card implementation 
section presents bytecode veri cation algorithm addresses issues traditional algorithm 
section describes card code transformations transform correct applet equivalent applet passes card veri cation 
section gives preliminary performance results 
related discussed section followed concluding remarks section 
traditional bytecode veri cation section review traditional bytecode veri cation algorithm developed sun gosling yellin 
bytecode veri cation performed code non method class applet 
consists execution code method performed level types values normal execution 
veri er maintains stack types array associating types registers local variables 
stack array registers parallel virtual machine contain types values 
straight line code assume rst code method straight line branches exception handling 
veri er considers instruction method code turn 
instruction checks stack execution instruction contains entries entries expected types instruction 
simulates ect instruction stack registers popping arguments pushing back types results case store instructions updating types registers re ect stored values 
type mismatch instruction arguments stack ow ow causes veri cation fail applet rejected 
veri cation proceeds instruction method reached 
stack type register types initialized re ect state stack registers entrance method stack empty registers holding method parameters argument corresponding types descriptor method registers corresponding uninitialized registers special type corresponding unde ned value 
dealing branches branch instructions exception handlers introduce forks execution continue paths joins paths join instruction ow control 
deal forks veri er general determine path followed run time 
propagate inferred stack register types possible successors forking instruction 
joins harder instruction target branches exception handlers reached paths veri er sure types stack registers paths agree stack height compatible types stack entries registers 
sun veri cation algorithm deals issues manner customary data ow analyses 
maintains data structure called dictionary associating stack register type program point target branch exception handler 
analyzing branch instruction instruction covered exception handler updates type associated target branch dictionary replacing upper bound type previously dictionary type inferred instruction 
upper bound types smallest type assignment compatible types 
causes dictionary entry change corresponding instructions successors re analyzed xpoint reached instructions analyzed changing dictionary entries 
see section detailed description 
performance analysis veri cation straight line pieces code ecient time space 
instruction analyzed exactly analysis fast approximately fast executing instruction virtual machine 
concerning space stack type set register types need stored time modi ed place analysis 
assuming type represented bytes leads memory requirements bytes maximal stack size number registers method 
practice bytes ram suce 
notice similar amount space needed execute invocation method card ram space execute method space verify 
veri cation presence branches costly 
instructions may need analyzed times order reach xpoint 
experience shows instructions analyzed twice analyzed bad 
real issue memory space required store dictionary 
number distinct branch targets exception handlers method dictionary occupies bytes bytes overhead dictionary entry correspond pc branch target stack height point 
moderately complex method instance leading dictionary size bytes 
large comfortably ram current generation java cards 
storing dictionary persistent memory eeprom flash option veri cation performs writes dictionary updating types contains typically hundreds thousands writes methods writes persistent memory take time ms card veri cation slow 
problems may arise due limited number write cycles permitted persistent memory 
veri cation algorithm intuitions novel bytecode veri cation algorithm describe follows careful analysis shortcomings sun algorithm copy stack type register type stored dictionary branch target 
experience shows dictionary entries quite highly redundant 
particular case stack types stored dictionary entries empty type register dictionary entries 
observations easy correlate way current java compilers 
concerning stack existing compilers stack evaluating expressions store values java local variables stack 
consequently stack empty statement 
branching constructs java language level statements branches generated compiling constructs naturally occur context empty stack 
exception conditional expression generates branch non empty stack 
regards registers java compilers allocate distinct register local variable java source 
register naturally type declaration local variable 
course guarantee code veri er enjoy properties mentioned stack empty branch points registers type method properties hold justi ed optimize bytecode veri er conditions 
way proceed design data structure holding dictionary compact conditions hold 
instance stack empty case represented specially di erential encodings reduce dictionary size register type entries 
decided take radical approach require bytecode accepted veri er requirement stack empty branch instructions popping branch arguments branch target instructions pushing results 
guarantees stack consistent source target branch empty ends 
requirement register type method code 
guarantees types registers consistent source target branch consistent instructions 
avoid rejecting correct code happens satisfy requirements rely general card code transformation transforms correct code equivalent code meeting additional requirements 
transformation described section 
rely fact violations requirements infrequent ensure code transformations minor cause signi cant increase code size 
algorithm additional requirements bytecode veri cation algorithm simple extension algorithm verifying straight line code outlined section 
previously data structure need stack type array types registers 
previously algorithm proceeds examining turn instruction method code order re ecting ects stack register types 
complete pseudocode algorithm fig 

signi cant di erences code veri cation follows 
checking branch instruction popping types arguments stack veri er checks stack empty rejects code 
checking instruction branch target veri er checks stack empty 
instruction jsr target start exception handler checks stack consists entry type return address exception handler class respectively 
ensures requirement 
checking store instruction type stored value top stack store type register stored replaced upper bound previous type register 
way register types accumulate types values stored progressively determining unique type register apply method code requirement 
types registers change type checking store instruction described invalidate typechecking instructions load stored value type checking instructions method body repeated register types stable 
similar xpoint computation sun veri er 
data ow analysis starts previously empty stack type register types corresponding method parameters set types indicated method descriptor 
locals corresponding parameters set 
subtype types supertype types reasons explained section 
global variables nr number registers ns maximal stack size nr array types registers ns stack type sp stack pointer chg ag recording changed 
set sp set types method arg 
set nr set chg true chg set chg false instruction method code order target branch instruction sp previous instruction falls error set sp target jsr instruction previous instruction falls error set retaddr sp handler exceptions class previous instruction falls error set sp cases apply error determine types arguments sp error stack underflow sp subtype ak error set sp sp determine types rm results sp ns error stack overflow set sp rk set sp sp store register number determine type value written register set lub changed set chg true branch instruction sp error verification succeeds fig 

veri cation algorithm correctness veri er formally proved coq theorem prover 
precisely developed mechanically checked proof code passes veri er cause run time type error run type level interpretation defensive 
performance analysis veri cation algorithm low memory requirements code veri cation bytes ram suce hold stack register types 
practice ts comfortably bytes ram 
memory requirements independent size method code number branch targets 
time behavior similar sun algorithm passes instructions method may required experimentally methods need passes rst determines types registers second checks xpoint reached quite need pass registers parameters keep initial type method 
initialization registers sun veri cation algorithm guarantee registers initialized stored 
reason set register types method analyze precisely situation register initialized branch conditional branch 
jvm speci cations require virtual machine initialize non parameter registers entry method 
method reads aload instruction register having stored valid value obtain unspeci ed bit pattern data happens ram location register object 
serious security threat 
ways avoid threat 
verify register initialization reads store statically part bytecode veri er 
rely virtual machine initialize entry method registers method parameters bit pattern representing null object 
way incorrect code perform read write register break type safety instructions operating object test null raise exception appropriate integer instructions operate arbitrary bit patterns breaking type safety 
dynamic check added ret instruction ret register initialized null fail jumping blindly null code address 
clearing registers method entrance inexpensive understanding implementations speci cation require order reduce life time sensitive data stored stack 
summary register initialization rare example type safety property easy inexpensive ensure dynamically virtual machine 
chose ensure statically bytecode veri cation 
bit pattern representing null correct value type short int array types return addresses semantically belongs type subtype types 
assuming initialization null virtual machine semantically correct assign initial type registers parameters veri cation algorithm 
subroutines subroutines shared code fragments built jsr ret instructions compiling try 
construct particular 
subroutines complicate sun style bytecode veri cation tremendously 
reason subroutine called di erent contexts registers di erent types checking type correctness subroutine calls requires veri cation subroutine code polymorphic respect types registers subroutine body section 
requires complementary code analysis identi es method instructions belong subroutines match corresponding jsr ret instructions 
see formalizations approach 
complications potential security holes disappear bytecode veri cation algorithm ensures register type method code ensures method code including subroutines monomorphic respect types registers 
need verify jsr ret instructions special polymorphic way jsr treated regular branch pushes value type return address stack ret treated branch go instruction follows jsr current method 
complementary analysis subroutine structure required 
card code transformations explained section card veri er accepts subset type correct applets code satis es additional requirements stack empty branch points registers unique types 
ensure correct applets pass veri cation compile special java compiler generates jvm bytecode satisfying requirements instance expanding conditional expressions 

statements assigning distinct register local variable 
easier exible applet developers standard java compiler javacard converter choice perform card code transformation compiled code produce equivalent java compiler cap converter cap transformer card veri er applet non defensive vm java source class le cap le transformed cap le veri ed cap le veri ed applet trusted computing base card processing card processing fig 

architecture system compiled code satis es additional requirements pass card veri er see fig 

main transformations performed stack normalization ensure stack empty branch points register reallocation ensure register type 
stack normalization idea underlying stack normalization quite simple original code contains branch non empty stack insert stores fresh registers branch loads registers branch target 
ectively empties stack fresh registers branch restore stack initial state branch 
consider example java statement 
compiles code fragment shown left 
lb lb ifeq lbl ifeq lbl lx lx goto lbl lbl ly goto lbl lbl invokestatic lbl ly lbl invokestatic lx ly lb numbers registers holding result type inference code indicates stack non empty goto lbl contains entry type short 
stack normalization rewrites code shown right number fresh unused register 
goto lbl empties stack lbl restore proceeding invokestatic 
ly lbl falls instruction lbl treat implicit jump lbl insert ly instruction lbl 
allocating fresh temporary registers branch target needing normalization may wasteful 
register reallocation described section able pack variables original registers method code minimizing number registers really required 
lack space omit detailed presentation actual stack normalization transformation 
follows approach outlined extra complications due branch instructions pop arguments stack fact branch instruction needing normalization target branch instruction needing normalization 
register reallocation second code transformation performed card consists re allocating registers change register numbers order ensure requirement register type method code 
achieved splitting registers types distinct registers type 
increase markedly number registers required method 
sophisticated register reallocation algorithm derived known algorithms global register allocation graph coloring 
algorithm tries reduce number registers reusing register possible hold source variables live simultaneously type 
consequently ective reducing handling registers introduced stack normalization transformation left java compiler 
consider example original code left result register reallocation right 
new new astore astore 
original code register types rst hold values type short hold values type transformed code roles register split distinct registers short role role 
parallel reallocation algorithm notices original code register short role register disjoint live ranges type 
registers merged register transformed code 
result number registers stays constant 
register reallocation algorithm essentially identical briggs variant chaitin graph coloring allocator additional type constraints re ecting requirement 
precisely add edges interference graph live ranges principal type guaranteeing assigned di erent registers 
experimental results card transformation table shows results obtained transforming packages sun java card development kit 
package code size bytes resident size bytes registers orig 
transf 
incr 
orig 
transf 
incr 
java lang javacard framework com sun javacard com sun javacard com sun javacard com sun javacard total code size increase caused transformation negligible size method component increases resident size total size components remain card installation increases 
requirements registers globally decreases 
test larger body code version card transformer works java class les java card cap les transformed classes java runtime environment version mbyte jvm code 
results similar code size increases registers decrease 
transformer performs clean optimizations branch tunneling register coalescing purpose reduce introduced transformations 
optimizations quite ective reducing left java compiler resulting code size decreases packages 
similarly packing registers reduces maximal number registers packages 
card veri er preliminary results obtained implementation bytecode veri er running linux pc 
proper card implementation progress position give results concerning implementation 
bytecode veri cation proper ensuring method code type safe written ansi compiles kilobytes intel ia code kilobytes atmel avr code 
proof concept reimplementation hand written st assembly code ts kilobytes code 
addition verifying bytecode methods implementation checks structural consistency cap le components 
cap le format extremely complex chapter cap le consistency checking takes kilobytes intel ia code 
integrating veri er actual java card vm consistency checks redundant checks performed vm useless apply cap le information vm ignores 
programming tricks table driven automata reduce code size consistency checking expense execution speed 
pc implementation veri er running mhz pentium iii takes approximately ms kilobyte bytecode 
extrapolating gure typical byte smartcard processor mhz estimate card implementation take second kilobyte bytecode seconds verify applet size 
notice veri er performs eeprom writes communications speed bene ts linearly higher clock rates ecient processor cores 
concerning number iterations required reach xpoint bytecode veri cation algorithm packages studied contain instructions require calls function analyzes individual instructions 
indicates instruction analyzed times average reaching xpoint 
gure surprisingly low shows perfect veri cation algorithm analyzes instruction exactly faster 
related closely related lightweight bytecode veri cation rose rose kvm architecture 
inspired proof carrying code lightweight bytecode veri cation consists sending code veri ed pre computed stack register types branch target 
veri cation simply checks correctness pre computed types simple variant straight line veri cation inferring xpoint iteration sun veri er 
interest card veri er twofold 
rst xpoint iteration avoided making veri er faster 
mentioned section performance gain obtained modest 
second stack register types branch targets stored temporarily eeprom need updated repeatedly veri cation 
ram requirements veri er similar veri er current stack type register type need kept ram 
problems rose rose lightweight bytecode veri cation 
currently deal subroutines speci cally polymorphic typing subroutines described section 
subroutines part speci cation useful general code sharing device reducing bytecode size 
second issue size certi cate pre computed stack register types accompany code 
experiments indicate straightforward representation certi cates size code 
complex compressed representation certi cates code size 
signi cant free space eeprom required storing temporarily certi cates veri cation large packages 
contrast veri cation technology requires extra eeprom space 
challenged lack precision publications sun veri er researchers published rational reconstructions formalizations formal proofs correctness various subsets sun veri er 
works uential understanding issues uncovering bugs sun implementation veri er generating con dence algorithm 
unfortunately works address subset veri er 
particular proves correctness sun polymorphic typing subroutines presence exceptions 
di erent approach bytecode veri cation proposed posegga re ned 
approach model checking type level interpretation defensive java virtual machine 
problem polymorphic subroutines exceptions expensive time space exponential size method code suited card implementation 
novel bytecode veri cation algorithm described perfectly suited card implementation due low ram requirements 
superior rose rose lightweight bytecode veri cation handles subroutines requires additional eeprom space code size vs lightweight bytecode veri cation 
card bytecode veri cation missing link javacard vision multi application smart cards secure ecient post issuance downloading applets 
believe bytecode veri er crucial enabling technology making vision reality 

briggs cooper torczon 
improvements graph coloring register allocation 
acm trans 
prog 
lang 
syst 


vers un eri eur de bytecode java certi seminar ecole normale sup erieure paris oct nd 

chaitin 
register allocation spilling graph coloring 
sigplan notices 

chen 
java card technology smart cards architecture programmer guide 
java series 
addison wesley 

cohen 
defensive java virtual machine speci cation 
technical report computational logic 

freund mitchell 
type system object initialization java bytecode language 
acm trans 
prog 
lang 
syst 

gong 
inside java platform security architecture api design implementation 
java series 
addison wesley 

gosling 
java intermediate bytecodes 
proc 
acm sigplan workshop intermediate representations pages 
acm 



vandewalle 
facade typed intermediate language dedicated smart cards 
software engineering esec fse volume lncs pages 
springer verlag 

lindholm yellin 
java virtual machine speci cation 
java series 
addison wesley 
second edition 

mcgraw felten 
securing java 
john wiley sons 

necula 
proof carrying code 
popl pages 
acm press 

nipkow 
veri ed bytecode veri ers 
foundations software science computation structures fossacs 
springer verlag 
appear 

posegga vogt 
java bytecode veri cation model checking 
workshop fundamental underpinnings java 


proving soundness java bytecode veri er speci cation isabelle hol 
cleaveland editor tacas volume lncs pages 
springer verlag 

qian 
formal speci cation java virtual machine instructions objects methods subroutines 
alves foss editor formal syntax semantics java volume lncs 
springer verlag 

qian 
standard xpoint iteration java bytecode veri cation 
acm trans 
prog 
lang 
syst 

rose rose 
lightweight bytecode veri cation 
workshop fundamental underpinnings java 

stata abadi 
type system java bytecode subroutines 
acm trans 
prog 
lang 
syst 

sun microsystems 
java platform micro edition technology creating mobile devices 
white 

sun microsystems 
java card runtime environment speci cation 

sun microsystems 
java card virtual machine speci cation 

vigna editor 
mobile agents security 
number lecture notes computer science 
springer verlag 

yellin 
low level security java 
proc 
th world wide web conference pages 
reilly 
