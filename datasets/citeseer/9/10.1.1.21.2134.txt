volume visualization algorithms architectures research proficiency exam frank center visual computing department computer science state university new york stony brook tel email cs sunysb edu www www cs sunysb edu advisor arie kaufman contents volume visualization representation 
display 



volumetric ray tracing 
image quality 



implementation supercomputers 

special purpose hardware 
scope 







div 
ii cube family architectures cube 
skewing 
projection 
implementation 
cube 
cube 
cube 
cube 
em cube 
comparisons scalability 
communication 
quality 
performance 
integration 
outlook 
iii volume visualization prevalence dimensional volumetric data rapidly expanding routinely fields medicine physics geology great benefit 
volumetric data experts able peer inside objects discover features previously inaccessible unknown 
volume visualization concerned representation manipulation display volumetric data 
representation volumetric data field values typically scalars 
spatio temporal data field values typically visualized time varying projections hyper slices dataset 
simplest type volumetric data represent regular cartesian grid scalars quantity point represents point sample field 
representations irregular cartesian grids curvilinear grids unstructured point samples 
representations regular cartesian grids easiest visualize 
voxels quantum unit volumetric data originally considered homogenous blocks material rendered cubes yielding unpleasant images 
voxels came understood point samples continuous field properly sampled sampling theory necessary manipulation projection 
region group voxels termed cell 
sources volumetric data include computed tomography ct magnetic resonance imaging mri positron emission tomography pet ultrasonic imaging confocal microscopy supercomputer simulations geometric models laser scanners depth images estimated stereo disparity 
volumetric data obtained biomedical scanners ct mri typically come form slices regular cartesian grid anisotropy major directions 
typical output supercomputer finite element method fem simulations irregular grids 
raw output ultrasound scan sequence arbitrarily oriented fan shaped slices constitute partially structured point samples 
display volume rendering projection image method commonly display ric data 
emerging methods include holographic displays volumetric scanning devices haptic displays 
volume rendering classified direct indirect depending data transferred alternate representation prior display 
direct volume rendering system computes directly original volume data produce image intermediate representation 
direct rendering explored sec 

indirect volume rendering system transforms data different domain compression boundary representation 
typically data transformed set polygons representing level surface isosurface conventional polygon rendering methods project polygons image 
visualization requirements direct volume rendering tremendous storage bandwidth computational requirements 
example consider small volume byte voxels 
storage requirements mb 
render image real time assumed hz voxel considered frame leading bandwidth requirement mb mb voxel requires approximately instructions shaded composed image leading computational requirement nearly 
requirements capabilities current supercomputers general purpose hardware accelerators considerable latency 
fill need special purpose hardware developed see sec 

direct volume rendering direct volume rendering methods classified object image hybrid order see fig 

object order methods perform main unit unit volume 
example splatting contribution voxel accumulated image plane 
voxels coherently accessed storage order projected non uniformly final image 
image order methods perform unit pixel final image 
access volume data little coherence provide useful algorithmic flexibility ability simulate perspective incorporate surface geometry step shear project slices volume dataset slices projection direction step project image step resample volume dataset step project image volume dataset sampling rays image plane image plane direct volume rendering algorithmic organizations object order volume slices accumulated image plane image order volume sampled image pixel hybrid order volume slices sheared projected base plane projected image plane cube hybrid order volume regularly sampled base plane subsequently projected image plane scene trace reflections avoid unnecessary computation 
example ray casting see sec 

hybrid order methods combine advantages methods including coherence volume access uniformity output image processing order 
direct volume rendering introduced blinn extended max kajiya von herzen provide thorough method transport light volumetric cloud densities may simulated visualized 
blinn method captures effects single radiative scattering light source eye point 
kajiya von herzen extended method include multiple scattering cloud high albedo reflectivity particles 
low albedo approximation light energy source deposited separate light intensity volume rays traced directly view point brightness modulated energy intensity volume 
depth integral computed romberg integration ray 
kajiya von herzen realistic cloud formation model useful testing viability rendering algorithm 
jensen christensen proposed efficient method multiple scattering volume high albedo particles may simulated pass photon map method 
pass photons traced space scattering absorbed volume material bidirectional reflectance distribution function brdf 
initial scattering photons represent secondary global illumination stored absorbed balanced tree data structure 
second rendering pass rendering integral evaluated computed direct illumination component estimated secondary illumination component nearest photons brdf 
levoy method detailing pixel pixel computation clearly displays surfaces inhomogeneous media field data high frequency content 
ray samples taken length appropriate filter 
classified data content color opacity users expectations data 
levoy proposed opacity transfer function enables accurate display surfaces volume dataset 
function sets opacity inversely proportional distance desired iso value samples near iso value visible 
areas low gradient voxels close set visible 
areas higher gradient function modified greater range values near iso value visible 
intent maintain minimum thickness visible surface avoid visual holes 
samples depth integrated order simulate overlaying materials 
method widely adapted volume rendering surfaces described sec 

straightforward method density volume segmented interesting components color opacity shaded transformed projected final image 
allows single scattering approximation simplicity allows rapid implementation 
method described generates series volumes leading final projection method implemented scanline scanline pixel pixel intermediate volume copies 
computed pixel pixel method classified ray casting see sec 

details efficient affine transformation method resampling volume eye space 
direct method concurrently upson keeler 
provided image object order variations 
unique efficiency object order variation requires image sized intermediate buffer 
operates similar splatting processes cell accumulating image incrementally 
sets apart splatting calculates color pixel accurately cell calculating single color voxel 
cell projected screen locate extent affected pixels 
pixel ray traced current cell gray valued density assumed take form function xy xz ya xyz coefficients derived values voxels comprising cell 
possible analytically solve ray density function trilinear interpolation efficient number sample points small 
sample points values opacity color shading processed parallel vector architecture 
samples accurately depth integrated quadrature method 
shirley developed similar accurate method irregular grids utilize hardware acceleration cell projection 
direct volume rendering thoroughly developed linear transport theory model light interaction 
idea rays light analytically traced inhomogeneous amorphous media considers scattering scattering emission absorption color shifting phase shifting charged particle 
direct volume rendering considered approximation model 
model notion virtual particles determined probe interact volume model laws pattern particles wavelength color provides meaningful information user 
indirect volume rendering methods exist indirect volume rendering defined visualizing volumetric dataset transferring data different domain rendering directly new domain 
indirect methods chosen particular form hardware acceleration speed advantage 
direct methods generally considered accurate albeit slower 
common indirect volume rendering method marching cubes algorithm develops surface representing level set 
method traverses entire volume incrementally starting single cell interior region voxel neighborhood contains iso value interest 
cell iso surface approximated set polygons 
cube edge location intersection iso surface interpolated exists 
polygons generated locations vertices finite set patterns 
set polygons drawn conventional polygon rasterization techniques usually implemented hardware 
method generates large number triangles useless new selected 
dividing cubes method avoids generating large set polygons subdividing surface containing cells recursively cell fills single image pixel view repeated new viewpoint 
frequency compression domain methods possess great speed advantages suffer poor image quality 
frequency domain method transforms volume fourier domain fourier transform simple projection extracting oblique slice dataset parallel image plane passing center transformed volume 
desired slice image transformed back spatial domain 
initial transformation new projections may generated complexity log 
resulting image simple line integral intensity values projection pixel 
main problem image depth information lost 
chiueh describe method render subcubes volume directly compressed fourier domain 
attempt recover depth information depth information sub cube depth cueing resulting image quality poor 
wavelet domain extracts spatial frequency information volume stores efficient hierarchy 
domain ray tracing splatting progressively visualize volume projection 
indirect methods forego attempts realism opt preview quality rendering gives sense shape primarily rapid interaction 
proposed method arbitrary iso surface display storing data value position 
shading applied color depth ordering effect ray position information inconsequential 
voxels accumulated image order 
uses fact quickly select voxels certain value interval simply iterating sorted list voxels minimum maximum value projecting image form splatting 
projection accomplished hardware interaction dataset responsive understanding facilitated 
saito organized dataset efficient access projected selected subset voxels image 
projection set short lines direction indicated additional information gradient direction 
volumetric ray tracing ray tracing method generate projected images scenes rays light traced backward eye point scene various light sources 
ray tracing pinhole camera geometry assumed rays shot image plane pinhole scene 
intersections scene objects computed sorted time intersection 
nearest intersection object sampled color determined local lighting model including ambient diffuse contributions 
surface properties reflectivity secondary rays spawned intersection account reflections 
reflections modify direction ray perfect mirror 
modify direction ray snell law 
contribution ray final pixel determined surface properties 
typically contributions local color reflected ray color ray color sum unity 
process continues recursively contribution ray threshold final pixel color summed entire process repeated remaining pixel 
ray casting ray tracing considering second generation rays called ray casting 
ray casting commonly employed render volumes back front scanline approach levoy 
widely approach rays cast volume view point ray pixel 
samples volume taken evenly spaced intervals ray 
sample converted color opacity transfer function 
samples shaded local lighting model similar described 
samples composited porter duff operator 
colors opacities composition cf cout cf combined opacity back rendering single pixel described mathematically ds dt set maximum extents volume pixel projected ray 
sum emission scattering scattering absorption point field 
absorption field ray 
term provides correct optical depth 
typically integral computed discrete segments evaluated image quality nx ci improve image quality sampling rates image object space increased 
example shooting rays pixel averaging results simple way increase image quality 
better method employs shooting rays weighted gaussian bicubic spline function 
similarly sampling rate ray increased avoid aliasing 
nyquist sampling theorem sampling rate twice highest frequency order accurately reconstruct image 
linear transfer function necessary sample volume twice voxel 
assuming bit gray voxel values containing levels nonlinear transfer function may contain high frequencies necessary sample volume times voxel depending frequency content transfer function 
reduce requirements volume transfer function 
addition higher order interpolation derivative filters may 
ller classify errors point sampling filters volume rendering 
trilinear interpolation results blurred aliased function value estimations 
central difference filter gradient estimation results loss fine details 
describe optimal cubic filter interpolation derivative estimation 
algorithmic optimizations algorithmic optimizations available speed ray casting process 
space provides tremendous benefits considering occupied areas volume rest 
volumes visible portion small percentage actual volume optimization greatly increases efficiency algorithm 
similarly early ray termination allows ray finish color sufficiently established 
typically upper threshold placed opacity accumulated ray traverses volume 
limit reached ray terminated computation significantly improve image 
optimizations effect sampling volume locations affect image 
closely related optimization efficient traversal homogenous regions 
homogenous regions volume contain exactly material region computed efficiently knowledge 
repeatedly compositing samples times opacity sample modified single composition achieves effect 
introduce slice approach ray tracing substantially improves coherence efficiency 
slices required memory time called slab 
adaptive projected area screen pixel larger square linear sampling rate ensuring adequate sampling images volume resolutions 
pyramid encoding borrowing idea texture mapping volumes pyramid encoded mip map short latin meaning things small place pyramid generated computed filtered versions original volume varying resolutions successive level having half previous level linear dimension 
encoding allows sampling occur predefined locations ray varying effective filter sizes computed linear interpolation appropriate resolution levels 
increasing number rays match voxel resolution fixed number rays cast volume represented appropriate resolution ray 
particularly useful perspective projections projected size pixel ray increases traversal 
benefit ray casting complexity reduced log image dimension dataset dimension 
mip maps suffer problems 
mip map computed raw density information non linear transfer function incorrect original dataset resolution levels computing linear function original data 
example consider transfer function consisting colored regions skin muscle bone low medium high density values respectively 
resampled low resolution part volume composed skin bone represented average low high densities medium density 
medium density incorrectly interpreted muscle 
color opacity density rectify situation method suffers problems 
instance red ball hidden opaque blue wall viewed direction image completely blue opposite direction partially red 
color opacity filtered lower resolution red ball merged blue wall resulting image magenta wall incorrectly visible directions 
better solution provide versions low resolution dataset showing just wall showing ball wall 
volumetric global illumination ray tracing evolved include higher order effects diffuse inter reflections surfaces motion blur depth field effects 
ray tracing extended include interaction light volume densities 
kajiya von herzen accounted diffuse inter reflections caused multiple scattering light volume shadows cast light sources 
depth field successfully enhance volume rendering 
discrete ray tracing efficiently generates realistic images raster ray tracing rrt method developed yagel cohen kaufman rrt method casts discrete rays volume efficient volume traversal arithmetic spawning secondary rays opaque voxels approximation volumetric global illumination 
kaufman accounted reflections light rays iso surfaces volume diffuse inter reflections modification zonal radiosity method 
method produces accurate images complexity volumetric radiosity remains high 
unified various approaches global illumination surfaces volumes 
technique considers scene elements hierarchy higher order scattering elements 
example groups neighboring surface elements clustered single scattering element directionally varying absorption emission reflection properties 
scene elements exchange energy desired level accuracy efficient computation 
implementation supercomputers researchers proposed volume rendering algorithms suitable supercomputer system implementation 
levoy proposed factorization volume rendering parallel supercomputer 
achieved rendering rates hz datasets hybrid order direct volume rendering method 
method factors projection shear image warp operation 
shear performed axis aligned slices dataset special compressed data structure efficiency expense preprocessing 
silva developed efficient subdivision parallel volume rendering pvr binary swap compositing method 
implemented various algorithms commodity supercomputers latency bandwidth bottleneck computation 
general purpose hardware general purpose graphics hardware accelerators available computational power bandwidth deliver volume rendering interactive frame rates assumed hz 
unc machine power bandwidth texture image subsystem provide interactive volume rendering small datasets 
power comes expense hardware infeasible number boards required 
system programmable simd hardware allow simple volume rendering programs access volume interpolate samples classify shade samples composite results 
developed programmable hardware accelerate various rendering tasks 
programmable able perform volume rendering methods described 
various algorithms implemented success sgi graphics hardware 
provides hardware acceleration solid texture mapping triangle vertices texture coordinates 
rendered pixel texture coordinates interpolated texture value resampled 
value turn index hardware look table lut operates transfer function 
oriented slices parallel image plane composited back front blending hardware available frame buffer 
achieved unshaded constrained view volume rendering datasets hz 
van gelder kim incorporated directional lighting recomputing shaded color volume time directional lighting volume rotation changed 
garrett utilized texture mapping blending hardware render ultrasound volumes real time novel construction dual bsp trees 
realized conventional ray casting volume rendering pipeline hardware acceleration parallel cpu processing achieve highquality shaded volume renderings near interactive rates 
technique involves pre computing smoothed gradient volume storing solid rgb texture sgi hardware 
rgb texture component stores gradient estimate shading density classification 
planes volume parallel perpendicular image plane quickly resampled texture mapping hardware 
hardware unable accurately shade classify data gradients resampled values passed main memory complete rendering 
parallel methods exploited expedite shading compositing serialized hardware resampling bottlenecks computation 
uniprocessor machines texture hardware method attains rendering rates approaching shear warp algorithm 
special purpose hardware fulfill special requirements high speed volume visualization architectures pro posed built commodity items 
voxel processor earliest proposed volume visualization system physician workstation proposed realtime medical volume viewing custom hardware accelerator 
voxel display processor set parallel processing elements pe stored sub cube dataset 
pe projected sub cube parallel distributed buffer subsequently merged image 
depth image shaded gordon reynolds depth shading 
prototype constructed generated arbitrary projections second connected vax host 
scope early volume viewing architecture described 
defined objects represented picture element array 
visualized ray casting zero order interpolation find visible voxel ray 
gradient estimated image nearest neighbor search find nearby voxels lie surface 
higher quality mode enables form interpolation sampling estimated value determined distance weighted average surrounding binary valued voxels 
higher quality shading method gradient estimated screen space adaptive function points points itwas suggested broken sub parallel rendering followed composition sub images 
scope advanced time pushed past voxel drawing methods period favor sampling continuous volumetric field 
scalable method parallel volume rendering 
scope extended handle perspective projections original ray casting method ignored voxels divergent rays 
simplifies perspective transformations assuming voxels beam projected evenly spaced screen space poor approximation 
project full beam voxels perspective pro rex ray parameters luts clip planes rendering mode final colored pixels shader compos architectural overview required rest projected dda method buffer 
shading processor performs depth shading object identifier field buffer gradient falsely blend objects 
proposed compact volume rendering accelerator implements conventional volume rendering ray casting pipeline proposed 
accelerator originally called voxel engine real time visualization examination attempts implement direct volumetric ray casting special way interleaved memory system 
ported voxel memory supplies complete neighborhood trilinear interpolation cycle total memory bandwidth mb voxels cached subsequent memory accesses 
gradient estimation provides modes high speed mode high quality mode 
high speed mode uses sample surrounding voxels estimate gradient results sharply defined highlights occurs single memory cycle 
high quality mode estimates gradient full central difference takes additional voxel accesses obtain complete voxel neighborhood 
architecture consists address sequencer volume memory reconstructor extractor rex shading unit compositing unit see fig 

processes ray autonomously maximum rate defined memory system 
rex evaluates sample value gradient normal voxel block configuration bit block representation decision bits material cu redundant block coding bit word representing voxel block store volume dataset gradient specially designed square root pipeline 
design reconsidered context low cost pci coprocessor board 
fpga implementation able render perspective ray cast grayscale images volume second 
prototype visualization system composed board fpgas multiplier unit sram pci interface chip 
estimated asic technology double performance 
view independent shading shading segmentation compression computed pre process minutes 
dataset stored compressed main memory transferred system bus needed 
volume compressed unique lossy compression scheme called redundant block coding see fig 
bit word represents voxels 
coding scheme derived block truncation coding btc images 
block capable transmitted system bus cycle stores entire neighborhood necessary trilinear interpolations 
block stores gray values material identification segmentation bits determine nearest gray value voxel 
trilinear interpolation block simplified cl ln cu um li interpolation weight voxel having decision bit zero ui 
perspective viewing rays generated serially cpu pixel blocks improve coherence 
blocks retrieved cached board memory access 
specialized cache indexed manhattan distance viewpoint 
ray casting units parallelized fully utilize memory bandwidth 
cache misses coprocessor board compute samples second 
additional speed improvements distance coding space 
volume animation spatio temporal visualization achieved hard disks parallel sustain rendering volumes second 
ii ii improved original introducing image quality flexibility 
architecture remains front back volumetric ray tracing pci accelerator adds features board volume memory interactive shading classification distance coding enhanced segmentation 
preprocessing step encode distances generate gradients vector quantized indexed values stored table 
compression results maximum angular error degrees 
ray tracing operates translucent voxel distance coding early ray termination 
enhancement provides generous run time advantages datasets 
sampling performed exact trilinear interpolation voxels extracted ported skewed memory 
word memory contains voxels segmentation index gradients 
entire voxel neighborhood extracted ns memory cycle 
furthermore fast page mode fully utilize available bandwidth 
gradient interpolated nearest gradients giving value central difference executed interpolated samples unit apart gradients quantized case 
shading performed reflectance map 
volume segmented separate classification spaces delineated orthogonal planes tag field stored voxel 
board design see fig 
consists pci interface fpga control unit dsp memory control unit dsp pci interface luts memory unit cache controller memory memory memory memory cache trilinear interpolation unit shading compositing unit pci card layout ii unit mbit sram cache trilinear interpolation unit fpga shading compositing unit fpga dual ported sram shading table 
dual ported sram allows dsp concurrently fill shading table 
memory allows trilinear interpolations second caching voxels decreases memory bandwidth 
entirely translucent volume rendered seconds 
estimated render typical volume rays hz 
described array architecture volume rendering 
performs ray casting rotating planes voxels warp array passing rays ray array 
array group asic pipeline processing elements operate simd fashion local data connections 
actual ray casting rendering array restricted limited set viewpoints 
get full range viewpoints warp array performs swapping small rotations axis 
rays move incrementally data sampling depth integrating 
input memory double buffered real time puts viewed 
initial rays entire image generated dedicated dsp 
system simulated switch level hardware simulator 
estimated performance fpga implementation hz yielding images data sets 
architecture implements heidelberg ray tracing model 
augments basic model include arbitrary viewing perspective viewing features called ray tracing 
arbitrary viewing achieved rotating slices data optimized hardware separately ray casting slices bank dsps 
rotation performed back projection gaussian filter 
samples transmitted mb bus dsps selected dsp receives sample 
module system voxels second rotated visualized real time 
architecturally similar cube see sec 

uses essentially high bandwidth bus route voxels parallel processing elements 
primary difference uses memory modules gaussian filtered sampling fixed light sources restricted shadowing limited gradient estimation implemented hardware 
gradient estimated plane projected scanline main viewing direction parallel scanline 
installed hardware university heidelberg extensively clinical medical imaging 
key feature flexibility primarily gray value classification 
classification object identifier gray value 
architects suggested pre post interpolation classification implemented increase quality segmented images 
algorithms implemented dsps maximum intensity projection mip ray casting straightforward heidelberg ray tracing ray tracing 
main mip angiography blood vessels primarily visible 
mip unsuitable volume data 
heidelberg ray tracing gives lower contrast images ray tracing gives sharper images prone exhibit artifacts 
ray casting useful stereo viewing ray tracing shadows useful determining depth stereo vision 
concluded important incorporate algorithmic optimizations techniques space early ray termination adaptive 
space early ray termination considered sub cube sub cube basis speedup factor 
ii ii improves reducing memory bottleneck 
memory interface refined implementing newer technology smart caching prefetching basic design single memory interface unchanged 
boer rambus technology capable sustaining random byte transfers mb intelligent prefetching eliminate cache misses 
single memory module supply bandwidth render volume hz 
em cube see sec 
memory stored sub cubes stored single dram page 
rendering proceeds scanline scanline sub cubes entire scanline slice prefetched caches 
achieve higher frame rates handle higher resolutions multiple nodes connected ring network scales number nodes 
data move ring appropriate processors amount movement restricted degrees frame hz rendering rates 
degrees movement volume data move neighboring nodes 
predicted nodes system render datasets hz 
hardware architecture video rate smooth shading proposed similar design 
operates scanline scanline fashion fetching data single memory unit 
key feature architecture smoothed central difference gradient filter 
data streamed cubic window organized set registers shift cycle 
concluded smoothed gradient computation called cubic shading smoothed window closer analytical gradient standard central difference computation 
presents bit shading lut simplifies architecture reduces quality somewhat 
serial design incapable video rate ing parallelized implemented advanced semiconductor technology 
hierarchical object order volume rendering architecture 
recursively accumulates images sub cubes composite final image 
composition performed parallel processors image space decomposition 
projection processors image assemblers system capable hz rendering rate volume image 
linear scalability claimed object image processors added 
architecture unique mentions possibility rendering discretized geometry regular volumetric data 
unfortunately describe scalable method may overlap compositing performed image space 
image quality diminished choice energy projection splatting generate sub images 
div distributed volume visualization architecture div architecture performs conventional ray casting linear array custom processors 
architecture derived cube implemented dsps increased flexibility cost size 
processors contain distributed skewed memory organized sub cubes size due skewed organization processor communicates ray information primarily nearest neighbors 
memory replicated borders avoid extra communication percent storage premium 
global communication final pixel data method scalable 
achieve hz frame rates volume processing elements chips required 
architecture closely resembles em cube see sec 
block skewing div performs straightforward ray casting capitalize available coherence 
architecture decoupled pipelined maximum throughput may realized 
architecture contains instruction set 
commands decoded scheduled obtain maximum performance 
implementation partitioned chips pe including memory gp scanner cfb vp fb vp interaction screen cube architecture high level organization cube family architectures volume rendering architecture longest history cube 
cube spanning cube architecture provides complete real time volume rendering visualization system 
mass market version cube introduced providing real time volume rendering volumes hz inclusion desktop personal computer 
cube earliest known volume visualization architectures cube workstation cellular frame buffer put forth kaufman 
complete system described embraced voxels fundamental unit graphical representation 
architecture see fig 
combined synthesis manipulation rendering voxels heart new system 
applications system explored including direct interaction volumetric objects virtual reality devices 
central component cubic frame buffer cfb new objects placed orthogonal projections 
frame buffer processor manipulates data cfb inserting scanned data transforming existing data 
geometry processor gp synthesizes geometric primitives lines planes spheres cones cylinders cfb 
viewing processor vp extracts orthogonal projections cfb 
skewing generate image voxels need read quickly 
special memory organization developed basis generations cube family architectures 
memory interleaved memory modules skewing function maps voxel coordinates memory module number index zp unique organization allows conflict free access beam voxels major direction 
guaranteed skewing function exactly coordinates change orthogonal beam increments modulo long memory modules complete beam access memory module exactly 
organization guarantees connected voxel neighbors stored adjoining modules 
skewing cube permit rays pass entire volume passed pipeline pipeline nearest neighbor communication 
projection general time complexity volume rendering linear dimension dataset 
vp processors able process entire beam log time specially designed voxel multiple write bus 
beams projection time complexity log 
performs depth sorting necessary project opaque voxel line sight 
depth sorting occurs logarithmic time bits depth value tested time winner round allowed continue 
bits tested remaining voxel selected occupy corresponding pixel frame buffer 
transparent voxels selected having value equal transmitted transparent value bus 
opaque compete depth visibility 
simulated additional pass selects translucent voxel modulates opaque voxel color 
non axis aligned projections generated rotating volume place projecting normally resolution prototype cube architecture major direction 
rotations performed sequence beam shifting operations incremental rotation arithmetic 
due skewing cfb voxels shift memory modules beam transfer 
arbitrary shifting efficiently handled enhanced barrel shifting mechanism appropriately named conveyor 
represented effort cube architecture handle global communication requirements oriented volume rendering 
variations bus see sec 
local ray passing see sec 

goel mukherjee designed optimized version cube 
design cfb divided frame buffers sfb size stored memory modules 
processors step planes voxels select opaque voxel ray 
total required optimal 
technique decrease amount time needed rotate volume arbitrary projections 
implementation cube concept proven wire wrapped prototype see fig 

projections generated ms scalability results leads predicted frame rate hz volume 
main problems implementation cube large physical size long settling time 
improve characteristics cube developed 
resolution cube vlsi implementation containing transistors micron double metal cmos bulk dip package 
cube cube implemented vlsi version cube see fig 

single chip contained memory processing cube board 
included memory module bytes memory addressing unit projection processing unit unit control depth sectioning 
chips occupy integrated circuit board interface occupies board 
boards installed ibm computer form complete interactive volume visualization system 
cube cube implements higher order form volume rendering greater flexibility cost complex implementation increased hardware 
cube essentially allows arbitrary directional rendering volume pre processing step orient major direction 
dataset rotated place resampled needed arbitrary parallel projections 
adopts template volume viewing algorithm yagel kaufman 
method pre computes ray stepping template connected discrete rays 
rays originate base plane near side volume cube perpendicular viewer 
ray replicated pixels lie base plane rays completely cover volume sampling 
inherent cubic frame buffer final pixel slanted prp viewing ray ray projection tree skewed buffer viewing ray conceptual architecture cube ray parallel cube beam parallel cube slice parallel cube various parallel volume scanning techniques 
shaded voxels processed simultaneously arrows indicate direction processing 
template algorithm warping step projects base plane final image plane 
directly tracing rays arbitrary directions cube avoids rotation required earlier architecture 
cube retains modules cfb high bandwidth memory access 
cube connects memory processing elements barrel shifting mechanism see fig 

barrel shifter necessary align voxels slanted ray orthogonally 
processing occurs oriented plane called projection ray plane prp 
plane oriented contains viewing direction horizontal vertical beam base plane see figs 

processing occurs scanline order horizontal vertical base plane 
image warp allows free rotation viewing direction scanlines may freely rotated cfb dsb shader vcu cfb dsb shader fast bus vcu host cfb dsb shader vcu conceptual architecture cube projection 
hybrid opposed image object order algorithm allows deterministic access dataset providing arbitrary projections 
beams prp accessed time stored horizontally skewed buffer dsb 
buffer dual ported allows simultaneous storage horizontal beams access vertical beams 
horizontal beams shifted dsb vertical beams correspond full rays processed parallel voxel combination units form ray projection tree rpt 
ray projection tree works similarly earlier performs arbitrary depth integration including maximum value opaque compositing pipelined produce new result cycles log cycles 
dsb skewed front voxel placed front vcu rpt 
sequential ray front voxel placed consecutive skewing 
second necessary perform arbitrary shifting voxels placed rpt 
concept barrel shifting eventually gave way circular connections cube 
prior cube designs fast foundations volume sampling rendering fully developed architecture unable provide higher order sampling shading 
technical challenges prompt development cube architecture theoretical considerations 
volume visualization theory advanced idea voxels homogenous cubes data point samples continuous field 
realization came necessity sampling discrete rays voxels tri quadratically tri interpolated locations field 
trilinear interpolation requires access voxels computation linear interpolations sample 
leap requirements necessitated new methods handle increased bandwidth computations efficiently 
cube improves quality rendering supporting full interpolation samples ray accurate gray level gradient estimation flexible volumetric shading 
support interpolation gradient estimation access rays current ray necessary 
reason dsb extended store planes voxels projected viewing coordinate system 
methods realistic shading improved 
shading mechanism cube cube shading uses discrete depth values local neighborhood pixels estimate normal shading purposes 
depth discontinuities edge object errors heightened shading technique avoids values depth discontinuities 
theory volumetric fields advanced sampling performed arbitrary locations ray gradient needed estimated location 
bernstein proposed gray level gradient estimates direction maximum gradient point volumetric field 
gray level gradient computed central differences major directions 
basis central difference order taylor series approximation derivative volumetric field 
cube stores visible voxel pixel neighbors selected voxel generally unavailable new method shading required leading development cube 
cube eliminated barrel shifting network replaced fast bus see fig 
capable routing voxels cfb modules dsb modules 
second barrel shifting network eliminated altogether voxels flow dsb units resampled 
samples flow directly abc shading units shaded samples flow need barrel shifting network 
idea simple connect ends binary tree form cone ray projection cone rpc 
allows arbitrary selection front back depth integration 
necessary set bit denote start ray 
cube idea eliminate fast bus see sec 

pipelined interpolation engine gathers appropriate voxels dsb resamples values 
method complicated fact voxels accessed sheared space 
fortunately resampling weights rays template computed volume 
resampling simplified computing trilinear interpolation bilinear interpolations followed linear interpolation 
bilinear interpolations computed ray slice reused sampling location 
quality studies showed error introduced due sheared interpolation percent relative euclidean error 
gradient estimation occurs sheared space 
abc shading units store planes samples current plane samples complete neighborhood available gradient estimation 
options available computation neighborhood 
neighborhood samples filter swap change base plane occurring viewing degrees 
neighborhood method avoids swap interpolating samples orthogonal ray providing smooth transitions base plane changes high image quality 
shown average angular error magnitude reduced neighborhood neighborhood gradient estimation 
cube cube provide real time rendering volumes cost size hardware unreasonable 
prompted development cube avoids global communication pixel level see fig 

primary distinction cube passes rays processing elements passing voxel data 
cube cfb shader compos cfb shader compos host pixel bus cfb shader compos conceptual architecture cube data memory modules processing elements single channel bus cube hand reads distributed memory modules parallel directly pipelines processing elements pass rays necessary accommodate skewing volume traversal 
cube element processed unique portion ray voxels fetched random fast bus 
cube pipeline processes ray time rays passed pipelines deterministic manner fixed bandwith 
cube limited scalability bandwidth fast bus cube limited bandwidth pixel bus 
cube introduces new approaches parallelism called beam parallel slice parallel 
see fig 
comparison major parallel volume processing orders 
beam parallel processing cube works consecutive slanted ray planes cube accessing beams parallel image plane 
slice parallel processing cube works consecutive data slices parallel face dataset 
slice order turns better organization discrete stepping beam parallel approach complicates addressing interpolating voxels 
furthermore fixed size slices slice parallel approach simplifies storage 
slice order processing approach taken levoy shear warp factorization viewing transformation 
primary advantages cube shear warp performs accurate trilinear bilinear sampling requires pre computation stores copy dataset suitable efficient hardware implementation 
cube design tested hardware simulator hewlett packard research laboratories palo alto ca 
custom computing machine allows vlsi designs tested fractional design speeds 
consists hundreds plasma fpga chips bit ram controlled workstation scsi bus 
implementing cube design capable rendering datasets seconds mhz processing frequency 
concept compact scalable implementation developed simulator 
providing processing elements volume dataset cube allows just fraction processing units implemented re process arbitrarily large dataset 
partial beams tiled full beam continuous processing enabled innovative beam extension unit 
alternately subvolumes may processed sequentially similar sectioning described sec 

cube missing cube simple ability perform perspective projections 
perspective ray casting rays diverge travel away viewpoint possibly creating sampling gaps rear volume 
cube proposes average groups voxels rear volume prior resampling larger filter kernel may simulated 
sufficient normal viewing conditions small volumes requires extra processing steps planes precomputed weight tables additional logic 
bitter kaufman proposed cube rays resampled slice ray divergence handled continuously volume 
rays resampled slice energy filtered traversal giving anti aliasing free 
cube simplifies datapath control connections compact implementation 
cube currently implemented japan radio part real time ultrasound scanner 
em cube cube compact efficient required resources achieve required bandwidth processing power 
em cube promises efficient cube suitable low cost single pci board implementation currently underway mitsubishi electric 
complete single board solution available 
introducing blocking chip granularity skewing em cube able deliver required bandwidth chips possible 
concept sectioning chip die size pin count reduced 
single chip solution efficient render bit volumes hz 
em cube extended vocabulary cube providing multiple voxel formats greater flexibility 
em cube retains skewing characterizes cube family architectures chips 
chip memory pipelines simplify datapaths 
blocking factor determines number pipelines chip number linear voxels block 
blocking reduces inter chip communication factor communication necessary periphery block 
voxels block fetched cubes voxels called efficiently access data drams fast page mode 
reading entire mini block corresponding single dram page setup time mini block completely hidden full bandwidth memory utilized 
sectioning allows arbitrarily large volumes rendered fixed size buffers chip 
finite chip buffers finite image size rendered storing intermediate data chip 
reducing chip buffers processing capability increased dramatically leading compact implementation 
render larger volume intermediate data periodically loaded cost estimated percent additional time 
extended neighborhood required gradient estimation re read borders 
comparisons section various attributes volume rendering accelerators compared see fig 

success architecture dependent factors including performance quality cost scalability 
outlook provided 
architecture div cube cube cube cube algorithm image image object image image image hybrid hybrid passing data data data ray data data data ray perf volume image hz hz hz hz hz hz hz hz memory organ location way subcube subcube central 
distrib 
central 
skewed distrib 
skewed distrib 
skewed distrib 
way distrib 
skewed distrib 
samples feasible 
flexible 
scalability lg lg lg scalability scalability volume rendering architectures depends mainly underlying algorithm 
image order algorithms tend access dataset randomly attempts parallelism rely single high bandwidth mechanism read random memory locations 
attempts parallelize high bandwidth mechanism general 
object order algorithms parallelize nicely object space assemble parts image space 
fortunately image space assembly tends order object space accesses order 
hybrid order algorithms tend greatest efficiency able perfectly parallelize object space traversal image assembly occurs object completely projected dimensions cube 
communication parallel algorithms classified method communication 
data stored distributed data travel rays computed rays travel data stored depth integration computed 
consequently methods may termed data passing ray passing 
scalable architectures designed ray passing cube successful architectures built data passing 
comparison various architectures quality higher quality images generated studied light transport algorithms ray tracing 
able capture multiple scattering effects light transport 
architectures suited higher order light transport simulation 
object order algorithms hand tend approximate depth integration incorrectly classify samples splatting 
object hybrid order algorithms tend exhibit directional dependence better quality images usually generated view direction aligned grid perspective cube 
multi resolution volume visualization carries problem approximation 
general possible capture non linear effects specular shading single element collection voxels 
accurate approximations multiresolution 
performance architectures claim real time hz performance dataset physical requirements achieve goals 
example cube require multiple vme board custom components cube ii require single pci card relatively custom components 
architectures rely opaque surfaces terminate processing early accelerate throughput ii 
numbers performance useful coupled scalability estimates demonstrates efficiency design potential higher resolution datasets necessary 
bottleneck refers amount hardware necessary scale architecture past current design point 
example image order designs single path memory bottleneck replaced difficult highbandwidth connection 
object order designs restrictive bottleneck increase performance linear amount hardware needs added significant penalties 
shown architectures hardware necessary transport pixels processing elements framebuffer 
small bus readily available commodity graphics hardware 
integration integration surfaces continuous volumes discrete image far limited painfully slow ray tracing 
method graphics industry simulate fog smoke effects 
medical visualization greatly enhanced patient volume data rendered surface surgical instruments 
hardware currently capable rendering surfaces volumes sgi rendering quality limited 
outlook realism tends direction progress realtime volume rendering hardware adopt efficient higher resolution architectures cube 
attempt incorporate higher quality features ray tracing shadows global illumination strive incorporate volume rendering standard computer graphics systems 
useful architectures allow high bandwidth scalable processing flexible rendering volume rendering accelerated imaging operations image rendering implemented new algorithms appear 
promising new algorithmic consideration volume rendering appears logarithmic time method levoy whitaker 
method extended support ray tracing 
extended higher quality intelligently cached image mip maps properly classify shade voxels standard mip maps 

ray tracing cones 
computer graphics siggraph proceedings volume pages july 
avila 
haptic interaction method volume visualization 
ieee visualization pages oct 
kaufman pfister 
extended volume visualization system arbitrary parallel projection 
proceedings eurographics workshop graphics hardware sept 
kaufman 
xu 
cube building full scale vlsi volume visualization system 
th workshop graphics hardware sept 
bitter kaufman 
ray slice sweep volume rendering engine 
eurographics workshop graphics hardware pages aug 
blinn 
light reflection functions simulation clouds surfaces 
computer graphics siggraph proceedings volume pages july 
cam foran 
accelerated volume rendering tomographic reconstruction texture mapping hardware 
symposium volume visualization pages 
acm siggraph oct 
chiueh yang pfister kaufman 
integrated volume compression visualization 
ieee visualization pages nov 
cline lorensen crawford 
algorithms dimensional reconstruction 
medical physics may 
cohen 
conveyor interconnection device parallel volumetric transformations 
advances graphics hardware vi pages 
springer verlag berlin 
cohen kaufman bergman 
real time discrete shading 
visual computer 
cook porter carpenter 
distributed ray tracing 
computer graphics sig graph proceedings volume pages july 

real time slicing data space 
ieee visualization pages oct 
chen bitter kaufman 
high quality volume rendering texture mapping hardware 
appear siggraph eurographics workshop graphics hardware aug 
de boer gr pel nner 
latency hazard free volume memory architecture direct volume rendering 
eurographics workshop graphics hardware pages 
de boer gr pel gunther reinhart nner 
evaluation real time direct volume rendering system 
eurographics workshop graphics hardware pages 

array design real time volume rendering 
eurographics workshop graphics hardware pages aug 

hardware architecture video rate smooth shading volume data 
eurographics workshop graphics hardware pages sept 
carpenter hanrahan 
volume rendering 
computer graphics sig graph proceedings volume pages aug 
garrett fuchs state 
real time incremental visualization dynamic ultrasound volumes parallel bsp trees 
ieee visualization pages oct 
goel mukherjee 
optimal architecture volume rendering 
parallel rendering symposium 
ieee cs oct 
goldwasser reynolds baraff summers walsh 
physicians workstation real time performance 
ieee computer graphics applications dec 
gordon reynolds 
image space shading dimensional objects 
computer vision graphics image processing 
gross dittrich ring 
methods wavelet volume rendering 
computers graphics 
nther reinhart nner 

baur 
massively parallel processor real time volume visualization medicine 
eurographics workshop graphics hardware pages sept 
hanrahan 
pass affine transforms volume rendering 
computer graphics san diego workshop volume visualization volume pages nov 
bernstein 
shading ct gray level gradients 
ieee transactions medical imaging mi mar 
jensen christensen 
efficient simulation light transport scenes participating media photon maps 
computer graphics siggraph proceedings volume pages july 
hill 
interactive rendering volumetric data sets 
eurographics workshop graphics hardware pages sept 
kajiya von herzen 
ray tracing volume densities 
computer graphics sig graph proceedings volume pages july 
mei ner stra er pfister kaufman carter snider 
implementations cube custom computing machine 
computers graphics 
kaufman 
cube workstation voxel graphics environment 
visual computer oct 
kaufman 
cellular frame buffer 
eurographics pages sept 
kaufman 
memory processing architecture voxel imagery 
ieee computer graphics applications nov 
kaufman yagel 
direct interaction volumetric environment 
computer graphics symposium interactive graphics volume pages mar 

voxel engine realtime visualization examination 
eurographics sept 
stra er 
compact volume rendering accelerator 
symposium volume visualization pages oct 
stra er 
visualization accelerator realtime display 
eurographics workshop graphics hardware pages aug 
bitter chen kaufman 
adaptive perspective ray casting 
appear workshop volume visualization chapel hill nc 
krueger 
volume rendering data feature enhancement 
eurographics workshop visualization scientific computing pages 
levoy 
fast volume rendering shear warp factorization ot viewing transform 
computer graphics siggraph pages july 
levoy 
display surfaces volume data 
ieee computer graphics applications may 
levoy 
volume rendering fourier projection slice theorem 
proceedings graphics interface pages may 
levoy whitaker 
gaze directed volume rendering 
computer graphics proc 
symposium interactive graphics volume pages mar 

design fast voxel processor parallel volume visualization 
eurographics workshop graphics hardware pages aug 
lorensen cline 
marching cubes high resolution surface construction algorithm 
computer graphics siggraph volume pages july 
max 
panel simulation natural phenomena 
computer graphics siggraph panel proceedings volume pages 
mei ner stra er 
ii pci card real time volume rendering 
appear siggraph eurographics workshop graphics hardware aug 
ller mueller yagel 
classification local error estimation interpolation derivative filters volume rendering 
volume visualization symposium pages oct 
molnar 
high speed rendering image composition 
computer graphics siggraph proceedings volume pages july 
greenberg 
efficient method volume rendering perspective projection 
computer graphics san diego workshop volume visualization volume pages nov 
tokoro 
threedimensional shaded display method representation 
eurographics pages sept 
osborne pfister lauer mckenzie gibson 
em cube architecture low cost real time volume rendering 
eurographics workshop graphics hardware pages aug 
pfister kaufman 
real time architecture high resolution volume visualization 
proceedings th eurographics hardware workshop volume pages barcelona spain sept 
pfister kaufman chiueh 
cube real time architecture high resolution volume visualization 
workshop volume visualization pages washington dc oct 
pfister kaufman wessels 
scalable architecture real time volume rendering 
proceedings th eurographics workshop graphics hardware pages maastricht netherlands aug 
pfister kaufman 
cube scalable architecture real time volume rendering 
volume visualization symposium pages oct 
pfister wessels kaufman 
sheared interpolation gradient estimation real time volume rendering 
proceedings th eurographics hardware workshop pages oslo norway sept 

phong 
illumination computer generated pictures 
communications acm june 
porter duff 
compositing digital images 
computer graphics siggraph proceedings volume pages july 
saito 
real time previewing volume visualization 
symposium volume visualization pages oct 
gerth 
sampling antialiasing discrete volume density textures 
eurographics pages 
north holland sept 
sano kobayashi nakamura 
parallel processing shear warp factorization binary swap method distributed memory multiprocessor system 
ieee parallel rendering symposium pages nov 
shirley 
polygonal approximation direct scalar volume rendering 
computer graphics san diego workshop volume visualization volume pages nov 

unified hierarchical algorithm global illumination scattering volumes object clusters 
ieee transactions visualization computer graphics sept 
silva kaufman 
pvr high performance volume rendering 
ieee computational science engineering pages 
kaufman 
volumetric ray tracing 
symposium volume visualization pages oct 
tokoro 
solid colored object projection environment scope japanese 
transactions institute electronics communication engineers japan part japan apr 
upson keeler 
visible volume rendering 
computer graphics sig graph proceedings volume pages aug 
van gelder kim 
direct volume rendering shading dimensional textures 
volume visualization symposium pages oct 
van smit 
design chip reflectance map 
proceedings th eurographics workshop graphics hardware pages maastricht netherlands aug 
ward rubinstein clear 
ray tracing solution diffuse interreflection 
computer graphics siggraph proceedings volume pages aug 

footprint evaluation volume rendering 
computer graphics siggraph proceedings volume pages aug 
williams 
pyramidal 
computer graphics siggraph proceedings volume pages july 
yagel cohen kaufman 
discrete ray tracing 
ieee computer graphics applications mar 
yagel kaufman 
template volume viewing 
eurographics sept 
yagel kaufman zhang 
realistic volume imaging 
ieee visualization pages 
volume visualization algorithms architectures research proficiency exam frank center visual computing department computer science state university new york stony brook tel email cs sunysb edu www www cs sunysb edu advisor arie kaufman category format contact phone fax email estimated pages keywords 
